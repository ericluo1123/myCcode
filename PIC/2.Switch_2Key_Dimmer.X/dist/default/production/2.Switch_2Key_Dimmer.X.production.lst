

Microchip Technology PIC LITE Macro Assembler V1.32 build 58300 
                                                                                               Wed Oct 08 17:22:26 2014

Microchip Technology Omniscient Code Generator (Lite mode) build 58300
     1                           	processor	16F1518
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK3,global,class=CODE,delta=2
     5                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     6                           	psect	nvCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1
     8                           	psect	cinit,global,class=CODE,merge=1,delta=2
     9                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
    10                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    13                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    14                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1
    15                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    16                           	psect	clrtext,global,class=CODE,delta=2
    17                           	psect	inittext,global,class=CODE,delta=2
    18                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    19                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    20                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    21                           	psect	text1,local,class=CODE,merge=1,delta=2
    22                           	psect	text2,local,class=CODE,merge=1,delta=2
    23                           	psect	text3,local,class=CODE,merge=1,delta=2
    24                           	psect	text4,local,class=CODE,merge=1,delta=2
    25                           	psect	text5,local,class=CODE,merge=1,delta=2
    26                           	psect	text6,local,class=CODE,merge=1,delta=2
    27                           	psect	text7,local,class=CODE,merge=1,delta=2
    28                           	psect	text8,local,class=CODE,merge=1,delta=2
    29                           	psect	text9,local,class=CODE,merge=1,delta=2
    30                           	psect	text10,local,class=CODE,merge=1,delta=2
    31                           	psect	text11,local,class=CODE,merge=1,delta=2
    32                           	psect	text12,local,class=CODE,merge=1,delta=2
    33                           	psect	text13,local,class=CODE,merge=1,delta=2
    34                           	psect	text14,local,class=CODE,merge=1,delta=2
    35                           	psect	text15,local,class=CODE,merge=1,delta=2
    36                           	psect	text16,local,class=CODE,merge=1,delta=2
    37                           	psect	text17,local,class=CODE,merge=1,delta=2
    38                           	psect	text18,local,class=CODE,merge=1,delta=2
    39                           	psect	text19,local,class=CODE,merge=1,delta=2
    40                           	psect	text20,local,class=CODE,merge=1,delta=2
    41                           	psect	text21,local,class=CODE,merge=1,delta=2
    42                           	psect	text22,local,class=CODE,merge=1,delta=2
    43                           	psect	text23,local,class=CODE,merge=1,delta=2
    44                           	psect	text24,local,class=CODE,merge=1,delta=2
    45                           	psect	text25,local,class=CODE,merge=1,delta=2
    46                           	psect	text26,local,class=CODE,merge=1,delta=2
    47                           	psect	text27,local,class=CODE,merge=1,delta=2
    48                           	psect	text28,local,class=CODE,merge=1,delta=2
    49                           	psect	text29,local,class=CODE,merge=1,delta=2
    50                           	psect	text30,local,class=CODE,merge=1,delta=2
    51                           	psect	text31,local,class=CODE,merge=1,delta=2
    52                           	psect	text32,local,class=CODE,merge=1,delta=2
    53                           	psect	text33,local,class=CODE,merge=1,delta=2
    54                           	psect	text34,local,class=CODE,merge=1,delta=2
    55                           	psect	text35,local,class=CODE,merge=1,delta=2
    56                           	psect	text36,local,class=CODE,merge=1,delta=2
    57                           	psect	text37,local,class=CODE,merge=1,delta=2
    58                           	psect	text38,local,class=CODE,merge=1,delta=2
    59                           	psect	text39,local,class=CODE,merge=1,delta=2
    60                           	psect	text40,local,class=CODE,merge=1,delta=2
    61                           	psect	text41,local,class=CODE,merge=1,delta=2
    62                           	psect	text42,local,class=CODE,merge=1,delta=2
    63                           	psect	text43,local,class=CODE,merge=1,delta=2
    64                           	psect	text44,local,class=CODE,merge=1,delta=2
    65                           	psect	text45,local,class=CODE,merge=1,delta=2
    66                           	psect	text46,local,class=CODE,merge=1,delta=2
    67                           	psect	text47,local,class=CODE,merge=1,delta=2
    68                           	psect	text48,local,class=CODE,merge=1,delta=2
    69                           	psect	text49,local,class=CODE,merge=1,delta=2
    70                           	psect	text50,local,class=CODE,merge=1,delta=2
    71                           	psect	text51,local,class=CODE,merge=1,delta=2
    72                           	psect	text52,local,class=CODE,merge=1,delta=2
    73                           	psect	text53,local,class=CODE,merge=1,delta=2
    74                           	psect	text54,local,class=CODE,merge=1,delta=2
    75                           	psect	text55,local,class=CODE,merge=1,delta=2
    76                           	psect	text56,local,class=CODE,merge=1,delta=2
    77                           	psect	text57,local,class=CODE,merge=1,delta=2
    78                           	psect	text58,local,class=CODE,merge=1,delta=2
    79                           	psect	text59,local,class=CODE,merge=1,delta=2
    80                           	psect	text60,local,class=CODE,merge=1,delta=2
    81                           	psect	text61,local,class=CODE,merge=1,delta=2
    82                           	psect	text62,local,class=CODE,merge=1,delta=2
    83                           	psect	text63,local,class=CODE,merge=1,delta=2
    84                           	psect	text64,local,class=CODE,merge=1,delta=2
    85                           	psect	text65,local,class=CODE,merge=1,delta=2
    86                           	psect	text66,local,class=CODE,merge=1,delta=2
    87                           	psect	text67,local,class=CODE,merge=1,delta=2
    88                           	psect	text68,local,class=CODE,merge=1,delta=2
    89                           	psect	text69,local,class=CODE,merge=1,delta=2
    90                           	psect	text70,local,class=CODE,merge=1,inline,delta=2
    91                           	psect	text71,local,class=CODE,merge=1,delta=2
    92                           	psect	text72,local,class=CODE,merge=1,delta=2
    93                           	psect	text73,local,class=CODE,merge=1,delta=2
    94                           	psect	text74,local,class=CODE,merge=1,delta=2
    95                           	psect	text75,local,class=CODE,merge=1,delta=2
    96                           	psect	text76,local,class=CODE,merge=1,delta=2
    97                           	psect	text77,local,class=CODE,merge=1,delta=2
    98                           	psect	text78,local,class=CODE,merge=1,delta=2
    99                           	psect	text79,local,class=CODE,merge=1,delta=2
   100                           	psect	text80,local,class=CODE,merge=1,delta=2
   101                           	psect	text81,local,class=CODE,merge=1,delta=2
   102                           	psect	text82,local,class=CODE,merge=1,delta=2
   103                           	psect	text83,local,class=CODE,merge=1,delta=2
   104                           	psect	text84,local,class=CODE,merge=1,delta=2
   105                           	psect	text85,local,class=CODE,merge=1,delta=2
   106                           	psect	text86,local,class=CODE,merge=1,delta=2
   107                           	psect	text87,local,class=CODE,merge=1,delta=2
   108                           	psect	text88,local,class=CODE,merge=1,delta=2
   109                           	psect	text89,local,class=CODE,merge=1,delta=2
   110                           	psect	text90,local,class=CODE,merge=1,delta=2
   111                           	psect	text91,local,class=CODE,merge=1,delta=2
   112                           	psect	text92,local,class=CODE,merge=1,delta=2
   113                           	psect	text93,local,class=CODE,merge=1,delta=2
   114                           	psect	text94,local,class=CODE,merge=1,delta=2
   115                           	psect	text95,local,class=CODE,merge=1,delta=2
   116                           	psect	text96,local,class=CODE,merge=1,delta=2
   117                           	psect	text97,local,class=CODE,merge=1,delta=2
   118                           	psect	text98,local,class=CODE,merge=1,delta=2
   119                           	psect	text99,local,class=CODE,merge=1,delta=2
   120                           	psect	text100,local,class=CODE,merge=1,delta=2
   121                           	psect	text101,local,class=CODE,merge=1,delta=2
   122                           	psect	text102,local,class=CODE,merge=1,delta=2
   123                           	psect	text103,local,class=CODE,merge=1,delta=2
   124                           	psect	text104,local,class=CODE,merge=1,delta=2
   125                           	psect	text105,local,class=CODE,merge=1,delta=2
   126                           	psect	text106,local,class=CODE,merge=1,delta=2
   127                           	psect	intentry,global,class=CODE,delta=2
   128                           	psect	text108,local,class=CODE,merge=1,delta=2
   129                           	psect	text109,local,class=CODE,merge=1,inline,delta=2
   130                           	psect	text110,local,class=CODE,merge=1,inline,delta=2
   131                           	psect	text111,local,class=CODE,merge=1,delta=2
   132                           	psect	text112,local,class=CODE,merge=1,inline,delta=2
   133                           	psect	text113,local,class=CODE,merge=1,inline,delta=2
   134                           	psect	text114,local,class=CODE,merge=1,inline,delta=2
   135                           	psect	text115,local,class=CODE,merge=1,delta=2
   136                           	psect	text116,local,class=CODE,merge=1,delta=2
   137                           	psect	text117,local,class=CODE,merge=1,delta=2
   138                           	psect	text118,local,class=CODE,merge=1,delta=2
   139                           	dabs	1,0x7E,2
   140  0000                     	;# 
   141  0001                     	;# 
   142  0002                     	;# 
   143  0003                     	;# 
   144  0004                     	;# 
   145  0005                     	;# 
   146  0006                     	;# 
   147  0007                     	;# 
   148  0008                     	;# 
   149  0009                     	;# 
   150  000A                     	;# 
   151  000B                     	;# 
   152  000C                     	;# 
   153  000D                     	;# 
   154  000E                     	;# 
   155  0010                     	;# 
   156  0011                     	;# 
   157  0012                     	;# 
   158  0015                     	;# 
   159  0016                     	;# 
   160  0016                     	;# 
   161  0017                     	;# 
   162  0018                     	;# 
   163  0019                     	;# 
   164  001A                     	;# 
   165  001B                     	;# 
   166  001C                     	;# 
   167  008C                     	;# 
   168  008D                     	;# 
   169  008E                     	;# 
   170  0090                     	;# 
   171  0091                     	;# 
   172  0092                     	;# 
   173  0095                     	;# 
   174  0096                     	;# 
   175  0097                     	;# 
   176  0099                     	;# 
   177  009A                     	;# 
   178  009B                     	;# 
   179  009B                     	;# 
   180  009C                     	;# 
   181  009D                     	;# 
   182  009E                     	;# 
   183  010C                     	;# 
   184  010D                     	;# 
   185  010E                     	;# 
   186  0116                     	;# 
   187  0117                     	;# 
   188  011D                     	;# 
   189  018C                     	;# 
   190  018D                     	;# 
   191  018E                     	;# 
   192  0191                     	;# 
   193  0191                     	;# 
   194  0192                     	;# 
   195  0193                     	;# 
   196  0193                     	;# 
   197  0194                     	;# 
   198  0195                     	;# 
   199  0196                     	;# 
   200  0197                     	;# 
   201  0199                     	;# 
   202  019A                     	;# 
   203  019B                     	;# 
   204  019B                     	;# 
   205  019B                     	;# 
   206  019B                     	;# 
   207  019C                     	;# 
   208  019C                     	;# 
   209  019D                     	;# 
   210  019E                     	;# 
   211  019F                     	;# 
   212  020D                     	;# 
   213  0210                     	;# 
   214  0211                     	;# 
   215  0211                     	;# 
   216  0212                     	;# 
   217  0212                     	;# 
   218  0213                     	;# 
   219  0213                     	;# 
   220  0214                     	;# 
   221  0214                     	;# 
   222  0215                     	;# 
   223  0215                     	;# 
   224  0215                     	;# 
   225  0216                     	;# 
   226  0216                     	;# 
   227  0217                     	;# 
   228  0217                     	;# 
   229  0291                     	;# 
   230  0291                     	;# 
   231  0292                     	;# 
   232  0293                     	;# 
   233  0298                     	;# 
   234  0298                     	;# 
   235  0299                     	;# 
   236  029A                     	;# 
   237  0394                     	;# 
   238  0395                     	;# 
   239  0396                     	;# 
   240  0FE4                     	;# 
   241  0FE5                     	;# 
   242  0FE6                     	;# 
   243  0FE7                     	;# 
   244  0FE8                     	;# 
   245  0FE9                     	;# 
   246  0FEA                     	;# 
   247  0FEB                     	;# 
   248  0FED                     	;# 
   249  0FEE                     	;# 
   250  0FEF                     	;# 
   251  0000                     	;# 
   252  0001                     	;# 
   253  0002                     	;# 
   254  0003                     	;# 
   255  0004                     	;# 
   256  0005                     	;# 
   257  0006                     	;# 
   258  0007                     	;# 
   259  0008                     	;# 
   260  0009                     	;# 
   261  000A                     	;# 
   262  000B                     	;# 
   263  000C                     	;# 
   264  000D                     	;# 
   265  000E                     	;# 
   266  0010                     	;# 
   267  0011                     	;# 
   268  0012                     	;# 
   269  0015                     	;# 
   270  0016                     	;# 
   271  0016                     	;# 
   272  0017                     	;# 
   273  0018                     	;# 
   274  0019                     	;# 
   275  001A                     	;# 
   276  001B                     	;# 
   277  001C                     	;# 
   278  008C                     	;# 
   279  008D                     	;# 
   280  008E                     	;# 
   281  0090                     	;# 
   282  0091                     	;# 
   283  0092                     	;# 
   284  0095                     	;# 
   285  0096                     	;# 
   286  0097                     	;# 
   287  0099                     	;# 
   288  009A                     	;# 
   289  009B                     	;# 
   290  009B                     	;# 
   291  009C                     	;# 
   292  009D                     	;# 
   293  009E                     	;# 
   294  010C                     	;# 
   295  010D                     	;# 
   296  010E                     	;# 
   297  0116                     	;# 
   298  0117                     	;# 
   299  011D                     	;# 
   300  018C                     	;# 
   301  018D                     	;# 
   302  018E                     	;# 
   303  0191                     	;# 
   304  0191                     	;# 
   305  0192                     	;# 
   306  0193                     	;# 
   307  0193                     	;# 
   308  0194                     	;# 
   309  0195                     	;# 
   310  0196                     	;# 
   311  0197                     	;# 
   312  0199                     	;# 
   313  019A                     	;# 
   314  019B                     	;# 
   315  019B                     	;# 
   316  019B                     	;# 
   317  019B                     	;# 
   318  019C                     	;# 
   319  019C                     	;# 
   320  019D                     	;# 
   321  019E                     	;# 
   322  019F                     	;# 
   323  020D                     	;# 
   324  0210                     	;# 
   325  0211                     	;# 
   326  0211                     	;# 
   327  0212                     	;# 
   328  0212                     	;# 
   329  0213                     	;# 
   330  0213                     	;# 
   331  0214                     	;# 
   332  0214                     	;# 
   333  0215                     	;# 
   334  0215                     	;# 
   335  0215                     	;# 
   336  0216                     	;# 
   337  0216                     	;# 
   338  0217                     	;# 
   339  0217                     	;# 
   340  0291                     	;# 
   341  0291                     	;# 
   342  0292                     	;# 
   343  0293                     	;# 
   344  0298                     	;# 
   345  0298                     	;# 
   346  0299                     	;# 
   347  029A                     	;# 
   348  0394                     	;# 
   349  0395                     	;# 
   350  0396                     	;# 
   351  0FE4                     	;# 
   352  0FE5                     	;# 
   353  0FE6                     	;# 
   354  0FE7                     	;# 
   355  0FE8                     	;# 
   356  0FE9                     	;# 
   357  0FEA                     	;# 
   358  0FEB                     	;# 
   359  0FED                     	;# 
   360  0FEE                     	;# 
   361  0FEF                     	;# 
   362  0000                     	;# 
   363  0001                     	;# 
   364  0002                     	;# 
   365  0003                     	;# 
   366  0004                     	;# 
   367  0005                     	;# 
   368  0006                     	;# 
   369  0007                     	;# 
   370  0008                     	;# 
   371  0009                     	;# 
   372  000A                     	;# 
   373  000B                     	;# 
   374  000C                     	;# 
   375  000D                     	;# 
   376  000E                     	;# 
   377  0010                     	;# 
   378  0011                     	;# 
   379  0012                     	;# 
   380  0015                     	;# 
   381  0016                     	;# 
   382  0016                     	;# 
   383  0017                     	;# 
   384  0018                     	;# 
   385  0019                     	;# 
   386  001A                     	;# 
   387  001B                     	;# 
   388  001C                     	;# 
   389  008C                     	;# 
   390  008D                     	;# 
   391  008E                     	;# 
   392  0090                     	;# 
   393  0091                     	;# 
   394  0092                     	;# 
   395  0095                     	;# 
   396  0096                     	;# 
   397  0097                     	;# 
   398  0099                     	;# 
   399  009A                     	;# 
   400  009B                     	;# 
   401  009B                     	;# 
   402  009C                     	;# 
   403  009D                     	;# 
   404  009E                     	;# 
   405  010C                     	;# 
   406  010D                     	;# 
   407  010E                     	;# 
   408  0116                     	;# 
   409  0117                     	;# 
   410  011D                     	;# 
   411  018C                     	;# 
   412  018D                     	;# 
   413  018E                     	;# 
   414  0191                     	;# 
   415  0191                     	;# 
   416  0192                     	;# 
   417  0193                     	;# 
   418  0193                     	;# 
   419  0194                     	;# 
   420  0195                     	;# 
   421  0196                     	;# 
   422  0197                     	;# 
   423  0199                     	;# 
   424  019A                     	;# 
   425  019B                     	;# 
   426  019B                     	;# 
   427  019B                     	;# 
   428  019B                     	;# 
   429  019C                     	;# 
   430  019C                     	;# 
   431  019D                     	;# 
   432  019E                     	;# 
   433  019F                     	;# 
   434  020D                     	;# 
   435  0210                     	;# 
   436  0211                     	;# 
   437  0211                     	;# 
   438  0212                     	;# 
   439  0212                     	;# 
   440  0213                     	;# 
   441  0213                     	;# 
   442  0214                     	;# 
   443  0214                     	;# 
   444  0215                     	;# 
   445  0215                     	;# 
   446  0215                     	;# 
   447  0216                     	;# 
   448  0216                     	;# 
   449  0217                     	;# 
   450  0217                     	;# 
   451  0291                     	;# 
   452  0291                     	;# 
   453  0292                     	;# 
   454  0293                     	;# 
   455  0298                     	;# 
   456  0298                     	;# 
   457  0299                     	;# 
   458  029A                     	;# 
   459  0394                     	;# 
   460  0395                     	;# 
   461  0396                     	;# 
   462  0FE4                     	;# 
   463  0FE5                     	;# 
   464  0FE6                     	;# 
   465  0FE7                     	;# 
   466  0FE8                     	;# 
   467  0FE9                     	;# 
   468  0FEA                     	;# 
   469  0FEB                     	;# 
   470  0FED                     	;# 
   471  0FEE                     	;# 
   472  0FEF                     	;# 
   473  0000                     	;# 
   474  0001                     	;# 
   475  0002                     	;# 
   476  0003                     	;# 
   477  0004                     	;# 
   478  0005                     	;# 
   479  0006                     	;# 
   480  0007                     	;# 
   481  0008                     	;# 
   482  0009                     	;# 
   483  000A                     	;# 
   484  000B                     	;# 
   485  000C                     	;# 
   486  000D                     	;# 
   487  000E                     	;# 
   488  0010                     	;# 
   489  0011                     	;# 
   490  0012                     	;# 
   491  0015                     	;# 
   492  0016                     	;# 
   493  0016                     	;# 
   494  0017                     	;# 
   495  0018                     	;# 
   496  0019                     	;# 
   497  001A                     	;# 
   498  001B                     	;# 
   499  001C                     	;# 
   500  008C                     	;# 
   501  008D                     	;# 
   502  008E                     	;# 
   503  0090                     	;# 
   504  0091                     	;# 
   505  0092                     	;# 
   506  0095                     	;# 
   507  0096                     	;# 
   508  0097                     	;# 
   509  0099                     	;# 
   510  009A                     	;# 
   511  009B                     	;# 
   512  009B                     	;# 
   513  009C                     	;# 
   514  009D                     	;# 
   515  009E                     	;# 
   516  010C                     	;# 
   517  010D                     	;# 
   518  010E                     	;# 
   519  0116                     	;# 
   520  0117                     	;# 
   521  011D                     	;# 
   522  018C                     	;# 
   523  018D                     	;# 
   524  018E                     	;# 
   525  0191                     	;# 
   526  0191                     	;# 
   527  0192                     	;# 
   528  0193                     	;# 
   529  0193                     	;# 
   530  0194                     	;# 
   531  0195                     	;# 
   532  0196                     	;# 
   533  0197                     	;# 
   534  0199                     	;# 
   535  019A                     	;# 
   536  019B                     	;# 
   537  019B                     	;# 
   538  019B                     	;# 
   539  019B                     	;# 
   540  019C                     	;# 
   541  019C                     	;# 
   542  019D                     	;# 
   543  019E                     	;# 
   544  019F                     	;# 
   545  020D                     	;# 
   546  0210                     	;# 
   547  0211                     	;# 
   548  0211                     	;# 
   549  0212                     	;# 
   550  0212                     	;# 
   551  0213                     	;# 
   552  0213                     	;# 
   553  0214                     	;# 
   554  0214                     	;# 
   555  0215                     	;# 
   556  0215                     	;# 
   557  0215                     	;# 
   558  0216                     	;# 
   559  0216                     	;# 
   560  0217                     	;# 
   561  0217                     	;# 
   562  0291                     	;# 
   563  0291                     	;# 
   564  0292                     	;# 
   565  0293                     	;# 
   566  0298                     	;# 
   567  0298                     	;# 
   568  0299                     	;# 
   569  029A                     	;# 
   570  0394                     	;# 
   571  0395                     	;# 
   572  0396                     	;# 
   573  0FE4                     	;# 
   574  0FE5                     	;# 
   575  0FE6                     	;# 
   576  0FE7                     	;# 
   577  0FE8                     	;# 
   578  0FE9                     	;# 
   579  0FEA                     	;# 
   580  0FEB                     	;# 
   581  0FED                     	;# 
   582  0FEE                     	;# 
   583  0FEF                     	;# 
   584  0000                     	;# 
   585  0001                     	;# 
   586  0002                     	;# 
   587  0003                     	;# 
   588  0004                     	;# 
   589  0005                     	;# 
   590  0006                     	;# 
   591  0007                     	;# 
   592  0008                     	;# 
   593  0009                     	;# 
   594  000A                     	;# 
   595  000B                     	;# 
   596  000C                     	;# 
   597  000D                     	;# 
   598  000E                     	;# 
   599  0010                     	;# 
   600  0011                     	;# 
   601  0012                     	;# 
   602  0015                     	;# 
   603  0016                     	;# 
   604  0016                     	;# 
   605  0017                     	;# 
   606  0018                     	;# 
   607  0019                     	;# 
   608  001A                     	;# 
   609  001B                     	;# 
   610  001C                     	;# 
   611  008C                     	;# 
   612  008D                     	;# 
   613  008E                     	;# 
   614  0090                     	;# 
   615  0091                     	;# 
   616  0092                     	;# 
   617  0095                     	;# 
   618  0096                     	;# 
   619  0097                     	;# 
   620  0099                     	;# 
   621  009A                     	;# 
   622  009B                     	;# 
   623  009B                     	;# 
   624  009C                     	;# 
   625  009D                     	;# 
   626  009E                     	;# 
   627  010C                     	;# 
   628  010D                     	;# 
   629  010E                     	;# 
   630  0116                     	;# 
   631  0117                     	;# 
   632  011D                     	;# 
   633  018C                     	;# 
   634  018D                     	;# 
   635  018E                     	;# 
   636  0191                     	;# 
   637  0191                     	;# 
   638  0192                     	;# 
   639  0193                     	;# 
   640  0193                     	;# 
   641  0194                     	;# 
   642  0195                     	;# 
   643  0196                     	;# 
   644  0197                     	;# 
   645  0199                     	;# 
   646  019A                     	;# 
   647  019B                     	;# 
   648  019B                     	;# 
   649  019B                     	;# 
   650  019B                     	;# 
   651  019C                     	;# 
   652  019C                     	;# 
   653  019D                     	;# 
   654  019E                     	;# 
   655  019F                     	;# 
   656  020D                     	;# 
   657  0210                     	;# 
   658  0211                     	;# 
   659  0211                     	;# 
   660  0212                     	;# 
   661  0212                     	;# 
   662  0213                     	;# 
   663  0213                     	;# 
   664  0214                     	;# 
   665  0214                     	;# 
   666  0215                     	;# 
   667  0215                     	;# 
   668  0215                     	;# 
   669  0216                     	;# 
   670  0216                     	;# 
   671  0217                     	;# 
   672  0217                     	;# 
   673  0291                     	;# 
   674  0291                     	;# 
   675  0292                     	;# 
   676  0293                     	;# 
   677  0298                     	;# 
   678  0298                     	;# 
   679  0299                     	;# 
   680  029A                     	;# 
   681  0394                     	;# 
   682  0395                     	;# 
   683  0396                     	;# 
   684  0FE4                     	;# 
   685  0FE5                     	;# 
   686  0FE6                     	;# 
   687  0FE7                     	;# 
   688  0FE8                     	;# 
   689  0FE9                     	;# 
   690  0FEA                     	;# 
   691  0FEB                     	;# 
   692  0FED                     	;# 
   693  0FEE                     	;# 
   694  0FEF                     	;# 
   695  0000                     	;# 
   696  0001                     	;# 
   697  0002                     	;# 
   698  0003                     	;# 
   699  0004                     	;# 
   700  0005                     	;# 
   701  0006                     	;# 
   702  0007                     	;# 
   703  0008                     	;# 
   704  0009                     	;# 
   705  000A                     	;# 
   706  000B                     	;# 
   707  000C                     	;# 
   708  000D                     	;# 
   709  000E                     	;# 
   710  0010                     	;# 
   711  0011                     	;# 
   712  0012                     	;# 
   713  0015                     	;# 
   714  0016                     	;# 
   715  0016                     	;# 
   716  0017                     	;# 
   717  0018                     	;# 
   718  0019                     	;# 
   719  001A                     	;# 
   720  001B                     	;# 
   721  001C                     	;# 
   722  008C                     	;# 
   723  008D                     	;# 
   724  008E                     	;# 
   725  0090                     	;# 
   726  0091                     	;# 
   727  0092                     	;# 
   728  0095                     	;# 
   729  0096                     	;# 
   730  0097                     	;# 
   731  0099                     	;# 
   732  009A                     	;# 
   733  009B                     	;# 
   734  009B                     	;# 
   735  009C                     	;# 
   736  009D                     	;# 
   737  009E                     	;# 
   738  010C                     	;# 
   739  010D                     	;# 
   740  010E                     	;# 
   741  0116                     	;# 
   742  0117                     	;# 
   743  011D                     	;# 
   744  018C                     	;# 
   745  018D                     	;# 
   746  018E                     	;# 
   747  0191                     	;# 
   748  0191                     	;# 
   749  0192                     	;# 
   750  0193                     	;# 
   751  0193                     	;# 
   752  0194                     	;# 
   753  0195                     	;# 
   754  0196                     	;# 
   755  0197                     	;# 
   756  0199                     	;# 
   757  019A                     	;# 
   758  019B                     	;# 
   759  019B                     	;# 
   760  019B                     	;# 
   761  019B                     	;# 
   762  019C                     	;# 
   763  019C                     	;# 
   764  019D                     	;# 
   765  019E                     	;# 
   766  019F                     	;# 
   767  020D                     	;# 
   768  0210                     	;# 
   769  0211                     	;# 
   770  0211                     	;# 
   771  0212                     	;# 
   772  0212                     	;# 
   773  0213                     	;# 
   774  0213                     	;# 
   775  0214                     	;# 
   776  0214                     	;# 
   777  0215                     	;# 
   778  0215                     	;# 
   779  0215                     	;# 
   780  0216                     	;# 
   781  0216                     	;# 
   782  0217                     	;# 
   783  0217                     	;# 
   784  0291                     	;# 
   785  0291                     	;# 
   786  0292                     	;# 
   787  0293                     	;# 
   788  0298                     	;# 
   789  0298                     	;# 
   790  0299                     	;# 
   791  029A                     	;# 
   792  0394                     	;# 
   793  0395                     	;# 
   794  0396                     	;# 
   795  0FE4                     	;# 
   796  0FE5                     	;# 
   797  0FE6                     	;# 
   798  0FE7                     	;# 
   799  0FE8                     	;# 
   800  0FE9                     	;# 
   801  0FEA                     	;# 
   802  0FEB                     	;# 
   803  0FED                     	;# 
   804  0FEE                     	;# 
   805  0FEF                     	;# 
   806  0000                     	;# 
   807  0001                     	;# 
   808  0002                     	;# 
   809  0003                     	;# 
   810  0004                     	;# 
   811  0005                     	;# 
   812  0006                     	;# 
   813  0007                     	;# 
   814  0008                     	;# 
   815  0009                     	;# 
   816  000A                     	;# 
   817  000B                     	;# 
   818  000C                     	;# 
   819  000D                     	;# 
   820  000E                     	;# 
   821  0010                     	;# 
   822  0011                     	;# 
   823  0012                     	;# 
   824  0015                     	;# 
   825  0016                     	;# 
   826  0016                     	;# 
   827  0017                     	;# 
   828  0018                     	;# 
   829  0019                     	;# 
   830  001A                     	;# 
   831  001B                     	;# 
   832  001C                     	;# 
   833  008C                     	;# 
   834  008D                     	;# 
   835  008E                     	;# 
   836  0090                     	;# 
   837  0091                     	;# 
   838  0092                     	;# 
   839  0095                     	;# 
   840  0096                     	;# 
   841  0097                     	;# 
   842  0099                     	;# 
   843  009A                     	;# 
   844  009B                     	;# 
   845  009B                     	;# 
   846  009C                     	;# 
   847  009D                     	;# 
   848  009E                     	;# 
   849  010C                     	;# 
   850  010D                     	;# 
   851  010E                     	;# 
   852  0116                     	;# 
   853  0117                     	;# 
   854  011D                     	;# 
   855  018C                     	;# 
   856  018D                     	;# 
   857  018E                     	;# 
   858  0191                     	;# 
   859  0191                     	;# 
   860  0192                     	;# 
   861  0193                     	;# 
   862  0193                     	;# 
   863  0194                     	;# 
   864  0195                     	;# 
   865  0196                     	;# 
   866  0197                     	;# 
   867  0199                     	;# 
   868  019A                     	;# 
   869  019B                     	;# 
   870  019B                     	;# 
   871  019B                     	;# 
   872  019B                     	;# 
   873  019C                     	;# 
   874  019C                     	;# 
   875  019D                     	;# 
   876  019E                     	;# 
   877  019F                     	;# 
   878  020D                     	;# 
   879  0210                     	;# 
   880  0211                     	;# 
   881  0211                     	;# 
   882  0212                     	;# 
   883  0212                     	;# 
   884  0213                     	;# 
   885  0213                     	;# 
   886  0214                     	;# 
   887  0214                     	;# 
   888  0215                     	;# 
   889  0215                     	;# 
   890  0215                     	;# 
   891  0216                     	;# 
   892  0216                     	;# 
   893  0217                     	;# 
   894  0217                     	;# 
   895  0291                     	;# 
   896  0291                     	;# 
   897  0292                     	;# 
   898  0293                     	;# 
   899  0298                     	;# 
   900  0298                     	;# 
   901  0299                     	;# 
   902  029A                     	;# 
   903  0394                     	;# 
   904  0395                     	;# 
   905  0396                     	;# 
   906  0FE4                     	;# 
   907  0FE5                     	;# 
   908  0FE6                     	;# 
   909  0FE7                     	;# 
   910  0FE8                     	;# 
   911  0FE9                     	;# 
   912  0FEA                     	;# 
   913  0FEB                     	;# 
   914  0FED                     	;# 
   915  0FEE                     	;# 
   916  0FEF                     	;# 
   917  0000                     	;# 
   918  0001                     	;# 
   919  0002                     	;# 
   920  0003                     	;# 
   921  0004                     	;# 
   922  0005                     	;# 
   923  0006                     	;# 
   924  0007                     	;# 
   925  0008                     	;# 
   926  0009                     	;# 
   927  000A                     	;# 
   928  000B                     	;# 
   929  000C                     	;# 
   930  000D                     	;# 
   931  000E                     	;# 
   932  0010                     	;# 
   933  0011                     	;# 
   934  0012                     	;# 
   935  0015                     	;# 
   936  0016                     	;# 
   937  0016                     	;# 
   938  0017                     	;# 
   939  0018                     	;# 
   940  0019                     	;# 
   941  001A                     	;# 
   942  001B                     	;# 
   943  001C                     	;# 
   944  008C                     	;# 
   945  008D                     	;# 
   946  008E                     	;# 
   947  0090                     	;# 
   948  0091                     	;# 
   949  0092                     	;# 
   950  0095                     	;# 
   951  0096                     	;# 
   952  0097                     	;# 
   953  0099                     	;# 
   954  009A                     	;# 
   955  009B                     	;# 
   956  009B                     	;# 
   957  009C                     	;# 
   958  009D                     	;# 
   959  009E                     	;# 
   960  010C                     	;# 
   961  010D                     	;# 
   962  010E                     	;# 
   963  0116                     	;# 
   964  0117                     	;# 
   965  011D                     	;# 
   966  018C                     	;# 
   967  018D                     	;# 
   968  018E                     	;# 
   969  0191                     	;# 
   970  0191                     	;# 
   971  0192                     	;# 
   972  0193                     	;# 
   973  0193                     	;# 
   974  0194                     	;# 
   975  0195                     	;# 
   976  0196                     	;# 
   977  0197                     	;# 
   978  0199                     	;# 
   979  019A                     	;# 
   980  019B                     	;# 
   981  019B                     	;# 
   982  019B                     	;# 
   983  019B                     	;# 
   984  019C                     	;# 
   985  019C                     	;# 
   986  019D                     	;# 
   987  019E                     	;# 
   988  019F                     	;# 
   989  020D                     	;# 
   990  0210                     	;# 
   991  0211                     	;# 
   992  0211                     	;# 
   993  0212                     	;# 
   994  0212                     	;# 
   995  0213                     	;# 
   996  0213                     	;# 
   997  0214                     	;# 
   998  0214                     	;# 
   999  0215                     	;# 
  1000  0215                     	;# 
  1001  0215                     	;# 
  1002  0216                     	;# 
  1003  0216                     	;# 
  1004  0217                     	;# 
  1005  0217                     	;# 
  1006  0291                     	;# 
  1007  0291                     	;# 
  1008  0292                     	;# 
  1009  0293                     	;# 
  1010  0298                     	;# 
  1011  0298                     	;# 
  1012  0299                     	;# 
  1013  029A                     	;# 
  1014  0394                     	;# 
  1015  0395                     	;# 
  1016  0396                     	;# 
  1017  0FE4                     	;# 
  1018  0FE5                     	;# 
  1019  0FE6                     	;# 
  1020  0FE7                     	;# 
  1021  0FE8                     	;# 
  1022  0FE9                     	;# 
  1023  0FEA                     	;# 
  1024  0FEB                     	;# 
  1025  0FED                     	;# 
  1026  0FEE                     	;# 
  1027  0FEF                     	;# 
  1028  0000                     	;# 
  1029  0001                     	;# 
  1030  0002                     	;# 
  1031  0003                     	;# 
  1032  0004                     	;# 
  1033  0005                     	;# 
  1034  0006                     	;# 
  1035  0007                     	;# 
  1036  0008                     	;# 
  1037  0009                     	;# 
  1038  000A                     	;# 
  1039  000B                     	;# 
  1040  000C                     	;# 
  1041  000D                     	;# 
  1042  000E                     	;# 
  1043  0010                     	;# 
  1044  0011                     	;# 
  1045  0012                     	;# 
  1046  0015                     	;# 
  1047  0016                     	;# 
  1048  0016                     	;# 
  1049  0017                     	;# 
  1050  0018                     	;# 
  1051  0019                     	;# 
  1052  001A                     	;# 
  1053  001B                     	;# 
  1054  001C                     	;# 
  1055  008C                     	;# 
  1056  008D                     	;# 
  1057  008E                     	;# 
  1058  0090                     	;# 
  1059  0091                     	;# 
  1060  0092                     	;# 
  1061  0095                     	;# 
  1062  0096                     	;# 
  1063  0097                     	;# 
  1064  0099                     	;# 
  1065  009A                     	;# 
  1066  009B                     	;# 
  1067  009B                     	;# 
  1068  009C                     	;# 
  1069  009D                     	;# 
  1070  009E                     	;# 
  1071  010C                     	;# 
  1072  010D                     	;# 
  1073  010E                     	;# 
  1074  0116                     	;# 
  1075  0117                     	;# 
  1076  011D                     	;# 
  1077  018C                     	;# 
  1078  018D                     	;# 
  1079  018E                     	;# 
  1080  0191                     	;# 
  1081  0191                     	;# 
  1082  0192                     	;# 
  1083  0193                     	;# 
  1084  0193                     	;# 
  1085  0194                     	;# 
  1086  0195                     	;# 
  1087  0196                     	;# 
  1088  0197                     	;# 
  1089  0199                     	;# 
  1090  019A                     	;# 
  1091  019B                     	;# 
  1092  019B                     	;# 
  1093  019B                     	;# 
  1094  019B                     	;# 
  1095  019C                     	;# 
  1096  019C                     	;# 
  1097  019D                     	;# 
  1098  019E                     	;# 
  1099  019F                     	;# 
  1100  020D                     	;# 
  1101  0210                     	;# 
  1102  0211                     	;# 
  1103  0211                     	;# 
  1104  0212                     	;# 
  1105  0212                     	;# 
  1106  0213                     	;# 
  1107  0213                     	;# 
  1108  0214                     	;# 
  1109  0214                     	;# 
  1110  0215                     	;# 
  1111  0215                     	;# 
  1112  0215                     	;# 
  1113  0216                     	;# 
  1114  0216                     	;# 
  1115  0217                     	;# 
  1116  0217                     	;# 
  1117  0291                     	;# 
  1118  0291                     	;# 
  1119  0292                     	;# 
  1120  0293                     	;# 
  1121  0298                     	;# 
  1122  0298                     	;# 
  1123  0299                     	;# 
  1124  029A                     	;# 
  1125  0394                     	;# 
  1126  0395                     	;# 
  1127  0396                     	;# 
  1128  0FE4                     	;# 
  1129  0FE5                     	;# 
  1130  0FE6                     	;# 
  1131  0FE7                     	;# 
  1132  0FE8                     	;# 
  1133  0FE9                     	;# 
  1134  0FEA                     	;# 
  1135  0FEB                     	;# 
  1136  0FED                     	;# 
  1137  0FEE                     	;# 
  1138  0FEF                     	;# 
  1139  0000                     	;# 
  1140  0001                     	;# 
  1141  0002                     	;# 
  1142  0003                     	;# 
  1143  0004                     	;# 
  1144  0005                     	;# 
  1145  0006                     	;# 
  1146  0007                     	;# 
  1147  0008                     	;# 
  1148  0009                     	;# 
  1149  000A                     	;# 
  1150  000B                     	;# 
  1151  000C                     	;# 
  1152  000D                     	;# 
  1153  000E                     	;# 
  1154  0010                     	;# 
  1155  0011                     	;# 
  1156  0012                     	;# 
  1157  0015                     	;# 
  1158  0016                     	;# 
  1159  0016                     	;# 
  1160  0017                     	;# 
  1161  0018                     	;# 
  1162  0019                     	;# 
  1163  001A                     	;# 
  1164  001B                     	;# 
  1165  001C                     	;# 
  1166  008C                     	;# 
  1167  008D                     	;# 
  1168  008E                     	;# 
  1169  0090                     	;# 
  1170  0091                     	;# 
  1171  0092                     	;# 
  1172  0095                     	;# 
  1173  0096                     	;# 
  1174  0097                     	;# 
  1175  0099                     	;# 
  1176  009A                     	;# 
  1177  009B                     	;# 
  1178  009B                     	;# 
  1179  009C                     	;# 
  1180  009D                     	;# 
  1181  009E                     	;# 
  1182  010C                     	;# 
  1183  010D                     	;# 
  1184  010E                     	;# 
  1185  0116                     	;# 
  1186  0117                     	;# 
  1187  011D                     	;# 
  1188  018C                     	;# 
  1189  018D                     	;# 
  1190  018E                     	;# 
  1191  0191                     	;# 
  1192  0191                     	;# 
  1193  0192                     	;# 
  1194  0193                     	;# 
  1195  0193                     	;# 
  1196  0194                     	;# 
  1197  0195                     	;# 
  1198  0196                     	;# 
  1199  0197                     	;# 
  1200  0199                     	;# 
  1201  019A                     	;# 
  1202  019B                     	;# 
  1203  019B                     	;# 
  1204  019B                     	;# 
  1205  019B                     	;# 
  1206  019C                     	;# 
  1207  019C                     	;# 
  1208  019D                     	;# 
  1209  019E                     	;# 
  1210  019F                     	;# 
  1211  020D                     	;# 
  1212  0210                     	;# 
  1213  0211                     	;# 
  1214  0211                     	;# 
  1215  0212                     	;# 
  1216  0212                     	;# 
  1217  0213                     	;# 
  1218  0213                     	;# 
  1219  0214                     	;# 
  1220  0214                     	;# 
  1221  0215                     	;# 
  1222  0215                     	;# 
  1223  0215                     	;# 
  1224  0216                     	;# 
  1225  0216                     	;# 
  1226  0217                     	;# 
  1227  0217                     	;# 
  1228  0291                     	;# 
  1229  0291                     	;# 
  1230  0292                     	;# 
  1231  0293                     	;# 
  1232  0298                     	;# 
  1233  0298                     	;# 
  1234  0299                     	;# 
  1235  029A                     	;# 
  1236  0394                     	;# 
  1237  0395                     	;# 
  1238  0396                     	;# 
  1239  0FE4                     	;# 
  1240  0FE5                     	;# 
  1241  0FE6                     	;# 
  1242  0FE7                     	;# 
  1243  0FE8                     	;# 
  1244  0FE9                     	;# 
  1245  0FEA                     	;# 
  1246  0FEB                     	;# 
  1247  0FED                     	;# 
  1248  0FEE                     	;# 
  1249  0FEF                     	;# 
  1250  0000                     	;# 
  1251  0001                     	;# 
  1252  0002                     	;# 
  1253  0003                     	;# 
  1254  0004                     	;# 
  1255  0005                     	;# 
  1256  0006                     	;# 
  1257  0007                     	;# 
  1258  0008                     	;# 
  1259  0009                     	;# 
  1260  000A                     	;# 
  1261  000B                     	;# 
  1262  000C                     	;# 
  1263  000D                     	;# 
  1264  000E                     	;# 
  1265  0010                     	;# 
  1266  0011                     	;# 
  1267  0012                     	;# 
  1268  0015                     	;# 
  1269  0016                     	;# 
  1270  0016                     	;# 
  1271  0017                     	;# 
  1272  0018                     	;# 
  1273  0019                     	;# 
  1274  001A                     	;# 
  1275  001B                     	;# 
  1276  001C                     	;# 
  1277  008C                     	;# 
  1278  008D                     	;# 
  1279  008E                     	;# 
  1280  0090                     	;# 
  1281  0091                     	;# 
  1282  0092                     	;# 
  1283  0095                     	;# 
  1284  0096                     	;# 
  1285  0097                     	;# 
  1286  0099                     	;# 
  1287  009A                     	;# 
  1288  009B                     	;# 
  1289  009B                     	;# 
  1290  009C                     	;# 
  1291  009D                     	;# 
  1292  009E                     	;# 
  1293  010C                     	;# 
  1294  010D                     	;# 
  1295  010E                     	;# 
  1296  0116                     	;# 
  1297  0117                     	;# 
  1298  011D                     	;# 
  1299  018C                     	;# 
  1300  018D                     	;# 
  1301  018E                     	;# 
  1302  0191                     	;# 
  1303  0191                     	;# 
  1304  0192                     	;# 
  1305  0193                     	;# 
  1306  0193                     	;# 
  1307  0194                     	;# 
  1308  0195                     	;# 
  1309  0196                     	;# 
  1310  0197                     	;# 
  1311  0199                     	;# 
  1312  019A                     	;# 
  1313  019B                     	;# 
  1314  019B                     	;# 
  1315  019B                     	;# 
  1316  019B                     	;# 
  1317  019C                     	;# 
  1318  019C                     	;# 
  1319  019D                     	;# 
  1320  019E                     	;# 
  1321  019F                     	;# 
  1322  020D                     	;# 
  1323  0210                     	;# 
  1324  0211                     	;# 
  1325  0211                     	;# 
  1326  0212                     	;# 
  1327  0212                     	;# 
  1328  0213                     	;# 
  1329  0213                     	;# 
  1330  0214                     	;# 
  1331  0214                     	;# 
  1332  0215                     	;# 
  1333  0215                     	;# 
  1334  0215                     	;# 
  1335  0216                     	;# 
  1336  0216                     	;# 
  1337  0217                     	;# 
  1338  0217                     	;# 
  1339  0291                     	;# 
  1340  0291                     	;# 
  1341  0292                     	;# 
  1342  0293                     	;# 
  1343  0298                     	;# 
  1344  0298                     	;# 
  1345  0299                     	;# 
  1346  029A                     	;# 
  1347  0394                     	;# 
  1348  0395                     	;# 
  1349  0396                     	;# 
  1350  0FE4                     	;# 
  1351  0FE5                     	;# 
  1352  0FE6                     	;# 
  1353  0FE7                     	;# 
  1354  0FE8                     	;# 
  1355  0FE9                     	;# 
  1356  0FEA                     	;# 
  1357  0FEB                     	;# 
  1358  0FED                     	;# 
  1359  0FEE                     	;# 
  1360  0FEF                     	;# 
  1361  0000                     	;# 
  1362  0001                     	;# 
  1363  0002                     	;# 
  1364  0003                     	;# 
  1365  0004                     	;# 
  1366  0005                     	;# 
  1367  0006                     	;# 
  1368  0007                     	;# 
  1369  0008                     	;# 
  1370  0009                     	;# 
  1371  000A                     	;# 
  1372  000B                     	;# 
  1373  000C                     	;# 
  1374  000D                     	;# 
  1375  000E                     	;# 
  1376  0010                     	;# 
  1377  0011                     	;# 
  1378  0012                     	;# 
  1379  0015                     	;# 
  1380  0016                     	;# 
  1381  0016                     	;# 
  1382  0017                     	;# 
  1383  0018                     	;# 
  1384  0019                     	;# 
  1385  001A                     	;# 
  1386  001B                     	;# 
  1387  001C                     	;# 
  1388  008C                     	;# 
  1389  008D                     	;# 
  1390  008E                     	;# 
  1391  0090                     	;# 
  1392  0091                     	;# 
  1393  0092                     	;# 
  1394  0095                     	;# 
  1395  0096                     	;# 
  1396  0097                     	;# 
  1397  0099                     	;# 
  1398  009A                     	;# 
  1399  009B                     	;# 
  1400  009B                     	;# 
  1401  009C                     	;# 
  1402  009D                     	;# 
  1403  009E                     	;# 
  1404  010C                     	;# 
  1405  010D                     	;# 
  1406  010E                     	;# 
  1407  0116                     	;# 
  1408  0117                     	;# 
  1409  011D                     	;# 
  1410  018C                     	;# 
  1411  018D                     	;# 
  1412  018E                     	;# 
  1413  0191                     	;# 
  1414  0191                     	;# 
  1415  0192                     	;# 
  1416  0193                     	;# 
  1417  0193                     	;# 
  1418  0194                     	;# 
  1419  0195                     	;# 
  1420  0196                     	;# 
  1421  0197                     	;# 
  1422  0199                     	;# 
  1423  019A                     	;# 
  1424  019B                     	;# 
  1425  019B                     	;# 
  1426  019B                     	;# 
  1427  019B                     	;# 
  1428  019C                     	;# 
  1429  019C                     	;# 
  1430  019D                     	;# 
  1431  019E                     	;# 
  1432  019F                     	;# 
  1433  020D                     	;# 
  1434  0210                     	;# 
  1435  0211                     	;# 
  1436  0211                     	;# 
  1437  0212                     	;# 
  1438  0212                     	;# 
  1439  0213                     	;# 
  1440  0213                     	;# 
  1441  0214                     	;# 
  1442  0214                     	;# 
  1443  0215                     	;# 
  1444  0215                     	;# 
  1445  0215                     	;# 
  1446  0216                     	;# 
  1447  0216                     	;# 
  1448  0217                     	;# 
  1449  0217                     	;# 
  1450  0291                     	;# 
  1451  0291                     	;# 
  1452  0292                     	;# 
  1453  0293                     	;# 
  1454  0298                     	;# 
  1455  0298                     	;# 
  1456  0299                     	;# 
  1457  029A                     	;# 
  1458  0394                     	;# 
  1459  0395                     	;# 
  1460  0396                     	;# 
  1461  0FE4                     	;# 
  1462  0FE5                     	;# 
  1463  0FE6                     	;# 
  1464  0FE7                     	;# 
  1465  0FE8                     	;# 
  1466  0FE9                     	;# 
  1467  0FEA                     	;# 
  1468  0FEB                     	;# 
  1469  0FED                     	;# 
  1470  0FEE                     	;# 
  1471  0FEF                     	;# 
  1472  0000                     	;# 
  1473  0001                     	;# 
  1474  0002                     	;# 
  1475  0003                     	;# 
  1476  0004                     	;# 
  1477  0005                     	;# 
  1478  0006                     	;# 
  1479  0007                     	;# 
  1480  0008                     	;# 
  1481  0009                     	;# 
  1482  000A                     	;# 
  1483  000B                     	;# 
  1484  000C                     	;# 
  1485  000D                     	;# 
  1486  000E                     	;# 
  1487  0010                     	;# 
  1488  0011                     	;# 
  1489  0012                     	;# 
  1490  0015                     	;# 
  1491  0016                     	;# 
  1492  0016                     	;# 
  1493  0017                     	;# 
  1494  0018                     	;# 
  1495  0019                     	;# 
  1496  001A                     	;# 
  1497  001B                     	;# 
  1498  001C                     	;# 
  1499  008C                     	;# 
  1500  008D                     	;# 
  1501  008E                     	;# 
  1502  0090                     	;# 
  1503  0091                     	;# 
  1504  0092                     	;# 
  1505  0095                     	;# 
  1506  0096                     	;# 
  1507  0097                     	;# 
  1508  0099                     	;# 
  1509  009A                     	;# 
  1510  009B                     	;# 
  1511  009B                     	;# 
  1512  009C                     	;# 
  1513  009D                     	;# 
  1514  009E                     	;# 
  1515  010C                     	;# 
  1516  010D                     	;# 
  1517  010E                     	;# 
  1518  0116                     	;# 
  1519  0117                     	;# 
  1520  011D                     	;# 
  1521  018C                     	;# 
  1522  018D                     	;# 
  1523  018E                     	;# 
  1524  0191                     	;# 
  1525  0191                     	;# 
  1526  0192                     	;# 
  1527  0193                     	;# 
  1528  0193                     	;# 
  1529  0194                     	;# 
  1530  0195                     	;# 
  1531  0196                     	;# 
  1532  0197                     	;# 
  1533  0199                     	;# 
  1534  019A                     	;# 
  1535  019B                     	;# 
  1536  019B                     	;# 
  1537  019B                     	;# 
  1538  019B                     	;# 
  1539  019C                     	;# 
  1540  019C                     	;# 
  1541  019D                     	;# 
  1542  019E                     	;# 
  1543  019F                     	;# 
  1544  020D                     	;# 
  1545  0210                     	;# 
  1546  0211                     	;# 
  1547  0211                     	;# 
  1548  0212                     	;# 
  1549  0212                     	;# 
  1550  0213                     	;# 
  1551  0213                     	;# 
  1552  0214                     	;# 
  1553  0214                     	;# 
  1554  0215                     	;# 
  1555  0215                     	;# 
  1556  0215                     	;# 
  1557  0216                     	;# 
  1558  0216                     	;# 
  1559  0217                     	;# 
  1560  0217                     	;# 
  1561  0291                     	;# 
  1562  0291                     	;# 
  1563  0292                     	;# 
  1564  0293                     	;# 
  1565  0298                     	;# 
  1566  0298                     	;# 
  1567  0299                     	;# 
  1568  029A                     	;# 
  1569  0394                     	;# 
  1570  0395                     	;# 
  1571  0396                     	;# 
  1572  0FE4                     	;# 
  1573  0FE5                     	;# 
  1574  0FE6                     	;# 
  1575  0FE7                     	;# 
  1576  0FE8                     	;# 
  1577  0FE9                     	;# 
  1578  0FEA                     	;# 
  1579  0FEB                     	;# 
  1580  0FED                     	;# 
  1581  0FEE                     	;# 
  1582  0FEF                     	;# 
  1583  0000                     	;# 
  1584  0001                     	;# 
  1585  0002                     	;# 
  1586  0003                     	;# 
  1587  0004                     	;# 
  1588  0005                     	;# 
  1589  0006                     	;# 
  1590  0007                     	;# 
  1591  0008                     	;# 
  1592  0009                     	;# 
  1593  000A                     	;# 
  1594  000B                     	;# 
  1595  000C                     	;# 
  1596  000D                     	;# 
  1597  000E                     	;# 
  1598  0010                     	;# 
  1599  0011                     	;# 
  1600  0012                     	;# 
  1601  0015                     	;# 
  1602  0016                     	;# 
  1603  0016                     	;# 
  1604  0017                     	;# 
  1605  0018                     	;# 
  1606  0019                     	;# 
  1607  001A                     	;# 
  1608  001B                     	;# 
  1609  001C                     	;# 
  1610  008C                     	;# 
  1611  008D                     	;# 
  1612  008E                     	;# 
  1613  0090                     	;# 
  1614  0091                     	;# 
  1615  0092                     	;# 
  1616  0095                     	;# 
  1617  0096                     	;# 
  1618  0097                     	;# 
  1619  0099                     	;# 
  1620  009A                     	;# 
  1621  009B                     	;# 
  1622  009B                     	;# 
  1623  009C                     	;# 
  1624  009D                     	;# 
  1625  009E                     	;# 
  1626  010C                     	;# 
  1627  010D                     	;# 
  1628  010E                     	;# 
  1629  0116                     	;# 
  1630  0117                     	;# 
  1631  011D                     	;# 
  1632  018C                     	;# 
  1633  018D                     	;# 
  1634  018E                     	;# 
  1635  0191                     	;# 
  1636  0191                     	;# 
  1637  0192                     	;# 
  1638  0193                     	;# 
  1639  0193                     	;# 
  1640  0194                     	;# 
  1641  0195                     	;# 
  1642  0196                     	;# 
  1643  0197                     	;# 
  1644  0199                     	;# 
  1645  019A                     	;# 
  1646  019B                     	;# 
  1647  019B                     	;# 
  1648  019B                     	;# 
  1649  019B                     	;# 
  1650  019C                     	;# 
  1651  019C                     	;# 
  1652  019D                     	;# 
  1653  019E                     	;# 
  1654  019F                     	;# 
  1655  020D                     	;# 
  1656  0210                     	;# 
  1657  0211                     	;# 
  1658  0211                     	;# 
  1659  0212                     	;# 
  1660  0212                     	;# 
  1661  0213                     	;# 
  1662  0213                     	;# 
  1663  0214                     	;# 
  1664  0214                     	;# 
  1665  0215                     	;# 
  1666  0215                     	;# 
  1667  0215                     	;# 
  1668  0216                     	;# 
  1669  0216                     	;# 
  1670  0217                     	;# 
  1671  0217                     	;# 
  1672  0291                     	;# 
  1673  0291                     	;# 
  1674  0292                     	;# 
  1675  0293                     	;# 
  1676  0298                     	;# 
  1677  0298                     	;# 
  1678  0299                     	;# 
  1679  029A                     	;# 
  1680  0394                     	;# 
  1681  0395                     	;# 
  1682  0396                     	;# 
  1683  0FE4                     	;# 
  1684  0FE5                     	;# 
  1685  0FE6                     	;# 
  1686  0FE7                     	;# 
  1687  0FE8                     	;# 
  1688  0FE9                     	;# 
  1689  0FEA                     	;# 
  1690  0FEB                     	;# 
  1691  0FED                     	;# 
  1692  0FEE                     	;# 
  1693  0FEF                     	;# 
  1694  0000                     	;# 
  1695  0001                     	;# 
  1696  0002                     	;# 
  1697  0003                     	;# 
  1698  0004                     	;# 
  1699  0005                     	;# 
  1700  0006                     	;# 
  1701  0007                     	;# 
  1702  0008                     	;# 
  1703  0009                     	;# 
  1704  000A                     	;# 
  1705  000B                     	;# 
  1706  000C                     	;# 
  1707  000D                     	;# 
  1708  000E                     	;# 
  1709  0010                     	;# 
  1710  0011                     	;# 
  1711  0012                     	;# 
  1712  0015                     	;# 
  1713  0016                     	;# 
  1714  0016                     	;# 
  1715  0017                     	;# 
  1716  0018                     	;# 
  1717  0019                     	;# 
  1718  001A                     	;# 
  1719  001B                     	;# 
  1720  001C                     	;# 
  1721  008C                     	;# 
  1722  008D                     	;# 
  1723  008E                     	;# 
  1724  0090                     	;# 
  1725  0091                     	;# 
  1726  0092                     	;# 
  1727  0095                     	;# 
  1728  0096                     	;# 
  1729  0097                     	;# 
  1730  0099                     	;# 
  1731  009A                     	;# 
  1732  009B                     	;# 
  1733  009B                     	;# 
  1734  009C                     	;# 
  1735  009D                     	;# 
  1736  009E                     	;# 
  1737  010C                     	;# 
  1738  010D                     	;# 
  1739  010E                     	;# 
  1740  0116                     	;# 
  1741  0117                     	;# 
  1742  011D                     	;# 
  1743  018C                     	;# 
  1744  018D                     	;# 
  1745  018E                     	;# 
  1746  0191                     	;# 
  1747  0191                     	;# 
  1748  0192                     	;# 
  1749  0193                     	;# 
  1750  0193                     	;# 
  1751  0194                     	;# 
  1752  0195                     	;# 
  1753  0196                     	;# 
  1754  0197                     	;# 
  1755  0199                     	;# 
  1756  019A                     	;# 
  1757  019B                     	;# 
  1758  019B                     	;# 
  1759  019B                     	;# 
  1760  019B                     	;# 
  1761  019C                     	;# 
  1762  019C                     	;# 
  1763  019D                     	;# 
  1764  019E                     	;# 
  1765  019F                     	;# 
  1766  020D                     	;# 
  1767  0210                     	;# 
  1768  0211                     	;# 
  1769  0211                     	;# 
  1770  0212                     	;# 
  1771  0212                     	;# 
  1772  0213                     	;# 
  1773  0213                     	;# 
  1774  0214                     	;# 
  1775  0214                     	;# 
  1776  0215                     	;# 
  1777  0215                     	;# 
  1778  0215                     	;# 
  1779  0216                     	;# 
  1780  0216                     	;# 
  1781  0217                     	;# 
  1782  0217                     	;# 
  1783  0291                     	;# 
  1784  0291                     	;# 
  1785  0292                     	;# 
  1786  0293                     	;# 
  1787  0298                     	;# 
  1788  0298                     	;# 
  1789  0299                     	;# 
  1790  029A                     	;# 
  1791  0394                     	;# 
  1792  0395                     	;# 
  1793  0396                     	;# 
  1794  0FE4                     	;# 
  1795  0FE5                     	;# 
  1796  0FE6                     	;# 
  1797  0FE7                     	;# 
  1798  0FE8                     	;# 
  1799  0FE9                     	;# 
  1800  0FEA                     	;# 
  1801  0FEB                     	;# 
  1802  0FED                     	;# 
  1803  0FEE                     	;# 
  1804  0FEF                     	;# 
  1805  0000                     	;# 
  1806  0001                     	;# 
  1807  0002                     	;# 
  1808  0003                     	;# 
  1809  0004                     	;# 
  1810  0005                     	;# 
  1811  0006                     	;# 
  1812  0007                     	;# 
  1813  0008                     	;# 
  1814  0009                     	;# 
  1815  000A                     	;# 
  1816  000B                     	;# 
  1817  000C                     	;# 
  1818  000D                     	;# 
  1819  000E                     	;# 
  1820  0010                     	;# 
  1821  0011                     	;# 
  1822  0012                     	;# 
  1823  0015                     	;# 
  1824  0016                     	;# 
  1825  0016                     	;# 
  1826  0017                     	;# 
  1827  0018                     	;# 
  1828  0019                     	;# 
  1829  001A                     	;# 
  1830  001B                     	;# 
  1831  001C                     	;# 
  1832  008C                     	;# 
  1833  008D                     	;# 
  1834  008E                     	;# 
  1835  0090                     	;# 
  1836  0091                     	;# 
  1837  0092                     	;# 
  1838  0095                     	;# 
  1839  0096                     	;# 
  1840  0097                     	;# 
  1841  0099                     	;# 
  1842  009A                     	;# 
  1843  009B                     	;# 
  1844  009B                     	;# 
  1845  009C                     	;# 
  1846  009D                     	;# 
  1847  009E                     	;# 
  1848  010C                     	;# 
  1849  010D                     	;# 
  1850  010E                     	;# 
  1851  0116                     	;# 
  1852  0117                     	;# 
  1853  011D                     	;# 
  1854  018C                     	;# 
  1855  018D                     	;# 
  1856  018E                     	;# 
  1857  0191                     	;# 
  1858  0191                     	;# 
  1859  0192                     	;# 
  1860  0193                     	;# 
  1861  0193                     	;# 
  1862  0194                     	;# 
  1863  0195                     	;# 
  1864  0196                     	;# 
  1865  0197                     	;# 
  1866  0199                     	;# 
  1867  019A                     	;# 
  1868  019B                     	;# 
  1869  019B                     	;# 
  1870  019B                     	;# 
  1871  019B                     	;# 
  1872  019C                     	;# 
  1873  019C                     	;# 
  1874  019D                     	;# 
  1875  019E                     	;# 
  1876  019F                     	;# 
  1877  020D                     	;# 
  1878  0210                     	;# 
  1879  0211                     	;# 
  1880  0211                     	;# 
  1881  0212                     	;# 
  1882  0212                     	;# 
  1883  0213                     	;# 
  1884  0213                     	;# 
  1885  0214                     	;# 
  1886  0214                     	;# 
  1887  0215                     	;# 
  1888  0215                     	;# 
  1889  0215                     	;# 
  1890  0216                     	;# 
  1891  0216                     	;# 
  1892  0217                     	;# 
  1893  0217                     	;# 
  1894  0291                     	;# 
  1895  0291                     	;# 
  1896  0292                     	;# 
  1897  0293                     	;# 
  1898  0298                     	;# 
  1899  0298                     	;# 
  1900  0299                     	;# 
  1901  029A                     	;# 
  1902  0394                     	;# 
  1903  0395                     	;# 
  1904  0396                     	;# 
  1905  0FE4                     	;# 
  1906  0FE5                     	;# 
  1907  0FE6                     	;# 
  1908  0FE7                     	;# 
  1909  0FE8                     	;# 
  1910  0FE9                     	;# 
  1911  0FEA                     	;# 
  1912  0FEB                     	;# 
  1913  0FED                     	;# 
  1914  0FEE                     	;# 
  1915  0FEF                     	;# 
  1916  0000                     	;# 
  1917  0001                     	;# 
  1918  0002                     	;# 
  1919  0003                     	;# 
  1920  0004                     	;# 
  1921  0005                     	;# 
  1922  0006                     	;# 
  1923  0007                     	;# 
  1924  0008                     	;# 
  1925  0009                     	;# 
  1926  000A                     	;# 
  1927  000B                     	;# 
  1928  000C                     	;# 
  1929  000D                     	;# 
  1930  000E                     	;# 
  1931  0010                     	;# 
  1932  0011                     	;# 
  1933  0012                     	;# 
  1934  0015                     	;# 
  1935  0016                     	;# 
  1936  0016                     	;# 
  1937  0017                     	;# 
  1938  0018                     	;# 
  1939  0019                     	;# 
  1940  001A                     	;# 
  1941  001B                     	;# 
  1942  001C                     	;# 
  1943  008C                     	;# 
  1944  008D                     	;# 
  1945  008E                     	;# 
  1946  0090                     	;# 
  1947  0091                     	;# 
  1948  0092                     	;# 
  1949  0095                     	;# 
  1950  0096                     	;# 
  1951  0097                     	;# 
  1952  0099                     	;# 
  1953  009A                     	;# 
  1954  009B                     	;# 
  1955  009B                     	;# 
  1956  009C                     	;# 
  1957  009D                     	;# 
  1958  009E                     	;# 
  1959  010C                     	;# 
  1960  010D                     	;# 
  1961  010E                     	;# 
  1962  0116                     	;# 
  1963  0117                     	;# 
  1964  011D                     	;# 
  1965  018C                     	;# 
  1966  018D                     	;# 
  1967  018E                     	;# 
  1968  0191                     	;# 
  1969  0191                     	;# 
  1970  0192                     	;# 
  1971  0193                     	;# 
  1972  0193                     	;# 
  1973  0194                     	;# 
  1974  0195                     	;# 
  1975  0196                     	;# 
  1976  0197                     	;# 
  1977  0199                     	;# 
  1978  019A                     	;# 
  1979  019B                     	;# 
  1980  019B                     	;# 
  1981  019B                     	;# 
  1982  019B                     	;# 
  1983  019C                     	;# 
  1984  019C                     	;# 
  1985  019D                     	;# 
  1986  019E                     	;# 
  1987  019F                     	;# 
  1988  020D                     	;# 
  1989  0210                     	;# 
  1990  0211                     	;# 
  1991  0211                     	;# 
  1992  0212                     	;# 
  1993  0212                     	;# 
  1994  0213                     	;# 
  1995  0213                     	;# 
  1996  0214                     	;# 
  1997  0214                     	;# 
  1998  0215                     	;# 
  1999  0215                     	;# 
  2000  0215                     	;# 
  2001  0216                     	;# 
  2002  0216                     	;# 
  2003  0217                     	;# 
  2004  0217                     	;# 
  2005  0291                     	;# 
  2006  0291                     	;# 
  2007  0292                     	;# 
  2008  0293                     	;# 
  2009  0298                     	;# 
  2010  0298                     	;# 
  2011  0299                     	;# 
  2012  029A                     	;# 
  2013  0394                     	;# 
  2014  0395                     	;# 
  2015  0396                     	;# 
  2016  0FE4                     	;# 
  2017  0FE5                     	;# 
  2018  0FE6                     	;# 
  2019  0FE7                     	;# 
  2020  0FE8                     	;# 
  2021  0FE9                     	;# 
  2022  0FEA                     	;# 
  2023  0FEB                     	;# 
  2024  0FED                     	;# 
  2025  0FEE                     	;# 
  2026  0FEF                     	;# 
  2027                           
  2028                           	psect	idataBANK3
  2029  12B9                     __pidataBANK3:	
  2030                           
  2031                           ;initializer for __product
  2032  12B9  3463               	retlw	99
  2033  12BA  3402               	retlw	2
  2034  12BB  3400               	retlw	0
  2035  12BC  3400               	retlw	0
  2036  12BD  3400               	retlw	0
  2037  12BE  3400               	retlw	0
  2038  12BF  3400               	retlw	0
  2039  12C0  3400               	retlw	0
  2040  12C1  3400               	retlw	0
  2041  12C2  3400               	retlw	0
  2042  12C3  3400               	retlw	0
  2043  12C4  3400               	retlw	0
  2044  12C5  34FF               	retlw	255
  2045  12C6  34FF               	retlw	255
  2046  12C7  34FF               	retlw	255
  2047  12C8  3400               	retlw	0
  2048  12C9  3400               	retlw	0
  2049  12CA  3400               	retlw	0
  2050  12CB  3400               	retlw	0
  2051  12CC  3400               	retlw	0
  2052  12CD  3400               	retlw	0
  2053  12CE  3400               	retlw	0
  2054  12CF  3400               	retlw	0
  2055  12D0  3400               	retlw	0
  2056  12D1  3400               	retlw	0
  2057  12D2  3400               	retlw	0
  2058  12D3  3400               	retlw	0
  2059  12D4  3400               	retlw	0
  2060  12D5  3400               	retlw	0
  2061  12D6  3400               	retlw	0
  2062  12D7  3400               	retlw	0
  2063  12D8  3400               	retlw	0
  2064                           
  2065                           	psect	stringtext
  2066  1000                     __pstringtext:	
  2067  1000                     _CC2500_registers_address:	
  2068  1000  3403               	retlw	3
  2069  1001  3416               	retlw	22
  2070  1002  3417               	retlw	23
  2071  1003  341E               	retlw	30
  2072  1004  341F               	retlw	31
  2073  1005  3420               	retlw	32
  2074  1006  342A               	retlw	42
  2075  1007  342B               	retlw	43
  2076  1008  340B               	retlw	11
  2077  1009  340C               	retlw	12
  2078  100A  340D               	retlw	13
  2079  100B  340E               	retlw	14
  2080  100C  340F               	retlw	15
  2081  100D  3410               	retlw	16
  2082  100E  3411               	retlw	17
  2083  100F  3412               	retlw	18
  2084  1010  3413               	retlw	19
  2085  1011  3414               	retlw	20
  2086  1012  340A               	retlw	10
  2087  1013  3415               	retlw	21
  2088  1014  3421               	retlw	33
  2089  1015  3422               	retlw	34
  2090  1016  3418               	retlw	24
  2091  1017  3419               	retlw	25
  2092  1018  341A               	retlw	26
  2093  1019  341B               	retlw	27
  2094  101A  341C               	retlw	28
  2095  101B  341D               	retlw	29
  2096  101C  3423               	retlw	35
  2097  101D  3424               	retlw	36
  2098  101E  3425               	retlw	37
  2099  101F  3426               	retlw	38
  2100  1020  3429               	retlw	41
  2101  1021  342C               	retlw	44
  2102  1022  342D               	retlw	45
  2103  1023  342E               	retlw	46
  2104  1024  3400               	retlw	0
  2105  1025  3401               	retlw	1
  2106  1026  3402               	retlw	2
  2107  1027  3407               	retlw	7
  2108  1028  3408               	retlw	8
  2109  1029  3409               	retlw	9
  2110  102A  3406               	retlw	6
  2111  102B  3404               	retlw	4
  2112  102C  3405               	retlw	5
  2113  102D  3427               	retlw	39
  2114  102E  3428               	retlw	40
  2115  102F                     __end_of_CC2500_registers_address:	
  2116  102F                     _CC2500_rfSettings:	
  2117  102F  3407               	retlw	7
  2118  1030  3407               	retlw	7
  2119  1031  3430               	retlw	48
  2120  1032  3487               	retlw	135
  2121  1033  346B               	retlw	107
  2122  1034  34F8               	retlw	248
  2123  1035  347F               	retlw	127
  2124  1036  343F               	retlw	63
  2125  1037  3409               	retlw	9
  2126  1038  3400               	retlw	0
  2127  1039  345C               	retlw	92
  2128  103A  34A7               	retlw	167
  2129  103B  3462               	retlw	98
  2130  103C  3486               	retlw	134
  2131  103D  3483               	retlw	131
  2132  103E  3403               	retlw	3
  2133  103F  3422               	retlw	34
  2134  1040  34F8               	retlw	248
  2135  1041  3400               	retlw	0
  2136  1042  3444               	retlw	68
  2137  1043  34B6               	retlw	182
  2138  1044  3410               	retlw	16
  2139  1045  3418               	retlw	24
  2140  1046  341D               	retlw	29
  2141  1047  341C               	retlw	28
  2142  1048  34C7               	retlw	199
  2143  1049  3400               	retlw	0
  2144  104A  34B2               	retlw	178
  2145  104B  34EA               	retlw	234
  2146  104C  340A               	retlw	10
  2147  104D  3400               	retlw	0
  2148  104E  3411               	retlw	17
  2149  104F  3459               	retlw	89
  2150  1050  3488               	retlw	136
  2151  1051  3431               	retlw	49
  2152  1052  340B               	retlw	11
  2153  1053  342F               	retlw	47
  2154  1054  342E               	retlw	46
  2155  1055  3406               	retlw	6
  2156  1056  3404               	retlw	4
  2157  1057  3405               	retlw	5
  2158  1058  3400               	retlw	0
  2159  1059  3430               	retlw	48
  2160  105A  34D3               	retlw	211
  2161  105B  3491               	retlw	145
  2162  105C  3441               	retlw	65
  2163  105D  3400               	retlw	0
  2164  105E                     __end_of_CC2500_rfSettings:	
  2165  105E                     _CC2500_patable_vaule:	
  2166  105E  34FE               	retlw	254
  2167  105F  34FE               	retlw	254
  2168  1060  34FE               	retlw	254
  2169  1061  34FE               	retlw	254
  2170  1062  34FE               	retlw	254
  2171  1063  34FE               	retlw	254
  2172  1064  34FE               	retlw	254
  2173  1065  34FE               	retlw	254
  2174  1066                     __end_of_CC2500_patable_vaule:	
  2175                           
  2176                           	psect	nvCOMMON
  2177  007D                     __pnvCOMMON:	
  2178  007D                     _product:	
  2179  007D                     	ds	1
  2180                           
  2181                           	psect	nvBANK1
  2182  00E7                     __pnvBANK1:	
  2183  00E7                     _Timer0:	
  2184  00E7                     	ds	1
  2185  00E8                     _WDT:	
  2186  00E8                     	ds	1
  2187  00E9                     _myMain:	
  2188  00E9                     	ds	1
  2189  00EA                     _Memory:	
  2190  00EA                     	ds	1
  2191  000C                     _PORTA	set	12
  2192  000D                     _PORTB	set	13
  2193  000E                     _PORTC	set	14
  2194  0015                     _TMR0	set	21
  2195  005F                     _GIE	set	95
  2196  005C                     _INTE	set	92
  2197  0059                     _INTF	set	89
  2198  005B                     _IOCIE	set	91
  2199  0058                     _IOCIF	set	88
  2200  005E                     _PEIE	set	94
  2201  0060                     _RA0	set	96
  2202  0063                     _RA3	set	99
  2203  0064                     _RA4	set	100
  2204  0066                     _RA6	set	102
  2205  0067                     _RA7	set	103
  2206  0068                     _RB0	set	104
  2207  0069                     _RB1	set	105
  2208  006B                     _RB3	set	107
  2209  006C                     _RB4	set	108
  2210  006D                     _RB5	set	109
  2211  0070                     _RC0	set	112
  2212  0071                     _RC1	set	113
  2213  0072                     _RC2	set	114
  2214  0074                     _RC4	set	116
  2215  0075                     _RC5	set	117
  2216  0077                     _RC7	set	119
  2217  005D                     _TMR0IE	set	93
  2218  005A                     _TMR0IF	set	90
  2219  009D                     _ADCON0	set	157
  2220  009E                     _ADCON1	set	158
  2221  009C                     _ADRESH	set	156
  2222  009B                     _ADRESL	set	155
  2223  0095                     _OPTION_REG	set	149
  2224  0099                     _OSCCON	set	153
  2225  008C                     _TRISA	set	140
  2226  008D                     _TRISB	set	141
  2227  008E                     _TRISC	set	142
  2228  0097                     _WDTCON	set	151
  2229  04E9                     _GO_nDONE	set	1257
  2230  0117                     _FVRCON	set	279
  2231  010C                     _LATA	set	268
  2232  010D                     _LATB	set	269
  2233  010E                     _LATC	set	270
  2234  018C                     _ANSELA	set	396
  2235  018D                     _ANSELB	set	397
  2236  018E                     _ANSELC	set	398
  2237  0192                     _PMADRH	set	402
  2238  0191                     _PMADRL	set	401
  2239  0196                     _PMCON2	set	406
  2240  0194                     _PMDATH	set	404
  2241  0193                     _PMDATL	set	403
  2242  0CAE                     _CFGS	set	3246
  2243  0CAC                     _FREE	set	3244
  2244  0CAD                     _LWLO	set	3245
  2245  0CA8                     _RD	set	3240
  2246  0CA9                     _WR	set	3241
  2247  0CAA                     _WREN	set	3242
  2248  1068                     _WPUB0	set	4200
  2249  1069                     _WPUB1	set	4201
  2250  106A                     _WPUB2	set	4202
  2251  0396                     _IOCBF	set	918
  2252  0395                     _IOCBN	set	917
  2253  0394                     _IOCBP	set	916
  2254  1CB2                     _IOCBF2	set	7346
  2255                           
  2256                           ; #config settings
  2257  0000                     
  2258                           	psect	cinit
  2259  0018                     start_initialization:	
  2260  0018                     __initialization:	
  2261                           
  2262                           ; Clear objects allocated to BITCOMMON
  2263  0018  01FC               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
  2264                           
  2265                           ; Clear objects allocated to COMMON
  2266  0019  01F8               	clrf	__pbssCOMMON& (0+127)
  2267  001A  01F9               	clrf	(__pbssCOMMON+1)& (0+127)
  2268  001B  01FA               	clrf	(__pbssCOMMON+2)& (0+127)
  2269  001C  01FB               	clrf	(__pbssCOMMON+3)& (0+127)
  2270                           
  2271                           ; Clear objects allocated to BANK1
  2272  001D  30A0               	movlw	low __pbssBANK1
  2273  001E  0084               	movwf	4
  2274  001F  3000               	movlw	high __pbssBANK1
  2275  0020  0085               	movwf	5
  2276  0021  3047               	movlw	71
  2277  0022  319E  2668  3180   	fcall	clear_ram0
  2278                           
  2279                           ; Clear objects allocated to BANK2
  2280  0025  3020               	movlw	low __pbssBANK2
  2281  0026  0084               	movwf	4
  2282  0027  3001               	movlw	high __pbssBANK2
  2283  0028  0085               	movwf	5
  2284  0029  3042               	movlw	66
  2285  002A  319E  2668  3180   	fcall	clear_ram0
  2286                           
  2287                           ; Clear objects allocated to BANK3
  2288  002D  30C0               	movlw	low __pbssBANK3
  2289  002E  0084               	movwf	4
  2290  002F  3001               	movlw	high __pbssBANK3
  2291  0030  0085               	movwf	5
  2292  0031  3010               	movlw	16
  2293  0032  319E  2668  3180   	fcall	clear_ram0
  2294                           
  2295                           ; Clear objects allocated to BANK4
  2296  0035  3020               	movlw	low __pbssBANK4
  2297  0036  0084               	movwf	4
  2298  0037  3002               	movlw	high __pbssBANK4
  2299  0038  0085               	movwf	5
  2300  0039  3025               	movlw	37
  2301  003A  319E  2668  3180   	fcall	clear_ram0
  2302                           
  2303                           ; Initialize objects allocated to BANK3
  2304  003D  30B9               	movlw	low __pidataBANK3
  2305  003E  0084               	movwf	4
  2306  003F  3092               	movlw	(high __pidataBANK3)| (0+128)
  2307  0040  0085               	movwf	5
  2308  0041  30A0               	movlw	low __pdataBANK3
  2309  0042  0086               	movwf	6
  2310  0043  3001               	movlw	high __pdataBANK3
  2311  0044  0087               	movwf	7
  2312  0045  3020               	movlw	32
  2313  0046  319E  2662         	fcall	init_ram
  2314  0048                     end_of_initialization:	
  2315                           ;End of C runtime variable initialization code
  2316                           
  2317  0048                     __end_of__initialization:	
  2318  0048  107E               	bcf	pic14e$flags,0	;clear compiler interrupt flag
  2319  0049  0020               	movlb	0
  2320  004A  3197  2F51         	ljmp	_main	;jump to C main() function
  2321                           
  2322                           	psect	bitbssCOMMON
  2323  03E0                     __pbitbssCOMMON:	
  2324  03E0                     _Receive_OK:	
  2325  03E0                     	ds	1
  2326  03E1                     _Transceive_OK:	
  2327  03E1                     	ds	1
  2328                           
  2329                           	psect	bssCOMMON
  2330  0078                     __pbssCOMMON:	
  2331  0078                     _Buz:	
  2332  0078                     	ds	1
  2333  0079                     _DimmerLights:	
  2334  0079                     	ds	1
  2335  007A                     _DimmerLightsIntr:	
  2336  007A                     	ds	1
  2337  007B                     _Sw:	
  2338  007B                     	ds	1
  2339                           
  2340                           	psect	bssBANK1
  2341  00A0                     __pbssBANK1:	
  2342  00A0                     _RF_Data:	
  2343  00A0                     	ds	21
  2344  00B5                     _RF_Count:	
  2345  00B5                     	ds	2
  2346  00B7                     _CRC:	
  2347  00B7                     	ds	1
  2348  00B8                     _DelayOff:	
  2349  00B8                     	ds	1
  2350  00B9                     _Dimmer:	
  2351  00B9                     	ds	1
  2352  00BA                     _DimmerLights11:	
  2353  00BA                     	ds	1
  2354  00BB                     _DimmerLights22:	
  2355  00BB                     	ds	1
  2356  00BC                     _LED:	
  2357  00BC                     	ds	1
  2358  00BD                     _RF:	
  2359  00BD                     	ds	1
  2360  00BE                     _RFSW:	
  2361  00BE                     	ds	1
  2362  00BF                     _RSSI:	
  2363  00BF                     	ds	1
  2364  00C0                     _Rx_Length:	
  2365  00C0                     	ds	1
  2366  00C1                     _SPI0Buffer:	
  2367  00C1                     	ds	1
  2368  00C2                     _Tx_Length:	
  2369  00C2                     	ds	1
  2370  00C3                     _r_address:	
  2371  00C3                     	ds	1
  2372  00C4                     _r_data:	
  2373  00C4                     	ds	1
  2374  00C5                     _s_data:	
  2375  00C5                     	ds	1
  2376  00C6                     _DlySw1:	
  2377  00C6                     	ds	5
  2378  00CB                     _DlySw2:	
  2379  00CB                     	ds	5
  2380  00D0                     _RF1:	
  2381  00D0                     	ds	4
  2382  00D4                     _VarErrLED:	
  2383  00D4                     	ds	4
  2384  00D8                     _VarLED1:	
  2385  00D8                     	ds	4
  2386  00DC                     _VarLED2:	
  2387  00DC                     	ds	4
  2388  00E0                     _Dimmer1:	
  2389  00E0                     	ds	3
  2390  00E3                     __WDT:	
  2391  00E3                     	ds	2
  2392  00E5                     _RFSW1:	
  2393  00E5                     	ds	1
  2394  00E6                     _RFSW2:	
  2395  00E6                     	ds	1
  2396                           
  2397                           	psect	bssBANK2
  2398  0120                     __pbssBANK2:	
  2399  0120                     _DimmerLights1:	
  2400  0120                     	ds	14
  2401  012E                     _DimmerLights2:	
  2402  012E                     	ds	14
  2403  013C                     _Buz1:	
  2404  013C                     	ds	12
  2405  0148                     _Sw1:	
  2406  0148                     	ds	9
  2407  0151                     _Sw2:	
  2408  0151                     	ds	9
  2409  015A                     _VarTimer0:	
  2410  015A                     	ds	8
  2411                           
  2412                           	psect	bssBANK3
  2413  01C0                     __pbssBANK3:	
  2414  01C0                     __myMain:	
  2415  01C0                     	ds	16
  2416                           
  2417                           	psect	dataBANK3
  2418  01A0                     __pdataBANK3:	
  2419  01A0                     __product:	
  2420  01A0                     	ds	32
  2421                           
  2422                           	psect	bssBANK4
  2423  0220                     __pbssBANK4:	
  2424  0220                     _VarMemory:	
  2425  0220                     	ds	37
  2426                           
  2427                           	psect	clrtext
  2428  1E68                     clear_ram0:	
  2429                           ;	Called with FSR0 containing the base address, and
  2430                           ;	WREG with the size to clear
  2431                           
  2432  1E68  0064               	clrwdt	;clear the watchdog before getting into this loop
  2433  1E69                     clrloop0:	
  2434  1E69  0180               	clrf	0	;clear RAM location pointed to by FSR
  2435  1E6A  3101               	addfsr 0,1
  2436  1E6B  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2437  1E6C  2E69               	goto	clrloop0	;have we reached the end yet?
  2438  1E6D  3400               	retlw	0	;all done for this memory range, return
  2439                           
  2440                           	psect	inittext
  2441  1E62                     init_ram:	
  2442  1E62  00FE               	movwf	126
  2443  1E63                     initloop:	
  2444  1E63  0012               	moviw fsr0++
  2445  1E64  001E               	movwi fsr1++
  2446  1E65  0BFE               	decfsz	126,f
  2447  1E66  2E63               	goto	initloop
  2448  1E67  3400               	retlw	0
  2449                           
  2450                           	psect	cstackCOMMON
  2451  0070                     __pcstackCOMMON:	
  2452  0070                     ?_CC2500_WriteByte:	
  2453  0070                     ?_CC2500_WriteCommand:	
  2454                           ; 0 bytes @ 0x0
  2455                           
  2456  0070                     ?_CC2500_ReadStatus:	
  2457                           ; 0 bytes @ 0x0
  2458                           
  2459  0070                     ?_CC2500_ReadByte:	
  2460                           ; 0 bytes @ 0x0
  2461                           
  2462  0070                     ?_CC2500_PowerRST:	
  2463                           ; 0 bytes @ 0x0
  2464                           
  2465  0070                     ?_CC2500_InitSetREG:	
  2466                           ; 0 bytes @ 0x0
  2467                           
  2468  0070                     ?_CC2500_InitPATable:	
  2469                           ; 0 bytes @ 0x0
  2470                           
  2471  0070                     ?_CC2500_ClearTXFIFO:	
  2472                           ; 0 bytes @ 0x0
  2473                           
  2474  0070                     ?_CC2500_ClearRXFIFO:	
  2475                           ; 0 bytes @ 0x0
  2476                           
  2477  0070                     ?_CC2500_FrequencyCabr:	
  2478                           ; 0 bytes @ 0x0
  2479                           
  2480  0070                     ?_CC2500_SIDLEMode:	
  2481                           ; 0 bytes @ 0x0
  2482                           
  2483  0070                     ?_DlyOff_Initialization:	
  2484                           ; 0 bytes @ 0x0
  2485                           
  2486  0070                     ?_DlyOff_Main:	
  2487                           ; 0 bytes @ 0x0
  2488                           
  2489  0070                     ?_setTxData:	
  2490                           ; 0 bytes @ 0x0
  2491                           
  2492  0070                     ?_setDimmerLights_Initialization:	
  2493                           ; 0 bytes @ 0x0
  2494                           
  2495  0070                     ?_Dimmer_Initialization:	
  2496                           ; 0 bytes @ 0x0
  2497                           
  2498  0070                     ?_setMemory_GO:	
  2499                           ; 0 bytes @ 0x0
  2500                           
  2501  0070                     ?_setDimmerLights_Main:	
  2502                           ; 0 bytes @ 0x0
  2503                           
  2504  0070                     ?_setLED_Initialization:	
  2505                           ; 0 bytes @ 0x0
  2506                           
  2507  0070                     ?_setLED_Main:	
  2508                           ; 0 bytes @ 0x0
  2509                           
  2510  0070                     ?_Fosc_Set:	
  2511                           ; 0 bytes @ 0x0
  2512                           
  2513  0070                     ?_IO_Set:	
  2514                           ; 0 bytes @ 0x0
  2515                           
  2516  0070                     ?_TMR0_Set:	
  2517                           ; 0 bytes @ 0x0
  2518                           
  2519  0070                     ?_ADC_Set:	
  2520                           ; 0 bytes @ 0x0
  2521                           
  2522  0070                     ?_INT_Set:	
  2523                           ; 0 bytes @ 0x0
  2524                           
  2525  0070                     ?_IOC_Set:	
  2526                           ; 0 bytes @ 0x0
  2527                           
  2528  0070                     ?_WDT_Set:	
  2529                           ; 0 bytes @ 0x0
  2530                           
  2531  0070                     ?_IOC_ISR:	
  2532                           ; 0 bytes @ 0x0
  2533                           
  2534  0070                     ?_TMR0_ISR:	
  2535                           ; 0 bytes @ 0x0
  2536                           
  2537  0070                     ?_INT_ISR:	
  2538                           ; 0 bytes @ 0x0
  2539                           
  2540  0070                     ?_Flash_Memory_Write:	
  2541                           ; 0 bytes @ 0x0
  2542                           
  2543  0070                     ?_Flash_Memory_Modify:	
  2544                           ; 0 bytes @ 0x0
  2545                           
  2546  0070                     ?_WDT_Clearing:	
  2547                           ; 0 bytes @ 0x0
  2548                           
  2549  0070                     ?_myMain_Initialization:	
  2550                           ; 0 bytes @ 0x0
  2551                           
  2552  0070                     ?_Switch_Initialization:	
  2553                           ; 0 bytes @ 0x0
  2554                           
  2555  0070                     ?_RF_Initialization:	
  2556                           ; 0 bytes @ 0x0
  2557                           
  2558  0070                     ?_my_Main:	
  2559                           ; 0 bytes @ 0x0
  2560                           
  2561  0070                     ?_Switch_Main:	
  2562                           ; 0 bytes @ 0x0
  2563                           
  2564  0070                     ?_RF_Main:	
  2565                           ; 0 bytes @ 0x0
  2566                           
  2567  0070                     ?_setSw_Enable:	
  2568                           ; 0 bytes @ 0x0
  2569                           
  2570  0070                     ?_setRF_Initialization:	
  2571                           ; 0 bytes @ 0x0
  2572                           
  2573  0070                     ?_setRF_Main:	
  2574                           ; 0 bytes @ 0x0
  2575                           
  2576  0070                     ?_RF_RxDisable:	
  2577                           ; 0 bytes @ 0x0
  2578                           
  2579  0070                     ?_getRxData:	
  2580                           ; 0 bytes @ 0x0
  2581                           
  2582  0070                     ?_setLog_Code:	
  2583                           ; 0 bytes @ 0x0
  2584                           
  2585  0070                     ?_setControl_Lights_Table:	
  2586                           ; 0 bytes @ 0x0
  2587                           
  2588  0070                     ?_setRFSW_Control:	
  2589                           ; 0 bytes @ 0x0
  2590                           
  2591  0070                     ?_setRFSW_AdjControl:	
  2592                           ; 0 bytes @ 0x0
  2593                           
  2594  0070                     ?_setRF_DimmerValue:	
  2595                           ; 0 bytes @ 0x0
  2596                           
  2597  0070                     ?_setSw_Initialization:	
  2598                           ; 0 bytes @ 0x0
  2599                           
  2600  0070                     ?_setSw_Main:	
  2601                           ; 0 bytes @ 0x0
  2602                           
  2603  0070                     ?_Sw_DimmerOnFunc:	
  2604                           ; 0 bytes @ 0x0
  2605                           
  2606  0070                     ?_Sw_DimmerAdjFunc:	
  2607                           ; 0 bytes @ 0x0
  2608                           
  2609  0070                     ?_Sw_DimmerOffFunc:	
  2610                           ; 0 bytes @ 0x0
  2611                           
  2612  0070                     ?_Buzzer_Initialization:	
  2613                           ; 0 bytes @ 0x0
  2614                           
  2615  0070                     ?_Buz_Counter:	
  2616                           ; 0 bytes @ 0x0
  2617                           
  2618  0070                     ??_Buz_Counter:	
  2619                           ; 0 bytes @ 0x0
  2620                           
  2621  0070                     ?_Buzzer_Main:	
  2622                           ; 0 bytes @ 0x0
  2623                           
  2624  0070                     ?_CC2500_TxData:	
  2625                           ; 0 bytes @ 0x0
  2626                           
  2627  0070                     ?_CC2500_RxData:	
  2628                           ; 0 bytes @ 0x0
  2629                           
  2630  0070                     ?_CC2500_PowerOnInitial:	
  2631                           ; 0 bytes @ 0x0
  2632                           
  2633  0070                     ?_DelayOffPointSelect:	
  2634                           ; 0 bytes @ 0x0
  2635                           
  2636  0070                     ?_DelayOff_Initialization:	
  2637                           ; 0 bytes @ 0x0
  2638                           
  2639  0070                     ?_DelayOff_Main:	
  2640                           ; 0 bytes @ 0x0
  2641                           
  2642  0070                     ?_DimmerIntrPointSelect:	
  2643                           ; 0 bytes @ 0x0
  2644                           
  2645  0070                     ??_DimmerIntrPointSelect:	
  2646                           ; 0 bytes @ 0x0
  2647                           
  2648  0070                     ?_setDimmerLights_IntrControl:	
  2649                           ; 0 bytes @ 0x0
  2650                           
  2651  0070                     ?_setDimmerLights_IntrGO:	
  2652                           ; 0 bytes @ 0x0
  2653                           
  2654  0070                     ?_DimmerLightsPointSelect:	
  2655                           ; 0 bytes @ 0x0
  2656                           
  2657  0070                     ?_DimmerLights_Initialization:	
  2658                           ; 0 bytes @ 0x0
  2659                           
  2660  0070                     ?_DimmerLights_Close:	
  2661                           ; 0 bytes @ 0x0
  2662                           
  2663  0070                     ?_DimmerLights_Main:	
  2664                           ; 0 bytes @ 0x0
  2665                           
  2666  0070                     ?_setDimmerLights_AdjRF:	
  2667                           ; 0 bytes @ 0x0
  2668                           
  2669  0070                     ?_LedPointSelect:	
  2670                           ; 0 bytes @ 0x0
  2671                           
  2672  0070                     ?_LED_Initialization:	
  2673                           ; 0 bytes @ 0x0
  2674                           
  2675  0070                     ?_LED_Main:	
  2676                           ; 0 bytes @ 0x0
  2677                           
  2678  0070                     ?_Mcu_Initialization:	
  2679                           ; 0 bytes @ 0x0
  2680                           
  2681  0070                     ?_ISR:	
  2682                           ; 0 bytes @ 0x0
  2683                           
  2684  0070                     ?_setDimmerReClock:	
  2685                           ; 0 bytes @ 0x0
  2686                           
  2687  0070                     ?_setINT_GO:	
  2688                           ; 0 bytes @ 0x0
  2689                           
  2690  0070                     ?_Flash_Memory_Initialization:	
  2691                           ; 0 bytes @ 0x0
  2692                           
  2693  0070                     ?_Flash_Memory_Main:	
  2694                           ; 0 bytes @ 0x0
  2695                           
  2696  0070                     ?_Flash_Memory_Unlock:	
  2697                           ; 0 bytes @ 0x0
  2698                           
  2699  0070                     ?_Flash_Memory_Erasing:	
  2700                           ; 0 bytes @ 0x0
  2701                           
  2702  0070                     ?_WDT_Main:	
  2703                           ; 0 bytes @ 0x0
  2704                           
  2705  0070                     ?_RfPointSelect:	
  2706                           ; 0 bytes @ 0x0
  2707                           
  2708  0070                     ?_RfSWPointSelect:	
  2709                           ; 0 bytes @ 0x0
  2710                           
  2711  0070                     ?_TouchPower:	
  2712                           ; 0 bytes @ 0x0
  2713                           
  2714  0070                     ?_SwPointSelect:	
  2715                           ; 0 bytes @ 0x0
  2716                           
  2717  0070                     ?i1_RfPointSelect:	
  2718                           ; 0 bytes @ 0x0
  2719                           
  2720  0070                     ??i1_RfPointSelect:	
  2721                           ; 0 bytes @ 0x0
  2722                           
  2723  0070                     ?_DelayTimejudge:	
  2724                           ; 0 bytes @ 0x0
  2725                           
  2726  0070                     ?_getDimmerLights_StatusFlag:	
  2727                           ; 1 bytes @ 0x0
  2728                           
  2729  0070                     ?_getPercentValue:	
  2730                           ; 1 bytes @ 0x0
  2731                           
  2732  0070                     ?_Flash_Memory_Read:	
  2733                           ; 1 bytes @ 0x0
  2734                           
  2735  0070                     ?_setPercentValue:	
  2736                           ; 1 bytes @ 0x0
  2737                           
  2738  0070                     setRF_Initialization@rf:	
  2739                           ; 1 bytes @ 0x0
  2740                           
  2741                           
  2742                           ; 1 bytes @ 0x0
  2743  0070                     	ds	1
  2744  0071                     DimmerIntrPointSelect@lights:	
  2745  0071                     i1RfPointSelect@rf:	
  2746                           ; 1 bytes @ 0x1
  2747                           
  2748                           
  2749                           ; 1 bytes @ 0x1
  2750  0071                     	ds	1
  2751  0072                     ?_setRF_ReceiveGO:	
  2752  0072                     ?_setRF_RxStatus:	
  2753                           ; 0 bytes @ 0x2
  2754                           
  2755  0072                     ??_setDimmerLights_IntrControl:	
  2756                           ; 0 bytes @ 0x2
  2757                           
  2758  0072                     ??_setDimmerLights_IntrGO:	
  2759                           ; 0 bytes @ 0x2
  2760                           
  2761  0072                     setDimmerLights_IntrGO@lights:	
  2762                           ; 0 bytes @ 0x2
  2763                           
  2764  0072                     setRF_ReceiveGO@command:	
  2765                           ; 1 bytes @ 0x2
  2766                           
  2767  0072                     setRF_RxStatus@command:	
  2768                           ; 1 bytes @ 0x2
  2769                           
  2770                           
  2771                           ; 1 bytes @ 0x2
  2772  0072                     	ds	1
  2773  0073                     ??_IOC_ISR:	
  2774  0073                     ??_setRF_ReceiveGO:	
  2775                           ; 0 bytes @ 0x3
  2776                           
  2777  0073                     ??_setRF_RxStatus:	
  2778                           ; 0 bytes @ 0x3
  2779                           
  2780  0073                     ??_setDimmerReClock:	
  2781                           ; 0 bytes @ 0x3
  2782                           
  2783  0073                     setRF_ReceiveGO@rf:	
  2784                           ; 0 bytes @ 0x3
  2785                           
  2786  0073                     setRF_RxStatus@rf:	
  2787                           ; 1 bytes @ 0x3
  2788                           
  2789                           
  2790                           ; 1 bytes @ 0x3
  2791  0073                     	ds	1
  2792  0074                     ??_INT_ISR:	
  2793                           
  2794                           ; 0 bytes @ 0x4
  2795  0074                     	ds	2
  2796  0076                     setDimmerLights_IntrControl@lights:	
  2797                           
  2798                           ; 1 bytes @ 0x6
  2799  0076                     	ds	1
  2800  0077                     ??_TMR0_ISR:	
  2801  0077                     ??_ISR:	
  2802                           ; 0 bytes @ 0x7
  2803                           
  2804                           
  2805                           ; 0 bytes @ 0x7
  2806  0077                     	ds	1
  2807                           
  2808                           	psect	cstackBANK0
  2809  0020                     __pcstackBANK0:	
  2810  0020                     ??_CC2500_WriteByte:	
  2811  0020                     ??_CC2500_ReadByte:	
  2812                           ; 0 bytes @ 0x0
  2813                           
  2814  0020                     ?_DelayTime_1us:	
  2815                           ; 0 bytes @ 0x0
  2816                           
  2817  0020                     ??_DelayTimejudge:	
  2818                           ; 0 bytes @ 0x0
  2819                           
  2820  0020                     ??_Dimmer_Initialization:	
  2821                           ; 0 bytes @ 0x0
  2822                           
  2823  0020                     ??_getDimmerLights_StatusFlag:	
  2824                           ; 0 bytes @ 0x0
  2825                           
  2826  0020                     ??_setMemory_GO:	
  2827                           ; 0 bytes @ 0x0
  2828                           
  2829  0020                     ??_Fosc_Set:	
  2830                           ; 0 bytes @ 0x0
  2831                           
  2832  0020                     ??_IO_Set:	
  2833                           ; 0 bytes @ 0x0
  2834                           
  2835  0020                     ??_TMR0_Set:	
  2836                           ; 0 bytes @ 0x0
  2837                           
  2838  0020                     ??_ADC_Set:	
  2839                           ; 0 bytes @ 0x0
  2840                           
  2841  0020                     ??_INT_Set:	
  2842                           ; 0 bytes @ 0x0
  2843                           
  2844  0020                     ??_IOC_Set:	
  2845                           ; 0 bytes @ 0x0
  2846                           
  2847  0020                     ??_WDT_Set:	
  2848                           ; 0 bytes @ 0x0
  2849                           
  2850  0020                     ??_Flash_Memory_Read:	
  2851                           ; 0 bytes @ 0x0
  2852                           
  2853  0020                     ??_Flash_Memory_Write:	
  2854                           ; 0 bytes @ 0x0
  2855                           
  2856  0020                     ??_WDT_Clearing:	
  2857                           ; 0 bytes @ 0x0
  2858                           
  2859  0020                     ??_myMain_Initialization:	
  2860                           ; 0 bytes @ 0x0
  2861                           
  2862  0020                     ??_setRF_Initialization:	
  2863                           ; 0 bytes @ 0x0
  2864                           
  2865  0020                     ??_Buzzer_Initialization:	
  2866                           ; 0 bytes @ 0x0
  2867                           
  2868  0020                     ??_Buzzer_Main:	
  2869                           ; 0 bytes @ 0x0
  2870                           
  2871  0020                     ??_DelayOffPointSelect:	
  2872                           ; 0 bytes @ 0x0
  2873                           
  2874  0020                     ??_DimmerLightsPointSelect:	
  2875                           ; 0 bytes @ 0x0
  2876                           
  2877  0020                     ??_LedPointSelect:	
  2878                           ; 0 bytes @ 0x0
  2879                           
  2880  0020                     ??_setINT_GO:	
  2881                           ; 0 bytes @ 0x0
  2882                           
  2883  0020                     ??_Flash_Memory_Unlock:	
  2884                           ; 0 bytes @ 0x0
  2885                           
  2886  0020                     ??_Flash_Memory_Erasing:	
  2887                           ; 0 bytes @ 0x0
  2888                           
  2889  0020                     ??_WDT_Main:	
  2890                           ; 0 bytes @ 0x0
  2891                           
  2892  0020                     ??_RfPointSelect:	
  2893                           ; 0 bytes @ 0x0
  2894                           
  2895  0020                     ??_RfSWPointSelect:	
  2896                           ; 0 bytes @ 0x0
  2897                           
  2898  0020                     ??_TouchPower:	
  2899                           ; 0 bytes @ 0x0
  2900                           
  2901  0020                     ??_SwPointSelect:	
  2902                           ; 0 bytes @ 0x0
  2903                           
  2904  0020                     ?___awdiv:	
  2905                           ; 0 bytes @ 0x0
  2906                           
  2907  0020                     ?___ftpack:	
  2908                           ; 2 bytes @ 0x0
  2909                           
  2910  0020                     setINT_GO@command:	
  2911                           ; 3 bytes @ 0x0
  2912                           
  2913  0020                     DelayTime_1us@count:	
  2914                           ; 1 bytes @ 0x0
  2915                           
  2916  0020                     ___awdiv@divisor:	
  2917                           ; 2 bytes @ 0x0
  2918                           
  2919  0020                     ___ftpack@arg:	
  2920                           ; 2 bytes @ 0x0
  2921                           
  2922                           
  2923                           ; 3 bytes @ 0x0
  2924  0020                     	ds	1
  2925  0021                     ??_RF_Initialization:	
  2926  0021                     ??_Mcu_Initialization:	
  2927                           ; 0 bytes @ 0x1
  2928                           
  2929  0021                     CC2500_WriteByte@loop_a:	
  2930                           ; 0 bytes @ 0x1
  2931                           
  2932  0021                     CC2500_ReadByte@loop_b:	
  2933                           ; 1 bytes @ 0x1
  2934                           
  2935  0021                     DelayOffPointSelect@sw:	
  2936                           ; 1 bytes @ 0x1
  2937                           
  2938  0021                     DelayTimejudge@value:	
  2939                           ; 1 bytes @ 0x1
  2940                           
  2941  0021                     DimmerLightsPointSelect@lights:	
  2942                           ; 1 bytes @ 0x1
  2943                           
  2944  0021                     getDimmerLights_StatusFlag@Status:	
  2945                           ; 1 bytes @ 0x1
  2946                           
  2947  0021                     LedPointSelect@led:	
  2948                           ; 1 bytes @ 0x1
  2949                           
  2950  0021                     Flash_Memory_Read@i:	
  2951                           ; 1 bytes @ 0x1
  2952                           
  2953  0021                     Flash_Memory_Write@i:	
  2954                           ; 1 bytes @ 0x1
  2955                           
  2956  0021                     RfPointSelect@rf:	
  2957                           ; 1 bytes @ 0x1
  2958                           
  2959  0021                     RfSWPointSelect@sw:	
  2960                           ; 1 bytes @ 0x1
  2961                           
  2962  0021                     SwPointSelect@sw:	
  2963                           ; 1 bytes @ 0x1
  2964                           
  2965                           
  2966                           ; 1 bytes @ 0x1
  2967  0021                     	ds	1
  2968  0022                     ??_CC2500_WriteCommand:	
  2969  0022                     ??_CC2500_ReadStatus:	
  2970                           ; 0 bytes @ 0x2
  2971                           
  2972  0022                     ??_DelayTime_1us:	
  2973                           ; 0 bytes @ 0x2
  2974                           
  2975  0022                     ?_CC2500_WriteREG:	
  2976                           ; 0 bytes @ 0x2
  2977                           
  2978  0022                     ??_DlyOff_Initialization:	
  2979                           ; 0 bytes @ 0x2
  2980                           
  2981  0022                     ?_setSw_Status:	
  2982                           ; 0 bytes @ 0x2
  2983                           
  2984  0022                     ?_setRFSW_Status:	
  2985                           ; 0 bytes @ 0x2
  2986                           
  2987  0022                     ?_setDimmerLights_Trigger:	
  2988                           ; 0 bytes @ 0x2
  2989                           
  2990  0022                     ?_setDimmerLights_Switch:	
  2991                           ; 0 bytes @ 0x2
  2992                           
  2993  0022                     ??_setTxData:	
  2994                           ; 0 bytes @ 0x2
  2995                           
  2996  0022                     ??_setDimmerLights_Initialization:	
  2997                           ; 0 bytes @ 0x2
  2998                           
  2999  0022                     ?_setLED:	
  3000                           ; 0 bytes @ 0x2
  3001                           
  3002  0022                     ??_setLED_Main:	
  3003                           ; 0 bytes @ 0x2
  3004                           
  3005  0022                     ??_setSw_Enable:	
  3006                           ; 0 bytes @ 0x2
  3007                           
  3008  0022                     ?_setRF_Enable:	
  3009                           ; 0 bytes @ 0x2
  3010                           
  3011  0022                     ?_setDimmerLights_AdjGo:	
  3012                           ; 0 bytes @ 0x2
  3013                           
  3014  0022                     ?_setDimmerLights_TriggerAdj:	
  3015                           ; 0 bytes @ 0x2
  3016                           
  3017  0022                     ?_setRF_Learn:	
  3018                           ; 0 bytes @ 0x2
  3019                           
  3020  0022                     CC2500_WriteREG@value:	
  3021                           ; 0 bytes @ 0x2
  3022                           
  3023  0022                     DlyOff_Initialization@sw:	
  3024                           ; 1 bytes @ 0x2
  3025                           
  3026  0022                     DelayTimejudge@i:	
  3027                           ; 1 bytes @ 0x2
  3028                           
  3029  0022                     _getDimmerLights_StatusFlag$1857:	
  3030                           ; 1 bytes @ 0x2
  3031                           
  3032  0022                     setDimmerLights_Switch@command:	
  3033                           ; 1 bytes @ 0x2
  3034                           
  3035  0022                     setDimmerLights_AdjGo@command:	
  3036                           ; 1 bytes @ 0x2
  3037                           
  3038  0022                     setDimmerLights_Trigger@command:	
  3039                           ; 1 bytes @ 0x2
  3040                           
  3041  0022                     setDimmerLights_TriggerAdj@command:	
  3042                           ; 1 bytes @ 0x2
  3043                           
  3044  0022                     setLED@command:	
  3045                           ; 1 bytes @ 0x2
  3046                           
  3047  0022                     Flash_Memory_Read@address:	
  3048                           ; 1 bytes @ 0x2
  3049                           
  3050  0022                     setMemory_GO@command:	
  3051                           ; 1 bytes @ 0x2
  3052                           
  3053  0022                     setRF_Learn@command:	
  3054                           ; 1 bytes @ 0x2
  3055                           
  3056  0022                     setRF_Enable@command:	
  3057                           ; 1 bytes @ 0x2
  3058                           
  3059  0022                     setRFSW_Status@command:	
  3060                           ; 1 bytes @ 0x2
  3061                           
  3062  0022                     setSw_Enable@command:	
  3063                           ; 1 bytes @ 0x2
  3064                           
  3065  0022                     setSw_Status@command:	
  3066                           ; 1 bytes @ 0x2
  3067                           
  3068  0022                     DelayTime_1us@i:	
  3069                           ; 1 bytes @ 0x2
  3070                           
  3071  0022                     ___awdiv@dividend:	
  3072                           ; 2 bytes @ 0x2
  3073                           
  3074                           
  3075                           ; 2 bytes @ 0x2
  3076  0022                     	ds	1
  3077  0023                     ??_CC2500_WriteREG:	
  3078  0023                     ??_setSw_Status:	
  3079                           ; 0 bytes @ 0x3
  3080                           
  3081  0023                     ??_setRFSW_Status:	
  3082                           ; 0 bytes @ 0x3
  3083                           
  3084  0023                     ??_setDimmerLights_Trigger:	
  3085                           ; 0 bytes @ 0x3
  3086                           
  3087  0023                     ??_setDimmerLights_Switch:	
  3088                           ; 0 bytes @ 0x3
  3089                           
  3090  0023                     ??_setLED:	
  3091                           ; 0 bytes @ 0x3
  3092                           
  3093  0023                     ??_setRF_Enable:	
  3094                           ; 0 bytes @ 0x3
  3095                           
  3096  0023                     ??_DelayOff_Initialization:	
  3097                           ; 0 bytes @ 0x3
  3098                           
  3099  0023                     ?_setDelayOff_GO:	
  3100                           ; 0 bytes @ 0x3
  3101                           
  3102  0023                     ??_DimmerLights_Close:	
  3103                           ; 0 bytes @ 0x3
  3104                           
  3105  0023                     ??_setDimmerLights_AdjGo:	
  3106                           ; 0 bytes @ 0x3
  3107                           
  3108  0023                     ??_setDimmerLights_TriggerAdj:	
  3109                           ; 0 bytes @ 0x3
  3110                           
  3111  0023                     ??_setRF_Learn:	
  3112                           ; 0 bytes @ 0x3
  3113                           
  3114  0023                     CC2500_WriteCommand@command:	
  3115                           ; 0 bytes @ 0x3
  3116                           
  3117  0023                     CC2500_ReadStatus@status_addr:	
  3118                           ; 1 bytes @ 0x3
  3119                           
  3120  0023                     setDelayOff_GO@command:	
  3121                           ; 1 bytes @ 0x3
  3122                           
  3123  0023                     setDimmerLights_Initialization@lights:	
  3124                           ; 1 bytes @ 0x3
  3125                           
  3126  0023                     setDimmerLights_Switch@lights:	
  3127                           ; 1 bytes @ 0x3
  3128                           
  3129  0023                     setDimmerLights_AdjGo@lights:	
  3130                           ; 1 bytes @ 0x3
  3131                           
  3132  0023                     setDimmerLights_Trigger@lights:	
  3133                           ; 1 bytes @ 0x3
  3134                           
  3135  0023                     setDimmerLights_TriggerAdj@lights:	
  3136                           ; 1 bytes @ 0x3
  3137                           
  3138  0023                     setLED@led:	
  3139                           ; 1 bytes @ 0x3
  3140                           
  3141  0023                     Flash_Memory_Read@ret:	
  3142                           ; 1 bytes @ 0x3
  3143                           
  3144  0023                     setRF_Learn@rf:	
  3145                           ; 1 bytes @ 0x3
  3146                           
  3147  0023                     setTxData@rf:	
  3148                           ; 1 bytes @ 0x3
  3149                           
  3150  0023                     setRF_Enable@rf:	
  3151                           ; 1 bytes @ 0x3
  3152                           
  3153  0023                     setRFSW_Status@sw:	
  3154                           ; 1 bytes @ 0x3
  3155                           
  3156  0023                     setSw_Status@sw:	
  3157                           ; 1 bytes @ 0x3
  3158                           
  3159  0023                     ___ftpack@exp:	
  3160                           ; 1 bytes @ 0x3
  3161                           
  3162                           
  3163                           ; 1 bytes @ 0x3
  3164  0023                     	ds	1
  3165  0024                     ??_CC2500_ClearTXFIFO:	
  3166  0024                     ??_CC2500_ClearRXFIFO:	
  3167                           ; 0 bytes @ 0x4
  3168                           
  3169  0024                     ??_CC2500_SIDLEMode:	
  3170                           ; 0 bytes @ 0x4
  3171                           
  3172  0024                     ?_setDimmerLights:	
  3173                           ; 0 bytes @ 0x4
  3174                           
  3175  0024                     ??_setLED_Initialization:	
  3176                           ; 0 bytes @ 0x4
  3177                           
  3178  0024                     ??_Flash_Memory_Modify:	
  3179                           ; 0 bytes @ 0x4
  3180                           
  3181  0024                     ??_RF_RxDisable:	
  3182                           ; 0 bytes @ 0x4
  3183                           
  3184  0024                     ??_setSw_Initialization:	
  3185                           ; 0 bytes @ 0x4
  3186                           
  3187  0024                     ??_Sw_DimmerAdjFunc:	
  3188                           ; 0 bytes @ 0x4
  3189                           
  3190  0024                     ??_CC2500_TxData:	
  3191                           ; 0 bytes @ 0x4
  3192                           
  3193  0024                     ??_CC2500_RxData:	
  3194                           ; 0 bytes @ 0x4
  3195                           
  3196  0024                     ??_DimmerLights_Initialization:	
  3197                           ; 0 bytes @ 0x4
  3198                           
  3199  0024                     ??___awdiv:	
  3200                           ; 0 bytes @ 0x4
  3201                           
  3202  0024                     CC2500_WriteREG@w_addr:	
  3203                           ; 0 bytes @ 0x4
  3204                           
  3205  0024                     setDelayOff_GO@value:	
  3206                           ; 1 bytes @ 0x4
  3207                           
  3208  0024                     setDimmerLights@status:	
  3209                           ; 1 bytes @ 0x4
  3210                           
  3211  0024                     setLED_Initialization@led:	
  3212                           ; 1 bytes @ 0x4
  3213                           
  3214  0024                     setLED_Main@led:	
  3215                           ; 1 bytes @ 0x4
  3216                           
  3217  0024                     RF_RxDisable@rf:	
  3218                           ; 1 bytes @ 0x4
  3219                           
  3220  0024                     setSw_Initialization@sw:	
  3221                           ; 1 bytes @ 0x4
  3222                           
  3223  0024                     Sw_DimmerAdjFunc@Idle:	
  3224                           ; 1 bytes @ 0x4
  3225                           
  3226  0024                     ___ftpack@sign:	
  3227                           ; 1 bytes @ 0x4
  3228                           
  3229  0024                     DelayTime_1us@j:	
  3230                           ; 1 bytes @ 0x4
  3231                           
  3232                           
  3233                           ; 2 bytes @ 0x4
  3234  0024                     	ds	1
  3235  0025                     ??_CC2500_InitSetREG:	
  3236  0025                     ??_CC2500_InitPATable:	
  3237                           ; 0 bytes @ 0x5
  3238                           
  3239  0025                     ??_setDimmerLights:	
  3240                           ; 0 bytes @ 0x5
  3241                           
  3242  0025                     ??_Switch_Initialization:	
  3243                           ; 0 bytes @ 0x5
  3244                           
  3245  0025                     ??___ftpack:	
  3246                           ; 0 bytes @ 0x5
  3247                           
  3248  0025                     ??_setDelayOff_GO:	
  3249                           ; 0 bytes @ 0x5
  3250                           
  3251  0025                     ??_LED_Initialization:	
  3252                           ; 0 bytes @ 0x5
  3253                           
  3254  0025                     ??_LED_Main:	
  3255                           ; 0 bytes @ 0x5
  3256                           
  3257  0025                     CC2500_TxData@loop_e:	
  3258                           ; 0 bytes @ 0x5
  3259                           
  3260  0025                     CC2500_RxData@loop_f:	
  3261                           ; 1 bytes @ 0x5
  3262                           
  3263  0025                     Sw_DimmerAdjFunc@sw:	
  3264                           ; 1 bytes @ 0x5
  3265                           
  3266  0025                     ___awdiv@counter:	
  3267                           ; 1 bytes @ 0x5
  3268                           
  3269                           
  3270                           ; 1 bytes @ 0x5
  3271  0025                     	ds	1
  3272  0026                     ??_CC2500_PowerRST:	
  3273  0026                     ??_CC2500_FrequencyCabr:	
  3274                           ; 0 bytes @ 0x6
  3275                           
  3276  0026                     CC2500_InitSetREG@temp1:	
  3277                           ; 0 bytes @ 0x6
  3278                           
  3279  0026                     CC2500_InitPATable@temp:	
  3280                           ; 1 bytes @ 0x6
  3281                           
  3282  0026                     setDimmerLights@lights:	
  3283                           ; 1 bytes @ 0x6
  3284                           
  3285  0026                     Flash_Memory_Modify@i:	
  3286                           ; 1 bytes @ 0x6
  3287                           
  3288  0026                     ___awdiv@sign:	
  3289                           ; 1 bytes @ 0x6
  3290                           
  3291                           
  3292                           ; 1 bytes @ 0x6
  3293  0026                     	ds	1
  3294  0027                     ??_Flash_Memory_Main:	
  3295  0027                     CC2500_InitSetREG@temp2:	
  3296                           ; 0 bytes @ 0x7
  3297                           
  3298  0027                     CC2500_InitPATable@loop_d:	
  3299                           ; 1 bytes @ 0x7
  3300                           
  3301  0027                     setDelayOff_GO@sw:	
  3302                           ; 1 bytes @ 0x7
  3303                           
  3304  0027                     ___awdiv@quotient:	
  3305                           ; 1 bytes @ 0x7
  3306                           
  3307                           
  3308                           ; 2 bytes @ 0x7
  3309  0027                     	ds	1
  3310  0028                     ?___awtoft:	
  3311  0028                     CC2500_InitSetREG@loop_c:	
  3312                           ; 3 bytes @ 0x8
  3313                           
  3314  0028                     ___awtoft@c:	
  3315                           ; 1 bytes @ 0x8
  3316                           
  3317                           
  3318                           ; 2 bytes @ 0x8
  3319  0028                     	ds	1
  3320  0029                     ?_setBuz:	
  3321  0029                     ??_CC2500_PowerOnInitial:	
  3322                           ; 0 bytes @ 0x9
  3323                           
  3324  0029                     setBuz@time:	
  3325                           ; 0 bytes @ 0x9
  3326                           
  3327                           
  3328                           ; 2 bytes @ 0x9
  3329  0029                     	ds	2
  3330  002B                     ??_setBuz:	
  3331  002B                     ??___awtoft:	
  3332                           ; 0 bytes @ 0xB
  3333                           
  3334                           
  3335                           ; 0 bytes @ 0xB
  3336  002B                     	ds	1
  3337  002C                     setBuz@count:	
  3338                           
  3339                           ; 1 bytes @ 0xC
  3340  002C                     	ds	1
  3341  002D                     ??_my_Main:	
  3342  002D                     ??_setLog_Code:	
  3343                           ; 0 bytes @ 0xD
  3344                           
  3345  002D                     ___awtoft@sign:	
  3346                           ; 0 bytes @ 0xD
  3347                           
  3348                           
  3349                           ; 1 bytes @ 0xD
  3350  002D                     	ds	1
  3351  002E                     ?___ftdiv:	
  3352  002E                     ?___ftmul:	
  3353                           ; 3 bytes @ 0xE
  3354                           
  3355  002E                     setLog_Code@rf:	
  3356                           ; 3 bytes @ 0xE
  3357                           
  3358  002E                     ___ftdiv@f2:	
  3359                           ; 1 bytes @ 0xE
  3360                           
  3361  002E                     ___ftmul@f1:	
  3362                           ; 3 bytes @ 0xE
  3363                           
  3364                           
  3365                           ; 3 bytes @ 0xE
  3366  002E                     	ds	3
  3367  0031                     ___ftdiv@f1:	
  3368  0031                     ___ftmul@f2:	
  3369                           ; 3 bytes @ 0x11
  3370                           
  3371                           
  3372                           ; 3 bytes @ 0x11
  3373  0031                     	ds	3
  3374  0034                     ??___ftdiv:	
  3375  0034                     ??___ftmul:	
  3376                           ; 0 bytes @ 0x14
  3377                           
  3378                           
  3379                           ; 0 bytes @ 0x14
  3380  0034                     	ds	4
  3381  0038                     ___ftdiv@cntr:	
  3382  0038                     ___ftmul@exp:	
  3383                           ; 1 bytes @ 0x18
  3384                           
  3385                           
  3386                           ; 1 bytes @ 0x18
  3387  0038                     	ds	1
  3388  0039                     ___ftdiv@f3:	
  3389  0039                     ___ftmul@f3_as_product:	
  3390                           ; 3 bytes @ 0x19
  3391                           
  3392                           
  3393                           ; 3 bytes @ 0x19
  3394  0039                     	ds	3
  3395  003C                     ___ftdiv@exp:	
  3396  003C                     ___ftmul@cntr:	
  3397                           ; 1 bytes @ 0x1C
  3398                           
  3399                           
  3400                           ; 1 bytes @ 0x1C
  3401  003C                     	ds	1
  3402  003D                     ___ftdiv@sign:	
  3403  003D                     ___ftmul@sign:	
  3404                           ; 1 bytes @ 0x1D
  3405                           
  3406                           
  3407                           ; 1 bytes @ 0x1D
  3408  003D                     	ds	1
  3409  003E                     ?___ftadd:	
  3410  003E                     ___ftadd@f1:	
  3411                           ; 3 bytes @ 0x1E
  3412                           
  3413                           
  3414                           ; 3 bytes @ 0x1E
  3415  003E                     	ds	3
  3416  0041                     ___ftadd@f2:	
  3417                           
  3418                           ; 3 bytes @ 0x21
  3419  0041                     	ds	3
  3420  0044                     ??___ftadd:	
  3421                           
  3422                           ; 0 bytes @ 0x24
  3423  0044                     	ds	4
  3424  0048                     ___ftadd@sign:	
  3425                           
  3426                           ; 1 bytes @ 0x28
  3427  0048                     	ds	1
  3428  0049                     ___ftadd@exp2:	
  3429                           
  3430                           ; 1 bytes @ 0x29
  3431  0049                     	ds	1
  3432  004A                     ___ftadd@exp1:	
  3433                           
  3434                           ; 1 bytes @ 0x2A
  3435  004A                     	ds	1
  3436  004B                     ?___fttol:	
  3437  004B                     ___fttol@f1:	
  3438                           ; 4 bytes @ 0x2B
  3439                           
  3440                           
  3441                           ; 3 bytes @ 0x2B
  3442  004B                     	ds	4
  3443  004F                     ??___fttol:	
  3444                           
  3445                           ; 0 bytes @ 0x2F
  3446  004F                     	ds	4
  3447  0053                     ___fttol@sign1:	
  3448                           
  3449                           ; 1 bytes @ 0x33
  3450  0053                     	ds	1
  3451  0054                     ___fttol@lval:	
  3452                           
  3453                           ; 4 bytes @ 0x34
  3454  0054                     	ds	4
  3455  0058                     ___fttol@exp1:	
  3456                           
  3457                           ; 1 bytes @ 0x38
  3458  0058                     	ds	1
  3459  0059                     ??_getPercentValue:	
  3460  0059                     ??_setPercentValue:	
  3461                           ; 0 bytes @ 0x39
  3462                           
  3463  0059                     setPercentValue@value:	
  3464                           ; 0 bytes @ 0x39
  3465                           
  3466                           
  3467                           ; 1 bytes @ 0x39
  3468  0059                     	ds	1
  3469  005A                     setPercentValue@i:	
  3470                           
  3471                           ; 3 bytes @ 0x3A
  3472  005A                     	ds	1
  3473  005B                     getPercentValue@value:	
  3474                           
  3475                           ; 1 bytes @ 0x3B
  3476  005B                     	ds	1
  3477  005C                     getPercentValue@i:	
  3478                           
  3479                           ; 3 bytes @ 0x3C
  3480  005C                     	ds	1
  3481  005D                     ?_setRF_DimmerLights:	
  3482  005D                     ??_Flash_Memory_Initialization:	
  3483                           ; 0 bytes @ 0x3D
  3484                           
  3485  005D                     setRF_DimmerLights@on:	
  3486                           ; 0 bytes @ 0x3D
  3487                           
  3488                           
  3489                           ; 1 bytes @ 0x3D
  3490  005D                     	ds	1
  3491  005E                     ??_setRF_DimmerLights:	
  3492  005E                     Flash_Memory_Initialization@i:	
  3493                           ; 0 bytes @ 0x3E
  3494                           
  3495                           
  3496                           ; 1 bytes @ 0x3E
  3497  005E                     	ds	1
  3498  005F                     ??_setDimmerLights_AdjRF:	
  3499                           
  3500                           ; 0 bytes @ 0x3F
  3501  005F                     	ds	1
  3502  0060                     setDimmerLights_AdjRF@lights:	
  3503  0060                     setRF_DimmerLights@status:	
  3504                           ; 1 bytes @ 0x40
  3505                           
  3506                           
  3507                           ; 1 bytes @ 0x40
  3508  0060                     	ds	1
  3509  0061                     ??_setRF_DimmerValue:	
  3510  0061                     setRF_DimmerLights@lights:	
  3511                           ; 0 bytes @ 0x41
  3512                           
  3513                           
  3514                           ; 1 bytes @ 0x41
  3515  0061                     	ds	1
  3516  0062                     ??_DlyOff_Main:	
  3517  0062                     ?_setDimmerLights_Adj:	
  3518                           ; 0 bytes @ 0x42
  3519                           
  3520  0062                     ??_setRFSW_Control:	
  3521                           ; 0 bytes @ 0x42
  3522                           
  3523  0062                     ??_Sw_DimmerOnFunc:	
  3524                           ; 0 bytes @ 0x42
  3525                           
  3526  0062                     ??_Sw_DimmerOffFunc:	
  3527                           ; 0 bytes @ 0x42
  3528                           
  3529  0062                     setDimmerLights_Adj@status:	
  3530                           ; 0 bytes @ 0x42
  3531                           
  3532  0062                     Sw_DimmerOnFunc@Idle:	
  3533                           ; 1 bytes @ 0x42
  3534                           
  3535                           
  3536                           ; 1 bytes @ 0x42
  3537  0062                     	ds	1
  3538  0063                     ??_setDimmerLights_Adj:	
  3539  0063                     setRFSW_Control@sw:	
  3540                           ; 0 bytes @ 0x43
  3541                           
  3542  0063                     setRF_DimmerValue@lights:	
  3543                           ; 1 bytes @ 0x43
  3544                           
  3545  0063                     Sw_DimmerOnFunc@sw:	
  3546                           ; 1 bytes @ 0x43
  3547                           
  3548                           
  3549                           ; 1 bytes @ 0x43
  3550  0063                     	ds	1
  3551  0064                     ??_setRFSW_AdjControl:	
  3552  0064                     DlyOff_Main@sw:	
  3553                           ; 0 bytes @ 0x44
  3554                           
  3555  0064                     setDimmerLights_Adj@lights:	
  3556                           ; 1 bytes @ 0x44
  3557                           
  3558  0064                     Sw_DimmerOffFunc@sw:	
  3559                           ; 1 bytes @ 0x44
  3560                           
  3561                           
  3562                           ; 1 bytes @ 0x44
  3563  0064                     	ds	1
  3564  0065                     ??_setDimmerLights_Main:	
  3565  0065                     ??_setSw_Main:	
  3566                           ; 0 bytes @ 0x45
  3567                           
  3568  0065                     ??_DelayOff_Main:	
  3569                           ; 0 bytes @ 0x45
  3570                           
  3571  0065                     setDimmerLights_Main@clear:	
  3572                           ; 0 bytes @ 0x45
  3573                           
  3574                           
  3575                           ; 1 bytes @ 0x45
  3576  0065                     	ds	1
  3577  0066                     setDimmerLights_Main@lights:	
  3578  0066                     setRFSW_AdjControl@sw:	
  3579                           ; 1 bytes @ 0x46
  3580                           
  3581                           
  3582                           ; 1 bytes @ 0x46
  3583  0066                     	ds	1
  3584  0067                     ??_setControl_Lights_Table:	
  3585  0067                     ??_DimmerLights_Main:	
  3586                           ; 0 bytes @ 0x47
  3587                           
  3588  0067                     setControl_Lights_Table@rf:	
  3589                           ; 0 bytes @ 0x47
  3590                           
  3591  0067                     _setSw_Main$4998:	
  3592                           ; 1 bytes @ 0x47
  3593                           
  3594                           
  3595                           ; 1 bytes @ 0x47
  3596  0067                     	ds	1
  3597  0068                     ??_getRxData:	
  3598  0068                     getRxData@rf:	
  3599                           ; 0 bytes @ 0x48
  3600                           
  3601  0068                     _setSw_Main$4999:	
  3602                           ; 1 bytes @ 0x48
  3603                           
  3604                           
  3605                           ; 1 bytes @ 0x48
  3606  0068                     	ds	1
  3607  0069                     ??_setRF_Main:	
  3608  0069                     setSw_Main@sw:	
  3609                           ; 0 bytes @ 0x49
  3610                           
  3611                           
  3612                           ; 1 bytes @ 0x49
  3613  0069                     	ds	1
  3614  006A                     ??_Switch_Main:	
  3615  006A                     setRF_Main@rf:	
  3616                           ; 0 bytes @ 0x4A
  3617                           
  3618                           
  3619                           ; 1 bytes @ 0x4A
  3620  006A                     	ds	1
  3621  006B                     _setRF_Main$4185:	
  3622                           
  3623                           ; 1 bytes @ 0x4B
  3624  006B                     	ds	1
  3625  006C                     ??_RF_Main:	
  3626  006C                     ?_main:	
  3627                           ; 0 bytes @ 0x4C
  3628                           
  3629  006C                     main@argc:	
  3630                           ; 2 bytes @ 0x4C
  3631                           
  3632                           
  3633                           ; 2 bytes @ 0x4C
  3634  006C                     	ds	2
  3635  006E                     main@argv:	
  3636                           
  3637                           ; 2 bytes @ 0x4E
  3638  006E                     	ds	2
  3639  0070                     ??_main:	
  3640                           
  3641                           	psect	maintext
  3642  1751                     __pmaintext:	
  3643                           ; 0 bytes @ 0x50
  3644 ;;
  3645 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  3646 ;;
  3647 ;; *************** function _main *****************
  3648 ;; Defined at:
  3649 ;;		line 7 in file "../src/Main_B1.c"
  3650 ;; Parameters:    Size  Location     Type
  3651 ;;  argc            2   76[BANK0 ] int 
  3652 ;;  argv            2   78[BANK0 ] PTR PTR unsigned char 
  3653 ;; Auto vars:     Size  Location     Type
  3654 ;;		None
  3655 ;; Return value:  Size  Location     Type
  3656 ;;                  2   76[BANK0 ] int 
  3657 ;; Registers used:
  3658 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3659 ;; Tracked objects:
  3660 ;;		On entry : 17F/0
  3661 ;;		On exit  : 0/0
  3662 ;;		Unchanged: 0/0
  3663 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3664 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3665 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3666 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3667 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3668 ;;Total ram usage:        4 bytes
  3669 ;; Hardware stack levels required when called:   15
  3670 ;; This function calls:
  3671 ;;		_Buzzer_Initialization
  3672 ;;		_Buzzer_Main
  3673 ;;		_CC2500_PowerOnInitial
  3674 ;;		_DelayOff_Initialization
  3675 ;;		_DelayOff_Main
  3676 ;;		_DimmerLights_Initialization
  3677 ;;		_DimmerLights_Main
  3678 ;;		_Flash_Memory_Initialization
  3679 ;;		_Flash_Memory_Main
  3680 ;;		_LED_Initialization
  3681 ;;		_LED_Main
  3682 ;;		_Mcu_Initialization
  3683 ;;		_RF_Initialization
  3684 ;;		_RF_Main
  3685 ;;		_Switch_Initialization
  3686 ;;		_Switch_Main
  3687 ;;		_WDT_Main
  3688 ;;		_myMain_Initialization
  3689 ;;		_my_Main
  3690 ;; This function is called by:
  3691 ;;		Startup code after reset
  3692 ;; This function uses a non-reentrant model
  3693 ;;
  3694                           
  3695                           
  3696                           ;psect for function _main
  3697  1751                     _main:	
  3698                           
  3699                           ;Main_B1.c: 9: myMain_Initialization();
  3700                           
  3701                           ;incstack = 0
  3702                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3703  1751  3190  20ED  3197   	fcall	_myMain_Initialization
  3704                           
  3705                           ;Main_B1.c: 10: Mcu_Initialization();
  3706  1754  3191  21F0  3197   	fcall	_Mcu_Initialization
  3707                           
  3708                           ;Main_B1.c: 11: Flash_Memory_Initialization();
  3709  1757  3184  241E  3197   	fcall	_Flash_Memory_Initialization
  3710                           
  3711                           ;Main_B1.c: 12: LED_Initialization();
  3712  175A  319F  2709  3197   	fcall	_LED_Initialization
  3713                           
  3714                           ;Main_B1.c: 13: Buzzer_Initialization();
  3715  175D  319E  26C4  3197   	fcall	_Buzzer_Initialization
  3716                           
  3717                           ;Main_B1.c: 15: ;;
  3718                           ;Main_B1.c: 16: ;;
  3719                           ;Main_B1.c: 17: ;;
  3720                           ;Main_B1.c: 18: ;;
  3721                           ;Main_B1.c: 19: DelayOff_Initialization();
  3722  1760  319E  267C  3197   	fcall	_DelayOff_Initialization
  3723                           
  3724                           ;Main_B1.c: 21: DimmerLights_Initialization();
  3725  1763  3191  2143  3197   	fcall	_DimmerLights_Initialization
  3726                           
  3727                           ;Main_B1.c: 22: ;;
  3728                           ;Main_B1.c: 23: ;;
  3729                           ;Main_B1.c: 24: ;;
  3730                           ;Main_B1.c: 26: Switch_Initialization();
  3731  1766  319F  2755  3197   	fcall	_Switch_Initialization
  3732                           
  3733                           ;Main_B1.c: 27: RF_Initialization();
  3734  1769  319E  264F  3197   	fcall	_RF_Initialization
  3735                           
  3736                           ;Main_B1.c: 28: CC2500_PowerOnInitial();
  3737  176C  3191  2101  3197   	fcall	_CC2500_PowerOnInitial
  3738  176F                     l7064:	
  3739                           ;Main_B1.c: 29: ;;
  3740                           ;Main_B1.c: 32: while (1) {
  3741                           
  3742                           
  3743                           ;Main_B1.c: 33: if (myMain->PowerON) {
  3744  176F  0021               	movlb	1	; select bank1
  3745  1770  0869               	movf	_myMain^(0+128),w
  3746  1771  0086               	movwf	6
  3747  1772  3001               	movlw	1	; select bank2/3
  3748  1773  0087               	movwf	7
  3749  1774  1C01               	btfss	1,0
  3750  1775  2F79               	goto	l7068
  3751                           
  3752                           ;Main_B1.c: 35: ;;
  3753                           ;Main_B1.c: 39: ;;
  3754                           ;Main_B1.c: 43: ;;
  3755                           ;Main_B1.c: 47: ;;
  3756                           ;Main_B1.c: 59: Buzzer_Main();
  3757  1776  3187  2717  3197   	fcall	_Buzzer_Main
  3758  1779                     l7068:	
  3759                           
  3760                           ;Main_B1.c: 61: }
  3761                           ;Main_B1.c: 64: if (myMain->T0_Timerout) {
  3762  1779  0021               	movlb	1	; select bank1
  3763  177A  0869               	movf	_myMain^(0+128),w
  3764  177B  0086               	movwf	6
  3765  177C  3001               	movlw	1	; select bank2/3
  3766  177D  0087               	movwf	7
  3767  177E  1C81               	btfss	1,1
  3768  177F  2F6F               	goto	l7064
  3769                           
  3770                           ;Main_B1.c: 65: myMain->T0_Timerout = 0;
  3771  1780  0869               	movf	_myMain^(0+128),w
  3772  1781  0086               	movwf	6
  3773  1782  3001               	movlw	1	; select bank2/3
  3774  1783  0087               	movwf	7
  3775  1784  1081               	bcf	1,1
  3776                           
  3777                           ;Main_B1.c: 66: my_Main();
  3778  1785  318B  2364  3197   	fcall	_my_Main
  3779                           
  3780                           ;Main_B1.c: 67: WDT_Main();
  3781  1788  3192  2226  3197   	fcall	_WDT_Main
  3782                           
  3783                           ;Main_B1.c: 68: ;;
  3784                           ;Main_B1.c: 69: ;;
  3785                           ;Main_B1.c: 70: if (myMain->PowerON) {
  3786  178B  0021               	movlb	1	; select bank1
  3787  178C  0869               	movf	_myMain^(0+128),w
  3788  178D  0086               	movwf	6
  3789  178E  3001               	movlw	1	; select bank2/3
  3790  178F  0087               	movwf	7
  3791  1790  1C01               	btfss	1,0
  3792  1791  2F6F               	goto	l7064
  3793                           
  3794                           ;Main_B1.c: 71: Flash_Memory_Main();
  3795  1792  3195  25E0  3197   	fcall	_Flash_Memory_Main
  3796                           
  3797                           ;Main_B1.c: 73: LED_Main();
  3798  1795  319F  2715  3197   	fcall	_LED_Main
  3799                           
  3800                           ;Main_B1.c: 75: ;;
  3801                           ;Main_B1.c: 76: ;;
  3802                           ;Main_B1.c: 77: ;;
  3803                           ;Main_B1.c: 78: ;;
  3804                           ;Main_B1.c: 80: ;;
  3805                           ;Main_B1.c: 81: DimmerLights_Main();
  3806  1798  319E  26DA  3197   	fcall	_DimmerLights_Main
  3807                           
  3808                           ;Main_B1.c: 82: Switch_Main();
  3809  179B  319E  2694  3197   	fcall	_Switch_Main
  3810                           
  3811                           ;Main_B1.c: 83: ;;
  3812                           ;Main_B1.c: 84: ;;
  3813                           ;Main_B1.c: 86: RF_Main();
  3814  179E  319E  2653  3197   	fcall	_RF_Main
  3815                           
  3816                           ;Main_B1.c: 87: DelayOff_Main();
  3817  17A1  319E  2684  3197   	fcall	_DelayOff_Main
  3818                           
  3819                           ;Main_B1.c: 88: ;;
  3820  17A4  2F6F               	goto	l7064
  3821  17A5                     __end_of_main:	
  3822                           
  3823                           	psect	text1
  3824  0B64                     __ptext1:	
  3825 ;; *************** function _my_Main *****************
  3826 ;; Defined at:
  3827 ;;		line 125 in file "../src/Main_B1.c"
  3828 ;; Parameters:    Size  Location     Type
  3829 ;;		None
  3830 ;; Auto vars:     Size  Location     Type
  3831 ;;		None
  3832 ;; Return value:  Size  Location     Type
  3833 ;;		None               void
  3834 ;; Registers used:
  3835 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3836 ;; Tracked objects:
  3837 ;;		On entry : 0/0
  3838 ;;		On exit  : 0/0
  3839 ;;		Unchanged: 0/0
  3840 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3841 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3842 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3843 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3844 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3845 ;;Total ram usage:        0 bytes
  3846 ;; Hardware stack levels used:    1
  3847 ;; Hardware stack levels required when called:    7
  3848 ;; This function calls:
  3849 ;;		_setBuz
  3850 ;;		_setRF_Enable
  3851 ;;		_setSw_Enable
  3852 ;; This function is called by:
  3853 ;;		_main
  3854 ;; This function uses a non-reentrant model
  3855 ;;
  3856                           
  3857                           
  3858                           ;psect for function _my_Main
  3859  0B64                     _my_Main:	
  3860                           
  3861                           ;Main_B1.c: 127: if (myMain->PowerON == 0) {
  3862                           
  3863                           ;incstack = 0
  3864                           ; Regs used in _my_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3865  0B64  0021               	movlb	1	; select bank1
  3866  0B65  0869               	movf	_myMain^(0+128),w
  3867  0B66  0086               	movwf	6
  3868  0B67  3001               	movlw	1	; select bank2/3
  3869  0B68  0087               	movwf	7
  3870  0B69  1801               	btfsc	1,0
  3871  0B6A  2BA6               	goto	l6960
  3872                           
  3873                           ;Main_B1.c: 128: myMain->PowerCount++;
  3874  0B6B  0A69               	incf	_myMain^(0+128),w
  3875  0B6C  0086               	movwf	6
  3876  0B6D  3001               	movlw	1	; select bank2/3
  3877  0B6E  0087               	movwf	7
  3878  0B6F  3001               	movlw	1
  3879  0B70  0781               	addwf	1,f
  3880  0B71  3141               	addfsr 1,1
  3881  0B72  1803               	skipnc
  3882  0B73  0A81               	incf	1,f
  3883                           
  3884                           ;Main_B1.c: 129: if (myMain->PowerCount == 150)
  3885  0B74  0A69               	incf	_myMain^(0+128),w
  3886  0B75  0086               	movwf	6
  3887  0B76  3001               	movlw	1	; select bank2/3
  3888  0B77  0087               	movwf	7
  3889  0B78  3F40               	moviw [0]fsr1
  3890  0B79  3A96               	xorlw	150
  3891  0B7A  1D03               	skipz
  3892  0B7B  2B7E               	goto	u6185
  3893  0B7C  3F41               	moviw [1]fsr1
  3894  0B7D  3A00               	xorlw	0
  3895  0B7E                     u6185:	
  3896  0B7E  1D03               	skipz
  3897  0B7F  0008               	return
  3898                           
  3899                           ;Main_B1.c: 130: {
  3900                           ;Main_B1.c: 131: myMain->PowerCount = 0;
  3901  0B80  0A69               	incf	_myMain^(0+128),w
  3902  0B81  0086               	movwf	6
  3903  0B82  3001               	movlw	1	; select bank2/3
  3904  0B83  0087               	movwf	7
  3905  0B84  3000               	movlw	0
  3906  0B85  3FC0               	movwi [0]fsr1
  3907  0B86  3FC1               	movwi [1]fsr1
  3908                           
  3909                           ;Main_B1.c: 132: myMain->PowerON = 1;
  3910  0B87  0869               	movf	_myMain^(0+128),w
  3911  0B88  0086               	movwf	6
  3912  0B89  3001               	movlw	1	; select bank2/3
  3913  0B8A  0087               	movwf	7
  3914  0B8B  1401               	bsf	1,0
  3915                           
  3916                           ;Main_B1.c: 135: ;;
  3917                           ;Main_B1.c: 139: ;;
  3918                           ;Main_B1.c: 145: setBuz(3, 50);
  3919  0B8C  3032               	movlw	50
  3920  0B8D  0020               	movlb	0	; select bank0
  3921  0B8E  00A9               	movwf	setBuz@time
  3922  0B8F  3000               	movlw	0
  3923  0B90  00AA               	movwf	setBuz@time+1
  3924  0B91  3003               	movlw	3
  3925  0B92  318B  23D8  318B   	fcall	_setBuz
  3926                           
  3927                           ;Main_B1.c: 146: myMain->SelfTest = 1;
  3928  0B95  0021               	movlb	1	; select bank1
  3929  0B96  0869               	movf	_myMain^(0+128),w
  3930  0B97  0086               	movwf	6
  3931  0B98  3001               	movlw	1	; select bank2/3
  3932  0B99  0087               	movwf	7
  3933  0B9A  1701               	bsf	1,6
  3934                           
  3935                           ;Main_B1.c: 148: setSw_Enable(1);
  3936  0B9B  3001               	movlw	1
  3937  0B9C  3192  2242  318B   	fcall	_setSw_Enable
  3938                           
  3939                           ;Main_B1.c: 151: setRF_Enable(1, 1);
  3940  0B9F  0020               	movlb	0	; select bank0
  3941  0BA0  01A2               	clrf	setRF_Enable@command
  3942  0BA1  0AA2               	incf	setRF_Enable@command,f
  3943  0BA2  3001               	movlw	1
  3944  0BA3  3188  2002         	fcall	_setRF_Enable
  3945                           
  3946                           ;Main_B1.c: 155: }
  3947                           ;Main_B1.c: 156: } else {
  3948  0BA5  0008               	return
  3949  0BA6                     l6960:	
  3950                           
  3951                           ;Main_B1.c: 164: myMain->Count1++;
  3952  0BA6  0021               	movlb	1	; select bank1
  3953  0BA7  0869               	movf	_myMain^(0+128),w
  3954  0BA8  3E05               	addlw	5
  3955  0BA9  0086               	movwf	6
  3956  0BAA  3001               	movlw	1	; select bank2/3
  3957  0BAB  0087               	movwf	7
  3958  0BAC  3001               	movlw	1
  3959  0BAD  0781               	addwf	1,f
  3960  0BAE  3141               	addfsr 1,1
  3961  0BAF  1803               	skipnc
  3962  0BB0  0A81               	incf	1,f
  3963                           
  3964                           ;Main_B1.c: 165: if (myMain->Count1 == 100)
  3965  0BB1  0869               	movf	_myMain^(0+128),w
  3966  0BB2  3E05               	addlw	5
  3967  0BB3  0086               	movwf	6
  3968  0BB4  3001               	movlw	1	; select bank2/3
  3969  0BB5  0087               	movwf	7
  3970  0BB6  3F40               	moviw [0]fsr1
  3971  0BB7  3A64               	xorlw	100
  3972  0BB8  1D03               	skipz
  3973  0BB9  2BBC               	goto	u6195
  3974  0BBA  3F41               	moviw [1]fsr1
  3975  0BBB  3A00               	xorlw	0
  3976  0BBC                     u6195:	
  3977  0BBC  1D03               	skipz
  3978  0BBD  0008               	return
  3979                           
  3980                           ;Main_B1.c: 166: {
  3981                           ;Main_B1.c: 167: myMain->Count1 = 0;
  3982  0BBE  0869               	movf	_myMain^(0+128),w
  3983  0BBF  3E05               	addlw	5
  3984  0BC0  0086               	movwf	6
  3985  0BC1  3001               	movlw	1	; select bank2/3
  3986  0BC2  0087               	movwf	7
  3987  0BC3  3000               	movlw	0
  3988  0BC4  3FC0               	movwi [0]fsr1
  3989  0BC5  3FC1               	movwi [1]fsr1
  3990                           
  3991                           ;Main_B1.c: 180: if (myMain->Flag) {
  3992  0BC6  0869               	movf	_myMain^(0+128),w
  3993  0BC7  0086               	movwf	6
  3994  0BC8  3001               	movlw	1	; select bank2/3
  3995  0BC9  0087               	movwf	7
  3996  0BCA  1D81               	btfss	1,3
  3997  0BCB  2BD2               	goto	l6968
  3998                           
  3999                           ;Main_B1.c: 181: myMain->Flag = 0;
  4000  0BCC  0869               	movf	_myMain^(0+128),w
  4001  0BCD  0086               	movwf	6
  4002  0BCE  3001               	movlw	1	; select bank2/3
  4003  0BCF  0087               	movwf	7
  4004  0BD0  1181               	bcf	1,3
  4005                           
  4006                           ;Main_B1.c: 190: } else {
  4007  0BD1  0008               	return
  4008  0BD2                     l6968:	
  4009                           
  4010                           ;Main_B1.c: 191: myMain->Flag = 1;
  4011  0BD2  0869               	movf	_myMain^(0+128),w
  4012  0BD3  0086               	movwf	6
  4013  0BD4  3001               	movlw	1	; select bank2/3
  4014  0BD5  0087               	movwf	7
  4015  0BD6  1581               	bsf	1,3
  4016  0BD7  0008               	return
  4017  0BD8                     __end_of_my_Main:	
  4018                           
  4019                           	psect	text2
  4020  1242                     __ptext2:	
  4021 ;; *************** function _setSw_Enable *****************
  4022 ;; Defined at:
  4023 ;;		line 85 in file "../src/Switch_B1.c"
  4024 ;; Parameters:    Size  Location     Type
  4025 ;;  command         1    wreg     unsigned char 
  4026 ;; Auto vars:     Size  Location     Type
  4027 ;;  command         1    2[BANK0 ] unsigned char 
  4028 ;; Return value:  Size  Location     Type
  4029 ;;		None               void
  4030 ;; Registers used:
  4031 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4032 ;; Tracked objects:
  4033 ;;		On entry : 0/0
  4034 ;;		On exit  : 0/0
  4035 ;;		Unchanged: 0/0
  4036 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4037 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4038 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4039 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4040 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4041 ;;Total ram usage:        1 bytes
  4042 ;; Hardware stack levels used:    1
  4043 ;; Hardware stack levels required when called:    6
  4044 ;; This function calls:
  4045 ;;		_SwPointSelect
  4046 ;; This function is called by:
  4047 ;;		_my_Main
  4048 ;; This function uses a non-reentrant model
  4049 ;;
  4050                           
  4051                           
  4052                           ;psect for function _setSw_Enable
  4053  1242                     _setSw_Enable:	
  4054                           
  4055                           ;incstack = 0
  4056                           ; Regs used in _setSw_Enable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4057                           ;setSw_Enable@command stored from wreg
  4058  1242  0020               	movlb	0	; select bank0
  4059  1243  00A2               	movwf	setSw_Enable@command
  4060                           
  4061                           ;Switch_B1.c: 88: SwPointSelect(1);
  4062  1244  3001               	movlw	1
  4063  1245  3190  20C5  3192   	fcall	_SwPointSelect
  4064                           
  4065                           ;Switch_B1.c: 89: Sw->Enable = command;
  4066  1248  087B               	movf	_Sw,w
  4067  1249  0086               	movwf	6
  4068  124A  3001               	movlw	1	; select bank2/3
  4069  124B  0087               	movwf	7
  4070  124C  0020               	movlb	0	; select bank0
  4071  124D  0822               	movf	setSw_Enable@command,w
  4072  124E  1001               	bcf	1,0
  4073  124F  1D03               	skipz
  4074  1250  1401               	bsf	1,0
  4075                           
  4076                           ;Switch_B1.c: 93: SwPointSelect(2);
  4077  1251  3002               	movlw	2
  4078  1252  3190  20C5         	fcall	_SwPointSelect
  4079                           
  4080                           ;Switch_B1.c: 94: Sw->Enable = command;
  4081  1254  087B               	movf	_Sw,w
  4082  1255  0086               	movwf	6
  4083  1256  3001               	movlw	1	; select bank2/3
  4084  1257  0087               	movwf	7
  4085  1258  0020               	movlb	0	; select bank0
  4086  1259  0822               	movf	setSw_Enable@command,w
  4087  125A  1001               	bcf	1,0
  4088  125B  1D03               	skipz
  4089  125C  1401               	bsf	1,0
  4090  125D  0008               	return
  4091  125E                     __end_of_setSw_Enable:	
  4092                           
  4093                           	psect	text3
  4094  0802                     __ptext3:	
  4095 ;; *************** function _setRF_Enable *****************
  4096 ;; Defined at:
  4097 ;;		line 178 in file "../src/RF_Control_B1.c"
  4098 ;; Parameters:    Size  Location     Type
  4099 ;;  rf              1    wreg     unsigned char 
  4100 ;;  command         1    2[BANK0 ] unsigned char 
  4101 ;; Auto vars:     Size  Location     Type
  4102 ;;  rf              1    3[BANK0 ] unsigned char 
  4103 ;; Return value:  Size  Location     Type
  4104 ;;		None               void
  4105 ;; Registers used:
  4106 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4107 ;; Tracked objects:
  4108 ;;		On entry : 0/0
  4109 ;;		On exit  : 0/0
  4110 ;;		Unchanged: 0/0
  4111 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4112 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4113 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4114 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4115 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4116 ;;Total ram usage:        2 bytes
  4117 ;; Hardware stack levels used:    1
  4118 ;; Hardware stack levels required when called:    6
  4119 ;; This function calls:
  4120 ;;		_RfPointSelect
  4121 ;;		_setINT_GO
  4122 ;; This function is called by:
  4123 ;;		_my_Main
  4124 ;; This function uses a non-reentrant model
  4125 ;;
  4126                           
  4127                           
  4128                           ;psect for function _setRF_Enable
  4129  0802                     _setRF_Enable:	
  4130                           
  4131                           ;incstack = 0
  4132                           ; Regs used in _setRF_Enable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4133                           ;setRF_Enable@rf stored from wreg
  4134  0802  0020               	movlb	0	; select bank0
  4135  0803  00A3               	movwf	setRF_Enable@rf
  4136                           
  4137                           ;RF_Control_B1.c: 179: RfPointSelect(rf);
  4138  0804  0823               	movf	setRF_Enable@rf,w
  4139  0805  319E  26F1  3188   	fcall	_RfPointSelect
  4140                           
  4141                           ;RF_Control_B1.c: 180: RF->Enable = command;
  4142  0808  0021               	movlb	1	; select bank1
  4143  0809  083D               	movf	_RF^(0+128),w
  4144  080A  0086               	movwf	6
  4145  080B  0187               	clrf	7
  4146  080C  0020               	movlb	0	; select bank0
  4147  080D  0822               	movf	setRF_Enable@command,w
  4148  080E  1001               	bcf	1,0
  4149  080F  1D03               	skipz
  4150  0810  1401               	bsf	1,0
  4151                           
  4152                           ;RF_Control_B1.c: 181: RF->Learn = 0;
  4153  0811  0021               	movlb	1	; select bank1
  4154  0812  083D               	movf	_RF^(0+128),w
  4155  0813  0086               	movwf	6
  4156  0814  0187               	clrf	7
  4157  0815  1301               	bcf	1,6
  4158                           
  4159                           ;RF_Control_B1.c: 182: RF->TransceiveGO = 0;
  4160  0816  083D               	movf	_RF^(0+128),w
  4161  0817  0086               	movwf	6
  4162  0818  0187               	clrf	7
  4163  0819  1101               	bcf	1,2
  4164                           
  4165                           ;RF_Control_B1.c: 183: RF->RxStatus = 0;
  4166  081A  083D               	movf	_RF^(0+128),w
  4167  081B  0086               	movwf	6
  4168  081C  0187               	clrf	7
  4169  081D  1181               	bcf	1,3
  4170                           
  4171                           ;RF_Control_B1.c: 184: RF->ReceiveGO = 0;
  4172  081E  083D               	movf	_RF^(0+128),w
  4173  081F  0086               	movwf	6
  4174  0820  0187               	clrf	7
  4175  0821  1081               	bcf	1,1
  4176                           
  4177                           ;RF_Control_B1.c: 185: RF->DebounceTime = 0;
  4178  0822  083D               	movf	_RF^(0+128),w
  4179  0823  3E03               	addlw	3
  4180  0824  0086               	movwf	6
  4181  0825  0187               	clrf	7
  4182  0826  0181               	clrf	1
  4183                           
  4184                           ;RF_Control_B1.c: 186: RF->Debounce = 0;
  4185  0827  083D               	movf	_RF^(0+128),w
  4186  0828  0086               	movwf	6
  4187  0829  0187               	clrf	7
  4188  082A  1281               	bcf	1,5
  4189                           
  4190                           ;RF_Control_B1.c: 187: setINT_GO(0);
  4191  082B  3000               	movlw	0
  4192  082C  319E  26A5         	fcall	_setINT_GO
  4193  082E  0008               	return
  4194  082F                     __end_of_setRF_Enable:	
  4195                           
  4196                           	psect	text4
  4197  10ED                     __ptext4:	
  4198 ;; *************** function _myMain_Initialization *****************
  4199 ;; Defined at:
  4200 ;;		line 113 in file "../src/Main_B1.c"
  4201 ;; Parameters:    Size  Location     Type
  4202 ;;		None
  4203 ;; Auto vars:     Size  Location     Type
  4204 ;;		None
  4205 ;; Return value:  Size  Location     Type
  4206 ;;		None               void
  4207 ;; Registers used:
  4208 ;;		wreg, fsr1l, fsr1h
  4209 ;; Tracked objects:
  4210 ;;		On entry : 0/0
  4211 ;;		On exit  : 0/0
  4212 ;;		Unchanged: 0/0
  4213 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4214 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4215 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4216 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4217 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4218 ;;Total ram usage:        1 bytes
  4219 ;; Hardware stack levels used:    1
  4220 ;; Hardware stack levels required when called:    5
  4221 ;; This function calls:
  4222 ;;		Nothing
  4223 ;; This function is called by:
  4224 ;;		_main
  4225 ;; This function uses a non-reentrant model
  4226 ;;
  4227                           
  4228                           
  4229                           ;psect for function _myMain_Initialization
  4230  10ED                     _myMain_Initialization:	
  4231                           
  4232                           ;Main_B1.c: 115: product = &_product;
  4233                           
  4234                           ;incstack = 0
  4235                           ; Regs used in _myMain_Initialization: [wregfsr1]
  4236  10ED  30A0               	movlw	__product& (0+255)
  4237  10EE  0020               	movlb	0	; select bank0
  4238  10EF  00A0               	movwf	??_myMain_Initialization
  4239  10F0  0820               	movf	??_myMain_Initialization,w
  4240  10F1  00FD               	movwf	_product
  4241                           
  4242                           ;Main_B1.c: 116: product->Data[20] = 210;
  4243  10F2  30D2               	movlw	210
  4244  10F3  00A0               	movwf	??_myMain_Initialization
  4245  10F4  087D               	movf	_product,w
  4246  10F5  3E14               	addlw	20
  4247  10F6  0086               	movwf	6
  4248  10F7  3001               	movlw	1	; select bank2/3
  4249  10F8  0087               	movwf	7
  4250  10F9  0820               	movf	??_myMain_Initialization,w
  4251  10FA  0081               	movwf	1
  4252                           
  4253                           ;Main_B1.c: 119: myMain = &_myMain;
  4254  10FB  30C0               	movlw	__myMain& (0+255)
  4255  10FC  00A0               	movwf	??_myMain_Initialization
  4256  10FD  0820               	movf	??_myMain_Initialization,w
  4257  10FE  0021               	movlb	1	; select bank1
  4258  10FF  00E9               	movwf	_myMain^(0+128)
  4259  1100  0008               	return
  4260  1101                     __end_of_myMain_Initialization:	
  4261                           
  4262                           	psect	text5
  4263  1226                     __ptext5:	
  4264 ;; *************** function _WDT_Main *****************
  4265 ;; Defined at:
  4266 ;;		line 907 in file "../src/MCU_B1.c"
  4267 ;; Parameters:    Size  Location     Type
  4268 ;;		None
  4269 ;; Auto vars:     Size  Location     Type
  4270 ;;		None
  4271 ;; Return value:  Size  Location     Type
  4272 ;;		None               void
  4273 ;; Registers used:
  4274 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4275 ;; Tracked objects:
  4276 ;;		On entry : 0/0
  4277 ;;		On exit  : 0/0
  4278 ;;		Unchanged: 0/0
  4279 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4280 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4281 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4282 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4283 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4284 ;;Total ram usage:        1 bytes
  4285 ;; Hardware stack levels used:    1
  4286 ;; Hardware stack levels required when called:    6
  4287 ;; This function calls:
  4288 ;;		_WDT_Clearing
  4289 ;; This function is called by:
  4290 ;;		_main
  4291 ;; This function uses a non-reentrant model
  4292 ;;
  4293                           
  4294                           
  4295                           ;psect for function _WDT_Main
  4296  1226                     _WDT_Main:	
  4297                           
  4298                           ;MCU_B1.c: 908: if (WDT->Enable) {
  4299                           
  4300                           ;incstack = 0
  4301                           ; Regs used in _WDT_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4302  1226  0021               	movlb	1	; select bank1
  4303  1227  0868               	movf	_WDT^(0+128),w
  4304  1228  0086               	movwf	6
  4305  1229  0187               	clrf	7
  4306  122A  1C01               	btfss	1,0
  4307  122B  0008               	return
  4308                           
  4309                           ;MCU_B1.c: 909: if (WDT->Count-- > 0) {
  4310  122C  0A68               	incf	_WDT^(0+128),w
  4311  122D  0086               	movwf	6
  4312  122E  0187               	clrf	7
  4313  122F  3001               	movlw	1
  4314  1230  0281               	subwf	1,f
  4315  1231  0801               	movf	1,w
  4316  1232  3AFF               	xorlw	255
  4317  1233  1903               	skipnz
  4318  1234  0008               	return
  4319                           
  4320                           ;MCU_B1.c: 910: WDT->Count = 10;
  4321  1235  300A               	movlw	10
  4322  1236  0020               	movlb	0	; select bank0
  4323  1237  00A0               	movwf	??_WDT_Main
  4324  1238  0021               	movlb	1	; select bank1
  4325  1239  0A68               	incf	_WDT^(0+128),w
  4326  123A  0086               	movwf	6
  4327  123B  0187               	clrf	7
  4328  123C  0020               	movlb	0	; select bank0
  4329  123D  0820               	movf	??_WDT_Main,w
  4330  123E  0081               	movwf	1
  4331                           
  4332                           ;MCU_B1.c: 911: WDT_Clearing();
  4333  123F  3180  2002         	fcall	_WDT_Clearing
  4334  1241  0008               	return
  4335  1242                     __end_of_WDT_Main:	
  4336                           
  4337                           	psect	text6
  4338  0002                     __ptext6:	
  4339 ;; *************** function _WDT_Clearing *****************
  4340 ;; Defined at:
  4341 ;;		line 917 in file "../src/MCU_B1.c"
  4342 ;; Parameters:    Size  Location     Type
  4343 ;;		None
  4344 ;; Auto vars:     Size  Location     Type
  4345 ;;		None
  4346 ;; Return value:  Size  Location     Type
  4347 ;;		None               void
  4348 ;; Registers used:
  4349 ;;		None
  4350 ;; Tracked objects:
  4351 ;;		On entry : 0/0
  4352 ;;		On exit  : 0/0
  4353 ;;		Unchanged: 0/0
  4354 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4355 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4356 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4357 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4358 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4359 ;;Total ram usage:        0 bytes
  4360 ;; Hardware stack levels used:    1
  4361 ;; Hardware stack levels required when called:    5
  4362 ;; This function calls:
  4363 ;;		Nothing
  4364 ;; This function is called by:
  4365 ;;		_WDT_Main
  4366 ;; This function uses a non-reentrant model
  4367 ;;
  4368                           
  4369                           
  4370                           ;psect for function _WDT_Clearing
  4371  0002                     _WDT_Clearing:	
  4372                           
  4373                           ;incstack = 0
  4374                           ; Regs used in _WDT_Clearing: []
  4375  0002  0064               	clrwdt	;# 
  4376  0003  0008               	return
  4377  0004                     __end_of_WDT_Clearing:	
  4378                           
  4379                           	psect	text7
  4380  1E94                     __ptext7:	
  4381 ;; *************** function _Switch_Main *****************
  4382 ;; Defined at:
  4383 ;;		line 61 in file "../src/Switch_B1.c"
  4384 ;; Parameters:    Size  Location     Type
  4385 ;;		None
  4386 ;; Auto vars:     Size  Location     Type
  4387 ;;		None
  4388 ;; Return value:  Size  Location     Type
  4389 ;;		None               void
  4390 ;; Registers used:
  4391 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4392 ;; Tracked objects:
  4393 ;;		On entry : 0/0
  4394 ;;		On exit  : 0/0
  4395 ;;		Unchanged: 0/0
  4396 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4397 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4398 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4399 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4400 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4401 ;;Total ram usage:        0 bytes
  4402 ;; Hardware stack levels used:    1
  4403 ;; Hardware stack levels required when called:   11
  4404 ;; This function calls:
  4405 ;;		_setSw_Main
  4406 ;; This function is called by:
  4407 ;;		_main
  4408 ;; This function uses a non-reentrant model
  4409 ;;
  4410                           
  4411                           
  4412                           ;psect for function _Switch_Main
  4413  1E94                     _Switch_Main:	
  4414                           
  4415                           ;Switch_B1.c: 63: setSw_Main(1);
  4416                           
  4417                           ;incstack = 0
  4418                           ; Regs used in _Switch_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4419  1E94  3001               	movlw	1
  4420  1E95  3181  21CE  319E   	fcall	_setSw_Main
  4421                           
  4422                           ;Switch_B1.c: 67: setSw_Main(2);
  4423  1E98  3002               	movlw	2
  4424  1E99  3181  21CE         	fcall	_setSw_Main
  4425  1E9B  0008               	return
  4426  1E9C                     __end_of_Switch_Main:	
  4427                           
  4428                           	psect	text8
  4429  01CE                     __ptext8:	
  4430 ;; *************** function _setSw_Main *****************
  4431 ;; Defined at:
  4432 ;;		line 111 in file "../src/Switch_B1.c"
  4433 ;; Parameters:    Size  Location     Type
  4434 ;;  sw              1    wreg     unsigned char 
  4435 ;; Auto vars:     Size  Location     Type
  4436 ;;  sw              1   73[BANK0 ] unsigned char 
  4437 ;; Return value:  Size  Location     Type
  4438 ;;		None               void
  4439 ;; Registers used:
  4440 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4441 ;; Tracked objects:
  4442 ;;		On entry : 0/0
  4443 ;;		On exit  : 0/0
  4444 ;;		Unchanged: 0/0
  4445 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4446 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4447 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4448 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4449 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4450 ;;Total ram usage:        5 bytes
  4451 ;; Hardware stack levels used:    1
  4452 ;; Hardware stack levels required when called:   10
  4453 ;; This function calls:
  4454 ;;		_SwPointSelect
  4455 ;;		_Sw_DimmerAdjFunc
  4456 ;;		_Sw_DimmerOffFunc
  4457 ;;		_Sw_DimmerOnFunc
  4458 ;;		_setBuz
  4459 ;;		_setRF_Learn
  4460 ;; This function is called by:
  4461 ;;		_Switch_Main
  4462 ;; This function uses a non-reentrant model
  4463 ;;
  4464                           
  4465                           
  4466                           ;psect for function _setSw_Main
  4467  01CE                     _setSw_Main:	
  4468                           
  4469                           ;incstack = 0
  4470                           ; Regs used in _setSw_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4471                           ;setSw_Main@sw stored from wreg
  4472  01CE  0020               	movlb	0	; select bank0
  4473  01CF  00E9               	movwf	setSw_Main@sw
  4474                           
  4475                           ;Switch_B1.c: 112: if (Sw->Enable) {
  4476  01D0  087B               	movf	_Sw,w
  4477  01D1  0086               	movwf	6
  4478  01D2  3001               	movlw	1	; select bank2/3
  4479  01D3  0087               	movwf	7
  4480  01D4  1C01               	btfss	1,0
  4481  01D5  0008               	return
  4482                           
  4483                           ;Switch_B1.c: 113: SwPointSelect(sw);
  4484  01D6  0869               	movf	setSw_Main@sw,w
  4485  01D7  3190  20C5  3181   	fcall	_SwPointSelect
  4486                           
  4487                           ;Switch_B1.c: 125: if (sw == 1) {
  4488  01DA  0020               	movlb	0	; select bank0
  4489  01DB  0869               	movf	setSw_Main@sw,w
  4490  01DC  3A01               	xorlw	1
  4491  01DD  1D03               	skipz
  4492  01DE  29EB               	goto	l6668
  4493                           
  4494                           ;Switch_B1.c: 126: Sw->Touch = (RA6 || RA4) ? 1 : 0;
  4495  01DF  01E7               	clrf	_setSw_Main$4998
  4496  01E0  0AE7               	incf	_setSw_Main$4998,f
  4497  01E1  1F0C               	btfss	12,6	;volatile
  4498  01E2  1A0C               	btfsc	12,4	;volatile
  4499  01E3  29E5               	goto	l6666
  4500  01E4  01E7               	clrf	_setSw_Main$4998
  4501  01E5                     l6666:	
  4502  01E5  087B               	movf	_Sw,w
  4503  01E6  0086               	movwf	6
  4504  01E7  3001               	movlw	1	; select bank2/3
  4505  01E8  0087               	movwf	7
  4506  01E9  0867               	movf	_setSw_Main$4998,w
  4507  01EA  29FA               	goto	L1
  4508  01EB                     l6668:	
  4509                           ;Switch_B1.c: 127: } else if (sw == 2) {
  4510                           
  4511  01EB  0869               	movf	setSw_Main@sw,w
  4512  01EC  3A02               	xorlw	2
  4513  01ED  1D03               	skipz
  4514  01EE  29FD               	goto	l6678
  4515                           
  4516                           ;Switch_B1.c: 128: Sw->Touch = (RA0 || RB1) ? 1 : 0;
  4517  01EF  01E8               	clrf	_setSw_Main$4999
  4518  01F0  0AE8               	incf	_setSw_Main$4999,f
  4519  01F1  1C0C               	btfss	12,0	;volatile
  4520  01F2  188D               	btfsc	13,1	;volatile
  4521  01F3  29F5               	goto	l6676
  4522  01F4  01E8               	clrf	_setSw_Main$4999
  4523  01F5                     l6676:	
  4524  01F5  087B               	movf	_Sw,w
  4525  01F6  0086               	movwf	6
  4526  01F7  3001               	movlw	1	; select bank2/3
  4527  01F8  0087               	movwf	7
  4528  01F9  0868               	movf	_setSw_Main$4999,w
  4529  01FA                     L1:	
  4530  01FA  1081               	bcf	1,1
  4531  01FB  1D03               	skipz
  4532  01FC  1481               	bsf	1,1
  4533  01FD                     l6678:	
  4534                           
  4535                           ;Switch_B1.c: 129: }
  4536                           ;Switch_B1.c: 137: if (Sw->Touch) {
  4537  01FD  087B               	movf	_Sw,w
  4538  01FE  0086               	movwf	6
  4539  01FF  3001               	movlw	1	; select bank2/3
  4540  0200  0087               	movwf	7
  4541  0201  1C81               	btfss	1,1
  4542  0202  2AD3               	goto	l6726
  4543                           
  4544                           ;Switch_B1.c: 138: if (!Sw->Debounce) {
  4545  0203  087B               	movf	_Sw,w
  4546  0204  0086               	movwf	6
  4547  0205  3001               	movlw	1	; select bank2/3
  4548  0206  0087               	movwf	7
  4549  0207  1901               	btfsc	1,2
  4550  0208  2A2A               	goto	l6692
  4551                           
  4552                           ;Switch_B1.c: 139: Sw->DebounceTime++;
  4553  0209  3001               	movlw	1
  4554  020A  00E5               	movwf	??_setSw_Main
  4555  020B  087B               	movf	_Sw,w
  4556  020C  3E02               	addlw	2
  4557  020D  0086               	movwf	6
  4558  020E  3001               	movlw	1	; select bank2/3
  4559  020F  0087               	movwf	7
  4560  0210  0865               	movf	??_setSw_Main,w
  4561  0211  0781               	addwf	1,f
  4562                           
  4563                           ;Switch_B1.c: 140: if (Sw->DebounceTime >= 5) {
  4564  0212  087B               	movf	_Sw,w
  4565  0213  3E02               	addlw	2
  4566  0214  0086               	movwf	6
  4567  0215  3001               	movlw	1	; select bank2/3
  4568  0216  0087               	movwf	7
  4569  0217  3005               	movlw	5
  4570  0218  0201               	subwf	1,w
  4571  0219  1C03               	skipc
  4572  021A  0008               	return
  4573                           
  4574                           ;Switch_B1.c: 141: Sw->DebounceTime = 0;
  4575  021B  087B               	movf	_Sw,w
  4576  021C  3E02               	addlw	2
  4577  021D  0086               	movwf	6
  4578  021E  3001               	movlw	1	; select bank2/3
  4579  021F  0087               	movwf	7
  4580  0220  0181               	clrf	1
  4581                           
  4582                           ;Switch_B1.c: 142: Sw->Debounce = 1;
  4583  0221  087B               	movf	_Sw,w
  4584  0222  0086               	movwf	6
  4585  0223  3001               	movlw	1	; select bank2/3
  4586  0224  0087               	movwf	7
  4587  0225  1501               	bsf	1,2
  4588                           
  4589                           ;Switch_B1.c: 145: Sw_DimmerOnFunc(sw);
  4590  0226  0869               	movf	setSw_Main@sw,w
  4591  0227  318A  22F2         	fcall	_Sw_DimmerOnFunc
  4592                           
  4593                           ;Switch_B1.c: 148: }
  4594                           ;Switch_B1.c: 149: } else {
  4595  0229  0008               	return
  4596  022A                     l6692:	
  4597                           
  4598                           ;Switch_B1.c: 150: if (!Sw->Hold1) {
  4599  022A  087B               	movf	_Sw,w
  4600  022B  0086               	movwf	6
  4601  022C  3001               	movlw	1	; select bank2/3
  4602  022D  0087               	movwf	7
  4603  022E  1981               	btfsc	1,3
  4604  022F  2A5C               	goto	l6702
  4605                           
  4606                           ;Switch_B1.c: 151: Sw->Hold1Time++;
  4607  0230  087B               	movf	_Sw,w
  4608  0231  3E03               	addlw	3
  4609  0232  0086               	movwf	6
  4610  0233  3001               	movlw	1	; select bank2/3
  4611  0234  0087               	movwf	7
  4612  0235  3001               	movlw	1
  4613  0236  0781               	addwf	1,f
  4614  0237  3141               	addfsr 1,1
  4615  0238  1803               	skipnc
  4616  0239  0A81               	incf	1,f
  4617                           
  4618                           ;Switch_B1.c: 152: if (Sw->Hold1Time >= 150) {
  4619  023A  087B               	movf	_Sw,w
  4620  023B  3E03               	addlw	3
  4621  023C  0086               	movwf	6
  4622  023D  3001               	movlw	1	; select bank2/3
  4623  023E  0087               	movwf	7
  4624  023F  3F40               	moviw [0]fsr1
  4625  0240  0020               	movlb	0	; select bank0
  4626  0241  00E5               	movwf	??_setSw_Main
  4627  0242  3F41               	moviw [1]fsr1
  4628  0243  00E6               	movwf	??_setSw_Main+1
  4629  0244  3000               	movlw	0
  4630  0245  0266               	subwf	??_setSw_Main+1,w
  4631  0246  3096               	movlw	150
  4632  0247  1903               	skipnz
  4633  0248  0265               	subwf	??_setSw_Main,w
  4634  0249  1C03               	skipc
  4635  024A  0008               	return
  4636                           
  4637                           ;Switch_B1.c: 153: Sw->Hold1Time = 0;
  4638  024B  087B               	movf	_Sw,w
  4639  024C  3E03               	addlw	3
  4640  024D  0086               	movwf	6
  4641  024E  3001               	movlw	1	; select bank2/3
  4642  024F  0087               	movwf	7
  4643  0250  3000               	movlw	0
  4644  0251  3FC0               	movwi [0]fsr1
  4645  0252  3FC1               	movwi [1]fsr1
  4646                           
  4647                           ;Switch_B1.c: 154: Sw->Hold1 = 1;
  4648  0253  087B               	movf	_Sw,w
  4649  0254  0086               	movwf	6
  4650  0255  3001               	movlw	1	; select bank2/3
  4651  0256  0087               	movwf	7
  4652  0257  1581               	bsf	1,3
  4653                           
  4654                           ;Switch_B1.c: 157: Sw_DimmerAdjFunc(sw);
  4655  0258  0869               	movf	setSw_Main@sw,w
  4656  0259  3196  2625         	fcall	_Sw_DimmerAdjFunc
  4657                           
  4658                           ;Switch_B1.c: 160: }
  4659                           ;Switch_B1.c: 161: } else {
  4660  025B  0008               	return
  4661  025C                     l6702:	
  4662                           
  4663                           ;Switch_B1.c: 162: if (!Sw->Hold2) {
  4664  025C  087B               	movf	_Sw,w
  4665  025D  0086               	movwf	6
  4666  025E  3001               	movlw	1	; select bank2/3
  4667  025F  0087               	movwf	7
  4668  0260  1A01               	btfsc	1,4
  4669  0261  2AA0               	goto	l6716
  4670                           
  4671                           ;Switch_B1.c: 163: Sw->Hold2Time++;
  4672  0262  087B               	movf	_Sw,w
  4673  0263  3E05               	addlw	5
  4674  0264  0086               	movwf	6
  4675  0265  3001               	movlw	1	; select bank2/3
  4676  0266  0087               	movwf	7
  4677  0267  3001               	movlw	1
  4678  0268  0781               	addwf	1,f
  4679  0269  3141               	addfsr 1,1
  4680  026A  1803               	skipnc
  4681  026B  0A81               	incf	1,f
  4682                           
  4683                           ;Switch_B1.c: 164: if (Sw->Hold2Time >= 150) {
  4684  026C  087B               	movf	_Sw,w
  4685  026D  3E05               	addlw	5
  4686  026E  0086               	movwf	6
  4687  026F  3001               	movlw	1	; select bank2/3
  4688  0270  0087               	movwf	7
  4689  0271  3F40               	moviw [0]fsr1
  4690  0272  0020               	movlb	0	; select bank0
  4691  0273  00E5               	movwf	??_setSw_Main
  4692  0274  3F41               	moviw [1]fsr1
  4693  0275  00E6               	movwf	??_setSw_Main+1
  4694  0276  3000               	movlw	0
  4695  0277  0266               	subwf	??_setSw_Main+1,w
  4696  0278  3096               	movlw	150
  4697  0279  1903               	skipnz
  4698  027A  0265               	subwf	??_setSw_Main,w
  4699  027B  1C03               	skipc
  4700  027C  0008               	return
  4701                           
  4702                           ;Switch_B1.c: 165: Sw->Hold2Time = 0;
  4703  027D  087B               	movf	_Sw,w
  4704  027E  3E05               	addlw	5
  4705  027F  0086               	movwf	6
  4706  0280  3001               	movlw	1	; select bank2/3
  4707  0281  0087               	movwf	7
  4708  0282  3000               	movlw	0
  4709  0283  3FC0               	movwi [0]fsr1
  4710  0284  3FC1               	movwi [1]fsr1
  4711                           
  4712                           ;Switch_B1.c: 166: Sw->Hold2 = 1;
  4713  0285  087B               	movf	_Sw,w
  4714  0286  0086               	movwf	6
  4715  0287  3001               	movlw	1	; select bank2/3
  4716  0288  0087               	movwf	7
  4717  0289  1601               	bsf	1,4
  4718                           
  4719                           ;Switch_B1.c: 170: setRF_Learn(1, 1);
  4720  028A  01A2               	clrf	setRF_Learn@command
  4721  028B  0AA2               	incf	setRF_Learn@command,f
  4722  028C  3001               	movlw	1
  4723  028D  319F  2780  3181   	fcall	_setRF_Learn
  4724                           
  4725                           ;Switch_B1.c: 172: if (myMain->First) {
  4726  0290  0021               	movlb	1	; select bank1
  4727  0291  0869               	movf	_myMain^(0+128),w
  4728  0292  0086               	movwf	6
  4729  0293  3001               	movlw	1	; select bank2/3
  4730  0294  0087               	movwf	7
  4731  0295  1F81               	btfss	1,7
  4732  0296  0008               	return
  4733                           
  4734                           ;Switch_B1.c: 173: setBuz(2, 100);
  4735  0297  3064               	movlw	100
  4736  0298  0020               	movlb	0	; select bank0
  4737  0299  00A9               	movwf	setBuz@time
  4738  029A  3000               	movlw	0
  4739  029B  00AA               	movwf	setBuz@time+1
  4740  029C  3002               	movlw	2
  4741  029D  318B  23D8         	fcall	_setBuz
  4742                           
  4743                           ;Switch_B1.c: 174: }
  4744                           ;Switch_B1.c: 176: }
  4745                           ;Switch_B1.c: 177: } else {
  4746  029F  0008               	return
  4747  02A0                     l6716:	
  4748                           
  4749                           ;Switch_B1.c: 178: if (!Sw->Hold3) {
  4750  02A0  087B               	movf	_Sw,w
  4751  02A1  0086               	movwf	6
  4752  02A2  3001               	movlw	1	; select bank2/3
  4753  02A3  0087               	movwf	7
  4754  02A4  1A81               	btfsc	1,5
  4755  02A5  0008               	return
  4756                           
  4757                           ;Switch_B1.c: 179: Sw->Hold3Time++;
  4758  02A6  087B               	movf	_Sw,w
  4759  02A7  3E07               	addlw	7
  4760  02A8  0086               	movwf	6
  4761  02A9  3001               	movlw	1	; select bank2/3
  4762  02AA  0087               	movwf	7
  4763  02AB  3001               	movlw	1
  4764  02AC  0781               	addwf	1,f
  4765  02AD  3141               	addfsr 1,1
  4766  02AE  1803               	skipnc
  4767  02AF  0A81               	incf	1,f
  4768                           
  4769                           ;Switch_B1.c: 180: if (Sw->Hold3Time >= 300)
  4770  02B0  087B               	movf	_Sw,w
  4771  02B1  3E07               	addlw	7
  4772  02B2  0086               	movwf	6
  4773  02B3  3001               	movlw	1	; select bank2/3
  4774  02B4  0087               	movwf	7
  4775  02B5  3F40               	moviw [0]fsr1
  4776  02B6  0020               	movlb	0	; select bank0
  4777  02B7  00E5               	movwf	??_setSw_Main
  4778  02B8  3F41               	moviw [1]fsr1
  4779  02B9  00E6               	movwf	??_setSw_Main+1
  4780  02BA  3001               	movlw	1
  4781  02BB  0266               	subwf	??_setSw_Main+1,w
  4782  02BC  302C               	movlw	44
  4783  02BD  1903               	skipnz
  4784  02BE  0265               	subwf	??_setSw_Main,w
  4785  02BF  1C03               	skipc
  4786  02C0  0008               	return
  4787                           
  4788                           ;Switch_B1.c: 181: {
  4789                           ;Switch_B1.c: 182: Sw->Hold3Time = 0;
  4790  02C1  087B               	movf	_Sw,w
  4791  02C2  3E07               	addlw	7
  4792  02C3  0086               	movwf	6
  4793  02C4  3001               	movlw	1	; select bank2/3
  4794  02C5  0087               	movwf	7
  4795  02C6  3000               	movlw	0
  4796  02C7  3FC0               	movwi [0]fsr1
  4797  02C8  3FC1               	movwi [1]fsr1
  4798                           
  4799                           ;Switch_B1.c: 183: Sw->Hold3 = 1;
  4800  02C9  087B               	movf	_Sw,w
  4801  02CA  0086               	movwf	6
  4802  02CB  3001               	movlw	1	; select bank2/3
  4803  02CC  0087               	movwf	7
  4804  02CD  1681               	bsf	1,5
  4805                           
  4806                           ;Switch_B1.c: 186: setRF_Learn(1, 0);
  4807  02CE  01A2               	clrf	setRF_Learn@command
  4808  02CF  3001               	movlw	1
  4809  02D0  319F  2780         	fcall	_setRF_Learn
  4810                           
  4811                           ;Switch_B1.c: 189: }
  4812                           ;Switch_B1.c: 190: }
  4813                           ;Switch_B1.c: 191: }
  4814                           ;Switch_B1.c: 192: }
  4815                           ;Switch_B1.c: 193: }
  4816                           ;Switch_B1.c: 194: } else {
  4817  02D2  0008               	return
  4818  02D3                     l6726:	
  4819                           
  4820                           ;Switch_B1.c: 195: if (Sw->Debounce) {
  4821  02D3  087B               	movf	_Sw,w
  4822  02D4  0086               	movwf	6
  4823  02D5  3001               	movlw	1	; select bank2/3
  4824  02D6  0087               	movwf	7
  4825  02D7  1D01               	btfss	1,2
  4826  02D8  0008               	return
  4827                           
  4828                           ;Switch_B1.c: 196: Sw->DebounceTime++;
  4829  02D9  3001               	movlw	1
  4830  02DA  0020               	movlb	0	; select bank0
  4831  02DB  00E5               	movwf	??_setSw_Main
  4832  02DC  087B               	movf	_Sw,w
  4833  02DD  3E02               	addlw	2
  4834  02DE  0086               	movwf	6
  4835  02DF  3001               	movlw	1	; select bank2/3
  4836  02E0  0087               	movwf	7
  4837  02E1  0865               	movf	??_setSw_Main,w
  4838  02E2  0781               	addwf	1,f
  4839                           
  4840                           ;Switch_B1.c: 197: if (Sw->DebounceTime >= 5) {
  4841  02E3  087B               	movf	_Sw,w
  4842  02E4  3E02               	addlw	2
  4843  02E5  0086               	movwf	6
  4844  02E6  3001               	movlw	1	; select bank2/3
  4845  02E7  0087               	movwf	7
  4846  02E8  3005               	movlw	5
  4847  02E9  0201               	subwf	1,w
  4848  02EA  1C03               	skipc
  4849  02EB  0008               	return
  4850                           
  4851                           ;Switch_B1.c: 198: Sw->DebounceTime = 0;
  4852  02EC  087B               	movf	_Sw,w
  4853  02ED  3E02               	addlw	2
  4854  02EE  0086               	movwf	6
  4855  02EF  3001               	movlw	1	; select bank2/3
  4856  02F0  0087               	movwf	7
  4857  02F1  0181               	clrf	1
  4858                           
  4859                           ;Switch_B1.c: 199: Sw->Debounce = 0;
  4860  02F2  087B               	movf	_Sw,w
  4861  02F3  0086               	movwf	6
  4862  02F4  3001               	movlw	1	; select bank2/3
  4863  02F5  0087               	movwf	7
  4864  02F6  1101               	bcf	1,2
  4865                           
  4866                           ;Switch_B1.c: 200: Sw->Hold1Time = 0;
  4867  02F7  087B               	movf	_Sw,w
  4868  02F8  3E03               	addlw	3
  4869  02F9  0086               	movwf	6
  4870  02FA  3001               	movlw	1	; select bank2/3
  4871  02FB  0087               	movwf	7
  4872  02FC  3000               	movlw	0
  4873  02FD  3FC0               	movwi [0]fsr1
  4874  02FE  3FC1               	movwi [1]fsr1
  4875                           
  4876                           ;Switch_B1.c: 201: Sw->Hold1 = 0;
  4877  02FF  087B               	movf	_Sw,w
  4878  0300  0086               	movwf	6
  4879  0301  3001               	movlw	1	; select bank2/3
  4880  0302  0087               	movwf	7
  4881  0303  1181               	bcf	1,3
  4882                           
  4883                           ;Switch_B1.c: 202: Sw->Hold2Time = 0;
  4884  0304  087B               	movf	_Sw,w
  4885  0305  3E05               	addlw	5
  4886  0306  0086               	movwf	6
  4887  0307  3001               	movlw	1	; select bank2/3
  4888  0308  0087               	movwf	7
  4889  0309  3000               	movlw	0
  4890  030A  3FC0               	movwi [0]fsr1
  4891  030B  3FC1               	movwi [1]fsr1
  4892                           
  4893                           ;Switch_B1.c: 203: Sw->Hold2 = 0;
  4894  030C  087B               	movf	_Sw,w
  4895  030D  0086               	movwf	6
  4896  030E  3001               	movlw	1	; select bank2/3
  4897  030F  0087               	movwf	7
  4898  0310  1201               	bcf	1,4
  4899                           
  4900                           ;Switch_B1.c: 204: Sw->Hold3Time = 0;
  4901  0311  087B               	movf	_Sw,w
  4902  0312  3E07               	addlw	7
  4903  0313  0086               	movwf	6
  4904  0314  3001               	movlw	1	; select bank2/3
  4905  0315  0087               	movwf	7
  4906  0316  3000               	movlw	0
  4907  0317  3FC0               	movwi [0]fsr1
  4908  0318  3FC1               	movwi [1]fsr1
  4909                           
  4910                           ;Switch_B1.c: 205: Sw->Hold3 = 0;
  4911  0319  087B               	movf	_Sw,w
  4912  031A  0086               	movwf	6
  4913  031B  3001               	movlw	1	; select bank2/3
  4914  031C  0087               	movwf	7
  4915  031D  1281               	bcf	1,5
  4916                           
  4917                           ;Switch_B1.c: 208: Sw_DimmerOffFunc(sw);
  4918  031E  0869               	movf	setSw_Main@sw,w
  4919  031F  318A  2281  3181   	fcall	_Sw_DimmerOffFunc
  4920                           
  4921                           ;Switch_B1.c: 213: setRF_Learn(1, 0);
  4922  0322  0020               	movlb	0	; select bank0
  4923  0323  01A2               	clrf	setRF_Learn@command
  4924  0324  3001               	movlw	1
  4925  0325  319F  2780         	fcall	_setRF_Learn
  4926  0327  0008               	return
  4927  0328                     __end_of_setSw_Main:	
  4928                           
  4929                           	psect	text9
  4930  1F80                     __ptext9:	
  4931 ;; *************** function _setRF_Learn *****************
  4932 ;; Defined at:
  4933 ;;		line 30 in file "../src/RF_Control_B1.c"
  4934 ;; Parameters:    Size  Location     Type
  4935 ;;  rf              1    wreg     unsigned char 
  4936 ;;  command         1    2[BANK0 ] unsigned char 
  4937 ;; Auto vars:     Size  Location     Type
  4938 ;;  rf              1    3[BANK0 ] unsigned char 
  4939 ;; Return value:  Size  Location     Type
  4940 ;;		None               void
  4941 ;; Registers used:
  4942 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4943 ;; Tracked objects:
  4944 ;;		On entry : 0/0
  4945 ;;		On exit  : 0/0
  4946 ;;		Unchanged: 0/0
  4947 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4948 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4949 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4950 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4951 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4952 ;;Total ram usage:        2 bytes
  4953 ;; Hardware stack levels used:    1
  4954 ;; Hardware stack levels required when called:    6
  4955 ;; This function calls:
  4956 ;;		_RfPointSelect
  4957 ;; This function is called by:
  4958 ;;		_setSw_Main
  4959 ;; This function uses a non-reentrant model
  4960 ;;
  4961                           
  4962                           
  4963                           ;psect for function _setRF_Learn
  4964  1F80                     _setRF_Learn:	
  4965                           
  4966                           ;incstack = 0
  4967                           ; Regs used in _setRF_Learn: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4968                           ;setRF_Learn@rf stored from wreg
  4969  1F80  0020               	movlb	0	; select bank0
  4970  1F81  00A3               	movwf	setRF_Learn@rf
  4971                           
  4972                           ;RF_Control_B1.c: 31: RfPointSelect(rf);
  4973  1F82  0823               	movf	setRF_Learn@rf,w
  4974  1F83  319E  26F1         	fcall	_RfPointSelect
  4975                           
  4976                           ;RF_Control_B1.c: 32: RF->Learn = command;
  4977  1F85  0021               	movlb	1	; select bank1
  4978  1F86  083D               	movf	_RF^(0+128),w
  4979  1F87  0086               	movwf	6
  4980  1F88  0187               	clrf	7
  4981  1F89  0020               	movlb	0	; select bank0
  4982  1F8A  0822               	movf	setRF_Learn@command,w
  4983  1F8B  1301               	bcf	1,6
  4984  1F8C  1D03               	skipz
  4985  1F8D  1701               	bsf	1,6
  4986  1F8E  0008               	return
  4987  1F8F                     __end_of_setRF_Learn:	
  4988                           
  4989                           	psect	text10
  4990  0AF2                     __ptext10:	
  4991 ;; *************** function _Sw_DimmerOnFunc *****************
  4992 ;; Defined at:
  4993 ;;		line 222 in file "../src/Switch_B1.c"
  4994 ;; Parameters:    Size  Location     Type
  4995 ;;  sw              1    wreg     unsigned char 
  4996 ;; Auto vars:     Size  Location     Type
  4997 ;;  sw              1   67[BANK0 ] unsigned char 
  4998 ;;  Idle            1   66[BANK0 ] unsigned char 
  4999 ;; Return value:  Size  Location     Type
  5000 ;;		None               void
  5001 ;; Registers used:
  5002 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5003 ;; Tracked objects:
  5004 ;;		On entry : 0/0
  5005 ;;		On exit  : 0/0
  5006 ;;		Unchanged: 0/0
  5007 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5008 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5009 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5010 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5011 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5012 ;;Total ram usage:        2 bytes
  5013 ;; Hardware stack levels used:    1
  5014 ;; Hardware stack levels required when called:    9
  5015 ;; This function calls:
  5016 ;;		_setBuz
  5017 ;;		_setDimmerLights_Switch
  5018 ;;		_setDimmerLights_Trigger
  5019 ;;		_setRFSW_Status
  5020 ;;		_setRF_DimmerLights
  5021 ;;		_setTxData
  5022 ;; This function is called by:
  5023 ;;		_setSw_Main
  5024 ;; This function uses a non-reentrant model
  5025 ;;
  5026                           
  5027                           
  5028                           ;psect for function _Sw_DimmerOnFunc
  5029  0AF2                     _Sw_DimmerOnFunc:	
  5030                           
  5031                           ;incstack = 0
  5032                           ; Regs used in _Sw_DimmerOnFunc: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5033                           ;Sw_DimmerOnFunc@sw stored from wreg
  5034  0AF2  0020               	movlb	0	; select bank0
  5035  0AF3  00E3               	movwf	Sw_DimmerOnFunc@sw
  5036                           
  5037                           ;Switch_B1.c: 223: char Idle = 1;
  5038  0AF4  01E2               	clrf	Sw_DimmerOnFunc@Idle
  5039  0AF5  0AE2               	incf	Sw_DimmerOnFunc@Idle,f
  5040                           
  5041                           ;Switch_B1.c: 236: if (sw == 1) {
  5042  0AF6  0863               	movf	Sw_DimmerOnFunc@sw,w
  5043  0AF7  3A01               	xorlw	1
  5044  0AF8  1D03               	skipz
  5045  0AF9  2AFD               	goto	l6118
  5046                           
  5047                           ;Switch_B1.c: 237: Idle = (DimmerLights22->AdjGo) ? 0 : 1;
  5048  0AFA  0021               	movlb	1	; select bank1
  5049  0AFB  083B               	movf	_DimmerLights22^(0+128),w
  5050  0AFC  2B03               	goto	L2
  5051  0AFD                     l6118:	
  5052                           ;Switch_B1.c: 238: } else if (sw == 2) {
  5053                           
  5054  0AFD  0863               	movf	Sw_DimmerOnFunc@sw,w
  5055  0AFE  3A02               	xorlw	2
  5056  0AFF  1D03               	skipz
  5057  0B00  2B0F               	goto	l6122
  5058                           
  5059                           ;Switch_B1.c: 239: Idle = (DimmerLights11->AdjGo) ? 0 : 1;
  5060  0B01  0021               	movlb	1	; select bank1
  5061  0B02  083A               	movf	_DimmerLights11^(0+128),w
  5062  0B03                     L2:	
  5063  0B03  3E08               	addlw	8
  5064  0B04  0086               	movwf	6
  5065  0B05  3001               	movlw	1	; select bank2/3
  5066  0B06  0087               	movwf	7
  5067  0B07  1003               	clrc
  5068  0B08  1D81               	btfss	1,3
  5069  0B09  1403               	setc
  5070  0B0A  3000               	movlw	0
  5071  0B0B  1803               	btfsc	3,0
  5072  0B0C  3001               	movlw	1
  5073  0B0D  0020               	movlb	0	; select bank0
  5074  0B0E  00E2               	movwf	Sw_DimmerOnFunc@Idle
  5075  0B0F                     l6122:	
  5076                           
  5077                           ;Switch_B1.c: 240: }
  5078                           ;Switch_B1.c: 243: if (Idle) {
  5079  0B0F  0862               	movf	Sw_DimmerOnFunc@Idle,w
  5080  0B10  1903               	btfsc	3,2
  5081  0B11  0008               	return
  5082                           
  5083                           ;Switch_B1.c: 244: Sw->Flag = 1;
  5084  0B12  087B               	movf	_Sw,w
  5085  0B13  0086               	movwf	6
  5086  0B14  3001               	movlw	1	; select bank2/3
  5087  0B15  0087               	movwf	7
  5088  0B16  1781               	bsf	1,7
  5089                           
  5090                           ;Switch_B1.c: 245: setBuz(1, 100);
  5091  0B17  3064               	movlw	100
  5092  0B18  00A9               	movwf	setBuz@time
  5093  0B19  3000               	movlw	0
  5094  0B1A  00AA               	movwf	setBuz@time+1
  5095  0B1B  3001               	movlw	1
  5096  0B1C  318B  23D8  318A   	fcall	_setBuz
  5097                           
  5098                           ;Switch_B1.c: 246: if (!Sw->Status) {
  5099  0B1F  087B               	movf	_Sw,w
  5100  0B20  0086               	movwf	6
  5101  0B21  3001               	movlw	1	; select bank2/3
  5102  0B22  0087               	movwf	7
  5103  0B23  1B01               	btfsc	1,6
  5104  0B24  2B51               	goto	l6142
  5105                           
  5106                           ;Switch_B1.c: 247: Sw->Status = 1;
  5107  0B25  087B               	movf	_Sw,w
  5108  0B26  0086               	movwf	6
  5109  0B27  3001               	movlw	1	; select bank2/3
  5110  0B28  0087               	movwf	7
  5111  0B29  1701               	bsf	1,6
  5112                           
  5113                           ;Switch_B1.c: 248: setRFSW_Status(sw, 1);
  5114  0B2A  0020               	movlb	0	; select bank0
  5115  0B2B  01A2               	clrf	setRFSW_Status@command
  5116  0B2C  0AA2               	incf	setRFSW_Status@command,f
  5117  0B2D  0863               	movf	Sw_DimmerOnFunc@sw,w
  5118  0B2E  319F  2762  318A   	fcall	_setRFSW_Status
  5119                           
  5120                           ;Switch_B1.c: 250: setDimmerLights_Trigger(sw, 1);
  5121  0B31  0020               	movlb	0	; select bank0
  5122  0B32  01A2               	clrf	setDimmerLights_Trigger@command
  5123  0B33  0AA2               	incf	setDimmerLights_Trigger@command,f
  5124  0B34  0863               	movf	Sw_DimmerOnFunc@sw,w
  5125  0B35  319F  27BF  318A   	fcall	_setDimmerLights_Trigger
  5126                           
  5127                           ;Switch_B1.c: 251: setDimmerLights_Switch(sw, 1);
  5128  0B38  0020               	movlb	0	; select bank0
  5129  0B39  01A2               	clrf	setDimmerLights_Switch@command
  5130  0B3A  0AA2               	incf	setDimmerLights_Switch@command,f
  5131  0B3B  0863               	movf	Sw_DimmerOnFunc@sw,w
  5132  0B3C  319F  27AF  318A   	fcall	_setDimmerLights_Switch
  5133                           
  5134                           ;Switch_B1.c: 253: setRF_DimmerLights(sw, Sw->Status);
  5135  0B3F  087B               	movf	_Sw,w
  5136  0B40  0086               	movwf	6
  5137  0B41  3001               	movlw	1	; select bank2/3
  5138  0B42  0087               	movwf	7
  5139  0B43  3000               	movlw	0
  5140  0B44  1B01               	btfsc	1,6
  5141  0B45  3001               	movlw	1
  5142  0B46  0020               	movlb	0	; select bank0
  5143  0B47  00DD               	movwf	setRF_DimmerLights@on
  5144  0B48  0863               	movf	Sw_DimmerOnFunc@sw,w
  5145  0B49  3189  21A9  318A   	fcall	_setRF_DimmerLights
  5146                           
  5147                           ;Switch_B1.c: 254: setTxData(1);
  5148  0B4C  3001               	movlw	1
  5149  0B4D  3186  2671         	fcall	_setTxData
  5150                           
  5151                           ;Switch_B1.c: 256: } else {
  5152  0B4F  0020               	movlb	0	; select bank0
  5153  0B50  0008               	return
  5154  0B51                     l6142:	
  5155                           
  5156                           ;Switch_B1.c: 257: Sw->Status = 0;
  5157  0B51  087B               	movf	_Sw,w
  5158  0B52  0086               	movwf	6
  5159  0B53  3001               	movlw	1	; select bank2/3
  5160  0B54  0087               	movwf	7
  5161  0B55  1301               	bcf	1,6
  5162                           
  5163                           ;Switch_B1.c: 258: setRFSW_Status(sw, Sw->Status);
  5164  0B56  087B               	movf	_Sw,w
  5165  0B57  0086               	movwf	6
  5166  0B58  3001               	movlw	1	; select bank2/3
  5167  0B59  0087               	movwf	7
  5168  0B5A  3000               	movlw	0
  5169  0B5B  1B01               	btfsc	1,6
  5170  0B5C  3001               	movlw	1
  5171  0B5D  0020               	movlb	0	; select bank0
  5172  0B5E  00A2               	movwf	setRFSW_Status@command
  5173  0B5F  0863               	movf	Sw_DimmerOnFunc@sw,w
  5174  0B60  319F  2762         	fcall	_setRFSW_Status
  5175  0B62  0020               	movlb	0	; select bank0
  5176  0B63  0008               	return
  5177  0B64                     __end_of_Sw_DimmerOnFunc:	
  5178                           
  5179                           	psect	text11
  5180  0A81                     __ptext11:	
  5181 ;; *************** function _Sw_DimmerOffFunc *****************
  5182 ;; Defined at:
  5183 ;;		line 264 in file "../src/Switch_B1.c"
  5184 ;; Parameters:    Size  Location     Type
  5185 ;;  sw              1    wreg     unsigned char 
  5186 ;; Auto vars:     Size  Location     Type
  5187 ;;  sw              1   68[BANK0 ] unsigned char 
  5188 ;; Return value:  Size  Location     Type
  5189 ;;		None               void
  5190 ;; Registers used:
  5191 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5192 ;; Tracked objects:
  5193 ;;		On entry : 0/0
  5194 ;;		On exit  : 0/0
  5195 ;;		Unchanged: 0/0
  5196 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5197 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5198 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5199 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5200 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5201 ;;Total ram usage:        3 bytes
  5202 ;; Hardware stack levels used:    1
  5203 ;; Hardware stack levels required when called:    9
  5204 ;; This function calls:
  5205 ;;		_setDelayOff_GO
  5206 ;;		_setDimmerLights_AdjGo
  5207 ;;		_setDimmerLights_Switch
  5208 ;;		_setDimmerLights_Trigger
  5209 ;;		_setDimmerLights_TriggerAdj
  5210 ;;		_setRF_DimmerLights
  5211 ;;		_setTxData
  5212 ;; This function is called by:
  5213 ;;		_setSw_Main
  5214 ;; This function uses a non-reentrant model
  5215 ;;
  5216                           
  5217                           
  5218                           ;psect for function _Sw_DimmerOffFunc
  5219  0A81                     _Sw_DimmerOffFunc:	
  5220                           
  5221                           ;incstack = 0
  5222                           ; Regs used in _Sw_DimmerOffFunc: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5223                           ;Sw_DimmerOffFunc@sw stored from wreg
  5224  0A81  0020               	movlb	0	; select bank0
  5225  0A82  00E4               	movwf	Sw_DimmerOffFunc@sw
  5226                           
  5227                           ;Switch_B1.c: 265: if (Sw->Flag) {
  5228  0A83  087B               	movf	_Sw,w
  5229  0A84  0086               	movwf	6
  5230  0A85  3001               	movlw	1	; select bank2/3
  5231  0A86  0087               	movwf	7
  5232  0A87  1F81               	btfss	1,7
  5233  0A88  0008               	return
  5234                           
  5235                           ;Switch_B1.c: 266: Sw->Flag = 0;
  5236  0A89  087B               	movf	_Sw,w
  5237  0A8A  0086               	movwf	6
  5238  0A8B  3001               	movlw	1	; select bank2/3
  5239  0A8C  0087               	movwf	7
  5240  0A8D  1381               	bcf	1,7
  5241                           
  5242                           ;Switch_B1.c: 267: if (Sw->Status) {
  5243  0A8E  087B               	movf	_Sw,w
  5244  0A8F  0086               	movwf	6
  5245  0A90  3001               	movlw	1	; select bank2/3
  5246  0A91  0087               	movwf	7
  5247  0A92  1F01               	btfss	1,6
  5248  0A93  2ACD               	goto	l6186
  5249                           
  5250                           ;Switch_B1.c: 268: if (Sw->Adj) {
  5251  0A94  0A7B               	incf	_Sw,w
  5252  0A95  0086               	movwf	6
  5253  0A96  3001               	movlw	1	; select bank2/3
  5254  0A97  0087               	movwf	7
  5255  0A98  1C01               	btfss	1,0
  5256  0A99  0008               	return
  5257                           
  5258                           ;Switch_B1.c: 269: Sw->Adj = 0;
  5259  0A9A  0A7B               	incf	_Sw,w
  5260  0A9B  0086               	movwf	6
  5261  0A9C  3001               	movlw	1	; select bank2/3
  5262  0A9D  0087               	movwf	7
  5263  0A9E  1001               	bcf	1,0
  5264                           
  5265                           ;Switch_B1.c: 270: setDimmerLights_TriggerAdj(sw, 1);
  5266  0A9F  01A2               	clrf	setDimmerLights_TriggerAdj@command
  5267  0AA0  0AA2               	incf	setDimmerLights_TriggerAdj@command,f
  5268  0AA1  0864               	movf	Sw_DimmerOffFunc@sw,w
  5269  0AA2  319F  27DF  318A   	fcall	_setDimmerLights_TriggerAdj
  5270                           
  5271                           ;Switch_B1.c: 271: setDimmerLights_AdjGo(sw, 0);
  5272  0AA5  0020               	movlb	0	; select bank0
  5273  0AA6  01A2               	clrf	setDimmerLights_AdjGo@command
  5274  0AA7  0864               	movf	Sw_DimmerOffFunc@sw,w
  5275  0AA8  319F  27CF  318A   	fcall	_setDimmerLights_AdjGo
  5276                           
  5277                           ;Switch_B1.c: 273: product->Data[17]=product->Data[26 + sw];
  5278  0AAB  0020               	movlb	0	; select bank0
  5279  0AAC  0864               	movf	Sw_DimmerOffFunc@sw,w
  5280  0AAD  3E1A               	addlw	26
  5281  0AAE  077D               	addwf	_product,w
  5282  0AAF  00E2               	movwf	??_Sw_DimmerOffFunc
  5283  0AB0  0862               	movf	??_Sw_DimmerOffFunc,w
  5284  0AB1  0086               	movwf	6
  5285  0AB2  3001               	movlw	1	; select bank2/3
  5286  0AB3  0087               	movwf	7
  5287  0AB4  0801               	movf	1,w
  5288  0AB5  00E3               	movwf	??_Sw_DimmerOffFunc+1
  5289  0AB6  087D               	movf	_product,w
  5290  0AB7  3E11               	addlw	17
  5291  0AB8  0086               	movwf	6
  5292  0AB9  3001               	movlw	1	; select bank2/3
  5293  0ABA  0087               	movwf	7
  5294  0ABB  0863               	movf	??_Sw_DimmerOffFunc+1,w
  5295  0ABC  0081               	movwf	1
  5296                           
  5297                           ;Switch_B1.c: 274: setRF_DimmerLights(sw, Sw->Status);
  5298  0ABD  087B               	movf	_Sw,w
  5299  0ABE  0086               	movwf	6
  5300  0ABF  3001               	movlw	1	; select bank2/3
  5301  0AC0  0087               	movwf	7
  5302  0AC1  3000               	movlw	0
  5303  0AC2  1B01               	btfsc	1,6
  5304  0AC3  3001               	movlw	1
  5305  0AC4  00DD               	movwf	setRF_DimmerLights@on
  5306  0AC5  0864               	movf	Sw_DimmerOffFunc@sw,w
  5307  0AC6  3189  21A9  318A   	fcall	_setRF_DimmerLights
  5308                           
  5309                           ;Switch_B1.c: 275: setTxData(1);
  5310  0AC9  3001               	movlw	1
  5311  0ACA  3186  2671         	fcall	_setTxData
  5312                           
  5313                           ;Switch_B1.c: 277: }
  5314                           ;Switch_B1.c: 278: } else {
  5315  0ACC  0008               	return
  5316  0ACD                     l6186:	
  5317                           
  5318                           ;Switch_B1.c: 279: setDimmerLights_Trigger(sw, 1);
  5319  0ACD  0020               	movlb	0	; select bank0
  5320  0ACE  01A2               	clrf	setDimmerLights_Trigger@command
  5321  0ACF  0AA2               	incf	setDimmerLights_Trigger@command,f
  5322  0AD0  0864               	movf	Sw_DimmerOffFunc@sw,w
  5323  0AD1  319F  27BF  318A   	fcall	_setDimmerLights_Trigger
  5324                           
  5325                           ;Switch_B1.c: 280: setDimmerLights_Switch(sw, 0);
  5326  0AD4  0020               	movlb	0	; select bank0
  5327  0AD5  01A2               	clrf	setDimmerLights_Switch@command
  5328  0AD6  0864               	movf	Sw_DimmerOffFunc@sw,w
  5329  0AD7  319F  27AF  318A   	fcall	_setDimmerLights_Switch
  5330                           
  5331                           ;Switch_B1.c: 282: setDelayOff_GO(sw, 0, 0);
  5332  0ADA  0020               	movlb	0	; select bank0
  5333  0ADB  01A3               	clrf	setDelayOff_GO@command
  5334  0ADC  01A4               	clrf	setDelayOff_GO@value
  5335  0ADD  0864               	movf	Sw_DimmerOffFunc@sw,w
  5336  0ADE  3188  202F  318A   	fcall	_setDelayOff_GO
  5337                           
  5338                           ;Switch_B1.c: 283: setRF_DimmerLights(sw, Sw->Status);
  5339  0AE1  087B               	movf	_Sw,w
  5340  0AE2  0086               	movwf	6
  5341  0AE3  3001               	movlw	1	; select bank2/3
  5342  0AE4  0087               	movwf	7
  5343  0AE5  3000               	movlw	0
  5344  0AE6  1B01               	btfsc	1,6
  5345  0AE7  3001               	movlw	1
  5346  0AE8  0020               	movlb	0	; select bank0
  5347  0AE9  00DD               	movwf	setRF_DimmerLights@on
  5348  0AEA  0864               	movf	Sw_DimmerOffFunc@sw,w
  5349  0AEB  3189  21A9  318A   	fcall	_setRF_DimmerLights
  5350                           
  5351                           ;Switch_B1.c: 284: setTxData(1);
  5352  0AEE  3001               	movlw	1
  5353  0AEF  3186  2671         	fcall	_setTxData
  5354  0AF1  0008               	return
  5355  0AF2                     __end_of_Sw_DimmerOffFunc:	
  5356                           
  5357                           	psect	text12
  5358  1625                     __ptext12:	
  5359 ;; *************** function _Sw_DimmerAdjFunc *****************
  5360 ;; Defined at:
  5361 ;;		line 291 in file "../src/Switch_B1.c"
  5362 ;; Parameters:    Size  Location     Type
  5363 ;;  sw              1    wreg     unsigned char 
  5364 ;; Auto vars:     Size  Location     Type
  5365 ;;  sw              1    5[BANK0 ] unsigned char 
  5366 ;;  Idle            1    4[BANK0 ] unsigned char 
  5367 ;; Return value:  Size  Location     Type
  5368 ;;		None               void
  5369 ;; Registers used:
  5370 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5371 ;; Tracked objects:
  5372 ;;		On entry : 0/0
  5373 ;;		On exit  : 0/0
  5374 ;;		Unchanged: 0/0
  5375 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5376 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5377 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5378 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5379 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5380 ;;Total ram usage:        2 bytes
  5381 ;; Hardware stack levels used:    1
  5382 ;; Hardware stack levels required when called:    7
  5383 ;; This function calls:
  5384 ;;		_setDimmerLights_AdjGo
  5385 ;;		_setDimmerLights_TriggerAdj
  5386 ;;		_setRFSW_Status
  5387 ;; This function is called by:
  5388 ;;		_setSw_Main
  5389 ;; This function uses a non-reentrant model
  5390 ;;
  5391                           
  5392                           
  5393                           ;psect for function _Sw_DimmerAdjFunc
  5394  1625                     _Sw_DimmerAdjFunc:	
  5395                           
  5396                           ;incstack = 0
  5397                           ; Regs used in _Sw_DimmerAdjFunc: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5398                           ;Sw_DimmerAdjFunc@sw stored from wreg
  5399  1625  0020               	movlb	0	; select bank0
  5400  1626  00A5               	movwf	Sw_DimmerAdjFunc@sw
  5401                           
  5402                           ;Switch_B1.c: 292: char Idle = 1;
  5403  1627  01A4               	clrf	Sw_DimmerAdjFunc@Idle
  5404  1628  0AA4               	incf	Sw_DimmerAdjFunc@Idle,f
  5405                           
  5406                           ;Switch_B1.c: 305: if (sw == 1) {
  5407  1629  0825               	movf	Sw_DimmerAdjFunc@sw,w
  5408  162A  3A01               	xorlw	1
  5409  162B  1D03               	skipz
  5410  162C  2E30               	goto	l6152
  5411                           
  5412                           ;Switch_B1.c: 306: Idle = (DimmerLights22->AdjGo) ? 0 : 1;
  5413  162D  0021               	movlb	1	; select bank1
  5414  162E  083B               	movf	_DimmerLights22^(0+128),w
  5415  162F  2E36               	goto	L3
  5416  1630                     l6152:	
  5417                           ;Switch_B1.c: 307: } else if (sw == 2) {
  5418                           
  5419  1630  0825               	movf	Sw_DimmerAdjFunc@sw,w
  5420  1631  3A02               	xorlw	2
  5421  1632  1D03               	skipz
  5422  1633  2E42               	goto	l6156
  5423                           
  5424                           ;Switch_B1.c: 308: Idle = (DimmerLights11->AdjGo) ? 0 : 1;
  5425  1634  0021               	movlb	1	; select bank1
  5426  1635  083A               	movf	_DimmerLights11^(0+128),w
  5427  1636                     L3:	
  5428  1636  3E08               	addlw	8
  5429  1637  0086               	movwf	6
  5430  1638  3001               	movlw	1	; select bank2/3
  5431  1639  0087               	movwf	7
  5432  163A  1003               	clrc
  5433  163B  1D81               	btfss	1,3
  5434  163C  1403               	setc
  5435  163D  3000               	movlw	0
  5436  163E  1803               	btfsc	3,0
  5437  163F  3001               	movlw	1
  5438  1640  0020               	movlb	0	; select bank0
  5439  1641  00A4               	movwf	Sw_DimmerAdjFunc@Idle
  5440  1642                     l6156:	
  5441                           
  5442                           ;Switch_B1.c: 309: }
  5443                           ;Switch_B1.c: 312: if (Idle) {
  5444  1642  0824               	movf	Sw_DimmerAdjFunc@Idle,w
  5445  1643  1903               	btfsc	3,2
  5446  1644  0008               	return
  5447                           
  5448                           ;Switch_B1.c: 313: if (Sw->Flag) {
  5449  1645  087B               	movf	_Sw,w
  5450  1646  0086               	movwf	6
  5451  1647  3001               	movlw	1	; select bank2/3
  5452  1648  0087               	movwf	7
  5453  1649  1F81               	btfss	1,7
  5454  164A  0008               	return
  5455                           
  5456                           ;Switch_B1.c: 314: Sw->Adj = 1;
  5457  164B  0A7B               	incf	_Sw,w
  5458  164C  0086               	movwf	6
  5459  164D  3001               	movlw	1	; select bank2/3
  5460  164E  0087               	movwf	7
  5461  164F  1401               	bsf	1,0
  5462                           
  5463                           ;Switch_B1.c: 315: Sw->Status = 1;
  5464  1650  087B               	movf	_Sw,w
  5465  1651  0086               	movwf	6
  5466  1652  3001               	movlw	1	; select bank2/3
  5467  1653  0087               	movwf	7
  5468  1654  1701               	bsf	1,6
  5469                           
  5470                           ;Switch_B1.c: 316: setRFSW_Status(sw, 1);
  5471  1655  01A2               	clrf	setRFSW_Status@command
  5472  1656  0AA2               	incf	setRFSW_Status@command,f
  5473  1657  0825               	movf	Sw_DimmerAdjFunc@sw,w
  5474  1658  319F  2762  3196   	fcall	_setRFSW_Status
  5475                           
  5476                           ;Switch_B1.c: 318: setDimmerLights_TriggerAdj(sw, 1);
  5477  165B  0020               	movlb	0	; select bank0
  5478  165C  01A2               	clrf	setDimmerLights_TriggerAdj@command
  5479  165D  0AA2               	incf	setDimmerLights_TriggerAdj@command,f
  5480  165E  0825               	movf	Sw_DimmerAdjFunc@sw,w
  5481  165F  319F  27DF  3196   	fcall	_setDimmerLights_TriggerAdj
  5482                           
  5483                           ;Switch_B1.c: 319: setDimmerLights_AdjGo(sw, 1);
  5484  1662  0020               	movlb	0	; select bank0
  5485  1663  01A2               	clrf	setDimmerLights_AdjGo@command
  5486  1664  0AA2               	incf	setDimmerLights_AdjGo@command,f
  5487  1665  0825               	movf	Sw_DimmerAdjFunc@sw,w
  5488  1666  319F  27CF         	fcall	_setDimmerLights_AdjGo
  5489  1668  0020               	movlb	0	; select bank0
  5490  1669  0008               	return
  5491  166A                     __end_of_Sw_DimmerAdjFunc:	
  5492                           
  5493                           	psect	text13
  5494  1FDF                     __ptext13:	
  5495 ;; *************** function _setDimmerLights_TriggerAdj *****************
  5496 ;; Defined at:
  5497 ;;		line 688 in file "../src/Dimmer_B1.c"
  5498 ;; Parameters:    Size  Location     Type
  5499 ;;  lights          1    wreg     unsigned char 
  5500 ;;  command         1    2[BANK0 ] unsigned char 
  5501 ;; Auto vars:     Size  Location     Type
  5502 ;;  lights          1    3[BANK0 ] unsigned char 
  5503 ;; Return value:  Size  Location     Type
  5504 ;;		None               void
  5505 ;; Registers used:
  5506 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5507 ;; Tracked objects:
  5508 ;;		On entry : 0/0
  5509 ;;		On exit  : 0/0
  5510 ;;		Unchanged: 0/0
  5511 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5512 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5513 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5514 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5515 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5516 ;;Total ram usage:        2 bytes
  5517 ;; Hardware stack levels used:    1
  5518 ;; Hardware stack levels required when called:    6
  5519 ;; This function calls:
  5520 ;;		_DimmerLightsPointSelect
  5521 ;; This function is called by:
  5522 ;;		_Sw_DimmerOffFunc
  5523 ;;		_Sw_DimmerAdjFunc
  5524 ;; This function uses a non-reentrant model
  5525 ;;
  5526                           
  5527                           
  5528                           ;psect for function _setDimmerLights_TriggerAdj
  5529  1FDF                     _setDimmerLights_TriggerAdj:	
  5530                           
  5531                           ;incstack = 0
  5532                           ; Regs used in _setDimmerLights_TriggerAdj: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  5533                           ;setDimmerLights_TriggerAdj@lights stored from wreg
  5534  1FDF  0020               	movlb	0	; select bank0
  5535  1FE0  00A3               	movwf	setDimmerLights_TriggerAdj@lights
  5536                           
  5537                           ;Dimmer_B1.c: 689: DimmerLightsPointSelect(lights);
  5538  1FE1  0823               	movf	setDimmerLights_TriggerAdj@lights,w
  5539  1FE2  3190  20B2         	fcall	_DimmerLightsPointSelect
  5540                           
  5541                           ;Dimmer_B1.c: 690: DimmerLights->TriggerAdj = command;
  5542  1FE4  0879               	movf	_DimmerLights,w
  5543  1FE5  3E08               	addlw	8
  5544  1FE6  0086               	movwf	6
  5545  1FE7  3001               	movlw	1	; select bank2/3
  5546  1FE8  0087               	movwf	7
  5547  1FE9  0020               	movlb	0	; select bank0
  5548  1FEA  0822               	movf	setDimmerLights_TriggerAdj@command,w
  5549  1FEB  1201               	bcf	1,4
  5550  1FEC  1D03               	skipz
  5551  1FED  1601               	bsf	1,4
  5552  1FEE  0008               	return
  5553  1FEF                     __end_of_setDimmerLights_TriggerAdj:	
  5554                           
  5555                           	psect	text14
  5556  1FCF                     __ptext14:	
  5557 ;; *************** function _setDimmerLights_AdjGo *****************
  5558 ;; Defined at:
  5559 ;;		line 678 in file "../src/Dimmer_B1.c"
  5560 ;; Parameters:    Size  Location     Type
  5561 ;;  lights          1    wreg     unsigned char 
  5562 ;;  command         1    2[BANK0 ] unsigned char 
  5563 ;; Auto vars:     Size  Location     Type
  5564 ;;  lights          1    3[BANK0 ] unsigned char 
  5565 ;; Return value:  Size  Location     Type
  5566 ;;		None               void
  5567 ;; Registers used:
  5568 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5569 ;; Tracked objects:
  5570 ;;		On entry : 0/0
  5571 ;;		On exit  : 0/0
  5572 ;;		Unchanged: 0/0
  5573 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5574 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5575 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5576 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5577 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5578 ;;Total ram usage:        2 bytes
  5579 ;; Hardware stack levels used:    1
  5580 ;; Hardware stack levels required when called:    6
  5581 ;; This function calls:
  5582 ;;		_DimmerLightsPointSelect
  5583 ;; This function is called by:
  5584 ;;		_Sw_DimmerOffFunc
  5585 ;;		_Sw_DimmerAdjFunc
  5586 ;; This function uses a non-reentrant model
  5587 ;;
  5588                           
  5589                           
  5590                           ;psect for function _setDimmerLights_AdjGo
  5591  1FCF                     _setDimmerLights_AdjGo:	
  5592                           
  5593                           ;incstack = 0
  5594                           ; Regs used in _setDimmerLights_AdjGo: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  5595                           ;setDimmerLights_AdjGo@lights stored from wreg
  5596  1FCF  0020               	movlb	0	; select bank0
  5597  1FD0  00A3               	movwf	setDimmerLights_AdjGo@lights
  5598                           
  5599                           ;Dimmer_B1.c: 679: DimmerLightsPointSelect(lights);
  5600  1FD1  0823               	movf	setDimmerLights_AdjGo@lights,w
  5601  1FD2  3190  20B2         	fcall	_DimmerLightsPointSelect
  5602                           
  5603                           ;Dimmer_B1.c: 680: DimmerLights->AdjGo = command;
  5604  1FD4  0879               	movf	_DimmerLights,w
  5605  1FD5  3E08               	addlw	8
  5606  1FD6  0086               	movwf	6
  5607  1FD7  3001               	movlw	1	; select bank2/3
  5608  1FD8  0087               	movwf	7
  5609  1FD9  0020               	movlb	0	; select bank0
  5610  1FDA  0822               	movf	setDimmerLights_AdjGo@command,w
  5611  1FDB  1181               	bcf	1,3
  5612  1FDC  1D03               	skipz
  5613  1FDD  1581               	bsf	1,3
  5614  1FDE  0008               	return
  5615  1FDF                     __end_of_setDimmerLights_AdjGo:	
  5616                           
  5617                           	psect	text15
  5618  1F55                     __ptext15:	
  5619 ;; *************** function _Switch_Initialization *****************
  5620 ;; Defined at:
  5621 ;;		line 37 in file "../src/Switch_B1.c"
  5622 ;; Parameters:    Size  Location     Type
  5623 ;;		None
  5624 ;; Auto vars:     Size  Location     Type
  5625 ;;		None
  5626 ;; Return value:  Size  Location     Type
  5627 ;;		None               void
  5628 ;; Registers used:
  5629 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5630 ;; Tracked objects:
  5631 ;;		On entry : 0/0
  5632 ;;		On exit  : 0/0
  5633 ;;		Unchanged: 0/0
  5634 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5635 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5636 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5637 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5638 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5639 ;;Total ram usage:        0 bytes
  5640 ;; Hardware stack levels used:    1
  5641 ;; Hardware stack levels required when called:    8
  5642 ;; This function calls:
  5643 ;;		_TouchPower
  5644 ;;		_setSw_Initialization
  5645 ;; This function is called by:
  5646 ;;		_main
  5647 ;; This function uses a non-reentrant model
  5648 ;;
  5649                           
  5650                           
  5651                           ;psect for function _Switch_Initialization
  5652  1F55                     _Switch_Initialization:	
  5653                           
  5654                           ;Switch_B1.c: 38: TouchPower();
  5655                           
  5656                           ;incstack = 0
  5657                           ; Regs used in _Switch_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  5658  1F55  319E  2657  319F   	fcall	_TouchPower
  5659                           
  5660                           ;Switch_B1.c: 40: WPUB1 = 0;
  5661  1F58  0024               	movlb	4	; select bank4
  5662  1F59  108D               	bcf	13,1	;volatile
  5663                           
  5664                           ;Switch_B1.c: 49: setSw_Initialization(1);
  5665  1F5A  3001               	movlw	1
  5666  1F5B  319E  268C  319F   	fcall	_setSw_Initialization
  5667                           
  5668                           ;Switch_B1.c: 52: setSw_Initialization(2);
  5669  1F5E  3002               	movlw	2
  5670  1F5F  319E  268C         	fcall	_setSw_Initialization
  5671  1F61  0008               	return
  5672  1F62                     __end_of_Switch_Initialization:	
  5673                           
  5674                           	psect	text16
  5675  1E8C                     __ptext16:	
  5676 ;; *************** function _setSw_Initialization *****************
  5677 ;; Defined at:
  5678 ;;		line 77 in file "../src/Switch_B1.c"
  5679 ;; Parameters:    Size  Location     Type
  5680 ;;  sw              1    wreg     unsigned char 
  5681 ;; Auto vars:     Size  Location     Type
  5682 ;;  sw              1    4[BANK0 ] unsigned char 
  5683 ;; Return value:  Size  Location     Type
  5684 ;;		None               void
  5685 ;; Registers used:
  5686 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5687 ;; Tracked objects:
  5688 ;;		On entry : 0/0
  5689 ;;		On exit  : 0/0
  5690 ;;		Unchanged: 0/0
  5691 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5692 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5693 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5694 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5695 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5696 ;;Total ram usage:        1 bytes
  5697 ;; Hardware stack levels used:    1
  5698 ;; Hardware stack levels required when called:    7
  5699 ;; This function calls:
  5700 ;;		_setLED
  5701 ;; This function is called by:
  5702 ;;		_Switch_Initialization
  5703 ;; This function uses a non-reentrant model
  5704 ;;
  5705                           
  5706                           
  5707                           ;psect for function _setSw_Initialization
  5708  1E8C                     _setSw_Initialization:	
  5709                           
  5710                           ;incstack = 0
  5711                           ; Regs used in _setSw_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5712                           ;setSw_Initialization@sw stored from wreg
  5713  1E8C  0020               	movlb	0	; select bank0
  5714  1E8D  00A4               	movwf	setSw_Initialization@sw
  5715                           
  5716                           ;Switch_B1.c: 78: setLED(sw, 1);
  5717  1E8E  01A2               	clrf	setLED@command
  5718  1E8F  0AA2               	incf	setLED@command,f
  5719  1E90  0824               	movf	setSw_Initialization@sw,w
  5720  1E91  3188  208C         	fcall	_setLED
  5721  1E93  0008               	return
  5722  1E94                     __end_of_setSw_Initialization:	
  5723                           
  5724                           	psect	text17
  5725  1E57                     __ptext17:	
  5726 ;; *************** function _TouchPower *****************
  5727 ;; Defined at:
  5728 ;;		line 10 in file "../src/Switch_B1.c"
  5729 ;; Parameters:    Size  Location     Type
  5730 ;;		None
  5731 ;; Auto vars:     Size  Location     Type
  5732 ;;		None
  5733 ;; Return value:  Size  Location     Type
  5734 ;;		None               void
  5735 ;; Registers used:
  5736 ;;		None
  5737 ;; Tracked objects:
  5738 ;;		On entry : 0/0
  5739 ;;		On exit  : 0/0
  5740 ;;		Unchanged: 0/0
  5741 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5742 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5743 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5744 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5745 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5746 ;;Total ram usage:        0 bytes
  5747 ;; Hardware stack levels used:    1
  5748 ;; Hardware stack levels required when called:    5
  5749 ;; This function calls:
  5750 ;;		Nothing
  5751 ;; This function is called by:
  5752 ;;		_Switch_Initialization
  5753 ;; This function uses a non-reentrant model
  5754 ;;
  5755                           
  5756                           
  5757                           ;psect for function _TouchPower
  5758  1E57                     _TouchPower:	
  5759  1E57                     l2554:	
  5760                           ;Switch_B1.c: 11: while (!RC5)
  5761                           
  5762                           ;incstack = 0
  5763                           ; Regs used in _TouchPower: []
  5764                           
  5765  1E57  0020               	movlb	0	; select bank0
  5766  1E58  1A8E               	btfsc	14,5	;volatile
  5767  1E59  0008               	return
  5768                           
  5769                           ;Switch_B1.c: 12: RC5 = 1;
  5770  1E5A  168E               	bsf	14,5	;volatile
  5771  1E5B  2E57               	goto	l2554
  5772  1E5C                     __end_of_TouchPower:	
  5773                           
  5774                           	psect	text18
  5775  1E53                     __ptext18:	
  5776 ;; *************** function _RF_Main *****************
  5777 ;; Defined at:
  5778 ;;		line 23 in file "../src/RF_Control_B1.c"
  5779 ;; Parameters:    Size  Location     Type
  5780 ;;		None
  5781 ;; Auto vars:     Size  Location     Type
  5782 ;;		None
  5783 ;; Return value:  Size  Location     Type
  5784 ;;		None               void
  5785 ;; Registers used:
  5786 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5787 ;; Tracked objects:
  5788 ;;		On entry : 0/0
  5789 ;;		On exit  : 0/0
  5790 ;;		Unchanged: 0/0
  5791 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5792 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5793 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5794 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5795 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5796 ;;Total ram usage:        0 bytes
  5797 ;; Hardware stack levels used:    1
  5798 ;; Hardware stack levels required when called:   14
  5799 ;; This function calls:
  5800 ;;		_setRF_Main
  5801 ;; This function is called by:
  5802 ;;		_main
  5803 ;; This function uses a non-reentrant model
  5804 ;;
  5805                           
  5806                           
  5807                           ;psect for function _RF_Main
  5808  1E53                     _RF_Main:	
  5809                           
  5810                           ;RF_Control_B1.c: 25: setRF_Main(1);
  5811                           
  5812                           ;incstack = 0
  5813                           ; Regs used in _RF_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5814  1E53  3001               	movlw	1
  5815  1E54  318E  26DE         	fcall	_setRF_Main
  5816  1E56  0008               	return
  5817  1E57                     __end_of_RF_Main:	
  5818                           
  5819                           	psect	text19
  5820  0EDE                     __ptext19:	
  5821 ;; *************** function _setRF_Main *****************
  5822 ;; Defined at:
  5823 ;;		line 57 in file "../src/RF_Control_B1.c"
  5824 ;; Parameters:    Size  Location     Type
  5825 ;;  rf              1    wreg     unsigned char 
  5826 ;; Auto vars:     Size  Location     Type
  5827 ;;  rf              1   74[BANK0 ] unsigned char 
  5828 ;; Return value:  Size  Location     Type
  5829 ;;		None               void
  5830 ;; Registers used:
  5831 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5832 ;; Tracked objects:
  5833 ;;		On entry : 0/0
  5834 ;;		On exit  : 0/0
  5835 ;;		Unchanged: 0/0
  5836 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5837 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5838 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5839 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5840 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5841 ;;Total ram usage:        3 bytes
  5842 ;; Hardware stack levels used:    1
  5843 ;; Hardware stack levels required when called:   13
  5844 ;; This function calls:
  5845 ;;		_CC2500_RxData
  5846 ;;		_CC2500_TxData
  5847 ;;		_CC2500_WriteCommand
  5848 ;;		_RF_RxDisable
  5849 ;;		_RfPointSelect
  5850 ;;		_getRxData
  5851 ;;		_setINT_GO
  5852 ;; This function is called by:
  5853 ;;		_RF_Main
  5854 ;; This function uses a non-reentrant model
  5855 ;;
  5856                           
  5857                           
  5858                           ;psect for function _setRF_Main
  5859  0EDE                     _setRF_Main:	
  5860                           
  5861                           ;incstack = 0
  5862                           ; Regs used in _setRF_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5863                           ;setRF_Main@rf stored from wreg
  5864  0EDE  0020               	movlb	0	; select bank0
  5865  0EDF  00EA               	movwf	setRF_Main@rf
  5866                           
  5867                           ;RF_Control_B1.c: 58: RfPointSelect(rf);
  5868  0EE0  086A               	movf	setRF_Main@rf,w
  5869  0EE1  319E  26F1  318E   	fcall	_RfPointSelect
  5870                           
  5871                           ;RF_Control_B1.c: 59: if (RF->Enable == 1) {
  5872  0EE4  0021               	movlb	1	; select bank1
  5873  0EE5  083D               	movf	_RF^(0+128),w
  5874  0EE6  0086               	movwf	6
  5875  0EE7  0187               	clrf	7
  5876  0EE8  1C01               	btfss	1,0
  5877  0EE9  0008               	return
  5878                           
  5879                           ;RF_Control_B1.c: 62: if (Buz->GO == 0) {
  5880  0EEA  0878               	movf	_Buz,w
  5881  0EEB  0086               	movwf	6
  5882  0EEC  3001               	movlw	1	; select bank2/3
  5883  0EED  0087               	movwf	7
  5884  0EEE  1881               	btfsc	1,1
  5885  0EEF  0008               	return
  5886                           
  5887                           ;RF_Control_B1.c: 68: RF->Key = (RA6 == 1 || RA4 == 1 || RA0 == 1 || RB1 == 1) ? 1 : 0;
  5888  0EF0  0020               	movlb	0	; select bank0
  5889  0EF1  01EB               	clrf	_setRF_Main$4185
  5890  0EF2  0AEB               	incf	_setRF_Main$4185,f
  5891  0EF3  1F0C               	btfss	12,6	;volatile
  5892  0EF4  1A0C               	btfsc	12,4	;volatile
  5893  0EF5  2EFA               	goto	l6608
  5894  0EF6  1C0C               	btfss	12,0	;volatile
  5895  0EF7  188D               	btfsc	13,1	;volatile
  5896  0EF8  2EFA               	goto	l6608
  5897  0EF9  01EB               	clrf	_setRF_Main$4185
  5898  0EFA                     l6608:	
  5899  0EFA  0021               	movlb	1	; select bank1
  5900  0EFB  083D               	movf	_RF^(0+128),w
  5901  0EFC  0086               	movwf	6
  5902  0EFD  0187               	clrf	7
  5903  0EFE  0020               	movlb	0	; select bank0
  5904  0EFF  086B               	movf	_setRF_Main$4185,w
  5905  0F00  1381               	bcf	1,7
  5906  0F01  1D03               	skipz
  5907  0F02  1781               	bsf	1,7
  5908                           
  5909                           ;RF_Control_B1.c: 74: if (RF->Key == 1 && RF->Learn == 0) {
  5910  0F03  0021               	movlb	1	; select bank1
  5911  0F04  083D               	movf	_RF^(0+128),w
  5912  0F05  0086               	movwf	6
  5913  0F06  0187               	clrf	7
  5914  0F07  1F81               	btfss	1,7
  5915  0F08  2F16               	goto	l6618
  5916  0F09  083D               	movf	_RF^(0+128),w
  5917  0F0A  0086               	movwf	6
  5918  0F0B  0187               	clrf	7
  5919  0F0C  1B01               	btfsc	1,6
  5920  0F0D  2F16               	goto	l6618
  5921                           
  5922                           ;RF_Control_B1.c: 75: RF->Run = 1;
  5923  0F0E  0A3D               	incf	_RF^(0+128),w
  5924  0F0F  0086               	movwf	6
  5925  0F10  0187               	clrf	7
  5926  0F11  1501               	bsf	1,2
  5927                           
  5928                           ;RF_Control_B1.c: 76: RF_RxDisable(1);
  5929  0F12  3001               	movlw	1
  5930  0F13  3193  238F         	fcall	_RF_RxDisable
  5931                           
  5932                           ;RF_Control_B1.c: 81: } else {
  5933  0F15  0008               	return
  5934  0F16                     l6618:	
  5935                           
  5936                           ;RF_Control_B1.c: 82: if (RF->Run == 1 && RF->Learn == 0) {
  5937  0F16  0021               	movlb	1	; select bank1
  5938  0F17  0A3D               	incf	_RF^(0+128),w
  5939  0F18  0086               	movwf	6
  5940  0F19  0187               	clrf	7
  5941  0F1A  1D01               	btfss	1,2
  5942  0F1B  2F31               	goto	l6626
  5943  0F1C  083D               	movf	_RF^(0+128),w
  5944  0F1D  0086               	movwf	6
  5945  0F1E  0187               	clrf	7
  5946  0F1F  1B01               	btfsc	1,6
  5947  0F20  2F31               	goto	l6626
  5948                           
  5949                           ;RF_Control_B1.c: 83: RF->Count++;
  5950  0F21  0A3D               	incf	_RF^(0+128),w
  5951  0F22  0086               	movwf	6
  5952  0F23  0187               	clrf	7
  5953  0F24  0C01               	rrf	1,w
  5954  0F25  3901               	andlw	1
  5955  0F26  0020               	movlb	0	; select bank0
  5956  0F27  00E9               	movwf	??_setRF_Main
  5957  0F28  3001               	movlw	1
  5958  0F29  06E9               	xorwf	??_setRF_Main,f
  5959  0F2A  0DE9               	rlf	??_setRF_Main,f
  5960  0F2B  0801               	movf	1,w
  5961  0F2C  0669               	xorwf	??_setRF_Main,w
  5962  0F2D  39FD               	andlw	-3
  5963  0F2E  0669               	xorwf	??_setRF_Main,w
  5964  0F2F  0081               	movwf	1
  5965                           
  5966                           ;RF_Control_B1.c: 84: if (RF->Count == 25) {
  5967  0F30  0008               	return
  5968  0F31                     l6626:	
  5969                           ;RF_Control_B1.c: 87: }
  5970                           ;RF_Control_B1.c: 88: } else {
  5971                           
  5972                           ;RF_Control_B1.c: 85: RF->Count = 0;
  5973                           
  5974                           
  5975                           ;RF_Control_B1.c: 89: RF->Count = 0;
  5976  0F31  0A3D               	incf	_RF^(0+128),w
  5977  0F32  0086               	movwf	6
  5978  0F33  0187               	clrf	7
  5979  0F34  1081               	bcf	1,1
  5980                           
  5981                           ;RF_Control_B1.c: 92: if (RF->ReceiveGO == 1) {
  5982  0F35  083D               	movf	_RF^(0+128),w
  5983  0F36  0086               	movwf	6
  5984  0F37  0187               	clrf	7
  5985  0F38  1C81               	btfss	1,1
  5986  0F39  2F45               	goto	l6634
  5987                           
  5988                           ;RF_Control_B1.c: 93: RF->ReceiveGO = 0;
  5989  0F3A  083D               	movf	_RF^(0+128),w
  5990  0F3B  0086               	movwf	6
  5991  0F3C  0187               	clrf	7
  5992  0F3D  1081               	bcf	1,1
  5993                           
  5994                           ;RF_Control_B1.c: 94: CC2500_RxData();
  5995  0F3E  3188  20EA  318E   	fcall	_CC2500_RxData
  5996                           
  5997                           ;RF_Control_B1.c: 102: getRxData(1);
  5998  0F41  3001               	movlw	1
  5999  0F42  3196  26B0         	fcall	_getRxData
  6000                           
  6001                           ;RF_Control_B1.c: 105: } else {
  6002  0F44  0008               	return
  6003  0F45                     l6634:	
  6004                           
  6005                           ;RF_Control_B1.c: 106: if (RF->TransceiveGO == 1) {
  6006  0F45  0021               	movlb	1	; select bank1
  6007  0F46  083D               	movf	_RF^(0+128),w
  6008  0F47  0086               	movwf	6
  6009  0F48  0187               	clrf	7
  6010  0F49  1D01               	btfss	1,2
  6011  0F4A  2F56               	goto	l6642
  6012                           
  6013                           ;RF_Control_B1.c: 107: RF->TransceiveGO = 0;
  6014  0F4B  083D               	movf	_RF^(0+128),w
  6015  0F4C  0086               	movwf	6
  6016  0F4D  0187               	clrf	7
  6017  0F4E  1101               	bcf	1,2
  6018                           
  6019                           ;RF_Control_B1.c: 108: RF_RxDisable(1);
  6020  0F4F  3001               	movlw	1
  6021  0F50  3193  238F  318E   	fcall	_RF_RxDisable
  6022                           
  6023                           ;RF_Control_B1.c: 109: CC2500_TxData();
  6024  0F53  3195  259C         	fcall	_CC2500_TxData
  6025                           
  6026                           ;RF_Control_B1.c: 111: } else {
  6027  0F55  0008               	return
  6028  0F56                     l6642:	
  6029                           
  6030                           ;RF_Control_B1.c: 113: if (RF->TransceiveGO == 0 && RF->ReceiveGO == 0 && RF->RxStatus =
      +                          = 0) {
  6031  0F56  0021               	movlb	1	; select bank1
  6032  0F57  083D               	movf	_RF^(0+128),w
  6033  0F58  0086               	movwf	6
  6034  0F59  0187               	clrf	7
  6035  0F5A  1901               	btfsc	1,2
  6036  0F5B  0008               	return
  6037  0F5C  083D               	movf	_RF^(0+128),w
  6038  0F5D  0086               	movwf	6
  6039  0F5E  0187               	clrf	7
  6040  0F5F  1881               	btfsc	1,1
  6041  0F60  0008               	return
  6042  0F61  083D               	movf	_RF^(0+128),w
  6043  0F62  0086               	movwf	6
  6044  0F63  0187               	clrf	7
  6045  0F64  1981               	btfsc	1,3
  6046  0F65  0008               	return
  6047                           
  6048                           ;RF_Control_B1.c: 114: CC2500_WriteCommand(0x34);
  6049  0F66  3034               	movlw	52
  6050  0F67  319F  279F  318E   	fcall	_CC2500_WriteCommand
  6051                           
  6052                           ;RF_Control_B1.c: 115: setINT_GO(1);
  6053  0F6A  3001               	movlw	1
  6054  0F6B  319E  26A5         	fcall	_setINT_GO
  6055  0F6D  0008               	return
  6056  0F6E                     __end_of_setRF_Main:	
  6057                           
  6058                           	psect	text20
  6059  16B0                     __ptext20:	
  6060 ;; *************** function _getRxData *****************
  6061 ;; Defined at:
  6062 ;;		line 206 in file "../src/RF_Control_B1.c"
  6063 ;; Parameters:    Size  Location     Type
  6064 ;;  rf              1    wreg     unsigned char 
  6065 ;; Auto vars:     Size  Location     Type
  6066 ;;  rf              1   72[BANK0 ] unsigned char 
  6067 ;;  i               1    0        unsigned char 
  6068 ;; Return value:  Size  Location     Type
  6069 ;;		None               void
  6070 ;; Registers used:
  6071 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6072 ;; Tracked objects:
  6073 ;;		On entry : 0/0
  6074 ;;		On exit  : 0/0
  6075 ;;		Unchanged: 0/0
  6076 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6077 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6078 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6079 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6080 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6081 ;;Total ram usage:        1 bytes
  6082 ;; Hardware stack levels used:    1
  6083 ;; Hardware stack levels required when called:   12
  6084 ;; This function calls:
  6085 ;;		_RfPointSelect
  6086 ;;		_setControl_Lights_Table
  6087 ;;		_setLog_Code
  6088 ;; This function is called by:
  6089 ;;		_setRF_Main
  6090 ;; This function uses a non-reentrant model
  6091 ;;
  6092                           
  6093                           
  6094                           ;psect for function _getRxData
  6095  16B0                     _getRxData:	
  6096                           
  6097                           ;incstack = 0
  6098                           ; Regs used in _getRxData: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6099                           ;getRxData@rf stored from wreg
  6100  16B0  0020               	movlb	0	; select bank0
  6101  16B1  00E8               	movwf	getRxData@rf
  6102                           
  6103                           ;RF_Control_B1.c: 207: unsigned char i;
  6104                           ;RF_Control_B1.c: 208: RfPointSelect(rf);
  6105  16B2  0868               	movf	getRxData@rf,w
  6106  16B3  319E  26F1  3196   	fcall	_RfPointSelect
  6107                           
  6108                           ;RF_Control_B1.c: 209: if (RF->Learn) {
  6109  16B6  0021               	movlb	1	; select bank1
  6110  16B7  083D               	movf	_RF^(0+128),w
  6111  16B8  0086               	movwf	6
  6112  16B9  0187               	clrf	7
  6113  16BA  1F01               	btfss	1,6
  6114  16BB  2EC7               	goto	l6082
  6115                           
  6116                           ;RF_Control_B1.c: 210: if (RF_Data[0] == 0x0 && RF_Data[1] == 0x64)
  6117  16BC  08A0               	movf	_RF_Data^(0+128),f
  6118  16BD  1D03               	skipz
  6119  16BE  0008               	return
  6120  16BF  0821               	movf	(_RF_Data^(0+128)+1),w
  6121  16C0  3A64               	xorlw	100
  6122  16C1  1D03               	skipz
  6123  16C2  0008               	return
  6124                           
  6125                           ;RF_Control_B1.c: 211: {
  6126                           ;RF_Control_B1.c: 212: setLog_Code(1);
  6127  16C3  3001               	movlw	1
  6128  16C4  3187  27B9         	fcall	_setLog_Code
  6129                           
  6130                           ;RF_Control_B1.c: 213: }
  6131                           ;RF_Control_B1.c: 214: } else {
  6132  16C6  0008               	return
  6133  16C7                     l6082:	
  6134                           
  6135                           ;RF_Control_B1.c: 215: if (RF_Data[0] == 0x00 && RF_Data[1] == 0x02)
  6136  16C7  0021               	movlb	1	; select bank1
  6137  16C8  08A0               	movf	_RF_Data^(0+128),f
  6138  16C9  1D03               	skipz
  6139  16CA  0008               	return
  6140  16CB  0821               	movf	(_RF_Data^(0+128)+1),w
  6141  16CC  3A02               	xorlw	2
  6142  16CD  1D03               	skipz
  6143  16CE  0008               	return
  6144                           
  6145                           ;RF_Control_B1.c: 216: {
  6146                           ;RF_Control_B1.c: 217: if (RF_Data[12] == 0xff && RF_Data[13] == 0xff && RF_Data[14] == 
      +                          0xff) {
  6147  16CF  082C               	movf	(_RF_Data^(0+128)+12),w
  6148  16D0  3AFF               	xorlw	255
  6149  16D1  1D03               	skipz
  6150  16D2  2EDD               	goto	l6094
  6151  16D3  082D               	movf	(_RF_Data^(0+128)+13),w
  6152  16D4  3AFF               	xorlw	255
  6153  16D5  1D03               	skipz
  6154  16D6  2EDD               	goto	l6094
  6155  16D7  082E               	movf	(_RF_Data^(0+128)+14),w
  6156  16D8  3AFF               	xorlw	255
  6157  16D9  1D03               	skipz
  6158  16DA  2EDD               	goto	l6094
  6159                           
  6160                           ;RF_Control_B1.c: 218: __nop();
  6161  16DB  0000               	nop
  6162                           
  6163                           ;RF_Control_B1.c: 219: } else {
  6164  16DC  0008               	return
  6165  16DD                     l6094:	
  6166                           
  6167                           ;RF_Control_B1.c: 220: if (RF_Data[12] == product->Data[12] && RF_Data[13] == product->D
      +                          ata[13] && RF_Data[14] == product->Data[14]) {
  6168  16DD  087D               	movf	_product,w
  6169  16DE  3E0C               	addlw	12
  6170  16DF  0086               	movwf	6
  6171  16E0  3001               	movlw	1	; select bank2/3
  6172  16E1  0087               	movwf	7
  6173  16E2  0021               	movlb	1	; select bank1
  6174  16E3  082C               	movf	(_RF_Data^(0+128)+12),w
  6175  16E4  0601               	xorwf	1,w
  6176  16E5  1D03               	skipz
  6177  16E6  0008               	return
  6178  16E7  087D               	movf	_product,w
  6179  16E8  3E0D               	addlw	13
  6180  16E9  0086               	movwf	6
  6181  16EA  3001               	movlw	1	; select bank2/3
  6182  16EB  0087               	movwf	7
  6183  16EC  082D               	movf	(_RF_Data^(0+128)+13),w
  6184  16ED  0601               	xorwf	1,w
  6185  16EE  1D03               	skipz
  6186  16EF  0008               	return
  6187  16F0  087D               	movf	_product,w
  6188  16F1  3E0E               	addlw	14
  6189  16F2  0086               	movwf	6
  6190  16F3  3001               	movlw	1	; select bank2/3
  6191  16F4  0087               	movwf	7
  6192  16F5  082E               	movf	(_RF_Data^(0+128)+14),w
  6193  16F6  0601               	xorwf	1,w
  6194  16F7  1D03               	skipz
  6195  16F8  0008               	return
  6196                           
  6197                           ;RF_Control_B1.c: 221: setControl_Lights_Table(1);
  6198  16F9  3001               	movlw	1
  6199  16FA  318F  276E         	fcall	_setControl_Lights_Table
  6200                           
  6201                           ;RF_Control_B1.c: 228: {
  6202                           ;RF_Control_B1.c: 229: ;
  6203                           
  6204                           ;RF_Control_B1.c: 225: {
  6205                           ;RF_Control_B1.c: 226: ;
  6206                           ;RF_Control_B1.c: 227: } else if (RF_Data[0] == 0x0 && RF_Data[1] == 0x65)
  6207                           
  6208                           ;RF_Control_B1.c: 222: }
  6209                           ;RF_Control_B1.c: 223: }
  6210                           ;RF_Control_B1.c: 224: } else if (RF_Data[0] == 0xff && RF_Data[1] == 0x02)
  6211  16FC  0008               	return
  6212  16FD                     __end_of_getRxData:	
  6213                           
  6214                           	psect	text21
  6215  07B9                     __ptext21:	
  6216 ;; *************** function _setLog_Code *****************
  6217 ;; Defined at:
  6218 ;;		line 239 in file "../src/RF_Control_B1.c"
  6219 ;; Parameters:    Size  Location     Type
  6220 ;;  rf              1    wreg     unsigned char 
  6221 ;; Auto vars:     Size  Location     Type
  6222 ;;  rf              1   14[BANK0 ] unsigned char 
  6223 ;; Return value:  Size  Location     Type
  6224 ;;		None               void
  6225 ;; Registers used:
  6226 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6227 ;; Tracked objects:
  6228 ;;		On entry : 0/0
  6229 ;;		On exit  : 0/0
  6230 ;;		Unchanged: 0/0
  6231 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6232 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6233 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6234 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6235 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6236 ;;Total ram usage:        2 bytes
  6237 ;; Hardware stack levels used:    1
  6238 ;; Hardware stack levels required when called:    7
  6239 ;; This function calls:
  6240 ;;		_RfPointSelect
  6241 ;;		_setBuz
  6242 ;; This function is called by:
  6243 ;;		_getRxData
  6244 ;; This function uses a non-reentrant model
  6245 ;;
  6246                           
  6247                           
  6248                           ;psect for function _setLog_Code
  6249  07B9                     _setLog_Code:	
  6250                           
  6251                           ;incstack = 0
  6252                           ; Regs used in _setLog_Code: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6253                           ;setLog_Code@rf stored from wreg
  6254  07B9  0020               	movlb	0	; select bank0
  6255  07BA  00AE               	movwf	setLog_Code@rf
  6256                           
  6257                           ;RF_Control_B1.c: 240: RfPointSelect(rf);
  6258  07BB  082E               	movf	setLog_Code@rf,w
  6259  07BC  319E  26F1  3187   	fcall	_RfPointSelect
  6260                           
  6261                           ;RF_Control_B1.c: 241: product->Data[12]=RF_Data[12];
  6262  07BF  0021               	movlb	1	; select bank1
  6263  07C0  082C               	movf	(_RF_Data^(0+128)+12),w
  6264  07C1  0020               	movlb	0	; select bank0
  6265  07C2  00AD               	movwf	??_setLog_Code
  6266  07C3  087D               	movf	_product,w
  6267  07C4  3E0C               	addlw	12
  6268  07C5  0086               	movwf	6
  6269  07C6  3001               	movlw	1	; select bank2/3
  6270  07C7  0087               	movwf	7
  6271  07C8  082D               	movf	??_setLog_Code,w
  6272  07C9  0081               	movwf	1
  6273                           
  6274                           ;RF_Control_B1.c: 242: product->Data[13]=RF_Data[13];
  6275  07CA  0021               	movlb	1	; select bank1
  6276  07CB  082D               	movf	(_RF_Data^(0+128)+13),w
  6277  07CC  0020               	movlb	0	; select bank0
  6278  07CD  00AD               	movwf	??_setLog_Code
  6279  07CE  087D               	movf	_product,w
  6280  07CF  3E0D               	addlw	13
  6281  07D0  0086               	movwf	6
  6282  07D1  3001               	movlw	1	; select bank2/3
  6283  07D2  0087               	movwf	7
  6284  07D3  082D               	movf	??_setLog_Code,w
  6285  07D4  0081               	movwf	1
  6286                           
  6287                           ;RF_Control_B1.c: 243: product->Data[14]=RF_Data[14];
  6288  07D5  0021               	movlb	1	; select bank1
  6289  07D6  082E               	movf	(_RF_Data^(0+128)+14),w
  6290  07D7  0020               	movlb	0	; select bank0
  6291  07D8  00AD               	movwf	??_setLog_Code
  6292  07D9  087D               	movf	_product,w
  6293  07DA  3E0E               	addlw	14
  6294  07DB  0086               	movwf	6
  6295  07DC  3001               	movlw	1	; select bank2/3
  6296  07DD  0087               	movwf	7
  6297  07DE  082D               	movf	??_setLog_Code,w
  6298  07DF  0081               	movwf	1
  6299                           
  6300                           ;RF_Control_B1.c: 244: setBuz(1, 100);
  6301  07E0  3064               	movlw	100
  6302  07E1  00A9               	movwf	setBuz@time
  6303  07E2  3000               	movlw	0
  6304  07E3  00AA               	movwf	setBuz@time+1
  6305  07E4  3001               	movlw	1
  6306  07E5  318B  23D8  3187   	fcall	_setBuz
  6307                           
  6308                           ;RF_Control_B1.c: 245: RF->Learn = 0;
  6309  07E8  0021               	movlb	1	; select bank1
  6310  07E9  083D               	movf	_RF^(0+128),w
  6311  07EA  0086               	movwf	6
  6312  07EB  0187               	clrf	7
  6313  07EC  1301               	bcf	1,6
  6314                           
  6315                           ;RF_Control_B1.c: 246: if (myMain->First) {
  6316  07ED  0869               	movf	_myMain^(0+128),w
  6317  07EE  0086               	movwf	6
  6318  07EF  3001               	movlw	1	; select bank2/3
  6319  07F0  0087               	movwf	7
  6320  07F1  1F81               	btfss	1,7
  6321  07F2  2FF9               	goto	l2174
  6322                           
  6323                           ;RF_Control_B1.c: 247: Memory->LoopSave=1;
  6324  07F3  086A               	movf	_Memory^(0+128),w
  6325  07F4  3E24               	addlw	36
  6326  07F5  0086               	movwf	6
  6327  07F6  3002               	movlw	2	; select bank4/5
  6328  07F7  0087               	movwf	7
  6329  07F8  1501               	bsf	1,2
  6330  07F9                     l2174:	
  6331                           
  6332                           ;RF_Control_B1.c: 248: }
  6333                           ;RF_Control_B1.c: 249: Memory->Modify=1;
  6334  07F9  086A               	movf	_Memory^(0+128),w
  6335  07FA  3E24               	addlw	36
  6336  07FB  0086               	movwf	6
  6337  07FC  3002               	movlw	2	; select bank4/5
  6338  07FD  0087               	movwf	7
  6339  07FE  1401               	bsf	1,0
  6340  07FF  0008               	return
  6341  0800                     __end_of_setLog_Code:	
  6342                           
  6343                           	psect	text22
  6344  0F6E                     __ptext22:	
  6345 ;; *************** function _setControl_Lights_Table *****************
  6346 ;; Defined at:
  6347 ;;		line 253 in file "../src/RF_Control_B1.c"
  6348 ;; Parameters:    Size  Location     Type
  6349 ;;  rf              1    wreg     unsigned char 
  6350 ;; Auto vars:     Size  Location     Type
  6351 ;;  rf              1   71[BANK0 ] unsigned char 
  6352 ;; Return value:  Size  Location     Type
  6353 ;;		None               void
  6354 ;; Registers used:
  6355 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6356 ;; Tracked objects:
  6357 ;;		On entry : 0/0
  6358 ;;		On exit  : 0/0
  6359 ;;		Unchanged: 0/0
  6360 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6361 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6362 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6363 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6364 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6365 ;;Total ram usage:        1 bytes
  6366 ;; Hardware stack levels used:    1
  6367 ;; Hardware stack levels required when called:   11
  6368 ;; This function calls:
  6369 ;;		_RfPointSelect
  6370 ;;		_setBuz
  6371 ;;		_setDimmerLights
  6372 ;;		_setRFSW_AdjControl
  6373 ;;		_setRFSW_Control
  6374 ;;		_setRFSW_Status
  6375 ;;		_setSw_Status
  6376 ;;		_setTxData
  6377 ;; This function is called by:
  6378 ;;		_getRxData
  6379 ;; This function uses a non-reentrant model
  6380 ;;
  6381                           
  6382                           
  6383                           ;psect for function _setControl_Lights_Table
  6384  0F6E                     _setControl_Lights_Table:	
  6385                           
  6386                           ;incstack = 0
  6387                           ; Regs used in _setControl_Lights_Table: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6388                           ;setControl_Lights_Table@rf stored from wreg
  6389  0F6E  0020               	movlb	0	; select bank0
  6390  0F6F  00E7               	movwf	setControl_Lights_Table@rf
  6391                           
  6392                           ;RF_Control_B1.c: 254: RfPointSelect(rf);
  6393  0F70  0867               	movf	setControl_Lights_Table@rf,w
  6394  0F71  319E  26F1  318F   	fcall	_RfPointSelect
  6395                           
  6396                           ;RF_Control_B1.c: 255: if (RF_Data[15] == 0x00) {
  6397  0F74  0021               	movlb	1	; select bank1
  6398  0F75  08AF               	movf	(_RF_Data^(0+128)+15),f
  6399  0F76  1D03               	skipz
  6400  0F77  2FC1               	goto	l5844
  6401                           
  6402                           ;RF_Control_B1.c: 257: setDimmerLights(1, 0);
  6403  0F78  0020               	movlb	0	; select bank0
  6404  0F79  01A4               	clrf	setDimmerLights@status
  6405  0F7A  3001               	movlw	1
  6406  0F7B  318C  24C8  318F   	fcall	_setDimmerLights
  6407                           
  6408                           ;RF_Control_B1.c: 258: setRFSW_Status(1, 0);
  6409  0F7E  0020               	movlb	0	; select bank0
  6410  0F7F  01A2               	clrf	setRFSW_Status@command
  6411  0F80  3001               	movlw	1
  6412  0F81  319F  2762  318F   	fcall	_setRFSW_Status
  6413                           
  6414                           ;RF_Control_B1.c: 259: setSw_Status(1, 0);
  6415  0F84  0020               	movlb	0	; select bank0
  6416  0F85  01A2               	clrf	setSw_Status@command
  6417  0F86  3001               	movlw	1
  6418  0F87  319F  2771  318F   	fcall	_setSw_Status
  6419                           
  6420                           ;RF_Control_B1.c: 262: setDimmerLights(2, 0);
  6421  0F8A  0020               	movlb	0	; select bank0
  6422  0F8B  01A4               	clrf	setDimmerLights@status
  6423  0F8C  3002               	movlw	2
  6424  0F8D  318C  24C8  318F   	fcall	_setDimmerLights
  6425                           
  6426                           ;RF_Control_B1.c: 263: setRFSW_Status(2, 0);
  6427  0F90  0020               	movlb	0	; select bank0
  6428  0F91  01A2               	clrf	setRFSW_Status@command
  6429  0F92  3002               	movlw	2
  6430  0F93  319F  2762  318F   	fcall	_setRFSW_Status
  6431                           
  6432                           ;RF_Control_B1.c: 264: setSw_Status(2, 0);
  6433  0F96  0020               	movlb	0	; select bank0
  6434  0F97  01A2               	clrf	setSw_Status@command
  6435  0F98  3002               	movlw	2
  6436  0F99  319F  2771  318F   	fcall	_setSw_Status
  6437                           
  6438                           ;RF_Control_B1.c: 272: product->Data[9]=0;
  6439  0F9C  087D               	movf	_product,w
  6440  0F9D  3E09               	addlw	9
  6441  0F9E  0086               	movwf	6
  6442  0F9F  3001               	movlw	1	; select bank2/3
  6443  0FA0  0087               	movwf	7
  6444  0FA1  0181               	clrf	1
  6445                           
  6446                           ;RF_Control_B1.c: 273: product->Data[11]=0;
  6447  0FA2  087D               	movf	_product,w
  6448  0FA3  3E0B               	addlw	11
  6449  0FA4  0086               	movwf	6
  6450  0FA5  3001               	movlw	1	; select bank2/3
  6451  0FA6  0087               	movwf	7
  6452  0FA7  0181               	clrf	1
  6453                           
  6454                           ;RF_Control_B1.c: 274: product->Data[15]=0;
  6455  0FA8  087D               	movf	_product,w
  6456  0FA9  3E0F               	addlw	15
  6457  0FAA  0086               	movwf	6
  6458  0FAB  3001               	movlw	1	; select bank2/3
  6459  0FAC  0087               	movwf	7
  6460  0FAD  0181               	clrf	1
  6461                           
  6462                           ;RF_Control_B1.c: 275: product->Data[17]=0;
  6463  0FAE  087D               	movf	_product,w
  6464  0FAF  3E11               	addlw	17
  6465  0FB0  0086               	movwf	6
  6466  0FB1  3001               	movlw	1	; select bank2/3
  6467  0FB2  0087               	movwf	7
  6468  0FB3  0181               	clrf	1
  6469                           
  6470                           ;RF_Control_B1.c: 276: setBuz(1, 100);
  6471  0FB4  3064               	movlw	100
  6472  0FB5  0020               	movlb	0	; select bank0
  6473  0FB6  00A9               	movwf	setBuz@time
  6474  0FB7  3000               	movlw	0
  6475  0FB8  00AA               	movwf	setBuz@time+1
  6476  0FB9  3001               	movlw	1
  6477  0FBA  318B  23D8  318F   	fcall	_setBuz
  6478                           
  6479                           ;RF_Control_B1.c: 277: setTxData(1);
  6480  0FBD  3001               	movlw	1
  6481  0FBE  3186  2671         	fcall	_setTxData
  6482                           
  6483                           ;RF_Control_B1.c: 278: } else if (RF_Data[15] == 0x20) {
  6484  0FC0  0008               	return
  6485  0FC1                     l5844:	
  6486  0FC1  0021               	movlb	1	; select bank1
  6487  0FC2  082F               	movf	(_RF_Data^(0+128)+15),w
  6488  0FC3  3A20               	xorlw	32
  6489  0FC4  1D03               	skipz
  6490  0FC5  2FDC               	goto	l5850
  6491                           
  6492                           ;RF_Control_B1.c: 279: product->Data[9]=0;
  6493  0FC6  087D               	movf	_product,w
  6494  0FC7  3E09               	addlw	9
  6495  0FC8  0086               	movwf	6
  6496  0FC9  3001               	movlw	1	; select bank2/3
  6497  0FCA  0087               	movwf	7
  6498  0FCB  0181               	clrf	1
  6499                           
  6500                           ;RF_Control_B1.c: 280: product->Data[11]=0;
  6501  0FCC  087D               	movf	_product,w
  6502  0FCD  3E0B               	addlw	11
  6503  0FCE  0086               	movwf	6
  6504  0FCF  3001               	movlw	1	; select bank2/3
  6505  0FD0  0087               	movwf	7
  6506  0FD1  0181               	clrf	1
  6507                           
  6508                           ;RF_Control_B1.c: 281: product->Data[17]=0;
  6509  0FD2  087D               	movf	_product,w
  6510  0FD3  3E11               	addlw	17
  6511  0FD4  0086               	movwf	6
  6512  0FD5  3001               	movlw	1	; select bank2/3
  6513  0FD6  0087               	movwf	7
  6514  0FD7  0181               	clrf	1
  6515                           
  6516                           ;RF_Control_B1.c: 282: setTxData(1);
  6517  0FD8  3001               	movlw	1
  6518  0FD9  3186  2671         	fcall	_setTxData
  6519                           
  6520                           ;RF_Control_B1.c: 283: }
  6521  0FDB  0008               	return
  6522  0FDC                     l5850:	
  6523                           
  6524                           ;RF_Control_B1.c: 285: else if (RF_Data[15] == 0x01) {
  6525  0FDC  0021               	movlb	1	; select bank1
  6526  0FDD  082F               	movf	(_RF_Data^(0+128)+15),w
  6527  0FDE  3A01               	xorlw	1
  6528  0FDF  1D03               	skipz
  6529  0FE0  2FE5               	goto	l5854
  6530                           
  6531                           ;RF_Control_B1.c: 286: setRFSW_Control(1);
  6532  0FE1  3001               	movlw	1
  6533  0FE2  318E  264E         	fcall	_setRFSW_Control
  6534                           
  6535                           ;RF_Control_B1.c: 287: }
  6536  0FE4  0008               	return
  6537  0FE5                     l5854:	
  6538                           
  6539                           ;RF_Control_B1.c: 289: else if (RF_Data[15] == 0x11) {
  6540  0FE5  0021               	movlb	1	; select bank1
  6541  0FE6  082F               	movf	(_RF_Data^(0+128)+15),w
  6542  0FE7  3A11               	xorlw	17
  6543  0FE8  1D03               	skipz
  6544  0FE9  2FEE               	goto	l5858
  6545                           
  6546                           ;RF_Control_B1.c: 290: setRFSW_AdjControl(1);
  6547  0FEA  3001               	movlw	1
  6548  0FEB  3195  255C         	fcall	_setRFSW_AdjControl
  6549                           
  6550                           ;RF_Control_B1.c: 291: }
  6551  0FED  0008               	return
  6552  0FEE                     l5858:	
  6553                           
  6554                           ;RF_Control_B1.c: 296: else if (RF_Data[15] == 0x02) {
  6555  0FEE  0021               	movlb	1	; select bank1
  6556  0FEF  082F               	movf	(_RF_Data^(0+128)+15),w
  6557  0FF0  3A02               	xorlw	2
  6558  0FF1  1D03               	skipz
  6559  0FF2  2FF7               	goto	l5862
  6560                           
  6561                           ;RF_Control_B1.c: 297: setRFSW_Control(2);
  6562  0FF3  3002               	movlw	2
  6563  0FF4  318E  264E         	fcall	_setRFSW_Control
  6564                           
  6565                           ;RF_Control_B1.c: 298: }
  6566  0FF6  0008               	return
  6567  0FF7                     l5862:	
  6568                           
  6569                           ;RF_Control_B1.c: 300: else if (RF_Data[15] == 0x21) {
  6570  0FF7  0021               	movlb	1	; select bank1
  6571  0FF8  082F               	movf	(_RF_Data^(0+128)+15),w
  6572  0FF9  3A21               	xorlw	33
  6573  0FFA  1D03               	skipz
  6574  0FFB  0008               	return
  6575                           
  6576                           ;RF_Control_B1.c: 301: setRFSW_AdjControl(2);
  6577  0FFC  3002               	movlw	2
  6578  0FFD  3195  255C         	fcall	_setRFSW_AdjControl
  6579  0FFF  0008               	return
  6580  1000                     __end_of_setControl_Lights_Table:	
  6581                           
  6582                           	psect	text23
  6583  0E4E                     __ptext23:	
  6584 ;; *************** function _setRFSW_Control *****************
  6585 ;; Defined at:
  6586 ;;		line 338 in file "../src/RF_Control_B1.c"
  6587 ;; Parameters:    Size  Location     Type
  6588 ;;  sw              1    wreg     unsigned char 
  6589 ;; Auto vars:     Size  Location     Type
  6590 ;;  sw              1   67[BANK0 ] unsigned char 
  6591 ;; Return value:  Size  Location     Type
  6592 ;;		None               void
  6593 ;; Registers used:
  6594 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6595 ;; Tracked objects:
  6596 ;;		On entry : 0/0
  6597 ;;		On exit  : 0/0
  6598 ;;		Unchanged: 0/0
  6599 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6600 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6601 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6602 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6603 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6604 ;;Total ram usage:        2 bytes
  6605 ;; Hardware stack levels used:    1
  6606 ;; Hardware stack levels required when called:    9
  6607 ;; This function calls:
  6608 ;;		_RfSWPointSelect
  6609 ;;		_setBuz
  6610 ;;		_setDelayOff_GO
  6611 ;;		_setDimmerLights_Switch
  6612 ;;		_setDimmerLights_Trigger
  6613 ;;		_setRF_DimmerLights
  6614 ;;		_setSw_Status
  6615 ;;		_setTxData
  6616 ;; This function is called by:
  6617 ;;		_setControl_Lights_Table
  6618 ;; This function uses a non-reentrant model
  6619 ;;
  6620                           
  6621                           
  6622                           ;psect for function _setRFSW_Control
  6623  0E4E                     _setRFSW_Control:	
  6624                           
  6625                           ;incstack = 0
  6626                           ; Regs used in _setRFSW_Control: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6627                           ;setRFSW_Control@sw stored from wreg
  6628  0E4E  0020               	movlb	0	; select bank0
  6629  0E4F  00E3               	movwf	setRFSW_Control@sw
  6630                           
  6631                           ;RF_Control_B1.c: 339: RfSWPointSelect(sw);
  6632  0E50  0863               	movf	setRFSW_Control@sw,w
  6633  0E51  3191  2116  318E   	fcall	_RfSWPointSelect
  6634                           
  6635                           ;RF_Control_B1.c: 340: if (!RFSW->Status) {
  6636  0E54  0021               	movlb	1	; select bank1
  6637  0E55  083E               	movf	_RFSW^(0+128),w
  6638  0E56  0086               	movwf	6
  6639  0E57  0187               	clrf	7
  6640  0E58  1801               	btfsc	1,0
  6641  0E59  2E8F               	goto	l5736
  6642                           
  6643                           ;RF_Control_B1.c: 341: if (RF_Data[16] == 0x80) {
  6644  0E5A  0830               	movf	(_RF_Data^(0+128)+16),w
  6645  0E5B  3A80               	xorlw	128
  6646  0E5C  1D03               	skipz
  6647  0E5D  2E6B               	goto	l5726
  6648                           
  6649                           ;RF_Control_B1.c: 342: setDelayOff_GO(sw, 1, RF_Data[17]);
  6650  0E5E  0020               	movlb	0	; select bank0
  6651  0E5F  01A3               	clrf	setDelayOff_GO@command
  6652  0E60  0AA3               	incf	setDelayOff_GO@command,f
  6653  0E61  0021               	movlb	1	; select bank1
  6654  0E62  0831               	movf	(_RF_Data^(0+128)+17),w
  6655  0E63  0020               	movlb	0	; select bank0
  6656  0E64  00E2               	movwf	??_setRFSW_Control
  6657  0E65  0862               	movf	??_setRFSW_Control,w
  6658  0E66  00A4               	movwf	setDelayOff_GO@value
  6659  0E67  0863               	movf	setRFSW_Control@sw,w
  6660  0E68  3188  202F  318E   	fcall	_setDelayOff_GO
  6661  0E6B                     l5726:	
  6662                           
  6663                           ;RF_Control_B1.c: 343: }
  6664                           ;RF_Control_B1.c: 344: RFSW->Status = 1;
  6665  0E6B  0021               	movlb	1	; select bank1
  6666  0E6C  083E               	movf	_RFSW^(0+128),w
  6667  0E6D  0086               	movwf	6
  6668  0E6E  0187               	clrf	7
  6669  0E6F  1401               	bsf	1,0
  6670                           
  6671                           ;RF_Control_B1.c: 345: setSw_Status(sw, 1);
  6672  0E70  0020               	movlb	0	; select bank0
  6673  0E71  01A2               	clrf	setSw_Status@command
  6674  0E72  0AA2               	incf	setSw_Status@command,f
  6675  0E73  0863               	movf	setRFSW_Control@sw,w
  6676  0E74  319F  2771  318E   	fcall	_setSw_Status
  6677                           
  6678                           ;RF_Control_B1.c: 347: setDimmerLights_Trigger(sw, 1);
  6679  0E77  0020               	movlb	0	; select bank0
  6680  0E78  01A2               	clrf	setDimmerLights_Trigger@command
  6681  0E79  0AA2               	incf	setDimmerLights_Trigger@command,f
  6682  0E7A  0863               	movf	setRFSW_Control@sw,w
  6683  0E7B  319F  27BF  318E   	fcall	_setDimmerLights_Trigger
  6684                           
  6685                           ;RF_Control_B1.c: 348: setDimmerLights_Switch(sw, 1);
  6686  0E7E  0020               	movlb	0	; select bank0
  6687  0E7F  01A2               	clrf	setDimmerLights_Switch@command
  6688  0E80  0AA2               	incf	setDimmerLights_Switch@command,f
  6689  0E81  0863               	movf	setRFSW_Control@sw,w
  6690  0E82  319F  27AF  318E   	fcall	_setDimmerLights_Switch
  6691                           
  6692                           ;RF_Control_B1.c: 350: setRF_DimmerLights(sw, RFSW->Status);
  6693  0E85  0021               	movlb	1	; select bank1
  6694  0E86  083E               	movf	_RFSW^(0+128),w
  6695  0E87  0086               	movwf	6
  6696  0E88  0187               	clrf	7
  6697  0E89  3000               	movlw	0
  6698  0E8A  1801               	btfsc	1,0
  6699  0E8B  3001               	movlw	1
  6700  0E8C  0020               	movlb	0	; select bank0
  6701  0E8D  00DD               	movwf	setRF_DimmerLights@on
  6702  0E8E  2ECD               	goto	L4
  6703  0E8F                     l5736:	
  6704                           ;RF_Control_B1.c: 351: } else {
  6705                           
  6706                           
  6707                           ;RF_Control_B1.c: 352: if (RF_Data[16] == 0x80) {
  6708  0E8F  0021               	movlb	1	; select bank1
  6709  0E90  0830               	movf	(_RF_Data^(0+128)+16),w
  6710  0E91  3A80               	xorlw	128
  6711  0E92  1D03               	skipz
  6712  0E93  2EA5               	goto	l5742
  6713                           
  6714                           ;RF_Control_B1.c: 353: setDelayOff_GO(sw, 1, RF_Data[17]);
  6715  0E94  0020               	movlb	0	; select bank0
  6716  0E95  01A3               	clrf	setDelayOff_GO@command
  6717  0E96  0AA3               	incf	setDelayOff_GO@command,f
  6718  0E97  0021               	movlb	1	; select bank1
  6719  0E98  0831               	movf	(_RF_Data^(0+128)+17),w
  6720  0E99  0020               	movlb	0	; select bank0
  6721  0E9A  00E2               	movwf	??_setRFSW_Control
  6722  0E9B  0862               	movf	??_setRFSW_Control,w
  6723  0E9C  00A4               	movwf	setDelayOff_GO@value
  6724  0E9D  0863               	movf	setRFSW_Control@sw,w
  6725  0E9E  3188  202F  318E   	fcall	_setDelayOff_GO
  6726                           
  6727                           ;RF_Control_B1.c: 354: setRF_DimmerLights(sw, 1);
  6728  0EA1  0020               	movlb	0	; select bank0
  6729  0EA2  01DD               	clrf	setRF_DimmerLights@on
  6730  0EA3  0ADD               	incf	setRF_DimmerLights@on,f
  6731  0EA4  2ECD               	goto	L4
  6732  0EA5                     l5742:	
  6733                           ;RF_Control_B1.c: 355: } else {
  6734                           
  6735                           
  6736                           ;RF_Control_B1.c: 356: RFSW->Status = 0;
  6737  0EA5  0021               	movlb	1	; select bank1
  6738  0EA6  083E               	movf	_RFSW^(0+128),w
  6739  0EA7  0086               	movwf	6
  6740  0EA8  0187               	clrf	7
  6741  0EA9  1001               	bcf	1,0
  6742                           
  6743                           ;RF_Control_B1.c: 357: setSw_Status(sw, 0);
  6744  0EAA  0020               	movlb	0	; select bank0
  6745  0EAB  01A2               	clrf	setSw_Status@command
  6746  0EAC  0863               	movf	setRFSW_Control@sw,w
  6747  0EAD  319F  2771  318E   	fcall	_setSw_Status
  6748                           
  6749                           ;RF_Control_B1.c: 359: setDimmerLights_Trigger(sw, 1);
  6750  0EB0  0020               	movlb	0	; select bank0
  6751  0EB1  01A2               	clrf	setDimmerLights_Trigger@command
  6752  0EB2  0AA2               	incf	setDimmerLights_Trigger@command,f
  6753  0EB3  0863               	movf	setRFSW_Control@sw,w
  6754  0EB4  319F  27BF  318E   	fcall	_setDimmerLights_Trigger
  6755                           
  6756                           ;RF_Control_B1.c: 360: setDimmerLights_Switch(sw, RFSW->Status);
  6757  0EB7  0021               	movlb	1	; select bank1
  6758  0EB8  083E               	movf	_RFSW^(0+128),w
  6759  0EB9  0086               	movwf	6
  6760  0EBA  0187               	clrf	7
  6761  0EBB  3000               	movlw	0
  6762  0EBC  1801               	btfsc	1,0
  6763  0EBD  3001               	movlw	1
  6764  0EBE  0020               	movlb	0	; select bank0
  6765  0EBF  00A2               	movwf	setDimmerLights_Switch@command
  6766  0EC0  0863               	movf	setRFSW_Control@sw,w
  6767  0EC1  319F  27AF  318E   	fcall	_setDimmerLights_Switch
  6768                           
  6769                           ;RF_Control_B1.c: 362: setDelayOff_GO(sw, 0, 0);
  6770  0EC4  0020               	movlb	0	; select bank0
  6771  0EC5  01A3               	clrf	setDelayOff_GO@command
  6772  0EC6  01A4               	clrf	setDelayOff_GO@value
  6773  0EC7  0863               	movf	setRFSW_Control@sw,w
  6774  0EC8  3188  202F  318E   	fcall	_setDelayOff_GO
  6775                           
  6776                           ;RF_Control_B1.c: 363: setRF_DimmerLights(sw, 0);
  6777  0ECB  0020               	movlb	0	; select bank0
  6778  0ECC  01DD               	clrf	setRF_DimmerLights@on
  6779  0ECD                     L4:	
  6780  0ECD  0863               	movf	setRFSW_Control@sw,w
  6781  0ECE  3189  21A9  318E   	fcall	_setRF_DimmerLights
  6782                           
  6783                           ;RF_Control_B1.c: 364: }
  6784                           ;RF_Control_B1.c: 365: }
  6785                           ;RF_Control_B1.c: 366: setBuz(1, 100);
  6786  0ED1  3064               	movlw	100
  6787  0ED2  0020               	movlb	0	; select bank0
  6788  0ED3  00A9               	movwf	setBuz@time
  6789  0ED4  3000               	movlw	0
  6790  0ED5  00AA               	movwf	setBuz@time+1
  6791  0ED6  3001               	movlw	1
  6792  0ED7  318B  23D8  318E   	fcall	_setBuz
  6793                           
  6794                           ;RF_Control_B1.c: 367: setTxData(1);
  6795  0EDA  3001               	movlw	1
  6796  0EDB  3186  2671         	fcall	_setTxData
  6797  0EDD  0008               	return
  6798  0EDE                     __end_of_setRFSW_Control:	
  6799                           
  6800                           	psect	text24
  6801  082F                     __ptext24:	
  6802 ;; *************** function _setDelayOff_GO *****************
  6803 ;; Defined at:
  6804 ;;		line 85 in file "../src/DelayOff_B1.c"
  6805 ;; Parameters:    Size  Location     Type
  6806 ;;  sw              1    wreg     unsigned char 
  6807 ;;  command         1    3[BANK0 ] unsigned char 
  6808 ;;  value           1    4[BANK0 ] unsigned char 
  6809 ;; Auto vars:     Size  Location     Type
  6810 ;;  sw              1    7[BANK0 ] unsigned char 
  6811 ;; Return value:  Size  Location     Type
  6812 ;;		None               void
  6813 ;; Registers used:
  6814 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6815 ;; Tracked objects:
  6816 ;;		On entry : 0/0
  6817 ;;		On exit  : 0/0
  6818 ;;		Unchanged: 0/0
  6819 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6820 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6821 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6822 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6823 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6824 ;;Total ram usage:        5 bytes
  6825 ;; Hardware stack levels used:    1
  6826 ;; Hardware stack levels required when called:    6
  6827 ;; This function calls:
  6828 ;;		_DelayOffPointSelect
  6829 ;;		_DelayTimejudge
  6830 ;; This function is called by:
  6831 ;;		_setRFSW_Control
  6832 ;;		_Sw_DimmerOffFunc
  6833 ;; This function uses a non-reentrant model
  6834 ;;
  6835                           
  6836                           
  6837                           ;psect for function _setDelayOff_GO
  6838  082F                     _setDelayOff_GO:	
  6839                           
  6840                           ;incstack = 0
  6841                           ; Regs used in _setDelayOff_GO: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6842                           ;setDelayOff_GO@sw stored from wreg
  6843  082F  0020               	movlb	0	; select bank0
  6844  0830  00A7               	movwf	setDelayOff_GO@sw
  6845                           
  6846                           ;DelayOff_B1.c: 86: DelayOffPointSelect(sw);
  6847  0831  0827               	movf	setDelayOff_GO@sw,w
  6848  0832  3191  212C  3188   	fcall	_DelayOffPointSelect
  6849                           
  6850                           ;DelayOff_B1.c: 87: if (DelayOff->Enable) {
  6851  0835  0021               	movlb	1	; select bank1
  6852  0836  0838               	movf	_DelayOff^(0+128),w
  6853  0837  0086               	movwf	6
  6854  0838  0187               	clrf	7
  6855  0839  1C01               	btfss	1,0
  6856  083A  0008               	return
  6857                           
  6858                           ;DelayOff_B1.c: 88: DelayOff->GO = command;
  6859  083B  0838               	movf	_DelayOff^(0+128),w
  6860  083C  0086               	movwf	6
  6861  083D  0187               	clrf	7
  6862  083E  0020               	movlb	0	; select bank0
  6863  083F  0823               	movf	setDelayOff_GO@command,w
  6864  0840  1081               	bcf	1,1
  6865  0841  1D03               	skipz
  6866  0842  1481               	bsf	1,1
  6867                           
  6868                           ;DelayOff_B1.c: 89: if (command == 1) {
  6869  0843  0823               	movf	setDelayOff_GO@command,w
  6870  0844  3A01               	xorlw	1
  6871  0845  1D03               	skipz
  6872  0846  2872               	goto	l5572
  6873                           
  6874                           ;DelayOff_B1.c: 90: DelayOff->Value = DelayTimejudge(value);
  6875  0847  0824               	movf	setDelayOff_GO@value,w
  6876  0848  3193  23BA  3188   	fcall	_DelayTimejudge
  6877  084B  0020               	movlb	0	; select bank0
  6878  084C  00A5               	movwf	??_setDelayOff_GO
  6879  084D  0021               	movlb	1	; select bank1
  6880  084E  0A38               	incf	_DelayOff^(0+128),w
  6881  084F  0086               	movwf	6
  6882  0850  0187               	clrf	7
  6883  0851  0020               	movlb	0	; select bank0
  6884  0852  0825               	movf	??_setDelayOff_GO,w
  6885  0853  0081               	movwf	1
  6886                           
  6887                           ;DelayOff_B1.c: 91: if (((value % 16) == 5 || !(value % 16)) && value <= 0x25) {
  6888  0854  300F               	movlw	15
  6889  0855  0524               	andwf	setDelayOff_GO@value,w
  6890  0856  00A5               	movwf	??_setDelayOff_GO
  6891  0857  0825               	movf	??_setDelayOff_GO,w
  6892  0858  3A05               	xorlw	5
  6893  0859  1903               	skipnz
  6894  085A  285F               	goto	l5566
  6895  085B  0824               	movf	setDelayOff_GO@value,w
  6896  085C  390F               	andlw	15
  6897  085D  1D03               	btfss	3,2
  6898  085E  2865               	goto	l5570
  6899  085F                     l5566:	
  6900  085F  3026               	movlw	38
  6901  0860  0224               	subwf	setDelayOff_GO@value,w
  6902  0861  1803               	skipnc
  6903  0862  2865               	goto	l5570
  6904                           
  6905                           ;DelayOff_B1.c: 92: product->Data[26 + sw]=value;
  6906  0863  0824               	movf	setDelayOff_GO@value,w
  6907  0864  2866               	goto	L5
  6908  0865                     l5570:	
  6909                           ;DelayOff_B1.c: 93: } else {
  6910                           
  6911                           
  6912                           ;DelayOff_B1.c: 94: product->Data[26 + sw]=0x05;
  6913  0865  3005               	movlw	5
  6914  0866                     L5:	
  6915  0866  00A5               	movwf	??_setDelayOff_GO
  6916  0867  0827               	movf	setDelayOff_GO@sw,w
  6917  0868  3E1A               	addlw	26
  6918  0869  077D               	addwf	_product,w
  6919  086A  00A6               	movwf	??_setDelayOff_GO+1
  6920  086B  0826               	movf	??_setDelayOff_GO+1,w
  6921  086C  0086               	movwf	6
  6922  086D  3001               	movlw	1	; select bank2/3
  6923  086E  0087               	movwf	7
  6924  086F  0825               	movf	??_setDelayOff_GO,w
  6925  0870  0081               	movwf	1
  6926                           
  6927                           ;DelayOff_B1.c: 95: }
  6928                           ;DelayOff_B1.c: 96: } else if (command == 0) {
  6929  0871  287E               	goto	l5576
  6930  0872                     l5572:	
  6931  0872  08A3               	movf	setDelayOff_GO@command,f
  6932  0873  1D03               	skipz
  6933  0874  287E               	goto	l5576
  6934                           
  6935                           ;DelayOff_B1.c: 97: product->Data[sw + 26]=0;
  6936  0875  0827               	movf	setDelayOff_GO@sw,w
  6937  0876  3E1A               	addlw	26
  6938  0877  077D               	addwf	_product,w
  6939  0878  00A5               	movwf	??_setDelayOff_GO
  6940  0879  0825               	movf	??_setDelayOff_GO,w
  6941  087A  0086               	movwf	6
  6942  087B  3001               	movlw	1	; select bank2/3
  6943  087C  0087               	movwf	7
  6944  087D  0181               	clrf	1
  6945  087E                     l5576:	
  6946                           
  6947                           ;DelayOff_B1.c: 98: }
  6948                           ;DelayOff_B1.c: 99: DelayOff->SecondTime = 0;
  6949  087E  0021               	movlb	1	; select bank1
  6950  087F  0838               	movf	_DelayOff^(0+128),w
  6951  0880  3E02               	addlw	2
  6952  0881  0086               	movwf	6
  6953  0882  0187               	clrf	7
  6954  0883  3000               	movlw	0
  6955  0884  3FC0               	movwi [0]fsr1
  6956  0885  3FC1               	movwi [1]fsr1
  6957                           
  6958                           ;DelayOff_B1.c: 100: DelayOff->MinuteTime = 0;
  6959  0886  0838               	movf	_DelayOff^(0+128),w
  6960  0887  3E04               	addlw	4
  6961  0888  0086               	movwf	6
  6962  0889  0187               	clrf	7
  6963  088A  0181               	clrf	1
  6964  088B  0008               	return
  6965  088C                     __end_of_setDelayOff_GO:	
  6966                           
  6967                           	psect	text25
  6968  13BA                     __ptext25:	
  6969 ;; *************** function _DelayTimejudge *****************
  6970 ;; Defined at:
  6971 ;;		line 105 in file "../src/DelayOff_B1.c"
  6972 ;; Parameters:    Size  Location     Type
  6973 ;;  value           1    wreg     unsigned char 
  6974 ;; Auto vars:     Size  Location     Type
  6975 ;;  value           1    1[BANK0 ] unsigned char 
  6976 ;;  i               1    2[BANK0 ] unsigned char 
  6977 ;; Return value:  Size  Location     Type
  6978 ;;                  1    wreg      unsigned char 
  6979 ;; Registers used:
  6980 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  6981 ;; Tracked objects:
  6982 ;;		On entry : 0/0
  6983 ;;		On exit  : 0/0
  6984 ;;		Unchanged: 0/0
  6985 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6986 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6987 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6988 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6989 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6990 ;;Total ram usage:        3 bytes
  6991 ;; Hardware stack levels used:    1
  6992 ;; Hardware stack levels required when called:    5
  6993 ;; This function calls:
  6994 ;;		Nothing
  6995 ;; This function is called by:
  6996 ;;		_setDelayOff_GO
  6997 ;; This function uses a non-reentrant model
  6998 ;;
  6999                           
  7000                           
  7001                           ;psect for function _DelayTimejudge
  7002  13BA                     _DelayTimejudge:	
  7003                           
  7004                           ;incstack = 0
  7005                           ; Regs used in _DelayTimejudge: [wreg-fsr0h+status,2+status,0]
  7006                           ;DelayTimejudge@value stored from wreg
  7007  13BA  0020               	movlb	0	; select bank0
  7008  13BB  00A1               	movwf	DelayTimejudge@value
  7009                           
  7010                           ;DelayOff_B1.c: 106: char i = 5;
  7011  13BC  3005               	movlw	5
  7012  13BD  00A0               	movwf	??_DelayTimejudge
  7013  13BE  0820               	movf	??_DelayTimejudge,w
  7014  13BF  00A2               	movwf	DelayTimejudge@i
  7015                           
  7016                           ;DelayOff_B1.c: 107: switch (value) {
  7017  13C0  2BD0               	goto	l5400
  7018  13C1                     l5386:	
  7019                           ;DelayOff_B1.c: 108: case 0x05:
  7020                           
  7021                           
  7022                           ;DelayOff_B1.c: 109: i = 5;
  7023  13C1  3005               	movlw	5
  7024  13C2  2BCC               	goto	L10
  7025  13C3                     l5388:	
  7026                           ;DelayOff_B1.c: 111: case 0x10:
  7027                           
  7028                           ;DelayOff_B1.c: 110: break;
  7029                           
  7030                           
  7031                           ;DelayOff_B1.c: 112: i = 10;
  7032  13C3  300A               	movlw	10
  7033  13C4  2BCC               	goto	L10
  7034  13C5                     l5390:	
  7035                           ;DelayOff_B1.c: 114: case 0x15:
  7036                           
  7037                           ;DelayOff_B1.c: 113: break;
  7038                           
  7039                           
  7040                           ;DelayOff_B1.c: 115: i = 15;
  7041  13C5  300F               	movlw	15
  7042  13C6  2BCC               	goto	L10
  7043  13C7                     l5392:	
  7044                           ;DelayOff_B1.c: 117: case 0x20:
  7045                           
  7046                           ;DelayOff_B1.c: 116: break;
  7047                           
  7048                           
  7049                           ;DelayOff_B1.c: 118: i = 20;
  7050  13C7  3014               	movlw	20
  7051  13C8  2BCC               	goto	L10
  7052  13C9                     l5394:	
  7053                           ;DelayOff_B1.c: 120: case 0x25:
  7054                           
  7055                           ;DelayOff_B1.c: 119: break;
  7056                           
  7057                           
  7058                           ;DelayOff_B1.c: 121: i = 25;
  7059  13C9  3019               	movlw	25
  7060  13CA  2BCC               	goto	L10
  7061  13CB                     l5396:	
  7062                           ;DelayOff_B1.c: 123: case 0x30:
  7063                           
  7064                           ;DelayOff_B1.c: 122: break;
  7065                           
  7066                           
  7067                           ;DelayOff_B1.c: 124: i = 30;
  7068  13CB  301E               	movlw	30
  7069  13CC                     L10:	
  7070  13CC  00A0               	movwf	??_DelayTimejudge
  7071  13CD  0820               	movf	??_DelayTimejudge,w
  7072  13CE  00A2               	movwf	DelayTimejudge@i
  7073                           
  7074                           ;DelayOff_B1.c: 126: }
  7075                           
  7076                           ;DelayOff_B1.c: 125: break;
  7077  13CF  2BE4               	goto	l5402
  7078  13D0                     l5400:	
  7079  13D0  0821               	movf	DelayTimejudge@value,w
  7080                           
  7081                           ; Switch size 1, requested type "space"
  7082                           ; Number of cases is 6, Range of values is 5 to 48
  7083                           ; switch strategies available:
  7084                           ; Name         Instructions Cycles
  7085                           ; simple_byte           19    10 (average)
  7086                           ; direct_byte           97     9 (fixed)
  7087                           ; jumptable            263     9 (fixed)
  7088                           ;	Chosen strategy is simple_byte
  7089  13D1  3A05               	xorlw	5	; case 5
  7090  13D2  1903               	skipnz
  7091  13D3  2BC1               	goto	l5386
  7092  13D4  3A15               	xorlw	21	; case 16
  7093  13D5  1903               	skipnz
  7094  13D6  2BC3               	goto	l5388
  7095  13D7  3A05               	xorlw	5	; case 21
  7096  13D8  1903               	skipnz
  7097  13D9  2BC5               	goto	l5390
  7098  13DA  3A35               	xorlw	53	; case 32
  7099  13DB  1903               	skipnz
  7100  13DC  2BC7               	goto	l5392
  7101  13DD  3A05               	xorlw	5	; case 37
  7102  13DE  1903               	skipnz
  7103  13DF  2BC9               	goto	l5394
  7104  13E0  3A15               	xorlw	21	; case 48
  7105  13E1  1903               	skipnz
  7106  13E2  2BCB               	goto	l5396
  7107  13E3  2BE4               	goto	l5402
  7108  13E4                     l5402:	
  7109                           
  7110                           ;DelayOff_B1.c: 127: return i;
  7111  13E4  0822               	movf	DelayTimejudge@i,w
  7112  13E5  0008               	return
  7113  13E6                     __end_of_DelayTimejudge:	
  7114                           
  7115                           	psect	text26
  7116  155C                     __ptext26:	
  7117 ;; *************** function _setRFSW_AdjControl *****************
  7118 ;; Defined at:
  7119 ;;		line 371 in file "../src/RF_Control_B1.c"
  7120 ;; Parameters:    Size  Location     Type
  7121 ;;  sw              1    wreg     unsigned char 
  7122 ;; Auto vars:     Size  Location     Type
  7123 ;;  sw              1   70[BANK0 ] unsigned char 
  7124 ;; Return value:  Size  Location     Type
  7125 ;;		None               void
  7126 ;; Registers used:
  7127 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7128 ;; Tracked objects:
  7129 ;;		On entry : 0/0
  7130 ;;		On exit  : 0/0
  7131 ;;		Unchanged: 0/0
  7132 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7133 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7134 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7135 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7136 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7137 ;;Total ram usage:        3 bytes
  7138 ;; Hardware stack levels used:    1
  7139 ;; Hardware stack levels required when called:   10
  7140 ;; This function calls:
  7141 ;;		_RfSWPointSelect
  7142 ;;		_setRF_DimmerValue
  7143 ;;		_setTxData
  7144 ;; This function is called by:
  7145 ;;		_setControl_Lights_Table
  7146 ;; This function uses a non-reentrant model
  7147 ;;
  7148                           
  7149                           
  7150                           ;psect for function _setRFSW_AdjControl
  7151  155C                     _setRFSW_AdjControl:	
  7152                           
  7153                           ;incstack = 0
  7154                           ; Regs used in _setRFSW_AdjControl: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7155                           ;setRFSW_AdjControl@sw stored from wreg
  7156  155C  0020               	movlb	0	; select bank0
  7157  155D  00E6               	movwf	setRFSW_AdjControl@sw
  7158                           
  7159                           ;RF_Control_B1.c: 372: RfSWPointSelect(sw);
  7160  155E  0866               	movf	setRFSW_AdjControl@sw,w
  7161  155F  3191  2116  3195   	fcall	_RfSWPointSelect
  7162                           
  7163                           ;RF_Control_B1.c: 373: if (RFSW->Status) {
  7164  1562  0021               	movlb	1	; select bank1
  7165  1563  083E               	movf	_RFSW^(0+128),w
  7166  1564  0086               	movwf	6
  7167  1565  0187               	clrf	7
  7168  1566  1C01               	btfss	1,0
  7169  1567  2D74               	goto	l5766
  7170                           
  7171                           ;RF_Control_B1.c: 374: Memory->Modify=1;
  7172  1568  086A               	movf	_Memory^(0+128),w
  7173  1569  3E24               	addlw	36
  7174  156A  0086               	movwf	6
  7175  156B  3002               	movlw	2	; select bank4/5
  7176  156C  0087               	movwf	7
  7177  156D  1401               	bsf	1,0
  7178                           
  7179                           ;RF_Control_B1.c: 375: setRF_DimmerValue(sw);
  7180  156E  0020               	movlb	0	; select bank0
  7181  156F  0866               	movf	setRFSW_AdjControl@sw,w
  7182  1570  3194  24A9  3195   	fcall	_setRF_DimmerValue
  7183                           
  7184                           ;RF_Control_B1.c: 376: } else {
  7185  1573  2D86               	goto	l2206
  7186  1574                     l5766:	
  7187                           
  7188                           ;RF_Control_B1.c: 377: product->Data[9]=product->Data[20 + sw];
  7189  1574  0020               	movlb	0	; select bank0
  7190  1575  0866               	movf	setRFSW_AdjControl@sw,w
  7191  1576  3E14               	addlw	20
  7192  1577  077D               	addwf	_product,w
  7193  1578  00E4               	movwf	??_setRFSW_AdjControl
  7194  1579  0864               	movf	??_setRFSW_AdjControl,w
  7195  157A  0086               	movwf	6
  7196  157B  3001               	movlw	1	; select bank2/3
  7197  157C  0087               	movwf	7
  7198  157D  0801               	movf	1,w
  7199  157E  00E5               	movwf	??_setRFSW_AdjControl+1
  7200  157F  087D               	movf	_product,w
  7201  1580  3E09               	addlw	9
  7202  1581  0086               	movwf	6
  7203  1582  3001               	movlw	1	; select bank2/3
  7204  1583  0087               	movwf	7
  7205  1584  0865               	movf	??_setRFSW_AdjControl+1,w
  7206  1585  0081               	movwf	1
  7207  1586                     l2206:	
  7208                           
  7209                           ;RF_Control_B1.c: 378: }
  7210                           ;RF_Control_B1.c: 379: product->Data[17]=product->Data[26 + sw];
  7211  1586  0020               	movlb	0	; select bank0
  7212  1587  0866               	movf	setRFSW_AdjControl@sw,w
  7213  1588  3E1A               	addlw	26
  7214  1589  077D               	addwf	_product,w
  7215  158A  00E4               	movwf	??_setRFSW_AdjControl
  7216  158B  0864               	movf	??_setRFSW_AdjControl,w
  7217  158C  0086               	movwf	6
  7218  158D  3001               	movlw	1	; select bank2/3
  7219  158E  0087               	movwf	7
  7220  158F  0801               	movf	1,w
  7221  1590  00E5               	movwf	??_setRFSW_AdjControl+1
  7222  1591  087D               	movf	_product,w
  7223  1592  3E11               	addlw	17
  7224  1593  0086               	movwf	6
  7225  1594  3001               	movlw	1	; select bank2/3
  7226  1595  0087               	movwf	7
  7227  1596  0865               	movf	??_setRFSW_AdjControl+1,w
  7228  1597  0081               	movwf	1
  7229                           
  7230                           ;RF_Control_B1.c: 380: setTxData(1);
  7231  1598  3001               	movlw	1
  7232  1599  3186  2671         	fcall	_setTxData
  7233  159B  0008               	return
  7234  159C                     __end_of_setRFSW_AdjControl:	
  7235                           
  7236                           	psect	text27
  7237  14A9                     __ptext27:	
  7238 ;; *************** function _setRF_DimmerValue *****************
  7239 ;; Defined at:
  7240 ;;		line 391 in file "../src/RF_Control_B1.c"
  7241 ;; Parameters:    Size  Location     Type
  7242 ;;  lights          1    wreg     unsigned char 
  7243 ;; Auto vars:     Size  Location     Type
  7244 ;;  lights          1   67[BANK0 ] unsigned char 
  7245 ;; Return value:  Size  Location     Type
  7246 ;;		None               void
  7247 ;; Registers used:
  7248 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7249 ;; Tracked objects:
  7250 ;;		On entry : 0/0
  7251 ;;		On exit  : 0/0
  7252 ;;		Unchanged: 0/0
  7253 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7254 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7255 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7256 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7257 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7258 ;;Total ram usage:        3 bytes
  7259 ;; Hardware stack levels used:    1
  7260 ;; Hardware stack levels required when called:    9
  7261 ;; This function calls:
  7262 ;;		_setDimmerLights_AdjRF
  7263 ;; This function is called by:
  7264 ;;		_setRFSW_AdjControl
  7265 ;; This function uses a non-reentrant model
  7266 ;;
  7267                           
  7268                           
  7269                           ;psect for function _setRF_DimmerValue
  7270  14A9                     _setRF_DimmerValue:	
  7271                           
  7272                           ;incstack = 0
  7273                           ; Regs used in _setRF_DimmerValue: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7274                           ;setRF_DimmerValue@lights stored from wreg
  7275  14A9  0020               	movlb	0	; select bank0
  7276  14AA  00E3               	movwf	setRF_DimmerValue@lights
  7277                           
  7278                           ;RF_Control_B1.c: 392: if (RF_Data[9] > 0x64) {
  7279  14AB  3065               	movlw	101
  7280  14AC  0021               	movlb	1	; select bank1
  7281  14AD  0229               	subwf	(_RF_Data^(0+128)+9),w
  7282  14AE  1C03               	skipc
  7283  14AF  2CB6               	goto	l5646
  7284                           
  7285                           ;RF_Control_B1.c: 393: RF_Data[9] = 0x64;
  7286  14B0  3064               	movlw	100
  7287  14B1  0020               	movlb	0	; select bank0
  7288  14B2  00E1               	movwf	??_setRF_DimmerValue
  7289  14B3  0861               	movf	??_setRF_DimmerValue,w
  7290  14B4  0021               	movlb	1	; select bank1
  7291  14B5  00A9               	movwf	(_RF_Data^(0+128)+9)
  7292  14B6                     l5646:	
  7293                           
  7294                           ;RF_Control_B1.c: 394: }
  7295                           ;RF_Control_B1.c: 395: product->Data[9]=RF_Data[9];
  7296  14B6  0829               	movf	(_RF_Data^(0+128)+9),w
  7297  14B7  0020               	movlb	0	; select bank0
  7298  14B8  00E1               	movwf	??_setRF_DimmerValue
  7299  14B9  087D               	movf	_product,w
  7300  14BA  3E09               	addlw	9
  7301  14BB  0086               	movwf	6
  7302  14BC  3001               	movlw	1	; select bank2/3
  7303  14BD  0087               	movwf	7
  7304  14BE  0861               	movf	??_setRF_DimmerValue,w
  7305  14BF  0081               	movwf	1
  7306                           
  7307                           ;RF_Control_B1.c: 396: product->Data[11]=lights;
  7308  14C0  0863               	movf	setRF_DimmerValue@lights,w
  7309  14C1  00E1               	movwf	??_setRF_DimmerValue
  7310  14C2  087D               	movf	_product,w
  7311  14C3  3E0B               	addlw	11
  7312  14C4  0086               	movwf	6
  7313  14C5  3001               	movlw	1	; select bank2/3
  7314  14C6  0087               	movwf	7
  7315  14C7  0861               	movf	??_setRF_DimmerValue,w
  7316  14C8  0081               	movwf	1
  7317                           
  7318                           ;RF_Control_B1.c: 397: product->Data[(20 + lights)]=product->Data[9];
  7319  14C9  087D               	movf	_product,w
  7320  14CA  3E09               	addlw	9
  7321  14CB  0086               	movwf	6
  7322  14CC  3001               	movlw	1	; select bank2/3
  7323  14CD  0087               	movwf	7
  7324  14CE  0801               	movf	1,w
  7325  14CF  00E1               	movwf	??_setRF_DimmerValue
  7326  14D0  0863               	movf	setRF_DimmerValue@lights,w
  7327  14D1  3E14               	addlw	20
  7328  14D2  077D               	addwf	_product,w
  7329  14D3  00E2               	movwf	??_setRF_DimmerValue+1
  7330  14D4  0862               	movf	??_setRF_DimmerValue+1,w
  7331  14D5  0086               	movwf	6
  7332  14D6  3001               	movlw	1	; select bank2/3
  7333  14D7  0087               	movwf	7
  7334  14D8  0861               	movf	??_setRF_DimmerValue,w
  7335  14D9  0081               	movwf	1
  7336                           
  7337                           ;RF_Control_B1.c: 398: setDimmerLights_AdjRF(lights);
  7338  14DA  0863               	movf	setRF_DimmerValue@lights,w
  7339  14DB  3193  231D         	fcall	_setDimmerLights_AdjRF
  7340  14DD  0008               	return
  7341  14DE                     __end_of_setRF_DimmerValue:	
  7342                           
  7343                           	psect	text28
  7344  131D                     __ptext28:	
  7345 ;; *************** function _setDimmerLights_AdjRF *****************
  7346 ;; Defined at:
  7347 ;;		line 661 in file "../src/Dimmer_B1.c"
  7348 ;; Parameters:    Size  Location     Type
  7349 ;;  lights          1    wreg     unsigned char 
  7350 ;; Auto vars:     Size  Location     Type
  7351 ;;  lights          1   64[BANK0 ] unsigned char 
  7352 ;; Return value:  Size  Location     Type
  7353 ;;		None               void
  7354 ;; Registers used:
  7355 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7356 ;; Tracked objects:
  7357 ;;		On entry : 0/0
  7358 ;;		On exit  : 0/0
  7359 ;;		Unchanged: 0/0
  7360 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7361 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7362 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7363 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7364 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7365 ;;Total ram usage:        2 bytes
  7366 ;; Hardware stack levels used:    1
  7367 ;; Hardware stack levels required when called:    8
  7368 ;; This function calls:
  7369 ;;		_DimmerLightsPointSelect
  7370 ;;		_getPercentValue
  7371 ;; This function is called by:
  7372 ;;		_setRF_DimmerValue
  7373 ;; This function uses a non-reentrant model
  7374 ;;
  7375                           
  7376                           
  7377                           ;psect for function _setDimmerLights_AdjRF
  7378  131D                     _setDimmerLights_AdjRF:	
  7379                           
  7380                           ;incstack = 0
  7381                           ; Regs used in _setDimmerLights_AdjRF: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  7382                           ;setDimmerLights_AdjRF@lights stored from wreg
  7383  131D  0020               	movlb	0	; select bank0
  7384  131E  00E0               	movwf	setDimmerLights_AdjRF@lights
  7385                           
  7386                           ;Dimmer_B1.c: 662: DimmerLightsPointSelect(lights);
  7387  131F  0860               	movf	setDimmerLights_AdjRF@lights,w
  7388  1320  3190  20B2  3193   	fcall	_DimmerLightsPointSelect
  7389                           
  7390                           ;Dimmer_B1.c: 663: DimmerLights->AdjRF = 1;
  7391  1323  0879               	movf	_DimmerLights,w
  7392  1324  0086               	movwf	6
  7393  1325  3001               	movlw	1	; select bank2/3
  7394  1326  0087               	movwf	7
  7395  1327  1501               	bsf	1,2
  7396                           
  7397                           ;Dimmer_B1.c: 664: DimmerLights->Signal = 1;
  7398  1328  0879               	movf	_DimmerLights,w
  7399  1329  0086               	movwf	6
  7400  132A  3001               	movlw	1	; select bank2/3
  7401  132B  0087               	movwf	7
  7402  132C  1481               	bsf	1,1
  7403                           
  7404                           ;Dimmer_B1.c: 665: DimmerLights->MaxmumValue = getPercentValue(product->Data[9]);
  7405  132D  087D               	movf	_product,w
  7406  132E  3E09               	addlw	9
  7407  132F  0086               	movwf	6
  7408  1330  3001               	movlw	1	; select bank2/3
  7409  1331  0087               	movwf	7
  7410  1332  0801               	movf	1,w
  7411  1333  3197  27A5         	fcall	_getPercentValue
  7412  1335  0020               	movlb	0	; select bank0
  7413  1336  00DF               	movwf	??_setDimmerLights_AdjRF
  7414  1337  0879               	movf	_DimmerLights,w
  7415  1338  3E05               	addlw	5
  7416  1339  0086               	movwf	6
  7417  133A  3001               	movlw	1	; select bank2/3
  7418  133B  0087               	movwf	7
  7419  133C  085F               	movf	??_setDimmerLights_AdjRF,w
  7420  133D  0081               	movwf	1
  7421  133E  0008               	return
  7422  133F                     __end_of_setDimmerLights_AdjRF:	
  7423                           
  7424                           	psect	text29
  7425  17A5                     __ptext29:	
  7426 ;; *************** function _getPercentValue *****************
  7427 ;; Defined at:
  7428 ;;		line 727 in file "../src/Dimmer_B1.c"
  7429 ;; Parameters:    Size  Location     Type
  7430 ;;  value           1    wreg     unsigned char 
  7431 ;; Auto vars:     Size  Location     Type
  7432 ;;  value           1   59[BANK0 ] unsigned char 
  7433 ;;  i               3   60[BANK0 ] float 
  7434 ;; Return value:  Size  Location     Type
  7435 ;;                  1    wreg      unsigned char 
  7436 ;; Registers used:
  7437 ;;		wreg, status,2, status,0, pclath, cstack
  7438 ;; Tracked objects:
  7439 ;;		On entry : 0/0
  7440 ;;		On exit  : 0/0
  7441 ;;		Unchanged: 0/0
  7442 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7443 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7444 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7445 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7446 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7447 ;;Total ram usage:        6 bytes
  7448 ;; Hardware stack levels used:    1
  7449 ;; Hardware stack levels required when called:    7
  7450 ;; This function calls:
  7451 ;;		___awtoft
  7452 ;;		___ftadd
  7453 ;;		___ftdiv
  7454 ;;		___ftmul
  7455 ;;		___fttol
  7456 ;; This function is called by:
  7457 ;;		_setDimmerLights_AdjRF
  7458 ;; This function uses a non-reentrant model
  7459 ;;
  7460                           
  7461                           
  7462                           ;psect for function _getPercentValue
  7463  17A5                     _getPercentValue:	
  7464                           
  7465                           ;incstack = 0
  7466                           ; Regs used in _getPercentValue: [wreg+status,2+status,0+pclath+cstack]
  7467                           ;getPercentValue@value stored from wreg
  7468  17A5  0020               	movlb	0	; select bank0
  7469  17A6  00DB               	movwf	getPercentValue@value
  7470                           
  7471                           ;Dimmer_B1.c: 729: float i = ((char)((100-20)*1.5)) - ((char)((100-55)*1.5));
  7472  17A7  3000               	movlw	0
  7473  17A8  00DC               	movwf	getPercentValue@i
  7474  17A9  3054               	movlw	84
  7475  17AA  00DD               	movwf	getPercentValue@i+1
  7476  17AB  3042               	movlw	66
  7477  17AC  00DE               	movwf	getPercentValue@i+2
  7478                           
  7479                           ;Dimmer_B1.c: 730: i /= 100;
  7480  17AD  3000               	movlw	0
  7481  17AE  00AE               	movwf	___ftdiv@f2
  7482  17AF  30C8               	movlw	200
  7483  17B0  00AF               	movwf	___ftdiv@f2+1
  7484  17B1  3042               	movlw	66
  7485  17B2  00B0               	movwf	___ftdiv@f2+2
  7486  17B3  085C               	movf	getPercentValue@i,w
  7487  17B4  00B1               	movwf	___ftdiv@f1
  7488  17B5  085D               	movf	getPercentValue@i+1,w
  7489  17B6  00B2               	movwf	___ftdiv@f1+1
  7490  17B7  085E               	movf	getPercentValue@i+2,w
  7491  17B8  00B3               	movwf	___ftdiv@f1+2
  7492  17B9  3185  25C8  3197   	fcall	___ftdiv
  7493  17BC  0020               	movlb	0	; select bank0
  7494  17BD  082E               	movf	?___ftdiv,w
  7495  17BE  00DC               	movwf	getPercentValue@i
  7496  17BF  082F               	movf	?___ftdiv+1,w
  7497  17C0  00DD               	movwf	getPercentValue@i+1
  7498  17C1  0830               	movf	?___ftdiv+2,w
  7499  17C2  00DE               	movwf	getPercentValue@i+2
  7500                           
  7501                           ;Dimmer_B1.c: 731: return (char) (((100 - value) * i) + ((char)((100-55)*1.5)));
  7502  17C3  085B               	movf	getPercentValue@value,w
  7503  17C4  00D9               	movwf	??_getPercentValue
  7504  17C5  01DA               	clrf	??_getPercentValue+1
  7505  17C6  09D9               	comf	??_getPercentValue,f
  7506  17C7  09DA               	comf	??_getPercentValue+1,f
  7507  17C8  0AD9               	incf	??_getPercentValue,f
  7508  17C9  1903               	skipnz
  7509  17CA  0ADA               	incf	??_getPercentValue+1,f
  7510  17CB  0859               	movf	??_getPercentValue,w
  7511  17CC  3E64               	addlw	100
  7512  17CD  00A8               	movwf	___awtoft@c
  7513  17CE  3000               	movlw	0
  7514  17CF  3D5A               	addwfc	??_getPercentValue+1,w
  7515  17D0  00A9               	movwf	___awtoft@c+1
  7516  17D1  3192  22D9  3197   	fcall	___awtoft
  7517  17D4  0020               	movlb	0	; select bank0
  7518  17D5  0828               	movf	?___awtoft,w
  7519  17D6  00B1               	movwf	___ftmul@f2
  7520  17D7  0829               	movf	?___awtoft+1,w
  7521  17D8  00B2               	movwf	___ftmul@f2+1
  7522  17D9  082A               	movf	?___awtoft+2,w
  7523  17DA  00B3               	movwf	___ftmul@f2+2
  7524  17DB  085C               	movf	getPercentValue@i,w
  7525  17DC  00AE               	movwf	___ftmul@f1
  7526  17DD  085D               	movf	getPercentValue@i+1,w
  7527  17DE  00AF               	movwf	___ftmul@f1+1
  7528  17DF  085E               	movf	getPercentValue@i+2,w
  7529  17E0  00B0               	movwf	___ftmul@f1+2
  7530  17E1  3185  2514  3197   	fcall	___ftmul
  7531  17E4  0020               	movlb	0	; select bank0
  7532  17E5  082E               	movf	?___ftmul,w
  7533  17E6  00C1               	movwf	___ftadd@f2
  7534  17E7  082F               	movf	?___ftmul+1,w
  7535  17E8  00C2               	movwf	___ftadd@f2+1
  7536  17E9  0830               	movf	?___ftmul+2,w
  7537  17EA  00C3               	movwf	___ftadd@f2+2
  7538  17EB  3000               	movlw	0
  7539  17EC  00BE               	movwf	___ftadd@f1
  7540  17ED  3086               	movlw	134
  7541  17EE  00BF               	movwf	___ftadd@f1+1
  7542  17EF  3042               	movlw	66
  7543  17F0  00C0               	movwf	___ftadd@f1+2
  7544  17F1  3183  2328  3197   	fcall	___ftadd
  7545  17F4  0020               	movlb	0	; select bank0
  7546  17F5  083E               	movf	?___ftadd,w
  7547  17F6  00CB               	movwf	___fttol@f1
  7548  17F7  083F               	movf	?___ftadd+1,w
  7549  17F8  00CC               	movwf	___fttol@f1+1
  7550  17F9  0840               	movf	?___ftadd+2,w
  7551  17FA  00CD               	movwf	___fttol@f1+2
  7552  17FB  318D  25C7         	fcall	___fttol
  7553  17FD  0020               	movlb	0	; select bank0
  7554  17FE  084B               	movf	?___fttol,w
  7555  17FF  0008               	return
  7556  1800                     __end_of_getPercentValue:	
  7557                           
  7558                           	psect	text30
  7559  0514                     __ptext30:	
  7560 ;; *************** function ___ftmul *****************
  7561 ;; Defined at:
  7562 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftmul.c"
  7563 ;; Parameters:    Size  Location     Type
  7564 ;;  f1              3   14[BANK0 ] float 
  7565 ;;  f2              3   17[BANK0 ] float 
  7566 ;; Auto vars:     Size  Location     Type
  7567 ;;  f3_as_produc    3   25[BANK0 ] unsigned um
  7568 ;;  sign            1   29[BANK0 ] unsigned char 
  7569 ;;  cntr            1   28[BANK0 ] unsigned char 
  7570 ;;  exp             1   24[BANK0 ] unsigned char 
  7571 ;; Return value:  Size  Location     Type
  7572 ;;                  3   14[BANK0 ] float 
  7573 ;; Registers used:
  7574 ;;		wreg, status,2, status,0, pclath, cstack
  7575 ;; Tracked objects:
  7576 ;;		On entry : 0/0
  7577 ;;		On exit  : 0/0
  7578 ;;		Unchanged: 0/0
  7579 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7580 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7581 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7582 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7583 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7584 ;;Total ram usage:       16 bytes
  7585 ;; Hardware stack levels used:    1
  7586 ;; Hardware stack levels required when called:    6
  7587 ;; This function calls:
  7588 ;;		___ftpack
  7589 ;; This function is called by:
  7590 ;;		_getPercentValue
  7591 ;; This function uses a non-reentrant model
  7592 ;;
  7593                           
  7594                           
  7595                           ;psect for function ___ftmul
  7596  0514                     ___ftmul:	
  7597                           
  7598                           ;incstack = 0
  7599                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  7600  0514  0020               	movlb	0	; select bank0
  7601  0515  082E               	movf	___ftmul@f1,w
  7602  0516  00B4               	movwf	??___ftmul
  7603  0517  082F               	movf	___ftmul@f1+1,w
  7604  0518  00B5               	movwf	??___ftmul+1
  7605  0519  0830               	movf	___ftmul@f1+2,w
  7606  051A  00B6               	movwf	??___ftmul+2
  7607  051B  1003               	clrc
  7608  051C  0D35               	rlf	??___ftmul+1,w
  7609  051D  0D36               	rlf	??___ftmul+2,w
  7610  051E  00B7               	movwf	??___ftmul+3
  7611  051F  0837               	movf	??___ftmul+3,w
  7612  0520  00B8               	movwf	___ftmul@exp
  7613  0521  08B8               	movf	___ftmul@exp,f
  7614  0522  1D03               	skipz
  7615  0523  2D2B               	goto	l5274
  7616  0524  3000               	movlw	0
  7617  0525  00AE               	movwf	?___ftmul
  7618  0526  3000               	movlw	0
  7619  0527  00AF               	movwf	?___ftmul+1
  7620  0528  3000               	movlw	0
  7621  0529  00B0               	movwf	?___ftmul+2
  7622  052A  0008               	return
  7623  052B                     l5274:	
  7624  052B  0831               	movf	___ftmul@f2,w
  7625  052C  00B4               	movwf	??___ftmul
  7626  052D  0832               	movf	___ftmul@f2+1,w
  7627  052E  00B5               	movwf	??___ftmul+1
  7628  052F  0833               	movf	___ftmul@f2+2,w
  7629  0530  00B6               	movwf	??___ftmul+2
  7630  0531  1003               	clrc
  7631  0532  0D35               	rlf	??___ftmul+1,w
  7632  0533  0D36               	rlf	??___ftmul+2,w
  7633  0534  00B7               	movwf	??___ftmul+3
  7634  0535  0837               	movf	??___ftmul+3,w
  7635  0536  00BD               	movwf	___ftmul@sign
  7636  0537  08BD               	movf	___ftmul@sign,f
  7637  0538  1D03               	skipz
  7638  0539  2D41               	goto	l5280
  7639  053A  3000               	movlw	0
  7640  053B  00AE               	movwf	?___ftmul
  7641  053C  3000               	movlw	0
  7642  053D  00AF               	movwf	?___ftmul+1
  7643  053E  3000               	movlw	0
  7644  053F  00B0               	movwf	?___ftmul+2
  7645  0540  0008               	return
  7646  0541                     l5280:	
  7647  0541  083D               	movf	___ftmul@sign,w
  7648  0542  3E7B               	addlw	123
  7649  0543  00B4               	movwf	??___ftmul
  7650  0544  0834               	movf	??___ftmul,w
  7651  0545  07B8               	addwf	___ftmul@exp,f
  7652  0546  082E               	movf	___ftmul@f1,w
  7653  0547  00B4               	movwf	??___ftmul
  7654  0548  082F               	movf	___ftmul@f1+1,w
  7655  0549  00B5               	movwf	??___ftmul+1
  7656  054A  0830               	movf	___ftmul@f1+2,w
  7657  054B  00B6               	movwf	??___ftmul+2
  7658  054C  3010               	movlw	16
  7659  054D                     u3645:	
  7660  054D  36B6               	lsrf	??___ftmul+2,f
  7661  054E  0CB5               	rrf	??___ftmul+1,f
  7662  054F  0CB4               	rrf	??___ftmul,f
  7663  0550  0B89               	decfsz	9,f
  7664  0551  2D4D               	goto	u3645
  7665  0552  0834               	movf	??___ftmul,w
  7666  0553  00B7               	movwf	??___ftmul+3
  7667  0554  0837               	movf	??___ftmul+3,w
  7668  0555  00BD               	movwf	___ftmul@sign
  7669  0556  0831               	movf	___ftmul@f2,w
  7670  0557  00B4               	movwf	??___ftmul
  7671  0558  0832               	movf	___ftmul@f2+1,w
  7672  0559  00B5               	movwf	??___ftmul+1
  7673  055A  0833               	movf	___ftmul@f2+2,w
  7674  055B  00B6               	movwf	??___ftmul+2
  7675  055C  3010               	movlw	16
  7676  055D                     u3655:	
  7677  055D  36B6               	lsrf	??___ftmul+2,f
  7678  055E  0CB5               	rrf	??___ftmul+1,f
  7679  055F  0CB4               	rrf	??___ftmul,f
  7680  0560  0B89               	decfsz	9,f
  7681  0561  2D5D               	goto	u3655
  7682  0562  0834               	movf	??___ftmul,w
  7683  0563  00B7               	movwf	??___ftmul+3
  7684  0564  0837               	movf	??___ftmul+3,w
  7685  0565  06BD               	xorwf	___ftmul@sign,f
  7686  0566  3080               	movlw	128
  7687  0567  00B4               	movwf	??___ftmul
  7688  0568  0834               	movf	??___ftmul,w
  7689  0569  05BD               	andwf	___ftmul@sign,f
  7690  056A  17AF               	bsf	___ftmul@f1+1,7
  7691  056B  17B2               	bsf	___ftmul@f2+1,7
  7692  056C  30FF               	movlw	255
  7693  056D  05B1               	andwf	___ftmul@f2,f
  7694  056E  30FF               	movlw	255
  7695  056F  05B2               	andwf	___ftmul@f2+1,f
  7696  0570  3000               	movlw	0
  7697  0571  05B3               	andwf	___ftmul@f2+2,f
  7698  0572  3000               	movlw	0
  7699  0573  00B9               	movwf	___ftmul@f3_as_product
  7700  0574  3000               	movlw	0
  7701  0575  00BA               	movwf	___ftmul@f3_as_product+1
  7702  0576  3000               	movlw	0
  7703  0577  00BB               	movwf	___ftmul@f3_as_product+2
  7704  0578  3007               	movlw	7
  7705  0579  00B4               	movwf	??___ftmul
  7706  057A  0834               	movf	??___ftmul,w
  7707  057B  00BC               	movwf	___ftmul@cntr
  7708  057C                     l5292:	
  7709  057C  1C2E               	btfss	___ftmul@f1,0
  7710  057D  2D84               	goto	l5296
  7711  057E  0831               	movf	___ftmul@f2,w
  7712  057F  07B9               	addwf	___ftmul@f3_as_product,f
  7713  0580  0832               	movf	___ftmul@f2+1,w
  7714  0581  3DBA               	addwfc	___ftmul@f3_as_product+1,f
  7715  0582  0833               	movf	___ftmul@f2+2,w
  7716  0583  3DBB               	addwfc	___ftmul@f3_as_product+2,f
  7717  0584                     l5296:	
  7718  0584  3001               	movlw	1
  7719  0585                     u3675:	
  7720  0585  36B0               	lsrf	___ftmul@f1+2,f
  7721  0586  0CAF               	rrf	___ftmul@f1+1,f
  7722  0587  0CAE               	rrf	___ftmul@f1,f
  7723  0588  0B89               	decfsz	9,f
  7724  0589  2D85               	goto	u3675
  7725  058A  3001               	movlw	1
  7726  058B                     u3685:	
  7727  058B  35B1               	lslf	___ftmul@f2,f
  7728  058C  0DB2               	rlf	___ftmul@f2+1,f
  7729  058D  0DB3               	rlf	___ftmul@f2+2,f
  7730  058E  0B89               	decfsz	9,f
  7731  058F  2D8B               	goto	u3685
  7732  0590  3001               	movlw	1
  7733  0591  02BC               	subwf	___ftmul@cntr,f
  7734  0592  1D03               	btfss	3,2
  7735  0593  2D7C               	goto	l5292
  7736  0594  3009               	movlw	9
  7737  0595  00B4               	movwf	??___ftmul
  7738  0596  0834               	movf	??___ftmul,w
  7739  0597  00BC               	movwf	___ftmul@cntr
  7740  0598                     l5304:	
  7741  0598  1C2E               	btfss	___ftmul@f1,0
  7742  0599  2DA0               	goto	l5308
  7743  059A  0831               	movf	___ftmul@f2,w
  7744  059B  07B9               	addwf	___ftmul@f3_as_product,f
  7745  059C  0832               	movf	___ftmul@f2+1,w
  7746  059D  3DBA               	addwfc	___ftmul@f3_as_product+1,f
  7747  059E  0833               	movf	___ftmul@f2+2,w
  7748  059F  3DBB               	addwfc	___ftmul@f3_as_product+2,f
  7749  05A0                     l5308:	
  7750  05A0  3001               	movlw	1
  7751  05A1                     u3715:	
  7752  05A1  36B0               	lsrf	___ftmul@f1+2,f
  7753  05A2  0CAF               	rrf	___ftmul@f1+1,f
  7754  05A3  0CAE               	rrf	___ftmul@f1,f
  7755  05A4  0B89               	decfsz	9,f
  7756  05A5  2DA1               	goto	u3715
  7757  05A6  3001               	movlw	1
  7758  05A7                     u3725:	
  7759  05A7  36BB               	lsrf	___ftmul@f3_as_product+2,f
  7760  05A8  0CBA               	rrf	___ftmul@f3_as_product+1,f
  7761  05A9  0CB9               	rrf	___ftmul@f3_as_product,f
  7762  05AA  0B89               	decfsz	9,f
  7763  05AB  2DA7               	goto	u3725
  7764  05AC  3001               	movlw	1
  7765  05AD  02BC               	subwf	___ftmul@cntr,f
  7766  05AE  1D03               	btfss	3,2
  7767  05AF  2D98               	goto	l5304
  7768  05B0  0839               	movf	___ftmul@f3_as_product,w
  7769  05B1  00A0               	movwf	___ftpack@arg
  7770  05B2  083A               	movf	___ftmul@f3_as_product+1,w
  7771  05B3  00A1               	movwf	___ftpack@arg+1
  7772  05B4  083B               	movf	___ftmul@f3_as_product+2,w
  7773  05B5  00A2               	movwf	___ftpack@arg+2
  7774  05B6  0838               	movf	___ftmul@exp,w
  7775  05B7  00B4               	movwf	??___ftmul
  7776  05B8  0834               	movf	??___ftmul,w
  7777  05B9  00A3               	movwf	___ftpack@exp
  7778  05BA  083D               	movf	___ftmul@sign,w
  7779  05BB  00B5               	movwf	??___ftmul+1
  7780  05BC  0835               	movf	??___ftmul+1,w
  7781  05BD  00A4               	movwf	___ftpack@sign
  7782  05BE  3189  2148         	fcall	___ftpack
  7783  05C0  0020               	movlb	0	; select bank0
  7784  05C1  0820               	movf	?___ftpack,w
  7785  05C2  00AE               	movwf	?___ftmul
  7786  05C3  0821               	movf	?___ftpack+1,w
  7787  05C4  00AF               	movwf	?___ftmul+1
  7788  05C5  0822               	movf	?___ftpack+2,w
  7789  05C6  00B0               	movwf	?___ftmul+2
  7790  05C7  0008               	return
  7791  05C8                     __end_of___ftmul:	
  7792                           
  7793                           	psect	text31
  7794  0328                     __ptext31:	
  7795 ;; *************** function ___ftadd *****************
  7796 ;; Defined at:
  7797 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftadd.c"
  7798 ;; Parameters:    Size  Location     Type
  7799 ;;  f1              3   30[BANK0 ] float 
  7800 ;;  f2              3   33[BANK0 ] float 
  7801 ;; Auto vars:     Size  Location     Type
  7802 ;;  exp1            1   42[BANK0 ] unsigned char 
  7803 ;;  exp2            1   41[BANK0 ] unsigned char 
  7804 ;;  sign            1   40[BANK0 ] unsigned char 
  7805 ;; Return value:  Size  Location     Type
  7806 ;;                  3   30[BANK0 ] float 
  7807 ;; Registers used:
  7808 ;;		wreg, status,2, status,0, pclath, cstack
  7809 ;; Tracked objects:
  7810 ;;		On entry : 0/0
  7811 ;;		On exit  : 0/0
  7812 ;;		Unchanged: 0/0
  7813 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7814 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7815 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7816 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7817 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7818 ;;Total ram usage:       13 bytes
  7819 ;; Hardware stack levels used:    1
  7820 ;; Hardware stack levels required when called:    6
  7821 ;; This function calls:
  7822 ;;		___ftpack
  7823 ;; This function is called by:
  7824 ;;		_getPercentValue
  7825 ;; This function uses a non-reentrant model
  7826 ;;
  7827                           
  7828                           
  7829                           ;psect for function ___ftadd
  7830  0328                     ___ftadd:	
  7831                           
  7832                           ;incstack = 0
  7833                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
  7834  0328  0020               	movlb	0	; select bank0
  7835  0329  083E               	movf	___ftadd@f1,w
  7836  032A  00C4               	movwf	??___ftadd
  7837  032B  083F               	movf	___ftadd@f1+1,w
  7838  032C  00C5               	movwf	??___ftadd+1
  7839  032D  0840               	movf	___ftadd@f1+2,w
  7840  032E  00C6               	movwf	??___ftadd+2
  7841  032F  1003               	clrc
  7842  0330  0D45               	rlf	??___ftadd+1,w
  7843  0331  0D46               	rlf	??___ftadd+2,w
  7844  0332  00C7               	movwf	??___ftadd+3
  7845  0333  0847               	movf	??___ftadd+3,w
  7846  0334  00CA               	movwf	___ftadd@exp1
  7847  0335  0841               	movf	___ftadd@f2,w
  7848  0336  00C4               	movwf	??___ftadd
  7849  0337  0842               	movf	___ftadd@f2+1,w
  7850  0338  00C5               	movwf	??___ftadd+1
  7851  0339  0843               	movf	___ftadd@f2+2,w
  7852  033A  00C6               	movwf	??___ftadd+2
  7853  033B  1003               	clrc
  7854  033C  0D45               	rlf	??___ftadd+1,w
  7855  033D  0D46               	rlf	??___ftadd+2,w
  7856  033E  00C7               	movwf	??___ftadd+3
  7857  033F  0847               	movf	??___ftadd+3,w
  7858  0340  00C9               	movwf	___ftadd@exp2
  7859  0341  084A               	movf	___ftadd@exp1,w
  7860  0342  1903               	btfsc	3,2
  7861  0343  2B50               	goto	l5162
  7862  0344  0849               	movf	___ftadd@exp2,w
  7863  0345  024A               	subwf	___ftadd@exp1,w
  7864  0346  1803               	skipnc
  7865  0347  2B57               	goto	l5166
  7866  0348  034A               	decf	___ftadd@exp1,w
  7867  0349  3AFF               	xorlw	255
  7868  034A  0749               	addwf	___ftadd@exp2,w
  7869  034B  00C4               	movwf	??___ftadd
  7870  034C  3019               	movlw	25
  7871  034D  0244               	subwf	??___ftadd,w
  7872  034E  1C03               	skipc
  7873  034F  2B57               	goto	l5166
  7874  0350                     l5162:	
  7875  0350  0841               	movf	___ftadd@f2,w
  7876  0351  00BE               	movwf	?___ftadd
  7877  0352  0842               	movf	___ftadd@f2+1,w
  7878  0353  00BF               	movwf	?___ftadd+1
  7879  0354  0843               	movf	___ftadd@f2+2,w
  7880  0355  00C0               	movwf	?___ftadd+2
  7881  0356  0008               	return
  7882  0357                     l5166:	
  7883  0357  0849               	movf	___ftadd@exp2,w
  7884  0358  1903               	btfsc	3,2
  7885  0359  0008               	return
  7886  035A  084A               	movf	___ftadd@exp1,w
  7887  035B  0249               	subwf	___ftadd@exp2,w
  7888  035C  1803               	skipnc
  7889  035D  2B66               	goto	l5172
  7890  035E  0349               	decf	___ftadd@exp2,w
  7891  035F  3AFF               	xorlw	255
  7892  0360  074A               	addwf	___ftadd@exp1,w
  7893  0361  00C4               	movwf	??___ftadd
  7894  0362  3019               	movlw	25
  7895  0363  0244               	subwf	??___ftadd,w
  7896  0364  1803               	btfsc	3,0
  7897  0365  0008               	return
  7898  0366                     l5172:	
  7899  0366  3006               	movlw	6
  7900  0367  00C4               	movwf	??___ftadd
  7901  0368  0844               	movf	??___ftadd,w
  7902  0369  00C8               	movwf	___ftadd@sign
  7903  036A  1BC0               	btfsc	___ftadd@f1+2,7
  7904  036B  17C8               	bsf	___ftadd@sign,7
  7905  036C  1BC3               	btfsc	___ftadd@f2+2,7
  7906  036D  1748               	bsf	___ftadd@sign,6
  7907  036E  17BF               	bsf	___ftadd@f1+1,7
  7908  036F  30FF               	movlw	255
  7909  0370  05BE               	andwf	___ftadd@f1,f
  7910  0371  30FF               	movlw	255
  7911  0372  05BF               	andwf	___ftadd@f1+1,f
  7912  0373  3000               	movlw	0
  7913  0374  05C0               	andwf	___ftadd@f1+2,f
  7914  0375  17C2               	bsf	___ftadd@f2+1,7
  7915  0376  30FF               	movlw	255
  7916  0377  05C1               	andwf	___ftadd@f2,f
  7917  0378  30FF               	movlw	255
  7918  0379  05C2               	andwf	___ftadd@f2+1,f
  7919  037A  3000               	movlw	0
  7920  037B  05C3               	andwf	___ftadd@f2+2,f
  7921  037C  0849               	movf	___ftadd@exp2,w
  7922  037D  024A               	subwf	___ftadd@exp1,w
  7923  037E  1803               	skipnc
  7924  037F  2BA2               	goto	l5194
  7925  0380                     l5184:	
  7926  0380  3001               	movlw	1
  7927  0381                     u3405:	
  7928  0381  35C1               	lslf	___ftadd@f2,f
  7929  0382  0DC2               	rlf	___ftadd@f2+1,f
  7930  0383  0DC3               	rlf	___ftadd@f2+2,f
  7931  0384  0B89               	decfsz	9,f
  7932  0385  2B81               	goto	u3405
  7933  0386  3001               	movlw	1
  7934  0387  02C9               	subwf	___ftadd@exp2,f
  7935  0388  0849               	movf	___ftadd@exp2,w
  7936  0389  064A               	xorwf	___ftadd@exp1,w
  7937  038A  1903               	skipnz
  7938  038B  2B9D               	goto	l5192
  7939  038C  3001               	movlw	1
  7940  038D  02C8               	subwf	___ftadd@sign,f
  7941  038E  0848               	movf	___ftadd@sign,w
  7942  038F  3907               	andlw	7
  7943  0390  1903               	btfsc	3,2
  7944  0391  2B9D               	goto	l5192
  7945  0392  2B80               	goto	l5184
  7946  0393                     l5190:	
  7947  0393  3001               	movlw	1
  7948  0394                     u3435:	
  7949  0394  36C0               	lsrf	___ftadd@f1+2,f
  7950  0395  0CBF               	rrf	___ftadd@f1+1,f
  7951  0396  0CBE               	rrf	___ftadd@f1,f
  7952  0397  0B89               	decfsz	9,f
  7953  0398  2B94               	goto	u3435
  7954  0399  3001               	movlw	1
  7955  039A  00C4               	movwf	??___ftadd
  7956  039B  0844               	movf	??___ftadd,w
  7957  039C  07CA               	addwf	___ftadd@exp1,f
  7958  039D                     l5192:	
  7959  039D  084A               	movf	___ftadd@exp1,w
  7960  039E  0649               	xorwf	___ftadd@exp2,w
  7961  039F  1903               	btfsc	3,2
  7962  03A0  2BC7               	goto	l2925
  7963  03A1  2B93               	goto	l5190
  7964  03A2                     l5194:	
  7965  03A2  084A               	movf	___ftadd@exp1,w
  7966  03A3  0249               	subwf	___ftadd@exp2,w
  7967  03A4  1803               	skipnc
  7968  03A5  2BC7               	goto	l2925
  7969  03A6                     l5196:	
  7970  03A6  3001               	movlw	1
  7971  03A7                     u3465:	
  7972  03A7  35BE               	lslf	___ftadd@f1,f
  7973  03A8  0DBF               	rlf	___ftadd@f1+1,f
  7974  03A9  0DC0               	rlf	___ftadd@f1+2,f
  7975  03AA  0B89               	decfsz	9,f
  7976  03AB  2BA7               	goto	u3465
  7977  03AC  3001               	movlw	1
  7978  03AD  02CA               	subwf	___ftadd@exp1,f
  7979  03AE  0849               	movf	___ftadd@exp2,w
  7980  03AF  064A               	xorwf	___ftadd@exp1,w
  7981  03B0  1903               	skipnz
  7982  03B1  2BC3               	goto	l5204
  7983  03B2  3001               	movlw	1
  7984  03B3  02C8               	subwf	___ftadd@sign,f
  7985  03B4  0848               	movf	___ftadd@sign,w
  7986  03B5  3907               	andlw	7
  7987  03B6  1903               	btfsc	3,2
  7988  03B7  2BC3               	goto	l5204
  7989  03B8  2BA6               	goto	l5196
  7990  03B9                     l5202:	
  7991  03B9  3001               	movlw	1
  7992  03BA                     u3495:	
  7993  03BA  36C3               	lsrf	___ftadd@f2+2,f
  7994  03BB  0CC2               	rrf	___ftadd@f2+1,f
  7995  03BC  0CC1               	rrf	___ftadd@f2,f
  7996  03BD  0B89               	decfsz	9,f
  7997  03BE  2BBA               	goto	u3495
  7998  03BF  3001               	movlw	1
  7999  03C0  00C4               	movwf	??___ftadd
  8000  03C1  0844               	movf	??___ftadd,w
  8001  03C2  07C9               	addwf	___ftadd@exp2,f
  8002  03C3                     l5204:	
  8003  03C3  084A               	movf	___ftadd@exp1,w
  8004  03C4  0649               	xorwf	___ftadd@exp2,w
  8005  03C5  1D03               	skipz
  8006  03C6  2BB9               	goto	l5202
  8007  03C7                     l2925:	
  8008  03C7  1FC8               	btfss	___ftadd@sign,7
  8009  03C8  2BD9               	goto	l5208
  8010  03C9  30FF               	movlw	255
  8011  03CA  06BE               	xorwf	___ftadd@f1,f
  8012  03CB  30FF               	movlw	255
  8013  03CC  06BF               	xorwf	___ftadd@f1+1,f
  8014  03CD  30FF               	movlw	255
  8015  03CE  06C0               	xorwf	___ftadd@f1+2,f
  8016  03CF  3001               	movlw	1
  8017  03D0  07BE               	addwf	___ftadd@f1,f
  8018  03D1  3000               	movlw	0
  8019  03D2  1803               	skipnc
  8020  03D3  3001               	movlw	1
  8021  03D4  07BF               	addwf	___ftadd@f1+1,f
  8022  03D5  3000               	movlw	0
  8023  03D6  1803               	skipnc
  8024  03D7  3001               	movlw	1
  8025  03D8  07C0               	addwf	___ftadd@f1+2,f
  8026  03D9                     l5208:	
  8027  03D9  1F48               	btfss	___ftadd@sign,6
  8028  03DA  2BEB               	goto	l5212
  8029  03DB  30FF               	movlw	255
  8030  03DC  06C1               	xorwf	___ftadd@f2,f
  8031  03DD  30FF               	movlw	255
  8032  03DE  06C2               	xorwf	___ftadd@f2+1,f
  8033  03DF  30FF               	movlw	255
  8034  03E0  06C3               	xorwf	___ftadd@f2+2,f
  8035  03E1  3001               	movlw	1
  8036  03E2  07C1               	addwf	___ftadd@f2,f
  8037  03E3  3000               	movlw	0
  8038  03E4  1803               	skipnc
  8039  03E5  3001               	movlw	1
  8040  03E6  07C2               	addwf	___ftadd@f2+1,f
  8041  03E7  3000               	movlw	0
  8042  03E8  1803               	skipnc
  8043  03E9  3001               	movlw	1
  8044  03EA  07C3               	addwf	___ftadd@f2+2,f
  8045  03EB                     l5212:	
  8046  03EB  01C8               	clrf	___ftadd@sign
  8047  03EC  083E               	movf	___ftadd@f1,w
  8048  03ED  07C1               	addwf	___ftadd@f2,f
  8049  03EE  083F               	movf	___ftadd@f1+1,w
  8050  03EF  3DC2               	addwfc	___ftadd@f2+1,f
  8051  03F0  0840               	movf	___ftadd@f1+2,w
  8052  03F1  3DC3               	addwfc	___ftadd@f2+2,f
  8053  03F2  1FC3               	btfss	___ftadd@f2+2,7
  8054  03F3  2C06               	goto	l5222
  8055  03F4  30FF               	movlw	255
  8056  03F5  06C1               	xorwf	___ftadd@f2,f
  8057  03F6  30FF               	movlw	255
  8058  03F7  06C2               	xorwf	___ftadd@f2+1,f
  8059  03F8  30FF               	movlw	255
  8060  03F9  06C3               	xorwf	___ftadd@f2+2,f
  8061  03FA  3001               	movlw	1
  8062  03FB  07C1               	addwf	___ftadd@f2,f
  8063  03FC  3000               	movlw	0
  8064  03FD  1803               	skipnc
  8065  03FE  3001               	movlw	1
  8066  03FF  07C2               	addwf	___ftadd@f2+1,f
  8067  0400  3000               	movlw	0
  8068  0401  1803               	skipnc
  8069  0402  3001               	movlw	1
  8070  0403  07C3               	addwf	___ftadd@f2+2,f
  8071  0404  01C8               	clrf	___ftadd@sign
  8072  0405  0AC8               	incf	___ftadd@sign,f
  8073  0406                     l5222:	
  8074  0406  0841               	movf	___ftadd@f2,w
  8075  0407  00A0               	movwf	___ftpack@arg
  8076  0408  0842               	movf	___ftadd@f2+1,w
  8077  0409  00A1               	movwf	___ftpack@arg+1
  8078  040A  0843               	movf	___ftadd@f2+2,w
  8079  040B  00A2               	movwf	___ftpack@arg+2
  8080  040C  084A               	movf	___ftadd@exp1,w
  8081  040D  00C4               	movwf	??___ftadd
  8082  040E  0844               	movf	??___ftadd,w
  8083  040F  00A3               	movwf	___ftpack@exp
  8084  0410  0848               	movf	___ftadd@sign,w
  8085  0411  00C5               	movwf	??___ftadd+1
  8086  0412  0845               	movf	??___ftadd+1,w
  8087  0413  00A4               	movwf	___ftpack@sign
  8088  0414  3189  2148         	fcall	___ftpack
  8089  0416  0020               	movlb	0	; select bank0
  8090  0417  0820               	movf	?___ftpack,w
  8091  0418  00BE               	movwf	?___ftadd
  8092  0419  0821               	movf	?___ftpack+1,w
  8093  041A  00BF               	movwf	?___ftadd+1
  8094  041B  0822               	movf	?___ftpack+2,w
  8095  041C  00C0               	movwf	?___ftadd+2
  8096  041D  0008               	return
  8097  041E                     __end_of___ftadd:	
  8098                           
  8099                           	psect	text32
  8100  138F                     __ptext32:	
  8101 ;; *************** function _RF_RxDisable *****************
  8102 ;; Defined at:
  8103 ;;		line 191 in file "../src/RF_Control_B1.c"
  8104 ;; Parameters:    Size  Location     Type
  8105 ;;  rf              1    wreg     unsigned char 
  8106 ;; Auto vars:     Size  Location     Type
  8107 ;;  rf              1    4[BANK0 ] unsigned char 
  8108 ;; Return value:  Size  Location     Type
  8109 ;;		None               void
  8110 ;; Registers used:
  8111 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8112 ;; Tracked objects:
  8113 ;;		On entry : 0/0
  8114 ;;		On exit  : 0/0
  8115 ;;		Unchanged: 0/0
  8116 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8117 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8118 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8119 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8120 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8121 ;;Total ram usage:        1 bytes
  8122 ;; Hardware stack levels used:    1
  8123 ;; Hardware stack levels required when called:    7
  8124 ;; This function calls:
  8125 ;;		_CC2500_WriteCommand
  8126 ;;		_RfPointSelect
  8127 ;;		_setINT_GO
  8128 ;; This function is called by:
  8129 ;;		_setRF_Main
  8130 ;; This function uses a non-reentrant model
  8131 ;;
  8132                           
  8133                           
  8134                           ;psect for function _RF_RxDisable
  8135  138F                     _RF_RxDisable:	
  8136                           
  8137                           ;incstack = 0
  8138                           ; Regs used in _RF_RxDisable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8139                           ;RF_RxDisable@rf stored from wreg
  8140  138F  0020               	movlb	0	; select bank0
  8141  1390  00A4               	movwf	RF_RxDisable@rf
  8142                           
  8143                           ;RF_Control_B1.c: 192: RfPointSelect(rf);
  8144  1391  0824               	movf	RF_RxDisable@rf,w
  8145  1392  319E  26F1  3193   	fcall	_RfPointSelect
  8146                           
  8147                           ;RF_Control_B1.c: 194: if (RF->ReceiveGO == 1 || RF->RxStatus == 1) {
  8148  1395  0021               	movlb	1	; select bank1
  8149  1396  083D               	movf	_RF^(0+128),w
  8150  1397  0086               	movwf	6
  8151  1398  0187               	clrf	7
  8152  1399  1881               	btfsc	1,1
  8153  139A  2BA0               	goto	l6064
  8154  139B  083D               	movf	_RF^(0+128),w
  8155  139C  0086               	movwf	6
  8156  139D  0187               	clrf	7
  8157  139E  1D81               	btfss	1,3
  8158  139F  0008               	return
  8159  13A0                     l6064:	
  8160                           
  8161                           ;RF_Control_B1.c: 195: RF->RxStatus = 0;
  8162  13A0  083D               	movf	_RF^(0+128),w
  8163  13A1  0086               	movwf	6
  8164  13A2  0187               	clrf	7
  8165  13A3  1181               	bcf	1,3
  8166                           
  8167                           ;RF_Control_B1.c: 196: RF->ReceiveGO = 0;
  8168  13A4  083D               	movf	_RF^(0+128),w
  8169  13A5  0086               	movwf	6
  8170  13A6  0187               	clrf	7
  8171  13A7  1081               	bcf	1,1
  8172                           
  8173                           ;RF_Control_B1.c: 197: CC2500_WriteCommand(0x36);
  8174  13A8  3036               	movlw	54
  8175  13A9  319F  279F  3193   	fcall	_CC2500_WriteCommand
  8176                           
  8177                           ;RF_Control_B1.c: 198: setINT_GO(0);
  8178  13AC  3000               	movlw	0
  8179  13AD  319E  26A5  3193   	fcall	_setINT_GO
  8180                           
  8181                           ;RF_Control_B1.c: 199: if (RF->ReceiveGO == 1) {
  8182  13B0  0021               	movlb	1	; select bank1
  8183  13B1  083D               	movf	_RF^(0+128),w
  8184  13B2  0086               	movwf	6
  8185  13B3  0187               	clrf	7
  8186  13B4  1C81               	btfss	1,1
  8187  13B5  0008               	return
  8188                           
  8189                           ;RF_Control_B1.c: 200: CC2500_WriteCommand(0x3A);
  8190  13B6  303A               	movlw	58
  8191  13B7  319F  279F         	fcall	_CC2500_WriteCommand
  8192  13B9  0008               	return
  8193  13BA                     __end_of_RF_RxDisable:	
  8194                           
  8195                           	psect	text33
  8196  1EA5                     __ptext33:	
  8197 ;; *************** function _setINT_GO *****************
  8198 ;; Defined at:
  8199 ;;		line 258 in file "../src/MCU_B1.c"
  8200 ;; Parameters:    Size  Location     Type
  8201 ;;  command         1    wreg     unsigned char 
  8202 ;; Auto vars:     Size  Location     Type
  8203 ;;  command         1    0[BANK0 ] unsigned char 
  8204 ;; Return value:  Size  Location     Type
  8205 ;;		None               void
  8206 ;; Registers used:
  8207 ;;		wreg
  8208 ;; Tracked objects:
  8209 ;;		On entry : 0/0
  8210 ;;		On exit  : 0/0
  8211 ;;		Unchanged: 0/0
  8212 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8213 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8214 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8215 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8216 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8217 ;;Total ram usage:        1 bytes
  8218 ;; Hardware stack levels used:    1
  8219 ;; Hardware stack levels required when called:    5
  8220 ;; This function calls:
  8221 ;;		Nothing
  8222 ;; This function is called by:
  8223 ;;		_setRF_Main
  8224 ;;		_setRF_Enable
  8225 ;;		_RF_RxDisable
  8226 ;; This function uses a non-reentrant model
  8227 ;;
  8228                           
  8229                           
  8230                           ;psect for function _setINT_GO
  8231  1EA5                     _setINT_GO:	
  8232                           
  8233                           ;incstack = 0
  8234                           ; Regs used in _setINT_GO: [wreg]
  8235                           ;setINT_GO@command stored from wreg
  8236  1EA5  0020               	movlb	0	; select bank0
  8237  1EA6  00A0               	movwf	setINT_GO@command
  8238                           
  8239                           ;MCU_B1.c: 259: INTF = 0;
  8240  1EA7  108B               	bcf	11,1	;volatile
  8241                           
  8242                           ;MCU_B1.c: 260: INTE = command;
  8243  1EA8  1C20               	btfss	setINT_GO@command,0
  8244  1EA9  2EAC               	goto	u4510
  8245  1EAA  160B               	bsf	11,4	;volatile
  8246  1EAB  0008               	return
  8247  1EAC                     u4510:	
  8248  1EAC  120B               	bcf	11,4	;volatile
  8249  1EAD  0008               	return
  8250  1EAE                     __end_of_setINT_GO:	
  8251                           
  8252                           	psect	text34
  8253  159C                     __ptext34:	
  8254 ;; *************** function _CC2500_TxData *****************
  8255 ;; Defined at:
  8256 ;;		line 32 in file "../src/CC2500_B1.c"
  8257 ;; Parameters:    Size  Location     Type
  8258 ;;		None
  8259 ;; Auto vars:     Size  Location     Type
  8260 ;;  loop_e          1    5[BANK0 ] unsigned char 
  8261 ;; Return value:  Size  Location     Type
  8262 ;;		None               void
  8263 ;; Registers used:
  8264 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8265 ;; Tracked objects:
  8266 ;;		On entry : 0/0
  8267 ;;		On exit  : 0/0
  8268 ;;		Unchanged: 0/0
  8269 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8270 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8271 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8272 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8273 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8274 ;;Total ram usage:        2 bytes
  8275 ;; Hardware stack levels used:    1
  8276 ;; Hardware stack levels required when called:    7
  8277 ;; This function calls:
  8278 ;;		_CC2500_WriteByte
  8279 ;;		_CC2500_WriteCommand
  8280 ;; This function is called by:
  8281 ;;		_setRF_Main
  8282 ;; This function uses a non-reentrant model
  8283 ;;
  8284                           
  8285                           
  8286                           ;psect for function _CC2500_TxData
  8287  159C                     _CC2500_TxData:	
  8288                           
  8289                           ;CC2500_B1.c: 33: unsigned char loop_e;
  8290                           ;CC2500_B1.c: 35: RC4 = 0;
  8291                           
  8292                           ;incstack = 0
  8293                           ; Regs used in _CC2500_TxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8294  159C  0020               	movlb	0	; select bank0
  8295  159D  120E               	bcf	14,4	;volatile
  8296                           
  8297                           ;CC2500_B1.c: 36: SPI0Buffer = 0x3F + 0x40;
  8298  159E  307F               	movlw	127
  8299  159F  00A4               	movwf	??_CC2500_TxData
  8300  15A0  0824               	movf	??_CC2500_TxData,w
  8301  15A1  0021               	movlb	1	; select bank1
  8302  15A2  00C1               	movwf	_SPI0Buffer^(0+128)
  8303  15A3                     l268:	
  8304                           ;CC2500_B1.c: 37: while (RC2 == 1);
  8305                           
  8306  15A3  0020               	movlb	0	; select bank0
  8307  15A4  190E               	btfsc	14,2	;volatile
  8308  15A5  2DA3               	goto	l268
  8309                           
  8310                           ;CC2500_B1.c: 38: CC2500_WriteByte();
  8311  15A6  3191  2172  3195   	fcall	_CC2500_WriteByte
  8312                           
  8313                           ;CC2500_B1.c: 39: SPI0Buffer = Tx_Length;
  8314  15A9  0021               	movlb	1	; select bank1
  8315  15AA  0842               	movf	_Tx_Length^(0+128),w
  8316  15AB  0020               	movlb	0	; select bank0
  8317  15AC  00A4               	movwf	??_CC2500_TxData
  8318  15AD  0824               	movf	??_CC2500_TxData,w
  8319  15AE  0021               	movlb	1	; select bank1
  8320  15AF  00C1               	movwf	_SPI0Buffer^(0+128)
  8321                           
  8322                           ;CC2500_B1.c: 40: CC2500_WriteByte();
  8323  15B0  3191  2172  3195   	fcall	_CC2500_WriteByte
  8324                           
  8325                           ;CC2500_B1.c: 41: for (loop_e = 0; loop_e < Tx_Length; loop_e++) {
  8326  15B3  0020               	movlb	0	; select bank0
  8327  15B4  01A5               	clrf	CC2500_TxData@loop_e
  8328  15B5                     l5884:	
  8329  15B5  0021               	movlb	1	; select bank1
  8330  15B6  0842               	movf	_Tx_Length^(0+128),w
  8331  15B7  0020               	movlb	0	; select bank0
  8332  15B8  0225               	subwf	CC2500_TxData@loop_e,w
  8333  15B9  1803               	btfsc	3,0
  8334  15BA  2DCD               	goto	l273
  8335                           
  8336                           ;CC2500_B1.c: 42: SPI0Buffer = RF_Data[loop_e];
  8337  15BB  0825               	movf	CC2500_TxData@loop_e,w
  8338  15BC  3EA0               	addlw	_RF_Data& (0+255)
  8339  15BD  0086               	movwf	6
  8340  15BE  0187               	clrf	7
  8341  15BF  0801               	movf	1,w
  8342  15C0  00A4               	movwf	??_CC2500_TxData
  8343  15C1  0824               	movf	??_CC2500_TxData,w
  8344  15C2  0021               	movlb	1	; select bank1
  8345  15C3  00C1               	movwf	_SPI0Buffer^(0+128)
  8346                           
  8347                           ;CC2500_B1.c: 43: CC2500_WriteByte();
  8348  15C4  3191  2172  3195   	fcall	_CC2500_WriteByte
  8349  15C7  3001               	movlw	1
  8350  15C8  0020               	movlb	0	; select bank0
  8351  15C9  00A4               	movwf	??_CC2500_TxData
  8352  15CA  0824               	movf	??_CC2500_TxData,w
  8353  15CB  07A5               	addwf	CC2500_TxData@loop_e,f
  8354  15CC  2DB5               	goto	l5884
  8355  15CD                     l273:	
  8356                           
  8357                           ;CC2500_B1.c: 44: }
  8358                           ;CC2500_B1.c: 45: RC4 = 1;
  8359  15CD  160E               	bsf	14,4	;volatile
  8360                           
  8361                           ;CC2500_B1.c: 46: CC2500_WriteCommand(0x35);
  8362  15CE  3035               	movlw	53
  8363  15CF  319F  279F  3195   	fcall	_CC2500_WriteCommand
  8364  15D2                     l274:	
  8365                           ;CC2500_B1.c: 47: while (RB0 == 0);
  8366                           
  8367  15D2  0020               	movlb	0	; select bank0
  8368  15D3  1C0D               	btfss	13,0	;volatile
  8369  15D4  2DD2               	goto	l274
  8370  15D5                     l277:	
  8371                           ;CC2500_B1.c: 48: while (RB0 == 1);
  8372                           
  8373  15D5  180D               	btfsc	13,0	;volatile
  8374  15D6  2DD5               	goto	l277
  8375                           
  8376                           ;CC2500_B1.c: 49: CC2500_WriteCommand(0x36);
  8377  15D7  3036               	movlw	54
  8378  15D8  319F  279F  3195   	fcall	_CC2500_WriteCommand
  8379                           
  8380                           ;CC2500_B1.c: 50: CC2500_WriteCommand(0x3B);
  8381  15DB  303B               	movlw	59
  8382  15DC  319F  279F         	fcall	_CC2500_WriteCommand
  8383                           
  8384                           ;CC2500_B1.c: 51: Transceive_OK = 1;
  8385  15DE  14FC               	bsf	_Transceive_OK/(0+8),_Transceive_OK& (0+7)
  8386  15DF  0008               	return
  8387  15E0                     __end_of_CC2500_TxData:	
  8388                           
  8389                           	psect	text35
  8390  08EA                     __ptext35:	
  8391 ;; *************** function _CC2500_RxData *****************
  8392 ;; Defined at:
  8393 ;;		line 57 in file "../src/CC2500_B1.c"
  8394 ;; Parameters:    Size  Location     Type
  8395 ;;		None
  8396 ;; Auto vars:     Size  Location     Type
  8397 ;;  loop_f          1    5[BANK0 ] unsigned char 
  8398 ;; Return value:  Size  Location     Type
  8399 ;;		None               void
  8400 ;; Registers used:
  8401 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8402 ;; Tracked objects:
  8403 ;;		On entry : 0/0
  8404 ;;		On exit  : 0/0
  8405 ;;		Unchanged: 0/0
  8406 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8407 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8408 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8409 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8410 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8411 ;;Total ram usage:        2 bytes
  8412 ;; Hardware stack levels used:    1
  8413 ;; Hardware stack levels required when called:    7
  8414 ;; This function calls:
  8415 ;;		_CC2500_ReadByte
  8416 ;;		_CC2500_ReadStatus
  8417 ;;		_CC2500_WriteByte
  8418 ;;		_CC2500_WriteCommand
  8419 ;; This function is called by:
  8420 ;;		_setRF_Main
  8421 ;; This function uses a non-reentrant model
  8422 ;;
  8423                           
  8424                           
  8425                           ;psect for function _CC2500_RxData
  8426  08EA                     _CC2500_RxData:	
  8427                           
  8428                           ;CC2500_B1.c: 58: unsigned char loop_f;
  8429                           ;CC2500_B1.c: 62: if (RB0 == 1)
  8430                           
  8431                           ;incstack = 0
  8432                           ; Regs used in _CC2500_RxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8433  08EA  0020               	movlb	0	; select bank0
  8434  08EB  180D               	btfsc	13,0	;volatile
  8435  08EC                     l284:	
  8436                           ;CC2500_B1.c: 63: {
  8437                           ;CC2500_B1.c: 64: while (RB0 == 1);
  8438                           
  8439  08EC  180D               	btfsc	13,0	;volatile
  8440  08ED  28EC               	goto	l284
  8441                           
  8442                           ;CC2500_B1.c: 65: }
  8443                           ;CC2500_B1.c: 66: CC2500_ReadStatus(0x3B);
  8444  08EE  303B               	movlw	59
  8445  08EF  3192  220B  3188   	fcall	_CC2500_ReadStatus
  8446                           
  8447                           ;CC2500_B1.c: 67: if (s_data != 0)
  8448  08F2  0021               	movlb	1	; select bank1
  8449  08F3  0845               	movf	_s_data^(0+128),w
  8450  08F4  1903               	btfsc	3,2
  8451  08F5  2940               	goto	l5930
  8452                           
  8453                           ;CC2500_B1.c: 69: {
  8454                           ;CC2500_B1.c: 70: RC4 = 0;
  8455  08F6  0020               	movlb	0	; select bank0
  8456  08F7  120E               	bcf	14,4	;volatile
  8457                           
  8458                           ;CC2500_B1.c: 71: SPI0Buffer = 0x3F + 0xC0;
  8459  08F8  30FF               	movlw	255
  8460  08F9  00A4               	movwf	??_CC2500_RxData
  8461  08FA  0824               	movf	??_CC2500_RxData,w
  8462  08FB  0021               	movlb	1	; select bank1
  8463  08FC  00C1               	movwf	_SPI0Buffer^(0+128)
  8464  08FD                     l288:	
  8465                           ;CC2500_B1.c: 72: while (RC2 == 1);
  8466                           
  8467  08FD  0020               	movlb	0	; select bank0
  8468  08FE  190E               	btfsc	14,2	;volatile
  8469  08FF  28FD               	goto	l288
  8470                           
  8471                           ;CC2500_B1.c: 73: CC2500_WriteByte();
  8472  0900  3191  2172  3188   	fcall	_CC2500_WriteByte
  8473                           
  8474                           ;CC2500_B1.c: 75: CC2500_ReadByte();
  8475  0903  3192  225E  3188   	fcall	_CC2500_ReadByte
  8476                           
  8477                           ;CC2500_B1.c: 76: Rx_Length = SPI0Buffer;
  8478  0906  0021               	movlb	1	; select bank1
  8479  0907  0841               	movf	_SPI0Buffer^(0+128),w
  8480  0908  0020               	movlb	0	; select bank0
  8481  0909  00A4               	movwf	??_CC2500_RxData
  8482  090A  0824               	movf	??_CC2500_RxData,w
  8483  090B  0021               	movlb	1	; select bank1
  8484  090C  00C0               	movwf	_Rx_Length^(0+128)
  8485                           
  8486                           ;CC2500_B1.c: 77: for (loop_f = 0; loop_f < Rx_Length; loop_f++) {
  8487  090D  0020               	movlb	0	; select bank0
  8488  090E  01A5               	clrf	CC2500_RxData@loop_f
  8489  090F                     l5916:	
  8490  090F  0021               	movlb	1	; select bank1
  8491  0910  0840               	movf	_Rx_Length^(0+128),w
  8492  0911  0020               	movlb	0	; select bank0
  8493  0912  0225               	subwf	CC2500_RxData@loop_f,w
  8494  0913  1803               	btfsc	3,0
  8495  0914  2927               	goto	l5918
  8496                           
  8497                           ;CC2500_B1.c: 78: CC2500_ReadByte();
  8498  0915  3192  225E  3188   	fcall	_CC2500_ReadByte
  8499                           
  8500                           ;CC2500_B1.c: 79: RF_Data[loop_f] = SPI0Buffer;
  8501  0918  0021               	movlb	1	; select bank1
  8502  0919  0841               	movf	_SPI0Buffer^(0+128),w
  8503  091A  0020               	movlb	0	; select bank0
  8504  091B  00A4               	movwf	??_CC2500_RxData
  8505  091C  0825               	movf	CC2500_RxData@loop_f,w
  8506  091D  3EA0               	addlw	_RF_Data& (0+255)
  8507  091E  0086               	movwf	6
  8508  091F  0187               	clrf	7
  8509  0920  0824               	movf	??_CC2500_RxData,w
  8510  0921  0081               	movwf	1
  8511  0922  3001               	movlw	1
  8512  0923  00A4               	movwf	??_CC2500_RxData
  8513  0924  0824               	movf	??_CC2500_RxData,w
  8514  0925  07A5               	addwf	CC2500_RxData@loop_f,f
  8515  0926  290F               	goto	l5916
  8516  0927                     l5918:	
  8517                           
  8518                           ;CC2500_B1.c: 80: }
  8519                           ;CC2500_B1.c: 81: CC2500_ReadByte();
  8520  0927  3192  225E  3188   	fcall	_CC2500_ReadByte
  8521                           
  8522                           ;CC2500_B1.c: 82: RSSI = SPI0Buffer;
  8523  092A  0021               	movlb	1	; select bank1
  8524  092B  0841               	movf	_SPI0Buffer^(0+128),w
  8525  092C  0020               	movlb	0	; select bank0
  8526  092D  00A4               	movwf	??_CC2500_RxData
  8527  092E  0824               	movf	??_CC2500_RxData,w
  8528  092F  0021               	movlb	1	; select bank1
  8529  0930  00BF               	movwf	_RSSI^(0+128)
  8530                           
  8531                           ;CC2500_B1.c: 83: CC2500_ReadByte();
  8532  0931  3192  225E  3188   	fcall	_CC2500_ReadByte
  8533                           
  8534                           ;CC2500_B1.c: 84: CRC = SPI0Buffer;
  8535  0934  0021               	movlb	1	; select bank1
  8536  0935  0841               	movf	_SPI0Buffer^(0+128),w
  8537  0936  0020               	movlb	0	; select bank0
  8538  0937  00A4               	movwf	??_CC2500_RxData
  8539  0938  0824               	movf	??_CC2500_RxData,w
  8540  0939  0021               	movlb	1	; select bank1
  8541  093A  00B7               	movwf	_CRC^(0+128)
  8542                           
  8543                           ;CC2500_B1.c: 85: RC4 = 1;
  8544  093B  0020               	movlb	0	; select bank0
  8545  093C  160E               	bsf	14,4	;volatile
  8546                           
  8547                           ;CC2500_B1.c: 86: if (CRC & 0x80)
  8548  093D  0021               	movlb	1	; select bank1
  8549  093E  1BB7               	btfsc	_CRC^(0+128),7
  8550                           
  8551                           ;CC2500_B1.c: 87: Receive_OK = 1;
  8552  093F  147C               	bsf	_Receive_OK/(0+8),_Receive_OK& (0+7)
  8553  0940                     l5930:	
  8554                           
  8555                           ;CC2500_B1.c: 88: }
  8556                           ;CC2500_B1.c: 89: CC2500_WriteCommand(0x36);
  8557  0940  3036               	movlw	54
  8558  0941  319F  279F  3188   	fcall	_CC2500_WriteCommand
  8559                           
  8560                           ;CC2500_B1.c: 90: CC2500_WriteCommand(0x3A);
  8561  0944  303A               	movlw	58
  8562  0945  319F  279F         	fcall	_CC2500_WriteCommand
  8563  0947  0008               	return
  8564  0948                     __end_of_CC2500_RxData:	
  8565                           
  8566                           	psect	text36
  8567  120B                     __ptext36:	
  8568 ;; *************** function _CC2500_ReadStatus *****************
  8569 ;; Defined at:
  8570 ;;		line 262 in file "../src/CC2500_B1.c"
  8571 ;; Parameters:    Size  Location     Type
  8572 ;;  status_addr     1    wreg     unsigned char 
  8573 ;; Auto vars:     Size  Location     Type
  8574 ;;  status_addr     1    3[BANK0 ] unsigned char 
  8575 ;; Return value:  Size  Location     Type
  8576 ;;		None               void
  8577 ;; Registers used:
  8578 ;;		wreg, status,2, status,0, pclath, cstack
  8579 ;; Tracked objects:
  8580 ;;		On entry : 0/0
  8581 ;;		On exit  : 0/0
  8582 ;;		Unchanged: 0/0
  8583 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8584 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8585 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8586 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8587 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8588 ;;Total ram usage:        2 bytes
  8589 ;; Hardware stack levels used:    1
  8590 ;; Hardware stack levels required when called:    6
  8591 ;; This function calls:
  8592 ;;		_CC2500_ReadByte
  8593 ;;		_CC2500_WriteByte
  8594 ;; This function is called by:
  8595 ;;		_CC2500_RxData
  8596 ;; This function uses a non-reentrant model
  8597 ;;
  8598                           
  8599                           
  8600                           ;psect for function _CC2500_ReadStatus
  8601  120B                     _CC2500_ReadStatus:	
  8602                           
  8603                           ;incstack = 0
  8604                           ; Regs used in _CC2500_ReadStatus: [wreg+status,2+status,0+pclath+cstack]
  8605                           ;CC2500_ReadStatus@status_addr stored from wreg
  8606  120B  0020               	movlb	0	; select bank0
  8607  120C  00A3               	movwf	CC2500_ReadStatus@status_addr
  8608                           
  8609                           ;CC2500_B1.c: 263: RC4 = 0;
  8610  120D  120E               	bcf	14,4	;volatile
  8611                           
  8612                           ;CC2500_B1.c: 264: SPI0Buffer = status_addr + 0xC0;
  8613  120E  0823               	movf	CC2500_ReadStatus@status_addr,w
  8614  120F  3EC0               	addlw	192
  8615  1210  00A2               	movwf	??_CC2500_ReadStatus
  8616  1211  0822               	movf	??_CC2500_ReadStatus,w
  8617  1212  0021               	movlb	1	; select bank1
  8618  1213  00C1               	movwf	_SPI0Buffer^(0+128)
  8619  1214                     l364:	
  8620                           ;CC2500_B1.c: 266: while (RC2 == 1);
  8621                           
  8622  1214  0020               	movlb	0	; select bank0
  8623  1215  190E               	btfsc	14,2	;volatile
  8624  1216  2A14               	goto	l364
  8625                           
  8626                           ;CC2500_B1.c: 268: CC2500_WriteByte();
  8627  1217  3191  2172  3192   	fcall	_CC2500_WriteByte
  8628                           
  8629                           ;CC2500_B1.c: 269: CC2500_ReadByte();
  8630  121A  3192  225E         	fcall	_CC2500_ReadByte
  8631                           
  8632                           ;CC2500_B1.c: 270: RC4 = 1;
  8633  121C  0020               	movlb	0	; select bank0
  8634  121D  160E               	bsf	14,4	;volatile
  8635                           
  8636                           ;CC2500_B1.c: 272: s_data = SPI0Buffer;
  8637  121E  0021               	movlb	1	; select bank1
  8638  121F  0841               	movf	_SPI0Buffer^(0+128),w
  8639  1220  0020               	movlb	0	; select bank0
  8640  1221  00A2               	movwf	??_CC2500_ReadStatus
  8641  1222  0822               	movf	??_CC2500_ReadStatus,w
  8642  1223  0021               	movlb	1	; select bank1
  8643  1224  00C5               	movwf	_s_data^(0+128)
  8644  1225  0008               	return
  8645  1226                     __end_of_CC2500_ReadStatus:	
  8646                           
  8647                           	psect	text37
  8648  125E                     __ptext37:	
  8649 ;; *************** function _CC2500_ReadByte *****************
  8650 ;; Defined at:
  8651 ;;		line 206 in file "../src/CC2500_B1.c"
  8652 ;; Parameters:    Size  Location     Type
  8653 ;;		None
  8654 ;; Auto vars:     Size  Location     Type
  8655 ;;  loop_b          1    1[BANK0 ] unsigned char 
  8656 ;; Return value:  Size  Location     Type
  8657 ;;		None               void
  8658 ;; Registers used:
  8659 ;;		wreg, status,2, status,0
  8660 ;; Tracked objects:
  8661 ;;		On entry : 0/0
  8662 ;;		On exit  : 0/0
  8663 ;;		Unchanged: 0/0
  8664 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8665 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8666 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8667 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8668 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8669 ;;Total ram usage:        2 bytes
  8670 ;; Hardware stack levels used:    1
  8671 ;; Hardware stack levels required when called:    5
  8672 ;; This function calls:
  8673 ;;		Nothing
  8674 ;; This function is called by:
  8675 ;;		_CC2500_RxData
  8676 ;;		_CC2500_ReadStatus
  8677 ;;		_CC2500_ReadREG
  8678 ;; This function uses a non-reentrant model
  8679 ;;
  8680                           
  8681                           
  8682                           ;psect for function _CC2500_ReadByte
  8683  125E                     _CC2500_ReadByte:	
  8684                           
  8685                           ;CC2500_B1.c: 207: unsigned char loop_b;
  8686                           ;CC2500_B1.c: 208: for (loop_b = 0; loop_b < 8; loop_b++) {
  8687                           
  8688                           ;incstack = 0
  8689                           ; Regs used in _CC2500_ReadByte: [wreg+status,2+status,0]
  8690  125E  0020               	movlb	0	; select bank0
  8691  125F  01A1               	clrf	CC2500_ReadByte@loop_b
  8692  1260                     L11:	
  8693  1260  3008               	movlw	8
  8694  1261  0221               	subwf	CC2500_ReadByte@loop_b,w
  8695  1262  1803               	btfsc	3,0
  8696  1263  0008               	return
  8697                           
  8698                           ;CC2500_B1.c: 209: RC1 = 1;
  8699  1264  148E               	bsf	14,1	;volatile
  8700                           
  8701                           ;CC2500_B1.c: 210: SPI0Buffer <<= 1;
  8702  1265  1003               	clrc
  8703  1266  0021               	movlb	1	; select bank1
  8704  1267  0DC1               	rlf	_SPI0Buffer^(0+128),f
  8705                           
  8706                           ;CC2500_B1.c: 211: if (RC2 == 1)
  8707  1268  0020               	movlb	0	; select bank0
  8708  1269  1D0E               	btfss	14,2	;volatile
  8709  126A  2A6E               	goto	l5682
  8710                           
  8711                           ;CC2500_B1.c: 212: SPI0Buffer |= 0x01;
  8712  126B  0021               	movlb	1	; select bank1
  8713  126C  1441               	bsf	_SPI0Buffer^(0+128),0
  8714  126D  2A74               	goto	l5684
  8715  126E                     l5682:	
  8716                           
  8717                           ;CC2500_B1.c: 213: else
  8718                           ;CC2500_B1.c: 214: SPI0Buffer &= 0xFE;
  8719  126E  30FE               	movlw	254
  8720  126F  0020               	movlb	0	; select bank0
  8721  1270  00A0               	movwf	??_CC2500_ReadByte
  8722  1271  0820               	movf	??_CC2500_ReadByte,w
  8723  1272  0021               	movlb	1	; select bank1
  8724  1273  05C1               	andwf	_SPI0Buffer^(0+128),f
  8725  1274                     l5684:	
  8726                           
  8727                           ;CC2500_B1.c: 215: RC1 = 0;
  8728  1274  0020               	movlb	0	; select bank0
  8729  1275  108E               	bcf	14,1	;volatile
  8730  1276  3001               	movlw	1
  8731  1277  00A0               	movwf	??_CC2500_ReadByte
  8732  1278  0820               	movf	??_CC2500_ReadByte,w
  8733  1279  07A1               	addwf	CC2500_ReadByte@loop_b,f
  8734  127A  2A60               	goto	L11
  8735  127B                     __end_of_CC2500_ReadByte:	
  8736                           
  8737                           	psect	text38
  8738  1E4F                     __ptext38:	
  8739 ;; *************** function _RF_Initialization *****************
  8740 ;; Defined at:
  8741 ;;		line 16 in file "../src/RF_Control_B1.c"
  8742 ;; Parameters:    Size  Location     Type
  8743 ;;		None
  8744 ;; Auto vars:     Size  Location     Type
  8745 ;;		None
  8746 ;; Return value:  Size  Location     Type
  8747 ;;		None               void
  8748 ;; Registers used:
  8749 ;;		wreg, status,2, status,0, pclath, cstack
  8750 ;; Tracked objects:
  8751 ;;		On entry : 0/0
  8752 ;;		On exit  : 0/0
  8753 ;;		Unchanged: 0/0
  8754 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8755 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8756 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8757 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8758 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8759 ;;Total ram usage:        0 bytes
  8760 ;; Hardware stack levels used:    1
  8761 ;; Hardware stack levels required when called:    6
  8762 ;; This function calls:
  8763 ;;		_setRF_Initialization
  8764 ;; This function is called by:
  8765 ;;		_main
  8766 ;; This function uses a non-reentrant model
  8767 ;;
  8768                           
  8769                           
  8770                           ;psect for function _RF_Initialization
  8771  1E4F                     _RF_Initialization:	
  8772                           
  8773                           ;RF_Control_B1.c: 18: setRF_Initialization(1);
  8774                           
  8775                           ;incstack = 0
  8776                           ; Regs used in _RF_Initialization: [wreg+status,2+status,0+pclath+cstack]
  8777  1E4F  3001               	movlw	1
  8778  1E50  3190  2066         	fcall	_setRF_Initialization
  8779  1E52  0008               	return
  8780  1E53                     __end_of_RF_Initialization:	
  8781                           
  8782                           	psect	text39
  8783  1066                     __ptext39:	
  8784 ;; *************** function _setRF_Initialization *****************
  8785 ;; Defined at:
  8786 ;;		line 49 in file "../src/RF_Control_B1.c"
  8787 ;; Parameters:    Size  Location     Type
  8788 ;;  rf              1    wreg     unsigned char 
  8789 ;; Auto vars:     Size  Location     Type
  8790 ;;  rf              1    0[COMMON] unsigned char 
  8791 ;; Return value:  Size  Location     Type
  8792 ;;		None               void
  8793 ;; Registers used:
  8794 ;;		wreg
  8795 ;; Tracked objects:
  8796 ;;		On entry : 0/0
  8797 ;;		On exit  : 0/0
  8798 ;;		Unchanged: 0/0
  8799 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8800 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8801 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8802 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8803 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8804 ;;Total ram usage:        1 bytes
  8805 ;; Hardware stack levels used:    1
  8806 ;; Hardware stack levels required when called:    5
  8807 ;; This function calls:
  8808 ;;		Nothing
  8809 ;; This function is called by:
  8810 ;;		_RF_Initialization
  8811 ;; This function uses a non-reentrant model
  8812 ;;
  8813                           
  8814                           
  8815                           ;psect for function _setRF_Initialization
  8816  1066                     _setRF_Initialization:	
  8817                           
  8818                           ;RF_Control_B1.c: 52: Tx_Length = 21;
  8819                           
  8820                           ;incstack = 0
  8821                           ; Regs used in _setRF_Initialization: [wreg]
  8822  1066  3015               	movlw	21
  8823  1067  0020               	movlb	0	; select bank0
  8824  1068  00A0               	movwf	??_setRF_Initialization
  8825  1069  0820               	movf	??_setRF_Initialization,w
  8826  106A  0021               	movlb	1	; select bank1
  8827  106B  00C2               	movwf	_Tx_Length^(0+128)
  8828  106C  0008               	return
  8829  106D                     __end_of_setRF_Initialization:	
  8830                           
  8831                           	psect	text40
  8832  11F0                     __ptext40:	
  8833 ;; *************** function _Mcu_Initialization *****************
  8834 ;; Defined at:
  8835 ;;		line 30 in file "../src/MCU_B1.c"
  8836 ;; Parameters:    Size  Location     Type
  8837 ;;		None
  8838 ;; Auto vars:     Size  Location     Type
  8839 ;;		None
  8840 ;; Return value:  Size  Location     Type
  8841 ;;		None               void
  8842 ;; Registers used:
  8843 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8844 ;; Tracked objects:
  8845 ;;		On entry : 0/0
  8846 ;;		On exit  : 0/0
  8847 ;;		Unchanged: 0/0
  8848 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8849 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8850 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8851 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8852 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8853 ;;Total ram usage:        1 bytes
  8854 ;; Hardware stack levels used:    1
  8855 ;; Hardware stack levels required when called:    6
  8856 ;; This function calls:
  8857 ;;		_ADC_Set
  8858 ;;		_Fosc_Set
  8859 ;;		_INT_Set
  8860 ;;		_IOC_Set
  8861 ;;		_IO_Set
  8862 ;;		_TMR0_Set
  8863 ;;		_WDT_Set
  8864 ;; This function is called by:
  8865 ;;		_main
  8866 ;; This function uses a non-reentrant model
  8867 ;;
  8868                           
  8869                           
  8870                           ;psect for function _Mcu_Initialization
  8871  11F0                     _Mcu_Initialization:	
  8872                           
  8873                           ;MCU_B1.c: 32: Fosc_Set();
  8874                           
  8875                           ;incstack = 0
  8876                           ; Regs used in _Mcu_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8877  11F0  319E  264B  3191   	fcall	_Fosc_Set
  8878                           
  8879                           ;MCU_B1.c: 34: IO_Set();
  8880  11F3  3191  21BD  3191   	fcall	_IO_Set
  8881                           
  8882                           ;MCU_B1.c: 36: TMR0_Set();
  8883  11F6  319F  2748  3191   	fcall	_TMR0_Set
  8884                           
  8885                           ;MCU_B1.c: 38: ;;
  8886                           ;MCU_B1.c: 40: ADC_Set();
  8887  11F9  319E  2675  3191   	fcall	_ADC_Set
  8888                           
  8889                           ;MCU_B1.c: 44: INT_Set();
  8890  11FC  319E  265C  3191   	fcall	_INT_Set
  8891                           
  8892                           ;MCU_B1.c: 46: IOC_Set();
  8893  11FF  319F  273B  3191   	fcall	_IOC_Set
  8894                           
  8895                           ;MCU_B1.c: 48: ;;
  8896                           ;MCU_B1.c: 50: ;;
  8897                           ;MCU_B1.c: 52: Memory=&VarMemory;
  8898  1202  3020               	movlw	_VarMemory& (0+255)
  8899  1203  0020               	movlb	0	; select bank0
  8900  1204  00A1               	movwf	??_Mcu_Initialization
  8901  1205  0821               	movf	??_Mcu_Initialization,w
  8902  1206  0021               	movlb	1	; select bank1
  8903  1207  00EA               	movwf	_Memory^(0+128)
  8904                           
  8905                           ;MCU_B1.c: 54: WDT_Set();
  8906  1208  3191  215A         	fcall	_WDT_Set
  8907  120A  0008               	return
  8908  120B                     __end_of_Mcu_Initialization:	
  8909                           
  8910                           	psect	text41
  8911  115A                     __ptext41:	
  8912 ;; *************** function _WDT_Set *****************
  8913 ;; Defined at:
  8914 ;;		line 899 in file "../src/MCU_B1.c"
  8915 ;; Parameters:    Size  Location     Type
  8916 ;;		None
  8917 ;; Auto vars:     Size  Location     Type
  8918 ;;		None
  8919 ;; Return value:  Size  Location     Type
  8920 ;;		None               void
  8921 ;; Registers used:
  8922 ;;		wreg, fsr1l, fsr1h
  8923 ;; Tracked objects:
  8924 ;;		On entry : 0/0
  8925 ;;		On exit  : 0/0
  8926 ;;		Unchanged: 0/0
  8927 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8928 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8929 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8930 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8931 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8932 ;;Total ram usage:        1 bytes
  8933 ;; Hardware stack levels used:    1
  8934 ;; Hardware stack levels required when called:    5
  8935 ;; This function calls:
  8936 ;;		Nothing
  8937 ;; This function is called by:
  8938 ;;		_Mcu_Initialization
  8939 ;; This function uses a non-reentrant model
  8940 ;;
  8941                           
  8942                           
  8943                           ;psect for function _WDT_Set
  8944  115A                     _WDT_Set:	
  8945                           
  8946                           ;MCU_B1.c: 900: WDTCON = 0b00010111;;
  8947                           
  8948                           ;incstack = 0
  8949                           ; Regs used in _WDT_Set: [wregfsr1]
  8950  115A  3017               	movlw	23
  8951  115B  0021               	movlb	1	; select bank1
  8952  115C  0097               	movwf	23	;volatile
  8953                           
  8954                           ;MCU_B1.c: 901: WDT = &_WDT;
  8955  115D  30E3               	movlw	__WDT& (0+255)
  8956  115E  0020               	movlb	0	; select bank0
  8957  115F  00A0               	movwf	??_WDT_Set
  8958  1160  0820               	movf	??_WDT_Set,w
  8959  1161  0021               	movlb	1	; select bank1
  8960  1162  00E8               	movwf	_WDT^(0+128)
  8961                           
  8962                           ;MCU_B1.c: 902: WDT->Enable = 1;
  8963  1163  0868               	movf	_WDT^(0+128),w
  8964  1164  0086               	movwf	6
  8965  1165  0187               	clrf	7
  8966  1166  1401               	bsf	1,0
  8967                           
  8968                           ;MCU_B1.c: 903: WDT->Count = 10;
  8969  1167  300A               	movlw	10
  8970  1168  0020               	movlb	0	; select bank0
  8971  1169  00A0               	movwf	??_WDT_Set
  8972  116A  0021               	movlb	1	; select bank1
  8973  116B  0A68               	incf	_WDT^(0+128),w
  8974  116C  0086               	movwf	6
  8975  116D  0187               	clrf	7
  8976  116E  0020               	movlb	0	; select bank0
  8977  116F  0820               	movf	??_WDT_Set,w
  8978  1170  0081               	movwf	1
  8979  1171  0008               	return
  8980  1172                     __end_of_WDT_Set:	
  8981                           
  8982                           	psect	text42
  8983  1F48                     __ptext42:	
  8984 ;; *************** function _TMR0_Set *****************
  8985 ;; Defined at:
  8986 ;;		line 128 in file "../src/MCU_B1.c"
  8987 ;; Parameters:    Size  Location     Type
  8988 ;;		None
  8989 ;; Auto vars:     Size  Location     Type
  8990 ;;		None
  8991 ;; Return value:  Size  Location     Type
  8992 ;;		None               void
  8993 ;; Registers used:
  8994 ;;		wreg, status,2
  8995 ;; Tracked objects:
  8996 ;;		On entry : 0/0
  8997 ;;		On exit  : 0/0
  8998 ;;		Unchanged: 0/0
  8999 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9000 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9001 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9002 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9003 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9004 ;;Total ram usage:        1 bytes
  9005 ;; Hardware stack levels used:    1
  9006 ;; Hardware stack levels required when called:    5
  9007 ;; This function calls:
  9008 ;;		Nothing
  9009 ;; This function is called by:
  9010 ;;		_Mcu_Initialization
  9011 ;; This function uses a non-reentrant model
  9012 ;;
  9013                           
  9014                           
  9015                           ;psect for function _TMR0_Set
  9016  1F48                     _TMR0_Set:	
  9017                           
  9018                           ;MCU_B1.c: 129: Timer0 = &VarTimer0;
  9019                           
  9020                           ;incstack = 0
  9021                           ; Regs used in _TMR0_Set: [wreg+status,2]
  9022  1F48  305A               	movlw	_VarTimer0& (0+255)
  9023  1F49  0020               	movlb	0	; select bank0
  9024  1F4A  00A0               	movwf	??_TMR0_Set
  9025  1F4B  0820               	movf	??_TMR0_Set,w
  9026  1F4C  0021               	movlb	1	; select bank1
  9027  1F4D  00E7               	movwf	_Timer0^(0+128)
  9028                           
  9029                           ;MCU_B1.c: 130: OPTION_REG = 0x00;
  9030  1F4E  0195               	clrf	21	;volatile
  9031                           
  9032                           ;MCU_B1.c: 131: TMR0 = (256-90);
  9033  1F4F  30A6               	movlw	166
  9034  1F50  0020               	movlb	0	; select bank0
  9035  1F51  0095               	movwf	21	;volatile
  9036                           
  9037                           ;MCU_B1.c: 132: TMR0IE = 1;
  9038  1F52  168B               	bsf	11,5	;volatile
  9039                           
  9040                           ;MCU_B1.c: 133: GIE = 1;
  9041  1F53  178B               	bsf	11,7	;volatile
  9042  1F54  0008               	return
  9043  1F55                     __end_of_TMR0_Set:	
  9044                           
  9045                           	psect	text43
  9046  11BD                     __ptext43:	
  9047 ;; *************** function _IO_Set *****************
  9048 ;; Defined at:
  9049 ;;		line 62 in file "../src/MCU_B1.c"
  9050 ;; Parameters:    Size  Location     Type
  9051 ;;		None
  9052 ;; Auto vars:     Size  Location     Type
  9053 ;;		None
  9054 ;; Return value:  Size  Location     Type
  9055 ;;		None               void
  9056 ;; Registers used:
  9057 ;;		wreg, status,2
  9058 ;; Tracked objects:
  9059 ;;		On entry : 0/0
  9060 ;;		On exit  : 0/0
  9061 ;;		Unchanged: 0/0
  9062 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9063 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9064 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9065 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9066 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9067 ;;Total ram usage:        0 bytes
  9068 ;; Hardware stack levels used:    1
  9069 ;; Hardware stack levels required when called:    5
  9070 ;; This function calls:
  9071 ;;		Nothing
  9072 ;; This function is called by:
  9073 ;;		_Mcu_Initialization
  9074 ;; This function uses a non-reentrant model
  9075 ;;
  9076                           
  9077                           
  9078                           ;psect for function _IO_Set
  9079  11BD                     _IO_Set:	
  9080                           
  9081                           ;MCU_B1.c: 90: TRISA = 0b01110111;;
  9082                           
  9083                           ;incstack = 0
  9084                           ; Regs used in _IO_Set: [wreg+status,2]
  9085  11BD  3077               	movlw	119
  9086  11BE  0021               	movlb	1	; select bank1
  9087  11BF  008C               	movwf	12	;volatile
  9088                           
  9089                           ;MCU_B1.c: 91: TRISB = 0b00000111;;
  9090  11C0  3007               	movlw	7
  9091  11C1  008D               	movwf	13	;volatile
  9092                           
  9093                           ;MCU_B1.c: 92: TRISC = 0b00001100;;
  9094  11C2  300C               	movlw	12
  9095  11C3  008E               	movwf	14	;volatile
  9096                           
  9097                           ;MCU_B1.c: 93: LATA = 0b00000000;;
  9098  11C4  0022               	movlb	2	; select bank2
  9099  11C5  018C               	clrf	12	;volatile
  9100                           
  9101                           ;MCU_B1.c: 94: LATB = 0b00000010;;
  9102  11C6  3002               	movlw	2
  9103  11C7  008D               	movwf	13	;volatile
  9104                           
  9105                           ;MCU_B1.c: 95: LATC = 0b00000000;;
  9106  11C8  018E               	clrf	14	;volatile
  9107                           
  9108                           ;MCU_B1.c: 96: ANSELA = 0b00100010;;
  9109  11C9  3022               	movlw	34
  9110  11CA  0023               	movlb	3	; select bank3
  9111  11CB  008C               	movwf	12	;volatile
  9112                           
  9113                           ;MCU_B1.c: 97: ANSELB = 0b00000000;;
  9114  11CC  018D               	clrf	13	;volatile
  9115                           
  9116                           ;MCU_B1.c: 98: ANSELC = 0b00000000;;
  9117  11CD  018E               	clrf	14	;volatile
  9118                           
  9119                           ;MCU_B1.c: 99: PORTA = 0b01110111;;
  9120  11CE  3077               	movlw	119
  9121  11CF  0020               	movlb	0	; select bank0
  9122  11D0  008C               	movwf	12	;volatile
  9123                           
  9124                           ;MCU_B1.c: 100: PORTB = 0b00000111;;
  9125  11D1  3007               	movlw	7
  9126  11D2  008D               	movwf	13	;volatile
  9127                           
  9128                           ;MCU_B1.c: 101: PORTC = 0b00001100;;
  9129  11D3  300C               	movlw	12
  9130  11D4  008E               	movwf	14	;volatile
  9131  11D5  0008               	return
  9132  11D6                     __end_of_IO_Set:	
  9133                           
  9134                           	psect	text44
  9135  1F3B                     __ptext44:	
  9136 ;; *************** function _IOC_Set *****************
  9137 ;; Defined at:
  9138 ;;		line 268 in file "../src/MCU_B1.c"
  9139 ;; Parameters:    Size  Location     Type
  9140 ;;		None
  9141 ;; Auto vars:     Size  Location     Type
  9142 ;;		None
  9143 ;; Return value:  Size  Location     Type
  9144 ;;		None               void
  9145 ;; Registers used:
  9146 ;;		wreg, status,2
  9147 ;; Tracked objects:
  9148 ;;		On entry : 0/0
  9149 ;;		On exit  : 0/0
  9150 ;;		Unchanged: 0/0
  9151 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9152 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9153 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9154 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9155 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9156 ;;Total ram usage:        0 bytes
  9157 ;; Hardware stack levels used:    1
  9158 ;; Hardware stack levels required when called:    5
  9159 ;; This function calls:
  9160 ;;		Nothing
  9161 ;; This function is called by:
  9162 ;;		_Mcu_Initialization
  9163 ;; This function uses a non-reentrant model
  9164 ;;
  9165                           
  9166                           
  9167                           ;psect for function _IOC_Set
  9168  1F3B                     _IOC_Set:	
  9169                           
  9170                           ;MCU_B1.c: 269: WPUB2 = 0;
  9171                           
  9172                           ;incstack = 0
  9173                           ; Regs used in _IOC_Set: [wreg+status,2]
  9174  1F3B  0024               	movlb	4	; select bank4
  9175  1F3C  110D               	bcf	13,2	;volatile
  9176                           
  9177                           ;MCU_B1.c: 271: IOCBP = 0b00000100;
  9178  1F3D  3004               	movlw	4
  9179  1F3E  0027               	movlb	7	; select bank7
  9180  1F3F  0094               	movwf	20	;volatile
  9181                           
  9182                           ;MCU_B1.c: 272: IOCBN = 0b00000100;
  9183  1F40  3004               	movlw	4
  9184  1F41  0095               	movwf	21	;volatile
  9185                           
  9186                           ;MCU_B1.c: 287: IOCBF = 0b00000000;
  9187  1F42  0196               	clrf	22	;volatile
  9188                           
  9189                           ;MCU_B1.c: 289: IOCIE = 1;
  9190  1F43  158B               	bsf	11,3	;volatile
  9191                           
  9192                           ;MCU_B1.c: 290: IOCIF = 0;
  9193  1F44  100B               	bcf	11,0	;volatile
  9194                           
  9195                           ;MCU_B1.c: 291: PEIE = 1;
  9196  1F45  170B               	bsf	11,6	;volatile
  9197                           
  9198                           ;MCU_B1.c: 292: GIE = 1;
  9199  1F46  178B               	bsf	11,7	;volatile
  9200  1F47  0008               	return
  9201  1F48                     __end_of_IOC_Set:	
  9202                           
  9203                           	psect	text45
  9204  1E5C                     __ptext45:	
  9205 ;; *************** function _INT_Set *****************
  9206 ;; Defined at:
  9207 ;;		line 240 in file "../src/MCU_B1.c"
  9208 ;; Parameters:    Size  Location     Type
  9209 ;;		None
  9210 ;; Auto vars:     Size  Location     Type
  9211 ;;		None
  9212 ;; Return value:  Size  Location     Type
  9213 ;;		None               void
  9214 ;; Registers used:
  9215 ;;		None
  9216 ;; Tracked objects:
  9217 ;;		On entry : 0/0
  9218 ;;		On exit  : 0/0
  9219 ;;		Unchanged: 0/0
  9220 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9221 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9222 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9223 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9224 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9225 ;;Total ram usage:        0 bytes
  9226 ;; Hardware stack levels used:    1
  9227 ;; Hardware stack levels required when called:    5
  9228 ;; This function calls:
  9229 ;;		Nothing
  9230 ;; This function is called by:
  9231 ;;		_Mcu_Initialization
  9232 ;; This function uses a non-reentrant model
  9233 ;;
  9234                           
  9235                           
  9236                           ;psect for function _INT_Set
  9237  1E5C                     _INT_Set:	
  9238                           
  9239                           ;MCU_B1.c: 241: WPUB0 = 0;
  9240                           
  9241                           ;incstack = 0
  9242                           ; Regs used in _INT_Set: []
  9243  1E5C  0024               	movlb	4	; select bank4
  9244  1E5D  100D               	bcf	13,0	;volatile
  9245                           
  9246                           ;MCU_B1.c: 242: INTE = 1;
  9247  1E5E  160B               	bsf	11,4	;volatile
  9248                           
  9249                           ;MCU_B1.c: 243: PEIE = 1;
  9250  1E5F  170B               	bsf	11,6	;volatile
  9251                           
  9252                           ;MCU_B1.c: 244: GIE = 1;
  9253  1E60  178B               	bsf	11,7	;volatile
  9254  1E61  0008               	return
  9255  1E62                     __end_of_INT_Set:	
  9256                           
  9257                           	psect	text46
  9258  1E4B                     __ptext46:	
  9259 ;; *************** function _Fosc_Set *****************
  9260 ;; Defined at:
  9261 ;;		line 58 in file "../src/MCU_B1.c"
  9262 ;; Parameters:    Size  Location     Type
  9263 ;;		None
  9264 ;; Auto vars:     Size  Location     Type
  9265 ;;		None
  9266 ;; Return value:  Size  Location     Type
  9267 ;;		None               void
  9268 ;; Registers used:
  9269 ;;		wreg
  9270 ;; Tracked objects:
  9271 ;;		On entry : 0/0
  9272 ;;		On exit  : 0/0
  9273 ;;		Unchanged: 0/0
  9274 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9275 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9276 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9277 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9278 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9279 ;;Total ram usage:        0 bytes
  9280 ;; Hardware stack levels used:    1
  9281 ;; Hardware stack levels required when called:    5
  9282 ;; This function calls:
  9283 ;;		Nothing
  9284 ;; This function is called by:
  9285 ;;		_Mcu_Initialization
  9286 ;; This function uses a non-reentrant model
  9287 ;;
  9288                           
  9289                           
  9290                           ;psect for function _Fosc_Set
  9291  1E4B                     _Fosc_Set:	
  9292                           
  9293                           ;MCU_B1.c: 59: OSCCON = 0x78;
  9294                           
  9295                           ;incstack = 0
  9296                           ; Regs used in _Fosc_Set: [wreg]
  9297  1E4B  3078               	movlw	120
  9298  1E4C  0021               	movlb	1	; select bank1
  9299  1E4D  0099               	movwf	25	;volatile
  9300  1E4E  0008               	return
  9301  1E4F                     __end_of_Fosc_Set:	
  9302                           
  9303                           	psect	text47
  9304  1E75                     __ptext47:	
  9305 ;; *************** function _ADC_Set *****************
  9306 ;; Defined at:
  9307 ;;		line 314 in file "../src/MCU_B1.c"
  9308 ;; Parameters:    Size  Location     Type
  9309 ;;		None
  9310 ;; Auto vars:     Size  Location     Type
  9311 ;;		None
  9312 ;; Return value:  Size  Location     Type
  9313 ;;		None               void
  9314 ;; Registers used:
  9315 ;;		wreg
  9316 ;; Tracked objects:
  9317 ;;		On entry : 0/0
  9318 ;;		On exit  : 0/0
  9319 ;;		Unchanged: 0/0
  9320 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9321 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9322 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9323 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9324 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9325 ;;Total ram usage:        0 bytes
  9326 ;; Hardware stack levels used:    1
  9327 ;; Hardware stack levels required when called:    5
  9328 ;; This function calls:
  9329 ;;		Nothing
  9330 ;; This function is called by:
  9331 ;;		_Mcu_Initialization
  9332 ;; This function uses a non-reentrant model
  9333 ;;
  9334                           
  9335                           
  9336                           ;psect for function _ADC_Set
  9337  1E75                     _ADC_Set:	
  9338                           
  9339                           ;MCU_B1.c: 315: ADCON1 = 0xf2;
  9340                           
  9341                           ;incstack = 0
  9342                           ; Regs used in _ADC_Set: [wreg]
  9343  1E75  30F2               	movlw	242
  9344  1E76  0021               	movlb	1	; select bank1
  9345  1E77  009E               	movwf	30	;volatile
  9346                           
  9347                           ;MCU_B1.c: 316: FVRCON = 0xc0;
  9348  1E78  30C0               	movlw	192
  9349  1E79  0022               	movlb	2	; select bank2
  9350  1E7A  0097               	movwf	23	;volatile
  9351  1E7B  0008               	return
  9352  1E7C                     __end_of_ADC_Set:	
  9353                           
  9354                           	psect	text48
  9355  1F15                     __ptext48:	
  9356 ;; *************** function _LED_Main *****************
  9357 ;; Defined at:
  9358 ;;		line 51 in file "../src/LED_B1.c"
  9359 ;; Parameters:    Size  Location     Type
  9360 ;;		None
  9361 ;; Auto vars:     Size  Location     Type
  9362 ;;		None
  9363 ;; Return value:  Size  Location     Type
  9364 ;;		None               void
  9365 ;; Registers used:
  9366 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9367 ;; Tracked objects:
  9368 ;;		On entry : 0/0
  9369 ;;		On exit  : 0/0
  9370 ;;		Unchanged: 0/0
  9371 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9372 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9373 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9374 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9375 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9376 ;;Total ram usage:        0 bytes
  9377 ;; Hardware stack levels used:    1
  9378 ;; Hardware stack levels required when called:    7
  9379 ;; This function calls:
  9380 ;;		_setLED_Main
  9381 ;; This function is called by:
  9382 ;;		_main
  9383 ;; This function uses a non-reentrant model
  9384 ;;
  9385                           
  9386                           
  9387                           ;psect for function _LED_Main
  9388  1F15                     _LED_Main:	
  9389                           
  9390                           ;LED_B1.c: 54: setLED_Main(1);
  9391                           
  9392                           ;incstack = 0
  9393                           ; Regs used in _LED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9394  1F15  3001               	movlw	1
  9395  1F16  3195  251C  319F   	fcall	_setLED_Main
  9396                           
  9397                           ;LED_B1.c: 57: setLED_Main(2);
  9398  1F19  3002               	movlw	2
  9399  1F1A  3195  251C  319F   	fcall	_setLED_Main
  9400                           
  9401                           ;LED_B1.c: 63: setLED_Main(99);
  9402  1F1D  3063               	movlw	99
  9403  1F1E  3195  251C         	fcall	_setLED_Main
  9404  1F20  0008               	return
  9405  1F21                     __end_of_LED_Main:	
  9406                           
  9407                           	psect	text49
  9408  151C                     __ptext49:	
  9409 ;; *************** function _setLED_Main *****************
  9410 ;; Defined at:
  9411 ;;		line 215 in file "../src/LED_B1.c"
  9412 ;; Parameters:    Size  Location     Type
  9413 ;;  led             1    wreg     unsigned char 
  9414 ;; Auto vars:     Size  Location     Type
  9415 ;;  led             1    4[BANK0 ] unsigned char 
  9416 ;; Return value:  Size  Location     Type
  9417 ;;		None               void
  9418 ;; Registers used:
  9419 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9420 ;; Tracked objects:
  9421 ;;		On entry : 0/0
  9422 ;;		On exit  : 0/0
  9423 ;;		Unchanged: 0/0
  9424 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9425 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9426 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9427 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9428 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9429 ;;Total ram usage:        3 bytes
  9430 ;; Hardware stack levels used:    1
  9431 ;; Hardware stack levels required when called:    6
  9432 ;; This function calls:
  9433 ;;		_LedPointSelect
  9434 ;; This function is called by:
  9435 ;;		_LED_Main
  9436 ;; This function uses a non-reentrant model
  9437 ;;
  9438                           
  9439                           
  9440                           ;psect for function _setLED_Main
  9441  151C                     _setLED_Main:	
  9442                           
  9443                           ;incstack = 0
  9444                           ; Regs used in _setLED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9445                           ;setLED_Main@led stored from wreg
  9446  151C  0020               	movlb	0	; select bank0
  9447  151D  00A4               	movwf	setLED_Main@led
  9448                           
  9449                           ;LED_B1.c: 217: LedPointSelect(led);
  9450  151E  0824               	movf	setLED_Main@led,w
  9451  151F  3192  22FB  3195   	fcall	_LedPointSelect
  9452                           
  9453                           ;LED_B1.c: 218: if(LED->GO)
  9454  1522  0021               	movlb	1	; select bank1
  9455  1523  083C               	movf	_LED^(0+128),w
  9456  1524  0086               	movwf	6
  9457  1525  0187               	clrf	7
  9458  1526  1C81               	btfss	1,1
  9459  1527  0008               	return
  9460                           
  9461                           ;LED_B1.c: 219: {
  9462                           ;LED_B1.c: 220: LED->Time++;
  9463  1528  0A3C               	incf	_LED^(0+128),w
  9464  1529  0086               	movwf	6
  9465  152A  0187               	clrf	7
  9466  152B  3001               	movlw	1
  9467  152C  0781               	addwf	1,f
  9468  152D  3141               	addfsr 1,1
  9469  152E  1803               	skipnc
  9470  152F  0A81               	incf	1,f
  9471                           
  9472                           ;LED_B1.c: 221: if(LED->Time >= 500/10)
  9473  1530  0A3C               	incf	_LED^(0+128),w
  9474  1531  0086               	movwf	6
  9475  1532  0187               	clrf	7
  9476  1533  3F40               	moviw [0]fsr1
  9477  1534  0020               	movlb	0	; select bank0
  9478  1535  00A2               	movwf	??_setLED_Main
  9479  1536  3F41               	moviw [1]fsr1
  9480  1537  00A3               	movwf	??_setLED_Main+1
  9481  1538  3000               	movlw	0
  9482  1539  0223               	subwf	??_setLED_Main+1,w
  9483  153A  3032               	movlw	50
  9484  153B  1903               	skipnz
  9485  153C  0222               	subwf	??_setLED_Main,w
  9486  153D  1C03               	skipc
  9487  153E  0008               	return
  9488                           
  9489                           ;LED_B1.c: 222: {
  9490                           ;LED_B1.c: 223: LED->Time=0;
  9491  153F  0021               	movlb	1	; select bank1
  9492  1540  0A3C               	incf	_LED^(0+128),w
  9493  1541  0086               	movwf	6
  9494  1542  0187               	clrf	7
  9495  1543  3000               	movlw	0
  9496  1544  3FC0               	movwi [0]fsr1
  9497  1545  3FC1               	movwi [1]fsr1
  9498                           
  9499                           ;LED_B1.c: 225: if(led == 1)
  9500  1546  0020               	movlb	0	; select bank0
  9501  1547  0824               	movf	setLED_Main@led,w
  9502  1548  3A01               	xorlw	1
  9503  1549  1D03               	skipz
  9504  154A  2D4E               	goto	l6464
  9505                           
  9506                           ;LED_B1.c: 226: {
  9507                           ;LED_B1.c: 227: RA3=~RA3;
  9508  154B  3008               	movlw	8
  9509  154C  068C               	xorwf	12,f
  9510                           
  9511                           ;LED_B1.c: 228: }
  9512  154D  0008               	return
  9513  154E                     l6464:	
  9514                           
  9515                           ;LED_B1.c: 231: else if(led == 2)
  9516  154E  0824               	movf	setLED_Main@led,w
  9517  154F  3A02               	xorlw	2
  9518  1550  1D03               	skipz
  9519  1551  2D55               	goto	l6468
  9520                           
  9521                           ;LED_B1.c: 232: {
  9522                           ;LED_B1.c: 233: RC7=~RC7;
  9523  1552  3080               	movlw	128
  9524  1553  068E               	xorwf	14,f
  9525                           
  9526                           ;LED_B1.c: 234: }
  9527  1554  0008               	return
  9528  1555                     l6468:	
  9529                           
  9530                           ;LED_B1.c: 243: else if(led == 99)
  9531  1555  0824               	movf	setLED_Main@led,w
  9532  1556  3A63               	xorlw	99
  9533  1557  1D03               	skipz
  9534  1558  0008               	return
  9535                           
  9536                           ;LED_B1.c: 244: {
  9537                           ;LED_B1.c: 245: RB5=~RB5;
  9538  1559  3020               	movlw	32
  9539  155A  068D               	xorwf	13,f
  9540  155B  0008               	return
  9541  155C                     __end_of_setLED_Main:	
  9542                           
  9543                           	psect	text50
  9544  1F09                     __ptext50:	
  9545 ;; *************** function _LED_Initialization *****************
  9546 ;; Defined at:
  9547 ;;		line 35 in file "../src/LED_B1.c"
  9548 ;; Parameters:    Size  Location     Type
  9549 ;;		None
  9550 ;; Auto vars:     Size  Location     Type
  9551 ;;		None
  9552 ;; Return value:  Size  Location     Type
  9553 ;;		None               void
  9554 ;; Registers used:
  9555 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9556 ;; Tracked objects:
  9557 ;;		On entry : 0/0
  9558 ;;		On exit  : 0/0
  9559 ;;		Unchanged: 0/0
  9560 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9561 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9562 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9563 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9564 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9565 ;;Total ram usage:        0 bytes
  9566 ;; Hardware stack levels used:    1
  9567 ;; Hardware stack levels required when called:    8
  9568 ;; This function calls:
  9569 ;;		_setLED_Initialization
  9570 ;; This function is called by:
  9571 ;;		_main
  9572 ;; This function uses a non-reentrant model
  9573 ;;
  9574                           
  9575                           
  9576                           ;psect for function _LED_Initialization
  9577  1F09                     _LED_Initialization:	
  9578                           
  9579                           ;LED_B1.c: 38: setLED_Initialization(1);
  9580                           
  9581                           ;incstack = 0
  9582                           ; Regs used in _LED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9583  1F09  3001               	movlw	1
  9584  1F0A  3190  208F  319F   	fcall	_setLED_Initialization
  9585                           
  9586                           ;LED_B1.c: 41: setLED_Initialization(2);
  9587  1F0D  3002               	movlw	2
  9588  1F0E  3190  208F  319F   	fcall	_setLED_Initialization
  9589                           
  9590                           ;LED_B1.c: 47: setLED_Initialization(99);
  9591  1F11  3063               	movlw	99
  9592  1F12  3190  208F         	fcall	_setLED_Initialization
  9593  1F14  0008               	return
  9594  1F15                     __end_of_LED_Initialization:	
  9595                           
  9596                           	psect	text51
  9597  108F                     __ptext51:	
  9598 ;; *************** function _setLED_Initialization *****************
  9599 ;; Defined at:
  9600 ;;		line 67 in file "../src/LED_B1.c"
  9601 ;; Parameters:    Size  Location     Type
  9602 ;;  led             1    wreg     unsigned char 
  9603 ;; Auto vars:     Size  Location     Type
  9604 ;;  led             1    4[BANK0 ] unsigned char 
  9605 ;; Return value:  Size  Location     Type
  9606 ;;		None               void
  9607 ;; Registers used:
  9608 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9609 ;; Tracked objects:
  9610 ;;		On entry : 0/0
  9611 ;;		On exit  : 0/0
  9612 ;;		Unchanged: 0/0
  9613 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9614 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9615 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9616 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9617 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9618 ;;Total ram usage:        1 bytes
  9619 ;; Hardware stack levels used:    1
  9620 ;; Hardware stack levels required when called:    7
  9621 ;; This function calls:
  9622 ;;		_LedPointSelect
  9623 ;;		_setLED
  9624 ;; This function is called by:
  9625 ;;		_LED_Initialization
  9626 ;; This function uses a non-reentrant model
  9627 ;;
  9628                           
  9629                           
  9630                           ;psect for function _setLED_Initialization
  9631  108F                     _setLED_Initialization:	
  9632                           
  9633                           ;incstack = 0
  9634                           ; Regs used in _setLED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  9635                           ;setLED_Initialization@led stored from wreg
  9636  108F  0020               	movlb	0	; select bank0
  9637  1090  00A4               	movwf	setLED_Initialization@led
  9638                           
  9639                           ;LED_B1.c: 69: LedPointSelect(led);
  9640  1091  0824               	movf	setLED_Initialization@led,w
  9641  1092  3192  22FB  3190   	fcall	_LedPointSelect
  9642                           
  9643                           ;LED_B1.c: 70: LED->Enable=1;
  9644  1095  0021               	movlb	1	; select bank1
  9645  1096  083C               	movf	_LED^(0+128),w
  9646  1097  0086               	movwf	6
  9647  1098  0187               	clrf	7
  9648  1099  1401               	bsf	1,0
  9649                           
  9650                           ;LED_B1.c: 71: setLED(led,0);
  9651  109A  0020               	movlb	0	; select bank0
  9652  109B  01A2               	clrf	setLED@command
  9653  109C  0824               	movf	setLED_Initialization@led,w
  9654  109D  3188  208C         	fcall	_setLED
  9655  109F  0008               	return
  9656  10A0                     __end_of_setLED_Initialization:	
  9657                           
  9658                           	psect	text52
  9659  15E0                     __ptext52:	
  9660 ;; *************** function _Flash_Memory_Main *****************
  9661 ;; Defined at:
  9662 ;;		line 793 in file "../src/MCU_B1.c"
  9663 ;; Parameters:    Size  Location     Type
  9664 ;;		None
  9665 ;; Auto vars:     Size  Location     Type
  9666 ;;		None
  9667 ;; Return value:  Size  Location     Type
  9668 ;;		None               void
  9669 ;; Registers used:
  9670 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9671 ;; Tracked objects:
  9672 ;;		On entry : 0/0
  9673 ;;		On exit  : 0/0
  9674 ;;		Unchanged: 0/0
  9675 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9676 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9677 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9678 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9679 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9680 ;;Total ram usage:        0 bytes
  9681 ;; Hardware stack levels used:    1
  9682 ;; Hardware stack levels required when called:    8
  9683 ;; This function calls:
  9684 ;;		_Flash_Memory_Modify
  9685 ;; This function is called by:
  9686 ;;		_main
  9687 ;; This function uses a non-reentrant model
  9688 ;;
  9689                           
  9690                           
  9691                           ;psect for function _Flash_Memory_Main
  9692  15E0                     _Flash_Memory_Main:	
  9693                           
  9694                           ;MCU_B1.c: 794: if (Memory->GO) {
  9695                           
  9696                           ;incstack = 0
  9697                           ; Regs used in _Flash_Memory_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9698  15E0  0021               	movlb	1	; select bank1
  9699  15E1  086A               	movf	_Memory^(0+128),w
  9700  15E2  3E24               	addlw	36
  9701  15E3  0086               	movwf	6
  9702  15E4  3002               	movlw	2	; select bank4/5
  9703  15E5  0087               	movwf	7
  9704  15E6  1C81               	btfss	1,1
  9705  15E7  0008               	return
  9706                           
  9707                           ;MCU_B1.c: 795: if (Memory->Modify) {
  9708  15E8  086A               	movf	_Memory^(0+128),w
  9709  15E9  3E24               	addlw	36
  9710  15EA  0086               	movwf	6
  9711  15EB  3002               	movlw	2	; select bank4/5
  9712  15EC  0087               	movwf	7
  9713  15ED  1C01               	btfss	1,0
  9714  15EE  2E1D               	goto	l6922
  9715                           
  9716                           ;MCU_B1.c: 796: Memory->Time++;
  9717  15EF  086A               	movf	_Memory^(0+128),w
  9718  15F0  3E22               	addlw	34
  9719  15F1  0086               	movwf	6
  9720  15F2  3002               	movlw	2	; select bank4/5
  9721  15F3  0087               	movwf	7
  9722  15F4  3001               	movlw	1
  9723  15F5  0781               	addwf	1,f
  9724  15F6  3141               	addfsr 1,1
  9725  15F7  1803               	skipnc
  9726  15F8  0A81               	incf	1,f
  9727                           
  9728                           ;MCU_B1.c: 797: if (Memory->Time == 25)
  9729  15F9  086A               	movf	_Memory^(0+128),w
  9730  15FA  3E22               	addlw	34
  9731  15FB  0086               	movwf	6
  9732  15FC  3002               	movlw	2	; select bank4/5
  9733  15FD  0087               	movwf	7
  9734  15FE  3F40               	moviw [0]fsr1
  9735  15FF  3A19               	xorlw	25
  9736  1600  1D03               	skipz
  9737  1601  2E04               	goto	u6145
  9738  1602  3F41               	moviw [1]fsr1
  9739  1603  3A00               	xorlw	0
  9740  1604                     u6145:	
  9741  1604  1D03               	skipz
  9742  1605  0008               	return
  9743                           
  9744                           ;MCU_B1.c: 798: {
  9745                           ;MCU_B1.c: 799: Memory->Time = 0;
  9746  1606  086A               	movf	_Memory^(0+128),w
  9747  1607  3E22               	addlw	34
  9748  1608  0086               	movwf	6
  9749  1609  3002               	movlw	2	; select bank4/5
  9750  160A  0087               	movwf	7
  9751  160B  3000               	movlw	0
  9752  160C  3FC0               	movwi [0]fsr1
  9753  160D  3FC1               	movwi [1]fsr1
  9754                           
  9755                           ;MCU_B1.c: 800: Memory->Modify = 0;
  9756  160E  086A               	movf	_Memory^(0+128),w
  9757  160F  3E24               	addlw	36
  9758  1610  0086               	movwf	6
  9759  1611  3002               	movlw	2	; select bank4/5
  9760  1612  0087               	movwf	7
  9761  1613  1001               	bcf	1,0
  9762                           
  9763                           ;MCU_B1.c: 801: Memory->GO = 0;
  9764  1614  086A               	movf	_Memory^(0+128),w
  9765  1615  3E24               	addlw	36
  9766  1616  0086               	movwf	6
  9767  1617  3002               	movlw	2	; select bank4/5
  9768  1618  0087               	movwf	7
  9769  1619  1081               	bcf	1,1
  9770                           
  9771                           ;MCU_B1.c: 802: Flash_Memory_Modify();
  9772  161A  318A  2214         	fcall	_Flash_Memory_Modify
  9773                           
  9774                           ;MCU_B1.c: 804: }
  9775                           ;MCU_B1.c: 805: } else {
  9776  161C  0008               	return
  9777  161D                     l6922:	
  9778                           
  9779                           ;MCU_B1.c: 806: Memory->GO = 0;
  9780  161D  0021               	movlb	1	; select bank1
  9781  161E  086A               	movf	_Memory^(0+128),w
  9782  161F  3E24               	addlw	36
  9783  1620  0086               	movwf	6
  9784  1621  3002               	movlw	2	; select bank4/5
  9785  1622  0087               	movwf	7
  9786  1623  1081               	bcf	1,1
  9787  1624  0008               	return
  9788  1625                     __end_of_Flash_Memory_Main:	
  9789                           
  9790                           	psect	text53
  9791  0A14                     __ptext53:	
  9792 ;; *************** function _Flash_Memory_Modify *****************
  9793 ;; Defined at:
  9794 ;;		line 863 in file "../src/MCU_B1.c"
  9795 ;; Parameters:    Size  Location     Type
  9796 ;;		None
  9797 ;; Auto vars:     Size  Location     Type
  9798 ;;  i               1    6[BANK0 ] unsigned char 
  9799 ;; Return value:  Size  Location     Type
  9800 ;;		None               void
  9801 ;; Registers used:
  9802 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9803 ;; Tracked objects:
  9804 ;;		On entry : 0/0
  9805 ;;		On exit  : 0/0
  9806 ;;		Unchanged: 0/0
  9807 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9808 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9809 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9810 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9811 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9812 ;;Total ram usage:        3 bytes
  9813 ;; Hardware stack levels used:    1
  9814 ;; Hardware stack levels required when called:    7
  9815 ;; This function calls:
  9816 ;;		_Flash_Memory_Erasing
  9817 ;;		_Flash_Memory_Read
  9818 ;;		_Flash_Memory_Write
  9819 ;; This function is called by:
  9820 ;;		_Flash_Memory_Main
  9821 ;; This function uses a non-reentrant model
  9822 ;;
  9823                           
  9824                           
  9825                           ;psect for function _Flash_Memory_Modify
  9826  0A14                     _Flash_Memory_Modify:	
  9827                           
  9828                           ;MCU_B1.c: 864: char i;
  9829                           ;MCU_B1.c: 865: for (i = 0; i < 32; i++) {
  9830                           
  9831                           ;incstack = 0
  9832                           ; Regs used in _Flash_Memory_Modify: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9833  0A14  0020               	movlb	0	; select bank0
  9834  0A15  01A6               	clrf	Flash_Memory_Modify@i
  9835  0A16  3020               	movlw	32
  9836  0A17  0226               	subwf	Flash_Memory_Modify@i,w
  9837  0A18  1803               	btfsc	3,0
  9838  0A19  2A33               	goto	l6552
  9839  0A1A                     l6546:	
  9840                           
  9841                           ;MCU_B1.c: 866: Memory->Data[i] = Flash_Memory_Read(i);
  9842  0A1A  0826               	movf	Flash_Memory_Modify@i,w
  9843  0A1B  3191  21A4  318A   	fcall	_Flash_Memory_Read
  9844  0A1E  0020               	movlb	0	; select bank0
  9845  0A1F  00A4               	movwf	??_Flash_Memory_Modify
  9846  0A20  0826               	movf	Flash_Memory_Modify@i,w
  9847  0A21  0021               	movlb	1	; select bank1
  9848  0A22  076A               	addwf	_Memory^(0+128),w
  9849  0A23  0020               	movlb	0	; select bank0
  9850  0A24  00A5               	movwf	??_Flash_Memory_Modify+1
  9851  0A25  0825               	movf	??_Flash_Memory_Modify+1,w
  9852  0A26  0086               	movwf	6
  9853  0A27  3002               	movlw	2	; select bank4/5
  9854  0A28  0087               	movwf	7
  9855  0A29  0824               	movf	??_Flash_Memory_Modify,w
  9856  0A2A  0081               	movwf	1
  9857  0A2B  3001               	movlw	1
  9858  0A2C  00A4               	movwf	??_Flash_Memory_Modify
  9859  0A2D  0824               	movf	??_Flash_Memory_Modify,w
  9860  0A2E  07A6               	addwf	Flash_Memory_Modify@i,f
  9861  0A2F  3020               	movlw	32
  9862  0A30  0226               	subwf	Flash_Memory_Modify@i,w
  9863  0A31  1C03               	skipc
  9864  0A32  2A1A               	goto	l6546
  9865  0A33                     l6552:	
  9866                           
  9867                           ;MCU_B1.c: 867: }
  9868                           ;MCU_B1.c: 868: Memory->Data[0]=product->Data[12];
  9869  0A33  087D               	movf	_product,w
  9870  0A34  3E0C               	addlw	12
  9871  0A35  0086               	movwf	6
  9872  0A36  3001               	movlw	1	; select bank2/3
  9873  0A37  0087               	movwf	7
  9874  0A38  0801               	movf	1,w
  9875  0A39  00A4               	movwf	??_Flash_Memory_Modify
  9876  0A3A  0021               	movlb	1	; select bank1
  9877  0A3B  086A               	movf	_Memory^(0+128),w
  9878  0A3C  0086               	movwf	6
  9879  0A3D  3002               	movlw	2	; select bank4/5
  9880  0A3E  0087               	movwf	7
  9881  0A3F  0020               	movlb	0	; select bank0
  9882  0A40  0824               	movf	??_Flash_Memory_Modify,w
  9883  0A41  0081               	movwf	1
  9884                           
  9885                           ;MCU_B1.c: 869: Memory->Data[1]=product->Data[13];
  9886  0A42  087D               	movf	_product,w
  9887  0A43  3E0D               	addlw	13
  9888  0A44  0086               	movwf	6
  9889  0A45  3001               	movlw	1	; select bank2/3
  9890  0A46  0087               	movwf	7
  9891  0A47  0801               	movf	1,w
  9892  0A48  00A4               	movwf	??_Flash_Memory_Modify
  9893  0A49  0021               	movlb	1	; select bank1
  9894  0A4A  0A6A               	incf	_Memory^(0+128),w
  9895  0A4B  0086               	movwf	6
  9896  0A4C  3002               	movlw	2	; select bank4/5
  9897  0A4D  0087               	movwf	7
  9898  0A4E  0020               	movlb	0	; select bank0
  9899  0A4F  0824               	movf	??_Flash_Memory_Modify,w
  9900  0A50  0081               	movwf	1
  9901                           
  9902                           ;MCU_B1.c: 870: Memory->Data[2]=product->Data[14];
  9903  0A51  087D               	movf	_product,w
  9904  0A52  3E0E               	addlw	14
  9905  0A53  0086               	movwf	6
  9906  0A54  3001               	movlw	1	; select bank2/3
  9907  0A55  0087               	movwf	7
  9908  0A56  0801               	movf	1,w
  9909  0A57  00A4               	movwf	??_Flash_Memory_Modify
  9910  0A58  0021               	movlb	1	; select bank1
  9911  0A59  086A               	movf	_Memory^(0+128),w
  9912  0A5A  3E02               	addlw	2
  9913  0A5B  0086               	movwf	6
  9914  0A5C  3002               	movlw	2	; select bank4/5
  9915  0A5D  0087               	movwf	7
  9916  0A5E  0020               	movlb	0	; select bank0
  9917  0A5F  0824               	movf	??_Flash_Memory_Modify,w
  9918  0A60  0081               	movwf	1
  9919                           
  9920                           ;MCU_B1.c: 876: if (Memory->LoopSave) {
  9921  0A61  0021               	movlb	1	; select bank1
  9922  0A62  086A               	movf	_Memory^(0+128),w
  9923  0A63  3E24               	addlw	36
  9924  0A64  0086               	movwf	6
  9925  0A65  3002               	movlw	2	; select bank4/5
  9926  0A66  0087               	movwf	7
  9927  0A67  1D01               	btfss	1,2
  9928  0A68  2A79               	goto	l6556
  9929                           
  9930                           ;MCU_B1.c: 877: Memory->LoopSave = 0;
  9931  0A69  086A               	movf	_Memory^(0+128),w
  9932  0A6A  3E24               	addlw	36
  9933  0A6B  0086               	movwf	6
  9934  0A6C  3002               	movlw	2	; select bank4/5
  9935  0A6D  0087               	movwf	7
  9936  0A6E  1101               	bcf	1,2
  9937                           
  9938                           ;MCU_B1.c: 878: myMain->FirstOpen = 0;
  9939  0A6F  0869               	movf	_myMain^(0+128),w
  9940  0A70  0086               	movwf	6
  9941  0A71  3001               	movlw	1	; select bank2/3
  9942  0A72  0087               	movwf	7
  9943  0A73  1281               	bcf	1,5
  9944                           
  9945                           ;MCU_B1.c: 879: myMain->First = 0;
  9946  0A74  0869               	movf	_myMain^(0+128),w
  9947  0A75  0086               	movwf	6
  9948  0A76  3001               	movlw	1	; select bank2/3
  9949  0A77  0087               	movwf	7
  9950  0A78  1381               	bcf	1,7
  9951  0A79                     l6556:	
  9952                           
  9953                           ;MCU_B1.c: 881: }
  9954                           ;MCU_B1.c: 882: GIE = 0;
  9955  0A79  138B               	bcf	11,7	;volatile
  9956                           
  9957                           ;MCU_B1.c: 883: Flash_Memory_Erasing();
  9958  0A7A  319E  26FD  318A   	fcall	_Flash_Memory_Erasing
  9959                           
  9960                           ;MCU_B1.c: 884: Flash_Memory_Write();
  9961  0A7D  3194  2443         	fcall	_Flash_Memory_Write
  9962                           
  9963                           ;MCU_B1.c: 885: GIE = 1;
  9964  0A7F  178B               	bsf	11,7	;volatile
  9965  0A80  0008               	return
  9966  0A81                     __end_of_Flash_Memory_Modify:	
  9967                           
  9968                           	psect	text54
  9969  1EFD                     __ptext54:	
  9970 ;; *************** function _Flash_Memory_Erasing *****************
  9971 ;; Defined at:
  9972 ;;		line 852 in file "../src/MCU_B1.c"
  9973 ;; Parameters:    Size  Location     Type
  9974 ;;		None
  9975 ;; Auto vars:     Size  Location     Type
  9976 ;;		None
  9977 ;; Return value:  Size  Location     Type
  9978 ;;		None               void
  9979 ;; Registers used:
  9980 ;;		wreg, status,2, status,0, pclath, cstack
  9981 ;; Tracked objects:
  9982 ;;		On entry : 0/0
  9983 ;;		On exit  : 0/0
  9984 ;;		Unchanged: 0/0
  9985 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9986 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9987 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9988 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9989 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9990 ;;Total ram usage:        0 bytes
  9991 ;; Hardware stack levels used:    1
  9992 ;; Hardware stack levels required when called:    6
  9993 ;; This function calls:
  9994 ;;		_Flash_Memory_Unlock
  9995 ;; This function is called by:
  9996 ;;		_Flash_Memory_Modify
  9997 ;; This function uses a non-reentrant model
  9998 ;;
  9999                           
 10000                           
 10001                           ;psect for function _Flash_Memory_Erasing
 10002  1EFD                     _Flash_Memory_Erasing:	
 10003                           
 10004                           ;MCU_B1.c: 853: CFGS = 0;
 10005                           
 10006                           ;incstack = 0
 10007                           ; Regs used in _Flash_Memory_Erasing: [wreg+status,2+status,0+pclath+cstack]
 10008  1EFD  0023               	movlb	3	; select bank3
 10009  1EFE  1315               	bcf	21,6	;volatile
 10010                           
 10011                           ;MCU_B1.c: 854: PMADRH = 0x30;
 10012  1EFF  3030               	movlw	48
 10013  1F00  0092               	movwf	18	;volatile
 10014                           
 10015                           ;MCU_B1.c: 855: PMADRL = 0x00;
 10016  1F01  0191               	clrf	17	;volatile
 10017                           
 10018                           ;MCU_B1.c: 856: FREE = 1;
 10019  1F02  1615               	bsf	21,4	;volatile
 10020                           
 10021                           ;MCU_B1.c: 857: WREN = 1;
 10022  1F03  1515               	bsf	21,2	;volatile
 10023                           
 10024                           ;MCU_B1.c: 858: Flash_Memory_Unlock();
 10025  1F04  319E  269C         	fcall	_Flash_Memory_Unlock
 10026                           
 10027                           ;MCU_B1.c: 859: WREN = 0;
 10028  1F06  0023               	movlb	3	; select bank3
 10029  1F07  1115               	bcf	21,2	;volatile
 10030  1F08  0008               	return
 10031  1F09                     __end_of_Flash_Memory_Erasing:	
 10032                           
 10033                           	psect	text55
 10034  041E                     __ptext55:	
 10035 ;; *************** function _Flash_Memory_Initialization *****************
 10036 ;; Defined at:
 10037 ;;		line 752 in file "../src/MCU_B1.c"
 10038 ;; Parameters:    Size  Location     Type
 10039 ;;		None
 10040 ;; Auto vars:     Size  Location     Type
 10041 ;;  i               1   62[BANK0 ] unsigned char 
 10042 ;; Return value:  Size  Location     Type
 10043 ;;		None               void
 10044 ;; Registers used:
 10045 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10046 ;; Tracked objects:
 10047 ;;		On entry : 0/0
 10048 ;;		On exit  : 0/0
 10049 ;;		Unchanged: 0/0
 10050 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10051 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10052 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10053 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10054 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10055 ;;Total ram usage:        2 bytes
 10056 ;; Hardware stack levels used:    1
 10057 ;; Hardware stack levels required when called:    8
 10058 ;; This function calls:
 10059 ;;		_Flash_Memory_Read
 10060 ;;		_Flash_Memory_Write
 10061 ;;		_setPercentValue
 10062 ;; This function is called by:
 10063 ;;		_main
 10064 ;; This function uses a non-reentrant model
 10065 ;;
 10066                           
 10067                           
 10068                           ;psect for function _Flash_Memory_Initialization
 10069  041E                     _Flash_Memory_Initialization:	
 10070                           
 10071                           ;MCU_B1.c: 753: char i;
 10072                           ;MCU_B1.c: 754: if (Flash_Memory_Read(31) == 0xaa) {
 10073                           
 10074                           ;incstack = 0
 10075                           ; Regs used in _Flash_Memory_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 10076  041E  301F               	movlw	31
 10077  041F  3191  21A4  3184   	fcall	_Flash_Memory_Read
 10078  0422  3AAA               	xorlw	170
 10079  0423  1D03               	skipz
 10080  0424  2C96               	goto	l6878
 10081                           
 10082                           ;MCU_B1.c: 755: product->Data[12] = Flash_Memory_Read(0);
 10083  0425  3000               	movlw	0
 10084  0426  3191  21A4  3184   	fcall	_Flash_Memory_Read
 10085  0429  0020               	movlb	0	; select bank0
 10086  042A  00DD               	movwf	??_Flash_Memory_Initialization
 10087  042B  087D               	movf	_product,w
 10088  042C  3E0C               	addlw	12
 10089  042D  0086               	movwf	6
 10090  042E  3001               	movlw	1	; select bank2/3
 10091  042F  0087               	movwf	7
 10092  0430  085D               	movf	??_Flash_Memory_Initialization,w
 10093  0431  0081               	movwf	1
 10094                           
 10095                           ;MCU_B1.c: 756: product->Data[13] = Flash_Memory_Read(1);
 10096  0432  3001               	movlw	1
 10097  0433  3191  21A4  3184   	fcall	_Flash_Memory_Read
 10098  0436  0020               	movlb	0	; select bank0
 10099  0437  00DD               	movwf	??_Flash_Memory_Initialization
 10100  0438  087D               	movf	_product,w
 10101  0439  3E0D               	addlw	13
 10102  043A  0086               	movwf	6
 10103  043B  3001               	movlw	1	; select bank2/3
 10104  043C  0087               	movwf	7
 10105  043D  085D               	movf	??_Flash_Memory_Initialization,w
 10106  043E  0081               	movwf	1
 10107                           
 10108                           ;MCU_B1.c: 757: product->Data[14] = Flash_Memory_Read(2);
 10109  043F  3002               	movlw	2
 10110  0440  3191  21A4  3184   	fcall	_Flash_Memory_Read
 10111  0443  0020               	movlb	0	; select bank0
 10112  0444  00DD               	movwf	??_Flash_Memory_Initialization
 10113  0445  087D               	movf	_product,w
 10114  0446  3E0E               	addlw	14
 10115  0447  0086               	movwf	6
 10116  0448  3001               	movlw	1	; select bank2/3
 10117  0449  0087               	movwf	7
 10118  044A  085D               	movf	??_Flash_Memory_Initialization,w
 10119  044B  0081               	movwf	1
 10120                           
 10121                           ;MCU_B1.c: 763: i = setPercentValue(((char)((100-55)*1.5)));
 10122  044C  3043               	movlw	67
 10123  044D  3196  266A  3184   	fcall	_setPercentValue
 10124  0450  0020               	movlb	0	; select bank0
 10125  0451  00DD               	movwf	??_Flash_Memory_Initialization
 10126  0452  085D               	movf	??_Flash_Memory_Initialization,w
 10127  0453  00DE               	movwf	Flash_Memory_Initialization@i
 10128                           
 10129                           ;MCU_B1.c: 764: product->Data[21] = i;
 10130  0454  085E               	movf	Flash_Memory_Initialization@i,w
 10131  0455  00DD               	movwf	??_Flash_Memory_Initialization
 10132  0456  087D               	movf	_product,w
 10133  0457  3E15               	addlw	21
 10134  0458  0086               	movwf	6
 10135  0459  3001               	movlw	1	; select bank2/3
 10136  045A  0087               	movwf	7
 10137  045B  085D               	movf	??_Flash_Memory_Initialization,w
 10138  045C  0081               	movwf	1
 10139                           
 10140                           ;MCU_B1.c: 765: product->Data[22] = i;
 10141  045D  085E               	movf	Flash_Memory_Initialization@i,w
 10142  045E  00DD               	movwf	??_Flash_Memory_Initialization
 10143  045F  087D               	movf	_product,w
 10144  0460  3E16               	addlw	22
 10145  0461  0086               	movwf	6
 10146  0462  3001               	movlw	1	; select bank2/3
 10147  0463  0087               	movwf	7
 10148  0464  085D               	movf	??_Flash_Memory_Initialization,w
 10149  0465  0081               	movwf	1
 10150                           
 10151                           ;MCU_B1.c: 766: product->Data[23] = i;
 10152  0466  085E               	movf	Flash_Memory_Initialization@i,w
 10153  0467  00DD               	movwf	??_Flash_Memory_Initialization
 10154  0468  087D               	movf	_product,w
 10155  0469  3E17               	addlw	23
 10156  046A  0086               	movwf	6
 10157  046B  3001               	movlw	1	; select bank2/3
 10158  046C  0087               	movwf	7
 10159  046D  085D               	movf	??_Flash_Memory_Initialization,w
 10160  046E  0081               	movwf	1
 10161                           
 10162                           ;MCU_B1.c: 768: if (product->Data[12] == 0xff && product->Data[13] == 0xff && product->D
      +                          ata[14] == 0xff) {
 10163  046F  087D               	movf	_product,w
 10164  0470  3E0C               	addlw	12
 10165  0471  0086               	movwf	6
 10166  0472  3001               	movlw	1	; select bank2/3
 10167  0473  0087               	movwf	7
 10168  0474  0801               	movf	1,w
 10169  0475  3AFF               	xorlw	255
 10170  0476  1D03               	skipz
 10171  0477  0008               	return
 10172  0478  087D               	movf	_product,w
 10173  0479  3E0D               	addlw	13
 10174  047A  0086               	movwf	6
 10175  047B  3001               	movlw	1	; select bank2/3
 10176  047C  0087               	movwf	7
 10177  047D  0801               	movf	1,w
 10178  047E  3AFF               	xorlw	255
 10179  047F  1D03               	skipz
 10180  0480  0008               	return
 10181  0481  087D               	movf	_product,w
 10182  0482  3E0E               	addlw	14
 10183  0483  0086               	movwf	6
 10184  0484  3001               	movlw	1	; select bank2/3
 10185  0485  0087               	movwf	7
 10186  0486  0801               	movf	1,w
 10187  0487  3AFF               	xorlw	255
 10188  0488  1D03               	skipz
 10189  0489  0008               	return
 10190                           
 10191                           ;MCU_B1.c: 769: myMain->FirstOpen = 1;
 10192  048A  0021               	movlb	1	; select bank1
 10193  048B  0869               	movf	_myMain^(0+128),w
 10194  048C  0086               	movwf	6
 10195  048D  3001               	movlw	1	; select bank2/3
 10196  048E  0087               	movwf	7
 10197  048F  1681               	bsf	1,5
 10198                           
 10199                           ;MCU_B1.c: 770: myMain->First = 1;
 10200  0490  0869               	movf	_myMain^(0+128),w
 10201  0491  0086               	movwf	6
 10202  0492  3001               	movlw	1	; select bank2/3
 10203  0493  0087               	movwf	7
 10204  0494  1781               	bsf	1,7
 10205                           
 10206                           ;MCU_B1.c: 771: }
 10207                           ;MCU_B1.c: 772: } else {
 10208  0495  0008               	return
 10209  0496                     l6878:	
 10210                           
 10211                           ;MCU_B1.c: 773: i = setPercentValue(((char)((100-55)*1.5)));
 10212  0496  3043               	movlw	67
 10213  0497  3196  266A  3184   	fcall	_setPercentValue
 10214  049A  0020               	movlb	0	; select bank0
 10215  049B  00DD               	movwf	??_Flash_Memory_Initialization
 10216  049C  085D               	movf	??_Flash_Memory_Initialization,w
 10217  049D  00DE               	movwf	Flash_Memory_Initialization@i
 10218                           
 10219                           ;MCU_B1.c: 774: Memory->Data[0]=0xff;
 10220  049E  30FF               	movlw	255
 10221  049F  00DD               	movwf	??_Flash_Memory_Initialization
 10222  04A0  0021               	movlb	1	; select bank1
 10223  04A1  086A               	movf	_Memory^(0+128),w
 10224  04A2  0086               	movwf	6
 10225  04A3  3002               	movlw	2	; select bank4/5
 10226  04A4  0087               	movwf	7
 10227  04A5  0020               	movlb	0	; select bank0
 10228  04A6  085D               	movf	??_Flash_Memory_Initialization,w
 10229  04A7  0081               	movwf	1
 10230                           
 10231                           ;MCU_B1.c: 775: Memory->Data[1]=0xff;
 10232  04A8  30FF               	movlw	255
 10233  04A9  00DD               	movwf	??_Flash_Memory_Initialization
 10234  04AA  0021               	movlb	1	; select bank1
 10235  04AB  0A6A               	incf	_Memory^(0+128),w
 10236  04AC  0086               	movwf	6
 10237  04AD  3002               	movlw	2	; select bank4/5
 10238  04AE  0087               	movwf	7
 10239  04AF  0020               	movlb	0	; select bank0
 10240  04B0  085D               	movf	??_Flash_Memory_Initialization,w
 10241  04B1  0081               	movwf	1
 10242                           
 10243                           ;MCU_B1.c: 776: Memory->Data[2]=0xff;
 10244  04B2  30FF               	movlw	255
 10245  04B3  00DD               	movwf	??_Flash_Memory_Initialization
 10246  04B4  0021               	movlb	1	; select bank1
 10247  04B5  086A               	movf	_Memory^(0+128),w
 10248  04B6  3E02               	addlw	2
 10249  04B7  0086               	movwf	6
 10250  04B8  3002               	movlw	2	; select bank4/5
 10251  04B9  0087               	movwf	7
 10252  04BA  0020               	movlb	0	; select bank0
 10253  04BB  085D               	movf	??_Flash_Memory_Initialization,w
 10254  04BC  0081               	movwf	1
 10255                           
 10256                           ;MCU_B1.c: 777: Memory->Data[3]=0xff;
 10257  04BD  30FF               	movlw	255
 10258  04BE  00DD               	movwf	??_Flash_Memory_Initialization
 10259  04BF  0021               	movlb	1	; select bank1
 10260  04C0  086A               	movf	_Memory^(0+128),w
 10261  04C1  3E03               	addlw	3
 10262  04C2  0086               	movwf	6
 10263  04C3  3002               	movlw	2	; select bank4/5
 10264  04C4  0087               	movwf	7
 10265  04C5  0020               	movlb	0	; select bank0
 10266  04C6  085D               	movf	??_Flash_Memory_Initialization,w
 10267  04C7  0081               	movwf	1
 10268                           
 10269                           ;MCU_B1.c: 778: Memory->Data[4]=0xff;
 10270  04C8  30FF               	movlw	255
 10271  04C9  00DD               	movwf	??_Flash_Memory_Initialization
 10272  04CA  0021               	movlb	1	; select bank1
 10273  04CB  086A               	movf	_Memory^(0+128),w
 10274  04CC  3E04               	addlw	4
 10275  04CD  0086               	movwf	6
 10276  04CE  3002               	movlw	2	; select bank4/5
 10277  04CF  0087               	movwf	7
 10278  04D0  0020               	movlb	0	; select bank0
 10279  04D1  085D               	movf	??_Flash_Memory_Initialization,w
 10280  04D2  0081               	movwf	1
 10281                           
 10282                           ;MCU_B1.c: 779: Memory->Data[5]=0xff;
 10283  04D3  30FF               	movlw	255
 10284  04D4  00DD               	movwf	??_Flash_Memory_Initialization
 10285  04D5  0021               	movlb	1	; select bank1
 10286  04D6  086A               	movf	_Memory^(0+128),w
 10287  04D7  3E05               	addlw	5
 10288  04D8  0086               	movwf	6
 10289  04D9  3002               	movlw	2	; select bank4/5
 10290  04DA  0087               	movwf	7
 10291  04DB  0020               	movlb	0	; select bank0
 10292  04DC  085D               	movf	??_Flash_Memory_Initialization,w
 10293  04DD  0081               	movwf	1
 10294                           
 10295                           ;MCU_B1.c: 780: Memory->Data[31]=0xaa;
 10296  04DE  30AA               	movlw	170
 10297  04DF  00DD               	movwf	??_Flash_Memory_Initialization
 10298  04E0  0021               	movlb	1	; select bank1
 10299  04E1  086A               	movf	_Memory^(0+128),w
 10300  04E2  3E1F               	addlw	31
 10301  04E3  0086               	movwf	6
 10302  04E4  3002               	movlw	2	; select bank4/5
 10303  04E5  0087               	movwf	7
 10304  04E6  0020               	movlb	0	; select bank0
 10305  04E7  085D               	movf	??_Flash_Memory_Initialization,w
 10306  04E8  0081               	movwf	1
 10307                           
 10308                           ;MCU_B1.c: 781: product->Data[21] = i;
 10309  04E9  085E               	movf	Flash_Memory_Initialization@i,w
 10310  04EA  00DD               	movwf	??_Flash_Memory_Initialization
 10311  04EB  087D               	movf	_product,w
 10312  04EC  3E15               	addlw	21
 10313  04ED  0086               	movwf	6
 10314  04EE  3001               	movlw	1	; select bank2/3
 10315  04EF  0087               	movwf	7
 10316  04F0  085D               	movf	??_Flash_Memory_Initialization,w
 10317  04F1  0081               	movwf	1
 10318                           
 10319                           ;MCU_B1.c: 782: product->Data[22] = i;
 10320  04F2  085E               	movf	Flash_Memory_Initialization@i,w
 10321  04F3  00DD               	movwf	??_Flash_Memory_Initialization
 10322  04F4  087D               	movf	_product,w
 10323  04F5  3E16               	addlw	22
 10324  04F6  0086               	movwf	6
 10325  04F7  3001               	movlw	1	; select bank2/3
 10326  04F8  0087               	movwf	7
 10327  04F9  085D               	movf	??_Flash_Memory_Initialization,w
 10328  04FA  0081               	movwf	1
 10329                           
 10330                           ;MCU_B1.c: 783: product->Data[23] = i;
 10331  04FB  085E               	movf	Flash_Memory_Initialization@i,w
 10332  04FC  00DD               	movwf	??_Flash_Memory_Initialization
 10333  04FD  087D               	movf	_product,w
 10334  04FE  3E17               	addlw	23
 10335  04FF  0086               	movwf	6
 10336  0500  3001               	movlw	1	; select bank2/3
 10337  0501  0087               	movwf	7
 10338  0502  085D               	movf	??_Flash_Memory_Initialization,w
 10339  0503  0081               	movwf	1
 10340                           
 10341                           ;MCU_B1.c: 784: GIE = 0;
 10342  0504  138B               	bcf	11,7	;volatile
 10343                           
 10344                           ;MCU_B1.c: 785: Flash_Memory_Write();
 10345  0505  3194  2443         	fcall	_Flash_Memory_Write
 10346                           
 10347                           ;MCU_B1.c: 786: GIE = 1;
 10348  0507  178B               	bsf	11,7	;volatile
 10349                           
 10350                           ;MCU_B1.c: 787: myMain->FirstOpen = 1;
 10351  0508  0021               	movlb	1	; select bank1
 10352  0509  0869               	movf	_myMain^(0+128),w
 10353  050A  0086               	movwf	6
 10354  050B  3001               	movlw	1	; select bank2/3
 10355  050C  0087               	movwf	7
 10356  050D  1681               	bsf	1,5
 10357                           
 10358                           ;MCU_B1.c: 788: myMain->First = 1;
 10359  050E  0869               	movf	_myMain^(0+128),w
 10360  050F  0086               	movwf	6
 10361  0510  3001               	movlw	1	; select bank2/3
 10362  0511  0087               	movwf	7
 10363  0512  1781               	bsf	1,7
 10364  0513  0008               	return
 10365  0514                     __end_of_Flash_Memory_Initialization:	
 10366                           
 10367                           	psect	text56
 10368  1443                     __ptext56:	
 10369 ;; *************** function _Flash_Memory_Write *****************
 10370 ;; Defined at:
 10371 ;;		line 833 in file "../src/MCU_B1.c"
 10372 ;; Parameters:    Size  Location     Type
 10373 ;;		None
 10374 ;; Auto vars:     Size  Location     Type
 10375 ;;  i               1    1[BANK0 ] unsigned char 
 10376 ;; Return value:  Size  Location     Type
 10377 ;;		None               void
 10378 ;; Registers used:
 10379 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10380 ;; Tracked objects:
 10381 ;;		On entry : 0/0
 10382 ;;		On exit  : 0/0
 10383 ;;		Unchanged: 0/0
 10384 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10385 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10386 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10387 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10388 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10389 ;;Total ram usage:        2 bytes
 10390 ;; Hardware stack levels used:    1
 10391 ;; Hardware stack levels required when called:    6
 10392 ;; This function calls:
 10393 ;;		_Flash_Memory_Unlock
 10394 ;; This function is called by:
 10395 ;;		_Flash_Memory_Initialization
 10396 ;;		_Flash_Memory_Modify
 10397 ;; This function uses a non-reentrant model
 10398 ;;
 10399                           
 10400                           
 10401                           ;psect for function _Flash_Memory_Write
 10402  1443                     _Flash_Memory_Write:	
 10403                           
 10404                           ;MCU_B1.c: 834: char i;
 10405                           ;MCU_B1.c: 835: CFGS = 0;
 10406                           
 10407                           ;incstack = 0
 10408                           ; Regs used in _Flash_Memory_Write: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10409  1443  0023               	movlb	3	; select bank3
 10410  1444  1315               	bcf	21,6	;volatile
 10411                           
 10412                           ;MCU_B1.c: 836: PMADRH = 0x30;
 10413  1445  3030               	movlw	48
 10414  1446  0092               	movwf	18	;volatile
 10415                           
 10416                           ;MCU_B1.c: 837: PMDATH = 0;
 10417  1447  0194               	clrf	20	;volatile
 10418                           
 10419                           ;MCU_B1.c: 838: FREE = 0;
 10420  1448  1215               	bcf	21,4	;volatile
 10421                           
 10422                           ;MCU_B1.c: 839: LWLO = 1;
 10423  1449  1695               	bsf	21,5	;volatile
 10424                           
 10425                           ;MCU_B1.c: 840: WREN = 1;
 10426  144A  1515               	bsf	21,2	;volatile
 10427                           
 10428                           ;MCU_B1.c: 841: for (i = 0; i < 32; i++) {
 10429  144B  0020               	movlb	0	; select bank0
 10430  144C  01A1               	clrf	Flash_Memory_Write@i
 10431  144D  3020               	movlw	32
 10432  144E  0221               	subwf	Flash_Memory_Write@i,w
 10433  144F  1803               	btfsc	3,0
 10434  1450  2C6D               	goto	l1381
 10435  1451                     l6026:	
 10436                           
 10437                           ;MCU_B1.c: 842: PMADRL = i;
 10438  1451  0821               	movf	Flash_Memory_Write@i,w
 10439  1452  0023               	movlb	3	; select bank3
 10440  1453  0091               	movwf	17	;volatile
 10441                           
 10442                           ;MCU_B1.c: 843: PMDATL = Memory->Data[i];
 10443  1454  0020               	movlb	0	; select bank0
 10444  1455  0821               	movf	Flash_Memory_Write@i,w
 10445  1456  0021               	movlb	1	; select bank1
 10446  1457  076A               	addwf	_Memory^(0+128),w
 10447  1458  0020               	movlb	0	; select bank0
 10448  1459  00A0               	movwf	??_Flash_Memory_Write
 10449  145A  0820               	movf	??_Flash_Memory_Write,w
 10450  145B  0086               	movwf	6
 10451  145C  3002               	movlw	2	; select bank4/5
 10452  145D  0087               	movwf	7
 10453  145E  0801               	movf	1,w
 10454  145F  0023               	movlb	3	; select bank3
 10455  1460  0093               	movwf	19	;volatile
 10456                           
 10457                           ;MCU_B1.c: 844: Flash_Memory_Unlock();
 10458  1461  319E  269C  3194   	fcall	_Flash_Memory_Unlock
 10459  1464  3001               	movlw	1
 10460  1465  0020               	movlb	0	; select bank0
 10461  1466  00A0               	movwf	??_Flash_Memory_Write
 10462  1467  0820               	movf	??_Flash_Memory_Write,w
 10463  1468  07A1               	addwf	Flash_Memory_Write@i,f
 10464  1469  3020               	movlw	32
 10465  146A  0221               	subwf	Flash_Memory_Write@i,w
 10466  146B  1C03               	skipc
 10467  146C  2C51               	goto	l6026
 10468  146D                     l1381:	
 10469                           
 10470                           ;MCU_B1.c: 845: }
 10471                           ;MCU_B1.c: 846: LWLO = 0;
 10472  146D  0023               	movlb	3	; select bank3
 10473  146E  1295               	bcf	21,5	;volatile
 10474                           
 10475                           ;MCU_B1.c: 847: Flash_Memory_Unlock();
 10476  146F  319E  269C         	fcall	_Flash_Memory_Unlock
 10477                           
 10478                           ;MCU_B1.c: 848: WREN = 0;
 10479  1471  0023               	movlb	3	; select bank3
 10480  1472  1115               	bcf	21,2	;volatile
 10481  1473  0008               	return
 10482  1474                     __end_of_Flash_Memory_Write:	
 10483                           
 10484                           	psect	text57
 10485  1E9C                     __ptext57:	
 10486 ;; *************** function _Flash_Memory_Unlock *****************
 10487 ;; Defined at:
 10488 ;;		line 812 in file "../src/MCU_B1.c"
 10489 ;; Parameters:    Size  Location     Type
 10490 ;;		None
 10491 ;; Auto vars:     Size  Location     Type
 10492 ;;		None
 10493 ;; Return value:  Size  Location     Type
 10494 ;;		None               void
 10495 ;; Registers used:
 10496 ;;		wreg
 10497 ;; Tracked objects:
 10498 ;;		On entry : 0/0
 10499 ;;		On exit  : 0/0
 10500 ;;		Unchanged: 0/0
 10501 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10502 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10503 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10504 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10505 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10506 ;;Total ram usage:        0 bytes
 10507 ;; Hardware stack levels used:    1
 10508 ;; Hardware stack levels required when called:    5
 10509 ;; This function calls:
 10510 ;;		Nothing
 10511 ;; This function is called by:
 10512 ;;		_Flash_Memory_Write
 10513 ;;		_Flash_Memory_Erasing
 10514 ;; This function uses a non-reentrant model
 10515 ;;
 10516                           
 10517                           
 10518                           ;psect for function _Flash_Memory_Unlock
 10519  1E9C                     _Flash_Memory_Unlock:	
 10520                           
 10521                           ;MCU_B1.c: 813: PMCON2 = 0x55;
 10522                           
 10523                           ;incstack = 0
 10524                           ; Regs used in _Flash_Memory_Unlock: [wreg]
 10525  1E9C  3055               	movlw	85
 10526  1E9D  0023               	movlb	3	; select bank3
 10527  1E9E  0096               	movwf	22	;volatile
 10528                           
 10529                           ;MCU_B1.c: 814: PMCON2 = 0xaa;
 10530  1E9F  30AA               	movlw	170
 10531  1EA0  0096               	movwf	22	;volatile
 10532                           
 10533                           ;MCU_B1.c: 815: WR = 1;
 10534  1EA1  1495               	bsf	21,1	;volatile
 10535                           
 10536                           ;MCU_B1.c: 816: __nop();
 10537  1EA2  0000               	nop
 10538                           
 10539                           ;MCU_B1.c: 817: __nop();
 10540  1EA3  0000               	nop
 10541  1EA4  0008               	return
 10542  1EA5                     __end_of_Flash_Memory_Unlock:	
 10543                           
 10544                           	psect	text58
 10545  11A4                     __ptext58:	
 10546 ;; *************** function _Flash_Memory_Read *****************
 10547 ;; Defined at:
 10548 ;;		line 821 in file "../src/MCU_B1.c"
 10549 ;; Parameters:    Size  Location     Type
 10550 ;;  address         1    wreg     unsigned char 
 10551 ;; Auto vars:     Size  Location     Type
 10552 ;;  address         1    2[BANK0 ] unsigned char 
 10553 ;;  ret             1    3[BANK0 ] unsigned char 
 10554 ;;  i               1    1[BANK0 ] unsigned char 
 10555 ;; Return value:  Size  Location     Type
 10556 ;;                  1    wreg      unsigned char 
 10557 ;; Registers used:
 10558 ;;		wreg, status,2
 10559 ;; Tracked objects:
 10560 ;;		On entry : 0/0
 10561 ;;		On exit  : 0/0
 10562 ;;		Unchanged: 0/0
 10563 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10564 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10565 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10566 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10567 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10568 ;;Total ram usage:        4 bytes
 10569 ;; Hardware stack levels used:    1
 10570 ;; Hardware stack levels required when called:    5
 10571 ;; This function calls:
 10572 ;;		Nothing
 10573 ;; This function is called by:
 10574 ;;		_Flash_Memory_Initialization
 10575 ;;		_Flash_Memory_Modify
 10576 ;; This function uses a non-reentrant model
 10577 ;;
 10578                           
 10579                           
 10580                           ;psect for function _Flash_Memory_Read
 10581  11A4                     _Flash_Memory_Read:	
 10582                           
 10583                           ;incstack = 0
 10584                           ; Regs used in _Flash_Memory_Read: [wreg+status,2]
 10585                           ;Flash_Memory_Read@address stored from wreg
 10586  11A4  0020               	movlb	0	; select bank0
 10587  11A5  00A2               	movwf	Flash_Memory_Read@address
 10588                           
 10589                           ;MCU_B1.c: 822: char i, ret = 0;
 10590  11A6  01A3               	clrf	Flash_Memory_Read@ret
 10591                           
 10592                           ;MCU_B1.c: 823: PMADRH = 0x30;
 10593  11A7  3030               	movlw	48
 10594  11A8  0023               	movlb	3	; select bank3
 10595  11A9  0092               	movwf	18	;volatile
 10596                           
 10597                           ;MCU_B1.c: 824: PMADRL = address;
 10598  11AA  0020               	movlb	0	; select bank0
 10599  11AB  0822               	movf	Flash_Memory_Read@address,w
 10600  11AC  0023               	movlb	3	; select bank3
 10601  11AD  0091               	movwf	17	;volatile
 10602                           
 10603                           ;MCU_B1.c: 825: CFGS = 0;
 10604  11AE  1315               	bcf	21,6	;volatile
 10605                           
 10606                           ;MCU_B1.c: 826: RD = 1;
 10607  11AF  1415               	bsf	21,0	;volatile
 10608                           
 10609                           ;MCU_B1.c: 827: i = PMDATH;
 10610  11B0  0814               	movf	20,w	;volatile
 10611  11B1  0020               	movlb	0	; select bank0
 10612  11B2  00A0               	movwf	??_Flash_Memory_Read
 10613  11B3  0820               	movf	??_Flash_Memory_Read,w
 10614  11B4  00A1               	movwf	Flash_Memory_Read@i
 10615                           
 10616                           ;MCU_B1.c: 828: ret = PMDATL;
 10617  11B5  0023               	movlb	3	; select bank3
 10618  11B6  0813               	movf	19,w	;volatile
 10619  11B7  0020               	movlb	0	; select bank0
 10620  11B8  00A0               	movwf	??_Flash_Memory_Read
 10621  11B9  0820               	movf	??_Flash_Memory_Read,w
 10622  11BA  00A3               	movwf	Flash_Memory_Read@ret
 10623                           
 10624                           ;MCU_B1.c: 829: return ret;
 10625  11BB  0823               	movf	Flash_Memory_Read@ret,w
 10626  11BC  0008               	return
 10627  11BD                     __end_of_Flash_Memory_Read:	
 10628                           
 10629                           	psect	text59
 10630  1EDA                     __ptext59:	
 10631 ;; *************** function _DimmerLights_Main *****************
 10632 ;; Defined at:
 10633 ;;		line 386 in file "../src/Dimmer_B1.c"
 10634 ;; Parameters:    Size  Location     Type
 10635 ;;		None
 10636 ;; Auto vars:     Size  Location     Type
 10637 ;;		None
 10638 ;; Return value:  Size  Location     Type
 10639 ;;		None               void
 10640 ;; Registers used:
 10641 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10642 ;; Tracked objects:
 10643 ;;		On entry : 0/0
 10644 ;;		On exit  : 0/0
 10645 ;;		Unchanged: 0/0
 10646 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10647 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10648 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10649 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10650 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10651 ;;Total ram usage:        0 bytes
 10652 ;; Hardware stack levels used:    1
 10653 ;; Hardware stack levels required when called:   11
 10654 ;; This function calls:
 10655 ;;		_DimmerLights_Close
 10656 ;;		_setDimmerLights_Main
 10657 ;; This function is called by:
 10658 ;;		_main
 10659 ;; This function uses a non-reentrant model
 10660 ;;
 10661                           
 10662                           
 10663                           ;psect for function _DimmerLights_Main
 10664  1EDA                     _DimmerLights_Main:	
 10665                           
 10666                           ;Dimmer_B1.c: 388: setDimmerLights_Main(1);
 10667                           
 10668                           ;incstack = 0
 10669                           ; Regs used in _DimmerLights_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10670  1EDA  3001               	movlw	1
 10671  1EDB  318D  2547  319E   	fcall	_setDimmerLights_Main
 10672                           
 10673                           ;Dimmer_B1.c: 392: setDimmerLights_Main(2);
 10674  1EDE  3002               	movlw	2
 10675  1EDF  318D  2547  319E   	fcall	_setDimmerLights_Main
 10676                           
 10677                           ;Dimmer_B1.c: 399: DimmerLights_Close();
 10678  1EE2  3190  20D9         	fcall	_DimmerLights_Close
 10679  1EE4  0008               	return
 10680  1EE5                     __end_of_DimmerLights_Main:	
 10681                           
 10682                           	psect	text60
 10683  0D47                     __ptext60:	
 10684 ;; *************** function _setDimmerLights_Main *****************
 10685 ;; Defined at:
 10686 ;;		line 403 in file "../src/Dimmer_B1.c"
 10687 ;; Parameters:    Size  Location     Type
 10688 ;;  lights          1    wreg     unsigned char 
 10689 ;; Auto vars:     Size  Location     Type
 10690 ;;  lights          1   70[BANK0 ] unsigned char 
 10691 ;;  clear           1   69[BANK0 ] unsigned char 
 10692 ;; Return value:  Size  Location     Type
 10693 ;;		None               void
 10694 ;; Registers used:
 10695 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10696 ;; Tracked objects:
 10697 ;;		On entry : 0/0
 10698 ;;		On exit  : 0/0
 10699 ;;		Unchanged: 0/0
 10700 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10701 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10702 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10703 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10704 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10705 ;;Total ram usage:        2 bytes
 10706 ;; Hardware stack levels used:    1
 10707 ;; Hardware stack levels required when called:   10
 10708 ;; This function calls:
 10709 ;;		_DimmerLightsPointSelect
 10710 ;;		_setBuz
 10711 ;;		_setDimmerLights
 10712 ;;		_setDimmerLights_Adj
 10713 ;; This function is called by:
 10714 ;;		_DimmerLights_Main
 10715 ;; This function uses a non-reentrant model
 10716 ;;
 10717                           
 10718                           
 10719                           ;psect for function _setDimmerLights_Main
 10720  0D47                     _setDimmerLights_Main:	
 10721                           
 10722                           ;incstack = 0
 10723                           ; Regs used in _setDimmerLights_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10724                           ;setDimmerLights_Main@lights stored from wreg
 10725  0D47  0020               	movlb	0	; select bank0
 10726  0D48  00E6               	movwf	setDimmerLights_Main@lights
 10727                           
 10728                           ;Dimmer_B1.c: 404: char clear = 1;
 10729  0D49  01E5               	clrf	setDimmerLights_Main@clear
 10730  0D4A  0AE5               	incf	setDimmerLights_Main@clear,f
 10731                           
 10732                           ;Dimmer_B1.c: 405: DimmerLightsPointSelect(lights);
 10733  0D4B  0866               	movf	setDimmerLights_Main@lights,w
 10734  0D4C  3190  20B2  318D   	fcall	_DimmerLightsPointSelect
 10735                           
 10736                           ;Dimmer_B1.c: 418: if (lights == 1) {
 10737  0D4F  0020               	movlb	0	; select bank0
 10738  0D50  0866               	movf	setDimmerLights_Main@lights,w
 10739  0D51  3A01               	xorlw	1
 10740  0D52  1D03               	skipz
 10741  0D53  2D57               	goto	l6412
 10742                           
 10743                           ;Dimmer_B1.c: 419: clear = (!DimmerLights22->Clear) ? 0 : 1;
 10744  0D54  0021               	movlb	1	; select bank1
 10745  0D55  083B               	movf	_DimmerLights22^(0+128),w
 10746  0D56  2D5D               	goto	L12
 10747  0D57                     l6412:	
 10748                           ;Dimmer_B1.c: 420: } else if (lights == 2) {
 10749                           
 10750  0D57  0866               	movf	setDimmerLights_Main@lights,w
 10751  0D58  3A02               	xorlw	2
 10752  0D59  1D03               	skipz
 10753  0D5A  2D66               	goto	l6416
 10754                           
 10755                           ;Dimmer_B1.c: 421: clear = (!DimmerLights11->Clear) ? 0 : 1;
 10756  0D5B  0021               	movlb	1	; select bank1
 10757  0D5C  083A               	movf	_DimmerLights11^(0+128),w
 10758  0D5D                     L12:	
 10759  0D5D  3E09               	addlw	9
 10760  0D5E  0086               	movwf	6
 10761  0D5F  3001               	movlw	1	; select bank2/3
 10762  0D60  0087               	movwf	7
 10763  0D61  3000               	movlw	0
 10764  0D62  1901               	btfsc	1,2
 10765  0D63  3001               	movlw	1
 10766  0D64  0020               	movlb	0	; select bank0
 10767  0D65  00E5               	movwf	setDimmerLights_Main@clear
 10768  0D66                     l6416:	
 10769                           
 10770                           ;Dimmer_B1.c: 422: }
 10771                           ;Dimmer_B1.c: 425: if (DimmerLights->Trigger) {
 10772  0D66  0879               	movf	_DimmerLights,w
 10773  0D67  3E08               	addlw	8
 10774  0D68  0086               	movwf	6
 10775  0D69  3001               	movlw	1	; select bank2/3
 10776  0D6A  0087               	movwf	7
 10777  0D6B  1D01               	btfss	1,2
 10778  0D6C  2D91               	goto	l6430
 10779                           
 10780                           ;Dimmer_B1.c: 426: if (clear) {
 10781  0D6D  0865               	movf	setDimmerLights_Main@clear,w
 10782  0D6E  1903               	btfsc	3,2
 10783  0D6F  0008               	return
 10784                           
 10785                           ;Dimmer_B1.c: 427: if (DimmerLights->Switch) {
 10786  0D70  0879               	movf	_DimmerLights,w
 10787  0D71  3E08               	addlw	8
 10788  0D72  0086               	movwf	6
 10789  0D73  3001               	movlw	1	; select bank2/3
 10790  0D74  0087               	movwf	7
 10791  0D75  1C81               	btfss	1,1
 10792  0D76  2D84               	goto	l6426
 10793                           
 10794                           ;Dimmer_B1.c: 428: DimmerLights->Trigger = 0;
 10795  0D77  0879               	movf	_DimmerLights,w
 10796  0D78  3E08               	addlw	8
 10797  0D79  0086               	movwf	6
 10798  0D7A  3001               	movlw	1	; select bank2/3
 10799  0D7B  0087               	movwf	7
 10800  0D7C  1101               	bcf	1,2
 10801                           
 10802                           ;Dimmer_B1.c: 429: setDimmerLights(lights, 1);
 10803  0D7D  01A4               	clrf	setDimmerLights@status
 10804  0D7E  0AA4               	incf	setDimmerLights@status,f
 10805  0D7F  0866               	movf	setDimmerLights_Main@lights,w
 10806  0D80  318C  24C8         	fcall	_setDimmerLights
 10807                           
 10808                           ;Dimmer_B1.c: 434: } else {
 10809  0D82  0020               	movlb	0	; select bank0
 10810  0D83  0008               	return
 10811  0D84                     l6426:	
 10812                           
 10813                           ;Dimmer_B1.c: 435: DimmerLights->Trigger = 0;
 10814  0D84  0879               	movf	_DimmerLights,w
 10815  0D85  3E08               	addlw	8
 10816  0D86  0086               	movwf	6
 10817  0D87  3001               	movlw	1	; select bank2/3
 10818  0D88  0087               	movwf	7
 10819  0D89  1101               	bcf	1,2
 10820                           
 10821                           ;Dimmer_B1.c: 436: setDimmerLights(lights, 0);
 10822  0D8A  0020               	movlb	0	; select bank0
 10823  0D8B  01A4               	clrf	setDimmerLights@status
 10824  0D8C  0866               	movf	setDimmerLights_Main@lights,w
 10825  0D8D  318C  24C8         	fcall	_setDimmerLights
 10826  0D8F  0020               	movlb	0	; select bank0
 10827  0D90  0008               	return
 10828  0D91                     l6430:	
 10829                           ;Dimmer_B1.c: 441: }
 10830                           ;Dimmer_B1.c: 442: }
 10831                           ;Dimmer_B1.c: 443: } else {
 10832                           
 10833                           
 10834                           ;Dimmer_B1.c: 444: if (DimmerLights->TriggerAdj) {
 10835  0D91  0879               	movf	_DimmerLights,w
 10836  0D92  3E08               	addlw	8
 10837  0D93  0086               	movwf	6
 10838  0D94  3001               	movlw	1	; select bank2/3
 10839  0D95  0087               	movwf	7
 10840  0D96  1A01               	btfsc	1,4
 10841  0D97  2D9A               	goto	l6432
 10842  0D98  0020               	movlb	0	; select bank0
 10843  0D99  0008               	return
 10844  0D9A                     l6432:	
 10845                           
 10846                           ;Dimmer_B1.c: 445: if (clear) {
 10847  0D9A  0020               	movlb	0	; select bank0
 10848  0D9B  0865               	movf	setDimmerLights_Main@clear,w
 10849  0D9C  1903               	btfsc	3,2
 10850  0D9D  0008               	return
 10851                           
 10852                           ;Dimmer_B1.c: 446: DimmerLightsPointSelect(lights);
 10853  0D9E  0866               	movf	setDimmerLights_Main@lights,w
 10854  0D9F  3190  20B2  318D   	fcall	_DimmerLightsPointSelect
 10855                           
 10856                           ;Dimmer_B1.c: 447: DimmerLights->TriggerAdj = 0;
 10857  0DA2  0879               	movf	_DimmerLights,w
 10858  0DA3  3E08               	addlw	8
 10859  0DA4  0086               	movwf	6
 10860  0DA5  3001               	movlw	1	; select bank2/3
 10861  0DA6  0087               	movwf	7
 10862  0DA7  1201               	bcf	1,4
 10863                           
 10864                           ;Dimmer_B1.c: 448: if (DimmerLights->AdjGo) {
 10865  0DA8  0879               	movf	_DimmerLights,w
 10866  0DA9  3E08               	addlw	8
 10867  0DAA  0086               	movwf	6
 10868  0DAB  3001               	movlw	1	; select bank2/3
 10869  0DAC  0087               	movwf	7
 10870  0DAD  1D81               	btfss	1,3
 10871  0DAE  2DC0               	goto	l6442
 10872                           
 10873                           ;Dimmer_B1.c: 449: setDimmerLights_Adj(lights, 1);
 10874  0DAF  0020               	movlb	0	; select bank0
 10875  0DB0  01E2               	clrf	setDimmerLights_Adj@status
 10876  0DB1  0AE2               	incf	setDimmerLights_Adj@status,f
 10877  0DB2  0866               	movf	setDimmerLights_Main@lights,w
 10878  0DB3  3194  24DE  318D   	fcall	_setDimmerLights_Adj
 10879                           
 10880                           ;Dimmer_B1.c: 450: setBuz(1, 100);
 10881  0DB6  3064               	movlw	100
 10882  0DB7  0020               	movlb	0	; select bank0
 10883  0DB8  00A9               	movwf	setBuz@time
 10884  0DB9  3000               	movlw	0
 10885  0DBA  00AA               	movwf	setBuz@time+1
 10886  0DBB  3001               	movlw	1
 10887  0DBC  318B  23D8         	fcall	_setBuz
 10888                           
 10889                           ;Dimmer_B1.c: 451: } else {
 10890  0DBE  0020               	movlb	0	; select bank0
 10891  0DBF  0008               	return
 10892  0DC0                     l6442:	
 10893                           
 10894                           ;Dimmer_B1.c: 452: setDimmerLights_Adj(lights, 0);
 10895  0DC0  0020               	movlb	0	; select bank0
 10896  0DC1  01E2               	clrf	setDimmerLights_Adj@status
 10897  0DC2  0866               	movf	setDimmerLights_Main@lights,w
 10898  0DC3  3194  24DE         	fcall	_setDimmerLights_Adj
 10899  0DC5  0020               	movlb	0	; select bank0
 10900  0DC6  0008               	return
 10901  0DC7                     __end_of_setDimmerLights_Main:	
 10902                           
 10903                           	psect	text61
 10904  14DE                     __ptext61:	
 10905 ;; *************** function _setDimmerLights_Adj *****************
 10906 ;; Defined at:
 10907 ;;		line 630 in file "../src/Dimmer_B1.c"
 10908 ;; Parameters:    Size  Location     Type
 10909 ;;  lights          1    wreg     unsigned char 
 10910 ;;  status          1   66[BANK0 ] unsigned char 
 10911 ;; Auto vars:     Size  Location     Type
 10912 ;;  lights          1   68[BANK0 ] unsigned char 
 10913 ;; Return value:  Size  Location     Type
 10914 ;;		None               void
 10915 ;; Registers used:
 10916 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10917 ;; Tracked objects:
 10918 ;;		On entry : 0/0
 10919 ;;		On exit  : 0/0
 10920 ;;		Unchanged: 0/0
 10921 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10922 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10923 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10924 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10925 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10926 ;;Total ram usage:        3 bytes
 10927 ;; Hardware stack levels used:    1
 10928 ;; Hardware stack levels required when called:    9
 10929 ;; This function calls:
 10930 ;;		_DimmerLightsPointSelect
 10931 ;;		_setRF_DimmerLights
 10932 ;;		_setTxData
 10933 ;; This function is called by:
 10934 ;;		_setDimmerLights_Main
 10935 ;; This function uses a non-reentrant model
 10936 ;;
 10937                           
 10938                           
 10939                           ;psect for function _setDimmerLights_Adj
 10940  14DE                     _setDimmerLights_Adj:	
 10941                           
 10942                           ;incstack = 0
 10943                           ; Regs used in _setDimmerLights_Adj: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10944                           ;setDimmerLights_Adj@lights stored from wreg
 10945  14DE  0020               	movlb	0	; select bank0
 10946  14DF  00E4               	movwf	setDimmerLights_Adj@lights
 10947                           
 10948                           ;Dimmer_B1.c: 631: DimmerLightsPointSelect(lights);
 10949  14E0  0864               	movf	setDimmerLights_Adj@lights,w
 10950  14E1  3190  20B2  3194   	fcall	_DimmerLightsPointSelect
 10951                           
 10952                           ;Dimmer_B1.c: 632: if (status == 1) {
 10953  14E4  0020               	movlb	0	; select bank0
 10954  14E5  0862               	movf	setDimmerLights_Adj@status,w
 10955  14E6  3A01               	xorlw	1
 10956  14E7  1D03               	skipz
 10957  14E8  2CF4               	goto	l5984
 10958                           
 10959                           ;Dimmer_B1.c: 633: DimmerLights->AdjFlag = 1;
 10960  14E9  0879               	movf	_DimmerLights,w
 10961  14EA  0086               	movwf	6
 10962  14EB  3001               	movlw	1	; select bank2/3
 10963  14EC  0087               	movwf	7
 10964  14ED  1581               	bsf	1,3
 10965                           
 10966                           ;Dimmer_B1.c: 634: DimmerLights->Signal = 1;
 10967  14EE  0879               	movf	_DimmerLights,w
 10968  14EF  0086               	movwf	6
 10969  14F0  3001               	movlw	1	; select bank2/3
 10970  14F1  0087               	movwf	7
 10971  14F2  1481               	bsf	1,1
 10972                           
 10973                           ;Dimmer_B1.c: 635: } else {
 10974  14F3  0008               	return
 10975  14F4                     l5984:	
 10976                           
 10977                           ;Dimmer_B1.c: 636: if (DimmerLights->AdjFlag) {
 10978  14F4  0879               	movf	_DimmerLights,w
 10979  14F5  0086               	movwf	6
 10980  14F6  3001               	movlw	1	; select bank2/3
 10981  14F7  0087               	movwf	7
 10982  14F8  1D81               	btfss	1,3
 10983  14F9  0008               	return
 10984                           
 10985                           ;Dimmer_B1.c: 637: DimmerLights->Signal = 0;
 10986  14FA  0879               	movf	_DimmerLights,w
 10987  14FB  0086               	movwf	6
 10988  14FC  3001               	movlw	1	; select bank2/3
 10989  14FD  0087               	movwf	7
 10990  14FE  1081               	bcf	1,1
 10991                           
 10992                           ;Dimmer_B1.c: 638: DimmerLights->AdjFlag = 0;
 10993  14FF  0879               	movf	_DimmerLights,w
 10994  1500  0086               	movwf	6
 10995  1501  3001               	movlw	1	; select bank2/3
 10996  1502  0087               	movwf	7
 10997  1503  1181               	bcf	1,3
 10998                           
 10999                           ;Dimmer_B1.c: 639: ;;
 11000                           ;Dimmer_B1.c: 640: DimmerLights->MaxmumValue = DimmerLights->DimmingValue;
 11001  1504  0879               	movf	_DimmerLights,w
 11002  1505  3E04               	addlw	4
 11003  1506  0086               	movwf	6
 11004  1507  3001               	movlw	1	; select bank2/3
 11005  1508  0087               	movwf	7
 11006  1509  0801               	movf	1,w
 11007  150A  00E3               	movwf	??_setDimmerLights_Adj
 11008  150B  0879               	movf	_DimmerLights,w
 11009  150C  3E05               	addlw	5
 11010  150D  0086               	movwf	6
 11011  150E  3001               	movlw	1	; select bank2/3
 11012  150F  0087               	movwf	7
 11013  1510  0863               	movf	??_setDimmerLights_Adj,w
 11014  1511  0081               	movwf	1
 11015                           
 11016                           ;Dimmer_B1.c: 648: setRF_DimmerLights(lights, 1);
 11017  1512  01DD               	clrf	setRF_DimmerLights@on
 11018  1513  0ADD               	incf	setRF_DimmerLights@on,f
 11019  1514  0864               	movf	setDimmerLights_Adj@lights,w
 11020  1515  3189  21A9  3194   	fcall	_setRF_DimmerLights
 11021                           
 11022                           ;Dimmer_B1.c: 649: setTxData(1);
 11023  1518  3001               	movlw	1
 11024  1519  3186  2671         	fcall	_setTxData
 11025  151B  0008               	return
 11026  151C                     __end_of_setDimmerLights_Adj:	
 11027                           
 11028                           	psect	text62
 11029  0CC8                     __ptext62:	
 11030 ;; *************** function _setDimmerLights *****************
 11031 ;; Defined at:
 11032 ;;		line 577 in file "../src/Dimmer_B1.c"
 11033 ;; Parameters:    Size  Location     Type
 11034 ;;  lights          1    wreg     unsigned char 
 11035 ;;  status          1    4[BANK0 ] unsigned char 
 11036 ;; Auto vars:     Size  Location     Type
 11037 ;;  lights          1    6[BANK0 ] unsigned char 
 11038 ;; Return value:  Size  Location     Type
 11039 ;;		None               void
 11040 ;; Registers used:
 11041 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11042 ;; Tracked objects:
 11043 ;;		On entry : 0/0
 11044 ;;		On exit  : 0/0
 11045 ;;		Unchanged: 0/0
 11046 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11047 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11048 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11049 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11050 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11051 ;;Total ram usage:        3 bytes
 11052 ;; Hardware stack levels used:    1
 11053 ;; Hardware stack levels required when called:    7
 11054 ;; This function calls:
 11055 ;;		_DimmerLightsPointSelect
 11056 ;;		_setLED
 11057 ;;		_setMemory_GO
 11058 ;; This function is called by:
 11059 ;;		_setDimmerLights_Main
 11060 ;;		_setControl_Lights_Table
 11061 ;; This function uses a non-reentrant model
 11062 ;;
 11063                           
 11064                           
 11065                           ;psect for function _setDimmerLights
 11066  0CC8                     _setDimmerLights:	
 11067                           
 11068                           ;incstack = 0
 11069                           ; Regs used in _setDimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11070                           ;setDimmerLights@lights stored from wreg
 11071  0CC8  0020               	movlb	0	; select bank0
 11072  0CC9  00A6               	movwf	setDimmerLights@lights
 11073                           
 11074                           ;Dimmer_B1.c: 578: DimmerLightsPointSelect(lights);
 11075  0CCA  0826               	movf	setDimmerLights@lights,w
 11076  0CCB  3190  20B2  318C   	fcall	_DimmerLightsPointSelect
 11077                           
 11078                           ;Dimmer_B1.c: 579: Dimmer->Load = lights;
 11079  0CCE  0020               	movlb	0	; select bank0
 11080  0CCF  0826               	movf	setDimmerLights@lights,w
 11081  0CD0  00A5               	movwf	??_setDimmerLights
 11082  0CD1  0021               	movlb	1	; select bank1
 11083  0CD2  0A39               	incf	_Dimmer^(0+128),w
 11084  0CD3  0086               	movwf	6
 11085  0CD4  0187               	clrf	7
 11086  0CD5  0020               	movlb	0	; select bank0
 11087  0CD6  0825               	movf	??_setDimmerLights,w
 11088  0CD7  0081               	movwf	1
 11089                           
 11090                           ;Dimmer_B1.c: 580: if (status) {
 11091  0CD8  0824               	movf	setDimmerLights@status,w
 11092  0CD9  1903               	btfsc	3,2
 11093  0CDA  2D1B               	goto	l5716
 11094                           
 11095                           ;Dimmer_B1.c: 581: DimmerLights->Status = 1;
 11096  0CDB  0879               	movf	_DimmerLights,w
 11097  0CDC  0086               	movwf	6
 11098  0CDD  3001               	movlw	1	; select bank2/3
 11099  0CDE  0087               	movwf	7
 11100  0CDF  1681               	bsf	1,5
 11101                           
 11102                           ;Dimmer_B1.c: 582: setLED(lights, 0);
 11103  0CE0  01A2               	clrf	setLED@command
 11104  0CE1  0826               	movf	setDimmerLights@lights,w
 11105  0CE2  3188  208C  318C   	fcall	_setLED
 11106                           
 11107                           ;Dimmer_B1.c: 584: ;;
 11108                           ;Dimmer_B1.c: 586: DimmerLights->Signal = 1;
 11109  0CE5  0879               	movf	_DimmerLights,w
 11110  0CE6  0086               	movwf	6
 11111  0CE7  3001               	movlw	1	; select bank2/3
 11112  0CE8  0087               	movwf	7
 11113  0CE9  1481               	bsf	1,1
 11114                           
 11115                           ;Dimmer_B1.c: 587: DimmerLights->DimmingTimeValue = 3;
 11116  0CEA  3003               	movlw	3
 11117  0CEB  0020               	movlb	0	; select bank0
 11118  0CEC  00A5               	movwf	??_setDimmerLights
 11119  0CED  0879               	movf	_DimmerLights,w
 11120  0CEE  3E02               	addlw	2
 11121  0CEF  0086               	movwf	6
 11122  0CF0  3001               	movlw	1	; select bank2/3
 11123  0CF1  0087               	movwf	7
 11124  0CF2  0825               	movf	??_setDimmerLights,w
 11125  0CF3  0081               	movwf	1
 11126                           
 11127                           ;Dimmer_B1.c: 589: if (!DimmerLights->StatusFlag) {
 11128  0CF4  0879               	movf	_DimmerLights,w
 11129  0CF5  0086               	movwf	6
 11130  0CF6  3001               	movlw	1	; select bank2/3
 11131  0CF7  0087               	movwf	7
 11132  0CF8  1B01               	btfsc	1,6
 11133  0CF9  0008               	return
 11134                           
 11135                           ;Dimmer_B1.c: 590: DimmerLights->StatusFlag = 1;
 11136  0CFA  0879               	movf	_DimmerLights,w
 11137  0CFB  0086               	movwf	6
 11138  0CFC  3001               	movlw	1	; select bank2/3
 11139  0CFD  0087               	movwf	7
 11140  0CFE  1701               	bsf	1,6
 11141                           
 11142                           ;Dimmer_B1.c: 591: ;;
 11143                           ;Dimmer_B1.c: 592: setMemory_GO(0);
 11144  0CFF  3000               	movlw	0
 11145  0D00  3192  229A         	fcall	_setMemory_GO
 11146                           
 11147                           ;Dimmer_B1.c: 595: DimmerLights->DimmingValue = DimmerLights->MaxmumValue;
 11148  0D02  0879               	movf	_DimmerLights,w
 11149  0D03  3E05               	addlw	5
 11150  0D04  0086               	movwf	6
 11151  0D05  3001               	movlw	1	; select bank2/3
 11152  0D06  0087               	movwf	7
 11153  0D07  0801               	movf	1,w
 11154  0D08  0020               	movlb	0	; select bank0
 11155  0D09  00A5               	movwf	??_setDimmerLights
 11156  0D0A  0879               	movf	_DimmerLights,w
 11157  0D0B  3E04               	addlw	4
 11158  0D0C  0086               	movwf	6
 11159  0D0D  3001               	movlw	1	; select bank2/3
 11160  0D0E  0087               	movwf	7
 11161  0D0F  0825               	movf	??_setDimmerLights,w
 11162  0D10  0081               	movwf	1
 11163                           
 11164                           ;Dimmer_B1.c: 599: DimmerLights->DimmingValue = ((char)((100-55)*1.5));
 11165  0D11  3043               	movlw	67
 11166  0D12  00A5               	movwf	??_setDimmerLights
 11167  0D13  0879               	movf	_DimmerLights,w
 11168  0D14  3E04               	addlw	4
 11169  0D15  0086               	movwf	6
 11170  0D16  3001               	movlw	1	; select bank2/3
 11171  0D17  0087               	movwf	7
 11172  0D18  0825               	movf	??_setDimmerLights,w
 11173  0D19  0081               	movwf	1
 11174                           
 11175                           ;Dimmer_B1.c: 601: }
 11176                           ;Dimmer_B1.c: 602: } else {
 11177  0D1A  0008               	return
 11178  0D1B                     l5716:	
 11179                           
 11180                           ;Dimmer_B1.c: 603: DimmerLights->Status = 0;
 11181  0D1B  0879               	movf	_DimmerLights,w
 11182  0D1C  0086               	movwf	6
 11183  0D1D  3001               	movlw	1	; select bank2/3
 11184  0D1E  0087               	movwf	7
 11185  0D1F  1281               	bcf	1,5
 11186                           
 11187                           ;Dimmer_B1.c: 605: DimmerLights->DimmingValue = DimmerLights->MinimumValue;
 11188  0D20  0879               	movf	_DimmerLights,w
 11189  0D21  3E06               	addlw	6
 11190  0D22  0086               	movwf	6
 11191  0D23  3001               	movlw	1	; select bank2/3
 11192  0D24  0087               	movwf	7
 11193  0D25  0801               	movf	1,w
 11194  0D26  00A5               	movwf	??_setDimmerLights
 11195  0D27  0879               	movf	_DimmerLights,w
 11196  0D28  3E04               	addlw	4
 11197  0D29  0086               	movwf	6
 11198  0D2A  3001               	movlw	1	; select bank2/3
 11199  0D2B  0087               	movwf	7
 11200  0D2C  0825               	movf	??_setDimmerLights,w
 11201  0D2D  0081               	movwf	1
 11202                           
 11203                           ;Dimmer_B1.c: 612: DimmerLights->Signal = 1;
 11204  0D2E  0879               	movf	_DimmerLights,w
 11205  0D2F  0086               	movwf	6
 11206  0D30  3001               	movlw	1	; select bank2/3
 11207  0D31  0087               	movwf	7
 11208  0D32  1481               	bsf	1,1
 11209                           
 11210                           ;Dimmer_B1.c: 613: DimmerLights->AdjFlag = 0;
 11211  0D33  0879               	movf	_DimmerLights,w
 11212  0D34  0086               	movwf	6
 11213  0D35  3001               	movlw	1	; select bank2/3
 11214  0D36  0087               	movwf	7
 11215  0D37  1181               	bcf	1,3
 11216                           
 11217                           ;Dimmer_B1.c: 614: DimmerLights->AdjStatus = 0;
 11218  0D38  0879               	movf	_DimmerLights,w
 11219  0D39  0086               	movwf	6
 11220  0D3A  3001               	movlw	1	; select bank2/3
 11221  0D3B  0087               	movwf	7
 11222  0D3C  1201               	bcf	1,4
 11223                           
 11224                           ;Dimmer_B1.c: 615: DimmerLights->DimmingTimeValue = 3;
 11225  0D3D  3003               	movlw	3
 11226  0D3E  00A5               	movwf	??_setDimmerLights
 11227  0D3F  0879               	movf	_DimmerLights,w
 11228  0D40  3E02               	addlw	2
 11229  0D41  0086               	movwf	6
 11230  0D42  3001               	movlw	1	; select bank2/3
 11231  0D43  0087               	movwf	7
 11232  0D44  0825               	movf	??_setDimmerLights,w
 11233  0D45  0081               	movwf	1
 11234  0D46  0008               	return
 11235  0D47                     __end_of_setDimmerLights:	
 11236                           
 11237                           	psect	text63
 11238  088C                     __ptext63:	
 11239 ;; *************** function _setLED *****************
 11240 ;; Defined at:
 11241 ;;		line 74 in file "../src/LED_B1.c"
 11242 ;; Parameters:    Size  Location     Type
 11243 ;;  led             1    wreg     unsigned char 
 11244 ;;  command         1    2[BANK0 ] unsigned char 
 11245 ;; Auto vars:     Size  Location     Type
 11246 ;;  led             1    3[BANK0 ] unsigned char 
 11247 ;; Return value:  Size  Location     Type
 11248 ;;		None               void
 11249 ;; Registers used:
 11250 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11251 ;; Tracked objects:
 11252 ;;		On entry : 0/0
 11253 ;;		On exit  : 0/0
 11254 ;;		Unchanged: 0/0
 11255 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11256 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11257 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11258 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11259 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11260 ;;Total ram usage:        2 bytes
 11261 ;; Hardware stack levels used:    1
 11262 ;; Hardware stack levels required when called:    6
 11263 ;; This function calls:
 11264 ;;		_LedPointSelect
 11265 ;; This function is called by:
 11266 ;;		_setDimmerLights
 11267 ;;		_setLED_Initialization
 11268 ;;		_setSw_Initialization
 11269 ;;		_setDimmerLights_ERROR
 11270 ;; This function uses a non-reentrant model
 11271 ;;
 11272                           
 11273                           
 11274                           ;psect for function _setLED
 11275  088C                     _setLED:	
 11276                           
 11277                           ;incstack = 0
 11278                           ; Regs used in _setLED: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11279                           ;setLED@led stored from wreg
 11280  088C  0020               	movlb	0	; select bank0
 11281  088D  00A3               	movwf	setLED@led
 11282                           
 11283                           ;LED_B1.c: 76: LedPointSelect(led);
 11284  088E  0823               	movf	setLED@led,w
 11285  088F  3192  22FB  3188   	fcall	_LedPointSelect
 11286                           
 11287                           ;LED_B1.c: 77: if(command == 0)
 11288  0892  0020               	movlb	0	; select bank0
 11289  0893  08A2               	movf	setLED@command,f
 11290  0894  1D03               	skipz
 11291  0895  28A8               	goto	l5602
 11292                           
 11293                           ;LED_B1.c: 78: {
 11294                           ;LED_B1.c: 80: if(led == 1)
 11295  0896  0823               	movf	setLED@led,w
 11296  0897  3A01               	xorlw	1
 11297  0898  1D03               	skipz
 11298  0899  289C               	goto	l5594
 11299                           
 11300                           ;LED_B1.c: 81: {
 11301                           ;LED_B1.c: 85: RA3=1;
 11302  089A  158C               	bsf	12,3	;volatile
 11303                           
 11304                           ;LED_B1.c: 87: }
 11305  089B  0008               	return
 11306  089C                     l5594:	
 11307                           
 11308                           ;LED_B1.c: 90: else if(led == 2)
 11309  089C  0823               	movf	setLED@led,w
 11310  089D  3A02               	xorlw	2
 11311  089E  1D03               	skipz
 11312  089F  28A2               	goto	l5598
 11313                           
 11314                           ;LED_B1.c: 91: {
 11315                           ;LED_B1.c: 95: RC7=1;
 11316  08A0  178E               	bsf	14,7	;volatile
 11317                           
 11318                           ;LED_B1.c: 97: }
 11319  08A1  0008               	return
 11320  08A2                     l5598:	
 11321                           
 11322                           ;LED_B1.c: 110: else if(led == 99)
 11323  08A2  0823               	movf	setLED@led,w
 11324  08A3  3A63               	xorlw	99
 11325  08A4  1D03               	skipz
 11326  08A5  0008               	return
 11327                           
 11328                           ;LED_B1.c: 111: {
 11329                           ;LED_B1.c: 115: RB5=1;
 11330  08A6  168D               	bsf	13,5	;volatile
 11331                           
 11332                           ;LED_B1.c: 117: }
 11333                           ;LED_B1.c: 119: }
 11334  08A7  0008               	return
 11335  08A8                     l5602:	
 11336                           
 11337                           ;LED_B1.c: 120: else if(command == 1)
 11338  08A8  0822               	movf	setLED@command,w
 11339  08A9  3A01               	xorlw	1
 11340  08AA  1D03               	skipz
 11341  08AB  28BE               	goto	l5616
 11342                           
 11343                           ;LED_B1.c: 121: {
 11344                           ;LED_B1.c: 123: if(led == 1)
 11345  08AC  0823               	movf	setLED@led,w
 11346  08AD  3A01               	xorlw	1
 11347  08AE  1D03               	skipz
 11348  08AF  28B2               	goto	l5608
 11349                           
 11350                           ;LED_B1.c: 124: {
 11351                           ;LED_B1.c: 128: RA3=0;
 11352  08B0  118C               	bcf	12,3	;volatile
 11353                           
 11354                           ;LED_B1.c: 130: }
 11355  08B1  0008               	return
 11356  08B2                     l5608:	
 11357                           
 11358                           ;LED_B1.c: 133: else if(led == 2)
 11359  08B2  0823               	movf	setLED@led,w
 11360  08B3  3A02               	xorlw	2
 11361  08B4  1D03               	skipz
 11362  08B5  28B8               	goto	l5612
 11363                           
 11364                           ;LED_B1.c: 134: {
 11365                           ;LED_B1.c: 138: RC7=0;
 11366  08B6  138E               	bcf	14,7	;volatile
 11367                           
 11368                           ;LED_B1.c: 140: }
 11369  08B7  0008               	return
 11370  08B8                     l5612:	
 11371                           
 11372                           ;LED_B1.c: 153: else if(led == 99)
 11373  08B8  0823               	movf	setLED@led,w
 11374  08B9  3A63               	xorlw	99
 11375  08BA  1D03               	skipz
 11376  08BB  0008               	return
 11377                           
 11378                           ;LED_B1.c: 154: {
 11379                           ;LED_B1.c: 158: RB5=0;
 11380  08BC  128D               	bcf	13,5	;volatile
 11381                           
 11382                           ;LED_B1.c: 160: }
 11383                           ;LED_B1.c: 162: }
 11384  08BD  0008               	return
 11385  08BE                     l5616:	
 11386                           
 11387                           ;LED_B1.c: 163: else if(command == 10)
 11388  08BE  0822               	movf	setLED@command,w
 11389  08BF  3A0A               	xorlw	10
 11390  08C0  1D03               	skipz
 11391  08C1  28E0               	goto	l5632
 11392                           
 11393                           ;LED_B1.c: 164: {
 11394                           ;LED_B1.c: 165: LED->GO=0;
 11395  08C2  0021               	movlb	1	; select bank1
 11396  08C3  083C               	movf	_LED^(0+128),w
 11397  08C4  0086               	movwf	6
 11398  08C5  0187               	clrf	7
 11399  08C6  1081               	bcf	1,1
 11400                           
 11401                           ;LED_B1.c: 166: LED->Time=0;
 11402  08C7  0A3C               	incf	_LED^(0+128),w
 11403  08C8  0086               	movwf	6
 11404  08C9  0187               	clrf	7
 11405  08CA  3000               	movlw	0
 11406  08CB  3FC0               	movwi [0]fsr1
 11407  08CC  3FC1               	movwi [1]fsr1
 11408                           
 11409                           ;LED_B1.c: 168: if(led == 1)
 11410  08CD  0020               	movlb	0	; select bank0
 11411  08CE  0823               	movf	setLED@led,w
 11412  08CF  3A01               	xorlw	1
 11413  08D0  1D03               	skipz
 11414  08D1  28D4               	goto	l5624
 11415                           
 11416                           ;LED_B1.c: 169: {
 11417                           ;LED_B1.c: 173: RA3=1;
 11418  08D2  158C               	bsf	12,3	;volatile
 11419                           
 11420                           ;LED_B1.c: 175: }
 11421  08D3  0008               	return
 11422  08D4                     l5624:	
 11423                           
 11424                           ;LED_B1.c: 178: else if(led == 2)
 11425  08D4  0823               	movf	setLED@led,w
 11426  08D5  3A02               	xorlw	2
 11427  08D6  1D03               	skipz
 11428  08D7  28DA               	goto	l5628
 11429                           
 11430                           ;LED_B1.c: 179: {
 11431                           ;LED_B1.c: 183: RC7=1;
 11432  08D8  178E               	bsf	14,7	;volatile
 11433                           
 11434                           ;LED_B1.c: 185: }
 11435  08D9  0008               	return
 11436  08DA                     l5628:	
 11437                           
 11438                           ;LED_B1.c: 198: else if(led == 99)
 11439  08DA  0823               	movf	setLED@led,w
 11440  08DB  3A63               	xorlw	99
 11441  08DC  1D03               	skipz
 11442  08DD  0008               	return
 11443                           
 11444                           ;LED_B1.c: 199: {
 11445                           ;LED_B1.c: 203: RB5=1;
 11446  08DE  168D               	bsf	13,5	;volatile
 11447                           
 11448                           ;LED_B1.c: 205: }
 11449                           ;LED_B1.c: 207: }
 11450  08DF  0008               	return
 11451  08E0                     l5632:	
 11452                           
 11453                           ;LED_B1.c: 208: else if(command == 11)
 11454  08E0  0822               	movf	setLED@command,w
 11455  08E1  3A0B               	xorlw	11
 11456  08E2  1D03               	skipz
 11457  08E3  0008               	return
 11458                           
 11459                           ;LED_B1.c: 209: {
 11460                           ;LED_B1.c: 210: LED->GO=1;
 11461  08E4  0021               	movlb	1	; select bank1
 11462  08E5  083C               	movf	_LED^(0+128),w
 11463  08E6  0086               	movwf	6
 11464  08E7  0187               	clrf	7
 11465  08E8  1481               	bsf	1,1
 11466  08E9  0008               	return
 11467  08EA                     __end_of_setLED:	
 11468                           
 11469                           	psect	text64
 11470  12FB                     __ptext64:	
 11471 ;; *************** function _LedPointSelect *****************
 11472 ;; Defined at:
 11473 ;;		line 7 in file "../src/LED_B1.c"
 11474 ;; Parameters:    Size  Location     Type
 11475 ;;  led             1    wreg     unsigned char 
 11476 ;; Auto vars:     Size  Location     Type
 11477 ;;  led             1    1[BANK0 ] unsigned char 
 11478 ;; Return value:  Size  Location     Type
 11479 ;;		None               void
 11480 ;; Registers used:
 11481 ;;		wreg
 11482 ;; Tracked objects:
 11483 ;;		On entry : 0/0
 11484 ;;		On exit  : 0/0
 11485 ;;		Unchanged: 0/0
 11486 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11487 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11488 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11489 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11490 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11491 ;;Total ram usage:        2 bytes
 11492 ;; Hardware stack levels used:    1
 11493 ;; Hardware stack levels required when called:    5
 11494 ;; This function calls:
 11495 ;;		Nothing
 11496 ;; This function is called by:
 11497 ;;		_setLED_Initialization
 11498 ;;		_setLED
 11499 ;;		_setLED_Main
 11500 ;; This function uses a non-reentrant model
 11501 ;;
 11502                           
 11503                           
 11504                           ;psect for function _LedPointSelect
 11505  12FB                     _LedPointSelect:	
 11506                           
 11507                           ;incstack = 0
 11508                           ; Regs used in _LedPointSelect: [wreg]
 11509                           ;LedPointSelect@led stored from wreg
 11510  12FB  0020               	movlb	0	; select bank0
 11511  12FC  00A1               	movwf	LedPointSelect@led
 11512                           
 11513                           ;LED_B1.c: 10: if(led == 1)
 11514  12FD  0821               	movf	LedPointSelect@led,w
 11515  12FE  3A01               	xorlw	1
 11516  12FF  1D03               	skipz
 11517  1300  2B07               	goto	l5426
 11518                           
 11519                           ;LED_B1.c: 11: {
 11520                           ;LED_B1.c: 12: LED=&VarLED1;
 11521  1301  30D8               	movlw	_VarLED1& (0+255)
 11522  1302  00A0               	movwf	??_LedPointSelect
 11523  1303  0820               	movf	??_LedPointSelect,w
 11524  1304  0021               	movlb	1	; select bank1
 11525  1305  00BC               	movwf	_LED^(0+128)
 11526                           
 11527                           ;LED_B1.c: 13: }
 11528  1306  0008               	return
 11529  1307                     l5426:	
 11530                           
 11531                           ;LED_B1.c: 16: else if(led == 2)
 11532  1307  0020               	movlb	0	; select bank0
 11533  1308  0821               	movf	LedPointSelect@led,w
 11534  1309  3A02               	xorlw	2
 11535  130A  1D03               	skipz
 11536  130B  2B12               	goto	l5430
 11537                           
 11538                           ;LED_B1.c: 17: {
 11539                           ;LED_B1.c: 18: LED=&VarLED2;
 11540  130C  30DC               	movlw	_VarLED2& (0+255)
 11541  130D  00A0               	movwf	??_LedPointSelect
 11542  130E  0820               	movf	??_LedPointSelect,w
 11543  130F  0021               	movlb	1	; select bank1
 11544  1310  00BC               	movwf	_LED^(0+128)
 11545                           
 11546                           ;LED_B1.c: 19: }
 11547  1311  0008               	return
 11548  1312                     l5430:	
 11549                           
 11550                           ;LED_B1.c: 28: else if(led == 99)
 11551  1312  0020               	movlb	0	; select bank0
 11552  1313  0821               	movf	LedPointSelect@led,w
 11553  1314  3A63               	xorlw	99
 11554  1315  1D03               	skipz
 11555  1316  0008               	return
 11556                           
 11557                           ;LED_B1.c: 29: {
 11558                           ;LED_B1.c: 30: LED=&VarErrLED;
 11559  1317  30D4               	movlw	_VarErrLED& (0+255)
 11560  1318  00A0               	movwf	??_LedPointSelect
 11561  1319  0820               	movf	??_LedPointSelect,w
 11562  131A  0021               	movlb	1	; select bank1
 11563  131B  00BC               	movwf	_LED^(0+128)
 11564  131C  0008               	return
 11565  131D                     __end_of_LedPointSelect:	
 11566                           
 11567                           	psect	text65
 11568  10D9                     __ptext65:	
 11569 ;; *************** function _DimmerLights_Close *****************
 11570 ;; Defined at:
 11571 ;;		line 375 in file "../src/Dimmer_B1.c"
 11572 ;; Parameters:    Size  Location     Type
 11573 ;;		None
 11574 ;; Auto vars:     Size  Location     Type
 11575 ;;		None
 11576 ;; Return value:  Size  Location     Type
 11577 ;;		None               void
 11578 ;; Registers used:
 11579 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11580 ;; Tracked objects:
 11581 ;;		On entry : 0/0
 11582 ;;		On exit  : 0/0
 11583 ;;		Unchanged: 0/0
 11584 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11585 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11586 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11587 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11588 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11589 ;;Total ram usage:        0 bytes
 11590 ;; Hardware stack levels used:    1
 11591 ;; Hardware stack levels required when called:    6
 11592 ;; This function calls:
 11593 ;;		_getDimmerLights_StatusFlag
 11594 ;;		_setMemory_GO
 11595 ;; This function is called by:
 11596 ;;		_DimmerLights_Main
 11597 ;; This function uses a non-reentrant model
 11598 ;;
 11599                           
 11600                           
 11601                           ;psect for function _DimmerLights_Close
 11602  10D9                     _DimmerLights_Close:	
 11603                           
 11604                           ;Dimmer_B1.c: 376: if (Dimmer->Detect) {
 11605                           
 11606                           ;incstack = 0
 11607                           ; Regs used in _DimmerLights_Close: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11608  10D9  0021               	movlb	1	; select bank1
 11609  10DA  0839               	movf	_Dimmer^(0+128),w
 11610  10DB  0086               	movwf	6
 11611  10DC  0187               	clrf	7
 11612  10DD  1C01               	btfss	1,0
 11613  10DE  0008               	return
 11614                           
 11615                           ;Dimmer_B1.c: 377: Dimmer->Detect = 0;
 11616  10DF  0839               	movf	_Dimmer^(0+128),w
 11617  10E0  0086               	movwf	6
 11618  10E1  0187               	clrf	7
 11619  10E2  1001               	bcf	1,0
 11620                           
 11621                           ;Dimmer_B1.c: 378: if (!getDimmerLights_StatusFlag()) {
 11622  10E3  3191  21D6  3190   	fcall	_getDimmerLights_StatusFlag
 11623  10E6  3800               	iorlw	0
 11624  10E7  1D03               	skipz
 11625  10E8  0008               	return
 11626                           
 11627                           ;Dimmer_B1.c: 379: ;;
 11628                           ;Dimmer_B1.c: 380: setMemory_GO(1);
 11629  10E9  3001               	movlw	1
 11630  10EA  3192  229A         	fcall	_setMemory_GO
 11631  10EC  0008               	return
 11632  10ED                     __end_of_DimmerLights_Close:	
 11633                           
 11634                           	psect	text66
 11635  129A                     __ptext66:	
 11636 ;; *************** function _setMemory_GO *****************
 11637 ;; Defined at:
 11638 ;;		line 890 in file "../src/MCU_B1.c"
 11639 ;; Parameters:    Size  Location     Type
 11640 ;;  command         1    wreg     unsigned char 
 11641 ;; Auto vars:     Size  Location     Type
 11642 ;;  command         1    2[BANK0 ] unsigned char 
 11643 ;; Return value:  Size  Location     Type
 11644 ;;		None               void
 11645 ;; Registers used:
 11646 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11647 ;; Tracked objects:
 11648 ;;		On entry : 0/0
 11649 ;;		On exit  : 0/0
 11650 ;;		Unchanged: 0/0
 11651 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11652 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11653 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11654 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11655 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11656 ;;Total ram usage:        3 bytes
 11657 ;; Hardware stack levels used:    1
 11658 ;; Hardware stack levels required when called:    5
 11659 ;; This function calls:
 11660 ;;		Nothing
 11661 ;; This function is called by:
 11662 ;;		_DimmerLights_Close
 11663 ;;		_setDimmerLights
 11664 ;; This function uses a non-reentrant model
 11665 ;;
 11666                           
 11667                           
 11668                           ;psect for function _setMemory_GO
 11669  129A                     _setMemory_GO:	
 11670                           
 11671                           ;incstack = 0
 11672                           ; Regs used in _setMemory_GO: [wreg+fsr1l+fsr1h+status,2+status,0]
 11673                           ;setMemory_GO@command stored from wreg
 11674  129A  0020               	movlb	0	; select bank0
 11675  129B  00A2               	movwf	setMemory_GO@command
 11676                           
 11677                           ;MCU_B1.c: 891: Memory->GO = command;
 11678  129C  0021               	movlb	1	; select bank1
 11679  129D  086A               	movf	_Memory^(0+128),w
 11680  129E  3E24               	addlw	36
 11681  129F  0086               	movwf	6
 11682  12A0  3002               	movlw	2	; select bank4/5
 11683  12A1  0087               	movwf	7
 11684  12A2  0020               	movlb	0	; select bank0
 11685  12A3  0822               	movf	setMemory_GO@command,w
 11686  12A4  1081               	bcf	1,1
 11687  12A5  1D03               	skipz
 11688  12A6  1481               	bsf	1,1
 11689                           
 11690                           ;MCU_B1.c: 892: if (command == 0) {
 11691  12A7  08A2               	movf	setMemory_GO@command,f
 11692  12A8  1D03               	skipz
 11693  12A9  0008               	return
 11694                           
 11695                           ;MCU_B1.c: 893: Memory->Time = command;
 11696  12AA  0822               	movf	setMemory_GO@command,w
 11697  12AB  00A0               	movwf	??_setMemory_GO
 11698  12AC  01A1               	clrf	??_setMemory_GO+1
 11699  12AD  0021               	movlb	1	; select bank1
 11700  12AE  086A               	movf	_Memory^(0+128),w
 11701  12AF  3E22               	addlw	34
 11702  12B0  0086               	movwf	6
 11703  12B1  3002               	movlw	2	; select bank4/5
 11704  12B2  0087               	movwf	7
 11705  12B3  0020               	movlb	0	; select bank0
 11706  12B4  0820               	movf	??_setMemory_GO,w
 11707  12B5  3FC0               	movwi [0]fsr1
 11708  12B6  0821               	movf	??_setMemory_GO+1,w
 11709  12B7  3FC1               	movwi [1]fsr1
 11710  12B8  0008               	return
 11711  12B9                     __end_of_setMemory_GO:	
 11712                           
 11713                           	psect	text67
 11714  11D6                     __ptext67:	
 11715 ;; *************** function _getDimmerLights_StatusFlag *****************
 11716 ;; Defined at:
 11717 ;;		line 460 in file "../src/Dimmer_B1.c"
 11718 ;; Parameters:    Size  Location     Type
 11719 ;;		None
 11720 ;; Auto vars:     Size  Location     Type
 11721 ;;  Status          1    1[BANK0 ] unsigned char 
 11722 ;; Return value:  Size  Location     Type
 11723 ;;                  1    wreg      unsigned char 
 11724 ;; Registers used:
 11725 ;;		wreg, fsr1l, fsr1h, status,2
 11726 ;; Tracked objects:
 11727 ;;		On entry : 0/0
 11728 ;;		On exit  : 0/0
 11729 ;;		Unchanged: 0/0
 11730 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11731 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11732 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11733 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11734 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11735 ;;Total ram usage:        3 bytes
 11736 ;; Hardware stack levels used:    1
 11737 ;; Hardware stack levels required when called:    5
 11738 ;; This function calls:
 11739 ;;		Nothing
 11740 ;; This function is called by:
 11741 ;;		_DimmerLights_Close
 11742 ;;		_DimmerLights_Exceptions
 11743 ;; This function uses a non-reentrant model
 11744 ;;
 11745                           
 11746                           
 11747                           ;psect for function _getDimmerLights_StatusFlag
 11748  11D6                     _getDimmerLights_StatusFlag:	
 11749                           
 11750                           ;Dimmer_B1.c: 461: char Status = 0;
 11751                           
 11752                           ;incstack = 0
 11753                           ; Regs used in _getDimmerLights_StatusFlag: [wreg+fsr1l+fsr1h+status,2]
 11754  11D6  0020               	movlb	0	; select bank0
 11755  11D7  01A1               	clrf	getDimmerLights_StatusFlag@Status
 11756                           
 11757                           ;Dimmer_B1.c: 468: Status = (DimmerLights11->StatusFlag || DimmerLights22->StatusFlag) ?
      +                           1 : 0;
 11758  11D8  01A2               	clrf	_getDimmerLights_StatusFlag$1857
 11759  11D9  0AA2               	incf	_getDimmerLights_StatusFlag$1857,f
 11760  11DA  0021               	movlb	1	; select bank1
 11761  11DB  083A               	movf	_DimmerLights11^(0+128),w
 11762  11DC  0086               	movwf	6
 11763  11DD  3001               	movlw	1	; select bank2/3
 11764  11DE  0087               	movwf	7
 11765  11DF  1B01               	btfsc	1,6
 11766  11E0  29E9               	goto	l5972
 11767  11E1  083B               	movf	_DimmerLights22^(0+128),w
 11768  11E2  0086               	movwf	6
 11769  11E3  3001               	movlw	1	; select bank2/3
 11770  11E4  0087               	movwf	7
 11771  11E5  1B01               	btfsc	1,6
 11772  11E6  29E9               	goto	l5972
 11773  11E7  0020               	movlb	0	; select bank0
 11774  11E8  01A2               	clrf	_getDimmerLights_StatusFlag$1857
 11775  11E9                     l5972:	
 11776  11E9  0020               	movlb	0	; select bank0
 11777  11EA  0822               	movf	_getDimmerLights_StatusFlag$1857,w
 11778  11EB  00A0               	movwf	??_getDimmerLights_StatusFlag
 11779  11EC  0820               	movf	??_getDimmerLights_StatusFlag,w
 11780  11ED  00A1               	movwf	getDimmerLights_StatusFlag@Status
 11781                           
 11782                           ;Dimmer_B1.c: 475: return Status;
 11783  11EE  0821               	movf	getDimmerLights_StatusFlag@Status,w
 11784  11EF  0008               	return
 11785  11F0                     __end_of_getDimmerLights_StatusFlag:	
 11786                           
 11787                           	psect	text68
 11788  1143                     __ptext68:	
 11789 ;; *************** function _DimmerLights_Initialization *****************
 11790 ;; Defined at:
 11791 ;;		line 315 in file "../src/Dimmer_B1.c"
 11792 ;; Parameters:    Size  Location     Type
 11793 ;;		None
 11794 ;; Auto vars:     Size  Location     Type
 11795 ;;		None
 11796 ;; Return value:  Size  Location     Type
 11797 ;;		None               void
 11798 ;; Registers used:
 11799 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11800 ;; Tracked objects:
 11801 ;;		On entry : 0/0
 11802 ;;		On exit  : 0/0
 11803 ;;		Unchanged: 0/0
 11804 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11805 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11806 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11807 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11808 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11809 ;;Total ram usage:        1 bytes
 11810 ;; Hardware stack levels used:    1
 11811 ;; Hardware stack levels required when called:    7
 11812 ;; This function calls:
 11813 ;;		_Dimmer_Initialization
 11814 ;;		_setDimmerLights_Initialization
 11815 ;; This function is called by:
 11816 ;;		_main
 11817 ;; This function uses a non-reentrant model
 11818 ;;
 11819                           
 11820                           
 11821                           ;psect for function _DimmerLights_Initialization
 11822  1143                     _DimmerLights_Initialization:	
 11823                           
 11824                           ;Dimmer_B1.c: 317: DimmerLights11 = &DimmerLights1;
 11825                           
 11826                           ;incstack = 0
 11827                           ; Regs used in _DimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 11828  1143  3020               	movlw	_DimmerLights1& (0+255)
 11829  1144  0020               	movlb	0	; select bank0
 11830  1145  00A4               	movwf	??_DimmerLights_Initialization
 11831  1146  0824               	movf	??_DimmerLights_Initialization,w
 11832  1147  0021               	movlb	1	; select bank1
 11833  1148  00BA               	movwf	_DimmerLights11^(0+128)
 11834                           
 11835                           ;Dimmer_B1.c: 318: setDimmerLights_Initialization(1);
 11836  1149  3001               	movlw	1
 11837  114A  3193  23E6  3191   	fcall	_setDimmerLights_Initialization
 11838                           
 11839                           ;Dimmer_B1.c: 322: DimmerLights22 = &DimmerLights2;
 11840  114D  302E               	movlw	_DimmerLights2& (0+255)
 11841  114E  0020               	movlb	0	; select bank0
 11842  114F  00A4               	movwf	??_DimmerLights_Initialization
 11843  1150  0824               	movf	??_DimmerLights_Initialization,w
 11844  1151  0021               	movlb	1	; select bank1
 11845  1152  00BB               	movwf	_DimmerLights22^(0+128)
 11846                           
 11847                           ;Dimmer_B1.c: 323: setDimmerLights_Initialization(2);
 11848  1153  3002               	movlw	2
 11849  1154  3193  23E6  3191   	fcall	_setDimmerLights_Initialization
 11850                           
 11851                           ;Dimmer_B1.c: 332: Dimmer_Initialization();
 11852  1157  319E  266E         	fcall	_Dimmer_Initialization
 11853  1159  0008               	return
 11854  115A                     __end_of_DimmerLights_Initialization:	
 11855                           
 11856                           	psect	text69
 11857  13E6                     __ptext69:	
 11858 ;; *************** function _setDimmerLights_Initialization *****************
 11859 ;; Defined at:
 11860 ;;		line 337 in file "../src/Dimmer_B1.c"
 11861 ;; Parameters:    Size  Location     Type
 11862 ;;  lights          1    wreg     unsigned char 
 11863 ;; Auto vars:     Size  Location     Type
 11864 ;;  lights          1    3[BANK0 ] unsigned char 
 11865 ;; Return value:  Size  Location     Type
 11866 ;;		None               void
 11867 ;; Registers used:
 11868 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11869 ;; Tracked objects:
 11870 ;;		On entry : 0/0
 11871 ;;		On exit  : 0/0
 11872 ;;		Unchanged: 0/0
 11873 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11874 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11875 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11876 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11877 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11878 ;;Total ram usage:        2 bytes
 11879 ;; Hardware stack levels used:    1
 11880 ;; Hardware stack levels required when called:    6
 11881 ;; This function calls:
 11882 ;;		_DimmerLightsPointSelect
 11883 ;; This function is called by:
 11884 ;;		_DimmerLights_Initialization
 11885 ;; This function uses a non-reentrant model
 11886 ;;
 11887                           
 11888                           
 11889                           ;psect for function _setDimmerLights_Initialization
 11890  13E6                     _setDimmerLights_Initialization:	
 11891                           
 11892                           ;incstack = 0
 11893                           ; Regs used in _setDimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pcla
      +                          th+cstack]
 11894                           ;setDimmerLights_Initialization@lights stored from wreg
 11895  13E6  0020               	movlb	0	; select bank0
 11896  13E7  00A3               	movwf	setDimmerLights_Initialization@lights
 11897                           
 11898                           ;Dimmer_B1.c: 338: DimmerLightsPointSelect(lights);
 11899  13E8  0823               	movf	setDimmerLights_Initialization@lights,w
 11900  13E9  3190  20B2         	fcall	_DimmerLightsPointSelect
 11901                           
 11902                           ;Dimmer_B1.c: 339: DimmerLights->Clear = 1;
 11903  13EB  0879               	movf	_DimmerLights,w
 11904  13EC  3E09               	addlw	9
 11905  13ED  0086               	movwf	6
 11906  13EE  3001               	movlw	1	; select bank2/3
 11907  13EF  0087               	movwf	7
 11908  13F0  1501               	bsf	1,2
 11909                           
 11910                           ;Dimmer_B1.c: 345: DimmerLights->MaxmumValue = ((char)((100-55)*1.5));
 11911  13F1  3043               	movlw	67
 11912  13F2  0020               	movlb	0	; select bank0
 11913  13F3  00A2               	movwf	??_setDimmerLights_Initialization
 11914  13F4  0879               	movf	_DimmerLights,w
 11915  13F5  3E05               	addlw	5
 11916  13F6  0086               	movwf	6
 11917  13F7  3001               	movlw	1	; select bank2/3
 11918  13F8  0087               	movwf	7
 11919  13F9  0822               	movf	??_setDimmerLights_Initialization,w
 11920  13FA  0081               	movwf	1
 11921                           
 11922                           ;Dimmer_B1.c: 346: DimmerLights->MinimumValue = ((char)((100-20)*1.5));
 11923  13FB  3078               	movlw	120
 11924  13FC  00A2               	movwf	??_setDimmerLights_Initialization
 11925  13FD  0879               	movf	_DimmerLights,w
 11926  13FE  3E06               	addlw	6
 11927  13FF  0086               	movwf	6
 11928  1400  3001               	movlw	1	; select bank2/3
 11929  1401  0087               	movwf	7
 11930  1402  0822               	movf	??_setDimmerLights_Initialization,w
 11931  1403  0081               	movwf	1
 11932                           
 11933                           ;Dimmer_B1.c: 356: DimmerLights->DimmingValue = DimmerLights->MinimumValue;
 11934  1404  0879               	movf	_DimmerLights,w
 11935  1405  3E06               	addlw	6
 11936  1406  0086               	movwf	6
 11937  1407  3001               	movlw	1	; select bank2/3
 11938  1408  0087               	movwf	7
 11939  1409  0801               	movf	1,w
 11940  140A  00A2               	movwf	??_setDimmerLights_Initialization
 11941  140B  0879               	movf	_DimmerLights,w
 11942  140C  3E04               	addlw	4
 11943  140D  0086               	movwf	6
 11944  140E  3001               	movlw	1	; select bank2/3
 11945  140F  0087               	movwf	7
 11946  1410  0822               	movf	??_setDimmerLights_Initialization,w
 11947  1411  0081               	movwf	1
 11948  1412  0008               	return
 11949  1413                     __end_of_setDimmerLights_Initialization:	
 11950                           
 11951                           	psect	text70
 11952  1E6E                     __ptext70:	
 11953 ;; *************** function _Dimmer_Initialization *****************
 11954 ;; Defined at:
 11955 ;;		line 759 in file "../src/Dimmer_B1.c"
 11956 ;; Parameters:    Size  Location     Type
 11957 ;;		None
 11958 ;; Auto vars:     Size  Location     Type
 11959 ;;		None
 11960 ;; Return value:  Size  Location     Type
 11961 ;;		None               void
 11962 ;; Registers used:
 11963 ;;		wreg
 11964 ;; Tracked objects:
 11965 ;;		On entry : 0/0
 11966 ;;		On exit  : 0/0
 11967 ;;		Unchanged: 0/0
 11968 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11969 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11970 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11971 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11972 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11973 ;;Total ram usage:        1 bytes
 11974 ;; Hardware stack levels used:    1
 11975 ;; Hardware stack levels required when called:    5
 11976 ;; This function calls:
 11977 ;;		Nothing
 11978 ;; This function is called by:
 11979 ;;		_DimmerLights_Initialization
 11980 ;; This function uses a non-reentrant model
 11981 ;;
 11982                           
 11983                           
 11984                           ;psect for function _Dimmer_Initialization
 11985  1E6E                     _Dimmer_Initialization:	
 11986                           
 11987                           ;Dimmer_B1.c: 760: Dimmer = &Dimmer1;
 11988                           
 11989                           ;incstack = 0
 11990                           ; Regs used in _Dimmer_Initialization: [wreg]
 11991  1E6E  30E0               	movlw	_Dimmer1& (0+255)
 11992  1E6F  0020               	movlb	0	; select bank0
 11993  1E70  00A0               	movwf	??_Dimmer_Initialization
 11994  1E71  0820               	movf	??_Dimmer_Initialization,w
 11995  1E72  0021               	movlb	1	; select bank1
 11996  1E73  00B9               	movwf	_Dimmer^(0+128)
 11997  1E74  0008               	return
 11998  1E75                     __end_of_Dimmer_Initialization:	
 11999                           
 12000                           	psect	text71
 12001  1E84                     __ptext71:	
 12002 ;; *************** function _DelayOff_Main *****************
 12003 ;; Defined at:
 12004 ;;		line 41 in file "../src/DelayOff_B1.c"
 12005 ;; Parameters:    Size  Location     Type
 12006 ;;		None
 12007 ;; Auto vars:     Size  Location     Type
 12008 ;;		None
 12009 ;; Return value:  Size  Location     Type
 12010 ;;		None               void
 12011 ;; Registers used:
 12012 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12013 ;; Tracked objects:
 12014 ;;		On entry : 0/0
 12015 ;;		On exit  : 0/0
 12016 ;;		Unchanged: 0/0
 12017 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12018 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12019 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12020 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12021 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12022 ;;Total ram usage:        0 bytes
 12023 ;; Hardware stack levels used:    1
 12024 ;; Hardware stack levels required when called:   10
 12025 ;; This function calls:
 12026 ;;		_DlyOff_Main
 12027 ;; This function is called by:
 12028 ;;		_main
 12029 ;; This function uses a non-reentrant model
 12030 ;;
 12031                           
 12032                           
 12033                           ;psect for function _DelayOff_Main
 12034  1E84                     _DelayOff_Main:	
 12035                           
 12036                           ;DelayOff_B1.c: 43: DlyOff_Main(1);
 12037                           
 12038                           ;incstack = 0
 12039                           ; Regs used in _DelayOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12040  1E84  3001               	movlw	1
 12041  1E85  318C  244F  319E   	fcall	_DlyOff_Main
 12042                           
 12043                           ;DelayOff_B1.c: 47: DlyOff_Main(2);
 12044  1E88  3002               	movlw	2
 12045  1E89  318C  244F         	fcall	_DlyOff_Main
 12046  1E8B  0008               	return
 12047  1E8C                     __end_of_DelayOff_Main:	
 12048                           
 12049                           	psect	text72
 12050  0C4F                     __ptext72:	
 12051 ;; *************** function _DlyOff_Main *****************
 12052 ;; Defined at:
 12053 ;;		line 62 in file "../src/DelayOff_B1.c"
 12054 ;; Parameters:    Size  Location     Type
 12055 ;;  sw              1    wreg     unsigned char 
 12056 ;; Auto vars:     Size  Location     Type
 12057 ;;  sw              1   68[BANK0 ] unsigned char 
 12058 ;; Return value:  Size  Location     Type
 12059 ;;		None               void
 12060 ;; Registers used:
 12061 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12062 ;; Tracked objects:
 12063 ;;		On entry : 0/0
 12064 ;;		On exit  : 0/0
 12065 ;;		Unchanged: 0/0
 12066 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12067 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12068 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12069 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12070 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12071 ;;Total ram usage:        3 bytes
 12072 ;; Hardware stack levels used:    1
 12073 ;; Hardware stack levels required when called:    9
 12074 ;; This function calls:
 12075 ;;		_DelayOffPointSelect
 12076 ;;		_setBuz
 12077 ;;		_setDimmerLights_Switch
 12078 ;;		_setDimmerLights_Trigger
 12079 ;;		_setRFSW_Status
 12080 ;;		_setRF_DimmerLights
 12081 ;;		_setSw_Status
 12082 ;;		_setTxData
 12083 ;; This function is called by:
 12084 ;;		_DelayOff_Main
 12085 ;; This function uses a non-reentrant model
 12086 ;;
 12087                           
 12088                           
 12089                           ;psect for function _DlyOff_Main
 12090  0C4F                     _DlyOff_Main:	
 12091                           
 12092                           ;incstack = 0
 12093                           ; Regs used in _DlyOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12094                           ;DlyOff_Main@sw stored from wreg
 12095  0C4F  0020               	movlb	0	; select bank0
 12096  0C50  00E4               	movwf	DlyOff_Main@sw
 12097                           
 12098                           ;DelayOff_B1.c: 63: DelayOffPointSelect(sw);
 12099  0C51  0864               	movf	DlyOff_Main@sw,w
 12100  0C52  3191  212C  318C   	fcall	_DelayOffPointSelect
 12101                           
 12102                           ;DelayOff_B1.c: 64: if (DelayOff->GO) {
 12103  0C55  0021               	movlb	1	; select bank1
 12104  0C56  0838               	movf	_DelayOff^(0+128),w
 12105  0C57  0086               	movwf	6
 12106  0C58  0187               	clrf	7
 12107  0C59  1C81               	btfss	1,1
 12108  0C5A  0008               	return
 12109                           
 12110                           ;DelayOff_B1.c: 65: DelayOff->SecondTime++;
 12111  0C5B  0838               	movf	_DelayOff^(0+128),w
 12112  0C5C  3E02               	addlw	2
 12113  0C5D  0086               	movwf	6
 12114  0C5E  0187               	clrf	7
 12115  0C5F  3001               	movlw	1
 12116  0C60  0781               	addwf	1,f
 12117  0C61  3141               	addfsr 1,1
 12118  0C62  1803               	skipnc
 12119  0C63  0A81               	incf	1,f
 12120                           
 12121                           ;DelayOff_B1.c: 66: if (DelayOff->SecondTime >= 5650) {
 12122  0C64  0838               	movf	_DelayOff^(0+128),w
 12123  0C65  3E02               	addlw	2
 12124  0C66  0086               	movwf	6
 12125  0C67  0187               	clrf	7
 12126  0C68  3F40               	moviw [0]fsr1
 12127  0C69  0020               	movlb	0	; select bank0
 12128  0C6A  00E2               	movwf	??_DlyOff_Main
 12129  0C6B  3F41               	moviw [1]fsr1
 12130  0C6C  00E3               	movwf	??_DlyOff_Main+1
 12131  0C6D  3016               	movlw	22
 12132  0C6E  0263               	subwf	??_DlyOff_Main+1,w
 12133  0C6F  3012               	movlw	18
 12134  0C70  1903               	skipnz
 12135  0C71  0262               	subwf	??_DlyOff_Main,w
 12136  0C72  1C03               	skipc
 12137  0C73  0008               	return
 12138                           
 12139                           ;DelayOff_B1.c: 67: DelayOff->SecondTime = 0;
 12140  0C74  0021               	movlb	1	; select bank1
 12141  0C75  0838               	movf	_DelayOff^(0+128),w
 12142  0C76  3E02               	addlw	2
 12143  0C77  0086               	movwf	6
 12144  0C78  0187               	clrf	7
 12145  0C79  3000               	movlw	0
 12146  0C7A  3FC0               	movwi [0]fsr1
 12147  0C7B  3FC1               	movwi [1]fsr1
 12148                           
 12149                           ;DelayOff_B1.c: 68: DelayOff->MinuteTime++;
 12150  0C7C  3001               	movlw	1
 12151  0C7D  0020               	movlb	0	; select bank0
 12152  0C7E  00E2               	movwf	??_DlyOff_Main
 12153  0C7F  0021               	movlb	1	; select bank1
 12154  0C80  0838               	movf	_DelayOff^(0+128),w
 12155  0C81  3E04               	addlw	4
 12156  0C82  0086               	movwf	6
 12157  0C83  0187               	clrf	7
 12158  0C84  0020               	movlb	0	; select bank0
 12159  0C85  0862               	movf	??_DlyOff_Main,w
 12160  0C86  0781               	addwf	1,f
 12161                           
 12162                           ;DelayOff_B1.c: 69: if (DelayOff->MinuteTime >= DelayOff->Value) {
 12163  0C87  0021               	movlb	1	; select bank1
 12164  0C88  0838               	movf	_DelayOff^(0+128),w
 12165  0C89  3E04               	addlw	4
 12166  0C8A  0086               	movwf	6
 12167  0C8B  0187               	clrf	7
 12168  0C8C  0A38               	incf	_DelayOff^(0+128),w
 12169  0C8D  0084               	movwf	4
 12170  0C8E  0185               	clrf	5
 12171  0C8F  0800               	movf	0,w
 12172  0C90  0201               	subwf	1,w
 12173  0C91  1C03               	skipc
 12174  0C92  0008               	return
 12175                           
 12176                           ;DelayOff_B1.c: 70: DelayOff->MinuteTime = 0;
 12177  0C93  0838               	movf	_DelayOff^(0+128),w
 12178  0C94  3E04               	addlw	4
 12179  0C95  0086               	movwf	6
 12180  0C96  0187               	clrf	7
 12181  0C97  0181               	clrf	1
 12182                           
 12183                           ;DelayOff_B1.c: 71: DelayOff->GO = 0;
 12184  0C98  0838               	movf	_DelayOff^(0+128),w
 12185  0C99  0086               	movwf	6
 12186  0C9A  0187               	clrf	7
 12187  0C9B  1081               	bcf	1,1
 12188                           
 12189                           ;DelayOff_B1.c: 72: setSw_Status(sw, 0);
 12190  0C9C  0020               	movlb	0	; select bank0
 12191  0C9D  01A2               	clrf	setSw_Status@command
 12192  0C9E  0864               	movf	DlyOff_Main@sw,w
 12193  0C9F  319F  2771  318C   	fcall	_setSw_Status
 12194                           
 12195                           ;DelayOff_B1.c: 73: setRFSW_Status(sw, 0);
 12196  0CA2  0020               	movlb	0	; select bank0
 12197  0CA3  01A2               	clrf	setRFSW_Status@command
 12198  0CA4  0864               	movf	DlyOff_Main@sw,w
 12199  0CA5  319F  2762  318C   	fcall	_setRFSW_Status
 12200                           
 12201                           ;DelayOff_B1.c: 74: setRF_DimmerLights(sw, 0);
 12202  0CA8  0020               	movlb	0	; select bank0
 12203  0CA9  01DD               	clrf	setRF_DimmerLights@on
 12204  0CAA  0864               	movf	DlyOff_Main@sw,w
 12205  0CAB  3189  21A9  318C   	fcall	_setRF_DimmerLights
 12206                           
 12207                           ;DelayOff_B1.c: 75: setDimmerLights_Trigger(sw, 1);
 12208  0CAE  0020               	movlb	0	; select bank0
 12209  0CAF  01A2               	clrf	setDimmerLights_Trigger@command
 12210  0CB0  0AA2               	incf	setDimmerLights_Trigger@command,f
 12211  0CB1  0864               	movf	DlyOff_Main@sw,w
 12212  0CB2  319F  27BF  318C   	fcall	_setDimmerLights_Trigger
 12213                           
 12214                           ;DelayOff_B1.c: 76: setDimmerLights_Switch(sw, 0);
 12215  0CB5  0020               	movlb	0	; select bank0
 12216  0CB6  01A2               	clrf	setDimmerLights_Switch@command
 12217  0CB7  0864               	movf	DlyOff_Main@sw,w
 12218  0CB8  319F  27AF  318C   	fcall	_setDimmerLights_Switch
 12219                           
 12220                           ;DelayOff_B1.c: 77: setTxData(1);
 12221  0CBB  3001               	movlw	1
 12222  0CBC  3186  2671  318C   	fcall	_setTxData
 12223                           
 12224                           ;DelayOff_B1.c: 78: setBuz(1, 100);
 12225  0CBF  3064               	movlw	100
 12226  0CC0  0020               	movlb	0	; select bank0
 12227  0CC1  00A9               	movwf	setBuz@time
 12228  0CC2  3000               	movlw	0
 12229  0CC3  00AA               	movwf	setBuz@time+1
 12230  0CC4  3001               	movlw	1
 12231  0CC5  318B  23D8         	fcall	_setBuz
 12232  0CC7  0008               	return
 12233  0CC8                     __end_of_DlyOff_Main:	
 12234                           
 12235                           	psect	text73
 12236  0671                     __ptext73:	
 12237 ;; *************** function _setTxData *****************
 12238 ;; Defined at:
 12239 ;;		line 136 in file "../src/RF_Control_B1.c"
 12240 ;; Parameters:    Size  Location     Type
 12241 ;;  rf              1    wreg     unsigned char 
 12242 ;; Auto vars:     Size  Location     Type
 12243 ;;  rf              1    3[BANK0 ] unsigned char 
 12244 ;;  i               1    0        unsigned char 
 12245 ;; Return value:  Size  Location     Type
 12246 ;;		None               void
 12247 ;; Registers used:
 12248 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12249 ;; Tracked objects:
 12250 ;;		On entry : 0/0
 12251 ;;		On exit  : 0/0
 12252 ;;		Unchanged: 0/0
 12253 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12254 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12255 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12256 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12257 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12258 ;;Total ram usage:        2 bytes
 12259 ;; Hardware stack levels used:    1
 12260 ;; Hardware stack levels required when called:    6
 12261 ;; This function calls:
 12262 ;;		_RfPointSelect
 12263 ;; This function is called by:
 12264 ;;		_DlyOff_Main
 12265 ;;		_setDimmerLights_Adj
 12266 ;;		_setControl_Lights_Table
 12267 ;;		_setRFSW_Control
 12268 ;;		_setRFSW_AdjControl
 12269 ;;		_Sw_DimmerOnFunc
 12270 ;;		_Sw_DimmerOffFunc
 12271 ;; This function uses a non-reentrant model
 12272 ;;
 12273                           
 12274                           
 12275                           ;psect for function _setTxData
 12276  0671                     _setTxData:	
 12277                           
 12278                           ;incstack = 0
 12279                           ; Regs used in _setTxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12280                           ;setTxData@rf stored from wreg
 12281  0671  0020               	movlb	0	; select bank0
 12282  0672  00A3               	movwf	setTxData@rf
 12283                           
 12284                           ;RF_Control_B1.c: 137: char i;
 12285                           ;RF_Control_B1.c: 138: RfPointSelect(rf);
 12286  0673  0823               	movf	setTxData@rf,w
 12287  0674  319E  26F1  3186   	fcall	_RfPointSelect
 12288                           
 12289                           ;RF_Control_B1.c: 139: if (RF->Enable == 1) {
 12290  0677  0021               	movlb	1	; select bank1
 12291  0678  083D               	movf	_RF^(0+128),w
 12292  0679  0086               	movwf	6
 12293  067A  0187               	clrf	7
 12294  067B  1C01               	btfss	1,0
 12295  067C  0008               	return
 12296                           
 12297                           ;RF_Control_B1.c: 141: if (RF->TransceiveGO == 0) {
 12298  067D  083D               	movf	_RF^(0+128),w
 12299  067E  0086               	movwf	6
 12300  067F  0187               	clrf	7
 12301  0680  1901               	btfsc	1,2
 12302  0681  0008               	return
 12303                           
 12304                           ;RF_Control_B1.c: 142: RF->TransceiveGO = 1;
 12305  0682  083D               	movf	_RF^(0+128),w
 12306  0683  0086               	movwf	6
 12307  0684  0187               	clrf	7
 12308  0685  1501               	bsf	1,2
 12309                           
 12310                           ;RF_Control_B1.c: 151: RF_Data[0] = 0x63;
 12311  0686  3063               	movlw	99
 12312  0687  0020               	movlb	0	; select bank0
 12313  0688  00A2               	movwf	??_setTxData
 12314  0689  0822               	movf	??_setTxData,w
 12315  068A  0021               	movlb	1	; select bank1
 12316  068B  00A0               	movwf	_RF_Data^(0+128)
 12317                           
 12318                           ;RF_Control_B1.c: 152: RF_Data[1] = 0x02;
 12319  068C  3002               	movlw	2
 12320  068D  0020               	movlb	0	; select bank0
 12321  068E  00A2               	movwf	??_setTxData
 12322  068F  0822               	movf	??_setTxData,w
 12323  0690  0021               	movlb	1	; select bank1
 12324  0691  00A1               	movwf	(_RF_Data^(0+128)+1)
 12325                           
 12326                           ;RF_Control_B1.c: 153: RF_Data[2] = product->Data[2];
 12327  0692  087D               	movf	_product,w
 12328  0693  0086               	movwf	6
 12329  0694  3001               	movlw	1	; select bank2/3
 12330  0695  0087               	movwf	7
 12331  0696  3001               	movlw	1	; select bank2/3
 12332  0697  3F42               	moviw [2]fsr1
 12333  0698  00A2               	movwf	(_RF_Data^(0+128)+2)
 12334                           
 12335                           ;RF_Control_B1.c: 154: RF_Data[3] = product->Data[3];
 12336  0699  087D               	movf	_product,w
 12337  069A  0086               	movwf	6
 12338  069B  3001               	movlw	1	; select bank2/3
 12339  069C  0087               	movwf	7
 12340  069D  3001               	movlw	1	; select bank2/3
 12341  069E  3F43               	moviw [3]fsr1
 12342  069F  00A3               	movwf	(_RF_Data^(0+128)+3)
 12343                           
 12344                           ;RF_Control_B1.c: 155: RF_Data[4] = product->Data[4];
 12345  06A0  087D               	movf	_product,w
 12346  06A1  0086               	movwf	6
 12347  06A2  3001               	movlw	1	; select bank2/3
 12348  06A3  0087               	movwf	7
 12349  06A4  3001               	movlw	1	; select bank2/3
 12350  06A5  3F44               	moviw [4]fsr1
 12351  06A6  00A4               	movwf	(_RF_Data^(0+128)+4)
 12352                           
 12353                           ;RF_Control_B1.c: 156: RF_Data[5] = product->Data[5];
 12354  06A7  087D               	movf	_product,w
 12355  06A8  0086               	movwf	6
 12356  06A9  3001               	movlw	1	; select bank2/3
 12357  06AA  0087               	movwf	7
 12358  06AB  3001               	movlw	1	; select bank2/3
 12359  06AC  3F45               	moviw [5]fsr1
 12360  06AD  00A5               	movwf	(_RF_Data^(0+128)+5)
 12361                           
 12362                           ;RF_Control_B1.c: 157: RF_Data[6] = product->Data[6];
 12363  06AE  087D               	movf	_product,w
 12364  06AF  0086               	movwf	6
 12365  06B0  3001               	movlw	1	; select bank2/3
 12366  06B1  0087               	movwf	7
 12367  06B2  3001               	movlw	1	; select bank2/3
 12368  06B3  3F46               	moviw [6]fsr1
 12369  06B4  00A6               	movwf	(_RF_Data^(0+128)+6)
 12370                           
 12371                           ;RF_Control_B1.c: 158: RF_Data[7] = product->Data[7];
 12372  06B5  087D               	movf	_product,w
 12373  06B6  0086               	movwf	6
 12374  06B7  3001               	movlw	1	; select bank2/3
 12375  06B8  0087               	movwf	7
 12376  06B9  3001               	movlw	1	; select bank2/3
 12377  06BA  3F47               	moviw [7]fsr1
 12378  06BB  00A7               	movwf	(_RF_Data^(0+128)+7)
 12379                           
 12380                           ;RF_Control_B1.c: 159: RF_Data[8] = product->Data[8];
 12381  06BC  087D               	movf	_product,w
 12382  06BD  0086               	movwf	6
 12383  06BE  3001               	movlw	1	; select bank2/3
 12384  06BF  0087               	movwf	7
 12385  06C0  3001               	movlw	1	; select bank2/3
 12386  06C1  3F48               	moviw [8]fsr1
 12387  06C2  00A8               	movwf	(_RF_Data^(0+128)+8)
 12388                           
 12389                           ;RF_Control_B1.c: 160: RF_Data[9] = product->Data[9];
 12390  06C3  087D               	movf	_product,w
 12391  06C4  0086               	movwf	6
 12392  06C5  3001               	movlw	1	; select bank2/3
 12393  06C6  0087               	movwf	7
 12394  06C7  3001               	movlw	1	; select bank2/3
 12395  06C8  3F49               	moviw [9]fsr1
 12396  06C9  00A9               	movwf	(_RF_Data^(0+128)+9)
 12397                           
 12398                           ;RF_Control_B1.c: 161: RF_Data[10] = product->Data[10];
 12399  06CA  087D               	movf	_product,w
 12400  06CB  0086               	movwf	6
 12401  06CC  3001               	movlw	1	; select bank2/3
 12402  06CD  0087               	movwf	7
 12403  06CE  3001               	movlw	1	; select bank2/3
 12404  06CF  3F4A               	moviw [10]fsr1
 12405  06D0  00AA               	movwf	(_RF_Data^(0+128)+10)
 12406                           
 12407                           ;RF_Control_B1.c: 162: RF_Data[11] = product->Data[11];
 12408  06D1  087D               	movf	_product,w
 12409  06D2  0086               	movwf	6
 12410  06D3  3001               	movlw	1	; select bank2/3
 12411  06D4  0087               	movwf	7
 12412  06D5  3001               	movlw	1	; select bank2/3
 12413  06D6  3F4B               	moviw [11]fsr1
 12414  06D7  00AB               	movwf	(_RF_Data^(0+128)+11)
 12415                           
 12416                           ;RF_Control_B1.c: 163: RF_Data[12] = product->Data[12];
 12417  06D8  087D               	movf	_product,w
 12418  06D9  0086               	movwf	6
 12419  06DA  3001               	movlw	1	; select bank2/3
 12420  06DB  0087               	movwf	7
 12421  06DC  3001               	movlw	1	; select bank2/3
 12422  06DD  3F4C               	moviw [12]fsr1
 12423  06DE  00AC               	movwf	(_RF_Data^(0+128)+12)
 12424                           
 12425                           ;RF_Control_B1.c: 164: RF_Data[13] = product->Data[13];
 12426  06DF  087D               	movf	_product,w
 12427  06E0  0086               	movwf	6
 12428  06E1  3001               	movlw	1	; select bank2/3
 12429  06E2  0087               	movwf	7
 12430  06E3  3001               	movlw	1	; select bank2/3
 12431  06E4  3F4D               	moviw [13]fsr1
 12432  06E5  00AD               	movwf	(_RF_Data^(0+128)+13)
 12433                           
 12434                           ;RF_Control_B1.c: 165: RF_Data[14] = product->Data[14];
 12435  06E6  087D               	movf	_product,w
 12436  06E7  0086               	movwf	6
 12437  06E8  3001               	movlw	1	; select bank2/3
 12438  06E9  0087               	movwf	7
 12439  06EA  3001               	movlw	1	; select bank2/3
 12440  06EB  3F4E               	moviw [14]fsr1
 12441  06EC  00AE               	movwf	(_RF_Data^(0+128)+14)
 12442                           
 12443                           ;RF_Control_B1.c: 166: RF_Data[15] = product->Data[15];
 12444  06ED  087D               	movf	_product,w
 12445  06EE  0086               	movwf	6
 12446  06EF  3001               	movlw	1	; select bank2/3
 12447  06F0  0087               	movwf	7
 12448  06F1  3001               	movlw	1	; select bank2/3
 12449  06F2  3F4F               	moviw [15]fsr1
 12450  06F3  00AF               	movwf	(_RF_Data^(0+128)+15)
 12451                           
 12452                           ;RF_Control_B1.c: 167: RF_Data[16] = product->Data[16];
 12453  06F4  087D               	movf	_product,w
 12454  06F5  0086               	movwf	6
 12455  06F6  3001               	movlw	1	; select bank2/3
 12456  06F7  0087               	movwf	7
 12457  06F8  3001               	movlw	1	; select bank2/3
 12458  06F9  3F50               	moviw [16]fsr1
 12459  06FA  00B0               	movwf	(_RF_Data^(0+128)+16)
 12460                           
 12461                           ;RF_Control_B1.c: 168: RF_Data[17] = product->Data[17];
 12462  06FB  087D               	movf	_product,w
 12463  06FC  0086               	movwf	6
 12464  06FD  3001               	movlw	1	; select bank2/3
 12465  06FE  0087               	movwf	7
 12466  06FF  3001               	movlw	1	; select bank2/3
 12467  0700  3F51               	moviw [17]fsr1
 12468  0701  00B1               	movwf	(_RF_Data^(0+128)+17)
 12469                           
 12470                           ;RF_Control_B1.c: 169: RF_Data[18] = product->Data[18];
 12471  0702  087D               	movf	_product,w
 12472  0703  0086               	movwf	6
 12473  0704  3001               	movlw	1	; select bank2/3
 12474  0705  0087               	movwf	7
 12475  0706  3001               	movlw	1	; select bank2/3
 12476  0707  3F52               	moviw [18]fsr1
 12477  0708  00B2               	movwf	(_RF_Data^(0+128)+18)
 12478                           
 12479                           ;RF_Control_B1.c: 170: RF_Data[19] = product->Data[19];
 12480  0709  087D               	movf	_product,w
 12481  070A  0086               	movwf	6
 12482  070B  3001               	movlw	1	; select bank2/3
 12483  070C  0087               	movwf	7
 12484  070D  3001               	movlw	1	; select bank2/3
 12485  070E  3F53               	moviw [19]fsr1
 12486  070F  00B3               	movwf	(_RF_Data^(0+128)+19)
 12487                           
 12488                           ;RF_Control_B1.c: 171: RF_Data[20] = 210;
 12489  0710  30D2               	movlw	210
 12490  0711  0020               	movlb	0	; select bank0
 12491  0712  00A2               	movwf	??_setTxData
 12492  0713  0822               	movf	??_setTxData,w
 12493  0714  0021               	movlb	1	; select bank1
 12494  0715  00B4               	movwf	(_RF_Data^(0+128)+20)
 12495  0716  0008               	return
 12496  0717                     __end_of_setTxData:	
 12497                           
 12498                           	psect	text74
 12499  1EF1                     __ptext74:	
 12500 ;; *************** function _RfPointSelect *****************
 12501 ;; Defined at:
 12502 ;;		line 7 in file "../src/RF_Control_B1.c"
 12503 ;; Parameters:    Size  Location     Type
 12504 ;;  rf              1    wreg     unsigned char 
 12505 ;; Auto vars:     Size  Location     Type
 12506 ;;  rf              1    1[BANK0 ] unsigned char 
 12507 ;; Return value:  Size  Location     Type
 12508 ;;		None               void
 12509 ;; Registers used:
 12510 ;;		wreg
 12511 ;; Tracked objects:
 12512 ;;		On entry : 0/0
 12513 ;;		On exit  : 0/0
 12514 ;;		Unchanged: 0/0
 12515 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12516 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12517 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12518 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12519 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12520 ;;Total ram usage:        2 bytes
 12521 ;; Hardware stack levels used:    1
 12522 ;; Hardware stack levels required when called:    5
 12523 ;; This function calls:
 12524 ;;		Nothing
 12525 ;; This function is called by:
 12526 ;;		_setRF_Learn
 12527 ;;		_setRF_Main
 12528 ;;		_setTxData
 12529 ;;		_setRF_Enable
 12530 ;;		_RF_RxDisable
 12531 ;;		_getRxData
 12532 ;;		_setLog_Code
 12533 ;;		_setControl_Lights_Table
 12534 ;; This function uses a non-reentrant model
 12535 ;;
 12536                           
 12537                           
 12538                           ;psect for function _RfPointSelect
 12539  1EF1                     _RfPointSelect:	
 12540                           
 12541                           ;incstack = 0
 12542                           ; Regs used in _RfPointSelect: [wreg]
 12543                           ;RfPointSelect@rf stored from wreg
 12544  1EF1  0020               	movlb	0	; select bank0
 12545  1EF2  00A1               	movwf	RfPointSelect@rf
 12546                           
 12547                           ;RF_Control_B1.c: 9: if (rf == 1) {
 12548  1EF3  0821               	movf	RfPointSelect@rf,w
 12549  1EF4  3A01               	xorlw	1
 12550  1EF5  1D03               	skipz
 12551  1EF6  0008               	return
 12552                           
 12553                           ;RF_Control_B1.c: 10: RF = &RF1;
 12554  1EF7  30D0               	movlw	_RF1& (0+255)
 12555  1EF8  00A0               	movwf	??_RfPointSelect
 12556  1EF9  0820               	movf	??_RfPointSelect,w
 12557  1EFA  0021               	movlb	1	; select bank1
 12558  1EFB  00BD               	movwf	_RF^(0+128)
 12559  1EFC  0008               	return
 12560  1EFD                     __end_of_RfPointSelect:	
 12561                           
 12562                           	psect	text75
 12563  1F71                     __ptext75:	
 12564 ;; *************** function _setSw_Status *****************
 12565 ;; Defined at:
 12566 ;;		line 105 in file "../src/Switch_B1.c"
 12567 ;; Parameters:    Size  Location     Type
 12568 ;;  sw              1    wreg     unsigned char 
 12569 ;;  command         1    2[BANK0 ] unsigned char 
 12570 ;; Auto vars:     Size  Location     Type
 12571 ;;  sw              1    3[BANK0 ] unsigned char 
 12572 ;; Return value:  Size  Location     Type
 12573 ;;		None               void
 12574 ;; Registers used:
 12575 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12576 ;; Tracked objects:
 12577 ;;		On entry : 0/0
 12578 ;;		On exit  : 0/0
 12579 ;;		Unchanged: 0/0
 12580 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12581 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12582 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12583 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12584 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12585 ;;Total ram usage:        2 bytes
 12586 ;; Hardware stack levels used:    1
 12587 ;; Hardware stack levels required when called:    6
 12588 ;; This function calls:
 12589 ;;		_SwPointSelect
 12590 ;; This function is called by:
 12591 ;;		_DlyOff_Main
 12592 ;;		_setControl_Lights_Table
 12593 ;;		_setRFSW_Control
 12594 ;;		_setDimmerLights_ERROR
 12595 ;; This function uses a non-reentrant model
 12596 ;;
 12597                           
 12598                           
 12599                           ;psect for function _setSw_Status
 12600  1F71                     _setSw_Status:	
 12601                           
 12602                           ;incstack = 0
 12603                           ; Regs used in _setSw_Status: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12604                           ;setSw_Status@sw stored from wreg
 12605  1F71  0020               	movlb	0	; select bank0
 12606  1F72  00A3               	movwf	setSw_Status@sw
 12607                           
 12608                           ;Switch_B1.c: 106: SwPointSelect(sw);
 12609  1F73  0823               	movf	setSw_Status@sw,w
 12610  1F74  3190  20C5         	fcall	_SwPointSelect
 12611                           
 12612                           ;Switch_B1.c: 107: Sw->Status = command;
 12613  1F76  087B               	movf	_Sw,w
 12614  1F77  0086               	movwf	6
 12615  1F78  3001               	movlw	1	; select bank2/3
 12616  1F79  0087               	movwf	7
 12617  1F7A  0020               	movlb	0	; select bank0
 12618  1F7B  0822               	movf	setSw_Status@command,w
 12619  1F7C  1301               	bcf	1,6
 12620  1F7D  1D03               	skipz
 12621  1F7E  1701               	bsf	1,6
 12622  1F7F  0008               	return
 12623  1F80                     __end_of_setSw_Status:	
 12624                           
 12625                           	psect	text76
 12626  10C5                     __ptext76:	
 12627 ;; *************** function _SwPointSelect *****************
 12628 ;; Defined at:
 12629 ;;		line 17 in file "../src/Switch_B1.c"
 12630 ;; Parameters:    Size  Location     Type
 12631 ;;  sw              1    wreg     unsigned char 
 12632 ;; Auto vars:     Size  Location     Type
 12633 ;;  sw              1    1[BANK0 ] unsigned char 
 12634 ;; Return value:  Size  Location     Type
 12635 ;;		None               void
 12636 ;; Registers used:
 12637 ;;		wreg
 12638 ;; Tracked objects:
 12639 ;;		On entry : 0/0
 12640 ;;		On exit  : 0/0
 12641 ;;		Unchanged: 0/0
 12642 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12643 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12644 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12645 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12646 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12647 ;;Total ram usage:        2 bytes
 12648 ;; Hardware stack levels used:    1
 12649 ;; Hardware stack levels required when called:    5
 12650 ;; This function calls:
 12651 ;;		Nothing
 12652 ;; This function is called by:
 12653 ;;		_setSw_Enable
 12654 ;;		_setSw_Status
 12655 ;;		_setSw_Main
 12656 ;;		_Sw_Detect
 12657 ;; This function uses a non-reentrant model
 12658 ;;
 12659                           
 12660                           
 12661                           ;psect for function _SwPointSelect
 12662  10C5                     _SwPointSelect:	
 12663                           
 12664                           ;incstack = 0
 12665                           ; Regs used in _SwPointSelect: [wreg]
 12666                           ;SwPointSelect@sw stored from wreg
 12667  10C5  0020               	movlb	0	; select bank0
 12668  10C6  00A1               	movwf	SwPointSelect@sw
 12669                           
 12670                           ;Switch_B1.c: 20: if (sw == 1) {
 12671  10C7  0821               	movf	SwPointSelect@sw,w
 12672  10C8  3A01               	xorlw	1
 12673  10C9  1D03               	skipz
 12674  10CA  28D0               	goto	l5442
 12675                           
 12676                           ;Switch_B1.c: 21: Sw = &Sw1;
 12677  10CB  3048               	movlw	_Sw1& (0+255)
 12678  10CC  00A0               	movwf	??_SwPointSelect
 12679  10CD  0820               	movf	??_SwPointSelect,w
 12680  10CE  00FB               	movwf	_Sw
 12681                           
 12682                           ;Switch_B1.c: 22: }
 12683  10CF  0008               	return
 12684  10D0                     l5442:	
 12685                           
 12686                           ;Switch_B1.c: 25: else if (sw == 2) {
 12687  10D0  0821               	movf	SwPointSelect@sw,w
 12688  10D1  3A02               	xorlw	2
 12689  10D2  1D03               	skipz
 12690  10D3  0008               	return
 12691                           
 12692                           ;Switch_B1.c: 26: Sw = &Sw2;
 12693  10D4  3051               	movlw	_Sw2& (0+255)
 12694  10D5  00A0               	movwf	??_SwPointSelect
 12695  10D6  0820               	movf	??_SwPointSelect,w
 12696  10D7  00FB               	movwf	_Sw
 12697  10D8  0008               	return
 12698  10D9                     __end_of_SwPointSelect:	
 12699                           
 12700                           	psect	text77
 12701  09A9                     __ptext77:	
 12702 ;; *************** function _setRF_DimmerLights *****************
 12703 ;; Defined at:
 12704 ;;		line 402 in file "../src/RF_Control_B1.c"
 12705 ;; Parameters:    Size  Location     Type
 12706 ;;  lights          1    wreg     unsigned char 
 12707 ;;  on              1   61[BANK0 ] unsigned char 
 12708 ;; Auto vars:     Size  Location     Type
 12709 ;;  lights          1   65[BANK0 ] unsigned char 
 12710 ;;  status          1   64[BANK0 ] unsigned char 
 12711 ;; Return value:  Size  Location     Type
 12712 ;;		None               void
 12713 ;; Registers used:
 12714 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12715 ;; Tracked objects:
 12716 ;;		On entry : 0/0
 12717 ;;		On exit  : 0/0
 12718 ;;		Unchanged: 0/0
 12719 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12720 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12721 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12722 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12723 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12724 ;;Total ram usage:        5 bytes
 12725 ;; Hardware stack levels used:    1
 12726 ;; Hardware stack levels required when called:    8
 12727 ;; This function calls:
 12728 ;;		_setPercentValue
 12729 ;; This function is called by:
 12730 ;;		_DlyOff_Main
 12731 ;;		_setDimmerLights_Adj
 12732 ;;		_setRFSW_Control
 12733 ;;		_Sw_DimmerOnFunc
 12734 ;;		_Sw_DimmerOffFunc
 12735 ;; This function uses a non-reentrant model
 12736 ;;
 12737                           
 12738                           
 12739                           ;psect for function _setRF_DimmerLights
 12740  09A9                     _setRF_DimmerLights:	
 12741                           
 12742                           ;incstack = 0
 12743                           ; Regs used in _setRF_DimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12744                           ;setRF_DimmerLights@lights stored from wreg
 12745  09A9  0020               	movlb	0	; select bank0
 12746  09AA  00E1               	movwf	setRF_DimmerLights@lights
 12747                           
 12748                           ;RF_Control_B1.c: 403: char status;
 12749                           ;RF_Control_B1.c: 404: status = 1;
 12750  09AB  01E0               	clrf	setRF_DimmerLights@status
 12751  09AC  0AE0               	incf	setRF_DimmerLights@status,f
 12752                           
 12753                           ;RF_Control_B1.c: 405: status <<= (lights - 1);
 12754  09AD  0861               	movf	setRF_DimmerLights@lights,w
 12755  09AE  3EFF               	addlw	-1
 12756  09AF  0A89               	incf	9,f
 12757  09B0  29B3               	goto	u4080
 12758  09B1                     u4085:	
 12759  09B1  1003               	clrc
 12760  09B2  0DE0               	rlf	setRF_DimmerLights@status,f
 12761  09B3                     u4080:	
 12762  09B3  3EFF               	addlw	-1
 12763  09B4  1D03               	skipz
 12764  09B5  29B1               	goto	u4085
 12765                           
 12766                           ;RF_Control_B1.c: 406: product->Data[11]=lights;
 12767  09B6  0861               	movf	setRF_DimmerLights@lights,w
 12768  09B7  00DE               	movwf	??_setRF_DimmerLights
 12769  09B8  087D               	movf	_product,w
 12770  09B9  3E0B               	addlw	11
 12771  09BA  0086               	movwf	6
 12772  09BB  3001               	movlw	1	; select bank2/3
 12773  09BC  0087               	movwf	7
 12774  09BD  085E               	movf	??_setRF_DimmerLights,w
 12775  09BE  0081               	movwf	1
 12776                           
 12777                           ;RF_Control_B1.c: 409: product->Data[(20 + lights)]=setPercentValue(((char)((100-55)*1.5
      +                          )));
 12778  09BF  3043               	movlw	67
 12779  09C0  3196  266A  3189   	fcall	_setPercentValue
 12780  09C3  0020               	movlb	0	; select bank0
 12781  09C4  00DE               	movwf	??_setRF_DimmerLights
 12782  09C5  0861               	movf	setRF_DimmerLights@lights,w
 12783  09C6  3E14               	addlw	20
 12784  09C7  077D               	addwf	_product,w
 12785  09C8  00DF               	movwf	??_setRF_DimmerLights+1
 12786  09C9  085F               	movf	??_setRF_DimmerLights+1,w
 12787  09CA  0086               	movwf	6
 12788  09CB  3001               	movlw	1	; select bank2/3
 12789  09CC  0087               	movwf	7
 12790  09CD  085E               	movf	??_setRF_DimmerLights,w
 12791  09CE  0081               	movwf	1
 12792                           
 12793                           ;RF_Control_B1.c: 412: product->Data[9]=product->Data[20 + lights];
 12794  09CF  0861               	movf	setRF_DimmerLights@lights,w
 12795  09D0  3E14               	addlw	20
 12796  09D1  077D               	addwf	_product,w
 12797  09D2  00DE               	movwf	??_setRF_DimmerLights
 12798  09D3  085E               	movf	??_setRF_DimmerLights,w
 12799  09D4  0086               	movwf	6
 12800  09D5  3001               	movlw	1	; select bank2/3
 12801  09D6  0087               	movwf	7
 12802  09D7  0801               	movf	1,w
 12803  09D8  00DF               	movwf	??_setRF_DimmerLights+1
 12804  09D9  087D               	movf	_product,w
 12805  09DA  3E09               	addlw	9
 12806  09DB  0086               	movwf	6
 12807  09DC  3001               	movlw	1	; select bank2/3
 12808  09DD  0087               	movwf	7
 12809  09DE  085F               	movf	??_setRF_DimmerLights+1,w
 12810  09DF  0081               	movwf	1
 12811                           
 12812                           ;RF_Control_B1.c: 413: product->Data[17]=product->Data[26 + lights];
 12813  09E0  0861               	movf	setRF_DimmerLights@lights,w
 12814  09E1  3E1A               	addlw	26
 12815  09E2  077D               	addwf	_product,w
 12816  09E3  00DE               	movwf	??_setRF_DimmerLights
 12817  09E4  085E               	movf	??_setRF_DimmerLights,w
 12818  09E5  0086               	movwf	6
 12819  09E6  3001               	movlw	1	; select bank2/3
 12820  09E7  0087               	movwf	7
 12821  09E8  0801               	movf	1,w
 12822  09E9  00DF               	movwf	??_setRF_DimmerLights+1
 12823  09EA  087D               	movf	_product,w
 12824  09EB  3E11               	addlw	17
 12825  09EC  0086               	movwf	6
 12826  09ED  3001               	movlw	1	; select bank2/3
 12827  09EE  0087               	movwf	7
 12828  09EF  085F               	movf	??_setRF_DimmerLights+1,w
 12829  09F0  0081               	movwf	1
 12830                           
 12831                           ;RF_Control_B1.c: 414: if (on) {
 12832  09F1  085D               	movf	setRF_DimmerLights@on,w
 12833  09F2  1903               	btfsc	3,2
 12834  09F3  2A04               	goto	l5528
 12835                           
 12836                           ;RF_Control_B1.c: 415: product->Data[15]=(product->Data[15] | status);
 12837  09F4  087D               	movf	_product,w
 12838  09F5  3E0F               	addlw	15
 12839  09F6  0086               	movwf	6
 12840  09F7  3001               	movlw	1	; select bank2/3
 12841  09F8  0087               	movwf	7
 12842  09F9  0801               	movf	1,w
 12843  09FA  0460               	iorwf	setRF_DimmerLights@status,w
 12844  09FB  00DE               	movwf	??_setRF_DimmerLights
 12845  09FC  087D               	movf	_product,w
 12846  09FD  3E0F               	addlw	15
 12847  09FE  0086               	movwf	6
 12848  09FF  3001               	movlw	1	; select bank2/3
 12849  0A00  0087               	movwf	7
 12850  0A01  085E               	movf	??_setRF_DimmerLights,w
 12851  0A02  0081               	movwf	1
 12852                           
 12853                           ;RF_Control_B1.c: 416: } else {
 12854  0A03  0008               	return
 12855  0A04                     l5528:	
 12856                           
 12857                           ;RF_Control_B1.c: 417: product->Data[15]=(product->Data[15]&(~status));
 12858  0A04  087D               	movf	_product,w
 12859  0A05  3E0F               	addlw	15
 12860  0A06  0086               	movwf	6
 12861  0A07  3001               	movlw	1	; select bank2/3
 12862  0A08  0087               	movwf	7
 12863  0A09  0960               	comf	setRF_DimmerLights@status,w
 12864  0A0A  0501               	andwf	1,w
 12865  0A0B  00DE               	movwf	??_setRF_DimmerLights
 12866  0A0C  087D               	movf	_product,w
 12867  0A0D  3E0F               	addlw	15
 12868  0A0E  0086               	movwf	6
 12869  0A0F  3001               	movlw	1	; select bank2/3
 12870  0A10  0087               	movwf	7
 12871  0A11  085E               	movf	??_setRF_DimmerLights,w
 12872  0A12  0081               	movwf	1
 12873  0A13  0008               	return
 12874  0A14                     __end_of_setRF_DimmerLights:	
 12875                           
 12876                           	psect	text78
 12877  166A                     __ptext78:	
 12878 ;; *************** function _setPercentValue *****************
 12879 ;; Defined at:
 12880 ;;		line 742 in file "../src/Dimmer_B1.c"
 12881 ;; Parameters:    Size  Location     Type
 12882 ;;  value           1    wreg     unsigned char 
 12883 ;; Auto vars:     Size  Location     Type
 12884 ;;  value           1   57[BANK0 ] unsigned char 
 12885 ;;  i               3   58[BANK0 ] float 
 12886 ;; Return value:  Size  Location     Type
 12887 ;;                  1    wreg      unsigned char 
 12888 ;; Registers used:
 12889 ;;		wreg, status,2, status,0, pclath, cstack
 12890 ;; Tracked objects:
 12891 ;;		On entry : 0/0
 12892 ;;		On exit  : 0/0
 12893 ;;		Unchanged: 0/0
 12894 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12895 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12896 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12897 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12898 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12899 ;;Total ram usage:        4 bytes
 12900 ;; Hardware stack levels used:    1
 12901 ;; Hardware stack levels required when called:    7
 12902 ;; This function calls:
 12903 ;;		___awtoft
 12904 ;;		___ftdiv
 12905 ;;		___fttol
 12906 ;; This function is called by:
 12907 ;;		_Flash_Memory_Initialization
 12908 ;;		_setRF_DimmerLights
 12909 ;; This function uses a non-reentrant model
 12910 ;;
 12911                           
 12912                           
 12913                           ;psect for function _setPercentValue
 12914  166A                     _setPercentValue:	
 12915                           
 12916                           ;incstack = 0
 12917                           ; Regs used in _setPercentValue: [wreg+status,2+status,0+pclath+cstack]
 12918                           ;setPercentValue@value stored from wreg
 12919  166A  0020               	movlb	0	; select bank0
 12920  166B  00D9               	movwf	setPercentValue@value
 12921                           
 12922                           ;Dimmer_B1.c: 744: float i = ((char)((100-20)*1.5)) - ((char)((100-55)*1.5));
 12923  166C  3000               	movlw	0
 12924  166D  00DA               	movwf	setPercentValue@i
 12925  166E  3054               	movlw	84
 12926  166F  00DB               	movwf	setPercentValue@i+1
 12927  1670  3042               	movlw	66
 12928  1671  00DC               	movwf	setPercentValue@i+2
 12929                           
 12930                           ;Dimmer_B1.c: 745: i /= 100;
 12931  1672  3000               	movlw	0
 12932  1673  00AE               	movwf	___ftdiv@f2
 12933  1674  30C8               	movlw	200
 12934  1675  00AF               	movwf	___ftdiv@f2+1
 12935  1676  3042               	movlw	66
 12936  1677  00B0               	movwf	___ftdiv@f2+2
 12937  1678  085A               	movf	setPercentValue@i,w
 12938  1679  00B1               	movwf	___ftdiv@f1
 12939  167A  085B               	movf	setPercentValue@i+1,w
 12940  167B  00B2               	movwf	___ftdiv@f1+1
 12941  167C  085C               	movf	setPercentValue@i+2,w
 12942  167D  00B3               	movwf	___ftdiv@f1+2
 12943  167E  3185  25C8  3196   	fcall	___ftdiv
 12944  1681  0020               	movlb	0	; select bank0
 12945  1682  082E               	movf	?___ftdiv,w
 12946  1683  00DA               	movwf	setPercentValue@i
 12947  1684  082F               	movf	?___ftdiv+1,w
 12948  1685  00DB               	movwf	setPercentValue@i+1
 12949  1686  0830               	movf	?___ftdiv+2,w
 12950  1687  00DC               	movwf	setPercentValue@i+2
 12951                           
 12952                           ;Dimmer_B1.c: 746: return (100 - (char) ((value - ((char)((100-55)*1.5))) / i));
 12953  1688  0859               	movf	setPercentValue@value,w
 12954  1689  3EBD               	addlw	189
 12955  168A  00A8               	movwf	___awtoft@c
 12956  168B  30FF               	movlw	255
 12957  168C  1803               	skipnc
 12958  168D  3000               	movlw	0
 12959  168E  00A9               	movwf	___awtoft@c+1
 12960  168F  3192  22D9  3196   	fcall	___awtoft
 12961  1692  0020               	movlb	0	; select bank0
 12962  1693  0828               	movf	?___awtoft,w
 12963  1694  00B1               	movwf	___ftdiv@f1
 12964  1695  0829               	movf	?___awtoft+1,w
 12965  1696  00B2               	movwf	___ftdiv@f1+1
 12966  1697  082A               	movf	?___awtoft+2,w
 12967  1698  00B3               	movwf	___ftdiv@f1+2
 12968  1699  085A               	movf	setPercentValue@i,w
 12969  169A  00AE               	movwf	___ftdiv@f2
 12970  169B  085B               	movf	setPercentValue@i+1,w
 12971  169C  00AF               	movwf	___ftdiv@f2+1
 12972  169D  085C               	movf	setPercentValue@i+2,w
 12973  169E  00B0               	movwf	___ftdiv@f2+2
 12974  169F  3185  25C8  3196   	fcall	___ftdiv
 12975  16A2  0020               	movlb	0	; select bank0
 12976  16A3  082E               	movf	?___ftdiv,w
 12977  16A4  00CB               	movwf	___fttol@f1
 12978  16A5  082F               	movf	?___ftdiv+1,w
 12979  16A6  00CC               	movwf	___fttol@f1+1
 12980  16A7  0830               	movf	?___ftdiv+2,w
 12981  16A8  00CD               	movwf	___fttol@f1+2
 12982  16A9  318D  25C7         	fcall	___fttol
 12983  16AB  0020               	movlb	0	; select bank0
 12984  16AC  034B               	decf	?___fttol,w
 12985  16AD  3AFF               	xorlw	255
 12986  16AE  3E64               	addlw	100
 12987  16AF  0008               	return
 12988  16B0                     __end_of_setPercentValue:	
 12989                           
 12990                           	psect	text79
 12991  0DC7                     __ptext79:	
 12992 ;; *************** function ___fttol *****************
 12993 ;; Defined at:
 12994 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\fttol.c"
 12995 ;; Parameters:    Size  Location     Type
 12996 ;;  f1              3   43[BANK0 ] float 
 12997 ;; Auto vars:     Size  Location     Type
 12998 ;;  lval            4   52[BANK0 ] unsigned long 
 12999 ;;  exp1            1   56[BANK0 ] unsigned char 
 13000 ;;  sign1           1   51[BANK0 ] unsigned char 
 13001 ;; Return value:  Size  Location     Type
 13002 ;;                  4   43[BANK0 ] long 
 13003 ;; Registers used:
 13004 ;;		wreg, status,2, status,0
 13005 ;; Tracked objects:
 13006 ;;		On entry : 0/0
 13007 ;;		On exit  : 0/0
 13008 ;;		Unchanged: 0/0
 13009 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13010 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13011 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13012 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13013 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13014 ;;Total ram usage:       14 bytes
 13015 ;; Hardware stack levels used:    1
 13016 ;; Hardware stack levels required when called:    5
 13017 ;; This function calls:
 13018 ;;		Nothing
 13019 ;; This function is called by:
 13020 ;;		_getPercentValue
 13021 ;;		_setPercentValue
 13022 ;; This function uses a non-reentrant model
 13023 ;;
 13024                           
 13025                           
 13026                           ;psect for function ___fttol
 13027  0DC7                     ___fttol:	
 13028                           
 13029                           ;incstack = 0
 13030                           ; Regs used in ___fttol: [wreg+status,2+status,0]
 13031  0DC7  0020               	movlb	0	; select bank0
 13032  0DC8  084B               	movf	___fttol@f1,w
 13033  0DC9  00CF               	movwf	??___fttol
 13034  0DCA  084C               	movf	___fttol@f1+1,w
 13035  0DCB  00D0               	movwf	??___fttol+1
 13036  0DCC  084D               	movf	___fttol@f1+2,w
 13037  0DCD  00D1               	movwf	??___fttol+2
 13038  0DCE  1003               	clrc
 13039  0DCF  0D50               	rlf	??___fttol+1,w
 13040  0DD0  0D51               	rlf	??___fttol+2,w
 13041  0DD1  00D2               	movwf	??___fttol+3
 13042  0DD2  0852               	movf	??___fttol+3,w
 13043  0DD3  00D8               	movwf	___fttol@exp1
 13044  0DD4  08D8               	movf	___fttol@exp1,f
 13045  0DD5  1D03               	skipz
 13046  0DD6  2DE0               	goto	l5324
 13047  0DD7  3000               	movlw	0
 13048  0DD8  00CE               	movwf	?___fttol+3
 13049  0DD9  3000               	movlw	0
 13050  0DDA  00CD               	movwf	?___fttol+2
 13051  0DDB  3000               	movlw	0
 13052  0DDC  00CC               	movwf	?___fttol+1
 13053  0DDD  3000               	movlw	0
 13054  0DDE  00CB               	movwf	?___fttol
 13055  0DDF  0008               	return
 13056  0DE0                     l5324:	
 13057  0DE0  084B               	movf	___fttol@f1,w
 13058  0DE1  00CF               	movwf	??___fttol
 13059  0DE2  084C               	movf	___fttol@f1+1,w
 13060  0DE3  00D0               	movwf	??___fttol+1
 13061  0DE4  084D               	movf	___fttol@f1+2,w
 13062  0DE5  00D1               	movwf	??___fttol+2
 13063  0DE6  3017               	movlw	23
 13064  0DE7                     u3755:	
 13065  0DE7  36D1               	lsrf	??___fttol+2,f
 13066  0DE8  0CD0               	rrf	??___fttol+1,f
 13067  0DE9  0CCF               	rrf	??___fttol,f
 13068  0DEA  0B89               	decfsz	9,f
 13069  0DEB  2DE7               	goto	u3755
 13070  0DEC  084F               	movf	??___fttol,w
 13071  0DED  00D2               	movwf	??___fttol+3
 13072  0DEE  0852               	movf	??___fttol+3,w
 13073  0DEF  00D3               	movwf	___fttol@sign1
 13074  0DF0  17CC               	bsf	___fttol@f1+1,7
 13075  0DF1  30FF               	movlw	255
 13076  0DF2  05CB               	andwf	___fttol@f1,f
 13077  0DF3  30FF               	movlw	255
 13078  0DF4  05CC               	andwf	___fttol@f1+1,f
 13079  0DF5  3000               	movlw	0
 13080  0DF6  05CD               	andwf	___fttol@f1+2,f
 13081  0DF7  084B               	movf	___fttol@f1,w
 13082  0DF8  00D4               	movwf	___fttol@lval
 13083  0DF9  084C               	movf	___fttol@f1+1,w
 13084  0DFA  00D5               	movwf	___fttol@lval+1
 13085  0DFB  084D               	movf	___fttol@f1+2,w
 13086  0DFC  00D6               	movwf	___fttol@lval+2
 13087  0DFD  01D7               	clrf	___fttol@lval+3
 13088  0DFE  308E               	movlw	142
 13089  0DFF  02D8               	subwf	___fttol@exp1,f
 13090  0E00  1FD8               	btfss	___fttol@exp1,7
 13091  0E01  2E1E               	goto	l5344
 13092  0E02  0858               	movf	___fttol@exp1,w
 13093  0E03  3A80               	xorlw	128
 13094  0E04  3E8F               	addlw	143
 13095  0E05  1803               	skipnc
 13096  0E06  2E10               	goto	l5342
 13097  0E07  3000               	movlw	0
 13098  0E08  00CE               	movwf	?___fttol+3
 13099  0E09  3000               	movlw	0
 13100  0E0A  00CD               	movwf	?___fttol+2
 13101  0E0B  3000               	movlw	0
 13102  0E0C  00CC               	movwf	?___fttol+1
 13103  0E0D  3000               	movlw	0
 13104  0E0E  00CB               	movwf	?___fttol
 13105  0E0F  0008               	return
 13106  0E10                     l5342:	
 13107  0E10  3001               	movlw	1
 13108  0E11                     u3785:	
 13109  0E11  36D7               	lsrf	___fttol@lval+3,f
 13110  0E12  0CD6               	rrf	___fttol@lval+2,f
 13111  0E13  0CD5               	rrf	___fttol@lval+1,f
 13112  0E14  0CD4               	rrf	___fttol@lval,f
 13113  0E15  0B89               	decfsz	9,f
 13114  0E16  2E11               	goto	u3785
 13115  0E17  3001               	movlw	1
 13116  0E18  00CF               	movwf	??___fttol
 13117  0E19  084F               	movf	??___fttol,w
 13118  0E1A  07D8               	addwf	___fttol@exp1,f
 13119  0E1B  1903               	btfsc	3,2
 13120  0E1C  2E37               	goto	l5354
 13121  0E1D  2E10               	goto	l5342
 13122  0E1E                     l5344:	
 13123  0E1E  3018               	movlw	24
 13124  0E1F  0258               	subwf	___fttol@exp1,w
 13125  0E20  1C03               	skipc
 13126  0E21  2E34               	goto	l5352
 13127  0E22  3000               	movlw	0
 13128  0E23  00CE               	movwf	?___fttol+3
 13129  0E24  3000               	movlw	0
 13130  0E25  00CD               	movwf	?___fttol+2
 13131  0E26  3000               	movlw	0
 13132  0E27  00CC               	movwf	?___fttol+1
 13133  0E28  3000               	movlw	0
 13134  0E29  00CB               	movwf	?___fttol
 13135  0E2A  0008               	return
 13136  0E2B                     l5350:	
 13137  0E2B  3001               	movlw	1
 13138  0E2C                     u3815:	
 13139  0E2C  35D4               	lslf	___fttol@lval,f
 13140  0E2D  0DD5               	rlf	___fttol@lval+1,f
 13141  0E2E  0DD6               	rlf	___fttol@lval+2,f
 13142  0E2F  0DD7               	rlf	___fttol@lval+3,f
 13143  0E30  0B89               	decfsz	9,f
 13144  0E31  2E2C               	goto	u3815
 13145  0E32  3001               	movlw	1
 13146  0E33  02D8               	subwf	___fttol@exp1,f
 13147  0E34                     l5352:	
 13148  0E34  08D8               	movf	___fttol@exp1,f
 13149  0E35  1D03               	skipz
 13150  0E36  2E2B               	goto	l5350
 13151  0E37                     l5354:	
 13152  0E37  0853               	movf	___fttol@sign1,w
 13153  0E38  1903               	btfsc	3,2
 13154  0E39  2E45               	goto	l5358
 13155  0E3A  09D4               	comf	___fttol@lval,f
 13156  0E3B  09D5               	comf	___fttol@lval+1,f
 13157  0E3C  09D6               	comf	___fttol@lval+2,f
 13158  0E3D  09D7               	comf	___fttol@lval+3,f
 13159  0E3E  0AD4               	incf	___fttol@lval,f
 13160  0E3F  1903               	skipnz
 13161  0E40  0AD5               	incf	___fttol@lval+1,f
 13162  0E41  1903               	skipnz
 13163  0E42  0AD6               	incf	___fttol@lval+2,f
 13164  0E43  1903               	skipnz
 13165  0E44  0AD7               	incf	___fttol@lval+3,f
 13166  0E45                     l5358:	
 13167  0E45  0857               	movf	___fttol@lval+3,w
 13168  0E46  00CE               	movwf	?___fttol+3
 13169  0E47  0856               	movf	___fttol@lval+2,w
 13170  0E48  00CD               	movwf	?___fttol+2
 13171  0E49  0855               	movf	___fttol@lval+1,w
 13172  0E4A  00CC               	movwf	?___fttol+1
 13173  0E4B  0854               	movf	___fttol@lval,w
 13174  0E4C  00CB               	movwf	?___fttol
 13175  0E4D  0008               	return
 13176  0E4E                     __end_of___fttol:	
 13177                           
 13178                           	psect	text80
 13179  05C8                     __ptext80:	
 13180 ;; *************** function ___ftdiv *****************
 13181 ;; Defined at:
 13182 ;;		line 49 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\pic\ftdiv.c"
 13183 ;; Parameters:    Size  Location     Type
 13184 ;;  f2              3   14[BANK0 ] float 
 13185 ;;  f1              3   17[BANK0 ] float 
 13186 ;; Auto vars:     Size  Location     Type
 13187 ;;  f3              3   25[BANK0 ] float 
 13188 ;;  sign            1   29[BANK0 ] unsigned char 
 13189 ;;  exp             1   28[BANK0 ] unsigned char 
 13190 ;;  cntr            1   24[BANK0 ] unsigned char 
 13191 ;; Return value:  Size  Location     Type
 13192 ;;                  3   14[BANK0 ] float 
 13193 ;; Registers used:
 13194 ;;		wreg, status,2, status,0, pclath, cstack
 13195 ;; Tracked objects:
 13196 ;;		On entry : 0/0
 13197 ;;		On exit  : 0/0
 13198 ;;		Unchanged: 0/0
 13199 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13200 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13201 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13202 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13203 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13204 ;;Total ram usage:       16 bytes
 13205 ;; Hardware stack levels used:    1
 13206 ;; Hardware stack levels required when called:    6
 13207 ;; This function calls:
 13208 ;;		___ftpack
 13209 ;; This function is called by:
 13210 ;;		_getPercentValue
 13211 ;;		_setPercentValue
 13212 ;; This function uses a non-reentrant model
 13213 ;;
 13214                           
 13215                           
 13216                           ;psect for function ___ftdiv
 13217  05C8                     ___ftdiv:	
 13218                           
 13219                           ;incstack = 0
 13220                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
 13221  05C8  0020               	movlb	0	; select bank0
 13222  05C9  0831               	movf	___ftdiv@f1,w
 13223  05CA  00B4               	movwf	??___ftdiv
 13224  05CB  0832               	movf	___ftdiv@f1+1,w
 13225  05CC  00B5               	movwf	??___ftdiv+1
 13226  05CD  0833               	movf	___ftdiv@f1+2,w
 13227  05CE  00B6               	movwf	??___ftdiv+2
 13228  05CF  1003               	clrc
 13229  05D0  0D35               	rlf	??___ftdiv+1,w
 13230  05D1  0D36               	rlf	??___ftdiv+2,w
 13231  05D2  00B7               	movwf	??___ftdiv+3
 13232  05D3  0837               	movf	??___ftdiv+3,w
 13233  05D4  00BC               	movwf	___ftdiv@exp
 13234  05D5  08BC               	movf	___ftdiv@exp,f
 13235  05D6  1D03               	skipz
 13236  05D7  2DDF               	goto	l5232
 13237  05D8  3000               	movlw	0
 13238  05D9  00AE               	movwf	?___ftdiv
 13239  05DA  3000               	movlw	0
 13240  05DB  00AF               	movwf	?___ftdiv+1
 13241  05DC  3000               	movlw	0
 13242  05DD  00B0               	movwf	?___ftdiv+2
 13243  05DE  0008               	return
 13244  05DF                     l5232:	
 13245  05DF  082E               	movf	___ftdiv@f2,w
 13246  05E0  00B4               	movwf	??___ftdiv
 13247  05E1  082F               	movf	___ftdiv@f2+1,w
 13248  05E2  00B5               	movwf	??___ftdiv+1
 13249  05E3  0830               	movf	___ftdiv@f2+2,w
 13250  05E4  00B6               	movwf	??___ftdiv+2
 13251  05E5  1003               	clrc
 13252  05E6  0D35               	rlf	??___ftdiv+1,w
 13253  05E7  0D36               	rlf	??___ftdiv+2,w
 13254  05E8  00B7               	movwf	??___ftdiv+3
 13255  05E9  0837               	movf	??___ftdiv+3,w
 13256  05EA  00BD               	movwf	___ftdiv@sign
 13257  05EB  08BD               	movf	___ftdiv@sign,f
 13258  05EC  1D03               	skipz
 13259  05ED  2DF5               	goto	l5238
 13260  05EE  3000               	movlw	0
 13261  05EF  00AE               	movwf	?___ftdiv
 13262  05F0  3000               	movlw	0
 13263  05F1  00AF               	movwf	?___ftdiv+1
 13264  05F2  3000               	movlw	0
 13265  05F3  00B0               	movwf	?___ftdiv+2
 13266  05F4  0008               	return
 13267  05F5                     l5238:	
 13268  05F5  3000               	movlw	0
 13269  05F6  00B9               	movwf	___ftdiv@f3
 13270  05F7  3000               	movlw	0
 13271  05F8  00BA               	movwf	___ftdiv@f3+1
 13272  05F9  3000               	movlw	0
 13273  05FA  00BB               	movwf	___ftdiv@f3+2
 13274  05FB  3089               	movlw	137
 13275  05FC  073D               	addwf	___ftdiv@sign,w
 13276  05FD  00B4               	movwf	??___ftdiv
 13277  05FE  0834               	movf	??___ftdiv,w
 13278  05FF  02BC               	subwf	___ftdiv@exp,f
 13279  0600  0831               	movf	___ftdiv@f1,w
 13280  0601  00B4               	movwf	??___ftdiv
 13281  0602  0832               	movf	___ftdiv@f1+1,w
 13282  0603  00B5               	movwf	??___ftdiv+1
 13283  0604  0833               	movf	___ftdiv@f1+2,w
 13284  0605  00B6               	movwf	??___ftdiv+2
 13285  0606  3010               	movlw	16
 13286  0607                     u3565:	
 13287  0607  36B6               	lsrf	??___ftdiv+2,f
 13288  0608  0CB5               	rrf	??___ftdiv+1,f
 13289  0609  0CB4               	rrf	??___ftdiv,f
 13290  060A  0B89               	decfsz	9,f
 13291  060B  2E07               	goto	u3565
 13292  060C  0834               	movf	??___ftdiv,w
 13293  060D  00B7               	movwf	??___ftdiv+3
 13294  060E  0837               	movf	??___ftdiv+3,w
 13295  060F  00BD               	movwf	___ftdiv@sign
 13296  0610  082E               	movf	___ftdiv@f2,w
 13297  0611  00B4               	movwf	??___ftdiv
 13298  0612  082F               	movf	___ftdiv@f2+1,w
 13299  0613  00B5               	movwf	??___ftdiv+1
 13300  0614  0830               	movf	___ftdiv@f2+2,w
 13301  0615  00B6               	movwf	??___ftdiv+2
 13302  0616  3010               	movlw	16
 13303  0617                     u3575:	
 13304  0617  36B6               	lsrf	??___ftdiv+2,f
 13305  0618  0CB5               	rrf	??___ftdiv+1,f
 13306  0619  0CB4               	rrf	??___ftdiv,f
 13307  061A  0B89               	decfsz	9,f
 13308  061B  2E17               	goto	u3575
 13309  061C  0834               	movf	??___ftdiv,w
 13310  061D  00B7               	movwf	??___ftdiv+3
 13311  061E  0837               	movf	??___ftdiv+3,w
 13312  061F  06BD               	xorwf	___ftdiv@sign,f
 13313  0620  3080               	movlw	128
 13314  0621  00B4               	movwf	??___ftdiv
 13315  0622  0834               	movf	??___ftdiv,w
 13316  0623  05BD               	andwf	___ftdiv@sign,f
 13317  0624  17B2               	bsf	___ftdiv@f1+1,7
 13318  0625  30FF               	movlw	255
 13319  0626  05B1               	andwf	___ftdiv@f1,f
 13320  0627  30FF               	movlw	255
 13321  0628  05B2               	andwf	___ftdiv@f1+1,f
 13322  0629  3000               	movlw	0
 13323  062A  05B3               	andwf	___ftdiv@f1+2,f
 13324  062B  17AF               	bsf	___ftdiv@f2+1,7
 13325  062C  30FF               	movlw	255
 13326  062D  05AE               	andwf	___ftdiv@f2,f
 13327  062E  30FF               	movlw	255
 13328  062F  05AF               	andwf	___ftdiv@f2+1,f
 13329  0630  3000               	movlw	0
 13330  0631  05B0               	andwf	___ftdiv@f2+2,f
 13331  0632  3018               	movlw	24
 13332  0633  00B4               	movwf	??___ftdiv
 13333  0634  0834               	movf	??___ftdiv,w
 13334  0635  00B8               	movwf	___ftdiv@cntr
 13335  0636                     l5252:	
 13336  0636  3001               	movlw	1
 13337  0637                     u3585:	
 13338  0637  35B9               	lslf	___ftdiv@f3,f
 13339  0638  0DBA               	rlf	___ftdiv@f3+1,f
 13340  0639  0DBB               	rlf	___ftdiv@f3+2,f
 13341  063A  0B89               	decfsz	9,f
 13342  063B  2E37               	goto	u3585
 13343  063C  0830               	movf	___ftdiv@f2+2,w
 13344  063D  0233               	subwf	___ftdiv@f1+2,w
 13345  063E  1D03               	skipz
 13346  063F  2E46               	goto	u3595
 13347  0640  082F               	movf	___ftdiv@f2+1,w
 13348  0641  0232               	subwf	___ftdiv@f1+1,w
 13349  0642  1D03               	skipz
 13350  0643  2E46               	goto	u3595
 13351  0644  082E               	movf	___ftdiv@f2,w
 13352  0645  0231               	subwf	___ftdiv@f1,w
 13353  0646                     u3595:	
 13354  0646  1C03               	skipc
 13355  0647  2E4F               	goto	l5260
 13356  0648  082E               	movf	___ftdiv@f2,w
 13357  0649  02B1               	subwf	___ftdiv@f1,f
 13358  064A  082F               	movf	___ftdiv@f2+1,w
 13359  064B  3BB2               	subwfb	___ftdiv@f1+1,f
 13360  064C  0830               	movf	___ftdiv@f2+2,w
 13361  064D  3BB3               	subwfb	___ftdiv@f1+2,f
 13362  064E  1439               	bsf	___ftdiv@f3,0
 13363  064F                     l5260:	
 13364  064F  3001               	movlw	1
 13365  0650                     u3605:	
 13366  0650  35B1               	lslf	___ftdiv@f1,f
 13367  0651  0DB2               	rlf	___ftdiv@f1+1,f
 13368  0652  0DB3               	rlf	___ftdiv@f1+2,f
 13369  0653  0B89               	decfsz	9,f
 13370  0654  2E50               	goto	u3605
 13371  0655  3001               	movlw	1
 13372  0656  02B8               	subwf	___ftdiv@cntr,f
 13373  0657  1D03               	btfss	3,2
 13374  0658  2E36               	goto	l5252
 13375  0659  0839               	movf	___ftdiv@f3,w
 13376  065A  00A0               	movwf	___ftpack@arg
 13377  065B  083A               	movf	___ftdiv@f3+1,w
 13378  065C  00A1               	movwf	___ftpack@arg+1
 13379  065D  083B               	movf	___ftdiv@f3+2,w
 13380  065E  00A2               	movwf	___ftpack@arg+2
 13381  065F  083C               	movf	___ftdiv@exp,w
 13382  0660  00B4               	movwf	??___ftdiv
 13383  0661  0834               	movf	??___ftdiv,w
 13384  0662  00A3               	movwf	___ftpack@exp
 13385  0663  083D               	movf	___ftdiv@sign,w
 13386  0664  00B5               	movwf	??___ftdiv+1
 13387  0665  0835               	movf	??___ftdiv+1,w
 13388  0666  00A4               	movwf	___ftpack@sign
 13389  0667  3189  2148         	fcall	___ftpack
 13390  0669  0020               	movlb	0	; select bank0
 13391  066A  0820               	movf	?___ftpack,w
 13392  066B  00AE               	movwf	?___ftdiv
 13393  066C  0821               	movf	?___ftpack+1,w
 13394  066D  00AF               	movwf	?___ftdiv+1
 13395  066E  0822               	movf	?___ftpack+2,w
 13396  066F  00B0               	movwf	?___ftdiv+2
 13397  0670  0008               	return
 13398  0671                     __end_of___ftdiv:	
 13399                           
 13400                           	psect	text81
 13401  12D9                     __ptext81:	
 13402 ;; *************** function ___awtoft *****************
 13403 ;; Defined at:
 13404 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awtoft.c"
 13405 ;; Parameters:    Size  Location     Type
 13406 ;;  c               2    8[BANK0 ] int 
 13407 ;; Auto vars:     Size  Location     Type
 13408 ;;  sign            1   13[BANK0 ] unsigned char 
 13409 ;; Return value:  Size  Location     Type
 13410 ;;                  3    8[BANK0 ] float 
 13411 ;; Registers used:
 13412 ;;		wreg, status,2, status,0, pclath, cstack
 13413 ;; Tracked objects:
 13414 ;;		On entry : 0/0
 13415 ;;		On exit  : 0/0
 13416 ;;		Unchanged: 0/0
 13417 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13418 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13419 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13420 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13421 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13422 ;;Total ram usage:        6 bytes
 13423 ;; Hardware stack levels used:    1
 13424 ;; Hardware stack levels required when called:    6
 13425 ;; This function calls:
 13426 ;;		___ftpack
 13427 ;; This function is called by:
 13428 ;;		_getPercentValue
 13429 ;;		_setPercentValue
 13430 ;; This function uses a non-reentrant model
 13431 ;;
 13432                           
 13433                           
 13434                           ;psect for function ___awtoft
 13435  12D9                     ___awtoft:	
 13436                           
 13437                           ;incstack = 0
 13438                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
 13439  12D9  0020               	movlb	0	; select bank0
 13440  12DA  01AD               	clrf	___awtoft@sign
 13441  12DB  1FA9               	btfss	___awtoft@c+1,7
 13442  12DC  2AE4               	goto	l5150
 13443  12DD  09A8               	comf	___awtoft@c,f
 13444  12DE  09A9               	comf	___awtoft@c+1,f
 13445  12DF  0AA8               	incf	___awtoft@c,f
 13446  12E0  1903               	skipnz
 13447  12E1  0AA9               	incf	___awtoft@c+1,f
 13448  12E2  01AD               	clrf	___awtoft@sign
 13449  12E3  0AAD               	incf	___awtoft@sign,f
 13450  12E4                     l5150:	
 13451  12E4  0828               	movf	___awtoft@c,w
 13452  12E5  00A0               	movwf	___ftpack@arg
 13453  12E6  0829               	movf	___awtoft@c+1,w
 13454  12E7  00A1               	movwf	___ftpack@arg+1
 13455  12E8  01A2               	clrf	___ftpack@arg+2
 13456  12E9  308E               	movlw	142
 13457  12EA  00AB               	movwf	??___awtoft
 13458  12EB  082B               	movf	??___awtoft,w
 13459  12EC  00A3               	movwf	___ftpack@exp
 13460  12ED  082D               	movf	___awtoft@sign,w
 13461  12EE  00AC               	movwf	??___awtoft+1
 13462  12EF  082C               	movf	??___awtoft+1,w
 13463  12F0  00A4               	movwf	___ftpack@sign
 13464  12F1  3189  2148         	fcall	___ftpack
 13465  12F3  0020               	movlb	0	; select bank0
 13466  12F4  0820               	movf	?___ftpack,w
 13467  12F5  00A8               	movwf	?___awtoft
 13468  12F6  0821               	movf	?___ftpack+1,w
 13469  12F7  00A9               	movwf	?___awtoft+1
 13470  12F8  0822               	movf	?___ftpack+2,w
 13471  12F9  00AA               	movwf	?___awtoft+2
 13472  12FA  0008               	return
 13473  12FB                     __end_of___awtoft:	
 13474                           
 13475                           	psect	text82
 13476  0948                     __ptext82:	
 13477 ;; *************** function ___ftpack *****************
 13478 ;; Defined at:
 13479 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\float.c"
 13480 ;; Parameters:    Size  Location     Type
 13481 ;;  arg             3    0[BANK0 ] unsigned um
 13482 ;;  exp             1    3[BANK0 ] unsigned char 
 13483 ;;  sign            1    4[BANK0 ] unsigned char 
 13484 ;; Auto vars:     Size  Location     Type
 13485 ;;		None
 13486 ;; Return value:  Size  Location     Type
 13487 ;;                  3    0[BANK0 ] float 
 13488 ;; Registers used:
 13489 ;;		wreg, status,2, status,0
 13490 ;; Tracked objects:
 13491 ;;		On entry : 0/0
 13492 ;;		On exit  : 0/0
 13493 ;;		Unchanged: 0/0
 13494 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13495 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13496 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13497 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13498 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13499 ;;Total ram usage:        8 bytes
 13500 ;; Hardware stack levels used:    1
 13501 ;; Hardware stack levels required when called:    5
 13502 ;; This function calls:
 13503 ;;		Nothing
 13504 ;; This function is called by:
 13505 ;;		___awtoft
 13506 ;;		___ftadd
 13507 ;;		___ftdiv
 13508 ;;		___ftmul
 13509 ;; This function uses a non-reentrant model
 13510 ;;
 13511                           
 13512                           
 13513                           ;psect for function ___ftpack
 13514  0948                     ___ftpack:	
 13515                           
 13516                           ;incstack = 0
 13517                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 13518  0948  0020               	movlb	0	; select bank0
 13519  0949  0823               	movf	___ftpack@exp,w
 13520  094A  1903               	btfsc	3,2
 13521  094B  2951               	goto	l5116
 13522  094C  0822               	movf	___ftpack@arg+2,w
 13523  094D  0421               	iorwf	___ftpack@arg+1,w
 13524  094E  0420               	iorwf	___ftpack@arg,w
 13525  094F  1D03               	skipz
 13526  0950  2962               	goto	l5122
 13527  0951                     l5116:	
 13528  0951  3000               	movlw	0
 13529  0952  00A0               	movwf	?___ftpack
 13530  0953  3000               	movlw	0
 13531  0954  00A1               	movwf	?___ftpack+1
 13532  0955  3000               	movlw	0
 13533  0956  00A2               	movwf	?___ftpack+2
 13534  0957  0008               	return
 13535  0958                     l5120:	
 13536  0958  3001               	movlw	1
 13537  0959  00A5               	movwf	??___ftpack
 13538  095A  0825               	movf	??___ftpack,w
 13539  095B  07A3               	addwf	___ftpack@exp,f
 13540  095C  3001               	movlw	1
 13541  095D                     u3215:	
 13542  095D  36A2               	lsrf	___ftpack@arg+2,f
 13543  095E  0CA1               	rrf	___ftpack@arg+1,f
 13544  095F  0CA0               	rrf	___ftpack@arg,f
 13545  0960  0B89               	decfsz	9,f
 13546  0961  295D               	goto	u3215
 13547  0962                     l5122:	
 13548  0962  30FE               	movlw	254
 13549  0963  0522               	andwf	___ftpack@arg+2,w
 13550  0964  1903               	btfsc	3,2
 13551  0965  297B               	goto	l2896
 13552  0966  2958               	goto	l5120
 13553  0967                     l5124:	
 13554  0967  3001               	movlw	1
 13555  0968  00A5               	movwf	??___ftpack
 13556  0969  0825               	movf	??___ftpack,w
 13557  096A  07A3               	addwf	___ftpack@exp,f
 13558  096B  3001               	movlw	1
 13559  096C  07A0               	addwf	___ftpack@arg,f
 13560  096D  3000               	movlw	0
 13561  096E  1803               	skipnc
 13562  096F  3001               	movlw	1
 13563  0970  07A1               	addwf	___ftpack@arg+1,f
 13564  0971  3000               	movlw	0
 13565  0972  1803               	skipnc
 13566  0973  3001               	movlw	1
 13567  0974  07A2               	addwf	___ftpack@arg+2,f
 13568  0975  3001               	movlw	1
 13569  0976                     u3235:	
 13570  0976  36A2               	lsrf	___ftpack@arg+2,f
 13571  0977  0CA1               	rrf	___ftpack@arg+1,f
 13572  0978  0CA0               	rrf	___ftpack@arg,f
 13573  0979  0B89               	decfsz	9,f
 13574  097A  2976               	goto	u3235
 13575  097B                     l2896:	
 13576  097B  30FF               	movlw	255
 13577  097C  0522               	andwf	___ftpack@arg+2,w
 13578  097D  1903               	btfsc	3,2
 13579  097E  2988               	goto	l5132
 13580  097F  2967               	goto	l5124
 13581  0980                     l5130:	
 13582  0980  3001               	movlw	1
 13583  0981  02A3               	subwf	___ftpack@exp,f
 13584  0982  3001               	movlw	1
 13585  0983                     u3255:	
 13586  0983  35A0               	lslf	___ftpack@arg,f
 13587  0984  0DA1               	rlf	___ftpack@arg+1,f
 13588  0985  0DA2               	rlf	___ftpack@arg+2,f
 13589  0986  0B89               	decfsz	9,f
 13590  0987  2983               	goto	u3255
 13591  0988                     l5132:	
 13592  0988  1FA1               	btfss	___ftpack@arg+1,7
 13593  0989  2980               	goto	l5130
 13594  098A  1823               	btfsc	___ftpack@exp,0
 13595  098B  2992               	goto	l2902
 13596  098C  30FF               	movlw	255
 13597  098D  05A0               	andwf	___ftpack@arg,f
 13598  098E  307F               	movlw	127
 13599  098F  05A1               	andwf	___ftpack@arg+1,f
 13600  0990  30FF               	movlw	255
 13601  0991  05A2               	andwf	___ftpack@arg+2,f
 13602  0992                     l2902:	
 13603  0992  1003               	clrc
 13604  0993  0CA3               	rrf	___ftpack@exp,f
 13605  0994  0823               	movf	___ftpack@exp,w
 13606  0995  00A5               	movwf	??___ftpack
 13607  0996  01A6               	clrf	??___ftpack+1
 13608  0997  01A7               	clrf	??___ftpack+2
 13609  0998  3010               	movlw	16
 13610  0999                     u3285:	
 13611  0999  35A5               	lslf	??___ftpack,f
 13612  099A  0DA6               	rlf	??___ftpack+1,f
 13613  099B  0DA7               	rlf	??___ftpack+2,f
 13614  099C  0B89               	decfsz	9,f
 13615  099D  2999               	goto	u3285
 13616  099E  0825               	movf	??___ftpack,w
 13617  099F  04A0               	iorwf	___ftpack@arg,f
 13618  09A0  0826               	movf	??___ftpack+1,w
 13619  09A1  04A1               	iorwf	___ftpack@arg+1,f
 13620  09A2  0827               	movf	??___ftpack+2,w
 13621  09A3  04A2               	iorwf	___ftpack@arg+2,f
 13622  09A4  0824               	movf	___ftpack@sign,w
 13623  09A5  1903               	btfsc	3,2
 13624  09A6  0008               	return
 13625  09A7  17A2               	bsf	___ftpack@arg+2,7
 13626  09A8  0008               	return
 13627  09A9                     __end_of___ftpack:	
 13628                           
 13629                           	psect	text83
 13630  1F62                     __ptext83:	
 13631 ;; *************** function _setRFSW_Status *****************
 13632 ;; Defined at:
 13633 ;;		line 384 in file "../src/RF_Control_B1.c"
 13634 ;; Parameters:    Size  Location     Type
 13635 ;;  sw              1    wreg     unsigned char 
 13636 ;;  command         1    2[BANK0 ] unsigned char 
 13637 ;; Auto vars:     Size  Location     Type
 13638 ;;  sw              1    3[BANK0 ] unsigned char 
 13639 ;; Return value:  Size  Location     Type
 13640 ;;		None               void
 13641 ;; Registers used:
 13642 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13643 ;; Tracked objects:
 13644 ;;		On entry : 0/0
 13645 ;;		On exit  : 0/0
 13646 ;;		Unchanged: 0/0
 13647 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13648 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13649 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13650 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13651 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13652 ;;Total ram usage:        2 bytes
 13653 ;; Hardware stack levels used:    1
 13654 ;; Hardware stack levels required when called:    6
 13655 ;; This function calls:
 13656 ;;		_RfSWPointSelect
 13657 ;; This function is called by:
 13658 ;;		_DlyOff_Main
 13659 ;;		_setControl_Lights_Table
 13660 ;;		_Sw_DimmerOnFunc
 13661 ;;		_Sw_DimmerAdjFunc
 13662 ;;		_setDimmerLights_ERROR
 13663 ;; This function uses a non-reentrant model
 13664 ;;
 13665                           
 13666                           
 13667                           ;psect for function _setRFSW_Status
 13668  1F62                     _setRFSW_Status:	
 13669                           
 13670                           ;incstack = 0
 13671                           ; Regs used in _setRFSW_Status: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13672                           ;setRFSW_Status@sw stored from wreg
 13673  1F62  0020               	movlb	0	; select bank0
 13674  1F63  00A3               	movwf	setRFSW_Status@sw
 13675                           
 13676                           ;RF_Control_B1.c: 385: RfSWPointSelect(sw);
 13677  1F64  0823               	movf	setRFSW_Status@sw,w
 13678  1F65  3191  2116         	fcall	_RfSWPointSelect
 13679                           
 13680                           ;RF_Control_B1.c: 386: RFSW->Status = command;
 13681  1F67  0021               	movlb	1	; select bank1
 13682  1F68  083E               	movf	_RFSW^(0+128),w
 13683  1F69  0086               	movwf	6
 13684  1F6A  0187               	clrf	7
 13685  1F6B  0020               	movlb	0	; select bank0
 13686  1F6C  0822               	movf	setRFSW_Status@command,w
 13687  1F6D  1001               	bcf	1,0
 13688  1F6E  1D03               	skipz
 13689  1F6F  1401               	bsf	1,0
 13690  1F70  0008               	return
 13691  1F71                     __end_of_setRFSW_Status:	
 13692                           
 13693                           	psect	text84
 13694  1116                     __ptext84:	
 13695 ;; *************** function _RfSWPointSelect *****************
 13696 ;; Defined at:
 13697 ;;		line 319 in file "../src/RF_Control_B1.c"
 13698 ;; Parameters:    Size  Location     Type
 13699 ;;  sw              1    wreg     unsigned char 
 13700 ;; Auto vars:     Size  Location     Type
 13701 ;;  sw              1    1[BANK0 ] unsigned char 
 13702 ;; Return value:  Size  Location     Type
 13703 ;;		None               void
 13704 ;; Registers used:
 13705 ;;		wreg
 13706 ;; Tracked objects:
 13707 ;;		On entry : 0/0
 13708 ;;		On exit  : 0/0
 13709 ;;		Unchanged: 0/0
 13710 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13711 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13712 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13713 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13714 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13715 ;;Total ram usage:        2 bytes
 13716 ;; Hardware stack levels used:    1
 13717 ;; Hardware stack levels required when called:    5
 13718 ;; This function calls:
 13719 ;;		Nothing
 13720 ;; This function is called by:
 13721 ;;		_setRFSW_Control
 13722 ;;		_setRFSW_AdjControl
 13723 ;;		_setRFSW_Status
 13724 ;; This function uses a non-reentrant model
 13725 ;;
 13726                           
 13727                           
 13728                           ;psect for function _RfSWPointSelect
 13729  1116                     _RfSWPointSelect:	
 13730                           
 13731                           ;incstack = 0
 13732                           ; Regs used in _RfSWPointSelect: [wreg]
 13733                           ;RfSWPointSelect@sw stored from wreg
 13734  1116  0020               	movlb	0	; select bank0
 13735  1117  00A1               	movwf	RfSWPointSelect@sw
 13736                           
 13737                           ;RF_Control_B1.c: 321: if (sw == 1) {
 13738  1118  0821               	movf	RfSWPointSelect@sw,w
 13739  1119  3A01               	xorlw	1
 13740  111A  1D03               	skipz
 13741  111B  2921               	goto	l2192
 13742                           
 13743                           ;RF_Control_B1.c: 322: RFSW = &RFSW1;
 13744  111C  30E5               	movlw	_RFSW1& (0+255)
 13745  111D  00A0               	movwf	??_RfSWPointSelect
 13746  111E  0820               	movf	??_RfSWPointSelect,w
 13747  111F  0021               	movlb	1	; select bank1
 13748  1120  00BE               	movwf	_RFSW^(0+128)
 13749  1121                     l2192:	
 13750                           
 13751                           ;RF_Control_B1.c: 323: }
 13752                           ;RF_Control_B1.c: 326: if (sw == 2) {
 13753  1121  0020               	movlb	0	; select bank0
 13754  1122  0821               	movf	RfSWPointSelect@sw,w
 13755  1123  3A02               	xorlw	2
 13756  1124  1D03               	skipz
 13757  1125  0008               	return
 13758                           
 13759                           ;RF_Control_B1.c: 327: RFSW = &RFSW2;
 13760  1126  30E6               	movlw	_RFSW2& (0+255)
 13761  1127  00A0               	movwf	??_RfSWPointSelect
 13762  1128  0820               	movf	??_RfSWPointSelect,w
 13763  1129  0021               	movlb	1	; select bank1
 13764  112A  00BE               	movwf	_RFSW^(0+128)
 13765  112B  0008               	return
 13766  112C                     __end_of_RfSWPointSelect:	
 13767                           
 13768                           	psect	text85
 13769  1FBF                     __ptext85:	
 13770 ;; *************** function _setDimmerLights_Trigger *****************
 13771 ;; Defined at:
 13772 ;;		line 683 in file "../src/Dimmer_B1.c"
 13773 ;; Parameters:    Size  Location     Type
 13774 ;;  lights          1    wreg     unsigned char 
 13775 ;;  command         1    2[BANK0 ] unsigned char 
 13776 ;; Auto vars:     Size  Location     Type
 13777 ;;  lights          1    3[BANK0 ] unsigned char 
 13778 ;; Return value:  Size  Location     Type
 13779 ;;		None               void
 13780 ;; Registers used:
 13781 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13782 ;; Tracked objects:
 13783 ;;		On entry : 0/0
 13784 ;;		On exit  : 0/0
 13785 ;;		Unchanged: 0/0
 13786 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13787 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13788 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13789 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13790 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13791 ;;Total ram usage:        2 bytes
 13792 ;; Hardware stack levels used:    1
 13793 ;; Hardware stack levels required when called:    6
 13794 ;; This function calls:
 13795 ;;		_DimmerLightsPointSelect
 13796 ;; This function is called by:
 13797 ;;		_DlyOff_Main
 13798 ;;		_setRFSW_Control
 13799 ;;		_Sw_DimmerOnFunc
 13800 ;;		_Sw_DimmerOffFunc
 13801 ;; This function uses a non-reentrant model
 13802 ;;
 13803                           
 13804                           
 13805                           ;psect for function _setDimmerLights_Trigger
 13806  1FBF                     _setDimmerLights_Trigger:	
 13807                           
 13808                           ;incstack = 0
 13809                           ; Regs used in _setDimmerLights_Trigger: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 13810                           ;setDimmerLights_Trigger@lights stored from wreg
 13811  1FBF  0020               	movlb	0	; select bank0
 13812  1FC0  00A3               	movwf	setDimmerLights_Trigger@lights
 13813                           
 13814                           ;Dimmer_B1.c: 684: DimmerLightsPointSelect(lights);
 13815  1FC1  0823               	movf	setDimmerLights_Trigger@lights,w
 13816  1FC2  3190  20B2         	fcall	_DimmerLightsPointSelect
 13817                           
 13818                           ;Dimmer_B1.c: 685: DimmerLights->Trigger = command;
 13819  1FC4  0879               	movf	_DimmerLights,w
 13820  1FC5  3E08               	addlw	8
 13821  1FC6  0086               	movwf	6
 13822  1FC7  3001               	movlw	1	; select bank2/3
 13823  1FC8  0087               	movwf	7
 13824  1FC9  0020               	movlb	0	; select bank0
 13825  1FCA  0822               	movf	setDimmerLights_Trigger@command,w
 13826  1FCB  1101               	bcf	1,2
 13827  1FCC  1D03               	skipz
 13828  1FCD  1501               	bsf	1,2
 13829  1FCE  0008               	return
 13830  1FCF                     __end_of_setDimmerLights_Trigger:	
 13831                           
 13832                           	psect	text86
 13833  1FAF                     __ptext86:	
 13834 ;; *************** function _setDimmerLights_Switch *****************
 13835 ;; Defined at:
 13836 ;;		line 673 in file "../src/Dimmer_B1.c"
 13837 ;; Parameters:    Size  Location     Type
 13838 ;;  lights          1    wreg     unsigned char 
 13839 ;;  command         1    2[BANK0 ] unsigned char 
 13840 ;; Auto vars:     Size  Location     Type
 13841 ;;  lights          1    3[BANK0 ] unsigned char 
 13842 ;; Return value:  Size  Location     Type
 13843 ;;		None               void
 13844 ;; Registers used:
 13845 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13846 ;; Tracked objects:
 13847 ;;		On entry : 0/0
 13848 ;;		On exit  : 0/0
 13849 ;;		Unchanged: 0/0
 13850 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13851 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13852 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13853 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13854 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13855 ;;Total ram usage:        2 bytes
 13856 ;; Hardware stack levels used:    1
 13857 ;; Hardware stack levels required when called:    6
 13858 ;; This function calls:
 13859 ;;		_DimmerLightsPointSelect
 13860 ;; This function is called by:
 13861 ;;		_DlyOff_Main
 13862 ;;		_setRFSW_Control
 13863 ;;		_Sw_DimmerOnFunc
 13864 ;;		_Sw_DimmerOffFunc
 13865 ;; This function uses a non-reentrant model
 13866 ;;
 13867                           
 13868                           
 13869                           ;psect for function _setDimmerLights_Switch
 13870  1FAF                     _setDimmerLights_Switch:	
 13871                           
 13872                           ;incstack = 0
 13873                           ; Regs used in _setDimmerLights_Switch: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
 13874                           ;setDimmerLights_Switch@lights stored from wreg
 13875  1FAF  0020               	movlb	0	; select bank0
 13876  1FB0  00A3               	movwf	setDimmerLights_Switch@lights
 13877                           
 13878                           ;Dimmer_B1.c: 674: DimmerLightsPointSelect(lights);
 13879  1FB1  0823               	movf	setDimmerLights_Switch@lights,w
 13880  1FB2  3190  20B2         	fcall	_DimmerLightsPointSelect
 13881                           
 13882                           ;Dimmer_B1.c: 675: DimmerLights->Switch = command;
 13883  1FB4  0879               	movf	_DimmerLights,w
 13884  1FB5  3E08               	addlw	8
 13885  1FB6  0086               	movwf	6
 13886  1FB7  3001               	movlw	1	; select bank2/3
 13887  1FB8  0087               	movwf	7
 13888  1FB9  0020               	movlb	0	; select bank0
 13889  1FBA  0822               	movf	setDimmerLights_Switch@command,w
 13890  1FBB  1081               	bcf	1,1
 13891  1FBC  1D03               	skipz
 13892  1FBD  1481               	bsf	1,1
 13893  1FBE  0008               	return
 13894  1FBF                     __end_of_setDimmerLights_Switch:	
 13895                           
 13896                           	psect	text87
 13897  10B2                     __ptext87:	
 13898 ;; *************** function _DimmerLightsPointSelect *****************
 13899 ;; Defined at:
 13900 ;;		line 285 in file "../src/Dimmer_B1.c"
 13901 ;; Parameters:    Size  Location     Type
 13902 ;;  lights          1    wreg     unsigned char 
 13903 ;; Auto vars:     Size  Location     Type
 13904 ;;  lights          1    1[BANK0 ] unsigned char 
 13905 ;; Return value:  Size  Location     Type
 13906 ;;		None               void
 13907 ;; Registers used:
 13908 ;;		wreg
 13909 ;; Tracked objects:
 13910 ;;		On entry : 0/0
 13911 ;;		On exit  : 0/0
 13912 ;;		Unchanged: 0/0
 13913 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13914 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13915 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13916 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13917 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13918 ;;Total ram usage:        2 bytes
 13919 ;; Hardware stack levels used:    1
 13920 ;; Hardware stack levels required when called:    5
 13921 ;; This function calls:
 13922 ;;		Nothing
 13923 ;; This function is called by:
 13924 ;;		_setDimmerLights_Initialization
 13925 ;;		_setDimmerLights_Main
 13926 ;;		_setDimmerLights
 13927 ;;		_setDimmerLights_Adj
 13928 ;;		_setDimmerLights_AdjRF
 13929 ;;		_setDimmerLights_Switch
 13930 ;;		_setDimmerLights_AdjGo
 13931 ;;		_setDimmerLights_Trigger
 13932 ;;		_setDimmerLights_TriggerAdj
 13933 ;;		_setDimmerLights_ERROR
 13934 ;;		_setDimmerLights_TriggerERROR
 13935 ;;		_setDimmerLights_GO
 13936 ;;		_setDimmerLights_MaxmumValue
 13937 ;;		_setDimmerLights_Clear
 13938 ;; This function uses a non-reentrant model
 13939 ;;
 13940                           
 13941                           
 13942                           ;psect for function _DimmerLightsPointSelect
 13943  10B2                     _DimmerLightsPointSelect:	
 13944                           
 13945                           ;incstack = 0
 13946                           ; Regs used in _DimmerLightsPointSelect: [wreg]
 13947                           ;DimmerLightsPointSelect@lights stored from wreg
 13948  10B2  0020               	movlb	0	; select bank0
 13949  10B3  00A1               	movwf	DimmerLightsPointSelect@lights
 13950                           
 13951                           ;Dimmer_B1.c: 287: if (lights == 1) {
 13952  10B4  0821               	movf	DimmerLightsPointSelect@lights,w
 13953  10B5  3A01               	xorlw	1
 13954  10B6  1D03               	skipz
 13955  10B7  28BC               	goto	l813
 13956                           
 13957                           ;Dimmer_B1.c: 288: DimmerLights = &DimmerLights1;
 13958  10B8  3020               	movlw	_DimmerLights1& (0+255)
 13959  10B9  00A0               	movwf	??_DimmerLightsPointSelect
 13960  10BA  0820               	movf	??_DimmerLightsPointSelect,w
 13961  10BB  00F9               	movwf	_DimmerLights
 13962  10BC                     l813:	
 13963                           
 13964                           ;Dimmer_B1.c: 289: }
 13965                           ;Dimmer_B1.c: 296: if (lights == 2) {
 13966  10BC  0821               	movf	DimmerLightsPointSelect@lights,w
 13967  10BD  3A02               	xorlw	2
 13968  10BE  1D03               	skipz
 13969  10BF  0008               	return
 13970                           
 13971                           ;Dimmer_B1.c: 297: DimmerLights = &DimmerLights2;
 13972  10C0  302E               	movlw	_DimmerLights2& (0+255)
 13973  10C1  00A0               	movwf	??_DimmerLightsPointSelect
 13974  10C2  0820               	movf	??_DimmerLightsPointSelect,w
 13975  10C3  00F9               	movwf	_DimmerLights
 13976  10C4  0008               	return
 13977  10C5                     __end_of_DimmerLightsPointSelect:	
 13978                           
 13979                           	psect	text88
 13980  0BD8                     __ptext88:	
 13981 ;; *************** function _setBuz *****************
 13982 ;; Defined at:
 13983 ;;		line 30 in file "../src/Buzzer_B1.c"
 13984 ;; Parameters:    Size  Location     Type
 13985 ;;  count           1    wreg     unsigned char 
 13986 ;;  time            2    9[BANK0 ] int 
 13987 ;; Auto vars:     Size  Location     Type
 13988 ;;  count           1   12[BANK0 ] unsigned char 
 13989 ;; Return value:  Size  Location     Type
 13990 ;;		None               void
 13991 ;; Registers used:
 13992 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13993 ;; Tracked objects:
 13994 ;;		On entry : 0/0
 13995 ;;		On exit  : 0/0
 13996 ;;		Unchanged: 0/0
 13997 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13998 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13999 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14000 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14001 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14002 ;;Total ram usage:        4 bytes
 14003 ;; Hardware stack levels used:    1
 14004 ;; Hardware stack levels required when called:    6
 14005 ;; This function calls:
 14006 ;;		___awdiv
 14007 ;; This function is called by:
 14008 ;;		_DlyOff_Main
 14009 ;;		_setDimmerLights_Main
 14010 ;;		_my_Main
 14011 ;;		_setLog_Code
 14012 ;;		_setControl_Lights_Table
 14013 ;;		_setRFSW_Control
 14014 ;;		_setSw_Main
 14015 ;;		_Sw_DimmerOnFunc
 14016 ;;		_DimmerLights_Exceptions
 14017 ;; This function uses a non-reentrant model
 14018 ;;
 14019                           
 14020                           
 14021                           ;psect for function _setBuz
 14022  0BD8                     _setBuz:	
 14023                           
 14024                           ;incstack = 0
 14025                           ; Regs used in _setBuz: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14026                           ;setBuz@count stored from wreg
 14027  0BD8  0020               	movlb	0	; select bank0
 14028  0BD9  00AC               	movwf	setBuz@count
 14029                           
 14030                           ;Buzzer_B1.c: 31: time /=10;
 14031  0BDA  300A               	movlw	10
 14032  0BDB  00A0               	movwf	___awdiv@divisor
 14033  0BDC  3000               	movlw	0
 14034  0BDD  00A1               	movwf	___awdiv@divisor+1
 14035  0BDE  082A               	movf	setBuz@time+1,w
 14036  0BDF  01A3               	clrf	___awdiv@dividend+1
 14037  0BE0  07A3               	addwf	___awdiv@dividend+1,f
 14038  0BE1  0829               	movf	setBuz@time,w
 14039  0BE2  01A2               	clrf	___awdiv@dividend
 14040  0BE3  07A2               	addwf	___awdiv@dividend,f
 14041  0BE4  3196  26FD  318B   	fcall	___awdiv
 14042  0BE7  0020               	movlb	0	; select bank0
 14043  0BE8  0821               	movf	?___awdiv+1,w
 14044  0BE9  01AA               	clrf	setBuz@time+1
 14045  0BEA  07AA               	addwf	setBuz@time+1,f
 14046  0BEB  0820               	movf	?___awdiv,w
 14047  0BEC  01A9               	clrf	setBuz@time
 14048  0BED  07A9               	addwf	setBuz@time,f
 14049                           
 14050                           ;Buzzer_B1.c: 32: if (Buz->Enable) {
 14051  0BEE  0878               	movf	_Buz,w
 14052  0BEF  0086               	movwf	6
 14053  0BF0  3001               	movlw	1	; select bank2/3
 14054  0BF1  0087               	movwf	7
 14055  0BF2  1C01               	btfss	1,0
 14056  0BF3  0008               	return
 14057                           
 14058                           ;Buzzer_B1.c: 33: if (!Buz->GO) {
 14059  0BF4  0878               	movf	_Buz,w
 14060  0BF5  0086               	movwf	6
 14061  0BF6  3001               	movlw	1	; select bank2/3
 14062  0BF7  0087               	movwf	7
 14063  0BF8  1881               	btfsc	1,1
 14064  0BF9  2C13               	goto	l5500
 14065                           
 14066                           ;Buzzer_B1.c: 34: Buz->GO = 1;
 14067  0BFA  0878               	movf	_Buz,w
 14068  0BFB  0086               	movwf	6
 14069  0BFC  3001               	movlw	1	; select bank2/3
 14070  0BFD  0087               	movwf	7
 14071  0BFE  1481               	bsf	1,1
 14072                           
 14073                           ;Buzzer_B1.c: 35: Buz->Count = count;
 14074  0BFF  082C               	movf	setBuz@count,w
 14075  0C00  00AB               	movwf	??_setBuz
 14076  0C01  0878               	movf	_Buz,w
 14077  0C02  3E03               	addlw	3
 14078  0C03  0086               	movwf	6
 14079  0C04  3001               	movlw	1	; select bank2/3
 14080  0C05  0087               	movwf	7
 14081  0C06  082B               	movf	??_setBuz,w
 14082  0C07  0081               	movwf	1
 14083                           
 14084                           ;Buzzer_B1.c: 36: Buz->TimeValue = time;
 14085  0C08  0878               	movf	_Buz,w
 14086  0C09  3E06               	addlw	6
 14087  0C0A  0086               	movwf	6
 14088  0C0B  3001               	movlw	1	; select bank2/3
 14089  0C0C  0087               	movwf	7
 14090  0C0D  0829               	movf	setBuz@time,w
 14091  0C0E  3FC0               	movwi [0]fsr1
 14092  0C0F  082A               	movf	setBuz@time+1,w
 14093  0C10  3FC1               	movwi [1]fsr1
 14094                           
 14095                           ;Buzzer_B1.c: 37: RB3 = 1;
 14096  0C11  158D               	bsf	13,3	;volatile
 14097                           
 14098                           ;Buzzer_B1.c: 38: } else {
 14099  0C12  0008               	return
 14100  0C13                     l5500:	
 14101                           
 14102                           ;Buzzer_B1.c: 39: if (!Buz->BufferStatus1) {
 14103  0C13  0878               	movf	_Buz,w
 14104  0C14  0086               	movwf	6
 14105  0C15  3001               	movlw	1	; select bank2/3
 14106  0C16  0087               	movwf	7
 14107  0C17  1981               	btfsc	1,3
 14108  0C18  2C31               	goto	l5504
 14109                           
 14110                           ;Buzzer_B1.c: 40: Buz->BufferStatus1 = 1;
 14111  0C19  0878               	movf	_Buz,w
 14112  0C1A  0086               	movwf	6
 14113  0C1B  3001               	movlw	1	; select bank2/3
 14114  0C1C  0087               	movwf	7
 14115  0C1D  1581               	bsf	1,3
 14116                           
 14117                           ;Buzzer_B1.c: 41: Buz->CountBuffer1 = count;
 14118  0C1E  082C               	movf	setBuz@count,w
 14119  0C1F  00AB               	movwf	??_setBuz
 14120  0C20  0878               	movf	_Buz,w
 14121  0C21  3E04               	addlw	4
 14122  0C22  0086               	movwf	6
 14123  0C23  3001               	movlw	1	; select bank2/3
 14124  0C24  0087               	movwf	7
 14125  0C25  082B               	movf	??_setBuz,w
 14126  0C26  0081               	movwf	1
 14127                           
 14128                           ;Buzzer_B1.c: 42: Buz->TimeValueBuffer1 = time;
 14129  0C27  0878               	movf	_Buz,w
 14130  0C28  3E08               	addlw	8
 14131  0C29  0086               	movwf	6
 14132  0C2A  3001               	movlw	1	; select bank2/3
 14133  0C2B  0087               	movwf	7
 14134  0C2C  0829               	movf	setBuz@time,w
 14135  0C2D  3FC0               	movwi [0]fsr1
 14136  0C2E  082A               	movf	setBuz@time+1,w
 14137  0C2F  3FC1               	movwi [1]fsr1
 14138                           
 14139                           ;Buzzer_B1.c: 43: } else if (!Buz->BufferStatus2) {
 14140  0C30  0008               	return
 14141  0C31                     l5504:	
 14142  0C31  0878               	movf	_Buz,w
 14143  0C32  0086               	movwf	6
 14144  0C33  3001               	movlw	1	; select bank2/3
 14145  0C34  0087               	movwf	7
 14146  0C35  1A01               	btfsc	1,4
 14147  0C36  0008               	return
 14148                           
 14149                           ;Buzzer_B1.c: 44: Buz->BufferStatus2 = 1;
 14150  0C37  0878               	movf	_Buz,w
 14151  0C38  0086               	movwf	6
 14152  0C39  3001               	movlw	1	; select bank2/3
 14153  0C3A  0087               	movwf	7
 14154  0C3B  1601               	bsf	1,4
 14155                           
 14156                           ;Buzzer_B1.c: 45: Buz->CountBuffer2 = count;
 14157  0C3C  082C               	movf	setBuz@count,w
 14158  0C3D  00AB               	movwf	??_setBuz
 14159  0C3E  0878               	movf	_Buz,w
 14160  0C3F  3E05               	addlw	5
 14161  0C40  0086               	movwf	6
 14162  0C41  3001               	movlw	1	; select bank2/3
 14163  0C42  0087               	movwf	7
 14164  0C43  082B               	movf	??_setBuz,w
 14165  0C44  0081               	movwf	1
 14166                           
 14167                           ;Buzzer_B1.c: 46: Buz->TimeValueBuffer2 = time;
 14168  0C45  0878               	movf	_Buz,w
 14169  0C46  3E0A               	addlw	10
 14170  0C47  0086               	movwf	6
 14171  0C48  3001               	movlw	1	; select bank2/3
 14172  0C49  0087               	movwf	7
 14173  0C4A  0829               	movf	setBuz@time,w
 14174  0C4B  3FC0               	movwi [0]fsr1
 14175  0C4C  082A               	movf	setBuz@time+1,w
 14176  0C4D  3FC1               	movwi [1]fsr1
 14177  0C4E  0008               	return
 14178  0C4F                     __end_of_setBuz:	
 14179                           
 14180                           	psect	text89
 14181  16FD                     __ptext89:	
 14182 ;; *************** function ___awdiv *****************
 14183 ;; Defined at:
 14184 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awdiv.c"
 14185 ;; Parameters:    Size  Location     Type
 14186 ;;  divisor         2    0[BANK0 ] int 
 14187 ;;  dividend        2    2[BANK0 ] int 
 14188 ;; Auto vars:     Size  Location     Type
 14189 ;;  quotient        2    7[BANK0 ] int 
 14190 ;;  sign            1    6[BANK0 ] unsigned char 
 14191 ;;  counter         1    5[BANK0 ] unsigned char 
 14192 ;; Return value:  Size  Location     Type
 14193 ;;                  2    0[BANK0 ] int 
 14194 ;; Registers used:
 14195 ;;		wreg, status,2, status,0
 14196 ;; Tracked objects:
 14197 ;;		On entry : 0/0
 14198 ;;		On exit  : 0/0
 14199 ;;		Unchanged: 0/0
 14200 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14201 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14202 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14203 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14204 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14205 ;;Total ram usage:        9 bytes
 14206 ;; Hardware stack levels used:    1
 14207 ;; Hardware stack levels required when called:    5
 14208 ;; This function calls:
 14209 ;;		Nothing
 14210 ;; This function is called by:
 14211 ;;		_setBuz
 14212 ;; This function uses a non-reentrant model
 14213 ;;
 14214                           
 14215                           
 14216                           ;psect for function ___awdiv
 14217  16FD                     ___awdiv:	
 14218                           
 14219                           ;incstack = 0
 14220                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 14221  16FD  0020               	movlb	0	; select bank0
 14222  16FE  01A6               	clrf	___awdiv@sign
 14223  16FF  1FA1               	btfss	___awdiv@divisor+1,7
 14224  1700  2F08               	goto	l5454
 14225  1701  09A0               	comf	___awdiv@divisor,f
 14226  1702  09A1               	comf	___awdiv@divisor+1,f
 14227  1703  0AA0               	incf	___awdiv@divisor,f
 14228  1704  1903               	skipnz
 14229  1705  0AA1               	incf	___awdiv@divisor+1,f
 14230  1706  01A6               	clrf	___awdiv@sign
 14231  1707  0AA6               	incf	___awdiv@sign,f
 14232  1708                     l5454:	
 14233  1708  1FA3               	btfss	___awdiv@dividend+1,7
 14234  1709  2F13               	goto	l5460
 14235  170A  09A2               	comf	___awdiv@dividend,f
 14236  170B  09A3               	comf	___awdiv@dividend+1,f
 14237  170C  0AA2               	incf	___awdiv@dividend,f
 14238  170D  1903               	skipnz
 14239  170E  0AA3               	incf	___awdiv@dividend+1,f
 14240  170F  3001               	movlw	1
 14241  1710  00A4               	movwf	??___awdiv
 14242  1711  0824               	movf	??___awdiv,w
 14243  1712  06A6               	xorwf	___awdiv@sign,f
 14244  1713                     l5460:	
 14245  1713  01A7               	clrf	___awdiv@quotient
 14246  1714  01A8               	clrf	___awdiv@quotient+1
 14247  1715  0821               	movf	___awdiv@divisor+1,w
 14248  1716  0420               	iorwf	___awdiv@divisor,w
 14249  1717  1903               	skipnz
 14250  1718  2F42               	goto	l5482
 14251  1719  01A5               	clrf	___awdiv@counter
 14252  171A  0AA5               	incf	___awdiv@counter,f
 14253  171B                     l5470:	
 14254  171B  1BA1               	btfsc	___awdiv@divisor+1,7
 14255  171C  2F27               	goto	l5472
 14256  171D  3001               	movlw	1
 14257  171E                     u3975:	
 14258  171E  35A0               	lslf	___awdiv@divisor,f
 14259  171F  0DA1               	rlf	___awdiv@divisor+1,f
 14260  1720  0B89               	decfsz	9,f
 14261  1721  2F1E               	goto	u3975
 14262  1722  3001               	movlw	1
 14263  1723  00A4               	movwf	??___awdiv
 14264  1724  0824               	movf	??___awdiv,w
 14265  1725  07A5               	addwf	___awdiv@counter,f
 14266  1726  2F1B               	goto	l5470
 14267  1727                     l5472:	
 14268  1727  3001               	movlw	1
 14269  1728                     u3995:	
 14270  1728  35A7               	lslf	___awdiv@quotient,f
 14271  1729  0DA8               	rlf	___awdiv@quotient+1,f
 14272  172A  0B89               	decfsz	9,f
 14273  172B  2F28               	goto	u3995
 14274  172C  0821               	movf	___awdiv@divisor+1,w
 14275  172D  0223               	subwf	___awdiv@dividend+1,w
 14276  172E  1D03               	skipz
 14277  172F  2F32               	goto	u4005
 14278  1730  0820               	movf	___awdiv@divisor,w
 14279  1731  0222               	subwf	___awdiv@dividend,w
 14280  1732                     u4005:	
 14281  1732  1C03               	skipc
 14282  1733  2F39               	goto	l5478
 14283  1734  0820               	movf	___awdiv@divisor,w
 14284  1735  02A2               	subwf	___awdiv@dividend,f
 14285  1736  0821               	movf	___awdiv@divisor+1,w
 14286  1737  3BA3               	subwfb	___awdiv@dividend+1,f
 14287  1738  1427               	bsf	___awdiv@quotient,0
 14288  1739                     l5478:	
 14289  1739  3001               	movlw	1
 14290  173A                     u4015:	
 14291  173A  36A1               	lsrf	___awdiv@divisor+1,f
 14292  173B  0CA0               	rrf	___awdiv@divisor,f
 14293  173C  0B89               	decfsz	9,f
 14294  173D  2F3A               	goto	u4015
 14295  173E  3001               	movlw	1
 14296  173F  02A5               	subwf	___awdiv@counter,f
 14297  1740  1D03               	btfss	3,2
 14298  1741  2F27               	goto	l5472
 14299  1742                     l5482:	
 14300  1742  0826               	movf	___awdiv@sign,w
 14301  1743  1903               	btfsc	3,2
 14302  1744  2F4A               	goto	l5486
 14303  1745  09A7               	comf	___awdiv@quotient,f
 14304  1746  09A8               	comf	___awdiv@quotient+1,f
 14305  1747  0AA7               	incf	___awdiv@quotient,f
 14306  1748  1903               	skipnz
 14307  1749  0AA8               	incf	___awdiv@quotient+1,f
 14308  174A                     l5486:	
 14309  174A  0828               	movf	___awdiv@quotient+1,w
 14310  174B  01A1               	clrf	?___awdiv+1
 14311  174C  07A1               	addwf	?___awdiv+1,f
 14312  174D  0827               	movf	___awdiv@quotient,w
 14313  174E  01A0               	clrf	?___awdiv
 14314  174F  07A0               	addwf	?___awdiv,f
 14315  1750  0008               	return
 14316  1751                     __end_of___awdiv:	
 14317                           
 14318                           	psect	text90
 14319  1E7C                     __ptext90:	
 14320 ;; *************** function _DelayOff_Initialization *****************
 14321 ;; Defined at:
 14322 ;;		line 26 in file "../src/DelayOff_B1.c"
 14323 ;; Parameters:    Size  Location     Type
 14324 ;;		None
 14325 ;; Auto vars:     Size  Location     Type
 14326 ;;		None
 14327 ;; Return value:  Size  Location     Type
 14328 ;;		None               void
 14329 ;; Registers used:
 14330 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14331 ;; Tracked objects:
 14332 ;;		On entry : 0/0
 14333 ;;		On exit  : 0/0
 14334 ;;		Unchanged: 0/0
 14335 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14336 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14337 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14338 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14339 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14340 ;;Total ram usage:        0 bytes
 14341 ;; Hardware stack levels used:    1
 14342 ;; Hardware stack levels required when called:    7
 14343 ;; This function calls:
 14344 ;;		_DlyOff_Initialization
 14345 ;; This function is called by:
 14346 ;;		_main
 14347 ;; This function uses a non-reentrant model
 14348 ;;
 14349                           
 14350                           
 14351                           ;psect for function _DelayOff_Initialization
 14352  1E7C                     _DelayOff_Initialization:	
 14353                           
 14354                           ;DelayOff_B1.c: 28: DlyOff_Initialization(1);
 14355                           
 14356                           ;incstack = 0
 14357                           ; Regs used in _DelayOff_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 14358  1E7C  3001               	movlw	1
 14359  1E7D  319E  26CF  319E   	fcall	_DlyOff_Initialization
 14360                           
 14361                           ;DelayOff_B1.c: 32: DlyOff_Initialization(2);
 14362  1E80  3002               	movlw	2
 14363  1E81  319E  26CF         	fcall	_DlyOff_Initialization
 14364  1E83  0008               	return
 14365  1E84                     __end_of_DelayOff_Initialization:	
 14366                           
 14367                           	psect	text91
 14368  1ECF                     __ptext91:	
 14369 ;; *************** function _DlyOff_Initialization *****************
 14370 ;; Defined at:
 14371 ;;		line 56 in file "../src/DelayOff_B1.c"
 14372 ;; Parameters:    Size  Location     Type
 14373 ;;  sw              1    wreg     unsigned char 
 14374 ;; Auto vars:     Size  Location     Type
 14375 ;;  sw              1    2[BANK0 ] unsigned char 
 14376 ;; Return value:  Size  Location     Type
 14377 ;;		None               void
 14378 ;; Registers used:
 14379 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14380 ;; Tracked objects:
 14381 ;;		On entry : 0/0
 14382 ;;		On exit  : 0/0
 14383 ;;		Unchanged: 0/0
 14384 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14385 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14386 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14387 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14388 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14389 ;;Total ram usage:        1 bytes
 14390 ;; Hardware stack levels used:    1
 14391 ;; Hardware stack levels required when called:    6
 14392 ;; This function calls:
 14393 ;;		_DelayOffPointSelect
 14394 ;; This function is called by:
 14395 ;;		_DelayOff_Initialization
 14396 ;; This function uses a non-reentrant model
 14397 ;;
 14398                           
 14399                           
 14400                           ;psect for function _DlyOff_Initialization
 14401  1ECF                     _DlyOff_Initialization:	
 14402                           
 14403                           ;incstack = 0
 14404                           ; Regs used in _DlyOff_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 14405                           ;DlyOff_Initialization@sw stored from wreg
 14406  1ECF  0020               	movlb	0	; select bank0
 14407  1ED0  00A2               	movwf	DlyOff_Initialization@sw
 14408                           
 14409                           ;DelayOff_B1.c: 57: DelayOffPointSelect(sw);
 14410  1ED1  0822               	movf	DlyOff_Initialization@sw,w
 14411  1ED2  3191  212C         	fcall	_DelayOffPointSelect
 14412                           
 14413                           ;DelayOff_B1.c: 58: DelayOff->Enable = 1;
 14414  1ED4  0021               	movlb	1	; select bank1
 14415  1ED5  0838               	movf	_DelayOff^(0+128),w
 14416  1ED6  0086               	movwf	6
 14417  1ED7  0187               	clrf	7
 14418  1ED8  1401               	bsf	1,0
 14419  1ED9  0008               	return
 14420  1EDA                     __end_of_DlyOff_Initialization:	
 14421                           
 14422                           	psect	text92
 14423  112C                     __ptext92:	
 14424 ;; *************** function _DelayOffPointSelect *****************
 14425 ;; Defined at:
 14426 ;;		line 7 in file "../src/DelayOff_B1.c"
 14427 ;; Parameters:    Size  Location     Type
 14428 ;;  sw              1    wreg     unsigned char 
 14429 ;; Auto vars:     Size  Location     Type
 14430 ;;  sw              1    1[BANK0 ] unsigned char 
 14431 ;; Return value:  Size  Location     Type
 14432 ;;		None               void
 14433 ;; Registers used:
 14434 ;;		wreg
 14435 ;; Tracked objects:
 14436 ;;		On entry : 0/0
 14437 ;;		On exit  : 0/0
 14438 ;;		Unchanged: 0/0
 14439 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14440 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14441 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14442 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14443 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14444 ;;Total ram usage:        2 bytes
 14445 ;; Hardware stack levels used:    1
 14446 ;; Hardware stack levels required when called:    5
 14447 ;; This function calls:
 14448 ;;		Nothing
 14449 ;; This function is called by:
 14450 ;;		_DlyOff_Initialization
 14451 ;;		_DlyOff_Main
 14452 ;;		_setDelayOff_GO
 14453 ;; This function uses a non-reentrant model
 14454 ;;
 14455                           
 14456                           
 14457                           ;psect for function _DelayOffPointSelect
 14458  112C                     _DelayOffPointSelect:	
 14459                           
 14460                           ;incstack = 0
 14461                           ; Regs used in _DelayOffPointSelect: [wreg]
 14462                           ;DelayOffPointSelect@sw stored from wreg
 14463  112C  0020               	movlb	0	; select bank0
 14464  112D  00A1               	movwf	DelayOffPointSelect@sw
 14465                           
 14466                           ;DelayOff_B1.c: 9: if (sw == 1) {
 14467  112E  0821               	movf	DelayOffPointSelect@sw,w
 14468  112F  3A01               	xorlw	1
 14469  1130  1D03               	skipz
 14470  1131  2938               	goto	l5380
 14471                           
 14472                           ;DelayOff_B1.c: 10: DelayOff = &DlySw1;
 14473  1132  30C6               	movlw	_DlySw1& (0+255)
 14474  1133  00A0               	movwf	??_DelayOffPointSelect
 14475  1134  0820               	movf	??_DelayOffPointSelect,w
 14476  1135  0021               	movlb	1	; select bank1
 14477  1136  00B8               	movwf	_DelayOff^(0+128)
 14478                           
 14479                           ;DelayOff_B1.c: 11: }
 14480  1137  0008               	return
 14481  1138                     l5380:	
 14482                           
 14483                           ;DelayOff_B1.c: 14: else if (sw == 2) {
 14484  1138  0020               	movlb	0	; select bank0
 14485  1139  0821               	movf	DelayOffPointSelect@sw,w
 14486  113A  3A02               	xorlw	2
 14487  113B  1D03               	skipz
 14488  113C  0008               	return
 14489                           
 14490                           ;DelayOff_B1.c: 15: DelayOff = &DlySw2;
 14491  113D  30CB               	movlw	_DlySw2& (0+255)
 14492  113E  00A0               	movwf	??_DelayOffPointSelect
 14493  113F  0820               	movf	??_DelayOffPointSelect,w
 14494  1140  0021               	movlb	1	; select bank1
 14495  1141  00B8               	movwf	_DelayOff^(0+128)
 14496  1142  0008               	return
 14497  1143                     __end_of_DelayOffPointSelect:	
 14498                           
 14499                           	psect	text93
 14500  1101                     __ptext93:	
 14501 ;; *************** function _CC2500_PowerOnInitial *****************
 14502 ;; Defined at:
 14503 ;;		line 96 in file "../src/CC2500_B1.c"
 14504 ;; Parameters:    Size  Location     Type
 14505 ;;		None
 14506 ;; Auto vars:     Size  Location     Type
 14507 ;;		None
 14508 ;; Return value:  Size  Location     Type
 14509 ;;		None               void
 14510 ;; Registers used:
 14511 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 14512 ;; Tracked objects:
 14513 ;;		On entry : 0/0
 14514 ;;		On exit  : 0/0
 14515 ;;		Unchanged: 0/0
 14516 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14517 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14518 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14519 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14520 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14521 ;;Total ram usage:        0 bytes
 14522 ;; Hardware stack levels used:    1
 14523 ;; Hardware stack levels required when called:    8
 14524 ;; This function calls:
 14525 ;;		_CC2500_ClearRXFIFO
 14526 ;;		_CC2500_ClearTXFIFO
 14527 ;;		_CC2500_FrequencyCabr
 14528 ;;		_CC2500_InitPATable
 14529 ;;		_CC2500_InitSetREG
 14530 ;;		_CC2500_PowerRST
 14531 ;;		_CC2500_SIDLEMode
 14532 ;; This function is called by:
 14533 ;;		_main
 14534 ;; This function uses a non-reentrant model
 14535 ;;
 14536                           
 14537                           
 14538                           ;psect for function _CC2500_PowerOnInitial
 14539  1101                     _CC2500_PowerOnInitial:	
 14540                           
 14541                           ;CC2500_B1.c: 97: CC2500_PowerRST();
 14542                           
 14543                           ;incstack = 0
 14544                           ; Regs used in _CC2500_PowerOnInitial: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 14545  1101  3194  2413  3191   	fcall	_CC2500_PowerRST
 14546                           
 14547                           ;CC2500_B1.c: 98: CC2500_InitSetREG();
 14548  1104  3193  2365  3191   	fcall	_CC2500_InitSetREG
 14549                           
 14550                           ;CC2500_B1.c: 99: CC2500_InitPATable();
 14551  1107  3192  227B  3191   	fcall	_CC2500_InitPATable
 14552                           
 14553                           ;CC2500_B1.c: 100: CC2500_ClearTXFIFO();
 14554  110A  319E  2643  3191   	fcall	_CC2500_ClearTXFIFO
 14555                           
 14556                           ;CC2500_B1.c: 101: CC2500_ClearRXFIFO();
 14557  110D  319E  263F  3191   	fcall	_CC2500_ClearRXFIFO
 14558                           
 14559                           ;CC2500_B1.c: 102: CC2500_FrequencyCabr();
 14560  1110  319E  26E5  3191   	fcall	_CC2500_FrequencyCabr
 14561                           
 14562                           ;CC2500_B1.c: 103: CC2500_SIDLEMode();
 14563  1113  319E  2647         	fcall	_CC2500_SIDLEMode
 14564  1115  0008               	return
 14565  1116                     __end_of_CC2500_PowerOnInitial:	
 14566                           
 14567                           	psect	text94
 14568  1E47                     __ptext94:	
 14569 ;; *************** function _CC2500_SIDLEMode *****************
 14570 ;; Defined at:
 14571 ;;		line 180 in file "../src/CC2500_B1.c"
 14572 ;; Parameters:    Size  Location     Type
 14573 ;;		None
 14574 ;; Auto vars:     Size  Location     Type
 14575 ;;		None
 14576 ;; Return value:  Size  Location     Type
 14577 ;;		None               void
 14578 ;; Registers used:
 14579 ;;		wreg, status,2, status,0, pclath, cstack
 14580 ;; Tracked objects:
 14581 ;;		On entry : 0/0
 14582 ;;		On exit  : 0/0
 14583 ;;		Unchanged: 0/0
 14584 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14585 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14586 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14587 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14588 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14589 ;;Total ram usage:        0 bytes
 14590 ;; Hardware stack levels used:    1
 14591 ;; Hardware stack levels required when called:    7
 14592 ;; This function calls:
 14593 ;;		_CC2500_WriteCommand
 14594 ;; This function is called by:
 14595 ;;		_CC2500_PowerOnInitial
 14596 ;; This function uses a non-reentrant model
 14597 ;;
 14598                           
 14599                           
 14600                           ;psect for function _CC2500_SIDLEMode
 14601  1E47                     _CC2500_SIDLEMode:	
 14602                           
 14603                           ;CC2500_B1.c: 181: CC2500_WriteCommand(0x36);
 14604                           
 14605                           ;incstack = 0
 14606                           ; Regs used in _CC2500_SIDLEMode: [wreg+status,2+status,0+pclath+cstack]
 14607  1E47  3036               	movlw	54
 14608  1E48  319F  279F         	fcall	_CC2500_WriteCommand
 14609  1E4A  0008               	return
 14610  1E4B                     __end_of_CC2500_SIDLEMode:	
 14611                           
 14612                           	psect	text95
 14613  1413                     __ptext95:	
 14614 ;; *************** function _CC2500_PowerRST *****************
 14615 ;; Defined at:
 14616 ;;		line 109 in file "../src/CC2500_B1.c"
 14617 ;; Parameters:    Size  Location     Type
 14618 ;;		None
 14619 ;; Auto vars:     Size  Location     Type
 14620 ;;		None
 14621 ;; Return value:  Size  Location     Type
 14622 ;;		None               void
 14623 ;; Registers used:
 14624 ;;		wreg, status,2, status,0, pclath, cstack
 14625 ;; Tracked objects:
 14626 ;;		On entry : 0/0
 14627 ;;		On exit  : 0/0
 14628 ;;		Unchanged: 0/0
 14629 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14630 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14631 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14632 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14633 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14634 ;;Total ram usage:        1 bytes
 14635 ;; Hardware stack levels used:    1
 14636 ;; Hardware stack levels required when called:    6
 14637 ;; This function calls:
 14638 ;;		_CC2500_WriteByte
 14639 ;;		_DelayTime_1us
 14640 ;; This function is called by:
 14641 ;;		_CC2500_PowerOnInitial
 14642 ;; This function uses a non-reentrant model
 14643 ;;
 14644                           
 14645                           
 14646                           ;psect for function _CC2500_PowerRST
 14647  1413                     _CC2500_PowerRST:	
 14648                           
 14649                           ;CC2500_B1.c: 110: RC1 = 0;
 14650                           
 14651                           ;incstack = 0
 14652                           ; Regs used in _CC2500_PowerRST: [wreg+status,2+status,0+pclath+cstack]
 14653  1413  0020               	movlb	0	; select bank0
 14654  1414  108E               	bcf	14,1	;volatile
 14655                           
 14656                           ;CC2500_B1.c: 111: RC0 = 0;
 14657  1415  100E               	bcf	14,0	;volatile
 14658                           
 14659                           ;CC2500_B1.c: 112: RC4 = 1;
 14660  1416  160E               	bsf	14,4	;volatile
 14661                           
 14662                           ;CC2500_B1.c: 113: DelayTime_1us(10);
 14663  1417  300A               	movlw	10
 14664  1418  00A0               	movwf	DelayTime_1us@count
 14665  1419  3000               	movlw	0
 14666  141A  00A1               	movwf	DelayTime_1us@count+1
 14667  141B  3193  233F  3194   	fcall	_DelayTime_1us
 14668                           
 14669                           ;CC2500_B1.c: 114: RC4 = 0;
 14670  141E  0020               	movlb	0	; select bank0
 14671  141F  120E               	bcf	14,4	;volatile
 14672                           
 14673                           ;CC2500_B1.c: 115: DelayTime_1us(10);
 14674  1420  300A               	movlw	10
 14675  1421  00A0               	movwf	DelayTime_1us@count
 14676  1422  3000               	movlw	0
 14677  1423  00A1               	movwf	DelayTime_1us@count+1
 14678  1424  3193  233F  3194   	fcall	_DelayTime_1us
 14679                           
 14680                           ;CC2500_B1.c: 116: RC4 = 1;
 14681  1427  0020               	movlb	0	; select bank0
 14682  1428  160E               	bsf	14,4	;volatile
 14683                           
 14684                           ;CC2500_B1.c: 117: DelayTime_1us(40);
 14685  1429  3028               	movlw	40
 14686  142A  00A0               	movwf	DelayTime_1us@count
 14687  142B  3000               	movlw	0
 14688  142C  00A1               	movwf	DelayTime_1us@count+1
 14689  142D  3193  233F  3194   	fcall	_DelayTime_1us
 14690                           
 14691                           ;CC2500_B1.c: 118: RC4 = 0;
 14692  1430  0020               	movlb	0	; select bank0
 14693  1431  120E               	bcf	14,4	;volatile
 14694                           
 14695                           ;CC2500_B1.c: 119: SPI0Buffer = 0x30;
 14696  1432  3030               	movlw	48
 14697  1433  00A6               	movwf	??_CC2500_PowerRST
 14698  1434  0826               	movf	??_CC2500_PowerRST,w
 14699  1435  0021               	movlb	1	; select bank1
 14700  1436  00C1               	movwf	_SPI0Buffer^(0+128)
 14701  1437                     l301:	
 14702                           ;CC2500_B1.c: 120: while (RC2 == 1);
 14703                           
 14704  1437  0020               	movlb	0	; select bank0
 14705  1438  190E               	btfsc	14,2	;volatile
 14706  1439  2C37               	goto	l301
 14707                           
 14708                           ;CC2500_B1.c: 121: CC2500_WriteByte();
 14709  143A  3191  2172  3194   	fcall	_CC2500_WriteByte
 14710  143D                     l304:	
 14711                           ;CC2500_B1.c: 122: while (RC2 == 1);
 14712                           
 14713  143D  0020               	movlb	0	; select bank0
 14714  143E  190E               	btfsc	14,2	;volatile
 14715  143F  2C3D               	goto	l304
 14716                           
 14717                           ;CC2500_B1.c: 123: RC0 = 0;
 14718  1440  100E               	bcf	14,0	;volatile
 14719                           
 14720                           ;CC2500_B1.c: 124: RC4 = 1;
 14721  1441  160E               	bsf	14,4	;volatile
 14722  1442  0008               	return
 14723  1443                     __end_of_CC2500_PowerRST:	
 14724                           
 14725                           	psect	text96
 14726  1365                     __ptext96:	
 14727 ;; *************** function _CC2500_InitSetREG *****************
 14728 ;; Defined at:
 14729 ;;		line 130 in file "../src/CC2500_B1.c"
 14730 ;; Parameters:    Size  Location     Type
 14731 ;;		None
 14732 ;; Auto vars:     Size  Location     Type
 14733 ;;  loop_c          1    8[BANK0 ] unsigned char 
 14734 ;;  temp2           1    7[BANK0 ] unsigned char 
 14735 ;;  temp1           1    6[BANK0 ] unsigned char 
 14736 ;; Return value:  Size  Location     Type
 14737 ;;		None               void
 14738 ;; Registers used:
 14739 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 14740 ;; Tracked objects:
 14741 ;;		On entry : 0/0
 14742 ;;		On exit  : 0/0
 14743 ;;		Unchanged: 0/0
 14744 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14745 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14746 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14747 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14748 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14749 ;;Total ram usage:        4 bytes
 14750 ;; Hardware stack levels used:    1
 14751 ;; Hardware stack levels required when called:    7
 14752 ;; This function calls:
 14753 ;;		_CC2500_WriteREG
 14754 ;; This function is called by:
 14755 ;;		_CC2500_PowerOnInitial
 14756 ;; This function uses a non-reentrant model
 14757 ;;
 14758                           
 14759                           
 14760                           ;psect for function _CC2500_InitSetREG
 14761  1365                     _CC2500_InitSetREG:	
 14762                           
 14763                           ;CC2500_B1.c: 131: unsigned char loop_c;
 14764                           ;CC2500_B1.c: 132: unsigned char temp1, temp2;
 14765                           ;CC2500_B1.c: 134: for (loop_c = 0; loop_c < 47; loop_c++) {
 14766                           
 14767                           ;incstack = 0
 14768                           ; Regs used in _CC2500_InitSetREG: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 14769  1365  0020               	movlb	0	; select bank0
 14770  1366  01A8               	clrf	CC2500_InitSetREG@loop_c
 14771  1367                     L13:	
 14772  1367  302F               	movlw	47
 14773  1368  0228               	subwf	CC2500_InitSetREG@loop_c,w
 14774  1369  1803               	btfsc	3,0
 14775  136A  0008               	return
 14776                           
 14777                           ;CC2500_B1.c: 135: temp1 = CC2500_registers_address[loop_c];
 14778  136B  0828               	movf	CC2500_InitSetREG@loop_c,w
 14779  136C  3E00               	addlw	low (_CC2500_registers_address| (0+32768))
 14780  136D  0084               	movwf	4
 14781  136E  3090               	movlw	high (_CC2500_registers_address| (0+32768))
 14782  136F  1803               	skipnc
 14783  1370  3E01               	addlw	1
 14784  1371  0085               	movwf	5
 14785  1372  0800               	movf	0,w	;code access
 14786  1373  00A5               	movwf	??_CC2500_InitSetREG
 14787  1374  0825               	movf	??_CC2500_InitSetREG,w
 14788  1375  00A6               	movwf	CC2500_InitSetREG@temp1
 14789                           
 14790                           ;CC2500_B1.c: 136: temp2 = CC2500_rfSettings[loop_c];
 14791  1376  0828               	movf	CC2500_InitSetREG@loop_c,w
 14792  1377  3E2F               	addlw	low (_CC2500_rfSettings| (0+32768))
 14793  1378  0084               	movwf	4
 14794  1379  3090               	movlw	high (_CC2500_rfSettings| (0+32768))
 14795  137A  1803               	skipnc
 14796  137B  3E01               	addlw	1
 14797  137C  0085               	movwf	5
 14798  137D  0800               	movf	0,w	;code access
 14799  137E  00A5               	movwf	??_CC2500_InitSetREG
 14800  137F  0825               	movf	??_CC2500_InitSetREG,w
 14801  1380  00A7               	movwf	CC2500_InitSetREG@temp2
 14802                           
 14803                           ;CC2500_B1.c: 138: CC2500_WriteREG(temp1, temp2);
 14804  1381  0827               	movf	CC2500_InitSetREG@temp2,w
 14805  1382  00A5               	movwf	??_CC2500_InitSetREG
 14806  1383  0825               	movf	??_CC2500_InitSetREG,w
 14807  1384  00A2               	movwf	CC2500_WriteREG@value
 14808  1385  0826               	movf	CC2500_InitSetREG@temp1,w
 14809  1386  3191  218B  3193   	fcall	_CC2500_WriteREG
 14810  1389  3001               	movlw	1
 14811  138A  0020               	movlb	0	; select bank0
 14812  138B  00A5               	movwf	??_CC2500_InitSetREG
 14813  138C  0825               	movf	??_CC2500_InitSetREG,w
 14814  138D  07A8               	addwf	CC2500_InitSetREG@loop_c,f
 14815  138E  2B67               	goto	L13
 14816  138F                     __end_of_CC2500_InitSetREG:	
 14817                           
 14818                           	psect	text97
 14819  127B                     __ptext97:	
 14820 ;; *************** function _CC2500_InitPATable *****************
 14821 ;; Defined at:
 14822 ;;		line 145 in file "../src/CC2500_B1.c"
 14823 ;; Parameters:    Size  Location     Type
 14824 ;;		None
 14825 ;; Auto vars:     Size  Location     Type
 14826 ;;  loop_d          1    7[BANK0 ] unsigned char 
 14827 ;;  temp            1    6[BANK0 ] unsigned char 
 14828 ;; Return value:  Size  Location     Type
 14829 ;;		None               void
 14830 ;; Registers used:
 14831 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 14832 ;; Tracked objects:
 14833 ;;		On entry : 0/0
 14834 ;;		On exit  : 0/0
 14835 ;;		Unchanged: 0/0
 14836 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14837 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14838 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14839 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14840 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14841 ;;Total ram usage:        3 bytes
 14842 ;; Hardware stack levels used:    1
 14843 ;; Hardware stack levels required when called:    7
 14844 ;; This function calls:
 14845 ;;		_CC2500_WriteREG
 14846 ;; This function is called by:
 14847 ;;		_CC2500_PowerOnInitial
 14848 ;; This function uses a non-reentrant model
 14849 ;;
 14850                           
 14851                           
 14852                           ;psect for function _CC2500_InitPATable
 14853  127B                     _CC2500_InitPATable:	
 14854                           
 14855                           ;CC2500_B1.c: 146: unsigned char loop_d;
 14856                           ;CC2500_B1.c: 147: unsigned char temp;
 14857                           ;CC2500_B1.c: 149: for (loop_d = 0; loop_d < 8; loop_d++) {
 14858                           
 14859                           ;incstack = 0
 14860                           ; Regs used in _CC2500_InitPATable: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 14861  127B  0020               	movlb	0	; select bank0
 14862  127C  01A7               	clrf	CC2500_InitPATable@loop_d
 14863  127D                     L14:	
 14864  127D  3008               	movlw	8
 14865  127E  0227               	subwf	CC2500_InitPATable@loop_d,w
 14866  127F  1803               	btfsc	3,0
 14867  1280  0008               	return
 14868                           
 14869                           ;CC2500_B1.c: 150: temp = CC2500_patable_vaule[loop_d];
 14870  1281  0827               	movf	CC2500_InitPATable@loop_d,w
 14871  1282  3E5E               	addlw	low (_CC2500_patable_vaule| (0+32768))
 14872  1283  0084               	movwf	4
 14873  1284  3090               	movlw	high (_CC2500_patable_vaule| (0+32768))
 14874  1285  1803               	skipnc
 14875  1286  3E01               	addlw	1
 14876  1287  0085               	movwf	5
 14877  1288  0800               	movf	0,w	;code access
 14878  1289  00A5               	movwf	??_CC2500_InitPATable
 14879  128A  0825               	movf	??_CC2500_InitPATable,w
 14880  128B  00A6               	movwf	CC2500_InitPATable@temp
 14881                           
 14882                           ;CC2500_B1.c: 151: CC2500_WriteREG(0x3E, temp);
 14883  128C  0826               	movf	CC2500_InitPATable@temp,w
 14884  128D  00A5               	movwf	??_CC2500_InitPATable
 14885  128E  0825               	movf	??_CC2500_InitPATable,w
 14886  128F  00A2               	movwf	CC2500_WriteREG@value
 14887  1290  303E               	movlw	62
 14888  1291  3191  218B  3192   	fcall	_CC2500_WriteREG
 14889  1294  3001               	movlw	1
 14890  1295  0020               	movlb	0	; select bank0
 14891  1296  00A5               	movwf	??_CC2500_InitPATable
 14892  1297  0825               	movf	??_CC2500_InitPATable,w
 14893  1298  07A7               	addwf	CC2500_InitPATable@loop_d,f
 14894  1299  2A7D               	goto	L14
 14895  129A                     __end_of_CC2500_InitPATable:	
 14896                           
 14897                           	psect	text98
 14898  118B                     __ptext98:	
 14899 ;; *************** function _CC2500_WriteREG *****************
 14900 ;; Defined at:
 14901 ;;		line 222 in file "../src/CC2500_B1.c"
 14902 ;; Parameters:    Size  Location     Type
 14903 ;;  w_addr          1    wreg     unsigned char 
 14904 ;;  value           1    2[BANK0 ] unsigned char 
 14905 ;; Auto vars:     Size  Location     Type
 14906 ;;  w_addr          1    4[BANK0 ] unsigned char 
 14907 ;; Return value:  Size  Location     Type
 14908 ;;		None               void
 14909 ;; Registers used:
 14910 ;;		wreg, status,2, status,0, pclath, cstack
 14911 ;; Tracked objects:
 14912 ;;		On entry : 0/0
 14913 ;;		On exit  : 0/0
 14914 ;;		Unchanged: 0/0
 14915 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14916 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14917 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14918 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14919 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14920 ;;Total ram usage:        3 bytes
 14921 ;; Hardware stack levels used:    1
 14922 ;; Hardware stack levels required when called:    6
 14923 ;; This function calls:
 14924 ;;		_CC2500_WriteByte
 14925 ;; This function is called by:
 14926 ;;		_CC2500_InitSetREG
 14927 ;;		_CC2500_InitPATable
 14928 ;; This function uses a non-reentrant model
 14929 ;;
 14930                           
 14931                           
 14932                           ;psect for function _CC2500_WriteREG
 14933  118B                     _CC2500_WriteREG:	
 14934                           
 14935                           ;incstack = 0
 14936                           ; Regs used in _CC2500_WriteREG: [wreg+status,2+status,0+pclath+cstack]
 14937                           ;CC2500_WriteREG@w_addr stored from wreg
 14938  118B  0020               	movlb	0	; select bank0
 14939  118C  00A4               	movwf	CC2500_WriteREG@w_addr
 14940                           
 14941                           ;CC2500_B1.c: 223: RC4 = 0;
 14942  118D  120E               	bcf	14,4	;volatile
 14943                           
 14944                           ;CC2500_B1.c: 224: SPI0Buffer = w_addr;
 14945  118E  0824               	movf	CC2500_WriteREG@w_addr,w
 14946  118F  00A3               	movwf	??_CC2500_WriteREG
 14947  1190  0823               	movf	??_CC2500_WriteREG,w
 14948  1191  0021               	movlb	1	; select bank1
 14949  1192  00C1               	movwf	_SPI0Buffer^(0+128)
 14950  1193                     l346:	
 14951                           ;CC2500_B1.c: 225: while (RC2 == 1);
 14952                           
 14953  1193  0020               	movlb	0	; select bank0
 14954  1194  190E               	btfsc	14,2	;volatile
 14955  1195  2993               	goto	l346
 14956                           
 14957                           ;CC2500_B1.c: 226: CC2500_WriteByte();
 14958  1196  3191  2172  3191   	fcall	_CC2500_WriteByte
 14959                           
 14960                           ;CC2500_B1.c: 227: SPI0Buffer = value;
 14961  1199  0020               	movlb	0	; select bank0
 14962  119A  0822               	movf	CC2500_WriteREG@value,w
 14963  119B  00A3               	movwf	??_CC2500_WriteREG
 14964  119C  0823               	movf	??_CC2500_WriteREG,w
 14965  119D  0021               	movlb	1	; select bank1
 14966  119E  00C1               	movwf	_SPI0Buffer^(0+128)
 14967                           
 14968                           ;CC2500_B1.c: 228: CC2500_WriteByte();
 14969  119F  3191  2172         	fcall	_CC2500_WriteByte
 14970                           
 14971                           ;CC2500_B1.c: 229: RC4 = 1;
 14972  11A1  0020               	movlb	0	; select bank0
 14973  11A2  160E               	bsf	14,4	;volatile
 14974  11A3  0008               	return
 14975  11A4                     __end_of_CC2500_WriteREG:	
 14976                           
 14977                           	psect	text99
 14978  1EE5                     __ptext99:	
 14979 ;; *************** function _CC2500_FrequencyCabr *****************
 14980 ;; Defined at:
 14981 ;;		line 172 in file "../src/CC2500_B1.c"
 14982 ;; Parameters:    Size  Location     Type
 14983 ;;		None
 14984 ;; Auto vars:     Size  Location     Type
 14985 ;;		None
 14986 ;; Return value:  Size  Location     Type
 14987 ;;		None               void
 14988 ;; Registers used:
 14989 ;;		wreg, status,2, status,0, pclath, cstack
 14990 ;; Tracked objects:
 14991 ;;		On entry : 0/0
 14992 ;;		On exit  : 0/0
 14993 ;;		Unchanged: 0/0
 14994 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14995 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14996 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14997 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14998 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14999 ;;Total ram usage:        0 bytes
 15000 ;; Hardware stack levels used:    1
 15001 ;; Hardware stack levels required when called:    7
 15002 ;; This function calls:
 15003 ;;		_CC2500_WriteCommand
 15004 ;;		_DelayTime_1us
 15005 ;; This function is called by:
 15006 ;;		_CC2500_PowerOnInitial
 15007 ;; This function uses a non-reentrant model
 15008 ;;
 15009                           
 15010                           
 15011                           ;psect for function _CC2500_FrequencyCabr
 15012  1EE5                     _CC2500_FrequencyCabr:	
 15013                           
 15014                           ;CC2500_B1.c: 173: CC2500_WriteCommand(0x33);
 15015                           
 15016                           ;incstack = 0
 15017                           ; Regs used in _CC2500_FrequencyCabr: [wreg+status,2+status,0+pclath+cstack]
 15018  1EE5  3033               	movlw	51
 15019  1EE6  319F  279F  319E   	fcall	_CC2500_WriteCommand
 15020                           
 15021                           ;CC2500_B1.c: 174: DelayTime_1us(1000);
 15022  1EE9  30E8               	movlw	232
 15023  1EEA  0020               	movlb	0	; select bank0
 15024  1EEB  00A0               	movwf	DelayTime_1us@count
 15025  1EEC  3003               	movlw	3
 15026  1EED  00A1               	movwf	DelayTime_1us@count+1
 15027  1EEE  3193  233F         	fcall	_DelayTime_1us
 15028  1EF0  0008               	return
 15029  1EF1                     __end_of_CC2500_FrequencyCabr:	
 15030                           
 15031                           	psect	text100
 15032  133F                     __ptext100:	
 15033 ;; *************** function _DelayTime_1us *****************
 15034 ;; Defined at:
 15035 ;;		line 278 in file "../src/CC2500_B1.c"
 15036 ;; Parameters:    Size  Location     Type
 15037 ;;  count           2    0[BANK0 ] int 
 15038 ;; Auto vars:     Size  Location     Type
 15039 ;;  j               2    4[BANK0 ] unsigned int 
 15040 ;;  i               2    2[BANK0 ] unsigned int 
 15041 ;; Return value:  Size  Location     Type
 15042 ;;		None               void
 15043 ;; Registers used:
 15044 ;;		wreg, status,2
 15045 ;; Tracked objects:
 15046 ;;		On entry : 0/0
 15047 ;;		On exit  : 0/0
 15048 ;;		Unchanged: 0/0
 15049 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15050 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15051 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15052 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15053 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15054 ;;Total ram usage:        6 bytes
 15055 ;; Hardware stack levels used:    1
 15056 ;; Hardware stack levels required when called:    5
 15057 ;; This function calls:
 15058 ;;		Nothing
 15059 ;; This function is called by:
 15060 ;;		_CC2500_PowerRST
 15061 ;;		_CC2500_FrequencyCabr
 15062 ;; This function uses a non-reentrant model
 15063 ;;
 15064                           
 15065                           
 15066                           ;psect for function _DelayTime_1us
 15067  133F                     _DelayTime_1us:	
 15068                           
 15069                           ;CC2500_B1.c: 279: unsigned int i, j;
 15070                           ;CC2500_B1.c: 280: for (i = 1; i < count; i++)
 15071                           
 15072                           ;incstack = 0
 15073                           ; Regs used in _DelayTime_1us: [wreg+status,2]
 15074  133F  3001               	movlw	1
 15075  1340  0020               	movlb	0	; select bank0
 15076  1341  00A2               	movwf	DelayTime_1us@i
 15077  1342  3000               	movlw	0
 15078  1343  00A3               	movwf	DelayTime_1us@i+1
 15079  1344                     l370:	
 15080  1344  0821               	movf	DelayTime_1us@count+1,w
 15081  1345  0223               	subwf	DelayTime_1us@i+1,w
 15082  1346  1D03               	skipz
 15083  1347  2B4A               	goto	u4725
 15084  1348  0820               	movf	DelayTime_1us@count,w
 15085  1349  0222               	subwf	DelayTime_1us@i,w
 15086  134A                     u4725:	
 15087  134A  1803               	btfsc	3,0
 15088  134B  0008               	return
 15089                           
 15090                           ;CC2500_B1.c: 281: for (j = 0; j <= 1; j++);
 15091  134C  01A4               	clrf	DelayTime_1us@j
 15092  134D  01A5               	clrf	DelayTime_1us@j+1
 15093  134E  3000               	movlw	0
 15094  134F  0225               	subwf	DelayTime_1us@j+1,w
 15095  1350  3002               	movlw	2
 15096  1351  1903               	skipnz
 15097  1352  0224               	subwf	DelayTime_1us@j,w
 15098  1353  1803               	btfsc	3,0
 15099  1354  2B60               	goto	l5942
 15100  1355                     l5940:	
 15101  1355  3001               	movlw	1
 15102  1356  07A4               	addwf	DelayTime_1us@j,f
 15103  1357  3000               	movlw	0
 15104  1358  3DA5               	addwfc	DelayTime_1us@j+1,f
 15105  1359  3000               	movlw	0
 15106  135A  0225               	subwf	DelayTime_1us@j+1,w
 15107  135B  3002               	movlw	2
 15108  135C  1903               	skipnz
 15109  135D  0224               	subwf	DelayTime_1us@j,w
 15110  135E  1C03               	skipc
 15111  135F  2B55               	goto	l5940
 15112  1360                     l5942:	
 15113  1360  3001               	movlw	1
 15114  1361  07A2               	addwf	DelayTime_1us@i,f
 15115  1362  3000               	movlw	0
 15116  1363  3DA3               	addwfc	DelayTime_1us@i+1,f
 15117  1364  2B44               	goto	l370
 15118  1365                     __end_of_DelayTime_1us:	
 15119                           
 15120                           	psect	text101
 15121  1E43                     __ptext101:	
 15122 ;; *************** function _CC2500_ClearTXFIFO *****************
 15123 ;; Defined at:
 15124 ;;		line 158 in file "../src/CC2500_B1.c"
 15125 ;; Parameters:    Size  Location     Type
 15126 ;;		None
 15127 ;; Auto vars:     Size  Location     Type
 15128 ;;		None
 15129 ;; Return value:  Size  Location     Type
 15130 ;;		None               void
 15131 ;; Registers used:
 15132 ;;		wreg, status,2, status,0, pclath, cstack
 15133 ;; Tracked objects:
 15134 ;;		On entry : 0/0
 15135 ;;		On exit  : 0/0
 15136 ;;		Unchanged: 0/0
 15137 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15138 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15139 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15140 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15141 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15142 ;;Total ram usage:        0 bytes
 15143 ;; Hardware stack levels used:    1
 15144 ;; Hardware stack levels required when called:    7
 15145 ;; This function calls:
 15146 ;;		_CC2500_WriteCommand
 15147 ;; This function is called by:
 15148 ;;		_CC2500_PowerOnInitial
 15149 ;; This function uses a non-reentrant model
 15150 ;;
 15151                           
 15152                           
 15153                           ;psect for function _CC2500_ClearTXFIFO
 15154  1E43                     _CC2500_ClearTXFIFO:	
 15155                           
 15156                           ;CC2500_B1.c: 159: CC2500_WriteCommand(0x3B);
 15157                           
 15158                           ;incstack = 0
 15159                           ; Regs used in _CC2500_ClearTXFIFO: [wreg+status,2+status,0+pclath+cstack]
 15160  1E43  303B               	movlw	59
 15161  1E44  319F  279F         	fcall	_CC2500_WriteCommand
 15162  1E46  0008               	return
 15163  1E47                     __end_of_CC2500_ClearTXFIFO:	
 15164                           
 15165                           	psect	text102
 15166  1E3F                     __ptext102:	
 15167 ;; *************** function _CC2500_ClearRXFIFO *****************
 15168 ;; Defined at:
 15169 ;;		line 165 in file "../src/CC2500_B1.c"
 15170 ;; Parameters:    Size  Location     Type
 15171 ;;		None
 15172 ;; Auto vars:     Size  Location     Type
 15173 ;;		None
 15174 ;; Return value:  Size  Location     Type
 15175 ;;		None               void
 15176 ;; Registers used:
 15177 ;;		wreg, status,2, status,0, pclath, cstack
 15178 ;; Tracked objects:
 15179 ;;		On entry : 0/0
 15180 ;;		On exit  : 0/0
 15181 ;;		Unchanged: 0/0
 15182 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15183 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15184 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15185 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15186 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15187 ;;Total ram usage:        0 bytes
 15188 ;; Hardware stack levels used:    1
 15189 ;; Hardware stack levels required when called:    7
 15190 ;; This function calls:
 15191 ;;		_CC2500_WriteCommand
 15192 ;; This function is called by:
 15193 ;;		_CC2500_PowerOnInitial
 15194 ;; This function uses a non-reentrant model
 15195 ;;
 15196                           
 15197                           
 15198                           ;psect for function _CC2500_ClearRXFIFO
 15199  1E3F                     _CC2500_ClearRXFIFO:	
 15200                           
 15201                           ;CC2500_B1.c: 166: CC2500_WriteCommand(0x3A);
 15202                           
 15203                           ;incstack = 0
 15204                           ; Regs used in _CC2500_ClearRXFIFO: [wreg+status,2+status,0+pclath+cstack]
 15205  1E3F  303A               	movlw	58
 15206  1E40  319F  279F         	fcall	_CC2500_WriteCommand
 15207  1E42  0008               	return
 15208  1E43                     __end_of_CC2500_ClearRXFIFO:	
 15209                           
 15210                           	psect	text103
 15211  1F9F                     __ptext103:	
 15212 ;; *************** function _CC2500_WriteCommand *****************
 15213 ;; Defined at:
 15214 ;;		line 248 in file "../src/CC2500_B1.c"
 15215 ;; Parameters:    Size  Location     Type
 15216 ;;  command         1    wreg     unsigned char 
 15217 ;; Auto vars:     Size  Location     Type
 15218 ;;  command         1    3[BANK0 ] unsigned char 
 15219 ;; Return value:  Size  Location     Type
 15220 ;;		None               void
 15221 ;; Registers used:
 15222 ;;		wreg, status,2, status,0, pclath, cstack
 15223 ;; Tracked objects:
 15224 ;;		On entry : 0/0
 15225 ;;		On exit  : 0/0
 15226 ;;		Unchanged: 0/0
 15227 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15228 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15229 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15230 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15231 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15232 ;;Total ram usage:        2 bytes
 15233 ;; Hardware stack levels used:    1
 15234 ;; Hardware stack levels required when called:    6
 15235 ;; This function calls:
 15236 ;;		_CC2500_WriteByte
 15237 ;; This function is called by:
 15238 ;;		_CC2500_TxData
 15239 ;;		_CC2500_RxData
 15240 ;;		_CC2500_ClearTXFIFO
 15241 ;;		_CC2500_ClearRXFIFO
 15242 ;;		_CC2500_FrequencyCabr
 15243 ;;		_CC2500_SIDLEMode
 15244 ;;		_setRF_Main
 15245 ;;		_RF_RxDisable
 15246 ;; This function uses a non-reentrant model
 15247 ;;
 15248                           
 15249                           
 15250                           ;psect for function _CC2500_WriteCommand
 15251  1F9F                     _CC2500_WriteCommand:	
 15252                           
 15253                           ;incstack = 0
 15254                           ; Regs used in _CC2500_WriteCommand: [wreg+status,2+status,0+pclath+cstack]
 15255                           ;CC2500_WriteCommand@command stored from wreg
 15256  1F9F  0020               	movlb	0	; select bank0
 15257  1FA0  00A3               	movwf	CC2500_WriteCommand@command
 15258                           
 15259                           ;CC2500_B1.c: 249: RC4 = 0;
 15260  1FA1  120E               	bcf	14,4	;volatile
 15261                           
 15262                           ;CC2500_B1.c: 250: SPI0Buffer = command;
 15263  1FA2  0823               	movf	CC2500_WriteCommand@command,w
 15264  1FA3  00A2               	movwf	??_CC2500_WriteCommand
 15265  1FA4  0822               	movf	??_CC2500_WriteCommand,w
 15266  1FA5  0021               	movlb	1	; select bank1
 15267  1FA6  00C1               	movwf	_SPI0Buffer^(0+128)
 15268  1FA7                     l358:	
 15269                           ;CC2500_B1.c: 252: while (RC2 == 1);
 15270                           
 15271  1FA7  0020               	movlb	0	; select bank0
 15272  1FA8  190E               	btfsc	14,2	;volatile
 15273  1FA9  2FA7               	goto	l358
 15274                           
 15275                           ;CC2500_B1.c: 254: CC2500_WriteByte();
 15276  1FAA  3191  2172         	fcall	_CC2500_WriteByte
 15277                           
 15278                           ;CC2500_B1.c: 255: RC4 = 1;
 15279  1FAC  0020               	movlb	0	; select bank0
 15280  1FAD  160E               	bsf	14,4	;volatile
 15281  1FAE  0008               	return
 15282  1FAF                     __end_of_CC2500_WriteCommand:	
 15283                           
 15284                           	psect	text104
 15285  1172                     __ptext104:	
 15286 ;; *************** function _CC2500_WriteByte *****************
 15287 ;; Defined at:
 15288 ;;		line 190 in file "../src/CC2500_B1.c"
 15289 ;; Parameters:    Size  Location     Type
 15290 ;;		None
 15291 ;; Auto vars:     Size  Location     Type
 15292 ;;  loop_a          1    1[BANK0 ] unsigned char 
 15293 ;; Return value:  Size  Location     Type
 15294 ;;		None               void
 15295 ;; Registers used:
 15296 ;;		wreg, status,2, status,0
 15297 ;; Tracked objects:
 15298 ;;		On entry : 0/0
 15299 ;;		On exit  : 0/0
 15300 ;;		Unchanged: 0/0
 15301 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15302 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15303 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15304 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15305 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15306 ;;Total ram usage:        2 bytes
 15307 ;; Hardware stack levels used:    1
 15308 ;; Hardware stack levels required when called:    5
 15309 ;; This function calls:
 15310 ;;		Nothing
 15311 ;; This function is called by:
 15312 ;;		_CC2500_TxData
 15313 ;;		_CC2500_RxData
 15314 ;;		_CC2500_PowerRST
 15315 ;;		_CC2500_WriteREG
 15316 ;;		_CC2500_WriteCommand
 15317 ;;		_CC2500_ReadStatus
 15318 ;;		_CC2500_ReadREG
 15319 ;; This function uses a non-reentrant model
 15320 ;;
 15321                           
 15322                           
 15323                           ;psect for function _CC2500_WriteByte
 15324  1172                     _CC2500_WriteByte:	
 15325                           
 15326                           ;CC2500_B1.c: 191: unsigned char loop_a;
 15327                           ;CC2500_B1.c: 192: for (loop_a = 0; loop_a < 8; loop_a++) {
 15328                           
 15329                           ;incstack = 0
 15330                           ; Regs used in _CC2500_WriteByte: [wreg+status,2+status,0]
 15331  1172  0020               	movlb	0	; select bank0
 15332  1173  01A1               	clrf	CC2500_WriteByte@loop_a
 15333  1174                     L15:	
 15334  1174  3008               	movlw	8
 15335  1175  0221               	subwf	CC2500_WriteByte@loop_a,w
 15336  1176  1803               	btfsc	3,0
 15337  1177  0008               	return
 15338                           
 15339                           ;CC2500_B1.c: 193: if (SPI0Buffer & 0x80)
 15340  1178  0021               	movlb	1	; select bank1
 15341  1179  1FC1               	btfss	_SPI0Buffer^(0+128),7
 15342  117A  297E               	goto	l334
 15343                           
 15344                           ;CC2500_B1.c: 194: RC0 = 1;
 15345  117B  0020               	movlb	0	; select bank0
 15346  117C  140E               	bsf	14,0	;volatile
 15347  117D  2980               	goto	l335
 15348  117E                     l334:	
 15349                           
 15350                           ;CC2500_B1.c: 195: else
 15351                           ;CC2500_B1.c: 196: RC0 = 0;
 15352  117E  0020               	movlb	0	; select bank0
 15353  117F  100E               	bcf	14,0	;volatile
 15354  1180                     l335:	
 15355                           
 15356                           ;CC2500_B1.c: 197: RC1 = 1;
 15357  1180  148E               	bsf	14,1	;volatile
 15358                           
 15359                           ;CC2500_B1.c: 198: SPI0Buffer <<= 1;
 15360  1181  1003               	clrc
 15361  1182  0021               	movlb	1	; select bank1
 15362  1183  0DC1               	rlf	_SPI0Buffer^(0+128),f
 15363                           
 15364                           ;CC2500_B1.c: 199: RC1 = 0;
 15365  1184  0020               	movlb	0	; select bank0
 15366  1185  108E               	bcf	14,1	;volatile
 15367  1186  3001               	movlw	1
 15368  1187  00A0               	movwf	??_CC2500_WriteByte
 15369  1188  0820               	movf	??_CC2500_WriteByte,w
 15370  1189  07A1               	addwf	CC2500_WriteByte@loop_a,f
 15371  118A  2974               	goto	L15
 15372  118B                     __end_of_CC2500_WriteByte:	
 15373                           
 15374                           	psect	text105
 15375  0717                     __ptext105:	
 15376 ;; *************** function _Buzzer_Main *****************
 15377 ;; Defined at:
 15378 ;;		line 53 in file "../src/Buzzer_B1.c"
 15379 ;; Parameters:    Size  Location     Type
 15380 ;;		None
 15381 ;; Auto vars:     Size  Location     Type
 15382 ;;		None
 15383 ;; Return value:  Size  Location     Type
 15384 ;;		None               void
 15385 ;; Registers used:
 15386 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
 15387 ;; Tracked objects:
 15388 ;;		On entry : 0/0
 15389 ;;		On exit  : 0/0
 15390 ;;		Unchanged: 0/0
 15391 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15392 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15393 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15394 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15395 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15396 ;;Total ram usage:        4 bytes
 15397 ;; Hardware stack levels used:    1
 15398 ;; Hardware stack levels required when called:    5
 15399 ;; This function calls:
 15400 ;;		Nothing
 15401 ;; This function is called by:
 15402 ;;		_main
 15403 ;; This function uses a non-reentrant model
 15404 ;;
 15405                           
 15406                           
 15407                           ;psect for function _Buzzer_Main
 15408  0717                     _Buzzer_Main:	
 15409                           
 15410                           ;Buzzer_B1.c: 54: Buz->Switch = (RB3) ? 1 : 0;
 15411                           
 15412                           ;incstack = 0
 15413                           ; Regs used in _Buzzer_Main: [wreg-fsr1h+status,2+status,0]
 15414  0717  0878               	movf	_Buz,w
 15415  0718  0086               	movwf	6
 15416  0719  3001               	movlw	1	; select bank2/3
 15417  071A  0087               	movwf	7
 15418  071B  1281               	bcf	1,5
 15419  071C  0020               	movlb	0	; select bank0
 15420  071D  198D               	btfsc	13,3	;volatile
 15421  071E  1681               	bsf	1,5
 15422                           
 15423                           ;Buzzer_B1.c: 56: if (Buz->Counter >= Buz->TimeValue) {
 15424  071F  0878               	movf	_Buz,w
 15425  0720  3E06               	addlw	6
 15426  0721  0086               	movwf	6
 15427  0722  3001               	movlw	1	; select bank2/3
 15428  0723  0087               	movwf	7
 15429  0724  3F40               	moviw [0]fsr1
 15430  0725  0020               	movlb	0	; select bank0
 15431  0726  00A0               	movwf	??_Buzzer_Main
 15432  0727  3F41               	moviw [1]fsr1
 15433  0728  00A1               	movwf	??_Buzzer_Main+1
 15434  0729  0A78               	incf	_Buz,w
 15435  072A  0086               	movwf	6
 15436  072B  3001               	movlw	1	; select bank2/3
 15437  072C  0087               	movwf	7
 15438  072D  3F40               	moviw [0]fsr1
 15439  072E  00A2               	movwf	??_Buzzer_Main+2
 15440  072F  3F41               	moviw [1]fsr1
 15441  0730  00A3               	movwf	??_Buzzer_Main+3
 15442  0731  0821               	movf	??_Buzzer_Main+1,w
 15443  0732  0223               	subwf	??_Buzzer_Main+3,w
 15444  0733  1D03               	skipz
 15445  0734  2F37               	goto	u5955
 15446  0735  0820               	movf	??_Buzzer_Main,w
 15447  0736  0222               	subwf	??_Buzzer_Main+2,w
 15448  0737                     u5955:	
 15449  0737  1C03               	skipc
 15450  0738  0008               	return
 15451                           
 15452                           ;Buzzer_B1.c: 57: Buz->Counter = 0;
 15453  0739  0A78               	incf	_Buz,w
 15454  073A  0086               	movwf	6
 15455  073B  3001               	movlw	1	; select bank2/3
 15456  073C  0087               	movwf	7
 15457  073D  3000               	movlw	0
 15458  073E  3FC0               	movwi [0]fsr1
 15459  073F  3FC1               	movwi [1]fsr1
 15460                           
 15461                           ;Buzzer_B1.c: 58: if (!Buz->Switch) {
 15462  0740  0878               	movf	_Buz,w
 15463  0741  0086               	movwf	6
 15464  0742  3001               	movlw	1	; select bank2/3
 15465  0743  0087               	movwf	7
 15466  0744  1A81               	btfsc	1,5
 15467  0745  2FAB               	goto	l6780
 15468                           
 15469                           ;Buzzer_B1.c: 59: if (Buz->Count == 0) {
 15470  0746  0878               	movf	_Buz,w
 15471  0747  3E03               	addlw	3
 15472  0748  0086               	movwf	6
 15473  0749  3001               	movlw	1	; select bank2/3
 15474  074A  0087               	movwf	7
 15475  074B  0881               	movf	1,f
 15476  074C  1D03               	skipz
 15477  074D  2FA4               	goto	l6776
 15478                           
 15479                           ;Buzzer_B1.c: 60: if (Buz->BufferStatus1) {
 15480  074E  0878               	movf	_Buz,w
 15481  074F  0086               	movwf	6
 15482  0750  3001               	movlw	1	; select bank2/3
 15483  0751  0087               	movwf	7
 15484  0752  1D81               	btfss	1,3
 15485  0753  2F76               	goto	l6768
 15486                           
 15487                           ;Buzzer_B1.c: 61: Buz->BufferStatus1 = 0;
 15488  0754  0878               	movf	_Buz,w
 15489  0755  0086               	movwf	6
 15490  0756  3001               	movlw	1	; select bank2/3
 15491  0757  0087               	movwf	7
 15492  0758  1181               	bcf	1,3
 15493                           
 15494                           ;Buzzer_B1.c: 62: Buz->Count = Buz->CountBuffer1;
 15495  0759  0878               	movf	_Buz,w
 15496  075A  3E04               	addlw	4
 15497  075B  0086               	movwf	6
 15498  075C  3001               	movlw	1	; select bank2/3
 15499  075D  0087               	movwf	7
 15500  075E  0801               	movf	1,w
 15501  075F  00A0               	movwf	??_Buzzer_Main
 15502  0760  0878               	movf	_Buz,w
 15503  0761  3E03               	addlw	3
 15504  0762  0086               	movwf	6
 15505  0763  3001               	movlw	1	; select bank2/3
 15506  0764  0087               	movwf	7
 15507  0765  0820               	movf	??_Buzzer_Main,w
 15508  0766  0081               	movwf	1
 15509                           
 15510                           ;Buzzer_B1.c: 63: Buz->TimeValue = Buz->TimeValueBuffer1;
 15511  0767  0878               	movf	_Buz,w
 15512  0768  3E08               	addlw	8
 15513  0769  0086               	movwf	6
 15514  076A  3001               	movlw	1	; select bank2/3
 15515  076B  0087               	movwf	7
 15516  076C  0878               	movf	_Buz,w
 15517  076D  3E06               	addlw	6
 15518  076E  0084               	movwf	4
 15519  076F  3001               	movlw	1	; select bank2/3
 15520  0770  0085               	movwf	5
 15521  0771  3F40               	moviw [0]fsr1
 15522  0772  3F80               	movwi [0]fsr0
 15523  0773  3F41               	moviw [1]fsr1
 15524  0774  3F81               	movwi [1]fsr0
 15525                           
 15526                           ;Buzzer_B1.c: 64: } else if (Buz->BufferStatus2) {
 15527  0775  0008               	return
 15528  0776                     l6768:	
 15529  0776  0878               	movf	_Buz,w
 15530  0777  0086               	movwf	6
 15531  0778  3001               	movlw	1	; select bank2/3
 15532  0779  0087               	movwf	7
 15533  077A  1E01               	btfss	1,4
 15534  077B  2F9E               	goto	l6774
 15535                           
 15536                           ;Buzzer_B1.c: 65: Buz->BufferStatus2 = 0;
 15537  077C  0878               	movf	_Buz,w
 15538  077D  0086               	movwf	6
 15539  077E  3001               	movlw	1	; select bank2/3
 15540  077F  0087               	movwf	7
 15541  0780  1201               	bcf	1,4
 15542                           
 15543                           ;Buzzer_B1.c: 66: Buz->Count = Buz->CountBuffer2;
 15544  0781  0878               	movf	_Buz,w
 15545  0782  3E05               	addlw	5
 15546  0783  0086               	movwf	6
 15547  0784  3001               	movlw	1	; select bank2/3
 15548  0785  0087               	movwf	7
 15549  0786  0801               	movf	1,w
 15550  0787  00A0               	movwf	??_Buzzer_Main
 15551  0788  0878               	movf	_Buz,w
 15552  0789  3E03               	addlw	3
 15553  078A  0086               	movwf	6
 15554  078B  3001               	movlw	1	; select bank2/3
 15555  078C  0087               	movwf	7
 15556  078D  0820               	movf	??_Buzzer_Main,w
 15557  078E  0081               	movwf	1
 15558                           
 15559                           ;Buzzer_B1.c: 67: Buz->TimeValue = Buz->TimeValueBuffer2;
 15560  078F  0878               	movf	_Buz,w
 15561  0790  3E0A               	addlw	10
 15562  0791  0086               	movwf	6
 15563  0792  3001               	movlw	1	; select bank2/3
 15564  0793  0087               	movwf	7
 15565  0794  0878               	movf	_Buz,w
 15566  0795  3E06               	addlw	6
 15567  0796  0084               	movwf	4
 15568  0797  3001               	movlw	1	; select bank2/3
 15569  0798  0085               	movwf	5
 15570  0799  3F40               	moviw [0]fsr1
 15571  079A  3F80               	movwi [0]fsr0
 15572  079B  3F41               	moviw [1]fsr1
 15573  079C  3F81               	movwi [1]fsr0
 15574                           
 15575                           ;Buzzer_B1.c: 68: } else {
 15576  079D  0008               	return
 15577  079E                     l6774:	
 15578                           
 15579                           ;Buzzer_B1.c: 69: Buz->GO = 0;
 15580  079E  0878               	movf	_Buz,w
 15581  079F  0086               	movwf	6
 15582  07A0  3001               	movlw	1	; select bank2/3
 15583  07A1  0087               	movwf	7
 15584  07A2  1081               	bcf	1,1
 15585                           
 15586                           ;Buzzer_B1.c: 70: }
 15587                           ;Buzzer_B1.c: 71: } else {
 15588  07A3  0008               	return
 15589  07A4                     l6776:	
 15590                           
 15591                           ;Buzzer_B1.c: 72: Buz->Switch = 1;
 15592  07A4  0878               	movf	_Buz,w
 15593  07A5  0086               	movwf	6
 15594  07A6  3001               	movlw	1	; select bank2/3
 15595  07A7  0087               	movwf	7
 15596  07A8  1681               	bsf	1,5
 15597                           
 15598                           ;Buzzer_B1.c: 74: RB3 = 1;
 15599  07A9  158D               	bsf	13,3	;volatile
 15600                           
 15601                           ;Buzzer_B1.c: 75: }
 15602                           ;Buzzer_B1.c: 76: } else {
 15603  07AA  0008               	return
 15604  07AB                     l6780:	
 15605                           
 15606                           ;Buzzer_B1.c: 77: Buz->Switch = 0;
 15607  07AB  0878               	movf	_Buz,w
 15608  07AC  0086               	movwf	6
 15609  07AD  3001               	movlw	1	; select bank2/3
 15610  07AE  0087               	movwf	7
 15611  07AF  1281               	bcf	1,5
 15612                           
 15613                           ;Buzzer_B1.c: 79: RB3 = 0;
 15614  07B0  118D               	bcf	13,3	;volatile
 15615                           
 15616                           ;Buzzer_B1.c: 81: Buz->Count--;
 15617  07B1  0878               	movf	_Buz,w
 15618  07B2  3E03               	addlw	3
 15619  07B3  0086               	movwf	6
 15620  07B4  3001               	movlw	1	; select bank2/3
 15621  07B5  0087               	movwf	7
 15622  07B6  3001               	movlw	1
 15623  07B7  0281               	subwf	1,f
 15624  07B8  0008               	return
 15625  07B9                     __end_of_Buzzer_Main:	
 15626                           
 15627                           	psect	text106
 15628  1EC4                     __ptext106:	
 15629 ;; *************** function _Buzzer_Initialization *****************
 15630 ;; Defined at:
 15631 ;;		line 11 in file "../src/Buzzer_B1.c"
 15632 ;; Parameters:    Size  Location     Type
 15633 ;;		None
 15634 ;; Auto vars:     Size  Location     Type
 15635 ;;		None
 15636 ;; Return value:  Size  Location     Type
 15637 ;;		None               void
 15638 ;; Registers used:
 15639 ;;		wreg, fsr1l, fsr1h
 15640 ;; Tracked objects:
 15641 ;;		On entry : 0/0
 15642 ;;		On exit  : 0/0
 15643 ;;		Unchanged: 0/0
 15644 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15645 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15646 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15647 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15648 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15649 ;;Total ram usage:        1 bytes
 15650 ;; Hardware stack levels used:    1
 15651 ;; Hardware stack levels required when called:    5
 15652 ;; This function calls:
 15653 ;;		Nothing
 15654 ;; This function is called by:
 15655 ;;		_main
 15656 ;; This function uses a non-reentrant model
 15657 ;;
 15658                           
 15659                           
 15660                           ;psect for function _Buzzer_Initialization
 15661  1EC4                     _Buzzer_Initialization:	
 15662                           
 15663                           ;Buzzer_B1.c: 12: Buz = &Buz1;
 15664                           
 15665                           ;incstack = 0
 15666                           ; Regs used in _Buzzer_Initialization: [wregfsr1]
 15667  1EC4  303C               	movlw	_Buz1& (0+255)
 15668  1EC5  0020               	movlb	0	; select bank0
 15669  1EC6  00A0               	movwf	??_Buzzer_Initialization
 15670  1EC7  0820               	movf	??_Buzzer_Initialization,w
 15671  1EC8  00F8               	movwf	_Buz
 15672                           
 15673                           ;Buzzer_B1.c: 13: Buz->Enable = 1;
 15674  1EC9  0878               	movf	_Buz,w
 15675  1ECA  0086               	movwf	6
 15676  1ECB  3001               	movlw	1	; select bank2/3
 15677  1ECC  0087               	movwf	7
 15678  1ECD  1401               	bsf	1,0
 15679  1ECE  0008               	return
 15680  1ECF                     __end_of_Buzzer_Initialization:	
 15681                           
 15682                           	psect	intentry
 15683  0004                     __pintentry:	
 15684 ;; *************** function _ISR *****************
 15685 ;; Defined at:
 15686 ;;		line 109 in file "../src/MCU_B1.c"
 15687 ;; Parameters:    Size  Location     Type
 15688 ;;		None
 15689 ;; Auto vars:     Size  Location     Type
 15690 ;;		None
 15691 ;; Return value:  Size  Location     Type
 15692 ;;		None               void
 15693 ;; Registers used:
 15694 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15695 ;; Tracked objects:
 15696 ;;		On entry : 0/0
 15697 ;;		On exit  : 0/0
 15698 ;;		Unchanged: 0/0
 15699 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15700 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15701 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15702 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15703 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15704 ;;Total ram usage:        1 bytes
 15705 ;; Hardware stack levels used:    1
 15706 ;; Hardware stack levels required when called:    4
 15707 ;; This function calls:
 15708 ;;		_INT_ISR
 15709 ;;		_IOC_ISR
 15710 ;;		_TMR0_ISR
 15711 ;; This function is called by:
 15712 ;;		Interrupt level 1
 15713 ;; This function uses a non-reentrant model
 15714 ;;
 15715                           
 15716  0004                     _ISR:	
 15717                           
 15718                           ;incstack = 0
 15719                           ; Regs used in _ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15720  0004  147E               	bsf	126,0	;set compiler interrupt flag
 15721  0005  3180               	pagesel	$
 15722  0006  0020               	movlb	0	; select bank0
 15723  0007  087F               	movf	127,w
 15724  0008  00F7               	movwf	??_ISR
 15725                           
 15726                           ;MCU_B1.c: 111: IOC_ISR();
 15727  0009  3190  207E  3180   	fcall	_IOC_ISR
 15728                           
 15729                           ;MCU_B1.c: 113: TMR0_ISR();
 15730  000C  3194  2474  3180   	fcall	_TMR0_ISR
 15731                           
 15732                           ;MCU_B1.c: 115: ;;
 15733                           ;MCU_B1.c: 119: INT_ISR();
 15734  000F  319F  27EF         	fcall	_INT_ISR
 15735  0011  0877               	movf	??_ISR,w
 15736  0012  0020               	movlb	0	; select bank0
 15737  0013  00FF               	movwf	127
 15738  0014  107E               	bcf	126,0	;clear compiler interrupt flag
 15739  0015  0009               	retfie
 15740  0016                     __end_of_ISR:	
 15741                           
 15742                           	psect	text108
 15743  1474                     __ptext108:	
 15744 ;; *************** function _TMR0_ISR *****************
 15745 ;; Defined at:
 15746 ;;		line 137 in file "../src/MCU_B1.c"
 15747 ;; Parameters:    Size  Location     Type
 15748 ;;		None
 15749 ;; Auto vars:     Size  Location     Type
 15750 ;;		None
 15751 ;; Return value:  Size  Location     Type
 15752 ;;		None               void
 15753 ;; Registers used:
 15754 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15755 ;; Tracked objects:
 15756 ;;		On entry : 0/0
 15757 ;;		On exit  : 0/0
 15758 ;;		Unchanged: 0/0
 15759 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15760 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15761 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15762 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15763 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15764 ;;Total ram usage:        0 bytes
 15765 ;; Hardware stack levels used:    1
 15766 ;; Hardware stack levels required when called:    2
 15767 ;; This function calls:
 15768 ;;		_Buz_Counter
 15769 ;;		_setDimmerLights_IntrControl
 15770 ;; This function is called by:
 15771 ;;		_ISR
 15772 ;; This function uses a non-reentrant model
 15773 ;;
 15774                           
 15775                           
 15776                           ;psect for function _TMR0_ISR
 15777  1474                     _TMR0_ISR:	
 15778                           
 15779                           ;MCU_B1.c: 138: if (TMR0IE == 1 && TMR0IF == 1) {
 15780                           
 15781                           ;incstack = 0
 15782                           ; Regs used in _TMR0_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15783  1474  1E8B               	btfss	11,5	;volatile
 15784  1475  0008               	return
 15785  1476  1D0B               	btfss	11,2	;volatile
 15786  1477  0008               	return
 15787                           
 15788                           ;MCU_B1.c: 139: TMR0 = (256-90);
 15789  1478  30A6               	movlw	166
 15790  1479  0020               	movlb	0	; select bank0
 15791  147A  0095               	movwf	21	;volatile
 15792                           
 15793                           ;MCU_B1.c: 140: TMR0IF = 0;
 15794  147B  110B               	bcf	11,2	;volatile
 15795                           
 15796                           ;MCU_B1.c: 145: setDimmerLights_IntrControl(1);
 15797  147C  3001               	movlw	1
 15798  147D  3180  204C  3194   	fcall	_setDimmerLights_IntrControl
 15799                           
 15800                           ;MCU_B1.c: 150: setDimmerLights_IntrControl(2);
 15801  1480  3002               	movlw	2
 15802  1481  3180  204C  3194   	fcall	_setDimmerLights_IntrControl
 15803                           
 15804                           ;MCU_B1.c: 161: Timer0->Count++;
 15805  1484  0021               	movlb	1	; select bank1
 15806  1485  0A67               	incf	_Timer0^(0+128),w
 15807  1486  0086               	movwf	6
 15808  1487  3001               	movlw	1	; select bank2/3
 15809  1488  0087               	movwf	7
 15810  1489  3001               	movlw	1
 15811  148A  0781               	addwf	1,f
 15812  148B  3141               	addfsr 1,1
 15813  148C  1803               	skipnc
 15814  148D  0A81               	incf	1,f
 15815                           
 15816                           ;MCU_B1.c: 162: if (Timer0->Count == 200) {
 15817  148E  0A67               	incf	_Timer0^(0+128),w
 15818  148F  0086               	movwf	6
 15819  1490  3001               	movlw	1	; select bank2/3
 15820  1491  0087               	movwf	7
 15821  1492  3F40               	moviw [0]fsr1
 15822  1493  3AC8               	xorlw	200
 15823  1494  1D03               	skipz
 15824  1495  2C98               	goto	u605_25
 15825  1496  3F41               	moviw [1]fsr1
 15826  1497  3A00               	xorlw	0
 15827  1498                     u605_25:	
 15828  1498  1D03               	skipz
 15829  1499  0008               	return
 15830                           
 15831                           ;MCU_B1.c: 163: Timer0->Count = 0;
 15832  149A  0A67               	incf	_Timer0^(0+128),w
 15833  149B  0086               	movwf	6
 15834  149C  3001               	movlw	1	; select bank2/3
 15835  149D  0087               	movwf	7
 15836  149E  3000               	movlw	0
 15837  149F  3FC0               	movwi [0]fsr1
 15838  14A0  3FC1               	movwi [1]fsr1
 15839                           
 15840                           ;MCU_B1.c: 164: myMain->T0_Timerout = 1;
 15841  14A1  0869               	movf	_myMain^(0+128),w
 15842  14A2  0086               	movwf	6
 15843  14A3  3001               	movlw	1	; select bank2/3
 15844  14A4  0087               	movwf	7
 15845  14A5  1481               	bsf	1,1
 15846                           
 15847                           ;MCU_B1.c: 167: Buz_Counter();
 15848  14A6  319F  278F         	fcall	_Buz_Counter
 15849  14A8  0008               	return
 15850  14A9                     __end_of_TMR0_ISR:	
 15851                           
 15852                           	psect	text109
 15853  004C                     __ptext109:	
 15854 ;; *************** function _setDimmerLights_IntrControl *****************
 15855 ;; Defined at:
 15856 ;;		line 27 in file "../src/Dimmer_B1.c"
 15857 ;; Parameters:    Size  Location     Type
 15858 ;;  lights          1    wreg     unsigned char 
 15859 ;; Auto vars:     Size  Location     Type
 15860 ;;  lights          1    6[COMMON] unsigned char 
 15861 ;; Return value:  Size  Location     Type
 15862 ;;		None               void
 15863 ;; Registers used:
 15864 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15865 ;; Tracked objects:
 15866 ;;		On entry : 0/0
 15867 ;;		On exit  : 0/0
 15868 ;;		Unchanged: 0/0
 15869 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15870 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15871 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15872 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15873 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15874 ;;Total ram usage:        5 bytes
 15875 ;; Hardware stack levels used:    1
 15876 ;; Hardware stack levels required when called:    1
 15877 ;; This function calls:
 15878 ;;		_DimmerIntrPointSelect
 15879 ;; This function is called by:
 15880 ;;		_TMR0_ISR
 15881 ;; This function uses a non-reentrant model
 15882 ;;
 15883                           
 15884                           
 15885                           ;psect for function _setDimmerLights_IntrControl
 15886  004C                     _setDimmerLights_IntrControl:	
 15887                           
 15888                           ;incstack = 0
 15889                           ; Regs used in _setDimmerLights_IntrControl: [wreg-fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 15890                           ;setDimmerLights_IntrControl@lights stored from wreg
 15891  004C  00F6               	movwf	setDimmerLights_IntrControl@lights
 15892                           
 15893                           ;Dimmer_B1.c: 28: DimmerIntrPointSelect(lights);
 15894  004D  0876               	movf	setDimmerLights_IntrControl@lights,w
 15895  004E  3190  20A0  3180   	fcall	_DimmerIntrPointSelect
 15896                           
 15897                           ;Dimmer_B1.c: 29: if (DimmerLightsIntr->GO == 1) {
 15898  0051  087A               	movf	_DimmerLightsIntr,w
 15899  0052  0086               	movwf	6
 15900  0053  3001               	movlw	1	; select bank2/3
 15901  0054  0087               	movwf	7
 15902  0055  1C01               	btfss	1,0
 15903  0056  28B1               	goto	i1l6312
 15904                           
 15905                           ;Dimmer_B1.c: 30: DimmerLightsIntr->Count++;
 15906  0057  3001               	movlw	1
 15907  0058  00F2               	movwf	??_setDimmerLights_IntrControl
 15908  0059  087A               	movf	_DimmerLightsIntr,w
 15909  005A  3E03               	addlw	3
 15910  005B  0086               	movwf	6
 15911  005C  3001               	movlw	1	; select bank2/3
 15912  005D  0087               	movwf	7
 15913  005E  0872               	movf	??_setDimmerLights_IntrControl,w
 15914  005F  0781               	addwf	1,f
 15915                           
 15916                           ;Dimmer_B1.c: 31: if (DimmerLightsIntr->Count >= (DimmerLightsIntr->DimmingValue - Dimme
      +                          r->Correction)) {
 15917  0060  0021               	movlb	1	; select bank1
 15918  0061  0839               	movf	_Dimmer^(0+128),w
 15919  0062  3E02               	addlw	2
 15920  0063  0086               	movwf	6
 15921  0064  0187               	clrf	7
 15922  0065  0801               	movf	1,w
 15923  0066  00F2               	movwf	??_setDimmerLights_IntrControl
 15924  0067  01F3               	clrf	??_setDimmerLights_IntrControl+1
 15925  0068  09F2               	comf	??_setDimmerLights_IntrControl,f
 15926  0069  09F3               	comf	??_setDimmerLights_IntrControl+1,f
 15927  006A  0AF2               	incf	??_setDimmerLights_IntrControl,f
 15928  006B  1903               	skipnz
 15929  006C  0AF3               	incf	??_setDimmerLights_IntrControl+1,f
 15930  006D  087A               	movf	_DimmerLightsIntr,w
 15931  006E  3E04               	addlw	4
 15932  006F  0086               	movwf	6
 15933  0070  3001               	movlw	1	; select bank2/3
 15934  0071  0087               	movwf	7
 15935  0072  0801               	movf	1,w
 15936  0073  0772               	addwf	??_setDimmerLights_IntrControl,w
 15937  0074  00F4               	movwf	??_setDimmerLights_IntrControl+2
 15938  0075  0873               	movf	??_setDimmerLights_IntrControl+1,w
 15939  0076  1803               	skipnc
 15940  0077  0A73               	incf	??_setDimmerLights_IntrControl+1,w
 15941  0078  00F5               	movwf	??_setDimmerLights_IntrControl+3
 15942  0079  087A               	movf	_DimmerLightsIntr,w
 15943  007A  3E03               	addlw	3
 15944  007B  0086               	movwf	6
 15945  007C  3001               	movlw	1	; select bank2/3
 15946  007D  0087               	movwf	7
 15947  007E  0875               	movf	??_setDimmerLights_IntrControl+3,w
 15948  007F  3A80               	xorlw	128
 15949  0080  3C80               	sublw	128
 15950  0081  1D03               	skipz
 15951  0082  2885               	goto	u518_25
 15952  0083  0874               	movf	??_setDimmerLights_IntrControl+2,w
 15953  0084  0201               	subwf	1,w
 15954  0085                     u518_25:	
 15955  0085  1C03               	skipc
 15956  0086  0008               	return
 15957                           
 15958                           ;Dimmer_B1.c: 32: DimmerLightsIntr->Count = 0;
 15959  0087  087A               	movf	_DimmerLightsIntr,w
 15960  0088  3E03               	addlw	3
 15961  0089  0086               	movwf	6
 15962  008A  3001               	movlw	1	; select bank2/3
 15963  008B  0087               	movwf	7
 15964  008C  0181               	clrf	1
 15965                           
 15966                           ;Dimmer_B1.c: 33: DimmerLightsIntr->GO = 0;
 15967  008D  087A               	movf	_DimmerLightsIntr,w
 15968  008E  0086               	movwf	6
 15969  008F  3001               	movlw	1	; select bank2/3
 15970  0090  0087               	movwf	7
 15971  0091  1001               	bcf	1,0
 15972                           
 15973                           ;Dimmer_B1.c: 34: DimmerLightsIntr->Flag = 1;
 15974  0092  087A               	movf	_DimmerLightsIntr,w
 15975  0093  3E08               	addlw	8
 15976  0094  0086               	movwf	6
 15977  0095  3001               	movlw	1	; select bank2/3
 15978  0096  0087               	movwf	7
 15979  0097  1401               	bsf	1,0
 15980                           
 15981                           ;Dimmer_B1.c: 35: DimmerLightsIntr->TriacTemp = 1;
 15982  0098  087A               	movf	_DimmerLightsIntr,w
 15983  0099  3E09               	addlw	9
 15984  009A  0086               	movwf	6
 15985  009B  3001               	movlw	1	; select bank2/3
 15986  009C  0087               	movwf	7
 15987  009D  1681               	bsf	1,5
 15988                           
 15989                           ;Dimmer_B1.c: 36: if (DimmerLightsIntr->StatusFlag == 1) {
 15990  009E  087A               	movf	_DimmerLightsIntr,w
 15991  009F  0086               	movwf	6
 15992  00A0  3001               	movlw	1	; select bank2/3
 15993  00A1  0087               	movwf	7
 15994  00A2  1F01               	btfss	1,6
 15995  00A3  0008               	return
 15996                           
 15997                           ;Dimmer_B1.c: 39: if (lights == 1) {
 15998  00A4  0876               	movf	setDimmerLights_IntrControl@lights,w
 15999  00A5  3A01               	xorlw	1
 16000  00A6  1D03               	skipz
 16001  00A7  28AA               	goto	i1l6308
 16002                           
 16003                           ;Dimmer_B1.c: 40: RA7 = 1;
 16004  00A8  0020               	movlb	0	; select bank0
 16005  00A9  178C               	bsf	12,7	;volatile
 16006  00AA                     i1l6308:	
 16007                           ;Dimmer_B1.c: 41: ;;
 16008                           
 16009                           
 16010                           ;Dimmer_B1.c: 42: }
 16011                           ;Dimmer_B1.c: 45: if (lights == 2) {
 16012  00AA  0876               	movf	setDimmerLights_IntrControl@lights,w
 16013  00AB  3A02               	xorlw	2
 16014  00AC  1D03               	skipz
 16015  00AD  0008               	return
 16016                           
 16017                           ;Dimmer_B1.c: 46: RB4 = 1;
 16018  00AE  0020               	movlb	0	; select bank0
 16019  00AF  160D               	bsf	13,4	;volatile
 16020                           
 16021                           ;Dimmer_B1.c: 47: }
 16022                           ;Dimmer_B1.c: 54: }
 16023                           ;Dimmer_B1.c: 55: }
 16024                           ;Dimmer_B1.c: 56: } else {
 16025  00B0  0008               	return
 16026  00B1                     i1l6312:	
 16027                           
 16028                           ;Dimmer_B1.c: 57: if (DimmerLightsIntr->Flag) {
 16029  00B1  087A               	movf	_DimmerLightsIntr,w
 16030  00B2  3E08               	addlw	8
 16031  00B3  0086               	movwf	6
 16032  00B4  3001               	movlw	1	; select bank2/3
 16033  00B5  0087               	movwf	7
 16034  00B6  1C01               	btfss	1,0
 16035  00B7  29BA               	goto	i1l6374
 16036                           
 16037                           ;Dimmer_B1.c: 58: DimmerLightsIntr->Flag = 0;
 16038  00B8  087A               	movf	_DimmerLightsIntr,w
 16039  00B9  3E08               	addlw	8
 16040  00BA  0086               	movwf	6
 16041  00BB  3001               	movlw	1	; select bank2/3
 16042  00BC  0087               	movwf	7
 16043  00BD  1001               	bcf	1,0
 16044                           
 16045                           ;Dimmer_B1.c: 59: if (DimmerLightsIntr->Signal) {
 16046  00BE  087A               	movf	_DimmerLightsIntr,w
 16047  00BF  0086               	movwf	6
 16048  00C0  3001               	movlw	1	; select bank2/3
 16049  00C1  0087               	movwf	7
 16050  00C2  1C81               	btfss	1,1
 16051  00C3  29BA               	goto	i1l6374
 16052                           
 16053                           ;Dimmer_B1.c: 60: DimmerLightsIntr->DimmingTime++;
 16054  00C4  3001               	movlw	1
 16055  00C5  00F2               	movwf	??_setDimmerLights_IntrControl
 16056  00C6  0A7A               	incf	_DimmerLightsIntr,w
 16057  00C7  0086               	movwf	6
 16058  00C8  3001               	movlw	1	; select bank2/3
 16059  00C9  0087               	movwf	7
 16060  00CA  0872               	movf	??_setDimmerLights_IntrControl,w
 16061  00CB  0781               	addwf	1,f
 16062                           
 16063                           ;Dimmer_B1.c: 61: if (DimmerLightsIntr->DimmingTime >= DimmerLightsIntr->DimmingTimeValu
      +                          e) {
 16064  00CC  0A7A               	incf	_DimmerLightsIntr,w
 16065  00CD  0086               	movwf	6
 16066  00CE  3001               	movlw	1	; select bank2/3
 16067  00CF  0087               	movwf	7
 16068  00D0  087A               	movf	_DimmerLightsIntr,w
 16069  00D1  3E02               	addlw	2
 16070  00D2  0084               	movwf	4
 16071  00D3  3001               	movlw	1	; select bank2/3
 16072  00D4  0085               	movwf	5
 16073  00D5  0800               	movf	0,w
 16074  00D6  0201               	subwf	1,w
 16075  00D7  1C03               	skipc
 16076  00D8  29BA               	goto	i1l6374
 16077                           
 16078                           ;Dimmer_B1.c: 62: DimmerLightsIntr->DimmingTime = 0;
 16079  00D9  0A7A               	incf	_DimmerLightsIntr,w
 16080  00DA  0086               	movwf	6
 16081  00DB  3001               	movlw	1	; select bank2/3
 16082  00DC  0087               	movwf	7
 16083  00DD  0181               	clrf	1
 16084                           
 16085                           ;Dimmer_B1.c: 63: if (DimmerLightsIntr->AdjFlag) {
 16086  00DE  087A               	movf	_DimmerLightsIntr,w
 16087  00DF  0086               	movwf	6
 16088  00E0  3001               	movlw	1	; select bank2/3
 16089  00E1  0087               	movwf	7
 16090  00E2  1D81               	btfss	1,3
 16091  00E3  291A               	goto	i1l6338
 16092                           
 16093                           ;Dimmer_B1.c: 64: if (DimmerLightsIntr->AdjStatus == 0) {
 16094  00E4  087A               	movf	_DimmerLightsIntr,w
 16095  00E5  0086               	movwf	6
 16096  00E6  3001               	movlw	1	; select bank2/3
 16097  00E7  0087               	movwf	7
 16098  00E8  1A01               	btfsc	1,4
 16099  00E9  2901               	goto	i1l6332
 16100                           
 16101                           ;Dimmer_B1.c: 65: if (DimmerLightsIntr->DimmingValue > ((char)((100-55)*1.5))) {
 16102  00EA  087A               	movf	_DimmerLightsIntr,w
 16103  00EB  3E04               	addlw	4
 16104  00EC  0086               	movwf	6
 16105  00ED  3001               	movlw	1	; select bank2/3
 16106  00EE  0087               	movwf	7
 16107  00EF  3044               	movlw	68
 16108  00F0  0201               	subwf	1,w
 16109  00F1  1C03               	skipc
 16110  00F2  28FB               	goto	i1l6330
 16111                           
 16112                           ;Dimmer_B1.c: 66: DimmerLightsIntr->DimmingValue--;
 16113  00F3  087A               	movf	_DimmerLightsIntr,w
 16114  00F4  3E04               	addlw	4
 16115  00F5  0086               	movwf	6
 16116  00F6  3001               	movlw	1	; select bank2/3
 16117  00F7  0087               	movwf	7
 16118  00F8  3001               	movlw	1
 16119  00F9  0281               	subwf	1,f
 16120                           
 16121                           ;Dimmer_B1.c: 67: } else {
 16122  00FA  29BA               	goto	i1l6374
 16123  00FB                     i1l6330:	
 16124                           
 16125                           ;Dimmer_B1.c: 68: DimmerLightsIntr->AdjStatus = 1;
 16126  00FB  087A               	movf	_DimmerLightsIntr,w
 16127  00FC  0086               	movwf	6
 16128  00FD  3001               	movlw	1	; select bank2/3
 16129  00FE  0087               	movwf	7
 16130  00FF  1601               	bsf	1,4
 16131                           
 16132                           ;Dimmer_B1.c: 69: }
 16133                           ;Dimmer_B1.c: 70: } else {
 16134  0100  29BA               	goto	i1l6374
 16135  0101                     i1l6332:	
 16136                           
 16137                           ;Dimmer_B1.c: 71: if (DimmerLightsIntr->DimmingValue < ((char)((100-20)*1.5))) {
 16138  0101  087A               	movf	_DimmerLightsIntr,w
 16139  0102  3E04               	addlw	4
 16140  0103  0086               	movwf	6
 16141  0104  3001               	movlw	1	; select bank2/3
 16142  0105  0087               	movwf	7
 16143  0106  3078               	movlw	120
 16144  0107  0201               	subwf	1,w
 16145  0108  1803               	skipnc
 16146  0109  2914               	goto	i1l6336
 16147                           
 16148                           ;Dimmer_B1.c: 72: DimmerLightsIntr->DimmingValue++;
 16149  010A  3001               	movlw	1
 16150  010B  00F2               	movwf	??_setDimmerLights_IntrControl
 16151  010C  087A               	movf	_DimmerLightsIntr,w
 16152  010D  3E04               	addlw	4
 16153  010E  0086               	movwf	6
 16154  010F  3001               	movlw	1	; select bank2/3
 16155  0110  0087               	movwf	7
 16156  0111  0872               	movf	??_setDimmerLights_IntrControl,w
 16157  0112  0781               	addwf	1,f
 16158                           
 16159                           ;Dimmer_B1.c: 73: } else {
 16160  0113  29BA               	goto	i1l6374
 16161  0114                     i1l6336:	
 16162                           
 16163                           ;Dimmer_B1.c: 74: DimmerLightsIntr->AdjStatus = 0;
 16164  0114  087A               	movf	_DimmerLightsIntr,w
 16165  0115  0086               	movwf	6
 16166  0116  3001               	movlw	1	; select bank2/3
 16167  0117  0087               	movwf	7
 16168  0118  1201               	bcf	1,4
 16169                           
 16170                           ;Dimmer_B1.c: 75: }
 16171                           ;Dimmer_B1.c: 76: }
 16172                           ;Dimmer_B1.c: 77: } else if (DimmerLightsIntr->AdjRF) {
 16173  0119  29BA               	goto	i1l6374
 16174  011A                     i1l6338:	
 16175  011A  087A               	movf	_DimmerLightsIntr,w
 16176  011B  0086               	movwf	6
 16177  011C  3001               	movlw	1	; select bank2/3
 16178  011D  0087               	movwf	7
 16179  011E  1D01               	btfss	1,2
 16180  011F  2961               	goto	i1l6352
 16181                           
 16182                           ;Dimmer_B1.c: 78: if (DimmerLightsIntr->DimmingValue > DimmerLightsIntr->MaxmumValue) {
 16183  0120  087A               	movf	_DimmerLightsIntr,w
 16184  0121  3E05               	addlw	5
 16185  0122  0086               	movwf	6
 16186  0123  3001               	movlw	1	; select bank2/3
 16187  0124  0087               	movwf	7
 16188  0125  087A               	movf	_DimmerLightsIntr,w
 16189  0126  3E04               	addlw	4
 16190  0127  0084               	movwf	4
 16191  0128  3001               	movlw	1	; select bank2/3
 16192  0129  0085               	movwf	5
 16193  012A  0800               	movf	0,w
 16194  012B  0201               	subwf	1,w
 16195  012C  1803               	skipnc
 16196  012D  2936               	goto	i1l6344
 16197                           
 16198                           ;Dimmer_B1.c: 79: DimmerLightsIntr->DimmingValue--;
 16199  012E  087A               	movf	_DimmerLightsIntr,w
 16200  012F  3E04               	addlw	4
 16201  0130  0086               	movwf	6
 16202  0131  3001               	movlw	1	; select bank2/3
 16203  0132  0087               	movwf	7
 16204  0133  3001               	movlw	1
 16205  0134  0281               	subwf	1,f
 16206                           
 16207                           ;Dimmer_B1.c: 80: } else if (DimmerLightsIntr->DimmingValue < DimmerLightsIntr->MaxmumVa
      +                          lue) {
 16208  0135  294D               	goto	i1l6348
 16209  0136                     i1l6344:	
 16210  0136  087A               	movf	_DimmerLightsIntr,w
 16211  0137  3E04               	addlw	4
 16212  0138  0086               	movwf	6
 16213  0139  3001               	movlw	1	; select bank2/3
 16214  013A  0087               	movwf	7
 16215  013B  087A               	movf	_DimmerLightsIntr,w
 16216  013C  3E05               	addlw	5
 16217  013D  0084               	movwf	4
 16218  013E  3001               	movlw	1	; select bank2/3
 16219  013F  0085               	movwf	5
 16220  0140  0800               	movf	0,w
 16221  0141  0201               	subwf	1,w
 16222  0142  1803               	skipnc
 16223  0143  294D               	goto	i1l6348
 16224                           
 16225                           ;Dimmer_B1.c: 81: DimmerLightsIntr->DimmingValue++;
 16226  0144  3001               	movlw	1
 16227  0145  00F2               	movwf	??_setDimmerLights_IntrControl
 16228  0146  087A               	movf	_DimmerLightsIntr,w
 16229  0147  3E04               	addlw	4
 16230  0148  0086               	movwf	6
 16231  0149  3001               	movlw	1	; select bank2/3
 16232  014A  0087               	movwf	7
 16233  014B  0872               	movf	??_setDimmerLights_IntrControl,w
 16234  014C  0781               	addwf	1,f
 16235  014D                     i1l6348:	
 16236                           
 16237                           ;Dimmer_B1.c: 82: }
 16238                           ;Dimmer_B1.c: 83: if (DimmerLightsIntr->DimmingValue == DimmerLightsIntr->MaxmumValue) {
 16239  014D  087A               	movf	_DimmerLightsIntr,w
 16240  014E  3E05               	addlw	5
 16241  014F  0086               	movwf	6
 16242  0150  3001               	movlw	1	; select bank2/3
 16243  0151  0087               	movwf	7
 16244  0152  087A               	movf	_DimmerLightsIntr,w
 16245  0153  3E04               	addlw	4
 16246  0154  0084               	movwf	4
 16247  0155  3001               	movlw	1	; select bank2/3
 16248  0156  0085               	movwf	5
 16249  0157  0800               	movf	0,w
 16250  0158  0601               	xorwf	1,w
 16251  0159  1D03               	skipz
 16252  015A  29BA               	goto	i1l6374
 16253                           
 16254                           ;Dimmer_B1.c: 84: DimmerLightsIntr->AdjRF = 0;
 16255  015B  087A               	movf	_DimmerLightsIntr,w
 16256  015C  0086               	movwf	6
 16257  015D  3001               	movlw	1	; select bank2/3
 16258  015E  0087               	movwf	7
 16259  015F  1101               	bcf	1,2
 16260  0160  297C               	goto	i1l6358
 16261  0161                     i1l6352:	
 16262                           ;Dimmer_B1.c: 86: }
 16263                           ;Dimmer_B1.c: 87: } else {
 16264                           
 16265                           ;Dimmer_B1.c: 85: DimmerLightsIntr->Signal = 0;
 16266                           
 16267                           
 16268                           ;Dimmer_B1.c: 88: if (DimmerLightsIntr->Status) {
 16269  0161  087A               	movf	_DimmerLightsIntr,w
 16270  0162  0086               	movwf	6
 16271  0163  3001               	movlw	1	; select bank2/3
 16272  0164  0087               	movwf	7
 16273  0165  1E81               	btfss	1,5
 16274  0166  2982               	goto	i1l6360
 16275                           
 16276                           ;Dimmer_B1.c: 89: DimmerLightsIntr->DimmingValue--;
 16277  0167  087A               	movf	_DimmerLightsIntr,w
 16278  0168  3E04               	addlw	4
 16279  0169  0086               	movwf	6
 16280  016A  3001               	movlw	1	; select bank2/3
 16281  016B  0087               	movwf	7
 16282  016C  3001               	movlw	1
 16283  016D  0281               	subwf	1,f
 16284                           
 16285                           ;Dimmer_B1.c: 90: if (DimmerLightsIntr->DimmingValue <= DimmerLightsIntr->MaxmumValue) {
 16286  016E  087A               	movf	_DimmerLightsIntr,w
 16287  016F  3E05               	addlw	5
 16288  0170  0086               	movwf	6
 16289  0171  3001               	movlw	1	; select bank2/3
 16290  0172  0087               	movwf	7
 16291  0173  087A               	movf	_DimmerLightsIntr,w
 16292  0174  3E04               	addlw	4
 16293  0175  0084               	movwf	4
 16294  0176  3001               	movlw	1	; select bank2/3
 16295  0177  0085               	movwf	5
 16296  0178  0800               	movf	0,w
 16297  0179  0201               	subwf	1,w
 16298  017A  1C03               	skipc
 16299  017B  29BA               	goto	i1l6374
 16300  017C                     i1l6358:	
 16301                           
 16302                           ;Dimmer_B1.c: 92: DimmerLightsIntr->Signal = 0;
 16303  017C  087A               	movf	_DimmerLightsIntr,w
 16304  017D  0086               	movwf	6
 16305  017E  3001               	movlw	1	; select bank2/3
 16306  017F  0087               	movwf	7
 16307  0180  1081               	bcf	1,1
 16308                           
 16309                           ;Dimmer_B1.c: 93: }
 16310                           ;Dimmer_B1.c: 94: } else {
 16311  0181  29BA               	goto	i1l6374
 16312  0182                     i1l6360:	
 16313                           
 16314                           ;Dimmer_B1.c: 95: DimmerLightsIntr->DimmingValue++;
 16315  0182  3001               	movlw	1
 16316  0183  00F2               	movwf	??_setDimmerLights_IntrControl
 16317  0184  087A               	movf	_DimmerLightsIntr,w
 16318  0185  3E04               	addlw	4
 16319  0186  0086               	movwf	6
 16320  0187  3001               	movlw	1	; select bank2/3
 16321  0188  0087               	movwf	7
 16322  0189  0872               	movf	??_setDimmerLights_IntrControl,w
 16323  018A  0781               	addwf	1,f
 16324                           
 16325                           ;Dimmer_B1.c: 96: if (DimmerLightsIntr->DimmingValue >= DimmerLightsIntr->MinimumValue) 
      +                          {
 16326  018B  087A               	movf	_DimmerLightsIntr,w
 16327  018C  3E04               	addlw	4
 16328  018D  0086               	movwf	6
 16329  018E  3001               	movlw	1	; select bank2/3
 16330  018F  0087               	movwf	7
 16331  0190  087A               	movf	_DimmerLightsIntr,w
 16332  0191  3E06               	addlw	6
 16333  0192  0084               	movwf	4
 16334  0193  3001               	movlw	1	; select bank2/3
 16335  0194  0085               	movwf	5
 16336  0195  0800               	movf	0,w
 16337  0196  0201               	subwf	1,w
 16338  0197  1C03               	skipc
 16339  0198  29BA               	goto	i1l6374
 16340                           
 16341                           ;Dimmer_B1.c: 97: DimmerLightsIntr->Signal = 0;
 16342  0199  087A               	movf	_DimmerLightsIntr,w
 16343  019A  0086               	movwf	6
 16344  019B  3001               	movlw	1	; select bank2/3
 16345  019C  0087               	movwf	7
 16346  019D  1081               	bcf	1,1
 16347                           
 16348                           ;Dimmer_B1.c: 98: DimmerLightsIntr->StatusFlag = 0;
 16349  019E  087A               	movf	_DimmerLightsIntr,w
 16350  019F  0086               	movwf	6
 16351  01A0  3001               	movlw	1	; select bank2/3
 16352  01A1  0087               	movwf	7
 16353  01A2  1301               	bcf	1,6
 16354                           
 16355                           ;Dimmer_B1.c: 99: DimmerLightsIntr->Clear = 1;
 16356  01A3  087A               	movf	_DimmerLightsIntr,w
 16357  01A4  3E09               	addlw	9
 16358  01A5  0086               	movwf	6
 16359  01A6  3001               	movlw	1	; select bank2/3
 16360  01A7  0087               	movwf	7
 16361  01A8  1501               	bsf	1,2
 16362                           
 16363                           ;Dimmer_B1.c: 100: Dimmer->Detect = 1;
 16364  01A9  0021               	movlb	1	; select bank1
 16365  01AA  0839               	movf	_Dimmer^(0+128),w
 16366  01AB  0086               	movwf	6
 16367  01AC  0187               	clrf	7
 16368  01AD  1401               	bsf	1,0
 16369                           
 16370                           ;Dimmer_B1.c: 102: if (lights == 1) {
 16371  01AE  0876               	movf	setDimmerLights_IntrControl@lights,w
 16372  01AF  3A01               	xorlw	1
 16373  01B0  1D03               	skipz
 16374  01B1  29B4               	goto	i1l6370
 16375                           
 16376                           ;Dimmer_B1.c: 103: RA3 = 0;
 16377  01B2  0020               	movlb	0	; select bank0
 16378  01B3  118C               	bcf	12,3	;volatile
 16379  01B4                     i1l6370:	
 16380                           
 16381                           ;Dimmer_B1.c: 105: }
 16382                           ;Dimmer_B1.c: 108: if (lights == 2) {
 16383  01B4  0876               	movf	setDimmerLights_IntrControl@lights,w
 16384  01B5  3A02               	xorlw	2
 16385  01B6  1D03               	skipz
 16386  01B7  29BA               	goto	i1l6374
 16387                           
 16388                           ;Dimmer_B1.c: 109: RC7 = 0;
 16389  01B8  0020               	movlb	0	; select bank0
 16390  01B9  138E               	bcf	14,7	;volatile
 16391  01BA                     i1l6374:	
 16392                           ;Dimmer_B1.c: 110: }
 16393                           ;Dimmer_B1.c: 118: ;;
 16394                           
 16395                           
 16396                           ;Dimmer_B1.c: 119: }
 16397                           ;Dimmer_B1.c: 120: }
 16398                           ;Dimmer_B1.c: 121: }
 16399                           ;Dimmer_B1.c: 122: }
 16400                           ;Dimmer_B1.c: 123: }
 16401                           ;Dimmer_B1.c: 124: }
 16402                           ;Dimmer_B1.c: 125: if (DimmerLights->TriacTemp == 1) {
 16403  01BA  0879               	movf	_DimmerLights,w
 16404  01BB  3E09               	addlw	9
 16405  01BC  0086               	movwf	6
 16406  01BD  3001               	movlw	1	; select bank2/3
 16407  01BE  0087               	movwf	7
 16408  01BF  1E81               	btfss	1,5
 16409  01C0  0008               	return
 16410                           
 16411                           ;Dimmer_B1.c: 132: if (lights == 1) {
 16412  01C1  0876               	movf	setDimmerLights_IntrControl@lights,w
 16413  01C2  3A01               	xorlw	1
 16414  01C3  1D03               	skipz
 16415  01C4  29C7               	goto	i1l6380
 16416                           
 16417                           ;Dimmer_B1.c: 133: RA7 = 0;
 16418  01C5  0020               	movlb	0	; select bank0
 16419  01C6  138C               	bcf	12,7	;volatile
 16420  01C7                     i1l6380:	
 16421                           ;Dimmer_B1.c: 134: ;;
 16422                           
 16423                           
 16424                           ;Dimmer_B1.c: 135: }
 16425                           ;Dimmer_B1.c: 138: if (lights == 2) {
 16426  01C7  0876               	movf	setDimmerLights_IntrControl@lights,w
 16427  01C8  3A02               	xorlw	2
 16428  01C9  1D03               	skipz
 16429  01CA  0008               	return
 16430                           
 16431                           ;Dimmer_B1.c: 139: RB4 = 0;
 16432  01CB  0020               	movlb	0	; select bank0
 16433  01CC  120D               	bcf	13,4	;volatile
 16434  01CD  0008               	return
 16435  01CE                     __end_of_setDimmerLights_IntrControl:	
 16436                           
 16437                           	psect	text110
 16438  1F8F                     __ptext110:	
 16439 ;; *************** function _Buz_Counter *****************
 16440 ;; Defined at:
 16441 ;;		line 23 in file "../src/Buzzer_B1.c"
 16442 ;; Parameters:    Size  Location     Type
 16443 ;;		None
 16444 ;; Auto vars:     Size  Location     Type
 16445 ;;		None
 16446 ;; Return value:  Size  Location     Type
 16447 ;;		None               void
 16448 ;; Registers used:
 16449 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 16450 ;; Tracked objects:
 16451 ;;		On entry : 0/0
 16452 ;;		On exit  : 0/0
 16453 ;;		Unchanged: 0/0
 16454 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16455 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16456 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16457 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16458 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16459 ;;Total ram usage:        0 bytes
 16460 ;; Hardware stack levels used:    1
 16461 ;; This function calls:
 16462 ;;		Nothing
 16463 ;; This function is called by:
 16464 ;;		_TMR0_ISR
 16465 ;; This function uses a non-reentrant model
 16466 ;;
 16467                           
 16468                           
 16469                           ;psect for function _Buz_Counter
 16470  1F8F                     _Buz_Counter:	
 16471                           
 16472                           ;Buzzer_B1.c: 24: if (Buz->GO == 1) {
 16473                           
 16474                           ;incstack = 0
 16475                           ; Regs used in _Buz_Counter: [wreg+fsr1l+fsr1h+status,2+status,0]
 16476  1F8F  0878               	movf	_Buz,w
 16477  1F90  0086               	movwf	6
 16478  1F91  3001               	movlw	1	; select bank2/3
 16479  1F92  0087               	movwf	7
 16480  1F93  1C81               	btfss	1,1
 16481  1F94  0008               	return
 16482                           
 16483                           ;Buzzer_B1.c: 25: Buz->Counter++;
 16484  1F95  0A78               	incf	_Buz,w
 16485  1F96  0086               	movwf	6
 16486  1F97  3001               	movlw	1	; select bank2/3
 16487  1F98  0087               	movwf	7
 16488  1F99  3001               	movlw	1
 16489  1F9A  0781               	addwf	1,f
 16490  1F9B  3141               	addfsr 1,1
 16491  1F9C  1803               	skipnc
 16492  1F9D  0A81               	incf	1,f
 16493  1F9E  0008               	return
 16494  1F9F                     __end_of_Buz_Counter:	
 16495                           
 16496                           	psect	text111
 16497  107E                     __ptext111:	
 16498 ;; *************** function _IOC_ISR *****************
 16499 ;; Defined at:
 16500 ;;		line 296 in file "../src/MCU_B1.c"
 16501 ;; Parameters:    Size  Location     Type
 16502 ;;		None
 16503 ;; Auto vars:     Size  Location     Type
 16504 ;;		None
 16505 ;; Return value:  Size  Location     Type
 16506 ;;		None               void
 16507 ;; Registers used:
 16508 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16509 ;; Tracked objects:
 16510 ;;		On entry : 0/0
 16511 ;;		On exit  : 0/0
 16512 ;;		Unchanged: 0/0
 16513 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16514 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16515 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16516 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16517 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16518 ;;Total ram usage:        0 bytes
 16519 ;; Hardware stack levels used:    1
 16520 ;; Hardware stack levels required when called:    3
 16521 ;; This function calls:
 16522 ;;		_setDimmerReClock
 16523 ;; This function is called by:
 16524 ;;		_ISR
 16525 ;; This function uses a non-reentrant model
 16526 ;;
 16527                           
 16528                           
 16529                           ;psect for function _IOC_ISR
 16530  107E                     _IOC_ISR:	
 16531                           
 16532                           ;MCU_B1.c: 297: if (IOCIE == 1 && IOCBF2 == 1) {
 16533                           
 16534                           ;incstack = 0
 16535                           ; Regs used in _IOC_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16536  107E  1D8B               	btfss	11,3	;volatile
 16537  107F  0008               	return
 16538  1080  0027               	movlb	7	; select bank7
 16539  1081  1D16               	btfss	22,2	;volatile
 16540  1082  0008               	return
 16541                           
 16542                           ;MCU_B1.c: 298: IOCBF2 = 0;
 16543  1083  1116               	bcf	22,2	;volatile
 16544                           
 16545                           ;MCU_B1.c: 299: IOCIF = 0;
 16546  1084  100B               	bcf	11,0	;volatile
 16547                           
 16548                           ;MCU_B1.c: 300: if (myMain->PowerON == 1) {
 16549  1085  0021               	movlb	1	; select bank1
 16550  1086  0869               	movf	_myMain^(0+128),w
 16551  1087  0086               	movwf	6
 16552  1088  3001               	movlw	1	; select bank2/3
 16553  1089  0087               	movwf	7
 16554  108A  1C01               	btfss	1,0
 16555  108B  0008               	return
 16556                           
 16557                           ;MCU_B1.c: 302: setDimmerReClock();
 16558  108C  319E  26B9         	fcall	_setDimmerReClock
 16559  108E  0008               	return
 16560  108F                     __end_of_IOC_ISR:	
 16561                           
 16562                           	psect	text112
 16563  1EB9                     __ptext112:	
 16564 ;; *************** function _setDimmerReClock *****************
 16565 ;; Defined at:
 16566 ;;		line 175 in file "../src/MCU_B1.c"
 16567 ;; Parameters:    Size  Location     Type
 16568 ;;		None
 16569 ;; Auto vars:     Size  Location     Type
 16570 ;;		None
 16571 ;; Return value:  Size  Location     Type
 16572 ;;		None               void
 16573 ;; Registers used:
 16574 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16575 ;; Tracked objects:
 16576 ;;		On entry : 0/0
 16577 ;;		On exit  : 0/0
 16578 ;;		Unchanged: 0/0
 16579 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16580 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16581 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16582 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16583 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16584 ;;Total ram usage:        0 bytes
 16585 ;; Hardware stack levels used:    1
 16586 ;; Hardware stack levels required when called:    2
 16587 ;; This function calls:
 16588 ;;		_setDimmerLights_IntrGO
 16589 ;; This function is called by:
 16590 ;;		_IOC_ISR
 16591 ;; This function uses a non-reentrant model
 16592 ;;
 16593                           
 16594                           
 16595                           ;psect for function _setDimmerReClock
 16596  1EB9                     _setDimmerReClock:	
 16597                           
 16598                           ;MCU_B1.c: 176: TMR0 = 255;
 16599                           
 16600                           ;incstack = 0
 16601                           ; Regs used in _setDimmerReClock: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16602  1EB9  30FF               	movlw	255
 16603  1EBA  0020               	movlb	0	; select bank0
 16604  1EBB  0095               	movwf	21	;volatile
 16605                           
 16606                           ;MCU_B1.c: 181: setDimmerLights_IntrGO(1);
 16607  1EBC  3001               	movlw	1
 16608  1EBD  3190  206D  319E   	fcall	_setDimmerLights_IntrGO
 16609                           
 16610                           ;MCU_B1.c: 185: setDimmerLights_IntrGO(2);
 16611  1EC0  3002               	movlw	2
 16612  1EC1  3190  206D         	fcall	_setDimmerLights_IntrGO
 16613  1EC3  0008               	return
 16614  1EC4                     __end_of_setDimmerReClock:	
 16615                           
 16616                           	psect	text113
 16617  106D                     __ptext113:	
 16618 ;; *************** function _setDimmerLights_IntrGO *****************
 16619 ;; Defined at:
 16620 ;;		line 251 in file "../src/Dimmer_B1.c"
 16621 ;; Parameters:    Size  Location     Type
 16622 ;;  lights          1    wreg     unsigned char 
 16623 ;; Auto vars:     Size  Location     Type
 16624 ;;  lights          1    2[COMMON] unsigned char 
 16625 ;; Return value:  Size  Location     Type
 16626 ;;		None               void
 16627 ;; Registers used:
 16628 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16629 ;; Tracked objects:
 16630 ;;		On entry : 0/0
 16631 ;;		On exit  : 0/0
 16632 ;;		Unchanged: 0/0
 16633 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16634 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16635 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16636 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16637 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16638 ;;Total ram usage:        1 bytes
 16639 ;; Hardware stack levels used:    1
 16640 ;; Hardware stack levels required when called:    1
 16641 ;; This function calls:
 16642 ;;		_DimmerIntrPointSelect
 16643 ;; This function is called by:
 16644 ;;		_setDimmerReClock
 16645 ;; This function uses a non-reentrant model
 16646 ;;
 16647                           
 16648                           
 16649                           ;psect for function _setDimmerLights_IntrGO
 16650  106D                     _setDimmerLights_IntrGO:	
 16651                           
 16652                           ;incstack = 0
 16653                           ; Regs used in _setDimmerLights_IntrGO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
 16654                           ;setDimmerLights_IntrGO@lights stored from wreg
 16655  106D  00F2               	movwf	setDimmerLights_IntrGO@lights
 16656                           
 16657                           ;Dimmer_B1.c: 253: DimmerIntrPointSelect(lights);
 16658  106E  0872               	movf	setDimmerLights_IntrGO@lights,w
 16659  106F  3190  20A0  3190   	fcall	_DimmerIntrPointSelect
 16660                           
 16661                           ;Dimmer_B1.c: 255: if (DimmerLightsIntr->GO == 0) {
 16662  1072  087A               	movf	_DimmerLightsIntr,w
 16663  1073  0086               	movwf	6
 16664  1074  3001               	movlw	1	; select bank2/3
 16665  1075  0087               	movwf	7
 16666  1076  1801               	btfsc	1,0
 16667  1077  0008               	return
 16668                           
 16669                           ;Dimmer_B1.c: 256: DimmerLightsIntr->GO = 1;
 16670  1078  087A               	movf	_DimmerLightsIntr,w
 16671  1079  0086               	movwf	6
 16672  107A  3001               	movlw	1	; select bank2/3
 16673  107B  0087               	movwf	7
 16674  107C  1401               	bsf	1,0
 16675  107D  0008               	return
 16676  107E                     __end_of_setDimmerLights_IntrGO:	
 16677                           
 16678                           	psect	text114
 16679  10A0                     __ptext114:	
 16680 ;; *************** function _DimmerIntrPointSelect *****************
 16681 ;; Defined at:
 16682 ;;		line 7 in file "../src/Dimmer_B1.c"
 16683 ;; Parameters:    Size  Location     Type
 16684 ;;  lights          1    wreg     unsigned char 
 16685 ;; Auto vars:     Size  Location     Type
 16686 ;;  lights          1    1[COMMON] unsigned char 
 16687 ;; Return value:  Size  Location     Type
 16688 ;;		None               void
 16689 ;; Registers used:
 16690 ;;		wreg
 16691 ;; Tracked objects:
 16692 ;;		On entry : 0/0
 16693 ;;		On exit  : 0/0
 16694 ;;		Unchanged: 0/0
 16695 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16696 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16697 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16698 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16699 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16700 ;;Total ram usage:        2 bytes
 16701 ;; Hardware stack levels used:    1
 16702 ;; This function calls:
 16703 ;;		Nothing
 16704 ;; This function is called by:
 16705 ;;		_setDimmerLights_IntrControl
 16706 ;;		_setDimmerLights_IntrGO
 16707 ;; This function uses a non-reentrant model
 16708 ;;
 16709                           
 16710                           
 16711                           ;psect for function _DimmerIntrPointSelect
 16712  10A0                     _DimmerIntrPointSelect:	
 16713                           
 16714                           ;incstack = 0
 16715                           ; Regs used in _DimmerIntrPointSelect: [wreg]
 16716                           ;DimmerIntrPointSelect@lights stored from wreg
 16717  10A0  00F1               	movwf	DimmerIntrPointSelect@lights
 16718                           
 16719                           ;Dimmer_B1.c: 9: if (lights == 1) {
 16720  10A1  0871               	movf	DimmerIntrPointSelect@lights,w
 16721  10A2  3A01               	xorlw	1
 16722  10A3  1D03               	skipz
 16723  10A4  28A9               	goto	i1l769
 16724                           
 16725                           ;Dimmer_B1.c: 10: DimmerLightsIntr = &DimmerLights1;
 16726  10A5  3020               	movlw	_DimmerLights1& (0+255)
 16727  10A6  00F0               	movwf	??_DimmerIntrPointSelect
 16728  10A7  0870               	movf	??_DimmerIntrPointSelect,w
 16729  10A8  00FA               	movwf	_DimmerLightsIntr
 16730  10A9                     i1l769:	
 16731                           
 16732                           ;Dimmer_B1.c: 11: }
 16733                           ;Dimmer_B1.c: 14: if (lights == 2) {
 16734  10A9  0871               	movf	DimmerIntrPointSelect@lights,w
 16735  10AA  3A02               	xorlw	2
 16736  10AB  1D03               	skipz
 16737  10AC  0008               	return
 16738                           
 16739                           ;Dimmer_B1.c: 15: DimmerLightsIntr = &DimmerLights2;
 16740  10AD  302E               	movlw	_DimmerLights2& (0+255)
 16741  10AE  00F0               	movwf	??_DimmerIntrPointSelect
 16742  10AF  0870               	movf	??_DimmerIntrPointSelect,w
 16743  10B0  00FA               	movwf	_DimmerLightsIntr
 16744  10B1  0008               	return
 16745  10B2                     __end_of_DimmerIntrPointSelect:	
 16746                           
 16747                           	psect	text115
 16748  1FEF                     __ptext115:	
 16749 ;; *************** function _INT_ISR *****************
 16750 ;; Defined at:
 16751 ;;		line 248 in file "../src/MCU_B1.c"
 16752 ;; Parameters:    Size  Location     Type
 16753 ;;		None
 16754 ;; Auto vars:     Size  Location     Type
 16755 ;;		None
 16756 ;; Return value:  Size  Location     Type
 16757 ;;		None               void
 16758 ;; Registers used:
 16759 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16760 ;; Tracked objects:
 16761 ;;		On entry : 0/0
 16762 ;;		On exit  : 0/0
 16763 ;;		Unchanged: 0/0
 16764 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16765 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16766 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16767 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16768 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16769 ;;Total ram usage:        0 bytes
 16770 ;; Hardware stack levels used:    1
 16771 ;; Hardware stack levels required when called:    2
 16772 ;; This function calls:
 16773 ;;		_setRF_ReceiveGO
 16774 ;;		_setRF_RxStatus
 16775 ;; This function is called by:
 16776 ;;		_ISR
 16777 ;; This function uses a non-reentrant model
 16778 ;;
 16779                           
 16780                           
 16781                           ;psect for function _INT_ISR
 16782  1FEF                     _INT_ISR:	
 16783                           
 16784                           ;MCU_B1.c: 249: if (INTE && INTF) {
 16785                           
 16786                           ;incstack = 0
 16787                           ; Regs used in _INT_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16788  1FEF  1E0B               	btfss	11,4	;volatile
 16789  1FF0  0008               	return
 16790  1FF1  1C8B               	btfss	11,1	;volatile
 16791  1FF2  0008               	return
 16792                           
 16793                           ;MCU_B1.c: 250: INTF = 0;
 16794  1FF3  108B               	bcf	11,1	;volatile
 16795                           
 16796                           ;MCU_B1.c: 251: INTE = 0;
 16797  1FF4  120B               	bcf	11,4	;volatile
 16798                           
 16799                           ;MCU_B1.c: 252: setRF_ReceiveGO(1, 1);
 16800  1FF5  01F2               	clrf	setRF_ReceiveGO@command
 16801  1FF6  0AF2               	incf	setRF_ReceiveGO@command,f
 16802  1FF7  3001               	movlw	1
 16803  1FF8  319F  2721  319F   	fcall	_setRF_ReceiveGO
 16804                           
 16805                           ;MCU_B1.c: 253: setRF_RxStatus(1,0);
 16806  1FFB  01F2               	clrf	setRF_RxStatus@command
 16807  1FFC  3001               	movlw	1
 16808  1FFD  319F  272E         	fcall	_setRF_RxStatus
 16809  1FFF  0008               	return
 16810  2000                     __end_of_INT_ISR:	
 16811                           
 16812                           	psect	text116
 16813  1F2E                     __ptext116:	
 16814 ;; *************** function _setRF_RxStatus *****************
 16815 ;; Defined at:
 16816 ;;		line 42 in file "../src/RF_Control_B1.c"
 16817 ;; Parameters:    Size  Location     Type
 16818 ;;  rf              1    wreg     unsigned char 
 16819 ;;  command         1    2[COMMON] unsigned char 
 16820 ;; Auto vars:     Size  Location     Type
 16821 ;;  rf              1    3[COMMON] unsigned char 
 16822 ;; Return value:  Size  Location     Type
 16823 ;;		None               void
 16824 ;; Registers used:
 16825 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16826 ;; Tracked objects:
 16827 ;;		On entry : 0/0
 16828 ;;		On exit  : 0/0
 16829 ;;		Unchanged: 0/0
 16830 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16831 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16832 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16833 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16834 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16835 ;;Total ram usage:        2 bytes
 16836 ;; Hardware stack levels used:    1
 16837 ;; Hardware stack levels required when called:    1
 16838 ;; This function calls:
 16839 ;;		i1_RfPointSelect
 16840 ;; This function is called by:
 16841 ;;		_INT_ISR
 16842 ;; This function uses a non-reentrant model
 16843 ;;
 16844                           
 16845                           
 16846                           ;psect for function _setRF_RxStatus
 16847  1F2E                     _setRF_RxStatus:	
 16848                           
 16849                           ;incstack = 0
 16850                           ; Regs used in _setRF_RxStatus: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16851                           ;setRF_RxStatus@rf stored from wreg
 16852  1F2E  00F3               	movwf	setRF_RxStatus@rf
 16853                           
 16854                           ;RF_Control_B1.c: 43: RfPointSelect(rf);
 16855  1F2F  0873               	movf	setRF_RxStatus@rf,w
 16856  1F30  319E  26AE         	fcall	i1_RfPointSelect
 16857                           
 16858                           ;RF_Control_B1.c: 44: RF->RxStatus = command;
 16859  1F32  0021               	movlb	1	; select bank1
 16860  1F33  083D               	movf	_RF^(0+128),w
 16861  1F34  0086               	movwf	6
 16862  1F35  0187               	clrf	7
 16863  1F36  0872               	movf	setRF_RxStatus@command,w
 16864  1F37  1181               	bcf	1,3
 16865  1F38  1D03               	skipz
 16866  1F39  1581               	bsf	1,3
 16867  1F3A  0008               	return
 16868  1F3B                     __end_of_setRF_RxStatus:	
 16869                           
 16870                           	psect	text117
 16871  1F21                     __ptext117:	
 16872 ;; *************** function _setRF_ReceiveGO *****************
 16873 ;; Defined at:
 16874 ;;		line 36 in file "../src/RF_Control_B1.c"
 16875 ;; Parameters:    Size  Location     Type
 16876 ;;  rf              1    wreg     unsigned char 
 16877 ;;  command         1    2[COMMON] unsigned char 
 16878 ;; Auto vars:     Size  Location     Type
 16879 ;;  rf              1    3[COMMON] unsigned char 
 16880 ;; Return value:  Size  Location     Type
 16881 ;;		None               void
 16882 ;; Registers used:
 16883 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16884 ;; Tracked objects:
 16885 ;;		On entry : 0/0
 16886 ;;		On exit  : 0/0
 16887 ;;		Unchanged: 0/0
 16888 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16889 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16890 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16891 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16892 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16893 ;;Total ram usage:        2 bytes
 16894 ;; Hardware stack levels used:    1
 16895 ;; Hardware stack levels required when called:    1
 16896 ;; This function calls:
 16897 ;;		i1_RfPointSelect
 16898 ;; This function is called by:
 16899 ;;		_INT_ISR
 16900 ;; This function uses a non-reentrant model
 16901 ;;
 16902                           
 16903                           
 16904                           ;psect for function _setRF_ReceiveGO
 16905  1F21                     _setRF_ReceiveGO:	
 16906                           
 16907                           ;incstack = 0
 16908                           ; Regs used in _setRF_ReceiveGO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16909                           ;setRF_ReceiveGO@rf stored from wreg
 16910  1F21  00F3               	movwf	setRF_ReceiveGO@rf
 16911                           
 16912                           ;RF_Control_B1.c: 37: RfPointSelect(rf);
 16913  1F22  0873               	movf	setRF_ReceiveGO@rf,w
 16914  1F23  319E  26AE         	fcall	i1_RfPointSelect
 16915                           
 16916                           ;RF_Control_B1.c: 38: RF->ReceiveGO = command;
 16917  1F25  0021               	movlb	1	; select bank1
 16918  1F26  083D               	movf	_RF^(0+128),w
 16919  1F27  0086               	movwf	6
 16920  1F28  0187               	clrf	7
 16921  1F29  0872               	movf	setRF_ReceiveGO@command,w
 16922  1F2A  1081               	bcf	1,1
 16923  1F2B  1D03               	skipz
 16924  1F2C  1481               	bsf	1,1
 16925  1F2D  0008               	return
 16926  1F2E                     __end_of_setRF_ReceiveGO:	
 16927                           
 16928                           	psect	text118
 16929  1EAE                     __ptext118:	
 16930 ;; *************** function i1_RfPointSelect *****************
 16931 ;; Defined at:
 16932 ;;		line 7 in file "../src/RF_Control_B1.c"
 16933 ;; Parameters:    Size  Location     Type
 16934 ;;  rf              1    wreg     unsigned char 
 16935 ;; Auto vars:     Size  Location     Type
 16936 ;;  rf              1    1[COMMON] unsigned char 
 16937 ;; Return value:  Size  Location     Type
 16938 ;;		None               void
 16939 ;; Registers used:
 16940 ;;		wreg
 16941 ;; Tracked objects:
 16942 ;;		On entry : 0/0
 16943 ;;		On exit  : 0/0
 16944 ;;		Unchanged: 0/0
 16945 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16946 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16947 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16948 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16949 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16950 ;;Total ram usage:        2 bytes
 16951 ;; Hardware stack levels used:    1
 16952 ;; This function calls:
 16953 ;;		Nothing
 16954 ;; This function is called by:
 16955 ;;		_setRF_ReceiveGO
 16956 ;;		_setRF_RxStatus
 16957 ;; This function uses a non-reentrant model
 16958 ;;
 16959                           
 16960                           
 16961                           ;psect for function i1_RfPointSelect
 16962  1EAE                     i1_RfPointSelect:	
 16963                           
 16964                           ;incstack = 0
 16965                           ; Regs used in i1_RfPointSelect: [wreg]
 16966                           ;i1RfPointSelect@rf stored from wreg
 16967  1EAE  00F1               	movwf	i1RfPointSelect@rf
 16968                           
 16969                           ;RF_Control_B1.c: 9: if (rf == 1) {
 16970  1EAF  0871               	movf	i1RfPointSelect@rf,w
 16971  1EB0  3A01               	xorlw	1
 16972  1EB1  1D03               	skipz
 16973  1EB2  0008               	return
 16974                           
 16975                           ;RF_Control_B1.c: 10: RF = &RF1;
 16976  1EB3  30D0               	movlw	_RF1& (0+255)
 16977  1EB4  00F0               	movwf	??i1_RfPointSelect
 16978  1EB5  0870               	movf	??i1_RfPointSelect,w
 16979  1EB6  0021               	movlb	1	; select bank1
 16980  1EB7  00BD               	movwf	_RF^(0+128)
 16981  1EB8  0008               	return
 16982  1EB9                     __end_ofi1_RfPointSelect:	
 16983  007E                     btemp	set	126	;btemp
 16984  007E                     pic14e$flags	set	126
 16985  007E                     wtemp	set	126
 16986  007E                     wtemp0	set	126
 16987  0080                     wtemp1	set	128
 16988  0082                     wtemp2	set	130
 16989  0084                     wtemp3	set	132
 16990  0086                     wtemp4	set	134
 16991  0088                     wtemp5	set	136
 16992  007F                     wtemp6	set	127
 16993  007E                     ttemp	set	126
 16994  007E                     ttemp0	set	126
 16995  0081                     ttemp1	set	129
 16996  0084                     ttemp2	set	132
 16997  0087                     ttemp3	set	135
 16998  007F                     ttemp4	set	127
 16999  007E                     ltemp	set	126
 17000  007E                     ltemp0	set	126
 17001  0082                     ltemp1	set	130
 17002  0086                     ltemp2	set	134
 17003  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    102
    Data        32
    BSS         194
    Persistent  5
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      8      14
    BANK0            80     80      80
    BANK1            80      0      75
    BANK2            80      0      66
    BANK3            80      0      48
    BANK4            80      0      37
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    Sw	PTR struct Switch size(1) Largest target is 9
		 -> NULL(NULL[0]), Sw2(BANK2[9]), Sw1(BANK2[9]), 

    RFSW	PTR struct RFSW size(1) Largest target is 1
		 -> NULL(NULL[0]), RFSW2(BANK1[1]), RFSW1(BANK1[1]), 

    RF	PTR struct RF size(1) Largest target is 4
		 -> NULL(NULL[0]), RF1(BANK1[4]), 

    WDT	PTR struct WDT size(1) Largest target is 2
		 -> NULL(NULL[0]), _WDT(BANK1[2]), 

    Timer0	PTR struct Timer0 size(1) Largest target is 8
		 -> NULL(NULL[0]), VarTimer0(BANK2[8]), 

    Memory	PTR struct FlashMemory size(1) Largest target is 37
		 -> NULL(NULL[0]), VarMemory(BANK4[37]), 

    LED	PTR struct LED size(1) Largest target is 4
		 -> NULL(NULL[0]), VarErrLED(BANK1[4]), VarLED2(BANK1[4]), VarLED1(BANK1[4]), 

    myMain	PTR struct myMain size(1) Largest target is 16
		 -> NULL(NULL[0]), _myMain(BANK3[16]), 

    DimmerLights22	PTR struct DimmerLights size(1) Largest target is 14
		 -> NULL(NULL[0]), DimmerLights2(BANK2[14]), 

    DimmerLights11	PTR struct DimmerLights size(1) Largest target is 14
		 -> NULL(NULL[0]), DimmerLights1(BANK2[14]), 

    DimmerLights	PTR struct DimmerLights size(1) Largest target is 14
		 -> NULL(NULL[0]), DimmerLights2(BANK2[14]), DimmerLights1(BANK2[14]), 

    Dimmer	PTR struct Dimmer size(1) Largest target is 3
		 -> NULL(NULL[0]), Dimmer1(BANK1[3]), 

    DimmerLightsIntr	PTR struct DimmerLights size(1) Largest target is 14
		 -> NULL(NULL[0]), DimmerLights2(BANK2[14]), DimmerLights1(BANK2[14]), 

    product	PTR struct Product size(1) Largest target is 32
		 -> NULL(NULL[0]), _product(BANK3[32]), 

    DelayOff	PTR struct DelayOff size(1) Largest target is 5
		 -> NULL(NULL[0]), DlySw2(BANK1[5]), DlySw1(BANK1[5]), 

    Buz	PTR struct Buzzer size(1) Largest target is 12
		 -> NULL(NULL[0]), Buz1(BANK2[12]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _TMR0_ISR->_setDimmerLights_IntrControl
    _setDimmerLights_IntrControl->_DimmerIntrPointSelect
    _setDimmerReClock->_setDimmerLights_IntrGO
    _setDimmerLights_IntrGO->_DimmerIntrPointSelect
    _INT_ISR->_setRF_ReceiveGO
    _INT_ISR->_setRF_RxStatus
    _setRF_RxStatus->i1_RfPointSelect
    _setRF_ReceiveGO->i1_RfPointSelect

Critical Paths under _main in BANK0

    _my_Main->_setBuz
    _setSw_Enable->_SwPointSelect
    _setRF_Enable->_RfPointSelect
    _Switch_Main->_setSw_Main
    _setSw_Main->_Sw_DimmerOffFunc
    _setRF_Learn->_RfPointSelect
    _Sw_DimmerOnFunc->_setRF_DimmerLights
    _Sw_DimmerOffFunc->_setRF_DimmerLights
    _Sw_DimmerAdjFunc->_setDimmerLights_AdjGo
    _Sw_DimmerAdjFunc->_setDimmerLights_TriggerAdj
    _Sw_DimmerAdjFunc->_setRFSW_Status
    _setDimmerLights_TriggerAdj->_DimmerLightsPointSelect
    _setDimmerLights_AdjGo->_DimmerLightsPointSelect
    _Switch_Initialization->_setSw_Initialization
    _setSw_Initialization->_setLED
    _RF_Main->_setRF_Main
    _setRF_Main->_getRxData
    _getRxData->_setControl_Lights_Table
    _setLog_Code->_setBuz
    _setControl_Lights_Table->_setRFSW_AdjControl
    _setRFSW_Control->_setRF_DimmerLights
    _setDelayOff_GO->_DelayTimejudge
    _setRFSW_AdjControl->_setRF_DimmerValue
    _setRF_DimmerValue->_setDimmerLights_AdjRF
    _setDimmerLights_AdjRF->_getPercentValue
    _getPercentValue->___fttol
    ___ftmul->___awtoft
    ___ftadd->___ftmul
    _RF_RxDisable->_CC2500_WriteCommand
    _CC2500_TxData->_CC2500_WriteCommand
    _CC2500_RxData->_CC2500_ReadStatus
    _CC2500_RxData->_CC2500_WriteCommand
    _CC2500_ReadStatus->_CC2500_ReadByte
    _CC2500_ReadStatus->_CC2500_WriteByte
    _RF_Initialization->_setRF_Initialization
    _Mcu_Initialization->_TMR0_Set
    _Mcu_Initialization->_WDT_Set
    _LED_Main->_setLED_Main
    _setLED_Main->_LedPointSelect
    _LED_Initialization->_setLED_Initialization
    _setLED_Initialization->_setLED
    _Flash_Memory_Main->_Flash_Memory_Modify
    _Flash_Memory_Modify->_Flash_Memory_Read
    _Flash_Memory_Initialization->_setPercentValue
    _DimmerLights_Main->_setDimmerLights_Main
    _setDimmerLights_Main->_setDimmerLights_Adj
    _setDimmerLights_Adj->_setRF_DimmerLights
    _setDimmerLights->_setLED
    _setLED->_LedPointSelect
    _DimmerLights_Close->_getDimmerLights_StatusFlag
    _DimmerLights_Close->_setMemory_GO
    _DimmerLights_Initialization->_setDimmerLights_Initialization
    _setDimmerLights_Initialization->_DimmerLightsPointSelect
    _DelayOff_Main->_DlyOff_Main
    _DlyOff_Main->_setRF_DimmerLights
    _setTxData->_RfPointSelect
    _setSw_Status->_SwPointSelect
    _setRF_DimmerLights->_setPercentValue
    _setPercentValue->___fttol
    ___fttol->___ftadd
    ___ftdiv->___awtoft
    ___awtoft->___ftpack
    _setRFSW_Status->_RfSWPointSelect
    _setDimmerLights_Trigger->_DimmerLightsPointSelect
    _setDimmerLights_Switch->_DimmerLightsPointSelect
    _setBuz->___awdiv
    _DelayOff_Initialization->_DlyOff_Initialization
    _DlyOff_Initialization->_DelayOffPointSelect
    _CC2500_PowerOnInitial->_CC2500_InitSetREG
    _CC2500_SIDLEMode->_CC2500_WriteCommand
    _CC2500_PowerRST->_DelayTime_1us
    _CC2500_InitSetREG->_CC2500_WriteREG
    _CC2500_InitPATable->_CC2500_WriteREG
    _CC2500_WriteREG->_CC2500_WriteByte
    _CC2500_FrequencyCabr->_DelayTime_1us
    _CC2500_ClearTXFIFO->_CC2500_WriteCommand
    _CC2500_ClearRXFIFO->_CC2500_WriteCommand
    _CC2500_WriteCommand->_CC2500_WriteByte

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     0      4   76107
                                             76 BANK0      4     0      4
              _Buzzer_Initialization
                        _Buzzer_Main
              _CC2500_PowerOnInitial
            _DelayOff_Initialization
                      _DelayOff_Main
        _DimmerLights_Initialization
                  _DimmerLights_Main
        _Flash_Memory_Initialization
                  _Flash_Memory_Main
                 _LED_Initialization
                           _LED_Main
                 _Mcu_Initialization
                  _RF_Initialization
                            _RF_Main
              _Switch_Initialization
                        _Switch_Main
                           _WDT_Main
              _myMain_Initialization
                            _my_Main
 ---------------------------------------------------------------------------------
 (1) _my_Main                                              0     0      0    1463
                             _setBuz
                       _setRF_Enable
                       _setSw_Enable
 ---------------------------------------------------------------------------------
 (2) _setSw_Enable                                         1     1      0      88
                                              2 BANK0      1     1      0
                      _SwPointSelect
 ---------------------------------------------------------------------------------
 (2) _setRF_Enable                                         2     1      1     152
                                              2 BANK0      2     1      1
                      _RfPointSelect
                          _setINT_GO
 ---------------------------------------------------------------------------------
 (1) _myMain_Initialization                                1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _WDT_Main                                             1     1      0       0
                                              0 BANK0      1     1      0
                       _WDT_Clearing
 ---------------------------------------------------------------------------------
 (2) _WDT_Clearing                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Switch_Main                                          0     0      0   20179
                         _setSw_Main
 ---------------------------------------------------------------------------------
 (2) _setSw_Main                                           5     5      0   20179
                                             69 BANK0      5     5      0
                      _SwPointSelect
                   _Sw_DimmerAdjFunc
                   _Sw_DimmerOffFunc
                    _Sw_DimmerOnFunc
                             _setBuz
                        _setRF_Learn
 ---------------------------------------------------------------------------------
 (3) _setRF_Learn                                          2     1      1     258
                                              2 BANK0      2     1      1
                      _RfPointSelect
 ---------------------------------------------------------------------------------
 (3) _Sw_DimmerOnFunc                                      2     2      0    8915
                                             66 BANK0      2     2      0
                             _setBuz
             _setDimmerLights_Switch
            _setDimmerLights_Trigger
                     _setRFSW_Status
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _Sw_DimmerOffFunc                                     3     3      0    8456
                                             66 BANK0      3     3      0
                     _setDelayOff_GO
              _setDimmerLights_AdjGo
             _setDimmerLights_Switch
            _setDimmerLights_Trigger
         _setDimmerLights_TriggerAdj
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _Sw_DimmerAdjFunc                                     2     2      0    1103
                                              4 BANK0      2     2      0
              _setDimmerLights_AdjGo
         _setDimmerLights_TriggerAdj
                     _setRFSW_Status
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_TriggerAdj                           2     1      1     216
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_AdjGo                                2     1      1     216
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (1) _Switch_Initialization                                0     0      0     652
                         _TouchPower
               _setSw_Initialization
 ---------------------------------------------------------------------------------
 (2) _setSw_Initialization                                 1     1      0     652
                                              4 BANK0      1     1      0
                             _setLED
 ---------------------------------------------------------------------------------
 (2) _TouchPower                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _RF_Main                                              0     0      0   26714
                         _setRF_Main
 ---------------------------------------------------------------------------------
 (2) _setRF_Main                                           3     3      0   26714
                                             73 BANK0      3     3      0
                      _CC2500_RxData
                      _CC2500_TxData
                _CC2500_WriteCommand
                       _RF_RxDisable
                      _RfPointSelect
                          _getRxData
                          _setINT_GO
 ---------------------------------------------------------------------------------
 (3) _getRxData                                            2     2      0   25942
                                             72 BANK0      1     1      0
                      _RfPointSelect
            _setControl_Lights_Table
                        _setLog_Code
 ---------------------------------------------------------------------------------
 (4) _setLog_Code                                          2     2      0    1267
                                             13 BANK0      2     2      0
                      _RfPointSelect
                             _setBuz
 ---------------------------------------------------------------------------------
 (4) _setControl_Lights_Table                              1     1      0   24631
                                             71 BANK0      1     1      0
                      _RfPointSelect
                             _setBuz
                    _setDimmerLights
                 _setRFSW_AdjControl
                    _setRFSW_Control
                     _setRFSW_Status
                       _setSw_Status
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setRFSW_Control                                      2     2      0    9873
                                             66 BANK0      2     2      0
                    _RfSWPointSelect
                             _setBuz
                     _setDelayOff_GO
             _setDimmerLights_Switch
            _setDimmerLights_Trigger
                 _setRF_DimmerLights
                       _setSw_Status
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setDelayOff_GO                                       5     3      2     871
                                              3 BANK0      5     3      2
                _DelayOffPointSelect
                     _DelayTimejudge
 ---------------------------------------------------------------------------------
 (5) _DelayTimejudge                                       3     3      0      51
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (5) _setRFSW_AdjControl                                   3     3      0   11355
                                             68 BANK0      3     3      0
                    _RfSWPointSelect
                  _setRF_DimmerValue
                          _setTxData
 ---------------------------------------------------------------------------------
 (6) _setRF_DimmerValue                                    3     3      0   11179
                                             65 BANK0      3     3      0
              _setDimmerLights_AdjRF
 ---------------------------------------------------------------------------------
 (7) _setDimmerLights_AdjRF                                2     2      0   11113
                                             63 BANK0      2     2      0
            _DimmerLightsPointSelect
                    _getPercentValue
 ---------------------------------------------------------------------------------
 (8) _getPercentValue                                      6     6      0   11047
                                             57 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___fttol
 ---------------------------------------------------------------------------------
 (9) ___ftmul                                             16    10      6    2502
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (9) ___ftadd                                             13     7      6    3118
                                             30 BANK0     13     7      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) _RF_RxDisable                                         1     1      0     134
                                              4 BANK0      1     1      0
                _CC2500_WriteCommand
                      _RfPointSelect
                          _setINT_GO
 ---------------------------------------------------------------------------------
 (3) _setINT_GO                                            1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _CC2500_TxData                                        2     2      0     160
                                              4 BANK0      2     2      0
                   _CC2500_WriteByte
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (3) _CC2500_RxData                                        2     2      0     320
                                              4 BANK0      2     2      0
                    _CC2500_ReadByte
                  _CC2500_ReadStatus
                   _CC2500_WriteByte
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (4) _CC2500_ReadStatus                                    2     2      0     114
                                              2 BANK0      2     2      0
                    _CC2500_ReadByte
                   _CC2500_WriteByte
 ---------------------------------------------------------------------------------
 (5) _CC2500_ReadByte                                      2     2      0      46
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _RF_Initialization                                    0     0      0       0
               _setRF_Initialization
 ---------------------------------------------------------------------------------
 (2) _setRF_Initialization                                 2     2      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Mcu_Initialization                                   1     1      0       0
                                              1 BANK0      1     1      0
                            _ADC_Set
                           _Fosc_Set
                            _INT_Set
                            _IOC_Set
                             _IO_Set
                           _TMR0_Set
                            _WDT_Set
 ---------------------------------------------------------------------------------
 (2) _WDT_Set                                              1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _TMR0_Set                                             1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _IO_Set                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IOC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INT_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Fosc_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _LED_Main                                             0     0      0     154
                        _setLED_Main
 ---------------------------------------------------------------------------------
 (2) _setLED_Main                                          3     3      0     154
                                              2 BANK0      3     3      0
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (1) _LED_Initialization                                   0     0      0     740
              _setLED_Initialization
 ---------------------------------------------------------------------------------
 (2) _setLED_Initialization                                1     1      0     740
                                              4 BANK0      1     1      0
                     _LedPointSelect
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Main                                    0     0      0     227
                _Flash_Memory_Modify
 ---------------------------------------------------------------------------------
 (2) _Flash_Memory_Modify                                  3     3      0     227
                                              4 BANK0      3     3      0
               _Flash_Memory_Erasing
                  _Flash_Memory_Read
                 _Flash_Memory_Write
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Erasing                                 0     0      0       0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Initialization                          2     2      0    5698
                                             61 BANK0      2     2      0
                  _Flash_Memory_Read
                 _Flash_Memory_Write
                    _setPercentValue
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Write                                   2     2      0      90
                                              0 BANK0      2     2      0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (4) _Flash_Memory_Unlock                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Read                                    4     4      0      47
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Main                                    0     0      0    9087
                 _DimmerLights_Close
               _setDimmerLights_Main
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Main                                 2     2      0    8973
                                             69 BANK0      2     2      0
            _DimmerLightsPointSelect
                             _setBuz
                    _setDimmerLights
                _setDimmerLights_Adj
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_Adj                                  3     2      1    6399
                                             66 BANK0      3     2      1
            _DimmerLightsPointSelect
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setDimmerLights                                      3     2      1    1084
                                              4 BANK0      3     2      1
            _DimmerLightsPointSelect
                             _setLED
                       _setMemory_GO
 ---------------------------------------------------------------------------------
 (3) _setLED                                               2     1      1     630
                                              2 BANK0      2     1      1
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (4) _LedPointSelect                                       2     2      0      66
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _DimmerLights_Close                                   0     0      0     114
         _getDimmerLights_StatusFlag
                       _setMemory_GO
 ---------------------------------------------------------------------------------
 (6) _setMemory_GO                                         3     3      0      66
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _getDimmerLights_StatusFlag                           3     3      0      48
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Initialization                          1     1      0      66
                                              4 BANK0      1     1      0
              _Dimmer_Initialization
     _setDimmerLights_Initialization
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Initialization                       2     2      0      66
                                              2 BANK0      2     2      0
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (2) _Dimmer_Initialization                                1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Main                                        0     0      0    9384
                        _DlyOff_Main
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Main                                          3     3      0    9384
                                             66 BANK0      3     3      0
                _DelayOffPointSelect
                             _setBuz
             _setDimmerLights_Switch
            _setDimmerLights_Trigger
                     _setRFSW_Status
                 _setRF_DimmerLights
                       _setSw_Status
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setTxData                                            3     3      0      44
                                              2 BANK0      2     2      0
                      _RfPointSelect
 ---------------------------------------------------------------------------------
 (3) _RfPointSelect                                        2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (5) _setSw_Status                                         2     1      1     472
                                              2 BANK0      2     1      1
                      _SwPointSelect
 ---------------------------------------------------------------------------------
 (3) _SwPointSelect                                        2     2      0      44
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setRF_DimmerLights                                   5     4      1    6117
                                             61 BANK0      5     4      1
                    _setPercentValue
 ---------------------------------------------------------------------------------
 (5) _setPercentValue                                      4     4      0    5427
                                             57 BANK0      4     4      0
                           ___awtoft
                            ___ftdiv
                            ___fttol
 ---------------------------------------------------------------------------------
 (6) ___fttol                                             14    10      4     380
                                             43 BANK0     14    10      4
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (6) ___ftdiv                                             16    10      6    2712
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (6) ___awtoft                                             6     3      3    2267
                                              8 BANK0      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) ___ftpack                                             8     3      5    2048
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (4) _setRFSW_Status                                       2     1      1     536
                                              2 BANK0      2     1      1
                    _RfSWPointSelect
 ---------------------------------------------------------------------------------
 (5) _RfSWPointSelect                                      2     2      0      44
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_Trigger                              2     1      1     408
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_Switch                               2     1      1     408
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (5) _DimmerLightsPointSelect                              2     2      0      44
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _setBuz                                               4     2      2    1223
                                              9 BANK0      4     2      2
                            ___awdiv
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4     428
                                              0 BANK0      9     5      4
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Initialization                              0     0      0      66
              _DlyOff_Initialization
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Initialization                                1     1      0      66
                                              2 BANK0      1     1      0
                _DelayOffPointSelect
 ---------------------------------------------------------------------------------
 (5) _DelayOffPointSelect                                  2     2      0      44
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _CC2500_PowerOnInitial                                0     0      0    1677
                 _CC2500_ClearRXFIFO
                 _CC2500_ClearTXFIFO
               _CC2500_FrequencyCabr
                 _CC2500_InitPATable
                  _CC2500_InitSetREG
                    _CC2500_PowerRST
                   _CC2500_SIDLEMode
 ---------------------------------------------------------------------------------
 (2) _CC2500_SIDLEMode                                     0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (2) _CC2500_PowerRST                                      1     1      0     394
                                              6 BANK0      1     1      0
                   _CC2500_WriteByte
                      _DelayTime_1us
 ---------------------------------------------------------------------------------
 (2) _CC2500_InitSetREG                                    4     4      0     354
                                              5 BANK0      4     4      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (2) _CC2500_InitPATable                                   3     3      0     309
                                              5 BANK0      3     3      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (3) _CC2500_WriteREG                                      3     2      1     218
                                              2 BANK0      3     2      1
                   _CC2500_WriteByte
 ---------------------------------------------------------------------------------
 (2) _CC2500_FrequencyCabr                                 0     0      0     416
                _CC2500_WriteCommand
                      _DelayTime_1us
 ---------------------------------------------------------------------------------
 (3) _DelayTime_1us                                        6     4      2     348
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (2) _CC2500_ClearTXFIFO                                   0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (2) _CC2500_ClearRXFIFO                                   0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (4) _CC2500_WriteCommand                                  2     2      0      68
                                              2 BANK0      2     2      0
                   _CC2500_WriteByte
 ---------------------------------------------------------------------------------
 (5) _CC2500_WriteByte                                     2     2      0      46
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Main                                          4     4      0       0
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Initialization                                1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _ISR                                                 1     1      0     524
                                              7 COMMON     1     1      0
                            _INT_ISR
                            _IOC_ISR
                           _TMR0_ISR
 ---------------------------------------------------------------------------------
 (12) _TMR0_ISR                                            0     0      0     198
                        _Buz_Counter
        _setDimmerLights_IntrControl
 ---------------------------------------------------------------------------------
 (13) _setDimmerLights_IntrControl                         5     5      0     198
                                              2 COMMON     5     5      0
              _DimmerIntrPointSelect
 ---------------------------------------------------------------------------------
 (13) _Buz_Counter                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _IOC_ISR                                             0     0      0      66
                   _setDimmerReClock
 ---------------------------------------------------------------------------------
 (13) _setDimmerReClock                                    0     0      0      66
             _setDimmerLights_IntrGO
 ---------------------------------------------------------------------------------
 (14) _setDimmerLights_IntrGO                              1     1      0      66
                                              2 COMMON     1     1      0
              _DimmerIntrPointSelect
 ---------------------------------------------------------------------------------
 (14) _DimmerIntrPointSelect                               2     2      0      44
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (12) _INT_ISR                                             0     0      0     260
                    _setRF_ReceiveGO
                     _setRF_RxStatus
 ---------------------------------------------------------------------------------
 (13) _setRF_RxStatus                                      2     1      1     130
                                              2 COMMON     2     1      1
                    i1_RfPointSelect
 ---------------------------------------------------------------------------------
 (13) _setRF_ReceiveGO                                     2     1      1     130
                                              2 COMMON     2     1      1
                    i1_RfPointSelect
 ---------------------------------------------------------------------------------
 (14) i1_RfPointSelect                                     2     2      0      22
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 14
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Buzzer_Initialization
   _Buzzer_Main
   _CC2500_PowerOnInitial
     _CC2500_ClearRXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
     _CC2500_ClearTXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
     _CC2500_FrequencyCabr
       _CC2500_WriteCommand
         _CC2500_WriteByte
       _DelayTime_1us
     _CC2500_InitPATable
       _CC2500_WriteREG
         _CC2500_WriteByte
     _CC2500_InitSetREG
       _CC2500_WriteREG
         _CC2500_WriteByte
     _CC2500_PowerRST
       _CC2500_WriteByte
       _DelayTime_1us
     _CC2500_SIDLEMode
       _CC2500_WriteCommand
         _CC2500_WriteByte
   _DelayOff_Initialization
     _DlyOff_Initialization
       _DelayOffPointSelect
   _DelayOff_Main
     _DlyOff_Main
       _DelayOffPointSelect
       _setBuz
         ___awdiv
       _setDimmerLights_Switch
         _DimmerLightsPointSelect
       _setDimmerLights_Trigger
         _DimmerLightsPointSelect
       _setRFSW_Status
         _RfSWPointSelect
       _setRF_DimmerLights
         _setPercentValue
           ___awtoft
             ___ftpack
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
       _setSw_Status
         _SwPointSelect
       _setTxData
         _RfPointSelect
   _DimmerLights_Initialization
     _Dimmer_Initialization
     _setDimmerLights_Initialization
       _DimmerLightsPointSelect
   _DimmerLights_Main
     _DimmerLights_Close
       _getDimmerLights_StatusFlag
       _setMemory_GO
     _setDimmerLights_Main
       _DimmerLightsPointSelect
       _setBuz
         ___awdiv
       _setDimmerLights
         _DimmerLightsPointSelect
         _setLED
           _LedPointSelect
         _setMemory_GO
       _setDimmerLights_Adj
         _DimmerLightsPointSelect
         _setRF_DimmerLights
           _setPercentValue
             ___awtoft
               ___ftpack
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setTxData
           _RfPointSelect
   _Flash_Memory_Initialization
     _Flash_Memory_Read
     _Flash_Memory_Write
       _Flash_Memory_Unlock
     _setPercentValue
       ___awtoft
         ___ftpack
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
   _Flash_Memory_Main
     _Flash_Memory_Modify
       _Flash_Memory_Erasing
         _Flash_Memory_Unlock
       _Flash_Memory_Read
       _Flash_Memory_Write
         _Flash_Memory_Unlock
   _LED_Initialization
     _setLED_Initialization
       _LedPointSelect
       _setLED
         _LedPointSelect
   _LED_Main
     _setLED_Main
       _LedPointSelect
   _Mcu_Initialization
     _ADC_Set
     _Fosc_Set
     _INT_Set
     _IOC_Set
     _IO_Set
     _TMR0_Set
     _WDT_Set
   _RF_Initialization
     _setRF_Initialization
   _RF_Main
     _setRF_Main
       _CC2500_RxData
         _CC2500_ReadByte
         _CC2500_ReadStatus
           _CC2500_ReadByte
           _CC2500_WriteByte
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
       _CC2500_TxData
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
       _CC2500_WriteCommand
         _CC2500_WriteByte
       _RF_RxDisable
         _CC2500_WriteCommand
           _CC2500_WriteByte
         _RfPointSelect
         _setINT_GO
       _RfPointSelect
       _getRxData
         _RfPointSelect
         _setControl_Lights_Table
           _RfPointSelect
           _setBuz
             ___awdiv
           _setDimmerLights
             _DimmerLightsPointSelect
             _setLED
               _LedPointSelect
             _setMemory_GO
           _setRFSW_AdjControl
             _RfSWPointSelect
             _setRF_DimmerValue
               _setDimmerLights_AdjRF
                 _DimmerLightsPointSelect
                 _getPercentValue
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
             _setTxData
               _RfPointSelect
           _setRFSW_Control
             _RfSWPointSelect
             _setBuz
               ___awdiv
             _setDelayOff_GO
               _DelayOffPointSelect
               _DelayTimejudge
             _setDimmerLights_Switch
               _DimmerLightsPointSelect
             _setDimmerLights_Trigger
               _DimmerLightsPointSelect
             _setRF_DimmerLights
               _setPercentValue
                 ___awtoft
                   ___ftpack
                 ___ftdiv
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
             _setSw_Status
               _SwPointSelect
             _setTxData
               _RfPointSelect
           _setRFSW_Status
             _RfSWPointSelect
           _setSw_Status
             _SwPointSelect
           _setTxData
             _RfPointSelect
         _setLog_Code
           _RfPointSelect
           _setBuz
             ___awdiv
       _setINT_GO
   _Switch_Initialization
     _TouchPower
     _setSw_Initialization
       _setLED
         _LedPointSelect
   _Switch_Main
     _setSw_Main
       _SwPointSelect
       _Sw_DimmerAdjFunc
         _setDimmerLights_AdjGo
           _DimmerLightsPointSelect
         _setDimmerLights_TriggerAdj
           _DimmerLightsPointSelect
         _setRFSW_Status
           _RfSWPointSelect
       _Sw_DimmerOffFunc
         _setDelayOff_GO
           _DelayOffPointSelect
           _DelayTimejudge
         _setDimmerLights_AdjGo
           _DimmerLightsPointSelect
         _setDimmerLights_Switch
           _DimmerLightsPointSelect
         _setDimmerLights_Trigger
           _DimmerLightsPointSelect
         _setDimmerLights_TriggerAdj
           _DimmerLightsPointSelect
         _setRF_DimmerLights
           _setPercentValue
             ___awtoft
               ___ftpack
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setTxData
           _RfPointSelect
       _Sw_DimmerOnFunc
         _setBuz
           ___awdiv
         _setDimmerLights_Switch
           _DimmerLightsPointSelect
         _setDimmerLights_Trigger
           _DimmerLightsPointSelect
         _setRFSW_Status
           _RfSWPointSelect
         _setRF_DimmerLights
           _setPercentValue
             ___awtoft
               ___ftpack
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setTxData
           _RfPointSelect
       _setBuz
         ___awdiv
       _setRF_Learn
         _RfPointSelect
   _WDT_Main
     _WDT_Clearing
   _myMain_Initialization
   _my_Main
     _setBuz
       ___awdiv
     _setRF_Enable
       _RfPointSelect
       _setINT_GO
     _setSw_Enable
       _SwPointSelect

 _ISR (ROOT)
   _INT_ISR
     _setRF_ReceiveGO
       i1_RfPointSelect
     _setRF_RxStatus
       i1_RfPointSelect
   _IOC_ISR
     _setDimmerReClock
       _setDimmerLights_IntrGO
         _DimmerIntrPointSelect
   _TMR0_ISR
     _Buz_Counter
     _setDimmerLights_IntrControl
       _DimmerIntrPointSelect

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       1       1        7.1%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      8       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     50      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      0      4B       7       93.8%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      42       9       82.5%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      30      11       60.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0      25      13       46.3%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     140      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     140      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.32 build 58300 
Symbol Table                                                                                   Wed Oct 08 17:22:26 2014

                   __size_of_Switch_Main 0008                    ?_Flash_Memory_Erasing 0070  
                           _WDT_Clearing 0002             ??_setDimmerLights_TriggerAdj 0023  
                                     _RD 0CA8                                       _RF 00BD  
                __end_of_CC2500_WriteREG 11A4                                       _WR 0CA9  
                           ___awdiv@sign 0026                                       _Sw 007B  
     __end_of_getDimmerLights_StatusFlag 11F0               _getDimmerLights_StatusFlag 11D6  
                 __end_of_setDelayOff_GO 088C                             ___ftadd@exp1 004A  
                           ___ftadd@exp2 0049                setDimmerLights_Adj@lights 0064  
                   _setDimmerLights_Main 0D47                             ___ftadd@sign 0048  
                                    l301 1437                                      l304 143D  
                                    l334 117E                                      l335 1180  
                                    l273 15CD                                      l370 1344  
                                    l346 1193                                      l274 15D2  
                                    l364 1214                                      l284 08EC  
                                    l268 15A3                                      l277 15D5  
                                    l358 1FA7                                      l288 08FD  
                                    l813 10BC                                      _GIE 005F  
                                    _CRC 00B7                                      _RA0 0060  
                                    _RB0 0068     __size_of_DimmerLights_Initialization 0017  
                                    _RB1 0069                                      _RA3 0063  
                                    _RC0 0070                                      _RA4 0064  
                                    _LED 00BC                                      _RC1 0071  
                                    _RB3 006B                                      _RC2 0072  
                                    _RB4 006C                                      _RA6 0066  
                                    _RB5 006D                                      _RA7 0067  
                                    _RC4 0074                                      _RC5 0075  
                                    _RC7 0077                                      _RF1 00D0  
                                    _ISR 0004                                      _WDT 00E8  
                                    _Sw1 0148                                      _Sw2 0151  
                                    _Buz 0078                setDimmerLights_Adj@status 0062  
               __end_of_CC2500_WriteByte 118B                            ??_Buz_Counter 0070  
                  _Buzzer_Initialization 1EC4                          __end_of_ADC_Set 1E7C  
                        ?_DelayTimejudge 0070                                      wreg 0009  
   setDimmerLights_Initialization@lights 0023                          _setDimmerLights 0CC8  
                  _setDimmerLights_AdjRF 131D                    _setDimmerLights_AdjGo 1FCF  
                                   ?_ISR 0070                             ___ftdiv@cntr 0038  
                        __end_of_IOC_ISR 108F                             ___ftdiv@sign 003D  
                                   l2206 1586                 ?_DimmerLightsPointSelect 0070  
                                   l1381 146D                                     l2174 07F9  
                                   l2192 1121                          __end_of_IOC_Set 1F48  
                                   l5120 0958                                     l5130 0980  
                                   l5122 0962                                     l5202 03B9  
                                   l2554 1E57                                     l5132 0988  
                                   l5124 0967                                     l5116 0951  
                                   l5212 03EB                                     l5204 03C3  
                                   l2902 0992                                     l5150 12E4  
                                   l5222 0406                                     l5232 05DF  
                                   l5208 03D9                                     l5304 0598  
                                   l5400 13D0                                     l6026 1451  
                                   l5162 0350                                     l5402 13E4  
                                   l6122 0B0F                                     l5500 0C13  
                                   l5260 064F                                     l5252 0636  
                                   l5324 0DE0                                     l5172 0366  
                                   l5308 05A0                                     l2925 03C7  
                                   l5238 05F5                                     l5350 0E2B  
                                   l5342 0E10                                     l5430 1312  
                                   l5190 0393                                     l5166 0357  
                                   l6142 0B51                                     l6118 0AFD  
                                   l5504 0C31                                     l5352 0E34  
                                   l5344 0E1E                                     l6064 13A0  
                                   l5192 039D                                     l5184 0380  
                                   l5280 0541                                     l6152 1630  
                                   l5354 0E37                                     l5442 10D0  
                                   l5426 1307                                     l5602 08A8  
                                   l5194 03A2                                     l5274 052B  
                                   l6082 16C7                                     l5380 1138  
                                   l5460 1713                                     l5612 08B8  
                                   l6412 0D57                                     l5196 03A6  
                                   l5292 057C                                     l6156 1642  
                                   l5470 171B                                     l5454 1708  
                                   l5358 0E45                                     l6430 0D91  
                                   l5390 13C5                                     l6094 16DD  
                                   l5472 1727                                     l2896 097B  
                                   l5528 0A04                                     l5624 08D4  
                                   l5632 08E0                                     l5608 08B2  
                                   l5616 08BE                                     l6432 0D9A  
                                   l6416 0D66                                     l5296 0584  
                                   l5392 13C7                                     l7064 176F  
                                   l5482 1742                                     l6442 0DC0  
                                   l6426 0D84                                     l5394 13C9  
                                   l5386 13C1                                     l5570 0865  
                                   l6186 0ACD                                     l5628 08DA  
                                   l5716 0D1B                                     l5396 13CB  
                                   l5388 13C3                                     l5572 0872  
                                   l7068 1779                                     l5486 174A  
                                   l5478 1739                                     l5646 14B6  
                                   l5566 085F                                     l5742 0EA5  
                                   l5726 0E6B                                     l6702 025C  
                                   l6552 0A33                                     l6464 154E  
                                   l5576 087E                                     l5736 0E8F  
                                   l6608 0EFA                                     l5594 089C  
                                   l6546 0A1A                                     l5682 126E  
                                   l5930 0940                                     l5850 0FDC  
                                   l6642 0F56                                     l6634 0F45  
                                   l6626 0F31                                     l6618 0F16  
                                   l5940 1355                                     l6556 0A79  
                                   l6468 1555                                     l5684 1274  
                                   l5916 090F                                     l5844 0FC1  
                                   l6716 02A0                                     l5942 1360  
                                   l5598 08A2                                     l5918 0927  
                                   l5766 1574                                     l5862 0FF7  
                                   l5854 0FE5                                     l6726 02D3  
                                   l6922 161D                                     l5858 0FEE  
                                   l6666 01E5                                     l6780 07AB  
                                   l5972 11E9                                     l5884 15B5  
                                   l6692 022A                                     l6676 01F5  
                                   l6668 01EB                                     l6774 079E  
                                   l6678 01FD                                     l6768 0776  
                                   l6776 07A4                                     l5984 14F4  
                                   l6960 0BA6                    _myMain_Initialization 10ED  
                                   l6878 0496                                     l6968 0BD2  
                                   _CFGS 0CAE                                     _FREE 0CAC  
                                   _LATA 010C                                     _LATB 010D  
                        __end_of_INT_ISR 2000                                     _LATC 010E  
                                   u4005 1732                                     u4015 173A  
                                   u3215 095D                                     u3235 0976  
                                   u3405 0381                                     u3255 0983  
                                   u4080 09B3                                     u3435 0394  
                                   u3285 0999                                     u3605 0650  
                                   u4085 09B1                                     u4510 1EAC  
                                   u3465 03A7                                     u3715 05A1  
                                   _PEIE 005E                                     u3565 0607  
                                   u3725 05A7                                     u3645 054D  
                                   _INTE 005C                                     _INTF 0059  
                                   u3575 0617                                     u3815 0E2C  
                                   u3495 03BA                                     u3655 055D  
                                   u3585 0637                                     u6145 1604  
                                   u3595 0646                                     u3755 0DE7  
                                   u3675 0585                                     u4725 134A  
                                   u3685 058B                                     u3785 0E11  
                                   u6185 0B7E                                     u6195 0BBC  
                                   u3975 171E                                     u3995 1728  
                                   u5955 0737                                     _LWLO 0CAD  
                                   _RFSW 00BE                                     _TMR0 0015  
                        __end_of_INT_Set 1E62                                     _RSSI 00BF  
                                   _WREN 0CAA                                     _Buz1 013C  
                                   __WDT 00E3                                     _main 1751  
                           ___ftpack@arg 0020                      __end_of_DlyOff_Main 0CC8  
                        __end_of_RF_Main 1E57                             ___ftpack@exp 0023  
                                   fsr0h 0005                                     fsr1h 0007  
                                   fsr0l 0004                                     indf0 0000  
                                   indf1 0001                                     fsr1l 0006  
    __size_of_setDimmerLights_TriggerAdj 0010                                     btemp 007E  
                        __end_of_WDT_Set 1172                                     ltemp 007E  
          __size_of_setRF_Initialization 0007                         _setDimmerReClock 1EB9  
                                   start 0016                                     ttemp 007E  
                                   wtemp 007E                      DelayTimejudge@value 0021  
                          _RfPointSelect 1EF1               __end_of_setRFSW_AdjControl 159C  
                           ___ftmul@cntr 003C                             ___ftmul@sign 003D  
                                  ??_ISR 0077                             ___fttol@exp1 0058  
                           ___fttol@lval 0054           __size_of_DimmerIntrPointSelect 0012  
                       __end_of_LED_Main 1F21            __end_of_DimmerIntrPointSelect 10B2  
                 _setDimmerLights_IntrGO 106D                    ?_setDimmerLights_Main 0070  
                        ?_setDelayOff_GO 0023                                    ?_main 006C  
              setControl_Lights_Table@rf 0067                          __end_of___awdiv 1751  
                        __end_of___ftadd 041E                          __end_of___ftdiv 0671  
                        __end_of___ftmul 05C8                          ___awdiv@divisor 0020  
                        __end_of___fttol 0E4E             setDimmerLights_AdjGo@command 0022  
                                  _IOCBF 0396                                    _IOCBN 0395  
                                  _IOCBP 0394                                    _IOCIE 005B  
                                  _IOCIF 0058                                    i1l769 10A9  
                 _setDimmerLights_Switch 1FAF                          ___awdiv@counter 0025  
          __size_of_CC2500_FrequencyCabr 000C                                    _RFSW1 00E5  
                                  _RFSW2 00E6                                    _PORTA 000C  
                                  _PORTB 000D                                    _PORTC 000E  
                           ?_setLED_Main 0070                       setRF_Learn@command 0022  
                                  _TRISA 008C                                    _TRISB 008D  
                                  _TRISC 008E                                    _WPUB0 1068  
                                  _WPUB1 1069                                    _WPUB2 106A  
                          setRF_Learn@rf 0023                            __CFG_WRT$HALF 0000  
                       __end_of_TMR0_ISR 14A9             __size_of_CC2500_WriteCommand 0010  
                       __end_of_TMR0_Set 1F55                            ___awtoft@sign 002D  
            DimmerIntrPointSelect@lights 0071                            ___ftpack@sign 0024  
                        __end_of_my_Main 0BD8              __size_of_CC2500_ClearRXFIFO 0004  
                          ??_Buzzer_Main 0020                         __end_of_WDT_Main 1242  
            __size_of_CC2500_ClearTXFIFO 0004                      CC2500_RxData@loop_f 0025  
                         __pbitbssCOMMON 03E0                      setMemory_GO@command 0022  
                         __CFG_BOREN$OFF 0000                      __end_of_Buz_Counter 1F9F  
                     Flash_Memory_Read@i 0021                         ?_CC2500_ReadByte 0070  
                                  ltemp0 007E                                    ltemp1 0082  
                                  ltemp2 0086                                    ltemp3 0080  
         __size_of_setLED_Initialization 0011            __end_of_setLED_Initialization 10A0  
                                  ttemp0 007E                                    ttemp1 0081  
                                  ttemp2 0084                                    ttemp3 0087  
                                  ttemp4 007F                             ?_setRF_Learn 0022  
                                  status 0003                                    wtemp0 007E  
                                  wtemp1 0080                                    wtemp2 0082  
                                  wtemp3 0084                                    wtemp4 0086  
                                  wtemp5 0088                                    wtemp6 007F  
                     _setRF_DimmerLights 09A9              __size_of_Flash_Memory_Write 0031  
                      ?_CC2500_SIDLEMode 0070               __size_of_RF_Initialization 0004  
                         ?_RfPointSelect 0070                           setSw_Status@sw 0023  
       __size_of_DelayOff_Initialization 0008                setDimmerLights_Main@clear 0065  
                 ??_Flash_Memory_Erasing 0020                          _getPercentValue 17A5  
                     ??_CC2500_SIDLEMode 0024                          __initialization 0018  
                       ?_CC2500_PowerRST 0070                        ??_Sw_DimmerOnFunc 0062  
                      ??_setPercentValue 0059                             __end_of_main 17A5  
                    ?_setRF_DimmerLights 005D                         __end_of_Fosc_Set 1E4F  
                       ?_CC2500_WriteREG 0022                                ??_ADC_Set 0020  
                __end_of_setDimmerLights 0D47                     _setSw_Initialization 1E8C  
                                 ??_main 0070                            ___fttol@sign1 0053  
                           ?_setLog_Code 0070                  _setControl_Lights_Table 0F6E  
                 ?_Buzzer_Initialization 0070                  ??_DlyOff_Initialization 0022  
                             _Receive_OK 03E0                                ??_IOC_ISR 0073  
                              ??_IOC_Set 0020          __end_of_DimmerLightsPointSelect 10C5  
                 ?_setDimmerLights_AdjRF 0070                                ??_INT_ISR 0074  
                 ?_setDimmerLights_AdjGo 0022                 __size_of_setRFSW_Control 0090  
                       ??_setRFSW_Status 0023                                ??_INT_Set 0020  
                ??_Switch_Initialization 0025                        i1RfPointSelect@rf 0071  
                   ??_setRF_DimmerLights 005E                              _DlyOff_Main 0C4F  
                 ?_myMain_Initialization 0070                                   _ADCON0 009D  
                                 _ADCON1 009E                                ??_RF_Main 006C  
                                 _ADRESH 009C                                   _ADRESL 009B  
                       ___awdiv@dividend 0022                                ??_WDT_Set 0020  
                         setRF_Enable@rf 0023                         __end_of___awtoft 12FB  
                                 _ANSELA 018C                                   _ANSELB 018D  
                                 _ANSELC 018E                         __end_of___ftpack 09A9  
                                 _IOCBF2 1CB2                  _setDimmerLights_Trigger 1FBF  
                                 i1l6312 00B1                                   i1l6330 00FB  
                                 i1l6332 0101                                   i1l6308 00AA  
                                 i1l6360 0182                                   i1l6344 0136  
                                 i1l6352 0161                                   i1l6336 0114  
                                 i1l6370 01B4                                   i1l6338 011A  
                                 i1l6380 01C7                                   i1l6348 014D  
                                 i1l6358 017C                                   i1l6374 01BA  
                                 _FVRCON 0117                                   _PMADRH 0192  
                                 _PMADRL 0191                                   _PMDATH 0194  
                                 _PMDATL 0193                                   _PMCON2 0196  
                                 u605_25 1498                                   u518_25 0085  
                                 _OSCCON 0099                                   _TMR0IE 005D  
                                 _TMR0IF 005A                                   _IO_Set 11BD  
                                 _WDTCON 0097                       DelayTime_1us@count 0020  
                  _Dimmer_Initialization 1E6E           __size_of_CC2500_PowerOnInitial 0015  
          __end_of_CC2500_PowerOnInitial 1116                                   _Dimmer 00B9  
                                 _DlySw1 00C6                                   _DlySw2 00CB  
             __end_of_Mcu_Initialization 120B                      __end_of_Buzzer_Main 07B9  
                                 _Memory 00EA                                   _Timer0 00E7  
     __end_of_setDimmerLights_TriggerAdj 1FEF               _setDimmerLights_TriggerAdj 1FDF  
          setDimmerLights_Switch@command 0022                                ??___awdiv 0024  
                              ??___ftadd 0044             __size_of_DelayOffPointSelect 0017  
                              ??___ftdiv 0034                    setDimmerLights@lights 0026  
                              ??___ftmul 0034                                ??___fttol 004F  
           ?_Flash_Memory_Initialization 0070                          i1_RfPointSelect 1EAE  
            setDimmerLights_AdjRF@lights 0060                   ??_setDimmerLights_Main 0065  
                                 _r_data 00C4                                   _s_data 00C5  
                                 _setLED 088C                                   _myMain 00E9  
                       _DimmerLightsIntr 007A                    ?_setSw_Initialization 0070  
                  setDimmerLights@status 0024                         ___awdiv@quotient 0027  
                                 _setBuz 0BD8         ??_setDimmerLights_Initialization 0022  
        ?_setDimmerLights_Initialization 0070                    ___ftmul@f3_as_product 0039  
           ??_getDimmerLights_StatusFlag 0020                                ??_my_Main 002D  
    __end_of_setDimmerLights_IntrControl 01CE              _setDimmerLights_IntrControl 004C  
               Flash_Memory_Read@address 0022                              _Buz_Counter 1F8F  
                      RfSWPointSelect@sw 0021                         ??_setRF_RxStatus 0073  
                  __end_of_SwPointSelect 10D9                            ?_setRF_Enable 0022  
                        _RfSWPointSelect 1116             __size_of_Flash_Memory_Modify 006D  
      setDimmerLights_IntrControl@lights 0076              __size_of_DimmerLights_Close 0014  
                __size_of_LedPointSelect 0022                      Flash_Memory_Write@i 0021  
           __size_of_Flash_Memory_Unlock 0009                               _TouchPower 1E57  
                      ?_Sw_DimmerAdjFunc 0070              __size_of_CC2500_InitPATable 001F  
                    CC2500_TxData@loop_e 0025                  __end_of_getPercentValue 1800  
       __end_of_CC2500_registers_address 102F                  __end_of__initialization 0048  
                        ??_RfPointSelect 0020              setDimmerLights_AdjGo@lights 0023  
                              ?_LED_Main 0070                               ___ftadd@f1 003E  
                             ___ftadd@f2 0041                       ??_Sw_DimmerAdjFunc 0024  
                    setSw_Enable@command 0022                               ___ftdiv@f1 0031  
                             ___ftdiv@f2 002E                               ___ftdiv@f3 0039  
                      ?_Sw_DimmerOffFunc 0070                               ___awtoft@c 0028  
           ?_DimmerLights_Initialization 0070                               ___ftmul@f1 002E  
                             ___ftmul@f2 0031                               ___fttol@f1 004B  
                         __pcstackCOMMON 0070                       ??_Sw_DimmerOffFunc 0062  
                           __pidataBANK3 12B9                                ?_TMR0_ISR 0070  
                              ?_TMR0_Set 0070             __size_of_setDimmerLights_Adj 003E  
                     _LED_Initialization 1F09                ??_setControl_Lights_Table 0067  
                       ??_DelayTimejudge 0020              ?_getDimmerLights_StatusFlag 0070  
          ??_Flash_Memory_Initialization 005D                 __size_of_setRF_ReceiveGO 000D  
                       ?_setDimmerLights 0024                                ?_WDT_Main 0070  
               __end_of_setDimmerReClock 1EC4                       __size_of_getRxData 004D  
                    ?_LED_Initialization 0070                        ?_CC2500_WriteByte 0070  
                         ??_setRF_Enable 0023                           _DimmerLights11 00BA  
                         _DimmerLights22 00BB                     __size_of_setLED_Main 0040  
              ??_setDimmerLights_Trigger 0023                       ??_CC2500_WriteByte 0020  
           setDimmerLights_Switch@lights 0023                               __pbssBANK1 00A0  
                             __pbssBANK2 0120                               __pbssBANK3 01C0  
                             __pbssBANK4 0220                                ?_Fosc_Set 0070  
                            _Buzzer_Main 0717                        ??_setRFSW_Control 0062  
                 ?_Dimmer_Initialization 0070                                  ?_IO_Set 0070  
                             ??_LED_Main 0025                            ?_setMemory_GO 0070  
                        __CFG_VCAPEN$OFF 0000                  _DelayOff_Initialization 1E7C  
                             __pnvCOMMON 007D                            ??_Switch_Main 006A  
                         DelayTime_1us@i 0022                           DelayTime_1us@j 0024  
                   ??_LED_Initialization 0025             setDimmerLights_IntrGO@lights 0072  
                           _DimmerLights 0079                        LedPointSelect@led 0021  
                __end_ofi1_RfPointSelect 1EB9                       __size_of_setINT_GO 0009  
                 __size_of_DelayOff_Main 0008                     __size_of_setRF_Learn 000F  
                            setBuz@count 002C                               __pmaintext 1751  
                    _CC2500_WriteCommand 1F9F         __size_of_DimmerLightsPointSelect 0013  
                       ??_setDelayOff_GO 0025            ??_DimmerLights_Initialization 0024  
                ?_setDimmerLights_IntrGO 0070                               ??_TMR0_ISR 0077  
                             ??_TMR0_Set 0020                               __pintentry 0004  
                 ??_setSw_Initialization 0024                            ?_setSw_Enable 0070  
                     __size_of_setTxData 00A6                  ?_setDimmerLights_Switch 0022  
                   Sw_DimmerAdjFunc@Idle 0024                                  ?_setLED 0022  
                 __size_of_DelayTime_1us 0026                                  _ADC_Set 1E75  
                                ?_setBuz 0029                                ?___awtoft 0028  
                              ?___ftpack 0020                               ??_WDT_Main 0020  
           __end_of_setRF_Initialization 106D                            ?_setSw_Status 0022  
                     _setRFSW_AdjControl 155C                  __end_of_RfSWPointSelect 112C  
                      Sw_DimmerOnFunc@sw 0063                                  _IOC_ISR 107E  
                                _IOC_Set 1F3B                     __size_of_setLog_Code 0047  
                                _INT_ISR 1FEF                                  _INT_Set 1E5C  
                   ?_CC2500_WriteCommand 0070                        _Flash_Memory_Main 15E0  
                      _Flash_Memory_Read 11A4                   __size_of_CC2500_RxData 005E  
                 __size_of_CC2500_TxData 0044                      ?_setRFSW_AdjControl 0070  
                            setTxData@rf 0023                                  _RF_Data 00A0  
                                _RF_Main 1E53                       ?_Flash_Memory_Main 0070  
                     ?_Flash_Memory_Read 0070                                  _WDT_Set 115A  
        __end_of_setControl_Lights_Table 1000                               ??_Fosc_Set 0020  
                            ?_TouchPower 0070                          _Sw_DimmerOnFunc 0AF2  
                        _setPercentValue 166A                            setLog_Code@rf 002E  
                         ??_setMemory_GO 0020                         ?_getPercentValue 0070  
                                _Dimmer1 00E0             __end_of_CC2500_FrequencyCabr 1EF1  
                        __size_of_IO_Set 0019                      ??_Flash_Memory_Main 0027  
                    ??_Flash_Memory_Read 0020                                  _VarLED1 00D8  
                                _VarLED2 00DC                        __end_of_getRxData 16FD  
               _CC2500_registers_address 1000           __end_of_setDimmerLights_IntrGO 107E  
                         RF_RxDisable@rf 0024          __end_of_setDimmerLights_Trigger 1FCF  
                   ??_setRFSW_AdjControl 0064           __end_of_setDimmerLights_Switch 1FBF  
                                ___awdiv 16FD                                  ___ftadd 0328  
                         ??_setSw_Enable 0022                                  ___ftdiv 05C8  
                                ___ftmul 0514                                  ___fttol 0DC7  
                    __end_of_Switch_Main 1E9C                  ??_Buzzer_Initialization 0020  
                                __myMain 01C0                               ??___awtoft 002B  
                             ??___ftpack 0025                          __size_of_setLED 005E  
                   setRFSW_AdjControl@sw 0066                          __size_of_setBuz 0077  
                         ??_setSw_Status 0023                                  __ptext1 0B64  
                                __ptext2 1242                                  __ptext3 0802  
                                __ptext4 10ED                                  __ptext5 1226  
                                __ptext6 0002                                  __ptext7 1E94  
                                __ptext8 01CE                                  __ptext9 1F80  
                ??_setDimmerLights_AdjRF 005F                  ??_setDimmerLights_AdjGo 0023  
              __size_of_CC2500_SIDLEMode 0004                      Sw_DimmerOnFunc@Idle 0062  
                  _DimmerIntrPointSelect 10A0                             __size_of_ISR 0012  
              __end_of_Flash_Memory_Main 1625                __end_of_Flash_Memory_Read 11BD  
                             _setRF_Main 0EDE                  ??_myMain_Initialization 0020  
                          _DelayOff_Main 1E84                        _DimmerLights_Main 1EDA  
                                _my_Main 0B64                        __end_of_setINT_GO 1EAE  
         __size_of_DlyOff_Initialization 000B                    ??_CC2500_WriteCommand 0022  
          __end_of_DlyOff_Initialization 1EDA                        ??_setRF_ReceiveGO 0073  
             __end_of_CC2500_ClearRXFIFO 1E43               __end_of_CC2500_ClearTXFIFO 1E47  
          DimmerLightsPointSelect@lights 0021                             ?_DlyOff_Main 0070  
                     ?_DimmerLights_Main 0070                                  _product 007D  
                         _LedPointSelect 12FB                      _DelayOffPointSelect 112C  
                                clrloop0 1E69           __size_of_Switch_Initialization 000D  
          __end_of_Switch_Initialization 1F62                     end_of_initialization 0048  
              ??_DelayOff_Initialization 0023                        _CC2500_InitSetREG 1365  
                          _DelayTime_1us 133F                        __end_of_setTxData 0717  
             __end_of_Flash_Memory_Write 1474                                  init_ram 1E62  
                     ?_CC2500_InitSetREG 0070                      ??_DimmerLights_Main 0067  
                   Flash_Memory_Read@ret 0023                                  initloop 1E63  
                             _setSw_Main 01CE                    CC2500_ReadByte@loop_b 0021  
                      _CC2500_ReadStatus 120B                     Flash_Memory_Modify@i 0026  
                  _setLED_Initialization 108F                         ?i1_RfPointSelect 0070  
                     ?_CC2500_ReadStatus 0070                         setRFSW_Status@sw 0023  
               __size_of_CC2500_ReadByte 001D                            _CC2500_RxData 08EA  
                          _CC2500_TxData 159C                      ??_CC2500_InitSetREG 0025  
                   __end_of_setRF_Enable 082F              ?_setDimmerLights_TriggerAdj 0022  
          __size_of_Flash_Memory_Erasing 000C                     ?_DelayOffPointSelect 0070  
                    _Flash_Memory_Modify 0A14                             __pstringtext 1000  
                    _Flash_Memory_Unlock 1E9C                      ??_CC2500_ReadStatus 0022  
                 setRF_Initialization@rf 0070         getDimmerLights_StatusFlag@Status 0021  
                CC2500_InitSetREG@loop_c 0028                      __size_of_TouchPower 0005  
               setLED_Initialization@led 0024                   setSw_Initialization@sw 0024  
              __end_of_DimmerLights_Main 1EE5                       _Mcu_Initialization 11F0  
               __size_of_CC2500_PowerRST 0030                           ?_DelayOff_Main 0070  
                       ?_RfSWPointSelect 0070                          _setSw_Main$4998 0067  
                        _setSw_Main$4999 0068                         __CFG_FOSC$INTOSC 0000  
                           ?_Buz_Counter 0070                   __end_of_LedPointSelect 131D  
                __end_of_Sw_DimmerOnFunc 0B64                  __end_of_setPercentValue 16B0  
               __size_of_CC2500_WriteREG 0019                __end_of_CC2500_InitSetREG 138F  
                    ?_Mcu_Initialization 0070                     ?_Flash_Memory_Modify 0070  
            __size_of_setRF_DimmerLights 006B                           ?_DelayTime_1us 0020  
                    _setDimmerLights_Adj 14DE                     ?_Flash_Memory_Unlock 0070  
              __end_of_CC2500_ReadStatus 1226                            ?_RF_RxDisable 0070  
                            ___ftdiv@exp 003C                           __end_of_IO_Set 11D6  
                   _setRF_Initialization 1066                              _Switch_Main 1E94  
                      __size_of_LED_Main 000C                           ?_CC2500_RxData 0070  
                         ?_CC2500_TxData 0070                  _DimmerLightsPointSelect 10B2  
                            ___ftmul@exp 0038                    _CC2500_PowerOnInitial 1101  
                   ??_Mcu_Initialization 0021                    ??_DelayOffPointSelect 0020  
                          ?_WDT_Clearing 0070                     ?_setDimmerLights_Adj 0062  
              __size_of_Sw_DimmerAdjFunc 0045                     setRF_DimmerLights@on 005D  
                           setRF_Main@rf 006A                        __size_of_TMR0_ISR 0035  
                 ?_DimmerIntrPointSelect 0070                        __size_of_TMR0_Set 000D  
                   __end_of_setMemory_GO 12B9            __size_of_setDimmerLights_Main 0080  
                         __end_of_setLED 08EA                           __end_of_setBuz 0C4F  
        _getDimmerLights_StatusFlag$1857 0022                     _CC2500_FrequencyCabr 1EE5  
              __size_of_Sw_DimmerOffFunc 0071               __size_of_Flash_Memory_Main 0045  
             __size_of_Flash_Memory_Read 0019                              ?_setRF_Main 0070  
                        _setRFSW_Control 0E4E                        __size_of_WDT_Main 001C  
                      ?_setDimmerReClock 0070                      start_initialization 0018  
                      _setRF_DimmerValue 14A9                          ?_LedPointSelect 0070  
             __end_of_DimmerLights_Close 10ED                              __end_of_ISR 0016  
                  ??_Flash_Memory_Modify 0024                       ??_setDimmerReClock 0073  
                     ?_setRF_DimmerValue 0070               __end_of_CC2500_InitPATable 129A  
                  ??_Flash_Memory_Unlock 0020                  ??_Dimmer_Initialization 0020  
                         ??_RF_RxDisable 0024                     __end_of_setSw_Enable 125E  
                        RfPointSelect@rf 0021                             ?_Buzzer_Main 0070  
                               ??_IO_Set 0020                                _VarErrLED 00D4  
                            ?_setSw_Main 0070                      ??_setRF_DimmerValue 0061  
                 ?_setLED_Initialization 0070                     __end_of_setSw_Status 1F80  
                     Sw_DimmerAdjFunc@sw 0025                    ?_setRF_Initialization 0070  
                      __size_of_Fosc_Set 0004                                _VarMemory 0220  
                __size_of_setRFSW_Status 000F                    __end_of_RfPointSelect 1EFD  
              __size_of_CC2500_WriteByte 0019                                _VarTimer0 015A  
                         ??_WDT_Clearing 0020                                _Rx_Length 00C0  
                setRF_DimmerValue@lights 0063                    ??_setDimmerLights_Adj 0063  
                 __size_of_SwPointSelect 0014                                _Tx_Length 00C2  
                            __pdataBANK3 01A0                                 ??_setLED 0023  
                               ?_ADC_Set 0070                                 ??_setBuz 002B  
                        ??_DelayOff_Main 0065                        ??_CC2500_ReadByte 0020  
                       _CC2500_SIDLEMode 1E47               __size_of_DimmerLights_Main 000B  
              __end_of_setRF_DimmerValue 14DE                    ?_CC2500_FrequencyCabr 0070  
                       setINT_GO@command 0020                            ??_setLED_Main 0022  
                      __size_of___awtoft 0022                        __size_of___ftpack 0061  
                               ?_IOC_ISR 0070                          _setRF_Main$4185 006B  
                            __pbssCOMMON 0078                                 ?_IOC_Set 0070  
                              ___latbits 0003                                 ?_INT_ISR 0070  
                    setRF_Enable@command 0022                         ?_Sw_DimmerOnFunc 0070  
                          __pcstackBANK0 0020                                 ?_INT_Set 0070  
                       ?_setPercentValue 0070                          ??_DelayTime_1us 0022  
             __size_of_CC2500_InitSetREG 002A                 __size_of_setDimmerLights 007F  
                          DlyOff_Main@sw 0064                        ??_CC2500_PowerRST 0026  
                               ?_RF_Main 0070                                 ?_WDT_Set 0070  
                           ??_TouchPower 0020                     __size_of_DlyOff_Main 0079  
             __size_of_CC2500_ReadStatus 001B                            ??_setRF_Learn 0023  
                      ??_CC2500_WriteREG 0023                            _DimmerLights1 0120  
                          _DimmerLights2 012E                    CC2500_WriteREG@w_addr 0024  
                  setDelayOff_GO@command 0023                ??_DimmerLightsPointSelect 0020  
                  __size_of_setRF_Enable 002D                          ??_CC2500_RxData 0024  
                __size_of_setRF_RxStatus 000D                          ??_CC2500_TxData 0024  
                              __pnvBANK1 00E7              __size_of_LED_Initialization 000C  
                 ?_CC2500_PowerOnInitial 0070                      __size_of_setRF_Main 0090  
                  DelayOffPointSelect@sw 0021                               setBuz@time 0029  
                    setDelayOff_GO@value 0024                 ?_setControl_Lights_Table 0070  
    __end_of_Flash_Memory_Initialization 0514              _Flash_Memory_Initialization 041E  
                               ?___awdiv 0020                                __ptext100 133F  
                              __ptext101 1E43                                __ptext110 1F8F  
                              __ptext102 1E3F                                __ptext111 107E  
                              __ptext103 1F9F                                __ptext112 1EB9  
                              __ptext104 1172                                __ptext113 106D  
                              __ptext105 0717                                __ptext114 10A0  
                              __ptext106 1EC4                                __ptext115 1FEF  
                              __ptext116 1F2E                                __ptext108 1474  
                              __ptext117 1F21                                __ptext109 004C  
                               ?___ftadd 003E                                __ptext118 1EAE  
                              _getRxData 16B0                                 ?___ftdiv 002E  
                               ?___ftmul 002E                                 ?___fttol 004B  
                __end_of_setRFSW_Control 0EDE                          _setRF_ReceiveGO 1F21  
          __size_of_setSw_Initialization 0008           __size_of_Buzzer_Initialization 000B  
          __end_of_Buzzer_Initialization 1ECF                         getPercentValue@i 005C  
                       setPercentValue@i 005A                            ??_setLog_Code 002D  
                     __end_of_TouchPower 1E5C                 ?_setDimmerLights_Trigger 0022  
                        DelayTimejudge@i 0022                      __size_of_setSw_Main 015A  
           CC2500_ReadStatus@status_addr 0023           __size_of_setDimmerLights_AdjRF 0022  
         __size_of_setDimmerLights_AdjGo 0010            __end_of_setDimmerLights_AdjRF 133F  
          __end_of_setDimmerLights_AdjGo 1FDF                   CC2500_WriteByte@loop_a 0021  
                               ?_my_Main 0070                                _r_address 00C3  
         __size_of_myMain_Initialization 0014             __end_of_CC2500_patable_vaule 1066  
          __end_of_myMain_Initialization 1101                             _setRF_Enable 0802  
                __size_of_DelayTimejudge 002C                            _SwPointSelect 10C5  
                   __size_of_Buz_Counter 0010                       Sw_DimmerOffFunc@sw 0064  
                              _setINT_GO 1EA5                      __end_of_setLED_Main 155C  
                 ??_setRF_Initialization 0020                        _CC2500_rfSettings 102F  
                               _LED_Main 1F15                          SwPointSelect@sw 0021  
                              clear_ram0 1E68                 CC2500_InitPATable@loop_d 0027  
                              _setTxData 0671      __end_of_DimmerLights_Initialization 115A  
            _DimmerLights_Initialization 1143                       _CC2500_ClearRXFIFO 1E3F  
                     _CC2500_ClearTXFIFO 1E43           setDimmerLights_Trigger@command 0022  
               setRF_DimmerLights@lights 0061                                 _GO_nDONE 04E9  
                    __end_of_setRF_Learn 1F8F                 __size_of_getPercentValue 005B  
               setRF_DimmerLights@status 0060                   setRF_ReceiveGO@command 0072  
            __size_of_setRFSW_AdjControl 0040                    __size_of_setMemory_GO 001F  
                     _Flash_Memory_Write 1443                               ?_getRxData 0070  
                               _TMR0_ISR 1474                   CC2500_InitSetREG@temp1 0026  
                 CC2500_InitSetREG@temp2 0027                        setRF_ReceiveGO@rf 0073  
                               _TMR0_Set 1F48                         _Sw_DimmerAdjFunc 1625  
                    ?_CC2500_ClearRXFIFO 0070                      ?_CC2500_ClearTXFIFO 0070  
      setDimmerLights_TriggerAdj@command 0022                                 _RF_Count 00B5  
                   __end_of_RF_RxDisable 13BA              __end_of_CC2500_WriteCommand 1FAF  
                 ??_CC2500_FrequencyCabr 0026                                 _WDT_Main 1226  
                DlyOff_Initialization@sw 0022                         __size_of_ADC_Set 0007  
             __size_of_setRF_DimmerValue 0035                      ?_Flash_Memory_Write 0070  
                       _Sw_DimmerOffFunc 0A81                  __size_of_setDelayOff_GO 005D  
                  __size_of_setSw_Enable 001C                                 _DelayOff 00B8  
                           setSw_Main@sw 0069                         __size_of_IOC_ISR 0011  
           ?_setDimmerLights_IntrControl 0070                         __size_of_IOC_Set 000D  
           __end_of_Flash_Memory_Erasing 1F09                           ?_SwPointSelect 0070  
                       __size_of_INT_ISR 0011                           setLED_Main@led 0024  
                   __end_of_WDT_Clearing 0004                         __size_of_INT_Set 0006  
                    __end_of_setLog_Code 0800                    _DlyOff_Initialization 1ECF  
                  __size_of_setSw_Status 000F                               ?_setINT_GO 0070  
                   ??_CC2500_ClearRXFIFO 0024                     ??_CC2500_ClearTXFIFO 0024  
              __end_of_CC2500_rfSettings 105E                         __size_of_RF_Main 0004  
                               _Fosc_Set 1E4B                         __size_of_WDT_Set 0018  
                  _Switch_Initialization 1F55                     ??_Flash_Memory_Write 0020  
                      ??_setDimmerLights 0025                           _setRFSW_Status 1F62  
                           _setMemory_GO 129A                     __size_of_Buzzer_Main 00A2  
                             ?_setTxData 0070                             ?_Switch_Main 0070  
                       _CC2500_WriteByte 1172             Flash_Memory_Initialization@i 005E  
                __end_of_setRF_ReceiveGO 1F2E                        setRFSW_Control@sw 0063  
                              setLED@led 0023                  ??_DimmerIntrPointSelect 0070  
                       __size_of___awdiv 0054                         __size_of___ftadd 00F6  
                       ?_setRFSW_Control 0070                         __size_of___ftdiv 00A9  
                           _setSw_Enable 1242                         __size_of___ftmul 00B4  
                       __size_of___fttol 0087                 __size_ofi1_RfPointSelect 000B  
                               ___awtoft 12D9                         ??_LedPointSelect 0020  
                               ___ftpack 0948                             _setSw_Status 1F71  
                           ??_setRF_Main 0069                     CC2500_WriteREG@value 0022  
                            _setLED_Main 151C                    setRFSW_Status@command 0022  
             __end_of_setRF_DimmerLights 0A14                 ?_DelayOff_Initialization 0070  
                       setDelayOff_GO@sw 0027                         __size_of_my_Main 0074  
                               __ptext10 0AF2                                 __ptext11 0A81  
                               __ptext20 16B0                                 __ptext12 1625  
                               __ptext21 07B9                                 __ptext13 1FDF  
                               __ptext30 0514                                 __ptext22 0F6E  
                               __ptext14 1FCF                                 __ptext31 0328  
                               __ptext23 0E4E                                 __ptext15 1F55  
                               __ptext40 11F0                                 __ptext32 138F  
                               __ptext24 082F                                 __ptext16 1E8C  
                               __ptext41 115A                                 __ptext33 1EA5  
                               __ptext25 13BA                                 __ptext17 1E57  
                               __ptext50 1F09                                 __ptext42 1F48  
                               __ptext34 159C                                 __ptext26 155C  
                               __ptext18 1E53                                 __ptext51 108F  
                               __ptext43 11BD                                 __ptext35 08EA  
                               __ptext27 14A9                                 __ptext19 0EDE  
                               __ptext60 0D47                                 __ptext52 15E0  
                               __ptext44 1F3B                                 __ptext36 120B  
                               __ptext28 131D                                 __ptext61 14DE  
                               __ptext53 0A14                                 __ptext45 1E5C  
                               __ptext37 125E                                 __ptext29 17A5  
                               __ptext70 1E6E                                 __ptext62 0CC8  
                               __ptext54 1EFD                                 __ptext46 1E4B  
                               __ptext38 1E4F                                 __ptext71 1E84  
                               __ptext63 088C                                 __ptext55 041E  
                               __ptext47 1E75                                 __ptext39 1066  
                               __ptext80 05C8                                 __ptext72 0C4F  
                               __ptext64 12FB                                 __ptext56 1443  
                               __ptext48 1F15                                 __ptext81 12D9  
                               __ptext73 0671                                 __ptext65 10D9  
                               __ptext57 1E9C                                 __ptext49 151C  
                               __ptext90 1E7C                                 __ptext82 0948  
                               __ptext74 1EF1                                 __ptext66 129A  
                               __ptext58 11A4                                 __ptext91 1ECF  
                               __ptext83 1F62                                 __ptext75 1F71  
                               __ptext67 11D6                                 __ptext59 1EDA  
                               __ptext92 112C                                 __ptext84 1116  
                               __ptext76 10C5                                 __ptext68 1143  
                               __ptext93 1101                                 __ptext85 1FBF  
                               __ptext77 09A9                                 __ptext69 13E6  
                               __ptext94 1E47                                 __ptext86 1FAF  
                               __ptext78 166A                                 __ptext95 1413  
                               __ptext87 10B2                                 __ptext79 0DC7  
                               __ptext96 1365                                 __ptext88 0BD8  
                               __ptext97 127B                                 __ptext89 16FD  
                               __ptext98 118B                                 __ptext99 1EE5  
                               __product 01A0            ??_setDimmerLights_IntrControl 0072  
                ??_setLED_Initialization 0024                 __size_of_RfSWPointSelect 0016  
         __size_of_Dimmer_Initialization 0007                   __end_of_setRFSW_Status 1F71  
          __end_of_Dimmer_Initialization 1E75             __end_of_setDimmerLights_Main 0DC7  
               ??_setDimmerLights_IntrGO 0072                             ??_setSw_Main 0065  
                          setLED@command 0022                            __size_of_main 0054  
                            _setRF_Learn 1F80                 __end_of_CC2500_SIDLEMode 1E4B  
                         _setRF_RxStatus 1F2E               setDimmerLights_Main@lights 0066  
            __end_of_DelayOffPointSelect 1143               CC2500_WriteCommand@command 0023  
                     _DimmerLights_Close 10D9                 ??_setDimmerLights_Switch 0023  
              __size_of_setDimmerReClock 000B                          _CC2500_ReadByte 125E  
                     _CC2500_InitPATable 127B      __size_of_getDimmerLights_StatusFlag 001A  
          setDimmerLights_Trigger@lights 0023                       __end_of_setRF_Main 0F6E  
            __size_of_Mcu_Initialization 001B                     _CC2500_patable_vaule 105E  
                            ??_getRxData 0068                      ?_DimmerLights_Close 0070  
       setDimmerLights_TriggerAdj@lights 0023                                 main@argc 006C  
                               main@argv 006E                      ?_CC2500_InitPATable 0070  
                        _CC2500_PowerRST 1413              __end_of_Flash_Memory_Modify 0A81  
                      ??_getPercentValue 0059                              _setLog_Code 07B9  
                  setRF_RxStatus@command 0072              __end_of_Flash_Memory_Unlock 1EA5  
                        ??_SwPointSelect 0020                          _CC2500_WriteREG 118B  
                     __end_of_setSw_Main 0328                            _Transceive_OK 03E1  
                 ?_DlyOff_Initialization 0070                           _DelayTimejudge 13BA  
                            pic14e$flags 007E                     ??_DimmerLights_Close 0023  
                            ??_setINT_GO 0020                                 intlevel1 0000  
                   ??_CC2500_InitPATable 0025                   ?_Switch_Initialization 0070  
                 __end_of_setRF_RxStatus 1F3B                          ?_setRFSW_Status 0022  
                ??_CC2500_PowerOnInitial 0029   __end_of_setDimmerLights_Initialization 1413  
__size_of_setDimmerLights_Initialization 002D           _setDimmerLights_Initialization 13E6  
            __end_of_setDimmerLights_Adj 151C                              ??_setTxData 0022  
                       ?_setRF_ReceiveGO 0072                   CC2500_InitPATable@temp 0026  
                  __size_of_RF_RxDisable 002B                        _RF_Initialization 1E4F  
   __size_of_setDimmerLights_IntrControl 0182                     _Flash_Memory_Erasing 1EFD  
                     ?_RF_Initialization 0070                               _SPI0Buffer 00C1  
        __end_of_DelayOff_Initialization 1E84                               _OPTION_REG 0095  
                  __size_of_WDT_Clearing 0002                    __end_of_DelayOff_Main 1E8C  
                    ??_RF_Initialization 0021                              getRxData@rf 0068  
                         _setDelayOff_GO 082F         __size_of_setControl_Lights_Table 0092  
                 __end_of_DelayTimejudge 13E6                   __size_of_RfPointSelect 000C  
                      ??i1_RfPointSelect 0070     __size_of_Flash_Memory_Initialization 00F6  
                          ??_DlyOff_Main 0062                    __end_of_DelayTime_1us 1365  
               __end_of_Sw_DimmerAdjFunc 166A                  __end_of_CC2500_ReadByte 127B  
           __end_of_setSw_Initialization 1E94                          ?_setRF_RxStatus 0072  
                   getPercentValue@value 005B                             _RF_RxDisable 138F  
             __end_of_LED_Initialization 1F15         __size_of_setDimmerLights_Trigger 0010  
               __size_of_Sw_DimmerOnFunc 0072          __size_of_setDimmerLights_IntrGO 0011  
               __size_of_setPercentValue 0046                     setPercentValue@value 0059  
              __end_of_RF_Initialization 1E53                 __end_of_Sw_DimmerOffFunc 0AF2  
        __size_of_setDimmerLights_Switch 0010                        ??_RfSWPointSelect 0020  
                       setRF_RxStatus@rf 0073                    __end_of_CC2500_RxData 0948  
                  __end_of_CC2500_TxData 15E0                      setSw_Status@command 0022  
                __end_of_CC2500_PowerRST 1443  
