

Microchip Technology PIC LITE Macro Assembler V1.32 build 58300 
                                                                                               Fri Oct 17 17:15:18 2014

Microchip Technology Omniscient Code Generator (Lite mode) build 58300
     1                           	processor	16F1518
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK4,global,class=CODE,delta=2
     5                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     6                           	psect	nvCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1
     9                           	psect	cinit,global,class=CODE,merge=1,delta=2
    10                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
    11                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    14                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    15                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    16                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    17                           	psect	dataBANK4,global,class=BANK4,space=1,delta=1
    18                           	psect	bssBANK5,global,class=BANK5,space=1,delta=1
    19                           	psect	clrtext,global,class=CODE,delta=2
    20                           	psect	inittext,global,class=CODE,delta=2
    21                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    22                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    23                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    24                           	psect	text1,local,class=CODE,merge=1,delta=2
    25                           	psect	text2,local,class=CODE,merge=1,delta=2
    26                           	psect	text3,local,class=CODE,merge=1,delta=2
    27                           	psect	text4,local,class=CODE,merge=1,delta=2
    28                           	psect	text5,local,class=CODE,merge=1,delta=2
    29                           	psect	text6,local,class=CODE,merge=1,delta=2
    30                           	psect	text7,local,class=CODE,merge=1,inline,delta=2
    31                           	psect	text8,local,class=CODE,merge=1,delta=2
    32                           	psect	text9,local,class=CODE,merge=1,inline,delta=2
    33                           	psect	text10,local,class=CODE,merge=1,delta=2
    34                           	psect	text11,local,class=CODE,merge=1,delta=2
    35                           	psect	text12,local,class=CODE,merge=1,delta=2
    36                           	psect	text13,local,class=CODE,merge=1,inline,delta=2
    37                           	psect	text14,local,class=CODE,merge=1,delta=2
    38                           	psect	text15,local,class=CODE,merge=1,inline,delta=2
    39                           	psect	text16,local,class=CODE,merge=1,delta=2
    40                           	psect	text17,local,class=CODE,merge=1,delta=2
    41                           	psect	text18,local,class=CODE,merge=1,delta=2
    42                           	psect	text19,local,class=CODE,merge=1,delta=2
    43                           	psect	text20,local,class=CODE,merge=1,delta=2
    44                           	psect	text21,local,class=CODE,merge=1,delta=2
    45                           	psect	text22,local,class=CODE,merge=1,delta=2
    46                           	psect	text23,local,class=CODE,merge=1,inline,delta=2
    47                           	psect	text24,local,class=CODE,merge=1,delta=2
    48                           	psect	text25,local,class=CODE,merge=1,delta=2
    49                           	psect	text26,local,class=CODE,merge=1,inline,delta=2
    50                           	psect	text27,local,class=CODE,merge=1,delta=2
    51                           	psect	text28,local,class=CODE,merge=1,delta=2
    52                           	psect	text29,local,class=CODE,merge=1,delta=2
    53                           	psect	text30,local,class=CODE,merge=1,delta=2
    54                           	psect	text31,local,class=CODE,merge=1,delta=2
    55                           	psect	text32,local,class=CODE,merge=1,delta=2
    56                           	psect	text33,local,class=CODE,merge=1,delta=2
    57                           	psect	text34,local,class=CODE,merge=1,delta=2
    58                           	psect	text35,local,class=CODE,merge=1,delta=2
    59                           	psect	text36,local,class=CODE,merge=1,delta=2
    60                           	psect	text37,local,class=CODE,merge=1,delta=2
    61                           	psect	text38,local,class=CODE,merge=1,delta=2
    62                           	psect	text39,local,class=CODE,merge=1,delta=2
    63                           	psect	text40,local,class=CODE,merge=1,delta=2
    64                           	psect	text41,local,class=CODE,merge=1,delta=2
    65                           	psect	text42,local,class=CODE,merge=1,delta=2
    66                           	psect	text43,local,class=CODE,merge=1,delta=2
    67                           	psect	text44,local,class=CODE,merge=1,delta=2
    68                           	psect	text45,local,class=CODE,merge=1,delta=2
    69                           	psect	text46,local,class=CODE,merge=1,delta=2
    70                           	psect	text47,local,class=CODE,merge=1,inline,delta=2
    71                           	psect	text48,local,class=CODE,merge=1,delta=2
    72                           	psect	text49,local,class=CODE,merge=1,delta=2
    73                           	psect	text50,local,class=CODE,merge=1,delta=2
    74                           	psect	text51,local,class=CODE,merge=1,delta=2
    75                           	psect	text52,local,class=CODE,merge=1,delta=2
    76                           	psect	text53,local,class=CODE,merge=1,delta=2
    77                           	psect	text54,local,class=CODE,merge=1,delta=2
    78                           	psect	text55,local,class=CODE,merge=1,delta=2
    79                           	psect	text56,local,class=CODE,merge=1,inline,delta=2
    80                           	psect	text57,local,class=CODE,merge=1,delta=2
    81                           	psect	text58,local,class=CODE,merge=1,delta=2
    82                           	psect	text59,local,class=CODE,merge=1,delta=2
    83                           	psect	text60,local,class=CODE,merge=1,delta=2
    84                           	psect	text61,local,class=CODE,merge=1,delta=2
    85                           	psect	text62,local,class=CODE,merge=1,delta=2
    86                           	psect	text63,local,class=CODE,merge=1,delta=2
    87                           	psect	text64,local,class=CODE,merge=1,delta=2
    88                           	psect	text65,local,class=CODE,merge=1,delta=2
    89                           	psect	text66,local,class=CODE,merge=1,delta=2
    90                           	psect	text67,local,class=CODE,merge=1,inline,delta=2
    91                           	psect	text68,local,class=CODE,merge=1,delta=2
    92                           	psect	text69,local,class=CODE,merge=1,inline,delta=2
    93                           	psect	text70,local,class=CODE,merge=1,delta=2
    94                           	psect	text71,local,class=CODE,merge=1,inline,delta=2
    95                           	psect	text72,local,class=CODE,merge=1,delta=2
    96                           	psect	text73,local,class=CODE,merge=1,delta=2
    97                           	psect	text74,local,class=CODE,merge=1,delta=2
    98                           	psect	text75,local,class=CODE,merge=1,delta=2
    99                           	psect	text76,local,class=CODE,merge=1,delta=2
   100                           	psect	text77,local,class=CODE,merge=1,delta=2
   101                           	psect	text78,local,class=CODE,merge=1,delta=2
   102                           	psect	text79,local,class=CODE,merge=1,delta=2
   103                           	psect	text80,local,class=CODE,merge=1,delta=2
   104                           	psect	text81,local,class=CODE,merge=1,delta=2
   105                           	psect	text82,local,class=CODE,merge=1,delta=2
   106                           	psect	text83,local,class=CODE,merge=1,delta=2
   107                           	psect	text84,local,class=CODE,merge=1,delta=2
   108                           	psect	text85,local,class=CODE,merge=1,delta=2
   109                           	psect	text86,local,class=CODE,merge=1,delta=2
   110                           	psect	text87,local,class=CODE,merge=1,delta=2
   111                           	psect	text88,local,class=CODE,merge=1,delta=2
   112                           	psect	text89,local,class=CODE,merge=1,delta=2
   113                           	psect	text90,local,class=CODE,merge=1,delta=2
   114                           	psect	text91,local,class=CODE,merge=1,delta=2
   115                           	psect	text92,local,class=CODE,merge=1,delta=2
   116                           	psect	text93,local,class=CODE,merge=1,delta=2
   117                           	psect	text94,local,class=CODE,merge=1,delta=2
   118                           	psect	text95,local,class=CODE,merge=1,inline,delta=2
   119                           	psect	text96,local,class=CODE,merge=1,inline,delta=2
   120                           	psect	text97,local,class=CODE,merge=1,delta=2
   121                           	psect	text98,local,class=CODE,merge=1,delta=2
   122                           	psect	text99,local,class=CODE,merge=1,delta=2
   123                           	psect	text100,local,class=CODE,merge=1,delta=2
   124                           	psect	text101,local,class=CODE,merge=1,delta=2
   125                           	psect	text102,local,class=CODE,merge=1,delta=2
   126                           	psect	text103,local,class=CODE,merge=1,delta=2
   127                           	psect	text104,local,class=CODE,merge=1,delta=2
   128                           	psect	text105,local,class=CODE,merge=1,delta=2
   129                           	psect	text106,local,class=CODE,merge=1,delta=2
   130                           	psect	text107,local,class=CODE,merge=1,delta=2
   131                           	psect	text108,local,class=CODE,merge=1,delta=2
   132                           	psect	text109,local,class=CODE,merge=1,delta=2
   133                           	psect	text110,local,class=CODE,merge=1,delta=2
   134                           	psect	text111,local,class=CODE,merge=1,delta=2
   135                           	psect	text112,local,class=CODE,merge=1,delta=2
   136                           	psect	text113,local,class=CODE,merge=1,delta=2
   137                           	psect	text114,local,class=CODE,merge=1,inline,delta=2
   138                           	psect	text115,local,class=CODE,merge=1,delta=2
   139                           	psect	text116,local,class=CODE,merge=1,delta=2
   140                           	psect	text117,local,class=CODE,merge=1,delta=2
   141                           	psect	text118,local,class=CODE,merge=1,delta=2
   142                           	psect	text119,local,class=CODE,merge=1,delta=2
   143                           	psect	text120,local,class=CODE,merge=1,delta=2
   144                           	psect	text121,local,class=CODE,merge=1,delta=2
   145                           	psect	text122,local,class=CODE,merge=1,delta=2
   146                           	psect	text123,local,class=CODE,merge=1,delta=2
   147                           	psect	text124,local,class=CODE,merge=1,delta=2
   148                           	psect	text125,local,class=CODE,merge=1,delta=2
   149                           	psect	text126,local,class=CODE,merge=1,delta=2
   150                           	psect	text127,local,class=CODE,merge=1,delta=2
   151                           	psect	text128,local,class=CODE,merge=1,delta=2
   152                           	psect	text129,local,class=CODE,merge=1,inline,delta=2
   153                           	psect	text130,local,class=CODE,merge=1,inline,delta=2
   154                           	psect	intentry,global,class=CODE,delta=2
   155                           	psect	text132,local,class=CODE,merge=1,delta=2
   156                           	psect	text133,local,class=CODE,merge=1,inline,delta=2
   157                           	psect	text134,local,class=CODE,merge=1,delta=2
   158                           	psect	text135,local,class=CODE,merge=1,inline,delta=2
   159                           	psect	text136,local,class=CODE,merge=1,delta=2
   160                           	psect	text137,local,class=CODE,merge=1,inline,delta=2
   161                           	psect	text138,local,class=CODE,merge=1,inline,delta=2
   162                           	psect	text139,local,class=CODE,merge=1,inline,delta=2
   163                           	psect	text140,local,class=CODE,merge=1,delta=2
   164                           	psect	text141,local,class=CODE,merge=1,delta=2
   165                           	dabs	1,0x7E,2
   166  0000                     	;# 
   167  0001                     	;# 
   168  0002                     	;# 
   169  0003                     	;# 
   170  0004                     	;# 
   171  0005                     	;# 
   172  0006                     	;# 
   173  0007                     	;# 
   174  0008                     	;# 
   175  0009                     	;# 
   176  000A                     	;# 
   177  000B                     	;# 
   178  000C                     	;# 
   179  000D                     	;# 
   180  000E                     	;# 
   181  0010                     	;# 
   182  0011                     	;# 
   183  0012                     	;# 
   184  0015                     	;# 
   185  0016                     	;# 
   186  0016                     	;# 
   187  0017                     	;# 
   188  0018                     	;# 
   189  0019                     	;# 
   190  001A                     	;# 
   191  001B                     	;# 
   192  001C                     	;# 
   193  008C                     	;# 
   194  008D                     	;# 
   195  008E                     	;# 
   196  0090                     	;# 
   197  0091                     	;# 
   198  0092                     	;# 
   199  0095                     	;# 
   200  0096                     	;# 
   201  0097                     	;# 
   202  0099                     	;# 
   203  009A                     	;# 
   204  009B                     	;# 
   205  009B                     	;# 
   206  009C                     	;# 
   207  009D                     	;# 
   208  009E                     	;# 
   209  010C                     	;# 
   210  010D                     	;# 
   211  010E                     	;# 
   212  0116                     	;# 
   213  0117                     	;# 
   214  011D                     	;# 
   215  018C                     	;# 
   216  018D                     	;# 
   217  018E                     	;# 
   218  0191                     	;# 
   219  0191                     	;# 
   220  0192                     	;# 
   221  0193                     	;# 
   222  0193                     	;# 
   223  0194                     	;# 
   224  0195                     	;# 
   225  0196                     	;# 
   226  0197                     	;# 
   227  0199                     	;# 
   228  019A                     	;# 
   229  019B                     	;# 
   230  019B                     	;# 
   231  019B                     	;# 
   232  019B                     	;# 
   233  019C                     	;# 
   234  019C                     	;# 
   235  019D                     	;# 
   236  019E                     	;# 
   237  019F                     	;# 
   238  020D                     	;# 
   239  0210                     	;# 
   240  0211                     	;# 
   241  0211                     	;# 
   242  0212                     	;# 
   243  0212                     	;# 
   244  0213                     	;# 
   245  0213                     	;# 
   246  0214                     	;# 
   247  0214                     	;# 
   248  0215                     	;# 
   249  0215                     	;# 
   250  0215                     	;# 
   251  0216                     	;# 
   252  0216                     	;# 
   253  0217                     	;# 
   254  0217                     	;# 
   255  0291                     	;# 
   256  0291                     	;# 
   257  0292                     	;# 
   258  0293                     	;# 
   259  0298                     	;# 
   260  0298                     	;# 
   261  0299                     	;# 
   262  029A                     	;# 
   263  0394                     	;# 
   264  0395                     	;# 
   265  0396                     	;# 
   266  0FE4                     	;# 
   267  0FE5                     	;# 
   268  0FE6                     	;# 
   269  0FE7                     	;# 
   270  0FE8                     	;# 
   271  0FE9                     	;# 
   272  0FEA                     	;# 
   273  0FEB                     	;# 
   274  0FED                     	;# 
   275  0FEE                     	;# 
   276  0FEF                     	;# 
   277  0000                     	;# 
   278  0001                     	;# 
   279  0002                     	;# 
   280  0003                     	;# 
   281  0004                     	;# 
   282  0005                     	;# 
   283  0006                     	;# 
   284  0007                     	;# 
   285  0008                     	;# 
   286  0009                     	;# 
   287  000A                     	;# 
   288  000B                     	;# 
   289  000C                     	;# 
   290  000D                     	;# 
   291  000E                     	;# 
   292  0010                     	;# 
   293  0011                     	;# 
   294  0012                     	;# 
   295  0015                     	;# 
   296  0016                     	;# 
   297  0016                     	;# 
   298  0017                     	;# 
   299  0018                     	;# 
   300  0019                     	;# 
   301  001A                     	;# 
   302  001B                     	;# 
   303  001C                     	;# 
   304  008C                     	;# 
   305  008D                     	;# 
   306  008E                     	;# 
   307  0090                     	;# 
   308  0091                     	;# 
   309  0092                     	;# 
   310  0095                     	;# 
   311  0096                     	;# 
   312  0097                     	;# 
   313  0099                     	;# 
   314  009A                     	;# 
   315  009B                     	;# 
   316  009B                     	;# 
   317  009C                     	;# 
   318  009D                     	;# 
   319  009E                     	;# 
   320  010C                     	;# 
   321  010D                     	;# 
   322  010E                     	;# 
   323  0116                     	;# 
   324  0117                     	;# 
   325  011D                     	;# 
   326  018C                     	;# 
   327  018D                     	;# 
   328  018E                     	;# 
   329  0191                     	;# 
   330  0191                     	;# 
   331  0192                     	;# 
   332  0193                     	;# 
   333  0193                     	;# 
   334  0194                     	;# 
   335  0195                     	;# 
   336  0196                     	;# 
   337  0197                     	;# 
   338  0199                     	;# 
   339  019A                     	;# 
   340  019B                     	;# 
   341  019B                     	;# 
   342  019B                     	;# 
   343  019B                     	;# 
   344  019C                     	;# 
   345  019C                     	;# 
   346  019D                     	;# 
   347  019E                     	;# 
   348  019F                     	;# 
   349  020D                     	;# 
   350  0210                     	;# 
   351  0211                     	;# 
   352  0211                     	;# 
   353  0212                     	;# 
   354  0212                     	;# 
   355  0213                     	;# 
   356  0213                     	;# 
   357  0214                     	;# 
   358  0214                     	;# 
   359  0215                     	;# 
   360  0215                     	;# 
   361  0215                     	;# 
   362  0216                     	;# 
   363  0216                     	;# 
   364  0217                     	;# 
   365  0217                     	;# 
   366  0291                     	;# 
   367  0291                     	;# 
   368  0292                     	;# 
   369  0293                     	;# 
   370  0298                     	;# 
   371  0298                     	;# 
   372  0299                     	;# 
   373  029A                     	;# 
   374  0394                     	;# 
   375  0395                     	;# 
   376  0396                     	;# 
   377  0FE4                     	;# 
   378  0FE5                     	;# 
   379  0FE6                     	;# 
   380  0FE7                     	;# 
   381  0FE8                     	;# 
   382  0FE9                     	;# 
   383  0FEA                     	;# 
   384  0FEB                     	;# 
   385  0FED                     	;# 
   386  0FEE                     	;# 
   387  0FEF                     	;# 
   388  0000                     	;# 
   389  0001                     	;# 
   390  0002                     	;# 
   391  0003                     	;# 
   392  0004                     	;# 
   393  0005                     	;# 
   394  0006                     	;# 
   395  0007                     	;# 
   396  0008                     	;# 
   397  0009                     	;# 
   398  000A                     	;# 
   399  000B                     	;# 
   400  000C                     	;# 
   401  000D                     	;# 
   402  000E                     	;# 
   403  0010                     	;# 
   404  0011                     	;# 
   405  0012                     	;# 
   406  0015                     	;# 
   407  0016                     	;# 
   408  0016                     	;# 
   409  0017                     	;# 
   410  0018                     	;# 
   411  0019                     	;# 
   412  001A                     	;# 
   413  001B                     	;# 
   414  001C                     	;# 
   415  008C                     	;# 
   416  008D                     	;# 
   417  008E                     	;# 
   418  0090                     	;# 
   419  0091                     	;# 
   420  0092                     	;# 
   421  0095                     	;# 
   422  0096                     	;# 
   423  0097                     	;# 
   424  0099                     	;# 
   425  009A                     	;# 
   426  009B                     	;# 
   427  009B                     	;# 
   428  009C                     	;# 
   429  009D                     	;# 
   430  009E                     	;# 
   431  010C                     	;# 
   432  010D                     	;# 
   433  010E                     	;# 
   434  0116                     	;# 
   435  0117                     	;# 
   436  011D                     	;# 
   437  018C                     	;# 
   438  018D                     	;# 
   439  018E                     	;# 
   440  0191                     	;# 
   441  0191                     	;# 
   442  0192                     	;# 
   443  0193                     	;# 
   444  0193                     	;# 
   445  0194                     	;# 
   446  0195                     	;# 
   447  0196                     	;# 
   448  0197                     	;# 
   449  0199                     	;# 
   450  019A                     	;# 
   451  019B                     	;# 
   452  019B                     	;# 
   453  019B                     	;# 
   454  019B                     	;# 
   455  019C                     	;# 
   456  019C                     	;# 
   457  019D                     	;# 
   458  019E                     	;# 
   459  019F                     	;# 
   460  020D                     	;# 
   461  0210                     	;# 
   462  0211                     	;# 
   463  0211                     	;# 
   464  0212                     	;# 
   465  0212                     	;# 
   466  0213                     	;# 
   467  0213                     	;# 
   468  0214                     	;# 
   469  0214                     	;# 
   470  0215                     	;# 
   471  0215                     	;# 
   472  0215                     	;# 
   473  0216                     	;# 
   474  0216                     	;# 
   475  0217                     	;# 
   476  0217                     	;# 
   477  0291                     	;# 
   478  0291                     	;# 
   479  0292                     	;# 
   480  0293                     	;# 
   481  0298                     	;# 
   482  0298                     	;# 
   483  0299                     	;# 
   484  029A                     	;# 
   485  0394                     	;# 
   486  0395                     	;# 
   487  0396                     	;# 
   488  0FE4                     	;# 
   489  0FE5                     	;# 
   490  0FE6                     	;# 
   491  0FE7                     	;# 
   492  0FE8                     	;# 
   493  0FE9                     	;# 
   494  0FEA                     	;# 
   495  0FEB                     	;# 
   496  0FED                     	;# 
   497  0FEE                     	;# 
   498  0FEF                     	;# 
   499  0000                     	;# 
   500  0001                     	;# 
   501  0002                     	;# 
   502  0003                     	;# 
   503  0004                     	;# 
   504  0005                     	;# 
   505  0006                     	;# 
   506  0007                     	;# 
   507  0008                     	;# 
   508  0009                     	;# 
   509  000A                     	;# 
   510  000B                     	;# 
   511  000C                     	;# 
   512  000D                     	;# 
   513  000E                     	;# 
   514  0010                     	;# 
   515  0011                     	;# 
   516  0012                     	;# 
   517  0015                     	;# 
   518  0016                     	;# 
   519  0016                     	;# 
   520  0017                     	;# 
   521  0018                     	;# 
   522  0019                     	;# 
   523  001A                     	;# 
   524  001B                     	;# 
   525  001C                     	;# 
   526  008C                     	;# 
   527  008D                     	;# 
   528  008E                     	;# 
   529  0090                     	;# 
   530  0091                     	;# 
   531  0092                     	;# 
   532  0095                     	;# 
   533  0096                     	;# 
   534  0097                     	;# 
   535  0099                     	;# 
   536  009A                     	;# 
   537  009B                     	;# 
   538  009B                     	;# 
   539  009C                     	;# 
   540  009D                     	;# 
   541  009E                     	;# 
   542  010C                     	;# 
   543  010D                     	;# 
   544  010E                     	;# 
   545  0116                     	;# 
   546  0117                     	;# 
   547  011D                     	;# 
   548  018C                     	;# 
   549  018D                     	;# 
   550  018E                     	;# 
   551  0191                     	;# 
   552  0191                     	;# 
   553  0192                     	;# 
   554  0193                     	;# 
   555  0193                     	;# 
   556  0194                     	;# 
   557  0195                     	;# 
   558  0196                     	;# 
   559  0197                     	;# 
   560  0199                     	;# 
   561  019A                     	;# 
   562  019B                     	;# 
   563  019B                     	;# 
   564  019B                     	;# 
   565  019B                     	;# 
   566  019C                     	;# 
   567  019C                     	;# 
   568  019D                     	;# 
   569  019E                     	;# 
   570  019F                     	;# 
   571  020D                     	;# 
   572  0210                     	;# 
   573  0211                     	;# 
   574  0211                     	;# 
   575  0212                     	;# 
   576  0212                     	;# 
   577  0213                     	;# 
   578  0213                     	;# 
   579  0214                     	;# 
   580  0214                     	;# 
   581  0215                     	;# 
   582  0215                     	;# 
   583  0215                     	;# 
   584  0216                     	;# 
   585  0216                     	;# 
   586  0217                     	;# 
   587  0217                     	;# 
   588  0291                     	;# 
   589  0291                     	;# 
   590  0292                     	;# 
   591  0293                     	;# 
   592  0298                     	;# 
   593  0298                     	;# 
   594  0299                     	;# 
   595  029A                     	;# 
   596  0394                     	;# 
   597  0395                     	;# 
   598  0396                     	;# 
   599  0FE4                     	;# 
   600  0FE5                     	;# 
   601  0FE6                     	;# 
   602  0FE7                     	;# 
   603  0FE8                     	;# 
   604  0FE9                     	;# 
   605  0FEA                     	;# 
   606  0FEB                     	;# 
   607  0FED                     	;# 
   608  0FEE                     	;# 
   609  0FEF                     	;# 
   610  0000                     	;# 
   611  0001                     	;# 
   612  0002                     	;# 
   613  0003                     	;# 
   614  0004                     	;# 
   615  0005                     	;# 
   616  0006                     	;# 
   617  0007                     	;# 
   618  0008                     	;# 
   619  0009                     	;# 
   620  000A                     	;# 
   621  000B                     	;# 
   622  000C                     	;# 
   623  000D                     	;# 
   624  000E                     	;# 
   625  0010                     	;# 
   626  0011                     	;# 
   627  0012                     	;# 
   628  0015                     	;# 
   629  0016                     	;# 
   630  0016                     	;# 
   631  0017                     	;# 
   632  0018                     	;# 
   633  0019                     	;# 
   634  001A                     	;# 
   635  001B                     	;# 
   636  001C                     	;# 
   637  008C                     	;# 
   638  008D                     	;# 
   639  008E                     	;# 
   640  0090                     	;# 
   641  0091                     	;# 
   642  0092                     	;# 
   643  0095                     	;# 
   644  0096                     	;# 
   645  0097                     	;# 
   646  0099                     	;# 
   647  009A                     	;# 
   648  009B                     	;# 
   649  009B                     	;# 
   650  009C                     	;# 
   651  009D                     	;# 
   652  009E                     	;# 
   653  010C                     	;# 
   654  010D                     	;# 
   655  010E                     	;# 
   656  0116                     	;# 
   657  0117                     	;# 
   658  011D                     	;# 
   659  018C                     	;# 
   660  018D                     	;# 
   661  018E                     	;# 
   662  0191                     	;# 
   663  0191                     	;# 
   664  0192                     	;# 
   665  0193                     	;# 
   666  0193                     	;# 
   667  0194                     	;# 
   668  0195                     	;# 
   669  0196                     	;# 
   670  0197                     	;# 
   671  0199                     	;# 
   672  019A                     	;# 
   673  019B                     	;# 
   674  019B                     	;# 
   675  019B                     	;# 
   676  019B                     	;# 
   677  019C                     	;# 
   678  019C                     	;# 
   679  019D                     	;# 
   680  019E                     	;# 
   681  019F                     	;# 
   682  020D                     	;# 
   683  0210                     	;# 
   684  0211                     	;# 
   685  0211                     	;# 
   686  0212                     	;# 
   687  0212                     	;# 
   688  0213                     	;# 
   689  0213                     	;# 
   690  0214                     	;# 
   691  0214                     	;# 
   692  0215                     	;# 
   693  0215                     	;# 
   694  0215                     	;# 
   695  0216                     	;# 
   696  0216                     	;# 
   697  0217                     	;# 
   698  0217                     	;# 
   699  0291                     	;# 
   700  0291                     	;# 
   701  0292                     	;# 
   702  0293                     	;# 
   703  0298                     	;# 
   704  0298                     	;# 
   705  0299                     	;# 
   706  029A                     	;# 
   707  0394                     	;# 
   708  0395                     	;# 
   709  0396                     	;# 
   710  0FE4                     	;# 
   711  0FE5                     	;# 
   712  0FE6                     	;# 
   713  0FE7                     	;# 
   714  0FE8                     	;# 
   715  0FE9                     	;# 
   716  0FEA                     	;# 
   717  0FEB                     	;# 
   718  0FED                     	;# 
   719  0FEE                     	;# 
   720  0FEF                     	;# 
   721  0000                     	;# 
   722  0001                     	;# 
   723  0002                     	;# 
   724  0003                     	;# 
   725  0004                     	;# 
   726  0005                     	;# 
   727  0006                     	;# 
   728  0007                     	;# 
   729  0008                     	;# 
   730  0009                     	;# 
   731  000A                     	;# 
   732  000B                     	;# 
   733  000C                     	;# 
   734  000D                     	;# 
   735  000E                     	;# 
   736  0010                     	;# 
   737  0011                     	;# 
   738  0012                     	;# 
   739  0015                     	;# 
   740  0016                     	;# 
   741  0016                     	;# 
   742  0017                     	;# 
   743  0018                     	;# 
   744  0019                     	;# 
   745  001A                     	;# 
   746  001B                     	;# 
   747  001C                     	;# 
   748  008C                     	;# 
   749  008D                     	;# 
   750  008E                     	;# 
   751  0090                     	;# 
   752  0091                     	;# 
   753  0092                     	;# 
   754  0095                     	;# 
   755  0096                     	;# 
   756  0097                     	;# 
   757  0099                     	;# 
   758  009A                     	;# 
   759  009B                     	;# 
   760  009B                     	;# 
   761  009C                     	;# 
   762  009D                     	;# 
   763  009E                     	;# 
   764  010C                     	;# 
   765  010D                     	;# 
   766  010E                     	;# 
   767  0116                     	;# 
   768  0117                     	;# 
   769  011D                     	;# 
   770  018C                     	;# 
   771  018D                     	;# 
   772  018E                     	;# 
   773  0191                     	;# 
   774  0191                     	;# 
   775  0192                     	;# 
   776  0193                     	;# 
   777  0193                     	;# 
   778  0194                     	;# 
   779  0195                     	;# 
   780  0196                     	;# 
   781  0197                     	;# 
   782  0199                     	;# 
   783  019A                     	;# 
   784  019B                     	;# 
   785  019B                     	;# 
   786  019B                     	;# 
   787  019B                     	;# 
   788  019C                     	;# 
   789  019C                     	;# 
   790  019D                     	;# 
   791  019E                     	;# 
   792  019F                     	;# 
   793  020D                     	;# 
   794  0210                     	;# 
   795  0211                     	;# 
   796  0211                     	;# 
   797  0212                     	;# 
   798  0212                     	;# 
   799  0213                     	;# 
   800  0213                     	;# 
   801  0214                     	;# 
   802  0214                     	;# 
   803  0215                     	;# 
   804  0215                     	;# 
   805  0215                     	;# 
   806  0216                     	;# 
   807  0216                     	;# 
   808  0217                     	;# 
   809  0217                     	;# 
   810  0291                     	;# 
   811  0291                     	;# 
   812  0292                     	;# 
   813  0293                     	;# 
   814  0298                     	;# 
   815  0298                     	;# 
   816  0299                     	;# 
   817  029A                     	;# 
   818  0394                     	;# 
   819  0395                     	;# 
   820  0396                     	;# 
   821  0FE4                     	;# 
   822  0FE5                     	;# 
   823  0FE6                     	;# 
   824  0FE7                     	;# 
   825  0FE8                     	;# 
   826  0FE9                     	;# 
   827  0FEA                     	;# 
   828  0FEB                     	;# 
   829  0FED                     	;# 
   830  0FEE                     	;# 
   831  0FEF                     	;# 
   832  0000                     	;# 
   833  0001                     	;# 
   834  0002                     	;# 
   835  0003                     	;# 
   836  0004                     	;# 
   837  0005                     	;# 
   838  0006                     	;# 
   839  0007                     	;# 
   840  0008                     	;# 
   841  0009                     	;# 
   842  000A                     	;# 
   843  000B                     	;# 
   844  000C                     	;# 
   845  000D                     	;# 
   846  000E                     	;# 
   847  0010                     	;# 
   848  0011                     	;# 
   849  0012                     	;# 
   850  0015                     	;# 
   851  0016                     	;# 
   852  0016                     	;# 
   853  0017                     	;# 
   854  0018                     	;# 
   855  0019                     	;# 
   856  001A                     	;# 
   857  001B                     	;# 
   858  001C                     	;# 
   859  008C                     	;# 
   860  008D                     	;# 
   861  008E                     	;# 
   862  0090                     	;# 
   863  0091                     	;# 
   864  0092                     	;# 
   865  0095                     	;# 
   866  0096                     	;# 
   867  0097                     	;# 
   868  0099                     	;# 
   869  009A                     	;# 
   870  009B                     	;# 
   871  009B                     	;# 
   872  009C                     	;# 
   873  009D                     	;# 
   874  009E                     	;# 
   875  010C                     	;# 
   876  010D                     	;# 
   877  010E                     	;# 
   878  0116                     	;# 
   879  0117                     	;# 
   880  011D                     	;# 
   881  018C                     	;# 
   882  018D                     	;# 
   883  018E                     	;# 
   884  0191                     	;# 
   885  0191                     	;# 
   886  0192                     	;# 
   887  0193                     	;# 
   888  0193                     	;# 
   889  0194                     	;# 
   890  0195                     	;# 
   891  0196                     	;# 
   892  0197                     	;# 
   893  0199                     	;# 
   894  019A                     	;# 
   895  019B                     	;# 
   896  019B                     	;# 
   897  019B                     	;# 
   898  019B                     	;# 
   899  019C                     	;# 
   900  019C                     	;# 
   901  019D                     	;# 
   902  019E                     	;# 
   903  019F                     	;# 
   904  020D                     	;# 
   905  0210                     	;# 
   906  0211                     	;# 
   907  0211                     	;# 
   908  0212                     	;# 
   909  0212                     	;# 
   910  0213                     	;# 
   911  0213                     	;# 
   912  0214                     	;# 
   913  0214                     	;# 
   914  0215                     	;# 
   915  0215                     	;# 
   916  0215                     	;# 
   917  0216                     	;# 
   918  0216                     	;# 
   919  0217                     	;# 
   920  0217                     	;# 
   921  0291                     	;# 
   922  0291                     	;# 
   923  0292                     	;# 
   924  0293                     	;# 
   925  0298                     	;# 
   926  0298                     	;# 
   927  0299                     	;# 
   928  029A                     	;# 
   929  0394                     	;# 
   930  0395                     	;# 
   931  0396                     	;# 
   932  0FE4                     	;# 
   933  0FE5                     	;# 
   934  0FE6                     	;# 
   935  0FE7                     	;# 
   936  0FE8                     	;# 
   937  0FE9                     	;# 
   938  0FEA                     	;# 
   939  0FEB                     	;# 
   940  0FED                     	;# 
   941  0FEE                     	;# 
   942  0FEF                     	;# 
   943  0000                     	;# 
   944  0001                     	;# 
   945  0002                     	;# 
   946  0003                     	;# 
   947  0004                     	;# 
   948  0005                     	;# 
   949  0006                     	;# 
   950  0007                     	;# 
   951  0008                     	;# 
   952  0009                     	;# 
   953  000A                     	;# 
   954  000B                     	;# 
   955  000C                     	;# 
   956  000D                     	;# 
   957  000E                     	;# 
   958  0010                     	;# 
   959  0011                     	;# 
   960  0012                     	;# 
   961  0015                     	;# 
   962  0016                     	;# 
   963  0016                     	;# 
   964  0017                     	;# 
   965  0018                     	;# 
   966  0019                     	;# 
   967  001A                     	;# 
   968  001B                     	;# 
   969  001C                     	;# 
   970  008C                     	;# 
   971  008D                     	;# 
   972  008E                     	;# 
   973  0090                     	;# 
   974  0091                     	;# 
   975  0092                     	;# 
   976  0095                     	;# 
   977  0096                     	;# 
   978  0097                     	;# 
   979  0099                     	;# 
   980  009A                     	;# 
   981  009B                     	;# 
   982  009B                     	;# 
   983  009C                     	;# 
   984  009D                     	;# 
   985  009E                     	;# 
   986  010C                     	;# 
   987  010D                     	;# 
   988  010E                     	;# 
   989  0116                     	;# 
   990  0117                     	;# 
   991  011D                     	;# 
   992  018C                     	;# 
   993  018D                     	;# 
   994  018E                     	;# 
   995  0191                     	;# 
   996  0191                     	;# 
   997  0192                     	;# 
   998  0193                     	;# 
   999  0193                     	;# 
  1000  0194                     	;# 
  1001  0195                     	;# 
  1002  0196                     	;# 
  1003  0197                     	;# 
  1004  0199                     	;# 
  1005  019A                     	;# 
  1006  019B                     	;# 
  1007  019B                     	;# 
  1008  019B                     	;# 
  1009  019B                     	;# 
  1010  019C                     	;# 
  1011  019C                     	;# 
  1012  019D                     	;# 
  1013  019E                     	;# 
  1014  019F                     	;# 
  1015  020D                     	;# 
  1016  0210                     	;# 
  1017  0211                     	;# 
  1018  0211                     	;# 
  1019  0212                     	;# 
  1020  0212                     	;# 
  1021  0213                     	;# 
  1022  0213                     	;# 
  1023  0214                     	;# 
  1024  0214                     	;# 
  1025  0215                     	;# 
  1026  0215                     	;# 
  1027  0215                     	;# 
  1028  0216                     	;# 
  1029  0216                     	;# 
  1030  0217                     	;# 
  1031  0217                     	;# 
  1032  0291                     	;# 
  1033  0291                     	;# 
  1034  0292                     	;# 
  1035  0293                     	;# 
  1036  0298                     	;# 
  1037  0298                     	;# 
  1038  0299                     	;# 
  1039  029A                     	;# 
  1040  0394                     	;# 
  1041  0395                     	;# 
  1042  0396                     	;# 
  1043  0FE4                     	;# 
  1044  0FE5                     	;# 
  1045  0FE6                     	;# 
  1046  0FE7                     	;# 
  1047  0FE8                     	;# 
  1048  0FE9                     	;# 
  1049  0FEA                     	;# 
  1050  0FEB                     	;# 
  1051  0FED                     	;# 
  1052  0FEE                     	;# 
  1053  0FEF                     	;# 
  1054  0000                     	;# 
  1055  0001                     	;# 
  1056  0002                     	;# 
  1057  0003                     	;# 
  1058  0004                     	;# 
  1059  0005                     	;# 
  1060  0006                     	;# 
  1061  0007                     	;# 
  1062  0008                     	;# 
  1063  0009                     	;# 
  1064  000A                     	;# 
  1065  000B                     	;# 
  1066  000C                     	;# 
  1067  000D                     	;# 
  1068  000E                     	;# 
  1069  0010                     	;# 
  1070  0011                     	;# 
  1071  0012                     	;# 
  1072  0015                     	;# 
  1073  0016                     	;# 
  1074  0016                     	;# 
  1075  0017                     	;# 
  1076  0018                     	;# 
  1077  0019                     	;# 
  1078  001A                     	;# 
  1079  001B                     	;# 
  1080  001C                     	;# 
  1081  008C                     	;# 
  1082  008D                     	;# 
  1083  008E                     	;# 
  1084  0090                     	;# 
  1085  0091                     	;# 
  1086  0092                     	;# 
  1087  0095                     	;# 
  1088  0096                     	;# 
  1089  0097                     	;# 
  1090  0099                     	;# 
  1091  009A                     	;# 
  1092  009B                     	;# 
  1093  009B                     	;# 
  1094  009C                     	;# 
  1095  009D                     	;# 
  1096  009E                     	;# 
  1097  010C                     	;# 
  1098  010D                     	;# 
  1099  010E                     	;# 
  1100  0116                     	;# 
  1101  0117                     	;# 
  1102  011D                     	;# 
  1103  018C                     	;# 
  1104  018D                     	;# 
  1105  018E                     	;# 
  1106  0191                     	;# 
  1107  0191                     	;# 
  1108  0192                     	;# 
  1109  0193                     	;# 
  1110  0193                     	;# 
  1111  0194                     	;# 
  1112  0195                     	;# 
  1113  0196                     	;# 
  1114  0197                     	;# 
  1115  0199                     	;# 
  1116  019A                     	;# 
  1117  019B                     	;# 
  1118  019B                     	;# 
  1119  019B                     	;# 
  1120  019B                     	;# 
  1121  019C                     	;# 
  1122  019C                     	;# 
  1123  019D                     	;# 
  1124  019E                     	;# 
  1125  019F                     	;# 
  1126  020D                     	;# 
  1127  0210                     	;# 
  1128  0211                     	;# 
  1129  0211                     	;# 
  1130  0212                     	;# 
  1131  0212                     	;# 
  1132  0213                     	;# 
  1133  0213                     	;# 
  1134  0214                     	;# 
  1135  0214                     	;# 
  1136  0215                     	;# 
  1137  0215                     	;# 
  1138  0215                     	;# 
  1139  0216                     	;# 
  1140  0216                     	;# 
  1141  0217                     	;# 
  1142  0217                     	;# 
  1143  0291                     	;# 
  1144  0291                     	;# 
  1145  0292                     	;# 
  1146  0293                     	;# 
  1147  0298                     	;# 
  1148  0298                     	;# 
  1149  0299                     	;# 
  1150  029A                     	;# 
  1151  0394                     	;# 
  1152  0395                     	;# 
  1153  0396                     	;# 
  1154  0FE4                     	;# 
  1155  0FE5                     	;# 
  1156  0FE6                     	;# 
  1157  0FE7                     	;# 
  1158  0FE8                     	;# 
  1159  0FE9                     	;# 
  1160  0FEA                     	;# 
  1161  0FEB                     	;# 
  1162  0FED                     	;# 
  1163  0FEE                     	;# 
  1164  0FEF                     	;# 
  1165  0000                     	;# 
  1166  0001                     	;# 
  1167  0002                     	;# 
  1168  0003                     	;# 
  1169  0004                     	;# 
  1170  0005                     	;# 
  1171  0006                     	;# 
  1172  0007                     	;# 
  1173  0008                     	;# 
  1174  0009                     	;# 
  1175  000A                     	;# 
  1176  000B                     	;# 
  1177  000C                     	;# 
  1178  000D                     	;# 
  1179  000E                     	;# 
  1180  0010                     	;# 
  1181  0011                     	;# 
  1182  0012                     	;# 
  1183  0015                     	;# 
  1184  0016                     	;# 
  1185  0016                     	;# 
  1186  0017                     	;# 
  1187  0018                     	;# 
  1188  0019                     	;# 
  1189  001A                     	;# 
  1190  001B                     	;# 
  1191  001C                     	;# 
  1192  008C                     	;# 
  1193  008D                     	;# 
  1194  008E                     	;# 
  1195  0090                     	;# 
  1196  0091                     	;# 
  1197  0092                     	;# 
  1198  0095                     	;# 
  1199  0096                     	;# 
  1200  0097                     	;# 
  1201  0099                     	;# 
  1202  009A                     	;# 
  1203  009B                     	;# 
  1204  009B                     	;# 
  1205  009C                     	;# 
  1206  009D                     	;# 
  1207  009E                     	;# 
  1208  010C                     	;# 
  1209  010D                     	;# 
  1210  010E                     	;# 
  1211  0116                     	;# 
  1212  0117                     	;# 
  1213  011D                     	;# 
  1214  018C                     	;# 
  1215  018D                     	;# 
  1216  018E                     	;# 
  1217  0191                     	;# 
  1218  0191                     	;# 
  1219  0192                     	;# 
  1220  0193                     	;# 
  1221  0193                     	;# 
  1222  0194                     	;# 
  1223  0195                     	;# 
  1224  0196                     	;# 
  1225  0197                     	;# 
  1226  0199                     	;# 
  1227  019A                     	;# 
  1228  019B                     	;# 
  1229  019B                     	;# 
  1230  019B                     	;# 
  1231  019B                     	;# 
  1232  019C                     	;# 
  1233  019C                     	;# 
  1234  019D                     	;# 
  1235  019E                     	;# 
  1236  019F                     	;# 
  1237  020D                     	;# 
  1238  0210                     	;# 
  1239  0211                     	;# 
  1240  0211                     	;# 
  1241  0212                     	;# 
  1242  0212                     	;# 
  1243  0213                     	;# 
  1244  0213                     	;# 
  1245  0214                     	;# 
  1246  0214                     	;# 
  1247  0215                     	;# 
  1248  0215                     	;# 
  1249  0215                     	;# 
  1250  0216                     	;# 
  1251  0216                     	;# 
  1252  0217                     	;# 
  1253  0217                     	;# 
  1254  0291                     	;# 
  1255  0291                     	;# 
  1256  0292                     	;# 
  1257  0293                     	;# 
  1258  0298                     	;# 
  1259  0298                     	;# 
  1260  0299                     	;# 
  1261  029A                     	;# 
  1262  0394                     	;# 
  1263  0395                     	;# 
  1264  0396                     	;# 
  1265  0FE4                     	;# 
  1266  0FE5                     	;# 
  1267  0FE6                     	;# 
  1268  0FE7                     	;# 
  1269  0FE8                     	;# 
  1270  0FE9                     	;# 
  1271  0FEA                     	;# 
  1272  0FEB                     	;# 
  1273  0FED                     	;# 
  1274  0FEE                     	;# 
  1275  0FEF                     	;# 
  1276  0000                     	;# 
  1277  0001                     	;# 
  1278  0002                     	;# 
  1279  0003                     	;# 
  1280  0004                     	;# 
  1281  0005                     	;# 
  1282  0006                     	;# 
  1283  0007                     	;# 
  1284  0008                     	;# 
  1285  0009                     	;# 
  1286  000A                     	;# 
  1287  000B                     	;# 
  1288  000C                     	;# 
  1289  000D                     	;# 
  1290  000E                     	;# 
  1291  0010                     	;# 
  1292  0011                     	;# 
  1293  0012                     	;# 
  1294  0015                     	;# 
  1295  0016                     	;# 
  1296  0016                     	;# 
  1297  0017                     	;# 
  1298  0018                     	;# 
  1299  0019                     	;# 
  1300  001A                     	;# 
  1301  001B                     	;# 
  1302  001C                     	;# 
  1303  008C                     	;# 
  1304  008D                     	;# 
  1305  008E                     	;# 
  1306  0090                     	;# 
  1307  0091                     	;# 
  1308  0092                     	;# 
  1309  0095                     	;# 
  1310  0096                     	;# 
  1311  0097                     	;# 
  1312  0099                     	;# 
  1313  009A                     	;# 
  1314  009B                     	;# 
  1315  009B                     	;# 
  1316  009C                     	;# 
  1317  009D                     	;# 
  1318  009E                     	;# 
  1319  010C                     	;# 
  1320  010D                     	;# 
  1321  010E                     	;# 
  1322  0116                     	;# 
  1323  0117                     	;# 
  1324  011D                     	;# 
  1325  018C                     	;# 
  1326  018D                     	;# 
  1327  018E                     	;# 
  1328  0191                     	;# 
  1329  0191                     	;# 
  1330  0192                     	;# 
  1331  0193                     	;# 
  1332  0193                     	;# 
  1333  0194                     	;# 
  1334  0195                     	;# 
  1335  0196                     	;# 
  1336  0197                     	;# 
  1337  0199                     	;# 
  1338  019A                     	;# 
  1339  019B                     	;# 
  1340  019B                     	;# 
  1341  019B                     	;# 
  1342  019B                     	;# 
  1343  019C                     	;# 
  1344  019C                     	;# 
  1345  019D                     	;# 
  1346  019E                     	;# 
  1347  019F                     	;# 
  1348  020D                     	;# 
  1349  0210                     	;# 
  1350  0211                     	;# 
  1351  0211                     	;# 
  1352  0212                     	;# 
  1353  0212                     	;# 
  1354  0213                     	;# 
  1355  0213                     	;# 
  1356  0214                     	;# 
  1357  0214                     	;# 
  1358  0215                     	;# 
  1359  0215                     	;# 
  1360  0215                     	;# 
  1361  0216                     	;# 
  1362  0216                     	;# 
  1363  0217                     	;# 
  1364  0217                     	;# 
  1365  0291                     	;# 
  1366  0291                     	;# 
  1367  0292                     	;# 
  1368  0293                     	;# 
  1369  0298                     	;# 
  1370  0298                     	;# 
  1371  0299                     	;# 
  1372  029A                     	;# 
  1373  0394                     	;# 
  1374  0395                     	;# 
  1375  0396                     	;# 
  1376  0FE4                     	;# 
  1377  0FE5                     	;# 
  1378  0FE6                     	;# 
  1379  0FE7                     	;# 
  1380  0FE8                     	;# 
  1381  0FE9                     	;# 
  1382  0FEA                     	;# 
  1383  0FEB                     	;# 
  1384  0FED                     	;# 
  1385  0FEE                     	;# 
  1386  0FEF                     	;# 
  1387  0000                     	;# 
  1388  0001                     	;# 
  1389  0002                     	;# 
  1390  0003                     	;# 
  1391  0004                     	;# 
  1392  0005                     	;# 
  1393  0006                     	;# 
  1394  0007                     	;# 
  1395  0008                     	;# 
  1396  0009                     	;# 
  1397  000A                     	;# 
  1398  000B                     	;# 
  1399  000C                     	;# 
  1400  000D                     	;# 
  1401  000E                     	;# 
  1402  0010                     	;# 
  1403  0011                     	;# 
  1404  0012                     	;# 
  1405  0015                     	;# 
  1406  0016                     	;# 
  1407  0016                     	;# 
  1408  0017                     	;# 
  1409  0018                     	;# 
  1410  0019                     	;# 
  1411  001A                     	;# 
  1412  001B                     	;# 
  1413  001C                     	;# 
  1414  008C                     	;# 
  1415  008D                     	;# 
  1416  008E                     	;# 
  1417  0090                     	;# 
  1418  0091                     	;# 
  1419  0092                     	;# 
  1420  0095                     	;# 
  1421  0096                     	;# 
  1422  0097                     	;# 
  1423  0099                     	;# 
  1424  009A                     	;# 
  1425  009B                     	;# 
  1426  009B                     	;# 
  1427  009C                     	;# 
  1428  009D                     	;# 
  1429  009E                     	;# 
  1430  010C                     	;# 
  1431  010D                     	;# 
  1432  010E                     	;# 
  1433  0116                     	;# 
  1434  0117                     	;# 
  1435  011D                     	;# 
  1436  018C                     	;# 
  1437  018D                     	;# 
  1438  018E                     	;# 
  1439  0191                     	;# 
  1440  0191                     	;# 
  1441  0192                     	;# 
  1442  0193                     	;# 
  1443  0193                     	;# 
  1444  0194                     	;# 
  1445  0195                     	;# 
  1446  0196                     	;# 
  1447  0197                     	;# 
  1448  0199                     	;# 
  1449  019A                     	;# 
  1450  019B                     	;# 
  1451  019B                     	;# 
  1452  019B                     	;# 
  1453  019B                     	;# 
  1454  019C                     	;# 
  1455  019C                     	;# 
  1456  019D                     	;# 
  1457  019E                     	;# 
  1458  019F                     	;# 
  1459  020D                     	;# 
  1460  0210                     	;# 
  1461  0211                     	;# 
  1462  0211                     	;# 
  1463  0212                     	;# 
  1464  0212                     	;# 
  1465  0213                     	;# 
  1466  0213                     	;# 
  1467  0214                     	;# 
  1468  0214                     	;# 
  1469  0215                     	;# 
  1470  0215                     	;# 
  1471  0215                     	;# 
  1472  0216                     	;# 
  1473  0216                     	;# 
  1474  0217                     	;# 
  1475  0217                     	;# 
  1476  0291                     	;# 
  1477  0291                     	;# 
  1478  0292                     	;# 
  1479  0293                     	;# 
  1480  0298                     	;# 
  1481  0298                     	;# 
  1482  0299                     	;# 
  1483  029A                     	;# 
  1484  0394                     	;# 
  1485  0395                     	;# 
  1486  0396                     	;# 
  1487  0FE4                     	;# 
  1488  0FE5                     	;# 
  1489  0FE6                     	;# 
  1490  0FE7                     	;# 
  1491  0FE8                     	;# 
  1492  0FE9                     	;# 
  1493  0FEA                     	;# 
  1494  0FEB                     	;# 
  1495  0FED                     	;# 
  1496  0FEE                     	;# 
  1497  0FEF                     	;# 
  1498  0000                     	;# 
  1499  0001                     	;# 
  1500  0002                     	;# 
  1501  0003                     	;# 
  1502  0004                     	;# 
  1503  0005                     	;# 
  1504  0006                     	;# 
  1505  0007                     	;# 
  1506  0008                     	;# 
  1507  0009                     	;# 
  1508  000A                     	;# 
  1509  000B                     	;# 
  1510  000C                     	;# 
  1511  000D                     	;# 
  1512  000E                     	;# 
  1513  0010                     	;# 
  1514  0011                     	;# 
  1515  0012                     	;# 
  1516  0015                     	;# 
  1517  0016                     	;# 
  1518  0016                     	;# 
  1519  0017                     	;# 
  1520  0018                     	;# 
  1521  0019                     	;# 
  1522  001A                     	;# 
  1523  001B                     	;# 
  1524  001C                     	;# 
  1525  008C                     	;# 
  1526  008D                     	;# 
  1527  008E                     	;# 
  1528  0090                     	;# 
  1529  0091                     	;# 
  1530  0092                     	;# 
  1531  0095                     	;# 
  1532  0096                     	;# 
  1533  0097                     	;# 
  1534  0099                     	;# 
  1535  009A                     	;# 
  1536  009B                     	;# 
  1537  009B                     	;# 
  1538  009C                     	;# 
  1539  009D                     	;# 
  1540  009E                     	;# 
  1541  010C                     	;# 
  1542  010D                     	;# 
  1543  010E                     	;# 
  1544  0116                     	;# 
  1545  0117                     	;# 
  1546  011D                     	;# 
  1547  018C                     	;# 
  1548  018D                     	;# 
  1549  018E                     	;# 
  1550  0191                     	;# 
  1551  0191                     	;# 
  1552  0192                     	;# 
  1553  0193                     	;# 
  1554  0193                     	;# 
  1555  0194                     	;# 
  1556  0195                     	;# 
  1557  0196                     	;# 
  1558  0197                     	;# 
  1559  0199                     	;# 
  1560  019A                     	;# 
  1561  019B                     	;# 
  1562  019B                     	;# 
  1563  019B                     	;# 
  1564  019B                     	;# 
  1565  019C                     	;# 
  1566  019C                     	;# 
  1567  019D                     	;# 
  1568  019E                     	;# 
  1569  019F                     	;# 
  1570  020D                     	;# 
  1571  0210                     	;# 
  1572  0211                     	;# 
  1573  0211                     	;# 
  1574  0212                     	;# 
  1575  0212                     	;# 
  1576  0213                     	;# 
  1577  0213                     	;# 
  1578  0214                     	;# 
  1579  0214                     	;# 
  1580  0215                     	;# 
  1581  0215                     	;# 
  1582  0215                     	;# 
  1583  0216                     	;# 
  1584  0216                     	;# 
  1585  0217                     	;# 
  1586  0217                     	;# 
  1587  0291                     	;# 
  1588  0291                     	;# 
  1589  0292                     	;# 
  1590  0293                     	;# 
  1591  0298                     	;# 
  1592  0298                     	;# 
  1593  0299                     	;# 
  1594  029A                     	;# 
  1595  0394                     	;# 
  1596  0395                     	;# 
  1597  0396                     	;# 
  1598  0FE4                     	;# 
  1599  0FE5                     	;# 
  1600  0FE6                     	;# 
  1601  0FE7                     	;# 
  1602  0FE8                     	;# 
  1603  0FE9                     	;# 
  1604  0FEA                     	;# 
  1605  0FEB                     	;# 
  1606  0FED                     	;# 
  1607  0FEE                     	;# 
  1608  0FEF                     	;# 
  1609  0000                     	;# 
  1610  0001                     	;# 
  1611  0002                     	;# 
  1612  0003                     	;# 
  1613  0004                     	;# 
  1614  0005                     	;# 
  1615  0006                     	;# 
  1616  0007                     	;# 
  1617  0008                     	;# 
  1618  0009                     	;# 
  1619  000A                     	;# 
  1620  000B                     	;# 
  1621  000C                     	;# 
  1622  000D                     	;# 
  1623  000E                     	;# 
  1624  0010                     	;# 
  1625  0011                     	;# 
  1626  0012                     	;# 
  1627  0015                     	;# 
  1628  0016                     	;# 
  1629  0016                     	;# 
  1630  0017                     	;# 
  1631  0018                     	;# 
  1632  0019                     	;# 
  1633  001A                     	;# 
  1634  001B                     	;# 
  1635  001C                     	;# 
  1636  008C                     	;# 
  1637  008D                     	;# 
  1638  008E                     	;# 
  1639  0090                     	;# 
  1640  0091                     	;# 
  1641  0092                     	;# 
  1642  0095                     	;# 
  1643  0096                     	;# 
  1644  0097                     	;# 
  1645  0099                     	;# 
  1646  009A                     	;# 
  1647  009B                     	;# 
  1648  009B                     	;# 
  1649  009C                     	;# 
  1650  009D                     	;# 
  1651  009E                     	;# 
  1652  010C                     	;# 
  1653  010D                     	;# 
  1654  010E                     	;# 
  1655  0116                     	;# 
  1656  0117                     	;# 
  1657  011D                     	;# 
  1658  018C                     	;# 
  1659  018D                     	;# 
  1660  018E                     	;# 
  1661  0191                     	;# 
  1662  0191                     	;# 
  1663  0192                     	;# 
  1664  0193                     	;# 
  1665  0193                     	;# 
  1666  0194                     	;# 
  1667  0195                     	;# 
  1668  0196                     	;# 
  1669  0197                     	;# 
  1670  0199                     	;# 
  1671  019A                     	;# 
  1672  019B                     	;# 
  1673  019B                     	;# 
  1674  019B                     	;# 
  1675  019B                     	;# 
  1676  019C                     	;# 
  1677  019C                     	;# 
  1678  019D                     	;# 
  1679  019E                     	;# 
  1680  019F                     	;# 
  1681  020D                     	;# 
  1682  0210                     	;# 
  1683  0211                     	;# 
  1684  0211                     	;# 
  1685  0212                     	;# 
  1686  0212                     	;# 
  1687  0213                     	;# 
  1688  0213                     	;# 
  1689  0214                     	;# 
  1690  0214                     	;# 
  1691  0215                     	;# 
  1692  0215                     	;# 
  1693  0215                     	;# 
  1694  0216                     	;# 
  1695  0216                     	;# 
  1696  0217                     	;# 
  1697  0217                     	;# 
  1698  0291                     	;# 
  1699  0291                     	;# 
  1700  0292                     	;# 
  1701  0293                     	;# 
  1702  0298                     	;# 
  1703  0298                     	;# 
  1704  0299                     	;# 
  1705  029A                     	;# 
  1706  0394                     	;# 
  1707  0395                     	;# 
  1708  0396                     	;# 
  1709  0FE4                     	;# 
  1710  0FE5                     	;# 
  1711  0FE6                     	;# 
  1712  0FE7                     	;# 
  1713  0FE8                     	;# 
  1714  0FE9                     	;# 
  1715  0FEA                     	;# 
  1716  0FEB                     	;# 
  1717  0FED                     	;# 
  1718  0FEE                     	;# 
  1719  0FEF                     	;# 
  1720  0000                     	;# 
  1721  0001                     	;# 
  1722  0002                     	;# 
  1723  0003                     	;# 
  1724  0004                     	;# 
  1725  0005                     	;# 
  1726  0006                     	;# 
  1727  0007                     	;# 
  1728  0008                     	;# 
  1729  0009                     	;# 
  1730  000A                     	;# 
  1731  000B                     	;# 
  1732  000C                     	;# 
  1733  000D                     	;# 
  1734  000E                     	;# 
  1735  0010                     	;# 
  1736  0011                     	;# 
  1737  0012                     	;# 
  1738  0015                     	;# 
  1739  0016                     	;# 
  1740  0016                     	;# 
  1741  0017                     	;# 
  1742  0018                     	;# 
  1743  0019                     	;# 
  1744  001A                     	;# 
  1745  001B                     	;# 
  1746  001C                     	;# 
  1747  008C                     	;# 
  1748  008D                     	;# 
  1749  008E                     	;# 
  1750  0090                     	;# 
  1751  0091                     	;# 
  1752  0092                     	;# 
  1753  0095                     	;# 
  1754  0096                     	;# 
  1755  0097                     	;# 
  1756  0099                     	;# 
  1757  009A                     	;# 
  1758  009B                     	;# 
  1759  009B                     	;# 
  1760  009C                     	;# 
  1761  009D                     	;# 
  1762  009E                     	;# 
  1763  010C                     	;# 
  1764  010D                     	;# 
  1765  010E                     	;# 
  1766  0116                     	;# 
  1767  0117                     	;# 
  1768  011D                     	;# 
  1769  018C                     	;# 
  1770  018D                     	;# 
  1771  018E                     	;# 
  1772  0191                     	;# 
  1773  0191                     	;# 
  1774  0192                     	;# 
  1775  0193                     	;# 
  1776  0193                     	;# 
  1777  0194                     	;# 
  1778  0195                     	;# 
  1779  0196                     	;# 
  1780  0197                     	;# 
  1781  0199                     	;# 
  1782  019A                     	;# 
  1783  019B                     	;# 
  1784  019B                     	;# 
  1785  019B                     	;# 
  1786  019B                     	;# 
  1787  019C                     	;# 
  1788  019C                     	;# 
  1789  019D                     	;# 
  1790  019E                     	;# 
  1791  019F                     	;# 
  1792  020D                     	;# 
  1793  0210                     	;# 
  1794  0211                     	;# 
  1795  0211                     	;# 
  1796  0212                     	;# 
  1797  0212                     	;# 
  1798  0213                     	;# 
  1799  0213                     	;# 
  1800  0214                     	;# 
  1801  0214                     	;# 
  1802  0215                     	;# 
  1803  0215                     	;# 
  1804  0215                     	;# 
  1805  0216                     	;# 
  1806  0216                     	;# 
  1807  0217                     	;# 
  1808  0217                     	;# 
  1809  0291                     	;# 
  1810  0291                     	;# 
  1811  0292                     	;# 
  1812  0293                     	;# 
  1813  0298                     	;# 
  1814  0298                     	;# 
  1815  0299                     	;# 
  1816  029A                     	;# 
  1817  0394                     	;# 
  1818  0395                     	;# 
  1819  0396                     	;# 
  1820  0FE4                     	;# 
  1821  0FE5                     	;# 
  1822  0FE6                     	;# 
  1823  0FE7                     	;# 
  1824  0FE8                     	;# 
  1825  0FE9                     	;# 
  1826  0FEA                     	;# 
  1827  0FEB                     	;# 
  1828  0FED                     	;# 
  1829  0FEE                     	;# 
  1830  0FEF                     	;# 
  1831  0000                     	;# 
  1832  0001                     	;# 
  1833  0002                     	;# 
  1834  0003                     	;# 
  1835  0004                     	;# 
  1836  0005                     	;# 
  1837  0006                     	;# 
  1838  0007                     	;# 
  1839  0008                     	;# 
  1840  0009                     	;# 
  1841  000A                     	;# 
  1842  000B                     	;# 
  1843  000C                     	;# 
  1844  000D                     	;# 
  1845  000E                     	;# 
  1846  0010                     	;# 
  1847  0011                     	;# 
  1848  0012                     	;# 
  1849  0015                     	;# 
  1850  0016                     	;# 
  1851  0016                     	;# 
  1852  0017                     	;# 
  1853  0018                     	;# 
  1854  0019                     	;# 
  1855  001A                     	;# 
  1856  001B                     	;# 
  1857  001C                     	;# 
  1858  008C                     	;# 
  1859  008D                     	;# 
  1860  008E                     	;# 
  1861  0090                     	;# 
  1862  0091                     	;# 
  1863  0092                     	;# 
  1864  0095                     	;# 
  1865  0096                     	;# 
  1866  0097                     	;# 
  1867  0099                     	;# 
  1868  009A                     	;# 
  1869  009B                     	;# 
  1870  009B                     	;# 
  1871  009C                     	;# 
  1872  009D                     	;# 
  1873  009E                     	;# 
  1874  010C                     	;# 
  1875  010D                     	;# 
  1876  010E                     	;# 
  1877  0116                     	;# 
  1878  0117                     	;# 
  1879  011D                     	;# 
  1880  018C                     	;# 
  1881  018D                     	;# 
  1882  018E                     	;# 
  1883  0191                     	;# 
  1884  0191                     	;# 
  1885  0192                     	;# 
  1886  0193                     	;# 
  1887  0193                     	;# 
  1888  0194                     	;# 
  1889  0195                     	;# 
  1890  0196                     	;# 
  1891  0197                     	;# 
  1892  0199                     	;# 
  1893  019A                     	;# 
  1894  019B                     	;# 
  1895  019B                     	;# 
  1896  019B                     	;# 
  1897  019B                     	;# 
  1898  019C                     	;# 
  1899  019C                     	;# 
  1900  019D                     	;# 
  1901  019E                     	;# 
  1902  019F                     	;# 
  1903  020D                     	;# 
  1904  0210                     	;# 
  1905  0211                     	;# 
  1906  0211                     	;# 
  1907  0212                     	;# 
  1908  0212                     	;# 
  1909  0213                     	;# 
  1910  0213                     	;# 
  1911  0214                     	;# 
  1912  0214                     	;# 
  1913  0215                     	;# 
  1914  0215                     	;# 
  1915  0215                     	;# 
  1916  0216                     	;# 
  1917  0216                     	;# 
  1918  0217                     	;# 
  1919  0217                     	;# 
  1920  0291                     	;# 
  1921  0291                     	;# 
  1922  0292                     	;# 
  1923  0293                     	;# 
  1924  0298                     	;# 
  1925  0298                     	;# 
  1926  0299                     	;# 
  1927  029A                     	;# 
  1928  0394                     	;# 
  1929  0395                     	;# 
  1930  0396                     	;# 
  1931  0FE4                     	;# 
  1932  0FE5                     	;# 
  1933  0FE6                     	;# 
  1934  0FE7                     	;# 
  1935  0FE8                     	;# 
  1936  0FE9                     	;# 
  1937  0FEA                     	;# 
  1938  0FEB                     	;# 
  1939  0FED                     	;# 
  1940  0FEE                     	;# 
  1941  0FEF                     	;# 
  1942  0000                     	;# 
  1943  0001                     	;# 
  1944  0002                     	;# 
  1945  0003                     	;# 
  1946  0004                     	;# 
  1947  0005                     	;# 
  1948  0006                     	;# 
  1949  0007                     	;# 
  1950  0008                     	;# 
  1951  0009                     	;# 
  1952  000A                     	;# 
  1953  000B                     	;# 
  1954  000C                     	;# 
  1955  000D                     	;# 
  1956  000E                     	;# 
  1957  0010                     	;# 
  1958  0011                     	;# 
  1959  0012                     	;# 
  1960  0015                     	;# 
  1961  0016                     	;# 
  1962  0016                     	;# 
  1963  0017                     	;# 
  1964  0018                     	;# 
  1965  0019                     	;# 
  1966  001A                     	;# 
  1967  001B                     	;# 
  1968  001C                     	;# 
  1969  008C                     	;# 
  1970  008D                     	;# 
  1971  008E                     	;# 
  1972  0090                     	;# 
  1973  0091                     	;# 
  1974  0092                     	;# 
  1975  0095                     	;# 
  1976  0096                     	;# 
  1977  0097                     	;# 
  1978  0099                     	;# 
  1979  009A                     	;# 
  1980  009B                     	;# 
  1981  009B                     	;# 
  1982  009C                     	;# 
  1983  009D                     	;# 
  1984  009E                     	;# 
  1985  010C                     	;# 
  1986  010D                     	;# 
  1987  010E                     	;# 
  1988  0116                     	;# 
  1989  0117                     	;# 
  1990  011D                     	;# 
  1991  018C                     	;# 
  1992  018D                     	;# 
  1993  018E                     	;# 
  1994  0191                     	;# 
  1995  0191                     	;# 
  1996  0192                     	;# 
  1997  0193                     	;# 
  1998  0193                     	;# 
  1999  0194                     	;# 
  2000  0195                     	;# 
  2001  0196                     	;# 
  2002  0197                     	;# 
  2003  0199                     	;# 
  2004  019A                     	;# 
  2005  019B                     	;# 
  2006  019B                     	;# 
  2007  019B                     	;# 
  2008  019B                     	;# 
  2009  019C                     	;# 
  2010  019C                     	;# 
  2011  019D                     	;# 
  2012  019E                     	;# 
  2013  019F                     	;# 
  2014  020D                     	;# 
  2015  0210                     	;# 
  2016  0211                     	;# 
  2017  0211                     	;# 
  2018  0212                     	;# 
  2019  0212                     	;# 
  2020  0213                     	;# 
  2021  0213                     	;# 
  2022  0214                     	;# 
  2023  0214                     	;# 
  2024  0215                     	;# 
  2025  0215                     	;# 
  2026  0215                     	;# 
  2027  0216                     	;# 
  2028  0216                     	;# 
  2029  0217                     	;# 
  2030  0217                     	;# 
  2031  0291                     	;# 
  2032  0291                     	;# 
  2033  0292                     	;# 
  2034  0293                     	;# 
  2035  0298                     	;# 
  2036  0298                     	;# 
  2037  0299                     	;# 
  2038  029A                     	;# 
  2039  0394                     	;# 
  2040  0395                     	;# 
  2041  0396                     	;# 
  2042  0FE4                     	;# 
  2043  0FE5                     	;# 
  2044  0FE6                     	;# 
  2045  0FE7                     	;# 
  2046  0FE8                     	;# 
  2047  0FE9                     	;# 
  2048  0FEA                     	;# 
  2049  0FEB                     	;# 
  2050  0FED                     	;# 
  2051  0FEE                     	;# 
  2052  0FEF                     	;# 
  2053                           
  2054                           	psect	idataBANK4
  2055  1E16                     __pidataBANK4:	
  2056                           
  2057                           ;initializer for __product
  2058  1E16  3463               	retlw	99
  2059  1E17  3402               	retlw	2
  2060  1E18  3400               	retlw	0
  2061  1E19  3400               	retlw	0
  2062  1E1A  3400               	retlw	0
  2063  1E1B  3400               	retlw	0
  2064  1E1C  3400               	retlw	0
  2065  1E1D  3400               	retlw	0
  2066  1E1E  3400               	retlw	0
  2067  1E1F  3400               	retlw	0
  2068  1E20  3400               	retlw	0
  2069  1E21  3400               	retlw	0
  2070  1E22  34FF               	retlw	255
  2071  1E23  34FF               	retlw	255
  2072  1E24  34FF               	retlw	255
  2073  1E25  3400               	retlw	0
  2074  1E26  3400               	retlw	0
  2075  1E27  3400               	retlw	0
  2076  1E28  3400               	retlw	0
  2077  1E29  3400               	retlw	0
  2078  1E2A  3400               	retlw	0
  2079  1E2B  3400               	retlw	0
  2080  1E2C  3400               	retlw	0
  2081  1E2D  3400               	retlw	0
  2082  1E2E  3400               	retlw	0
  2083  1E2F  3400               	retlw	0
  2084  1E30  3400               	retlw	0
  2085  1E31  3400               	retlw	0
  2086  1E32  3400               	retlw	0
  2087  1E33  3400               	retlw	0
  2088  1E34  3400               	retlw	0
  2089  1E35  3400               	retlw	0
  2090                           
  2091                           	psect	stringtext
  2092  1000                     __pstringtext:	
  2093  1000                     _CC2500_registers_address:	
  2094  1000  3403               	retlw	3
  2095  1001  3416               	retlw	22
  2096  1002  3417               	retlw	23
  2097  1003  341E               	retlw	30
  2098  1004  341F               	retlw	31
  2099  1005  3420               	retlw	32
  2100  1006  342A               	retlw	42
  2101  1007  342B               	retlw	43
  2102  1008  340B               	retlw	11
  2103  1009  340C               	retlw	12
  2104  100A  340D               	retlw	13
  2105  100B  340E               	retlw	14
  2106  100C  340F               	retlw	15
  2107  100D  3410               	retlw	16
  2108  100E  3411               	retlw	17
  2109  100F  3412               	retlw	18
  2110  1010  3413               	retlw	19
  2111  1011  3414               	retlw	20
  2112  1012  340A               	retlw	10
  2113  1013  3415               	retlw	21
  2114  1014  3421               	retlw	33
  2115  1015  3422               	retlw	34
  2116  1016  3418               	retlw	24
  2117  1017  3419               	retlw	25
  2118  1018  341A               	retlw	26
  2119  1019  341B               	retlw	27
  2120  101A  341C               	retlw	28
  2121  101B  341D               	retlw	29
  2122  101C  3423               	retlw	35
  2123  101D  3424               	retlw	36
  2124  101E  3425               	retlw	37
  2125  101F  3426               	retlw	38
  2126  1020  3429               	retlw	41
  2127  1021  342C               	retlw	44
  2128  1022  342D               	retlw	45
  2129  1023  342E               	retlw	46
  2130  1024  3400               	retlw	0
  2131  1025  3401               	retlw	1
  2132  1026  3402               	retlw	2
  2133  1027  3407               	retlw	7
  2134  1028  3408               	retlw	8
  2135  1029  3409               	retlw	9
  2136  102A  3406               	retlw	6
  2137  102B  3404               	retlw	4
  2138  102C  3405               	retlw	5
  2139  102D  3427               	retlw	39
  2140  102E  3428               	retlw	40
  2141  102F                     __end_of_CC2500_registers_address:	
  2142  102F                     _CC2500_rfSettings:	
  2143  102F  3407               	retlw	7
  2144  1030  3407               	retlw	7
  2145  1031  3430               	retlw	48
  2146  1032  3487               	retlw	135
  2147  1033  346B               	retlw	107
  2148  1034  34F8               	retlw	248
  2149  1035  347F               	retlw	127
  2150  1036  343F               	retlw	63
  2151  1037  3409               	retlw	9
  2152  1038  3400               	retlw	0
  2153  1039  345C               	retlw	92
  2154  103A  34A7               	retlw	167
  2155  103B  3462               	retlw	98
  2156  103C  3486               	retlw	134
  2157  103D  3483               	retlw	131
  2158  103E  3403               	retlw	3
  2159  103F  3422               	retlw	34
  2160  1040  34F8               	retlw	248
  2161  1041  3400               	retlw	0
  2162  1042  3444               	retlw	68
  2163  1043  34B6               	retlw	182
  2164  1044  3410               	retlw	16
  2165  1045  3418               	retlw	24
  2166  1046  341D               	retlw	29
  2167  1047  341C               	retlw	28
  2168  1048  34C7               	retlw	199
  2169  1049  3400               	retlw	0
  2170  104A  34B2               	retlw	178
  2171  104B  34EA               	retlw	234
  2172  104C  340A               	retlw	10
  2173  104D  3400               	retlw	0
  2174  104E  3411               	retlw	17
  2175  104F  3459               	retlw	89
  2176  1050  3488               	retlw	136
  2177  1051  3431               	retlw	49
  2178  1052  340B               	retlw	11
  2179  1053  342F               	retlw	47
  2180  1054  342E               	retlw	46
  2181  1055  3406               	retlw	6
  2182  1056  3404               	retlw	4
  2183  1057  3405               	retlw	5
  2184  1058  3400               	retlw	0
  2185  1059  3430               	retlw	48
  2186  105A  34D3               	retlw	211
  2187  105B  3491               	retlw	145
  2188  105C  3441               	retlw	65
  2189  105D  3400               	retlw	0
  2190  105E                     __end_of_CC2500_rfSettings:	
  2191  105E                     _CC2500_patable_vaule:	
  2192  105E  34FE               	retlw	254
  2193  105F  34FE               	retlw	254
  2194  1060  34FE               	retlw	254
  2195  1061  34FE               	retlw	254
  2196  1062  34FE               	retlw	254
  2197  1063  34FE               	retlw	254
  2198  1064  34FE               	retlw	254
  2199  1065  34FE               	retlw	254
  2200  1066                     __end_of_CC2500_patable_vaule:	
  2201                           
  2202                           	psect	nvCOMMON
  2203  007B                     __pnvCOMMON:	
  2204  007B                     _myMain:	
  2205  007B                     	ds	1
  2206  007C                     _Memory:	
  2207  007C                     	ds	1
  2208                           
  2209                           	psect	nvBANK0
  2210  006E                     __pnvBANK0:	
  2211  006E                     _product:	
  2212  006E                     	ds	1
  2213                           
  2214                           	psect	nvBANK1
  2215  00EE                     __pnvBANK1:	
  2216  00EE                     _Timer0:	
  2217  00EE                     	ds	1
  2218  000C                     _PORTA	set	12
  2219  000D                     _PORTB	set	13
  2220  000E                     _PORTC	set	14
  2221  0015                     _TMR0	set	21
  2222  005F                     _GIE	set	95
  2223  005C                     _INTE	set	92
  2224  0059                     _INTF	set	89
  2225  005B                     _IOCIE	set	91
  2226  0058                     _IOCIF	set	88
  2227  005E                     _PEIE	set	94
  2228  0060                     _RA0	set	96
  2229  0063                     _RA3	set	99
  2230  0064                     _RA4	set	100
  2231  0066                     _RA6	set	102
  2232  0067                     _RA7	set	103
  2233  0068                     _RB0	set	104
  2234  0069                     _RB1	set	105
  2235  006B                     _RB3	set	107
  2236  006C                     _RB4	set	108
  2237  006D                     _RB5	set	109
  2238  0070                     _RC0	set	112
  2239  0071                     _RC1	set	113
  2240  0072                     _RC2	set	114
  2241  0074                     _RC4	set	116
  2242  0075                     _RC5	set	117
  2243  0077                     _RC7	set	119
  2244  005D                     _TMR0IE	set	93
  2245  005A                     _TMR0IF	set	90
  2246  009D                     _ADCON0	set	157
  2247  009E                     _ADCON1	set	158
  2248  009C                     _ADRESH	set	156
  2249  009B                     _ADRESL	set	155
  2250  0095                     _OPTION_REG	set	149
  2251  0099                     _OSCCON	set	153
  2252  008C                     _TRISA	set	140
  2253  008D                     _TRISB	set	141
  2254  008E                     _TRISC	set	142
  2255  04E9                     _GO_nDONE	set	1257
  2256  0117                     _FVRCON	set	279
  2257  010C                     _LATA	set	268
  2258  010D                     _LATB	set	269
  2259  010E                     _LATC	set	270
  2260  018C                     _ANSELA	set	396
  2261  018D                     _ANSELB	set	397
  2262  018E                     _ANSELC	set	398
  2263  0192                     _PMADRH	set	402
  2264  0191                     _PMADRL	set	401
  2265  0196                     _PMCON2	set	406
  2266  0194                     _PMDATH	set	404
  2267  0193                     _PMDATL	set	403
  2268  0CAE                     _CFGS	set	3246
  2269  0CAC                     _FREE	set	3244
  2270  0CAD                     _LWLO	set	3245
  2271  0CA8                     _RD	set	3240
  2272  0CA9                     _WR	set	3241
  2273  0CAA                     _WREN	set	3242
  2274  1068                     _WPUB0	set	4200
  2275  1069                     _WPUB1	set	4201
  2276  106A                     _WPUB2	set	4202
  2277  0396                     _IOCBF	set	918
  2278  0395                     _IOCBN	set	917
  2279  0394                     _IOCBP	set	916
  2280  1CB2                     _IOCBF2	set	7346
  2281                           
  2282                           ; #config settings
  2283  0000                     
  2284                           	psect	cinit
  2285  0018                     start_initialization:	
  2286  0018                     __initialization:	
  2287                           
  2288                           ; Clear objects allocated to BITCOMMON
  2289  0018  01FD               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
  2290                           
  2291                           ; Clear objects allocated to COMMON
  2292  0019  01F8               	clrf	__pbssCOMMON& (0+127)
  2293  001A  01F9               	clrf	(__pbssCOMMON+1)& (0+127)
  2294  001B  01FA               	clrf	(__pbssCOMMON+2)& (0+127)
  2295                           
  2296                           ; Clear objects allocated to BANK0
  2297  001C  01EF               	clrf	__pbssBANK0& (0+127)
  2298                           
  2299                           ; Clear objects allocated to BANK1
  2300  001D  30A0               	movlw	low __pbssBANK1
  2301  001E  0084               	movwf	4
  2302  001F  3000               	movlw	high __pbssBANK1
  2303  0020  0085               	movwf	5
  2304  0021  304E               	movlw	78
  2305  0022  3199  21AA  3180   	fcall	clear_ram0
  2306                           
  2307                           ; Clear objects allocated to BANK2
  2308  0025  3020               	movlw	low __pbssBANK2
  2309  0026  0084               	movwf	4
  2310  0027  3001               	movlw	high __pbssBANK2
  2311  0028  0085               	movwf	5
  2312  0029  304E               	movlw	78
  2313  002A  3199  21AA  3180   	fcall	clear_ram0
  2314                           
  2315                           ; Clear objects allocated to BANK3
  2316  002D  30A0               	movlw	low __pbssBANK3
  2317  002E  0084               	movwf	4
  2318  002F  3001               	movlw	high __pbssBANK3
  2319  0030  0085               	movwf	5
  2320  0031  3042               	movlw	66
  2321  0032  3199  21AA  3180   	fcall	clear_ram0
  2322                           
  2323                           ; Clear objects allocated to BANK4
  2324  0035  3040               	movlw	low __pbssBANK4
  2325  0036  0084               	movwf	4
  2326  0037  3002               	movlw	high __pbssBANK4
  2327  0038  0085               	movwf	5
  2328  0039  3014               	movlw	20
  2329  003A  3199  21AA  3180   	fcall	clear_ram0
  2330                           
  2331                           ; Clear objects allocated to BANK5
  2332  003D  30A0               	movlw	low __pbssBANK5
  2333  003E  0084               	movwf	4
  2334  003F  3002               	movlw	high __pbssBANK5
  2335  0040  0085               	movwf	5
  2336  0041  3025               	movlw	37
  2337  0042  3199  21AA  3180   	fcall	clear_ram0
  2338                           
  2339                           ; Initialize objects allocated to BANK4
  2340  0045  3016               	movlw	low __pidataBANK4
  2341  0046  0084               	movwf	4
  2342  0047  309E               	movlw	(high __pidataBANK4)| (0+128)
  2343  0048  0085               	movwf	5
  2344  0049  3020               	movlw	low __pdataBANK4
  2345  004A  0086               	movwf	6
  2346  004B  3002               	movlw	high __pdataBANK4
  2347  004C  0087               	movwf	7
  2348  004D  3020               	movlw	32
  2349  004E  3199  21A4         	fcall	init_ram
  2350  0050                     end_of_initialization:	
  2351                           ;End of C runtime variable initialization code
  2352                           
  2353  0050                     __end_of__initialization:	
  2354  0050  107E               	bcf	pic14e$flags,0	;clear compiler interrupt flag
  2355  0051  0020               	movlb	0
  2356  0052  3197  2F35         	ljmp	_main	;jump to C main() function
  2357                           
  2358                           	psect	bitbssCOMMON
  2359  03E8                     __pbitbssCOMMON:	
  2360  03E8                     _Receive_OK:	
  2361  03E8                     	ds	1
  2362  03E9                     _Transceive_OK:	
  2363  03E9                     	ds	1
  2364                           
  2365                           	psect	bssCOMMON
  2366  0078                     __pbssCOMMON:	
  2367  0078                     _DelayOff:	
  2368  0078                     	ds	1
  2369  0079                     _DimmerLights:	
  2370  0079                     	ds	1
  2371  007A                     _DimmerLightsIntr:	
  2372  007A                     	ds	1
  2373                           
  2374                           	psect	bssBANK0
  2375  006F                     __pbssBANK0:	
  2376  006F                     _Sw:	
  2377  006F                     	ds	1
  2378                           
  2379                           	psect	bssBANK1
  2380  00A0                     __pbssBANK1:	
  2381  00A0                     _RF_Data:	
  2382  00A0                     	ds	21
  2383  00B5                     _Buz1:	
  2384  00B5                     	ds	12
  2385  00C1                     _RF1:	
  2386  00C1                     	ds	5
  2387  00C6                     _LED:	
  2388  00C6                     	ds	2
  2389  00C8                     _RF_Count:	
  2390  00C8                     	ds	2
  2391  00CA                     _CRC:	
  2392  00CA                     	ds	1
  2393  00CB                     _Dimmer:	
  2394  00CB                     	ds	1
  2395  00CC                     _DimmerLights11:	
  2396  00CC                     	ds	1
  2397  00CD                     _DimmerLights22:	
  2398  00CD                     	ds	1
  2399  00CE                     _DimmerLightsIntrIOC:	
  2400  00CE                     	ds	1
  2401  00CF                     _RFSW:	
  2402  00CF                     	ds	1
  2403  00D0                     _RSSI:	
  2404  00D0                     	ds	1
  2405  00D1                     _Rx_Length:	
  2406  00D1                     	ds	1
  2407  00D2                     _SPI0Buffer:	
  2408  00D2                     	ds	1
  2409  00D3                     _Tx_Length:	
  2410  00D3                     	ds	1
  2411  00D4                     _r_address:	
  2412  00D4                     	ds	1
  2413  00D5                     _r_data:	
  2414  00D5                     	ds	1
  2415  00D6                     _s_data:	
  2416  00D6                     	ds	1
  2417  00D7                     _Temp1:	
  2418  00D7                     	ds	14
  2419  00E5                     _VarErrLED:	
  2420  00E5                     	ds	4
  2421  00E9                     _Dimmer1:	
  2422  00E9                     	ds	3
  2423  00EC                     _RFSW1:	
  2424  00EC                     	ds	1
  2425  00ED                     _RFSW2:	
  2426  00ED                     	ds	1
  2427                           
  2428                           	psect	bssBANK2
  2429  0120                     __pbssBANK2:	
  2430  0120                     _Load1:	
  2431  0120                     	ds	70
  2432  0166                     _VarLED1:	
  2433  0166                     	ds	4
  2434  016A                     _VarLED2:	
  2435  016A                     	ds	4
  2436                           
  2437                           	psect	bssBANK3
  2438  01A0                     __pbssBANK3:	
  2439  01A0                     _DimmerLights1:	
  2440  01A0                     	ds	15
  2441  01AF                     _DimmerLights2:	
  2442  01AF                     	ds	15
  2443  01BE                     _Sw1:	
  2444  01BE                     	ds	9
  2445  01C7                     _Sw2:	
  2446  01C7                     	ds	9
  2447  01D0                     _VarTimer0:	
  2448  01D0                     	ds	8
  2449  01D8                     _DlySw1:	
  2450  01D8                     	ds	5
  2451  01DD                     _DlySw2:	
  2452  01DD                     	ds	5
  2453                           
  2454                           	psect	bssBANK4
  2455  0240                     __pbssBANK4:	
  2456  0240                     __myMain:	
  2457  0240                     	ds	20
  2458                           
  2459                           	psect	dataBANK4
  2460  0220                     __pdataBANK4:	
  2461  0220                     __product:	
  2462  0220                     	ds	32
  2463                           
  2464                           	psect	bssBANK5
  2465  02A0                     __pbssBANK5:	
  2466  02A0                     _VarMemory:	
  2467  02A0                     	ds	37
  2468                           
  2469                           	psect	clrtext
  2470  19AA                     clear_ram0:	
  2471                           ;	Called with FSR0 containing the base address, and
  2472                           ;	WREG with the size to clear
  2473                           
  2474  19AA  0064               	clrwdt	;clear the watchdog before getting into this loop
  2475  19AB                     clrloop0:	
  2476  19AB  0180               	clrf	0	;clear RAM location pointed to by FSR
  2477  19AC  3101               	addfsr 0,1
  2478  19AD  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2479  19AE  29AB               	goto	clrloop0	;have we reached the end yet?
  2480  19AF  3400               	retlw	0	;all done for this memory range, return
  2481                           
  2482                           	psect	inittext
  2483  19A4                     init_ram:	
  2484  19A4  00FE               	movwf	126
  2485  19A5                     initloop:	
  2486  19A5  0012               	moviw fsr0++
  2487  19A6  001E               	movwi fsr1++
  2488  19A7  0BFE               	decfsz	126,f
  2489  19A8  29A5               	goto	initloop
  2490  19A9  3400               	retlw	0
  2491                           
  2492                           	psect	cstackCOMMON
  2493  0070                     __pcstackCOMMON:	
  2494  0070                     ?_CC2500_WriteByte:	
  2495  0070                     ?_CC2500_WriteCommand:	
  2496                           ; 0 bytes @ 0x0
  2497                           
  2498  0070                     ?_CC2500_ReadStatus:	
  2499                           ; 0 bytes @ 0x0
  2500                           
  2501  0070                     ?_CC2500_ReadByte:	
  2502                           ; 0 bytes @ 0x0
  2503                           
  2504  0070                     ?_CC2500_PowerRST:	
  2505                           ; 0 bytes @ 0x0
  2506                           
  2507  0070                     ?_CC2500_InitSetREG:	
  2508                           ; 0 bytes @ 0x0
  2509                           
  2510  0070                     ?_CC2500_InitPATable:	
  2511                           ; 0 bytes @ 0x0
  2512                           
  2513  0070                     ?_CC2500_ClearTXFIFO:	
  2514                           ; 0 bytes @ 0x0
  2515                           
  2516  0070                     ?_CC2500_ClearRXFIFO:	
  2517                           ; 0 bytes @ 0x0
  2518                           
  2519  0070                     ?_CC2500_FrequencyCabr:	
  2520                           ; 0 bytes @ 0x0
  2521                           
  2522  0070                     ?_CC2500_SIDLEMode:	
  2523                           ; 0 bytes @ 0x0
  2524                           
  2525  0070                     ?_DlyOff_Initialization:	
  2526                           ; 0 bytes @ 0x0
  2527                           
  2528  0070                     ?_DlyOff_Main:	
  2529                           ; 0 bytes @ 0x0
  2530                           
  2531  0070                     ?_setTxData:	
  2532                           ; 0 bytes @ 0x0
  2533                           
  2534  0070                     ?_setDimmerLights_Initialization:	
  2535                           ; 0 bytes @ 0x0
  2536                           
  2537  0070                     ?_Dimmer_Initialization:	
  2538                           ; 0 bytes @ 0x0
  2539                           
  2540  0070                     ?_setLoad_GO:	
  2541                           ; 0 bytes @ 0x0
  2542                           
  2543  0070                     ?_setMemory_GO:	
  2544                           ; 0 bytes @ 0x0
  2545                           
  2546  0070                     ?_setDimmerLights_Main:	
  2547                           ; 0 bytes @ 0x0
  2548                           
  2549  0070                     ?_setDimmerLights_ERROR:	
  2550                           ; 0 bytes @ 0x0
  2551                           
  2552  0070                     ?_setLoad_Count:	
  2553                           ; 0 bytes @ 0x0
  2554                           
  2555  0070                     ?_setLED_Initialization:	
  2556                           ; 0 bytes @ 0x0
  2557                           
  2558  0070                     ?_setLED_Main:	
  2559                           ; 0 bytes @ 0x0
  2560                           
  2561  0070                     ?_Fosc_Set:	
  2562                           ; 0 bytes @ 0x0
  2563                           
  2564  0070                     ?_IO_Set:	
  2565                           ; 0 bytes @ 0x0
  2566                           
  2567  0070                     ?_TMR0_Set:	
  2568                           ; 0 bytes @ 0x0
  2569                           
  2570  0070                     ?_ADC_Set:	
  2571                           ; 0 bytes @ 0x0
  2572                           
  2573  0070                     ?_INT_Set:	
  2574                           ; 0 bytes @ 0x0
  2575                           
  2576  0070                     ?_IOC_Set:	
  2577                           ; 0 bytes @ 0x0
  2578                           
  2579  0070                     ?_IOC_ISR:	
  2580                           ; 0 bytes @ 0x0
  2581                           
  2582  0070                     ?_TMR0_ISR:	
  2583                           ; 0 bytes @ 0x0
  2584                           
  2585  0070                     ?_INT_ISR:	
  2586                           ; 0 bytes @ 0x0
  2587                           
  2588  0070                     ?_setRF_ReceiveGO:	
  2589                           ; 0 bytes @ 0x0
  2590                           
  2591  0070                     ??_setRF_ReceiveGO:	
  2592                           ; 0 bytes @ 0x0
  2593                           
  2594  0070                     ?_Flash_Memory_Write:	
  2595                           ; 0 bytes @ 0x0
  2596                           
  2597  0070                     ?_Flash_Memory_Modify:	
  2598                           ; 0 bytes @ 0x0
  2599                           
  2600  0070                     ?_myMain_Initialization:	
  2601                           ; 0 bytes @ 0x0
  2602                           
  2603  0070                     ?_Temp_Initialization:	
  2604                           ; 0 bytes @ 0x0
  2605                           
  2606  0070                     ?_Load_Initialization:	
  2607                           ; 0 bytes @ 0x0
  2608                           
  2609  0070                     ?_Switch_Initialization:	
  2610                           ; 0 bytes @ 0x0
  2611                           
  2612  0070                     ?_RF_Initialization:	
  2613                           ; 0 bytes @ 0x0
  2614                           
  2615  0070                     ?_getLoad_AD:	
  2616                           ; 0 bytes @ 0x0
  2617                           
  2618  0070                     ?_getTemp_AD:	
  2619                           ; 0 bytes @ 0x0
  2620                           
  2621  0070                     ?_my_Main:	
  2622                           ; 0 bytes @ 0x0
  2623                           
  2624  0070                     ?_my_TestPointCleared:	
  2625                           ; 0 bytes @ 0x0
  2626                           
  2627  0070                     ?_Temp_Main:	
  2628                           ; 0 bytes @ 0x0
  2629                           
  2630  0070                     ?_Load_Main:	
  2631                           ; 0 bytes @ 0x0
  2632                           
  2633  0070                     ?_Switch_Main:	
  2634                           ; 0 bytes @ 0x0
  2635                           
  2636  0070                     ?_RF_Main:	
  2637                           ; 0 bytes @ 0x0
  2638                           
  2639  0070                     ?_setTemp_Enable:	
  2640                           ; 0 bytes @ 0x0
  2641                           
  2642  0070                     ?_setLoad_Enable:	
  2643                           ; 0 bytes @ 0x0
  2644                           
  2645  0070                     ?_setSw_Enable:	
  2646                           ; 0 bytes @ 0x0
  2647                           
  2648  0070                     ?_setRF_Enable:	
  2649                           ; 0 bytes @ 0x0
  2650                           
  2651  0070                     ?_setLoad_AH_AL_Restore:	
  2652                           ; 0 bytes @ 0x0
  2653                           
  2654  0070                     ?_setLoad_Exceptions:	
  2655                           ; 0 bytes @ 0x0
  2656                           
  2657  0070                     ?_setTemp_Initialization:	
  2658                           ; 0 bytes @ 0x0
  2659                           
  2660  0070                     ?_setTemp_Main:	
  2661                           ; 0 bytes @ 0x0
  2662                           
  2663  0070                     ?_setOverTemp_Exceptions:	
  2664                           ; 0 bytes @ 0x0
  2665                           
  2666  0070                     ?_setRF_Initialization:	
  2667                           ; 0 bytes @ 0x0
  2668                           
  2669  0070                     ?_setRF_Main:	
  2670                           ; 0 bytes @ 0x0
  2671                           
  2672  0070                     ?_RF_RxDisable:	
  2673                           ; 0 bytes @ 0x0
  2674                           
  2675  0070                     ?_getRxData:	
  2676                           ; 0 bytes @ 0x0
  2677                           
  2678  0070                     ?_setLog_Code:	
  2679                           ; 0 bytes @ 0x0
  2680                           
  2681  0070                     ?_setControl_Lights_Table:	
  2682                           ; 0 bytes @ 0x0
  2683                           
  2684  0070                     ?_setRFSW_Control:	
  2685                           ; 0 bytes @ 0x0
  2686                           
  2687  0070                     ?_setRFSW_AdjControl:	
  2688                           ; 0 bytes @ 0x0
  2689                           
  2690  0070                     ?_setRF_DimmerValue:	
  2691                           ; 0 bytes @ 0x0
  2692                           
  2693  0070                     ?_setSw_Initialization:	
  2694                           ; 0 bytes @ 0x0
  2695                           
  2696  0070                     ?_setSw_Main:	
  2697                           ; 0 bytes @ 0x0
  2698                           
  2699  0070                     ?_Sw_DimmerOnFunc:	
  2700                           ; 0 bytes @ 0x0
  2701                           
  2702  0070                     ?_Sw_DimmerAdjFunc:	
  2703                           ; 0 bytes @ 0x0
  2704                           
  2705  0070                     ?_Sw_DimmerOffFunc:	
  2706                           ; 0 bytes @ 0x0
  2707                           
  2708  0070                     ?_Buzzer_Initialization:	
  2709                           ; 0 bytes @ 0x0
  2710                           
  2711  0070                     ?_Buzzer_Main:	
  2712                           ; 0 bytes @ 0x0
  2713                           
  2714  0070                     ?_CC2500_TxData:	
  2715                           ; 0 bytes @ 0x0
  2716                           
  2717  0070                     ?_CC2500_RxData:	
  2718                           ; 0 bytes @ 0x0
  2719                           
  2720  0070                     ?_CC2500_PowerOnInitial:	
  2721                           ; 0 bytes @ 0x0
  2722                           
  2723  0070                     ?_DelayOffPointSelect:	
  2724                           ; 0 bytes @ 0x0
  2725                           
  2726  0070                     ?_DelayOff_Initialization:	
  2727                           ; 0 bytes @ 0x0
  2728                           
  2729  0070                     ?_DelayOff_Main:	
  2730                           ; 0 bytes @ 0x0
  2731                           
  2732  0070                     ?_DimmerIntrIOCPointSelect:	
  2733                           ; 0 bytes @ 0x0
  2734                           
  2735  0070                     ??_DimmerIntrIOCPointSelect:	
  2736                           ; 0 bytes @ 0x0
  2737                           
  2738  0070                     ?_setDimmerLights_IntrIOC_GO:	
  2739                           ; 0 bytes @ 0x0
  2740                           
  2741  0070                     ?_DimmerIntrPointSelect:	
  2742                           ; 0 bytes @ 0x0
  2743                           
  2744  0070                     ??_DimmerIntrPointSelect:	
  2745                           ; 0 bytes @ 0x0
  2746                           
  2747  0070                     ?_setDimmerLights_IntrControl:	
  2748                           ; 0 bytes @ 0x0
  2749                           
  2750  0070                     ?_DimmerLightsPointSelect:	
  2751                           ; 0 bytes @ 0x0
  2752                           
  2753  0070                     ?_DimmerLights_Initialization:	
  2754                           ; 0 bytes @ 0x0
  2755                           
  2756  0070                     ?_DimmerLights_Close:	
  2757                           ; 0 bytes @ 0x0
  2758                           
  2759  0070                     ?_DimmerLights_Main:	
  2760                           ; 0 bytes @ 0x0
  2761                           
  2762  0070                     ?_DimmerLights_Exceptions:	
  2763                           ; 0 bytes @ 0x0
  2764                           
  2765  0070                     ?_setDimmerLights_AdjRF:	
  2766                           ; 0 bytes @ 0x0
  2767                           
  2768  0070                     ?_LedPointSelect:	
  2769                           ; 0 bytes @ 0x0
  2770                           
  2771  0070                     ?_LED_Initialization:	
  2772                           ; 0 bytes @ 0x0
  2773                           
  2774  0070                     ?_LED_Main:	
  2775                           ; 0 bytes @ 0x0
  2776                           
  2777  0070                     ?_Mcu_Initialization:	
  2778                           ; 0 bytes @ 0x0
  2779                           
  2780  0070                     ?_ISR:	
  2781                           ; 0 bytes @ 0x0
  2782                           
  2783  0070                     ?_setDimmerReClock:	
  2784                           ; 0 bytes @ 0x0
  2785                           
  2786  0070                     ?_Flash_Memory_Initialization:	
  2787                           ; 0 bytes @ 0x0
  2788                           
  2789  0070                     ?_Flash_Memory_Main:	
  2790                           ; 0 bytes @ 0x0
  2791                           
  2792  0070                     ?_Flash_Memory_Unlock:	
  2793                           ; 0 bytes @ 0x0
  2794                           
  2795  0070                     ?_Flash_Memory_Erasing:	
  2796                           ; 0 bytes @ 0x0
  2797                           
  2798  0070                     ?_setRF_Learn:	
  2799                           ; 0 bytes @ 0x0
  2800                           
  2801  0070                     ?_RfSWPointSelect:	
  2802                           ; 0 bytes @ 0x0
  2803                           
  2804  0070                     ?_TouchPower:	
  2805                           ; 0 bytes @ 0x0
  2806                           
  2807  0070                     ?_SwPointSelect:	
  2808                           ; 0 bytes @ 0x0
  2809                           
  2810  0070                     ?i1_setLoad_StatusOff:	
  2811                           ; 0 bytes @ 0x0
  2812                           
  2813  0070                     ?_DelayTimejudge:	
  2814                           ; 0 bytes @ 0x0
  2815                           
  2816  0070                     ?_getDimmerLights_StatusFlag:	
  2817                           ; 1 bytes @ 0x0
  2818                           
  2819  0070                     ?_getPercentValue:	
  2820                           ; 1 bytes @ 0x0
  2821                           
  2822  0070                     ?_Flash_Memory_Read:	
  2823                           ; 1 bytes @ 0x0
  2824                           
  2825  0070                     ?_getTemp_Safe:	
  2826                           ; 1 bytes @ 0x0
  2827                           
  2828  0070                     ?_setPercentValue:	
  2829                           ; 1 bytes @ 0x0
  2830                           
  2831  0070                     ?_getLoad_Safe:	
  2832                           ; 1 bytes @ 0x0
  2833                           
  2834  0070                     setRF_ReceiveGO@command:	
  2835                           ; 1 bytes @ 0x0
  2836                           
  2837  0070                     i1setLoad_StatusOff@command:	
  2838                           ; 1 bytes @ 0x0
  2839                           
  2840                           
  2841                           ; 1 bytes @ 0x0
  2842  0070                     	ds	1
  2843  0071                     ??_INT_ISR:	
  2844  0071                     ??i1_setLoad_StatusOff:	
  2845                           ; 0 bytes @ 0x1
  2846                           
  2847  0071                     DimmerIntrIOCPointSelect@lights:	
  2848                           ; 0 bytes @ 0x1
  2849                           
  2850  0071                     DimmerIntrPointSelect@lights:	
  2851                           ; 1 bytes @ 0x1
  2852                           
  2853  0071                     i1setLoad_StatusOff@lights:	
  2854                           ; 1 bytes @ 0x1
  2855                           
  2856                           
  2857                           ; 1 bytes @ 0x1
  2858  0071                     	ds	1
  2859  0072                     ??_setDimmerLights_IntrIOC_GO:	
  2860  0072                     ??_setDimmerLights_IntrControl:	
  2861                           ; 0 bytes @ 0x2
  2862                           
  2863  0072                     setDimmerLights_IntrIOC_GO@lights:	
  2864                           ; 0 bytes @ 0x2
  2865                           
  2866                           
  2867                           ; 1 bytes @ 0x2
  2868  0072                     	ds	1
  2869  0073                     ??_IOC_ISR:	
  2870  0073                     ??_setDimmerReClock:	
  2871                           ; 0 bytes @ 0x3
  2872                           
  2873                           
  2874                           ; 0 bytes @ 0x3
  2875  0073                     	ds	3
  2876  0076                     setDimmerLights_IntrControl@lights:	
  2877                           
  2878                           ; 1 bytes @ 0x6
  2879  0076                     	ds	1
  2880  0077                     ??_TMR0_ISR:	
  2881  0077                     ??_ISR:	
  2882                           ; 0 bytes @ 0x7
  2883                           
  2884                           
  2885                           ; 0 bytes @ 0x7
  2886  0077                     	ds	1
  2887                           
  2888                           	psect	cstackBANK0
  2889  0020                     __pcstackBANK0:	
  2890  0020                     ??_CC2500_WriteByte:	
  2891  0020                     ??_CC2500_ReadByte:	
  2892                           ; 0 bytes @ 0x0
  2893                           
  2894  0020                     ?_DelayTime_1us:	
  2895                           ; 0 bytes @ 0x0
  2896                           
  2897  0020                     ??_setTxData:	
  2898                           ; 0 bytes @ 0x0
  2899                           
  2900  0020                     ?_setLoad_StatusOff:	
  2901                           ; 0 bytes @ 0x0
  2902                           
  2903  0020                     ??_Dimmer_Initialization:	
  2904                           ; 0 bytes @ 0x0
  2905                           
  2906  0020                     ??_getDimmerLights_StatusFlag:	
  2907                           ; 0 bytes @ 0x0
  2908                           
  2909  0020                     ??_setLoad_GO:	
  2910                           ; 0 bytes @ 0x0
  2911                           
  2912  0020                     ??_setMemory_GO:	
  2913                           ; 0 bytes @ 0x0
  2914                           
  2915  0020                     ??_setLoad_Count:	
  2916                           ; 0 bytes @ 0x0
  2917                           
  2918  0020                     ?_setLoad_StatusOn:	
  2919                           ; 0 bytes @ 0x0
  2920                           
  2921  0020                     ??_Fosc_Set:	
  2922                           ; 0 bytes @ 0x0
  2923                           
  2924  0020                     ??_IO_Set:	
  2925                           ; 0 bytes @ 0x0
  2926                           
  2927  0020                     ??_TMR0_Set:	
  2928                           ; 0 bytes @ 0x0
  2929                           
  2930  0020                     ??_ADC_Set:	
  2931                           ; 0 bytes @ 0x0
  2932                           
  2933  0020                     ??_INT_Set:	
  2934                           ; 0 bytes @ 0x0
  2935                           
  2936  0020                     ??_IOC_Set:	
  2937                           ; 0 bytes @ 0x0
  2938                           
  2939  0020                     ??_Flash_Memory_Read:	
  2940                           ; 0 bytes @ 0x0
  2941                           
  2942  0020                     ??_Flash_Memory_Write:	
  2943                           ; 0 bytes @ 0x0
  2944                           
  2945  0020                     ??_myMain_Initialization:	
  2946                           ; 0 bytes @ 0x0
  2947                           
  2948  0020                     ??_Temp_Initialization:	
  2949                           ; 0 bytes @ 0x0
  2950                           
  2951  0020                     ??_my_TestPointCleared:	
  2952                           ; 0 bytes @ 0x0
  2953                           
  2954  0020                     ??_setTemp_Enable:	
  2955                           ; 0 bytes @ 0x0
  2956                           
  2957  0020                     ??_setLoad_Enable:	
  2958                           ; 0 bytes @ 0x0
  2959                           
  2960  0020                     ??_setRF_Enable:	
  2961                           ; 0 bytes @ 0x0
  2962                           
  2963  0020                     ??_setLoad_AH_AL_Restore:	
  2964                           ; 0 bytes @ 0x0
  2965                           
  2966  0020                     ??_getTemp_Safe:	
  2967                           ; 0 bytes @ 0x0
  2968                           
  2969  0020                     ??_setTemp_Initialization:	
  2970                           ; 0 bytes @ 0x0
  2971                           
  2972  0020                     ??_setRF_Initialization:	
  2973                           ; 0 bytes @ 0x0
  2974                           
  2975  0020                     ??_Buzzer_Initialization:	
  2976                           ; 0 bytes @ 0x0
  2977                           
  2978  0020                     ??_Buzzer_Main:	
  2979                           ; 0 bytes @ 0x0
  2980                           
  2981  0020                     ??_DelayOffPointSelect:	
  2982                           ; 0 bytes @ 0x0
  2983                           
  2984  0020                     ??_DimmerLightsPointSelect:	
  2985                           ; 0 bytes @ 0x0
  2986                           
  2987  0020                     ??_LedPointSelect:	
  2988                           ; 0 bytes @ 0x0
  2989                           
  2990  0020                     ??_Flash_Memory_Unlock:	
  2991                           ; 0 bytes @ 0x0
  2992                           
  2993  0020                     ??_Flash_Memory_Erasing:	
  2994                           ; 0 bytes @ 0x0
  2995                           
  2996  0020                     ??_getLoad_Safe:	
  2997                           ; 0 bytes @ 0x0
  2998                           
  2999  0020                     ??_setRF_Learn:	
  3000                           ; 0 bytes @ 0x0
  3001                           
  3002  0020                     ??_RfSWPointSelect:	
  3003                           ; 0 bytes @ 0x0
  3004                           
  3005  0020                     ??_TouchPower:	
  3006                           ; 0 bytes @ 0x0
  3007                           
  3008  0020                     ??_SwPointSelect:	
  3009                           ; 0 bytes @ 0x0
  3010                           
  3011  0020                     ?___bmul:	
  3012                           ; 0 bytes @ 0x0
  3013                           
  3014  0020                     ?_getBuz_GO:	
  3015                           ; 1 bytes @ 0x0
  3016                           
  3017  0020                     ?_getAD:	
  3018                           ; 2 bytes @ 0x0
  3019                           
  3020  0020                     ?___wmul:	
  3021                           ; 2 bytes @ 0x0
  3022                           
  3023  0020                     ?___awdiv:	
  3024                           ; 2 bytes @ 0x0
  3025                           
  3026  0020                     ?___lwdiv:	
  3027                           ; 2 bytes @ 0x0
  3028                           
  3029  0020                     ?___ftpack:	
  3030                           ; 2 bytes @ 0x0
  3031                           
  3032  0020                     LedPointSelect@led:	
  3033                           ; 3 bytes @ 0x0
  3034                           
  3035  0020                     getAD@adcon1:	
  3036                           ; 1 bytes @ 0x0
  3037                           
  3038  0020                     setLoad_Enable@command:	
  3039                           ; 1 bytes @ 0x0
  3040                           
  3041  0020                     setLoad_GO@command:	
  3042                           ; 1 bytes @ 0x0
  3043                           
  3044  0020                     setLoad_StatusOn@command:	
  3045                           ; 1 bytes @ 0x0
  3046                           
  3047  0020                     setLoad_StatusOff@command:	
  3048                           ; 1 bytes @ 0x0
  3049                           
  3050  0020                     setTemp_Enable@command:	
  3051                           ; 1 bytes @ 0x0
  3052                           
  3053  0020                     setRF_Learn@command:	
  3054                           ; 1 bytes @ 0x0
  3055                           
  3056  0020                     setRF_Enable@command:	
  3057                           ; 1 bytes @ 0x0
  3058                           
  3059  0020                     ___bmul@multiplicand:	
  3060                           ; 1 bytes @ 0x0
  3061                           
  3062  0020                     DelayTime_1us@count:	
  3063                           ; 1 bytes @ 0x0
  3064                           
  3065  0020                     ___wmul@multiplier:	
  3066                           ; 2 bytes @ 0x0
  3067                           
  3068  0020                     ___awdiv@divisor:	
  3069                           ; 2 bytes @ 0x0
  3070                           
  3071  0020                     ___lwdiv@divisor:	
  3072                           ; 2 bytes @ 0x0
  3073                           
  3074  0020                     ___ftpack@arg:	
  3075                           ; 2 bytes @ 0x0
  3076                           
  3077                           
  3078                           ; 3 bytes @ 0x0
  3079  0020                     	ds	1
  3080  0021                     ??_setLoad_StatusOff:	
  3081  0021                     ?_setLED:	
  3082                           ; 0 bytes @ 0x1
  3083                           
  3084  0021                     ??_setLoad_StatusOn:	
  3085                           ; 0 bytes @ 0x1
  3086                           
  3087  0021                     ??_setLED_Main:	
  3088                           ; 0 bytes @ 0x1
  3089                           
  3090  0021                     ??_RF_Initialization:	
  3091                           ; 0 bytes @ 0x1
  3092                           
  3093  0021                     ??_Mcu_Initialization:	
  3094                           ; 0 bytes @ 0x1
  3095                           
  3096  0021                     ??___bmul:	
  3097                           ; 0 bytes @ 0x1
  3098                           
  3099  0021                     CC2500_WriteByte@loop_a:	
  3100                           ; 0 bytes @ 0x1
  3101                           
  3102  0021                     CC2500_ReadByte@loop_b:	
  3103                           ; 1 bytes @ 0x1
  3104                           
  3105  0021                     DelayOffPointSelect@sw:	
  3106                           ; 1 bytes @ 0x1
  3107                           
  3108  0021                     DimmerLightsPointSelect@lights:	
  3109                           ; 1 bytes @ 0x1
  3110                           
  3111  0021                     getDimmerLights_StatusFlag@Status:	
  3112                           ; 1 bytes @ 0x1
  3113                           
  3114  0021                     setLED@command:	
  3115                           ; 1 bytes @ 0x1
  3116                           
  3117  0021                     Flash_Memory_Read@i:	
  3118                           ; 1 bytes @ 0x1
  3119                           
  3120  0021                     Flash_Memory_Write@i:	
  3121                           ; 1 bytes @ 0x1
  3122                           
  3123  0021                     setLoad_Count@command:	
  3124                           ; 1 bytes @ 0x1
  3125                           
  3126  0021                     setLoad_StatusOn@lights:	
  3127                           ; 1 bytes @ 0x1
  3128                           
  3129  0021                     setLoad_StatusOff@lights:	
  3130                           ; 1 bytes @ 0x1
  3131                           
  3132  0021                     setLoad_AH_AL_Restore@i:	
  3133                           ; 1 bytes @ 0x1
  3134                           
  3135  0021                     RfSWPointSelect@sw:	
  3136                           ; 1 bytes @ 0x1
  3137                           
  3138  0021                     SwPointSelect@sw:	
  3139                           ; 1 bytes @ 0x1
  3140                           
  3141                           
  3142                           ; 1 bytes @ 0x1
  3143  0021                     	ds	1
  3144  0022                     ??_CC2500_WriteCommand:	
  3145  0022                     ??_CC2500_ReadStatus:	
  3146                           ; 0 bytes @ 0x2
  3147                           
  3148  0022                     ??_DelayTime_1us:	
  3149                           ; 0 bytes @ 0x2
  3150                           
  3151  0022                     ?_CC2500_WriteREG:	
  3152                           ; 0 bytes @ 0x2
  3153                           
  3154  0022                     ??_DlyOff_Initialization:	
  3155                           ; 0 bytes @ 0x2
  3156                           
  3157  0022                     ?_setSw_Status:	
  3158                           ; 0 bytes @ 0x2
  3159                           
  3160  0022                     ?_setRFSW_Status:	
  3161                           ; 0 bytes @ 0x2
  3162                           
  3163  0022                     ?_setDimmerLights_Trigger:	
  3164                           ; 0 bytes @ 0x2
  3165                           
  3166  0022                     ?_setDimmerLights_Switch:	
  3167                           ; 0 bytes @ 0x2
  3168                           
  3169  0022                     ??_setDimmerLights_Initialization:	
  3170                           ; 0 bytes @ 0x2
  3171                           
  3172  0022                     ?_setDimmerLights_TriggerERROR:	
  3173                           ; 0 bytes @ 0x2
  3174                           
  3175  0022                     ??_setLED:	
  3176                           ; 0 bytes @ 0x2
  3177                           
  3178  0022                     ??_Load_Initialization:	
  3179                           ; 0 bytes @ 0x2
  3180                           
  3181  0022                     ??_setSw_Enable:	
  3182                           ; 0 bytes @ 0x2
  3183                           
  3184  0022                     ??_getBuz_GO:	
  3185                           ; 0 bytes @ 0x2
  3186                           
  3187  0022                     ?_setDimmerLights_AdjGo:	
  3188                           ; 0 bytes @ 0x2
  3189                           
  3190  0022                     ?_setDimmerLights_TriggerAdj:	
  3191                           ; 0 bytes @ 0x2
  3192                           
  3193  0022                     ?_setDimmerLights_Clear:	
  3194                           ; 0 bytes @ 0x2
  3195                           
  3196  0022                     CC2500_WriteREG@value:	
  3197                           ; 0 bytes @ 0x2
  3198                           
  3199  0022                     DlyOff_Initialization@sw:	
  3200                           ; 1 bytes @ 0x2
  3201                           
  3202  0022                     _getDimmerLights_StatusFlag$2253:	
  3203                           ; 1 bytes @ 0x2
  3204                           
  3205  0022                     setDimmerLights_TriggerERROR@command:	
  3206                           ; 1 bytes @ 0x2
  3207                           
  3208  0022                     setDimmerLights_Switch@command:	
  3209                           ; 1 bytes @ 0x2
  3210                           
  3211  0022                     setDimmerLights_AdjGo@command:	
  3212                           ; 1 bytes @ 0x2
  3213                           
  3214  0022                     setDimmerLights_Trigger@command:	
  3215                           ; 1 bytes @ 0x2
  3216                           
  3217  0022                     setDimmerLights_TriggerAdj@command:	
  3218                           ; 1 bytes @ 0x2
  3219                           
  3220  0022                     setDimmerLights_Clear@command:	
  3221                           ; 1 bytes @ 0x2
  3222                           
  3223  0022                     setLED@led:	
  3224                           ; 1 bytes @ 0x2
  3225                           
  3226  0022                     Flash_Memory_Read@address:	
  3227                           ; 1 bytes @ 0x2
  3228                           
  3229  0022                     setMemory_GO@command:	
  3230                           ; 1 bytes @ 0x2
  3231                           
  3232  0022                     setRFSW_Status@command:	
  3233                           ; 1 bytes @ 0x2
  3234                           
  3235  0022                     setSw_Enable@command:	
  3236                           ; 1 bytes @ 0x2
  3237                           
  3238  0022                     setSw_Status@command:	
  3239                           ; 1 bytes @ 0x2
  3240                           
  3241  0022                     ___bmul@product:	
  3242                           ; 1 bytes @ 0x2
  3243                           
  3244  0022                     DelayTime_1us@i:	
  3245                           ; 1 bytes @ 0x2
  3246                           
  3247  0022                     ___wmul@multiplicand:	
  3248                           ; 2 bytes @ 0x2
  3249                           
  3250  0022                     ___awdiv@dividend:	
  3251                           ; 2 bytes @ 0x2
  3252                           
  3253  0022                     ___lwdiv@dividend:	
  3254                           ; 2 bytes @ 0x2
  3255                           
  3256                           
  3257                           ; 2 bytes @ 0x2
  3258  0022                     	ds	1
  3259  0023                     ??_CC2500_WriteREG:	
  3260  0023                     ??_setSw_Status:	
  3261                           ; 0 bytes @ 0x3
  3262                           
  3263  0023                     ??_setRFSW_Status:	
  3264                           ; 0 bytes @ 0x3
  3265                           
  3266  0023                     ??_setDimmerLights_Trigger:	
  3267                           ; 0 bytes @ 0x3
  3268                           
  3269  0023                     ??_setDimmerLights_Switch:	
  3270                           ; 0 bytes @ 0x3
  3271                           
  3272  0023                     ?_setDimmerLights:	
  3273                           ; 0 bytes @ 0x3
  3274                           
  3275  0023                     ??_setDimmerLights_TriggerERROR:	
  3276                           ; 0 bytes @ 0x3
  3277                           
  3278  0023                     ??_setLED_Initialization:	
  3279                           ; 0 bytes @ 0x3
  3280                           
  3281  0023                     ??_setSw_Initialization:	
  3282                           ; 0 bytes @ 0x3
  3283                           
  3284  0023                     ??_DelayOff_Initialization:	
  3285                           ; 0 bytes @ 0x3
  3286                           
  3287  0023                     ??_DimmerLights_Close:	
  3288                           ; 0 bytes @ 0x3
  3289                           
  3290  0023                     ??_setDimmerLights_AdjGo:	
  3291                           ; 0 bytes @ 0x3
  3292                           
  3293  0023                     ??_setDimmerLights_TriggerAdj:	
  3294                           ; 0 bytes @ 0x3
  3295                           
  3296  0023                     ??_setDimmerLights_Clear:	
  3297                           ; 0 bytes @ 0x3
  3298                           
  3299  0023                     ??_getAD:	
  3300                           ; 0 bytes @ 0x3
  3301                           
  3302  0023                     CC2500_WriteCommand@command:	
  3303                           ; 0 bytes @ 0x3
  3304                           
  3305  0023                     CC2500_ReadStatus@status_addr:	
  3306                           ; 1 bytes @ 0x3
  3307                           
  3308  0023                     setDimmerLights_Initialization@lights:	
  3309                           ; 1 bytes @ 0x3
  3310                           
  3311  0023                     setDimmerLights_TriggerERROR@lights:	
  3312                           ; 1 bytes @ 0x3
  3313                           
  3314  0023                     setDimmerLights@status:	
  3315                           ; 1 bytes @ 0x3
  3316                           
  3317  0023                     setDimmerLights_Switch@lights:	
  3318                           ; 1 bytes @ 0x3
  3319                           
  3320  0023                     setDimmerLights_AdjGo@lights:	
  3321                           ; 1 bytes @ 0x3
  3322                           
  3323  0023                     setDimmerLights_Trigger@lights:	
  3324                           ; 1 bytes @ 0x3
  3325                           
  3326  0023                     setDimmerLights_TriggerAdj@lights:	
  3327                           ; 1 bytes @ 0x3
  3328                           
  3329  0023                     setDimmerLights_Clear@lights:	
  3330                           ; 1 bytes @ 0x3
  3331                           
  3332  0023                     setLED_Initialization@led:	
  3333                           ; 1 bytes @ 0x3
  3334                           
  3335  0023                     setLED_Main@led:	
  3336                           ; 1 bytes @ 0x3
  3337                           
  3338  0023                     getAD@adcon0:	
  3339                           ; 1 bytes @ 0x3
  3340                           
  3341  0023                     Flash_Memory_Read@ret:	
  3342                           ; 1 bytes @ 0x3
  3343                           
  3344  0023                     setRFSW_Status@sw:	
  3345                           ; 1 bytes @ 0x3
  3346                           
  3347  0023                     setSw_Initialization@sw:	
  3348                           ; 1 bytes @ 0x3
  3349                           
  3350  0023                     setSw_Status@sw:	
  3351                           ; 1 bytes @ 0x3
  3352                           
  3353  0023                     ___bmul@multiplier:	
  3354                           ; 1 bytes @ 0x3
  3355                           
  3356  0023                     ___ftpack@exp:	
  3357                           ; 1 bytes @ 0x3
  3358                           
  3359                           
  3360                           ; 1 bytes @ 0x3
  3361  0023                     	ds	1
  3362  0024                     ??_CC2500_ClearTXFIFO:	
  3363  0024                     ??_CC2500_ClearRXFIFO:	
  3364                           ; 0 bytes @ 0x4
  3365                           
  3366  0024                     ??_CC2500_SIDLEMode:	
  3367                           ; 0 bytes @ 0x4
  3368                           
  3369  0024                     ??_DelayTimejudge:	
  3370                           ; 0 bytes @ 0x4
  3371                           
  3372  0024                     ??_setDimmerLights:	
  3373                           ; 0 bytes @ 0x4
  3374                           
  3375  0024                     ??_setDimmerLights_ERROR:	
  3376                           ; 0 bytes @ 0x4
  3377                           
  3378  0024                     ??_Flash_Memory_Modify:	
  3379                           ; 0 bytes @ 0x4
  3380                           
  3381  0024                     ??_Switch_Initialization:	
  3382                           ; 0 bytes @ 0x4
  3383                           
  3384  0024                     ??_getLoad_AD:	
  3385                           ; 0 bytes @ 0x4
  3386                           
  3387  0024                     ??_getTemp_AD:	
  3388                           ; 0 bytes @ 0x4
  3389                           
  3390  0024                     ??_RF_RxDisable:	
  3391                           ; 0 bytes @ 0x4
  3392                           
  3393  0024                     ??_Sw_DimmerAdjFunc:	
  3394                           ; 0 bytes @ 0x4
  3395                           
  3396  0024                     ??_CC2500_TxData:	
  3397                           ; 0 bytes @ 0x4
  3398                           
  3399  0024                     ??_DimmerLights_Initialization:	
  3400                           ; 0 bytes @ 0x4
  3401                           
  3402  0024                     ??_LED_Initialization:	
  3403                           ; 0 bytes @ 0x4
  3404                           
  3405  0024                     ??_LED_Main:	
  3406                           ; 0 bytes @ 0x4
  3407                           
  3408  0024                     ??___wmul:	
  3409                           ; 0 bytes @ 0x4
  3410                           
  3411  0024                     ??___awdiv:	
  3412                           ; 0 bytes @ 0x4
  3413                           
  3414  0024                     ??___lwdiv:	
  3415                           ; 0 bytes @ 0x4
  3416                           
  3417  0024                     CC2500_WriteREG@w_addr:	
  3418                           ; 0 bytes @ 0x4
  3419                           
  3420  0024                     Sw_DimmerAdjFunc@Idle:	
  3421                           ; 1 bytes @ 0x4
  3422                           
  3423  0024                     ___ftpack@sign:	
  3424                           ; 1 bytes @ 0x4
  3425                           
  3426  0024                     getBuz_GO@i:	
  3427                           ; 1 bytes @ 0x4
  3428                           
  3429  0024                     DelayTime_1us@j:	
  3430                           ; 2 bytes @ 0x4
  3431                           
  3432  0024                     ___wmul@product:	
  3433                           ; 2 bytes @ 0x4
  3434                           
  3435                           
  3436                           ; 2 bytes @ 0x4
  3437  0024                     	ds	1
  3438  0025                     ??_CC2500_InitSetREG:	
  3439  0025                     ??_CC2500_InitPATable:	
  3440                           ; 0 bytes @ 0x5
  3441                           
  3442  0025                     ??___ftpack:	
  3443                           ; 0 bytes @ 0x5
  3444                           
  3445  0025                     CC2500_TxData@loop_e:	
  3446                           ; 0 bytes @ 0x5
  3447                           
  3448  0025                     setDimmerLights_ERROR@lights:	
  3449                           ; 1 bytes @ 0x5
  3450                           
  3451  0025                     setDimmerLights@lights:	
  3452                           ; 1 bytes @ 0x5
  3453                           
  3454  0025                     getTemp_AD@channel:	
  3455                           ; 1 bytes @ 0x5
  3456                           
  3457  0025                     Sw_DimmerAdjFunc@sw:	
  3458                           ; 1 bytes @ 0x5
  3459                           
  3460  0025                     ___awdiv@counter:	
  3461                           ; 1 bytes @ 0x5
  3462                           
  3463  0025                     ___lwdiv@quotient:	
  3464                           ; 1 bytes @ 0x5
  3465                           
  3466                           
  3467                           ; 2 bytes @ 0x5
  3468  0025                     	ds	1
  3469  0026                     ??_CC2500_PowerRST:	
  3470  0026                     ??_CC2500_FrequencyCabr:	
  3471                           ; 0 bytes @ 0x6
  3472                           
  3473  0026                     CC2500_InitSetREG@temp1:	
  3474                           ; 0 bytes @ 0x6
  3475                           
  3476  0026                     CC2500_InitPATable@temp:	
  3477                           ; 1 bytes @ 0x6
  3478                           
  3479  0026                     DelayTimejudge@i:	
  3480                           ; 1 bytes @ 0x6
  3481                           
  3482  0026                     Flash_Memory_Modify@i:	
  3483                           ; 1 bytes @ 0x6
  3484                           
  3485  0026                     getLoad_AD@channel:	
  3486                           ; 1 bytes @ 0x6
  3487                           
  3488  0026                     ___awdiv@sign:	
  3489                           ; 1 bytes @ 0x6
  3490                           
  3491                           
  3492                           ; 1 bytes @ 0x6
  3493  0026                     	ds	1
  3494  0027                     ??_Flash_Memory_Main:	
  3495  0027                     CC2500_InitSetREG@temp2:	
  3496                           ; 0 bytes @ 0x7
  3497                           
  3498  0027                     CC2500_InitPATable@loop_d:	
  3499                           ; 1 bytes @ 0x7
  3500                           
  3501  0027                     DelayTimejudge@j:	
  3502                           ; 1 bytes @ 0x7
  3503                           
  3504  0027                     getLoad_AD@j:	
  3505                           ; 1 bytes @ 0x7
  3506                           
  3507  0027                     ___lwdiv@counter:	
  3508                           ; 1 bytes @ 0x7
  3509                           
  3510  0027                     ___awdiv@quotient:	
  3511                           ; 1 bytes @ 0x7
  3512                           
  3513                           
  3514                           ; 2 bytes @ 0x7
  3515  0027                     	ds	1
  3516  0028                     ?___awtoft:	
  3517  0028                     CC2500_InitSetREG@loop_c:	
  3518                           ; 3 bytes @ 0x8
  3519                           
  3520  0028                     DelayTimejudge@k:	
  3521                           ; 1 bytes @ 0x8
  3522                           
  3523  0028                     getLoad_AD@i:	
  3524                           ; 1 bytes @ 0x8
  3525                           
  3526  0028                     ___awtoft@c:	
  3527                           ; 1 bytes @ 0x8
  3528                           
  3529                           
  3530                           ; 2 bytes @ 0x8
  3531  0028                     	ds	1
  3532  0029                     ?_setBuz:	
  3533  0029                     ??_CC2500_PowerOnInitial:	
  3534                           ; 0 bytes @ 0x9
  3535                           
  3536  0029                     DelayTimejudge@value:	
  3537                           ; 0 bytes @ 0x9
  3538                           
  3539  0029                     setBuz@time:	
  3540                           ; 1 bytes @ 0x9
  3541                           
  3542                           
  3543                           ; 2 bytes @ 0x9
  3544  0029                     	ds	1
  3545  002A                     ?_setDelayOff_GO:	
  3546  002A                     setDelayOff_GO@command:	
  3547                           ; 0 bytes @ 0xA
  3548                           
  3549                           
  3550                           ; 1 bytes @ 0xA
  3551  002A                     	ds	1
  3552  002B                     ??_setBuz:	
  3553  002B                     ??___awtoft:	
  3554                           ; 0 bytes @ 0xB
  3555                           
  3556  002B                     setDelayOff_GO@value:	
  3557                           ; 0 bytes @ 0xB
  3558                           
  3559                           
  3560                           ; 1 bytes @ 0xB
  3561  002B                     	ds	1
  3562  002C                     ??_setDelayOff_GO:	
  3563  002C                     setBuz@count:	
  3564                           ; 0 bytes @ 0xC
  3565                           
  3566                           
  3567                           ; 1 bytes @ 0xC
  3568  002C                     	ds	1
  3569  002D                     ??_my_Main:	
  3570  002D                     ??_setLog_Code:	
  3571                           ; 0 bytes @ 0xD
  3572                           
  3573  002D                     ??_CC2500_RxData:	
  3574                           ; 0 bytes @ 0xD
  3575                           
  3576  002D                     ??_DimmerLights_Exceptions:	
  3577                           ; 0 bytes @ 0xD
  3578                           
  3579  002D                     DimmerLights_Exceptions@status:	
  3580                           ; 0 bytes @ 0xD
  3581                           
  3582  002D                     ___awtoft@sign:	
  3583                           ; 1 bytes @ 0xD
  3584                           
  3585                           
  3586                           ; 1 bytes @ 0xD
  3587  002D                     	ds	1
  3588  002E                     ??_setLoad_Exceptions:	
  3589  002E                     ??_setOverTemp_Exceptions:	
  3590                           ; 0 bytes @ 0xE
  3591                           
  3592  002E                     ?___ftdiv:	
  3593                           ; 0 bytes @ 0xE
  3594                           
  3595  002E                     ?___ftmul:	
  3596                           ; 3 bytes @ 0xE
  3597                           
  3598  002E                     setDelayOff_GO@sw:	
  3599                           ; 3 bytes @ 0xE
  3600                           
  3601  002E                     ___ftdiv@f2:	
  3602                           ; 1 bytes @ 0xE
  3603                           
  3604  002E                     ___ftmul@f1:	
  3605                           ; 3 bytes @ 0xE
  3606                           
  3607                           
  3608                           ; 3 bytes @ 0xE
  3609  002E                     	ds	1
  3610  002F                     CC2500_RxData@loop_f:	
  3611  002F                     setLoad_Exceptions@i:	
  3612                           ; 1 bytes @ 0xF
  3613                           
  3614  002F                     setOverTemp_Exceptions@i:	
  3615                           ; 1 bytes @ 0xF
  3616                           
  3617                           
  3618                           ; 1 bytes @ 0xF
  3619  002F                     	ds	1
  3620  0030                     setLoad_Exceptions@command:	
  3621  0030                     setOverTemp_Exceptions@command:	
  3622                           ; 1 bytes @ 0x10
  3623                           
  3624                           
  3625                           ; 1 bytes @ 0x10
  3626  0030                     	ds	1
  3627  0031                     ??_Load_Main:	
  3628  0031                     ??_setTemp_Main:	
  3629                           ; 0 bytes @ 0x11
  3630                           
  3631  0031                     ___ftdiv@f1:	
  3632                           ; 0 bytes @ 0x11
  3633                           
  3634  0031                     ___ftmul@f2:	
  3635                           ; 3 bytes @ 0x11
  3636                           
  3637                           
  3638                           ; 3 bytes @ 0x11
  3639  0031                     	ds	1
  3640  0032                     ??_Temp_Main:	
  3641                           
  3642                           ; 0 bytes @ 0x12
  3643  0032                     	ds	1
  3644  0033                     Load_Main@i:	
  3645                           
  3646                           ; 1 bytes @ 0x13
  3647  0033                     	ds	1
  3648  0034                     ??___ftdiv:	
  3649  0034                     ??___ftmul:	
  3650                           ; 0 bytes @ 0x14
  3651                           
  3652                           
  3653                           ; 0 bytes @ 0x14
  3654  0034                     	ds	4
  3655  0038                     ___ftdiv@cntr:	
  3656  0038                     ___ftmul@exp:	
  3657                           ; 1 bytes @ 0x18
  3658                           
  3659                           
  3660                           ; 1 bytes @ 0x18
  3661  0038                     	ds	1
  3662  0039                     ___ftdiv@f3:	
  3663  0039                     ___ftmul@f3_as_product:	
  3664                           ; 3 bytes @ 0x19
  3665                           
  3666                           
  3667                           ; 3 bytes @ 0x19
  3668  0039                     	ds	3
  3669  003C                     ___ftdiv@exp:	
  3670  003C                     ___ftmul@cntr:	
  3671                           ; 1 bytes @ 0x1C
  3672                           
  3673                           
  3674                           ; 1 bytes @ 0x1C
  3675  003C                     	ds	1
  3676  003D                     ___ftdiv@sign:	
  3677  003D                     ___ftmul@sign:	
  3678                           ; 1 bytes @ 0x1D
  3679                           
  3680                           
  3681                           ; 1 bytes @ 0x1D
  3682  003D                     	ds	1
  3683  003E                     ?___ftadd:	
  3684  003E                     ___ftadd@f1:	
  3685                           ; 3 bytes @ 0x1E
  3686                           
  3687                           
  3688                           ; 3 bytes @ 0x1E
  3689  003E                     	ds	3
  3690  0041                     ___ftadd@f2:	
  3691                           
  3692                           ; 3 bytes @ 0x21
  3693  0041                     	ds	3
  3694  0044                     ??___ftadd:	
  3695                           
  3696                           ; 0 bytes @ 0x24
  3697  0044                     	ds	4
  3698  0048                     ___ftadd@sign:	
  3699                           
  3700                           ; 1 bytes @ 0x28
  3701  0048                     	ds	1
  3702  0049                     ___ftadd@exp2:	
  3703                           
  3704                           ; 1 bytes @ 0x29
  3705  0049                     	ds	1
  3706  004A                     ___ftadd@exp1:	
  3707                           
  3708                           ; 1 bytes @ 0x2A
  3709  004A                     	ds	1
  3710  004B                     ?___fttol:	
  3711  004B                     ___fttol@f1:	
  3712                           ; 4 bytes @ 0x2B
  3713                           
  3714                           
  3715                           ; 3 bytes @ 0x2B
  3716  004B                     	ds	4
  3717  004F                     ??___fttol:	
  3718                           
  3719                           ; 0 bytes @ 0x2F
  3720  004F                     	ds	4
  3721  0053                     ___fttol@sign1:	
  3722                           
  3723                           ; 1 bytes @ 0x33
  3724  0053                     	ds	1
  3725  0054                     ___fttol@lval:	
  3726                           
  3727                           ; 4 bytes @ 0x34
  3728  0054                     	ds	4
  3729  0058                     ___fttol@exp1:	
  3730                           
  3731                           ; 1 bytes @ 0x38
  3732  0058                     	ds	1
  3733  0059                     ??_getPercentValue:	
  3734  0059                     ??_setPercentValue:	
  3735                           ; 0 bytes @ 0x39
  3736                           
  3737  0059                     setPercentValue@value:	
  3738                           ; 0 bytes @ 0x39
  3739                           
  3740                           
  3741                           ; 1 bytes @ 0x39
  3742  0059                     	ds	1
  3743  005A                     setPercentValue@i:	
  3744                           
  3745                           ; 3 bytes @ 0x3A
  3746  005A                     	ds	1
  3747  005B                     getPercentValue@value:	
  3748                           
  3749                           ; 1 bytes @ 0x3B
  3750  005B                     	ds	1
  3751  005C                     getPercentValue@i:	
  3752                           
  3753                           ; 3 bytes @ 0x3C
  3754  005C                     	ds	1
  3755  005D                     ?_setRF_DimmerLights:	
  3756  005D                     ??_Flash_Memory_Initialization:	
  3757                           ; 0 bytes @ 0x3D
  3758                           
  3759  005D                     setRF_DimmerLights@on:	
  3760                           ; 0 bytes @ 0x3D
  3761                           
  3762                           
  3763                           ; 1 bytes @ 0x3D
  3764  005D                     	ds	1
  3765  005E                     ??_setRF_DimmerLights:	
  3766  005E                     Flash_Memory_Initialization@i:	
  3767                           ; 0 bytes @ 0x3E
  3768                           
  3769                           
  3770                           ; 1 bytes @ 0x3E
  3771  005E                     	ds	1
  3772  005F                     ??_setDimmerLights_AdjRF:	
  3773                           
  3774                           ; 0 bytes @ 0x3F
  3775  005F                     	ds	1
  3776  0060                     setDimmerLights_AdjRF@lights:	
  3777  0060                     setRF_DimmerLights@status:	
  3778                           ; 1 bytes @ 0x40
  3779                           
  3780                           
  3781                           ; 1 bytes @ 0x40
  3782  0060                     	ds	1
  3783  0061                     ??_setRF_DimmerValue:	
  3784  0061                     setRF_DimmerLights@lights:	
  3785                           ; 0 bytes @ 0x41
  3786                           
  3787                           
  3788                           ; 1 bytes @ 0x41
  3789  0061                     	ds	1
  3790  0062                     ??_DlyOff_Main:	
  3791  0062                     ?_setDimmerLights_Adj:	
  3792                           ; 0 bytes @ 0x42
  3793                           
  3794  0062                     ??_setRFSW_Control:	
  3795                           ; 0 bytes @ 0x42
  3796                           
  3797  0062                     ??_Sw_DimmerOnFunc:	
  3798                           ; 0 bytes @ 0x42
  3799                           
  3800  0062                     ??_Sw_DimmerOffFunc:	
  3801                           ; 0 bytes @ 0x42
  3802                           
  3803  0062                     setDimmerLights_Adj@status:	
  3804                           ; 0 bytes @ 0x42
  3805                           
  3806  0062                     Sw_DimmerOnFunc@Idle:	
  3807                           ; 1 bytes @ 0x42
  3808                           
  3809                           
  3810                           ; 1 bytes @ 0x42
  3811  0062                     	ds	1
  3812  0063                     ??_setDimmerLights_Adj:	
  3813  0063                     setRFSW_Control@sw:	
  3814                           ; 0 bytes @ 0x43
  3815                           
  3816  0063                     setRF_DimmerValue@lights:	
  3817                           ; 1 bytes @ 0x43
  3818                           
  3819  0063                     Sw_DimmerOnFunc@sw:	
  3820                           ; 1 bytes @ 0x43
  3821                           
  3822                           
  3823                           ; 1 bytes @ 0x43
  3824  0063                     	ds	1
  3825  0064                     ??_setRFSW_AdjControl:	
  3826  0064                     DlyOff_Main@sw:	
  3827                           ; 0 bytes @ 0x44
  3828                           
  3829  0064                     setDimmerLights_Adj@lights:	
  3830                           ; 1 bytes @ 0x44
  3831                           
  3832  0064                     Sw_DimmerOffFunc@sw:	
  3833                           ; 1 bytes @ 0x44
  3834                           
  3835                           
  3836                           ; 1 bytes @ 0x44
  3837  0064                     	ds	1
  3838  0065                     ??_setDimmerLights_Main:	
  3839  0065                     ??_setSw_Main:	
  3840                           ; 0 bytes @ 0x45
  3841                           
  3842  0065                     ??_DelayOff_Main:	
  3843                           ; 0 bytes @ 0x45
  3844                           
  3845  0065                     setDimmerLights_Main@clear:	
  3846                           ; 0 bytes @ 0x45
  3847                           
  3848                           
  3849                           ; 1 bytes @ 0x45
  3850  0065                     	ds	1
  3851  0066                     setDimmerLights_Main@lights:	
  3852  0066                     setRFSW_AdjControl@sw:	
  3853                           ; 1 bytes @ 0x46
  3854                           
  3855                           
  3856                           ; 1 bytes @ 0x46
  3857  0066                     	ds	1
  3858  0067                     ??_setRF_Main:	
  3859  0067                     ??_getRxData:	
  3860                           ; 0 bytes @ 0x47
  3861                           
  3862  0067                     ??_setControl_Lights_Table:	
  3863                           ; 0 bytes @ 0x47
  3864                           
  3865  0067                     ??_DimmerLights_Main:	
  3866                           ; 0 bytes @ 0x47
  3867                           
  3868  0067                     _setSw_Main$6014:	
  3869                           ; 0 bytes @ 0x47
  3870                           
  3871                           
  3872                           ; 1 bytes @ 0x47
  3873  0067                     	ds	1
  3874  0068                     _setRF_Main$5052:	
  3875  0068                     _setSw_Main$6015:	
  3876                           ; 1 bytes @ 0x48
  3877                           
  3878                           
  3879                           ; 1 bytes @ 0x48
  3880  0068                     	ds	1
  3881  0069                     ??_RF_Main:	
  3882  0069                     setSw_Main@sw:	
  3883                           ; 0 bytes @ 0x49
  3884                           
  3885                           
  3886                           ; 1 bytes @ 0x49
  3887  0069                     	ds	1
  3888  006A                     ??_Switch_Main:	
  3889  006A                     ?_main:	
  3890                           ; 0 bytes @ 0x4A
  3891                           
  3892  006A                     main@argc:	
  3893                           ; 2 bytes @ 0x4A
  3894                           
  3895                           
  3896                           ; 2 bytes @ 0x4A
  3897  006A                     	ds	2
  3898  006C                     main@argv:	
  3899                           
  3900                           ; 2 bytes @ 0x4C
  3901  006C                     	ds	2
  3902  006E                     ??_main:	
  3903                           
  3904                           	psect	maintext
  3905  1735                     __pmaintext:	
  3906                           ; 0 bytes @ 0x4E
  3907 ;;
  3908 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  3909 ;;
  3910 ;; *************** function _main *****************
  3911 ;; Defined at:
  3912 ;;		line 7 in file "../src/Main_B1.c"
  3913 ;; Parameters:    Size  Location     Type
  3914 ;;  argc            2   74[BANK0 ] int 
  3915 ;;  argv            2   76[BANK0 ] PTR PTR unsigned char 
  3916 ;; Auto vars:     Size  Location     Type
  3917 ;;		None
  3918 ;; Return value:  Size  Location     Type
  3919 ;;                  2   74[BANK0 ] int 
  3920 ;; Registers used:
  3921 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3922 ;; Tracked objects:
  3923 ;;		On entry : 17F/0
  3924 ;;		On exit  : 0/0
  3925 ;;		Unchanged: 0/0
  3926 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3927 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3928 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3929 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3930 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3931 ;;Total ram usage:        4 bytes
  3932 ;; Hardware stack levels required when called:   15
  3933 ;; This function calls:
  3934 ;;		_Buzzer_Initialization
  3935 ;;		_Buzzer_Main
  3936 ;;		_CC2500_PowerOnInitial
  3937 ;;		_DelayOff_Initialization
  3938 ;;		_DelayOff_Main
  3939 ;;		_DimmerLights_Initialization
  3940 ;;		_DimmerLights_Main
  3941 ;;		_Flash_Memory_Initialization
  3942 ;;		_Flash_Memory_Main
  3943 ;;		_LED_Initialization
  3944 ;;		_LED_Main
  3945 ;;		_Load_Initialization
  3946 ;;		_Load_Main
  3947 ;;		_Mcu_Initialization
  3948 ;;		_RF_Initialization
  3949 ;;		_RF_Main
  3950 ;;		_Switch_Initialization
  3951 ;;		_Switch_Main
  3952 ;;		_Temp_Initialization
  3953 ;;		_Temp_Main
  3954 ;;		_getLoad_AD
  3955 ;;		_getTemp_AD
  3956 ;;		_myMain_Initialization
  3957 ;;		_my_Main
  3958 ;;		_my_TestPointCleared
  3959 ;; This function is called by:
  3960 ;;		Startup code after reset
  3961 ;; This function uses a non-reentrant model
  3962 ;;
  3963                           
  3964                           
  3965                           ;psect for function _main
  3966  1735                     _main:	
  3967                           
  3968                           ;Main_B1.c: 9: myMain_Initialization();
  3969                           
  3970                           ;incstack = 0
  3971                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3972  1735  319B  23D9  3197   	fcall	_myMain_Initialization
  3973                           
  3974                           ;Main_B1.c: 10: Mcu_Initialization();
  3975  1738  319C  2496  3197   	fcall	_Mcu_Initialization
  3976                           
  3977                           ;Main_B1.c: 11: Flash_Memory_Initialization();
  3978  173B  3185  25D2  3197   	fcall	_Flash_Memory_Initialization
  3979                           
  3980                           ;Main_B1.c: 12: LED_Initialization();
  3981  173E  319A  2265  3197   	fcall	_LED_Initialization
  3982                           
  3983                           ;Main_B1.c: 13: Buzzer_Initialization();
  3984  1741  3199  216E  3197   	fcall	_Buzzer_Initialization
  3985                           
  3986                           ;Main_B1.c: 15: ;;
  3987                           ;Main_B1.c: 16: Temp_Initialization();
  3988  1744  3199  217A  3197   	fcall	_Temp_Initialization
  3989                           
  3990                           ;Main_B1.c: 17: Load_Initialization();
  3991  1747  3199  2194  3197   	fcall	_Load_Initialization
  3992                           
  3993                           ;Main_B1.c: 18: ;;
  3994                           ;Main_B1.c: 19: DelayOff_Initialization();
  3995  174A  3199  21BE  3197   	fcall	_DelayOff_Initialization
  3996                           
  3997                           ;Main_B1.c: 21: DimmerLights_Initialization();
  3998  174D  319C  247F  3197   	fcall	_DimmerLights_Initialization
  3999                           
  4000                           ;Main_B1.c: 22: ;;
  4001                           ;Main_B1.c: 23: ;;
  4002                           ;Main_B1.c: 24: ;;
  4003                           ;Main_B1.c: 25: Switch_Initialization();
  4004  1750  319A  2297  3197   	fcall	_Switch_Initialization
  4005                           
  4006                           ;Main_B1.c: 26: RF_Initialization();
  4007  1753  3199  2171  3197   	fcall	_RF_Initialization
  4008                           
  4009                           ;Main_B1.c: 27: CC2500_PowerOnInitial();
  4010  1756  319C  2428  3197   	fcall	_CC2500_PowerOnInitial
  4011  1759                     l8145:	
  4012                           ;Main_B1.c: 28: ;;
  4013                           ;Main_B1.c: 31: while (1) {
  4014                           
  4015                           
  4016                           ;Main_B1.c: 33: if (myMain->PowerON) {
  4017  1759  087B               	movf	_myMain,w
  4018  175A  0086               	movwf	6
  4019  175B  3002               	movlw	2	; select bank4/5
  4020  175C  0087               	movwf	7
  4021  175D  1C01               	btfss	1,0
  4022  175E  2F67               	goto	l8151
  4023                           
  4024                           ;Main_B1.c: 35: ;;
  4025                           ;Main_B1.c: 39: getLoad_AD(0x05);
  4026  175F  3005               	movlw	5
  4027  1760  318A  22D3  3197   	fcall	_getLoad_AD
  4028                           
  4029                           ;Main_B1.c: 43: getTemp_AD(0x09);
  4030  1763  3009               	movlw	9
  4031  1764  3190  20B5  3197   	fcall	_getTemp_AD
  4032  1767                     l8151:	
  4033                           ;Main_B1.c: 47: ;;
  4034                           
  4035                           
  4036                           ;Main_B1.c: 58: }
  4037                           ;Main_B1.c: 61: if (myMain->T0_Timerout) {
  4038  1767  087B               	movf	_myMain,w
  4039  1768  0086               	movwf	6
  4040  1769  3002               	movlw	2	; select bank4/5
  4041  176A  0087               	movwf	7
  4042  176B  1C81               	btfss	1,1
  4043  176C  2F59               	goto	l8145
  4044                           
  4045                           ;Main_B1.c: 62: myMain->T0_Timerout = 0;
  4046  176D  087B               	movf	_myMain,w
  4047  176E  0086               	movwf	6
  4048  176F  3002               	movlw	2	; select bank4/5
  4049  1770  0087               	movwf	7
  4050  1771  1081               	bcf	1,1
  4051                           
  4052                           ;Main_B1.c: 63: my_Main();
  4053  1772  318A  225D  3197   	fcall	_my_Main
  4054                           
  4055                           ;Main_B1.c: 64: my_TestPointCleared();
  4056  1775  319B  237F  3197   	fcall	_my_TestPointCleared
  4057                           
  4058                           ;Main_B1.c: 65: ;;
  4059                           ;Main_B1.c: 66: ;;
  4060                           ;Main_B1.c: 67: ;;
  4061                           ;Main_B1.c: 68: if (myMain->PowerON) {
  4062  1778  087B               	movf	_myMain,w
  4063  1779  0086               	movwf	6
  4064  177A  3002               	movlw	2	; select bank4/5
  4065  177B  0087               	movwf	7
  4066  177C  1C01               	btfss	1,0
  4067  177D  2F59               	goto	l8145
  4068                           
  4069                           ;Main_B1.c: 69: Flash_Memory_Main();
  4070  177E  3192  2216  3197   	fcall	_Flash_Memory_Main
  4071                           
  4072                           ;Main_B1.c: 71: LED_Main();
  4073  1781  319A  2271  3197   	fcall	_LED_Main
  4074                           
  4075                           ;Main_B1.c: 72: Buzzer_Main();
  4076  1784  3193  23B5  3197   	fcall	_Buzzer_Main
  4077                           
  4078                           ;Main_B1.c: 74: ;;
  4079                           ;Main_B1.c: 75: Temp_Main();
  4080  1787  3199  217D  3197   	fcall	_Temp_Main
  4081                           
  4082                           ;Main_B1.c: 76: Load_Main();
  4083  178A  3182  221F  3197   	fcall	_Load_Main
  4084                           
  4085                           ;Main_B1.c: 77: ;;
  4086                           ;Main_B1.c: 79: ;;
  4087                           ;Main_B1.c: 80: DimmerLights_Main();
  4088  178D  319A  2242  3197   	fcall	_DimmerLights_Main
  4089                           
  4090                           ;Main_B1.c: 81: Switch_Main();
  4091  1790  3199  21EE  3197   	fcall	_Switch_Main
  4092                           
  4093                           ;Main_B1.c: 82: ;;
  4094                           ;Main_B1.c: 83: ;;
  4095                           ;Main_B1.c: 85: RF_Main();
  4096  1793  3199  2174  3197   	fcall	_RF_Main
  4097                           
  4098                           ;Main_B1.c: 86: DelayOff_Main();
  4099  1796  3199  21C6  3197   	fcall	_DelayOff_Main
  4100                           
  4101                           ;Main_B1.c: 87: ;;
  4102  1799  2F59               	goto	l8145
  4103  179A                     __end_of_main:	
  4104                           ;Main_B1.c: 88: }
  4105                           ;Main_B1.c: 89: }
  4106                           ;Main_B1.c: 107: }
  4107                           ;Main_B1.c: 108: return (0);
  4108                           ;	Return value of _main is never used
  4109                           
  4110                           
  4111                           	psect	text1
  4112  1B7F                     __ptext1:	
  4113 ;; *************** function _my_TestPointCleared *****************
  4114 ;; Defined at:
  4115 ;;		line 206 in file "../src/Main_B1.c"
  4116 ;; Parameters:    Size  Location     Type
  4117 ;;		None
  4118 ;; Auto vars:     Size  Location     Type
  4119 ;;		None
  4120 ;; Return value:  Size  Location     Type
  4121 ;;		None               void
  4122 ;; Registers used:
  4123 ;;		wreg, fsr1l, fsr1h
  4124 ;; Tracked objects:
  4125 ;;		On entry : 0/0
  4126 ;;		On exit  : 0/0
  4127 ;;		Unchanged: 0/0
  4128 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4129 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4130 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4131 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4132 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4133 ;;Total ram usage:        0 bytes
  4134 ;; Hardware stack levels used:    1
  4135 ;; Hardware stack levels required when called:    5
  4136 ;; This function calls:
  4137 ;;		Nothing
  4138 ;; This function is called by:
  4139 ;;		_main
  4140 ;; This function uses a non-reentrant model
  4141 ;;
  4142                           
  4143                           
  4144                           ;psect for function _my_TestPointCleared
  4145  1B7F                     _my_TestPointCleared:	
  4146                           
  4147                           ;Main_B1.c: 207: myMain->pcount1 = 0;
  4148                           
  4149                           ;incstack = 0
  4150                           ; Regs used in _my_TestPointCleared: [wregfsr1]
  4151  1B7F  087B               	movf	_myMain,w
  4152  1B80  3E10               	addlw	16
  4153  1B81  0086               	movwf	6
  4154  1B82  3002               	movlw	2	; select bank4/5
  4155  1B83  0087               	movwf	7
  4156  1B84  3000               	movlw	0
  4157  1B85  3FC0               	movwi [0]fsr1
  4158  1B86  3FC1               	movwi [1]fsr1
  4159                           
  4160                           ;Main_B1.c: 208: myMain->pcount2 = 0;
  4161  1B87  087B               	movf	_myMain,w
  4162  1B88  3E12               	addlw	18
  4163  1B89  0086               	movwf	6
  4164  1B8A  3002               	movlw	2	; select bank4/5
  4165  1B8B  0087               	movwf	7
  4166  1B8C  3000               	movlw	0
  4167  1B8D  3FC0               	movwi [0]fsr1
  4168  1B8E  3FC1               	movwi [1]fsr1
  4169  1B8F  0008               	return
  4170  1B90                     __end_of_my_TestPointCleared:	
  4171                           
  4172                           	psect	text2
  4173  0A5D                     __ptext2:	
  4174 ;; *************** function _my_Main *****************
  4175 ;; Defined at:
  4176 ;;		line 125 in file "../src/Main_B1.c"
  4177 ;; Parameters:    Size  Location     Type
  4178 ;;		None
  4179 ;; Auto vars:     Size  Location     Type
  4180 ;;		None
  4181 ;; Return value:  Size  Location     Type
  4182 ;;		None               void
  4183 ;; Registers used:
  4184 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4185 ;; Tracked objects:
  4186 ;;		On entry : 0/0
  4187 ;;		On exit  : 0/0
  4188 ;;		Unchanged: 0/0
  4189 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4190 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4191 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4192 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4193 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4194 ;;Total ram usage:        0 bytes
  4195 ;; Hardware stack levels used:    1
  4196 ;; Hardware stack levels required when called:    7
  4197 ;; This function calls:
  4198 ;;		_setBuz
  4199 ;;		_setLoad_Enable
  4200 ;;		_setRF_Enable
  4201 ;;		_setSw_Enable
  4202 ;;		_setTemp_Enable
  4203 ;; This function is called by:
  4204 ;;		_main
  4205 ;; This function uses a non-reentrant model
  4206 ;;
  4207                           
  4208                           
  4209                           ;psect for function _my_Main
  4210  0A5D                     _my_Main:	
  4211                           
  4212                           ;Main_B1.c: 127: if (myMain->PowerON == 0) {
  4213                           
  4214                           ;incstack = 0
  4215                           ; Regs used in _my_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4216  0A5D  087B               	movf	_myMain,w
  4217  0A5E  0086               	movwf	6
  4218  0A5F  3002               	movlw	2	; select bank4/5
  4219  0A60  0087               	movwf	7
  4220  0A61  1801               	btfsc	1,0
  4221  0A62  2AA2               	goto	l7943
  4222                           
  4223                           ;Main_B1.c: 128: myMain->PowerCount++;
  4224  0A63  0A7B               	incf	_myMain,w
  4225  0A64  0086               	movwf	6
  4226  0A65  3002               	movlw	2	; select bank4/5
  4227  0A66  0087               	movwf	7
  4228  0A67  3001               	movlw	1
  4229  0A68  0781               	addwf	1,f
  4230  0A69  3141               	addfsr 1,1
  4231  0A6A  1803               	skipnc
  4232  0A6B  0A81               	incf	1,f
  4233                           
  4234                           ;Main_B1.c: 129: if (myMain->PowerCount == 150)
  4235  0A6C  0A7B               	incf	_myMain,w
  4236  0A6D  0086               	movwf	6
  4237  0A6E  3002               	movlw	2	; select bank4/5
  4238  0A6F  0087               	movwf	7
  4239  0A70  3F40               	moviw [0]fsr1
  4240  0A71  3A96               	xorlw	150
  4241  0A72  1D03               	skipz
  4242  0A73  2A76               	goto	u7605
  4243  0A74  3F41               	moviw [1]fsr1
  4244  0A75  3A00               	xorlw	0
  4245  0A76                     u7605:	
  4246  0A76  1D03               	skipz
  4247  0A77  0008               	return
  4248                           
  4249                           ;Main_B1.c: 130: {
  4250                           ;Main_B1.c: 131: myMain->PowerCount = 0;
  4251  0A78  0A7B               	incf	_myMain,w
  4252  0A79  0086               	movwf	6
  4253  0A7A  3002               	movlw	2	; select bank4/5
  4254  0A7B  0087               	movwf	7
  4255  0A7C  3000               	movlw	0
  4256  0A7D  3FC0               	movwi [0]fsr1
  4257  0A7E  3FC1               	movwi [1]fsr1
  4258                           
  4259                           ;Main_B1.c: 132: myMain->PowerON = 1;
  4260  0A7F  087B               	movf	_myMain,w
  4261  0A80  0086               	movwf	6
  4262  0A81  3002               	movlw	2	; select bank4/5
  4263  0A82  0087               	movwf	7
  4264  0A83  1401               	bsf	1,0
  4265                           
  4266                           ;Main_B1.c: 135: setTemp_Enable(1);
  4267  0A84  3001               	movlw	1
  4268  0A85  3199  21FE  318A   	fcall	_setTemp_Enable
  4269                           
  4270                           ;Main_B1.c: 139: setLoad_Enable(1);
  4271  0A88  3001               	movlw	1
  4272  0A89  319A  2218  318A   	fcall	_setLoad_Enable
  4273                           
  4274                           ;Main_B1.c: 145: setBuz(3, 50);
  4275  0A8C  3032               	movlw	50
  4276  0A8D  0020               	movlb	0	; select bank0
  4277  0A8E  00A9               	movwf	setBuz@time
  4278  0A8F  3000               	movlw	0
  4279  0A90  00AA               	movwf	setBuz@time+1
  4280  0A91  3003               	movlw	3
  4281  0A92  3194  24F6  318A   	fcall	_setBuz
  4282                           
  4283                           ;Main_B1.c: 146: myMain->SelfTest = 1;
  4284  0A95  087B               	movf	_myMain,w
  4285  0A96  0086               	movwf	6
  4286  0A97  3002               	movlw	2	; select bank4/5
  4287  0A98  0087               	movwf	7
  4288  0A99  1701               	bsf	1,6
  4289                           
  4290                           ;Main_B1.c: 148: setSw_Enable(1);
  4291  0A9A  3001               	movlw	1
  4292  0A9B  319D  2562  318A   	fcall	_setSw_Enable
  4293                           
  4294                           ;Main_B1.c: 151: setRF_Enable(1);
  4295  0A9E  3001               	movlw	1
  4296  0A9F  319A  22B2         	fcall	_setRF_Enable
  4297                           
  4298                           ;Main_B1.c: 155: }
  4299                           ;Main_B1.c: 156: } else {
  4300  0AA1  0008               	return
  4301  0AA2                     l7943:	
  4302                           
  4303                           ;Main_B1.c: 164: myMain->Count1++;
  4304  0AA2  087B               	movf	_myMain,w
  4305  0AA3  3E05               	addlw	5
  4306  0AA4  0086               	movwf	6
  4307  0AA5  3002               	movlw	2	; select bank4/5
  4308  0AA6  0087               	movwf	7
  4309  0AA7  3001               	movlw	1
  4310  0AA8  0781               	addwf	1,f
  4311  0AA9  3141               	addfsr 1,1
  4312  0AAA  1803               	skipnc
  4313  0AAB  0A81               	incf	1,f
  4314                           
  4315                           ;Main_B1.c: 165: if (myMain->Count1 == 100)
  4316  0AAC  087B               	movf	_myMain,w
  4317  0AAD  3E05               	addlw	5
  4318  0AAE  0086               	movwf	6
  4319  0AAF  3002               	movlw	2	; select bank4/5
  4320  0AB0  0087               	movwf	7
  4321  0AB1  3F40               	moviw [0]fsr1
  4322  0AB2  3A64               	xorlw	100
  4323  0AB3  1D03               	skipz
  4324  0AB4  2AB7               	goto	u7615
  4325  0AB5  3F41               	moviw [1]fsr1
  4326  0AB6  3A00               	xorlw	0
  4327  0AB7                     u7615:	
  4328  0AB7  1D03               	skipz
  4329  0AB8  0008               	return
  4330                           
  4331                           ;Main_B1.c: 166: {
  4332                           ;Main_B1.c: 167: myMain->Count1 = 0;
  4333  0AB9  087B               	movf	_myMain,w
  4334  0ABA  3E05               	addlw	5
  4335  0ABB  0086               	movwf	6
  4336  0ABC  3002               	movlw	2	; select bank4/5
  4337  0ABD  0087               	movwf	7
  4338  0ABE  3000               	movlw	0
  4339  0ABF  3FC0               	movwi [0]fsr1
  4340  0AC0  3FC1               	movwi [1]fsr1
  4341                           
  4342                           ;Main_B1.c: 180: if (myMain->Flag) {
  4343  0AC1  087B               	movf	_myMain,w
  4344  0AC2  0086               	movwf	6
  4345  0AC3  3002               	movlw	2	; select bank4/5
  4346  0AC4  0087               	movwf	7
  4347  0AC5  1D81               	btfss	1,3
  4348  0AC6  2ACD               	goto	l7951
  4349                           
  4350                           ;Main_B1.c: 181: myMain->Flag = 0;
  4351  0AC7  087B               	movf	_myMain,w
  4352  0AC8  0086               	movwf	6
  4353  0AC9  3002               	movlw	2	; select bank4/5
  4354  0ACA  0087               	movwf	7
  4355  0ACB  1181               	bcf	1,3
  4356                           
  4357                           ;Main_B1.c: 190: } else {
  4358  0ACC  0008               	return
  4359  0ACD                     l7951:	
  4360                           
  4361                           ;Main_B1.c: 191: myMain->Flag = 1;
  4362  0ACD  087B               	movf	_myMain,w
  4363  0ACE  0086               	movwf	6
  4364  0ACF  3002               	movlw	2	; select bank4/5
  4365  0AD0  0087               	movwf	7
  4366  0AD1  1581               	bsf	1,3
  4367  0AD2  0008               	return
  4368  0AD3                     __end_of_my_Main:	
  4369                           
  4370                           	psect	text3
  4371  19FE                     __ptext3:	
  4372 ;; *************** function _setTemp_Enable *****************
  4373 ;; Defined at:
  4374 ;;		line 16 in file "../src/OverTemperature_B1.c"
  4375 ;; Parameters:    Size  Location     Type
  4376 ;;  command         1    wreg     unsigned char 
  4377 ;; Auto vars:     Size  Location     Type
  4378 ;;  command         1    0[BANK0 ] unsigned char 
  4379 ;; Return value:  Size  Location     Type
  4380 ;;		None               void
  4381 ;; Registers used:
  4382 ;;		wreg
  4383 ;; Tracked objects:
  4384 ;;		On entry : 0/0
  4385 ;;		On exit  : 0/0
  4386 ;;		Unchanged: 0/0
  4387 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4388 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4389 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4390 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4391 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4392 ;;Total ram usage:        1 bytes
  4393 ;; Hardware stack levels used:    1
  4394 ;; Hardware stack levels required when called:    5
  4395 ;; This function calls:
  4396 ;;		Nothing
  4397 ;; This function is called by:
  4398 ;;		_my_Main
  4399 ;; This function uses a non-reentrant model
  4400 ;;
  4401                           
  4402                           
  4403                           ;psect for function _setTemp_Enable
  4404  19FE                     _setTemp_Enable:	
  4405                           
  4406                           ;incstack = 0
  4407                           ; Regs used in _setTemp_Enable: [wreg]
  4408                           ;setTemp_Enable@command stored from wreg
  4409  19FE  0020               	movlb	0	; select bank0
  4410  19FF  00A0               	movwf	setTemp_Enable@command
  4411                           
  4412                           ;OverTemperature_B1.c: 17: Temp1.Enable = command;
  4413  1A00  0820               	movf	setTemp_Enable@command,w
  4414  1A01  0021               	movlb	1	; select bank1
  4415  1A02  1057               	bcf	_Temp1^(0+128),0
  4416  1A03  1D03               	skipz
  4417  1A04  1457               	bsf	_Temp1^(0+128),0
  4418  1A05  0008               	return
  4419  1A06                     __end_of_setTemp_Enable:	
  4420                           
  4421                           	psect	text4
  4422  1A18                     __ptext4:	
  4423 ;; *************** function _setLoad_Enable *****************
  4424 ;; Defined at:
  4425 ;;		line 260 in file "../src/OverLoad_B1.c"
  4426 ;; Parameters:    Size  Location     Type
  4427 ;;  command         1    wreg     unsigned char 
  4428 ;; Auto vars:     Size  Location     Type
  4429 ;;  command         1    0[BANK0 ] unsigned char 
  4430 ;; Return value:  Size  Location     Type
  4431 ;;		None               void
  4432 ;; Registers used:
  4433 ;;		wreg
  4434 ;; Tracked objects:
  4435 ;;		On entry : 0/0
  4436 ;;		On exit  : 0/0
  4437 ;;		Unchanged: 0/0
  4438 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4439 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4440 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4441 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4442 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4443 ;;Total ram usage:        1 bytes
  4444 ;; Hardware stack levels used:    1
  4445 ;; Hardware stack levels required when called:    5
  4446 ;; This function calls:
  4447 ;;		Nothing
  4448 ;; This function is called by:
  4449 ;;		_my_Main
  4450 ;; This function uses a non-reentrant model
  4451 ;;
  4452                           
  4453                           
  4454                           ;psect for function _setLoad_Enable
  4455  1A18                     _setLoad_Enable:	
  4456                           
  4457                           ;incstack = 0
  4458                           ; Regs used in _setLoad_Enable: [wreg]
  4459                           ;setLoad_Enable@command stored from wreg
  4460  1A18  0020               	movlb	0	; select bank0
  4461  1A19  00A0               	movwf	setLoad_Enable@command
  4462                           
  4463                           ;OverLoad_B1.c: 261: Load1.Enable = command;
  4464  1A1A  0820               	movf	setLoad_Enable@command,w
  4465  1A1B  0022               	movlb	2	; select bank2
  4466  1A1C  1020               	bcf	_Load1^(0+256),0
  4467  1A1D  1D03               	skipz
  4468  1A1E  1420               	bsf	_Load1^(0+256),0
  4469                           
  4470                           ;OverLoad_B1.c: 262: Load1.GO = 0;
  4471  1A1F  10A0               	bcf	_Load1^(0+256),1
  4472  1A20  0008               	return
  4473  1A21                     __end_of_setLoad_Enable:	
  4474                           
  4475                           	psect	text5
  4476  1BD9                     __ptext5:	
  4477 ;; *************** function _myMain_Initialization *****************
  4478 ;; Defined at:
  4479 ;;		line 113 in file "../src/Main_B1.c"
  4480 ;; Parameters:    Size  Location     Type
  4481 ;;		None
  4482 ;; Auto vars:     Size  Location     Type
  4483 ;;		None
  4484 ;; Return value:  Size  Location     Type
  4485 ;;		None               void
  4486 ;; Registers used:
  4487 ;;		wreg, fsr1l, fsr1h
  4488 ;; Tracked objects:
  4489 ;;		On entry : 0/0
  4490 ;;		On exit  : 0/0
  4491 ;;		Unchanged: 0/0
  4492 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4493 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4494 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4495 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4496 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4497 ;;Total ram usage:        1 bytes
  4498 ;; Hardware stack levels used:    1
  4499 ;; Hardware stack levels required when called:    5
  4500 ;; This function calls:
  4501 ;;		Nothing
  4502 ;; This function is called by:
  4503 ;;		_main
  4504 ;; This function uses a non-reentrant model
  4505 ;;
  4506                           
  4507                           
  4508                           ;psect for function _myMain_Initialization
  4509  1BD9                     _myMain_Initialization:	
  4510                           
  4511                           ;Main_B1.c: 115: product = &_product;
  4512                           
  4513                           ;incstack = 0
  4514                           ; Regs used in _myMain_Initialization: [wregfsr1]
  4515  1BD9  3020               	movlw	__product& (0+255)
  4516  1BDA  0020               	movlb	0	; select bank0
  4517  1BDB  00A0               	movwf	??_myMain_Initialization
  4518  1BDC  0820               	movf	??_myMain_Initialization,w
  4519  1BDD  00EE               	movwf	_product
  4520                           
  4521                           ;Main_B1.c: 116: product->Data[20] = 210;
  4522  1BDE  30D2               	movlw	210
  4523  1BDF  00A0               	movwf	??_myMain_Initialization
  4524  1BE0  086E               	movf	_product,w
  4525  1BE1  3E14               	addlw	20
  4526  1BE2  0086               	movwf	6
  4527  1BE3  3002               	movlw	2	; select bank4/5
  4528  1BE4  0087               	movwf	7
  4529  1BE5  0820               	movf	??_myMain_Initialization,w
  4530  1BE6  0081               	movwf	1
  4531                           
  4532                           ;Main_B1.c: 119: myMain = &_myMain;
  4533  1BE7  3040               	movlw	__myMain& (0+255)
  4534  1BE8  00A0               	movwf	??_myMain_Initialization
  4535  1BE9  0820               	movf	??_myMain_Initialization,w
  4536  1BEA  00FB               	movwf	_myMain
  4537  1BEB  0008               	return
  4538  1BEC                     __end_of_myMain_Initialization:	
  4539                           
  4540                           	psect	text6
  4541  10B5                     __ptext6:	
  4542 ;; *************** function _getTemp_AD *****************
  4543 ;; Defined at:
  4544 ;;		line 31 in file "../src/OverTemperature_B1.c"
  4545 ;; Parameters:    Size  Location     Type
  4546 ;;  channel         1    wreg     unsigned char 
  4547 ;; Auto vars:     Size  Location     Type
  4548 ;;  channel         1    5[BANK0 ] unsigned char 
  4549 ;; Return value:  Size  Location     Type
  4550 ;;		None               void
  4551 ;; Registers used:
  4552 ;;		wreg, status,2, status,0, pclath, cstack
  4553 ;; Tracked objects:
  4554 ;;		On entry : 0/0
  4555 ;;		On exit  : 0/0
  4556 ;;		Unchanged: 0/0
  4557 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4558 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4559 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4560 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4561 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4562 ;;Total ram usage:        2 bytes
  4563 ;; Hardware stack levels used:    1
  4564 ;; Hardware stack levels required when called:    6
  4565 ;; This function calls:
  4566 ;;		_getAD
  4567 ;; This function is called by:
  4568 ;;		_main
  4569 ;; This function uses a non-reentrant model
  4570 ;;
  4571                           
  4572                           
  4573                           ;psect for function _getTemp_AD
  4574  10B5                     _getTemp_AD:	
  4575                           
  4576                           ;incstack = 0
  4577                           ; Regs used in _getTemp_AD: [wreg+status,2+status,0+pclath+cstack]
  4578                           ;getTemp_AD@channel stored from wreg
  4579  10B5  0020               	movlb	0	; select bank0
  4580  10B6  00A5               	movwf	getTemp_AD@channel
  4581                           
  4582                           ;OverTemperature_B1.c: 32: if (Temp1.ADtoGO == 1) {
  4583  10B7  0021               	movlb	1	; select bank1
  4584  10B8  1D57               	btfss	_Temp1^(0+128),2
  4585  10B9  0008               	return
  4586                           
  4587                           ;OverTemperature_B1.c: 33: Temp1.ADRES = getAD(channel, 0xf0);
  4588  10BA  30F0               	movlw	240
  4589  10BB  0020               	movlb	0	; select bank0
  4590  10BC  00A4               	movwf	??_getTemp_AD
  4591  10BD  0824               	movf	??_getTemp_AD,w
  4592  10BE  00A0               	movwf	getAD@adcon1
  4593  10BF  0825               	movf	getTemp_AD@channel,w
  4594  10C0  319C  2469  3190   	fcall	_getAD
  4595  10C3  0020               	movlb	0	; select bank0
  4596  10C4  0821               	movf	?_getAD+1,w
  4597  10C5  0021               	movlb	1	; select bank1
  4598  10C6  01E4               	clrf	((_Temp1+1)^(0+128)+12)
  4599  10C7  07E4               	addwf	((_Temp1+1)^(0+128)+12),f
  4600  10C8  0020               	movlb	0	; select bank0
  4601  10C9  0820               	movf	?_getAD,w
  4602  10CA  0021               	movlb	1	; select bank1
  4603  10CB  01E3               	clrf	(_Temp1^(0+128)+12)
  4604  10CC  07E3               	addwf	(_Temp1^(0+128)+12),f
  4605                           
  4606                           ;OverTemperature_B1.c: 34: if (Temp1.ADH[0] < Temp1.ADRES) {
  4607  10CD  0864               	movf	((_Temp1+1)^(0+128)+12),w
  4608  10CE  0260               	subwf	((_Temp1+1)^(0+128)+8),w
  4609  10CF  1D03               	skipz
  4610  10D0  28D3               	goto	u7575
  4611  10D1  0863               	movf	(_Temp1^(0+128)+12),w
  4612  10D2  025F               	subwf	(_Temp1^(0+128)+8),w
  4613  10D3                     u7575:	
  4614  10D3  1803               	skipnc
  4615  10D4  28DC               	goto	l7919
  4616                           
  4617                           ;OverTemperature_B1.c: 35: Temp1.ADH[0] = Temp1.ADRES;
  4618  10D5  0864               	movf	((_Temp1+1)^(0+128)+12),w
  4619  10D6  01E0               	clrf	((_Temp1+1)^(0+128)+8)
  4620  10D7  07E0               	addwf	((_Temp1+1)^(0+128)+8),f
  4621  10D8  0863               	movf	(_Temp1^(0+128)+12),w
  4622  10D9  01DF               	clrf	(_Temp1^(0+128)+8)
  4623  10DA  07DF               	addwf	(_Temp1^(0+128)+8),f
  4624                           
  4625                           ;OverTemperature_B1.c: 36: } else if (Temp1.ADH[1] < Temp1.ADRES) {
  4626  10DB  0008               	return
  4627  10DC                     l7919:	
  4628  10DC  0864               	movf	((_Temp1+1)^(0+128)+12),w
  4629  10DD  0262               	subwf	((_Temp1+1)^(0+128)+10),w
  4630  10DE  1D03               	skipz
  4631  10DF  28E2               	goto	u7585
  4632  10E0  0863               	movf	(_Temp1^(0+128)+12),w
  4633  10E1  0261               	subwf	(_Temp1^(0+128)+10),w
  4634  10E2                     u7585:	
  4635  10E2  1803               	skipnc
  4636  10E3  0008               	return
  4637                           
  4638                           ;OverTemperature_B1.c: 37: Temp1.ADH[1] = Temp1.ADRES;
  4639  10E4  0864               	movf	((_Temp1+1)^(0+128)+12),w
  4640  10E5  01E2               	clrf	((_Temp1+1)^(0+128)+10)
  4641  10E6  07E2               	addwf	((_Temp1+1)^(0+128)+10),f
  4642  10E7  0863               	movf	(_Temp1^(0+128)+12),w
  4643  10E8  01E1               	clrf	(_Temp1^(0+128)+10)
  4644  10E9  07E1               	addwf	(_Temp1^(0+128)+10),f
  4645  10EA  0008               	return
  4646  10EB                     __end_of_getTemp_AD:	
  4647                           
  4648                           	psect	text7
  4649  0AD3                     __ptext7:	
  4650 ;; *************** function _getLoad_AD *****************
  4651 ;; Defined at:
  4652 ;;		line 15 in file "../src/OverLoad_B1.c"
  4653 ;; Parameters:    Size  Location     Type
  4654 ;;  channel         1    wreg     unsigned char 
  4655 ;; Auto vars:     Size  Location     Type
  4656 ;;  channel         1    6[BANK0 ] unsigned char 
  4657 ;;  i               1    8[BANK0 ] unsigned char 
  4658 ;;  j               1    7[BANK0 ] unsigned char 
  4659 ;; Return value:  Size  Location     Type
  4660 ;;		None               void
  4661 ;; Registers used:
  4662 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4663 ;; Tracked objects:
  4664 ;;		On entry : 0/0
  4665 ;;		On exit  : 0/0
  4666 ;;		Unchanged: 0/0
  4667 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4668 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4669 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4670 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4671 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4672 ;;Total ram usage:        5 bytes
  4673 ;; Hardware stack levels used:    1
  4674 ;; Hardware stack levels required when called:    6
  4675 ;; This function calls:
  4676 ;;		_getAD
  4677 ;; This function is called by:
  4678 ;;		_main
  4679 ;; This function uses a non-reentrant model
  4680 ;;
  4681                           
  4682                           
  4683                           ;psect for function _getLoad_AD
  4684  0AD3                     _getLoad_AD:	
  4685                           
  4686                           ;incstack = 0
  4687                           ; Regs used in _getLoad_AD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4688                           ;getLoad_AD@channel stored from wreg
  4689  0AD3  0020               	movlb	0	; select bank0
  4690  0AD4  00A6               	movwf	getLoad_AD@channel
  4691                           
  4692                           ;OverLoad_B1.c: 16: char i = 0, j = 0;
  4693  0AD5  01A8               	clrf	getLoad_AD@i
  4694  0AD6  01A7               	clrf	getLoad_AD@j
  4695                           
  4696                           ;OverLoad_B1.c: 18: if (Load1.ADtoGO == 1) {
  4697  0AD7  0022               	movlb	2	; select bank2
  4698  0AD8  1E20               	btfss	_Load1^(0+256),4
  4699  0AD9  0008               	return
  4700                           
  4701                           ;OverLoad_B1.c: 19: Load1.ADRES = getAD(channel, 0xc0);
  4702  0ADA  30C0               	movlw	192
  4703  0ADB  0020               	movlb	0	; select bank0
  4704  0ADC  00A4               	movwf	??_getLoad_AD
  4705  0ADD  0824               	movf	??_getLoad_AD,w
  4706  0ADE  00A0               	movwf	getAD@adcon1
  4707  0ADF  0826               	movf	getLoad_AD@channel,w
  4708  0AE0  319C  2469  318A   	fcall	_getAD
  4709  0AE3  0020               	movlb	0	; select bank0
  4710  0AE4  0821               	movf	?_getAD+1,w
  4711  0AE5  0022               	movlb	2	; select bank2
  4712  0AE6  01D3               	clrf	((_Load1+1)^(0+256)+50)
  4713  0AE7  07D3               	addwf	((_Load1+1)^(0+256)+50),f
  4714  0AE8  0020               	movlb	0	; select bank0
  4715  0AE9  0820               	movf	?_getAD,w
  4716  0AEA  0022               	movlb	2	; select bank2
  4717  0AEB  01D2               	clrf	(_Load1^(0+256)+50)
  4718  0AEC  07D2               	addwf	(_Load1^(0+256)+50),f
  4719                           
  4720                           ;OverLoad_B1.c: 20: for (i = 0; i < 5; i++) {
  4721  0AED  0020               	movlb	0	; select bank0
  4722  0AEE  01A8               	clrf	getLoad_AD@i
  4723  0AEF  3005               	movlw	5
  4724  0AF0  0228               	subwf	getLoad_AD@i,w
  4725  0AF1  1803               	btfsc	3,0
  4726  0AF2  2B1E               	goto	l7895
  4727  0AF3                     l7885:	
  4728                           
  4729                           ;OverLoad_B1.c: 21: if (Load1.AH[i] < Load1.ADRES) {
  4730  0AF3  3528               	lslf	getLoad_AD@i,w
  4731  0AF4  3E28               	addlw	(_Load1+8)& (0+255)
  4732  0AF5  0086               	movwf	6
  4733  0AF6  3001               	movlw	1	; select bank2/3
  4734  0AF7  0087               	movwf	7
  4735  0AF8  3F40               	moviw [0]fsr1
  4736  0AF9  00A4               	movwf	??_getLoad_AD
  4737  0AFA  3F41               	moviw [1]fsr1
  4738  0AFB  00A5               	movwf	??_getLoad_AD+1
  4739  0AFC  0022               	movlb	2	; select bank2
  4740  0AFD  0853               	movf	((_Load1+1)^(0+256)+50),w
  4741  0AFE  0020               	movlb	0	; select bank0
  4742  0AFF  0225               	subwf	??_getLoad_AD+1,w
  4743  0B00  1D03               	skipz
  4744  0B01  2B06               	goto	u7505
  4745  0B02  0022               	movlb	2	; select bank2
  4746  0B03  0852               	movf	(_Load1^(0+256)+50),w
  4747  0B04  0020               	movlb	0	; select bank0
  4748  0B05  0224               	subwf	??_getLoad_AD,w
  4749  0B06                     u7505:	
  4750  0B06  1803               	skipnc
  4751  0B07  2B16               	goto	l7891
  4752                           
  4753                           ;OverLoad_B1.c: 22: Load1.AH[i] = Load1.ADRES;
  4754  0B08  3528               	lslf	getLoad_AD@i,w
  4755  0B09  3E28               	addlw	(_Load1+8)& (0+255)
  4756  0B0A  0086               	movwf	6
  4757  0B0B  3001               	movlw	1	; select bank2/3
  4758  0B0C  0087               	movwf	7
  4759  0B0D  0022               	movlb	2	; select bank2
  4760  0B0E  0852               	movf	(_Load1^(0+256)+50),w
  4761  0B0F  3FC0               	movwi [0]fsr1
  4762  0B10  0853               	movf	((_Load1+1)^(0+256)+50),w
  4763  0B11  3FC1               	movwi [1]fsr1
  4764                           
  4765                           ;OverLoad_B1.c: 23: j = 1;
  4766  0B12  0020               	movlb	0	; select bank0
  4767  0B13  01A7               	clrf	getLoad_AD@j
  4768  0B14  0AA7               	incf	getLoad_AD@j,f
  4769                           
  4770                           ;OverLoad_B1.c: 24: break;
  4771  0B15  2B1E               	goto	l7895
  4772  0B16                     l7891:	
  4773  0B16  3001               	movlw	1
  4774  0B17  00A4               	movwf	??_getLoad_AD
  4775  0B18  0824               	movf	??_getLoad_AD,w
  4776  0B19  07A8               	addwf	getLoad_AD@i,f
  4777  0B1A  3005               	movlw	5
  4778  0B1B  0228               	subwf	getLoad_AD@i,w
  4779  0B1C  1C03               	skipc
  4780  0B1D  2AF3               	goto	l7885
  4781  0B1E                     l7895:	
  4782                           
  4783                           ;OverLoad_B1.c: 25: }
  4784                           ;OverLoad_B1.c: 26: }
  4785                           ;OverLoad_B1.c: 27: if (j == 0) {
  4786  0B1E  08A7               	movf	getLoad_AD@j,f
  4787  0B1F  1D03               	skipz
  4788  0B20  0008               	return
  4789                           
  4790                           ;OverLoad_B1.c: 28: for (i = 0; i < 5; i++) {
  4791  0B21  01A8               	clrf	getLoad_AD@i
  4792  0B22                     L1:	
  4793  0B22  3005               	movlw	5
  4794  0B23  0228               	subwf	getLoad_AD@i,w
  4795  0B24  1803               	btfsc	3,0
  4796  0B25  0008               	return
  4797                           
  4798                           ;OverLoad_B1.c: 29: if (Load1.AL[i] > Load1.ADRES) {
  4799  0B26  3528               	lslf	getLoad_AD@i,w
  4800  0B27  3E3A               	addlw	(_Load1+26)& (0+255)
  4801  0B28  0086               	movwf	6
  4802  0B29  3001               	movlw	1	; select bank2/3
  4803  0B2A  0087               	movwf	7
  4804  0B2B  3F40               	moviw [0]fsr1
  4805  0B2C  00A4               	movwf	??_getLoad_AD
  4806  0B2D  3F41               	moviw [1]fsr1
  4807  0B2E  00A5               	movwf	??_getLoad_AD+1
  4808  0B2F  0825               	movf	??_getLoad_AD+1,w
  4809  0B30  0022               	movlb	2	; select bank2
  4810  0B31  0253               	subwf	((_Load1+1)^(0+256)+50),w
  4811  0B32  1D03               	skipz
  4812  0B33  2B38               	goto	u7545
  4813  0B34  0020               	movlb	0	; select bank0
  4814  0B35  0824               	movf	??_getLoad_AD,w
  4815  0B36  0022               	movlb	2	; select bank2
  4816  0B37  0252               	subwf	(_Load1^(0+256)+50),w
  4817  0B38                     u7545:	
  4818  0B38  1803               	skipnc
  4819  0B39  2B46               	goto	l7907
  4820                           
  4821                           ;OverLoad_B1.c: 30: Load1.AL[i] = Load1.ADRES;
  4822  0B3A  0020               	movlb	0	; select bank0
  4823  0B3B  3528               	lslf	getLoad_AD@i,w
  4824  0B3C  3E3A               	addlw	(_Load1+26)& (0+255)
  4825  0B3D  0086               	movwf	6
  4826  0B3E  3001               	movlw	1	; select bank2/3
  4827  0B3F  0087               	movwf	7
  4828  0B40  0022               	movlb	2	; select bank2
  4829  0B41  0852               	movf	(_Load1^(0+256)+50),w
  4830  0B42  3FC0               	movwi [0]fsr1
  4831  0B43  0853               	movf	((_Load1+1)^(0+256)+50),w
  4832  0B44  3FC1               	movwi [1]fsr1
  4833                           
  4834                           ;OverLoad_B1.c: 31: break;
  4835  0B45  0008               	return
  4836  0B46                     l7907:	
  4837  0B46  3001               	movlw	1
  4838  0B47  0020               	movlb	0	; select bank0
  4839  0B48  00A4               	movwf	??_getLoad_AD
  4840  0B49  0824               	movf	??_getLoad_AD,w
  4841  0B4A  07A8               	addwf	getLoad_AD@i,f
  4842  0B4B  2B22               	goto	L1
  4843  0B4C                     __end_of_getLoad_AD:	
  4844                           
  4845                           	psect	text8
  4846  1C69                     __ptext8:	
  4847 ;; *************** function _getAD *****************
  4848 ;; Defined at:
  4849 ;;		line 342 in file "../src/MCU_B1.c"
  4850 ;; Parameters:    Size  Location     Type
  4851 ;;  adcon0          1    wreg     unsigned char 
  4852 ;;  adcon1          1    0[BANK0 ] unsigned char 
  4853 ;; Auto vars:     Size  Location     Type
  4854 ;;  adcon0          1    3[BANK0 ] unsigned char 
  4855 ;; Return value:  Size  Location     Type
  4856 ;;                  2    0[BANK0 ] int 
  4857 ;; Registers used:
  4858 ;;		wreg, status,2, status,0
  4859 ;; Tracked objects:
  4860 ;;		On entry : 0/0
  4861 ;;		On exit  : 0/0
  4862 ;;		Unchanged: 0/0
  4863 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4864 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4865 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4866 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4867 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4868 ;;Total ram usage:        4 bytes
  4869 ;; Hardware stack levels used:    1
  4870 ;; Hardware stack levels required when called:    5
  4871 ;; This function calls:
  4872 ;;		Nothing
  4873 ;; This function is called by:
  4874 ;;		_getLoad_AD
  4875 ;;		_getTemp_AD
  4876 ;; This function uses a non-reentrant model
  4877 ;;
  4878                           
  4879                           
  4880                           ;psect for function _getAD
  4881  1C69                     _getAD:	
  4882                           
  4883                           ;incstack = 0
  4884                           ; Regs used in _getAD: [wreg+status,2+status,0]
  4885                           ;getAD@adcon0 stored from wreg
  4886  1C69  0020               	movlb	0	; select bank0
  4887  1C6A  00A3               	movwf	getAD@adcon0
  4888                           
  4889                           ;MCU_B1.c: 343: ADCON0 = adcon0;
  4890  1C6B  0823               	movf	getAD@adcon0,w
  4891  1C6C  0021               	movlb	1	; select bank1
  4892  1C6D  009D               	movwf	29	;volatile
  4893                           
  4894                           ;MCU_B1.c: 344: ADCON1 = adcon1;
  4895  1C6E  0020               	movlb	0	; select bank0
  4896  1C6F  0820               	movf	getAD@adcon1,w
  4897  1C70  0021               	movlb	1	; select bank1
  4898  1C71  009E               	movwf	30	;volatile
  4899                           
  4900                           ;MCU_B1.c: 345: GO_nDONE = 1;
  4901  1C72  149D               	bsf	29,1	;volatile
  4902  1C73                     l1344:	
  4903                           ;MCU_B1.c: 346: while (GO_nDONE == 1);
  4904                           
  4905  1C73  189D               	btfsc	29,1	;volatile
  4906  1C74  2C73               	goto	l1344
  4907                           
  4908                           ;MCU_B1.c: 347: return ((ADRESH*256)+ADRESL);
  4909  1C75  081C               	movf	28,w	;volatile
  4910  1C76  0020               	movlb	0	; select bank0
  4911  1C77  01A1               	clrf	?_getAD+1
  4912  1C78  07A1               	addwf	?_getAD+1,f
  4913  1C79  0021               	movlb	1	; select bank1
  4914  1C7A  081B               	movf	27,w	;volatile
  4915  1C7B  0020               	movlb	0	; select bank0
  4916  1C7C  01A0               	clrf	?_getAD
  4917  1C7D  07A0               	addwf	?_getAD,f
  4918  1C7E  0008               	return
  4919  1C7F                     __end_of_getAD:	
  4920                           
  4921                           	psect	text9
  4922  197D                     __ptext9:	
  4923 ;; *************** function _Temp_Main *****************
  4924 ;; Defined at:
  4925 ;;		line 48 in file "../src/OverTemperature_B1.c"
  4926 ;; Parameters:    Size  Location     Type
  4927 ;;		None
  4928 ;; Auto vars:     Size  Location     Type
  4929 ;;		None
  4930 ;; Return value:  Size  Location     Type
  4931 ;;		None               void
  4932 ;; Registers used:
  4933 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4934 ;; Tracked objects:
  4935 ;;		On entry : 0/0
  4936 ;;		On exit  : 0/0
  4937 ;;		Unchanged: 0/0
  4938 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4939 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4940 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4941 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4942 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4943 ;;Total ram usage:        0 bytes
  4944 ;; Hardware stack levels used:    1
  4945 ;; Hardware stack levels required when called:   11
  4946 ;; This function calls:
  4947 ;;		_setTemp_Main
  4948 ;; This function is called by:
  4949 ;;		_main
  4950 ;; This function uses a non-reentrant model
  4951 ;;
  4952                           
  4953                           
  4954                           ;psect for function _Temp_Main
  4955  197D                     _Temp_Main:	
  4956                           
  4957                           ;OverTemperature_B1.c: 50: setTemp_Main();
  4958                           
  4959                           ;incstack = 0
  4960                           ; Regs used in _Temp_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4961  197D  318B  23C6         	fcall	_setTemp_Main
  4962  197F  0008               	return
  4963  1980                     __end_of_Temp_Main:	
  4964                           
  4965                           	psect	text10
  4966  0BC6                     __ptext10:	
  4967 ;; *************** function _setTemp_Main *****************
  4968 ;; Defined at:
  4969 ;;		line 55 in file "../src/OverTemperature_B1.c"
  4970 ;; Parameters:    Size  Location     Type
  4971 ;;		None
  4972 ;; Auto vars:     Size  Location     Type
  4973 ;;		None
  4974 ;; Return value:  Size  Location     Type
  4975 ;;		None               void
  4976 ;; Registers used:
  4977 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4978 ;; Tracked objects:
  4979 ;;		On entry : 0/0
  4980 ;;		On exit  : 0/0
  4981 ;;		Unchanged: 0/0
  4982 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4983 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4984 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4985 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4986 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4987 ;;Total ram usage:        1 bytes
  4988 ;; Hardware stack levels used:    1
  4989 ;; Hardware stack levels required when called:   10
  4990 ;; This function calls:
  4991 ;;		_getLoad_Safe
  4992 ;;		_setOverTemp_Exceptions
  4993 ;; This function is called by:
  4994 ;;		_Temp_Main
  4995 ;; This function uses a non-reentrant model
  4996 ;;
  4997                           
  4998                           
  4999                           ;psect for function _setTemp_Main
  5000  0BC6                     _setTemp_Main:	
  5001                           
  5002                           ;OverTemperature_B1.c: 56: if (Temp1.Enable == 1) {
  5003                           
  5004                           ;incstack = 0
  5005                           ; Regs used in _setTemp_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5006  0BC6  0021               	movlb	1	; select bank1
  5007  0BC7  1C57               	btfss	_Temp1^(0+128),0
  5008  0BC8  0008               	return
  5009                           
  5010                           ;OverTemperature_B1.c: 57: if (Temp1.ADtoGO == 0) {
  5011  0BC9  1957               	btfsc	_Temp1^(0+128),2
  5012  0BCA  2BE8               	goto	l7429
  5013                           
  5014                           ;OverTemperature_B1.c: 58: Temp1.Time++;
  5015  0BCB  3001               	movlw	1
  5016  0BCC  07D8               	addwf	(_Temp1^(0+128)+1),f
  5017  0BCD  3000               	movlw	0
  5018  0BCE  3DD9               	addwfc	((_Temp1+1)^(0+128)+1),f
  5019                           
  5020                           ;OverTemperature_B1.c: 59: if (Temp1.Time >= 500)
  5021  0BCF  3001               	movlw	1
  5022  0BD0  0259               	subwf	((_Temp1+1)^(0+128)+1),w
  5023  0BD1  30F4               	movlw	244
  5024  0BD2  1903               	skipnz
  5025  0BD3  0258               	subwf	(_Temp1^(0+128)+1),w
  5026  0BD4  1C03               	skipc
  5027  0BD5  0008               	return
  5028                           
  5029                           ;OverTemperature_B1.c: 60: {
  5030                           ;OverTemperature_B1.c: 61: if (getLoad_Safe() == 1 && 1 == 1) {
  5031  0BD6  3199  21F6  318B   	fcall	_getLoad_Safe
  5032  0BD9  3A01               	xorlw	1
  5033  0BDA  1D03               	skipz
  5034  0BDB  2BE2               	goto	l7427
  5035                           
  5036                           ;OverTemperature_B1.c: 62: Temp1.Time = 0;
  5037  0BDC  0021               	movlb	1	; select bank1
  5038  0BDD  01D8               	clrf	(_Temp1^(0+128)+1)
  5039  0BDE  01D9               	clrf	((_Temp1+1)^(0+128)+1)
  5040                           
  5041                           ;OverTemperature_B1.c: 63: Temp1.ADtoGO = 0;
  5042  0BDF  1157               	bcf	_Temp1^(0+128),2
  5043                           
  5044                           ;OverTemperature_B1.c: 64: Temp1.Safe = 0;
  5045  0BE0  1257               	bcf	_Temp1^(0+128),4
  5046                           
  5047                           ;OverTemperature_B1.c: 65: } else {
  5048  0BE1  0008               	return
  5049  0BE2                     l7427:	
  5050                           
  5051                           ;OverTemperature_B1.c: 66: Temp1.Time = 1000;
  5052  0BE2  30E8               	movlw	232
  5053  0BE3  0021               	movlb	1	; select bank1
  5054  0BE4  00D8               	movwf	(_Temp1^(0+128)+1)
  5055  0BE5  3003               	movlw	3
  5056  0BE6  00D9               	movwf	(_Temp1^(0+128)+2)
  5057                           
  5058                           ;OverTemperature_B1.c: 67: }
  5059                           ;OverTemperature_B1.c: 68: }
  5060                           ;OverTemperature_B1.c: 69: } else {
  5061  0BE7  0008               	return
  5062  0BE8                     l7429:	
  5063                           
  5064                           ;OverTemperature_B1.c: 70: Temp1.Time++;
  5065  0BE8  3001               	movlw	1
  5066  0BE9  07D8               	addwf	(_Temp1^(0+128)+1),f
  5067  0BEA  3000               	movlw	0
  5068  0BEB  3DD9               	addwfc	((_Temp1+1)^(0+128)+1),f
  5069                           
  5070                           ;OverTemperature_B1.c: 71: if (Temp1.Time >= 4)
  5071  0BEC  3000               	movlw	0
  5072  0BED  0259               	subwf	((_Temp1+1)^(0+128)+1),w
  5073  0BEE  3004               	movlw	4
  5074  0BEF  1903               	skipnz
  5075  0BF0  0258               	subwf	(_Temp1^(0+128)+1),w
  5076  0BF1  1C03               	skipc
  5077  0BF2  0008               	return
  5078                           
  5079                           ;OverTemperature_B1.c: 72: {
  5080                           ;OverTemperature_B1.c: 73: Temp1.Time = 0;
  5081  0BF3  01D8               	clrf	(_Temp1^(0+128)+1)
  5082  0BF4  01D9               	clrf	((_Temp1+1)^(0+128)+1)
  5083                           
  5084                           ;OverTemperature_B1.c: 74: Temp1.ADtoGO = 0;
  5085  0BF5  1157               	bcf	_Temp1^(0+128),2
  5086                           
  5087                           ;OverTemperature_B1.c: 75: Temp1.AD = Temp1.ADH[1];
  5088  0BF6  0862               	movf	((_Temp1+1)^(0+128)+10),w
  5089  0BF7  01DE               	clrf	((_Temp1+1)^(0+128)+6)
  5090  0BF8  07DE               	addwf	((_Temp1+1)^(0+128)+6),f
  5091  0BF9  0861               	movf	(_Temp1^(0+128)+10),w
  5092  0BFA  01DD               	clrf	(_Temp1^(0+128)+6)
  5093  0BFB  07DD               	addwf	(_Temp1^(0+128)+6),f
  5094                           
  5095                           ;OverTemperature_B1.c: 76: if (Temp1.ERROR == 1) {
  5096  0BFC  1CD7               	btfss	_Temp1^(0+128),1
  5097  0BFD  2C15               	goto	l7451
  5098                           
  5099                           ;OverTemperature_B1.c: 77: if (Temp1.AD >= 600) {
  5100  0BFE  3002               	movlw	2
  5101  0BFF  025E               	subwf	((_Temp1+1)^(0+128)+6),w
  5102  0C00  3058               	movlw	88
  5103  0C01  1903               	skipnz
  5104  0C02  025D               	subwf	(_Temp1^(0+128)+6),w
  5105  0C03  1C03               	skipc
  5106  0C04  2C2C               	goto	l7461
  5107                           
  5108                           ;OverTemperature_B1.c: 78: Temp1.Count++;
  5109  0C05  3001               	movlw	1
  5110  0C06  0020               	movlb	0	; select bank0
  5111  0C07  00B1               	movwf	??_setTemp_Main
  5112  0C08  0831               	movf	??_setTemp_Main,w
  5113  0C09  0021               	movlb	1	; select bank1
  5114  0C0A  07DA               	addwf	(_Temp1^(0+128)+3),f
  5115                           
  5116                           ;OverTemperature_B1.c: 79: if (Temp1.Count >= 3) {
  5117  0C0B  3003               	movlw	3
  5118  0C0C  025A               	subwf	(_Temp1^(0+128)+3),w
  5119  0C0D  1C03               	skipc
  5120  0C0E  2C2E               	goto	l7463
  5121                           
  5122                           ;OverTemperature_B1.c: 80: Temp1.Count = 0;
  5123  0C0F  01DA               	clrf	(_Temp1^(0+128)+3)
  5124                           
  5125                           ;OverTemperature_B1.c: 81: setOverTemp_Exceptions(0);
  5126  0C10  3000               	movlw	0
  5127  0C11  3191  21D7  318B   	fcall	_setOverTemp_Exceptions
  5128                           
  5129                           ;OverTemperature_B1.c: 82: }
  5130                           ;OverTemperature_B1.c: 83: } else {
  5131  0C14  2C2E               	goto	l7463
  5132  0C15                     l7451:	
  5133                           ;OverTemperature_B1.c: 85: }
  5134                           ;OverTemperature_B1.c: 86: } else {
  5135                           
  5136                           ;OverTemperature_B1.c: 84: Temp1.Count = 0;
  5137                           
  5138                           
  5139                           ;OverTemperature_B1.c: 87: if (Temp1.AD <= 550) {
  5140  0C15  3002               	movlw	2
  5141  0C16  025E               	subwf	((_Temp1+1)^(0+128)+6),w
  5142  0C17  3027               	movlw	39
  5143  0C18  1903               	skipnz
  5144  0C19  025D               	subwf	(_Temp1^(0+128)+6),w
  5145  0C1A  1803               	skipnc
  5146  0C1B  2C2C               	goto	l7461
  5147                           
  5148                           ;OverTemperature_B1.c: 88: Temp1.Count++;
  5149  0C1C  3001               	movlw	1
  5150  0C1D  0020               	movlb	0	; select bank0
  5151  0C1E  00B1               	movwf	??_setTemp_Main
  5152  0C1F  0831               	movf	??_setTemp_Main,w
  5153  0C20  0021               	movlb	1	; select bank1
  5154  0C21  07DA               	addwf	(_Temp1^(0+128)+3),f
  5155                           
  5156                           ;OverTemperature_B1.c: 89: if (Temp1.Count >= 3) {
  5157  0C22  3003               	movlw	3
  5158  0C23  025A               	subwf	(_Temp1^(0+128)+3),w
  5159  0C24  1C03               	skipc
  5160  0C25  2C2E               	goto	l7463
  5161                           
  5162                           ;OverTemperature_B1.c: 90: Temp1.Count = 0;
  5163  0C26  01DA               	clrf	(_Temp1^(0+128)+3)
  5164                           
  5165                           ;OverTemperature_B1.c: 91: setOverTemp_Exceptions(1);
  5166  0C27  3001               	movlw	1
  5167  0C28  3191  21D7  318B   	fcall	_setOverTemp_Exceptions
  5168                           
  5169                           ;OverTemperature_B1.c: 92: }
  5170                           ;OverTemperature_B1.c: 93: } else {
  5171  0C2B  2C2E               	goto	l7463
  5172  0C2C                     l7461:	
  5173                           
  5174                           ;OverTemperature_B1.c: 94: Temp1.Count = 0;
  5175  0C2C  0021               	movlb	1	; select bank1
  5176  0C2D  01DA               	clrf	(_Temp1^(0+128)+3)
  5177  0C2E                     l7463:	
  5178                           
  5179                           ;OverTemperature_B1.c: 95: }
  5180                           ;OverTemperature_B1.c: 96: }
  5181                           ;OverTemperature_B1.c: 97: if (Temp1.ERROR == 0) {
  5182  0C2E  0021               	movlb	1	; select bank1
  5183  0C2F  1CD7               	btfss	_Temp1^(0+128),1
  5184                           
  5185                           ;OverTemperature_B1.c: 98: Temp1.Safe = 1;
  5186  0C30  1657               	bsf	_Temp1^(0+128),4
  5187                           
  5188                           ;OverTemperature_B1.c: 99: }
  5189                           ;OverTemperature_B1.c: 100: product->Data[24]=Temp1.AD >> 8;
  5190  0C31  085E               	movf	((_Temp1+1)^(0+128)+6),w
  5191  0C32  0020               	movlb	0	; select bank0
  5192  0C33  00B1               	movwf	??_setTemp_Main
  5193  0C34  086E               	movf	_product,w
  5194  0C35  3E18               	addlw	24
  5195  0C36  0086               	movwf	6
  5196  0C37  3002               	movlw	2	; select bank4/5
  5197  0C38  0087               	movwf	7
  5198  0C39  0831               	movf	??_setTemp_Main,w
  5199  0C3A  0081               	movwf	1
  5200                           
  5201                           ;OverTemperature_B1.c: 101: product->Data[25]=Temp1.AD;
  5202  0C3B  0021               	movlb	1	; select bank1
  5203  0C3C  085D               	movf	(_Temp1^(0+128)+6),w
  5204  0C3D  0020               	movlb	0	; select bank0
  5205  0C3E  00B1               	movwf	??_setTemp_Main
  5206  0C3F  086E               	movf	_product,w
  5207  0C40  3E19               	addlw	25
  5208  0C41  0086               	movwf	6
  5209  0C42  3002               	movlw	2	; select bank4/5
  5210  0C43  0087               	movwf	7
  5211  0C44  0831               	movf	??_setTemp_Main,w
  5212  0C45  0081               	movwf	1
  5213                           
  5214                           ;OverTemperature_B1.c: 102: Temp1.ADH[0] = 0;
  5215  0C46  0021               	movlb	1	; select bank1
  5216  0C47  01DF               	clrf	(_Temp1^(0+128)+8)
  5217  0C48  01E0               	clrf	((_Temp1+1)^(0+128)+8)
  5218                           
  5219                           ;OverTemperature_B1.c: 103: Temp1.ADH[1] = 0;
  5220  0C49  01E1               	clrf	(_Temp1^(0+128)+10)
  5221  0C4A  01E2               	clrf	((_Temp1+1)^(0+128)+10)
  5222  0C4B  0008               	return
  5223  0C4C                     __end_of_setTemp_Main:	
  5224                           
  5225                           	psect	text11
  5226  11D7                     __ptext11:	
  5227 ;; *************** function _setOverTemp_Exceptions *****************
  5228 ;; Defined at:
  5229 ;;		line 110 in file "../src/OverTemperature_B1.c"
  5230 ;; Parameters:    Size  Location     Type
  5231 ;;  command         1    wreg     unsigned char 
  5232 ;; Auto vars:     Size  Location     Type
  5233 ;;  command         1   16[BANK0 ] unsigned char 
  5234 ;;  i               1   15[BANK0 ] unsigned char 
  5235 ;; Return value:  Size  Location     Type
  5236 ;;		None               void
  5237 ;; Registers used:
  5238 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5239 ;; Tracked objects:
  5240 ;;		On entry : 0/0
  5241 ;;		On exit  : 0/0
  5242 ;;		Unchanged: 0/0
  5243 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5244 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5245 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5246 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5247 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5248 ;;Total ram usage:        3 bytes
  5249 ;; Hardware stack levels used:    1
  5250 ;; Hardware stack levels required when called:    9
  5251 ;; This function calls:
  5252 ;;		_DimmerLights_Exceptions
  5253 ;;		_setBuz
  5254 ;;		_setLED
  5255 ;;		_setRF_Enable
  5256 ;;		_setSw_Enable
  5257 ;; This function is called by:
  5258 ;;		_setTemp_Main
  5259 ;; This function uses a non-reentrant model
  5260 ;;
  5261                           
  5262                           
  5263                           ;psect for function _setOverTemp_Exceptions
  5264  11D7                     _setOverTemp_Exceptions:	
  5265                           
  5266                           ;incstack = 0
  5267                           ; Regs used in _setOverTemp_Exceptions: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
  5268                           ;setOverTemp_Exceptions@command stored from wreg
  5269  11D7  0020               	movlb	0	; select bank0
  5270  11D8  00B0               	movwf	setOverTemp_Exceptions@command
  5271                           
  5272                           ;OverTemperature_B1.c: 111: char i = command == 1 ? 0 : 1;
  5273  11D9  0830               	movf	setOverTemp_Exceptions@command,w
  5274  11DA  3A01               	xorlw	1
  5275  11DB  3000               	movlw	0
  5276  11DC  1D03               	skipz
  5277  11DD  3001               	movlw	1
  5278  11DE  00AE               	movwf	??_setOverTemp_Exceptions
  5279  11DF  082E               	movf	??_setOverTemp_Exceptions,w
  5280  11E0  00AF               	movwf	setOverTemp_Exceptions@i
  5281                           
  5282                           ;OverTemperature_B1.c: 112: Temp1.ERROR = command;
  5283  11E1  0830               	movf	setOverTemp_Exceptions@command,w
  5284  11E2  0021               	movlb	1	; select bank1
  5285  11E3  10D7               	bcf	_Temp1^(0+128),1
  5286  11E4  1D03               	skipz
  5287  11E5  14D7               	bsf	_Temp1^(0+128),1
  5288                           
  5289                           ;OverTemperature_B1.c: 113: Temp1.Safe = i;
  5290  11E6  0020               	movlb	0	; select bank0
  5291  11E7  082F               	movf	setOverTemp_Exceptions@i,w
  5292  11E8  0021               	movlb	1	; select bank1
  5293  11E9  1257               	bcf	_Temp1^(0+128),4
  5294  11EA  1D03               	skipz
  5295  11EB  1657               	bsf	_Temp1^(0+128),4
  5296                           
  5297                           ;OverTemperature_B1.c: 114: if (command == 1) {
  5298  11EC  0020               	movlb	0	; select bank0
  5299  11ED  0830               	movf	setOverTemp_Exceptions@command,w
  5300  11EE  3A01               	xorlw	1
  5301  11EF  1D03               	skipz
  5302  11F0  29F6               	goto	l6857
  5303                           
  5304                           ;OverTemperature_B1.c: 115: DimmerLights_Exceptions(1);
  5305  11F1  3001               	movlw	1
  5306  11F2  3196  266D  3191   	fcall	_DimmerLights_Exceptions
  5307                           
  5308                           ;OverTemperature_B1.c: 119: } else if (command == 0) {
  5309  11F5  2A02               	goto	l6861
  5310  11F6                     l6857:	
  5311  11F6  0020               	movlb	0	; select bank0
  5312  11F7  08B0               	movf	setOverTemp_Exceptions@command,f
  5313  11F8  1D03               	skipz
  5314  11F9  2A02               	goto	l6861
  5315                           
  5316                           ;OverTemperature_B1.c: 120: setBuz(2, 100);
  5317  11FA  3064               	movlw	100
  5318  11FB  00A9               	movwf	setBuz@time
  5319  11FC  3000               	movlw	0
  5320  11FD  00AA               	movwf	setBuz@time+1
  5321  11FE  3002               	movlw	2
  5322  11FF  3194  24F6  3191   	fcall	_setBuz
  5323  1202                     l6861:	
  5324                           
  5325                           ;OverTemperature_B1.c: 121: }
  5326                           ;OverTemperature_B1.c: 124: setLED(99, command + 10);
  5327  1202  0020               	movlb	0	; select bank0
  5328  1203  0830               	movf	setOverTemp_Exceptions@command,w
  5329  1204  3E0A               	addlw	10
  5330  1205  00AE               	movwf	??_setOverTemp_Exceptions
  5331  1206  082E               	movf	??_setOverTemp_Exceptions,w
  5332  1207  00A1               	movwf	setLED@command
  5333  1208  3063               	movlw	99
  5334  1209  3196  260B  3191   	fcall	_setLED
  5335                           
  5336                           ;OverTemperature_B1.c: 126: setSw_Enable(i);
  5337  120C  0020               	movlb	0	; select bank0
  5338  120D  082F               	movf	setOverTemp_Exceptions@i,w
  5339  120E  319D  2562  3191   	fcall	_setSw_Enable
  5340                           
  5341                           ;OverTemperature_B1.c: 128: setRF_Enable(i);
  5342  1211  0020               	movlb	0	; select bank0
  5343  1212  082F               	movf	setOverTemp_Exceptions@i,w
  5344  1213  319A  22B2         	fcall	_setRF_Enable
  5345  1215  0008               	return
  5346  1216                     __end_of_setOverTemp_Exceptions:	
  5347                           
  5348                           	psect	text12
  5349  19F6                     __ptext12:	
  5350 ;; *************** function _getLoad_Safe *****************
  5351 ;; Defined at:
  5352 ;;		line 298 in file "../src/OverLoad_B1.c"
  5353 ;; Parameters:    Size  Location     Type
  5354 ;;		None
  5355 ;; Auto vars:     Size  Location     Type
  5356 ;;		None
  5357 ;; Return value:  Size  Location     Type
  5358 ;;                  1    wreg      unsigned char 
  5359 ;; Registers used:
  5360 ;;		wreg, status,2, status,0
  5361 ;; Tracked objects:
  5362 ;;		On entry : 0/0
  5363 ;;		On exit  : 0/0
  5364 ;;		Unchanged: 0/0
  5365 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5366 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5367 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5368 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5369 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5370 ;;Total ram usage:        1 bytes
  5371 ;; Hardware stack levels used:    1
  5372 ;; Hardware stack levels required when called:    5
  5373 ;; This function calls:
  5374 ;;		Nothing
  5375 ;; This function is called by:
  5376 ;;		_setTemp_Main
  5377 ;; This function uses a non-reentrant model
  5378 ;;
  5379                           
  5380                           
  5381                           ;psect for function _getLoad_Safe
  5382  19F6                     _getLoad_Safe:	
  5383                           
  5384                           ;OverLoad_B1.c: 299: return Load1.Safe;
  5385                           
  5386                           ;incstack = 0
  5387                           ; Regs used in _getLoad_Safe: [wreg+status,2+status,0]
  5388  19F6  0022               	movlb	2	; select bank2
  5389  19F7  0C20               	rrf	_Load1^(0+256),w
  5390  19F8  0020               	movlb	0	; select bank0
  5391  19F9  00A0               	movwf	??_getLoad_Safe
  5392  19FA  0CA0               	rrf	??_getLoad_Safe,f
  5393  19FB  0C20               	rrf	??_getLoad_Safe,w
  5394  19FC  3901               	andlw	1
  5395  19FD  0008               	return
  5396  19FE                     __end_of_getLoad_Safe:	
  5397                           
  5398                           	psect	text13
  5399  197A                     __ptext13:	
  5400 ;; *************** function _Temp_Initialization *****************
  5401 ;; Defined at:
  5402 ;;		line 9 in file "../src/OverTemperature_B1.c"
  5403 ;; Parameters:    Size  Location     Type
  5404 ;;		None
  5405 ;; Auto vars:     Size  Location     Type
  5406 ;;		None
  5407 ;; Return value:  Size  Location     Type
  5408 ;;		None               void
  5409 ;; Registers used:
  5410 ;;		status,2, status,0, pclath, cstack
  5411 ;; Tracked objects:
  5412 ;;		On entry : 0/0
  5413 ;;		On exit  : 0/0
  5414 ;;		Unchanged: 0/0
  5415 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5416 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5417 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5418 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5419 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5420 ;;Total ram usage:        0 bytes
  5421 ;; Hardware stack levels used:    1
  5422 ;; Hardware stack levels required when called:    6
  5423 ;; This function calls:
  5424 ;;		_setTemp_Initialization
  5425 ;; This function is called by:
  5426 ;;		_main
  5427 ;; This function uses a non-reentrant model
  5428 ;;
  5429                           
  5430                           
  5431                           ;psect for function _Temp_Initialization
  5432  197A                     _Temp_Initialization:	
  5433                           
  5434                           ;OverTemperature_B1.c: 11: setTemp_Initialization();
  5435                           
  5436                           ;incstack = 0
  5437                           ; Regs used in _Temp_Initialization: [status,2+status,0+pclath+cstack]
  5438  197A  3199  2177         	fcall	_setTemp_Initialization
  5439  197C  0008               	return
  5440  197D                     __end_of_Temp_Initialization:	
  5441                           
  5442                           	psect	text14
  5443  1977                     __ptext14:	
  5444 ;; *************** function _setTemp_Initialization *****************
  5445 ;; Defined at:
  5446 ;;		line 43 in file "../src/OverTemperature_B1.c"
  5447 ;; Parameters:    Size  Location     Type
  5448 ;;		None
  5449 ;; Auto vars:     Size  Location     Type
  5450 ;;		None
  5451 ;; Return value:  Size  Location     Type
  5452 ;;		None               void
  5453 ;; Registers used:
  5454 ;;		None
  5455 ;; Tracked objects:
  5456 ;;		On entry : 0/0
  5457 ;;		On exit  : 0/0
  5458 ;;		Unchanged: 0/0
  5459 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5460 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5461 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5462 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5463 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5464 ;;Total ram usage:        0 bytes
  5465 ;; Hardware stack levels used:    1
  5466 ;; Hardware stack levels required when called:    5
  5467 ;; This function calls:
  5468 ;;		Nothing
  5469 ;; This function is called by:
  5470 ;;		_Temp_Initialization
  5471 ;; This function uses a non-reentrant model
  5472 ;;
  5473                           
  5474                           
  5475                           ;psect for function _setTemp_Initialization
  5476  1977                     _setTemp_Initialization:	
  5477                           
  5478                           ;OverTemperature_B1.c: 44: Temp1.Safe = 1;
  5479                           
  5480                           ;incstack = 0
  5481                           ; Regs used in _setTemp_Initialization: []
  5482  1977  0021               	movlb	1	; select bank1
  5483  1978  1657               	bsf	_Temp1^(0+128),4
  5484  1979  0008               	return
  5485  197A                     __end_of_setTemp_Initialization:	
  5486                           
  5487                           	psect	text15
  5488  19EE                     __ptext15:	
  5489 ;; *************** function _Switch_Main *****************
  5490 ;; Defined at:
  5491 ;;		line 61 in file "../src/Switch_B1.c"
  5492 ;; Parameters:    Size  Location     Type
  5493 ;;		None
  5494 ;; Auto vars:     Size  Location     Type
  5495 ;;		None
  5496 ;; Return value:  Size  Location     Type
  5497 ;;		None               void
  5498 ;; Registers used:
  5499 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5500 ;; Tracked objects:
  5501 ;;		On entry : 0/0
  5502 ;;		On exit  : 0/0
  5503 ;;		Unchanged: 0/0
  5504 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5505 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5506 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5507 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5508 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5509 ;;Total ram usage:        0 bytes
  5510 ;; Hardware stack levels used:    1
  5511 ;; Hardware stack levels required when called:   11
  5512 ;; This function calls:
  5513 ;;		_setSw_Main
  5514 ;; This function is called by:
  5515 ;;		_main
  5516 ;; This function uses a non-reentrant model
  5517 ;;
  5518                           
  5519                           
  5520                           ;psect for function _Switch_Main
  5521  19EE                     _Switch_Main:	
  5522                           
  5523                           ;Switch_B1.c: 63: setSw_Main(1);
  5524                           
  5525                           ;incstack = 0
  5526                           ; Regs used in _Switch_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5527  19EE  3001               	movlw	1
  5528  19EF  3183  238D  3199   	fcall	_setSw_Main
  5529                           
  5530                           ;Switch_B1.c: 67: setSw_Main(2);
  5531  19F2  3002               	movlw	2
  5532  19F3  3183  238D         	fcall	_setSw_Main
  5533  19F5  0008               	return
  5534  19F6                     __end_of_Switch_Main:	
  5535                           
  5536                           	psect	text16
  5537  038D                     __ptext16:	
  5538 ;; *************** function _setSw_Main *****************
  5539 ;; Defined at:
  5540 ;;		line 111 in file "../src/Switch_B1.c"
  5541 ;; Parameters:    Size  Location     Type
  5542 ;;  sw              1    wreg     unsigned char 
  5543 ;; Auto vars:     Size  Location     Type
  5544 ;;  sw              1   73[BANK0 ] unsigned char 
  5545 ;; Return value:  Size  Location     Type
  5546 ;;		None               void
  5547 ;; Registers used:
  5548 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5549 ;; Tracked objects:
  5550 ;;		On entry : 0/0
  5551 ;;		On exit  : 0/0
  5552 ;;		Unchanged: 0/0
  5553 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5554 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5555 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5556 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5557 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5558 ;;Total ram usage:        5 bytes
  5559 ;; Hardware stack levels used:    1
  5560 ;; Hardware stack levels required when called:   10
  5561 ;; This function calls:
  5562 ;;		_SwPointSelect
  5563 ;;		_Sw_DimmerAdjFunc
  5564 ;;		_Sw_DimmerOffFunc
  5565 ;;		_Sw_DimmerOnFunc
  5566 ;;		_setBuz
  5567 ;;		_setRF_Learn
  5568 ;; This function is called by:
  5569 ;;		_Switch_Main
  5570 ;; This function uses a non-reentrant model
  5571 ;;
  5572                           
  5573                           
  5574                           ;psect for function _setSw_Main
  5575  038D                     _setSw_Main:	
  5576                           
  5577                           ;incstack = 0
  5578                           ; Regs used in _setSw_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5579                           ;setSw_Main@sw stored from wreg
  5580  038D  0020               	movlb	0	; select bank0
  5581  038E  00E9               	movwf	setSw_Main@sw
  5582                           
  5583                           ;Switch_B1.c: 112: SwPointSelect(sw);
  5584  038F  0869               	movf	setSw_Main@sw,w
  5585  0390  319C  2414  3183   	fcall	_SwPointSelect
  5586                           
  5587                           ;Switch_B1.c: 113: if (Sw->Enable == 1) {
  5588  0393  0020               	movlb	0	; select bank0
  5589  0394  086F               	movf	_Sw,w
  5590  0395  0086               	movwf	6
  5591  0396  3001               	movlw	1	; select bank2/3
  5592  0397  0087               	movwf	7
  5593  0398  1C01               	btfss	1,0
  5594  0399  0008               	return
  5595                           
  5596                           ;Switch_B1.c: 125: if (sw == 1) {
  5597  039A  0869               	movf	setSw_Main@sw,w
  5598  039B  3A01               	xorlw	1
  5599  039C  1D03               	skipz
  5600  039D  2BAA               	goto	l7563
  5601                           
  5602                           ;Switch_B1.c: 126: Sw->Touch = (RA6 == 1 || RA4 == 1) ? 1 : 0;
  5603  039E  01E7               	clrf	_setSw_Main$6014
  5604  039F  0AE7               	incf	_setSw_Main$6014,f
  5605  03A0  1F0C               	btfss	12,6	;volatile
  5606  03A1  1A0C               	btfsc	12,4	;volatile
  5607  03A2  2BA4               	goto	l7561
  5608  03A3  01E7               	clrf	_setSw_Main$6014
  5609  03A4                     l7561:	
  5610  03A4  086F               	movf	_Sw,w
  5611  03A5  0086               	movwf	6
  5612  03A6  3001               	movlw	1	; select bank2/3
  5613  03A7  0087               	movwf	7
  5614  03A8  0867               	movf	_setSw_Main$6014,w
  5615  03A9  2BB9               	goto	L2
  5616  03AA                     l7563:	
  5617                           ;Switch_B1.c: 127: } else if (sw == 2) {
  5618                           
  5619  03AA  0869               	movf	setSw_Main@sw,w
  5620  03AB  3A02               	xorlw	2
  5621  03AC  1D03               	skipz
  5622  03AD  2BBC               	goto	l7573
  5623                           
  5624                           ;Switch_B1.c: 128: Sw->Touch = (RA0 == 1 || RB1 == 1) ? 1 : 0;
  5625  03AE  01E8               	clrf	_setSw_Main$6015
  5626  03AF  0AE8               	incf	_setSw_Main$6015,f
  5627  03B0  1C0C               	btfss	12,0	;volatile
  5628  03B1  188D               	btfsc	13,1	;volatile
  5629  03B2  2BB4               	goto	l7571
  5630  03B3  01E8               	clrf	_setSw_Main$6015
  5631  03B4                     l7571:	
  5632  03B4  086F               	movf	_Sw,w
  5633  03B5  0086               	movwf	6
  5634  03B6  3001               	movlw	1	; select bank2/3
  5635  03B7  0087               	movwf	7
  5636  03B8  0868               	movf	_setSw_Main$6015,w
  5637  03B9                     L2:	
  5638  03B9  1081               	bcf	1,1
  5639  03BA  1D03               	skipz
  5640  03BB  1481               	bsf	1,1
  5641  03BC                     l7573:	
  5642                           
  5643                           ;Switch_B1.c: 129: }
  5644                           ;Switch_B1.c: 135: if (Sw->Touch == 1) {
  5645  03BC  086F               	movf	_Sw,w
  5646  03BD  0086               	movwf	6
  5647  03BE  3001               	movlw	1	; select bank2/3
  5648  03BF  0087               	movwf	7
  5649  03C0  1C81               	btfss	1,1
  5650  03C1  2C89               	goto	l7621
  5651                           
  5652                           ;Switch_B1.c: 136: if (Sw->Debounce == 0) {
  5653  03C2  086F               	movf	_Sw,w
  5654  03C3  0086               	movwf	6
  5655  03C4  3001               	movlw	1	; select bank2/3
  5656  03C5  0087               	movwf	7
  5657  03C6  1901               	btfsc	1,2
  5658  03C7  2BE9               	goto	l7587
  5659                           
  5660                           ;Switch_B1.c: 137: Sw->DebounceTime++;
  5661  03C8  3001               	movlw	1
  5662  03C9  00E5               	movwf	??_setSw_Main
  5663  03CA  086F               	movf	_Sw,w
  5664  03CB  3E02               	addlw	2
  5665  03CC  0086               	movwf	6
  5666  03CD  3001               	movlw	1	; select bank2/3
  5667  03CE  0087               	movwf	7
  5668  03CF  0865               	movf	??_setSw_Main,w
  5669  03D0  0781               	addwf	1,f
  5670                           
  5671                           ;Switch_B1.c: 138: if (Sw->DebounceTime >= 5) {
  5672  03D1  086F               	movf	_Sw,w
  5673  03D2  3E02               	addlw	2
  5674  03D3  0086               	movwf	6
  5675  03D4  3001               	movlw	1	; select bank2/3
  5676  03D5  0087               	movwf	7
  5677  03D6  3005               	movlw	5
  5678  03D7  0201               	subwf	1,w
  5679  03D8  1C03               	skipc
  5680  03D9  0008               	return
  5681                           
  5682                           ;Switch_B1.c: 139: Sw->DebounceTime = 0;
  5683  03DA  086F               	movf	_Sw,w
  5684  03DB  3E02               	addlw	2
  5685  03DC  0086               	movwf	6
  5686  03DD  3001               	movlw	1	; select bank2/3
  5687  03DE  0087               	movwf	7
  5688  03DF  0181               	clrf	1
  5689                           
  5690                           ;Switch_B1.c: 140: Sw->Debounce = 1;
  5691  03E0  086F               	movf	_Sw,w
  5692  03E1  0086               	movwf	6
  5693  03E2  3001               	movlw	1	; select bank2/3
  5694  03E3  0087               	movwf	7
  5695  03E4  1501               	bsf	1,2
  5696                           
  5697                           ;Switch_B1.c: 143: Sw_DimmerOnFunc(sw);
  5698  03E5  0869               	movf	setSw_Main@sw,w
  5699  03E6  3189  2102         	fcall	_Sw_DimmerOnFunc
  5700                           
  5701                           ;Switch_B1.c: 145: }
  5702                           ;Switch_B1.c: 146: } else {
  5703  03E8  0008               	return
  5704  03E9                     l7587:	
  5705                           
  5706                           ;Switch_B1.c: 147: if (Sw->Hold1 == 0) {
  5707  03E9  0020               	movlb	0	; select bank0
  5708  03EA  086F               	movf	_Sw,w
  5709  03EB  0086               	movwf	6
  5710  03EC  3001               	movlw	1	; select bank2/3
  5711  03ED  0087               	movwf	7
  5712  03EE  1981               	btfsc	1,3
  5713  03EF  2C16               	goto	l7597
  5714                           
  5715                           ;Switch_B1.c: 148: Sw->Hold1Time++;
  5716  03F0  086F               	movf	_Sw,w
  5717  03F1  3E03               	addlw	3
  5718  03F2  0086               	movwf	6
  5719  03F3  3001               	movlw	1	; select bank2/3
  5720  03F4  0087               	movwf	7
  5721  03F5  3001               	movlw	1
  5722  03F6  0781               	addwf	1,f
  5723  03F7  3141               	addfsr 1,1
  5724  03F8  1803               	skipnc
  5725  03F9  0A81               	incf	1,f
  5726                           
  5727                           ;Switch_B1.c: 149: if (Sw->Hold1Time >= 150) {
  5728  03FA  086F               	movf	_Sw,w
  5729  03FB  3E03               	addlw	3
  5730  03FC  0086               	movwf	6
  5731  03FD  3001               	movlw	1	; select bank2/3
  5732  03FE  0087               	movwf	7
  5733  03FF  3F40               	moviw [0]fsr1
  5734  0400  00E5               	movwf	??_setSw_Main
  5735  0401  3F41               	moviw [1]fsr1
  5736  0402  00E6               	movwf	??_setSw_Main+1
  5737  0403  3000               	movlw	0
  5738  0404  0266               	subwf	??_setSw_Main+1,w
  5739  0405  3096               	movlw	150
  5740  0406  1903               	skipnz
  5741  0407  0265               	subwf	??_setSw_Main,w
  5742  0408  1C03               	skipc
  5743  0409  0008               	return
  5744                           
  5745                           ;Switch_B1.c: 150: Sw->Hold1Time = 0;
  5746  040A  086F               	movf	_Sw,w
  5747  040B  3E03               	addlw	3
  5748  040C  0086               	movwf	6
  5749  040D  3001               	movlw	1	; select bank2/3
  5750  040E  0087               	movwf	7
  5751  040F  3000               	movlw	0
  5752  0410  3FC0               	movwi [0]fsr1
  5753  0411  3FC1               	movwi [1]fsr1
  5754                           
  5755                           ;Switch_B1.c: 153: Sw_DimmerAdjFunc(sw);
  5756  0412  0869               	movf	setSw_Main@sw,w
  5757  0413  3193  23FF         	fcall	_Sw_DimmerAdjFunc
  5758                           
  5759                           ;Switch_B1.c: 156: }
  5760                           ;Switch_B1.c: 157: } else {
  5761  0415  0008               	return
  5762  0416                     l7597:	
  5763                           
  5764                           ;Switch_B1.c: 158: if (Sw->Hold2 == 0) {
  5765  0416  0020               	movlb	0	; select bank0
  5766  0417  086F               	movf	_Sw,w
  5767  0418  0086               	movwf	6
  5768  0419  3001               	movlw	1	; select bank2/3
  5769  041A  0087               	movwf	7
  5770  041B  1A01               	btfsc	1,4
  5771  041C  2C57               	goto	l7611
  5772                           
  5773                           ;Switch_B1.c: 159: Sw->Hold2Time++;
  5774  041D  086F               	movf	_Sw,w
  5775  041E  3E05               	addlw	5
  5776  041F  0086               	movwf	6
  5777  0420  3001               	movlw	1	; select bank2/3
  5778  0421  0087               	movwf	7
  5779  0422  3001               	movlw	1
  5780  0423  0781               	addwf	1,f
  5781  0424  3141               	addfsr 1,1
  5782  0425  1803               	skipnc
  5783  0426  0A81               	incf	1,f
  5784                           
  5785                           ;Switch_B1.c: 160: if (Sw->Hold2Time >= 150) {
  5786  0427  086F               	movf	_Sw,w
  5787  0428  3E05               	addlw	5
  5788  0429  0086               	movwf	6
  5789  042A  3001               	movlw	1	; select bank2/3
  5790  042B  0087               	movwf	7
  5791  042C  3F40               	moviw [0]fsr1
  5792  042D  00E5               	movwf	??_setSw_Main
  5793  042E  3F41               	moviw [1]fsr1
  5794  042F  00E6               	movwf	??_setSw_Main+1
  5795  0430  3000               	movlw	0
  5796  0431  0266               	subwf	??_setSw_Main+1,w
  5797  0432  3096               	movlw	150
  5798  0433  1903               	skipnz
  5799  0434  0265               	subwf	??_setSw_Main,w
  5800  0435  1C03               	skipc
  5801  0436  0008               	return
  5802                           
  5803                           ;Switch_B1.c: 161: Sw->Hold2Time = 0;
  5804  0437  086F               	movf	_Sw,w
  5805  0438  3E05               	addlw	5
  5806  0439  0086               	movwf	6
  5807  043A  3001               	movlw	1	; select bank2/3
  5808  043B  0087               	movwf	7
  5809  043C  3000               	movlw	0
  5810  043D  3FC0               	movwi [0]fsr1
  5811  043E  3FC1               	movwi [1]fsr1
  5812                           
  5813                           ;Switch_B1.c: 162: Sw->Hold2 = 1;
  5814  043F  086F               	movf	_Sw,w
  5815  0440  0086               	movwf	6
  5816  0441  3001               	movlw	1	; select bank2/3
  5817  0442  0087               	movwf	7
  5818  0443  1601               	bsf	1,4
  5819                           
  5820                           ;Switch_B1.c: 165: setRF_Learn(1);
  5821  0444  3001               	movlw	1
  5822  0445  3199  21E6  3183   	fcall	_setRF_Learn
  5823                           
  5824                           ;Switch_B1.c: 167: if (myMain->First == 1) {
  5825  0448  087B               	movf	_myMain,w
  5826  0449  0086               	movwf	6
  5827  044A  3002               	movlw	2	; select bank4/5
  5828  044B  0087               	movwf	7
  5829  044C  1F81               	btfss	1,7
  5830  044D  0008               	return
  5831                           
  5832                           ;Switch_B1.c: 168: setBuz(2, 100);
  5833  044E  3064               	movlw	100
  5834  044F  0020               	movlb	0	; select bank0
  5835  0450  00A9               	movwf	setBuz@time
  5836  0451  3000               	movlw	0
  5837  0452  00AA               	movwf	setBuz@time+1
  5838  0453  3002               	movlw	2
  5839  0454  3194  24F6         	fcall	_setBuz
  5840                           
  5841                           ;Switch_B1.c: 169: }
  5842                           ;Switch_B1.c: 171: }
  5843                           ;Switch_B1.c: 172: } else {
  5844  0456  0008               	return
  5845  0457                     l7611:	
  5846                           
  5847                           ;Switch_B1.c: 173: if (Sw->Hold3 == 0) {
  5848  0457  0020               	movlb	0	; select bank0
  5849  0458  086F               	movf	_Sw,w
  5850  0459  0086               	movwf	6
  5851  045A  3001               	movlw	1	; select bank2/3
  5852  045B  0087               	movwf	7
  5853  045C  1A81               	btfsc	1,5
  5854  045D  0008               	return
  5855                           
  5856                           ;Switch_B1.c: 174: Sw->Hold3Time++;
  5857  045E  086F               	movf	_Sw,w
  5858  045F  3E07               	addlw	7
  5859  0460  0086               	movwf	6
  5860  0461  3001               	movlw	1	; select bank2/3
  5861  0462  0087               	movwf	7
  5862  0463  3001               	movlw	1
  5863  0464  0781               	addwf	1,f
  5864  0465  3141               	addfsr 1,1
  5865  0466  1803               	skipnc
  5866  0467  0A81               	incf	1,f
  5867                           
  5868                           ;Switch_B1.c: 175: if (Sw->Hold3Time >= 300) {
  5869  0468  086F               	movf	_Sw,w
  5870  0469  3E07               	addlw	7
  5871  046A  0086               	movwf	6
  5872  046B  3001               	movlw	1	; select bank2/3
  5873  046C  0087               	movwf	7
  5874  046D  3F40               	moviw [0]fsr1
  5875  046E  00E5               	movwf	??_setSw_Main
  5876  046F  3F41               	moviw [1]fsr1
  5877  0470  00E6               	movwf	??_setSw_Main+1
  5878  0471  3001               	movlw	1
  5879  0472  0266               	subwf	??_setSw_Main+1,w
  5880  0473  302C               	movlw	44
  5881  0474  1903               	skipnz
  5882  0475  0265               	subwf	??_setSw_Main,w
  5883  0476  1C03               	skipc
  5884  0477  0008               	return
  5885                           
  5886                           ;Switch_B1.c: 176: Sw->Hold3Time = 0;
  5887  0478  086F               	movf	_Sw,w
  5888  0479  3E07               	addlw	7
  5889  047A  0086               	movwf	6
  5890  047B  3001               	movlw	1	; select bank2/3
  5891  047C  0087               	movwf	7
  5892  047D  3000               	movlw	0
  5893  047E  3FC0               	movwi [0]fsr1
  5894  047F  3FC1               	movwi [1]fsr1
  5895                           
  5896                           ;Switch_B1.c: 177: Sw->Hold3 = 1;
  5897  0480  086F               	movf	_Sw,w
  5898  0481  0086               	movwf	6
  5899  0482  3001               	movlw	1	; select bank2/3
  5900  0483  0087               	movwf	7
  5901  0484  1681               	bsf	1,5
  5902                           
  5903                           ;Switch_B1.c: 180: setRF_Learn(0);
  5904  0485  3000               	movlw	0
  5905  0486  3199  21E6         	fcall	_setRF_Learn
  5906                           
  5907                           ;Switch_B1.c: 183: }
  5908                           ;Switch_B1.c: 184: }
  5909                           ;Switch_B1.c: 185: }
  5910                           ;Switch_B1.c: 186: }
  5911                           ;Switch_B1.c: 187: }
  5912                           ;Switch_B1.c: 188: } else {
  5913  0488  0008               	return
  5914  0489                     l7621:	
  5915                           
  5916                           ;Switch_B1.c: 189: if (Sw->Debounce == 1) {
  5917  0489  0020               	movlb	0	; select bank0
  5918  048A  086F               	movf	_Sw,w
  5919  048B  0086               	movwf	6
  5920  048C  3001               	movlw	1	; select bank2/3
  5921  048D  0087               	movwf	7
  5922  048E  1D01               	btfss	1,2
  5923  048F  0008               	return
  5924                           
  5925                           ;Switch_B1.c: 190: Sw->DebounceTime++;
  5926  0490  3001               	movlw	1
  5927  0491  00E5               	movwf	??_setSw_Main
  5928  0492  086F               	movf	_Sw,w
  5929  0493  3E02               	addlw	2
  5930  0494  0086               	movwf	6
  5931  0495  3001               	movlw	1	; select bank2/3
  5932  0496  0087               	movwf	7
  5933  0497  0865               	movf	??_setSw_Main,w
  5934  0498  0781               	addwf	1,f
  5935                           
  5936                           ;Switch_B1.c: 191: if (Sw->DebounceTime >= 5) {
  5937  0499  086F               	movf	_Sw,w
  5938  049A  3E02               	addlw	2
  5939  049B  0086               	movwf	6
  5940  049C  3001               	movlw	1	; select bank2/3
  5941  049D  0087               	movwf	7
  5942  049E  3005               	movlw	5
  5943  049F  0201               	subwf	1,w
  5944  04A0  1C03               	skipc
  5945  04A1  0008               	return
  5946                           
  5947                           ;Switch_B1.c: 192: Sw->DebounceTime = 0;
  5948  04A2  086F               	movf	_Sw,w
  5949  04A3  3E02               	addlw	2
  5950  04A4  0086               	movwf	6
  5951  04A5  3001               	movlw	1	; select bank2/3
  5952  04A6  0087               	movwf	7
  5953  04A7  0181               	clrf	1
  5954                           
  5955                           ;Switch_B1.c: 193: Sw->Debounce = 0;
  5956  04A8  086F               	movf	_Sw,w
  5957  04A9  0086               	movwf	6
  5958  04AA  3001               	movlw	1	; select bank2/3
  5959  04AB  0087               	movwf	7
  5960  04AC  1101               	bcf	1,2
  5961                           
  5962                           ;Switch_B1.c: 194: Sw->Hold1Time = 0;
  5963  04AD  086F               	movf	_Sw,w
  5964  04AE  3E03               	addlw	3
  5965  04AF  0086               	movwf	6
  5966  04B0  3001               	movlw	1	; select bank2/3
  5967  04B1  0087               	movwf	7
  5968  04B2  3000               	movlw	0
  5969  04B3  3FC0               	movwi [0]fsr1
  5970  04B4  3FC1               	movwi [1]fsr1
  5971                           
  5972                           ;Switch_B1.c: 195: Sw->Hold1 = 0;
  5973  04B5  086F               	movf	_Sw,w
  5974  04B6  0086               	movwf	6
  5975  04B7  3001               	movlw	1	; select bank2/3
  5976  04B8  0087               	movwf	7
  5977  04B9  1181               	bcf	1,3
  5978                           
  5979                           ;Switch_B1.c: 196: Sw->Hold2Time = 0;
  5980  04BA  086F               	movf	_Sw,w
  5981  04BB  3E05               	addlw	5
  5982  04BC  0086               	movwf	6
  5983  04BD  3001               	movlw	1	; select bank2/3
  5984  04BE  0087               	movwf	7
  5985  04BF  3000               	movlw	0
  5986  04C0  3FC0               	movwi [0]fsr1
  5987  04C1  3FC1               	movwi [1]fsr1
  5988                           
  5989                           ;Switch_B1.c: 197: Sw->Hold2 = 0;
  5990  04C2  086F               	movf	_Sw,w
  5991  04C3  0086               	movwf	6
  5992  04C4  3001               	movlw	1	; select bank2/3
  5993  04C5  0087               	movwf	7
  5994  04C6  1201               	bcf	1,4
  5995                           
  5996                           ;Switch_B1.c: 198: Sw->Hold3Time = 0;
  5997  04C7  086F               	movf	_Sw,w
  5998  04C8  3E07               	addlw	7
  5999  04C9  0086               	movwf	6
  6000  04CA  3001               	movlw	1	; select bank2/3
  6001  04CB  0087               	movwf	7
  6002  04CC  3000               	movlw	0
  6003  04CD  3FC0               	movwi [0]fsr1
  6004  04CE  3FC1               	movwi [1]fsr1
  6005                           
  6006                           ;Switch_B1.c: 199: Sw->Hold3 = 0;
  6007  04CF  086F               	movf	_Sw,w
  6008  04D0  0086               	movwf	6
  6009  04D1  3001               	movlw	1	; select bank2/3
  6010  04D2  0087               	movwf	7
  6011  04D3  1281               	bcf	1,5
  6012                           
  6013                           ;Switch_B1.c: 201: Sw_DimmerOffFunc(sw);
  6014  04D4  0869               	movf	setSw_Main@sw,w
  6015  04D5  3188  2093  3183   	fcall	_Sw_DimmerOffFunc
  6016                           
  6017                           ;Switch_B1.c: 204: setRF_Learn(0);
  6018  04D8  3000               	movlw	0
  6019  04D9  3199  21E6         	fcall	_setRF_Learn
  6020  04DB  0008               	return
  6021  04DC                     __end_of_setSw_Main:	
  6022                           
  6023                           	psect	text17
  6024  19E6                     __ptext17:	
  6025 ;; *************** function _setRF_Learn *****************
  6026 ;; Defined at:
  6027 ;;		line 23 in file "../src/RF_Control_B1.c"
  6028 ;; Parameters:    Size  Location     Type
  6029 ;;  command         1    wreg     unsigned char 
  6030 ;; Auto vars:     Size  Location     Type
  6031 ;;  command         1    0[BANK0 ] unsigned char 
  6032 ;; Return value:  Size  Location     Type
  6033 ;;		None               void
  6034 ;; Registers used:
  6035 ;;		wreg
  6036 ;; Tracked objects:
  6037 ;;		On entry : 0/0
  6038 ;;		On exit  : 0/0
  6039 ;;		Unchanged: 0/0
  6040 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6041 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6042 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6043 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6044 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6045 ;;Total ram usage:        1 bytes
  6046 ;; Hardware stack levels used:    1
  6047 ;; Hardware stack levels required when called:    5
  6048 ;; This function calls:
  6049 ;;		Nothing
  6050 ;; This function is called by:
  6051 ;;		_setSw_Main
  6052 ;; This function uses a non-reentrant model
  6053 ;;
  6054                           
  6055                           
  6056                           ;psect for function _setRF_Learn
  6057  19E6                     _setRF_Learn:	
  6058                           
  6059                           ;incstack = 0
  6060                           ; Regs used in _setRF_Learn: [wreg]
  6061                           ;setRF_Learn@command stored from wreg
  6062  19E6  0020               	movlb	0	; select bank0
  6063  19E7  00A0               	movwf	setRF_Learn@command
  6064                           
  6065                           ;RF_Control_B1.c: 24: RF1.Learn = command;
  6066  19E8  0820               	movf	setRF_Learn@command,w
  6067  19E9  0021               	movlb	1	; select bank1
  6068  19EA  1341               	bcf	_RF1^(0+128),6
  6069  19EB  1D03               	skipz
  6070  19EC  1741               	bsf	_RF1^(0+128),6
  6071  19ED  0008               	return
  6072  19EE                     __end_of_setRF_Learn:	
  6073                           
  6074                           	psect	text18
  6075  0902                     __ptext18:	
  6076 ;; *************** function _Sw_DimmerOnFunc *****************
  6077 ;; Defined at:
  6078 ;;		line 213 in file "../src/Switch_B1.c"
  6079 ;; Parameters:    Size  Location     Type
  6080 ;;  sw              1    wreg     unsigned char 
  6081 ;; Auto vars:     Size  Location     Type
  6082 ;;  sw              1   67[BANK0 ] unsigned char 
  6083 ;;  Idle            1   66[BANK0 ] unsigned char 
  6084 ;; Return value:  Size  Location     Type
  6085 ;;		None               void
  6086 ;; Registers used:
  6087 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6088 ;; Tracked objects:
  6089 ;;		On entry : 0/0
  6090 ;;		On exit  : 0/0
  6091 ;;		Unchanged: 0/0
  6092 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6093 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6094 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6095 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6096 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6097 ;;Total ram usage:        2 bytes
  6098 ;; Hardware stack levels used:    1
  6099 ;; Hardware stack levels required when called:    9
  6100 ;; This function calls:
  6101 ;;		_setBuz
  6102 ;;		_setDimmerLights_Switch
  6103 ;;		_setDimmerLights_Trigger
  6104 ;;		_setRFSW_Status
  6105 ;;		_setRF_DimmerLights
  6106 ;;		_setTxData
  6107 ;; This function is called by:
  6108 ;;		_setSw_Main
  6109 ;; This function uses a non-reentrant model
  6110 ;;
  6111                           
  6112                           
  6113                           ;psect for function _Sw_DimmerOnFunc
  6114  0902                     _Sw_DimmerOnFunc:	
  6115                           
  6116                           ;incstack = 0
  6117                           ; Regs used in _Sw_DimmerOnFunc: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6118                           ;Sw_DimmerOnFunc@sw stored from wreg
  6119  0902  0020               	movlb	0	; select bank0
  6120  0903  00E3               	movwf	Sw_DimmerOnFunc@sw
  6121                           
  6122                           ;Switch_B1.c: 214: char Idle = 1;
  6123  0904  01E2               	clrf	Sw_DimmerOnFunc@Idle
  6124  0905  0AE2               	incf	Sw_DimmerOnFunc@Idle,f
  6125                           
  6126                           ;Switch_B1.c: 228: if (sw == 1) {
  6127  0906  0863               	movf	Sw_DimmerOnFunc@sw,w
  6128  0907  3A01               	xorlw	1
  6129  0908  1D03               	skipz
  6130  0909  2914               	goto	l6917
  6131                           
  6132                           ;Switch_B1.c: 229: Idle = (DimmerLights2.AdjGo == 1) ? 0 : 1;
  6133  090A  1003               	clrc
  6134  090B  0023               	movlb	3	; select bank3
  6135  090C  1DB7               	btfss	(_DimmerLights2^(0+384)+8),3
  6136  090D  1403               	setc
  6137  090E  3000               	movlw	0
  6138  090F  1803               	btfsc	3,0
  6139  0910  3001               	movlw	1
  6140  0911  0020               	movlb	0	; select bank0
  6141  0912  00E2               	movwf	Sw_DimmerOnFunc@Idle
  6142                           
  6143                           ;Switch_B1.c: 230: } else if (sw == 2) {
  6144  0913  2921               	goto	l6921
  6145  0914                     l6917:	
  6146  0914  0863               	movf	Sw_DimmerOnFunc@sw,w
  6147  0915  3A02               	xorlw	2
  6148  0916  1D03               	skipz
  6149  0917  2921               	goto	l6921
  6150                           
  6151                           ;Switch_B1.c: 231: Idle = (DimmerLights1.AdjGo == 1) ? 0 : 1;
  6152  0918  1003               	clrc
  6153  0919  0023               	movlb	3	; select bank3
  6154  091A  1DA8               	btfss	(_DimmerLights1^(0+384)+8),3
  6155  091B  1403               	setc
  6156  091C  3000               	movlw	0
  6157  091D  1803               	btfsc	3,0
  6158  091E  3001               	movlw	1
  6159  091F  0020               	movlb	0	; select bank0
  6160  0920  00E2               	movwf	Sw_DimmerOnFunc@Idle
  6161  0921                     l6921:	
  6162                           
  6163                           ;Switch_B1.c: 232: }
  6164                           ;Switch_B1.c: 235: if (Idle == 1) {
  6165  0921  0862               	movf	Sw_DimmerOnFunc@Idle,w
  6166  0922  3A01               	xorlw	1
  6167  0923  1D03               	skipz
  6168  0924  0008               	return
  6169                           
  6170                           ;Switch_B1.c: 236: Sw->Flag = 1;
  6171  0925  086F               	movf	_Sw,w
  6172  0926  0086               	movwf	6
  6173  0927  3001               	movlw	1	; select bank2/3
  6174  0928  0087               	movwf	7
  6175  0929  1781               	bsf	1,7
  6176                           
  6177                           ;Switch_B1.c: 237: setBuz(1, 100);
  6178  092A  3064               	movlw	100
  6179  092B  00A9               	movwf	setBuz@time
  6180  092C  3000               	movlw	0
  6181  092D  00AA               	movwf	setBuz@time+1
  6182  092E  3001               	movlw	1
  6183  092F  3194  24F6  3189   	fcall	_setBuz
  6184                           
  6185                           ;Switch_B1.c: 238: if (Sw->Status == 0) {
  6186  0932  0020               	movlb	0	; select bank0
  6187  0933  086F               	movf	_Sw,w
  6188  0934  0086               	movwf	6
  6189  0935  3001               	movlw	1	; select bank2/3
  6190  0936  0087               	movwf	7
  6191  0937  1B01               	btfsc	1,6
  6192  0938  2962               	goto	l6941
  6193                           
  6194                           ;Switch_B1.c: 239: Sw->Status = 1;
  6195  0939  086F               	movf	_Sw,w
  6196  093A  0086               	movwf	6
  6197  093B  3001               	movlw	1	; select bank2/3
  6198  093C  0087               	movwf	7
  6199  093D  1701               	bsf	1,6
  6200                           
  6201                           ;Switch_B1.c: 240: setRFSW_Status(sw, 1);
  6202  093E  01A2               	clrf	setRFSW_Status@command
  6203  093F  0AA2               	incf	setRFSW_Status@command,f
  6204  0940  0863               	movf	Sw_DimmerOnFunc@sw,w
  6205  0941  319A  22C0  3189   	fcall	_setRFSW_Status
  6206                           
  6207                           ;Switch_B1.c: 242: setDimmerLights_Trigger(sw, 1);
  6208  0944  0020               	movlb	0	; select bank0
  6209  0945  01A2               	clrf	setDimmerLights_Trigger@command
  6210  0946  0AA2               	incf	setDimmerLights_Trigger@command,f
  6211  0947  0863               	movf	Sw_DimmerOnFunc@sw,w
  6212  0948  319B  231D  3189   	fcall	_setDimmerLights_Trigger
  6213                           
  6214                           ;Switch_B1.c: 243: setDimmerLights_Switch(sw, 1);
  6215  094B  0020               	movlb	0	; select bank0
  6216  094C  01A2               	clrf	setDimmerLights_Switch@command
  6217  094D  0AA2               	incf	setDimmerLights_Switch@command,f
  6218  094E  0863               	movf	Sw_DimmerOnFunc@sw,w
  6219  094F  319B  230D  3189   	fcall	_setDimmerLights_Switch
  6220                           
  6221                           ;Switch_B1.c: 245: setRF_DimmerLights(sw, Sw->Status);
  6222  0952  0020               	movlb	0	; select bank0
  6223  0953  086F               	movf	_Sw,w
  6224  0954  0086               	movwf	6
  6225  0955  3001               	movlw	1	; select bank2/3
  6226  0956  0087               	movwf	7
  6227  0957  3000               	movlw	0
  6228  0958  1B01               	btfsc	1,6
  6229  0959  3001               	movlw	1
  6230  095A  00DD               	movwf	setRF_DimmerLights@on
  6231  095B  0863               	movf	Sw_DimmerOnFunc@sw,w
  6232  095C  3188  2027  3189   	fcall	_setRF_DimmerLights
  6233                           
  6234                           ;Switch_B1.c: 246: setTxData();
  6235  095F  3186  26BA         	fcall	_setTxData
  6236                           
  6237                           ;Switch_B1.c: 248: } else {
  6238  0961  0008               	return
  6239  0962                     l6941:	
  6240                           
  6241                           ;Switch_B1.c: 249: Sw->Status = 0;
  6242  0962  0020               	movlb	0	; select bank0
  6243  0963  086F               	movf	_Sw,w
  6244  0964  0086               	movwf	6
  6245  0965  3001               	movlw	1	; select bank2/3
  6246  0966  0087               	movwf	7
  6247  0967  1301               	bcf	1,6
  6248                           
  6249                           ;Switch_B1.c: 250: setRFSW_Status(sw, Sw->Status);
  6250  0968  086F               	movf	_Sw,w
  6251  0969  0086               	movwf	6
  6252  096A  3001               	movlw	1	; select bank2/3
  6253  096B  0087               	movwf	7
  6254  096C  3000               	movlw	0
  6255  096D  1B01               	btfsc	1,6
  6256  096E  3001               	movlw	1
  6257  096F  00A2               	movwf	setRFSW_Status@command
  6258  0970  0863               	movf	Sw_DimmerOnFunc@sw,w
  6259  0971  319A  22C0         	fcall	_setRFSW_Status
  6260  0973  0008               	return
  6261  0974                     __end_of_Sw_DimmerOnFunc:	
  6262                           
  6263                           	psect	text19
  6264  0893                     __ptext19:	
  6265 ;; *************** function _Sw_DimmerOffFunc *****************
  6266 ;; Defined at:
  6267 ;;		line 256 in file "../src/Switch_B1.c"
  6268 ;; Parameters:    Size  Location     Type
  6269 ;;  sw              1    wreg     unsigned char 
  6270 ;; Auto vars:     Size  Location     Type
  6271 ;;  sw              1   68[BANK0 ] unsigned char 
  6272 ;; Return value:  Size  Location     Type
  6273 ;;		None               void
  6274 ;; Registers used:
  6275 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6276 ;; Tracked objects:
  6277 ;;		On entry : 0/0
  6278 ;;		On exit  : 0/0
  6279 ;;		Unchanged: 0/0
  6280 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6281 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6282 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6283 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6284 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6285 ;;Total ram usage:        3 bytes
  6286 ;; Hardware stack levels used:    1
  6287 ;; Hardware stack levels required when called:    9
  6288 ;; This function calls:
  6289 ;;		_setDelayOff_GO
  6290 ;;		_setDimmerLights_AdjGo
  6291 ;;		_setDimmerLights_Switch
  6292 ;;		_setDimmerLights_Trigger
  6293 ;;		_setDimmerLights_TriggerAdj
  6294 ;;		_setRF_DimmerLights
  6295 ;;		_setTxData
  6296 ;; This function is called by:
  6297 ;;		_setSw_Main
  6298 ;; This function uses a non-reentrant model
  6299 ;;
  6300                           
  6301                           
  6302                           ;psect for function _Sw_DimmerOffFunc
  6303  0893                     _Sw_DimmerOffFunc:	
  6304                           
  6305                           ;incstack = 0
  6306                           ; Regs used in _Sw_DimmerOffFunc: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6307                           ;Sw_DimmerOffFunc@sw stored from wreg
  6308  0893  0020               	movlb	0	; select bank0
  6309  0894  00E4               	movwf	Sw_DimmerOffFunc@sw
  6310                           
  6311                           ;Switch_B1.c: 257: if (Sw->Flag == 1) {
  6312  0895  086F               	movf	_Sw,w
  6313  0896  0086               	movwf	6
  6314  0897  3001               	movlw	1	; select bank2/3
  6315  0898  0087               	movwf	7
  6316  0899  1F81               	btfss	1,7
  6317  089A  0008               	return
  6318                           
  6319                           ;Switch_B1.c: 258: Sw->Flag = 0;
  6320  089B  086F               	movf	_Sw,w
  6321  089C  0086               	movwf	6
  6322  089D  3001               	movlw	1	; select bank2/3
  6323  089E  0087               	movwf	7
  6324  089F  1381               	bcf	1,7
  6325                           
  6326                           ;Switch_B1.c: 259: if (Sw->Status == 1) {
  6327  08A0  086F               	movf	_Sw,w
  6328  08A1  0086               	movwf	6
  6329  08A2  3001               	movlw	1	; select bank2/3
  6330  08A3  0087               	movwf	7
  6331  08A4  1F01               	btfss	1,6
  6332  08A5  28DE               	goto	l6985
  6333                           
  6334                           ;Switch_B1.c: 260: if (Sw->Adj == 1) {
  6335  08A6  0A6F               	incf	_Sw,w
  6336  08A7  0086               	movwf	6
  6337  08A8  3001               	movlw	1	; select bank2/3
  6338  08A9  0087               	movwf	7
  6339  08AA  1C01               	btfss	1,0
  6340  08AB  0008               	return
  6341                           
  6342                           ;Switch_B1.c: 261: Sw->Adj = 0;
  6343  08AC  0A6F               	incf	_Sw,w
  6344  08AD  0086               	movwf	6
  6345  08AE  3001               	movlw	1	; select bank2/3
  6346  08AF  0087               	movwf	7
  6347  08B0  1001               	bcf	1,0
  6348                           
  6349                           ;Switch_B1.c: 262: setDimmerLights_TriggerAdj(sw, 1);
  6350  08B1  01A2               	clrf	setDimmerLights_TriggerAdj@command
  6351  08B2  0AA2               	incf	setDimmerLights_TriggerAdj@command,f
  6352  08B3  0864               	movf	Sw_DimmerOffFunc@sw,w
  6353  08B4  319B  234D  3188   	fcall	_setDimmerLights_TriggerAdj
  6354                           
  6355                           ;Switch_B1.c: 263: setDimmerLights_AdjGo(sw, 0);
  6356  08B7  0020               	movlb	0	; select bank0
  6357  08B8  01A2               	clrf	setDimmerLights_AdjGo@command
  6358  08B9  0864               	movf	Sw_DimmerOffFunc@sw,w
  6359  08BA  319B  233D  3188   	fcall	_setDimmerLights_AdjGo
  6360                           
  6361                           ;Switch_B1.c: 265: product->Data[17]=product->Data[26 + sw];
  6362  08BD  0020               	movlb	0	; select bank0
  6363  08BE  0864               	movf	Sw_DimmerOffFunc@sw,w
  6364  08BF  3E1A               	addlw	26
  6365  08C0  076E               	addwf	_product,w
  6366  08C1  00E2               	movwf	??_Sw_DimmerOffFunc
  6367  08C2  0862               	movf	??_Sw_DimmerOffFunc,w
  6368  08C3  0086               	movwf	6
  6369  08C4  3002               	movlw	2	; select bank4/5
  6370  08C5  0087               	movwf	7
  6371  08C6  0801               	movf	1,w
  6372  08C7  00E3               	movwf	??_Sw_DimmerOffFunc+1
  6373  08C8  086E               	movf	_product,w
  6374  08C9  3E11               	addlw	17
  6375  08CA  0086               	movwf	6
  6376  08CB  3002               	movlw	2	; select bank4/5
  6377  08CC  0087               	movwf	7
  6378  08CD  0863               	movf	??_Sw_DimmerOffFunc+1,w
  6379  08CE  0081               	movwf	1
  6380                           
  6381                           ;Switch_B1.c: 266: setRF_DimmerLights(sw, Sw->Status);
  6382  08CF  086F               	movf	_Sw,w
  6383  08D0  0086               	movwf	6
  6384  08D1  3001               	movlw	1	; select bank2/3
  6385  08D2  0087               	movwf	7
  6386  08D3  3000               	movlw	0
  6387  08D4  1B01               	btfsc	1,6
  6388  08D5  3001               	movlw	1
  6389  08D6  00DD               	movwf	setRF_DimmerLights@on
  6390  08D7  0864               	movf	Sw_DimmerOffFunc@sw,w
  6391  08D8  3188  2027  3188   	fcall	_setRF_DimmerLights
  6392                           
  6393                           ;Switch_B1.c: 267: setTxData();
  6394  08DB  3186  26BA         	fcall	_setTxData
  6395                           
  6396                           ;Switch_B1.c: 269: }
  6397                           ;Switch_B1.c: 270: } else {
  6398  08DD  0008               	return
  6399  08DE                     l6985:	
  6400                           
  6401                           ;Switch_B1.c: 271: setDimmerLights_Trigger(sw, 1);
  6402  08DE  0020               	movlb	0	; select bank0
  6403  08DF  01A2               	clrf	setDimmerLights_Trigger@command
  6404  08E0  0AA2               	incf	setDimmerLights_Trigger@command,f
  6405  08E1  0864               	movf	Sw_DimmerOffFunc@sw,w
  6406  08E2  319B  231D  3188   	fcall	_setDimmerLights_Trigger
  6407                           
  6408                           ;Switch_B1.c: 272: setDimmerLights_Switch(sw, 0);
  6409  08E5  0020               	movlb	0	; select bank0
  6410  08E6  01A2               	clrf	setDimmerLights_Switch@command
  6411  08E7  0864               	movf	Sw_DimmerOffFunc@sw,w
  6412  08E8  319B  230D  3188   	fcall	_setDimmerLights_Switch
  6413                           
  6414                           ;Switch_B1.c: 274: setDelayOff_GO(sw, 0, 0);
  6415  08EB  0020               	movlb	0	; select bank0
  6416  08EC  01AA               	clrf	setDelayOff_GO@command
  6417  08ED  01AB               	clrf	setDelayOff_GO@value
  6418  08EE  0864               	movf	Sw_DimmerOffFunc@sw,w
  6419  08EF  3197  279A  3188   	fcall	_setDelayOff_GO
  6420                           
  6421                           ;Switch_B1.c: 275: setRF_DimmerLights(sw, Sw->Status);
  6422  08F2  0020               	movlb	0	; select bank0
  6423  08F3  086F               	movf	_Sw,w
  6424  08F4  0086               	movwf	6
  6425  08F5  3001               	movlw	1	; select bank2/3
  6426  08F6  0087               	movwf	7
  6427  08F7  3000               	movlw	0
  6428  08F8  1B01               	btfsc	1,6
  6429  08F9  3001               	movlw	1
  6430  08FA  00DD               	movwf	setRF_DimmerLights@on
  6431  08FB  0864               	movf	Sw_DimmerOffFunc@sw,w
  6432  08FC  3188  2027  3188   	fcall	_setRF_DimmerLights
  6433                           
  6434                           ;Switch_B1.c: 276: setTxData();
  6435  08FF  3186  26BA         	fcall	_setTxData
  6436  0901  0008               	return
  6437  0902                     __end_of_Sw_DimmerOffFunc:	
  6438                           
  6439                           	psect	text20
  6440  13FF                     __ptext20:	
  6441 ;; *************** function _Sw_DimmerAdjFunc *****************
  6442 ;; Defined at:
  6443 ;;		line 283 in file "../src/Switch_B1.c"
  6444 ;; Parameters:    Size  Location     Type
  6445 ;;  sw              1    wreg     unsigned char 
  6446 ;; Auto vars:     Size  Location     Type
  6447 ;;  sw              1    5[BANK0 ] unsigned char 
  6448 ;;  Idle            1    4[BANK0 ] unsigned char 
  6449 ;; Return value:  Size  Location     Type
  6450 ;;		None               void
  6451 ;; Registers used:
  6452 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6453 ;; Tracked objects:
  6454 ;;		On entry : 0/0
  6455 ;;		On exit  : 0/0
  6456 ;;		Unchanged: 0/0
  6457 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6458 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6459 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6460 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6461 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6462 ;;Total ram usage:        2 bytes
  6463 ;; Hardware stack levels used:    1
  6464 ;; Hardware stack levels required when called:    7
  6465 ;; This function calls:
  6466 ;;		_setDimmerLights_AdjGo
  6467 ;;		_setDimmerLights_TriggerAdj
  6468 ;;		_setRFSW_Status
  6469 ;; This function is called by:
  6470 ;;		_setSw_Main
  6471 ;; This function uses a non-reentrant model
  6472 ;;
  6473                           
  6474                           
  6475                           ;psect for function _Sw_DimmerAdjFunc
  6476  13FF                     _Sw_DimmerAdjFunc:	
  6477                           
  6478                           ;incstack = 0
  6479                           ; Regs used in _Sw_DimmerAdjFunc: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6480                           ;Sw_DimmerAdjFunc@sw stored from wreg
  6481  13FF  0020               	movlb	0	; select bank0
  6482  1400  00A5               	movwf	Sw_DimmerAdjFunc@sw
  6483                           
  6484                           ;Switch_B1.c: 284: char Idle = 1;
  6485  1401  01A4               	clrf	Sw_DimmerAdjFunc@Idle
  6486  1402  0AA4               	incf	Sw_DimmerAdjFunc@Idle,f
  6487                           
  6488                           ;Switch_B1.c: 297: if (sw == 1) {
  6489  1403  0825               	movf	Sw_DimmerAdjFunc@sw,w
  6490  1404  3A01               	xorlw	1
  6491  1405  1D03               	skipz
  6492  1406  2C11               	goto	l6951
  6493                           
  6494                           ;Switch_B1.c: 298: Idle = (DimmerLights2.AdjGo == 1) ? 0 : 1;
  6495  1407  1003               	clrc
  6496  1408  0023               	movlb	3	; select bank3
  6497  1409  1DB7               	btfss	(_DimmerLights2^(0+384)+8),3
  6498  140A  1403               	setc
  6499  140B  3000               	movlw	0
  6500  140C  1803               	btfsc	3,0
  6501  140D  3001               	movlw	1
  6502  140E  0020               	movlb	0	; select bank0
  6503  140F  00A4               	movwf	Sw_DimmerAdjFunc@Idle
  6504                           
  6505                           ;Switch_B1.c: 299: } else if (sw == 2) {
  6506  1410  2C1E               	goto	l6955
  6507  1411                     l6951:	
  6508  1411  0825               	movf	Sw_DimmerAdjFunc@sw,w
  6509  1412  3A02               	xorlw	2
  6510  1413  1D03               	skipz
  6511  1414  2C1E               	goto	l6955
  6512                           
  6513                           ;Switch_B1.c: 300: Idle = (DimmerLights1.AdjGo == 1) ? 0 : 1;
  6514  1415  1003               	clrc
  6515  1416  0023               	movlb	3	; select bank3
  6516  1417  1DA8               	btfss	(_DimmerLights1^(0+384)+8),3
  6517  1418  1403               	setc
  6518  1419  3000               	movlw	0
  6519  141A  1803               	btfsc	3,0
  6520  141B  3001               	movlw	1
  6521  141C  0020               	movlb	0	; select bank0
  6522  141D  00A4               	movwf	Sw_DimmerAdjFunc@Idle
  6523  141E                     l6955:	
  6524                           
  6525                           ;Switch_B1.c: 301: }
  6526                           ;Switch_B1.c: 304: if (Idle == 1) {
  6527  141E  0824               	movf	Sw_DimmerAdjFunc@Idle,w
  6528  141F  3A01               	xorlw	1
  6529  1420  1D03               	skipz
  6530  1421  0008               	return
  6531                           
  6532                           ;Switch_B1.c: 305: if (Sw->Flag == 1) {
  6533  1422  086F               	movf	_Sw,w
  6534  1423  0086               	movwf	6
  6535  1424  3001               	movlw	1	; select bank2/3
  6536  1425  0087               	movwf	7
  6537  1426  1F81               	btfss	1,7
  6538  1427  0008               	return
  6539                           
  6540                           ;Switch_B1.c: 306: Sw->Hold1 = 1;
  6541  1428  086F               	movf	_Sw,w
  6542  1429  0086               	movwf	6
  6543  142A  3001               	movlw	1	; select bank2/3
  6544  142B  0087               	movwf	7
  6545  142C  1581               	bsf	1,3
  6546                           
  6547                           ;Switch_B1.c: 307: Sw->Adj = 1;
  6548  142D  0A6F               	incf	_Sw,w
  6549  142E  0086               	movwf	6
  6550  142F  3001               	movlw	1	; select bank2/3
  6551  1430  0087               	movwf	7
  6552  1431  1401               	bsf	1,0
  6553                           
  6554                           ;Switch_B1.c: 308: Sw->Status = 1;
  6555  1432  086F               	movf	_Sw,w
  6556  1433  0086               	movwf	6
  6557  1434  3001               	movlw	1	; select bank2/3
  6558  1435  0087               	movwf	7
  6559  1436  1701               	bsf	1,6
  6560                           
  6561                           ;Switch_B1.c: 309: setRFSW_Status(sw, 1);
  6562  1437  01A2               	clrf	setRFSW_Status@command
  6563  1438  0AA2               	incf	setRFSW_Status@command,f
  6564  1439  0825               	movf	Sw_DimmerAdjFunc@sw,w
  6565  143A  319A  22C0  3193   	fcall	_setRFSW_Status
  6566                           
  6567                           ;Switch_B1.c: 311: setDimmerLights_TriggerAdj(sw, 1);
  6568  143D  0020               	movlb	0	; select bank0
  6569  143E  01A2               	clrf	setDimmerLights_TriggerAdj@command
  6570  143F  0AA2               	incf	setDimmerLights_TriggerAdj@command,f
  6571  1440  0825               	movf	Sw_DimmerAdjFunc@sw,w
  6572  1441  319B  234D  3193   	fcall	_setDimmerLights_TriggerAdj
  6573                           
  6574                           ;Switch_B1.c: 312: setDimmerLights_AdjGo(sw, 1);
  6575  1444  0020               	movlb	0	; select bank0
  6576  1445  01A2               	clrf	setDimmerLights_AdjGo@command
  6577  1446  0AA2               	incf	setDimmerLights_AdjGo@command,f
  6578  1447  0825               	movf	Sw_DimmerAdjFunc@sw,w
  6579  1448  319B  233D         	fcall	_setDimmerLights_AdjGo
  6580  144A  0008               	return
  6581  144B                     __end_of_Sw_DimmerAdjFunc:	
  6582                           
  6583                           	psect	text21
  6584  1B4D                     __ptext21:	
  6585 ;; *************** function _setDimmerLights_TriggerAdj *****************
  6586 ;; Defined at:
  6587 ;;		line 711 in file "../src/Dimmer_B1.c"
  6588 ;; Parameters:    Size  Location     Type
  6589 ;;  lights          1    wreg     unsigned char 
  6590 ;;  command         1    2[BANK0 ] unsigned char 
  6591 ;; Auto vars:     Size  Location     Type
  6592 ;;  lights          1    3[BANK0 ] unsigned char 
  6593 ;; Return value:  Size  Location     Type
  6594 ;;		None               void
  6595 ;; Registers used:
  6596 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6597 ;; Tracked objects:
  6598 ;;		On entry : 0/0
  6599 ;;		On exit  : 0/0
  6600 ;;		Unchanged: 0/0
  6601 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6602 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6603 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6604 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6605 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6606 ;;Total ram usage:        2 bytes
  6607 ;; Hardware stack levels used:    1
  6608 ;; Hardware stack levels required when called:    6
  6609 ;; This function calls:
  6610 ;;		_DimmerLightsPointSelect
  6611 ;; This function is called by:
  6612 ;;		_Sw_DimmerOffFunc
  6613 ;;		_Sw_DimmerAdjFunc
  6614 ;; This function uses a non-reentrant model
  6615 ;;
  6616                           
  6617                           
  6618                           ;psect for function _setDimmerLights_TriggerAdj
  6619  1B4D                     _setDimmerLights_TriggerAdj:	
  6620                           
  6621                           ;incstack = 0
  6622                           ; Regs used in _setDimmerLights_TriggerAdj: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  6623                           ;setDimmerLights_TriggerAdj@lights stored from wreg
  6624  1B4D  0020               	movlb	0	; select bank0
  6625  1B4E  00A3               	movwf	setDimmerLights_TriggerAdj@lights
  6626                           
  6627                           ;Dimmer_B1.c: 713: DimmerLightsPointSelect(lights);
  6628  1B4F  0823               	movf	setDimmerLights_TriggerAdj@lights,w
  6629  1B50  319B  23C6         	fcall	_DimmerLightsPointSelect
  6630                           
  6631                           ;Dimmer_B1.c: 714: DimmerLights->TriggerAdj = command;
  6632  1B52  0879               	movf	_DimmerLights,w
  6633  1B53  3E08               	addlw	8
  6634  1B54  0086               	movwf	6
  6635  1B55  3001               	movlw	1	; select bank2/3
  6636  1B56  0087               	movwf	7
  6637  1B57  0020               	movlb	0	; select bank0
  6638  1B58  0822               	movf	setDimmerLights_TriggerAdj@command,w
  6639  1B59  1201               	bcf	1,4
  6640  1B5A  1D03               	skipz
  6641  1B5B  1601               	bsf	1,4
  6642  1B5C  0008               	return
  6643  1B5D                     __end_of_setDimmerLights_TriggerAdj:	
  6644                           
  6645                           	psect	text22
  6646  1B3D                     __ptext22:	
  6647 ;; *************** function _setDimmerLights_AdjGo *****************
  6648 ;; Defined at:
  6649 ;;		line 699 in file "../src/Dimmer_B1.c"
  6650 ;; Parameters:    Size  Location     Type
  6651 ;;  lights          1    wreg     unsigned char 
  6652 ;;  command         1    2[BANK0 ] unsigned char 
  6653 ;; Auto vars:     Size  Location     Type
  6654 ;;  lights          1    3[BANK0 ] unsigned char 
  6655 ;; Return value:  Size  Location     Type
  6656 ;;		None               void
  6657 ;; Registers used:
  6658 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6659 ;; Tracked objects:
  6660 ;;		On entry : 0/0
  6661 ;;		On exit  : 0/0
  6662 ;;		Unchanged: 0/0
  6663 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6664 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6665 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6666 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6667 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6668 ;;Total ram usage:        2 bytes
  6669 ;; Hardware stack levels used:    1
  6670 ;; Hardware stack levels required when called:    6
  6671 ;; This function calls:
  6672 ;;		_DimmerLightsPointSelect
  6673 ;; This function is called by:
  6674 ;;		_Sw_DimmerOffFunc
  6675 ;;		_Sw_DimmerAdjFunc
  6676 ;; This function uses a non-reentrant model
  6677 ;;
  6678                           
  6679                           
  6680                           ;psect for function _setDimmerLights_AdjGo
  6681  1B3D                     _setDimmerLights_AdjGo:	
  6682                           
  6683                           ;incstack = 0
  6684                           ; Regs used in _setDimmerLights_AdjGo: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  6685                           ;setDimmerLights_AdjGo@lights stored from wreg
  6686  1B3D  0020               	movlb	0	; select bank0
  6687  1B3E  00A3               	movwf	setDimmerLights_AdjGo@lights
  6688                           
  6689                           ;Dimmer_B1.c: 701: DimmerLightsPointSelect(lights);
  6690  1B3F  0823               	movf	setDimmerLights_AdjGo@lights,w
  6691  1B40  319B  23C6         	fcall	_DimmerLightsPointSelect
  6692                           
  6693                           ;Dimmer_B1.c: 702: DimmerLights->AdjGo = command;
  6694  1B42  0879               	movf	_DimmerLights,w
  6695  1B43  3E08               	addlw	8
  6696  1B44  0086               	movwf	6
  6697  1B45  3001               	movlw	1	; select bank2/3
  6698  1B46  0087               	movwf	7
  6699  1B47  0020               	movlb	0	; select bank0
  6700  1B48  0822               	movf	setDimmerLights_AdjGo@command,w
  6701  1B49  1181               	bcf	1,3
  6702  1B4A  1D03               	skipz
  6703  1B4B  1581               	bsf	1,3
  6704  1B4C  0008               	return
  6705  1B4D                     __end_of_setDimmerLights_AdjGo:	
  6706                           
  6707                           	psect	text23
  6708  1A97                     __ptext23:	
  6709 ;; *************** function _Switch_Initialization *****************
  6710 ;; Defined at:
  6711 ;;		line 37 in file "../src/Switch_B1.c"
  6712 ;; Parameters:    Size  Location     Type
  6713 ;;		None
  6714 ;; Auto vars:     Size  Location     Type
  6715 ;;		None
  6716 ;; Return value:  Size  Location     Type
  6717 ;;		None               void
  6718 ;; Registers used:
  6719 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6720 ;; Tracked objects:
  6721 ;;		On entry : 0/0
  6722 ;;		On exit  : 0/0
  6723 ;;		Unchanged: 0/0
  6724 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6725 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6726 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6727 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6728 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6729 ;;Total ram usage:        0 bytes
  6730 ;; Hardware stack levels used:    1
  6731 ;; Hardware stack levels required when called:    8
  6732 ;; This function calls:
  6733 ;;		_TouchPower
  6734 ;;		_setSw_Initialization
  6735 ;; This function is called by:
  6736 ;;		_main
  6737 ;; This function uses a non-reentrant model
  6738 ;;
  6739                           
  6740                           
  6741                           ;psect for function _Switch_Initialization
  6742  1A97                     _Switch_Initialization:	
  6743                           
  6744                           ;Switch_B1.c: 38: TouchPower();
  6745                           
  6746                           ;incstack = 0
  6747                           ; Regs used in _Switch_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  6748  1A97  3199  2199  319A   	fcall	_TouchPower
  6749                           
  6750                           ;Switch_B1.c: 40: WPUB1 = 0;
  6751  1A9A  0024               	movlb	4	; select bank4
  6752  1A9B  108D               	bcf	13,1	;volatile
  6753                           
  6754                           ;Switch_B1.c: 49: setSw_Initialization(1);
  6755  1A9C  3001               	movlw	1
  6756  1A9D  3199  21DE  319A   	fcall	_setSw_Initialization
  6757                           
  6758                           ;Switch_B1.c: 52: setSw_Initialization(2);
  6759  1AA0  3002               	movlw	2
  6760  1AA1  3199  21DE         	fcall	_setSw_Initialization
  6761  1AA3  0008               	return
  6762  1AA4                     __end_of_Switch_Initialization:	
  6763                           
  6764                           	psect	text24
  6765  19DE                     __ptext24:	
  6766 ;; *************** function _setSw_Initialization *****************
  6767 ;; Defined at:
  6768 ;;		line 77 in file "../src/Switch_B1.c"
  6769 ;; Parameters:    Size  Location     Type
  6770 ;;  sw              1    wreg     unsigned char 
  6771 ;; Auto vars:     Size  Location     Type
  6772 ;;  sw              1    3[BANK0 ] unsigned char 
  6773 ;; Return value:  Size  Location     Type
  6774 ;;		None               void
  6775 ;; Registers used:
  6776 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6777 ;; Tracked objects:
  6778 ;;		On entry : 0/0
  6779 ;;		On exit  : 0/0
  6780 ;;		Unchanged: 0/0
  6781 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6782 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6783 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6784 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6785 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6786 ;;Total ram usage:        1 bytes
  6787 ;; Hardware stack levels used:    1
  6788 ;; Hardware stack levels required when called:    7
  6789 ;; This function calls:
  6790 ;;		_setLED
  6791 ;; This function is called by:
  6792 ;;		_Switch_Initialization
  6793 ;; This function uses a non-reentrant model
  6794 ;;
  6795                           
  6796                           
  6797                           ;psect for function _setSw_Initialization
  6798  19DE                     _setSw_Initialization:	
  6799                           
  6800                           ;incstack = 0
  6801                           ; Regs used in _setSw_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6802                           ;setSw_Initialization@sw stored from wreg
  6803  19DE  0020               	movlb	0	; select bank0
  6804  19DF  00A3               	movwf	setSw_Initialization@sw
  6805                           
  6806                           ;Switch_B1.c: 78: setLED(sw, 1);
  6807  19E0  01A1               	clrf	setLED@command
  6808  19E1  0AA1               	incf	setLED@command,f
  6809  19E2  0823               	movf	setSw_Initialization@sw,w
  6810  19E3  3196  260B         	fcall	_setLED
  6811  19E5  0008               	return
  6812  19E6                     __end_of_setSw_Initialization:	
  6813                           
  6814                           	psect	text25
  6815  1999                     __ptext25:	
  6816 ;; *************** function _TouchPower *****************
  6817 ;; Defined at:
  6818 ;;		line 10 in file "../src/Switch_B1.c"
  6819 ;; Parameters:    Size  Location     Type
  6820 ;;		None
  6821 ;; Auto vars:     Size  Location     Type
  6822 ;;		None
  6823 ;; Return value:  Size  Location     Type
  6824 ;;		None               void
  6825 ;; Registers used:
  6826 ;;		None
  6827 ;; Tracked objects:
  6828 ;;		On entry : 0/0
  6829 ;;		On exit  : 0/0
  6830 ;;		Unchanged: 0/0
  6831 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6832 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6833 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6834 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6835 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6836 ;;Total ram usage:        0 bytes
  6837 ;; Hardware stack levels used:    1
  6838 ;; Hardware stack levels required when called:    5
  6839 ;; This function calls:
  6840 ;;		Nothing
  6841 ;; This function is called by:
  6842 ;;		_Switch_Initialization
  6843 ;; This function uses a non-reentrant model
  6844 ;;
  6845                           
  6846                           
  6847                           ;psect for function _TouchPower
  6848  1999                     _TouchPower:	
  6849  1999                     l2707:	
  6850                           ;Switch_B1.c: 11: while (RC5 == 0)
  6851                           
  6852                           ;incstack = 0
  6853                           ; Regs used in _TouchPower: []
  6854                           
  6855  1999  0020               	movlb	0	; select bank0
  6856  199A  1A8E               	btfsc	14,5	;volatile
  6857  199B  0008               	return
  6858                           
  6859                           ;Switch_B1.c: 12: RC5 = 1;
  6860  199C  168E               	bsf	14,5	;volatile
  6861  199D  2999               	goto	l2707
  6862  199E                     __end_of_TouchPower:	
  6863                           
  6864                           	psect	text26
  6865  1974                     __ptext26:	
  6866 ;; *************** function _RF_Main *****************
  6867 ;; Defined at:
  6868 ;;		line 16 in file "../src/RF_Control_B1.c"
  6869 ;; Parameters:    Size  Location     Type
  6870 ;;		None
  6871 ;; Auto vars:     Size  Location     Type
  6872 ;;		None
  6873 ;; Return value:  Size  Location     Type
  6874 ;;		None               void
  6875 ;; Registers used:
  6876 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6877 ;; Tracked objects:
  6878 ;;		On entry : 0/0
  6879 ;;		On exit  : 0/0
  6880 ;;		Unchanged: 0/0
  6881 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6882 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6883 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6884 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6885 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6886 ;;Total ram usage:        0 bytes
  6887 ;; Hardware stack levels used:    1
  6888 ;; Hardware stack levels required when called:   14
  6889 ;; This function calls:
  6890 ;;		_setRF_Main
  6891 ;; This function is called by:
  6892 ;;		_main
  6893 ;; This function uses a non-reentrant model
  6894 ;;
  6895                           
  6896                           
  6897                           ;psect for function _RF_Main
  6898  1974                     _RF_Main:	
  6899                           
  6900                           ;RF_Control_B1.c: 18: setRF_Main();
  6901                           
  6902                           ;incstack = 0
  6903                           ; Regs used in _RF_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6904  1974  3189  21E7         	fcall	_setRF_Main
  6905  1976  0008               	return
  6906  1977                     __end_of_RF_Main:	
  6907                           
  6908                           	psect	text27
  6909  09E7                     __ptext27:	
  6910 ;; *************** function _setRF_Main *****************
  6911 ;; Defined at:
  6912 ;;		line 51 in file "../src/RF_Control_B1.c"
  6913 ;; Parameters:    Size  Location     Type
  6914 ;;		None
  6915 ;; Auto vars:     Size  Location     Type
  6916 ;;		None
  6917 ;; Return value:  Size  Location     Type
  6918 ;;		None               void
  6919 ;; Registers used:
  6920 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6921 ;; Tracked objects:
  6922 ;;		On entry : 0/0
  6923 ;;		On exit  : 0/0
  6924 ;;		Unchanged: 0/0
  6925 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6926 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6927 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6928 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6929 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6930 ;;Total ram usage:        2 bytes
  6931 ;; Hardware stack levels used:    1
  6932 ;; Hardware stack levels required when called:   13
  6933 ;; This function calls:
  6934 ;;		_CC2500_RxData
  6935 ;;		_CC2500_TxData
  6936 ;;		_CC2500_WriteCommand
  6937 ;;		_RF_RxDisable
  6938 ;;		_getBuz_GO
  6939 ;;		_getRxData
  6940 ;; This function is called by:
  6941 ;;		_RF_Main
  6942 ;; This function uses a non-reentrant model
  6943 ;;
  6944                           
  6945                           
  6946                           ;psect for function _setRF_Main
  6947  09E7                     _setRF_Main:	
  6948                           
  6949                           ;RF_Control_B1.c: 52: if (RF1.Enable == 1) {
  6950                           
  6951                           ;incstack = 0
  6952                           ; Regs used in _setRF_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6953  09E7  0021               	movlb	1	; select bank1
  6954  09E8  1C41               	btfss	_RF1^(0+128),0
  6955  09E9  0008               	return
  6956                           
  6957                           ;RF_Control_B1.c: 55: if (getBuz_GO() == 0) {
  6958  09EA  319B  236E  3189   	fcall	_getBuz_GO
  6959  09ED  0020               	movlb	0	; select bank0
  6960  09EE  0821               	movf	?_getBuz_GO+1,w
  6961  09EF  0420               	iorwf	?_getBuz_GO,w
  6962  09F0  1D03               	skipz
  6963  09F1  0008               	return
  6964                           
  6965                           ;RF_Control_B1.c: 61: RF1.Key = (RA6 == 1 || RA4 == 1 || RA0 == 1 || RB1 == 1) ? 1 : 0;
  6966  09F2  01E8               	clrf	_setRF_Main$5052
  6967  09F3  0AE8               	incf	_setRF_Main$5052,f
  6968  09F4  1F0C               	btfss	12,6	;volatile
  6969  09F5  1A0C               	btfsc	12,4	;volatile
  6970  09F6  29FB               	goto	l7489
  6971  09F7  1C0C               	btfss	12,0	;volatile
  6972  09F8  188D               	btfsc	13,1	;volatile
  6973  09F9  29FB               	goto	l7489
  6974  09FA  01E8               	clrf	_setRF_Main$5052
  6975  09FB                     l7489:	
  6976  09FB  0868               	movf	_setRF_Main$5052,w
  6977  09FC  0021               	movlb	1	; select bank1
  6978  09FD  13C1               	bcf	_RF1^(0+128),7
  6979  09FE  1D03               	skipz
  6980  09FF  17C1               	bsf	_RF1^(0+128),7
  6981                           
  6982                           ;RF_Control_B1.c: 67: if (RF1.Key == 1 && RF1.Learn == 0) {
  6983  0A00  1BC1               	btfsc	_RF1^(0+128),7
  6984  0A01  1B41               	btfsc	_RF1^(0+128),6
  6985  0A02  2A07               	goto	l2286
  6986                           
  6987                           ;RF_Control_B1.c: 68: RF1.Run = 1;
  6988  0A03  14C2               	bsf	(_RF1^(0+128)+1),1
  6989                           
  6990                           ;RF_Control_B1.c: 69: RF_RxDisable();
  6991  0A04  319A  22DE         	fcall	_RF_RxDisable
  6992                           
  6993                           ;RF_Control_B1.c: 70: } else {
  6994  0A06  0008               	return
  6995  0A07                     l2286:	
  6996                           
  6997                           ;RF_Control_B1.c: 71: if (RF1.Run == 1 && RF1.Learn == 0) {
  6998  0A07  18C2               	btfsc	(_RF1^(0+128)+1),1
  6999  0A08  1B41               	btfsc	_RF1^(0+128),6
  7000  0A09  2A17               	goto	l7509
  7001                           
  7002                           ;RF_Control_B1.c: 72: RF1.Count++;
  7003  0A0A  3001               	movlw	1
  7004  0A0B  0020               	movlb	0	; select bank0
  7005  0A0C  00E7               	movwf	??_setRF_Main
  7006  0A0D  0867               	movf	??_setRF_Main,w
  7007  0A0E  0021               	movlb	1	; select bank1
  7008  0A0F  07C4               	addwf	(_RF1^(0+128)+3),f
  7009                           
  7010                           ;RF_Control_B1.c: 73: if (RF1.Count == 5) {
  7011  0A10  0844               	movf	(_RF1^(0+128)+3),w
  7012  0A11  3A05               	xorlw	5
  7013  0A12  1D03               	skipz
  7014  0A13  0008               	return
  7015                           
  7016                           ;RF_Control_B1.c: 74: RF1.Count = 0;
  7017  0A14  01C4               	clrf	(_RF1^(0+128)+3)
  7018                           
  7019                           ;RF_Control_B1.c: 75: RF1.Run = 0;
  7020  0A15  10C2               	bcf	(_RF1^(0+128)+1),1
  7021                           
  7022                           ;RF_Control_B1.c: 76: }
  7023                           ;RF_Control_B1.c: 77: } else {
  7024  0A16  0008               	return
  7025  0A17                     l7509:	
  7026                           
  7027                           ;RF_Control_B1.c: 78: RF1.Count = 0;
  7028  0A17  01C4               	clrf	(_RF1^(0+128)+3)
  7029                           
  7030                           ;RF_Control_B1.c: 79: RF1.Run = 0;
  7031  0A18  10C2               	bcf	(_RF1^(0+128)+1),1
  7032                           
  7033                           ;RF_Control_B1.c: 81: if (RF1.ReceiveGO == 1) {
  7034  0A19  1CC1               	btfss	_RF1^(0+128),1
  7035  0A1A  2A27               	goto	l2291
  7036                           
  7037                           ;RF_Control_B1.c: 82: RF1.ReceiveGO = 0;
  7038  0A1B  10C1               	bcf	_RF1^(0+128),1
  7039                           
  7040                           ;RF_Control_B1.c: 83: CC2500_RxData();
  7041  0A1C  318F  2749  3189   	fcall	_CC2500_RxData
  7042                           
  7043                           ;RF_Control_B1.c: 90: getRxData();
  7044  0A1F  3193  236E         	fcall	_getRxData
  7045                           
  7046                           ;RF_Control_B1.c: 92: RF1.Run = 1;
  7047  0A21  0021               	movlb	1	; select bank1
  7048  0A22  14C2               	bsf	(_RF1^(0+128)+1),1
  7049                           
  7050                           ;RF_Control_B1.c: 93: RB5 = RB5 == 1 ? 0 : 1;
  7051  0A23  3020               	movlw	32
  7052  0A24  0020               	movlb	0	; select bank0
  7053  0A25  068D               	xorwf	13,f
  7054                           
  7055                           ;RF_Control_B1.c: 94: } else {
  7056  0A26  0008               	return
  7057  0A27                     l2291:	
  7058                           
  7059                           ;RF_Control_B1.c: 95: if (RF1.Learn == 0) {
  7060  0A27  1B41               	btfsc	_RF1^(0+128),6
  7061  0A28  2A4C               	goto	l2293
  7062                           
  7063                           ;RF_Control_B1.c: 96: if (RF1.TransceiveGO == 1) {
  7064  0A29  1D41               	btfss	_RF1^(0+128),2
  7065  0A2A  2A3B               	goto	l2294
  7066                           
  7067                           ;RF_Control_B1.c: 97: RF1.TransceiveGO = 0;
  7068  0A2B  1141               	bcf	_RF1^(0+128),2
  7069                           
  7070                           ;RF_Control_B1.c: 98: RF1.RxStatus = 0;
  7071  0A2C  11C1               	bcf	_RF1^(0+128),3
  7072                           
  7073                           ;RF_Control_B1.c: 99: RF1.ReceiveGO = 0;
  7074  0A2D  10C1               	bcf	_RF1^(0+128),1
  7075                           
  7076                           ;RF_Control_B1.c: 101: CC2500_WriteCommand(0x36);
  7077  0A2E  3036               	movlw	54
  7078  0A2F  319A  22FD  3189   	fcall	_CC2500_WriteCommand
  7079                           
  7080                           ;RF_Control_B1.c: 102: CC2500_WriteCommand(0x3B);
  7081  0A32  303B               	movlw	59
  7082  0A33  319A  22FD  3189   	fcall	_CC2500_WriteCommand
  7083                           
  7084                           ;RF_Control_B1.c: 103: CC2500_TxData();
  7085  0A36  3192  229D         	fcall	_CC2500_TxData
  7086                           
  7087                           ;RF_Control_B1.c: 104: RF1.Run = 1;
  7088  0A38  0021               	movlb	1	; select bank1
  7089  0A39  14C2               	bsf	(_RF1^(0+128)+1),1
  7090                           
  7091                           ;RF_Control_B1.c: 105: } else {
  7092  0A3A  0008               	return
  7093  0A3B                     l2294:	
  7094                           
  7095                           ;RF_Control_B1.c: 107: if (RF1.RxStatus == 0 && RF1.ReceiveGO == 0) {
  7096  0A3B  19C1               	btfsc	_RF1^(0+128),3
  7097  0A3C  0008               	return
  7098  0A3D  18C1               	btfsc	_RF1^(0+128),1
  7099  0A3E  0008               	return
  7100                           
  7101                           ;RF_Control_B1.c: 108: RF1.RxStatus = 1;
  7102  0A3F  15C1               	bsf	_RF1^(0+128),3
  7103                           
  7104                           ;RF_Control_B1.c: 109: CC2500_WriteCommand(0x36);
  7105  0A40  3036               	movlw	54
  7106  0A41  319A  22FD  3189   	fcall	_CC2500_WriteCommand
  7107                           
  7108                           ;RF_Control_B1.c: 110: CC2500_WriteCommand(0x3A);
  7109  0A44  303A               	movlw	58
  7110  0A45  319A  22FD  3189   	fcall	_CC2500_WriteCommand
  7111                           
  7112                           ;RF_Control_B1.c: 111: CC2500_WriteCommand(0x34);
  7113  0A48  3034               	movlw	52
  7114  0A49  319A  22FD         	fcall	_CC2500_WriteCommand
  7115                           
  7116                           ;RF_Control_B1.c: 113: }
  7117                           ;RF_Control_B1.c: 116: }
  7118                           ;RF_Control_B1.c: 117: } else {
  7119  0A4B  0008               	return
  7120  0A4C                     l2293:	
  7121                           
  7122                           ;RF_Control_B1.c: 119: if (RF1.RxStatus == 0 && RF1.ReceiveGO == 0) {
  7123  0A4C  19C1               	btfsc	_RF1^(0+128),3
  7124  0A4D  0008               	return
  7125  0A4E  18C1               	btfsc	_RF1^(0+128),1
  7126  0A4F  0008               	return
  7127                           
  7128                           ;RF_Control_B1.c: 120: RF1.RxStatus = 1;
  7129  0A50  15C1               	bsf	_RF1^(0+128),3
  7130                           
  7131                           ;RF_Control_B1.c: 121: CC2500_WriteCommand(0x36);
  7132  0A51  3036               	movlw	54
  7133  0A52  319A  22FD  3189   	fcall	_CC2500_WriteCommand
  7134                           
  7135                           ;RF_Control_B1.c: 122: CC2500_WriteCommand(0x3A);
  7136  0A55  303A               	movlw	58
  7137  0A56  319A  22FD  3189   	fcall	_CC2500_WriteCommand
  7138                           
  7139                           ;RF_Control_B1.c: 123: CC2500_WriteCommand(0x34);
  7140  0A59  3034               	movlw	52
  7141  0A5A  319A  22FD         	fcall	_CC2500_WriteCommand
  7142  0A5C  0008               	return
  7143  0A5D                     __end_of_setRF_Main:	
  7144                           
  7145                           	psect	text28
  7146  136E                     __ptext28:	
  7147 ;; *************** function _getRxData *****************
  7148 ;; Defined at:
  7149 ;;		line 208 in file "../src/RF_Control_B1.c"
  7150 ;; Parameters:    Size  Location     Type
  7151 ;;		None
  7152 ;; Auto vars:     Size  Location     Type
  7153 ;;		None
  7154 ;; Return value:  Size  Location     Type
  7155 ;;		None               void
  7156 ;; Registers used:
  7157 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7158 ;; Tracked objects:
  7159 ;;		On entry : 0/0
  7160 ;;		On exit  : 0/0
  7161 ;;		Unchanged: 0/0
  7162 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7163 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7164 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7165 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7166 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7167 ;;Total ram usage:        0 bytes
  7168 ;; Hardware stack levels used:    1
  7169 ;; Hardware stack levels required when called:   12
  7170 ;; This function calls:
  7171 ;;		_setControl_Lights_Table
  7172 ;;		_setLog_Code
  7173 ;; This function is called by:
  7174 ;;		_setRF_Main
  7175 ;; This function uses a non-reentrant model
  7176 ;;
  7177                           
  7178                           
  7179                           ;psect for function _getRxData
  7180  136E                     _getRxData:	
  7181                           
  7182                           ;RF_Control_B1.c: 209: if (RF1.Learn == 1) {
  7183                           
  7184                           ;incstack = 0
  7185                           ; Regs used in _getRxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7186  136E  0021               	movlb	1	; select bank1
  7187  136F  1F41               	btfss	_RF1^(0+128),6
  7188  1370  2B7B               	goto	l6881
  7189                           
  7190                           ;RF_Control_B1.c: 210: if (RF_Data[0] == 0x0 && RF_Data[1] == 0x64)
  7191  1371  08A0               	movf	_RF_Data^(0+128),f
  7192  1372  1D03               	skipz
  7193  1373  0008               	return
  7194  1374  0821               	movf	(_RF_Data^(0+128)+1),w
  7195  1375  3A64               	xorlw	100
  7196  1376  1D03               	skipz
  7197  1377  0008               	return
  7198                           
  7199                           ;RF_Control_B1.c: 211: {
  7200                           ;RF_Control_B1.c: 212: setLog_Code();
  7201  1378  3191  215A         	fcall	_setLog_Code
  7202                           
  7203                           ;RF_Control_B1.c: 213: }
  7204                           ;RF_Control_B1.c: 214: } else {
  7205  137A  0008               	return
  7206  137B                     l6881:	
  7207                           
  7208                           ;RF_Control_B1.c: 215: if (RF_Data[0] == 0x00 && RF_Data[1] == 0x02)
  7209  137B  0021               	movlb	1	; select bank1
  7210  137C  08A0               	movf	_RF_Data^(0+128),f
  7211  137D  1D03               	skipz
  7212  137E  0008               	return
  7213  137F  0821               	movf	(_RF_Data^(0+128)+1),w
  7214  1380  3A02               	xorlw	2
  7215  1381  1D03               	skipz
  7216  1382  0008               	return
  7217                           
  7218                           ;RF_Control_B1.c: 216: {
  7219                           ;RF_Control_B1.c: 217: if (RF_Data[12] == 0xff && RF_Data[13] == 0xff && RF_Data[14] == 
      +                          0xff) {
  7220  1383  082C               	movf	(_RF_Data^(0+128)+12),w
  7221  1384  3AFF               	xorlw	255
  7222  1385  1D03               	skipz
  7223  1386  2B91               	goto	l6893
  7224  1387  082D               	movf	(_RF_Data^(0+128)+13),w
  7225  1388  3AFF               	xorlw	255
  7226  1389  1D03               	skipz
  7227  138A  2B91               	goto	l6893
  7228  138B  082E               	movf	(_RF_Data^(0+128)+14),w
  7229  138C  3AFF               	xorlw	255
  7230  138D  1D03               	skipz
  7231  138E  2B91               	goto	l6893
  7232                           
  7233                           ;RF_Control_B1.c: 218: __nop();
  7234  138F  0000               	nop
  7235                           
  7236                           ;RF_Control_B1.c: 219: } else {
  7237  1390  0008               	return
  7238  1391                     l6893:	
  7239                           
  7240                           ;RF_Control_B1.c: 220: if (RF_Data[12] == product->Data[12] && RF_Data[13] == product->D
      +                          ata[13] && RF_Data[14] == product->Data[14]) {
  7241  1391  0020               	movlb	0	; select bank0
  7242  1392  086E               	movf	_product,w
  7243  1393  3E0C               	addlw	12
  7244  1394  0086               	movwf	6
  7245  1395  3002               	movlw	2	; select bank4/5
  7246  1396  0087               	movwf	7
  7247  1397  0021               	movlb	1	; select bank1
  7248  1398  082C               	movf	(_RF_Data^(0+128)+12),w
  7249  1399  0601               	xorwf	1,w
  7250  139A  1D03               	skipz
  7251  139B  0008               	return
  7252  139C  0020               	movlb	0	; select bank0
  7253  139D  086E               	movf	_product,w
  7254  139E  3E0D               	addlw	13
  7255  139F  0086               	movwf	6
  7256  13A0  3002               	movlw	2	; select bank4/5
  7257  13A1  0087               	movwf	7
  7258  13A2  0021               	movlb	1	; select bank1
  7259  13A3  082D               	movf	(_RF_Data^(0+128)+13),w
  7260  13A4  0601               	xorwf	1,w
  7261  13A5  1D03               	skipz
  7262  13A6  0008               	return
  7263  13A7  0020               	movlb	0	; select bank0
  7264  13A8  086E               	movf	_product,w
  7265  13A9  3E0E               	addlw	14
  7266  13AA  0086               	movwf	6
  7267  13AB  3002               	movlw	2	; select bank4/5
  7268  13AC  0087               	movwf	7
  7269  13AD  0021               	movlb	1	; select bank1
  7270  13AE  082E               	movf	(_RF_Data^(0+128)+14),w
  7271  13AF  0601               	xorwf	1,w
  7272  13B0  1D03               	skipz
  7273  13B1  0008               	return
  7274                           
  7275                           ;RF_Control_B1.c: 221: setControl_Lights_Table();
  7276  13B2  3187  2773         	fcall	_setControl_Lights_Table
  7277                           
  7278                           ;RF_Control_B1.c: 228: {
  7279                           ;RF_Control_B1.c: 229: ;
  7280                           
  7281                           ;RF_Control_B1.c: 225: {
  7282                           ;RF_Control_B1.c: 226: ;
  7283                           ;RF_Control_B1.c: 227: } else if (RF_Data[0] == 0x0 && RF_Data[1] == 0x65)
  7284                           
  7285                           ;RF_Control_B1.c: 222: }
  7286                           ;RF_Control_B1.c: 223: }
  7287                           ;RF_Control_B1.c: 224: } else if (RF_Data[0] == 0xff && RF_Data[1] == 0x02)
  7288  13B4  0008               	return
  7289  13B5                     __end_of_getRxData:	
  7290                           
  7291                           	psect	text29
  7292  115A                     __ptext29:	
  7293 ;; *************** function _setLog_Code *****************
  7294 ;; Defined at:
  7295 ;;		line 239 in file "../src/RF_Control_B1.c"
  7296 ;; Parameters:    Size  Location     Type
  7297 ;;		None
  7298 ;; Auto vars:     Size  Location     Type
  7299 ;;		None
  7300 ;; Return value:  Size  Location     Type
  7301 ;;		None               void
  7302 ;; Registers used:
  7303 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7304 ;; Tracked objects:
  7305 ;;		On entry : 0/0
  7306 ;;		On exit  : 0/0
  7307 ;;		Unchanged: 0/0
  7308 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7309 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7310 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7311 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7312 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7313 ;;Total ram usage:        1 bytes
  7314 ;; Hardware stack levels used:    1
  7315 ;; Hardware stack levels required when called:    7
  7316 ;; This function calls:
  7317 ;;		_setBuz
  7318 ;; This function is called by:
  7319 ;;		_getRxData
  7320 ;; This function uses a non-reentrant model
  7321 ;;
  7322                           
  7323                           
  7324                           ;psect for function _setLog_Code
  7325  115A                     _setLog_Code:	
  7326                           
  7327                           ;RF_Control_B1.c: 240: product->Data[12]=RF_Data[12];
  7328                           
  7329                           ;incstack = 0
  7330                           ; Regs used in _setLog_Code: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7331  115A  0021               	movlb	1	; select bank1
  7332  115B  082C               	movf	(_RF_Data^(0+128)+12),w
  7333  115C  0020               	movlb	0	; select bank0
  7334  115D  00AD               	movwf	??_setLog_Code
  7335  115E  086E               	movf	_product,w
  7336  115F  3E0C               	addlw	12
  7337  1160  0086               	movwf	6
  7338  1161  3002               	movlw	2	; select bank4/5
  7339  1162  0087               	movwf	7
  7340  1163  082D               	movf	??_setLog_Code,w
  7341  1164  0081               	movwf	1
  7342                           
  7343                           ;RF_Control_B1.c: 241: product->Data[13]=RF_Data[13];
  7344  1165  0021               	movlb	1	; select bank1
  7345  1166  082D               	movf	(_RF_Data^(0+128)+13),w
  7346  1167  0020               	movlb	0	; select bank0
  7347  1168  00AD               	movwf	??_setLog_Code
  7348  1169  086E               	movf	_product,w
  7349  116A  3E0D               	addlw	13
  7350  116B  0086               	movwf	6
  7351  116C  3002               	movlw	2	; select bank4/5
  7352  116D  0087               	movwf	7
  7353  116E  082D               	movf	??_setLog_Code,w
  7354  116F  0081               	movwf	1
  7355                           
  7356                           ;RF_Control_B1.c: 242: product->Data[14]=RF_Data[14];
  7357  1170  0021               	movlb	1	; select bank1
  7358  1171  082E               	movf	(_RF_Data^(0+128)+14),w
  7359  1172  0020               	movlb	0	; select bank0
  7360  1173  00AD               	movwf	??_setLog_Code
  7361  1174  086E               	movf	_product,w
  7362  1175  3E0E               	addlw	14
  7363  1176  0086               	movwf	6
  7364  1177  3002               	movlw	2	; select bank4/5
  7365  1178  0087               	movwf	7
  7366  1179  082D               	movf	??_setLog_Code,w
  7367  117A  0081               	movwf	1
  7368                           
  7369                           ;RF_Control_B1.c: 243: setBuz(1, 100);
  7370  117B  3064               	movlw	100
  7371  117C  00A9               	movwf	setBuz@time
  7372  117D  3000               	movlw	0
  7373  117E  00AA               	movwf	setBuz@time+1
  7374  117F  3001               	movlw	1
  7375  1180  3194  24F6  3191   	fcall	_setBuz
  7376                           
  7377                           ;RF_Control_B1.c: 244: RF1.Learn = 0;
  7378  1183  0021               	movlb	1	; select bank1
  7379  1184  1341               	bcf	_RF1^(0+128),6
  7380                           
  7381                           ;RF_Control_B1.c: 245: if (myMain->First) {
  7382  1185  087B               	movf	_myMain,w
  7383  1186  0086               	movwf	6
  7384  1187  3002               	movlw	2	; select bank4/5
  7385  1188  0087               	movwf	7
  7386  1189  1F81               	btfss	1,7
  7387  118A  2991               	goto	l2329
  7388                           
  7389                           ;RF_Control_B1.c: 246: Memory->LoopSave=1;
  7390  118B  087C               	movf	_Memory,w
  7391  118C  3E24               	addlw	36
  7392  118D  0086               	movwf	6
  7393  118E  3002               	movlw	2	; select bank4/5
  7394  118F  0087               	movwf	7
  7395  1190  1501               	bsf	1,2
  7396  1191                     l2329:	
  7397                           
  7398                           ;RF_Control_B1.c: 247: }
  7399                           ;RF_Control_B1.c: 248: Memory->Modify=1;
  7400  1191  087C               	movf	_Memory,w
  7401  1192  3E24               	addlw	36
  7402  1193  0086               	movwf	6
  7403  1194  3002               	movlw	2	; select bank4/5
  7404  1195  0087               	movwf	7
  7405  1196  1401               	bsf	1,0
  7406  1197  0008               	return
  7407  1198                     __end_of_setLog_Code:	
  7408                           
  7409                           	psect	text30
  7410  0773                     __ptext30:	
  7411 ;; *************** function _setControl_Lights_Table *****************
  7412 ;; Defined at:
  7413 ;;		line 252 in file "../src/RF_Control_B1.c"
  7414 ;; Parameters:    Size  Location     Type
  7415 ;;		None
  7416 ;; Auto vars:     Size  Location     Type
  7417 ;;		None
  7418 ;; Return value:  Size  Location     Type
  7419 ;;		None               void
  7420 ;; Registers used:
  7421 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7422 ;; Tracked objects:
  7423 ;;		On entry : 0/0
  7424 ;;		On exit  : 0/0
  7425 ;;		Unchanged: 0/0
  7426 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7427 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7428 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7429 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7430 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7431 ;;Total ram usage:        0 bytes
  7432 ;; Hardware stack levels used:    1
  7433 ;; Hardware stack levels required when called:   11
  7434 ;; This function calls:
  7435 ;;		_setBuz
  7436 ;;		_setDimmerLights
  7437 ;;		_setRFSW_AdjControl
  7438 ;;		_setRFSW_Control
  7439 ;;		_setRFSW_Status
  7440 ;;		_setSw_Status
  7441 ;;		_setTxData
  7442 ;; This function is called by:
  7443 ;;		_getRxData
  7444 ;; This function uses a non-reentrant model
  7445 ;;
  7446                           
  7447                           
  7448                           ;psect for function _setControl_Lights_Table
  7449  0773                     _setControl_Lights_Table:	
  7450                           
  7451                           ;RF_Control_B1.c: 253: if (RF_Data[15] == 0x00) {
  7452                           
  7453                           ;incstack = 0
  7454                           ; Regs used in _setControl_Lights_Table: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
  7455  0773  0021               	movlb	1	; select bank1
  7456  0774  08AF               	movf	(_RF_Data^(0+128)+15),f
  7457  0775  1D03               	skipz
  7458  0776  2FBF               	goto	l6617
  7459                           
  7460                           ;RF_Control_B1.c: 255: setDimmerLights(1, 0);
  7461  0777  0020               	movlb	0	; select bank0
  7462  0778  01A3               	clrf	setDimmerLights@status
  7463  0779  3001               	movlw	1
  7464  077A  318C  24D3  3187   	fcall	_setDimmerLights
  7465                           
  7466                           ;RF_Control_B1.c: 256: setRFSW_Status(1, 0);
  7467  077D  0020               	movlb	0	; select bank0
  7468  077E  01A2               	clrf	setRFSW_Status@command
  7469  077F  3001               	movlw	1
  7470  0780  319A  22C0  3187   	fcall	_setRFSW_Status
  7471                           
  7472                           ;RF_Control_B1.c: 257: setSw_Status(1, 0);
  7473  0783  0020               	movlb	0	; select bank0
  7474  0784  01A2               	clrf	setSw_Status@command
  7475  0785  3001               	movlw	1
  7476  0786  319A  22CF  3187   	fcall	_setSw_Status
  7477                           
  7478                           ;RF_Control_B1.c: 260: setDimmerLights(2, 0);
  7479  0789  0020               	movlb	0	; select bank0
  7480  078A  01A3               	clrf	setDimmerLights@status
  7481  078B  3002               	movlw	2
  7482  078C  318C  24D3  3187   	fcall	_setDimmerLights
  7483                           
  7484                           ;RF_Control_B1.c: 261: setRFSW_Status(2, 0);
  7485  078F  0020               	movlb	0	; select bank0
  7486  0790  01A2               	clrf	setRFSW_Status@command
  7487  0791  3002               	movlw	2
  7488  0792  319A  22C0  3187   	fcall	_setRFSW_Status
  7489                           
  7490                           ;RF_Control_B1.c: 262: setSw_Status(2, 0);
  7491  0795  0020               	movlb	0	; select bank0
  7492  0796  01A2               	clrf	setSw_Status@command
  7493  0797  3002               	movlw	2
  7494  0798  319A  22CF  3187   	fcall	_setSw_Status
  7495                           
  7496                           ;RF_Control_B1.c: 270: product->Data[9]=0;
  7497  079B  0020               	movlb	0	; select bank0
  7498  079C  086E               	movf	_product,w
  7499  079D  3E09               	addlw	9
  7500  079E  0086               	movwf	6
  7501  079F  3002               	movlw	2	; select bank4/5
  7502  07A0  0087               	movwf	7
  7503  07A1  0181               	clrf	1
  7504                           
  7505                           ;RF_Control_B1.c: 271: product->Data[11]=0;
  7506  07A2  086E               	movf	_product,w
  7507  07A3  3E0B               	addlw	11
  7508  07A4  0086               	movwf	6
  7509  07A5  3002               	movlw	2	; select bank4/5
  7510  07A6  0087               	movwf	7
  7511  07A7  0181               	clrf	1
  7512                           
  7513                           ;RF_Control_B1.c: 272: product->Data[15]=0;
  7514  07A8  086E               	movf	_product,w
  7515  07A9  3E0F               	addlw	15
  7516  07AA  0086               	movwf	6
  7517  07AB  3002               	movlw	2	; select bank4/5
  7518  07AC  0087               	movwf	7
  7519  07AD  0181               	clrf	1
  7520                           
  7521                           ;RF_Control_B1.c: 273: product->Data[17]=0;
  7522  07AE  086E               	movf	_product,w
  7523  07AF  3E11               	addlw	17
  7524  07B0  0086               	movwf	6
  7525  07B1  3002               	movlw	2	; select bank4/5
  7526  07B2  0087               	movwf	7
  7527  07B3  0181               	clrf	1
  7528                           
  7529                           ;RF_Control_B1.c: 274: setBuz(1, 100);
  7530  07B4  3064               	movlw	100
  7531  07B5  00A9               	movwf	setBuz@time
  7532  07B6  3000               	movlw	0
  7533  07B7  00AA               	movwf	setBuz@time+1
  7534  07B8  3001               	movlw	1
  7535  07B9  3194  24F6  3187   	fcall	_setBuz
  7536                           
  7537                           ;RF_Control_B1.c: 275: setTxData();
  7538  07BC  3186  26BA         	fcall	_setTxData
  7539                           
  7540                           ;RF_Control_B1.c: 276: } else if (RF_Data[15] == 0x20) {
  7541  07BE  0008               	return
  7542  07BF                     l6617:	
  7543  07BF  0021               	movlb	1	; select bank1
  7544  07C0  082F               	movf	(_RF_Data^(0+128)+15),w
  7545  07C1  3A20               	xorlw	32
  7546  07C2  1D03               	skipz
  7547  07C3  2FDA               	goto	l6623
  7548                           
  7549                           ;RF_Control_B1.c: 277: product->Data[9]=0;
  7550  07C4  0020               	movlb	0	; select bank0
  7551  07C5  086E               	movf	_product,w
  7552  07C6  3E09               	addlw	9
  7553  07C7  0086               	movwf	6
  7554  07C8  3002               	movlw	2	; select bank4/5
  7555  07C9  0087               	movwf	7
  7556  07CA  0181               	clrf	1
  7557                           
  7558                           ;RF_Control_B1.c: 278: product->Data[11]=0;
  7559  07CB  086E               	movf	_product,w
  7560  07CC  3E0B               	addlw	11
  7561  07CD  0086               	movwf	6
  7562  07CE  3002               	movlw	2	; select bank4/5
  7563  07CF  0087               	movwf	7
  7564  07D0  0181               	clrf	1
  7565                           
  7566                           ;RF_Control_B1.c: 279: product->Data[17]=0;
  7567  07D1  086E               	movf	_product,w
  7568  07D2  3E11               	addlw	17
  7569  07D3  0086               	movwf	6
  7570  07D4  3002               	movlw	2	; select bank4/5
  7571  07D5  0087               	movwf	7
  7572  07D6  0181               	clrf	1
  7573                           
  7574                           ;RF_Control_B1.c: 280: setTxData();
  7575  07D7  3186  26BA         	fcall	_setTxData
  7576                           
  7577                           ;RF_Control_B1.c: 281: }
  7578  07D9  0008               	return
  7579  07DA                     l6623:	
  7580                           
  7581                           ;RF_Control_B1.c: 283: else if (RF_Data[15] == 0x01) {
  7582  07DA  0021               	movlb	1	; select bank1
  7583  07DB  082F               	movf	(_RF_Data^(0+128)+15),w
  7584  07DC  3A01               	xorlw	1
  7585  07DD  1D03               	skipz
  7586  07DE  2FE3               	goto	l6627
  7587                           
  7588                           ;RF_Control_B1.c: 284: setRFSW_Control(1);
  7589  07DF  3001               	movlw	1
  7590  07E0  318D  255D         	fcall	_setRFSW_Control
  7591                           
  7592                           ;RF_Control_B1.c: 285: }
  7593  07E2  0008               	return
  7594  07E3                     l6627:	
  7595                           
  7596                           ;RF_Control_B1.c: 287: else if (RF_Data[15] == 0x11) {
  7597  07E3  0021               	movlb	1	; select bank1
  7598  07E4  082F               	movf	(_RF_Data^(0+128)+15),w
  7599  07E5  3A11               	xorlw	17
  7600  07E6  1D03               	skipz
  7601  07E7  2FEC               	goto	l6631
  7602                           
  7603                           ;RF_Control_B1.c: 288: setRFSW_AdjControl(1);
  7604  07E8  3001               	movlw	1
  7605  07E9  3191  2198         	fcall	_setRFSW_AdjControl
  7606                           
  7607                           ;RF_Control_B1.c: 289: }
  7608  07EB  0008               	return
  7609  07EC                     l6631:	
  7610                           
  7611                           ;RF_Control_B1.c: 294: else if (RF_Data[15] == 0x02) {
  7612  07EC  0021               	movlb	1	; select bank1
  7613  07ED  082F               	movf	(_RF_Data^(0+128)+15),w
  7614  07EE  3A02               	xorlw	2
  7615  07EF  1D03               	skipz
  7616  07F0  2FF5               	goto	l6635
  7617                           
  7618                           ;RF_Control_B1.c: 295: setRFSW_Control(2);
  7619  07F1  3002               	movlw	2
  7620  07F2  318D  255D         	fcall	_setRFSW_Control
  7621                           
  7622                           ;RF_Control_B1.c: 296: }
  7623  07F4  0008               	return
  7624  07F5                     l6635:	
  7625                           
  7626                           ;RF_Control_B1.c: 298: else if (RF_Data[15] == 0x21) {
  7627  07F5  0021               	movlb	1	; select bank1
  7628  07F6  082F               	movf	(_RF_Data^(0+128)+15),w
  7629  07F7  3A21               	xorlw	33
  7630  07F8  1D03               	skipz
  7631  07F9  0008               	return
  7632                           
  7633                           ;RF_Control_B1.c: 299: setRFSW_AdjControl(2);
  7634  07FA  3002               	movlw	2
  7635  07FB  3191  2198         	fcall	_setRFSW_AdjControl
  7636  07FD  0008               	return
  7637  07FE                     __end_of_setControl_Lights_Table:	
  7638                           
  7639                           	psect	text31
  7640  0D5D                     __ptext31:	
  7641 ;; *************** function _setRFSW_Control *****************
  7642 ;; Defined at:
  7643 ;;		line 340 in file "../src/RF_Control_B1.c"
  7644 ;; Parameters:    Size  Location     Type
  7645 ;;  sw              1    wreg     unsigned char 
  7646 ;; Auto vars:     Size  Location     Type
  7647 ;;  sw              1   67[BANK0 ] unsigned char 
  7648 ;; Return value:  Size  Location     Type
  7649 ;;		None               void
  7650 ;; Registers used:
  7651 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7652 ;; Tracked objects:
  7653 ;;		On entry : 0/0
  7654 ;;		On exit  : 0/0
  7655 ;;		Unchanged: 0/0
  7656 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7657 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7658 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7659 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7660 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7661 ;;Total ram usage:        2 bytes
  7662 ;; Hardware stack levels used:    1
  7663 ;; Hardware stack levels required when called:    9
  7664 ;; This function calls:
  7665 ;;		_RfSWPointSelect
  7666 ;;		_setBuz
  7667 ;;		_setDelayOff_GO
  7668 ;;		_setDimmerLights_Switch
  7669 ;;		_setDimmerLights_Trigger
  7670 ;;		_setRF_DimmerLights
  7671 ;;		_setSw_Status
  7672 ;;		_setTxData
  7673 ;; This function is called by:
  7674 ;;		_setControl_Lights_Table
  7675 ;; This function uses a non-reentrant model
  7676 ;;
  7677                           
  7678                           
  7679                           ;psect for function _setRFSW_Control
  7680  0D5D                     _setRFSW_Control:	
  7681                           
  7682                           ;incstack = 0
  7683                           ; Regs used in _setRFSW_Control: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7684                           ;setRFSW_Control@sw stored from wreg
  7685  0D5D  0020               	movlb	0	; select bank0
  7686  0D5E  00E3               	movwf	setRFSW_Control@sw
  7687                           
  7688                           ;RF_Control_B1.c: 341: RfSWPointSelect(sw);
  7689  0D5F  0863               	movf	setRFSW_Control@sw,w
  7690  0D60  319C  2453  318D   	fcall	_RfSWPointSelect
  7691                           
  7692                           ;RF_Control_B1.c: 342: if (RFSW->Status == 0) {
  7693  0D63  0021               	movlb	1	; select bank1
  7694  0D64  084F               	movf	_RFSW^(0+128),w
  7695  0D65  0086               	movwf	6
  7696  0D66  0187               	clrf	7
  7697  0D67  1801               	btfsc	1,0
  7698  0D68  2D9E               	goto	l6475
  7699                           
  7700                           ;RF_Control_B1.c: 343: if (RF_Data[16] == 0x80) {
  7701  0D69  0830               	movf	(_RF_Data^(0+128)+16),w
  7702  0D6A  3A80               	xorlw	128
  7703  0D6B  1D03               	skipz
  7704  0D6C  2D7A               	goto	l6465
  7705                           
  7706                           ;RF_Control_B1.c: 344: setDelayOff_GO(sw, 1, RF_Data[17]);
  7707  0D6D  0020               	movlb	0	; select bank0
  7708  0D6E  01AA               	clrf	setDelayOff_GO@command
  7709  0D6F  0AAA               	incf	setDelayOff_GO@command,f
  7710  0D70  0021               	movlb	1	; select bank1
  7711  0D71  0831               	movf	(_RF_Data^(0+128)+17),w
  7712  0D72  0020               	movlb	0	; select bank0
  7713  0D73  00E2               	movwf	??_setRFSW_Control
  7714  0D74  0862               	movf	??_setRFSW_Control,w
  7715  0D75  00AB               	movwf	setDelayOff_GO@value
  7716  0D76  0863               	movf	setRFSW_Control@sw,w
  7717  0D77  3197  279A  318D   	fcall	_setDelayOff_GO
  7718  0D7A                     l6465:	
  7719                           
  7720                           ;RF_Control_B1.c: 345: }
  7721                           ;RF_Control_B1.c: 346: RFSW->Status = 1;
  7722  0D7A  0021               	movlb	1	; select bank1
  7723  0D7B  084F               	movf	_RFSW^(0+128),w
  7724  0D7C  0086               	movwf	6
  7725  0D7D  0187               	clrf	7
  7726  0D7E  1401               	bsf	1,0
  7727                           
  7728                           ;RF_Control_B1.c: 347: setSw_Status(sw, 1);
  7729  0D7F  0020               	movlb	0	; select bank0
  7730  0D80  01A2               	clrf	setSw_Status@command
  7731  0D81  0AA2               	incf	setSw_Status@command,f
  7732  0D82  0863               	movf	setRFSW_Control@sw,w
  7733  0D83  319A  22CF  318D   	fcall	_setSw_Status
  7734                           
  7735                           ;RF_Control_B1.c: 349: setDimmerLights_Trigger(sw, 1);
  7736  0D86  0020               	movlb	0	; select bank0
  7737  0D87  01A2               	clrf	setDimmerLights_Trigger@command
  7738  0D88  0AA2               	incf	setDimmerLights_Trigger@command,f
  7739  0D89  0863               	movf	setRFSW_Control@sw,w
  7740  0D8A  319B  231D  318D   	fcall	_setDimmerLights_Trigger
  7741                           
  7742                           ;RF_Control_B1.c: 350: setDimmerLights_Switch(sw, 1);
  7743  0D8D  0020               	movlb	0	; select bank0
  7744  0D8E  01A2               	clrf	setDimmerLights_Switch@command
  7745  0D8F  0AA2               	incf	setDimmerLights_Switch@command,f
  7746  0D90  0863               	movf	setRFSW_Control@sw,w
  7747  0D91  319B  230D  318D   	fcall	_setDimmerLights_Switch
  7748                           
  7749                           ;RF_Control_B1.c: 352: setRF_DimmerLights(sw, RFSW->Status);
  7750  0D94  0021               	movlb	1	; select bank1
  7751  0D95  084F               	movf	_RFSW^(0+128),w
  7752  0D96  0086               	movwf	6
  7753  0D97  0187               	clrf	7
  7754  0D98  3000               	movlw	0
  7755  0D99  1801               	btfsc	1,0
  7756  0D9A  3001               	movlw	1
  7757  0D9B  0020               	movlb	0	; select bank0
  7758  0D9C  00DD               	movwf	setRF_DimmerLights@on
  7759  0D9D  2DDC               	goto	L3
  7760  0D9E                     l6475:	
  7761                           ;RF_Control_B1.c: 353: } else {
  7762                           
  7763                           
  7764                           ;RF_Control_B1.c: 354: if (RF_Data[16] == 0x80) {
  7765  0D9E  0021               	movlb	1	; select bank1
  7766  0D9F  0830               	movf	(_RF_Data^(0+128)+16),w
  7767  0DA0  3A80               	xorlw	128
  7768  0DA1  1D03               	skipz
  7769  0DA2  2DB4               	goto	l6479
  7770                           
  7771                           ;RF_Control_B1.c: 355: setDelayOff_GO(sw, 1, RF_Data[17]);
  7772  0DA3  0020               	movlb	0	; select bank0
  7773  0DA4  01AA               	clrf	setDelayOff_GO@command
  7774  0DA5  0AAA               	incf	setDelayOff_GO@command,f
  7775  0DA6  0021               	movlb	1	; select bank1
  7776  0DA7  0831               	movf	(_RF_Data^(0+128)+17),w
  7777  0DA8  0020               	movlb	0	; select bank0
  7778  0DA9  00E2               	movwf	??_setRFSW_Control
  7779  0DAA  0862               	movf	??_setRFSW_Control,w
  7780  0DAB  00AB               	movwf	setDelayOff_GO@value
  7781  0DAC  0863               	movf	setRFSW_Control@sw,w
  7782  0DAD  3197  279A  318D   	fcall	_setDelayOff_GO
  7783                           
  7784                           ;RF_Control_B1.c: 356: setRF_DimmerLights(sw, 1);
  7785  0DB0  0020               	movlb	0	; select bank0
  7786  0DB1  01DD               	clrf	setRF_DimmerLights@on
  7787  0DB2  0ADD               	incf	setRF_DimmerLights@on,f
  7788  0DB3  2DDC               	goto	L3
  7789  0DB4                     l6479:	
  7790                           ;RF_Control_B1.c: 357: } else {
  7791                           
  7792                           
  7793                           ;RF_Control_B1.c: 358: RFSW->Status = 0;
  7794  0DB4  0021               	movlb	1	; select bank1
  7795  0DB5  084F               	movf	_RFSW^(0+128),w
  7796  0DB6  0086               	movwf	6
  7797  0DB7  0187               	clrf	7
  7798  0DB8  1001               	bcf	1,0
  7799                           
  7800                           ;RF_Control_B1.c: 359: setSw_Status(sw, 0);
  7801  0DB9  0020               	movlb	0	; select bank0
  7802  0DBA  01A2               	clrf	setSw_Status@command
  7803  0DBB  0863               	movf	setRFSW_Control@sw,w
  7804  0DBC  319A  22CF  318D   	fcall	_setSw_Status
  7805                           
  7806                           ;RF_Control_B1.c: 361: setDimmerLights_Trigger(sw, 1);
  7807  0DBF  0020               	movlb	0	; select bank0
  7808  0DC0  01A2               	clrf	setDimmerLights_Trigger@command
  7809  0DC1  0AA2               	incf	setDimmerLights_Trigger@command,f
  7810  0DC2  0863               	movf	setRFSW_Control@sw,w
  7811  0DC3  319B  231D  318D   	fcall	_setDimmerLights_Trigger
  7812                           
  7813                           ;RF_Control_B1.c: 362: setDimmerLights_Switch(sw, RFSW->Status);
  7814  0DC6  0021               	movlb	1	; select bank1
  7815  0DC7  084F               	movf	_RFSW^(0+128),w
  7816  0DC8  0086               	movwf	6
  7817  0DC9  0187               	clrf	7
  7818  0DCA  3000               	movlw	0
  7819  0DCB  1801               	btfsc	1,0
  7820  0DCC  3001               	movlw	1
  7821  0DCD  0020               	movlb	0	; select bank0
  7822  0DCE  00A2               	movwf	setDimmerLights_Switch@command
  7823  0DCF  0863               	movf	setRFSW_Control@sw,w
  7824  0DD0  319B  230D  318D   	fcall	_setDimmerLights_Switch
  7825                           
  7826                           ;RF_Control_B1.c: 364: setDelayOff_GO(sw, 0, 0);
  7827  0DD3  0020               	movlb	0	; select bank0
  7828  0DD4  01AA               	clrf	setDelayOff_GO@command
  7829  0DD5  01AB               	clrf	setDelayOff_GO@value
  7830  0DD6  0863               	movf	setRFSW_Control@sw,w
  7831  0DD7  3197  279A  318D   	fcall	_setDelayOff_GO
  7832                           
  7833                           ;RF_Control_B1.c: 365: setRF_DimmerLights(sw, 0);
  7834  0DDA  0020               	movlb	0	; select bank0
  7835  0DDB  01DD               	clrf	setRF_DimmerLights@on
  7836  0DDC                     L3:	
  7837  0DDC  0863               	movf	setRFSW_Control@sw,w
  7838  0DDD  3188  2027  318D   	fcall	_setRF_DimmerLights
  7839                           
  7840                           ;RF_Control_B1.c: 366: }
  7841                           ;RF_Control_B1.c: 367: }
  7842                           ;RF_Control_B1.c: 368: setBuz(1, 100);
  7843  0DE0  3064               	movlw	100
  7844  0DE1  0020               	movlb	0	; select bank0
  7845  0DE2  00A9               	movwf	setBuz@time
  7846  0DE3  3000               	movlw	0
  7847  0DE4  00AA               	movwf	setBuz@time+1
  7848  0DE5  3001               	movlw	1
  7849  0DE6  3194  24F6  318D   	fcall	_setBuz
  7850                           
  7851                           ;RF_Control_B1.c: 369: setTxData();
  7852  0DE9  3186  26BA         	fcall	_setTxData
  7853  0DEB  0008               	return
  7854  0DEC                     __end_of_setRFSW_Control:	
  7855                           
  7856                           	psect	text32
  7857  179A                     __ptext32:	
  7858 ;; *************** function _setDelayOff_GO *****************
  7859 ;; Defined at:
  7860 ;;		line 86 in file "../src/DelayOff_B1.c"
  7861 ;; Parameters:    Size  Location     Type
  7862 ;;  sw              1    wreg     unsigned char 
  7863 ;;  command         1   10[BANK0 ] unsigned char 
  7864 ;;  value           1   11[BANK0 ] unsigned char 
  7865 ;; Auto vars:     Size  Location     Type
  7866 ;;  sw              1   14[BANK0 ] unsigned char 
  7867 ;; Return value:  Size  Location     Type
  7868 ;;		None               void
  7869 ;; Registers used:
  7870 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7871 ;; Tracked objects:
  7872 ;;		On entry : 0/0
  7873 ;;		On exit  : 0/0
  7874 ;;		Unchanged: 0/0
  7875 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7876 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7877 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7878 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7879 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7880 ;;Total ram usage:        5 bytes
  7881 ;; Hardware stack levels used:    1
  7882 ;; Hardware stack levels required when called:    7
  7883 ;; This function calls:
  7884 ;;		_DelayOffPointSelect
  7885 ;;		_DelayTimejudge
  7886 ;; This function is called by:
  7887 ;;		_setRFSW_Control
  7888 ;;		_Sw_DimmerOffFunc
  7889 ;; This function uses a non-reentrant model
  7890 ;;
  7891                           
  7892                           
  7893                           ;psect for function _setDelayOff_GO
  7894  179A                     _setDelayOff_GO:	
  7895                           
  7896                           ;incstack = 0
  7897                           ; Regs used in _setDelayOff_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7898                           ;setDelayOff_GO@sw stored from wreg
  7899  179A  0020               	movlb	0	; select bank0
  7900  179B  00AE               	movwf	setDelayOff_GO@sw
  7901                           
  7902                           ;DelayOff_B1.c: 87: DelayOffPointSelect(sw);
  7903  179C  082E               	movf	setDelayOff_GO@sw,w
  7904  179D  319C  2400  3197   	fcall	_DelayOffPointSelect
  7905                           
  7906                           ;DelayOff_B1.c: 88: if (DelayOff->Enable == 1) {
  7907  17A0  0878               	movf	_DelayOff,w
  7908  17A1  0086               	movwf	6
  7909  17A2  3001               	movlw	1	; select bank2/3
  7910  17A3  0087               	movwf	7
  7911  17A4  1C01               	btfss	1,0
  7912  17A5  0008               	return
  7913                           
  7914                           ;DelayOff_B1.c: 89: DelayOff->GO = command == 1 ? 1 : 0;
  7915  17A6  0020               	movlb	0	; select bank0
  7916  17A7  082A               	movf	setDelayOff_GO@command,w
  7917  17A8  3A01               	xorlw	1
  7918  17A9  3000               	movlw	0
  7919  17AA  1903               	skipnz
  7920  17AB  3001               	movlw	1
  7921  17AC  00AC               	movwf	??_setDelayOff_GO
  7922  17AD  0878               	movf	_DelayOff,w
  7923  17AE  0086               	movwf	6
  7924  17AF  3001               	movlw	1	; select bank2/3
  7925  17B0  0087               	movwf	7
  7926  17B1  0DAC               	rlf	??_setDelayOff_GO,f
  7927  17B2  0801               	movf	1,w
  7928  17B3  062C               	xorwf	??_setDelayOff_GO,w
  7929  17B4  39FD               	andlw	-3
  7930  17B5  062C               	xorwf	??_setDelayOff_GO,w
  7931  17B6  0081               	movwf	1
  7932                           
  7933                           ;DelayOff_B1.c: 90: if (command == 1) {
  7934  17B7  082A               	movf	setDelayOff_GO@command,w
  7935  17B8  3A01               	xorlw	1
  7936  17B9  1D03               	skipz
  7937  17BA  2FE5               	goto	l6245
  7938                           
  7939                           ;DelayOff_B1.c: 91: DelayOff->Value = DelayTimejudge(value);
  7940  17BB  082B               	movf	setDelayOff_GO@value,w
  7941  17BC  319E  26EA  3197   	fcall	_DelayTimejudge
  7942  17BF  0020               	movlb	0	; select bank0
  7943  17C0  00AC               	movwf	??_setDelayOff_GO
  7944  17C1  0A78               	incf	_DelayOff,w
  7945  17C2  0086               	movwf	6
  7946  17C3  3001               	movlw	1	; select bank2/3
  7947  17C4  0087               	movwf	7
  7948  17C5  082C               	movf	??_setDelayOff_GO,w
  7949  17C6  0081               	movwf	1
  7950                           
  7951                           ;DelayOff_B1.c: 92: if (((value % 16) == 5 || (value % 16) == 0) && value <= 0x25) {
  7952  17C7  300F               	movlw	15
  7953  17C8  052B               	andwf	setDelayOff_GO@value,w
  7954  17C9  00AC               	movwf	??_setDelayOff_GO
  7955  17CA  082C               	movf	??_setDelayOff_GO,w
  7956  17CB  3A05               	xorlw	5
  7957  17CC  1903               	skipnz
  7958  17CD  2FD2               	goto	l6239
  7959  17CE  082B               	movf	setDelayOff_GO@value,w
  7960  17CF  390F               	andlw	15
  7961  17D0  1D03               	btfss	3,2
  7962  17D1  2FD8               	goto	l6243
  7963  17D2                     l6239:	
  7964  17D2  3026               	movlw	38
  7965  17D3  022B               	subwf	setDelayOff_GO@value,w
  7966  17D4  1803               	skipnc
  7967  17D5  2FD8               	goto	l6243
  7968                           
  7969                           ;DelayOff_B1.c: 93: product->Data[26 + sw]=value;
  7970  17D6  082B               	movf	setDelayOff_GO@value,w
  7971  17D7  2FD9               	goto	L4
  7972  17D8                     l6243:	
  7973                           ;DelayOff_B1.c: 94: } else {
  7974                           
  7975                           
  7976                           ;DelayOff_B1.c: 95: product->Data[26 + sw]=0x05;
  7977  17D8  3005               	movlw	5
  7978  17D9                     L4:	
  7979  17D9  00AC               	movwf	??_setDelayOff_GO
  7980  17DA  082E               	movf	setDelayOff_GO@sw,w
  7981  17DB  3E1A               	addlw	26
  7982  17DC  076E               	addwf	_product,w
  7983  17DD  00AD               	movwf	??_setDelayOff_GO+1
  7984  17DE  082D               	movf	??_setDelayOff_GO+1,w
  7985  17DF  0086               	movwf	6
  7986  17E0  3002               	movlw	2	; select bank4/5
  7987  17E1  0087               	movwf	7
  7988  17E2  082C               	movf	??_setDelayOff_GO,w
  7989  17E3  0081               	movwf	1
  7990                           
  7991                           ;DelayOff_B1.c: 96: }
  7992                           ;DelayOff_B1.c: 97: } else if (command == 0) {
  7993  17E4  2FF1               	goto	l6249
  7994  17E5                     l6245:	
  7995  17E5  08AA               	movf	setDelayOff_GO@command,f
  7996  17E6  1D03               	skipz
  7997  17E7  2FF1               	goto	l6249
  7998                           
  7999                           ;DelayOff_B1.c: 98: product->Data[sw + 26]=0;
  8000  17E8  082E               	movf	setDelayOff_GO@sw,w
  8001  17E9  3E1A               	addlw	26
  8002  17EA  076E               	addwf	_product,w
  8003  17EB  00AC               	movwf	??_setDelayOff_GO
  8004  17EC  082C               	movf	??_setDelayOff_GO,w
  8005  17ED  0086               	movwf	6
  8006  17EE  3002               	movlw	2	; select bank4/5
  8007  17EF  0087               	movwf	7
  8008  17F0  0181               	clrf	1
  8009  17F1                     l6249:	
  8010                           
  8011                           ;DelayOff_B1.c: 99: }
  8012                           ;DelayOff_B1.c: 100: DelayOff->SecondTime = 0;
  8013  17F1  0878               	movf	_DelayOff,w
  8014  17F2  3E02               	addlw	2
  8015  17F3  0086               	movwf	6
  8016  17F4  3001               	movlw	1	; select bank2/3
  8017  17F5  0087               	movwf	7
  8018  17F6  3000               	movlw	0
  8019  17F7  3FC0               	movwi [0]fsr1
  8020  17F8  3FC1               	movwi [1]fsr1
  8021                           
  8022                           ;DelayOff_B1.c: 101: DelayOff->MinuteTime = 0;
  8023  17F9  0878               	movf	_DelayOff,w
  8024  17FA  3E04               	addlw	4
  8025  17FB  0086               	movwf	6
  8026  17FC  3001               	movlw	1	; select bank2/3
  8027  17FD  0087               	movwf	7
  8028  17FE  0181               	clrf	1
  8029  17FF  0008               	return
  8030  1800                     __end_of_setDelayOff_GO:	
  8031                           
  8032                           	psect	text33
  8033  1EEA                     __ptext33:	
  8034 ;; *************** function _DelayTimejudge *****************
  8035 ;; Defined at:
  8036 ;;		line 106 in file "../src/DelayOff_B1.c"
  8037 ;; Parameters:    Size  Location     Type
  8038 ;;  value           1    wreg     unsigned char 
  8039 ;; Auto vars:     Size  Location     Type
  8040 ;;  value           1    9[BANK0 ] unsigned char 
  8041 ;;  k               1    8[BANK0 ] unsigned char 
  8042 ;;  j               1    7[BANK0 ] unsigned char 
  8043 ;;  i               1    6[BANK0 ] unsigned char 
  8044 ;; Return value:  Size  Location     Type
  8045 ;;                  1    wreg      unsigned char 
  8046 ;; Registers used:
  8047 ;;		wreg, status,2, status,0, pclath, cstack
  8048 ;; Tracked objects:
  8049 ;;		On entry : 0/0
  8050 ;;		On exit  : 0/0
  8051 ;;		Unchanged: 0/0
  8052 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8053 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8054 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8055 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8056 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8057 ;;Total ram usage:        6 bytes
  8058 ;; Hardware stack levels used:    1
  8059 ;; Hardware stack levels required when called:    6
  8060 ;; This function calls:
  8061 ;;		___bmul
  8062 ;; This function is called by:
  8063 ;;		_setDelayOff_GO
  8064 ;; This function uses a non-reentrant model
  8065 ;;
  8066                           
  8067                           
  8068                           ;psect for function _DelayTimejudge
  8069  1EEA                     _DelayTimejudge:	
  8070                           
  8071                           ;incstack = 0
  8072                           ; Regs used in _DelayTimejudge: [wreg+status,2+status,0+pclath+cstack]
  8073                           ;DelayTimejudge@value stored from wreg
  8074  1EEA  0020               	movlb	0	; select bank0
  8075  1EEB  00A9               	movwf	DelayTimejudge@value
  8076                           
  8077                           ;DelayOff_B1.c: 107: char i = 5, j = 0, k = 0;
  8078  1EEC  3005               	movlw	5
  8079  1EED  00A4               	movwf	??_DelayTimejudge
  8080  1EEE  0824               	movf	??_DelayTimejudge,w
  8081  1EEF  00A6               	movwf	DelayTimejudge@i
  8082  1EF0  01A7               	clrf	DelayTimejudge@j
  8083  1EF1  01A8               	clrf	DelayTimejudge@k
  8084                           
  8085                           ;DelayOff_B1.c: 108: if (value <= 0x30) {
  8086  1EF2  3031               	movlw	49
  8087  1EF3  0229               	subwf	DelayTimejudge@value,w
  8088  1EF4  1803               	skipnc
  8089  1EF5  2F12               	goto	l6031
  8090                           
  8091                           ;DelayOff_B1.c: 109: j = value & 0x0f;
  8092  1EF6  0829               	movf	DelayTimejudge@value,w
  8093  1EF7  390F               	andlw	15
  8094  1EF8  00A4               	movwf	??_DelayTimejudge
  8095  1EF9  0824               	movf	??_DelayTimejudge,w
  8096  1EFA  00A7               	movwf	DelayTimejudge@j
  8097                           
  8098                           ;DelayOff_B1.c: 110: k = (value >> 4) & 0x0f;
  8099  1EFB  0829               	movf	DelayTimejudge@value,w
  8100  1EFC  00A4               	movwf	??_DelayTimejudge
  8101  1EFD  3004               	movlw	4
  8102  1EFE                     u4715:	
  8103  1EFE  36A4               	lsrf	??_DelayTimejudge,f
  8104  1EFF  0B89               	decfsz	9,f
  8105  1F00  2EFE               	goto	u4715
  8106  1F01  0824               	movf	??_DelayTimejudge,w
  8107  1F02  390F               	andlw	15
  8108  1F03  00A5               	movwf	??_DelayTimejudge+1
  8109  1F04  0825               	movf	??_DelayTimejudge+1,w
  8110  1F05  00A8               	movwf	DelayTimejudge@k
  8111                           
  8112                           ;DelayOff_B1.c: 111: i = j + (k * 10);
  8113  1F06  300A               	movlw	10
  8114  1F07  00A4               	movwf	??_DelayTimejudge
  8115  1F08  0824               	movf	??_DelayTimejudge,w
  8116  1F09  00A0               	movwf	___bmul@multiplicand
  8117  1F0A  0828               	movf	DelayTimejudge@k,w
  8118  1F0B  319B  23B4         	fcall	___bmul
  8119  1F0D  0020               	movlb	0	; select bank0
  8120  1F0E  0727               	addwf	DelayTimejudge@j,w
  8121  1F0F  00A5               	movwf	??_DelayTimejudge+1
  8122  1F10  0825               	movf	??_DelayTimejudge+1,w
  8123  1F11  00A6               	movwf	DelayTimejudge@i
  8124  1F12                     l6031:	
  8125                           
  8126                           ;DelayOff_B1.c: 112: }
  8127                           ;DelayOff_B1.c: 133: return i;
  8128  1F12  0826               	movf	DelayTimejudge@i,w
  8129  1F13  0008               	return
  8130  1F14                     __end_of_DelayTimejudge:	
  8131                           
  8132                           	psect	text34
  8133  1BB4                     __ptext34:	
  8134 ;; *************** function ___bmul *****************
  8135 ;; Defined at:
  8136 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul8.c"
  8137 ;; Parameters:    Size  Location     Type
  8138 ;;  multiplier      1    wreg     unsigned char 
  8139 ;;  multiplicand    1    0[BANK0 ] unsigned char 
  8140 ;; Auto vars:     Size  Location     Type
  8141 ;;  multiplier      1    3[BANK0 ] unsigned char 
  8142 ;;  product         1    2[BANK0 ] unsigned char 
  8143 ;; Return value:  Size  Location     Type
  8144 ;;                  1    wreg      unsigned char 
  8145 ;; Registers used:
  8146 ;;		wreg, status,2, status,0
  8147 ;; Tracked objects:
  8148 ;;		On entry : 0/0
  8149 ;;		On exit  : 0/0
  8150 ;;		Unchanged: 0/0
  8151 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8152 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8153 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8154 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8155 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8156 ;;Total ram usage:        4 bytes
  8157 ;; Hardware stack levels used:    1
  8158 ;; Hardware stack levels required when called:    5
  8159 ;; This function calls:
  8160 ;;		Nothing
  8161 ;; This function is called by:
  8162 ;;		_DelayTimejudge
  8163 ;; This function uses a non-reentrant model
  8164 ;;
  8165                           
  8166                           
  8167                           ;psect for function ___bmul
  8168  1BB4                     ___bmul:	
  8169                           
  8170                           ;incstack = 0
  8171                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  8172                           ;___bmul@multiplier stored from wreg
  8173  1BB4  0020               	movlb	0	; select bank0
  8174  1BB5  00A3               	movwf	___bmul@multiplier
  8175  1BB6  01A2               	clrf	___bmul@product
  8176  1BB7                     l5997:	
  8177  1BB7  1C23               	btfss	___bmul@multiplier,0
  8178  1BB8  2BBD               	goto	l6001
  8179  1BB9  0820               	movf	___bmul@multiplicand,w
  8180  1BBA  00A1               	movwf	??___bmul
  8181  1BBB  0821               	movf	??___bmul,w
  8182  1BBC  07A2               	addwf	___bmul@product,f
  8183  1BBD                     l6001:	
  8184  1BBD  1003               	clrc
  8185  1BBE  0DA0               	rlf	___bmul@multiplicand,f
  8186  1BBF  1003               	clrc
  8187  1BC0  0CA3               	rrf	___bmul@multiplier,f
  8188  1BC1  08A3               	movf	___bmul@multiplier,f
  8189  1BC2  1D03               	skipz
  8190  1BC3  2BB7               	goto	l5997
  8191  1BC4  0822               	movf	___bmul@product,w
  8192  1BC5  0008               	return
  8193  1BC6                     __end_of___bmul:	
  8194                           
  8195                           	psect	text35
  8196  1198                     __ptext35:	
  8197 ;; *************** function _setRFSW_AdjControl *****************
  8198 ;; Defined at:
  8199 ;;		line 373 in file "../src/RF_Control_B1.c"
  8200 ;; Parameters:    Size  Location     Type
  8201 ;;  sw              1    wreg     unsigned char 
  8202 ;; Auto vars:     Size  Location     Type
  8203 ;;  sw              1   70[BANK0 ] unsigned char 
  8204 ;; Return value:  Size  Location     Type
  8205 ;;		None               void
  8206 ;; Registers used:
  8207 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8208 ;; Tracked objects:
  8209 ;;		On entry : 0/0
  8210 ;;		On exit  : 0/0
  8211 ;;		Unchanged: 0/0
  8212 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8213 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8214 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8215 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8216 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8217 ;;Total ram usage:        3 bytes
  8218 ;; Hardware stack levels used:    1
  8219 ;; Hardware stack levels required when called:   10
  8220 ;; This function calls:
  8221 ;;		_RfSWPointSelect
  8222 ;;		_setRF_DimmerValue
  8223 ;;		_setTxData
  8224 ;; This function is called by:
  8225 ;;		_setControl_Lights_Table
  8226 ;; This function uses a non-reentrant model
  8227 ;;
  8228                           
  8229                           
  8230                           ;psect for function _setRFSW_AdjControl
  8231  1198                     _setRFSW_AdjControl:	
  8232                           
  8233                           ;incstack = 0
  8234                           ; Regs used in _setRFSW_AdjControl: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8235                           ;setRFSW_AdjControl@sw stored from wreg
  8236  1198  0020               	movlb	0	; select bank0
  8237  1199  00E6               	movwf	setRFSW_AdjControl@sw
  8238                           
  8239                           ;RF_Control_B1.c: 374: RfSWPointSelect(sw);
  8240  119A  0866               	movf	setRFSW_AdjControl@sw,w
  8241  119B  319C  2453  3191   	fcall	_RfSWPointSelect
  8242                           
  8243                           ;RF_Control_B1.c: 375: if (RFSW->Status == 1) {
  8244  119E  0021               	movlb	1	; select bank1
  8245  119F  084F               	movf	_RFSW^(0+128),w
  8246  11A0  0086               	movwf	6
  8247  11A1  0187               	clrf	7
  8248  11A2  1C01               	btfss	1,0
  8249  11A3  29B0               	goto	l6503
  8250                           
  8251                           ;RF_Control_B1.c: 376: Memory->Modify=1;
  8252  11A4  087C               	movf	_Memory,w
  8253  11A5  3E24               	addlw	36
  8254  11A6  0086               	movwf	6
  8255  11A7  3002               	movlw	2	; select bank4/5
  8256  11A8  0087               	movwf	7
  8257  11A9  1401               	bsf	1,0
  8258                           
  8259                           ;RF_Control_B1.c: 377: setRF_DimmerValue(sw);
  8260  11AA  0020               	movlb	0	; select bank0
  8261  11AB  0866               	movf	setRFSW_AdjControl@sw,w
  8262  11AC  3190  2080  3191   	fcall	_setRF_DimmerValue
  8263                           
  8264                           ;RF_Control_B1.c: 378: } else {
  8265  11AF  29C2               	goto	l2361
  8266  11B0                     l6503:	
  8267                           
  8268                           ;RF_Control_B1.c: 379: product->Data[9]=product->Data[20 + sw];
  8269  11B0  0020               	movlb	0	; select bank0
  8270  11B1  0866               	movf	setRFSW_AdjControl@sw,w
  8271  11B2  3E14               	addlw	20
  8272  11B3  076E               	addwf	_product,w
  8273  11B4  00E4               	movwf	??_setRFSW_AdjControl
  8274  11B5  0864               	movf	??_setRFSW_AdjControl,w
  8275  11B6  0086               	movwf	6
  8276  11B7  3002               	movlw	2	; select bank4/5
  8277  11B8  0087               	movwf	7
  8278  11B9  0801               	movf	1,w
  8279  11BA  00E5               	movwf	??_setRFSW_AdjControl+1
  8280  11BB  086E               	movf	_product,w
  8281  11BC  3E09               	addlw	9
  8282  11BD  0086               	movwf	6
  8283  11BE  3002               	movlw	2	; select bank4/5
  8284  11BF  0087               	movwf	7
  8285  11C0  0865               	movf	??_setRFSW_AdjControl+1,w
  8286  11C1  0081               	movwf	1
  8287  11C2                     l2361:	
  8288                           
  8289                           ;RF_Control_B1.c: 380: }
  8290                           ;RF_Control_B1.c: 381: product->Data[17]=product->Data[26 + sw];
  8291  11C2  0020               	movlb	0	; select bank0
  8292  11C3  0866               	movf	setRFSW_AdjControl@sw,w
  8293  11C4  3E1A               	addlw	26
  8294  11C5  076E               	addwf	_product,w
  8295  11C6  00E4               	movwf	??_setRFSW_AdjControl
  8296  11C7  0864               	movf	??_setRFSW_AdjControl,w
  8297  11C8  0086               	movwf	6
  8298  11C9  3002               	movlw	2	; select bank4/5
  8299  11CA  0087               	movwf	7
  8300  11CB  0801               	movf	1,w
  8301  11CC  00E5               	movwf	??_setRFSW_AdjControl+1
  8302  11CD  086E               	movf	_product,w
  8303  11CE  3E11               	addlw	17
  8304  11CF  0086               	movwf	6
  8305  11D0  3002               	movlw	2	; select bank4/5
  8306  11D1  0087               	movwf	7
  8307  11D2  0865               	movf	??_setRFSW_AdjControl+1,w
  8308  11D3  0081               	movwf	1
  8309                           
  8310                           ;RF_Control_B1.c: 382: setTxData();
  8311  11D4  3186  26BA         	fcall	_setTxData
  8312  11D6  0008               	return
  8313  11D7                     __end_of_setRFSW_AdjControl:	
  8314                           
  8315                           	psect	text36
  8316  1080                     __ptext36:	
  8317 ;; *************** function _setRF_DimmerValue *****************
  8318 ;; Defined at:
  8319 ;;		line 393 in file "../src/RF_Control_B1.c"
  8320 ;; Parameters:    Size  Location     Type
  8321 ;;  lights          1    wreg     unsigned char 
  8322 ;; Auto vars:     Size  Location     Type
  8323 ;;  lights          1   67[BANK0 ] unsigned char 
  8324 ;; Return value:  Size  Location     Type
  8325 ;;		None               void
  8326 ;; Registers used:
  8327 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8328 ;; Tracked objects:
  8329 ;;		On entry : 0/0
  8330 ;;		On exit  : 0/0
  8331 ;;		Unchanged: 0/0
  8332 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8333 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8334 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8335 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8336 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8337 ;;Total ram usage:        3 bytes
  8338 ;; Hardware stack levels used:    1
  8339 ;; Hardware stack levels required when called:    9
  8340 ;; This function calls:
  8341 ;;		_setDimmerLights_AdjRF
  8342 ;; This function is called by:
  8343 ;;		_setRFSW_AdjControl
  8344 ;; This function uses a non-reentrant model
  8345 ;;
  8346                           
  8347                           
  8348                           ;psect for function _setRF_DimmerValue
  8349  1080                     _setRF_DimmerValue:	
  8350                           
  8351                           ;incstack = 0
  8352                           ; Regs used in _setRF_DimmerValue: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8353                           ;setRF_DimmerValue@lights stored from wreg
  8354  1080  0020               	movlb	0	; select bank0
  8355  1081  00E3               	movwf	setRF_DimmerValue@lights
  8356                           
  8357                           ;RF_Control_B1.c: 394: if (RF_Data[9] > 0x64) {
  8358  1082  3065               	movlw	101
  8359  1083  0021               	movlb	1	; select bank1
  8360  1084  0229               	subwf	(_RF_Data^(0+128)+9),w
  8361  1085  1C03               	skipc
  8362  1086  288D               	goto	l6345
  8363                           
  8364                           ;RF_Control_B1.c: 395: RF_Data[9] = 0x64;
  8365  1087  3064               	movlw	100
  8366  1088  0020               	movlb	0	; select bank0
  8367  1089  00E1               	movwf	??_setRF_DimmerValue
  8368  108A  0861               	movf	??_setRF_DimmerValue,w
  8369  108B  0021               	movlb	1	; select bank1
  8370  108C  00A9               	movwf	(_RF_Data^(0+128)+9)
  8371  108D                     l6345:	
  8372                           
  8373                           ;RF_Control_B1.c: 396: }
  8374                           ;RF_Control_B1.c: 397: product->Data[9]=RF_Data[9];
  8375  108D  0829               	movf	(_RF_Data^(0+128)+9),w
  8376  108E  0020               	movlb	0	; select bank0
  8377  108F  00E1               	movwf	??_setRF_DimmerValue
  8378  1090  086E               	movf	_product,w
  8379  1091  3E09               	addlw	9
  8380  1092  0086               	movwf	6
  8381  1093  3002               	movlw	2	; select bank4/5
  8382  1094  0087               	movwf	7
  8383  1095  0861               	movf	??_setRF_DimmerValue,w
  8384  1096  0081               	movwf	1
  8385                           
  8386                           ;RF_Control_B1.c: 398: product->Data[11]=lights;
  8387  1097  0863               	movf	setRF_DimmerValue@lights,w
  8388  1098  00E1               	movwf	??_setRF_DimmerValue
  8389  1099  086E               	movf	_product,w
  8390  109A  3E0B               	addlw	11
  8391  109B  0086               	movwf	6
  8392  109C  3002               	movlw	2	; select bank4/5
  8393  109D  0087               	movwf	7
  8394  109E  0861               	movf	??_setRF_DimmerValue,w
  8395  109F  0081               	movwf	1
  8396                           
  8397                           ;RF_Control_B1.c: 399: product->Data[(20 + lights)]=product->Data[9];
  8398  10A0  086E               	movf	_product,w
  8399  10A1  3E09               	addlw	9
  8400  10A2  0086               	movwf	6
  8401  10A3  3002               	movlw	2	; select bank4/5
  8402  10A4  0087               	movwf	7
  8403  10A5  0801               	movf	1,w
  8404  10A6  00E1               	movwf	??_setRF_DimmerValue
  8405  10A7  0863               	movf	setRF_DimmerValue@lights,w
  8406  10A8  3E14               	addlw	20
  8407  10A9  076E               	addwf	_product,w
  8408  10AA  00E2               	movwf	??_setRF_DimmerValue+1
  8409  10AB  0862               	movf	??_setRF_DimmerValue+1,w
  8410  10AC  0086               	movwf	6
  8411  10AD  3002               	movlw	2	; select bank4/5
  8412  10AE  0087               	movwf	7
  8413  10AF  0861               	movf	??_setRF_DimmerValue,w
  8414  10B0  0081               	movwf	1
  8415                           
  8416                           ;RF_Control_B1.c: 400: setDimmerLights_AdjRF(lights);
  8417  10B1  0863               	movf	setRF_DimmerValue@lights,w
  8418  10B2  319E  269D         	fcall	_setDimmerLights_AdjRF
  8419  10B4  0008               	return
  8420  10B5                     __end_of_setRF_DimmerValue:	
  8421                           
  8422                           	psect	text37
  8423  1E9D                     __ptext37:	
  8424 ;; *************** function _setDimmerLights_AdjRF *****************
  8425 ;; Defined at:
  8426 ;;		line 679 in file "../src/Dimmer_B1.c"
  8427 ;; Parameters:    Size  Location     Type
  8428 ;;  lights          1    wreg     unsigned char 
  8429 ;; Auto vars:     Size  Location     Type
  8430 ;;  lights          1   64[BANK0 ] unsigned char 
  8431 ;; Return value:  Size  Location     Type
  8432 ;;		None               void
  8433 ;; Registers used:
  8434 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8435 ;; Tracked objects:
  8436 ;;		On entry : 0/0
  8437 ;;		On exit  : 0/0
  8438 ;;		Unchanged: 0/0
  8439 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8440 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8441 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8442 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8443 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8444 ;;Total ram usage:        2 bytes
  8445 ;; Hardware stack levels used:    1
  8446 ;; Hardware stack levels required when called:    8
  8447 ;; This function calls:
  8448 ;;		_DimmerLightsPointSelect
  8449 ;;		_getPercentValue
  8450 ;; This function is called by:
  8451 ;;		_setRF_DimmerValue
  8452 ;; This function uses a non-reentrant model
  8453 ;;
  8454                           
  8455                           
  8456                           ;psect for function _setDimmerLights_AdjRF
  8457  1E9D                     _setDimmerLights_AdjRF:	
  8458                           
  8459                           ;incstack = 0
  8460                           ; Regs used in _setDimmerLights_AdjRF: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  8461                           ;setDimmerLights_AdjRF@lights stored from wreg
  8462  1E9D  0020               	movlb	0	; select bank0
  8463  1E9E  00E0               	movwf	setDimmerLights_AdjRF@lights
  8464                           
  8465                           ;Dimmer_B1.c: 681: DimmerLightsPointSelect(lights);
  8466  1E9F  0860               	movf	setDimmerLights_AdjRF@lights,w
  8467  1EA0  319B  23C6  319E   	fcall	_DimmerLightsPointSelect
  8468                           
  8469                           ;Dimmer_B1.c: 682: DimmerLights->AdjRF = 1;
  8470  1EA3  0879               	movf	_DimmerLights,w
  8471  1EA4  0086               	movwf	6
  8472  1EA5  3001               	movlw	1	; select bank2/3
  8473  1EA6  0087               	movwf	7
  8474  1EA7  1501               	bsf	1,2
  8475                           
  8476                           ;Dimmer_B1.c: 683: DimmerLights->Signal = 1;
  8477  1EA8  0879               	movf	_DimmerLights,w
  8478  1EA9  0086               	movwf	6
  8479  1EAA  3001               	movlw	1	; select bank2/3
  8480  1EAB  0087               	movwf	7
  8481  1EAC  1481               	bsf	1,1
  8482                           
  8483                           ;Dimmer_B1.c: 684: DimmerLights->MaxmumValue = getPercentValue(product->Data[9]);
  8484  1EAD  0020               	movlb	0	; select bank0
  8485  1EAE  086E               	movf	_product,w
  8486  1EAF  3E09               	addlw	9
  8487  1EB0  0086               	movwf	6
  8488  1EB1  3002               	movlw	2	; select bank4/5
  8489  1EB2  0087               	movwf	7
  8490  1EB3  0801               	movf	1,w
  8491  1EB4  3195  254F         	fcall	_getPercentValue
  8492  1EB6  0020               	movlb	0	; select bank0
  8493  1EB7  00DF               	movwf	??_setDimmerLights_AdjRF
  8494  1EB8  0879               	movf	_DimmerLights,w
  8495  1EB9  3E05               	addlw	5
  8496  1EBA  0086               	movwf	6
  8497  1EBB  3001               	movlw	1	; select bank2/3
  8498  1EBC  0087               	movwf	7
  8499  1EBD  085F               	movf	??_setDimmerLights_AdjRF,w
  8500  1EBE  0081               	movwf	1
  8501  1EBF  0008               	return
  8502  1EC0                     __end_of_setDimmerLights_AdjRF:	
  8503                           
  8504                           	psect	text38
  8505  154F                     __ptext38:	
  8506 ;; *************** function _getPercentValue *****************
  8507 ;; Defined at:
  8508 ;;		line 752 in file "../src/Dimmer_B1.c"
  8509 ;; Parameters:    Size  Location     Type
  8510 ;;  value           1    wreg     unsigned char 
  8511 ;; Auto vars:     Size  Location     Type
  8512 ;;  value           1   59[BANK0 ] unsigned char 
  8513 ;;  i               3   60[BANK0 ] float 
  8514 ;; Return value:  Size  Location     Type
  8515 ;;                  1    wreg      unsigned char 
  8516 ;; Registers used:
  8517 ;;		wreg, status,2, status,0, pclath, cstack
  8518 ;; Tracked objects:
  8519 ;;		On entry : 0/0
  8520 ;;		On exit  : 0/0
  8521 ;;		Unchanged: 0/0
  8522 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8523 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8524 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8525 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8526 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8527 ;;Total ram usage:        6 bytes
  8528 ;; Hardware stack levels used:    1
  8529 ;; Hardware stack levels required when called:    7
  8530 ;; This function calls:
  8531 ;;		___awtoft
  8532 ;;		___ftadd
  8533 ;;		___ftdiv
  8534 ;;		___ftmul
  8535 ;;		___fttol
  8536 ;; This function is called by:
  8537 ;;		_setDimmerLights_AdjRF
  8538 ;; This function uses a non-reentrant model
  8539 ;;
  8540                           
  8541                           
  8542                           ;psect for function _getPercentValue
  8543  154F                     _getPercentValue:	
  8544                           
  8545                           ;incstack = 0
  8546                           ; Regs used in _getPercentValue: [wreg+status,2+status,0+pclath+cstack]
  8547                           ;getPercentValue@value stored from wreg
  8548  154F  0020               	movlb	0	; select bank0
  8549  1550  00DB               	movwf	getPercentValue@value
  8550                           
  8551                           ;Dimmer_B1.c: 754: float i = ((char)((100-25)*0.8)) - ((char)((100-60)*0.8));
  8552  1551  3000               	movlw	0
  8553  1552  00DC               	movwf	getPercentValue@i
  8554  1553  30E0               	movlw	224
  8555  1554  00DD               	movwf	getPercentValue@i+1
  8556  1555  3041               	movlw	65
  8557  1556  00DE               	movwf	getPercentValue@i+2
  8558                           
  8559                           ;Dimmer_B1.c: 755: i /= 100;
  8560  1557  3000               	movlw	0
  8561  1558  00AE               	movwf	___ftdiv@f2
  8562  1559  30C8               	movlw	200
  8563  155A  00AF               	movwf	___ftdiv@f2+1
  8564  155B  3042               	movlw	66
  8565  155C  00B0               	movwf	___ftdiv@f2+2
  8566  155D  085C               	movf	getPercentValue@i,w
  8567  155E  00B1               	movwf	___ftdiv@f1
  8568  155F  085D               	movf	getPercentValue@i+1,w
  8569  1560  00B2               	movwf	___ftdiv@f1+1
  8570  1561  085E               	movf	getPercentValue@i+2,w
  8571  1562  00B3               	movwf	___ftdiv@f1+2
  8572  1563  318D  25EC  3195   	fcall	___ftdiv
  8573  1566  0020               	movlb	0	; select bank0
  8574  1567  082E               	movf	?___ftdiv,w
  8575  1568  00DC               	movwf	getPercentValue@i
  8576  1569  082F               	movf	?___ftdiv+1,w
  8577  156A  00DD               	movwf	getPercentValue@i+1
  8578  156B  0830               	movf	?___ftdiv+2,w
  8579  156C  00DE               	movwf	getPercentValue@i+2
  8580                           
  8581                           ;Dimmer_B1.c: 756: return (char) (((100 - value) * i) + ((char)((100-60)*0.8)));
  8582  156D  085B               	movf	getPercentValue@value,w
  8583  156E  00D9               	movwf	??_getPercentValue
  8584  156F  01DA               	clrf	??_getPercentValue+1
  8585  1570  09D9               	comf	??_getPercentValue,f
  8586  1571  09DA               	comf	??_getPercentValue+1,f
  8587  1572  0AD9               	incf	??_getPercentValue,f
  8588  1573  1903               	skipnz
  8589  1574  0ADA               	incf	??_getPercentValue+1,f
  8590  1575  0859               	movf	??_getPercentValue,w
  8591  1576  3E64               	addlw	100
  8592  1577  00A8               	movwf	___awtoft@c
  8593  1578  3000               	movlw	0
  8594  1579  3D5A               	addwfc	??_getPercentValue+1,w
  8595  157A  00A9               	movwf	___awtoft@c+1
  8596  157B  319E  2636  3195   	fcall	___awtoft
  8597  157E  0020               	movlb	0	; select bank0
  8598  157F  0828               	movf	?___awtoft,w
  8599  1580  00B1               	movwf	___ftmul@f2
  8600  1581  0829               	movf	?___awtoft+1,w
  8601  1582  00B2               	movwf	___ftmul@f2+1
  8602  1583  082A               	movf	?___awtoft+2,w
  8603  1584  00B3               	movwf	___ftmul@f2+2
  8604  1585  085C               	movf	getPercentValue@i,w
  8605  1586  00AE               	movwf	___ftmul@f1
  8606  1587  085D               	movf	getPercentValue@i+1,w
  8607  1588  00AF               	movwf	___ftmul@f1+1
  8608  1589  085E               	movf	getPercentValue@i+2,w
  8609  158A  00B0               	movwf	___ftmul@f1+2
  8610  158B  318E  2695  3195   	fcall	___ftmul
  8611  158E  0020               	movlb	0	; select bank0
  8612  158F  082E               	movf	?___ftmul,w
  8613  1590  00C1               	movwf	___ftadd@f2
  8614  1591  082F               	movf	?___ftmul+1,w
  8615  1592  00C2               	movwf	___ftadd@f2+1
  8616  1593  0830               	movf	?___ftmul+2,w
  8617  1594  00C3               	movwf	___ftadd@f2+2
  8618  1595  3000               	movlw	0
  8619  1596  00BE               	movwf	___ftadd@f1
  8620  1597  3000               	movlw	0
  8621  1598  00BF               	movwf	___ftadd@f1+1
  8622  1599  3042               	movlw	66
  8623  159A  00C0               	movwf	___ftadd@f1+2
  8624  159B  3184  24DC  3195   	fcall	___ftadd
  8625  159E  0020               	movlb	0	; select bank0
  8626  159F  083E               	movf	?___ftadd,w
  8627  15A0  00CB               	movwf	___fttol@f1
  8628  15A1  083F               	movf	?___ftadd+1,w
  8629  15A2  00CC               	movwf	___fttol@f1+1
  8630  15A3  0840               	movf	?___ftadd+2,w
  8631  15A4  00CD               	movwf	___fttol@f1+2
  8632  15A5  318C  244C         	fcall	___fttol
  8633  15A7  0020               	movlb	0	; select bank0
  8634  15A8  084B               	movf	?___fttol,w
  8635  15A9  0008               	return
  8636  15AA                     __end_of_getPercentValue:	
  8637                           
  8638                           	psect	text39
  8639  0E95                     __ptext39:	
  8640 ;; *************** function ___ftmul *****************
  8641 ;; Defined at:
  8642 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftmul.c"
  8643 ;; Parameters:    Size  Location     Type
  8644 ;;  f1              3   14[BANK0 ] float 
  8645 ;;  f2              3   17[BANK0 ] float 
  8646 ;; Auto vars:     Size  Location     Type
  8647 ;;  f3_as_produc    3   25[BANK0 ] unsigned um
  8648 ;;  sign            1   29[BANK0 ] unsigned char 
  8649 ;;  cntr            1   28[BANK0 ] unsigned char 
  8650 ;;  exp             1   24[BANK0 ] unsigned char 
  8651 ;; Return value:  Size  Location     Type
  8652 ;;                  3   14[BANK0 ] float 
  8653 ;; Registers used:
  8654 ;;		wreg, status,2, status,0, pclath, cstack
  8655 ;; Tracked objects:
  8656 ;;		On entry : 0/0
  8657 ;;		On exit  : 0/0
  8658 ;;		Unchanged: 0/0
  8659 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8660 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8661 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8662 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8663 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8664 ;;Total ram usage:       16 bytes
  8665 ;; Hardware stack levels used:    1
  8666 ;; Hardware stack levels required when called:    6
  8667 ;; This function calls:
  8668 ;;		___ftpack
  8669 ;; This function is called by:
  8670 ;;		_getPercentValue
  8671 ;; This function uses a non-reentrant model
  8672 ;;
  8673                           
  8674                           
  8675                           ;psect for function ___ftmul
  8676  0E95                     ___ftmul:	
  8677                           
  8678                           ;incstack = 0
  8679                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  8680  0E95  0020               	movlb	0	; select bank0
  8681  0E96  082E               	movf	___ftmul@f1,w
  8682  0E97  00B4               	movwf	??___ftmul
  8683  0E98  082F               	movf	___ftmul@f1+1,w
  8684  0E99  00B5               	movwf	??___ftmul+1
  8685  0E9A  0830               	movf	___ftmul@f1+2,w
  8686  0E9B  00B6               	movwf	??___ftmul+2
  8687  0E9C  1003               	clrc
  8688  0E9D  0D35               	rlf	??___ftmul+1,w
  8689  0E9E  0D36               	rlf	??___ftmul+2,w
  8690  0E9F  00B7               	movwf	??___ftmul+3
  8691  0EA0  0837               	movf	??___ftmul+3,w
  8692  0EA1  00B8               	movwf	___ftmul@exp
  8693  0EA2  08B8               	movf	___ftmul@exp,f
  8694  0EA3  1D03               	skipz
  8695  0EA4  2EAC               	goto	l5893
  8696  0EA5  3000               	movlw	0
  8697  0EA6  00AE               	movwf	?___ftmul
  8698  0EA7  3000               	movlw	0
  8699  0EA8  00AF               	movwf	?___ftmul+1
  8700  0EA9  3000               	movlw	0
  8701  0EAA  00B0               	movwf	?___ftmul+2
  8702  0EAB  0008               	return
  8703  0EAC                     l5893:	
  8704  0EAC  0831               	movf	___ftmul@f2,w
  8705  0EAD  00B4               	movwf	??___ftmul
  8706  0EAE  0832               	movf	___ftmul@f2+1,w
  8707  0EAF  00B5               	movwf	??___ftmul+1
  8708  0EB0  0833               	movf	___ftmul@f2+2,w
  8709  0EB1  00B6               	movwf	??___ftmul+2
  8710  0EB2  1003               	clrc
  8711  0EB3  0D35               	rlf	??___ftmul+1,w
  8712  0EB4  0D36               	rlf	??___ftmul+2,w
  8713  0EB5  00B7               	movwf	??___ftmul+3
  8714  0EB6  0837               	movf	??___ftmul+3,w
  8715  0EB7  00BD               	movwf	___ftmul@sign
  8716  0EB8  08BD               	movf	___ftmul@sign,f
  8717  0EB9  1D03               	skipz
  8718  0EBA  2EC2               	goto	l5899
  8719  0EBB  3000               	movlw	0
  8720  0EBC  00AE               	movwf	?___ftmul
  8721  0EBD  3000               	movlw	0
  8722  0EBE  00AF               	movwf	?___ftmul+1
  8723  0EBF  3000               	movlw	0
  8724  0EC0  00B0               	movwf	?___ftmul+2
  8725  0EC1  0008               	return
  8726  0EC2                     l5899:	
  8727  0EC2  083D               	movf	___ftmul@sign,w
  8728  0EC3  3E7B               	addlw	123
  8729  0EC4  00B4               	movwf	??___ftmul
  8730  0EC5  0834               	movf	??___ftmul,w
  8731  0EC6  07B8               	addwf	___ftmul@exp,f
  8732  0EC7  082E               	movf	___ftmul@f1,w
  8733  0EC8  00B4               	movwf	??___ftmul
  8734  0EC9  082F               	movf	___ftmul@f1+1,w
  8735  0ECA  00B5               	movwf	??___ftmul+1
  8736  0ECB  0830               	movf	___ftmul@f1+2,w
  8737  0ECC  00B6               	movwf	??___ftmul+2
  8738  0ECD  3010               	movlw	16
  8739  0ECE                     u4445:	
  8740  0ECE  36B6               	lsrf	??___ftmul+2,f
  8741  0ECF  0CB5               	rrf	??___ftmul+1,f
  8742  0ED0  0CB4               	rrf	??___ftmul,f
  8743  0ED1  0B89               	decfsz	9,f
  8744  0ED2  2ECE               	goto	u4445
  8745  0ED3  0834               	movf	??___ftmul,w
  8746  0ED4  00B7               	movwf	??___ftmul+3
  8747  0ED5  0837               	movf	??___ftmul+3,w
  8748  0ED6  00BD               	movwf	___ftmul@sign
  8749  0ED7  0831               	movf	___ftmul@f2,w
  8750  0ED8  00B4               	movwf	??___ftmul
  8751  0ED9  0832               	movf	___ftmul@f2+1,w
  8752  0EDA  00B5               	movwf	??___ftmul+1
  8753  0EDB  0833               	movf	___ftmul@f2+2,w
  8754  0EDC  00B6               	movwf	??___ftmul+2
  8755  0EDD  3010               	movlw	16
  8756  0EDE                     u4455:	
  8757  0EDE  36B6               	lsrf	??___ftmul+2,f
  8758  0EDF  0CB5               	rrf	??___ftmul+1,f
  8759  0EE0  0CB4               	rrf	??___ftmul,f
  8760  0EE1  0B89               	decfsz	9,f
  8761  0EE2  2EDE               	goto	u4455
  8762  0EE3  0834               	movf	??___ftmul,w
  8763  0EE4  00B7               	movwf	??___ftmul+3
  8764  0EE5  0837               	movf	??___ftmul+3,w
  8765  0EE6  06BD               	xorwf	___ftmul@sign,f
  8766  0EE7  3080               	movlw	128
  8767  0EE8  00B4               	movwf	??___ftmul
  8768  0EE9  0834               	movf	??___ftmul,w
  8769  0EEA  05BD               	andwf	___ftmul@sign,f
  8770  0EEB  17AF               	bsf	___ftmul@f1+1,7
  8771  0EEC  17B2               	bsf	___ftmul@f2+1,7
  8772  0EED  30FF               	movlw	255
  8773  0EEE  05B1               	andwf	___ftmul@f2,f
  8774  0EEF  30FF               	movlw	255
  8775  0EF0  05B2               	andwf	___ftmul@f2+1,f
  8776  0EF1  3000               	movlw	0
  8777  0EF2  05B3               	andwf	___ftmul@f2+2,f
  8778  0EF3  3000               	movlw	0
  8779  0EF4  00B9               	movwf	___ftmul@f3_as_product
  8780  0EF5  3000               	movlw	0
  8781  0EF6  00BA               	movwf	___ftmul@f3_as_product+1
  8782  0EF7  3000               	movlw	0
  8783  0EF8  00BB               	movwf	___ftmul@f3_as_product+2
  8784  0EF9  3007               	movlw	7
  8785  0EFA  00B4               	movwf	??___ftmul
  8786  0EFB  0834               	movf	??___ftmul,w
  8787  0EFC  00BC               	movwf	___ftmul@cntr
  8788  0EFD                     l5911:	
  8789  0EFD  1C2E               	btfss	___ftmul@f1,0
  8790  0EFE  2F05               	goto	l5915
  8791  0EFF  0831               	movf	___ftmul@f2,w
  8792  0F00  07B9               	addwf	___ftmul@f3_as_product,f
  8793  0F01  0832               	movf	___ftmul@f2+1,w
  8794  0F02  3DBA               	addwfc	___ftmul@f3_as_product+1,f
  8795  0F03  0833               	movf	___ftmul@f2+2,w
  8796  0F04  3DBB               	addwfc	___ftmul@f3_as_product+2,f
  8797  0F05                     l5915:	
  8798  0F05  3001               	movlw	1
  8799  0F06                     u4475:	
  8800  0F06  36B0               	lsrf	___ftmul@f1+2,f
  8801  0F07  0CAF               	rrf	___ftmul@f1+1,f
  8802  0F08  0CAE               	rrf	___ftmul@f1,f
  8803  0F09  0B89               	decfsz	9,f
  8804  0F0A  2F06               	goto	u4475
  8805  0F0B  3001               	movlw	1
  8806  0F0C                     u4485:	
  8807  0F0C  35B1               	lslf	___ftmul@f2,f
  8808  0F0D  0DB2               	rlf	___ftmul@f2+1,f
  8809  0F0E  0DB3               	rlf	___ftmul@f2+2,f
  8810  0F0F  0B89               	decfsz	9,f
  8811  0F10  2F0C               	goto	u4485
  8812  0F11  3001               	movlw	1
  8813  0F12  02BC               	subwf	___ftmul@cntr,f
  8814  0F13  1D03               	btfss	3,2
  8815  0F14  2EFD               	goto	l5911
  8816  0F15  3009               	movlw	9
  8817  0F16  00B4               	movwf	??___ftmul
  8818  0F17  0834               	movf	??___ftmul,w
  8819  0F18  00BC               	movwf	___ftmul@cntr
  8820  0F19                     l5923:	
  8821  0F19  1C2E               	btfss	___ftmul@f1,0
  8822  0F1A  2F21               	goto	l5927
  8823  0F1B  0831               	movf	___ftmul@f2,w
  8824  0F1C  07B9               	addwf	___ftmul@f3_as_product,f
  8825  0F1D  0832               	movf	___ftmul@f2+1,w
  8826  0F1E  3DBA               	addwfc	___ftmul@f3_as_product+1,f
  8827  0F1F  0833               	movf	___ftmul@f2+2,w
  8828  0F20  3DBB               	addwfc	___ftmul@f3_as_product+2,f
  8829  0F21                     l5927:	
  8830  0F21  3001               	movlw	1
  8831  0F22                     u4515:	
  8832  0F22  36B0               	lsrf	___ftmul@f1+2,f
  8833  0F23  0CAF               	rrf	___ftmul@f1+1,f
  8834  0F24  0CAE               	rrf	___ftmul@f1,f
  8835  0F25  0B89               	decfsz	9,f
  8836  0F26  2F22               	goto	u4515
  8837  0F27  3001               	movlw	1
  8838  0F28                     u4525:	
  8839  0F28  36BB               	lsrf	___ftmul@f3_as_product+2,f
  8840  0F29  0CBA               	rrf	___ftmul@f3_as_product+1,f
  8841  0F2A  0CB9               	rrf	___ftmul@f3_as_product,f
  8842  0F2B  0B89               	decfsz	9,f
  8843  0F2C  2F28               	goto	u4525
  8844  0F2D  3001               	movlw	1
  8845  0F2E  02BC               	subwf	___ftmul@cntr,f
  8846  0F2F  1D03               	btfss	3,2
  8847  0F30  2F19               	goto	l5923
  8848  0F31  0839               	movf	___ftmul@f3_as_product,w
  8849  0F32  00A0               	movwf	___ftpack@arg
  8850  0F33  083A               	movf	___ftmul@f3_as_product+1,w
  8851  0F34  00A1               	movwf	___ftpack@arg+1
  8852  0F35  083B               	movf	___ftmul@f3_as_product+2,w
  8853  0F36  00A2               	movwf	___ftpack@arg+2
  8854  0F37  0838               	movf	___ftmul@exp,w
  8855  0F38  00B4               	movwf	??___ftmul
  8856  0F39  0834               	movf	??___ftmul,w
  8857  0F3A  00A3               	movwf	___ftpack@exp
  8858  0F3B  083D               	movf	___ftmul@sign,w
  8859  0F3C  00B5               	movwf	??___ftmul+1
  8860  0F3D  0835               	movf	??___ftmul+1,w
  8861  0F3E  00A4               	movwf	___ftpack@sign
  8862  0F3F  3195  25AA         	fcall	___ftpack
  8863  0F41  0020               	movlb	0	; select bank0
  8864  0F42  0820               	movf	?___ftpack,w
  8865  0F43  00AE               	movwf	?___ftmul
  8866  0F44  0821               	movf	?___ftpack+1,w
  8867  0F45  00AF               	movwf	?___ftmul+1
  8868  0F46  0822               	movf	?___ftpack+2,w
  8869  0F47  00B0               	movwf	?___ftmul+2
  8870  0F48  0008               	return
  8871  0F49                     __end_of___ftmul:	
  8872                           
  8873                           	psect	text40
  8874  04DC                     __ptext40:	
  8875 ;; *************** function ___ftadd *****************
  8876 ;; Defined at:
  8877 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftadd.c"
  8878 ;; Parameters:    Size  Location     Type
  8879 ;;  f1              3   30[BANK0 ] float 
  8880 ;;  f2              3   33[BANK0 ] float 
  8881 ;; Auto vars:     Size  Location     Type
  8882 ;;  exp1            1   42[BANK0 ] unsigned char 
  8883 ;;  exp2            1   41[BANK0 ] unsigned char 
  8884 ;;  sign            1   40[BANK0 ] unsigned char 
  8885 ;; Return value:  Size  Location     Type
  8886 ;;                  3   30[BANK0 ] float 
  8887 ;; Registers used:
  8888 ;;		wreg, status,2, status,0, pclath, cstack
  8889 ;; Tracked objects:
  8890 ;;		On entry : 0/0
  8891 ;;		On exit  : 0/0
  8892 ;;		Unchanged: 0/0
  8893 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8894 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8895 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8896 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8897 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8898 ;;Total ram usage:       13 bytes
  8899 ;; Hardware stack levels used:    1
  8900 ;; Hardware stack levels required when called:    6
  8901 ;; This function calls:
  8902 ;;		___ftpack
  8903 ;; This function is called by:
  8904 ;;		_getPercentValue
  8905 ;; This function uses a non-reentrant model
  8906 ;;
  8907                           
  8908                           
  8909                           ;psect for function ___ftadd
  8910  04DC                     ___ftadd:	
  8911                           
  8912                           ;incstack = 0
  8913                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
  8914  04DC  0020               	movlb	0	; select bank0
  8915  04DD  083E               	movf	___ftadd@f1,w
  8916  04DE  00C4               	movwf	??___ftadd
  8917  04DF  083F               	movf	___ftadd@f1+1,w
  8918  04E0  00C5               	movwf	??___ftadd+1
  8919  04E1  0840               	movf	___ftadd@f1+2,w
  8920  04E2  00C6               	movwf	??___ftadd+2
  8921  04E3  1003               	clrc
  8922  04E4  0D45               	rlf	??___ftadd+1,w
  8923  04E5  0D46               	rlf	??___ftadd+2,w
  8924  04E6  00C7               	movwf	??___ftadd+3
  8925  04E7  0847               	movf	??___ftadd+3,w
  8926  04E8  00CA               	movwf	___ftadd@exp1
  8927  04E9  0841               	movf	___ftadd@f2,w
  8928  04EA  00C4               	movwf	??___ftadd
  8929  04EB  0842               	movf	___ftadd@f2+1,w
  8930  04EC  00C5               	movwf	??___ftadd+1
  8931  04ED  0843               	movf	___ftadd@f2+2,w
  8932  04EE  00C6               	movwf	??___ftadd+2
  8933  04EF  1003               	clrc
  8934  04F0  0D45               	rlf	??___ftadd+1,w
  8935  04F1  0D46               	rlf	??___ftadd+2,w
  8936  04F2  00C7               	movwf	??___ftadd+3
  8937  04F3  0847               	movf	??___ftadd+3,w
  8938  04F4  00C9               	movwf	___ftadd@exp2
  8939  04F5  084A               	movf	___ftadd@exp1,w
  8940  04F6  1903               	btfsc	3,2
  8941  04F7  2D04               	goto	l5781
  8942  04F8  0849               	movf	___ftadd@exp2,w
  8943  04F9  024A               	subwf	___ftadd@exp1,w
  8944  04FA  1803               	skipnc
  8945  04FB  2D0B               	goto	l5785
  8946  04FC  034A               	decf	___ftadd@exp1,w
  8947  04FD  3AFF               	xorlw	255
  8948  04FE  0749               	addwf	___ftadd@exp2,w
  8949  04FF  00C4               	movwf	??___ftadd
  8950  0500  3019               	movlw	25
  8951  0501  0244               	subwf	??___ftadd,w
  8952  0502  1C03               	skipc
  8953  0503  2D0B               	goto	l5785
  8954  0504                     l5781:	
  8955  0504  0841               	movf	___ftadd@f2,w
  8956  0505  00BE               	movwf	?___ftadd
  8957  0506  0842               	movf	___ftadd@f2+1,w
  8958  0507  00BF               	movwf	?___ftadd+1
  8959  0508  0843               	movf	___ftadd@f2+2,w
  8960  0509  00C0               	movwf	?___ftadd+2
  8961  050A  0008               	return
  8962  050B                     l5785:	
  8963  050B  0849               	movf	___ftadd@exp2,w
  8964  050C  1903               	btfsc	3,2
  8965  050D  0008               	return
  8966  050E  084A               	movf	___ftadd@exp1,w
  8967  050F  0249               	subwf	___ftadd@exp2,w
  8968  0510  1803               	skipnc
  8969  0511  2D1A               	goto	l5791
  8970  0512  0349               	decf	___ftadd@exp2,w
  8971  0513  3AFF               	xorlw	255
  8972  0514  074A               	addwf	___ftadd@exp1,w
  8973  0515  00C4               	movwf	??___ftadd
  8974  0516  3019               	movlw	25
  8975  0517  0244               	subwf	??___ftadd,w
  8976  0518  1803               	btfsc	3,0
  8977  0519  0008               	return
  8978  051A                     l5791:	
  8979  051A  3006               	movlw	6
  8980  051B  00C4               	movwf	??___ftadd
  8981  051C  0844               	movf	??___ftadd,w
  8982  051D  00C8               	movwf	___ftadd@sign
  8983  051E  1BC0               	btfsc	___ftadd@f1+2,7
  8984  051F  17C8               	bsf	___ftadd@sign,7
  8985  0520  1BC3               	btfsc	___ftadd@f2+2,7
  8986  0521  1748               	bsf	___ftadd@sign,6
  8987  0522  17BF               	bsf	___ftadd@f1+1,7
  8988  0523  30FF               	movlw	255
  8989  0524  05BE               	andwf	___ftadd@f1,f
  8990  0525  30FF               	movlw	255
  8991  0526  05BF               	andwf	___ftadd@f1+1,f
  8992  0527  3000               	movlw	0
  8993  0528  05C0               	andwf	___ftadd@f1+2,f
  8994  0529  17C2               	bsf	___ftadd@f2+1,7
  8995  052A  30FF               	movlw	255
  8996  052B  05C1               	andwf	___ftadd@f2,f
  8997  052C  30FF               	movlw	255
  8998  052D  05C2               	andwf	___ftadd@f2+1,f
  8999  052E  3000               	movlw	0
  9000  052F  05C3               	andwf	___ftadd@f2+2,f
  9001  0530  0849               	movf	___ftadd@exp2,w
  9002  0531  024A               	subwf	___ftadd@exp1,w
  9003  0532  1803               	skipnc
  9004  0533  2D56               	goto	l5813
  9005  0534                     l5803:	
  9006  0534  3001               	movlw	1
  9007  0535                     u4205:	
  9008  0535  35C1               	lslf	___ftadd@f2,f
  9009  0536  0DC2               	rlf	___ftadd@f2+1,f
  9010  0537  0DC3               	rlf	___ftadd@f2+2,f
  9011  0538  0B89               	decfsz	9,f
  9012  0539  2D35               	goto	u4205
  9013  053A  3001               	movlw	1
  9014  053B  02C9               	subwf	___ftadd@exp2,f
  9015  053C  0849               	movf	___ftadd@exp2,w
  9016  053D  064A               	xorwf	___ftadd@exp1,w
  9017  053E  1903               	skipnz
  9018  053F  2D51               	goto	l5811
  9019  0540  3001               	movlw	1
  9020  0541  02C8               	subwf	___ftadd@sign,f
  9021  0542  0848               	movf	___ftadd@sign,w
  9022  0543  3907               	andlw	7
  9023  0544  1903               	btfsc	3,2
  9024  0545  2D51               	goto	l5811
  9025  0546  2D34               	goto	l5803
  9026  0547                     l5809:	
  9027  0547  3001               	movlw	1
  9028  0548                     u4235:	
  9029  0548  36C0               	lsrf	___ftadd@f1+2,f
  9030  0549  0CBF               	rrf	___ftadd@f1+1,f
  9031  054A  0CBE               	rrf	___ftadd@f1,f
  9032  054B  0B89               	decfsz	9,f
  9033  054C  2D48               	goto	u4235
  9034  054D  3001               	movlw	1
  9035  054E  00C4               	movwf	??___ftadd
  9036  054F  0844               	movf	??___ftadd,w
  9037  0550  07CA               	addwf	___ftadd@exp1,f
  9038  0551                     l5811:	
  9039  0551  084A               	movf	___ftadd@exp1,w
  9040  0552  0649               	xorwf	___ftadd@exp2,w
  9041  0553  1903               	btfsc	3,2
  9042  0554  2D7B               	goto	l3076
  9043  0555  2D47               	goto	l5809
  9044  0556                     l5813:	
  9045  0556  084A               	movf	___ftadd@exp1,w
  9046  0557  0249               	subwf	___ftadd@exp2,w
  9047  0558  1803               	skipnc
  9048  0559  2D7B               	goto	l3076
  9049  055A                     l5815:	
  9050  055A  3001               	movlw	1
  9051  055B                     u4265:	
  9052  055B  35BE               	lslf	___ftadd@f1,f
  9053  055C  0DBF               	rlf	___ftadd@f1+1,f
  9054  055D  0DC0               	rlf	___ftadd@f1+2,f
  9055  055E  0B89               	decfsz	9,f
  9056  055F  2D5B               	goto	u4265
  9057  0560  3001               	movlw	1
  9058  0561  02CA               	subwf	___ftadd@exp1,f
  9059  0562  0849               	movf	___ftadd@exp2,w
  9060  0563  064A               	xorwf	___ftadd@exp1,w
  9061  0564  1903               	skipnz
  9062  0565  2D77               	goto	l5823
  9063  0566  3001               	movlw	1
  9064  0567  02C8               	subwf	___ftadd@sign,f
  9065  0568  0848               	movf	___ftadd@sign,w
  9066  0569  3907               	andlw	7
  9067  056A  1903               	btfsc	3,2
  9068  056B  2D77               	goto	l5823
  9069  056C  2D5A               	goto	l5815
  9070  056D                     l5821:	
  9071  056D  3001               	movlw	1
  9072  056E                     u4295:	
  9073  056E  36C3               	lsrf	___ftadd@f2+2,f
  9074  056F  0CC2               	rrf	___ftadd@f2+1,f
  9075  0570  0CC1               	rrf	___ftadd@f2,f
  9076  0571  0B89               	decfsz	9,f
  9077  0572  2D6E               	goto	u4295
  9078  0573  3001               	movlw	1
  9079  0574  00C4               	movwf	??___ftadd
  9080  0575  0844               	movf	??___ftadd,w
  9081  0576  07C9               	addwf	___ftadd@exp2,f
  9082  0577                     l5823:	
  9083  0577  084A               	movf	___ftadd@exp1,w
  9084  0578  0649               	xorwf	___ftadd@exp2,w
  9085  0579  1D03               	skipz
  9086  057A  2D6D               	goto	l5821
  9087  057B                     l3076:	
  9088  057B  1FC8               	btfss	___ftadd@sign,7
  9089  057C  2D8D               	goto	l5827
  9090  057D  30FF               	movlw	255
  9091  057E  06BE               	xorwf	___ftadd@f1,f
  9092  057F  30FF               	movlw	255
  9093  0580  06BF               	xorwf	___ftadd@f1+1,f
  9094  0581  30FF               	movlw	255
  9095  0582  06C0               	xorwf	___ftadd@f1+2,f
  9096  0583  3001               	movlw	1
  9097  0584  07BE               	addwf	___ftadd@f1,f
  9098  0585  3000               	movlw	0
  9099  0586  1803               	skipnc
  9100  0587  3001               	movlw	1
  9101  0588  07BF               	addwf	___ftadd@f1+1,f
  9102  0589  3000               	movlw	0
  9103  058A  1803               	skipnc
  9104  058B  3001               	movlw	1
  9105  058C  07C0               	addwf	___ftadd@f1+2,f
  9106  058D                     l5827:	
  9107  058D  1F48               	btfss	___ftadd@sign,6
  9108  058E  2D9F               	goto	l5831
  9109  058F  30FF               	movlw	255
  9110  0590  06C1               	xorwf	___ftadd@f2,f
  9111  0591  30FF               	movlw	255
  9112  0592  06C2               	xorwf	___ftadd@f2+1,f
  9113  0593  30FF               	movlw	255
  9114  0594  06C3               	xorwf	___ftadd@f2+2,f
  9115  0595  3001               	movlw	1
  9116  0596  07C1               	addwf	___ftadd@f2,f
  9117  0597  3000               	movlw	0
  9118  0598  1803               	skipnc
  9119  0599  3001               	movlw	1
  9120  059A  07C2               	addwf	___ftadd@f2+1,f
  9121  059B  3000               	movlw	0
  9122  059C  1803               	skipnc
  9123  059D  3001               	movlw	1
  9124  059E  07C3               	addwf	___ftadd@f2+2,f
  9125  059F                     l5831:	
  9126  059F  01C8               	clrf	___ftadd@sign
  9127  05A0  083E               	movf	___ftadd@f1,w
  9128  05A1  07C1               	addwf	___ftadd@f2,f
  9129  05A2  083F               	movf	___ftadd@f1+1,w
  9130  05A3  3DC2               	addwfc	___ftadd@f2+1,f
  9131  05A4  0840               	movf	___ftadd@f1+2,w
  9132  05A5  3DC3               	addwfc	___ftadd@f2+2,f
  9133  05A6  1FC3               	btfss	___ftadd@f2+2,7
  9134  05A7  2DBA               	goto	l5841
  9135  05A8  30FF               	movlw	255
  9136  05A9  06C1               	xorwf	___ftadd@f2,f
  9137  05AA  30FF               	movlw	255
  9138  05AB  06C2               	xorwf	___ftadd@f2+1,f
  9139  05AC  30FF               	movlw	255
  9140  05AD  06C3               	xorwf	___ftadd@f2+2,f
  9141  05AE  3001               	movlw	1
  9142  05AF  07C1               	addwf	___ftadd@f2,f
  9143  05B0  3000               	movlw	0
  9144  05B1  1803               	skipnc
  9145  05B2  3001               	movlw	1
  9146  05B3  07C2               	addwf	___ftadd@f2+1,f
  9147  05B4  3000               	movlw	0
  9148  05B5  1803               	skipnc
  9149  05B6  3001               	movlw	1
  9150  05B7  07C3               	addwf	___ftadd@f2+2,f
  9151  05B8  01C8               	clrf	___ftadd@sign
  9152  05B9  0AC8               	incf	___ftadd@sign,f
  9153  05BA                     l5841:	
  9154  05BA  0841               	movf	___ftadd@f2,w
  9155  05BB  00A0               	movwf	___ftpack@arg
  9156  05BC  0842               	movf	___ftadd@f2+1,w
  9157  05BD  00A1               	movwf	___ftpack@arg+1
  9158  05BE  0843               	movf	___ftadd@f2+2,w
  9159  05BF  00A2               	movwf	___ftpack@arg+2
  9160  05C0  084A               	movf	___ftadd@exp1,w
  9161  05C1  00C4               	movwf	??___ftadd
  9162  05C2  0844               	movf	??___ftadd,w
  9163  05C3  00A3               	movwf	___ftpack@exp
  9164  05C4  0848               	movf	___ftadd@sign,w
  9165  05C5  00C5               	movwf	??___ftadd+1
  9166  05C6  0845               	movf	??___ftadd+1,w
  9167  05C7  00A4               	movwf	___ftpack@sign
  9168  05C8  3195  25AA         	fcall	___ftpack
  9169  05CA  0020               	movlb	0	; select bank0
  9170  05CB  0820               	movf	?___ftpack,w
  9171  05CC  00BE               	movwf	?___ftadd
  9172  05CD  0821               	movf	?___ftpack+1,w
  9173  05CE  00BF               	movwf	?___ftadd+1
  9174  05CF  0822               	movf	?___ftpack+2,w
  9175  05D0  00C0               	movwf	?___ftadd+2
  9176  05D1  0008               	return
  9177  05D2                     __end_of___ftadd:	
  9178                           
  9179                           	psect	text41
  9180  1B6E                     __ptext41:	
  9181 ;; *************** function _getBuz_GO *****************
  9182 ;; Defined at:
  9183 ;;		line 82 in file "../src/Buzzer_B1.c"
  9184 ;; Parameters:    Size  Location     Type
  9185 ;;		None
  9186 ;; Auto vars:     Size  Location     Type
  9187 ;;  i               2    4[BANK0 ] int 
  9188 ;; Return value:  Size  Location     Type
  9189 ;;                  2    0[BANK0 ] int 
  9190 ;; Registers used:
  9191 ;;		wreg, status,2, status,0
  9192 ;; Tracked objects:
  9193 ;;		On entry : 0/0
  9194 ;;		On exit  : 0/0
  9195 ;;		Unchanged: 0/0
  9196 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9197 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9198 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9199 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9200 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9201 ;;Total ram usage:        6 bytes
  9202 ;; Hardware stack levels used:    1
  9203 ;; Hardware stack levels required when called:    5
  9204 ;; This function calls:
  9205 ;;		Nothing
  9206 ;; This function is called by:
  9207 ;;		_setRF_Main
  9208 ;; This function uses a non-reentrant model
  9209 ;;
  9210                           
  9211                           
  9212                           ;psect for function _getBuz_GO
  9213  1B6E                     _getBuz_GO:	
  9214                           
  9215                           ;Buzzer_B1.c: 83: int i = Buz1.GO;
  9216                           
  9217                           ;incstack = 0
  9218                           ; Regs used in _getBuz_GO: [wreg+status,2+status,0]
  9219  1B6E  0021               	movlb	1	; select bank1
  9220  1B6F  0C35               	rrf	_Buz1^(0+128),w
  9221  1B70  3901               	andlw	1
  9222  1B71  0020               	movlb	0	; select bank0
  9223  1B72  00A2               	movwf	??_getBuz_GO
  9224  1B73  01A3               	clrf	??_getBuz_GO+1
  9225  1B74  0822               	movf	??_getBuz_GO,w
  9226  1B75  00A4               	movwf	getBuz_GO@i
  9227  1B76  0823               	movf	??_getBuz_GO+1,w
  9228  1B77  00A5               	movwf	getBuz_GO@i+1
  9229                           
  9230                           ;Buzzer_B1.c: 84: return i;
  9231  1B78  0825               	movf	getBuz_GO@i+1,w
  9232  1B79  01A1               	clrf	?_getBuz_GO+1
  9233  1B7A  07A1               	addwf	?_getBuz_GO+1,f
  9234  1B7B  0824               	movf	getBuz_GO@i,w
  9235  1B7C  01A0               	clrf	?_getBuz_GO
  9236  1B7D  07A0               	addwf	?_getBuz_GO,f
  9237  1B7E  0008               	return
  9238  1B7F                     __end_of_getBuz_GO:	
  9239                           
  9240                           	psect	text42
  9241  1ADE                     __ptext42:	
  9242 ;; *************** function _RF_RxDisable *****************
  9243 ;; Defined at:
  9244 ;;		line 197 in file "../src/RF_Control_B1.c"
  9245 ;; Parameters:    Size  Location     Type
  9246 ;;		None
  9247 ;; Auto vars:     Size  Location     Type
  9248 ;;		None
  9249 ;; Return value:  Size  Location     Type
  9250 ;;		None               void
  9251 ;; Registers used:
  9252 ;;		wreg, status,2, status,0, pclath, cstack
  9253 ;; Tracked objects:
  9254 ;;		On entry : 0/0
  9255 ;;		On exit  : 0/0
  9256 ;;		Unchanged: 0/0
  9257 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9258 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9259 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9260 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9261 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9262 ;;Total ram usage:        0 bytes
  9263 ;; Hardware stack levels used:    1
  9264 ;; Hardware stack levels required when called:    7
  9265 ;; This function calls:
  9266 ;;		_CC2500_WriteCommand
  9267 ;; This function is called by:
  9268 ;;		_setRF_Main
  9269 ;; This function uses a non-reentrant model
  9270 ;;
  9271                           
  9272                           
  9273                           ;psect for function _RF_RxDisable
  9274  1ADE                     _RF_RxDisable:	
  9275                           
  9276                           ;RF_Control_B1.c: 198: if (RF1.ReceiveGO == 1 || RF1.RxStatus == 1) {
  9277                           
  9278                           ;incstack = 0
  9279                           ; Regs used in _RF_RxDisable: [wreg+status,2+status,0+pclath+cstack]
  9280  1ADE  0021               	movlb	1	; select bank1
  9281  1ADF  18C1               	btfsc	_RF1^(0+128),1
  9282  1AE0  2AE3               	goto	l2311
  9283  1AE1  1DC1               	btfss	_RF1^(0+128),3
  9284  1AE2  0008               	return
  9285  1AE3                     l2311:	
  9286                           
  9287                           ;RF_Control_B1.c: 199: RF1.RxStatus = 0;
  9288  1AE3  11C1               	bcf	_RF1^(0+128),3
  9289                           
  9290                           ;RF_Control_B1.c: 200: RF1.ReceiveGO = 0;
  9291  1AE4  10C1               	bcf	_RF1^(0+128),1
  9292                           
  9293                           ;RF_Control_B1.c: 201: CC2500_WriteCommand(0x36);
  9294  1AE5  3036               	movlw	54
  9295  1AE6  319A  22FD  319A   	fcall	_CC2500_WriteCommand
  9296                           
  9297                           ;RF_Control_B1.c: 202: CC2500_WriteCommand(0x3A);
  9298  1AE9  303A               	movlw	58
  9299  1AEA  319A  22FD         	fcall	_CC2500_WriteCommand
  9300  1AEC  0008               	return
  9301  1AED                     __end_of_RF_RxDisable:	
  9302                           
  9303                           	psect	text43
  9304  129D                     __ptext43:	
  9305 ;; *************** function _CC2500_TxData *****************
  9306 ;; Defined at:
  9307 ;;		line 32 in file "../src/CC2500_B1.c"
  9308 ;; Parameters:    Size  Location     Type
  9309 ;;		None
  9310 ;; Auto vars:     Size  Location     Type
  9311 ;;  loop_e          1    5[BANK0 ] unsigned char 
  9312 ;; Return value:  Size  Location     Type
  9313 ;;		None               void
  9314 ;; Registers used:
  9315 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9316 ;; Tracked objects:
  9317 ;;		On entry : 0/0
  9318 ;;		On exit  : 0/0
  9319 ;;		Unchanged: 0/0
  9320 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9321 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9322 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9323 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9324 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9325 ;;Total ram usage:        2 bytes
  9326 ;; Hardware stack levels used:    1
  9327 ;; Hardware stack levels required when called:    7
  9328 ;; This function calls:
  9329 ;;		_CC2500_WriteByte
  9330 ;;		_CC2500_WriteCommand
  9331 ;; This function is called by:
  9332 ;;		_setRF_Main
  9333 ;; This function uses a non-reentrant model
  9334 ;;
  9335                           
  9336                           
  9337                           ;psect for function _CC2500_TxData
  9338  129D                     _CC2500_TxData:	
  9339                           
  9340                           ;CC2500_B1.c: 33: unsigned char loop_e;
  9341                           ;CC2500_B1.c: 35: RC4 = 0;
  9342                           
  9343                           ;incstack = 0
  9344                           ; Regs used in _CC2500_TxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9345  129D  0020               	movlb	0	; select bank0
  9346  129E  120E               	bcf	14,4	;volatile
  9347                           
  9348                           ;CC2500_B1.c: 36: SPI0Buffer = 0x3F + 0x40;
  9349  129F  307F               	movlw	127
  9350  12A0  00A4               	movwf	??_CC2500_TxData
  9351  12A1  0824               	movf	??_CC2500_TxData,w
  9352  12A2  0021               	movlb	1	; select bank1
  9353  12A3  00D2               	movwf	_SPI0Buffer^(0+128)
  9354  12A4                     l266:	
  9355                           ;CC2500_B1.c: 37: while (RC2 == 1);
  9356                           
  9357  12A4  0020               	movlb	0	; select bank0
  9358  12A5  190E               	btfsc	14,2	;volatile
  9359  12A6  2AA4               	goto	l266
  9360                           
  9361                           ;CC2500_B1.c: 38: CC2500_WriteByte();
  9362  12A7  319C  24C5  3192   	fcall	_CC2500_WriteByte
  9363                           
  9364                           ;CC2500_B1.c: 39: SPI0Buffer = Tx_Length;
  9365  12AA  0021               	movlb	1	; select bank1
  9366  12AB  0853               	movf	_Tx_Length^(0+128),w
  9367  12AC  0020               	movlb	0	; select bank0
  9368  12AD  00A4               	movwf	??_CC2500_TxData
  9369  12AE  0824               	movf	??_CC2500_TxData,w
  9370  12AF  0021               	movlb	1	; select bank1
  9371  12B0  00D2               	movwf	_SPI0Buffer^(0+128)
  9372                           
  9373                           ;CC2500_B1.c: 40: CC2500_WriteByte();
  9374  12B1  319C  24C5  3192   	fcall	_CC2500_WriteByte
  9375                           
  9376                           ;CC2500_B1.c: 41: for (loop_e = 0; loop_e < Tx_Length; loop_e++) {
  9377  12B4  0020               	movlb	0	; select bank0
  9378  12B5  01A5               	clrf	CC2500_TxData@loop_e
  9379  12B6                     l6661:	
  9380  12B6  0021               	movlb	1	; select bank1
  9381  12B7  0853               	movf	_Tx_Length^(0+128),w
  9382  12B8  0020               	movlb	0	; select bank0
  9383  12B9  0225               	subwf	CC2500_TxData@loop_e,w
  9384  12BA  1803               	btfsc	3,0
  9385  12BB  2ACE               	goto	l271
  9386                           
  9387                           ;CC2500_B1.c: 42: SPI0Buffer = RF_Data[loop_e];
  9388  12BC  0825               	movf	CC2500_TxData@loop_e,w
  9389  12BD  3EA0               	addlw	_RF_Data& (0+255)
  9390  12BE  0086               	movwf	6
  9391  12BF  0187               	clrf	7
  9392  12C0  0801               	movf	1,w
  9393  12C1  00A4               	movwf	??_CC2500_TxData
  9394  12C2  0824               	movf	??_CC2500_TxData,w
  9395  12C3  0021               	movlb	1	; select bank1
  9396  12C4  00D2               	movwf	_SPI0Buffer^(0+128)
  9397                           
  9398                           ;CC2500_B1.c: 43: CC2500_WriteByte();
  9399  12C5  319C  24C5  3192   	fcall	_CC2500_WriteByte
  9400  12C8  3001               	movlw	1
  9401  12C9  0020               	movlb	0	; select bank0
  9402  12CA  00A4               	movwf	??_CC2500_TxData
  9403  12CB  0824               	movf	??_CC2500_TxData,w
  9404  12CC  07A5               	addwf	CC2500_TxData@loop_e,f
  9405  12CD  2AB6               	goto	l6661
  9406  12CE                     l271:	
  9407                           
  9408                           ;CC2500_B1.c: 44: }
  9409                           ;CC2500_B1.c: 45: RC4 = 1;
  9410  12CE  160E               	bsf	14,4	;volatile
  9411                           
  9412                           ;CC2500_B1.c: 46: CC2500_WriteCommand(0x35);
  9413  12CF  3035               	movlw	53
  9414  12D0  319A  22FD  3192   	fcall	_CC2500_WriteCommand
  9415  12D3                     l272:	
  9416                           ;CC2500_B1.c: 47: while (RB0 == 0);
  9417                           
  9418  12D3  0020               	movlb	0	; select bank0
  9419  12D4  1C0D               	btfss	13,0	;volatile
  9420  12D5  2AD3               	goto	l272
  9421  12D6                     l275:	
  9422                           ;CC2500_B1.c: 48: while (RB0 == 1);
  9423                           
  9424  12D6  180D               	btfsc	13,0	;volatile
  9425  12D7  2AD6               	goto	l275
  9426                           
  9427                           ;CC2500_B1.c: 49: CC2500_WriteCommand(0x36);
  9428  12D8  3036               	movlw	54
  9429  12D9  319A  22FD  3192   	fcall	_CC2500_WriteCommand
  9430                           
  9431                           ;CC2500_B1.c: 50: CC2500_WriteCommand(0x3B);
  9432  12DC  303B               	movlw	59
  9433  12DD  319A  22FD         	fcall	_CC2500_WriteCommand
  9434                           
  9435                           ;CC2500_B1.c: 51: Transceive_OK = 1;
  9436  12DF  14FD               	bsf	_Transceive_OK/(0+8),_Transceive_OK& (0+7)
  9437  12E0  0008               	return
  9438  12E1                     __end_of_CC2500_TxData:	
  9439                           
  9440                           	psect	text44
  9441  0F49                     __ptext44:	
  9442 ;; *************** function _CC2500_RxData *****************
  9443 ;; Defined at:
  9444 ;;		line 57 in file "../src/CC2500_B1.c"
  9445 ;; Parameters:    Size  Location     Type
  9446 ;;		None
  9447 ;; Auto vars:     Size  Location     Type
  9448 ;;  loop_f          1   15[BANK0 ] unsigned char 
  9449 ;; Return value:  Size  Location     Type
  9450 ;;		None               void
  9451 ;; Registers used:
  9452 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9453 ;; Tracked objects:
  9454 ;;		On entry : 0/0
  9455 ;;		On exit  : 0/0
  9456 ;;		Unchanged: 0/0
  9457 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9458 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9459 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9460 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9461 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9462 ;;Total ram usage:        3 bytes
  9463 ;; Hardware stack levels used:    1
  9464 ;; Hardware stack levels required when called:    7
  9465 ;; This function calls:
  9466 ;;		_CC2500_ReadByte
  9467 ;;		_CC2500_ReadStatus
  9468 ;;		_CC2500_WriteByte
  9469 ;;		_CC2500_WriteCommand
  9470 ;;		_setBuz
  9471 ;; This function is called by:
  9472 ;;		_setRF_Main
  9473 ;; This function uses a non-reentrant model
  9474 ;;
  9475                           
  9476                           
  9477                           ;psect for function _CC2500_RxData
  9478  0F49                     _CC2500_RxData:	
  9479                           
  9480                           ;CC2500_B1.c: 58: unsigned char loop_f;
  9481                           ;CC2500_B1.c: 62: if (RB0 == 1)
  9482                           
  9483                           ;incstack = 0
  9484                           ; Regs used in _CC2500_RxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9485  0F49  0020               	movlb	0	; select bank0
  9486  0F4A  180D               	btfsc	13,0	;volatile
  9487  0F4B  2F78               	goto	l282
  9488  0F4C  2F7B               	goto	l6681
  9489  0F4D                     l6673:	
  9490                           ;CC2500_B1.c: 63: {
  9491                           ;CC2500_B1.c: 64: while (RB0 == 1) {
  9492                           
  9493                           
  9494                           ;CC2500_B1.c: 65: myMain->pcount1++;
  9495  0F4D  087B               	movf	_myMain,w
  9496  0F4E  3E10               	addlw	16
  9497  0F4F  0086               	movwf	6
  9498  0F50  3002               	movlw	2	; select bank4/5
  9499  0F51  0087               	movwf	7
  9500  0F52  3001               	movlw	1
  9501  0F53  0781               	addwf	1,f
  9502  0F54  3141               	addfsr 1,1
  9503  0F55  1803               	skipnc
  9504  0F56  0A81               	incf	1,f
  9505                           
  9506                           ;CC2500_B1.c: 66: if (myMain->pcount1 >= 10000) {
  9507  0F57  087B               	movf	_myMain,w
  9508  0F58  3E10               	addlw	16
  9509  0F59  0086               	movwf	6
  9510  0F5A  3002               	movlw	2	; select bank4/5
  9511  0F5B  0087               	movwf	7
  9512  0F5C  3F40               	moviw [0]fsr1
  9513  0F5D  00AD               	movwf	??_CC2500_RxData
  9514  0F5E  3F41               	moviw [1]fsr1
  9515  0F5F  00AE               	movwf	??_CC2500_RxData+1
  9516  0F60  3027               	movlw	39
  9517  0F61  022E               	subwf	??_CC2500_RxData+1,w
  9518  0F62  3010               	movlw	16
  9519  0F63  1903               	skipnz
  9520  0F64  022D               	subwf	??_CC2500_RxData,w
  9521  0F65  1C03               	skipc
  9522  0F66  2F78               	goto	l282
  9523                           
  9524                           ;CC2500_B1.c: 67: myMain->pcount1 = 0;
  9525  0F67  087B               	movf	_myMain,w
  9526  0F68  3E10               	addlw	16
  9527  0F69  0086               	movwf	6
  9528  0F6A  3002               	movlw	2	; select bank4/5
  9529  0F6B  0087               	movwf	7
  9530  0F6C  3000               	movlw	0
  9531  0F6D  3FC0               	movwi [0]fsr1
  9532  0F6E  3FC1               	movwi [1]fsr1
  9533                           
  9534                           ;CC2500_B1.c: 68: setBuz(1, 250);
  9535  0F6F  30FA               	movlw	250
  9536  0F70  00A9               	movwf	setBuz@time
  9537  0F71  3000               	movlw	0
  9538  0F72  00AA               	movwf	setBuz@time+1
  9539  0F73  3001               	movlw	1
  9540  0F74  3194  24F6  318F   	fcall	_setBuz
  9541                           
  9542                           ;CC2500_B1.c: 69: break;
  9543  0F77  2F7B               	goto	l6681
  9544  0F78                     l282:	
  9545  0F78  0020               	movlb	0	; select bank0
  9546  0F79  180D               	btfsc	13,0	;volatile
  9547  0F7A  2F4D               	goto	l6673
  9548  0F7B                     l6681:	
  9549                           ;CC2500_B1.c: 70: }
  9550                           ;CC2500_B1.c: 71: };
  9551                           
  9552                           
  9553                           ;CC2500_B1.c: 72: }
  9554                           ;CC2500_B1.c: 74: CC2500_ReadStatus(0x3B);
  9555  0F7B  303B               	movlw	59
  9556  0F7C  319D  252B  318F   	fcall	_CC2500_ReadStatus
  9557                           
  9558                           ;CC2500_B1.c: 75: if (s_data != 0) {
  9559  0F7F  0021               	movlb	1	; select bank1
  9560  0F80  0856               	movf	_s_data^(0+128),w
  9561  0F81  1903               	btfsc	3,2
  9562  0F82  2FF8               	goto	l6723
  9563                           
  9564                           ;CC2500_B1.c: 76: RC4 = 0;
  9565  0F83  0020               	movlb	0	; select bank0
  9566  0F84  120E               	bcf	14,4	;volatile
  9567                           
  9568                           ;CC2500_B1.c: 77: SPI0Buffer = 0x3F + 0xC0;
  9569  0F85  30FF               	movlw	255
  9570  0F86  00AD               	movwf	??_CC2500_RxData
  9571  0F87  082D               	movf	??_CC2500_RxData,w
  9572  0F88  0021               	movlb	1	; select bank1
  9573  0F89  00D2               	movwf	_SPI0Buffer^(0+128)
  9574  0F8A                     l287:	
  9575                           ;CC2500_B1.c: 78: while (RC2 == 1) {
  9576                           
  9577  0F8A  0020               	movlb	0	; select bank0
  9578  0F8B  1D0E               	btfss	14,2	;volatile
  9579  0F8C  2FB8               	goto	l6697
  9580                           
  9581                           ;CC2500_B1.c: 79: myMain->pcount2++;
  9582  0F8D  087B               	movf	_myMain,w
  9583  0F8E  3E12               	addlw	18
  9584  0F8F  0086               	movwf	6
  9585  0F90  3002               	movlw	2	; select bank4/5
  9586  0F91  0087               	movwf	7
  9587  0F92  3001               	movlw	1
  9588  0F93  0781               	addwf	1,f
  9589  0F94  3141               	addfsr 1,1
  9590  0F95  1803               	skipnc
  9591  0F96  0A81               	incf	1,f
  9592                           
  9593                           ;CC2500_B1.c: 80: if (myMain->pcount2 >= 10000) {
  9594  0F97  087B               	movf	_myMain,w
  9595  0F98  3E12               	addlw	18
  9596  0F99  0086               	movwf	6
  9597  0F9A  3002               	movlw	2	; select bank4/5
  9598  0F9B  0087               	movwf	7
  9599  0F9C  3F40               	moviw [0]fsr1
  9600  0F9D  0020               	movlb	0	; select bank0
  9601  0F9E  00AD               	movwf	??_CC2500_RxData
  9602  0F9F  3F41               	moviw [1]fsr1
  9603  0FA0  00AE               	movwf	??_CC2500_RxData+1
  9604  0FA1  3027               	movlw	39
  9605  0FA2  022E               	subwf	??_CC2500_RxData+1,w
  9606  0FA3  3010               	movlw	16
  9607  0FA4  1903               	skipnz
  9608  0FA5  022D               	subwf	??_CC2500_RxData,w
  9609  0FA6  1C03               	skipc
  9610  0FA7  2F8A               	goto	l287
  9611                           
  9612                           ;CC2500_B1.c: 81: myMain->pcount2 = 0;
  9613  0FA8  087B               	movf	_myMain,w
  9614  0FA9  3E12               	addlw	18
  9615  0FAA  0086               	movwf	6
  9616  0FAB  3002               	movlw	2	; select bank4/5
  9617  0FAC  0087               	movwf	7
  9618  0FAD  3000               	movlw	0
  9619  0FAE  3FC0               	movwi [0]fsr1
  9620  0FAF  3FC1               	movwi [1]fsr1
  9621                           
  9622                           ;CC2500_B1.c: 82: setBuz(2, 250);
  9623  0FB0  30FA               	movlw	250
  9624  0FB1  00A9               	movwf	setBuz@time
  9625  0FB2  3000               	movlw	0
  9626  0FB3  00AA               	movwf	setBuz@time+1
  9627  0FB4  3002               	movlw	2
  9628  0FB5  3194  24F6  318F   	fcall	_setBuz
  9629  0FB8                     l6697:	
  9630                           ;CC2500_B1.c: 83: break;
  9631                           
  9632                           
  9633                           ;CC2500_B1.c: 84: }
  9634                           ;CC2500_B1.c: 85: };
  9635                           ;CC2500_B1.c: 87: CC2500_WriteByte();
  9636  0FB8  319C  24C5  318F   	fcall	_CC2500_WriteByte
  9637                           
  9638                           ;CC2500_B1.c: 89: CC2500_ReadByte();
  9639  0FBB  319D  257E  318F   	fcall	_CC2500_ReadByte
  9640                           
  9641                           ;CC2500_B1.c: 90: Rx_Length = SPI0Buffer;
  9642  0FBE  0021               	movlb	1	; select bank1
  9643  0FBF  0852               	movf	_SPI0Buffer^(0+128),w
  9644  0FC0  0020               	movlb	0	; select bank0
  9645  0FC1  00AD               	movwf	??_CC2500_RxData
  9646  0FC2  082D               	movf	??_CC2500_RxData,w
  9647  0FC3  0021               	movlb	1	; select bank1
  9648  0FC4  00D1               	movwf	_Rx_Length^(0+128)
  9649                           
  9650                           ;CC2500_B1.c: 91: for (loop_f = 0; loop_f < Rx_Length; loop_f++) {
  9651  0FC5  0020               	movlb	0	; select bank0
  9652  0FC6  01AF               	clrf	CC2500_RxData@loop_f
  9653  0FC7                     l6709:	
  9654  0FC7  0021               	movlb	1	; select bank1
  9655  0FC8  0851               	movf	_Rx_Length^(0+128),w
  9656  0FC9  0020               	movlb	0	; select bank0
  9657  0FCA  022F               	subwf	CC2500_RxData@loop_f,w
  9658  0FCB  1803               	btfsc	3,0
  9659  0FCC  2FDF               	goto	l6711
  9660                           
  9661                           ;CC2500_B1.c: 92: CC2500_ReadByte();
  9662  0FCD  319D  257E  318F   	fcall	_CC2500_ReadByte
  9663                           
  9664                           ;CC2500_B1.c: 93: RF_Data[loop_f] = SPI0Buffer;
  9665  0FD0  0021               	movlb	1	; select bank1
  9666  0FD1  0852               	movf	_SPI0Buffer^(0+128),w
  9667  0FD2  0020               	movlb	0	; select bank0
  9668  0FD3  00AD               	movwf	??_CC2500_RxData
  9669  0FD4  082F               	movf	CC2500_RxData@loop_f,w
  9670  0FD5  3EA0               	addlw	_RF_Data& (0+255)
  9671  0FD6  0086               	movwf	6
  9672  0FD7  0187               	clrf	7
  9673  0FD8  082D               	movf	??_CC2500_RxData,w
  9674  0FD9  0081               	movwf	1
  9675  0FDA  3001               	movlw	1
  9676  0FDB  00AD               	movwf	??_CC2500_RxData
  9677  0FDC  082D               	movf	??_CC2500_RxData,w
  9678  0FDD  07AF               	addwf	CC2500_RxData@loop_f,f
  9679  0FDE  2FC7               	goto	l6709
  9680  0FDF                     l6711:	
  9681                           
  9682                           ;CC2500_B1.c: 94: }
  9683                           ;CC2500_B1.c: 95: CC2500_ReadByte();
  9684  0FDF  319D  257E  318F   	fcall	_CC2500_ReadByte
  9685                           
  9686                           ;CC2500_B1.c: 96: RSSI = SPI0Buffer;
  9687  0FE2  0021               	movlb	1	; select bank1
  9688  0FE3  0852               	movf	_SPI0Buffer^(0+128),w
  9689  0FE4  0020               	movlb	0	; select bank0
  9690  0FE5  00AD               	movwf	??_CC2500_RxData
  9691  0FE6  082D               	movf	??_CC2500_RxData,w
  9692  0FE7  0021               	movlb	1	; select bank1
  9693  0FE8  00D0               	movwf	_RSSI^(0+128)
  9694                           
  9695                           ;CC2500_B1.c: 97: CC2500_ReadByte();
  9696  0FE9  319D  257E  318F   	fcall	_CC2500_ReadByte
  9697                           
  9698                           ;CC2500_B1.c: 98: CRC = SPI0Buffer;
  9699  0FEC  0021               	movlb	1	; select bank1
  9700  0FED  0852               	movf	_SPI0Buffer^(0+128),w
  9701  0FEE  0020               	movlb	0	; select bank0
  9702  0FEF  00AD               	movwf	??_CC2500_RxData
  9703  0FF0  082D               	movf	??_CC2500_RxData,w
  9704  0FF1  0021               	movlb	1	; select bank1
  9705  0FF2  00CA               	movwf	_CRC^(0+128)
  9706                           
  9707                           ;CC2500_B1.c: 99: RC4 = 1;
  9708  0FF3  0020               	movlb	0	; select bank0
  9709  0FF4  160E               	bsf	14,4	;volatile
  9710                           
  9711                           ;CC2500_B1.c: 100: if (CRC & 0x80)
  9712  0FF5  0021               	movlb	1	; select bank1
  9713  0FF6  1BCA               	btfsc	_CRC^(0+128),7
  9714                           
  9715                           ;CC2500_B1.c: 101: Receive_OK = 1;
  9716  0FF7  147D               	bsf	_Receive_OK/(0+8),_Receive_OK& (0+7)
  9717  0FF8                     l6723:	
  9718                           
  9719                           ;CC2500_B1.c: 102: }
  9720                           ;CC2500_B1.c: 104: CC2500_WriteCommand(0x36);
  9721  0FF8  3036               	movlw	54
  9722  0FF9  319A  22FD  318F   	fcall	_CC2500_WriteCommand
  9723                           
  9724                           ;CC2500_B1.c: 105: CC2500_WriteCommand(0x3A);
  9725  0FFC  303A               	movlw	58
  9726  0FFD  319A  22FD         	fcall	_CC2500_WriteCommand
  9727  0FFF  0008               	return
  9728  1000                     __end_of_CC2500_RxData:	
  9729                           
  9730                           	psect	text45
  9731  1D2B                     __ptext45:	
  9732 ;; *************** function _CC2500_ReadStatus *****************
  9733 ;; Defined at:
  9734 ;;		line 277 in file "../src/CC2500_B1.c"
  9735 ;; Parameters:    Size  Location     Type
  9736 ;;  status_addr     1    wreg     unsigned char 
  9737 ;; Auto vars:     Size  Location     Type
  9738 ;;  status_addr     1    3[BANK0 ] unsigned char 
  9739 ;; Return value:  Size  Location     Type
  9740 ;;		None               void
  9741 ;; Registers used:
  9742 ;;		wreg, status,2, status,0, pclath, cstack
  9743 ;; Tracked objects:
  9744 ;;		On entry : 0/0
  9745 ;;		On exit  : 0/0
  9746 ;;		Unchanged: 0/0
  9747 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9748 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9749 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9750 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9751 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9752 ;;Total ram usage:        2 bytes
  9753 ;; Hardware stack levels used:    1
  9754 ;; Hardware stack levels required when called:    6
  9755 ;; This function calls:
  9756 ;;		_CC2500_ReadByte
  9757 ;;		_CC2500_WriteByte
  9758 ;; This function is called by:
  9759 ;;		_CC2500_RxData
  9760 ;; This function uses a non-reentrant model
  9761 ;;
  9762                           
  9763                           
  9764                           ;psect for function _CC2500_ReadStatus
  9765  1D2B                     _CC2500_ReadStatus:	
  9766                           
  9767                           ;incstack = 0
  9768                           ; Regs used in _CC2500_ReadStatus: [wreg+status,2+status,0+pclath+cstack]
  9769                           ;CC2500_ReadStatus@status_addr stored from wreg
  9770  1D2B  0020               	movlb	0	; select bank0
  9771  1D2C  00A3               	movwf	CC2500_ReadStatus@status_addr
  9772                           
  9773                           ;CC2500_B1.c: 278: RC4 = 0;
  9774  1D2D  120E               	bcf	14,4	;volatile
  9775                           
  9776                           ;CC2500_B1.c: 279: SPI0Buffer = status_addr + 0xC0;
  9777  1D2E  0823               	movf	CC2500_ReadStatus@status_addr,w
  9778  1D2F  3EC0               	addlw	192
  9779  1D30  00A2               	movwf	??_CC2500_ReadStatus
  9780  1D31  0822               	movf	??_CC2500_ReadStatus,w
  9781  1D32  0021               	movlb	1	; select bank1
  9782  1D33  00D2               	movwf	_SPI0Buffer^(0+128)
  9783  1D34                     l364:	
  9784                           ;CC2500_B1.c: 281: while (RC2 == 1);
  9785                           
  9786  1D34  0020               	movlb	0	; select bank0
  9787  1D35  190E               	btfsc	14,2	;volatile
  9788  1D36  2D34               	goto	l364
  9789                           
  9790                           ;CC2500_B1.c: 283: CC2500_WriteByte();
  9791  1D37  319C  24C5  319D   	fcall	_CC2500_WriteByte
  9792                           
  9793                           ;CC2500_B1.c: 284: CC2500_ReadByte();
  9794  1D3A  319D  257E         	fcall	_CC2500_ReadByte
  9795                           
  9796                           ;CC2500_B1.c: 285: RC4 = 1;
  9797  1D3C  0020               	movlb	0	; select bank0
  9798  1D3D  160E               	bsf	14,4	;volatile
  9799                           
  9800                           ;CC2500_B1.c: 287: s_data = SPI0Buffer;
  9801  1D3E  0021               	movlb	1	; select bank1
  9802  1D3F  0852               	movf	_SPI0Buffer^(0+128),w
  9803  1D40  0020               	movlb	0	; select bank0
  9804  1D41  00A2               	movwf	??_CC2500_ReadStatus
  9805  1D42  0822               	movf	??_CC2500_ReadStatus,w
  9806  1D43  0021               	movlb	1	; select bank1
  9807  1D44  00D6               	movwf	_s_data^(0+128)
  9808  1D45  0008               	return
  9809  1D46                     __end_of_CC2500_ReadStatus:	
  9810                           
  9811                           	psect	text46
  9812  1D7E                     __ptext46:	
  9813 ;; *************** function _CC2500_ReadByte *****************
  9814 ;; Defined at:
  9815 ;;		line 221 in file "../src/CC2500_B1.c"
  9816 ;; Parameters:    Size  Location     Type
  9817 ;;		None
  9818 ;; Auto vars:     Size  Location     Type
  9819 ;;  loop_b          1    1[BANK0 ] unsigned char 
  9820 ;; Return value:  Size  Location     Type
  9821 ;;		None               void
  9822 ;; Registers used:
  9823 ;;		wreg, status,2, status,0
  9824 ;; Tracked objects:
  9825 ;;		On entry : 0/0
  9826 ;;		On exit  : 0/0
  9827 ;;		Unchanged: 0/0
  9828 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9829 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9830 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9831 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9832 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9833 ;;Total ram usage:        2 bytes
  9834 ;; Hardware stack levels used:    1
  9835 ;; Hardware stack levels required when called:    5
  9836 ;; This function calls:
  9837 ;;		Nothing
  9838 ;; This function is called by:
  9839 ;;		_CC2500_RxData
  9840 ;;		_CC2500_ReadStatus
  9841 ;;		_CC2500_ReadREG
  9842 ;; This function uses a non-reentrant model
  9843 ;;
  9844                           
  9845                           
  9846                           ;psect for function _CC2500_ReadByte
  9847  1D7E                     _CC2500_ReadByte:	
  9848                           
  9849                           ;CC2500_B1.c: 222: unsigned char loop_b;
  9850                           ;CC2500_B1.c: 223: for (loop_b = 0; loop_b < 8; loop_b++) {
  9851                           
  9852                           ;incstack = 0
  9853                           ; Regs used in _CC2500_ReadByte: [wreg+status,2+status,0]
  9854  1D7E  0020               	movlb	0	; select bank0
  9855  1D7F  01A1               	clrf	CC2500_ReadByte@loop_b
  9856  1D80                     L5:	
  9857  1D80  3008               	movlw	8
  9858  1D81  0221               	subwf	CC2500_ReadByte@loop_b,w
  9859  1D82  1803               	btfsc	3,0
  9860  1D83  0008               	return
  9861                           
  9862                           ;CC2500_B1.c: 224: RC1 = 1;
  9863  1D84  148E               	bsf	14,1	;volatile
  9864                           
  9865                           ;CC2500_B1.c: 225: SPI0Buffer <<= 1;
  9866  1D85  1003               	clrc
  9867  1D86  0021               	movlb	1	; select bank1
  9868  1D87  0DD2               	rlf	_SPI0Buffer^(0+128),f
  9869                           
  9870                           ;CC2500_B1.c: 226: if (RC2 == 1)
  9871  1D88  0020               	movlb	0	; select bank0
  9872  1D89  1D0E               	btfss	14,2	;volatile
  9873  1D8A  2D8E               	goto	l6381
  9874                           
  9875                           ;CC2500_B1.c: 227: SPI0Buffer |= 0x01;
  9876  1D8B  0021               	movlb	1	; select bank1
  9877  1D8C  1452               	bsf	_SPI0Buffer^(0+128),0
  9878  1D8D  2D94               	goto	l6383
  9879  1D8E                     l6381:	
  9880                           
  9881                           ;CC2500_B1.c: 228: else
  9882                           ;CC2500_B1.c: 229: SPI0Buffer &= 0xFE;
  9883  1D8E  30FE               	movlw	254
  9884  1D8F  0020               	movlb	0	; select bank0
  9885  1D90  00A0               	movwf	??_CC2500_ReadByte
  9886  1D91  0820               	movf	??_CC2500_ReadByte,w
  9887  1D92  0021               	movlb	1	; select bank1
  9888  1D93  05D2               	andwf	_SPI0Buffer^(0+128),f
  9889  1D94                     l6383:	
  9890                           
  9891                           ;CC2500_B1.c: 230: RC1 = 0;
  9892  1D94  0020               	movlb	0	; select bank0
  9893  1D95  108E               	bcf	14,1	;volatile
  9894  1D96  3001               	movlw	1
  9895  1D97  00A0               	movwf	??_CC2500_ReadByte
  9896  1D98  0820               	movf	??_CC2500_ReadByte,w
  9897  1D99  07A1               	addwf	CC2500_ReadByte@loop_b,f
  9898  1D9A  2D80               	goto	L5
  9899  1D9B                     __end_of_CC2500_ReadByte:	
  9900                           
  9901                           	psect	text47
  9902  1971                     __ptext47:	
  9903 ;; *************** function _RF_Initialization *****************
  9904 ;; Defined at:
  9905 ;;		line 9 in file "../src/RF_Control_B1.c"
  9906 ;; Parameters:    Size  Location     Type
  9907 ;;		None
  9908 ;; Auto vars:     Size  Location     Type
  9909 ;;		None
  9910 ;; Return value:  Size  Location     Type
  9911 ;;		None               void
  9912 ;; Registers used:
  9913 ;;		wreg, status,2, status,0, pclath, cstack
  9914 ;; Tracked objects:
  9915 ;;		On entry : 0/0
  9916 ;;		On exit  : 0/0
  9917 ;;		Unchanged: 0/0
  9918 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9919 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9920 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9921 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9922 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9923 ;;Total ram usage:        0 bytes
  9924 ;; Hardware stack levels used:    1
  9925 ;; Hardware stack levels required when called:    6
  9926 ;; This function calls:
  9927 ;;		_setRF_Initialization
  9928 ;; This function is called by:
  9929 ;;		_main
  9930 ;; This function uses a non-reentrant model
  9931 ;;
  9932                           
  9933                           
  9934                           ;psect for function _RF_Initialization
  9935  1971                     _RF_Initialization:	
  9936                           
  9937                           ;RF_Control_B1.c: 11: setRF_Initialization();
  9938                           
  9939                           ;incstack = 0
  9940                           ; Regs used in _RF_Initialization: [wreg+status,2+status,0+pclath+cstack]
  9941  1971  3199  21D6         	fcall	_setRF_Initialization
  9942  1973  0008               	return
  9943  1974                     __end_of_RF_Initialization:	
  9944                           
  9945                           	psect	text48
  9946  19D6                     __ptext48:	
  9947 ;; *************** function _setRF_Initialization *****************
  9948 ;; Defined at:
  9949 ;;		line 43 in file "../src/RF_Control_B1.c"
  9950 ;; Parameters:    Size  Location     Type
  9951 ;;		None
  9952 ;; Auto vars:     Size  Location     Type
  9953 ;;		None
  9954 ;; Return value:  Size  Location     Type
  9955 ;;		None               void
  9956 ;; Registers used:
  9957 ;;		wreg
  9958 ;; Tracked objects:
  9959 ;;		On entry : 0/0
  9960 ;;		On exit  : 0/0
  9961 ;;		Unchanged: 0/0
  9962 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9963 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9964 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9965 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9966 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9967 ;;Total ram usage:        1 bytes
  9968 ;; Hardware stack levels used:    1
  9969 ;; Hardware stack levels required when called:    5
  9970 ;; This function calls:
  9971 ;;		Nothing
  9972 ;; This function is called by:
  9973 ;;		_RF_Initialization
  9974 ;; This function uses a non-reentrant model
  9975 ;;
  9976                           
  9977                           
  9978                           ;psect for function _setRF_Initialization
  9979  19D6                     _setRF_Initialization:	
  9980                           
  9981                           ;RF_Control_B1.c: 45: Tx_Length = 21;
  9982                           
  9983                           ;incstack = 0
  9984                           ; Regs used in _setRF_Initialization: [wreg]
  9985  19D6  3015               	movlw	21
  9986  19D7  0020               	movlb	0	; select bank0
  9987  19D8  00A0               	movwf	??_setRF_Initialization
  9988  19D9  0820               	movf	??_setRF_Initialization,w
  9989  19DA  0021               	movlb	1	; select bank1
  9990  19DB  00D3               	movwf	_Tx_Length^(0+128)
  9991                           
  9992                           ;RF_Control_B1.c: 46: INTE = 1;
  9993  19DC  160B               	bsf	11,4	;volatile
  9994  19DD  0008               	return
  9995  19DE                     __end_of_setRF_Initialization:	
  9996                           
  9997                           	psect	text49
  9998  1C96                     __ptext49:	
  9999 ;; *************** function _Mcu_Initialization *****************
 10000 ;; Defined at:
 10001 ;;		line 30 in file "../src/MCU_B1.c"
 10002 ;; Parameters:    Size  Location     Type
 10003 ;;		None
 10004 ;; Auto vars:     Size  Location     Type
 10005 ;;		None
 10006 ;; Return value:  Size  Location     Type
 10007 ;;		None               void
 10008 ;; Registers used:
 10009 ;;		wreg, status,2, status,0, pclath, cstack
 10010 ;; Tracked objects:
 10011 ;;		On entry : 0/0
 10012 ;;		On exit  : 0/0
 10013 ;;		Unchanged: 0/0
 10014 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10015 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10016 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10017 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10018 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10019 ;;Total ram usage:        1 bytes
 10020 ;; Hardware stack levels used:    1
 10021 ;; Hardware stack levels required when called:    6
 10022 ;; This function calls:
 10023 ;;		_ADC_Set
 10024 ;;		_Fosc_Set
 10025 ;;		_INT_Set
 10026 ;;		_IOC_Set
 10027 ;;		_IO_Set
 10028 ;;		_TMR0_Set
 10029 ;; This function is called by:
 10030 ;;		_main
 10031 ;; This function uses a non-reentrant model
 10032 ;;
 10033                           
 10034                           
 10035                           ;psect for function _Mcu_Initialization
 10036  1C96                     _Mcu_Initialization:	
 10037                           
 10038                           ;MCU_B1.c: 32: Fosc_Set();
 10039                           
 10040                           ;incstack = 0
 10041                           ; Regs used in _Mcu_Initialization: [wreg+status,2+status,0+pclath+cstack]
 10042  1C96  3199  2190  319C   	fcall	_Fosc_Set
 10043                           
 10044                           ;MCU_B1.c: 34: IO_Set();
 10045  1C99  319C  24F7  319C   	fcall	_IO_Set
 10046                           
 10047                           ;MCU_B1.c: 36: TMR0_Set();
 10048  1C9C  319A  228A  319C   	fcall	_TMR0_Set
 10049                           
 10050                           ;MCU_B1.c: 38: ;;
 10051                           ;MCU_B1.c: 40: ADC_Set();
 10052  1C9F  3199  21B7  319C   	fcall	_ADC_Set
 10053                           
 10054                           ;MCU_B1.c: 44: INT_Set();
 10055  1CA2  3199  219E  319C   	fcall	_INT_Set
 10056                           
 10057                           ;MCU_B1.c: 46: IOC_Set();
 10058  1CA5  319A  227D         	fcall	_IOC_Set
 10059                           
 10060                           ;MCU_B1.c: 48: ;;
 10061                           ;MCU_B1.c: 50: ;;
 10062                           ;MCU_B1.c: 52: Memory=&VarMemory;
 10063  1CA7  30A0               	movlw	_VarMemory& (0+255)
 10064  1CA8  0020               	movlb	0	; select bank0
 10065  1CA9  00A1               	movwf	??_Mcu_Initialization
 10066  1CAA  0821               	movf	??_Mcu_Initialization,w
 10067  1CAB  00FC               	movwf	_Memory
 10068  1CAC  0008               	return
 10069  1CAD                     __end_of_Mcu_Initialization:	
 10070                           
 10071                           	psect	text50
 10072  1A8A                     __ptext50:	
 10073 ;; *************** function _TMR0_Set *****************
 10074 ;; Defined at:
 10075 ;;		line 128 in file "../src/MCU_B1.c"
 10076 ;; Parameters:    Size  Location     Type
 10077 ;;		None
 10078 ;; Auto vars:     Size  Location     Type
 10079 ;;		None
 10080 ;; Return value:  Size  Location     Type
 10081 ;;		None               void
 10082 ;; Registers used:
 10083 ;;		wreg, status,2
 10084 ;; Tracked objects:
 10085 ;;		On entry : 0/0
 10086 ;;		On exit  : 0/0
 10087 ;;		Unchanged: 0/0
 10088 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10089 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10090 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10091 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10092 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10093 ;;Total ram usage:        1 bytes
 10094 ;; Hardware stack levels used:    1
 10095 ;; Hardware stack levels required when called:    5
 10096 ;; This function calls:
 10097 ;;		Nothing
 10098 ;; This function is called by:
 10099 ;;		_Mcu_Initialization
 10100 ;; This function uses a non-reentrant model
 10101 ;;
 10102                           
 10103                           
 10104                           ;psect for function _TMR0_Set
 10105  1A8A                     _TMR0_Set:	
 10106                           
 10107                           ;MCU_B1.c: 129: Timer0 = &VarTimer0;
 10108                           
 10109                           ;incstack = 0
 10110                           ; Regs used in _TMR0_Set: [wreg+status,2]
 10111  1A8A  30D0               	movlw	_VarTimer0& (0+255)
 10112  1A8B  0020               	movlb	0	; select bank0
 10113  1A8C  00A0               	movwf	??_TMR0_Set
 10114  1A8D  0820               	movf	??_TMR0_Set,w
 10115  1A8E  0021               	movlb	1	; select bank1
 10116  1A8F  00EE               	movwf	_Timer0^(0+128)
 10117                           
 10118                           ;MCU_B1.c: 130: OPTION_REG = 0x00;
 10119  1A90  0195               	clrf	21	;volatile
 10120                           
 10121                           ;MCU_B1.c: 131: TMR0 = (256-190);
 10122  1A91  3042               	movlw	66
 10123  1A92  0020               	movlb	0	; select bank0
 10124  1A93  0095               	movwf	21	;volatile
 10125                           
 10126                           ;MCU_B1.c: 132: TMR0IE = 1;
 10127  1A94  168B               	bsf	11,5	;volatile
 10128                           
 10129                           ;MCU_B1.c: 133: GIE = 1;
 10130  1A95  178B               	bsf	11,7	;volatile
 10131  1A96  0008               	return
 10132  1A97                     __end_of_TMR0_Set:	
 10133                           
 10134                           	psect	text51
 10135  1CF7                     __ptext51:	
 10136 ;; *************** function _IO_Set *****************
 10137 ;; Defined at:
 10138 ;;		line 62 in file "../src/MCU_B1.c"
 10139 ;; Parameters:    Size  Location     Type
 10140 ;;		None
 10141 ;; Auto vars:     Size  Location     Type
 10142 ;;		None
 10143 ;; Return value:  Size  Location     Type
 10144 ;;		None               void
 10145 ;; Registers used:
 10146 ;;		wreg, status,2
 10147 ;; Tracked objects:
 10148 ;;		On entry : 0/0
 10149 ;;		On exit  : 0/0
 10150 ;;		Unchanged: 0/0
 10151 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10152 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10153 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10154 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10155 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10156 ;;Total ram usage:        0 bytes
 10157 ;; Hardware stack levels used:    1
 10158 ;; Hardware stack levels required when called:    5
 10159 ;; This function calls:
 10160 ;;		Nothing
 10161 ;; This function is called by:
 10162 ;;		_Mcu_Initialization
 10163 ;; This function uses a non-reentrant model
 10164 ;;
 10165                           
 10166                           
 10167                           ;psect for function _IO_Set
 10168  1CF7                     _IO_Set:	
 10169                           
 10170                           ;MCU_B1.c: 90: TRISA = 0b01110111;;
 10171                           
 10172                           ;incstack = 0
 10173                           ; Regs used in _IO_Set: [wreg+status,2]
 10174  1CF7  3077               	movlw	119
 10175  1CF8  0021               	movlb	1	; select bank1
 10176  1CF9  008C               	movwf	12	;volatile
 10177                           
 10178                           ;MCU_B1.c: 91: TRISB = 0b00000111;;
 10179  1CFA  3007               	movlw	7
 10180  1CFB  008D               	movwf	13	;volatile
 10181                           
 10182                           ;MCU_B1.c: 92: TRISC = 0b00001100;;
 10183  1CFC  300C               	movlw	12
 10184  1CFD  008E               	movwf	14	;volatile
 10185                           
 10186                           ;MCU_B1.c: 93: LATA = 0b00000000;;
 10187  1CFE  0022               	movlb	2	; select bank2
 10188  1CFF  018C               	clrf	12	;volatile
 10189                           
 10190                           ;MCU_B1.c: 94: LATB = 0b00000010;;
 10191  1D00  3002               	movlw	2
 10192  1D01  008D               	movwf	13	;volatile
 10193                           
 10194                           ;MCU_B1.c: 95: LATC = 0b00000000;;
 10195  1D02  018E               	clrf	14	;volatile
 10196                           
 10197                           ;MCU_B1.c: 96: ANSELA = 0b00100010;;
 10198  1D03  3022               	movlw	34
 10199  1D04  0023               	movlb	3	; select bank3
 10200  1D05  008C               	movwf	12	;volatile
 10201                           
 10202                           ;MCU_B1.c: 97: ANSELB = 0b00000000;;
 10203  1D06  018D               	clrf	13	;volatile
 10204                           
 10205                           ;MCU_B1.c: 98: ANSELC = 0b00000000;;
 10206  1D07  018E               	clrf	14	;volatile
 10207                           
 10208                           ;MCU_B1.c: 99: PORTA = 0b01110111;;
 10209  1D08  3077               	movlw	119
 10210  1D09  0020               	movlb	0	; select bank0
 10211  1D0A  008C               	movwf	12	;volatile
 10212                           
 10213                           ;MCU_B1.c: 100: PORTB = 0b00000111;;
 10214  1D0B  3007               	movlw	7
 10215  1D0C  008D               	movwf	13	;volatile
 10216                           
 10217                           ;MCU_B1.c: 101: PORTC = 0b00001100;;
 10218  1D0D  300C               	movlw	12
 10219  1D0E  008E               	movwf	14	;volatile
 10220  1D0F  0008               	return
 10221  1D10                     __end_of_IO_Set:	
 10222                           
 10223                           	psect	text52
 10224  1A7D                     __ptext52:	
 10225 ;; *************** function _IOC_Set *****************
 10226 ;; Defined at:
 10227 ;;		line 269 in file "../src/MCU_B1.c"
 10228 ;; Parameters:    Size  Location     Type
 10229 ;;		None
 10230 ;; Auto vars:     Size  Location     Type
 10231 ;;		None
 10232 ;; Return value:  Size  Location     Type
 10233 ;;		None               void
 10234 ;; Registers used:
 10235 ;;		wreg, status,2
 10236 ;; Tracked objects:
 10237 ;;		On entry : 0/0
 10238 ;;		On exit  : 0/0
 10239 ;;		Unchanged: 0/0
 10240 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10241 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10242 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10243 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10244 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10245 ;;Total ram usage:        0 bytes
 10246 ;; Hardware stack levels used:    1
 10247 ;; Hardware stack levels required when called:    5
 10248 ;; This function calls:
 10249 ;;		Nothing
 10250 ;; This function is called by:
 10251 ;;		_Mcu_Initialization
 10252 ;; This function uses a non-reentrant model
 10253 ;;
 10254                           
 10255                           
 10256                           ;psect for function _IOC_Set
 10257  1A7D                     _IOC_Set:	
 10258                           
 10259                           ;MCU_B1.c: 270: WPUB2 = 0;
 10260                           
 10261                           ;incstack = 0
 10262                           ; Regs used in _IOC_Set: [wreg+status,2]
 10263  1A7D  0024               	movlb	4	; select bank4
 10264  1A7E  110D               	bcf	13,2	;volatile
 10265                           
 10266                           ;MCU_B1.c: 272: IOCBP = 0b00000100;
 10267  1A7F  3004               	movlw	4
 10268  1A80  0027               	movlb	7	; select bank7
 10269  1A81  0094               	movwf	20	;volatile
 10270                           
 10271                           ;MCU_B1.c: 273: IOCBN = 0b00000100;
 10272  1A82  3004               	movlw	4
 10273  1A83  0095               	movwf	21	;volatile
 10274                           
 10275                           ;MCU_B1.c: 288: IOCBF = 0b00000000;
 10276  1A84  0196               	clrf	22	;volatile
 10277                           
 10278                           ;MCU_B1.c: 290: IOCIE = 1;
 10279  1A85  158B               	bsf	11,3	;volatile
 10280                           
 10281                           ;MCU_B1.c: 291: IOCIF = 0;
 10282  1A86  100B               	bcf	11,0	;volatile
 10283                           
 10284                           ;MCU_B1.c: 292: PEIE = 1;
 10285  1A87  170B               	bsf	11,6	;volatile
 10286                           
 10287                           ;MCU_B1.c: 293: GIE = 1;
 10288  1A88  178B               	bsf	11,7	;volatile
 10289  1A89  0008               	return
 10290  1A8A                     __end_of_IOC_Set:	
 10291                           
 10292                           	psect	text53
 10293  199E                     __ptext53:	
 10294 ;; *************** function _INT_Set *****************
 10295 ;; Defined at:
 10296 ;;		line 242 in file "../src/MCU_B1.c"
 10297 ;; Parameters:    Size  Location     Type
 10298 ;;		None
 10299 ;; Auto vars:     Size  Location     Type
 10300 ;;		None
 10301 ;; Return value:  Size  Location     Type
 10302 ;;		None               void
 10303 ;; Registers used:
 10304 ;;		None
 10305 ;; Tracked objects:
 10306 ;;		On entry : 0/0
 10307 ;;		On exit  : 0/0
 10308 ;;		Unchanged: 0/0
 10309 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10310 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10311 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10312 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10313 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10314 ;;Total ram usage:        0 bytes
 10315 ;; Hardware stack levels used:    1
 10316 ;; Hardware stack levels required when called:    5
 10317 ;; This function calls:
 10318 ;;		Nothing
 10319 ;; This function is called by:
 10320 ;;		_Mcu_Initialization
 10321 ;; This function uses a non-reentrant model
 10322 ;;
 10323                           
 10324                           
 10325                           ;psect for function _INT_Set
 10326  199E                     _INT_Set:	
 10327                           
 10328                           ;MCU_B1.c: 243: WPUB0 = 0;
 10329                           
 10330                           ;incstack = 0
 10331                           ; Regs used in _INT_Set: []
 10332  199E  0024               	movlb	4	; select bank4
 10333  199F  100D               	bcf	13,0	;volatile
 10334                           
 10335                           ;MCU_B1.c: 244: INTE = 0;
 10336  19A0  120B               	bcf	11,4	;volatile
 10337                           
 10338                           ;MCU_B1.c: 245: PEIE = 1;
 10339  19A1  170B               	bsf	11,6	;volatile
 10340                           
 10341                           ;MCU_B1.c: 246: GIE = 1;
 10342  19A2  178B               	bsf	11,7	;volatile
 10343  19A3  0008               	return
 10344  19A4                     __end_of_INT_Set:	
 10345                           
 10346                           	psect	text54
 10347  1990                     __ptext54:	
 10348 ;; *************** function _Fosc_Set *****************
 10349 ;; Defined at:
 10350 ;;		line 58 in file "../src/MCU_B1.c"
 10351 ;; Parameters:    Size  Location     Type
 10352 ;;		None
 10353 ;; Auto vars:     Size  Location     Type
 10354 ;;		None
 10355 ;; Return value:  Size  Location     Type
 10356 ;;		None               void
 10357 ;; Registers used:
 10358 ;;		wreg
 10359 ;; Tracked objects:
 10360 ;;		On entry : 0/0
 10361 ;;		On exit  : 0/0
 10362 ;;		Unchanged: 0/0
 10363 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10364 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10365 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10366 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10367 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10368 ;;Total ram usage:        0 bytes
 10369 ;; Hardware stack levels used:    1
 10370 ;; Hardware stack levels required when called:    5
 10371 ;; This function calls:
 10372 ;;		Nothing
 10373 ;; This function is called by:
 10374 ;;		_Mcu_Initialization
 10375 ;; This function uses a non-reentrant model
 10376 ;;
 10377                           
 10378                           
 10379                           ;psect for function _Fosc_Set
 10380  1990                     _Fosc_Set:	
 10381                           
 10382                           ;MCU_B1.c: 59: OSCCON = 0x78;
 10383                           
 10384                           ;incstack = 0
 10385                           ; Regs used in _Fosc_Set: [wreg]
 10386  1990  3078               	movlw	120
 10387  1991  0021               	movlb	1	; select bank1
 10388  1992  0099               	movwf	25	;volatile
 10389  1993  0008               	return
 10390  1994                     __end_of_Fosc_Set:	
 10391                           
 10392                           	psect	text55
 10393  19B7                     __ptext55:	
 10394 ;; *************** function _ADC_Set *****************
 10395 ;; Defined at:
 10396 ;;		line 315 in file "../src/MCU_B1.c"
 10397 ;; Parameters:    Size  Location     Type
 10398 ;;		None
 10399 ;; Auto vars:     Size  Location     Type
 10400 ;;		None
 10401 ;; Return value:  Size  Location     Type
 10402 ;;		None               void
 10403 ;; Registers used:
 10404 ;;		wreg
 10405 ;; Tracked objects:
 10406 ;;		On entry : 0/0
 10407 ;;		On exit  : 0/0
 10408 ;;		Unchanged: 0/0
 10409 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10410 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10411 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10412 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10413 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10414 ;;Total ram usage:        0 bytes
 10415 ;; Hardware stack levels used:    1
 10416 ;; Hardware stack levels required when called:    5
 10417 ;; This function calls:
 10418 ;;		Nothing
 10419 ;; This function is called by:
 10420 ;;		_Mcu_Initialization
 10421 ;; This function uses a non-reentrant model
 10422 ;;
 10423                           
 10424                           
 10425                           ;psect for function _ADC_Set
 10426  19B7                     _ADC_Set:	
 10427                           
 10428                           ;MCU_B1.c: 316: ADCON1 = 0xf2;
 10429                           
 10430                           ;incstack = 0
 10431                           ; Regs used in _ADC_Set: [wreg]
 10432  19B7  30F2               	movlw	242
 10433  19B8  0021               	movlb	1	; select bank1
 10434  19B9  009E               	movwf	30	;volatile
 10435                           
 10436                           ;MCU_B1.c: 317: FVRCON = 0xc0;
 10437  19BA  30C0               	movlw	192
 10438  19BB  0022               	movlb	2	; select bank2
 10439  19BC  0097               	movwf	23	;volatile
 10440  19BD  0008               	return
 10441  19BE                     __end_of_ADC_Set:	
 10442                           
 10443                           	psect	text56
 10444  021F                     __ptext56:	
 10445 ;; *************** function _Load_Main *****************
 10446 ;; Defined at:
 10447 ;;		line 39 in file "../src/OverLoad_B1.c"
 10448 ;; Parameters:    Size  Location     Type
 10449 ;;		None
 10450 ;; Auto vars:     Size  Location     Type
 10451 ;;  i               1   19[BANK0 ] unsigned char 
 10452 ;; Return value:  Size  Location     Type
 10453 ;;		None               void
 10454 ;; Registers used:
 10455 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10456 ;; Tracked objects:
 10457 ;;		On entry : 0/0
 10458 ;;		On exit  : 0/0
 10459 ;;		Unchanged: 0/0
 10460 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10461 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10462 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10463 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10464 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10465 ;;Total ram usage:        3 bytes
 10466 ;; Hardware stack levels used:    1
 10467 ;; Hardware stack levels required when called:   10
 10468 ;; This function calls:
 10469 ;;		___lwdiv
 10470 ;;		___wmul
 10471 ;;		_getTemp_Safe
 10472 ;;		_setDimmerLights_Clear
 10473 ;;		_setLoad_AH_AL_Restore
 10474 ;;		_setLoad_Exceptions
 10475 ;; This function is called by:
 10476 ;;		_main
 10477 ;; This function uses a non-reentrant model
 10478 ;;
 10479                           
 10480                           
 10481                           ;psect for function _Load_Main
 10482  021F                     _Load_Main:	
 10483                           
 10484                           ;OverLoad_B1.c: 40: char i = 0;
 10485                           
 10486                           ;incstack = 0
 10487                           ; Regs used in _Load_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10488  021F  0020               	movlb	0	; select bank0
 10489  0220  01B3               	clrf	Load_Main@i
 10490                           
 10491                           ;OverLoad_B1.c: 41: if (Load1.ERROR == 1) {
 10492  0221  0022               	movlb	2	; select bank2
 10493  0222  1EA0               	btfss	_Load1^(0+256),5
 10494  0223  2A35               	goto	l1691
 10495                           
 10496                           ;OverLoad_B1.c: 42: Load1.ErrorTime++;
 10497  0224  3001               	movlw	1
 10498  0225  07A3               	addwf	(_Load1^(0+256)+3),f
 10499  0226  3000               	movlw	0
 10500  0227  3DA4               	addwfc	((_Load1+1)^(0+256)+3),f
 10501                           
 10502                           ;OverLoad_B1.c: 43: if (Load1.ErrorTime >= 1000)
 10503  0228  3003               	movlw	3
 10504  0229  0224               	subwf	((_Load1+1)^(0+256)+3),w
 10505  022A  30E8               	movlw	232
 10506  022B  1903               	skipnz
 10507  022C  0223               	subwf	(_Load1^(0+256)+3),w
 10508  022D  1C03               	skipc
 10509  022E  0008               	return
 10510                           
 10511                           ;OverLoad_B1.c: 44: {
 10512                           ;OverLoad_B1.c: 45: Load1.ErrorTime = 0;
 10513  022F  01A3               	clrf	(_Load1^(0+256)+3)
 10514  0230  01A4               	clrf	((_Load1+1)^(0+256)+3)
 10515                           
 10516                           ;OverLoad_B1.c: 46: setLoad_Exceptions(0);
 10517  0231  3000               	movlw	0
 10518  0232  3191  2122         	fcall	_setLoad_Exceptions
 10519                           
 10520                           ;OverLoad_B1.c: 47: }
 10521                           ;OverLoad_B1.c: 48: } else {
 10522  0234  0008               	return
 10523  0235                     l1691:	
 10524                           
 10525                           ;OverLoad_B1.c: 49: if (Load1.ADtoGO == 1) {
 10526  0235  1E20               	btfss	_Load1^(0+256),4
 10527  0236  2B60               	goto	l1694
 10528                           
 10529                           ;OverLoad_B1.c: 50: Load1.Time++;
 10530  0237  3001               	movlw	1
 10531  0238  07A1               	addwf	(_Load1^(0+256)+1),f
 10532  0239  3000               	movlw	0
 10533  023A  3DA2               	addwfc	((_Load1+1)^(0+256)+1),f
 10534                           
 10535                           ;OverLoad_B1.c: 51: if (Load1.Time >= 5)
 10536  023B  3000               	movlw	0
 10537  023C  0222               	subwf	((_Load1+1)^(0+256)+1),w
 10538  023D  3005               	movlw	5
 10539  023E  1903               	skipnz
 10540  023F  0221               	subwf	(_Load1^(0+256)+1),w
 10541  0240  1C03               	skipc
 10542  0241  0008               	return
 10543                           
 10544                           ;OverLoad_B1.c: 52: {
 10545                           ;OverLoad_B1.c: 53: Load1.Time = 0;
 10546  0242  01A1               	clrf	(_Load1^(0+256)+1)
 10547  0243  01A2               	clrf	((_Load1+1)^(0+256)+1)
 10548                           
 10549                           ;OverLoad_B1.c: 54: Load1.ADtoGO = 0;
 10550  0244  1220               	bcf	_Load1^(0+256),4
 10551                           
 10552                           ;OverLoad_B1.c: 55: Load1.LightsCount = Load1.Lights1Status + Load1.Lights2Status + Load
      +                          1.Lights3Status;
 10553  0245  0863               	movf	(_Load1^(0+256)+67),w
 10554  0246  0764               	addwf	(_Load1^(0+256)+68),w
 10555  0247  0765               	addwf	(_Load1^(0+256)+69),w
 10556  0248  0020               	movlb	0	; select bank0
 10557  0249  00B1               	movwf	??_Load_Main
 10558  024A  0831               	movf	??_Load_Main,w
 10559  024B  0022               	movlb	2	; select bank2
 10560  024C  00DE               	movwf	(_Load1^(0+256)+62)
 10561                           
 10562                           ;OverLoad_B1.c: 56: for (i = 1; i < 4; i++) {
 10563  024D  0020               	movlb	0	; select bank0
 10564  024E  01B3               	clrf	Load_Main@i
 10565  024F  0AB3               	incf	Load_Main@i,f
 10566  0250  3004               	movlw	4
 10567  0251  0233               	subwf	Load_Main@i,w
 10568  0252  1803               	btfsc	3,0
 10569  0253  2A7E               	goto	l7987
 10570  0254                     l7981:	
 10571                           
 10572                           ;OverLoad_B1.c: 57: Load1.ADH += Load1.AH[i];
 10573  0254  3533               	lslf	Load_Main@i,w
 10574  0255  3E28               	addlw	(_Load1+8)& (0+255)
 10575  0256  0086               	movwf	6
 10576  0257  3001               	movlw	1	; select bank2/3
 10577  0258  0087               	movwf	7
 10578  0259  3F40               	moviw [0]fsr1
 10579  025A  00B1               	movwf	??_Load_Main
 10580  025B  3F41               	moviw [1]fsr1
 10581  025C  00B2               	movwf	??_Load_Main+1
 10582  025D  0831               	movf	??_Load_Main,w
 10583  025E  0022               	movlb	2	; select bank2
 10584  025F  07CE               	addwf	(_Load1^(0+256)+46),f
 10585  0260  0020               	movlb	0	; select bank0
 10586  0261  0832               	movf	??_Load_Main+1,w
 10587  0262  0022               	movlb	2	; select bank2
 10588  0263  3DCF               	addwfc	((_Load1+1)^(0+256)+46),f
 10589                           
 10590                           ;OverLoad_B1.c: 58: Load1.ADL += Load1.AL[i];
 10591  0264  0020               	movlb	0	; select bank0
 10592  0265  3533               	lslf	Load_Main@i,w
 10593  0266  3E3A               	addlw	(_Load1+26)& (0+255)
 10594  0267  0086               	movwf	6
 10595  0268  3001               	movlw	1	; select bank2/3
 10596  0269  0087               	movwf	7
 10597  026A  3F40               	moviw [0]fsr1
 10598  026B  00B1               	movwf	??_Load_Main
 10599  026C  3F41               	moviw [1]fsr1
 10600  026D  00B2               	movwf	??_Load_Main+1
 10601  026E  0831               	movf	??_Load_Main,w
 10602  026F  0022               	movlb	2	; select bank2
 10603  0270  07D0               	addwf	(_Load1^(0+256)+48),f
 10604  0271  0020               	movlb	0	; select bank0
 10605  0272  0832               	movf	??_Load_Main+1,w
 10606  0273  0022               	movlb	2	; select bank2
 10607  0274  3DD1               	addwfc	((_Load1+1)^(0+256)+48),f
 10608  0275  3001               	movlw	1
 10609  0276  0020               	movlb	0	; select bank0
 10610  0277  00B1               	movwf	??_Load_Main
 10611  0278  0831               	movf	??_Load_Main,w
 10612  0279  07B3               	addwf	Load_Main@i,f
 10613  027A  3004               	movlw	4
 10614  027B  0233               	subwf	Load_Main@i,w
 10615  027C  1C03               	skipc
 10616  027D  2A54               	goto	l7981
 10617  027E                     l7987:	
 10618                           
 10619                           ;OverLoad_B1.c: 59: }
 10620                           ;OverLoad_B1.c: 60: Load1.ADH /= 3;
 10621  027E  3003               	movlw	3
 10622  027F  00A0               	movwf	___lwdiv@divisor
 10623  0280  3000               	movlw	0
 10624  0281  00A1               	movwf	___lwdiv@divisor+1
 10625  0282  0022               	movlb	2	; select bank2
 10626  0283  084F               	movf	((_Load1+1)^(0+256)+46),w
 10627  0284  0020               	movlb	0	; select bank0
 10628  0285  01A3               	clrf	___lwdiv@dividend+1
 10629  0286  07A3               	addwf	___lwdiv@dividend+1,f
 10630  0287  0022               	movlb	2	; select bank2
 10631  0288  084E               	movf	(_Load1^(0+256)+46),w
 10632  0289  0020               	movlb	0	; select bank0
 10633  028A  01A2               	clrf	___lwdiv@dividend
 10634  028B  07A2               	addwf	___lwdiv@dividend,f
 10635  028C  3190  20EB  3182   	fcall	___lwdiv
 10636  028F  0020               	movlb	0	; select bank0
 10637  0290  0821               	movf	?___lwdiv+1,w
 10638  0291  0022               	movlb	2	; select bank2
 10639  0292  01CF               	clrf	((_Load1+1)^(0+256)+46)
 10640  0293  07CF               	addwf	((_Load1+1)^(0+256)+46),f
 10641  0294  0020               	movlb	0	; select bank0
 10642  0295  0820               	movf	?___lwdiv,w
 10643  0296  0022               	movlb	2	; select bank2
 10644  0297  01CE               	clrf	(_Load1^(0+256)+46)
 10645  0298  07CE               	addwf	(_Load1^(0+256)+46),f
 10646                           
 10647                           ;OverLoad_B1.c: 61: Load1.ADL /= 3;
 10648  0299  3003               	movlw	3
 10649  029A  0020               	movlb	0	; select bank0
 10650  029B  00A0               	movwf	___lwdiv@divisor
 10651  029C  3000               	movlw	0
 10652  029D  00A1               	movwf	___lwdiv@divisor+1
 10653  029E  0022               	movlb	2	; select bank2
 10654  029F  0851               	movf	((_Load1+1)^(0+256)+48),w
 10655  02A0  0020               	movlb	0	; select bank0
 10656  02A1  01A3               	clrf	___lwdiv@dividend+1
 10657  02A2  07A3               	addwf	___lwdiv@dividend+1,f
 10658  02A3  0022               	movlb	2	; select bank2
 10659  02A4  0850               	movf	(_Load1^(0+256)+48),w
 10660  02A5  0020               	movlb	0	; select bank0
 10661  02A6  01A2               	clrf	___lwdiv@dividend
 10662  02A7  07A2               	addwf	___lwdiv@dividend,f
 10663  02A8  3190  20EB  3182   	fcall	___lwdiv
 10664  02AB  0020               	movlb	0	; select bank0
 10665  02AC  0821               	movf	?___lwdiv+1,w
 10666  02AD  0022               	movlb	2	; select bank2
 10667  02AE  01D1               	clrf	((_Load1+1)^(0+256)+48)
 10668  02AF  07D1               	addwf	((_Load1+1)^(0+256)+48),f
 10669  02B0  0020               	movlb	0	; select bank0
 10670  02B1  0820               	movf	?___lwdiv,w
 10671  02B2  0022               	movlb	2	; select bank2
 10672  02B3  01D0               	clrf	(_Load1^(0+256)+48)
 10673  02B4  07D0               	addwf	(_Load1^(0+256)+48),f
 10674                           
 10675                           ;OverLoad_B1.c: 62: if (Load1.ADH > Load1.ADL) {
 10676  02B5  084F               	movf	((_Load1+1)^(0+256)+46),w
 10677  02B6  0251               	subwf	((_Load1+1)^(0+256)+48),w
 10678  02B7  1D03               	skipz
 10679  02B8  2ABB               	goto	u7695
 10680  02B9  084E               	movf	(_Load1^(0+256)+46),w
 10681  02BA  0250               	subwf	(_Load1^(0+256)+48),w
 10682  02BB                     u7695:	
 10683  02BB  1803               	skipnc
 10684  02BC  2B5D               	goto	l8045
 10685                           
 10686                           ;OverLoad_B1.c: 63: Load1.AD = (Load1.ADH - Load1.ADL);
 10687  02BD  302E               	movlw	46
 10688  02BE  3E20               	addlw	_Load1& (0+255)
 10689  02BF  0086               	movwf	6
 10690  02C0  3001               	movlw	1	; select bank2/3
 10691  02C1  0087               	movwf	7
 10692  02C2  0950               	comf	(_Load1^(0+256)+48),w
 10693  02C3  0020               	movlb	0	; select bank0
 10694  02C4  00B1               	movwf	??_Load_Main
 10695  02C5  0022               	movlb	2	; select bank2
 10696  02C6  0951               	comf	((_Load1+1)^(0+256)+48),w
 10697  02C7  0020               	movlb	0	; select bank0
 10698  02C8  00B2               	movwf	??_Load_Main+1
 10699  02C9  0AB1               	incf	??_Load_Main,f
 10700  02CA  1903               	skipnz
 10701  02CB  0AB2               	incf	??_Load_Main+1,f
 10702  02CC  3F40               	moviw [0]fsr1
 10703  02CD  0731               	addwf	??_Load_Main,w
 10704  02CE  0022               	movlb	2	; select bank2
 10705  02CF  00CC               	movwf	(_Load1^(0+256)+44)
 10706  02D0  3F41               	moviw [1]fsr1
 10707  02D1  0020               	movlb	0	; select bank0
 10708  02D2  3D32               	addwfc	??_Load_Main+1,w
 10709  02D3  0022               	movlb	2	; select bank2
 10710  02D4  00CD               	movwf	(_Load1^(0+256)+45)
 10711                           
 10712                           ;OverLoad_B1.c: 65: if (Load1.Count < 2) {
 10713  02D5  3002               	movlw	2
 10714  02D6  025A               	subwf	(_Load1^(0+256)+58),w
 10715  02D7  1803               	skipnc
 10716  02D8  2AFA               	goto	l8009
 10717                           
 10718                           ;OverLoad_B1.c: 66: Load1.Count++;
 10719  02D9  3001               	movlw	1
 10720  02DA  0020               	movlb	0	; select bank0
 10721  02DB  00B1               	movwf	??_Load_Main
 10722  02DC  0831               	movf	??_Load_Main,w
 10723  02DD  0022               	movlb	2	; select bank2
 10724  02DE  07DA               	addwf	(_Load1^(0+256)+58),f
 10725                           
 10726                           ;OverLoad_B1.c: 67: if (Load1.Count == 1) {
 10727  02DF  085A               	movf	(_Load1^(0+256)+58),w
 10728  02E0  3A01               	xorlw	1
 10729  02E1  1D03               	skipz
 10730  02E2  2AE7               	goto	l8001
 10731                           
 10732                           ;OverLoad_B1.c: 68: Load1.JudgeValue = 500;
 10733  02E3  30F4               	movlw	244
 10734  02E4  00D6               	movwf	(_Load1^(0+256)+54)
 10735  02E5  3001               	movlw	1
 10736  02E6  2AF2               	goto	L6
 10737  02E7                     l8001:	
 10738                           ;OverLoad_B1.c: 69: } else if (Load1.Count == 2) {
 10739                           
 10740  02E7  085A               	movf	(_Load1^(0+256)+58),w
 10741  02E8  3A02               	xorlw	2
 10742  02E9  1D03               	skipz
 10743  02EA  2AFA               	goto	l8009
 10744                           
 10745                           ;OverLoad_B1.c: 70: if (Load1.LightsCount == 1) {
 10746  02EB  085E               	movf	(_Load1^(0+256)+62),w
 10747  02EC  3A01               	xorlw	1
 10748  02ED  1D03               	skipz
 10749  02EE  2AF4               	goto	l8007
 10750                           
 10751                           ;OverLoad_B1.c: 71: Load1.JudgeValue = 0x32;
 10752  02EF  3032               	movlw	50
 10753  02F0  00D6               	movwf	(_Load1^(0+256)+54)
 10754  02F1  3000               	movlw	0
 10755  02F2                     L6:	
 10756  02F2  00D7               	movwf	(_Load1^(0+256)+55)
 10757                           
 10758                           ;OverLoad_B1.c: 72: } else {
 10759  02F3  2AFA               	goto	l8009
 10760  02F4                     l8007:	
 10761                           
 10762                           ;OverLoad_B1.c: 73: Load1.JudgeValue = (0x32 + Load1.TotalLoad) - 0x08;
 10763  02F4  0826               	movf	(_Load1^(0+256)+6),w
 10764  02F5  3E2A               	addlw	42
 10765  02F6  00D6               	movwf	(_Load1^(0+256)+54)
 10766  02F7  3000               	movlw	0
 10767  02F8  3D27               	addwfc	((_Load1+1)^(0+256)+6),w
 10768  02F9  00D7               	movwf	((_Load1+1)^(0+256)+54)
 10769  02FA                     l8009:	
 10770                           
 10771                           ;OverLoad_B1.c: 74: }
 10772                           ;OverLoad_B1.c: 75: }
 10773                           ;OverLoad_B1.c: 76: }
 10774                           ;OverLoad_B1.c: 78: if (Load1.AD >= Load1.JudgeValue) {
 10775  02FA  0857               	movf	((_Load1+1)^(0+256)+54),w
 10776  02FB  024D               	subwf	((_Load1+1)^(0+256)+44),w
 10777  02FC  1D03               	skipz
 10778  02FD  2B00               	goto	u7745
 10779  02FE  0856               	movf	(_Load1^(0+256)+54),w
 10780  02FF  024C               	subwf	(_Load1^(0+256)+44),w
 10781  0300                     u7745:	
 10782  0300  1C03               	skipc
 10783  0301  2B12               	goto	l8019
 10784                           
 10785                           ;OverLoad_B1.c: 79: Load1.ErrorCount++;
 10786  0302  3001               	movlw	1
 10787  0303  0020               	movlb	0	; select bank0
 10788  0304  00B1               	movwf	??_Load_Main
 10789  0305  0831               	movf	??_Load_Main,w
 10790  0306  0022               	movlb	2	; select bank2
 10791  0307  07DC               	addwf	(_Load1^(0+256)+60),f
 10792                           
 10793                           ;OverLoad_B1.c: 80: if (Load1.ErrorCount > 2) {
 10794  0308  3003               	movlw	3
 10795  0309  025C               	subwf	(_Load1^(0+256)+60),w
 10796  030A  1C03               	skipc
 10797  030B  2B5D               	goto	l8045
 10798                           
 10799                           ;OverLoad_B1.c: 81: Load1.ErrorCount = 0;
 10800  030C  01DC               	clrf	(_Load1^(0+256)+60)
 10801                           
 10802                           ;OverLoad_B1.c: 82: setLoad_Exceptions(1);
 10803  030D  3001               	movlw	1
 10804  030E  3191  2122  3182   	fcall	_setLoad_Exceptions
 10805                           
 10806                           ;OverLoad_B1.c: 91: }
 10807                           ;OverLoad_B1.c: 92: } else {
 10808  0311  2B5D               	goto	l8045
 10809  0312                     l8019:	
 10810                           
 10811                           ;OverLoad_B1.c: 93: Load1.ErrorCount = 0;
 10812  0312  0022               	movlb	2	; select bank2
 10813  0313  01DC               	clrf	(_Load1^(0+256)+60)
 10814                           
 10815                           ;OverLoad_B1.c: 94: if (Load1.SafeCount < 10) {
 10816  0314  300A               	movlw	10
 10817  0315  0262               	subwf	(_Load1^(0+256)+66),w
 10818  0316  1803               	skipnc
 10819  0317  2B1E               	goto	l8025
 10820                           
 10821                           ;OverLoad_B1.c: 95: Load1.SafeCount++;
 10822  0318  3001               	movlw	1
 10823  0319  0020               	movlb	0	; select bank0
 10824  031A  00B1               	movwf	??_Load_Main
 10825  031B  0831               	movf	??_Load_Main,w
 10826  031C  0022               	movlb	2	; select bank2
 10827  031D  07E2               	addwf	(_Load1^(0+256)+66),f
 10828  031E                     l8025:	
 10829                           
 10830                           ;OverLoad_B1.c: 96: }
 10831                           ;OverLoad_B1.c: 97: if (Load1.SafeCount >= 10) {
 10832  031E  300A               	movlw	10
 10833  031F  0262               	subwf	(_Load1^(0+256)+66),w
 10834  0320  1C03               	skipc
 10835  0321  2B5D               	goto	l8045
 10836                           
 10837                           ;OverLoad_B1.c: 98: Load1.Safe = 1;
 10838  0322  15A0               	bsf	_Load1^(0+256),3
 10839                           
 10840                           ;OverLoad_B1.c: 102: setDimmerLights_Clear(1, 1);
 10841  0323  0020               	movlb	0	; select bank0
 10842  0324  01A2               	clrf	setDimmerLights_Clear@command
 10843  0325  0AA2               	incf	setDimmerLights_Clear@command,f
 10844  0326  3001               	movlw	1
 10845  0327  319B  232D  3182   	fcall	_setDimmerLights_Clear
 10846                           
 10847                           ;OverLoad_B1.c: 106: ;;
 10848                           ;OverLoad_B1.c: 112: setDimmerLights_Clear(2, 1);
 10849  032A  0020               	movlb	0	; select bank0
 10850  032B  01A2               	clrf	setDimmerLights_Clear@command
 10851  032C  0AA2               	incf	setDimmerLights_Clear@command,f
 10852  032D  3002               	movlw	2
 10853  032E  319B  232D  3182   	fcall	_setDimmerLights_Clear
 10854                           
 10855                           ;OverLoad_B1.c: 116: ;;
 10856                           ;OverLoad_B1.c: 131: if (Load1.StatusOn == 1) {
 10857  0331  0022               	movlb	2	; select bank2
 10858  0332  1F20               	btfss	_Load1^(0+256),6
 10859  0333  2B3B               	goto	l8037
 10860                           
 10861                           ;OverLoad_B1.c: 132: Load1.StatusOn = 0;
 10862  0334  1320               	bcf	_Load1^(0+256),6
 10863                           
 10864                           ;OverLoad_B1.c: 133: Load1.TotalLoad = Load1.AD;
 10865  0335  084D               	movf	((_Load1+1)^(0+256)+44),w
 10866  0336  01A7               	clrf	((_Load1+1)^(0+256)+6)
 10867  0337  07A7               	addwf	((_Load1+1)^(0+256)+6),f
 10868  0338  084C               	movf	(_Load1^(0+256)+44),w
 10869  0339  01A6               	clrf	(_Load1^(0+256)+6)
 10870  033A  07A6               	addwf	(_Load1^(0+256)+6),f
 10871  033B                     l8037:	
 10872                           
 10873                           ;OverLoad_B1.c: 135: }
 10874                           ;OverLoad_B1.c: 137: if (Load1.StatusOff == 1) {
 10875  033B  1FA0               	btfss	_Load1^(0+256),7
 10876  033C  2B5D               	goto	l8045
 10877                           
 10878                           ;OverLoad_B1.c: 138: Load1.StatusOff = 0;
 10879  033D  13A0               	bcf	_Load1^(0+256),7
 10880                           
 10881                           ;OverLoad_B1.c: 139: Load1.TotalLoad = Load1.AD;
 10882  033E  084D               	movf	((_Load1+1)^(0+256)+44),w
 10883  033F  01A7               	clrf	((_Load1+1)^(0+256)+6)
 10884  0340  07A7               	addwf	((_Load1+1)^(0+256)+6),f
 10885  0341  084C               	movf	(_Load1^(0+256)+44),w
 10886  0342  01A6               	clrf	(_Load1^(0+256)+6)
 10887  0343  07A6               	addwf	(_Load1^(0+256)+6),f
 10888                           
 10889                           ;OverLoad_B1.c: 140: Load1.JudgeValue = 0x32 * Load1.LightsCount;
 10890  0344  085E               	movf	(_Load1^(0+256)+62),w
 10891  0345  0020               	movlb	0	; select bank0
 10892  0346  00B1               	movwf	??_Load_Main
 10893  0347  01B2               	clrf	??_Load_Main+1
 10894  0348  0831               	movf	??_Load_Main,w
 10895  0349  00A0               	movwf	___wmul@multiplier
 10896  034A  0832               	movf	??_Load_Main+1,w
 10897  034B  00A1               	movwf	___wmul@multiplier+1
 10898  034C  3032               	movlw	50
 10899  034D  00A2               	movwf	___wmul@multiplicand
 10900  034E  3000               	movlw	0
 10901  034F  00A3               	movwf	___wmul@multiplicand+1
 10902  0350  319D  259B  3182   	fcall	___wmul
 10903  0353  0020               	movlb	0	; select bank0
 10904  0354  0821               	movf	?___wmul+1,w
 10905  0355  0022               	movlb	2	; select bank2
 10906  0356  01D7               	clrf	((_Load1+1)^(0+256)+54)
 10907  0357  07D7               	addwf	((_Load1+1)^(0+256)+54),f
 10908  0358  0020               	movlb	0	; select bank0
 10909  0359  0820               	movf	?___wmul,w
 10910  035A  0022               	movlb	2	; select bank2
 10911  035B  01D6               	clrf	(_Load1^(0+256)+54)
 10912  035C  07D6               	addwf	(_Load1^(0+256)+54),f
 10913  035D                     l8045:	
 10914                           
 10915                           ;OverLoad_B1.c: 141: }
 10916                           ;OverLoad_B1.c: 142: }
 10917                           ;OverLoad_B1.c: 143: }
 10918                           ;OverLoad_B1.c: 144: }
 10919                           ;OverLoad_B1.c: 145: setLoad_AH_AL_Restore();
 10920  035D  319D  2546         	fcall	_setLoad_AH_AL_Restore
 10921                           
 10922                           ;OverLoad_B1.c: 157: }
 10923                           ;OverLoad_B1.c: 158: } else {
 10924  035F  0008               	return
 10925  0360                     l1694:	
 10926                           
 10927                           ;OverLoad_B1.c: 159: if (Load1.GO == 1) {
 10928  0360  1CA0               	btfss	_Load1^(0+256),1
 10929  0361  2B6F               	goto	l1713
 10930                           
 10931                           ;OverLoad_B1.c: 160: if (Load1.LightsON == 0) {
 10932  0362  1920               	btfsc	_Load1^(0+256),2
 10933  0363  2B66               	goto	l8051
 10934                           
 10935                           ;OverLoad_B1.c: 161: Load1.LightsON = 1;
 10936  0364  1520               	bsf	_Load1^(0+256),2
 10937                           
 10938                           ;OverLoad_B1.c: 162: Load1.Safe = 0;
 10939  0365  11A0               	bcf	_Load1^(0+256),3
 10940  0366                     l8051:	
 10941                           
 10942                           ;OverLoad_B1.c: 163: }
 10943                           ;OverLoad_B1.c: 164: if (getTemp_Safe() == 1 && 1 == 1) {
 10944  0366  3199  218C  3182   	fcall	_getTemp_Safe
 10945  0369  3A01               	xorlw	1
 10946  036A  1D03               	skipz
 10947  036B  0008               	return
 10948                           
 10949                           ;OverLoad_B1.c: 165: Load1.ADtoGO = 1;
 10950  036C  0022               	movlb	2	; select bank2
 10951  036D  1620               	bsf	_Load1^(0+256),4
 10952                           
 10953                           ;OverLoad_B1.c: 166: }
 10954                           ;OverLoad_B1.c: 167: } else {
 10955  036E  0008               	return
 10956  036F                     l1713:	
 10957                           
 10958                           ;OverLoad_B1.c: 168: if (Load1.LightsON == 1) {
 10959  036F  1D20               	btfss	_Load1^(0+256),2
 10960  0370  0008               	return
 10961                           
 10962                           ;OverLoad_B1.c: 169: Load1.LightsON = 0;
 10963  0371  1120               	bcf	_Load1^(0+256),2
 10964                           
 10965                           ;OverLoad_B1.c: 170: Load1.Safe = 1;
 10966  0372  15A0               	bsf	_Load1^(0+256),3
 10967                           
 10968                           ;OverLoad_B1.c: 171: Load1.ErrorCount = 0;
 10969  0373  01DC               	clrf	(_Load1^(0+256)+60)
 10970                           
 10971                           ;OverLoad_B1.c: 172: Load1.Count = 0;
 10972  0374  01DA               	clrf	(_Load1^(0+256)+58)
 10973                           
 10974                           ;OverLoad_B1.c: 173: Load1.TotalLoad = 0;
 10975  0375  01A6               	clrf	(_Load1^(0+256)+6)
 10976  0376  01A7               	clrf	((_Load1+1)^(0+256)+6)
 10977                           
 10978                           ;OverLoad_B1.c: 174: Load1.NumberCount = 0;
 10979  0377  01DF               	clrf	(_Load1^(0+256)+63)
 10980                           
 10981                           ;OverLoad_B1.c: 175: Load1.StatusOn = 0;
 10982  0378  1320               	bcf	_Load1^(0+256),6
 10983                           
 10984                           ;OverLoad_B1.c: 176: Load1.StatusOff = 0;
 10985  0379  13A0               	bcf	_Load1^(0+256),7
 10986                           
 10987                           ;OverLoad_B1.c: 177: Load1.AD = 0;
 10988  037A  01CC               	clrf	(_Load1^(0+256)+44)
 10989  037B  01CD               	clrf	((_Load1+1)^(0+256)+44)
 10990                           
 10991                           ;OverLoad_B1.c: 178: setLoad_AH_AL_Restore();
 10992  037C  319D  2546  3182   	fcall	_setLoad_AH_AL_Restore
 10993                           
 10994                           ;OverLoad_B1.c: 182: setDimmerLights_Clear(1, 1);
 10995  037F  0020               	movlb	0	; select bank0
 10996  0380  01A2               	clrf	setDimmerLights_Clear@command
 10997  0381  0AA2               	incf	setDimmerLights_Clear@command,f
 10998  0382  3001               	movlw	1
 10999  0383  319B  232D  3182   	fcall	_setDimmerLights_Clear
 11000                           
 11001                           ;OverLoad_B1.c: 186: ;;
 11002                           ;OverLoad_B1.c: 192: setDimmerLights_Clear(2, 1);
 11003  0386  0020               	movlb	0	; select bank0
 11004  0387  01A2               	clrf	setDimmerLights_Clear@command
 11005  0388  0AA2               	incf	setDimmerLights_Clear@command,f
 11006  0389  3002               	movlw	2
 11007  038A  319B  232D         	fcall	_setDimmerLights_Clear
 11008                           
 11009                           ;OverLoad_B1.c: 196: ;;
 11010  038C  0008               	return
 11011  038D                     __end_of_Load_Main:	
 11012                           
 11013                           	psect	text57
 11014  1122                     __ptext57:	
 11015 ;; *************** function _setLoad_Exceptions *****************
 11016 ;; Defined at:
 11017 ;;		line 231 in file "../src/OverLoad_B1.c"
 11018 ;; Parameters:    Size  Location     Type
 11019 ;;  command         1    wreg     unsigned char 
 11020 ;; Auto vars:     Size  Location     Type
 11021 ;;  command         1   16[BANK0 ] unsigned char 
 11022 ;;  i               1   15[BANK0 ] unsigned char 
 11023 ;; Return value:  Size  Location     Type
 11024 ;;		None               void
 11025 ;; Registers used:
 11026 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11027 ;; Tracked objects:
 11028 ;;		On entry : 0/0
 11029 ;;		On exit  : 0/0
 11030 ;;		Unchanged: 0/0
 11031 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11032 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11033 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11034 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11035 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11036 ;;Total ram usage:        3 bytes
 11037 ;; Hardware stack levels used:    1
 11038 ;; Hardware stack levels required when called:    9
 11039 ;; This function calls:
 11040 ;;		_DimmerLights_Exceptions
 11041 ;;		_setLED
 11042 ;;		_setRF_Enable
 11043 ;;		_setSw_Enable
 11044 ;; This function is called by:
 11045 ;;		_Load_Main
 11046 ;; This function uses a non-reentrant model
 11047 ;;
 11048                           
 11049                           
 11050                           ;psect for function _setLoad_Exceptions
 11051  1122                     _setLoad_Exceptions:	
 11052                           
 11053                           ;incstack = 0
 11054                           ; Regs used in _setLoad_Exceptions: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11055                           ;setLoad_Exceptions@command stored from wreg
 11056  1122  0020               	movlb	0	; select bank0
 11057  1123  00B0               	movwf	setLoad_Exceptions@command
 11058                           
 11059                           ;OverLoad_B1.c: 232: char i = command == 1 ? 0 : 1;
 11060  1124  0830               	movf	setLoad_Exceptions@command,w
 11061  1125  3A01               	xorlw	1
 11062  1126  3000               	movlw	0
 11063  1127  1D03               	skipz
 11064  1128  3001               	movlw	1
 11065  1129  00AE               	movwf	??_setLoad_Exceptions
 11066  112A  082E               	movf	??_setLoad_Exceptions,w
 11067  112B  00AF               	movwf	setLoad_Exceptions@i
 11068                           
 11069                           ;OverLoad_B1.c: 233: Load1.ERROR = command;
 11070  112C  0830               	movf	setLoad_Exceptions@command,w
 11071  112D  0022               	movlb	2	; select bank2
 11072  112E  12A0               	bcf	_Load1^(0+256),5
 11073  112F  1D03               	skipz
 11074  1130  16A0               	bsf	_Load1^(0+256),5
 11075                           
 11076                           ;OverLoad_B1.c: 234: Load1.Safe = i;
 11077  1131  0020               	movlb	0	; select bank0
 11078  1132  082F               	movf	setLoad_Exceptions@i,w
 11079  1133  0022               	movlb	2	; select bank2
 11080  1134  11A0               	bcf	_Load1^(0+256),3
 11081  1135  1D03               	skipz
 11082  1136  15A0               	bsf	_Load1^(0+256),3
 11083                           
 11084                           ;OverLoad_B1.c: 235: Load1.ErrorStatus = command;
 11085  1137  0020               	movlb	0	; select bank0
 11086  1138  0830               	movf	setLoad_Exceptions@command,w
 11087  1139  00AE               	movwf	??_setLoad_Exceptions
 11088  113A  082E               	movf	??_setLoad_Exceptions,w
 11089  113B  0022               	movlb	2	; select bank2
 11090  113C  00A5               	movwf	(_Load1^(0+256)+5)
 11091                           
 11092                           ;OverLoad_B1.c: 237: if (command == 1) {
 11093  113D  0020               	movlb	0	; select bank0
 11094  113E  0830               	movf	setLoad_Exceptions@command,w
 11095  113F  3A01               	xorlw	1
 11096  1140  1D03               	skipz
 11097  1141  2946               	goto	l1721
 11098                           
 11099                           ;OverLoad_B1.c: 238: DimmerLights_Exceptions(2);
 11100  1142  3002               	movlw	2
 11101  1143  3196  266D  3191   	fcall	_DimmerLights_Exceptions
 11102  1146                     l1721:	
 11103                           
 11104                           ;OverLoad_B1.c: 242: }
 11105                           ;OverLoad_B1.c: 243: setLED(99, command + 10);
 11106  1146  0020               	movlb	0	; select bank0
 11107  1147  0830               	movf	setLoad_Exceptions@command,w
 11108  1148  3E0A               	addlw	10
 11109  1149  00AE               	movwf	??_setLoad_Exceptions
 11110  114A  082E               	movf	??_setLoad_Exceptions,w
 11111  114B  00A1               	movwf	setLED@command
 11112  114C  3063               	movlw	99
 11113  114D  3196  260B  3191   	fcall	_setLED
 11114                           
 11115                           ;OverLoad_B1.c: 245: setSw_Enable(i);
 11116  1150  0020               	movlb	0	; select bank0
 11117  1151  082F               	movf	setLoad_Exceptions@i,w
 11118  1152  319D  2562  3191   	fcall	_setSw_Enable
 11119                           
 11120                           ;OverLoad_B1.c: 247: setRF_Enable(i);
 11121  1155  0020               	movlb	0	; select bank0
 11122  1156  082F               	movf	setLoad_Exceptions@i,w
 11123  1157  319A  22B2         	fcall	_setRF_Enable
 11124  1159  0008               	return
 11125  115A                     __end_of_setLoad_Exceptions:	
 11126                           
 11127                           	psect	text58
 11128  1D62                     __ptext58:	
 11129 ;; *************** function _setSw_Enable *****************
 11130 ;; Defined at:
 11131 ;;		line 85 in file "../src/Switch_B1.c"
 11132 ;; Parameters:    Size  Location     Type
 11133 ;;  command         1    wreg     unsigned char 
 11134 ;; Auto vars:     Size  Location     Type
 11135 ;;  command         1    2[BANK0 ] unsigned char 
 11136 ;; Return value:  Size  Location     Type
 11137 ;;		None               void
 11138 ;; Registers used:
 11139 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11140 ;; Tracked objects:
 11141 ;;		On entry : 0/0
 11142 ;;		On exit  : 0/0
 11143 ;;		Unchanged: 0/0
 11144 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11145 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11146 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11147 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11148 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11149 ;;Total ram usage:        1 bytes
 11150 ;; Hardware stack levels used:    1
 11151 ;; Hardware stack levels required when called:    6
 11152 ;; This function calls:
 11153 ;;		_SwPointSelect
 11154 ;; This function is called by:
 11155 ;;		_my_Main
 11156 ;;		_setLoad_Exceptions
 11157 ;;		_setOverTemp_Exceptions
 11158 ;; This function uses a non-reentrant model
 11159 ;;
 11160                           
 11161                           
 11162                           ;psect for function _setSw_Enable
 11163  1D62                     _setSw_Enable:	
 11164                           
 11165                           ;incstack = 0
 11166                           ; Regs used in _setSw_Enable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11167                           ;setSw_Enable@command stored from wreg
 11168  1D62  0020               	movlb	0	; select bank0
 11169  1D63  00A2               	movwf	setSw_Enable@command
 11170                           
 11171                           ;Switch_B1.c: 88: SwPointSelect(1);
 11172  1D64  3001               	movlw	1
 11173  1D65  319C  2414  319D   	fcall	_SwPointSelect
 11174                           
 11175                           ;Switch_B1.c: 89: Sw->Enable = command;
 11176  1D68  0020               	movlb	0	; select bank0
 11177  1D69  086F               	movf	_Sw,w
 11178  1D6A  0086               	movwf	6
 11179  1D6B  3001               	movlw	1	; select bank2/3
 11180  1D6C  0087               	movwf	7
 11181  1D6D  0822               	movf	setSw_Enable@command,w
 11182  1D6E  1001               	bcf	1,0
 11183  1D6F  1D03               	skipz
 11184  1D70  1401               	bsf	1,0
 11185                           
 11186                           ;Switch_B1.c: 93: SwPointSelect(2);
 11187  1D71  3002               	movlw	2
 11188  1D72  319C  2414         	fcall	_SwPointSelect
 11189                           
 11190                           ;Switch_B1.c: 94: Sw->Enable = command;
 11191  1D74  0020               	movlb	0	; select bank0
 11192  1D75  086F               	movf	_Sw,w
 11193  1D76  0086               	movwf	6
 11194  1D77  3001               	movlw	1	; select bank2/3
 11195  1D78  0087               	movwf	7
 11196  1D79  0822               	movf	setSw_Enable@command,w
 11197  1D7A  1001               	bcf	1,0
 11198  1D7B  1D03               	skipz
 11199  1D7C  1401               	bsf	1,0
 11200  1D7D  0008               	return
 11201  1D7E                     __end_of_setSw_Enable:	
 11202                           
 11203                           	psect	text59
 11204  1AB2                     __ptext59:	
 11205 ;; *************** function _setRF_Enable *****************
 11206 ;; Defined at:
 11207 ;;		line 185 in file "../src/RF_Control_B1.c"
 11208 ;; Parameters:    Size  Location     Type
 11209 ;;  command         1    wreg     unsigned char 
 11210 ;; Auto vars:     Size  Location     Type
 11211 ;;  command         1    0[BANK0 ] unsigned char 
 11212 ;; Return value:  Size  Location     Type
 11213 ;;		None               void
 11214 ;; Registers used:
 11215 ;;		wreg, status,2
 11216 ;; Tracked objects:
 11217 ;;		On entry : 0/0
 11218 ;;		On exit  : 0/0
 11219 ;;		Unchanged: 0/0
 11220 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11221 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11222 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11223 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11224 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11225 ;;Total ram usage:        1 bytes
 11226 ;; Hardware stack levels used:    1
 11227 ;; Hardware stack levels required when called:    5
 11228 ;; This function calls:
 11229 ;;		Nothing
 11230 ;; This function is called by:
 11231 ;;		_my_Main
 11232 ;;		_setLoad_Exceptions
 11233 ;;		_setOverTemp_Exceptions
 11234 ;; This function uses a non-reentrant model
 11235 ;;
 11236                           
 11237                           
 11238                           ;psect for function _setRF_Enable
 11239  1AB2                     _setRF_Enable:	
 11240                           
 11241                           ;incstack = 0
 11242                           ; Regs used in _setRF_Enable: [wreg+status,2]
 11243                           ;setRF_Enable@command stored from wreg
 11244  1AB2  0020               	movlb	0	; select bank0
 11245  1AB3  00A0               	movwf	setRF_Enable@command
 11246                           
 11247                           ;RF_Control_B1.c: 186: RF1.Enable = command;
 11248  1AB4  0820               	movf	setRF_Enable@command,w
 11249  1AB5  0021               	movlb	1	; select bank1
 11250  1AB6  1041               	bcf	_RF1^(0+128),0
 11251  1AB7  1D03               	skipz
 11252  1AB8  1441               	bsf	_RF1^(0+128),0
 11253                           
 11254                           ;RF_Control_B1.c: 187: RF1.Learn = 0;
 11255  1AB9  1341               	bcf	_RF1^(0+128),6
 11256                           
 11257                           ;RF_Control_B1.c: 188: RF1.TransceiveGO = 0;
 11258  1ABA  1141               	bcf	_RF1^(0+128),2
 11259                           
 11260                           ;RF_Control_B1.c: 189: RF1.RxStatus = 0;
 11261  1ABB  11C1               	bcf	_RF1^(0+128),3
 11262                           
 11263                           ;RF_Control_B1.c: 190: RF1.ReceiveGO = 0;
 11264  1ABC  10C1               	bcf	_RF1^(0+128),1
 11265                           
 11266                           ;RF_Control_B1.c: 191: RF1.DebounceTime = 0;
 11267  1ABD  01C5               	clrf	(_RF1^(0+128)+4)
 11268                           
 11269                           ;RF_Control_B1.c: 192: RF1.Debounce = 0;
 11270  1ABE  12C1               	bcf	_RF1^(0+128),5
 11271  1ABF  0008               	return
 11272  1AC0                     __end_of_setRF_Enable:	
 11273                           
 11274                           	psect	text60
 11275  166D                     __ptext60:	
 11276 ;; *************** function _DimmerLights_Exceptions *****************
 11277 ;; Defined at:
 11278 ;;		line 513 in file "../src/Dimmer_B1.c"
 11279 ;; Parameters:    Size  Location     Type
 11280 ;;  status          1    wreg     unsigned char 
 11281 ;; Auto vars:     Size  Location     Type
 11282 ;;  status          1   13[BANK0 ] unsigned char 
 11283 ;; Return value:  Size  Location     Type
 11284 ;;		None               void
 11285 ;; Registers used:
 11286 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11287 ;; Tracked objects:
 11288 ;;		On entry : 0/0
 11289 ;;		On exit  : 0/0
 11290 ;;		Unchanged: 0/0
 11291 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11292 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11293 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11294 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11295 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11296 ;;Total ram usage:        1 bytes
 11297 ;; Hardware stack levels used:    1
 11298 ;; Hardware stack levels required when called:    8
 11299 ;; This function calls:
 11300 ;;		_getDimmerLights_StatusFlag
 11301 ;;		_setBuz
 11302 ;;		_setDimmerLights_ERROR
 11303 ;;		_setDimmerLights_TriggerERROR
 11304 ;; This function is called by:
 11305 ;;		_setLoad_Exceptions
 11306 ;;		_setOverTemp_Exceptions
 11307 ;; This function uses a non-reentrant model
 11308 ;;
 11309                           
 11310                           
 11311                           ;psect for function _DimmerLights_Exceptions
 11312  166D                     _DimmerLights_Exceptions:	
 11313                           
 11314                           ;incstack = 0
 11315                           ; Regs used in _DimmerLights_Exceptions: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 11316                           ;DimmerLights_Exceptions@status stored from wreg
 11317  166D  0020               	movlb	0	; select bank0
 11318  166E  00AD               	movwf	DimmerLights_Exceptions@status
 11319                           
 11320                           ;Dimmer_B1.c: 514: if (status == 1) {
 11321  166F  082D               	movf	DimmerLights_Exceptions@status,w
 11322  1670  3A01               	xorlw	1
 11323  1671  1D03               	skipz
 11324  1672  2E83               	goto	l6541
 11325                           
 11326                           ;Dimmer_B1.c: 515: if (getDimmerLights_StatusFlag() == 1) {
 11327  1673  319B  235D  3196   	fcall	_getDimmerLights_StatusFlag
 11328  1676  3A01               	xorlw	1
 11329  1677  1D03               	skipz
 11330  1678  2E9B               	goto	l6549
 11331                           
 11332                           ;Dimmer_B1.c: 516: setBuz(10, 300);
 11333  1679  302C               	movlw	44
 11334  167A  0020               	movlb	0	; select bank0
 11335  167B  00A9               	movwf	setBuz@time
 11336  167C  3001               	movlw	1
 11337  167D  00AA               	movwf	setBuz@time+1
 11338  167E  300A               	movlw	10
 11339  167F  3194  24F6  3196   	fcall	_setBuz
 11340  1682  2E9B               	goto	l6549
 11341  1683                     l6541:	
 11342                           ;Dimmer_B1.c: 528: } else if (status == 2)
 11343                           
 11344                           ;Dimmer_B1.c: 523: setDimmerLights_ERROR(2);
 11345                           
 11346                           ;Dimmer_B1.c: 517: }
 11347                           ;Dimmer_B1.c: 520: setDimmerLights_ERROR(1);
 11348                           
 11349  1683  0020               	movlb	0	; select bank0
 11350  1684  082D               	movf	DimmerLights_Exceptions@status,w
 11351  1685  3A02               	xorlw	2
 11352  1686  1D03               	skipz
 11353  1687  2E96               	goto	l6547
 11354                           
 11355                           ;Dimmer_B1.c: 529: {
 11356                           ;Dimmer_B1.c: 530: setBuz(5, 300);
 11357  1688  302C               	movlw	44
 11358  1689  00A9               	movwf	setBuz@time
 11359  168A  3001               	movlw	1
 11360  168B  00AA               	movwf	setBuz@time+1
 11361  168C  3005               	movlw	5
 11362  168D  3194  24F6  3196   	fcall	_setBuz
 11363                           
 11364                           ;Dimmer_B1.c: 531: setDimmerLights_ERROR(Dimmer->Load);
 11365  1690  0021               	movlb	1	; select bank1
 11366  1691  0A4B               	incf	_Dimmer^(0+128),w
 11367  1692  0086               	movwf	6
 11368  1693  0187               	clrf	7
 11369  1694  0801               	movf	1,w
 11370  1695  2EA0               	goto	L7
 11371  1696                     l6547:	
 11372                           ;Dimmer_B1.c: 532: } else if (status == 3)
 11373                           
 11374  1696  0020               	movlb	0	; select bank0
 11375  1697  082D               	movf	DimmerLights_Exceptions@status,w
 11376  1698  3A03               	xorlw	3
 11377  1699  1D03               	skipz
 11378  169A  2EA3               	goto	l862
 11379  169B                     l6549:	
 11380                           
 11381                           ;Dimmer_B1.c: 533: {
 11382                           ;Dimmer_B1.c: 535: setDimmerLights_ERROR(1);
 11383  169B  3001               	movlw	1
 11384  169C  3194  249F  3196   	fcall	_setDimmerLights_ERROR
 11385                           
 11386                           ;Dimmer_B1.c: 538: setDimmerLights_ERROR(2);
 11387  169F  3002               	movlw	2
 11388  16A0                     L7:	
 11389  16A0  3194  249F  3196   	fcall	_setDimmerLights_ERROR
 11390  16A3                     l862:	
 11391                           
 11392                           ;Dimmer_B1.c: 543: }
 11393                           ;Dimmer_B1.c: 546: setDimmerLights_TriggerERROR(1, 0);
 11394  16A3  0020               	movlb	0	; select bank0
 11395  16A4  01A2               	clrf	setDimmerLights_TriggerERROR@command
 11396  16A5  3001               	movlw	1
 11397  16A6  319F  2714  3196   	fcall	_setDimmerLights_TriggerERROR
 11398                           
 11399                           ;Dimmer_B1.c: 549: setDimmerLights_TriggerERROR(2, 0);
 11400  16A9  0020               	movlb	0	; select bank0
 11401  16AA  01A2               	clrf	setDimmerLights_TriggerERROR@command
 11402  16AB  3002               	movlw	2
 11403  16AC  319F  2714  3196   	fcall	_setDimmerLights_TriggerERROR
 11404                           
 11405                           ;Dimmer_B1.c: 555: if (myMain->SelfTest == 0) {
 11406  16AF  087B               	movf	_myMain,w
 11407  16B0  0086               	movwf	6
 11408  16B1  3002               	movlw	2	; select bank4/5
 11409  16B2  0087               	movwf	7
 11410  16B3  1B01               	btfsc	1,6
 11411  16B4  0008               	return
 11412                           
 11413                           ;Dimmer_B1.c: 556: myMain->i = 0;
 11414  16B5  087B               	movf	_myMain,w
 11415  16B6  3E0E               	addlw	14
 11416  16B7  0086               	movwf	6
 11417  16B8  3002               	movlw	2	; select bank4/5
 11418  16B9  0087               	movwf	7
 11419  16BA  1001               	bcf	1,0
 11420                           
 11421                           ;Dimmer_B1.c: 557: myMain->j = 0;
 11422  16BB  087B               	movf	_myMain,w
 11423  16BC  3E0E               	addlw	14
 11424  16BD  0086               	movwf	6
 11425  16BE  3002               	movlw	2	; select bank4/5
 11426  16BF  0087               	movwf	7
 11427  16C0  1081               	bcf	1,1
 11428                           
 11429                           ;Dimmer_B1.c: 558: myMain->k = 1;
 11430  16C1  087B               	movf	_myMain,w
 11431  16C2  3E0E               	addlw	14
 11432  16C3  0086               	movwf	6
 11433  16C4  3002               	movlw	2	; select bank4/5
 11434  16C5  0087               	movwf	7
 11435  16C6  1501               	bsf	1,2
 11436                           
 11437                           ;Dimmer_B1.c: 559: myMain->Count2 = 0;
 11438  16C7  087B               	movf	_myMain,w
 11439  16C8  3E07               	addlw	7
 11440  16C9  0086               	movwf	6
 11441  16CA  3002               	movlw	2	; select bank4/5
 11442  16CB  0087               	movwf	7
 11443  16CC  3000               	movlw	0
 11444  16CD  3FC0               	movwi [0]fsr1
 11445  16CE  3FC1               	movwi [1]fsr1
 11446  16CF  0008               	return
 11447  16D0                     __end_of_DimmerLights_Exceptions:	
 11448                           
 11449                           	psect	text61
 11450  1F14                     __ptext61:	
 11451 ;; *************** function _setDimmerLights_TriggerERROR *****************
 11452 ;; Defined at:
 11453 ;;		line 582 in file "../src/Dimmer_B1.c"
 11454 ;; Parameters:    Size  Location     Type
 11455 ;;  lights          1    wreg     unsigned char 
 11456 ;;  command         1    2[BANK0 ] unsigned char 
 11457 ;; Auto vars:     Size  Location     Type
 11458 ;;  lights          1    3[BANK0 ] unsigned char 
 11459 ;; Return value:  Size  Location     Type
 11460 ;;		None               void
 11461 ;; Registers used:
 11462 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11463 ;; Tracked objects:
 11464 ;;		On entry : 0/0
 11465 ;;		On exit  : 0/0
 11466 ;;		Unchanged: 0/0
 11467 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11468 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11469 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11470 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11471 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11472 ;;Total ram usage:        2 bytes
 11473 ;; Hardware stack levels used:    1
 11474 ;; Hardware stack levels required when called:    6
 11475 ;; This function calls:
 11476 ;;		_DimmerLightsPointSelect
 11477 ;; This function is called by:
 11478 ;;		_DimmerLights_Exceptions
 11479 ;; This function uses a non-reentrant model
 11480 ;;
 11481                           
 11482                           
 11483                           ;psect for function _setDimmerLights_TriggerERROR
 11484  1F14                     _setDimmerLights_TriggerERROR:	
 11485                           
 11486                           ;incstack = 0
 11487                           ; Regs used in _setDimmerLights_TriggerERROR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath
      +                          +cstack]
 11488                           ;setDimmerLights_TriggerERROR@lights stored from wreg
 11489  1F14  0020               	movlb	0	; select bank0
 11490  1F15  00A3               	movwf	setDimmerLights_TriggerERROR@lights
 11491                           
 11492                           ;Dimmer_B1.c: 584: DimmerLightsPointSelect(lights);
 11493  1F16  0823               	movf	setDimmerLights_TriggerERROR@lights,w
 11494  1F17  319B  23C6         	fcall	_DimmerLightsPointSelect
 11495                           
 11496                           ;Dimmer_B1.c: 585: DimmerLights->Trigger = command;
 11497  1F19  0879               	movf	_DimmerLights,w
 11498  1F1A  3E08               	addlw	8
 11499  1F1B  0086               	movwf	6
 11500  1F1C  3001               	movlw	1	; select bank2/3
 11501  1F1D  0087               	movwf	7
 11502  1F1E  0020               	movlb	0	; select bank0
 11503  1F1F  0822               	movf	setDimmerLights_TriggerERROR@command,w
 11504  1F20  1101               	bcf	1,2
 11505  1F21  1D03               	skipz
 11506  1F22  1501               	bsf	1,2
 11507                           
 11508                           ;Dimmer_B1.c: 586: DimmerLights->Switch = command;
 11509  1F23  0879               	movf	_DimmerLights,w
 11510  1F24  3E08               	addlw	8
 11511  1F25  0086               	movwf	6
 11512  1F26  3001               	movlw	1	; select bank2/3
 11513  1F27  0087               	movwf	7
 11514  1F28  0822               	movf	setDimmerLights_TriggerERROR@command,w
 11515  1F29  1081               	bcf	1,1
 11516  1F2A  1D03               	skipz
 11517  1F2B  1481               	bsf	1,1
 11518                           
 11519                           ;Dimmer_B1.c: 587: DimmerLights->TriggerAdj = command;
 11520  1F2C  0879               	movf	_DimmerLights,w
 11521  1F2D  3E08               	addlw	8
 11522  1F2E  0086               	movwf	6
 11523  1F2F  3001               	movlw	1	; select bank2/3
 11524  1F30  0087               	movwf	7
 11525  1F31  0822               	movf	setDimmerLights_TriggerERROR@command,w
 11526  1F32  1201               	bcf	1,4
 11527  1F33  1D03               	skipz
 11528  1F34  1601               	bsf	1,4
 11529                           
 11530                           ;Dimmer_B1.c: 588: DimmerLights->AdjGo = command;
 11531  1F35  0879               	movf	_DimmerLights,w
 11532  1F36  3E08               	addlw	8
 11533  1F37  0086               	movwf	6
 11534  1F38  3001               	movlw	1	; select bank2/3
 11535  1F39  0087               	movwf	7
 11536  1F3A  0822               	movf	setDimmerLights_TriggerERROR@command,w
 11537  1F3B  1181               	bcf	1,3
 11538  1F3C  1D03               	skipz
 11539  1F3D  1581               	bsf	1,3
 11540  1F3E  0008               	return
 11541  1F3F                     __end_of_setDimmerLights_TriggerERROR:	
 11542                           
 11543                           	psect	text62
 11544  149F                     __ptext62:	
 11545 ;; *************** function _setDimmerLights_ERROR *****************
 11546 ;; Defined at:
 11547 ;;		line 564 in file "../src/Dimmer_B1.c"
 11548 ;; Parameters:    Size  Location     Type
 11549 ;;  lights          1    wreg     unsigned char 
 11550 ;; Auto vars:     Size  Location     Type
 11551 ;;  lights          1    5[BANK0 ] unsigned char 
 11552 ;; Return value:  Size  Location     Type
 11553 ;;		None               void
 11554 ;; Registers used:
 11555 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11556 ;; Tracked objects:
 11557 ;;		On entry : 0/0
 11558 ;;		On exit  : 0/0
 11559 ;;		Unchanged: 0/0
 11560 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11561 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11562 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11563 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11564 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11565 ;;Total ram usage:        2 bytes
 11566 ;; Hardware stack levels used:    1
 11567 ;; Hardware stack levels required when called:    7
 11568 ;; This function calls:
 11569 ;;		_DimmerLightsPointSelect
 11570 ;;		_setLED
 11571 ;;		_setLoad_StatusOff
 11572 ;;		_setRFSW_Status
 11573 ;;		_setSw_Status
 11574 ;; This function is called by:
 11575 ;;		_DimmerLights_Exceptions
 11576 ;; This function uses a non-reentrant model
 11577 ;;
 11578                           
 11579                           
 11580                           ;psect for function _setDimmerLights_ERROR
 11581  149F                     _setDimmerLights_ERROR:	
 11582                           
 11583                           ;incstack = 0
 11584                           ; Regs used in _setDimmerLights_ERROR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 11585                           ;setDimmerLights_ERROR@lights stored from wreg
 11586  149F  0020               	movlb	0	; select bank0
 11587  14A0  00A5               	movwf	setDimmerLights_ERROR@lights
 11588                           
 11589                           ;Dimmer_B1.c: 565: DimmerLightsPointSelect(lights);
 11590  14A1  0825               	movf	setDimmerLights_ERROR@lights,w
 11591  14A2  319B  23C6  3194   	fcall	_DimmerLightsPointSelect
 11592                           
 11593                           ;Dimmer_B1.c: 566: if (DimmerLights->Status == 1) {
 11594  14A5  0879               	movf	_DimmerLights,w
 11595  14A6  0086               	movwf	6
 11596  14A7  3001               	movlw	1	; select bank2/3
 11597  14A8  0087               	movwf	7
 11598  14A9  1E81               	btfss	1,5
 11599  14AA  0008               	return
 11600                           
 11601                           ;Dimmer_B1.c: 568: DimmerLights->Signal = 0;
 11602  14AB  0879               	movf	_DimmerLights,w
 11603  14AC  0086               	movwf	6
 11604  14AD  3001               	movlw	1	; select bank2/3
 11605  14AE  0087               	movwf	7
 11606  14AF  1081               	bcf	1,1
 11607                           
 11608                           ;Dimmer_B1.c: 569: DimmerLights->AdjFlag = 0;
 11609  14B0  0879               	movf	_DimmerLights,w
 11610  14B1  0086               	movwf	6
 11611  14B2  3001               	movlw	1	; select bank2/3
 11612  14B3  0087               	movwf	7
 11613  14B4  1181               	bcf	1,3
 11614                           
 11615                           ;Dimmer_B1.c: 570: DimmerLights->AdjStatus = 0;
 11616  14B5  0879               	movf	_DimmerLights,w
 11617  14B6  0086               	movwf	6
 11618  14B7  3001               	movlw	1	; select bank2/3
 11619  14B8  0087               	movwf	7
 11620  14B9  1201               	bcf	1,4
 11621                           
 11622                           ;Dimmer_B1.c: 571: DimmerLights->StatusFlag = 0;
 11623  14BA  0879               	movf	_DimmerLights,w
 11624  14BB  0086               	movwf	6
 11625  14BC  3001               	movlw	1	; select bank2/3
 11626  14BD  0087               	movwf	7
 11627  14BE  1301               	bcf	1,6
 11628                           
 11629                           ;Dimmer_B1.c: 572: DimmerLights->DimmingTimeValue = 7;
 11630  14BF  3007               	movlw	7
 11631  14C0  0020               	movlb	0	; select bank0
 11632  14C1  00A4               	movwf	??_setDimmerLights_ERROR
 11633  14C2  0879               	movf	_DimmerLights,w
 11634  14C3  3E02               	addlw	2
 11635  14C4  0086               	movwf	6
 11636  14C5  3001               	movlw	1	; select bank2/3
 11637  14C6  0087               	movwf	7
 11638  14C7  0824               	movf	??_setDimmerLights_ERROR,w
 11639  14C8  0081               	movwf	1
 11640                           
 11641                           ;Dimmer_B1.c: 573: DimmerLights->DimmingValue = DimmerLights->MinimumValue;
 11642  14C9  0879               	movf	_DimmerLights,w
 11643  14CA  3E06               	addlw	6
 11644  14CB  0086               	movwf	6
 11645  14CC  3001               	movlw	1	; select bank2/3
 11646  14CD  0087               	movwf	7
 11647  14CE  0801               	movf	1,w
 11648  14CF  00A4               	movwf	??_setDimmerLights_ERROR
 11649  14D0  0879               	movf	_DimmerLights,w
 11650  14D1  3E04               	addlw	4
 11651  14D2  0086               	movwf	6
 11652  14D3  3001               	movlw	1	; select bank2/3
 11653  14D4  0087               	movwf	7
 11654  14D5  0824               	movf	??_setDimmerLights_ERROR,w
 11655  14D6  0081               	movwf	1
 11656                           
 11657                           ;Dimmer_B1.c: 574: Dimmer->Detect = 1;
 11658  14D7  0021               	movlb	1	; select bank1
 11659  14D8  084B               	movf	_Dimmer^(0+128),w
 11660  14D9  0086               	movwf	6
 11661  14DA  0187               	clrf	7
 11662  14DB  1401               	bsf	1,0
 11663                           
 11664                           ;Dimmer_B1.c: 575: setLoad_StatusOff(lights, 1);
 11665  14DC  0020               	movlb	0	; select bank0
 11666  14DD  01A0               	clrf	setLoad_StatusOff@command
 11667  14DE  0AA0               	incf	setLoad_StatusOff@command,f
 11668  14DF  0825               	movf	setDimmerLights_ERROR@lights,w
 11669  14E0  319D  25F7  3194   	fcall	_setLoad_StatusOff
 11670                           
 11671                           ;Dimmer_B1.c: 576: setLED(lights, 1);
 11672  14E3  0020               	movlb	0	; select bank0
 11673  14E4  01A1               	clrf	setLED@command
 11674  14E5  0AA1               	incf	setLED@command,f
 11675  14E6  0825               	movf	setDimmerLights_ERROR@lights,w
 11676  14E7  3196  260B  3194   	fcall	_setLED
 11677                           
 11678                           ;Dimmer_B1.c: 577: setSw_Status(lights, 0);
 11679  14EA  0020               	movlb	0	; select bank0
 11680  14EB  01A2               	clrf	setSw_Status@command
 11681  14EC  0825               	movf	setDimmerLights_ERROR@lights,w
 11682  14ED  319A  22CF  3194   	fcall	_setSw_Status
 11683                           
 11684                           ;Dimmer_B1.c: 578: setRFSW_Status(lights, 0);
 11685  14F0  0020               	movlb	0	; select bank0
 11686  14F1  01A2               	clrf	setRFSW_Status@command
 11687  14F2  0825               	movf	setDimmerLights_ERROR@lights,w
 11688  14F3  319A  22C0         	fcall	_setRFSW_Status
 11689  14F5  0008               	return
 11690  14F6                     __end_of_setDimmerLights_ERROR:	
 11691                           
 11692                           	psect	text63
 11693  1B2D                     __ptext63:	
 11694 ;; *************** function _setDimmerLights_Clear *****************
 11695 ;; Defined at:
 11696 ;;		line 717 in file "../src/Dimmer_B1.c"
 11697 ;; Parameters:    Size  Location     Type
 11698 ;;  lights          1    wreg     unsigned char 
 11699 ;;  command         1    2[BANK0 ] unsigned char 
 11700 ;; Auto vars:     Size  Location     Type
 11701 ;;  lights          1    3[BANK0 ] unsigned char 
 11702 ;; Return value:  Size  Location     Type
 11703 ;;		None               void
 11704 ;; Registers used:
 11705 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11706 ;; Tracked objects:
 11707 ;;		On entry : 0/0
 11708 ;;		On exit  : 0/0
 11709 ;;		Unchanged: 0/0
 11710 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11711 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11712 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11713 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11714 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11715 ;;Total ram usage:        2 bytes
 11716 ;; Hardware stack levels used:    1
 11717 ;; Hardware stack levels required when called:    6
 11718 ;; This function calls:
 11719 ;;		_DimmerLightsPointSelect
 11720 ;; This function is called by:
 11721 ;;		_Load_Main
 11722 ;; This function uses a non-reentrant model
 11723 ;;
 11724                           
 11725                           
 11726                           ;psect for function _setDimmerLights_Clear
 11727  1B2D                     _setDimmerLights_Clear:	
 11728                           
 11729                           ;incstack = 0
 11730                           ; Regs used in _setDimmerLights_Clear: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 11731                           ;setDimmerLights_Clear@lights stored from wreg
 11732  1B2D  0020               	movlb	0	; select bank0
 11733  1B2E  00A3               	movwf	setDimmerLights_Clear@lights
 11734                           
 11735                           ;Dimmer_B1.c: 719: DimmerLightsPointSelect(lights);
 11736  1B2F  0823               	movf	setDimmerLights_Clear@lights,w
 11737  1B30  319B  23C6         	fcall	_DimmerLightsPointSelect
 11738                           
 11739                           ;Dimmer_B1.c: 720: DimmerLights->Clear = command;
 11740  1B32  0879               	movf	_DimmerLights,w
 11741  1B33  3E09               	addlw	9
 11742  1B34  0086               	movwf	6
 11743  1B35  3001               	movlw	1	; select bank2/3
 11744  1B36  0087               	movwf	7
 11745  1B37  0020               	movlb	0	; select bank0
 11746  1B38  0822               	movf	setDimmerLights_Clear@command,w
 11747  1B39  1101               	bcf	1,2
 11748  1B3A  1D03               	skipz
 11749  1B3B  1501               	bsf	1,2
 11750  1B3C  0008               	return
 11751  1B3D                     __end_of_setDimmerLights_Clear:	
 11752                           
 11753                           	psect	text64
 11754  198C                     __ptext64:	
 11755 ;; *************** function _getTemp_Safe *****************
 11756 ;; Defined at:
 11757 ;;		line 21 in file "../src/OverTemperature_B1.c"
 11758 ;; Parameters:    Size  Location     Type
 11759 ;;		None
 11760 ;; Auto vars:     Size  Location     Type
 11761 ;;		None
 11762 ;; Return value:  Size  Location     Type
 11763 ;;                  1    wreg      unsigned char 
 11764 ;; Registers used:
 11765 ;;		wreg, status,2, status,0
 11766 ;; Tracked objects:
 11767 ;;		On entry : 0/0
 11768 ;;		On exit  : 0/0
 11769 ;;		Unchanged: 0/0
 11770 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11771 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11772 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11773 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11774 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11775 ;;Total ram usage:        0 bytes
 11776 ;; Hardware stack levels used:    1
 11777 ;; Hardware stack levels required when called:    5
 11778 ;; This function calls:
 11779 ;;		Nothing
 11780 ;; This function is called by:
 11781 ;;		_Load_Main
 11782 ;; This function uses a non-reentrant model
 11783 ;;
 11784                           
 11785                           
 11786                           ;psect for function _getTemp_Safe
 11787  198C                     _getTemp_Safe:	
 11788                           
 11789                           ;OverTemperature_B1.c: 22: return Temp1.Safe;
 11790                           
 11791                           ;incstack = 0
 11792                           ; Regs used in _getTemp_Safe: [wreg+status,2+status,0]
 11793  198C  0021               	movlb	1	; select bank1
 11794  198D  0E57               	swapf	_Temp1^(0+128),w
 11795  198E  3901               	andlw	1
 11796  198F  0008               	return
 11797  1990                     __end_of_getTemp_Safe:	
 11798                           
 11799                           	psect	text65
 11800  1D9B                     __ptext65:	
 11801 ;; *************** function ___wmul *****************
 11802 ;; Defined at:
 11803 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul16.c"
 11804 ;; Parameters:    Size  Location     Type
 11805 ;;  multiplier      2    0[BANK0 ] unsigned int 
 11806 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 11807 ;; Auto vars:     Size  Location     Type
 11808 ;;  product         2    4[BANK0 ] unsigned int 
 11809 ;; Return value:  Size  Location     Type
 11810 ;;                  2    0[BANK0 ] unsigned int 
 11811 ;; Registers used:
 11812 ;;		wreg, status,2, status,0
 11813 ;; Tracked objects:
 11814 ;;		On entry : 0/0
 11815 ;;		On exit  : 0/0
 11816 ;;		Unchanged: 0/0
 11817 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11818 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11819 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11820 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11821 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11822 ;;Total ram usage:        6 bytes
 11823 ;; Hardware stack levels used:    1
 11824 ;; Hardware stack levels required when called:    5
 11825 ;; This function calls:
 11826 ;;		Nothing
 11827 ;; This function is called by:
 11828 ;;		_Load_Main
 11829 ;; This function uses a non-reentrant model
 11830 ;;
 11831                           
 11832                           
 11833                           ;psect for function ___wmul
 11834  1D9B                     ___wmul:	
 11835                           
 11836                           ;incstack = 0
 11837                           ; Regs used in ___wmul: [wreg+status,2+status,0]
 11838  1D9B  0020               	movlb	0	; select bank0
 11839  1D9C  01A4               	clrf	___wmul@product
 11840  1D9D  01A5               	clrf	___wmul@product+1
 11841  1D9E                     l7649:	
 11842  1D9E  1C20               	btfss	___wmul@multiplier,0
 11843  1D9F  2DA4               	goto	l2886
 11844  1DA0  0822               	movf	___wmul@multiplicand,w
 11845  1DA1  07A4               	addwf	___wmul@product,f
 11846  1DA2  0823               	movf	___wmul@multiplicand+1,w
 11847  1DA3  3DA5               	addwfc	___wmul@product+1,f
 11848  1DA4                     l2886:	
 11849  1DA4  3001               	movlw	1
 11850  1DA5                     u7165:	
 11851  1DA5  35A2               	lslf	___wmul@multiplicand,f
 11852  1DA6  0DA3               	rlf	___wmul@multiplicand+1,f
 11853  1DA7  0B89               	decfsz	9,f
 11854  1DA8  2DA5               	goto	u7165
 11855  1DA9  3001               	movlw	1
 11856  1DAA                     u7175:	
 11857  1DAA  36A1               	lsrf	___wmul@multiplier+1,f
 11858  1DAB  0CA0               	rrf	___wmul@multiplier,f
 11859  1DAC  0B89               	decfsz	9,f
 11860  1DAD  2DAA               	goto	u7175
 11861  1DAE  0821               	movf	___wmul@multiplier+1,w
 11862  1DAF  0420               	iorwf	___wmul@multiplier,w
 11863  1DB0  1D03               	skipz
 11864  1DB1  2D9E               	goto	l7649
 11865  1DB2  0825               	movf	___wmul@product+1,w
 11866  1DB3  01A1               	clrf	?___wmul+1
 11867  1DB4  07A1               	addwf	?___wmul+1,f
 11868  1DB5  0824               	movf	___wmul@product,w
 11869  1DB6  01A0               	clrf	?___wmul
 11870  1DB7  07A0               	addwf	?___wmul,f
 11871  1DB8  0008               	return
 11872  1DB9                     __end_of___wmul:	
 11873                           
 11874                           	psect	text66
 11875  10EB                     __ptext66:	
 11876 ;; *************** function ___lwdiv *****************
 11877 ;; Defined at:
 11878 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\lwdiv.c"
 11879 ;; Parameters:    Size  Location     Type
 11880 ;;  divisor         2    0[BANK0 ] unsigned int 
 11881 ;;  dividend        2    2[BANK0 ] unsigned int 
 11882 ;; Auto vars:     Size  Location     Type
 11883 ;;  quotient        2    5[BANK0 ] unsigned int 
 11884 ;;  counter         1    7[BANK0 ] unsigned char 
 11885 ;; Return value:  Size  Location     Type
 11886 ;;                  2    0[BANK0 ] unsigned int 
 11887 ;; Registers used:
 11888 ;;		wreg, status,2, status,0
 11889 ;; Tracked objects:
 11890 ;;		On entry : 0/0
 11891 ;;		On exit  : 0/0
 11892 ;;		Unchanged: 0/0
 11893 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11894 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11895 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11896 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11897 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11898 ;;Total ram usage:        8 bytes
 11899 ;; Hardware stack levels used:    1
 11900 ;; Hardware stack levels required when called:    5
 11901 ;; This function calls:
 11902 ;;		Nothing
 11903 ;; This function is called by:
 11904 ;;		_Load_Main
 11905 ;; This function uses a non-reentrant model
 11906 ;;
 11907                           
 11908                           
 11909                           ;psect for function ___lwdiv
 11910  10EB                     ___lwdiv:	
 11911                           
 11912                           ;incstack = 0
 11913                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
 11914  10EB  0020               	movlb	0	; select bank0
 11915  10EC  01A5               	clrf	___lwdiv@quotient
 11916  10ED  01A6               	clrf	___lwdiv@quotient+1
 11917  10EE  0821               	movf	___lwdiv@divisor+1,w
 11918  10EF  0420               	iorwf	___lwdiv@divisor,w
 11919  10F0  1903               	skipnz
 11920  10F1  291B               	goto	l7681
 11921  10F2  01A7               	clrf	___lwdiv@counter
 11922  10F3  0AA7               	incf	___lwdiv@counter,f
 11923  10F4                     l7669:	
 11924  10F4  1BA1               	btfsc	___lwdiv@divisor+1,7
 11925  10F5  2900               	goto	l7671
 11926  10F6  3001               	movlw	1
 11927  10F7                     u7205:	
 11928  10F7  35A0               	lslf	___lwdiv@divisor,f
 11929  10F8  0DA1               	rlf	___lwdiv@divisor+1,f
 11930  10F9  0B89               	decfsz	9,f
 11931  10FA  28F7               	goto	u7205
 11932  10FB  3001               	movlw	1
 11933  10FC  00A4               	movwf	??___lwdiv
 11934  10FD  0824               	movf	??___lwdiv,w
 11935  10FE  07A7               	addwf	___lwdiv@counter,f
 11936  10FF  28F4               	goto	l7669
 11937  1100                     l7671:	
 11938  1100  3001               	movlw	1
 11939  1101                     u7225:	
 11940  1101  35A5               	lslf	___lwdiv@quotient,f
 11941  1102  0DA6               	rlf	___lwdiv@quotient+1,f
 11942  1103  0B89               	decfsz	9,f
 11943  1104  2901               	goto	u7225
 11944  1105  0821               	movf	___lwdiv@divisor+1,w
 11945  1106  0223               	subwf	___lwdiv@dividend+1,w
 11946  1107  1D03               	skipz
 11947  1108  290B               	goto	u7235
 11948  1109  0820               	movf	___lwdiv@divisor,w
 11949  110A  0222               	subwf	___lwdiv@dividend,w
 11950  110B                     u7235:	
 11951  110B  1C03               	skipc
 11952  110C  2912               	goto	l7677
 11953  110D  0820               	movf	___lwdiv@divisor,w
 11954  110E  02A2               	subwf	___lwdiv@dividend,f
 11955  110F  0821               	movf	___lwdiv@divisor+1,w
 11956  1110  3BA3               	subwfb	___lwdiv@dividend+1,f
 11957  1111  1425               	bsf	___lwdiv@quotient,0
 11958  1112                     l7677:	
 11959  1112  3001               	movlw	1
 11960  1113                     u7245:	
 11961  1113  36A1               	lsrf	___lwdiv@divisor+1,f
 11962  1114  0CA0               	rrf	___lwdiv@divisor,f
 11963  1115  0B89               	decfsz	9,f
 11964  1116  2913               	goto	u7245
 11965  1117  3001               	movlw	1
 11966  1118  02A7               	subwf	___lwdiv@counter,f
 11967  1119  1D03               	btfss	3,2
 11968  111A  2900               	goto	l7671
 11969  111B                     l7681:	
 11970  111B  0826               	movf	___lwdiv@quotient+1,w
 11971  111C  01A1               	clrf	?___lwdiv+1
 11972  111D  07A1               	addwf	?___lwdiv+1,f
 11973  111E  0825               	movf	___lwdiv@quotient,w
 11974  111F  01A0               	clrf	?___lwdiv
 11975  1120  07A0               	addwf	?___lwdiv,f
 11976  1121  0008               	return
 11977  1122                     __end_of___lwdiv:	
 11978                           
 11979                           	psect	text67
 11980  1994                     __ptext67:	
 11981 ;; *************** function _Load_Initialization *****************
 11982 ;; Defined at:
 11983 ;;		line 9 in file "../src/OverLoad_B1.c"
 11984 ;; Parameters:    Size  Location     Type
 11985 ;;		None
 11986 ;; Auto vars:     Size  Location     Type
 11987 ;;		None
 11988 ;; Return value:  Size  Location     Type
 11989 ;;		None               void
 11990 ;; Registers used:
 11991 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11992 ;; Tracked objects:
 11993 ;;		On entry : 0/0
 11994 ;;		On exit  : 0/0
 11995 ;;		Unchanged: 0/0
 11996 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11997 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11998 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11999 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12000 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12001 ;;Total ram usage:        0 bytes
 12002 ;; Hardware stack levels used:    1
 12003 ;; Hardware stack levels required when called:    6
 12004 ;; This function calls:
 12005 ;;		_setLoad_AH_AL_Restore
 12006 ;; This function is called by:
 12007 ;;		_main
 12008 ;; This function uses a non-reentrant model
 12009 ;;
 12010                           
 12011                           
 12012                           ;psect for function _Load_Initialization
 12013  1994                     _Load_Initialization:	
 12014                           
 12015                           ;OverLoad_B1.c: 10: Load1.Safe = 1;
 12016                           
 12017                           ;incstack = 0
 12018                           ; Regs used in _Load_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12019  1994  0022               	movlb	2	; select bank2
 12020  1995  15A0               	bsf	_Load1^(0+256),3
 12021                           
 12022                           ;OverLoad_B1.c: 11: setLoad_AH_AL_Restore();
 12023  1996  319D  2546         	fcall	_setLoad_AH_AL_Restore
 12024  1998  0008               	return
 12025  1999                     __end_of_Load_Initialization:	
 12026                           
 12027                           	psect	text68
 12028  1D46                     __ptext68:	
 12029 ;; *************** function _setLoad_AH_AL_Restore *****************
 12030 ;; Defined at:
 12031 ;;		line 307 in file "../src/OverLoad_B1.c"
 12032 ;; Parameters:    Size  Location     Type
 12033 ;;		None
 12034 ;; Auto vars:     Size  Location     Type
 12035 ;;  i               1    1[BANK0 ] unsigned char 
 12036 ;; Return value:  Size  Location     Type
 12037 ;;		None               void
 12038 ;; Registers used:
 12039 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 12040 ;; Tracked objects:
 12041 ;;		On entry : 0/0
 12042 ;;		On exit  : 0/0
 12043 ;;		Unchanged: 0/0
 12044 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12045 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12046 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12047 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12048 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12049 ;;Total ram usage:        2 bytes
 12050 ;; Hardware stack levels used:    1
 12051 ;; Hardware stack levels required when called:    5
 12052 ;; This function calls:
 12053 ;;		Nothing
 12054 ;; This function is called by:
 12055 ;;		_Load_Initialization
 12056 ;;		_Load_Main
 12057 ;; This function uses a non-reentrant model
 12058 ;;
 12059                           
 12060                           
 12061                           ;psect for function _setLoad_AH_AL_Restore
 12062  1D46                     _setLoad_AH_AL_Restore:	
 12063                           
 12064                           ;OverLoad_B1.c: 308: char i;
 12065                           ;OverLoad_B1.c: 309: for (i = 0; i < 5; i++) {
 12066                           
 12067                           ;incstack = 0
 12068                           ; Regs used in _setLoad_AH_AL_Restore: [wreg+fsr1l+fsr1h+status,2+status,0]
 12069  1D46  0020               	movlb	0	; select bank0
 12070  1D47  01A1               	clrf	setLoad_AH_AL_Restore@i
 12071  1D48                     L8:	
 12072  1D48  3005               	movlw	5
 12073  1D49  0221               	subwf	setLoad_AH_AL_Restore@i,w
 12074  1D4A  1803               	btfsc	3,0
 12075  1D4B  0008               	return
 12076                           
 12077                           ;OverLoad_B1.c: 310: Load1.AH[i] = 0;
 12078  1D4C  3521               	lslf	setLoad_AH_AL_Restore@i,w
 12079  1D4D  3E28               	addlw	(_Load1+8)& (0+255)
 12080  1D4E  0086               	movwf	6
 12081  1D4F  3001               	movlw	1	; select bank2/3
 12082  1D50  0087               	movwf	7
 12083  1D51  3000               	movlw	0
 12084  1D52  3FC0               	movwi [0]fsr1
 12085  1D53  3FC1               	movwi [1]fsr1
 12086                           
 12087                           ;OverLoad_B1.c: 311: Load1.AL[i] = 0xffff;
 12088  1D54  3521               	lslf	setLoad_AH_AL_Restore@i,w
 12089  1D55  3E3A               	addlw	(_Load1+26)& (0+255)
 12090  1D56  0086               	movwf	6
 12091  1D57  3001               	movlw	1	; select bank2/3
 12092  1D58  0087               	movwf	7
 12093  1D59  30FF               	movlw	255
 12094  1D5A  3FC0               	movwi [0]fsr1
 12095  1D5B  30FF               	movlw	255
 12096  1D5C  3FC1               	movwi [1]fsr1
 12097  1D5D  3001               	movlw	1
 12098  1D5E  00A0               	movwf	??_setLoad_AH_AL_Restore
 12099  1D5F  0820               	movf	??_setLoad_AH_AL_Restore,w
 12100  1D60  07A1               	addwf	setLoad_AH_AL_Restore@i,f
 12101  1D61  2D48               	goto	L8
 12102  1D62                     __end_of_setLoad_AH_AL_Restore:	
 12103                           
 12104                           	psect	text69
 12105  1A71                     __ptext69:	
 12106 ;; *************** function _LED_Main *****************
 12107 ;; Defined at:
 12108 ;;		line 47 in file "../src/LED_B1.c"
 12109 ;; Parameters:    Size  Location     Type
 12110 ;;		None
 12111 ;; Auto vars:     Size  Location     Type
 12112 ;;		None
 12113 ;; Return value:  Size  Location     Type
 12114 ;;		None               void
 12115 ;; Registers used:
 12116 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12117 ;; Tracked objects:
 12118 ;;		On entry : 0/0
 12119 ;;		On exit  : 0/0
 12120 ;;		Unchanged: 0/0
 12121 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12122 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12123 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12124 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12125 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12126 ;;Total ram usage:        0 bytes
 12127 ;; Hardware stack levels used:    1
 12128 ;; Hardware stack levels required when called:    7
 12129 ;; This function calls:
 12130 ;;		_setLED_Main
 12131 ;; This function is called by:
 12132 ;;		_main
 12133 ;; This function uses a non-reentrant model
 12134 ;;
 12135                           
 12136                           
 12137                           ;psect for function _LED_Main
 12138  1A71                     _LED_Main:	
 12139                           
 12140                           ;LED_B1.c: 49: setLED_Main(1);
 12141                           
 12142                           ;incstack = 0
 12143                           ; Regs used in _LED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12144  1A71  3001               	movlw	1
 12145  1A72  3193  2327  319A   	fcall	_setLED_Main
 12146                           
 12147                           ;LED_B1.c: 52: setLED_Main(2);
 12148  1A75  3002               	movlw	2
 12149  1A76  3193  2327  319A   	fcall	_setLED_Main
 12150                           
 12151                           ;LED_B1.c: 58: setLED_Main(99);
 12152  1A79  3063               	movlw	99
 12153  1A7A  3193  2327         	fcall	_setLED_Main
 12154  1A7C  0008               	return
 12155  1A7D                     __end_of_LED_Main:	
 12156                           
 12157                           	psect	text70
 12158  1327                     __ptext70:	
 12159 ;; *************** function _setLED_Main *****************
 12160 ;; Defined at:
 12161 ;;		line 192 in file "../src/LED_B1.c"
 12162 ;; Parameters:    Size  Location     Type
 12163 ;;  led             1    wreg     unsigned char 
 12164 ;; Auto vars:     Size  Location     Type
 12165 ;;  led             1    3[BANK0 ] unsigned char 
 12166 ;; Return value:  Size  Location     Type
 12167 ;;		None               void
 12168 ;; Registers used:
 12169 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12170 ;; Tracked objects:
 12171 ;;		On entry : 0/0
 12172 ;;		On exit  : 0/0
 12173 ;;		Unchanged: 0/0
 12174 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12175 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12176 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12177 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12178 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12179 ;;Total ram usage:        3 bytes
 12180 ;; Hardware stack levels used:    1
 12181 ;; Hardware stack levels required when called:    6
 12182 ;; This function calls:
 12183 ;;		_LedPointSelect
 12184 ;; This function is called by:
 12185 ;;		_LED_Main
 12186 ;; This function uses a non-reentrant model
 12187 ;;
 12188                           
 12189                           
 12190                           ;psect for function _setLED_Main
 12191  1327                     _setLED_Main:	
 12192                           
 12193                           ;incstack = 0
 12194                           ; Regs used in _setLED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12195                           ;setLED_Main@led stored from wreg
 12196  1327  0020               	movlb	0	; select bank0
 12197  1328  00A3               	movwf	setLED_Main@led
 12198                           
 12199                           ;LED_B1.c: 193: LedPointSelect(led);
 12200  1329  0823               	movf	setLED_Main@led,w
 12201  132A  319E  2658  3193   	fcall	_LedPointSelect
 12202                           
 12203                           ;LED_B1.c: 194: if (LED->GO == 1) {
 12204  132D  0021               	movlb	1	; select bank1
 12205  132E  0846               	movf	_LED^(0+128),w
 12206  132F  0086               	movwf	6
 12207  1330  0847               	movf	(_LED+1)^(0+128),w
 12208  1331  0087               	movwf	7
 12209  1332  1C81               	btfss	1,1
 12210  1333  0008               	return
 12211                           
 12212                           ;LED_B1.c: 195: LED->Time++;
 12213  1334  0846               	movf	_LED^(0+128),w
 12214  1335  0086               	movwf	6
 12215  1336  0847               	movf	(_LED+1)^(0+128),w
 12216  1337  0087               	movwf	7
 12217  1338  3141               	addfsr 1,1
 12218  1339  3001               	movlw	1
 12219  133A  0781               	addwf	1,f
 12220  133B  3141               	addfsr 1,1
 12221  133C  1803               	skipnc
 12222  133D  0A81               	incf	1,f
 12223                           
 12224                           ;LED_B1.c: 196: if (LED->Time >= 500 / 10) {
 12225  133E  0846               	movf	_LED^(0+128),w
 12226  133F  0086               	movwf	6
 12227  1340  0847               	movf	(_LED+1)^(0+128),w
 12228  1341  0087               	movwf	7
 12229  1342  3141               	addfsr 1,1
 12230  1343  3F40               	moviw [0]fsr1
 12231  1344  0020               	movlb	0	; select bank0
 12232  1345  00A1               	movwf	??_setLED_Main
 12233  1346  3F41               	moviw [1]fsr1
 12234  1347  00A2               	movwf	??_setLED_Main+1
 12235  1348  3000               	movlw	0
 12236  1349  0222               	subwf	??_setLED_Main+1,w
 12237  134A  3032               	movlw	50
 12238  134B  1903               	skipnz
 12239  134C  0221               	subwf	??_setLED_Main,w
 12240  134D  1C03               	skipc
 12241  134E  0008               	return
 12242                           
 12243                           ;LED_B1.c: 197: LED->Time = 0;
 12244  134F  0021               	movlb	1	; select bank1
 12245  1350  0846               	movf	_LED^(0+128),w
 12246  1351  0086               	movwf	6
 12247  1352  0847               	movf	(_LED+1)^(0+128),w
 12248  1353  0087               	movwf	7
 12249  1354  3141               	addfsr 1,1
 12250  1355  3000               	movlw	0
 12251  1356  3FC0               	movwi [0]fsr1
 12252  1357  3FC1               	movwi [1]fsr1
 12253                           
 12254                           ;LED_B1.c: 199: if (led == 1) {
 12255  1358  0020               	movlb	0	; select bank0
 12256  1359  0823               	movf	setLED_Main@led,w
 12257  135A  3A01               	xorlw	1
 12258  135B  1D03               	skipz
 12259  135C  2B60               	goto	l7285
 12260                           
 12261                           ;LED_B1.c: 200: RA3 = RA3 == 1 ? 0 : 1;
 12262  135D  3008               	movlw	8
 12263  135E  068C               	xorwf	12,f
 12264                           
 12265                           ;LED_B1.c: 201: }
 12266  135F  0008               	return
 12267  1360                     l7285:	
 12268                           
 12269                           ;LED_B1.c: 204: else if (led == 2) {
 12270  1360  0823               	movf	setLED_Main@led,w
 12271  1361  3A02               	xorlw	2
 12272  1362  1D03               	skipz
 12273  1363  2B67               	goto	l7289
 12274                           
 12275                           ;LED_B1.c: 205: RC7 = RC7 == 1 ? 0 : 1;
 12276  1364  3080               	movlw	128
 12277  1365  068E               	xorwf	14,f
 12278                           
 12279                           ;LED_B1.c: 206: }
 12280  1366  0008               	return
 12281  1367                     l7289:	
 12282                           
 12283                           ;LED_B1.c: 214: else if (led == 99) {
 12284  1367  0823               	movf	setLED_Main@led,w
 12285  1368  3A63               	xorlw	99
 12286  1369  1D03               	skipz
 12287  136A  0008               	return
 12288                           
 12289                           ;LED_B1.c: 215: RB5 = RB5 == 1 ? 0 : 1;
 12290  136B  3020               	movlw	32
 12291  136C  068D               	xorwf	13,f
 12292  136D  0008               	return
 12293  136E                     __end_of_setLED_Main:	
 12294                           
 12295                           	psect	text71
 12296  1A65                     __ptext71:	
 12297 ;; *************** function _LED_Initialization *****************
 12298 ;; Defined at:
 12299 ;;		line 31 in file "../src/LED_B1.c"
 12300 ;; Parameters:    Size  Location     Type
 12301 ;;		None
 12302 ;; Auto vars:     Size  Location     Type
 12303 ;;		None
 12304 ;; Return value:  Size  Location     Type
 12305 ;;		None               void
 12306 ;; Registers used:
 12307 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12308 ;; Tracked objects:
 12309 ;;		On entry : 0/0
 12310 ;;		On exit  : 0/0
 12311 ;;		Unchanged: 0/0
 12312 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12313 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12314 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12315 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12316 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12317 ;;Total ram usage:        0 bytes
 12318 ;; Hardware stack levels used:    1
 12319 ;; Hardware stack levels required when called:    8
 12320 ;; This function calls:
 12321 ;;		_setLED_Initialization
 12322 ;; This function is called by:
 12323 ;;		_main
 12324 ;; This function uses a non-reentrant model
 12325 ;;
 12326                           
 12327                           
 12328                           ;psect for function _LED_Initialization
 12329  1A65                     _LED_Initialization:	
 12330                           
 12331                           ;LED_B1.c: 33: setLED_Initialization(1);
 12332                           
 12333                           ;incstack = 0
 12334                           ; Regs used in _LED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12335  1A65  3001               	movlw	1
 12336  1A66  319B  23A2  319A   	fcall	_setLED_Initialization
 12337                           
 12338                           ;LED_B1.c: 36: setLED_Initialization(2);
 12339  1A69  3002               	movlw	2
 12340  1A6A  319B  23A2  319A   	fcall	_setLED_Initialization
 12341                           
 12342                           ;LED_B1.c: 42: setLED_Initialization(99);
 12343  1A6D  3063               	movlw	99
 12344  1A6E  319B  23A2         	fcall	_setLED_Initialization
 12345  1A70  0008               	return
 12346  1A71                     __end_of_LED_Initialization:	
 12347                           
 12348                           	psect	text72
 12349  1BA2                     __ptext72:	
 12350 ;; *************** function _setLED_Initialization *****************
 12351 ;; Defined at:
 12352 ;;		line 63 in file "../src/LED_B1.c"
 12353 ;; Parameters:    Size  Location     Type
 12354 ;;  led             1    wreg     unsigned char 
 12355 ;; Auto vars:     Size  Location     Type
 12356 ;;  led             1    3[BANK0 ] unsigned char 
 12357 ;; Return value:  Size  Location     Type
 12358 ;;		None               void
 12359 ;; Registers used:
 12360 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12361 ;; Tracked objects:
 12362 ;;		On entry : 0/0
 12363 ;;		On exit  : 0/0
 12364 ;;		Unchanged: 0/0
 12365 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12366 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12367 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12368 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12369 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12370 ;;Total ram usage:        1 bytes
 12371 ;; Hardware stack levels used:    1
 12372 ;; Hardware stack levels required when called:    7
 12373 ;; This function calls:
 12374 ;;		_LedPointSelect
 12375 ;;		_setLED
 12376 ;; This function is called by:
 12377 ;;		_LED_Initialization
 12378 ;; This function uses a non-reentrant model
 12379 ;;
 12380                           
 12381                           
 12382                           ;psect for function _setLED_Initialization
 12383  1BA2                     _setLED_Initialization:	
 12384                           
 12385                           ;incstack = 0
 12386                           ; Regs used in _setLED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 12387                           ;setLED_Initialization@led stored from wreg
 12388  1BA2  0020               	movlb	0	; select bank0
 12389  1BA3  00A3               	movwf	setLED_Initialization@led
 12390                           
 12391                           ;LED_B1.c: 64: LedPointSelect(led);
 12392  1BA4  0823               	movf	setLED_Initialization@led,w
 12393  1BA5  319E  2658  319B   	fcall	_LedPointSelect
 12394                           
 12395                           ;LED_B1.c: 65: LED->Enable = 1;
 12396  1BA8  0021               	movlb	1	; select bank1
 12397  1BA9  0846               	movf	_LED^(0+128),w
 12398  1BAA  0086               	movwf	6
 12399  1BAB  0847               	movf	(_LED+1)^(0+128),w
 12400  1BAC  0087               	movwf	7
 12401  1BAD  1401               	bsf	1,0
 12402                           
 12403                           ;LED_B1.c: 66: setLED(led, 0);
 12404  1BAE  0020               	movlb	0	; select bank0
 12405  1BAF  01A1               	clrf	setLED@command
 12406  1BB0  0823               	movf	setLED_Initialization@led,w
 12407  1BB1  3196  260B         	fcall	_setLED
 12408  1BB3  0008               	return
 12409  1BB4                     __end_of_setLED_Initialization:	
 12410                           
 12411                           	psect	text73
 12412  1216                     __ptext73:	
 12413 ;; *************** function _Flash_Memory_Main *****************
 12414 ;; Defined at:
 12415 ;;		line 786 in file "../src/MCU_B1.c"
 12416 ;; Parameters:    Size  Location     Type
 12417 ;;		None
 12418 ;; Auto vars:     Size  Location     Type
 12419 ;;		None
 12420 ;; Return value:  Size  Location     Type
 12421 ;;		None               void
 12422 ;; Registers used:
 12423 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12424 ;; Tracked objects:
 12425 ;;		On entry : 0/0
 12426 ;;		On exit  : 0/0
 12427 ;;		Unchanged: 0/0
 12428 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12429 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12430 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12431 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12432 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12433 ;;Total ram usage:        0 bytes
 12434 ;; Hardware stack levels used:    1
 12435 ;; Hardware stack levels required when called:    8
 12436 ;; This function calls:
 12437 ;;		_Flash_Memory_Modify
 12438 ;; This function is called by:
 12439 ;;		_main
 12440 ;; This function uses a non-reentrant model
 12441 ;;
 12442                           
 12443                           
 12444                           ;psect for function _Flash_Memory_Main
 12445  1216                     _Flash_Memory_Main:	
 12446                           
 12447                           ;MCU_B1.c: 787: if (Memory->GO == 1) {
 12448                           
 12449                           ;incstack = 0
 12450                           ; Regs used in _Flash_Memory_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12451  1216  087C               	movf	_Memory,w
 12452  1217  3E24               	addlw	36
 12453  1218  0086               	movwf	6
 12454  1219  3002               	movlw	2	; select bank4/5
 12455  121A  0087               	movwf	7
 12456  121B  1C81               	btfss	1,1
 12457  121C  0008               	return
 12458                           
 12459                           ;MCU_B1.c: 788: if (Memory->Modify == 1) {
 12460  121D  087C               	movf	_Memory,w
 12461  121E  3E24               	addlw	36
 12462  121F  0086               	movwf	6
 12463  1220  3002               	movlw	2	; select bank4/5
 12464  1221  0087               	movwf	7
 12465  1222  1C01               	btfss	1,0
 12466  1223  2A52               	goto	l7849
 12467                           
 12468                           ;MCU_B1.c: 789: Memory->Time++;
 12469  1224  087C               	movf	_Memory,w
 12470  1225  3E22               	addlw	34
 12471  1226  0086               	movwf	6
 12472  1227  3002               	movlw	2	; select bank4/5
 12473  1228  0087               	movwf	7
 12474  1229  3001               	movlw	1
 12475  122A  0781               	addwf	1,f
 12476  122B  3141               	addfsr 1,1
 12477  122C  1803               	skipnc
 12478  122D  0A81               	incf	1,f
 12479                           
 12480                           ;MCU_B1.c: 790: if (Memory->Time == 25)
 12481  122E  087C               	movf	_Memory,w
 12482  122F  3E22               	addlw	34
 12483  1230  0086               	movwf	6
 12484  1231  3002               	movlw	2	; select bank4/5
 12485  1232  0087               	movwf	7
 12486  1233  3F40               	moviw [0]fsr1
 12487  1234  3A19               	xorlw	25
 12488  1235  1D03               	skipz
 12489  1236  2A39               	goto	u7475
 12490  1237  3F41               	moviw [1]fsr1
 12491  1238  3A00               	xorlw	0
 12492  1239                     u7475:	
 12493  1239  1D03               	skipz
 12494  123A  0008               	return
 12495                           
 12496                           ;MCU_B1.c: 791: {
 12497                           ;MCU_B1.c: 792: Memory->Time = 0;
 12498  123B  087C               	movf	_Memory,w
 12499  123C  3E22               	addlw	34
 12500  123D  0086               	movwf	6
 12501  123E  3002               	movlw	2	; select bank4/5
 12502  123F  0087               	movwf	7
 12503  1240  3000               	movlw	0
 12504  1241  3FC0               	movwi [0]fsr1
 12505  1242  3FC1               	movwi [1]fsr1
 12506                           
 12507                           ;MCU_B1.c: 793: Memory->Modify = 0;
 12508  1243  087C               	movf	_Memory,w
 12509  1244  3E24               	addlw	36
 12510  1245  0086               	movwf	6
 12511  1246  3002               	movlw	2	; select bank4/5
 12512  1247  0087               	movwf	7
 12513  1248  1001               	bcf	1,0
 12514                           
 12515                           ;MCU_B1.c: 794: Memory->GO = 0;
 12516  1249  087C               	movf	_Memory,w
 12517  124A  3E24               	addlw	36
 12518  124B  0086               	movwf	6
 12519  124C  3002               	movlw	2	; select bank4/5
 12520  124D  0087               	movwf	7
 12521  124E  1081               	bcf	1,1
 12522                           
 12523                           ;MCU_B1.c: 795: Flash_Memory_Modify();
 12524  124F  3196  26D0         	fcall	_Flash_Memory_Modify
 12525                           
 12526                           ;MCU_B1.c: 796: }
 12527                           ;MCU_B1.c: 797: } else {
 12528  1251  0008               	return
 12529  1252                     l7849:	
 12530                           
 12531                           ;MCU_B1.c: 798: Memory->GO = 0;
 12532  1252  087C               	movf	_Memory,w
 12533  1253  3E24               	addlw	36
 12534  1254  0086               	movwf	6
 12535  1255  3002               	movlw	2	; select bank4/5
 12536  1256  0087               	movwf	7
 12537  1257  1081               	bcf	1,1
 12538  1258  0008               	return
 12539  1259                     __end_of_Flash_Memory_Main:	
 12540                           
 12541                           	psect	text74
 12542  16D0                     __ptext74:	
 12543 ;; *************** function _Flash_Memory_Modify *****************
 12544 ;; Defined at:
 12545 ;;		line 855 in file "../src/MCU_B1.c"
 12546 ;; Parameters:    Size  Location     Type
 12547 ;;		None
 12548 ;; Auto vars:     Size  Location     Type
 12549 ;;  i               1    6[BANK0 ] unsigned char 
 12550 ;; Return value:  Size  Location     Type
 12551 ;;		None               void
 12552 ;; Registers used:
 12553 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12554 ;; Tracked objects:
 12555 ;;		On entry : 0/0
 12556 ;;		On exit  : 0/0
 12557 ;;		Unchanged: 0/0
 12558 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12559 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12560 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12561 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12562 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12563 ;;Total ram usage:        3 bytes
 12564 ;; Hardware stack levels used:    1
 12565 ;; Hardware stack levels required when called:    7
 12566 ;; This function calls:
 12567 ;;		_Flash_Memory_Erasing
 12568 ;;		_Flash_Memory_Read
 12569 ;;		_Flash_Memory_Write
 12570 ;; This function is called by:
 12571 ;;		_Flash_Memory_Main
 12572 ;; This function uses a non-reentrant model
 12573 ;;
 12574                           
 12575                           
 12576                           ;psect for function _Flash_Memory_Modify
 12577  16D0                     _Flash_Memory_Modify:	
 12578                           
 12579                           ;MCU_B1.c: 856: char i = 0;
 12580                           
 12581                           ;incstack = 0
 12582                           ; Regs used in _Flash_Memory_Modify: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12583  16D0  0020               	movlb	0	; select bank0
 12584  16D1  01A6               	clrf	Flash_Memory_Modify@i
 12585                           
 12586                           ;MCU_B1.c: 857: for (i = 0; i < 32; i++) {
 12587  16D2  01A6               	clrf	Flash_Memory_Modify@i
 12588  16D3  3020               	movlw	32
 12589  16D4  0226               	subwf	Flash_Memory_Modify@i,w
 12590  16D5  1803               	btfsc	3,0
 12591  16D6  2EEE               	goto	l7371
 12592  16D7                     l7365:	
 12593                           
 12594                           ;MCU_B1.c: 858: Memory->Data[i] = Flash_Memory_Read(i);
 12595  16D7  0826               	movf	Flash_Memory_Modify@i,w
 12596  16D8  3190  2066  3196   	fcall	_Flash_Memory_Read
 12597  16DB  0020               	movlb	0	; select bank0
 12598  16DC  00A4               	movwf	??_Flash_Memory_Modify
 12599  16DD  0826               	movf	Flash_Memory_Modify@i,w
 12600  16DE  077C               	addwf	_Memory,w
 12601  16DF  00A5               	movwf	??_Flash_Memory_Modify+1
 12602  16E0  0825               	movf	??_Flash_Memory_Modify+1,w
 12603  16E1  0086               	movwf	6
 12604  16E2  3002               	movlw	2	; select bank4/5
 12605  16E3  0087               	movwf	7
 12606  16E4  0824               	movf	??_Flash_Memory_Modify,w
 12607  16E5  0081               	movwf	1
 12608  16E6  3001               	movlw	1
 12609  16E7  00A4               	movwf	??_Flash_Memory_Modify
 12610  16E8  0824               	movf	??_Flash_Memory_Modify,w
 12611  16E9  07A6               	addwf	Flash_Memory_Modify@i,f
 12612  16EA  3020               	movlw	32
 12613  16EB  0226               	subwf	Flash_Memory_Modify@i,w
 12614  16EC  1C03               	skipc
 12615  16ED  2ED7               	goto	l7365
 12616  16EE                     l7371:	
 12617                           
 12618                           ;MCU_B1.c: 859: }
 12619                           ;MCU_B1.c: 860: Memory->Data[0]=product->Data[12];
 12620  16EE  086E               	movf	_product,w
 12621  16EF  3E0C               	addlw	12
 12622  16F0  0086               	movwf	6
 12623  16F1  3002               	movlw	2	; select bank4/5
 12624  16F2  0087               	movwf	7
 12625  16F3  0801               	movf	1,w
 12626  16F4  00A4               	movwf	??_Flash_Memory_Modify
 12627  16F5  087C               	movf	_Memory,w
 12628  16F6  0086               	movwf	6
 12629  16F7  3002               	movlw	2	; select bank4/5
 12630  16F8  0087               	movwf	7
 12631  16F9  0824               	movf	??_Flash_Memory_Modify,w
 12632  16FA  0081               	movwf	1
 12633                           
 12634                           ;MCU_B1.c: 861: Memory->Data[1]=product->Data[13];
 12635  16FB  086E               	movf	_product,w
 12636  16FC  3E0D               	addlw	13
 12637  16FD  0086               	movwf	6
 12638  16FE  3002               	movlw	2	; select bank4/5
 12639  16FF  0087               	movwf	7
 12640  1700  0801               	movf	1,w
 12641  1701  00A4               	movwf	??_Flash_Memory_Modify
 12642  1702  0A7C               	incf	_Memory,w
 12643  1703  0086               	movwf	6
 12644  1704  3002               	movlw	2	; select bank4/5
 12645  1705  0087               	movwf	7
 12646  1706  0824               	movf	??_Flash_Memory_Modify,w
 12647  1707  0081               	movwf	1
 12648                           
 12649                           ;MCU_B1.c: 862: Memory->Data[2]=product->Data[14];
 12650  1708  086E               	movf	_product,w
 12651  1709  3E0E               	addlw	14
 12652  170A  0086               	movwf	6
 12653  170B  3002               	movlw	2	; select bank4/5
 12654  170C  0087               	movwf	7
 12655  170D  0801               	movf	1,w
 12656  170E  00A4               	movwf	??_Flash_Memory_Modify
 12657  170F  087C               	movf	_Memory,w
 12658  1710  3E02               	addlw	2
 12659  1711  0086               	movwf	6
 12660  1712  3002               	movlw	2	; select bank4/5
 12661  1713  0087               	movwf	7
 12662  1714  0824               	movf	??_Flash_Memory_Modify,w
 12663  1715  0081               	movwf	1
 12664                           
 12665                           ;MCU_B1.c: 868: if (Memory->LoopSave == 1) {
 12666  1716  087C               	movf	_Memory,w
 12667  1717  3E24               	addlw	36
 12668  1718  0086               	movwf	6
 12669  1719  3002               	movlw	2	; select bank4/5
 12670  171A  0087               	movwf	7
 12671  171B  1D01               	btfss	1,2
 12672  171C  2F2D               	goto	l7375
 12673                           
 12674                           ;MCU_B1.c: 869: Memory->LoopSave = 0;
 12675  171D  087C               	movf	_Memory,w
 12676  171E  3E24               	addlw	36
 12677  171F  0086               	movwf	6
 12678  1720  3002               	movlw	2	; select bank4/5
 12679  1721  0087               	movwf	7
 12680  1722  1101               	bcf	1,2
 12681                           
 12682                           ;MCU_B1.c: 870: myMain->FirstOpen = 0;
 12683  1723  087B               	movf	_myMain,w
 12684  1724  0086               	movwf	6
 12685  1725  3002               	movlw	2	; select bank4/5
 12686  1726  0087               	movwf	7
 12687  1727  1281               	bcf	1,5
 12688                           
 12689                           ;MCU_B1.c: 871: myMain->First = 0;
 12690  1728  087B               	movf	_myMain,w
 12691  1729  0086               	movwf	6
 12692  172A  3002               	movlw	2	; select bank4/5
 12693  172B  0087               	movwf	7
 12694  172C  1381               	bcf	1,7
 12695  172D                     l7375:	
 12696                           
 12697                           ;MCU_B1.c: 873: }
 12698                           ;MCU_B1.c: 874: GIE = 0;
 12699  172D  138B               	bcf	11,7	;volatile
 12700                           
 12701                           ;MCU_B1.c: 875: Flash_Memory_Erasing();
 12702  172E  319A  2259  3196   	fcall	_Flash_Memory_Erasing
 12703                           
 12704                           ;MCU_B1.c: 876: Flash_Memory_Write();
 12705  1731  319F  279C         	fcall	_Flash_Memory_Write
 12706                           
 12707                           ;MCU_B1.c: 877: GIE = 1;
 12708  1733  178B               	bsf	11,7	;volatile
 12709  1734  0008               	return
 12710  1735                     __end_of_Flash_Memory_Modify:	
 12711                           
 12712                           	psect	text75
 12713  1A59                     __ptext75:	
 12714 ;; *************** function _Flash_Memory_Erasing *****************
 12715 ;; Defined at:
 12716 ;;		line 844 in file "../src/MCU_B1.c"
 12717 ;; Parameters:    Size  Location     Type
 12718 ;;		None
 12719 ;; Auto vars:     Size  Location     Type
 12720 ;;		None
 12721 ;; Return value:  Size  Location     Type
 12722 ;;		None               void
 12723 ;; Registers used:
 12724 ;;		wreg, status,2, status,0, pclath, cstack
 12725 ;; Tracked objects:
 12726 ;;		On entry : 0/0
 12727 ;;		On exit  : 0/0
 12728 ;;		Unchanged: 0/0
 12729 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12730 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12731 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12732 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12733 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12734 ;;Total ram usage:        0 bytes
 12735 ;; Hardware stack levels used:    1
 12736 ;; Hardware stack levels required when called:    6
 12737 ;; This function calls:
 12738 ;;		_Flash_Memory_Unlock
 12739 ;; This function is called by:
 12740 ;;		_Flash_Memory_Modify
 12741 ;; This function uses a non-reentrant model
 12742 ;;
 12743                           
 12744                           
 12745                           ;psect for function _Flash_Memory_Erasing
 12746  1A59                     _Flash_Memory_Erasing:	
 12747                           
 12748                           ;MCU_B1.c: 845: CFGS = 0;
 12749                           
 12750                           ;incstack = 0
 12751                           ; Regs used in _Flash_Memory_Erasing: [wreg+status,2+status,0+pclath+cstack]
 12752  1A59  0023               	movlb	3	; select bank3
 12753  1A5A  1315               	bcf	21,6	;volatile
 12754                           
 12755                           ;MCU_B1.c: 846: PMADRH = 0x30;
 12756  1A5B  3030               	movlw	48
 12757  1A5C  0092               	movwf	18	;volatile
 12758                           
 12759                           ;MCU_B1.c: 847: PMADRL = 0x00;
 12760  1A5D  0191               	clrf	17	;volatile
 12761                           
 12762                           ;MCU_B1.c: 848: FREE = 1;
 12763  1A5E  1615               	bsf	21,4	;volatile
 12764                           
 12765                           ;MCU_B1.c: 849: WREN = 1;
 12766  1A5F  1515               	bsf	21,2	;volatile
 12767                           
 12768                           ;MCU_B1.c: 850: Flash_Memory_Unlock();
 12769  1A60  319A  220F         	fcall	_Flash_Memory_Unlock
 12770                           
 12771                           ;MCU_B1.c: 851: WREN = 0;
 12772  1A62  0023               	movlb	3	; select bank3
 12773  1A63  1115               	bcf	21,2	;volatile
 12774  1A64  0008               	return
 12775  1A65                     __end_of_Flash_Memory_Erasing:	
 12776                           
 12777                           	psect	text76
 12778  05D2                     __ptext76:	
 12779 ;; *************** function _Flash_Memory_Initialization *****************
 12780 ;; Defined at:
 12781 ;;		line 745 in file "../src/MCU_B1.c"
 12782 ;; Parameters:    Size  Location     Type
 12783 ;;		None
 12784 ;; Auto vars:     Size  Location     Type
 12785 ;;  i               1   62[BANK0 ] unsigned char 
 12786 ;; Return value:  Size  Location     Type
 12787 ;;		None               void
 12788 ;; Registers used:
 12789 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12790 ;; Tracked objects:
 12791 ;;		On entry : 0/0
 12792 ;;		On exit  : 0/0
 12793 ;;		Unchanged: 0/0
 12794 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12795 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12796 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12797 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12798 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12799 ;;Total ram usage:        2 bytes
 12800 ;; Hardware stack levels used:    1
 12801 ;; Hardware stack levels required when called:    8
 12802 ;; This function calls:
 12803 ;;		_Flash_Memory_Read
 12804 ;;		_Flash_Memory_Write
 12805 ;;		_setPercentValue
 12806 ;; This function is called by:
 12807 ;;		_main
 12808 ;; This function uses a non-reentrant model
 12809 ;;
 12810                           
 12811                           
 12812                           ;psect for function _Flash_Memory_Initialization
 12813  05D2                     _Flash_Memory_Initialization:	
 12814                           
 12815                           ;MCU_B1.c: 746: char i = 0;
 12816                           
 12817                           ;incstack = 0
 12818                           ; Regs used in _Flash_Memory_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 12819  05D2  0020               	movlb	0	; select bank0
 12820  05D3  01DE               	clrf	Flash_Memory_Initialization@i
 12821                           
 12822                           ;MCU_B1.c: 747: if (Flash_Memory_Read(31) == 0xaa) {
 12823  05D4  301F               	movlw	31
 12824  05D5  3190  2066  3185   	fcall	_Flash_Memory_Read
 12825  05D8  3AAA               	xorlw	170
 12826  05D9  1D03               	skipz
 12827  05DA  2E4B               	goto	l7805
 12828                           
 12829                           ;MCU_B1.c: 748: product->Data[12] = Flash_Memory_Read(0);
 12830  05DB  3000               	movlw	0
 12831  05DC  3190  2066  3185   	fcall	_Flash_Memory_Read
 12832  05DF  0020               	movlb	0	; select bank0
 12833  05E0  00DD               	movwf	??_Flash_Memory_Initialization
 12834  05E1  086E               	movf	_product,w
 12835  05E2  3E0C               	addlw	12
 12836  05E3  0086               	movwf	6
 12837  05E4  3002               	movlw	2	; select bank4/5
 12838  05E5  0087               	movwf	7
 12839  05E6  085D               	movf	??_Flash_Memory_Initialization,w
 12840  05E7  0081               	movwf	1
 12841                           
 12842                           ;MCU_B1.c: 749: product->Data[13] = Flash_Memory_Read(1);
 12843  05E8  3001               	movlw	1
 12844  05E9  3190  2066  3185   	fcall	_Flash_Memory_Read
 12845  05EC  0020               	movlb	0	; select bank0
 12846  05ED  00DD               	movwf	??_Flash_Memory_Initialization
 12847  05EE  086E               	movf	_product,w
 12848  05EF  3E0D               	addlw	13
 12849  05F0  0086               	movwf	6
 12850  05F1  3002               	movlw	2	; select bank4/5
 12851  05F2  0087               	movwf	7
 12852  05F3  085D               	movf	??_Flash_Memory_Initialization,w
 12853  05F4  0081               	movwf	1
 12854                           
 12855                           ;MCU_B1.c: 750: product->Data[14] = Flash_Memory_Read(2);
 12856  05F5  3002               	movlw	2
 12857  05F6  3190  2066  3185   	fcall	_Flash_Memory_Read
 12858  05F9  0020               	movlb	0	; select bank0
 12859  05FA  00DD               	movwf	??_Flash_Memory_Initialization
 12860  05FB  086E               	movf	_product,w
 12861  05FC  3E0E               	addlw	14
 12862  05FD  0086               	movwf	6
 12863  05FE  3002               	movlw	2	; select bank4/5
 12864  05FF  0087               	movwf	7
 12865  0600  085D               	movf	??_Flash_Memory_Initialization,w
 12866  0601  0081               	movwf	1
 12867                           
 12868                           ;MCU_B1.c: 756: i = setPercentValue(((char)((100-60)*0.8)));
 12869  0602  3020               	movlw	32
 12870  0603  3192  22E1  3185   	fcall	_setPercentValue
 12871  0606  0020               	movlb	0	; select bank0
 12872  0607  00DD               	movwf	??_Flash_Memory_Initialization
 12873  0608  085D               	movf	??_Flash_Memory_Initialization,w
 12874  0609  00DE               	movwf	Flash_Memory_Initialization@i
 12875                           
 12876                           ;MCU_B1.c: 757: product->Data[21] = i;
 12877  060A  085E               	movf	Flash_Memory_Initialization@i,w
 12878  060B  00DD               	movwf	??_Flash_Memory_Initialization
 12879  060C  086E               	movf	_product,w
 12880  060D  3E15               	addlw	21
 12881  060E  0086               	movwf	6
 12882  060F  3002               	movlw	2	; select bank4/5
 12883  0610  0087               	movwf	7
 12884  0611  085D               	movf	??_Flash_Memory_Initialization,w
 12885  0612  0081               	movwf	1
 12886                           
 12887                           ;MCU_B1.c: 758: product->Data[22] = i;
 12888  0613  085E               	movf	Flash_Memory_Initialization@i,w
 12889  0614  00DD               	movwf	??_Flash_Memory_Initialization
 12890  0615  086E               	movf	_product,w
 12891  0616  3E16               	addlw	22
 12892  0617  0086               	movwf	6
 12893  0618  3002               	movlw	2	; select bank4/5
 12894  0619  0087               	movwf	7
 12895  061A  085D               	movf	??_Flash_Memory_Initialization,w
 12896  061B  0081               	movwf	1
 12897                           
 12898                           ;MCU_B1.c: 759: product->Data[23] = i;
 12899  061C  085E               	movf	Flash_Memory_Initialization@i,w
 12900  061D  00DD               	movwf	??_Flash_Memory_Initialization
 12901  061E  086E               	movf	_product,w
 12902  061F  3E17               	addlw	23
 12903  0620  0086               	movwf	6
 12904  0621  3002               	movlw	2	; select bank4/5
 12905  0622  0087               	movwf	7
 12906  0623  085D               	movf	??_Flash_Memory_Initialization,w
 12907  0624  0081               	movwf	1
 12908                           
 12909                           ;MCU_B1.c: 761: if (product->Data[12] == 0xff && product->Data[13] == 0xff && product->D
      +                          ata[14] == 0xff) {
 12910  0625  086E               	movf	_product,w
 12911  0626  3E0C               	addlw	12
 12912  0627  0086               	movwf	6
 12913  0628  3002               	movlw	2	; select bank4/5
 12914  0629  0087               	movwf	7
 12915  062A  0801               	movf	1,w
 12916  062B  3AFF               	xorlw	255
 12917  062C  1D03               	skipz
 12918  062D  0008               	return
 12919  062E  086E               	movf	_product,w
 12920  062F  3E0D               	addlw	13
 12921  0630  0086               	movwf	6
 12922  0631  3002               	movlw	2	; select bank4/5
 12923  0632  0087               	movwf	7
 12924  0633  0801               	movf	1,w
 12925  0634  3AFF               	xorlw	255
 12926  0635  1D03               	skipz
 12927  0636  0008               	return
 12928  0637  086E               	movf	_product,w
 12929  0638  3E0E               	addlw	14
 12930  0639  0086               	movwf	6
 12931  063A  3002               	movlw	2	; select bank4/5
 12932  063B  0087               	movwf	7
 12933  063C  0801               	movf	1,w
 12934  063D  3AFF               	xorlw	255
 12935  063E  1D03               	skipz
 12936  063F  0008               	return
 12937                           
 12938                           ;MCU_B1.c: 762: myMain->FirstOpen = 1;
 12939  0640  087B               	movf	_myMain,w
 12940  0641  0086               	movwf	6
 12941  0642  3002               	movlw	2	; select bank4/5
 12942  0643  0087               	movwf	7
 12943  0644  1681               	bsf	1,5
 12944                           
 12945                           ;MCU_B1.c: 763: myMain->First = 1;
 12946  0645  087B               	movf	_myMain,w
 12947  0646  0086               	movwf	6
 12948  0647  3002               	movlw	2	; select bank4/5
 12949  0648  0087               	movwf	7
 12950  0649  1781               	bsf	1,7
 12951                           
 12952                           ;MCU_B1.c: 764: }
 12953                           ;MCU_B1.c: 765: } else {
 12954  064A  0008               	return
 12955  064B                     l7805:	
 12956                           
 12957                           ;MCU_B1.c: 766: i = setPercentValue(((char)((100-60)*0.8)));
 12958  064B  3020               	movlw	32
 12959  064C  3192  22E1  3185   	fcall	_setPercentValue
 12960  064F  0020               	movlb	0	; select bank0
 12961  0650  00DD               	movwf	??_Flash_Memory_Initialization
 12962  0651  085D               	movf	??_Flash_Memory_Initialization,w
 12963  0652  00DE               	movwf	Flash_Memory_Initialization@i
 12964                           
 12965                           ;MCU_B1.c: 767: Memory->Data[0]=0xff;
 12966  0653  30FF               	movlw	255
 12967  0654  00DD               	movwf	??_Flash_Memory_Initialization
 12968  0655  087C               	movf	_Memory,w
 12969  0656  0086               	movwf	6
 12970  0657  3002               	movlw	2	; select bank4/5
 12971  0658  0087               	movwf	7
 12972  0659  085D               	movf	??_Flash_Memory_Initialization,w
 12973  065A  0081               	movwf	1
 12974                           
 12975                           ;MCU_B1.c: 768: Memory->Data[1]=0xff;
 12976  065B  30FF               	movlw	255
 12977  065C  00DD               	movwf	??_Flash_Memory_Initialization
 12978  065D  0A7C               	incf	_Memory,w
 12979  065E  0086               	movwf	6
 12980  065F  3002               	movlw	2	; select bank4/5
 12981  0660  0087               	movwf	7
 12982  0661  085D               	movf	??_Flash_Memory_Initialization,w
 12983  0662  0081               	movwf	1
 12984                           
 12985                           ;MCU_B1.c: 769: Memory->Data[2]=0xff;
 12986  0663  30FF               	movlw	255
 12987  0664  00DD               	movwf	??_Flash_Memory_Initialization
 12988  0665  087C               	movf	_Memory,w
 12989  0666  3E02               	addlw	2
 12990  0667  0086               	movwf	6
 12991  0668  3002               	movlw	2	; select bank4/5
 12992  0669  0087               	movwf	7
 12993  066A  085D               	movf	??_Flash_Memory_Initialization,w
 12994  066B  0081               	movwf	1
 12995                           
 12996                           ;MCU_B1.c: 770: Memory->Data[3]=0xff;
 12997  066C  30FF               	movlw	255
 12998  066D  00DD               	movwf	??_Flash_Memory_Initialization
 12999  066E  087C               	movf	_Memory,w
 13000  066F  3E03               	addlw	3
 13001  0670  0086               	movwf	6
 13002  0671  3002               	movlw	2	; select bank4/5
 13003  0672  0087               	movwf	7
 13004  0673  085D               	movf	??_Flash_Memory_Initialization,w
 13005  0674  0081               	movwf	1
 13006                           
 13007                           ;MCU_B1.c: 771: Memory->Data[4]=0xff;
 13008  0675  30FF               	movlw	255
 13009  0676  00DD               	movwf	??_Flash_Memory_Initialization
 13010  0677  087C               	movf	_Memory,w
 13011  0678  3E04               	addlw	4
 13012  0679  0086               	movwf	6
 13013  067A  3002               	movlw	2	; select bank4/5
 13014  067B  0087               	movwf	7
 13015  067C  085D               	movf	??_Flash_Memory_Initialization,w
 13016  067D  0081               	movwf	1
 13017                           
 13018                           ;MCU_B1.c: 772: Memory->Data[5]=0xff;
 13019  067E  30FF               	movlw	255
 13020  067F  00DD               	movwf	??_Flash_Memory_Initialization
 13021  0680  087C               	movf	_Memory,w
 13022  0681  3E05               	addlw	5
 13023  0682  0086               	movwf	6
 13024  0683  3002               	movlw	2	; select bank4/5
 13025  0684  0087               	movwf	7
 13026  0685  085D               	movf	??_Flash_Memory_Initialization,w
 13027  0686  0081               	movwf	1
 13028                           
 13029                           ;MCU_B1.c: 773: Memory->Data[31]=0xaa;
 13030  0687  30AA               	movlw	170
 13031  0688  00DD               	movwf	??_Flash_Memory_Initialization
 13032  0689  087C               	movf	_Memory,w
 13033  068A  3E1F               	addlw	31
 13034  068B  0086               	movwf	6
 13035  068C  3002               	movlw	2	; select bank4/5
 13036  068D  0087               	movwf	7
 13037  068E  085D               	movf	??_Flash_Memory_Initialization,w
 13038  068F  0081               	movwf	1
 13039                           
 13040                           ;MCU_B1.c: 774: product->Data[21] = i;
 13041  0690  085E               	movf	Flash_Memory_Initialization@i,w
 13042  0691  00DD               	movwf	??_Flash_Memory_Initialization
 13043  0692  086E               	movf	_product,w
 13044  0693  3E15               	addlw	21
 13045  0694  0086               	movwf	6
 13046  0695  3002               	movlw	2	; select bank4/5
 13047  0696  0087               	movwf	7
 13048  0697  085D               	movf	??_Flash_Memory_Initialization,w
 13049  0698  0081               	movwf	1
 13050                           
 13051                           ;MCU_B1.c: 775: product->Data[22] = i;
 13052  0699  085E               	movf	Flash_Memory_Initialization@i,w
 13053  069A  00DD               	movwf	??_Flash_Memory_Initialization
 13054  069B  086E               	movf	_product,w
 13055  069C  3E16               	addlw	22
 13056  069D  0086               	movwf	6
 13057  069E  3002               	movlw	2	; select bank4/5
 13058  069F  0087               	movwf	7
 13059  06A0  085D               	movf	??_Flash_Memory_Initialization,w
 13060  06A1  0081               	movwf	1
 13061                           
 13062                           ;MCU_B1.c: 776: product->Data[23] = i;
 13063  06A2  085E               	movf	Flash_Memory_Initialization@i,w
 13064  06A3  00DD               	movwf	??_Flash_Memory_Initialization
 13065  06A4  086E               	movf	_product,w
 13066  06A5  3E17               	addlw	23
 13067  06A6  0086               	movwf	6
 13068  06A7  3002               	movlw	2	; select bank4/5
 13069  06A8  0087               	movwf	7
 13070  06A9  085D               	movf	??_Flash_Memory_Initialization,w
 13071  06AA  0081               	movwf	1
 13072                           
 13073                           ;MCU_B1.c: 777: GIE = 0;
 13074  06AB  138B               	bcf	11,7	;volatile
 13075                           
 13076                           ;MCU_B1.c: 778: Flash_Memory_Write();
 13077  06AC  319F  279C         	fcall	_Flash_Memory_Write
 13078                           
 13079                           ;MCU_B1.c: 779: GIE = 1;
 13080  06AE  178B               	bsf	11,7	;volatile
 13081                           
 13082                           ;MCU_B1.c: 780: myMain->FirstOpen = 1;
 13083  06AF  087B               	movf	_myMain,w
 13084  06B0  0086               	movwf	6
 13085  06B1  3002               	movlw	2	; select bank4/5
 13086  06B2  0087               	movwf	7
 13087  06B3  1681               	bsf	1,5
 13088                           
 13089                           ;MCU_B1.c: 781: myMain->First = 1;
 13090  06B4  087B               	movf	_myMain,w
 13091  06B5  0086               	movwf	6
 13092  06B6  3002               	movlw	2	; select bank4/5
 13093  06B7  0087               	movwf	7
 13094  06B8  1781               	bsf	1,7
 13095  06B9  0008               	return
 13096  06BA                     __end_of_Flash_Memory_Initialization:	
 13097                           
 13098                           	psect	text77
 13099  1F9C                     __ptext77:	
 13100 ;; *************** function _Flash_Memory_Write *****************
 13101 ;; Defined at:
 13102 ;;		line 825 in file "../src/MCU_B1.c"
 13103 ;; Parameters:    Size  Location     Type
 13104 ;;		None
 13105 ;; Auto vars:     Size  Location     Type
 13106 ;;  i               1    1[BANK0 ] unsigned char 
 13107 ;; Return value:  Size  Location     Type
 13108 ;;		None               void
 13109 ;; Registers used:
 13110 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13111 ;; Tracked objects:
 13112 ;;		On entry : 0/0
 13113 ;;		On exit  : 0/0
 13114 ;;		Unchanged: 0/0
 13115 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13116 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13117 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13118 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13119 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13120 ;;Total ram usage:        2 bytes
 13121 ;; Hardware stack levels used:    1
 13122 ;; Hardware stack levels required when called:    6
 13123 ;; This function calls:
 13124 ;;		_Flash_Memory_Unlock
 13125 ;; This function is called by:
 13126 ;;		_Flash_Memory_Initialization
 13127 ;;		_Flash_Memory_Modify
 13128 ;; This function uses a non-reentrant model
 13129 ;;
 13130                           
 13131                           
 13132                           ;psect for function _Flash_Memory_Write
 13133  1F9C                     _Flash_Memory_Write:	
 13134                           
 13135                           ;MCU_B1.c: 826: char i = 0;
 13136                           
 13137                           ;incstack = 0
 13138                           ; Regs used in _Flash_Memory_Write: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13139  1F9C  0020               	movlb	0	; select bank0
 13140  1F9D  01A1               	clrf	Flash_Memory_Write@i
 13141                           
 13142                           ;MCU_B1.c: 827: CFGS = 0;
 13143  1F9E  0023               	movlb	3	; select bank3
 13144  1F9F  1315               	bcf	21,6	;volatile
 13145                           
 13146                           ;MCU_B1.c: 828: PMADRH = 0x30;
 13147  1FA0  3030               	movlw	48
 13148  1FA1  0092               	movwf	18	;volatile
 13149                           
 13150                           ;MCU_B1.c: 829: PMDATH = 0;
 13151  1FA2  0194               	clrf	20	;volatile
 13152                           
 13153                           ;MCU_B1.c: 830: FREE = 0;
 13154  1FA3  1215               	bcf	21,4	;volatile
 13155                           
 13156                           ;MCU_B1.c: 831: LWLO = 1;
 13157  1FA4  1695               	bsf	21,5	;volatile
 13158                           
 13159                           ;MCU_B1.c: 832: WREN = 1;
 13160  1FA5  1515               	bsf	21,2	;volatile
 13161                           
 13162                           ;MCU_B1.c: 833: for (i = 0; i < 32; i++) {
 13163  1FA6  0020               	movlb	0	; select bank0
 13164  1FA7  01A1               	clrf	Flash_Memory_Write@i
 13165  1FA8  3020               	movlw	32
 13166  1FA9  0221               	subwf	Flash_Memory_Write@i,w
 13167  1FAA  1803               	btfsc	3,0
 13168  1FAB  2FC6               	goto	l1370
 13169  1FAC                     l6821:	
 13170                           
 13171                           ;MCU_B1.c: 834: PMADRL = i;
 13172  1FAC  0821               	movf	Flash_Memory_Write@i,w
 13173  1FAD  0023               	movlb	3	; select bank3
 13174  1FAE  0091               	movwf	17	;volatile
 13175                           
 13176                           ;MCU_B1.c: 835: PMDATL = Memory->Data[i];
 13177  1FAF  0020               	movlb	0	; select bank0
 13178  1FB0  0821               	movf	Flash_Memory_Write@i,w
 13179  1FB1  077C               	addwf	_Memory,w
 13180  1FB2  00A0               	movwf	??_Flash_Memory_Write
 13181  1FB3  0820               	movf	??_Flash_Memory_Write,w
 13182  1FB4  0086               	movwf	6
 13183  1FB5  3002               	movlw	2	; select bank4/5
 13184  1FB6  0087               	movwf	7
 13185  1FB7  0801               	movf	1,w
 13186  1FB8  0023               	movlb	3	; select bank3
 13187  1FB9  0093               	movwf	19	;volatile
 13188                           
 13189                           ;MCU_B1.c: 836: Flash_Memory_Unlock();
 13190  1FBA  319A  220F  319F   	fcall	_Flash_Memory_Unlock
 13191  1FBD  3001               	movlw	1
 13192  1FBE  0020               	movlb	0	; select bank0
 13193  1FBF  00A0               	movwf	??_Flash_Memory_Write
 13194  1FC0  0820               	movf	??_Flash_Memory_Write,w
 13195  1FC1  07A1               	addwf	Flash_Memory_Write@i,f
 13196  1FC2  3020               	movlw	32
 13197  1FC3  0221               	subwf	Flash_Memory_Write@i,w
 13198  1FC4  1C03               	skipc
 13199  1FC5  2FAC               	goto	l6821
 13200  1FC6                     l1370:	
 13201                           
 13202                           ;MCU_B1.c: 837: }
 13203                           ;MCU_B1.c: 838: LWLO = 0;
 13204  1FC6  0023               	movlb	3	; select bank3
 13205  1FC7  1295               	bcf	21,5	;volatile
 13206                           
 13207                           ;MCU_B1.c: 839: Flash_Memory_Unlock();
 13208  1FC8  319A  220F         	fcall	_Flash_Memory_Unlock
 13209                           
 13210                           ;MCU_B1.c: 840: WREN = 0;
 13211  1FCA  0023               	movlb	3	; select bank3
 13212  1FCB  1115               	bcf	21,2	;volatile
 13213  1FCC  0008               	return
 13214  1FCD                     __end_of_Flash_Memory_Write:	
 13215                           
 13216                           	psect	text78
 13217  1A0F                     __ptext78:	
 13218 ;; *************** function _Flash_Memory_Unlock *****************
 13219 ;; Defined at:
 13220 ;;		line 804 in file "../src/MCU_B1.c"
 13221 ;; Parameters:    Size  Location     Type
 13222 ;;		None
 13223 ;; Auto vars:     Size  Location     Type
 13224 ;;		None
 13225 ;; Return value:  Size  Location     Type
 13226 ;;		None               void
 13227 ;; Registers used:
 13228 ;;		wreg
 13229 ;; Tracked objects:
 13230 ;;		On entry : 0/0
 13231 ;;		On exit  : 0/0
 13232 ;;		Unchanged: 0/0
 13233 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13234 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13235 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13236 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13237 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13238 ;;Total ram usage:        0 bytes
 13239 ;; Hardware stack levels used:    1
 13240 ;; Hardware stack levels required when called:    5
 13241 ;; This function calls:
 13242 ;;		Nothing
 13243 ;; This function is called by:
 13244 ;;		_Flash_Memory_Write
 13245 ;;		_Flash_Memory_Erasing
 13246 ;; This function uses a non-reentrant model
 13247 ;;
 13248                           
 13249                           
 13250                           ;psect for function _Flash_Memory_Unlock
 13251  1A0F                     _Flash_Memory_Unlock:	
 13252                           
 13253                           ;MCU_B1.c: 805: PMCON2 = 0x55;
 13254                           
 13255                           ;incstack = 0
 13256                           ; Regs used in _Flash_Memory_Unlock: [wreg]
 13257  1A0F  3055               	movlw	85
 13258  1A10  0023               	movlb	3	; select bank3
 13259  1A11  0096               	movwf	22	;volatile
 13260                           
 13261                           ;MCU_B1.c: 806: PMCON2 = 0xaa;
 13262  1A12  30AA               	movlw	170
 13263  1A13  0096               	movwf	22	;volatile
 13264                           
 13265                           ;MCU_B1.c: 807: WR = 1;
 13266  1A14  1495               	bsf	21,1	;volatile
 13267                           
 13268                           ;MCU_B1.c: 808: __nop();
 13269  1A15  0000               	nop
 13270                           
 13271                           ;MCU_B1.c: 809: __nop();
 13272  1A16  0000               	nop
 13273  1A17  0008               	return
 13274  1A18                     __end_of_Flash_Memory_Unlock:	
 13275                           
 13276                           	psect	text79
 13277  1066                     __ptext79:	
 13278 ;; *************** function _Flash_Memory_Read *****************
 13279 ;; Defined at:
 13280 ;;		line 813 in file "../src/MCU_B1.c"
 13281 ;; Parameters:    Size  Location     Type
 13282 ;;  address         1    wreg     unsigned char 
 13283 ;; Auto vars:     Size  Location     Type
 13284 ;;  address         1    2[BANK0 ] unsigned char 
 13285 ;;  ret             1    3[BANK0 ] unsigned char 
 13286 ;;  i               1    1[BANK0 ] unsigned char 
 13287 ;; Return value:  Size  Location     Type
 13288 ;;                  1    wreg      unsigned char 
 13289 ;; Registers used:
 13290 ;;		wreg, status,2
 13291 ;; Tracked objects:
 13292 ;;		On entry : 0/0
 13293 ;;		On exit  : 0/0
 13294 ;;		Unchanged: 0/0
 13295 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13296 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13297 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13298 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13299 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13300 ;;Total ram usage:        4 bytes
 13301 ;; Hardware stack levels used:    1
 13302 ;; Hardware stack levels required when called:    5
 13303 ;; This function calls:
 13304 ;;		Nothing
 13305 ;; This function is called by:
 13306 ;;		_Flash_Memory_Initialization
 13307 ;;		_Flash_Memory_Modify
 13308 ;; This function uses a non-reentrant model
 13309 ;;
 13310                           
 13311                           
 13312                           ;psect for function _Flash_Memory_Read
 13313  1066                     _Flash_Memory_Read:	
 13314                           
 13315                           ;incstack = 0
 13316                           ; Regs used in _Flash_Memory_Read: [wreg+status,2]
 13317                           ;Flash_Memory_Read@address stored from wreg
 13318  1066  0020               	movlb	0	; select bank0
 13319  1067  00A2               	movwf	Flash_Memory_Read@address
 13320                           
 13321                           ;MCU_B1.c: 814: char i = 0, ret = 0;
 13322  1068  01A1               	clrf	Flash_Memory_Read@i
 13323  1069  01A3               	clrf	Flash_Memory_Read@ret
 13324                           
 13325                           ;MCU_B1.c: 815: PMADRH = 0x30;
 13326  106A  3030               	movlw	48
 13327  106B  0023               	movlb	3	; select bank3
 13328  106C  0092               	movwf	18	;volatile
 13329                           
 13330                           ;MCU_B1.c: 816: PMADRL = address;
 13331  106D  0020               	movlb	0	; select bank0
 13332  106E  0822               	movf	Flash_Memory_Read@address,w
 13333  106F  0023               	movlb	3	; select bank3
 13334  1070  0091               	movwf	17	;volatile
 13335                           
 13336                           ;MCU_B1.c: 817: CFGS = 0;
 13337  1071  1315               	bcf	21,6	;volatile
 13338                           
 13339                           ;MCU_B1.c: 818: RD = 1;
 13340  1072  1415               	bsf	21,0	;volatile
 13341                           
 13342                           ;MCU_B1.c: 819: i = PMDATH;
 13343  1073  0814               	movf	20,w	;volatile
 13344  1074  0020               	movlb	0	; select bank0
 13345  1075  00A0               	movwf	??_Flash_Memory_Read
 13346  1076  0820               	movf	??_Flash_Memory_Read,w
 13347  1077  00A1               	movwf	Flash_Memory_Read@i
 13348                           
 13349                           ;MCU_B1.c: 820: ret = PMDATL;
 13350  1078  0023               	movlb	3	; select bank3
 13351  1079  0813               	movf	19,w	;volatile
 13352  107A  0020               	movlb	0	; select bank0
 13353  107B  00A0               	movwf	??_Flash_Memory_Read
 13354  107C  0820               	movf	??_Flash_Memory_Read,w
 13355  107D  00A3               	movwf	Flash_Memory_Read@ret
 13356                           
 13357                           ;MCU_B1.c: 821: return ret;
 13358  107E  0823               	movf	Flash_Memory_Read@ret,w
 13359  107F  0008               	return
 13360  1080                     __end_of_Flash_Memory_Read:	
 13361                           
 13362                           	psect	text80
 13363  1A42                     __ptext80:	
 13364 ;; *************** function _DimmerLights_Main *****************
 13365 ;; Defined at:
 13366 ;;		line 407 in file "../src/Dimmer_B1.c"
 13367 ;; Parameters:    Size  Location     Type
 13368 ;;		None
 13369 ;; Auto vars:     Size  Location     Type
 13370 ;;		None
 13371 ;; Return value:  Size  Location     Type
 13372 ;;		None               void
 13373 ;; Registers used:
 13374 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13375 ;; Tracked objects:
 13376 ;;		On entry : 0/0
 13377 ;;		On exit  : 0/0
 13378 ;;		Unchanged: 0/0
 13379 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13380 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13381 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13382 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13383 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13384 ;;Total ram usage:        0 bytes
 13385 ;; Hardware stack levels used:    1
 13386 ;; Hardware stack levels required when called:   11
 13387 ;; This function calls:
 13388 ;;		_DimmerLights_Close
 13389 ;;		_setDimmerLights_Main
 13390 ;; This function is called by:
 13391 ;;		_main
 13392 ;; This function uses a non-reentrant model
 13393 ;;
 13394                           
 13395                           
 13396                           ;psect for function _DimmerLights_Main
 13397  1A42                     _DimmerLights_Main:	
 13398                           
 13399                           ;Dimmer_B1.c: 410: setDimmerLights_Main(1);
 13400                           
 13401                           ;incstack = 0
 13402                           ; Regs used in _DimmerLights_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13403  1A42  3001               	movlw	1
 13404  1A43  3189  2174  319A   	fcall	_setDimmerLights_Main
 13405                           
 13406                           ;Dimmer_B1.c: 414: setDimmerLights_Main(2);
 13407  1A46  3002               	movlw	2
 13408  1A47  3189  2174  319A   	fcall	_setDimmerLights_Main
 13409                           
 13410                           ;Dimmer_B1.c: 421: DimmerLights_Close();
 13411  1A4A  319C  24AD         	fcall	_DimmerLights_Close
 13412  1A4C  0008               	return
 13413  1A4D                     __end_of_DimmerLights_Main:	
 13414                           
 13415                           	psect	text81
 13416  0974                     __ptext81:	
 13417 ;; *************** function _setDimmerLights_Main *****************
 13418 ;; Defined at:
 13419 ;;		line 425 in file "../src/Dimmer_B1.c"
 13420 ;; Parameters:    Size  Location     Type
 13421 ;;  lights          1    wreg     unsigned char 
 13422 ;; Auto vars:     Size  Location     Type
 13423 ;;  lights          1   70[BANK0 ] unsigned char 
 13424 ;;  clear           1   69[BANK0 ] unsigned char 
 13425 ;; Return value:  Size  Location     Type
 13426 ;;		None               void
 13427 ;; Registers used:
 13428 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13429 ;; Tracked objects:
 13430 ;;		On entry : 0/0
 13431 ;;		On exit  : 0/0
 13432 ;;		Unchanged: 0/0
 13433 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13434 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13435 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13436 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13437 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13438 ;;Total ram usage:        2 bytes
 13439 ;; Hardware stack levels used:    1
 13440 ;; Hardware stack levels required when called:   10
 13441 ;; This function calls:
 13442 ;;		_DimmerLightsPointSelect
 13443 ;;		_setBuz
 13444 ;;		_setDimmerLights
 13445 ;;		_setDimmerLights_Adj
 13446 ;; This function is called by:
 13447 ;;		_DimmerLights_Main
 13448 ;; This function uses a non-reentrant model
 13449 ;;
 13450                           
 13451                           
 13452                           ;psect for function _setDimmerLights_Main
 13453  0974                     _setDimmerLights_Main:	
 13454                           
 13455                           ;incstack = 0
 13456                           ; Regs used in _setDimmerLights_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13457                           ;setDimmerLights_Main@lights stored from wreg
 13458  0974  0020               	movlb	0	; select bank0
 13459  0975  00E6               	movwf	setDimmerLights_Main@lights
 13460                           
 13461                           ;Dimmer_B1.c: 426: char clear = 1;
 13462  0976  01E5               	clrf	setDimmerLights_Main@clear
 13463  0977  0AE5               	incf	setDimmerLights_Main@clear,f
 13464                           
 13465                           ;Dimmer_B1.c: 427: DimmerLightsPointSelect(lights);
 13466  0978  0866               	movf	setDimmerLights_Main@lights,w
 13467  0979  319B  23C6  3189   	fcall	_DimmerLightsPointSelect
 13468                           
 13469                           ;Dimmer_B1.c: 440: if (lights == 1) {
 13470  097C  0020               	movlb	0	; select bank0
 13471  097D  0866               	movf	setDimmerLights_Main@lights,w
 13472  097E  3A01               	xorlw	1
 13473  097F  1D03               	skipz
 13474  0980  2988               	goto	l7233
 13475                           
 13476                           ;Dimmer_B1.c: 441: clear = (DimmerLights2.Clear == 0) ? 0 : 1;
 13477  0981  3000               	movlw	0
 13478  0982  0023               	movlb	3	; select bank3
 13479  0983  1938               	btfsc	(_DimmerLights2^(0+384)+9),2
 13480  0984  3001               	movlw	1
 13481  0985  0020               	movlb	0	; select bank0
 13482  0986  00E5               	movwf	setDimmerLights_Main@clear
 13483                           
 13484                           ;Dimmer_B1.c: 442: } else if (lights == 2) {
 13485  0987  2992               	goto	l7237
 13486  0988                     l7233:	
 13487  0988  0866               	movf	setDimmerLights_Main@lights,w
 13488  0989  3A02               	xorlw	2
 13489  098A  1D03               	skipz
 13490  098B  2992               	goto	l7237
 13491                           
 13492                           ;Dimmer_B1.c: 443: clear = (DimmerLights1.Clear == 0) ? 0 : 1;
 13493  098C  3000               	movlw	0
 13494  098D  0023               	movlb	3	; select bank3
 13495  098E  1929               	btfsc	(_DimmerLights1^(0+384)+9),2
 13496  098F  3001               	movlw	1
 13497  0990  0020               	movlb	0	; select bank0
 13498  0991  00E5               	movwf	setDimmerLights_Main@clear
 13499  0992                     l7237:	
 13500                           
 13501                           ;Dimmer_B1.c: 444: }
 13502                           ;Dimmer_B1.c: 447: if (DimmerLights->Trigger == 1) {
 13503  0992  0879               	movf	_DimmerLights,w
 13504  0993  3E08               	addlw	8
 13505  0994  0086               	movwf	6
 13506  0995  3001               	movlw	1	; select bank2/3
 13507  0996  0087               	movwf	7
 13508  0997  1D01               	btfss	1,2
 13509  0998  29B9               	goto	l7249
 13510                           
 13511                           ;Dimmer_B1.c: 448: if (clear == 1) {
 13512  0999  0865               	movf	setDimmerLights_Main@clear,w
 13513  099A  3A01               	xorlw	1
 13514  099B  1D03               	skipz
 13515  099C  0008               	return
 13516                           
 13517                           ;Dimmer_B1.c: 449: DimmerLights->Trigger = 0;
 13518  099D  0879               	movf	_DimmerLights,w
 13519  099E  3E08               	addlw	8
 13520  099F  0086               	movwf	6
 13521  09A0  3001               	movlw	1	; select bank2/3
 13522  09A1  0087               	movwf	7
 13523  09A2  1101               	bcf	1,2
 13524                           
 13525                           ;Dimmer_B1.c: 450: if (DimmerLights->Switch == 1) {
 13526  09A3  0879               	movf	_DimmerLights,w
 13527  09A4  3E08               	addlw	8
 13528  09A5  0086               	movwf	6
 13529  09A6  3001               	movlw	1	; select bank2/3
 13530  09A7  0087               	movwf	7
 13531  09A8  1C81               	btfss	1,1
 13532  09A9  29AD               	goto	l7245
 13533                           
 13534                           ;Dimmer_B1.c: 451: setDimmerLights(lights, 1);
 13535  09AA  01A3               	clrf	setDimmerLights@status
 13536  09AB  0AA3               	incf	setDimmerLights@status,f
 13537  09AC  29AF               	goto	L9
 13538  09AD                     l7245:	
 13539                           ;Dimmer_B1.c: 452: } else {
 13540                           
 13541                           
 13542                           ;Dimmer_B1.c: 453: setDimmerLights(lights, 0);
 13543  09AD  0020               	movlb	0	; select bank0
 13544  09AE  01A3               	clrf	setDimmerLights@status
 13545  09AF                     L9:	
 13546  09AF  0866               	movf	setDimmerLights_Main@lights,w
 13547  09B0  318C  24D3         	fcall	_setDimmerLights
 13548                           
 13549                           ;Dimmer_B1.c: 454: }
 13550                           ;Dimmer_B1.c: 456: DimmerLights->Clear = 0;
 13551  09B2  0879               	movf	_DimmerLights,w
 13552  09B3  3E09               	addlw	9
 13553  09B4  0086               	movwf	6
 13554  09B5  3001               	movlw	1	; select bank2/3
 13555  09B6  0087               	movwf	7
 13556  09B7  1101               	bcf	1,2
 13557                           
 13558                           ;Dimmer_B1.c: 458: }
 13559                           ;Dimmer_B1.c: 459: } else {
 13560  09B8  0008               	return
 13561  09B9                     l7249:	
 13562                           
 13563                           ;Dimmer_B1.c: 460: if (DimmerLights->TriggerAdj == 1) {
 13564  09B9  0879               	movf	_DimmerLights,w
 13565  09BA  3E08               	addlw	8
 13566  09BB  0086               	movwf	6
 13567  09BC  3001               	movlw	1	; select bank2/3
 13568  09BD  0087               	movwf	7
 13569  09BE  1E01               	btfss	1,4
 13570  09BF  0008               	return
 13571                           
 13572                           ;Dimmer_B1.c: 461: if (clear == 1) {
 13573  09C0  0020               	movlb	0	; select bank0
 13574  09C1  0865               	movf	setDimmerLights_Main@clear,w
 13575  09C2  3A01               	xorlw	1
 13576  09C3  1D03               	skipz
 13577  09C4  0008               	return
 13578                           
 13579                           ;Dimmer_B1.c: 462: DimmerLights->TriggerAdj = 0;
 13580  09C5  0879               	movf	_DimmerLights,w
 13581  09C6  3E08               	addlw	8
 13582  09C7  0086               	movwf	6
 13583  09C8  3001               	movlw	1	; select bank2/3
 13584  09C9  0087               	movwf	7
 13585  09CA  1201               	bcf	1,4
 13586                           
 13587                           ;Dimmer_B1.c: 463: if (DimmerLights->AdjGo == 1) {
 13588  09CB  0879               	movf	_DimmerLights,w
 13589  09CC  3E08               	addlw	8
 13590  09CD  0086               	movwf	6
 13591  09CE  3001               	movlw	1	; select bank2/3
 13592  09CF  0087               	movwf	7
 13593  09D0  1D81               	btfss	1,3
 13594  09D1  29E1               	goto	l7259
 13595                           
 13596                           ;Dimmer_B1.c: 464: setDimmerLights_Adj(lights, 1);
 13597  09D2  01E2               	clrf	setDimmerLights_Adj@status
 13598  09D3  0AE2               	incf	setDimmerLights_Adj@status,f
 13599  09D4  0866               	movf	setDimmerLights_Main@lights,w
 13600  09D5  3192  2259  3189   	fcall	_setDimmerLights_Adj
 13601                           
 13602                           ;Dimmer_B1.c: 465: setBuz(1, 100);
 13603  09D8  3064               	movlw	100
 13604  09D9  0020               	movlb	0	; select bank0
 13605  09DA  00A9               	movwf	setBuz@time
 13606  09DB  3000               	movlw	0
 13607  09DC  00AA               	movwf	setBuz@time+1
 13608  09DD  3001               	movlw	1
 13609  09DE  3194  24F6         	fcall	_setBuz
 13610                           
 13611                           ;Dimmer_B1.c: 466: } else {
 13612  09E0  0008               	return
 13613  09E1                     l7259:	
 13614                           
 13615                           ;Dimmer_B1.c: 467: setDimmerLights_Adj(lights, 0);
 13616  09E1  0020               	movlb	0	; select bank0
 13617  09E2  01E2               	clrf	setDimmerLights_Adj@status
 13618  09E3  0866               	movf	setDimmerLights_Main@lights,w
 13619  09E4  3192  2259         	fcall	_setDimmerLights_Adj
 13620  09E6  0008               	return
 13621  09E7                     __end_of_setDimmerLights_Main:	
 13622                           
 13623                           	psect	text82
 13624  1259                     __ptext82:	
 13625 ;; *************** function _setDimmerLights_Adj *****************
 13626 ;; Defined at:
 13627 ;;		line 646 in file "../src/Dimmer_B1.c"
 13628 ;; Parameters:    Size  Location     Type
 13629 ;;  lights          1    wreg     unsigned char 
 13630 ;;  status          1   66[BANK0 ] unsigned char 
 13631 ;; Auto vars:     Size  Location     Type
 13632 ;;  lights          1   68[BANK0 ] unsigned char 
 13633 ;; Return value:  Size  Location     Type
 13634 ;;		None               void
 13635 ;; Registers used:
 13636 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13637 ;; Tracked objects:
 13638 ;;		On entry : 0/0
 13639 ;;		On exit  : 0/0
 13640 ;;		Unchanged: 0/0
 13641 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13642 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13643 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13644 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13645 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13646 ;;Total ram usage:        3 bytes
 13647 ;; Hardware stack levels used:    1
 13648 ;; Hardware stack levels required when called:    9
 13649 ;; This function calls:
 13650 ;;		_DimmerLightsPointSelect
 13651 ;;		_setLoad_StatusOff
 13652 ;;		_setRF_DimmerLights
 13653 ;;		_setTxData
 13654 ;; This function is called by:
 13655 ;;		_setDimmerLights_Main
 13656 ;; This function uses a non-reentrant model
 13657 ;;
 13658                           
 13659                           
 13660                           ;psect for function _setDimmerLights_Adj
 13661  1259                     _setDimmerLights_Adj:	
 13662                           
 13663                           ;incstack = 0
 13664                           ; Regs used in _setDimmerLights_Adj: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13665                           ;setDimmerLights_Adj@lights stored from wreg
 13666  1259  0020               	movlb	0	; select bank0
 13667  125A  00E4               	movwf	setDimmerLights_Adj@lights
 13668                           
 13669                           ;Dimmer_B1.c: 647: DimmerLightsPointSelect(lights);
 13670  125B  0864               	movf	setDimmerLights_Adj@lights,w
 13671  125C  319B  23C6  3192   	fcall	_DimmerLightsPointSelect
 13672                           
 13673                           ;Dimmer_B1.c: 648: if (status == 1) {
 13674  125F  0020               	movlb	0	; select bank0
 13675  1260  0862               	movf	setDimmerLights_Adj@status,w
 13676  1261  3A01               	xorlw	1
 13677  1262  1D03               	skipz
 13678  1263  2A6F               	goto	l6771
 13679                           
 13680                           ;Dimmer_B1.c: 649: DimmerLights->AdjFlag = 1;
 13681  1264  0879               	movf	_DimmerLights,w
 13682  1265  0086               	movwf	6
 13683  1266  3001               	movlw	1	; select bank2/3
 13684  1267  0087               	movwf	7
 13685  1268  1581               	bsf	1,3
 13686                           
 13687                           ;Dimmer_B1.c: 650: DimmerLights->Signal = 1;
 13688  1269  0879               	movf	_DimmerLights,w
 13689  126A  0086               	movwf	6
 13690  126B  3001               	movlw	1	; select bank2/3
 13691  126C  0087               	movwf	7
 13692  126D  1481               	bsf	1,1
 13693                           
 13694                           ;Dimmer_B1.c: 651: } else {
 13695  126E  0008               	return
 13696  126F                     l6771:	
 13697                           
 13698                           ;Dimmer_B1.c: 652: if (DimmerLights->AdjFlag == 1) {
 13699  126F  0879               	movf	_DimmerLights,w
 13700  1270  0086               	movwf	6
 13701  1271  3001               	movlw	1	; select bank2/3
 13702  1272  0087               	movwf	7
 13703  1273  1D81               	btfss	1,3
 13704  1274  0008               	return
 13705                           
 13706                           ;Dimmer_B1.c: 654: DimmerLights->Signal = 0;
 13707  1275  0879               	movf	_DimmerLights,w
 13708  1276  0086               	movwf	6
 13709  1277  3001               	movlw	1	; select bank2/3
 13710  1278  0087               	movwf	7
 13711  1279  1081               	bcf	1,1
 13712                           
 13713                           ;Dimmer_B1.c: 655: DimmerLights->AdjFlag = 0;
 13714  127A  0879               	movf	_DimmerLights,w
 13715  127B  0086               	movwf	6
 13716  127C  3001               	movlw	1	; select bank2/3
 13717  127D  0087               	movwf	7
 13718  127E  1181               	bcf	1,3
 13719                           
 13720                           ;Dimmer_B1.c: 656: setLoad_StatusOff(0, 1);
 13721  127F  01A0               	clrf	setLoad_StatusOff@command
 13722  1280  0AA0               	incf	setLoad_StatusOff@command,f
 13723  1281  3000               	movlw	0
 13724  1282  319D  25F7  3192   	fcall	_setLoad_StatusOff
 13725                           
 13726                           ;Dimmer_B1.c: 657: DimmerLights->MaxmumValue = DimmerLights->DimmingValue;
 13727  1285  0879               	movf	_DimmerLights,w
 13728  1286  3E04               	addlw	4
 13729  1287  0086               	movwf	6
 13730  1288  3001               	movlw	1	; select bank2/3
 13731  1289  0087               	movwf	7
 13732  128A  0801               	movf	1,w
 13733  128B  0020               	movlb	0	; select bank0
 13734  128C  00E3               	movwf	??_setDimmerLights_Adj
 13735  128D  0879               	movf	_DimmerLights,w
 13736  128E  3E05               	addlw	5
 13737  128F  0086               	movwf	6
 13738  1290  3001               	movlw	1	; select bank2/3
 13739  1291  0087               	movwf	7
 13740  1292  0863               	movf	??_setDimmerLights_Adj,w
 13741  1293  0081               	movwf	1
 13742                           
 13743                           ;Dimmer_B1.c: 665: setRF_DimmerLights(lights, 1);
 13744  1294  01DD               	clrf	setRF_DimmerLights@on
 13745  1295  0ADD               	incf	setRF_DimmerLights@on,f
 13746  1296  0864               	movf	setDimmerLights_Adj@lights,w
 13747  1297  3188  2027  3192   	fcall	_setRF_DimmerLights
 13748                           
 13749                           ;Dimmer_B1.c: 666: setTxData();
 13750  129A  3186  26BA         	fcall	_setTxData
 13751  129C  0008               	return
 13752  129D                     __end_of_setDimmerLights_Adj:	
 13753                           
 13754                           	psect	text83
 13755  1DF7                     __ptext83:	
 13756 ;; *************** function _setLoad_StatusOff *****************
 13757 ;; Defined at:
 13758 ;;		line 284 in file "../src/OverLoad_B1.c"
 13759 ;; Parameters:    Size  Location     Type
 13760 ;;  lights          1    wreg     unsigned char 
 13761 ;;  command         1    0[BANK0 ] unsigned char 
 13762 ;; Auto vars:     Size  Location     Type
 13763 ;;  lights          1    1[BANK0 ] unsigned char 
 13764 ;; Return value:  Size  Location     Type
 13765 ;;		None               void
 13766 ;; Registers used:
 13767 ;;		wreg, status,2, status,0
 13768 ;; Tracked objects:
 13769 ;;		On entry : 0/0
 13770 ;;		On exit  : 0/0
 13771 ;;		Unchanged: 0/0
 13772 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13773 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13774 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13775 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13776 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13777 ;;Total ram usage:        2 bytes
 13778 ;; Hardware stack levels used:    1
 13779 ;; Hardware stack levels required when called:    5
 13780 ;; This function calls:
 13781 ;;		Nothing
 13782 ;; This function is called by:
 13783 ;;		_setDimmerLights_ERROR
 13784 ;;		_setDimmerLights_Adj
 13785 ;; This function uses a non-reentrant model
 13786 ;;
 13787                           
 13788                           
 13789                           ;psect for function _setLoad_StatusOff
 13790  1DF7                     _setLoad_StatusOff:	
 13791                           
 13792                           ;incstack = 0
 13793                           ; Regs used in _setLoad_StatusOff: [wreg+status,2+status,0]
 13794                           ;setLoad_StatusOff@lights stored from wreg
 13795  1DF7  0020               	movlb	0	; select bank0
 13796  1DF8  00A1               	movwf	setLoad_StatusOff@lights
 13797                           
 13798                           ;OverLoad_B1.c: 285: Load1.StatusOff = command;
 13799  1DF9  0820               	movf	setLoad_StatusOff@command,w
 13800  1DFA  0022               	movlb	2	; select bank2
 13801  1DFB  13A0               	bcf	_Load1^(0+256),7
 13802  1DFC  1D03               	skipz
 13803  1DFD  17A0               	bsf	_Load1^(0+256),7
 13804                           
 13805                           ;OverLoad_B1.c: 286: Load1.SafeCount -= 2;
 13806  1DFE  3002               	movlw	2
 13807  1DFF  02E2               	subwf	(_Load1^(0+256)+66),f
 13808                           
 13809                           ;OverLoad_B1.c: 287: if (lights == 1) {
 13810  1E00  0020               	movlb	0	; select bank0
 13811  1E01  0821               	movf	setLoad_StatusOff@lights,w
 13812  1E02  3A01               	xorlw	1
 13813  1E03  1D03               	skipz
 13814  1E04  2E07               	goto	l6261
 13815                           
 13816                           ;OverLoad_B1.c: 288: Load1.Lights1Status = 0;
 13817  1E05  0022               	movlb	2	; select bank2
 13818  1E06  01E3               	clrf	(_Load1^(0+256)+67)
 13819  1E07                     l6261:	
 13820                           
 13821                           ;OverLoad_B1.c: 289: }
 13822                           ;OverLoad_B1.c: 290: if (lights == 2) {
 13823  1E07  0020               	movlb	0	; select bank0
 13824  1E08  0821               	movf	setLoad_StatusOff@lights,w
 13825  1E09  3A02               	xorlw	2
 13826  1E0A  1D03               	skipz
 13827  1E0B  2E0E               	goto	l6265
 13828                           
 13829                           ;OverLoad_B1.c: 291: Load1.Lights2Status = 0;
 13830  1E0C  0022               	movlb	2	; select bank2
 13831  1E0D  01E4               	clrf	(_Load1^(0+256)+68)
 13832  1E0E                     l6265:	
 13833                           
 13834                           ;OverLoad_B1.c: 292: }
 13835                           ;OverLoad_B1.c: 293: if (lights == 3) {
 13836  1E0E  0020               	movlb	0	; select bank0
 13837  1E0F  0821               	movf	setLoad_StatusOff@lights,w
 13838  1E10  3A03               	xorlw	3
 13839  1E11  1D03               	skipz
 13840  1E12  0008               	return
 13841                           
 13842                           ;OverLoad_B1.c: 294: Load1.Lights3Status = 0;
 13843  1E13  0022               	movlb	2	; select bank2
 13844  1E14  01E5               	clrf	(_Load1^(0+256)+69)
 13845  1E15  0008               	return
 13846  1E16                     __end_of_setLoad_StatusOff:	
 13847                           
 13848                           	psect	text84
 13849  0CD3                     __ptext84:	
 13850 ;; *************** function _setDimmerLights *****************
 13851 ;; Defined at:
 13852 ;;		line 593 in file "../src/Dimmer_B1.c"
 13853 ;; Parameters:    Size  Location     Type
 13854 ;;  lights          1    wreg     unsigned char 
 13855 ;;  status          1    3[BANK0 ] unsigned char 
 13856 ;; Auto vars:     Size  Location     Type
 13857 ;;  lights          1    5[BANK0 ] unsigned char 
 13858 ;; Return value:  Size  Location     Type
 13859 ;;		None               void
 13860 ;; Registers used:
 13861 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13862 ;; Tracked objects:
 13863 ;;		On entry : 0/0
 13864 ;;		On exit  : 0/0
 13865 ;;		Unchanged: 0/0
 13866 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13867 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13868 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13869 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13870 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13871 ;;Total ram usage:        3 bytes
 13872 ;; Hardware stack levels used:    1
 13873 ;; Hardware stack levels required when called:    7
 13874 ;; This function calls:
 13875 ;;		_DimmerLightsPointSelect
 13876 ;;		_setLED
 13877 ;;		_setLoad_Count
 13878 ;;		_setLoad_StatusOn
 13879 ;;		_setMemory_GO
 13880 ;; This function is called by:
 13881 ;;		_setDimmerLights_Main
 13882 ;;		_setControl_Lights_Table
 13883 ;; This function uses a non-reentrant model
 13884 ;;
 13885                           
 13886                           
 13887                           ;psect for function _setDimmerLights
 13888  0CD3                     _setDimmerLights:	
 13889                           
 13890                           ;incstack = 0
 13891                           ; Regs used in _setDimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13892                           ;setDimmerLights@lights stored from wreg
 13893  0CD3  0020               	movlb	0	; select bank0
 13894  0CD4  00A5               	movwf	setDimmerLights@lights
 13895                           
 13896                           ;Dimmer_B1.c: 594: DimmerLightsPointSelect(lights);
 13897  0CD5  0825               	movf	setDimmerLights@lights,w
 13898  0CD6  319B  23C6  318C   	fcall	_DimmerLightsPointSelect
 13899                           
 13900                           ;Dimmer_B1.c: 595: Dimmer->Load = lights;
 13901  0CD9  0020               	movlb	0	; select bank0
 13902  0CDA  0825               	movf	setDimmerLights@lights,w
 13903  0CDB  00A4               	movwf	??_setDimmerLights
 13904  0CDC  0021               	movlb	1	; select bank1
 13905  0CDD  0A4B               	incf	_Dimmer^(0+128),w
 13906  0CDE  0086               	movwf	6
 13907  0CDF  0187               	clrf	7
 13908  0CE0  0020               	movlb	0	; select bank0
 13909  0CE1  0824               	movf	??_setDimmerLights,w
 13910  0CE2  0081               	movwf	1
 13911                           
 13912                           ;Dimmer_B1.c: 596: if (status == 1) {
 13913  0CE3  0823               	movf	setDimmerLights@status,w
 13914  0CE4  3A01               	xorlw	1
 13915  0CE5  1D03               	skipz
 13916  0CE6  2D31               	goto	l6431
 13917                           
 13918                           ;Dimmer_B1.c: 597: DimmerLights->Status = 1;
 13919  0CE7  0879               	movf	_DimmerLights,w
 13920  0CE8  0086               	movwf	6
 13921  0CE9  3001               	movlw	1	; select bank2/3
 13922  0CEA  0087               	movwf	7
 13923  0CEB  1681               	bsf	1,5
 13924                           
 13925                           ;Dimmer_B1.c: 598: setLED(lights, 0);
 13926  0CEC  01A1               	clrf	setLED@command
 13927  0CED  0825               	movf	setDimmerLights@lights,w
 13928  0CEE  3196  260B  318C   	fcall	_setLED
 13929                           
 13930                           ;Dimmer_B1.c: 600: setLoad_Count(0);
 13931  0CF1  3000               	movlw	0
 13932  0CF2  319A  22A4  318C   	fcall	_setLoad_Count
 13933                           
 13934                           ;Dimmer_B1.c: 602: DimmerLights->Signal = 1;
 13935  0CF5  0879               	movf	_DimmerLights,w
 13936  0CF6  0086               	movwf	6
 13937  0CF7  3001               	movlw	1	; select bank2/3
 13938  0CF8  0087               	movwf	7
 13939  0CF9  1481               	bsf	1,1
 13940                           
 13941                           ;Dimmer_B1.c: 603: DimmerLights->DimmingTimeValue = 7;
 13942  0CFA  3007               	movlw	7
 13943  0CFB  0020               	movlb	0	; select bank0
 13944  0CFC  00A4               	movwf	??_setDimmerLights
 13945  0CFD  0879               	movf	_DimmerLights,w
 13946  0CFE  3E02               	addlw	2
 13947  0CFF  0086               	movwf	6
 13948  0D00  3001               	movlw	1	; select bank2/3
 13949  0D01  0087               	movwf	7
 13950  0D02  0824               	movf	??_setDimmerLights,w
 13951  0D03  0081               	movwf	1
 13952                           
 13953                           ;Dimmer_B1.c: 605: if (DimmerLights->StatusFlag == 0) {
 13954  0D04  0879               	movf	_DimmerLights,w
 13955  0D05  0086               	movwf	6
 13956  0D06  3001               	movlw	1	; select bank2/3
 13957  0D07  0087               	movwf	7
 13958  0D08  1B01               	btfsc	1,6
 13959  0D09  0008               	return
 13960                           
 13961                           ;Dimmer_B1.c: 606: DimmerLights->StatusFlag = 1;
 13962  0D0A  0879               	movf	_DimmerLights,w
 13963  0D0B  0086               	movwf	6
 13964  0D0C  3001               	movlw	1	; select bank2/3
 13965  0D0D  0087               	movwf	7
 13966  0D0E  1701               	bsf	1,6
 13967                           
 13968                           ;Dimmer_B1.c: 607: setLoad_StatusOn(lights, 1);
 13969  0D0F  01A0               	clrf	setLoad_StatusOn@command
 13970  0D10  0AA0               	incf	setLoad_StatusOn@command,f
 13971  0D11  0825               	movf	setDimmerLights@lights,w
 13972  0D12  319E  267A  318C   	fcall	_setLoad_StatusOn
 13973                           
 13974                           ;Dimmer_B1.c: 608: setMemory_GO(0);
 13975  0D15  3000               	movlw	0
 13976  0D16  319D  2510         	fcall	_setMemory_GO
 13977                           
 13978                           ;Dimmer_B1.c: 611: DimmerLights->DimmingValue = DimmerLights->MaxmumValue;
 13979  0D18  0879               	movf	_DimmerLights,w
 13980  0D19  3E05               	addlw	5
 13981  0D1A  0086               	movwf	6
 13982  0D1B  3001               	movlw	1	; select bank2/3
 13983  0D1C  0087               	movwf	7
 13984  0D1D  0801               	movf	1,w
 13985  0D1E  0020               	movlb	0	; select bank0
 13986  0D1F  00A4               	movwf	??_setDimmerLights
 13987  0D20  0879               	movf	_DimmerLights,w
 13988  0D21  3E04               	addlw	4
 13989  0D22  0086               	movwf	6
 13990  0D23  3001               	movlw	1	; select bank2/3
 13991  0D24  0087               	movwf	7
 13992  0D25  0824               	movf	??_setDimmerLights,w
 13993  0D26  0081               	movwf	1
 13994                           
 13995                           ;Dimmer_B1.c: 615: DimmerLights->DimmingValue = ((char)((100-60)*0.8));
 13996  0D27  3020               	movlw	32
 13997  0D28  00A4               	movwf	??_setDimmerLights
 13998  0D29  0879               	movf	_DimmerLights,w
 13999  0D2A  3E04               	addlw	4
 14000  0D2B  0086               	movwf	6
 14001  0D2C  3001               	movlw	1	; select bank2/3
 14002  0D2D  0087               	movwf	7
 14003  0D2E  0824               	movf	??_setDimmerLights,w
 14004  0D2F  0081               	movwf	1
 14005                           
 14006                           ;Dimmer_B1.c: 617: }
 14007                           ;Dimmer_B1.c: 618: } else {
 14008  0D30  0008               	return
 14009  0D31                     l6431:	
 14010                           
 14011                           ;Dimmer_B1.c: 619: DimmerLights->Status = 0;
 14012  0D31  0879               	movf	_DimmerLights,w
 14013  0D32  0086               	movwf	6
 14014  0D33  3001               	movlw	1	; select bank2/3
 14015  0D34  0087               	movwf	7
 14016  0D35  1281               	bcf	1,5
 14017                           
 14018                           ;Dimmer_B1.c: 621: DimmerLights->DimmingValue = DimmerLights->MinimumValue;
 14019  0D36  0879               	movf	_DimmerLights,w
 14020  0D37  3E06               	addlw	6
 14021  0D38  0086               	movwf	6
 14022  0D39  3001               	movlw	1	; select bank2/3
 14023  0D3A  0087               	movwf	7
 14024  0D3B  0801               	movf	1,w
 14025  0D3C  00A4               	movwf	??_setDimmerLights
 14026  0D3D  0879               	movf	_DimmerLights,w
 14027  0D3E  3E04               	addlw	4
 14028  0D3F  0086               	movwf	6
 14029  0D40  3001               	movlw	1	; select bank2/3
 14030  0D41  0087               	movwf	7
 14031  0D42  0824               	movf	??_setDimmerLights,w
 14032  0D43  0081               	movwf	1
 14033                           
 14034                           ;Dimmer_B1.c: 628: DimmerLights->Signal = 1;
 14035  0D44  0879               	movf	_DimmerLights,w
 14036  0D45  0086               	movwf	6
 14037  0D46  3001               	movlw	1	; select bank2/3
 14038  0D47  0087               	movwf	7
 14039  0D48  1481               	bsf	1,1
 14040                           
 14041                           ;Dimmer_B1.c: 629: DimmerLights->AdjFlag = 0;
 14042  0D49  0879               	movf	_DimmerLights,w
 14043  0D4A  0086               	movwf	6
 14044  0D4B  3001               	movlw	1	; select bank2/3
 14045  0D4C  0087               	movwf	7
 14046  0D4D  1181               	bcf	1,3
 14047                           
 14048                           ;Dimmer_B1.c: 630: DimmerLights->AdjStatus = 0;
 14049  0D4E  0879               	movf	_DimmerLights,w
 14050  0D4F  0086               	movwf	6
 14051  0D50  3001               	movlw	1	; select bank2/3
 14052  0D51  0087               	movwf	7
 14053  0D52  1201               	bcf	1,4
 14054                           
 14055                           ;Dimmer_B1.c: 631: DimmerLights->DimmingTimeValue = 7;
 14056  0D53  3007               	movlw	7
 14057  0D54  00A4               	movwf	??_setDimmerLights
 14058  0D55  0879               	movf	_DimmerLights,w
 14059  0D56  3E02               	addlw	2
 14060  0D57  0086               	movwf	6
 14061  0D58  3001               	movlw	1	; select bank2/3
 14062  0D59  0087               	movwf	7
 14063  0D5A  0824               	movf	??_setDimmerLights,w
 14064  0D5B  0081               	movwf	1
 14065  0D5C  0008               	return
 14066  0D5D                     __end_of_setDimmerLights:	
 14067                           
 14068                           	psect	text85
 14069  1E7A                     __ptext85:	
 14070 ;; *************** function _setLoad_StatusOn *****************
 14071 ;; Defined at:
 14072 ;;		line 269 in file "../src/OverLoad_B1.c"
 14073 ;; Parameters:    Size  Location     Type
 14074 ;;  lights          1    wreg     unsigned char 
 14075 ;;  command         1    0[BANK0 ] unsigned char 
 14076 ;; Auto vars:     Size  Location     Type
 14077 ;;  lights          1    1[BANK0 ] unsigned char 
 14078 ;; Return value:  Size  Location     Type
 14079 ;;		None               void
 14080 ;; Registers used:
 14081 ;;		wreg
 14082 ;; Tracked objects:
 14083 ;;		On entry : 0/0
 14084 ;;		On exit  : 0/0
 14085 ;;		Unchanged: 0/0
 14086 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14087 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14088 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14089 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14090 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14091 ;;Total ram usage:        2 bytes
 14092 ;; Hardware stack levels used:    1
 14093 ;; Hardware stack levels required when called:    5
 14094 ;; This function calls:
 14095 ;;		Nothing
 14096 ;; This function is called by:
 14097 ;;		_setDimmerLights
 14098 ;; This function uses a non-reentrant model
 14099 ;;
 14100                           
 14101                           
 14102                           ;psect for function _setLoad_StatusOn
 14103  1E7A                     _setLoad_StatusOn:	
 14104                           
 14105                           ;incstack = 0
 14106                           ; Regs used in _setLoad_StatusOn: [wreg]
 14107                           ;setLoad_StatusOn@lights stored from wreg
 14108  1E7A  0020               	movlb	0	; select bank0
 14109  1E7B  00A1               	movwf	setLoad_StatusOn@lights
 14110                           
 14111                           ;OverLoad_B1.c: 270: Load1.GO = 1;
 14112  1E7C  0022               	movlb	2	; select bank2
 14113  1E7D  14A0               	bsf	_Load1^(0+256),1
 14114                           
 14115                           ;OverLoad_B1.c: 271: Load1.StatusOn = command;
 14116  1E7E  0020               	movlb	0	; select bank0
 14117  1E7F  0820               	movf	setLoad_StatusOn@command,w
 14118  1E80  0022               	movlb	2	; select bank2
 14119  1E81  1320               	bcf	_Load1^(0+256),6
 14120  1E82  1D03               	skipz
 14121  1E83  1720               	bsf	_Load1^(0+256),6
 14122                           
 14123                           ;OverLoad_B1.c: 273: if (lights == 1) {
 14124  1E84  0020               	movlb	0	; select bank0
 14125  1E85  0821               	movf	setLoad_StatusOn@lights,w
 14126  1E86  3A01               	xorlw	1
 14127  1E87  1D03               	skipz
 14128  1E88  2E8C               	goto	l6333
 14129                           
 14130                           ;OverLoad_B1.c: 274: Load1.Lights1Status = 1;
 14131  1E89  0022               	movlb	2	; select bank2
 14132  1E8A  01E3               	clrf	(_Load1^(0+256)+67)
 14133  1E8B  0AE3               	incf	(_Load1^(0+256)+67),f
 14134  1E8C                     l6333:	
 14135                           
 14136                           ;OverLoad_B1.c: 275: }
 14137                           ;OverLoad_B1.c: 276: if (lights == 2) {
 14138  1E8C  0020               	movlb	0	; select bank0
 14139  1E8D  0821               	movf	setLoad_StatusOn@lights,w
 14140  1E8E  3A02               	xorlw	2
 14141  1E8F  1D03               	skipz
 14142  1E90  2E94               	goto	l6337
 14143                           
 14144                           ;OverLoad_B1.c: 277: Load1.Lights2Status = 1;
 14145  1E91  0022               	movlb	2	; select bank2
 14146  1E92  01E4               	clrf	(_Load1^(0+256)+68)
 14147  1E93  0AE4               	incf	(_Load1^(0+256)+68),f
 14148  1E94                     l6337:	
 14149                           
 14150                           ;OverLoad_B1.c: 278: }
 14151                           ;OverLoad_B1.c: 279: if (lights == 3) {
 14152  1E94  0020               	movlb	0	; select bank0
 14153  1E95  0821               	movf	setLoad_StatusOn@lights,w
 14154  1E96  3A03               	xorlw	3
 14155  1E97  1D03               	skipz
 14156  1E98  0008               	return
 14157                           
 14158                           ;OverLoad_B1.c: 280: Load1.Lights3Status = 1;
 14159  1E99  0022               	movlb	2	; select bank2
 14160  1E9A  01E5               	clrf	(_Load1^(0+256)+69)
 14161  1E9B  0AE5               	incf	(_Load1^(0+256)+69),f
 14162  1E9C  0008               	return
 14163  1E9D                     __end_of_setLoad_StatusOn:	
 14164                           
 14165                           	psect	text86
 14166  1AA4                     __ptext86:	
 14167 ;; *************** function _setLoad_Count *****************
 14168 ;; Defined at:
 14169 ;;		line 254 in file "../src/OverLoad_B1.c"
 14170 ;; Parameters:    Size  Location     Type
 14171 ;;  command         1    wreg     unsigned char 
 14172 ;; Auto vars:     Size  Location     Type
 14173 ;;  command         1    1[BANK0 ] unsigned char 
 14174 ;; Return value:  Size  Location     Type
 14175 ;;		None               void
 14176 ;; Registers used:
 14177 ;;		wreg
 14178 ;; Tracked objects:
 14179 ;;		On entry : 0/0
 14180 ;;		On exit  : 0/0
 14181 ;;		Unchanged: 0/0
 14182 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14183 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14184 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14185 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14186 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14187 ;;Total ram usage:        2 bytes
 14188 ;; Hardware stack levels used:    1
 14189 ;; Hardware stack levels required when called:    5
 14190 ;; This function calls:
 14191 ;;		Nothing
 14192 ;; This function is called by:
 14193 ;;		_setDimmerLights
 14194 ;; This function uses a non-reentrant model
 14195 ;;
 14196                           
 14197                           
 14198                           ;psect for function _setLoad_Count
 14199  1AA4                     _setLoad_Count:	
 14200                           
 14201                           ;incstack = 0
 14202                           ; Regs used in _setLoad_Count: [wreg]
 14203                           ;setLoad_Count@command stored from wreg
 14204  1AA4  0020               	movlb	0	; select bank0
 14205  1AA5  00A1               	movwf	setLoad_Count@command
 14206                           
 14207                           ;OverLoad_B1.c: 255: Load1.Count = command;
 14208  1AA6  0821               	movf	setLoad_Count@command,w
 14209  1AA7  00A0               	movwf	??_setLoad_Count
 14210  1AA8  0820               	movf	??_setLoad_Count,w
 14211  1AA9  0022               	movlb	2	; select bank2
 14212  1AAA  00DA               	movwf	(_Load1^(0+256)+58)
 14213                           
 14214                           ;OverLoad_B1.c: 256: Load1.SafeCount = command;
 14215  1AAB  0020               	movlb	0	; select bank0
 14216  1AAC  0821               	movf	setLoad_Count@command,w
 14217  1AAD  00A0               	movwf	??_setLoad_Count
 14218  1AAE  0820               	movf	??_setLoad_Count,w
 14219  1AAF  0022               	movlb	2	; select bank2
 14220  1AB0  00E2               	movwf	(_Load1^(0+256)+66)
 14221  1AB1  0008               	return
 14222  1AB2                     __end_of_setLoad_Count:	
 14223                           
 14224                           	psect	text87
 14225  160B                     __ptext87:	
 14226 ;; *************** function _setLED *****************
 14227 ;; Defined at:
 14228 ;;		line 70 in file "../src/LED_B1.c"
 14229 ;; Parameters:    Size  Location     Type
 14230 ;;  led             1    wreg     unsigned char 
 14231 ;;  command         1    1[BANK0 ] unsigned char 
 14232 ;; Auto vars:     Size  Location     Type
 14233 ;;  led             1    2[BANK0 ] unsigned char 
 14234 ;; Return value:  Size  Location     Type
 14235 ;;		None               void
 14236 ;; Registers used:
 14237 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14238 ;; Tracked objects:
 14239 ;;		On entry : 0/0
 14240 ;;		On exit  : 0/0
 14241 ;;		Unchanged: 0/0
 14242 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14243 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14244 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14245 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14246 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14247 ;;Total ram usage:        2 bytes
 14248 ;; Hardware stack levels used:    1
 14249 ;; Hardware stack levels required when called:    6
 14250 ;; This function calls:
 14251 ;;		_LedPointSelect
 14252 ;; This function is called by:
 14253 ;;		_setDimmerLights_ERROR
 14254 ;;		_setDimmerLights
 14255 ;;		_setLED_Initialization
 14256 ;;		_setLoad_Exceptions
 14257 ;;		_setOverTemp_Exceptions
 14258 ;;		_setSw_Initialization
 14259 ;; This function uses a non-reentrant model
 14260 ;;
 14261                           
 14262                           
 14263                           ;psect for function _setLED
 14264  160B                     _setLED:	
 14265                           
 14266                           ;incstack = 0
 14267                           ; Regs used in _setLED: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14268                           ;setLED@led stored from wreg
 14269  160B  0020               	movlb	0	; select bank0
 14270  160C  00A2               	movwf	setLED@led
 14271                           
 14272                           ;LED_B1.c: 71: LedPointSelect(led);
 14273  160D  0822               	movf	setLED@led,w
 14274  160E  319E  2658  3196   	fcall	_LedPointSelect
 14275                           
 14276                           ;LED_B1.c: 72: if (command == 0) {
 14277  1611  0020               	movlb	0	; select bank0
 14278  1612  08A1               	movf	setLED@command,f
 14279  1613  1D03               	skipz
 14280  1614  2E27               	goto	l6291
 14281                           
 14282                           ;LED_B1.c: 74: if (led == 1) {
 14283  1615  0822               	movf	setLED@led,w
 14284  1616  3A01               	xorlw	1
 14285  1617  1D03               	skipz
 14286  1618  2E1B               	goto	l6283
 14287                           
 14288                           ;LED_B1.c: 78: RA3 = 1;
 14289  1619  158C               	bsf	12,3	;volatile
 14290                           
 14291                           ;LED_B1.c: 80: }
 14292  161A  0008               	return
 14293  161B                     l6283:	
 14294                           
 14295                           ;LED_B1.c: 83: else if (led == 2) {
 14296  161B  0822               	movf	setLED@led,w
 14297  161C  3A02               	xorlw	2
 14298  161D  1D03               	skipz
 14299  161E  2E21               	goto	l6287
 14300                           
 14301                           ;LED_B1.c: 87: RC7 = 1;
 14302  161F  178E               	bsf	14,7	;volatile
 14303                           
 14304                           ;LED_B1.c: 89: }
 14305  1620  0008               	return
 14306  1621                     l6287:	
 14307                           
 14308                           ;LED_B1.c: 101: else if (led == 99) {
 14309  1621  0822               	movf	setLED@led,w
 14310  1622  3A63               	xorlw	99
 14311  1623  1D03               	skipz
 14312  1624  0008               	return
 14313                           
 14314                           ;LED_B1.c: 105: RB5 = 1;
 14315  1625  168D               	bsf	13,5	;volatile
 14316                           
 14317                           ;LED_B1.c: 107: }
 14318                           ;LED_B1.c: 109: } else if (command == 1) {
 14319  1626  0008               	return
 14320  1627                     l6291:	
 14321  1627  0821               	movf	setLED@command,w
 14322  1628  3A01               	xorlw	1
 14323  1629  1D03               	skipz
 14324  162A  2E3D               	goto	l6305
 14325                           
 14326                           ;LED_B1.c: 111: if (led == 1) {
 14327  162B  0822               	movf	setLED@led,w
 14328  162C  3A01               	xorlw	1
 14329  162D  1D03               	skipz
 14330  162E  2E31               	goto	l6297
 14331                           
 14332                           ;LED_B1.c: 115: RA3 = 0;
 14333  162F  118C               	bcf	12,3	;volatile
 14334                           
 14335                           ;LED_B1.c: 117: }
 14336  1630  0008               	return
 14337  1631                     l6297:	
 14338                           
 14339                           ;LED_B1.c: 120: else if (led == 2) {
 14340  1631  0822               	movf	setLED@led,w
 14341  1632  3A02               	xorlw	2
 14342  1633  1D03               	skipz
 14343  1634  2E37               	goto	l6301
 14344                           
 14345                           ;LED_B1.c: 124: RC7 = 0;
 14346  1635  138E               	bcf	14,7	;volatile
 14347                           
 14348                           ;LED_B1.c: 126: }
 14349  1636  0008               	return
 14350  1637                     l6301:	
 14351                           
 14352                           ;LED_B1.c: 138: else if (led == 99) {
 14353  1637  0822               	movf	setLED@led,w
 14354  1638  3A63               	xorlw	99
 14355  1639  1D03               	skipz
 14356  163A  0008               	return
 14357                           
 14358                           ;LED_B1.c: 142: RB5 = 0;
 14359  163B  128D               	bcf	13,5	;volatile
 14360                           
 14361                           ;LED_B1.c: 144: }
 14362                           ;LED_B1.c: 146: } else if (command == 10) {
 14363  163C  0008               	return
 14364  163D                     l6305:	
 14365  163D  0821               	movf	setLED@command,w
 14366  163E  3A0A               	xorlw	10
 14367  163F  1D03               	skipz
 14368  1640  2E62               	goto	l6321
 14369                           
 14370                           ;LED_B1.c: 147: LED->GO = 0;
 14371  1641  0021               	movlb	1	; select bank1
 14372  1642  0846               	movf	_LED^(0+128),w
 14373  1643  0086               	movwf	6
 14374  1644  0847               	movf	(_LED+1)^(0+128),w
 14375  1645  0087               	movwf	7
 14376  1646  1081               	bcf	1,1
 14377                           
 14378                           ;LED_B1.c: 148: LED->Time = 0;
 14379  1647  0846               	movf	_LED^(0+128),w
 14380  1648  0086               	movwf	6
 14381  1649  0847               	movf	(_LED+1)^(0+128),w
 14382  164A  0087               	movwf	7
 14383  164B  3141               	addfsr 1,1
 14384  164C  3000               	movlw	0
 14385  164D  3FC0               	movwi [0]fsr1
 14386  164E  3FC1               	movwi [1]fsr1
 14387                           
 14388                           ;LED_B1.c: 150: if (led == 1) {
 14389  164F  0020               	movlb	0	; select bank0
 14390  1650  0822               	movf	setLED@led,w
 14391  1651  3A01               	xorlw	1
 14392  1652  1D03               	skipz
 14393  1653  2E56               	goto	l6313
 14394                           
 14395                           ;LED_B1.c: 154: RA3 = 1;
 14396  1654  158C               	bsf	12,3	;volatile
 14397                           
 14398                           ;LED_B1.c: 156: }
 14399  1655  0008               	return
 14400  1656                     l6313:	
 14401                           
 14402                           ;LED_B1.c: 159: else if (led == 2) {
 14403  1656  0822               	movf	setLED@led,w
 14404  1657  3A02               	xorlw	2
 14405  1658  1D03               	skipz
 14406  1659  2E5C               	goto	l6317
 14407                           
 14408                           ;LED_B1.c: 163: RC7 = 1;
 14409  165A  178E               	bsf	14,7	;volatile
 14410                           
 14411                           ;LED_B1.c: 165: }
 14412  165B  0008               	return
 14413  165C                     l6317:	
 14414                           
 14415                           ;LED_B1.c: 177: else if (led == 99) {
 14416  165C  0822               	movf	setLED@led,w
 14417  165D  3A63               	xorlw	99
 14418  165E  1D03               	skipz
 14419  165F  0008               	return
 14420                           
 14421                           ;LED_B1.c: 181: RB5 = 1;
 14422  1660  168D               	bsf	13,5	;volatile
 14423                           
 14424                           ;LED_B1.c: 183: }
 14425                           ;LED_B1.c: 185: } else if (command == 11) {
 14426  1661  0008               	return
 14427  1662                     l6321:	
 14428  1662  0821               	movf	setLED@command,w
 14429  1663  3A0B               	xorlw	11
 14430  1664  1D03               	skipz
 14431  1665  0008               	return
 14432                           
 14433                           ;LED_B1.c: 186: LED->GO = 1;
 14434  1666  0021               	movlb	1	; select bank1
 14435  1667  0846               	movf	_LED^(0+128),w
 14436  1668  0086               	movwf	6
 14437  1669  0847               	movf	(_LED+1)^(0+128),w
 14438  166A  0087               	movwf	7
 14439  166B  1481               	bsf	1,1
 14440  166C  0008               	return
 14441  166D                     __end_of_setLED:	
 14442                           
 14443                           	psect	text88
 14444  1E58                     __ptext88:	
 14445 ;; *************** function _LedPointSelect *****************
 14446 ;; Defined at:
 14447 ;;		line 7 in file "../src/LED_B1.c"
 14448 ;; Parameters:    Size  Location     Type
 14449 ;;  led             1    wreg     unsigned char 
 14450 ;; Auto vars:     Size  Location     Type
 14451 ;;  led             1    0[BANK0 ] unsigned char 
 14452 ;; Return value:  Size  Location     Type
 14453 ;;		None               void
 14454 ;; Registers used:
 14455 ;;		wreg, status,2, status,0
 14456 ;; Tracked objects:
 14457 ;;		On entry : 0/0
 14458 ;;		On exit  : 0/0
 14459 ;;		Unchanged: 0/0
 14460 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14461 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14462 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14463 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14464 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14465 ;;Total ram usage:        1 bytes
 14466 ;; Hardware stack levels used:    1
 14467 ;; Hardware stack levels required when called:    5
 14468 ;; This function calls:
 14469 ;;		Nothing
 14470 ;; This function is called by:
 14471 ;;		_setLED_Initialization
 14472 ;;		_setLED
 14473 ;;		_setLED_Main
 14474 ;; This function uses a non-reentrant model
 14475 ;;
 14476                           
 14477                           
 14478                           ;psect for function _LedPointSelect
 14479  1E58                     _LedPointSelect:	
 14480                           
 14481                           ;incstack = 0
 14482                           ; Regs used in _LedPointSelect: [wreg+status,2+status,0]
 14483                           ;LedPointSelect@led stored from wreg
 14484  1E58  0020               	movlb	0	; select bank0
 14485  1E59  00A0               	movwf	LedPointSelect@led
 14486                           
 14487                           ;LED_B1.c: 9: if (led == 1) {
 14488  1E5A  0820               	movf	LedPointSelect@led,w
 14489  1E5B  3A01               	xorlw	1
 14490  1E5C  1D03               	skipz
 14491  1E5D  2E64               	goto	l6055
 14492                           
 14493                           ;LED_B1.c: 10: LED = &VarLED1;
 14494  1E5E  3066               	movlw	low _VarLED1
 14495  1E5F  0021               	movlb	1	; select bank1
 14496  1E60  00C6               	movwf	_LED^(0+128)
 14497  1E61  3001               	movlw	high _VarLED1
 14498  1E62  00C7               	movwf	(_LED+1)^(0+128)
 14499                           
 14500                           ;LED_B1.c: 11: }
 14501  1E63  0008               	return
 14502  1E64                     l6055:	
 14503                           
 14504                           ;LED_B1.c: 14: else if (led == 2) {
 14505  1E64  0020               	movlb	0	; select bank0
 14506  1E65  0820               	movf	LedPointSelect@led,w
 14507  1E66  3A02               	xorlw	2
 14508  1E67  1D03               	skipz
 14509  1E68  2E6F               	goto	l6059
 14510                           
 14511                           ;LED_B1.c: 15: LED = &VarLED2;
 14512  1E69  306A               	movlw	low _VarLED2
 14513  1E6A  0021               	movlb	1	; select bank1
 14514  1E6B  00C6               	movwf	_LED^(0+128)
 14515  1E6C  3001               	movlw	high _VarLED2
 14516  1E6D  00C7               	movwf	(_LED+1)^(0+128)
 14517                           
 14518                           ;LED_B1.c: 16: }
 14519  1E6E  0008               	return
 14520  1E6F                     l6059:	
 14521                           
 14522                           ;LED_B1.c: 24: else if (led == 99) {
 14523  1E6F  0020               	movlb	0	; select bank0
 14524  1E70  0820               	movf	LedPointSelect@led,w
 14525  1E71  3A63               	xorlw	99
 14526  1E72  1D03               	skipz
 14527  1E73  0008               	return
 14528                           
 14529                           ;LED_B1.c: 25: LED = &VarErrLED;
 14530  1E74  30E5               	movlw	low _VarErrLED
 14531  1E75  0021               	movlb	1	; select bank1
 14532  1E76  00C6               	movwf	_LED^(0+128)
 14533  1E77  3000               	movlw	high _VarErrLED
 14534  1E78  00C7               	movwf	(_LED+1)^(0+128)
 14535  1E79  0008               	return
 14536  1E7A                     __end_of_LedPointSelect:	
 14537                           
 14538                           	psect	text89
 14539  1CAD                     __ptext89:	
 14540 ;; *************** function _DimmerLights_Close *****************
 14541 ;; Defined at:
 14542 ;;		line 396 in file "../src/Dimmer_B1.c"
 14543 ;; Parameters:    Size  Location     Type
 14544 ;;		None
 14545 ;; Auto vars:     Size  Location     Type
 14546 ;;		None
 14547 ;; Return value:  Size  Location     Type
 14548 ;;		None               void
 14549 ;; Registers used:
 14550 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14551 ;; Tracked objects:
 14552 ;;		On entry : 0/0
 14553 ;;		On exit  : 0/0
 14554 ;;		Unchanged: 0/0
 14555 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14556 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14557 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14558 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14559 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14560 ;;Total ram usage:        0 bytes
 14561 ;; Hardware stack levels used:    1
 14562 ;; Hardware stack levels required when called:    6
 14563 ;; This function calls:
 14564 ;;		_getDimmerLights_StatusFlag
 14565 ;;		_setLoad_GO
 14566 ;;		_setMemory_GO
 14567 ;; This function is called by:
 14568 ;;		_DimmerLights_Main
 14569 ;; This function uses a non-reentrant model
 14570 ;;
 14571                           
 14572                           
 14573                           ;psect for function _DimmerLights_Close
 14574  1CAD                     _DimmerLights_Close:	
 14575                           
 14576                           ;Dimmer_B1.c: 397: if (Dimmer->Detect == 1) {
 14577                           
 14578                           ;incstack = 0
 14579                           ; Regs used in _DimmerLights_Close: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14580  1CAD  0021               	movlb	1	; select bank1
 14581  1CAE  084B               	movf	_Dimmer^(0+128),w
 14582  1CAF  0086               	movwf	6
 14583  1CB0  0187               	clrf	7
 14584  1CB1  1C01               	btfss	1,0
 14585  1CB2  0008               	return
 14586                           
 14587                           ;Dimmer_B1.c: 398: Dimmer->Detect = 0;
 14588  1CB3  084B               	movf	_Dimmer^(0+128),w
 14589  1CB4  0086               	movwf	6
 14590  1CB5  0187               	clrf	7
 14591  1CB6  1001               	bcf	1,0
 14592                           
 14593                           ;Dimmer_B1.c: 399: if (getDimmerLights_StatusFlag() == 0) {
 14594  1CB7  319B  235D  319C   	fcall	_getDimmerLights_StatusFlag
 14595  1CBA  3800               	iorlw	0
 14596  1CBB  1D03               	skipz
 14597  1CBC  0008               	return
 14598                           
 14599                           ;Dimmer_B1.c: 400: setLoad_GO(0);
 14600  1CBD  3000               	movlw	0
 14601  1CBE  3199  21CE  319C   	fcall	_setLoad_GO
 14602                           
 14603                           ;Dimmer_B1.c: 401: setMemory_GO(1);
 14604  1CC1  3001               	movlw	1
 14605  1CC2  319D  2510         	fcall	_setMemory_GO
 14606  1CC4  0008               	return
 14607  1CC5                     __end_of_DimmerLights_Close:	
 14608                           
 14609                           	psect	text90
 14610  1D10                     __ptext90:	
 14611 ;; *************** function _setMemory_GO *****************
 14612 ;; Defined at:
 14613 ;;		line 882 in file "../src/MCU_B1.c"
 14614 ;; Parameters:    Size  Location     Type
 14615 ;;  command         1    wreg     unsigned char 
 14616 ;; Auto vars:     Size  Location     Type
 14617 ;;  command         1    2[BANK0 ] unsigned char 
 14618 ;; Return value:  Size  Location     Type
 14619 ;;		None               void
 14620 ;; Registers used:
 14621 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 14622 ;; Tracked objects:
 14623 ;;		On entry : 0/0
 14624 ;;		On exit  : 0/0
 14625 ;;		Unchanged: 0/0
 14626 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14627 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14628 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14629 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14630 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14631 ;;Total ram usage:        3 bytes
 14632 ;; Hardware stack levels used:    1
 14633 ;; Hardware stack levels required when called:    5
 14634 ;; This function calls:
 14635 ;;		Nothing
 14636 ;; This function is called by:
 14637 ;;		_DimmerLights_Close
 14638 ;;		_setDimmerLights
 14639 ;; This function uses a non-reentrant model
 14640 ;;
 14641                           
 14642                           
 14643                           ;psect for function _setMemory_GO
 14644  1D10                     _setMemory_GO:	
 14645                           
 14646                           ;incstack = 0
 14647                           ; Regs used in _setMemory_GO: [wreg+fsr1l+fsr1h+status,2+status,0]
 14648                           ;setMemory_GO@command stored from wreg
 14649  1D10  0020               	movlb	0	; select bank0
 14650  1D11  00A2               	movwf	setMemory_GO@command
 14651                           
 14652                           ;MCU_B1.c: 883: Memory->GO = command;
 14653  1D12  087C               	movf	_Memory,w
 14654  1D13  3E24               	addlw	36
 14655  1D14  0086               	movwf	6
 14656  1D15  3002               	movlw	2	; select bank4/5
 14657  1D16  0087               	movwf	7
 14658  1D17  0822               	movf	setMemory_GO@command,w
 14659  1D18  1081               	bcf	1,1
 14660  1D19  1D03               	skipz
 14661  1D1A  1481               	bsf	1,1
 14662                           
 14663                           ;MCU_B1.c: 884: if (command == 0) {
 14664  1D1B  08A2               	movf	setMemory_GO@command,f
 14665  1D1C  1D03               	skipz
 14666  1D1D  0008               	return
 14667                           
 14668                           ;MCU_B1.c: 885: Memory->Time = command;
 14669  1D1E  0822               	movf	setMemory_GO@command,w
 14670  1D1F  00A0               	movwf	??_setMemory_GO
 14671  1D20  01A1               	clrf	??_setMemory_GO+1
 14672  1D21  087C               	movf	_Memory,w
 14673  1D22  3E22               	addlw	34
 14674  1D23  0086               	movwf	6
 14675  1D24  3002               	movlw	2	; select bank4/5
 14676  1D25  0087               	movwf	7
 14677  1D26  0820               	movf	??_setMemory_GO,w
 14678  1D27  3FC0               	movwi [0]fsr1
 14679  1D28  0821               	movf	??_setMemory_GO+1,w
 14680  1D29  3FC1               	movwi [1]fsr1
 14681  1D2A  0008               	return
 14682  1D2B                     __end_of_setMemory_GO:	
 14683                           
 14684                           	psect	text91
 14685  19CE                     __ptext91:	
 14686 ;; *************** function _setLoad_GO *****************
 14687 ;; Defined at:
 14688 ;;		line 265 in file "../src/OverLoad_B1.c"
 14689 ;; Parameters:    Size  Location     Type
 14690 ;;  command         1    wreg     unsigned char 
 14691 ;; Auto vars:     Size  Location     Type
 14692 ;;  command         1    0[BANK0 ] unsigned char 
 14693 ;; Return value:  Size  Location     Type
 14694 ;;		None               void
 14695 ;; Registers used:
 14696 ;;		wreg
 14697 ;; Tracked objects:
 14698 ;;		On entry : 0/0
 14699 ;;		On exit  : 0/0
 14700 ;;		Unchanged: 0/0
 14701 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14702 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14703 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14704 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14705 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14706 ;;Total ram usage:        1 bytes
 14707 ;; Hardware stack levels used:    1
 14708 ;; Hardware stack levels required when called:    5
 14709 ;; This function calls:
 14710 ;;		Nothing
 14711 ;; This function is called by:
 14712 ;;		_DimmerLights_Close
 14713 ;; This function uses a non-reentrant model
 14714 ;;
 14715                           
 14716                           
 14717                           ;psect for function _setLoad_GO
 14718  19CE                     _setLoad_GO:	
 14719                           
 14720                           ;incstack = 0
 14721                           ; Regs used in _setLoad_GO: [wreg]
 14722                           ;setLoad_GO@command stored from wreg
 14723  19CE  0020               	movlb	0	; select bank0
 14724  19CF  00A0               	movwf	setLoad_GO@command
 14725                           
 14726                           ;OverLoad_B1.c: 266: Load1.GO = command;
 14727  19D0  0820               	movf	setLoad_GO@command,w
 14728  19D1  0022               	movlb	2	; select bank2
 14729  19D2  10A0               	bcf	_Load1^(0+256),1
 14730  19D3  1D03               	skipz
 14731  19D4  14A0               	bsf	_Load1^(0+256),1
 14732  19D5  0008               	return
 14733  19D6                     __end_of_setLoad_GO:	
 14734                           
 14735                           	psect	text92
 14736  1B5D                     __ptext92:	
 14737 ;; *************** function _getDimmerLights_StatusFlag *****************
 14738 ;; Defined at:
 14739 ;;		line 475 in file "../src/Dimmer_B1.c"
 14740 ;; Parameters:    Size  Location     Type
 14741 ;;		None
 14742 ;; Auto vars:     Size  Location     Type
 14743 ;;  Status          1    1[BANK0 ] unsigned char 
 14744 ;; Return value:  Size  Location     Type
 14745 ;;                  1    wreg      unsigned char 
 14746 ;; Registers used:
 14747 ;;		wreg, status,2
 14748 ;; Tracked objects:
 14749 ;;		On entry : 0/0
 14750 ;;		On exit  : 0/0
 14751 ;;		Unchanged: 0/0
 14752 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14753 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14754 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14755 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14756 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14757 ;;Total ram usage:        3 bytes
 14758 ;; Hardware stack levels used:    1
 14759 ;; Hardware stack levels required when called:    5
 14760 ;; This function calls:
 14761 ;;		Nothing
 14762 ;; This function is called by:
 14763 ;;		_DimmerLights_Close
 14764 ;;		_DimmerLights_Exceptions
 14765 ;; This function uses a non-reentrant model
 14766 ;;
 14767                           
 14768                           
 14769                           ;psect for function _getDimmerLights_StatusFlag
 14770  1B5D                     _getDimmerLights_StatusFlag:	
 14771                           
 14772                           ;Dimmer_B1.c: 476: char Status = 0;
 14773                           
 14774                           ;incstack = 0
 14775                           ; Regs used in _getDimmerLights_StatusFlag: [wreg+status,2]
 14776  1B5D  0020               	movlb	0	; select bank0
 14777  1B5E  01A1               	clrf	getDimmerLights_StatusFlag@Status
 14778                           
 14779                           ;Dimmer_B1.c: 483: Status = (DimmerLights1.StatusFlag == 1 || DimmerLights2.StatusFlag =
      +                          = 1) ? 1 : 0;
 14780  1B5F  01A2               	clrf	_getDimmerLights_StatusFlag$2253
 14781  1B60  0AA2               	incf	_getDimmerLights_StatusFlag$2253,f
 14782  1B61  0023               	movlb	3	; select bank3
 14783  1B62  1F20               	btfss	_DimmerLights1^(0+384),6
 14784  1B63  1B2F               	btfsc	_DimmerLights2^(0+384),6
 14785  1B64  2B67               	goto	l6397
 14786  1B65  0020               	movlb	0	; select bank0
 14787  1B66  01A2               	clrf	_getDimmerLights_StatusFlag$2253
 14788  1B67                     l6397:	
 14789  1B67  0020               	movlb	0	; select bank0
 14790  1B68  0822               	movf	_getDimmerLights_StatusFlag$2253,w
 14791  1B69  00A0               	movwf	??_getDimmerLights_StatusFlag
 14792  1B6A  0820               	movf	??_getDimmerLights_StatusFlag,w
 14793  1B6B  00A1               	movwf	getDimmerLights_StatusFlag@Status
 14794                           
 14795                           ;Dimmer_B1.c: 490: return Status;
 14796  1B6C  0821               	movf	getDimmerLights_StatusFlag@Status,w
 14797  1B6D  0008               	return
 14798  1B6E                     __end_of_getDimmerLights_StatusFlag:	
 14799                           
 14800                           	psect	text93
 14801  1C7F                     __ptext93:	
 14802 ;; *************** function _DimmerLights_Initialization *****************
 14803 ;; Defined at:
 14804 ;;		line 334 in file "../src/Dimmer_B1.c"
 14805 ;; Parameters:    Size  Location     Type
 14806 ;;		None
 14807 ;; Auto vars:     Size  Location     Type
 14808 ;;		None
 14809 ;; Return value:  Size  Location     Type
 14810 ;;		None               void
 14811 ;; Registers used:
 14812 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14813 ;; Tracked objects:
 14814 ;;		On entry : 0/0
 14815 ;;		On exit  : 0/0
 14816 ;;		Unchanged: 0/0
 14817 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14818 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14819 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14820 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14821 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14822 ;;Total ram usage:        1 bytes
 14823 ;; Hardware stack levels used:    1
 14824 ;; Hardware stack levels required when called:    7
 14825 ;; This function calls:
 14826 ;;		_Dimmer_Initialization
 14827 ;;		_setDimmerLights_Initialization
 14828 ;; This function is called by:
 14829 ;;		_main
 14830 ;; This function uses a non-reentrant model
 14831 ;;
 14832                           
 14833                           
 14834                           ;psect for function _DimmerLights_Initialization
 14835  1C7F                     _DimmerLights_Initialization:	
 14836                           
 14837                           ;Dimmer_B1.c: 337: DimmerLights11 = &DimmerLights1;
 14838                           
 14839                           ;incstack = 0
 14840                           ; Regs used in _DimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 14841  1C7F  30A0               	movlw	_DimmerLights1& (0+255)
 14842  1C80  0020               	movlb	0	; select bank0
 14843  1C81  00A4               	movwf	??_DimmerLights_Initialization
 14844  1C82  0824               	movf	??_DimmerLights_Initialization,w
 14845  1C83  0021               	movlb	1	; select bank1
 14846  1C84  00CC               	movwf	_DimmerLights11^(0+128)
 14847                           
 14848                           ;Dimmer_B1.c: 338: setDimmerLights_Initialization(1);
 14849  1C85  3001               	movlw	1
 14850  1C86  319F  273F  319C   	fcall	_setDimmerLights_Initialization
 14851                           
 14852                           ;Dimmer_B1.c: 342: DimmerLights22 = &DimmerLights2;
 14853  1C89  30AF               	movlw	_DimmerLights2& (0+255)
 14854  1C8A  0020               	movlb	0	; select bank0
 14855  1C8B  00A4               	movwf	??_DimmerLights_Initialization
 14856  1C8C  0824               	movf	??_DimmerLights_Initialization,w
 14857  1C8D  0021               	movlb	1	; select bank1
 14858  1C8E  00CD               	movwf	_DimmerLights22^(0+128)
 14859                           
 14860                           ;Dimmer_B1.c: 343: setDimmerLights_Initialization(2);
 14861  1C8F  3002               	movlw	2
 14862  1C90  319F  273F  319C   	fcall	_setDimmerLights_Initialization
 14863                           
 14864                           ;Dimmer_B1.c: 352: Dimmer_Initialization();
 14865  1C93  3199  21B0         	fcall	_Dimmer_Initialization
 14866  1C95  0008               	return
 14867  1C96                     __end_of_DimmerLights_Initialization:	
 14868                           
 14869                           	psect	text94
 14870  1F3F                     __ptext94:	
 14871 ;; *************** function _setDimmerLights_Initialization *****************
 14872 ;; Defined at:
 14873 ;;		line 357 in file "../src/Dimmer_B1.c"
 14874 ;; Parameters:    Size  Location     Type
 14875 ;;  lights          1    wreg     unsigned char 
 14876 ;; Auto vars:     Size  Location     Type
 14877 ;;  lights          1    3[BANK0 ] unsigned char 
 14878 ;; Return value:  Size  Location     Type
 14879 ;;		None               void
 14880 ;; Registers used:
 14881 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14882 ;; Tracked objects:
 14883 ;;		On entry : 0/0
 14884 ;;		On exit  : 0/0
 14885 ;;		Unchanged: 0/0
 14886 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14887 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14888 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14889 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14890 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14891 ;;Total ram usage:        2 bytes
 14892 ;; Hardware stack levels used:    1
 14893 ;; Hardware stack levels required when called:    6
 14894 ;; This function calls:
 14895 ;;		_DimmerLightsPointSelect
 14896 ;; This function is called by:
 14897 ;;		_DimmerLights_Initialization
 14898 ;; This function uses a non-reentrant model
 14899 ;;
 14900                           
 14901                           
 14902                           ;psect for function _setDimmerLights_Initialization
 14903  1F3F                     _setDimmerLights_Initialization:	
 14904                           
 14905                           ;incstack = 0
 14906                           ; Regs used in _setDimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pcla
      +                          th+cstack]
 14907                           ;setDimmerLights_Initialization@lights stored from wreg
 14908  1F3F  0020               	movlb	0	; select bank0
 14909  1F40  00A3               	movwf	setDimmerLights_Initialization@lights
 14910                           
 14911                           ;Dimmer_B1.c: 359: DimmerLightsPointSelect(lights);
 14912  1F41  0823               	movf	setDimmerLights_Initialization@lights,w
 14913  1F42  319B  23C6         	fcall	_DimmerLightsPointSelect
 14914                           
 14915                           ;Dimmer_B1.c: 360: DimmerLights->Clear = 1;
 14916  1F44  0879               	movf	_DimmerLights,w
 14917  1F45  3E09               	addlw	9
 14918  1F46  0086               	movwf	6
 14919  1F47  3001               	movlw	1	; select bank2/3
 14920  1F48  0087               	movwf	7
 14921  1F49  1501               	bsf	1,2
 14922                           
 14923                           ;Dimmer_B1.c: 366: DimmerLights->MaxmumValue = ((char)((100-60)*0.8));
 14924  1F4A  3020               	movlw	32
 14925  1F4B  0020               	movlb	0	; select bank0
 14926  1F4C  00A2               	movwf	??_setDimmerLights_Initialization
 14927  1F4D  0879               	movf	_DimmerLights,w
 14928  1F4E  3E05               	addlw	5
 14929  1F4F  0086               	movwf	6
 14930  1F50  3001               	movlw	1	; select bank2/3
 14931  1F51  0087               	movwf	7
 14932  1F52  0822               	movf	??_setDimmerLights_Initialization,w
 14933  1F53  0081               	movwf	1
 14934                           
 14935                           ;Dimmer_B1.c: 367: DimmerLights->MinimumValue = ((char)((100-25)*0.8));
 14936  1F54  303C               	movlw	60
 14937  1F55  00A2               	movwf	??_setDimmerLights_Initialization
 14938  1F56  0879               	movf	_DimmerLights,w
 14939  1F57  3E06               	addlw	6
 14940  1F58  0086               	movwf	6
 14941  1F59  3001               	movlw	1	; select bank2/3
 14942  1F5A  0087               	movwf	7
 14943  1F5B  0822               	movf	??_setDimmerLights_Initialization,w
 14944  1F5C  0081               	movwf	1
 14945                           
 14946                           ;Dimmer_B1.c: 377: DimmerLights->DimmingValue = DimmerLights->MinimumValue;
 14947  1F5D  0879               	movf	_DimmerLights,w
 14948  1F5E  3E06               	addlw	6
 14949  1F5F  0086               	movwf	6
 14950  1F60  3001               	movlw	1	; select bank2/3
 14951  1F61  0087               	movwf	7
 14952  1F62  0801               	movf	1,w
 14953  1F63  00A2               	movwf	??_setDimmerLights_Initialization
 14954  1F64  0879               	movf	_DimmerLights,w
 14955  1F65  3E04               	addlw	4
 14956  1F66  0086               	movwf	6
 14957  1F67  3001               	movlw	1	; select bank2/3
 14958  1F68  0087               	movwf	7
 14959  1F69  0822               	movf	??_setDimmerLights_Initialization,w
 14960  1F6A  0081               	movwf	1
 14961  1F6B  0008               	return
 14962  1F6C                     __end_of_setDimmerLights_Initialization:	
 14963                           
 14964                           	psect	text95
 14965  19B0                     __ptext95:	
 14966 ;; *************** function _Dimmer_Initialization *****************
 14967 ;; Defined at:
 14968 ;;		line 786 in file "../src/Dimmer_B1.c"
 14969 ;; Parameters:    Size  Location     Type
 14970 ;;		None
 14971 ;; Auto vars:     Size  Location     Type
 14972 ;;		None
 14973 ;; Return value:  Size  Location     Type
 14974 ;;		None               void
 14975 ;; Registers used:
 14976 ;;		wreg
 14977 ;; Tracked objects:
 14978 ;;		On entry : 0/0
 14979 ;;		On exit  : 0/0
 14980 ;;		Unchanged: 0/0
 14981 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14982 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14983 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14984 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14985 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14986 ;;Total ram usage:        1 bytes
 14987 ;; Hardware stack levels used:    1
 14988 ;; Hardware stack levels required when called:    5
 14989 ;; This function calls:
 14990 ;;		Nothing
 14991 ;; This function is called by:
 14992 ;;		_DimmerLights_Initialization
 14993 ;; This function uses a non-reentrant model
 14994 ;;
 14995                           
 14996                           
 14997                           ;psect for function _Dimmer_Initialization
 14998  19B0                     _Dimmer_Initialization:	
 14999                           
 15000                           ;Dimmer_B1.c: 788: Dimmer = &Dimmer1;
 15001                           
 15002                           ;incstack = 0
 15003                           ; Regs used in _Dimmer_Initialization: [wreg]
 15004  19B0  30E9               	movlw	_Dimmer1& (0+255)
 15005  19B1  0020               	movlb	0	; select bank0
 15006  19B2  00A0               	movwf	??_Dimmer_Initialization
 15007  19B3  0820               	movf	??_Dimmer_Initialization,w
 15008  19B4  0021               	movlb	1	; select bank1
 15009  19B5  00CB               	movwf	_Dimmer^(0+128)
 15010  19B6  0008               	return
 15011  19B7                     __end_of_Dimmer_Initialization:	
 15012                           
 15013                           	psect	text96
 15014  19C6                     __ptext96:	
 15015 ;; *************** function _DelayOff_Main *****************
 15016 ;; Defined at:
 15017 ;;		line 41 in file "../src/DelayOff_B1.c"
 15018 ;; Parameters:    Size  Location     Type
 15019 ;;		None
 15020 ;; Auto vars:     Size  Location     Type
 15021 ;;		None
 15022 ;; Return value:  Size  Location     Type
 15023 ;;		None               void
 15024 ;; Registers used:
 15025 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15026 ;; Tracked objects:
 15027 ;;		On entry : 0/0
 15028 ;;		On exit  : 0/0
 15029 ;;		Unchanged: 0/0
 15030 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15031 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15032 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15033 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15034 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15035 ;;Total ram usage:        0 bytes
 15036 ;; Hardware stack levels used:    1
 15037 ;; Hardware stack levels required when called:   10
 15038 ;; This function calls:
 15039 ;;		_DlyOff_Main
 15040 ;; This function is called by:
 15041 ;;		_main
 15042 ;; This function uses a non-reentrant model
 15043 ;;
 15044                           
 15045                           
 15046                           ;psect for function _DelayOff_Main
 15047  19C6                     _DelayOff_Main:	
 15048                           
 15049                           ;DelayOff_B1.c: 43: DlyOff_Main(1);
 15050                           
 15051                           ;incstack = 0
 15052                           ; Regs used in _DelayOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15053  19C6  3001               	movlw	1
 15054  19C7  318B  234C  3199   	fcall	_DlyOff_Main
 15055                           
 15056                           ;DelayOff_B1.c: 47: DlyOff_Main(2);
 15057  19CA  3002               	movlw	2
 15058  19CB  318B  234C         	fcall	_DlyOff_Main
 15059  19CD  0008               	return
 15060  19CE                     __end_of_DelayOff_Main:	
 15061                           
 15062                           	psect	text97
 15063  0B4C                     __ptext97:	
 15064 ;; *************** function _DlyOff_Main *****************
 15065 ;; Defined at:
 15066 ;;		line 62 in file "../src/DelayOff_B1.c"
 15067 ;; Parameters:    Size  Location     Type
 15068 ;;  sw              1    wreg     unsigned char 
 15069 ;; Auto vars:     Size  Location     Type
 15070 ;;  sw              1   68[BANK0 ] unsigned char 
 15071 ;; Return value:  Size  Location     Type
 15072 ;;		None               void
 15073 ;; Registers used:
 15074 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15075 ;; Tracked objects:
 15076 ;;		On entry : 0/0
 15077 ;;		On exit  : 0/0
 15078 ;;		Unchanged: 0/0
 15079 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15080 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15081 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15082 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15083 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15084 ;;Total ram usage:        3 bytes
 15085 ;; Hardware stack levels used:    1
 15086 ;; Hardware stack levels required when called:    9
 15087 ;; This function calls:
 15088 ;;		_DelayOffPointSelect
 15089 ;;		_setBuz
 15090 ;;		_setDimmerLights_Switch
 15091 ;;		_setDimmerLights_Trigger
 15092 ;;		_setRFSW_Status
 15093 ;;		_setRF_DimmerLights
 15094 ;;		_setSw_Status
 15095 ;;		_setTxData
 15096 ;; This function is called by:
 15097 ;;		_DelayOff_Main
 15098 ;; This function uses a non-reentrant model
 15099 ;;
 15100                           
 15101                           
 15102                           ;psect for function _DlyOff_Main
 15103  0B4C                     _DlyOff_Main:	
 15104                           
 15105                           ;incstack = 0
 15106                           ; Regs used in _DlyOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15107                           ;DlyOff_Main@sw stored from wreg
 15108  0B4C  0020               	movlb	0	; select bank0
 15109  0B4D  00E4               	movwf	DlyOff_Main@sw
 15110                           
 15111                           ;DelayOff_B1.c: 63: DelayOffPointSelect(sw);
 15112  0B4E  0864               	movf	DlyOff_Main@sw,w
 15113  0B4F  319C  2400  318B   	fcall	_DelayOffPointSelect
 15114                           
 15115                           ;DelayOff_B1.c: 64: if (DelayOff->GO == 1) {
 15116  0B52  0878               	movf	_DelayOff,w
 15117  0B53  0086               	movwf	6
 15118  0B54  3001               	movlw	1	; select bank2/3
 15119  0B55  0087               	movwf	7
 15120  0B56  1C81               	btfss	1,1
 15121  0B57  0008               	return
 15122                           
 15123                           ;DelayOff_B1.c: 65: DelayOff->SecondTime++;
 15124  0B58  0878               	movf	_DelayOff,w
 15125  0B59  3E02               	addlw	2
 15126  0B5A  0086               	movwf	6
 15127  0B5B  3001               	movlw	1	; select bank2/3
 15128  0B5C  0087               	movwf	7
 15129  0B5D  3001               	movlw	1
 15130  0B5E  0781               	addwf	1,f
 15131  0B5F  3141               	addfsr 1,1
 15132  0B60  1803               	skipnc
 15133  0B61  0A81               	incf	1,f
 15134                           
 15135                           ;DelayOff_B1.c: 66: if (DelayOff->SecondTime >= 5650) {
 15136  0B62  0878               	movf	_DelayOff,w
 15137  0B63  3E02               	addlw	2
 15138  0B64  0086               	movwf	6
 15139  0B65  3001               	movlw	1	; select bank2/3
 15140  0B66  0087               	movwf	7
 15141  0B67  3F40               	moviw [0]fsr1
 15142  0B68  0020               	movlb	0	; select bank0
 15143  0B69  00E2               	movwf	??_DlyOff_Main
 15144  0B6A  3F41               	moviw [1]fsr1
 15145  0B6B  00E3               	movwf	??_DlyOff_Main+1
 15146  0B6C  3016               	movlw	22
 15147  0B6D  0263               	subwf	??_DlyOff_Main+1,w
 15148  0B6E  3012               	movlw	18
 15149  0B6F  1903               	skipnz
 15150  0B70  0262               	subwf	??_DlyOff_Main,w
 15151  0B71  1C03               	skipc
 15152  0B72  0008               	return
 15153                           
 15154                           ;DelayOff_B1.c: 67: DelayOff->SecondTime = 0;
 15155  0B73  0878               	movf	_DelayOff,w
 15156  0B74  3E02               	addlw	2
 15157  0B75  0086               	movwf	6
 15158  0B76  3001               	movlw	1	; select bank2/3
 15159  0B77  0087               	movwf	7
 15160  0B78  3000               	movlw	0
 15161  0B79  3FC0               	movwi [0]fsr1
 15162  0B7A  3FC1               	movwi [1]fsr1
 15163                           
 15164                           ;DelayOff_B1.c: 68: DelayOff->MinuteTime++;
 15165  0B7B  3001               	movlw	1
 15166  0B7C  00E2               	movwf	??_DlyOff_Main
 15167  0B7D  0878               	movf	_DelayOff,w
 15168  0B7E  3E04               	addlw	4
 15169  0B7F  0086               	movwf	6
 15170  0B80  3001               	movlw	1	; select bank2/3
 15171  0B81  0087               	movwf	7
 15172  0B82  0862               	movf	??_DlyOff_Main,w
 15173  0B83  0781               	addwf	1,f
 15174                           
 15175                           ;DelayOff_B1.c: 69: if (DelayOff->MinuteTime >= DelayOff->Value) {
 15176  0B84  0878               	movf	_DelayOff,w
 15177  0B85  3E04               	addlw	4
 15178  0B86  0086               	movwf	6
 15179  0B87  3001               	movlw	1	; select bank2/3
 15180  0B88  0087               	movwf	7
 15181  0B89  0A78               	incf	_DelayOff,w
 15182  0B8A  0084               	movwf	4
 15183  0B8B  3001               	movlw	1	; select bank2/3
 15184  0B8C  0085               	movwf	5
 15185  0B8D  0800               	movf	0,w
 15186  0B8E  0201               	subwf	1,w
 15187  0B8F  1C03               	skipc
 15188  0B90  0008               	return
 15189                           
 15190                           ;DelayOff_B1.c: 70: DelayOff->MinuteTime = 0;
 15191  0B91  0878               	movf	_DelayOff,w
 15192  0B92  3E04               	addlw	4
 15193  0B93  0086               	movwf	6
 15194  0B94  3001               	movlw	1	; select bank2/3
 15195  0B95  0087               	movwf	7
 15196  0B96  0181               	clrf	1
 15197                           
 15198                           ;DelayOff_B1.c: 71: DelayOff->GO = 0;
 15199  0B97  0878               	movf	_DelayOff,w
 15200  0B98  0086               	movwf	6
 15201  0B99  3001               	movlw	1	; select bank2/3
 15202  0B9A  0087               	movwf	7
 15203  0B9B  1081               	bcf	1,1
 15204                           
 15205                           ;DelayOff_B1.c: 73: setSw_Status(sw, 0);
 15206  0B9C  01A2               	clrf	setSw_Status@command
 15207  0B9D  0864               	movf	DlyOff_Main@sw,w
 15208  0B9E  319A  22CF  318B   	fcall	_setSw_Status
 15209                           
 15210                           ;DelayOff_B1.c: 74: setRFSW_Status(sw, 0);
 15211  0BA1  0020               	movlb	0	; select bank0
 15212  0BA2  01A2               	clrf	setRFSW_Status@command
 15213  0BA3  0864               	movf	DlyOff_Main@sw,w
 15214  0BA4  319A  22C0  318B   	fcall	_setRFSW_Status
 15215                           
 15216                           ;DelayOff_B1.c: 75: setRF_DimmerLights(sw, 0);
 15217  0BA7  0020               	movlb	0	; select bank0
 15218  0BA8  01DD               	clrf	setRF_DimmerLights@on
 15219  0BA9  0864               	movf	DlyOff_Main@sw,w
 15220  0BAA  3188  2027  318B   	fcall	_setRF_DimmerLights
 15221                           
 15222                           ;DelayOff_B1.c: 76: setDimmerLights_Trigger(sw, 1);
 15223  0BAD  0020               	movlb	0	; select bank0
 15224  0BAE  01A2               	clrf	setDimmerLights_Trigger@command
 15225  0BAF  0AA2               	incf	setDimmerLights_Trigger@command,f
 15226  0BB0  0864               	movf	DlyOff_Main@sw,w
 15227  0BB1  319B  231D  318B   	fcall	_setDimmerLights_Trigger
 15228                           
 15229                           ;DelayOff_B1.c: 77: setDimmerLights_Switch(sw, 0);
 15230  0BB4  0020               	movlb	0	; select bank0
 15231  0BB5  01A2               	clrf	setDimmerLights_Switch@command
 15232  0BB6  0864               	movf	DlyOff_Main@sw,w
 15233  0BB7  319B  230D  318B   	fcall	_setDimmerLights_Switch
 15234                           
 15235                           ;DelayOff_B1.c: 78: setTxData();
 15236  0BBA  3186  26BA  318B   	fcall	_setTxData
 15237                           
 15238                           ;DelayOff_B1.c: 79: setBuz(1, 100);
 15239  0BBD  3064               	movlw	100
 15240  0BBE  0020               	movlb	0	; select bank0
 15241  0BBF  00A9               	movwf	setBuz@time
 15242  0BC0  3000               	movlw	0
 15243  0BC1  00AA               	movwf	setBuz@time+1
 15244  0BC2  3001               	movlw	1
 15245  0BC3  3194  24F6         	fcall	_setBuz
 15246  0BC5  0008               	return
 15247  0BC6                     __end_of_DlyOff_Main:	
 15248                           
 15249                           	psect	text98
 15250  06BA                     __ptext98:	
 15251 ;; *************** function _setTxData *****************
 15252 ;; Defined at:
 15253 ;;		line 145 in file "../src/RF_Control_B1.c"
 15254 ;; Parameters:    Size  Location     Type
 15255 ;;		None
 15256 ;; Auto vars:     Size  Location     Type
 15257 ;;  i               1    0        unsigned char 
 15258 ;; Return value:  Size  Location     Type
 15259 ;;		None               void
 15260 ;; Registers used:
 15261 ;;		wreg, fsr1l, fsr1h
 15262 ;; Tracked objects:
 15263 ;;		On entry : 0/0
 15264 ;;		On exit  : 0/0
 15265 ;;		Unchanged: 0/0
 15266 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15267 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15268 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15269 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15270 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15271 ;;Total ram usage:        1 bytes
 15272 ;; Hardware stack levels used:    1
 15273 ;; Hardware stack levels required when called:    5
 15274 ;; This function calls:
 15275 ;;		Nothing
 15276 ;; This function is called by:
 15277 ;;		_DlyOff_Main
 15278 ;;		_setDimmerLights_Adj
 15279 ;;		_setControl_Lights_Table
 15280 ;;		_setRFSW_Control
 15281 ;;		_setRFSW_AdjControl
 15282 ;;		_Sw_DimmerOnFunc
 15283 ;;		_Sw_DimmerOffFunc
 15284 ;; This function uses a non-reentrant model
 15285 ;;
 15286                           
 15287                           
 15288                           ;psect for function _setTxData
 15289  06BA                     _setTxData:	
 15290                           
 15291                           ;RF_Control_B1.c: 146: char i;
 15292                           ;RF_Control_B1.c: 147: if (RF1.Enable == 1) {
 15293                           
 15294                           ;incstack = 0
 15295                           ; Regs used in _setTxData: [wregfsr1]
 15296  06BA  0021               	movlb	1	; select bank1
 15297  06BB  1C41               	btfss	_RF1^(0+128),0
 15298  06BC  0008               	return
 15299                           
 15300                           ;RF_Control_B1.c: 149: RF1.TransceiveGO = 1;
 15301  06BD  1541               	bsf	_RF1^(0+128),2
 15302                           
 15303                           ;RF_Control_B1.c: 159: RF_Data[0] = 0x63;
 15304  06BE  3063               	movlw	99
 15305  06BF  0020               	movlb	0	; select bank0
 15306  06C0  00A0               	movwf	??_setTxData
 15307  06C1  0820               	movf	??_setTxData,w
 15308  06C2  0021               	movlb	1	; select bank1
 15309  06C3  00A0               	movwf	_RF_Data^(0+128)
 15310                           
 15311                           ;RF_Control_B1.c: 160: RF_Data[1] = 0x02;
 15312  06C4  3002               	movlw	2
 15313  06C5  0020               	movlb	0	; select bank0
 15314  06C6  00A0               	movwf	??_setTxData
 15315  06C7  0820               	movf	??_setTxData,w
 15316  06C8  0021               	movlb	1	; select bank1
 15317  06C9  00A1               	movwf	(_RF_Data^(0+128)+1)
 15318                           
 15319                           ;RF_Control_B1.c: 161: RF_Data[2] = product->Data[2];
 15320  06CA  0020               	movlb	0	; select bank0
 15321  06CB  086E               	movf	_product,w
 15322  06CC  0086               	movwf	6
 15323  06CD  3002               	movlw	2	; select bank4/5
 15324  06CE  0087               	movwf	7
 15325  06CF  3002               	movlw	2	; select bank4/5
 15326  06D0  3F42               	moviw [2]fsr1
 15327  06D1  0021               	movlb	1	; select bank1
 15328  06D2  00A2               	movwf	(_RF_Data^(0+128)+2)
 15329                           
 15330                           ;RF_Control_B1.c: 162: RF_Data[3] = product->Data[3];
 15331  06D3  0020               	movlb	0	; select bank0
 15332  06D4  086E               	movf	_product,w
 15333  06D5  0086               	movwf	6
 15334  06D6  3002               	movlw	2	; select bank4/5
 15335  06D7  0087               	movwf	7
 15336  06D8  3002               	movlw	2	; select bank4/5
 15337  06D9  3F43               	moviw [3]fsr1
 15338  06DA  0021               	movlb	1	; select bank1
 15339  06DB  00A3               	movwf	(_RF_Data^(0+128)+3)
 15340                           
 15341                           ;RF_Control_B1.c: 163: RF_Data[4] = product->Data[4];
 15342  06DC  0020               	movlb	0	; select bank0
 15343  06DD  086E               	movf	_product,w
 15344  06DE  0086               	movwf	6
 15345  06DF  3002               	movlw	2	; select bank4/5
 15346  06E0  0087               	movwf	7
 15347  06E1  3002               	movlw	2	; select bank4/5
 15348  06E2  3F44               	moviw [4]fsr1
 15349  06E3  0021               	movlb	1	; select bank1
 15350  06E4  00A4               	movwf	(_RF_Data^(0+128)+4)
 15351                           
 15352                           ;RF_Control_B1.c: 164: RF_Data[5] = product->Data[5];
 15353  06E5  0020               	movlb	0	; select bank0
 15354  06E6  086E               	movf	_product,w
 15355  06E7  0086               	movwf	6
 15356  06E8  3002               	movlw	2	; select bank4/5
 15357  06E9  0087               	movwf	7
 15358  06EA  3002               	movlw	2	; select bank4/5
 15359  06EB  3F45               	moviw [5]fsr1
 15360  06EC  0021               	movlb	1	; select bank1
 15361  06ED  00A5               	movwf	(_RF_Data^(0+128)+5)
 15362                           
 15363                           ;RF_Control_B1.c: 165: RF_Data[6] = product->Data[6];
 15364  06EE  0020               	movlb	0	; select bank0
 15365  06EF  086E               	movf	_product,w
 15366  06F0  0086               	movwf	6
 15367  06F1  3002               	movlw	2	; select bank4/5
 15368  06F2  0087               	movwf	7
 15369  06F3  3002               	movlw	2	; select bank4/5
 15370  06F4  3F46               	moviw [6]fsr1
 15371  06F5  0021               	movlb	1	; select bank1
 15372  06F6  00A6               	movwf	(_RF_Data^(0+128)+6)
 15373                           
 15374                           ;RF_Control_B1.c: 166: RF_Data[7] = product->Data[7];
 15375  06F7  0020               	movlb	0	; select bank0
 15376  06F8  086E               	movf	_product,w
 15377  06F9  0086               	movwf	6
 15378  06FA  3002               	movlw	2	; select bank4/5
 15379  06FB  0087               	movwf	7
 15380  06FC  3002               	movlw	2	; select bank4/5
 15381  06FD  3F47               	moviw [7]fsr1
 15382  06FE  0021               	movlb	1	; select bank1
 15383  06FF  00A7               	movwf	(_RF_Data^(0+128)+7)
 15384                           
 15385                           ;RF_Control_B1.c: 167: RF_Data[8] = product->Data[8];
 15386  0700  0020               	movlb	0	; select bank0
 15387  0701  086E               	movf	_product,w
 15388  0702  0086               	movwf	6
 15389  0703  3002               	movlw	2	; select bank4/5
 15390  0704  0087               	movwf	7
 15391  0705  3002               	movlw	2	; select bank4/5
 15392  0706  3F48               	moviw [8]fsr1
 15393  0707  0021               	movlb	1	; select bank1
 15394  0708  00A8               	movwf	(_RF_Data^(0+128)+8)
 15395                           
 15396                           ;RF_Control_B1.c: 168: RF_Data[9] = product->Data[9];
 15397  0709  0020               	movlb	0	; select bank0
 15398  070A  086E               	movf	_product,w
 15399  070B  0086               	movwf	6
 15400  070C  3002               	movlw	2	; select bank4/5
 15401  070D  0087               	movwf	7
 15402  070E  3002               	movlw	2	; select bank4/5
 15403  070F  3F49               	moviw [9]fsr1
 15404  0710  0021               	movlb	1	; select bank1
 15405  0711  00A9               	movwf	(_RF_Data^(0+128)+9)
 15406                           
 15407                           ;RF_Control_B1.c: 169: RF_Data[10] = product->Data[10];
 15408  0712  0020               	movlb	0	; select bank0
 15409  0713  086E               	movf	_product,w
 15410  0714  0086               	movwf	6
 15411  0715  3002               	movlw	2	; select bank4/5
 15412  0716  0087               	movwf	7
 15413  0717  3002               	movlw	2	; select bank4/5
 15414  0718  3F4A               	moviw [10]fsr1
 15415  0719  0021               	movlb	1	; select bank1
 15416  071A  00AA               	movwf	(_RF_Data^(0+128)+10)
 15417                           
 15418                           ;RF_Control_B1.c: 170: RF_Data[11] = product->Data[11];
 15419  071B  0020               	movlb	0	; select bank0
 15420  071C  086E               	movf	_product,w
 15421  071D  0086               	movwf	6
 15422  071E  3002               	movlw	2	; select bank4/5
 15423  071F  0087               	movwf	7
 15424  0720  3002               	movlw	2	; select bank4/5
 15425  0721  3F4B               	moviw [11]fsr1
 15426  0722  0021               	movlb	1	; select bank1
 15427  0723  00AB               	movwf	(_RF_Data^(0+128)+11)
 15428                           
 15429                           ;RF_Control_B1.c: 171: RF_Data[12] = product->Data[12];
 15430  0724  0020               	movlb	0	; select bank0
 15431  0725  086E               	movf	_product,w
 15432  0726  0086               	movwf	6
 15433  0727  3002               	movlw	2	; select bank4/5
 15434  0728  0087               	movwf	7
 15435  0729  3002               	movlw	2	; select bank4/5
 15436  072A  3F4C               	moviw [12]fsr1
 15437  072B  0021               	movlb	1	; select bank1
 15438  072C  00AC               	movwf	(_RF_Data^(0+128)+12)
 15439                           
 15440                           ;RF_Control_B1.c: 172: RF_Data[13] = product->Data[13];
 15441  072D  0020               	movlb	0	; select bank0
 15442  072E  086E               	movf	_product,w
 15443  072F  0086               	movwf	6
 15444  0730  3002               	movlw	2	; select bank4/5
 15445  0731  0087               	movwf	7
 15446  0732  3002               	movlw	2	; select bank4/5
 15447  0733  3F4D               	moviw [13]fsr1
 15448  0734  0021               	movlb	1	; select bank1
 15449  0735  00AD               	movwf	(_RF_Data^(0+128)+13)
 15450                           
 15451                           ;RF_Control_B1.c: 173: RF_Data[14] = product->Data[14];
 15452  0736  0020               	movlb	0	; select bank0
 15453  0737  086E               	movf	_product,w
 15454  0738  0086               	movwf	6
 15455  0739  3002               	movlw	2	; select bank4/5
 15456  073A  0087               	movwf	7
 15457  073B  3002               	movlw	2	; select bank4/5
 15458  073C  3F4E               	moviw [14]fsr1
 15459  073D  0021               	movlb	1	; select bank1
 15460  073E  00AE               	movwf	(_RF_Data^(0+128)+14)
 15461                           
 15462                           ;RF_Control_B1.c: 174: RF_Data[15] = product->Data[15];
 15463  073F  0020               	movlb	0	; select bank0
 15464  0740  086E               	movf	_product,w
 15465  0741  0086               	movwf	6
 15466  0742  3002               	movlw	2	; select bank4/5
 15467  0743  0087               	movwf	7
 15468  0744  3002               	movlw	2	; select bank4/5
 15469  0745  3F4F               	moviw [15]fsr1
 15470  0746  0021               	movlb	1	; select bank1
 15471  0747  00AF               	movwf	(_RF_Data^(0+128)+15)
 15472                           
 15473                           ;RF_Control_B1.c: 175: RF_Data[16] = product->Data[16];
 15474  0748  0020               	movlb	0	; select bank0
 15475  0749  086E               	movf	_product,w
 15476  074A  0086               	movwf	6
 15477  074B  3002               	movlw	2	; select bank4/5
 15478  074C  0087               	movwf	7
 15479  074D  3002               	movlw	2	; select bank4/5
 15480  074E  3F50               	moviw [16]fsr1
 15481  074F  0021               	movlb	1	; select bank1
 15482  0750  00B0               	movwf	(_RF_Data^(0+128)+16)
 15483                           
 15484                           ;RF_Control_B1.c: 176: RF_Data[17] = product->Data[17];
 15485  0751  0020               	movlb	0	; select bank0
 15486  0752  086E               	movf	_product,w
 15487  0753  0086               	movwf	6
 15488  0754  3002               	movlw	2	; select bank4/5
 15489  0755  0087               	movwf	7
 15490  0756  3002               	movlw	2	; select bank4/5
 15491  0757  3F51               	moviw [17]fsr1
 15492  0758  0021               	movlb	1	; select bank1
 15493  0759  00B1               	movwf	(_RF_Data^(0+128)+17)
 15494                           
 15495                           ;RF_Control_B1.c: 177: RF_Data[18] = product->Data[18];
 15496  075A  0020               	movlb	0	; select bank0
 15497  075B  086E               	movf	_product,w
 15498  075C  0086               	movwf	6
 15499  075D  3002               	movlw	2	; select bank4/5
 15500  075E  0087               	movwf	7
 15501  075F  3002               	movlw	2	; select bank4/5
 15502  0760  3F52               	moviw [18]fsr1
 15503  0761  0021               	movlb	1	; select bank1
 15504  0762  00B2               	movwf	(_RF_Data^(0+128)+18)
 15505                           
 15506                           ;RF_Control_B1.c: 178: RF_Data[19] = product->Data[19];
 15507  0763  0020               	movlb	0	; select bank0
 15508  0764  086E               	movf	_product,w
 15509  0765  0086               	movwf	6
 15510  0766  3002               	movlw	2	; select bank4/5
 15511  0767  0087               	movwf	7
 15512  0768  3002               	movlw	2	; select bank4/5
 15513  0769  3F53               	moviw [19]fsr1
 15514  076A  0021               	movlb	1	; select bank1
 15515  076B  00B3               	movwf	(_RF_Data^(0+128)+19)
 15516                           
 15517                           ;RF_Control_B1.c: 179: RF_Data[20] = 210;
 15518  076C  30D2               	movlw	210
 15519  076D  0020               	movlb	0	; select bank0
 15520  076E  00A0               	movwf	??_setTxData
 15521  076F  0820               	movf	??_setTxData,w
 15522  0770  0021               	movlb	1	; select bank1
 15523  0771  00B4               	movwf	(_RF_Data^(0+128)+20)
 15524  0772  0008               	return
 15525  0773                     __end_of_setTxData:	
 15526                           
 15527                           	psect	text99
 15528  1ACF                     __ptext99:	
 15529 ;; *************** function _setSw_Status *****************
 15530 ;; Defined at:
 15531 ;;		line 105 in file "../src/Switch_B1.c"
 15532 ;; Parameters:    Size  Location     Type
 15533 ;;  sw              1    wreg     unsigned char 
 15534 ;;  command         1    2[BANK0 ] unsigned char 
 15535 ;; Auto vars:     Size  Location     Type
 15536 ;;  sw              1    3[BANK0 ] unsigned char 
 15537 ;; Return value:  Size  Location     Type
 15538 ;;		None               void
 15539 ;; Registers used:
 15540 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15541 ;; Tracked objects:
 15542 ;;		On entry : 0/0
 15543 ;;		On exit  : 0/0
 15544 ;;		Unchanged: 0/0
 15545 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15546 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15547 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15548 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15549 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15550 ;;Total ram usage:        2 bytes
 15551 ;; Hardware stack levels used:    1
 15552 ;; Hardware stack levels required when called:    6
 15553 ;; This function calls:
 15554 ;;		_SwPointSelect
 15555 ;; This function is called by:
 15556 ;;		_DlyOff_Main
 15557 ;;		_setDimmerLights_ERROR
 15558 ;;		_setControl_Lights_Table
 15559 ;;		_setRFSW_Control
 15560 ;; This function uses a non-reentrant model
 15561 ;;
 15562                           
 15563                           
 15564                           ;psect for function _setSw_Status
 15565  1ACF                     _setSw_Status:	
 15566                           
 15567                           ;incstack = 0
 15568                           ; Regs used in _setSw_Status: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15569                           ;setSw_Status@sw stored from wreg
 15570  1ACF  0020               	movlb	0	; select bank0
 15571  1AD0  00A3               	movwf	setSw_Status@sw
 15572                           
 15573                           ;Switch_B1.c: 106: SwPointSelect(sw);
 15574  1AD1  0823               	movf	setSw_Status@sw,w
 15575  1AD2  319C  2414         	fcall	_SwPointSelect
 15576                           
 15577                           ;Switch_B1.c: 107: Sw->Status = command;
 15578  1AD4  0020               	movlb	0	; select bank0
 15579  1AD5  086F               	movf	_Sw,w
 15580  1AD6  0086               	movwf	6
 15581  1AD7  3001               	movlw	1	; select bank2/3
 15582  1AD8  0087               	movwf	7
 15583  1AD9  0822               	movf	setSw_Status@command,w
 15584  1ADA  1301               	bcf	1,6
 15585  1ADB  1D03               	skipz
 15586  1ADC  1701               	bsf	1,6
 15587  1ADD  0008               	return
 15588  1ADE                     __end_of_setSw_Status:	
 15589                           
 15590                           	psect	text100
 15591  1C14                     __ptext100:	
 15592 ;; *************** function _SwPointSelect *****************
 15593 ;; Defined at:
 15594 ;;		line 17 in file "../src/Switch_B1.c"
 15595 ;; Parameters:    Size  Location     Type
 15596 ;;  sw              1    wreg     unsigned char 
 15597 ;; Auto vars:     Size  Location     Type
 15598 ;;  sw              1    1[BANK0 ] unsigned char 
 15599 ;; Return value:  Size  Location     Type
 15600 ;;		None               void
 15601 ;; Registers used:
 15602 ;;		wreg
 15603 ;; Tracked objects:
 15604 ;;		On entry : 0/0
 15605 ;;		On exit  : 0/0
 15606 ;;		Unchanged: 0/0
 15607 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15608 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15609 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15610 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15611 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15612 ;;Total ram usage:        2 bytes
 15613 ;; Hardware stack levels used:    1
 15614 ;; Hardware stack levels required when called:    5
 15615 ;; This function calls:
 15616 ;;		Nothing
 15617 ;; This function is called by:
 15618 ;;		_setSw_Enable
 15619 ;;		_setSw_Status
 15620 ;;		_setSw_Main
 15621 ;;		_Sw_Detect
 15622 ;; This function uses a non-reentrant model
 15623 ;;
 15624                           
 15625                           
 15626                           ;psect for function _SwPointSelect
 15627  1C14                     _SwPointSelect:	
 15628                           
 15629                           ;incstack = 0
 15630                           ; Regs used in _SwPointSelect: [wreg]
 15631                           ;SwPointSelect@sw stored from wreg
 15632  1C14  0020               	movlb	0	; select bank0
 15633  1C15  00A1               	movwf	SwPointSelect@sw
 15634                           
 15635                           ;Switch_B1.c: 20: if (sw == 1) {
 15636  1C16  0821               	movf	SwPointSelect@sw,w
 15637  1C17  3A01               	xorlw	1
 15638  1C18  1D03               	skipz
 15639  1C19  2C1F               	goto	l6073
 15640                           
 15641                           ;Switch_B1.c: 21: Sw = &Sw1;
 15642  1C1A  30BE               	movlw	_Sw1& (0+255)
 15643  1C1B  00A0               	movwf	??_SwPointSelect
 15644  1C1C  0820               	movf	??_SwPointSelect,w
 15645  1C1D  00EF               	movwf	_Sw
 15646                           
 15647                           ;Switch_B1.c: 22: }
 15648  1C1E  0008               	return
 15649  1C1F                     l6073:	
 15650                           
 15651                           ;Switch_B1.c: 25: else if (sw == 2) {
 15652  1C1F  0821               	movf	SwPointSelect@sw,w
 15653  1C20  3A02               	xorlw	2
 15654  1C21  1D03               	skipz
 15655  1C22  0008               	return
 15656                           
 15657                           ;Switch_B1.c: 26: Sw = &Sw2;
 15658  1C23  30C7               	movlw	_Sw2& (0+255)
 15659  1C24  00A0               	movwf	??_SwPointSelect
 15660  1C25  0820               	movf	??_SwPointSelect,w
 15661  1C26  00EF               	movwf	_Sw
 15662  1C27  0008               	return
 15663  1C28                     __end_of_SwPointSelect:	
 15664                           
 15665                           	psect	text101
 15666  0827                     __ptext101:	
 15667 ;; *************** function _setRF_DimmerLights *****************
 15668 ;; Defined at:
 15669 ;;		line 404 in file "../src/RF_Control_B1.c"
 15670 ;; Parameters:    Size  Location     Type
 15671 ;;  lights          1    wreg     unsigned char 
 15672 ;;  on              1   61[BANK0 ] unsigned char 
 15673 ;; Auto vars:     Size  Location     Type
 15674 ;;  lights          1   65[BANK0 ] unsigned char 
 15675 ;;  status          1   64[BANK0 ] unsigned char 
 15676 ;; Return value:  Size  Location     Type
 15677 ;;		None               void
 15678 ;; Registers used:
 15679 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15680 ;; Tracked objects:
 15681 ;;		On entry : 0/0
 15682 ;;		On exit  : 0/0
 15683 ;;		Unchanged: 0/0
 15684 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15685 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15686 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15687 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15688 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15689 ;;Total ram usage:        5 bytes
 15690 ;; Hardware stack levels used:    1
 15691 ;; Hardware stack levels required when called:    8
 15692 ;; This function calls:
 15693 ;;		_setPercentValue
 15694 ;; This function is called by:
 15695 ;;		_DlyOff_Main
 15696 ;;		_setDimmerLights_Adj
 15697 ;;		_setRFSW_Control
 15698 ;;		_Sw_DimmerOnFunc
 15699 ;;		_Sw_DimmerOffFunc
 15700 ;; This function uses a non-reentrant model
 15701 ;;
 15702                           
 15703                           
 15704                           ;psect for function _setRF_DimmerLights
 15705  0827                     _setRF_DimmerLights:	
 15706                           
 15707                           ;incstack = 0
 15708                           ; Regs used in _setRF_DimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15709                           ;setRF_DimmerLights@lights stored from wreg
 15710  0827  0020               	movlb	0	; select bank0
 15711  0828  00E1               	movwf	setRF_DimmerLights@lights
 15712                           
 15713                           ;RF_Control_B1.c: 405: char status;
 15714                           ;RF_Control_B1.c: 406: status = 1;
 15715  0829  01E0               	clrf	setRF_DimmerLights@status
 15716  082A  0AE0               	incf	setRF_DimmerLights@status,f
 15717                           
 15718                           ;RF_Control_B1.c: 407: status <<= (lights - 1);
 15719  082B  0861               	movf	setRF_DimmerLights@lights,w
 15720  082C  3EFF               	addlw	-1
 15721  082D  0A89               	incf	9,f
 15722  082E  2831               	goto	u4930
 15723  082F                     u4935:	
 15724  082F  1003               	clrc
 15725  0830  0DE0               	rlf	setRF_DimmerLights@status,f
 15726  0831                     u4930:	
 15727  0831  3EFF               	addlw	-1
 15728  0832  1D03               	skipz
 15729  0833  282F               	goto	u4935
 15730                           
 15731                           ;RF_Control_B1.c: 408: product->Data[11]=lights;
 15732  0834  0861               	movf	setRF_DimmerLights@lights,w
 15733  0835  00DE               	movwf	??_setRF_DimmerLights
 15734  0836  086E               	movf	_product,w
 15735  0837  3E0B               	addlw	11
 15736  0838  0086               	movwf	6
 15737  0839  3002               	movlw	2	; select bank4/5
 15738  083A  0087               	movwf	7
 15739  083B  085E               	movf	??_setRF_DimmerLights,w
 15740  083C  0081               	movwf	1
 15741                           
 15742                           ;RF_Control_B1.c: 411: product->Data[(20 + lights)]=setPercentValue(((char)((100-60)*0.8
      +                          )));
 15743  083D  3020               	movlw	32
 15744  083E  3192  22E1  3188   	fcall	_setPercentValue
 15745  0841  0020               	movlb	0	; select bank0
 15746  0842  00DE               	movwf	??_setRF_DimmerLights
 15747  0843  0861               	movf	setRF_DimmerLights@lights,w
 15748  0844  3E14               	addlw	20
 15749  0845  076E               	addwf	_product,w
 15750  0846  00DF               	movwf	??_setRF_DimmerLights+1
 15751  0847  085F               	movf	??_setRF_DimmerLights+1,w
 15752  0848  0086               	movwf	6
 15753  0849  3002               	movlw	2	; select bank4/5
 15754  084A  0087               	movwf	7
 15755  084B  085E               	movf	??_setRF_DimmerLights,w
 15756  084C  0081               	movwf	1
 15757                           
 15758                           ;RF_Control_B1.c: 414: product->Data[9]=product->Data[20 + lights];
 15759  084D  0861               	movf	setRF_DimmerLights@lights,w
 15760  084E  3E14               	addlw	20
 15761  084F  076E               	addwf	_product,w
 15762  0850  00DE               	movwf	??_setRF_DimmerLights
 15763  0851  085E               	movf	??_setRF_DimmerLights,w
 15764  0852  0086               	movwf	6
 15765  0853  3002               	movlw	2	; select bank4/5
 15766  0854  0087               	movwf	7
 15767  0855  0801               	movf	1,w
 15768  0856  00DF               	movwf	??_setRF_DimmerLights+1
 15769  0857  086E               	movf	_product,w
 15770  0858  3E09               	addlw	9
 15771  0859  0086               	movwf	6
 15772  085A  3002               	movlw	2	; select bank4/5
 15773  085B  0087               	movwf	7
 15774  085C  085F               	movf	??_setRF_DimmerLights+1,w
 15775  085D  0081               	movwf	1
 15776                           
 15777                           ;RF_Control_B1.c: 415: product->Data[17]=product->Data[26 + lights];
 15778  085E  0861               	movf	setRF_DimmerLights@lights,w
 15779  085F  3E1A               	addlw	26
 15780  0860  076E               	addwf	_product,w
 15781  0861  00DE               	movwf	??_setRF_DimmerLights
 15782  0862  085E               	movf	??_setRF_DimmerLights,w
 15783  0863  0086               	movwf	6
 15784  0864  3002               	movlw	2	; select bank4/5
 15785  0865  0087               	movwf	7
 15786  0866  0801               	movf	1,w
 15787  0867  00DF               	movwf	??_setRF_DimmerLights+1
 15788  0868  086E               	movf	_product,w
 15789  0869  3E11               	addlw	17
 15790  086A  0086               	movwf	6
 15791  086B  3002               	movlw	2	; select bank4/5
 15792  086C  0087               	movwf	7
 15793  086D  085F               	movf	??_setRF_DimmerLights+1,w
 15794  086E  0081               	movwf	1
 15795                           
 15796                           ;RF_Control_B1.c: 416: if (on == 1) {
 15797  086F  085D               	movf	setRF_DimmerLights@on,w
 15798  0870  3A01               	xorlw	1
 15799  0871  1D03               	skipz
 15800  0872  2883               	goto	l6173
 15801                           
 15802                           ;RF_Control_B1.c: 417: product->Data[15]=(product->Data[15] | status);
 15803  0873  086E               	movf	_product,w
 15804  0874  3E0F               	addlw	15
 15805  0875  0086               	movwf	6
 15806  0876  3002               	movlw	2	; select bank4/5
 15807  0877  0087               	movwf	7
 15808  0878  0801               	movf	1,w
 15809  0879  0460               	iorwf	setRF_DimmerLights@status,w
 15810  087A  00DE               	movwf	??_setRF_DimmerLights
 15811  087B  086E               	movf	_product,w
 15812  087C  3E0F               	addlw	15
 15813  087D  0086               	movwf	6
 15814  087E  3002               	movlw	2	; select bank4/5
 15815  087F  0087               	movwf	7
 15816  0880  085E               	movf	??_setRF_DimmerLights,w
 15817  0881  0081               	movwf	1
 15818                           
 15819                           ;RF_Control_B1.c: 418: } else {
 15820  0882  0008               	return
 15821  0883                     l6173:	
 15822                           
 15823                           ;RF_Control_B1.c: 419: product->Data[15]=(product->Data[15]&(~status));
 15824  0883  086E               	movf	_product,w
 15825  0884  3E0F               	addlw	15
 15826  0885  0086               	movwf	6
 15827  0886  3002               	movlw	2	; select bank4/5
 15828  0887  0087               	movwf	7
 15829  0888  0960               	comf	setRF_DimmerLights@status,w
 15830  0889  0501               	andwf	1,w
 15831  088A  00DE               	movwf	??_setRF_DimmerLights
 15832  088B  086E               	movf	_product,w
 15833  088C  3E0F               	addlw	15
 15834  088D  0086               	movwf	6
 15835  088E  3002               	movlw	2	; select bank4/5
 15836  088F  0087               	movwf	7
 15837  0890  085E               	movf	??_setRF_DimmerLights,w
 15838  0891  0081               	movwf	1
 15839  0892  0008               	return
 15840  0893                     __end_of_setRF_DimmerLights:	
 15841                           
 15842                           	psect	text102
 15843  12E1                     __ptext102:	
 15844 ;; *************** function _setPercentValue *****************
 15845 ;; Defined at:
 15846 ;;		line 768 in file "../src/Dimmer_B1.c"
 15847 ;; Parameters:    Size  Location     Type
 15848 ;;  value           1    wreg     unsigned char 
 15849 ;; Auto vars:     Size  Location     Type
 15850 ;;  value           1   57[BANK0 ] unsigned char 
 15851 ;;  i               3   58[BANK0 ] float 
 15852 ;; Return value:  Size  Location     Type
 15853 ;;                  1    wreg      unsigned char 
 15854 ;; Registers used:
 15855 ;;		wreg, status,2, status,0, pclath, cstack
 15856 ;; Tracked objects:
 15857 ;;		On entry : 0/0
 15858 ;;		On exit  : 0/0
 15859 ;;		Unchanged: 0/0
 15860 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15861 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15862 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15863 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15864 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15865 ;;Total ram usage:        4 bytes
 15866 ;; Hardware stack levels used:    1
 15867 ;; Hardware stack levels required when called:    7
 15868 ;; This function calls:
 15869 ;;		___awtoft
 15870 ;;		___ftdiv
 15871 ;;		___fttol
 15872 ;; This function is called by:
 15873 ;;		_Flash_Memory_Initialization
 15874 ;;		_setRF_DimmerLights
 15875 ;; This function uses a non-reentrant model
 15876 ;;
 15877                           
 15878                           
 15879                           ;psect for function _setPercentValue
 15880  12E1                     _setPercentValue:	
 15881                           
 15882                           ;incstack = 0
 15883                           ; Regs used in _setPercentValue: [wreg+status,2+status,0+pclath+cstack]
 15884                           ;setPercentValue@value stored from wreg
 15885  12E1  0020               	movlb	0	; select bank0
 15886  12E2  00D9               	movwf	setPercentValue@value
 15887                           
 15888                           ;Dimmer_B1.c: 770: float i = ((char)((100-25)*0.8)) - ((char)((100-60)*0.8));
 15889  12E3  3000               	movlw	0
 15890  12E4  00DA               	movwf	setPercentValue@i
 15891  12E5  30E0               	movlw	224
 15892  12E6  00DB               	movwf	setPercentValue@i+1
 15893  12E7  3041               	movlw	65
 15894  12E8  00DC               	movwf	setPercentValue@i+2
 15895                           
 15896                           ;Dimmer_B1.c: 771: i /= 100;
 15897  12E9  3000               	movlw	0
 15898  12EA  00AE               	movwf	___ftdiv@f2
 15899  12EB  30C8               	movlw	200
 15900  12EC  00AF               	movwf	___ftdiv@f2+1
 15901  12ED  3042               	movlw	66
 15902  12EE  00B0               	movwf	___ftdiv@f2+2
 15903  12EF  085A               	movf	setPercentValue@i,w
 15904  12F0  00B1               	movwf	___ftdiv@f1
 15905  12F1  085B               	movf	setPercentValue@i+1,w
 15906  12F2  00B2               	movwf	___ftdiv@f1+1
 15907  12F3  085C               	movf	setPercentValue@i+2,w
 15908  12F4  00B3               	movwf	___ftdiv@f1+2
 15909  12F5  318D  25EC  3192   	fcall	___ftdiv
 15910  12F8  0020               	movlb	0	; select bank0
 15911  12F9  082E               	movf	?___ftdiv,w
 15912  12FA  00DA               	movwf	setPercentValue@i
 15913  12FB  082F               	movf	?___ftdiv+1,w
 15914  12FC  00DB               	movwf	setPercentValue@i+1
 15915  12FD  0830               	movf	?___ftdiv+2,w
 15916  12FE  00DC               	movwf	setPercentValue@i+2
 15917                           
 15918                           ;Dimmer_B1.c: 772: return (100 - (char) ((value - ((char)((100-60)*0.8))) / i));
 15919  12FF  0859               	movf	setPercentValue@value,w
 15920  1300  3EE0               	addlw	224
 15921  1301  00A8               	movwf	___awtoft@c
 15922  1302  30FF               	movlw	255
 15923  1303  1803               	skipnc
 15924  1304  3000               	movlw	0
 15925  1305  00A9               	movwf	___awtoft@c+1
 15926  1306  319E  2636  3192   	fcall	___awtoft
 15927  1309  0020               	movlb	0	; select bank0
 15928  130A  0828               	movf	?___awtoft,w
 15929  130B  00B1               	movwf	___ftdiv@f1
 15930  130C  0829               	movf	?___awtoft+1,w
 15931  130D  00B2               	movwf	___ftdiv@f1+1
 15932  130E  082A               	movf	?___awtoft+2,w
 15933  130F  00B3               	movwf	___ftdiv@f1+2
 15934  1310  085A               	movf	setPercentValue@i,w
 15935  1311  00AE               	movwf	___ftdiv@f2
 15936  1312  085B               	movf	setPercentValue@i+1,w
 15937  1313  00AF               	movwf	___ftdiv@f2+1
 15938  1314  085C               	movf	setPercentValue@i+2,w
 15939  1315  00B0               	movwf	___ftdiv@f2+2
 15940  1316  318D  25EC  3192   	fcall	___ftdiv
 15941  1319  0020               	movlb	0	; select bank0
 15942  131A  082E               	movf	?___ftdiv,w
 15943  131B  00CB               	movwf	___fttol@f1
 15944  131C  082F               	movf	?___ftdiv+1,w
 15945  131D  00CC               	movwf	___fttol@f1+1
 15946  131E  0830               	movf	?___ftdiv+2,w
 15947  131F  00CD               	movwf	___fttol@f1+2
 15948  1320  318C  244C         	fcall	___fttol
 15949  1322  0020               	movlb	0	; select bank0
 15950  1323  034B               	decf	?___fttol,w
 15951  1324  3AFF               	xorlw	255
 15952  1325  3E64               	addlw	100
 15953  1326  0008               	return
 15954  1327                     __end_of_setPercentValue:	
 15955                           
 15956                           	psect	text103
 15957  0C4C                     __ptext103:	
 15958 ;; *************** function ___fttol *****************
 15959 ;; Defined at:
 15960 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\fttol.c"
 15961 ;; Parameters:    Size  Location     Type
 15962 ;;  f1              3   43[BANK0 ] float 
 15963 ;; Auto vars:     Size  Location     Type
 15964 ;;  lval            4   52[BANK0 ] unsigned long 
 15965 ;;  exp1            1   56[BANK0 ] unsigned char 
 15966 ;;  sign1           1   51[BANK0 ] unsigned char 
 15967 ;; Return value:  Size  Location     Type
 15968 ;;                  4   43[BANK0 ] long 
 15969 ;; Registers used:
 15970 ;;		wreg, status,2, status,0
 15971 ;; Tracked objects:
 15972 ;;		On entry : 0/0
 15973 ;;		On exit  : 0/0
 15974 ;;		Unchanged: 0/0
 15975 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15976 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15977 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15978 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15979 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15980 ;;Total ram usage:       14 bytes
 15981 ;; Hardware stack levels used:    1
 15982 ;; Hardware stack levels required when called:    5
 15983 ;; This function calls:
 15984 ;;		Nothing
 15985 ;; This function is called by:
 15986 ;;		_getPercentValue
 15987 ;;		_setPercentValue
 15988 ;; This function uses a non-reentrant model
 15989 ;;
 15990                           
 15991                           
 15992                           ;psect for function ___fttol
 15993  0C4C                     ___fttol:	
 15994                           
 15995                           ;incstack = 0
 15996                           ; Regs used in ___fttol: [wreg+status,2+status,0]
 15997  0C4C  0020               	movlb	0	; select bank0
 15998  0C4D  084B               	movf	___fttol@f1,w
 15999  0C4E  00CF               	movwf	??___fttol
 16000  0C4F  084C               	movf	___fttol@f1+1,w
 16001  0C50  00D0               	movwf	??___fttol+1
 16002  0C51  084D               	movf	___fttol@f1+2,w
 16003  0C52  00D1               	movwf	??___fttol+2
 16004  0C53  1003               	clrc
 16005  0C54  0D50               	rlf	??___fttol+1,w
 16006  0C55  0D51               	rlf	??___fttol+2,w
 16007  0C56  00D2               	movwf	??___fttol+3
 16008  0C57  0852               	movf	??___fttol+3,w
 16009  0C58  00D8               	movwf	___fttol@exp1
 16010  0C59  08D8               	movf	___fttol@exp1,f
 16011  0C5A  1D03               	skipz
 16012  0C5B  2C65               	goto	l5943
 16013  0C5C  3000               	movlw	0
 16014  0C5D  00CE               	movwf	?___fttol+3
 16015  0C5E  3000               	movlw	0
 16016  0C5F  00CD               	movwf	?___fttol+2
 16017  0C60  3000               	movlw	0
 16018  0C61  00CC               	movwf	?___fttol+1
 16019  0C62  3000               	movlw	0
 16020  0C63  00CB               	movwf	?___fttol
 16021  0C64  0008               	return
 16022  0C65                     l5943:	
 16023  0C65  084B               	movf	___fttol@f1,w
 16024  0C66  00CF               	movwf	??___fttol
 16025  0C67  084C               	movf	___fttol@f1+1,w
 16026  0C68  00D0               	movwf	??___fttol+1
 16027  0C69  084D               	movf	___fttol@f1+2,w
 16028  0C6A  00D1               	movwf	??___fttol+2
 16029  0C6B  3017               	movlw	23
 16030  0C6C                     u4555:	
 16031  0C6C  36D1               	lsrf	??___fttol+2,f
 16032  0C6D  0CD0               	rrf	??___fttol+1,f
 16033  0C6E  0CCF               	rrf	??___fttol,f
 16034  0C6F  0B89               	decfsz	9,f
 16035  0C70  2C6C               	goto	u4555
 16036  0C71  084F               	movf	??___fttol,w
 16037  0C72  00D2               	movwf	??___fttol+3
 16038  0C73  0852               	movf	??___fttol+3,w
 16039  0C74  00D3               	movwf	___fttol@sign1
 16040  0C75  17CC               	bsf	___fttol@f1+1,7
 16041  0C76  30FF               	movlw	255
 16042  0C77  05CB               	andwf	___fttol@f1,f
 16043  0C78  30FF               	movlw	255
 16044  0C79  05CC               	andwf	___fttol@f1+1,f
 16045  0C7A  3000               	movlw	0
 16046  0C7B  05CD               	andwf	___fttol@f1+2,f
 16047  0C7C  084B               	movf	___fttol@f1,w
 16048  0C7D  00D4               	movwf	___fttol@lval
 16049  0C7E  084C               	movf	___fttol@f1+1,w
 16050  0C7F  00D5               	movwf	___fttol@lval+1
 16051  0C80  084D               	movf	___fttol@f1+2,w
 16052  0C81  00D6               	movwf	___fttol@lval+2
 16053  0C82  01D7               	clrf	___fttol@lval+3
 16054  0C83  308E               	movlw	142
 16055  0C84  02D8               	subwf	___fttol@exp1,f
 16056  0C85  1FD8               	btfss	___fttol@exp1,7
 16057  0C86  2CA3               	goto	l5963
 16058  0C87  0858               	movf	___fttol@exp1,w
 16059  0C88  3A80               	xorlw	128
 16060  0C89  3E8F               	addlw	143
 16061  0C8A  1803               	skipnc
 16062  0C8B  2C95               	goto	l5961
 16063  0C8C  3000               	movlw	0
 16064  0C8D  00CE               	movwf	?___fttol+3
 16065  0C8E  3000               	movlw	0
 16066  0C8F  00CD               	movwf	?___fttol+2
 16067  0C90  3000               	movlw	0
 16068  0C91  00CC               	movwf	?___fttol+1
 16069  0C92  3000               	movlw	0
 16070  0C93  00CB               	movwf	?___fttol
 16071  0C94  0008               	return
 16072  0C95                     l5961:	
 16073  0C95  3001               	movlw	1
 16074  0C96                     u4585:	
 16075  0C96  36D7               	lsrf	___fttol@lval+3,f
 16076  0C97  0CD6               	rrf	___fttol@lval+2,f
 16077  0C98  0CD5               	rrf	___fttol@lval+1,f
 16078  0C99  0CD4               	rrf	___fttol@lval,f
 16079  0C9A  0B89               	decfsz	9,f
 16080  0C9B  2C96               	goto	u4585
 16081  0C9C  3001               	movlw	1
 16082  0C9D  00CF               	movwf	??___fttol
 16083  0C9E  084F               	movf	??___fttol,w
 16084  0C9F  07D8               	addwf	___fttol@exp1,f
 16085  0CA0  1903               	btfsc	3,2
 16086  0CA1  2CBC               	goto	l5973
 16087  0CA2  2C95               	goto	l5961
 16088  0CA3                     l5963:	
 16089  0CA3  3018               	movlw	24
 16090  0CA4  0258               	subwf	___fttol@exp1,w
 16091  0CA5  1C03               	skipc
 16092  0CA6  2CB9               	goto	l5971
 16093  0CA7  3000               	movlw	0
 16094  0CA8  00CE               	movwf	?___fttol+3
 16095  0CA9  3000               	movlw	0
 16096  0CAA  00CD               	movwf	?___fttol+2
 16097  0CAB  3000               	movlw	0
 16098  0CAC  00CC               	movwf	?___fttol+1
 16099  0CAD  3000               	movlw	0
 16100  0CAE  00CB               	movwf	?___fttol
 16101  0CAF  0008               	return
 16102  0CB0                     l5969:	
 16103  0CB0  3001               	movlw	1
 16104  0CB1                     u4615:	
 16105  0CB1  35D4               	lslf	___fttol@lval,f
 16106  0CB2  0DD5               	rlf	___fttol@lval+1,f
 16107  0CB3  0DD6               	rlf	___fttol@lval+2,f
 16108  0CB4  0DD7               	rlf	___fttol@lval+3,f
 16109  0CB5  0B89               	decfsz	9,f
 16110  0CB6  2CB1               	goto	u4615
 16111  0CB7  3001               	movlw	1
 16112  0CB8  02D8               	subwf	___fttol@exp1,f
 16113  0CB9                     l5971:	
 16114  0CB9  08D8               	movf	___fttol@exp1,f
 16115  0CBA  1D03               	skipz
 16116  0CBB  2CB0               	goto	l5969
 16117  0CBC                     l5973:	
 16118  0CBC  0853               	movf	___fttol@sign1,w
 16119  0CBD  1903               	btfsc	3,2
 16120  0CBE  2CCA               	goto	l5977
 16121  0CBF  09D4               	comf	___fttol@lval,f
 16122  0CC0  09D5               	comf	___fttol@lval+1,f
 16123  0CC1  09D6               	comf	___fttol@lval+2,f
 16124  0CC2  09D7               	comf	___fttol@lval+3,f
 16125  0CC3  0AD4               	incf	___fttol@lval,f
 16126  0CC4  1903               	skipnz
 16127  0CC5  0AD5               	incf	___fttol@lval+1,f
 16128  0CC6  1903               	skipnz
 16129  0CC7  0AD6               	incf	___fttol@lval+2,f
 16130  0CC8  1903               	skipnz
 16131  0CC9  0AD7               	incf	___fttol@lval+3,f
 16132  0CCA                     l5977:	
 16133  0CCA  0857               	movf	___fttol@lval+3,w
 16134  0CCB  00CE               	movwf	?___fttol+3
 16135  0CCC  0856               	movf	___fttol@lval+2,w
 16136  0CCD  00CD               	movwf	?___fttol+2
 16137  0CCE  0855               	movf	___fttol@lval+1,w
 16138  0CCF  00CC               	movwf	?___fttol+1
 16139  0CD0  0854               	movf	___fttol@lval,w
 16140  0CD1  00CB               	movwf	?___fttol
 16141  0CD2  0008               	return
 16142  0CD3                     __end_of___fttol:	
 16143                           
 16144                           	psect	text104
 16145  0DEC                     __ptext104:	
 16146 ;; *************** function ___ftdiv *****************
 16147 ;; Defined at:
 16148 ;;		line 49 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\pic\ftdiv.c"
 16149 ;; Parameters:    Size  Location     Type
 16150 ;;  f2              3   14[BANK0 ] float 
 16151 ;;  f1              3   17[BANK0 ] float 
 16152 ;; Auto vars:     Size  Location     Type
 16153 ;;  f3              3   25[BANK0 ] float 
 16154 ;;  sign            1   29[BANK0 ] unsigned char 
 16155 ;;  exp             1   28[BANK0 ] unsigned char 
 16156 ;;  cntr            1   24[BANK0 ] unsigned char 
 16157 ;; Return value:  Size  Location     Type
 16158 ;;                  3   14[BANK0 ] float 
 16159 ;; Registers used:
 16160 ;;		wreg, status,2, status,0, pclath, cstack
 16161 ;; Tracked objects:
 16162 ;;		On entry : 0/0
 16163 ;;		On exit  : 0/0
 16164 ;;		Unchanged: 0/0
 16165 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16166 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16167 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16168 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16169 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16170 ;;Total ram usage:       16 bytes
 16171 ;; Hardware stack levels used:    1
 16172 ;; Hardware stack levels required when called:    6
 16173 ;; This function calls:
 16174 ;;		___ftpack
 16175 ;; This function is called by:
 16176 ;;		_getPercentValue
 16177 ;;		_setPercentValue
 16178 ;; This function uses a non-reentrant model
 16179 ;;
 16180                           
 16181                           
 16182                           ;psect for function ___ftdiv
 16183  0DEC                     ___ftdiv:	
 16184                           
 16185                           ;incstack = 0
 16186                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
 16187  0DEC  0020               	movlb	0	; select bank0
 16188  0DED  0831               	movf	___ftdiv@f1,w
 16189  0DEE  00B4               	movwf	??___ftdiv
 16190  0DEF  0832               	movf	___ftdiv@f1+1,w
 16191  0DF0  00B5               	movwf	??___ftdiv+1
 16192  0DF1  0833               	movf	___ftdiv@f1+2,w
 16193  0DF2  00B6               	movwf	??___ftdiv+2
 16194  0DF3  1003               	clrc
 16195  0DF4  0D35               	rlf	??___ftdiv+1,w
 16196  0DF5  0D36               	rlf	??___ftdiv+2,w
 16197  0DF6  00B7               	movwf	??___ftdiv+3
 16198  0DF7  0837               	movf	??___ftdiv+3,w
 16199  0DF8  00BC               	movwf	___ftdiv@exp
 16200  0DF9  08BC               	movf	___ftdiv@exp,f
 16201  0DFA  1D03               	skipz
 16202  0DFB  2E03               	goto	l5851
 16203  0DFC  3000               	movlw	0
 16204  0DFD  00AE               	movwf	?___ftdiv
 16205  0DFE  3000               	movlw	0
 16206  0DFF  00AF               	movwf	?___ftdiv+1
 16207  0E00  3000               	movlw	0
 16208  0E01  00B0               	movwf	?___ftdiv+2
 16209  0E02  0008               	return
 16210  0E03                     l5851:	
 16211  0E03  082E               	movf	___ftdiv@f2,w
 16212  0E04  00B4               	movwf	??___ftdiv
 16213  0E05  082F               	movf	___ftdiv@f2+1,w
 16214  0E06  00B5               	movwf	??___ftdiv+1
 16215  0E07  0830               	movf	___ftdiv@f2+2,w
 16216  0E08  00B6               	movwf	??___ftdiv+2
 16217  0E09  1003               	clrc
 16218  0E0A  0D35               	rlf	??___ftdiv+1,w
 16219  0E0B  0D36               	rlf	??___ftdiv+2,w
 16220  0E0C  00B7               	movwf	??___ftdiv+3
 16221  0E0D  0837               	movf	??___ftdiv+3,w
 16222  0E0E  00BD               	movwf	___ftdiv@sign
 16223  0E0F  08BD               	movf	___ftdiv@sign,f
 16224  0E10  1D03               	skipz
 16225  0E11  2E19               	goto	l5857
 16226  0E12  3000               	movlw	0
 16227  0E13  00AE               	movwf	?___ftdiv
 16228  0E14  3000               	movlw	0
 16229  0E15  00AF               	movwf	?___ftdiv+1
 16230  0E16  3000               	movlw	0
 16231  0E17  00B0               	movwf	?___ftdiv+2
 16232  0E18  0008               	return
 16233  0E19                     l5857:	
 16234  0E19  3000               	movlw	0
 16235  0E1A  00B9               	movwf	___ftdiv@f3
 16236  0E1B  3000               	movlw	0
 16237  0E1C  00BA               	movwf	___ftdiv@f3+1
 16238  0E1D  3000               	movlw	0
 16239  0E1E  00BB               	movwf	___ftdiv@f3+2
 16240  0E1F  3089               	movlw	137
 16241  0E20  073D               	addwf	___ftdiv@sign,w
 16242  0E21  00B4               	movwf	??___ftdiv
 16243  0E22  0834               	movf	??___ftdiv,w
 16244  0E23  02BC               	subwf	___ftdiv@exp,f
 16245  0E24  0831               	movf	___ftdiv@f1,w
 16246  0E25  00B4               	movwf	??___ftdiv
 16247  0E26  0832               	movf	___ftdiv@f1+1,w
 16248  0E27  00B5               	movwf	??___ftdiv+1
 16249  0E28  0833               	movf	___ftdiv@f1+2,w
 16250  0E29  00B6               	movwf	??___ftdiv+2
 16251  0E2A  3010               	movlw	16
 16252  0E2B                     u4365:	
 16253  0E2B  36B6               	lsrf	??___ftdiv+2,f
 16254  0E2C  0CB5               	rrf	??___ftdiv+1,f
 16255  0E2D  0CB4               	rrf	??___ftdiv,f
 16256  0E2E  0B89               	decfsz	9,f
 16257  0E2F  2E2B               	goto	u4365
 16258  0E30  0834               	movf	??___ftdiv,w
 16259  0E31  00B7               	movwf	??___ftdiv+3
 16260  0E32  0837               	movf	??___ftdiv+3,w
 16261  0E33  00BD               	movwf	___ftdiv@sign
 16262  0E34  082E               	movf	___ftdiv@f2,w
 16263  0E35  00B4               	movwf	??___ftdiv
 16264  0E36  082F               	movf	___ftdiv@f2+1,w
 16265  0E37  00B5               	movwf	??___ftdiv+1
 16266  0E38  0830               	movf	___ftdiv@f2+2,w
 16267  0E39  00B6               	movwf	??___ftdiv+2
 16268  0E3A  3010               	movlw	16
 16269  0E3B                     u4375:	
 16270  0E3B  36B6               	lsrf	??___ftdiv+2,f
 16271  0E3C  0CB5               	rrf	??___ftdiv+1,f
 16272  0E3D  0CB4               	rrf	??___ftdiv,f
 16273  0E3E  0B89               	decfsz	9,f
 16274  0E3F  2E3B               	goto	u4375
 16275  0E40  0834               	movf	??___ftdiv,w
 16276  0E41  00B7               	movwf	??___ftdiv+3
 16277  0E42  0837               	movf	??___ftdiv+3,w
 16278  0E43  06BD               	xorwf	___ftdiv@sign,f
 16279  0E44  3080               	movlw	128
 16280  0E45  00B4               	movwf	??___ftdiv
 16281  0E46  0834               	movf	??___ftdiv,w
 16282  0E47  05BD               	andwf	___ftdiv@sign,f
 16283  0E48  17B2               	bsf	___ftdiv@f1+1,7
 16284  0E49  30FF               	movlw	255
 16285  0E4A  05B1               	andwf	___ftdiv@f1,f
 16286  0E4B  30FF               	movlw	255
 16287  0E4C  05B2               	andwf	___ftdiv@f1+1,f
 16288  0E4D  3000               	movlw	0
 16289  0E4E  05B3               	andwf	___ftdiv@f1+2,f
 16290  0E4F  17AF               	bsf	___ftdiv@f2+1,7
 16291  0E50  30FF               	movlw	255
 16292  0E51  05AE               	andwf	___ftdiv@f2,f
 16293  0E52  30FF               	movlw	255
 16294  0E53  05AF               	andwf	___ftdiv@f2+1,f
 16295  0E54  3000               	movlw	0
 16296  0E55  05B0               	andwf	___ftdiv@f2+2,f
 16297  0E56  3018               	movlw	24
 16298  0E57  00B4               	movwf	??___ftdiv
 16299  0E58  0834               	movf	??___ftdiv,w
 16300  0E59  00B8               	movwf	___ftdiv@cntr
 16301  0E5A                     l5871:	
 16302  0E5A  3001               	movlw	1
 16303  0E5B                     u4385:	
 16304  0E5B  35B9               	lslf	___ftdiv@f3,f
 16305  0E5C  0DBA               	rlf	___ftdiv@f3+1,f
 16306  0E5D  0DBB               	rlf	___ftdiv@f3+2,f
 16307  0E5E  0B89               	decfsz	9,f
 16308  0E5F  2E5B               	goto	u4385
 16309  0E60  0830               	movf	___ftdiv@f2+2,w
 16310  0E61  0233               	subwf	___ftdiv@f1+2,w
 16311  0E62  1D03               	skipz
 16312  0E63  2E6A               	goto	u4395
 16313  0E64  082F               	movf	___ftdiv@f2+1,w
 16314  0E65  0232               	subwf	___ftdiv@f1+1,w
 16315  0E66  1D03               	skipz
 16316  0E67  2E6A               	goto	u4395
 16317  0E68  082E               	movf	___ftdiv@f2,w
 16318  0E69  0231               	subwf	___ftdiv@f1,w
 16319  0E6A                     u4395:	
 16320  0E6A  1C03               	skipc
 16321  0E6B  2E73               	goto	l5879
 16322  0E6C  082E               	movf	___ftdiv@f2,w
 16323  0E6D  02B1               	subwf	___ftdiv@f1,f
 16324  0E6E  082F               	movf	___ftdiv@f2+1,w
 16325  0E6F  3BB2               	subwfb	___ftdiv@f1+1,f
 16326  0E70  0830               	movf	___ftdiv@f2+2,w
 16327  0E71  3BB3               	subwfb	___ftdiv@f1+2,f
 16328  0E72  1439               	bsf	___ftdiv@f3,0
 16329  0E73                     l5879:	
 16330  0E73  3001               	movlw	1
 16331  0E74                     u4405:	
 16332  0E74  35B1               	lslf	___ftdiv@f1,f
 16333  0E75  0DB2               	rlf	___ftdiv@f1+1,f
 16334  0E76  0DB3               	rlf	___ftdiv@f1+2,f
 16335  0E77  0B89               	decfsz	9,f
 16336  0E78  2E74               	goto	u4405
 16337  0E79  3001               	movlw	1
 16338  0E7A  02B8               	subwf	___ftdiv@cntr,f
 16339  0E7B  1D03               	btfss	3,2
 16340  0E7C  2E5A               	goto	l5871
 16341  0E7D  0839               	movf	___ftdiv@f3,w
 16342  0E7E  00A0               	movwf	___ftpack@arg
 16343  0E7F  083A               	movf	___ftdiv@f3+1,w
 16344  0E80  00A1               	movwf	___ftpack@arg+1
 16345  0E81  083B               	movf	___ftdiv@f3+2,w
 16346  0E82  00A2               	movwf	___ftpack@arg+2
 16347  0E83  083C               	movf	___ftdiv@exp,w
 16348  0E84  00B4               	movwf	??___ftdiv
 16349  0E85  0834               	movf	??___ftdiv,w
 16350  0E86  00A3               	movwf	___ftpack@exp
 16351  0E87  083D               	movf	___ftdiv@sign,w
 16352  0E88  00B5               	movwf	??___ftdiv+1
 16353  0E89  0835               	movf	??___ftdiv+1,w
 16354  0E8A  00A4               	movwf	___ftpack@sign
 16355  0E8B  3195  25AA         	fcall	___ftpack
 16356  0E8D  0020               	movlb	0	; select bank0
 16357  0E8E  0820               	movf	?___ftpack,w
 16358  0E8F  00AE               	movwf	?___ftdiv
 16359  0E90  0821               	movf	?___ftpack+1,w
 16360  0E91  00AF               	movwf	?___ftdiv+1
 16361  0E92  0822               	movf	?___ftpack+2,w
 16362  0E93  00B0               	movwf	?___ftdiv+2
 16363  0E94  0008               	return
 16364  0E95                     __end_of___ftdiv:	
 16365                           
 16366                           	psect	text105
 16367  1E36                     __ptext105:	
 16368 ;; *************** function ___awtoft *****************
 16369 ;; Defined at:
 16370 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awtoft.c"
 16371 ;; Parameters:    Size  Location     Type
 16372 ;;  c               2    8[BANK0 ] int 
 16373 ;; Auto vars:     Size  Location     Type
 16374 ;;  sign            1   13[BANK0 ] unsigned char 
 16375 ;; Return value:  Size  Location     Type
 16376 ;;                  3    8[BANK0 ] float 
 16377 ;; Registers used:
 16378 ;;		wreg, status,2, status,0, pclath, cstack
 16379 ;; Tracked objects:
 16380 ;;		On entry : 0/0
 16381 ;;		On exit  : 0/0
 16382 ;;		Unchanged: 0/0
 16383 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16384 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16385 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16386 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16387 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16388 ;;Total ram usage:        6 bytes
 16389 ;; Hardware stack levels used:    1
 16390 ;; Hardware stack levels required when called:    6
 16391 ;; This function calls:
 16392 ;;		___ftpack
 16393 ;; This function is called by:
 16394 ;;		_getPercentValue
 16395 ;;		_setPercentValue
 16396 ;; This function uses a non-reentrant model
 16397 ;;
 16398                           
 16399                           
 16400                           ;psect for function ___awtoft
 16401  1E36                     ___awtoft:	
 16402                           
 16403                           ;incstack = 0
 16404                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
 16405  1E36  0020               	movlb	0	; select bank0
 16406  1E37  01AD               	clrf	___awtoft@sign
 16407  1E38  1FA9               	btfss	___awtoft@c+1,7
 16408  1E39  2E41               	goto	l5769
 16409  1E3A  09A8               	comf	___awtoft@c,f
 16410  1E3B  09A9               	comf	___awtoft@c+1,f
 16411  1E3C  0AA8               	incf	___awtoft@c,f
 16412  1E3D  1903               	skipnz
 16413  1E3E  0AA9               	incf	___awtoft@c+1,f
 16414  1E3F  01AD               	clrf	___awtoft@sign
 16415  1E40  0AAD               	incf	___awtoft@sign,f
 16416  1E41                     l5769:	
 16417  1E41  0828               	movf	___awtoft@c,w
 16418  1E42  00A0               	movwf	___ftpack@arg
 16419  1E43  0829               	movf	___awtoft@c+1,w
 16420  1E44  00A1               	movwf	___ftpack@arg+1
 16421  1E45  01A2               	clrf	___ftpack@arg+2
 16422  1E46  308E               	movlw	142
 16423  1E47  00AB               	movwf	??___awtoft
 16424  1E48  082B               	movf	??___awtoft,w
 16425  1E49  00A3               	movwf	___ftpack@exp
 16426  1E4A  082D               	movf	___awtoft@sign,w
 16427  1E4B  00AC               	movwf	??___awtoft+1
 16428  1E4C  082C               	movf	??___awtoft+1,w
 16429  1E4D  00A4               	movwf	___ftpack@sign
 16430  1E4E  3195  25AA         	fcall	___ftpack
 16431  1E50  0020               	movlb	0	; select bank0
 16432  1E51  0820               	movf	?___ftpack,w
 16433  1E52  00A8               	movwf	?___awtoft
 16434  1E53  0821               	movf	?___ftpack+1,w
 16435  1E54  00A9               	movwf	?___awtoft+1
 16436  1E55  0822               	movf	?___ftpack+2,w
 16437  1E56  00AA               	movwf	?___awtoft+2
 16438  1E57  0008               	return
 16439  1E58                     __end_of___awtoft:	
 16440                           
 16441                           	psect	text106
 16442  15AA                     __ptext106:	
 16443 ;; *************** function ___ftpack *****************
 16444 ;; Defined at:
 16445 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\float.c"
 16446 ;; Parameters:    Size  Location     Type
 16447 ;;  arg             3    0[BANK0 ] unsigned um
 16448 ;;  exp             1    3[BANK0 ] unsigned char 
 16449 ;;  sign            1    4[BANK0 ] unsigned char 
 16450 ;; Auto vars:     Size  Location     Type
 16451 ;;		None
 16452 ;; Return value:  Size  Location     Type
 16453 ;;                  3    0[BANK0 ] float 
 16454 ;; Registers used:
 16455 ;;		wreg, status,2, status,0
 16456 ;; Tracked objects:
 16457 ;;		On entry : 0/0
 16458 ;;		On exit  : 0/0
 16459 ;;		Unchanged: 0/0
 16460 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16461 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16462 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16463 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16464 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16465 ;;Total ram usage:        8 bytes
 16466 ;; Hardware stack levels used:    1
 16467 ;; Hardware stack levels required when called:    5
 16468 ;; This function calls:
 16469 ;;		Nothing
 16470 ;; This function is called by:
 16471 ;;		___awtoft
 16472 ;;		___ftadd
 16473 ;;		___ftdiv
 16474 ;;		___ftmul
 16475 ;; This function uses a non-reentrant model
 16476 ;;
 16477                           
 16478                           
 16479                           ;psect for function ___ftpack
 16480  15AA                     ___ftpack:	
 16481                           
 16482                           ;incstack = 0
 16483                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 16484  15AA  0020               	movlb	0	; select bank0
 16485  15AB  0823               	movf	___ftpack@exp,w
 16486  15AC  1903               	btfsc	3,2
 16487  15AD  2DB3               	goto	l5735
 16488  15AE  0822               	movf	___ftpack@arg+2,w
 16489  15AF  0421               	iorwf	___ftpack@arg+1,w
 16490  15B0  0420               	iorwf	___ftpack@arg,w
 16491  15B1  1D03               	skipz
 16492  15B2  2DC4               	goto	l5741
 16493  15B3                     l5735:	
 16494  15B3  3000               	movlw	0
 16495  15B4  00A0               	movwf	?___ftpack
 16496  15B5  3000               	movlw	0
 16497  15B6  00A1               	movwf	?___ftpack+1
 16498  15B7  3000               	movlw	0
 16499  15B8  00A2               	movwf	?___ftpack+2
 16500  15B9  0008               	return
 16501  15BA                     l5739:	
 16502  15BA  3001               	movlw	1
 16503  15BB  00A5               	movwf	??___ftpack
 16504  15BC  0825               	movf	??___ftpack,w
 16505  15BD  07A3               	addwf	___ftpack@exp,f
 16506  15BE  3001               	movlw	1
 16507  15BF                     u4015:	
 16508  15BF  36A2               	lsrf	___ftpack@arg+2,f
 16509  15C0  0CA1               	rrf	___ftpack@arg+1,f
 16510  15C1  0CA0               	rrf	___ftpack@arg,f
 16511  15C2  0B89               	decfsz	9,f
 16512  15C3  2DBF               	goto	u4015
 16513  15C4                     l5741:	
 16514  15C4  30FE               	movlw	254
 16515  15C5  0522               	andwf	___ftpack@arg+2,w
 16516  15C6  1903               	btfsc	3,2
 16517  15C7  2DDD               	goto	l3047
 16518  15C8  2DBA               	goto	l5739
 16519  15C9                     l5743:	
 16520  15C9  3001               	movlw	1
 16521  15CA  00A5               	movwf	??___ftpack
 16522  15CB  0825               	movf	??___ftpack,w
 16523  15CC  07A3               	addwf	___ftpack@exp,f
 16524  15CD  3001               	movlw	1
 16525  15CE  07A0               	addwf	___ftpack@arg,f
 16526  15CF  3000               	movlw	0
 16527  15D0  1803               	skipnc
 16528  15D1  3001               	movlw	1
 16529  15D2  07A1               	addwf	___ftpack@arg+1,f
 16530  15D3  3000               	movlw	0
 16531  15D4  1803               	skipnc
 16532  15D5  3001               	movlw	1
 16533  15D6  07A2               	addwf	___ftpack@arg+2,f
 16534  15D7  3001               	movlw	1
 16535  15D8                     u4035:	
 16536  15D8  36A2               	lsrf	___ftpack@arg+2,f
 16537  15D9  0CA1               	rrf	___ftpack@arg+1,f
 16538  15DA  0CA0               	rrf	___ftpack@arg,f
 16539  15DB  0B89               	decfsz	9,f
 16540  15DC  2DD8               	goto	u4035
 16541  15DD                     l3047:	
 16542  15DD  30FF               	movlw	255
 16543  15DE  0522               	andwf	___ftpack@arg+2,w
 16544  15DF  1903               	btfsc	3,2
 16545  15E0  2DEA               	goto	l5751
 16546  15E1  2DC9               	goto	l5743
 16547  15E2                     l5749:	
 16548  15E2  3001               	movlw	1
 16549  15E3  02A3               	subwf	___ftpack@exp,f
 16550  15E4  3001               	movlw	1
 16551  15E5                     u4055:	
 16552  15E5  35A0               	lslf	___ftpack@arg,f
 16553  15E6  0DA1               	rlf	___ftpack@arg+1,f
 16554  15E7  0DA2               	rlf	___ftpack@arg+2,f
 16555  15E8  0B89               	decfsz	9,f
 16556  15E9  2DE5               	goto	u4055
 16557  15EA                     l5751:	
 16558  15EA  1FA1               	btfss	___ftpack@arg+1,7
 16559  15EB  2DE2               	goto	l5749
 16560  15EC  1823               	btfsc	___ftpack@exp,0
 16561  15ED  2DF4               	goto	l3053
 16562  15EE  30FF               	movlw	255
 16563  15EF  05A0               	andwf	___ftpack@arg,f
 16564  15F0  307F               	movlw	127
 16565  15F1  05A1               	andwf	___ftpack@arg+1,f
 16566  15F2  30FF               	movlw	255
 16567  15F3  05A2               	andwf	___ftpack@arg+2,f
 16568  15F4                     l3053:	
 16569  15F4  1003               	clrc
 16570  15F5  0CA3               	rrf	___ftpack@exp,f
 16571  15F6  0823               	movf	___ftpack@exp,w
 16572  15F7  00A5               	movwf	??___ftpack
 16573  15F8  01A6               	clrf	??___ftpack+1
 16574  15F9  01A7               	clrf	??___ftpack+2
 16575  15FA  3010               	movlw	16
 16576  15FB                     u4085:	
 16577  15FB  35A5               	lslf	??___ftpack,f
 16578  15FC  0DA6               	rlf	??___ftpack+1,f
 16579  15FD  0DA7               	rlf	??___ftpack+2,f
 16580  15FE  0B89               	decfsz	9,f
 16581  15FF  2DFB               	goto	u4085
 16582  1600  0825               	movf	??___ftpack,w
 16583  1601  04A0               	iorwf	___ftpack@arg,f
 16584  1602  0826               	movf	??___ftpack+1,w
 16585  1603  04A1               	iorwf	___ftpack@arg+1,f
 16586  1604  0827               	movf	??___ftpack+2,w
 16587  1605  04A2               	iorwf	___ftpack@arg+2,f
 16588  1606  0824               	movf	___ftpack@sign,w
 16589  1607  1903               	btfsc	3,2
 16590  1608  0008               	return
 16591  1609  17A2               	bsf	___ftpack@arg+2,7
 16592  160A  0008               	return
 16593  160B                     __end_of___ftpack:	
 16594                           
 16595                           	psect	text107
 16596  1AC0                     __ptext107:	
 16597 ;; *************** function _setRFSW_Status *****************
 16598 ;; Defined at:
 16599 ;;		line 386 in file "../src/RF_Control_B1.c"
 16600 ;; Parameters:    Size  Location     Type
 16601 ;;  sw              1    wreg     unsigned char 
 16602 ;;  command         1    2[BANK0 ] unsigned char 
 16603 ;; Auto vars:     Size  Location     Type
 16604 ;;  sw              1    3[BANK0 ] unsigned char 
 16605 ;; Return value:  Size  Location     Type
 16606 ;;		None               void
 16607 ;; Registers used:
 16608 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16609 ;; Tracked objects:
 16610 ;;		On entry : 0/0
 16611 ;;		On exit  : 0/0
 16612 ;;		Unchanged: 0/0
 16613 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16614 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16615 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16616 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16617 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16618 ;;Total ram usage:        2 bytes
 16619 ;; Hardware stack levels used:    1
 16620 ;; Hardware stack levels required when called:    6
 16621 ;; This function calls:
 16622 ;;		_RfSWPointSelect
 16623 ;; This function is called by:
 16624 ;;		_DlyOff_Main
 16625 ;;		_setDimmerLights_ERROR
 16626 ;;		_setControl_Lights_Table
 16627 ;;		_Sw_DimmerOnFunc
 16628 ;;		_Sw_DimmerAdjFunc
 16629 ;; This function uses a non-reentrant model
 16630 ;;
 16631                           
 16632                           
 16633                           ;psect for function _setRFSW_Status
 16634  1AC0                     _setRFSW_Status:	
 16635                           
 16636                           ;incstack = 0
 16637                           ; Regs used in _setRFSW_Status: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16638                           ;setRFSW_Status@sw stored from wreg
 16639  1AC0  0020               	movlb	0	; select bank0
 16640  1AC1  00A3               	movwf	setRFSW_Status@sw
 16641                           
 16642                           ;RF_Control_B1.c: 387: RfSWPointSelect(sw);
 16643  1AC2  0823               	movf	setRFSW_Status@sw,w
 16644  1AC3  319C  2453         	fcall	_RfSWPointSelect
 16645                           
 16646                           ;RF_Control_B1.c: 388: RFSW->Status = command;
 16647  1AC5  0021               	movlb	1	; select bank1
 16648  1AC6  084F               	movf	_RFSW^(0+128),w
 16649  1AC7  0086               	movwf	6
 16650  1AC8  0187               	clrf	7
 16651  1AC9  0020               	movlb	0	; select bank0
 16652  1ACA  0822               	movf	setRFSW_Status@command,w
 16653  1ACB  1001               	bcf	1,0
 16654  1ACC  1D03               	skipz
 16655  1ACD  1401               	bsf	1,0
 16656  1ACE  0008               	return
 16657  1ACF                     __end_of_setRFSW_Status:	
 16658                           
 16659                           	psect	text108
 16660  1C53                     __ptext108:	
 16661 ;; *************** function _RfSWPointSelect *****************
 16662 ;; Defined at:
 16663 ;;		line 321 in file "../src/RF_Control_B1.c"
 16664 ;; Parameters:    Size  Location     Type
 16665 ;;  sw              1    wreg     unsigned char 
 16666 ;; Auto vars:     Size  Location     Type
 16667 ;;  sw              1    1[BANK0 ] unsigned char 
 16668 ;; Return value:  Size  Location     Type
 16669 ;;		None               void
 16670 ;; Registers used:
 16671 ;;		wreg
 16672 ;; Tracked objects:
 16673 ;;		On entry : 0/0
 16674 ;;		On exit  : 0/0
 16675 ;;		Unchanged: 0/0
 16676 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16677 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16678 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16679 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16680 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16681 ;;Total ram usage:        2 bytes
 16682 ;; Hardware stack levels used:    1
 16683 ;; Hardware stack levels required when called:    5
 16684 ;; This function calls:
 16685 ;;		Nothing
 16686 ;; This function is called by:
 16687 ;;		_setRFSW_Control
 16688 ;;		_setRFSW_AdjControl
 16689 ;;		_setRFSW_Status
 16690 ;; This function uses a non-reentrant model
 16691 ;;
 16692                           
 16693                           
 16694                           ;psect for function _RfSWPointSelect
 16695  1C53                     _RfSWPointSelect:	
 16696                           
 16697                           ;incstack = 0
 16698                           ; Regs used in _RfSWPointSelect: [wreg]
 16699                           ;RfSWPointSelect@sw stored from wreg
 16700  1C53  0020               	movlb	0	; select bank0
 16701  1C54  00A1               	movwf	RfSWPointSelect@sw
 16702                           
 16703                           ;RF_Control_B1.c: 323: if (sw == 1) {
 16704  1C55  0821               	movf	RfSWPointSelect@sw,w
 16705  1C56  3A01               	xorlw	1
 16706  1C57  1D03               	skipz
 16707  1C58  2C5E               	goto	l2347
 16708                           
 16709                           ;RF_Control_B1.c: 324: RFSW = &RFSW1;
 16710  1C59  30EC               	movlw	_RFSW1& (0+255)
 16711  1C5A  00A0               	movwf	??_RfSWPointSelect
 16712  1C5B  0820               	movf	??_RfSWPointSelect,w
 16713  1C5C  0021               	movlb	1	; select bank1
 16714  1C5D  00CF               	movwf	_RFSW^(0+128)
 16715  1C5E                     l2347:	
 16716                           
 16717                           ;RF_Control_B1.c: 325: }
 16718                           ;RF_Control_B1.c: 328: if (sw == 2) {
 16719  1C5E  0020               	movlb	0	; select bank0
 16720  1C5F  0821               	movf	RfSWPointSelect@sw,w
 16721  1C60  3A02               	xorlw	2
 16722  1C61  1D03               	skipz
 16723  1C62  0008               	return
 16724                           
 16725                           ;RF_Control_B1.c: 329: RFSW = &RFSW2;
 16726  1C63  30ED               	movlw	_RFSW2& (0+255)
 16727  1C64  00A0               	movwf	??_RfSWPointSelect
 16728  1C65  0820               	movf	??_RfSWPointSelect,w
 16729  1C66  0021               	movlb	1	; select bank1
 16730  1C67  00CF               	movwf	_RFSW^(0+128)
 16731  1C68  0008               	return
 16732  1C69                     __end_of_RfSWPointSelect:	
 16733                           
 16734                           	psect	text109
 16735  1B1D                     __ptext109:	
 16736 ;; *************** function _setDimmerLights_Trigger *****************
 16737 ;; Defined at:
 16738 ;;		line 705 in file "../src/Dimmer_B1.c"
 16739 ;; Parameters:    Size  Location     Type
 16740 ;;  lights          1    wreg     unsigned char 
 16741 ;;  command         1    2[BANK0 ] unsigned char 
 16742 ;; Auto vars:     Size  Location     Type
 16743 ;;  lights          1    3[BANK0 ] unsigned char 
 16744 ;; Return value:  Size  Location     Type
 16745 ;;		None               void
 16746 ;; Registers used:
 16747 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16748 ;; Tracked objects:
 16749 ;;		On entry : 0/0
 16750 ;;		On exit  : 0/0
 16751 ;;		Unchanged: 0/0
 16752 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16753 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16754 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16755 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16756 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16757 ;;Total ram usage:        2 bytes
 16758 ;; Hardware stack levels used:    1
 16759 ;; Hardware stack levels required when called:    6
 16760 ;; This function calls:
 16761 ;;		_DimmerLightsPointSelect
 16762 ;; This function is called by:
 16763 ;;		_DlyOff_Main
 16764 ;;		_setRFSW_Control
 16765 ;;		_Sw_DimmerOnFunc
 16766 ;;		_Sw_DimmerOffFunc
 16767 ;; This function uses a non-reentrant model
 16768 ;;
 16769                           
 16770                           
 16771                           ;psect for function _setDimmerLights_Trigger
 16772  1B1D                     _setDimmerLights_Trigger:	
 16773                           
 16774                           ;incstack = 0
 16775                           ; Regs used in _setDimmerLights_Trigger: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 16776                           ;setDimmerLights_Trigger@lights stored from wreg
 16777  1B1D  0020               	movlb	0	; select bank0
 16778  1B1E  00A3               	movwf	setDimmerLights_Trigger@lights
 16779                           
 16780                           ;Dimmer_B1.c: 707: DimmerLightsPointSelect(lights);
 16781  1B1F  0823               	movf	setDimmerLights_Trigger@lights,w
 16782  1B20  319B  23C6         	fcall	_DimmerLightsPointSelect
 16783                           
 16784                           ;Dimmer_B1.c: 708: DimmerLights->Trigger = command;
 16785  1B22  0879               	movf	_DimmerLights,w
 16786  1B23  3E08               	addlw	8
 16787  1B24  0086               	movwf	6
 16788  1B25  3001               	movlw	1	; select bank2/3
 16789  1B26  0087               	movwf	7
 16790  1B27  0020               	movlb	0	; select bank0
 16791  1B28  0822               	movf	setDimmerLights_Trigger@command,w
 16792  1B29  1101               	bcf	1,2
 16793  1B2A  1D03               	skipz
 16794  1B2B  1501               	bsf	1,2
 16795  1B2C  0008               	return
 16796  1B2D                     __end_of_setDimmerLights_Trigger:	
 16797                           
 16798                           	psect	text110
 16799  1B0D                     __ptext110:	
 16800 ;; *************** function _setDimmerLights_Switch *****************
 16801 ;; Defined at:
 16802 ;;		line 693 in file "../src/Dimmer_B1.c"
 16803 ;; Parameters:    Size  Location     Type
 16804 ;;  lights          1    wreg     unsigned char 
 16805 ;;  command         1    2[BANK0 ] unsigned char 
 16806 ;; Auto vars:     Size  Location     Type
 16807 ;;  lights          1    3[BANK0 ] unsigned char 
 16808 ;; Return value:  Size  Location     Type
 16809 ;;		None               void
 16810 ;; Registers used:
 16811 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16812 ;; Tracked objects:
 16813 ;;		On entry : 0/0
 16814 ;;		On exit  : 0/0
 16815 ;;		Unchanged: 0/0
 16816 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16817 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16818 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16819 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16820 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16821 ;;Total ram usage:        2 bytes
 16822 ;; Hardware stack levels used:    1
 16823 ;; Hardware stack levels required when called:    6
 16824 ;; This function calls:
 16825 ;;		_DimmerLightsPointSelect
 16826 ;; This function is called by:
 16827 ;;		_DlyOff_Main
 16828 ;;		_setRFSW_Control
 16829 ;;		_Sw_DimmerOnFunc
 16830 ;;		_Sw_DimmerOffFunc
 16831 ;; This function uses a non-reentrant model
 16832 ;;
 16833                           
 16834                           
 16835                           ;psect for function _setDimmerLights_Switch
 16836  1B0D                     _setDimmerLights_Switch:	
 16837                           
 16838                           ;incstack = 0
 16839                           ; Regs used in _setDimmerLights_Switch: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
 16840                           ;setDimmerLights_Switch@lights stored from wreg
 16841  1B0D  0020               	movlb	0	; select bank0
 16842  1B0E  00A3               	movwf	setDimmerLights_Switch@lights
 16843                           
 16844                           ;Dimmer_B1.c: 695: DimmerLightsPointSelect(lights);
 16845  1B0F  0823               	movf	setDimmerLights_Switch@lights,w
 16846  1B10  319B  23C6         	fcall	_DimmerLightsPointSelect
 16847                           
 16848                           ;Dimmer_B1.c: 696: DimmerLights->Switch = command;
 16849  1B12  0879               	movf	_DimmerLights,w
 16850  1B13  3E08               	addlw	8
 16851  1B14  0086               	movwf	6
 16852  1B15  3001               	movlw	1	; select bank2/3
 16853  1B16  0087               	movwf	7
 16854  1B17  0020               	movlb	0	; select bank0
 16855  1B18  0822               	movf	setDimmerLights_Switch@command,w
 16856  1B19  1081               	bcf	1,1
 16857  1B1A  1D03               	skipz
 16858  1B1B  1481               	bsf	1,1
 16859  1B1C  0008               	return
 16860  1B1D                     __end_of_setDimmerLights_Switch:	
 16861                           
 16862                           	psect	text111
 16863  1BC6                     __ptext111:	
 16864 ;; *************** function _DimmerLightsPointSelect *****************
 16865 ;; Defined at:
 16866 ;;		line 315 in file "../src/Dimmer_B1.c"
 16867 ;; Parameters:    Size  Location     Type
 16868 ;;  lights          1    wreg     unsigned char 
 16869 ;; Auto vars:     Size  Location     Type
 16870 ;;  lights          1    1[BANK0 ] unsigned char 
 16871 ;; Return value:  Size  Location     Type
 16872 ;;		None               void
 16873 ;; Registers used:
 16874 ;;		wreg
 16875 ;; Tracked objects:
 16876 ;;		On entry : 0/0
 16877 ;;		On exit  : 0/0
 16878 ;;		Unchanged: 0/0
 16879 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16880 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16881 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16882 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16883 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16884 ;;Total ram usage:        2 bytes
 16885 ;; Hardware stack levels used:    1
 16886 ;; Hardware stack levels required when called:    5
 16887 ;; This function calls:
 16888 ;;		Nothing
 16889 ;; This function is called by:
 16890 ;;		_setDimmerLights_Initialization
 16891 ;;		_setDimmerLights_Main
 16892 ;;		_setDimmerLights_ERROR
 16893 ;;		_setDimmerLights_TriggerERROR
 16894 ;;		_setDimmerLights
 16895 ;;		_setDimmerLights_Adj
 16896 ;;		_setDimmerLights_AdjRF
 16897 ;;		_setDimmerLights_Switch
 16898 ;;		_setDimmerLights_AdjGo
 16899 ;;		_setDimmerLights_Trigger
 16900 ;;		_setDimmerLights_TriggerAdj
 16901 ;;		_setDimmerLights_Clear
 16902 ;;		_setDimmerLights_GO
 16903 ;;		_setDimmerLights_MaxmumValue
 16904 ;; This function uses a non-reentrant model
 16905 ;;
 16906                           
 16907                           
 16908                           ;psect for function _DimmerLightsPointSelect
 16909  1BC6                     _DimmerLightsPointSelect:	
 16910                           
 16911                           ;incstack = 0
 16912                           ; Regs used in _DimmerLightsPointSelect: [wreg]
 16913                           ;DimmerLightsPointSelect@lights stored from wreg
 16914  1BC6  0020               	movlb	0	; select bank0
 16915  1BC7  00A1               	movwf	DimmerLightsPointSelect@lights
 16916                           
 16917                           ;Dimmer_B1.c: 317: if (lights == 1) {
 16918  1BC8  0821               	movf	DimmerLightsPointSelect@lights,w
 16919  1BC9  3A01               	xorlw	1
 16920  1BCA  1D03               	skipz
 16921  1BCB  2BD0               	goto	l816
 16922                           
 16923                           ;Dimmer_B1.c: 318: DimmerLights = &DimmerLights1;
 16924  1BCC  30A0               	movlw	_DimmerLights1& (0+255)
 16925  1BCD  00A0               	movwf	??_DimmerLightsPointSelect
 16926  1BCE  0820               	movf	??_DimmerLightsPointSelect,w
 16927  1BCF  00F9               	movwf	_DimmerLights
 16928  1BD0                     l816:	
 16929                           
 16930                           ;Dimmer_B1.c: 319: }
 16931                           ;Dimmer_B1.c: 322: if (lights == 2) {
 16932  1BD0  0821               	movf	DimmerLightsPointSelect@lights,w
 16933  1BD1  3A02               	xorlw	2
 16934  1BD2  1D03               	skipz
 16935  1BD3  0008               	return
 16936                           
 16937                           ;Dimmer_B1.c: 323: DimmerLights = &DimmerLights2;
 16938  1BD4  30AF               	movlw	_DimmerLights2& (0+255)
 16939  1BD5  00A0               	movwf	??_DimmerLightsPointSelect
 16940  1BD6  0820               	movf	??_DimmerLightsPointSelect,w
 16941  1BD7  00F9               	movwf	_DimmerLights
 16942  1BD8  0008               	return
 16943  1BD9                     __end_of_DimmerLightsPointSelect:	
 16944                           
 16945                           	psect	text112
 16946  14F6                     __ptext112:	
 16947 ;; *************** function _setBuz *****************
 16948 ;; Defined at:
 16949 ;;		line 22 in file "../src/Buzzer_B1.c"
 16950 ;; Parameters:    Size  Location     Type
 16951 ;;  count           1    wreg     unsigned char 
 16952 ;;  time            2    9[BANK0 ] int 
 16953 ;; Auto vars:     Size  Location     Type
 16954 ;;  count           1   12[BANK0 ] unsigned char 
 16955 ;; Return value:  Size  Location     Type
 16956 ;;		None               void
 16957 ;; Registers used:
 16958 ;;		wreg, status,2, status,0, pclath, cstack
 16959 ;; Tracked objects:
 16960 ;;		On entry : 0/0
 16961 ;;		On exit  : 0/0
 16962 ;;		Unchanged: 0/0
 16963 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16964 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16965 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16966 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16967 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16968 ;;Total ram usage:        4 bytes
 16969 ;; Hardware stack levels used:    1
 16970 ;; Hardware stack levels required when called:    6
 16971 ;; This function calls:
 16972 ;;		___awdiv
 16973 ;; This function is called by:
 16974 ;;		_CC2500_RxData
 16975 ;;		_DlyOff_Main
 16976 ;;		_setDimmerLights_Main
 16977 ;;		_DimmerLights_Exceptions
 16978 ;;		_my_Main
 16979 ;;		_setOverTemp_Exceptions
 16980 ;;		_setLog_Code
 16981 ;;		_setControl_Lights_Table
 16982 ;;		_setRFSW_Control
 16983 ;;		_setSw_Main
 16984 ;;		_Sw_DimmerOnFunc
 16985 ;; This function uses a non-reentrant model
 16986 ;;
 16987                           
 16988                           
 16989                           ;psect for function _setBuz
 16990  14F6                     _setBuz:	
 16991                           
 16992                           ;incstack = 0
 16993                           ; Regs used in _setBuz: [wreg+status,2+status,0+pclath+cstack]
 16994                           ;setBuz@count stored from wreg
 16995  14F6  0020               	movlb	0	; select bank0
 16996  14F7  00AC               	movwf	setBuz@count
 16997                           
 16998                           ;Buzzer_B1.c: 23: time /= 10;
 16999  14F8  300A               	movlw	10
 17000  14F9  00A0               	movwf	___awdiv@divisor
 17001  14FA  3000               	movlw	0
 17002  14FB  00A1               	movwf	___awdiv@divisor+1
 17003  14FC  082A               	movf	setBuz@time+1,w
 17004  14FD  01A3               	clrf	___awdiv@dividend+1
 17005  14FE  07A3               	addwf	___awdiv@dividend+1,f
 17006  14FF  0829               	movf	setBuz@time,w
 17007  1500  01A2               	clrf	___awdiv@dividend
 17008  1501  07A2               	addwf	___awdiv@dividend,f
 17009  1502  3194  244B  3194   	fcall	___awdiv
 17010  1505  0020               	movlb	0	; select bank0
 17011  1506  0821               	movf	?___awdiv+1,w
 17012  1507  01AA               	clrf	setBuz@time+1
 17013  1508  07AA               	addwf	setBuz@time+1,f
 17014  1509  0820               	movf	?___awdiv,w
 17015  150A  01A9               	clrf	setBuz@time
 17016  150B  07A9               	addwf	setBuz@time,f
 17017                           
 17018                           ;Buzzer_B1.c: 24: if (Buz1.Enable == 1) {
 17019  150C  0021               	movlb	1	; select bank1
 17020  150D  1C35               	btfss	_Buz1^(0+128),0
 17021  150E  0008               	return
 17022                           
 17023                           ;Buzzer_B1.c: 25: if (Buz1.GO == 0) {
 17024  150F  18B5               	btfsc	_Buz1^(0+128),1
 17025  1510  2D27               	goto	l106
 17026                           
 17027                           ;Buzzer_B1.c: 26: Buz1.GO = 1;
 17028  1511  14B5               	bsf	_Buz1^(0+128),1
 17029                           
 17030                           ;Buzzer_B1.c: 27: Buz1.Counter = 0;
 17031  1512  01B6               	clrf	(_Buz1^(0+128)+1)
 17032  1513  01B7               	clrf	((_Buz1+1)^(0+128)+1)
 17033                           
 17034                           ;Buzzer_B1.c: 28: Buz1.Count = count;
 17035  1514  0020               	movlb	0	; select bank0
 17036  1515  082C               	movf	setBuz@count,w
 17037  1516  00AB               	movwf	??_setBuz
 17038  1517  082B               	movf	??_setBuz,w
 17039  1518  0021               	movlb	1	; select bank1
 17040  1519  00B8               	movwf	(_Buz1^(0+128)+3)
 17041                           
 17042                           ;Buzzer_B1.c: 29: Buz1.TimeValue = time;
 17043  151A  0020               	movlb	0	; select bank0
 17044  151B  082A               	movf	setBuz@time+1,w
 17045  151C  0021               	movlb	1	; select bank1
 17046  151D  01BC               	clrf	((_Buz1+1)^(0+128)+6)
 17047  151E  07BC               	addwf	((_Buz1+1)^(0+128)+6),f
 17048  151F  0020               	movlb	0	; select bank0
 17049  1520  0829               	movf	setBuz@time,w
 17050  1521  0021               	movlb	1	; select bank1
 17051  1522  01BB               	clrf	(_Buz1^(0+128)+6)
 17052  1523  07BB               	addwf	(_Buz1^(0+128)+6),f
 17053                           
 17054                           ;Buzzer_B1.c: 30: RB3 = 1;
 17055  1524  0020               	movlb	0	; select bank0
 17056  1525  158D               	bsf	13,3	;volatile
 17057                           
 17058                           ;Buzzer_B1.c: 31: } else {
 17059  1526  0008               	return
 17060  1527                     l106:	
 17061                           
 17062                           ;Buzzer_B1.c: 32: if (Buz1.BufferStatus1 == 0) {
 17063  1527  19B5               	btfsc	_Buz1^(0+128),3
 17064  1528  2D3B               	goto	l108
 17065                           
 17066                           ;Buzzer_B1.c: 33: Buz1.BufferStatus1 = 1;
 17067  1529  15B5               	bsf	_Buz1^(0+128),3
 17068                           
 17069                           ;Buzzer_B1.c: 34: Buz1.CountBuffer1 = count;
 17070  152A  0020               	movlb	0	; select bank0
 17071  152B  082C               	movf	setBuz@count,w
 17072  152C  00AB               	movwf	??_setBuz
 17073  152D  082B               	movf	??_setBuz,w
 17074  152E  0021               	movlb	1	; select bank1
 17075  152F  00B9               	movwf	(_Buz1^(0+128)+4)
 17076                           
 17077                           ;Buzzer_B1.c: 35: Buz1.TimeValueBuffer1 = time;
 17078  1530  0020               	movlb	0	; select bank0
 17079  1531  082A               	movf	setBuz@time+1,w
 17080  1532  0021               	movlb	1	; select bank1
 17081  1533  01BE               	clrf	((_Buz1+1)^(0+128)+8)
 17082  1534  07BE               	addwf	((_Buz1+1)^(0+128)+8),f
 17083  1535  0020               	movlb	0	; select bank0
 17084  1536  0829               	movf	setBuz@time,w
 17085  1537  0021               	movlb	1	; select bank1
 17086  1538  01BD               	clrf	(_Buz1^(0+128)+8)
 17087  1539  07BD               	addwf	(_Buz1^(0+128)+8),f
 17088                           
 17089                           ;Buzzer_B1.c: 36: } else if (Buz1.BufferStatus2 == 0) {
 17090  153A  0008               	return
 17091  153B                     l108:	
 17092  153B  1A35               	btfsc	_Buz1^(0+128),4
 17093  153C  0008               	return
 17094                           
 17095                           ;Buzzer_B1.c: 37: Buz1.BufferStatus2 = 1;
 17096  153D  1635               	bsf	_Buz1^(0+128),4
 17097                           
 17098                           ;Buzzer_B1.c: 38: Buz1.CountBuffer2 = count;
 17099  153E  0020               	movlb	0	; select bank0
 17100  153F  082C               	movf	setBuz@count,w
 17101  1540  00AB               	movwf	??_setBuz
 17102  1541  082B               	movf	??_setBuz,w
 17103  1542  0021               	movlb	1	; select bank1
 17104  1543  00BA               	movwf	(_Buz1^(0+128)+5)
 17105                           
 17106                           ;Buzzer_B1.c: 39: Buz1.TimeValueBuffer2 = time;
 17107  1544  0020               	movlb	0	; select bank0
 17108  1545  082A               	movf	setBuz@time+1,w
 17109  1546  0021               	movlb	1	; select bank1
 17110  1547  01C0               	clrf	((_Buz1+1)^(0+128)+10)
 17111  1548  07C0               	addwf	((_Buz1+1)^(0+128)+10),f
 17112  1549  0020               	movlb	0	; select bank0
 17113  154A  0829               	movf	setBuz@time,w
 17114  154B  0021               	movlb	1	; select bank1
 17115  154C  01BF               	clrf	(_Buz1^(0+128)+10)
 17116  154D  07BF               	addwf	(_Buz1^(0+128)+10),f
 17117  154E  0008               	return
 17118  154F                     __end_of_setBuz:	
 17119                           
 17120                           	psect	text113
 17121  144B                     __ptext113:	
 17122 ;; *************** function ___awdiv *****************
 17123 ;; Defined at:
 17124 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awdiv.c"
 17125 ;; Parameters:    Size  Location     Type
 17126 ;;  divisor         2    0[BANK0 ] int 
 17127 ;;  dividend        2    2[BANK0 ] int 
 17128 ;; Auto vars:     Size  Location     Type
 17129 ;;  quotient        2    7[BANK0 ] int 
 17130 ;;  sign            1    6[BANK0 ] unsigned char 
 17131 ;;  counter         1    5[BANK0 ] unsigned char 
 17132 ;; Return value:  Size  Location     Type
 17133 ;;                  2    0[BANK0 ] int 
 17134 ;; Registers used:
 17135 ;;		wreg, status,2, status,0
 17136 ;; Tracked objects:
 17137 ;;		On entry : 0/0
 17138 ;;		On exit  : 0/0
 17139 ;;		Unchanged: 0/0
 17140 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17141 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17142 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17143 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17144 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17145 ;;Total ram usage:        9 bytes
 17146 ;; Hardware stack levels used:    1
 17147 ;; Hardware stack levels required when called:    5
 17148 ;; This function calls:
 17149 ;;		Nothing
 17150 ;; This function is called by:
 17151 ;;		_setBuz
 17152 ;; This function uses a non-reentrant model
 17153 ;;
 17154                           
 17155                           
 17156                           ;psect for function ___awdiv
 17157  144B                     ___awdiv:	
 17158                           
 17159                           ;incstack = 0
 17160                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 17161  144B  0020               	movlb	0	; select bank0
 17162  144C  01A6               	clrf	___awdiv@sign
 17163  144D  1FA1               	btfss	___awdiv@divisor+1,7
 17164  144E  2C56               	goto	l6085
 17165  144F  09A0               	comf	___awdiv@divisor,f
 17166  1450  09A1               	comf	___awdiv@divisor+1,f
 17167  1451  0AA0               	incf	___awdiv@divisor,f
 17168  1452  1903               	skipnz
 17169  1453  0AA1               	incf	___awdiv@divisor+1,f
 17170  1454  01A6               	clrf	___awdiv@sign
 17171  1455  0AA6               	incf	___awdiv@sign,f
 17172  1456                     l6085:	
 17173  1456  1FA3               	btfss	___awdiv@dividend+1,7
 17174  1457  2C61               	goto	l6091
 17175  1458  09A2               	comf	___awdiv@dividend,f
 17176  1459  09A3               	comf	___awdiv@dividend+1,f
 17177  145A  0AA2               	incf	___awdiv@dividend,f
 17178  145B  1903               	skipnz
 17179  145C  0AA3               	incf	___awdiv@dividend+1,f
 17180  145D  3001               	movlw	1
 17181  145E  00A4               	movwf	??___awdiv
 17182  145F  0824               	movf	??___awdiv,w
 17183  1460  06A6               	xorwf	___awdiv@sign,f
 17184  1461                     l6091:	
 17185  1461  01A7               	clrf	___awdiv@quotient
 17186  1462  01A8               	clrf	___awdiv@quotient+1
 17187  1463  0821               	movf	___awdiv@divisor+1,w
 17188  1464  0420               	iorwf	___awdiv@divisor,w
 17189  1465  1903               	skipnz
 17190  1466  2C90               	goto	l6113
 17191  1467  01A5               	clrf	___awdiv@counter
 17192  1468  0AA5               	incf	___awdiv@counter,f
 17193  1469                     l6101:	
 17194  1469  1BA1               	btfsc	___awdiv@divisor+1,7
 17195  146A  2C75               	goto	l6103
 17196  146B  3001               	movlw	1
 17197  146C                     u4825:	
 17198  146C  35A0               	lslf	___awdiv@divisor,f
 17199  146D  0DA1               	rlf	___awdiv@divisor+1,f
 17200  146E  0B89               	decfsz	9,f
 17201  146F  2C6C               	goto	u4825
 17202  1470  3001               	movlw	1
 17203  1471  00A4               	movwf	??___awdiv
 17204  1472  0824               	movf	??___awdiv,w
 17205  1473  07A5               	addwf	___awdiv@counter,f
 17206  1474  2C69               	goto	l6101
 17207  1475                     l6103:	
 17208  1475  3001               	movlw	1
 17209  1476                     u4845:	
 17210  1476  35A7               	lslf	___awdiv@quotient,f
 17211  1477  0DA8               	rlf	___awdiv@quotient+1,f
 17212  1478  0B89               	decfsz	9,f
 17213  1479  2C76               	goto	u4845
 17214  147A  0821               	movf	___awdiv@divisor+1,w
 17215  147B  0223               	subwf	___awdiv@dividend+1,w
 17216  147C  1D03               	skipz
 17217  147D  2C80               	goto	u4855
 17218  147E  0820               	movf	___awdiv@divisor,w
 17219  147F  0222               	subwf	___awdiv@dividend,w
 17220  1480                     u4855:	
 17221  1480  1C03               	skipc
 17222  1481  2C87               	goto	l6109
 17223  1482  0820               	movf	___awdiv@divisor,w
 17224  1483  02A2               	subwf	___awdiv@dividend,f
 17225  1484  0821               	movf	___awdiv@divisor+1,w
 17226  1485  3BA3               	subwfb	___awdiv@dividend+1,f
 17227  1486  1427               	bsf	___awdiv@quotient,0
 17228  1487                     l6109:	
 17229  1487  3001               	movlw	1
 17230  1488                     u4865:	
 17231  1488  36A1               	lsrf	___awdiv@divisor+1,f
 17232  1489  0CA0               	rrf	___awdiv@divisor,f
 17233  148A  0B89               	decfsz	9,f
 17234  148B  2C88               	goto	u4865
 17235  148C  3001               	movlw	1
 17236  148D  02A5               	subwf	___awdiv@counter,f
 17237  148E  1D03               	btfss	3,2
 17238  148F  2C75               	goto	l6103
 17239  1490                     l6113:	
 17240  1490  0826               	movf	___awdiv@sign,w
 17241  1491  1903               	btfsc	3,2
 17242  1492  2C98               	goto	l6117
 17243  1493  09A7               	comf	___awdiv@quotient,f
 17244  1494  09A8               	comf	___awdiv@quotient+1,f
 17245  1495  0AA7               	incf	___awdiv@quotient,f
 17246  1496  1903               	skipnz
 17247  1497  0AA8               	incf	___awdiv@quotient+1,f
 17248  1498                     l6117:	
 17249  1498  0828               	movf	___awdiv@quotient+1,w
 17250  1499  01A1               	clrf	?___awdiv+1
 17251  149A  07A1               	addwf	?___awdiv+1,f
 17252  149B  0827               	movf	___awdiv@quotient,w
 17253  149C  01A0               	clrf	?___awdiv
 17254  149D  07A0               	addwf	?___awdiv,f
 17255  149E  0008               	return
 17256  149F                     __end_of___awdiv:	
 17257                           
 17258                           	psect	text114
 17259  19BE                     __ptext114:	
 17260 ;; *************** function _DelayOff_Initialization *****************
 17261 ;; Defined at:
 17262 ;;		line 26 in file "../src/DelayOff_B1.c"
 17263 ;; Parameters:    Size  Location     Type
 17264 ;;		None
 17265 ;; Auto vars:     Size  Location     Type
 17266 ;;		None
 17267 ;; Return value:  Size  Location     Type
 17268 ;;		None               void
 17269 ;; Registers used:
 17270 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17271 ;; Tracked objects:
 17272 ;;		On entry : 0/0
 17273 ;;		On exit  : 0/0
 17274 ;;		Unchanged: 0/0
 17275 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17276 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17277 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17278 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17279 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17280 ;;Total ram usage:        0 bytes
 17281 ;; Hardware stack levels used:    1
 17282 ;; Hardware stack levels required when called:    7
 17283 ;; This function calls:
 17284 ;;		_DlyOff_Initialization
 17285 ;; This function is called by:
 17286 ;;		_main
 17287 ;; This function uses a non-reentrant model
 17288 ;;
 17289                           
 17290                           
 17291                           ;psect for function _DelayOff_Initialization
 17292  19BE                     _DelayOff_Initialization:	
 17293                           
 17294                           ;DelayOff_B1.c: 28: DlyOff_Initialization(1);
 17295                           
 17296                           ;incstack = 0
 17297                           ; Regs used in _DelayOff_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 17298  19BE  3001               	movlw	1
 17299  19BF  319A  2237  3199   	fcall	_DlyOff_Initialization
 17300                           
 17301                           ;DelayOff_B1.c: 32: DlyOff_Initialization(2);
 17302  19C2  3002               	movlw	2
 17303  19C3  319A  2237         	fcall	_DlyOff_Initialization
 17304  19C5  0008               	return
 17305  19C6                     __end_of_DelayOff_Initialization:	
 17306                           
 17307                           	psect	text115
 17308  1A37                     __ptext115:	
 17309 ;; *************** function _DlyOff_Initialization *****************
 17310 ;; Defined at:
 17311 ;;		line 56 in file "../src/DelayOff_B1.c"
 17312 ;; Parameters:    Size  Location     Type
 17313 ;;  sw              1    wreg     unsigned char 
 17314 ;; Auto vars:     Size  Location     Type
 17315 ;;  sw              1    2[BANK0 ] unsigned char 
 17316 ;; Return value:  Size  Location     Type
 17317 ;;		None               void
 17318 ;; Registers used:
 17319 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17320 ;; Tracked objects:
 17321 ;;		On entry : 0/0
 17322 ;;		On exit  : 0/0
 17323 ;;		Unchanged: 0/0
 17324 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17325 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17326 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17327 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17328 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17329 ;;Total ram usage:        1 bytes
 17330 ;; Hardware stack levels used:    1
 17331 ;; Hardware stack levels required when called:    6
 17332 ;; This function calls:
 17333 ;;		_DelayOffPointSelect
 17334 ;; This function is called by:
 17335 ;;		_DelayOff_Initialization
 17336 ;; This function uses a non-reentrant model
 17337 ;;
 17338                           
 17339                           
 17340                           ;psect for function _DlyOff_Initialization
 17341  1A37                     _DlyOff_Initialization:	
 17342                           
 17343                           ;incstack = 0
 17344                           ; Regs used in _DlyOff_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 17345                           ;DlyOff_Initialization@sw stored from wreg
 17346  1A37  0020               	movlb	0	; select bank0
 17347  1A38  00A2               	movwf	DlyOff_Initialization@sw
 17348                           
 17349                           ;DelayOff_B1.c: 57: DelayOffPointSelect(sw);
 17350  1A39  0822               	movf	DlyOff_Initialization@sw,w
 17351  1A3A  319C  2400         	fcall	_DelayOffPointSelect
 17352                           
 17353                           ;DelayOff_B1.c: 58: DelayOff->Enable = 1;
 17354  1A3C  0878               	movf	_DelayOff,w
 17355  1A3D  0086               	movwf	6
 17356  1A3E  3001               	movlw	1	; select bank2/3
 17357  1A3F  0087               	movwf	7
 17358  1A40  1401               	bsf	1,0
 17359  1A41  0008               	return
 17360  1A42                     __end_of_DlyOff_Initialization:	
 17361                           
 17362                           	psect	text116
 17363  1C00                     __ptext116:	
 17364 ;; *************** function _DelayOffPointSelect *****************
 17365 ;; Defined at:
 17366 ;;		line 7 in file "../src/DelayOff_B1.c"
 17367 ;; Parameters:    Size  Location     Type
 17368 ;;  sw              1    wreg     unsigned char 
 17369 ;; Auto vars:     Size  Location     Type
 17370 ;;  sw              1    1[BANK0 ] unsigned char 
 17371 ;; Return value:  Size  Location     Type
 17372 ;;		None               void
 17373 ;; Registers used:
 17374 ;;		wreg
 17375 ;; Tracked objects:
 17376 ;;		On entry : 0/0
 17377 ;;		On exit  : 0/0
 17378 ;;		Unchanged: 0/0
 17379 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17380 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17381 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17382 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17383 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17384 ;;Total ram usage:        2 bytes
 17385 ;; Hardware stack levels used:    1
 17386 ;; Hardware stack levels required when called:    5
 17387 ;; This function calls:
 17388 ;;		Nothing
 17389 ;; This function is called by:
 17390 ;;		_DlyOff_Initialization
 17391 ;;		_DlyOff_Main
 17392 ;;		_setDelayOff_GO
 17393 ;; This function uses a non-reentrant model
 17394 ;;
 17395                           
 17396                           
 17397                           ;psect for function _DelayOffPointSelect
 17398  1C00                     _DelayOffPointSelect:	
 17399                           
 17400                           ;incstack = 0
 17401                           ; Regs used in _DelayOffPointSelect: [wreg]
 17402                           ;DelayOffPointSelect@sw stored from wreg
 17403  1C00  0020               	movlb	0	; select bank0
 17404  1C01  00A1               	movwf	DelayOffPointSelect@sw
 17405                           
 17406                           ;DelayOff_B1.c: 9: if (sw == 1) {
 17407  1C02  0821               	movf	DelayOffPointSelect@sw,w
 17408  1C03  3A01               	xorlw	1
 17409  1C04  1D03               	skipz
 17410  1C05  2C0B               	goto	l6015
 17411                           
 17412                           ;DelayOff_B1.c: 10: DelayOff = &DlySw1;
 17413  1C06  30D8               	movlw	_DlySw1& (0+255)
 17414  1C07  00A0               	movwf	??_DelayOffPointSelect
 17415  1C08  0820               	movf	??_DelayOffPointSelect,w
 17416  1C09  00F8               	movwf	_DelayOff
 17417                           
 17418                           ;DelayOff_B1.c: 11: }
 17419  1C0A  0008               	return
 17420  1C0B                     l6015:	
 17421                           
 17422                           ;DelayOff_B1.c: 14: else if (sw == 2) {
 17423  1C0B  0821               	movf	DelayOffPointSelect@sw,w
 17424  1C0C  3A02               	xorlw	2
 17425  1C0D  1D03               	skipz
 17426  1C0E  0008               	return
 17427                           
 17428                           ;DelayOff_B1.c: 15: DelayOff = &DlySw2;
 17429  1C0F  30DD               	movlw	_DlySw2& (0+255)
 17430  1C10  00A0               	movwf	??_DelayOffPointSelect
 17431  1C11  0820               	movf	??_DelayOffPointSelect,w
 17432  1C12  00F8               	movwf	_DelayOff
 17433  1C13  0008               	return
 17434  1C14                     __end_of_DelayOffPointSelect:	
 17435                           
 17436                           	psect	text117
 17437  1C28                     __ptext117:	
 17438 ;; *************** function _CC2500_PowerOnInitial *****************
 17439 ;; Defined at:
 17440 ;;		line 111 in file "../src/CC2500_B1.c"
 17441 ;; Parameters:    Size  Location     Type
 17442 ;;		None
 17443 ;; Auto vars:     Size  Location     Type
 17444 ;;		None
 17445 ;; Return value:  Size  Location     Type
 17446 ;;		None               void
 17447 ;; Registers used:
 17448 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 17449 ;; Tracked objects:
 17450 ;;		On entry : 0/0
 17451 ;;		On exit  : 0/0
 17452 ;;		Unchanged: 0/0
 17453 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17454 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17455 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17456 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17457 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17458 ;;Total ram usage:        0 bytes
 17459 ;; Hardware stack levels used:    1
 17460 ;; Hardware stack levels required when called:    8
 17461 ;; This function calls:
 17462 ;;		_CC2500_ClearRXFIFO
 17463 ;;		_CC2500_ClearTXFIFO
 17464 ;;		_CC2500_FrequencyCabr
 17465 ;;		_CC2500_InitPATable
 17466 ;;		_CC2500_InitSetREG
 17467 ;;		_CC2500_PowerRST
 17468 ;;		_CC2500_SIDLEMode
 17469 ;; This function is called by:
 17470 ;;		_main
 17471 ;; This function uses a non-reentrant model
 17472 ;;
 17473                           
 17474                           
 17475                           ;psect for function _CC2500_PowerOnInitial
 17476  1C28                     _CC2500_PowerOnInitial:	
 17477                           
 17478                           ;CC2500_B1.c: 112: CC2500_PowerRST();
 17479                           
 17480                           ;incstack = 0
 17481                           ; Regs used in _CC2500_PowerOnInitial: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 17482  1C28  319F  276C  319C   	fcall	_CC2500_PowerRST
 17483                           
 17484                           ;CC2500_B1.c: 113: CC2500_InitSetREG();
 17485  1C2B  319E  26C0  319C   	fcall	_CC2500_InitSetREG
 17486                           
 17487                           ;CC2500_B1.c: 114: CC2500_InitPATable();
 17488  1C2E  319D  25D8  319C   	fcall	_CC2500_InitPATable
 17489                           
 17490                           ;CC2500_B1.c: 115: CC2500_ClearTXFIFO();
 17491  1C31  3199  2184  319C   	fcall	_CC2500_ClearTXFIFO
 17492                           
 17493                           ;CC2500_B1.c: 116: CC2500_ClearRXFIFO();
 17494  1C34  3199  2180  319C   	fcall	_CC2500_ClearRXFIFO
 17495                           
 17496                           ;CC2500_B1.c: 117: CC2500_FrequencyCabr();
 17497  1C37  319A  224D  319C   	fcall	_CC2500_FrequencyCabr
 17498                           
 17499                           ;CC2500_B1.c: 118: CC2500_SIDLEMode();
 17500  1C3A  3199  2188         	fcall	_CC2500_SIDLEMode
 17501  1C3C  0008               	return
 17502  1C3D                     __end_of_CC2500_PowerOnInitial:	
 17503                           
 17504                           	psect	text118
 17505  1988                     __ptext118:	
 17506 ;; *************** function _CC2500_SIDLEMode *****************
 17507 ;; Defined at:
 17508 ;;		line 195 in file "../src/CC2500_B1.c"
 17509 ;; Parameters:    Size  Location     Type
 17510 ;;		None
 17511 ;; Auto vars:     Size  Location     Type
 17512 ;;		None
 17513 ;; Return value:  Size  Location     Type
 17514 ;;		None               void
 17515 ;; Registers used:
 17516 ;;		wreg, status,2, status,0, pclath, cstack
 17517 ;; Tracked objects:
 17518 ;;		On entry : 0/0
 17519 ;;		On exit  : 0/0
 17520 ;;		Unchanged: 0/0
 17521 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17522 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17523 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17524 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17525 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17526 ;;Total ram usage:        0 bytes
 17527 ;; Hardware stack levels used:    1
 17528 ;; Hardware stack levels required when called:    7
 17529 ;; This function calls:
 17530 ;;		_CC2500_WriteCommand
 17531 ;; This function is called by:
 17532 ;;		_CC2500_PowerOnInitial
 17533 ;; This function uses a non-reentrant model
 17534 ;;
 17535                           
 17536                           
 17537                           ;psect for function _CC2500_SIDLEMode
 17538  1988                     _CC2500_SIDLEMode:	
 17539                           
 17540                           ;CC2500_B1.c: 196: CC2500_WriteCommand(0x36);
 17541                           
 17542                           ;incstack = 0
 17543                           ; Regs used in _CC2500_SIDLEMode: [wreg+status,2+status,0+pclath+cstack]
 17544  1988  3036               	movlw	54
 17545  1989  319A  22FD         	fcall	_CC2500_WriteCommand
 17546  198B  0008               	return
 17547  198C                     __end_of_CC2500_SIDLEMode:	
 17548                           
 17549                           	psect	text119
 17550  1F6C                     __ptext119:	
 17551 ;; *************** function _CC2500_PowerRST *****************
 17552 ;; Defined at:
 17553 ;;		line 124 in file "../src/CC2500_B1.c"
 17554 ;; Parameters:    Size  Location     Type
 17555 ;;		None
 17556 ;; Auto vars:     Size  Location     Type
 17557 ;;		None
 17558 ;; Return value:  Size  Location     Type
 17559 ;;		None               void
 17560 ;; Registers used:
 17561 ;;		wreg, status,2, status,0, pclath, cstack
 17562 ;; Tracked objects:
 17563 ;;		On entry : 0/0
 17564 ;;		On exit  : 0/0
 17565 ;;		Unchanged: 0/0
 17566 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17567 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17568 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17569 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17570 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17571 ;;Total ram usage:        1 bytes
 17572 ;; Hardware stack levels used:    1
 17573 ;; Hardware stack levels required when called:    6
 17574 ;; This function calls:
 17575 ;;		_CC2500_WriteByte
 17576 ;;		_DelayTime_1us
 17577 ;; This function is called by:
 17578 ;;		_CC2500_PowerOnInitial
 17579 ;; This function uses a non-reentrant model
 17580 ;;
 17581                           
 17582                           
 17583                           ;psect for function _CC2500_PowerRST
 17584  1F6C                     _CC2500_PowerRST:	
 17585                           
 17586                           ;CC2500_B1.c: 125: RC1 = 0;
 17587                           
 17588                           ;incstack = 0
 17589                           ; Regs used in _CC2500_PowerRST: [wreg+status,2+status,0+pclath+cstack]
 17590  1F6C  0020               	movlb	0	; select bank0
 17591  1F6D  108E               	bcf	14,1	;volatile
 17592                           
 17593                           ;CC2500_B1.c: 126: RC0 = 0;
 17594  1F6E  100E               	bcf	14,0	;volatile
 17595                           
 17596                           ;CC2500_B1.c: 127: RC4 = 1;
 17597  1F6F  160E               	bsf	14,4	;volatile
 17598                           
 17599                           ;CC2500_B1.c: 128: DelayTime_1us(10);
 17600  1F70  300A               	movlw	10
 17601  1F71  00A0               	movwf	DelayTime_1us@count
 17602  1F72  3000               	movlw	0
 17603  1F73  00A1               	movwf	DelayTime_1us@count+1
 17604  1F74  3188  2001  319F   	fcall	_DelayTime_1us
 17605                           
 17606                           ;CC2500_B1.c: 129: RC4 = 0;
 17607  1F77  0020               	movlb	0	; select bank0
 17608  1F78  120E               	bcf	14,4	;volatile
 17609                           
 17610                           ;CC2500_B1.c: 130: DelayTime_1us(10);
 17611  1F79  300A               	movlw	10
 17612  1F7A  00A0               	movwf	DelayTime_1us@count
 17613  1F7B  3000               	movlw	0
 17614  1F7C  00A1               	movwf	DelayTime_1us@count+1
 17615  1F7D  3188  2001  319F   	fcall	_DelayTime_1us
 17616                           
 17617                           ;CC2500_B1.c: 131: RC4 = 1;
 17618  1F80  0020               	movlb	0	; select bank0
 17619  1F81  160E               	bsf	14,4	;volatile
 17620                           
 17621                           ;CC2500_B1.c: 132: DelayTime_1us(40);
 17622  1F82  3028               	movlw	40
 17623  1F83  00A0               	movwf	DelayTime_1us@count
 17624  1F84  3000               	movlw	0
 17625  1F85  00A1               	movwf	DelayTime_1us@count+1
 17626  1F86  3188  2001  319F   	fcall	_DelayTime_1us
 17627                           
 17628                           ;CC2500_B1.c: 133: RC4 = 0;
 17629  1F89  0020               	movlb	0	; select bank0
 17630  1F8A  120E               	bcf	14,4	;volatile
 17631                           
 17632                           ;CC2500_B1.c: 134: SPI0Buffer = 0x30;
 17633  1F8B  3030               	movlw	48
 17634  1F8C  00A6               	movwf	??_CC2500_PowerRST
 17635  1F8D  0826               	movf	??_CC2500_PowerRST,w
 17636  1F8E  0021               	movlb	1	; select bank1
 17637  1F8F  00D2               	movwf	_SPI0Buffer^(0+128)
 17638  1F90                     l301:	
 17639                           ;CC2500_B1.c: 135: while (RC2 == 1);
 17640                           
 17641  1F90  0020               	movlb	0	; select bank0
 17642  1F91  190E               	btfsc	14,2	;volatile
 17643  1F92  2F90               	goto	l301
 17644                           
 17645                           ;CC2500_B1.c: 136: CC2500_WriteByte();
 17646  1F93  319C  24C5  319F   	fcall	_CC2500_WriteByte
 17647  1F96                     l304:	
 17648                           ;CC2500_B1.c: 137: while (RC2 == 1);
 17649                           
 17650  1F96  0020               	movlb	0	; select bank0
 17651  1F97  190E               	btfsc	14,2	;volatile
 17652  1F98  2F96               	goto	l304
 17653                           
 17654                           ;CC2500_B1.c: 138: RC0 = 0;
 17655  1F99  100E               	bcf	14,0	;volatile
 17656                           
 17657                           ;CC2500_B1.c: 139: RC4 = 1;
 17658  1F9A  160E               	bsf	14,4	;volatile
 17659  1F9B  0008               	return
 17660  1F9C                     __end_of_CC2500_PowerRST:	
 17661                           
 17662                           	psect	text120
 17663  1EC0                     __ptext120:	
 17664 ;; *************** function _CC2500_InitSetREG *****************
 17665 ;; Defined at:
 17666 ;;		line 145 in file "../src/CC2500_B1.c"
 17667 ;; Parameters:    Size  Location     Type
 17668 ;;		None
 17669 ;; Auto vars:     Size  Location     Type
 17670 ;;  loop_c          1    8[BANK0 ] unsigned char 
 17671 ;;  temp2           1    7[BANK0 ] unsigned char 
 17672 ;;  temp1           1    6[BANK0 ] unsigned char 
 17673 ;; Return value:  Size  Location     Type
 17674 ;;		None               void
 17675 ;; Registers used:
 17676 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 17677 ;; Tracked objects:
 17678 ;;		On entry : 0/0
 17679 ;;		On exit  : 0/0
 17680 ;;		Unchanged: 0/0
 17681 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17682 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17683 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17684 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17685 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17686 ;;Total ram usage:        4 bytes
 17687 ;; Hardware stack levels used:    1
 17688 ;; Hardware stack levels required when called:    7
 17689 ;; This function calls:
 17690 ;;		_CC2500_WriteREG
 17691 ;; This function is called by:
 17692 ;;		_CC2500_PowerOnInitial
 17693 ;; This function uses a non-reentrant model
 17694 ;;
 17695                           
 17696                           
 17697                           ;psect for function _CC2500_InitSetREG
 17698  1EC0                     _CC2500_InitSetREG:	
 17699                           
 17700                           ;CC2500_B1.c: 146: unsigned char loop_c;
 17701                           ;CC2500_B1.c: 147: unsigned char temp1, temp2;
 17702                           ;CC2500_B1.c: 149: for (loop_c = 0; loop_c < 47; loop_c++) {
 17703                           
 17704                           ;incstack = 0
 17705                           ; Regs used in _CC2500_InitSetREG: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 17706  1EC0  0020               	movlb	0	; select bank0
 17707  1EC1  01A8               	clrf	CC2500_InitSetREG@loop_c
 17708  1EC2                     L10:	
 17709  1EC2  302F               	movlw	47
 17710  1EC3  0228               	subwf	CC2500_InitSetREG@loop_c,w
 17711  1EC4  1803               	btfsc	3,0
 17712  1EC5  0008               	return
 17713                           
 17714                           ;CC2500_B1.c: 150: temp1 = CC2500_registers_address[loop_c];
 17715  1EC6  0828               	movf	CC2500_InitSetREG@loop_c,w
 17716  1EC7  3E00               	addlw	low (_CC2500_registers_address| (0+32768))
 17717  1EC8  0084               	movwf	4
 17718  1EC9  3090               	movlw	high (_CC2500_registers_address| (0+32768))
 17719  1ECA  1803               	skipnc
 17720  1ECB  3E01               	addlw	1
 17721  1ECC  0085               	movwf	5
 17722  1ECD  0800               	movf	0,w	;code access
 17723  1ECE  00A5               	movwf	??_CC2500_InitSetREG
 17724  1ECF  0825               	movf	??_CC2500_InitSetREG,w
 17725  1ED0  00A6               	movwf	CC2500_InitSetREG@temp1
 17726                           
 17727                           ;CC2500_B1.c: 151: temp2 = CC2500_rfSettings[loop_c];
 17728  1ED1  0828               	movf	CC2500_InitSetREG@loop_c,w
 17729  1ED2  3E2F               	addlw	low (_CC2500_rfSettings| (0+32768))
 17730  1ED3  0084               	movwf	4
 17731  1ED4  3090               	movlw	high (_CC2500_rfSettings| (0+32768))
 17732  1ED5  1803               	skipnc
 17733  1ED6  3E01               	addlw	1
 17734  1ED7  0085               	movwf	5
 17735  1ED8  0800               	movf	0,w	;code access
 17736  1ED9  00A5               	movwf	??_CC2500_InitSetREG
 17737  1EDA  0825               	movf	??_CC2500_InitSetREG,w
 17738  1EDB  00A7               	movwf	CC2500_InitSetREG@temp2
 17739                           
 17740                           ;CC2500_B1.c: 153: CC2500_WriteREG(temp1, temp2);
 17741  1EDC  0827               	movf	CC2500_InitSetREG@temp2,w
 17742  1EDD  00A5               	movwf	??_CC2500_InitSetREG
 17743  1EDE  0825               	movf	??_CC2500_InitSetREG,w
 17744  1EDF  00A2               	movwf	CC2500_WriteREG@value
 17745  1EE0  0826               	movf	CC2500_InitSetREG@temp1,w
 17746  1EE1  319C  24DE  319E   	fcall	_CC2500_WriteREG
 17747  1EE4  3001               	movlw	1
 17748  1EE5  0020               	movlb	0	; select bank0
 17749  1EE6  00A5               	movwf	??_CC2500_InitSetREG
 17750  1EE7  0825               	movf	??_CC2500_InitSetREG,w
 17751  1EE8  07A8               	addwf	CC2500_InitSetREG@loop_c,f
 17752  1EE9  2EC2               	goto	L10
 17753  1EEA                     __end_of_CC2500_InitSetREG:	
 17754                           
 17755                           	psect	text121
 17756  1DD8                     __ptext121:	
 17757 ;; *************** function _CC2500_InitPATable *****************
 17758 ;; Defined at:
 17759 ;;		line 160 in file "../src/CC2500_B1.c"
 17760 ;; Parameters:    Size  Location     Type
 17761 ;;		None
 17762 ;; Auto vars:     Size  Location     Type
 17763 ;;  loop_d          1    7[BANK0 ] unsigned char 
 17764 ;;  temp            1    6[BANK0 ] unsigned char 
 17765 ;; Return value:  Size  Location     Type
 17766 ;;		None               void
 17767 ;; Registers used:
 17768 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 17769 ;; Tracked objects:
 17770 ;;		On entry : 0/0
 17771 ;;		On exit  : 0/0
 17772 ;;		Unchanged: 0/0
 17773 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17774 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17775 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17776 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17777 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17778 ;;Total ram usage:        3 bytes
 17779 ;; Hardware stack levels used:    1
 17780 ;; Hardware stack levels required when called:    7
 17781 ;; This function calls:
 17782 ;;		_CC2500_WriteREG
 17783 ;; This function is called by:
 17784 ;;		_CC2500_PowerOnInitial
 17785 ;; This function uses a non-reentrant model
 17786 ;;
 17787                           
 17788                           
 17789                           ;psect for function _CC2500_InitPATable
 17790  1DD8                     _CC2500_InitPATable:	
 17791                           
 17792                           ;CC2500_B1.c: 161: unsigned char loop_d;
 17793                           ;CC2500_B1.c: 162: unsigned char temp;
 17794                           ;CC2500_B1.c: 164: for (loop_d = 0; loop_d < 8; loop_d++) {
 17795                           
 17796                           ;incstack = 0
 17797                           ; Regs used in _CC2500_InitPATable: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 17798  1DD8  0020               	movlb	0	; select bank0
 17799  1DD9  01A7               	clrf	CC2500_InitPATable@loop_d
 17800  1DDA                     L11:	
 17801  1DDA  3008               	movlw	8
 17802  1DDB  0227               	subwf	CC2500_InitPATable@loop_d,w
 17803  1DDC  1803               	btfsc	3,0
 17804  1DDD  0008               	return
 17805                           
 17806                           ;CC2500_B1.c: 165: temp = CC2500_patable_vaule[loop_d];
 17807  1DDE  0827               	movf	CC2500_InitPATable@loop_d,w
 17808  1DDF  3E5E               	addlw	low (_CC2500_patable_vaule| (0+32768))
 17809  1DE0  0084               	movwf	4
 17810  1DE1  3090               	movlw	high (_CC2500_patable_vaule| (0+32768))
 17811  1DE2  1803               	skipnc
 17812  1DE3  3E01               	addlw	1
 17813  1DE4  0085               	movwf	5
 17814  1DE5  0800               	movf	0,w	;code access
 17815  1DE6  00A5               	movwf	??_CC2500_InitPATable
 17816  1DE7  0825               	movf	??_CC2500_InitPATable,w
 17817  1DE8  00A6               	movwf	CC2500_InitPATable@temp
 17818                           
 17819                           ;CC2500_B1.c: 166: CC2500_WriteREG(0x3E, temp);
 17820  1DE9  0826               	movf	CC2500_InitPATable@temp,w
 17821  1DEA  00A5               	movwf	??_CC2500_InitPATable
 17822  1DEB  0825               	movf	??_CC2500_InitPATable,w
 17823  1DEC  00A2               	movwf	CC2500_WriteREG@value
 17824  1DED  303E               	movlw	62
 17825  1DEE  319C  24DE  319D   	fcall	_CC2500_WriteREG
 17826  1DF1  3001               	movlw	1
 17827  1DF2  0020               	movlb	0	; select bank0
 17828  1DF3  00A5               	movwf	??_CC2500_InitPATable
 17829  1DF4  0825               	movf	??_CC2500_InitPATable,w
 17830  1DF5  07A7               	addwf	CC2500_InitPATable@loop_d,f
 17831  1DF6  2DDA               	goto	L11
 17832  1DF7                     __end_of_CC2500_InitPATable:	
 17833                           
 17834                           	psect	text122
 17835  1CDE                     __ptext122:	
 17836 ;; *************** function _CC2500_WriteREG *****************
 17837 ;; Defined at:
 17838 ;;		line 237 in file "../src/CC2500_B1.c"
 17839 ;; Parameters:    Size  Location     Type
 17840 ;;  w_addr          1    wreg     unsigned char 
 17841 ;;  value           1    2[BANK0 ] unsigned char 
 17842 ;; Auto vars:     Size  Location     Type
 17843 ;;  w_addr          1    4[BANK0 ] unsigned char 
 17844 ;; Return value:  Size  Location     Type
 17845 ;;		None               void
 17846 ;; Registers used:
 17847 ;;		wreg, status,2, status,0, pclath, cstack
 17848 ;; Tracked objects:
 17849 ;;		On entry : 0/0
 17850 ;;		On exit  : 0/0
 17851 ;;		Unchanged: 0/0
 17852 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17853 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17854 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17855 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17856 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17857 ;;Total ram usage:        3 bytes
 17858 ;; Hardware stack levels used:    1
 17859 ;; Hardware stack levels required when called:    6
 17860 ;; This function calls:
 17861 ;;		_CC2500_WriteByte
 17862 ;; This function is called by:
 17863 ;;		_CC2500_InitSetREG
 17864 ;;		_CC2500_InitPATable
 17865 ;; This function uses a non-reentrant model
 17866 ;;
 17867                           
 17868                           
 17869                           ;psect for function _CC2500_WriteREG
 17870  1CDE                     _CC2500_WriteREG:	
 17871                           
 17872                           ;incstack = 0
 17873                           ; Regs used in _CC2500_WriteREG: [wreg+status,2+status,0+pclath+cstack]
 17874                           ;CC2500_WriteREG@w_addr stored from wreg
 17875  1CDE  0020               	movlb	0	; select bank0
 17876  1CDF  00A4               	movwf	CC2500_WriteREG@w_addr
 17877                           
 17878                           ;CC2500_B1.c: 238: RC4 = 0;
 17879  1CE0  120E               	bcf	14,4	;volatile
 17880                           
 17881                           ;CC2500_B1.c: 239: SPI0Buffer = w_addr;
 17882  1CE1  0824               	movf	CC2500_WriteREG@w_addr,w
 17883  1CE2  00A3               	movwf	??_CC2500_WriteREG
 17884  1CE3  0823               	movf	??_CC2500_WriteREG,w
 17885  1CE4  0021               	movlb	1	; select bank1
 17886  1CE5  00D2               	movwf	_SPI0Buffer^(0+128)
 17887  1CE6                     l346:	
 17888                           ;CC2500_B1.c: 240: while (RC2 == 1);
 17889                           
 17890  1CE6  0020               	movlb	0	; select bank0
 17891  1CE7  190E               	btfsc	14,2	;volatile
 17892  1CE8  2CE6               	goto	l346
 17893                           
 17894                           ;CC2500_B1.c: 241: CC2500_WriteByte();
 17895  1CE9  319C  24C5  319C   	fcall	_CC2500_WriteByte
 17896                           
 17897                           ;CC2500_B1.c: 242: SPI0Buffer = value;
 17898  1CEC  0020               	movlb	0	; select bank0
 17899  1CED  0822               	movf	CC2500_WriteREG@value,w
 17900  1CEE  00A3               	movwf	??_CC2500_WriteREG
 17901  1CEF  0823               	movf	??_CC2500_WriteREG,w
 17902  1CF0  0021               	movlb	1	; select bank1
 17903  1CF1  00D2               	movwf	_SPI0Buffer^(0+128)
 17904                           
 17905                           ;CC2500_B1.c: 243: CC2500_WriteByte();
 17906  1CF2  319C  24C5         	fcall	_CC2500_WriteByte
 17907                           
 17908                           ;CC2500_B1.c: 244: RC4 = 1;
 17909  1CF4  0020               	movlb	0	; select bank0
 17910  1CF5  160E               	bsf	14,4	;volatile
 17911  1CF6  0008               	return
 17912  1CF7                     __end_of_CC2500_WriteREG:	
 17913                           
 17914                           	psect	text123
 17915  1A4D                     __ptext123:	
 17916 ;; *************** function _CC2500_FrequencyCabr *****************
 17917 ;; Defined at:
 17918 ;;		line 187 in file "../src/CC2500_B1.c"
 17919 ;; Parameters:    Size  Location     Type
 17920 ;;		None
 17921 ;; Auto vars:     Size  Location     Type
 17922 ;;		None
 17923 ;; Return value:  Size  Location     Type
 17924 ;;		None               void
 17925 ;; Registers used:
 17926 ;;		wreg, status,2, status,0, pclath, cstack
 17927 ;; Tracked objects:
 17928 ;;		On entry : 0/0
 17929 ;;		On exit  : 0/0
 17930 ;;		Unchanged: 0/0
 17931 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17932 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17933 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17934 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17935 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17936 ;;Total ram usage:        0 bytes
 17937 ;; Hardware stack levels used:    1
 17938 ;; Hardware stack levels required when called:    7
 17939 ;; This function calls:
 17940 ;;		_CC2500_WriteCommand
 17941 ;;		_DelayTime_1us
 17942 ;; This function is called by:
 17943 ;;		_CC2500_PowerOnInitial
 17944 ;; This function uses a non-reentrant model
 17945 ;;
 17946                           
 17947                           
 17948                           ;psect for function _CC2500_FrequencyCabr
 17949  1A4D                     _CC2500_FrequencyCabr:	
 17950                           
 17951                           ;CC2500_B1.c: 188: CC2500_WriteCommand(0x33);
 17952                           
 17953                           ;incstack = 0
 17954                           ; Regs used in _CC2500_FrequencyCabr: [wreg+status,2+status,0+pclath+cstack]
 17955  1A4D  3033               	movlw	51
 17956  1A4E  319A  22FD  319A   	fcall	_CC2500_WriteCommand
 17957                           
 17958                           ;CC2500_B1.c: 189: DelayTime_1us(1000);
 17959  1A51  30E8               	movlw	232
 17960  1A52  0020               	movlb	0	; select bank0
 17961  1A53  00A0               	movwf	DelayTime_1us@count
 17962  1A54  3003               	movlw	3
 17963  1A55  00A1               	movwf	DelayTime_1us@count+1
 17964  1A56  3188  2001         	fcall	_DelayTime_1us
 17965  1A58  0008               	return
 17966  1A59                     __end_of_CC2500_FrequencyCabr:	
 17967                           
 17968                           	psect	text124
 17969  0801                     __ptext124:	
 17970 ;; *************** function _DelayTime_1us *****************
 17971 ;; Defined at:
 17972 ;;		line 293 in file "../src/CC2500_B1.c"
 17973 ;; Parameters:    Size  Location     Type
 17974 ;;  count           2    0[BANK0 ] int 
 17975 ;; Auto vars:     Size  Location     Type
 17976 ;;  j               2    4[BANK0 ] unsigned int 
 17977 ;;  i               2    2[BANK0 ] unsigned int 
 17978 ;; Return value:  Size  Location     Type
 17979 ;;		None               void
 17980 ;; Registers used:
 17981 ;;		wreg, status,2
 17982 ;; Tracked objects:
 17983 ;;		On entry : 0/0
 17984 ;;		On exit  : 0/0
 17985 ;;		Unchanged: 0/0
 17986 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17987 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17988 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17989 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17990 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17991 ;;Total ram usage:        6 bytes
 17992 ;; Hardware stack levels used:    1
 17993 ;; Hardware stack levels required when called:    5
 17994 ;; This function calls:
 17995 ;;		Nothing
 17996 ;; This function is called by:
 17997 ;;		_CC2500_PowerRST
 17998 ;;		_CC2500_FrequencyCabr
 17999 ;; This function uses a non-reentrant model
 18000 ;;
 18001                           
 18002                           
 18003                           ;psect for function _DelayTime_1us
 18004  0801                     _DelayTime_1us:	
 18005                           
 18006                           ;CC2500_B1.c: 294: unsigned int i, j;
 18007                           ;CC2500_B1.c: 295: for (i = 1; i < count; i++)
 18008                           
 18009                           ;incstack = 0
 18010                           ; Regs used in _DelayTime_1us: [wreg+status,2]
 18011  0801  3001               	movlw	1
 18012  0802  0020               	movlb	0	; select bank0
 18013  0803  00A2               	movwf	DelayTime_1us@i
 18014  0804  3000               	movlw	0
 18015  0805  00A3               	movwf	DelayTime_1us@i+1
 18016  0806                     l370:	
 18017  0806  0821               	movf	DelayTime_1us@count+1,w
 18018  0807  0223               	subwf	DelayTime_1us@i+1,w
 18019  0808  1D03               	skipz
 18020  0809  280C               	goto	u5685
 18021  080A  0820               	movf	DelayTime_1us@count,w
 18022  080B  0222               	subwf	DelayTime_1us@i,w
 18023  080C                     u5685:	
 18024  080C  1803               	btfsc	3,0
 18025  080D  0008               	return
 18026                           
 18027                           ;CC2500_B1.c: 296: for (j = 0; j <= 1; j++);
 18028  080E  01A4               	clrf	DelayTime_1us@j
 18029  080F  01A5               	clrf	DelayTime_1us@j+1
 18030  0810  3000               	movlw	0
 18031  0811  0225               	subwf	DelayTime_1us@j+1,w
 18032  0812  3002               	movlw	2
 18033  0813  1903               	skipnz
 18034  0814  0224               	subwf	DelayTime_1us@j,w
 18035  0815  1803               	btfsc	3,0
 18036  0816  2822               	goto	l6735
 18037  0817                     l6733:	
 18038  0817  3001               	movlw	1
 18039  0818  07A4               	addwf	DelayTime_1us@j,f
 18040  0819  3000               	movlw	0
 18041  081A  3DA5               	addwfc	DelayTime_1us@j+1,f
 18042  081B  3000               	movlw	0
 18043  081C  0225               	subwf	DelayTime_1us@j+1,w
 18044  081D  3002               	movlw	2
 18045  081E  1903               	skipnz
 18046  081F  0224               	subwf	DelayTime_1us@j,w
 18047  0820  1C03               	skipc
 18048  0821  2817               	goto	l6733
 18049  0822                     l6735:	
 18050  0822  3001               	movlw	1
 18051  0823  07A2               	addwf	DelayTime_1us@i,f
 18052  0824  3000               	movlw	0
 18053  0825  3DA3               	addwfc	DelayTime_1us@i+1,f
 18054  0826  2806               	goto	l370
 18055  0827                     __end_of_DelayTime_1us:	
 18056                           
 18057                           	psect	text125
 18058  1984                     __ptext125:	
 18059 ;; *************** function _CC2500_ClearTXFIFO *****************
 18060 ;; Defined at:
 18061 ;;		line 173 in file "../src/CC2500_B1.c"
 18062 ;; Parameters:    Size  Location     Type
 18063 ;;		None
 18064 ;; Auto vars:     Size  Location     Type
 18065 ;;		None
 18066 ;; Return value:  Size  Location     Type
 18067 ;;		None               void
 18068 ;; Registers used:
 18069 ;;		wreg, status,2, status,0, pclath, cstack
 18070 ;; Tracked objects:
 18071 ;;		On entry : 0/0
 18072 ;;		On exit  : 0/0
 18073 ;;		Unchanged: 0/0
 18074 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18075 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18076 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18077 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18078 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18079 ;;Total ram usage:        0 bytes
 18080 ;; Hardware stack levels used:    1
 18081 ;; Hardware stack levels required when called:    7
 18082 ;; This function calls:
 18083 ;;		_CC2500_WriteCommand
 18084 ;; This function is called by:
 18085 ;;		_CC2500_PowerOnInitial
 18086 ;; This function uses a non-reentrant model
 18087 ;;
 18088                           
 18089                           
 18090                           ;psect for function _CC2500_ClearTXFIFO
 18091  1984                     _CC2500_ClearTXFIFO:	
 18092                           
 18093                           ;CC2500_B1.c: 174: CC2500_WriteCommand(0x3B);
 18094                           
 18095                           ;incstack = 0
 18096                           ; Regs used in _CC2500_ClearTXFIFO: [wreg+status,2+status,0+pclath+cstack]
 18097  1984  303B               	movlw	59
 18098  1985  319A  22FD         	fcall	_CC2500_WriteCommand
 18099  1987  0008               	return
 18100  1988                     __end_of_CC2500_ClearTXFIFO:	
 18101                           
 18102                           	psect	text126
 18103  1980                     __ptext126:	
 18104 ;; *************** function _CC2500_ClearRXFIFO *****************
 18105 ;; Defined at:
 18106 ;;		line 180 in file "../src/CC2500_B1.c"
 18107 ;; Parameters:    Size  Location     Type
 18108 ;;		None
 18109 ;; Auto vars:     Size  Location     Type
 18110 ;;		None
 18111 ;; Return value:  Size  Location     Type
 18112 ;;		None               void
 18113 ;; Registers used:
 18114 ;;		wreg, status,2, status,0, pclath, cstack
 18115 ;; Tracked objects:
 18116 ;;		On entry : 0/0
 18117 ;;		On exit  : 0/0
 18118 ;;		Unchanged: 0/0
 18119 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18120 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18121 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18122 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18123 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18124 ;;Total ram usage:        0 bytes
 18125 ;; Hardware stack levels used:    1
 18126 ;; Hardware stack levels required when called:    7
 18127 ;; This function calls:
 18128 ;;		_CC2500_WriteCommand
 18129 ;; This function is called by:
 18130 ;;		_CC2500_PowerOnInitial
 18131 ;; This function uses a non-reentrant model
 18132 ;;
 18133                           
 18134                           
 18135                           ;psect for function _CC2500_ClearRXFIFO
 18136  1980                     _CC2500_ClearRXFIFO:	
 18137                           
 18138                           ;CC2500_B1.c: 181: CC2500_WriteCommand(0x3A);
 18139                           
 18140                           ;incstack = 0
 18141                           ; Regs used in _CC2500_ClearRXFIFO: [wreg+status,2+status,0+pclath+cstack]
 18142  1980  303A               	movlw	58
 18143  1981  319A  22FD         	fcall	_CC2500_WriteCommand
 18144  1983  0008               	return
 18145  1984                     __end_of_CC2500_ClearRXFIFO:	
 18146                           
 18147                           	psect	text127
 18148  1AFD                     __ptext127:	
 18149 ;; *************** function _CC2500_WriteCommand *****************
 18150 ;; Defined at:
 18151 ;;		line 263 in file "../src/CC2500_B1.c"
 18152 ;; Parameters:    Size  Location     Type
 18153 ;;  command         1    wreg     unsigned char 
 18154 ;; Auto vars:     Size  Location     Type
 18155 ;;  command         1    3[BANK0 ] unsigned char 
 18156 ;; Return value:  Size  Location     Type
 18157 ;;		None               void
 18158 ;; Registers used:
 18159 ;;		wreg, status,2, status,0, pclath, cstack
 18160 ;; Tracked objects:
 18161 ;;		On entry : 0/0
 18162 ;;		On exit  : 0/0
 18163 ;;		Unchanged: 0/0
 18164 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18165 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18166 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18167 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18168 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18169 ;;Total ram usage:        2 bytes
 18170 ;; Hardware stack levels used:    1
 18171 ;; Hardware stack levels required when called:    6
 18172 ;; This function calls:
 18173 ;;		_CC2500_WriteByte
 18174 ;; This function is called by:
 18175 ;;		_CC2500_TxData
 18176 ;;		_CC2500_RxData
 18177 ;;		_CC2500_ClearTXFIFO
 18178 ;;		_CC2500_ClearRXFIFO
 18179 ;;		_CC2500_FrequencyCabr
 18180 ;;		_CC2500_SIDLEMode
 18181 ;;		_setRF_Main
 18182 ;;		_RF_RxDisable
 18183 ;; This function uses a non-reentrant model
 18184 ;;
 18185                           
 18186                           
 18187                           ;psect for function _CC2500_WriteCommand
 18188  1AFD                     _CC2500_WriteCommand:	
 18189                           
 18190                           ;incstack = 0
 18191                           ; Regs used in _CC2500_WriteCommand: [wreg+status,2+status,0+pclath+cstack]
 18192                           ;CC2500_WriteCommand@command stored from wreg
 18193  1AFD  0020               	movlb	0	; select bank0
 18194  1AFE  00A3               	movwf	CC2500_WriteCommand@command
 18195                           
 18196                           ;CC2500_B1.c: 264: RC4 = 0;
 18197  1AFF  120E               	bcf	14,4	;volatile
 18198                           
 18199                           ;CC2500_B1.c: 265: SPI0Buffer = command;
 18200  1B00  0823               	movf	CC2500_WriteCommand@command,w
 18201  1B01  00A2               	movwf	??_CC2500_WriteCommand
 18202  1B02  0822               	movf	??_CC2500_WriteCommand,w
 18203  1B03  0021               	movlb	1	; select bank1
 18204  1B04  00D2               	movwf	_SPI0Buffer^(0+128)
 18205  1B05                     l358:	
 18206                           ;CC2500_B1.c: 267: while (RC2 == 1);
 18207                           
 18208  1B05  0020               	movlb	0	; select bank0
 18209  1B06  190E               	btfsc	14,2	;volatile
 18210  1B07  2B05               	goto	l358
 18211                           
 18212                           ;CC2500_B1.c: 269: CC2500_WriteByte();
 18213  1B08  319C  24C5         	fcall	_CC2500_WriteByte
 18214                           
 18215                           ;CC2500_B1.c: 270: RC4 = 1;
 18216  1B0A  0020               	movlb	0	; select bank0
 18217  1B0B  160E               	bsf	14,4	;volatile
 18218  1B0C  0008               	return
 18219  1B0D                     __end_of_CC2500_WriteCommand:	
 18220                           
 18221                           	psect	text128
 18222  1CC5                     __ptext128:	
 18223 ;; *************** function _CC2500_WriteByte *****************
 18224 ;; Defined at:
 18225 ;;		line 205 in file "../src/CC2500_B1.c"
 18226 ;; Parameters:    Size  Location     Type
 18227 ;;		None
 18228 ;; Auto vars:     Size  Location     Type
 18229 ;;  loop_a          1    1[BANK0 ] unsigned char 
 18230 ;; Return value:  Size  Location     Type
 18231 ;;		None               void
 18232 ;; Registers used:
 18233 ;;		wreg, status,2, status,0
 18234 ;; Tracked objects:
 18235 ;;		On entry : 0/0
 18236 ;;		On exit  : 0/0
 18237 ;;		Unchanged: 0/0
 18238 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18239 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18240 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18241 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18242 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18243 ;;Total ram usage:        2 bytes
 18244 ;; Hardware stack levels used:    1
 18245 ;; Hardware stack levels required when called:    5
 18246 ;; This function calls:
 18247 ;;		Nothing
 18248 ;; This function is called by:
 18249 ;;		_CC2500_TxData
 18250 ;;		_CC2500_RxData
 18251 ;;		_CC2500_PowerRST
 18252 ;;		_CC2500_WriteREG
 18253 ;;		_CC2500_WriteCommand
 18254 ;;		_CC2500_ReadStatus
 18255 ;;		_CC2500_ReadREG
 18256 ;; This function uses a non-reentrant model
 18257 ;;
 18258                           
 18259                           
 18260                           ;psect for function _CC2500_WriteByte
 18261  1CC5                     _CC2500_WriteByte:	
 18262                           
 18263                           ;CC2500_B1.c: 206: unsigned char loop_a;
 18264                           ;CC2500_B1.c: 207: for (loop_a = 0; loop_a < 8; loop_a++) {
 18265                           
 18266                           ;incstack = 0
 18267                           ; Regs used in _CC2500_WriteByte: [wreg+status,2+status,0]
 18268  1CC5  0020               	movlb	0	; select bank0
 18269  1CC6  01A1               	clrf	CC2500_WriteByte@loop_a
 18270  1CC7                     L12:	
 18271  1CC7  3008               	movlw	8
 18272  1CC8  0221               	subwf	CC2500_WriteByte@loop_a,w
 18273  1CC9  1803               	btfsc	3,0
 18274  1CCA  0008               	return
 18275                           
 18276                           ;CC2500_B1.c: 208: if (SPI0Buffer & 0x80)
 18277  1CCB  0021               	movlb	1	; select bank1
 18278  1CCC  1FD2               	btfss	_SPI0Buffer^(0+128),7
 18279  1CCD  2CD1               	goto	l334
 18280                           
 18281                           ;CC2500_B1.c: 209: RC0 = 1;
 18282  1CCE  0020               	movlb	0	; select bank0
 18283  1CCF  140E               	bsf	14,0	;volatile
 18284  1CD0  2CD3               	goto	l335
 18285  1CD1                     l334:	
 18286                           
 18287                           ;CC2500_B1.c: 210: else
 18288                           ;CC2500_B1.c: 211: RC0 = 0;
 18289  1CD1  0020               	movlb	0	; select bank0
 18290  1CD2  100E               	bcf	14,0	;volatile
 18291  1CD3                     l335:	
 18292                           
 18293                           ;CC2500_B1.c: 212: RC1 = 1;
 18294  1CD3  148E               	bsf	14,1	;volatile
 18295                           
 18296                           ;CC2500_B1.c: 213: SPI0Buffer <<= 1;
 18297  1CD4  1003               	clrc
 18298  1CD5  0021               	movlb	1	; select bank1
 18299  1CD6  0DD2               	rlf	_SPI0Buffer^(0+128),f
 18300                           
 18301                           ;CC2500_B1.c: 214: RC1 = 0;
 18302  1CD7  0020               	movlb	0	; select bank0
 18303  1CD8  108E               	bcf	14,1	;volatile
 18304  1CD9  3001               	movlw	1
 18305  1CDA  00A0               	movwf	??_CC2500_WriteByte
 18306  1CDB  0820               	movf	??_CC2500_WriteByte,w
 18307  1CDC  07A1               	addwf	CC2500_WriteByte@loop_a,f
 18308  1CDD  2CC7               	goto	L12
 18309  1CDE                     __end_of_CC2500_WriteByte:	
 18310                           
 18311                           	psect	text129
 18312  13B5                     __ptext129:	
 18313 ;; *************** function _Buzzer_Main *****************
 18314 ;; Defined at:
 18315 ;;		line 46 in file "../src/Buzzer_B1.c"
 18316 ;; Parameters:    Size  Location     Type
 18317 ;;		None
 18318 ;; Auto vars:     Size  Location     Type
 18319 ;;		None
 18320 ;; Return value:  Size  Location     Type
 18321 ;;		None               void
 18322 ;; Registers used:
 18323 ;;		wreg, status,2, status,0
 18324 ;; Tracked objects:
 18325 ;;		On entry : 0/0
 18326 ;;		On exit  : 0/0
 18327 ;;		Unchanged: 0/0
 18328 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18329 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18330 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18331 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18332 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18333 ;;Total ram usage:        1 bytes
 18334 ;; Hardware stack levels used:    1
 18335 ;; Hardware stack levels required when called:    5
 18336 ;; This function calls:
 18337 ;;		Nothing
 18338 ;; This function is called by:
 18339 ;;		_main
 18340 ;; This function uses a non-reentrant model
 18341 ;;
 18342                           
 18343                           
 18344                           ;psect for function _Buzzer_Main
 18345  13B5                     _Buzzer_Main:	
 18346                           
 18347                           ;Buzzer_B1.c: 47: if (Buz1.GO == 1) {
 18348                           
 18349                           ;incstack = 0
 18350                           ; Regs used in _Buzzer_Main: [wreg+status,2+status,0]
 18351  13B5  0021               	movlb	1	; select bank1
 18352  13B6  1CB5               	btfss	_Buz1^(0+128),1
 18353  13B7  0008               	return
 18354                           
 18355                           ;Buzzer_B1.c: 48: Buz1.Counter++;
 18356  13B8  3001               	movlw	1
 18357  13B9  07B6               	addwf	(_Buz1^(0+128)+1),f
 18358  13BA  3000               	movlw	0
 18359  13BB  3DB7               	addwfc	((_Buz1+1)^(0+128)+1),f
 18360                           
 18361                           ;Buzzer_B1.c: 49: if (Buz1.Counter >= Buz1.TimeValue) {
 18362  13BC  083C               	movf	((_Buz1+1)^(0+128)+6),w
 18363  13BD  0237               	subwf	((_Buz1+1)^(0+128)+1),w
 18364  13BE  1D03               	skipz
 18365  13BF  2BC2               	goto	u7275
 18366  13C0  083B               	movf	(_Buz1^(0+128)+6),w
 18367  13C1  0236               	subwf	(_Buz1^(0+128)+1),w
 18368  13C2                     u7275:	
 18369  13C2  1C03               	skipc
 18370  13C3  0008               	return
 18371                           
 18372                           ;Buzzer_B1.c: 50: Buz1.Counter = 0;
 18373  13C4  01B6               	clrf	(_Buz1^(0+128)+1)
 18374  13C5  01B7               	clrf	((_Buz1+1)^(0+128)+1)
 18375                           
 18376                           ;Buzzer_B1.c: 51: Buz1.Switch = (RB3 == 1) ? 1 : 0;
 18377  13C6  12B5               	bcf	_Buz1^(0+128),5
 18378  13C7  0020               	movlb	0	; select bank0
 18379  13C8  1D8D               	btfss	13,3	;volatile
 18380  13C9  2BCC               	goto	l7695
 18381  13CA  0021               	movlb	1	; select bank1
 18382  13CB  16B5               	bsf	_Buz1^(0+128),5
 18383  13CC                     l7695:	
 18384                           
 18385                           ;Buzzer_B1.c: 52: if (Buz1.Switch == 0) {
 18386  13CC  0021               	movlb	1	; select bank1
 18387  13CD  1AB5               	btfsc	_Buz1^(0+128),5
 18388  13CE  2BF8               	goto	l116
 18389                           
 18390                           ;Buzzer_B1.c: 53: if (Buz1.Count == 0) {
 18391  13CF  08B8               	movf	(_Buz1^(0+128)+3),f
 18392  13D0  1D03               	skipz
 18393  13D1  2BF4               	goto	l117
 18394                           
 18395                           ;Buzzer_B1.c: 54: if (Buz1.BufferStatus1 == 1) {
 18396  13D2  1DB5               	btfss	_Buz1^(0+128),3
 18397  13D3  2BE2               	goto	l118
 18398                           
 18399                           ;Buzzer_B1.c: 55: Buz1.BufferStatus1 = 0;
 18400  13D4  11B5               	bcf	_Buz1^(0+128),3
 18401                           
 18402                           ;Buzzer_B1.c: 56: Buz1.Count = Buz1.CountBuffer1;
 18403  13D5  0839               	movf	(_Buz1^(0+128)+4),w
 18404  13D6  0020               	movlb	0	; select bank0
 18405  13D7  00A0               	movwf	??_Buzzer_Main
 18406  13D8  0820               	movf	??_Buzzer_Main,w
 18407  13D9  0021               	movlb	1	; select bank1
 18408  13DA  00B8               	movwf	(_Buz1^(0+128)+3)
 18409                           
 18410                           ;Buzzer_B1.c: 57: Buz1.TimeValue = Buz1.TimeValueBuffer1;
 18411  13DB  083E               	movf	((_Buz1+1)^(0+128)+8),w
 18412  13DC  01BC               	clrf	((_Buz1+1)^(0+128)+6)
 18413  13DD  07BC               	addwf	((_Buz1+1)^(0+128)+6),f
 18414  13DE  083D               	movf	(_Buz1^(0+128)+8),w
 18415  13DF  01BB               	clrf	(_Buz1^(0+128)+6)
 18416  13E0  07BB               	addwf	(_Buz1^(0+128)+6),f
 18417                           
 18418                           ;Buzzer_B1.c: 58: } else if (Buz1.BufferStatus2 == 1) {
 18419  13E1  0008               	return
 18420  13E2                     l118:	
 18421  13E2  1E35               	btfss	_Buz1^(0+128),4
 18422  13E3  2BF2               	goto	l120
 18423                           
 18424                           ;Buzzer_B1.c: 59: Buz1.BufferStatus2 = 0;
 18425  13E4  1235               	bcf	_Buz1^(0+128),4
 18426                           
 18427                           ;Buzzer_B1.c: 60: Buz1.Count = Buz1.CountBuffer2;
 18428  13E5  083A               	movf	(_Buz1^(0+128)+5),w
 18429  13E6  0020               	movlb	0	; select bank0
 18430  13E7  00A0               	movwf	??_Buzzer_Main
 18431  13E8  0820               	movf	??_Buzzer_Main,w
 18432  13E9  0021               	movlb	1	; select bank1
 18433  13EA  00B8               	movwf	(_Buz1^(0+128)+3)
 18434                           
 18435                           ;Buzzer_B1.c: 61: Buz1.TimeValue = Buz1.TimeValueBuffer2;
 18436  13EB  0840               	movf	((_Buz1+1)^(0+128)+10),w
 18437  13EC  01BC               	clrf	((_Buz1+1)^(0+128)+6)
 18438  13ED  07BC               	addwf	((_Buz1+1)^(0+128)+6),f
 18439  13EE  083F               	movf	(_Buz1^(0+128)+10),w
 18440  13EF  01BB               	clrf	(_Buz1^(0+128)+6)
 18441  13F0  07BB               	addwf	(_Buz1^(0+128)+6),f
 18442                           
 18443                           ;Buzzer_B1.c: 62: } else {
 18444  13F1  0008               	return
 18445  13F2                     l120:	
 18446                           
 18447                           ;Buzzer_B1.c: 63: Buz1.GO = 0;
 18448  13F2  10B5               	bcf	_Buz1^(0+128),1
 18449                           
 18450                           ;Buzzer_B1.c: 64: }
 18451                           ;Buzzer_B1.c: 65: } else {
 18452  13F3  0008               	return
 18453  13F4                     l117:	
 18454                           
 18455                           ;Buzzer_B1.c: 66: Buz1.Switch = 1;
 18456  13F4  16B5               	bsf	_Buz1^(0+128),5
 18457                           
 18458                           ;Buzzer_B1.c: 68: RB3 = 1;
 18459  13F5  0020               	movlb	0	; select bank0
 18460  13F6  158D               	bsf	13,3	;volatile
 18461                           
 18462                           ;Buzzer_B1.c: 69: }
 18463                           ;Buzzer_B1.c: 70: } else {
 18464  13F7  0008               	return
 18465  13F8                     l116:	
 18466                           
 18467                           ;Buzzer_B1.c: 71: Buz1.Switch = 0;
 18468  13F8  12B5               	bcf	_Buz1^(0+128),5
 18469                           
 18470                           ;Buzzer_B1.c: 73: RB3 = 0;
 18471  13F9  0020               	movlb	0	; select bank0
 18472  13FA  118D               	bcf	13,3	;volatile
 18473                           
 18474                           ;Buzzer_B1.c: 75: Buz1.Count--;
 18475  13FB  3001               	movlw	1
 18476  13FC  0021               	movlb	1	; select bank1
 18477  13FD  02B8               	subwf	(_Buz1^(0+128)+3),f
 18478  13FE  0008               	return
 18479  13FF                     __end_of_Buzzer_Main:	
 18480                           
 18481                           	psect	text130
 18482  196E                     __ptext130:	
 18483 ;; *************** function _Buzzer_Initialization *****************
 18484 ;; Defined at:
 18485 ;;		line 11 in file "../src/Buzzer_B1.c"
 18486 ;; Parameters:    Size  Location     Type
 18487 ;;		None
 18488 ;; Auto vars:     Size  Location     Type
 18489 ;;		None
 18490 ;; Return value:  Size  Location     Type
 18491 ;;		None               void
 18492 ;; Registers used:
 18493 ;;		None
 18494 ;; Tracked objects:
 18495 ;;		On entry : 0/0
 18496 ;;		On exit  : 0/0
 18497 ;;		Unchanged: 0/0
 18498 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18499 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18500 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18501 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18502 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18503 ;;Total ram usage:        0 bytes
 18504 ;; Hardware stack levels used:    1
 18505 ;; Hardware stack levels required when called:    5
 18506 ;; This function calls:
 18507 ;;		Nothing
 18508 ;; This function is called by:
 18509 ;;		_main
 18510 ;; This function uses a non-reentrant model
 18511 ;;
 18512                           
 18513                           
 18514                           ;psect for function _Buzzer_Initialization
 18515  196E                     _Buzzer_Initialization:	
 18516                           
 18517                           ;Buzzer_B1.c: 13: Buz1.Enable = 1;
 18518                           
 18519                           ;incstack = 0
 18520                           ; Regs used in _Buzzer_Initialization: []
 18521  196E  0021               	movlb	1	; select bank1
 18522  196F  1435               	bsf	_Buz1^(0+128),0
 18523  1970  0008               	return
 18524  1971                     __end_of_Buzzer_Initialization:	
 18525                           
 18526                           	psect	intentry
 18527  0004                     __pintentry:	
 18528 ;; *************** function _ISR *****************
 18529 ;; Defined at:
 18530 ;;		line 109 in file "../src/MCU_B1.c"
 18531 ;; Parameters:    Size  Location     Type
 18532 ;;		None
 18533 ;; Auto vars:     Size  Location     Type
 18534 ;;		None
 18535 ;; Return value:  Size  Location     Type
 18536 ;;		None               void
 18537 ;; Registers used:
 18538 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18539 ;; Tracked objects:
 18540 ;;		On entry : 0/0
 18541 ;;		On exit  : 0/0
 18542 ;;		Unchanged: 0/0
 18543 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18544 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18545 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18546 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18547 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18548 ;;Total ram usage:        1 bytes
 18549 ;; Hardware stack levels used:    1
 18550 ;; Hardware stack levels required when called:    4
 18551 ;; This function calls:
 18552 ;;		_INT_ISR
 18553 ;;		_IOC_ISR
 18554 ;;		_TMR0_ISR
 18555 ;; This function is called by:
 18556 ;;		Interrupt level 1
 18557 ;; This function uses a non-reentrant model
 18558 ;;
 18559                           
 18560  0004                     _ISR:	
 18561                           
 18562                           ;incstack = 0
 18563                           ; Regs used in _ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 18564  0004  147E               	bsf	126,0	;set compiler interrupt flag
 18565  0005  3180               	pagesel	$
 18566  0006  0020               	movlb	0	; select bank0
 18567  0007  087F               	movf	127,w
 18568  0008  00F7               	movwf	??_ISR
 18569                           
 18570                           ;MCU_B1.c: 111: IOC_ISR();
 18571  0009  319A  22ED  3180   	fcall	_IOC_ISR
 18572                           
 18573                           ;MCU_B1.c: 113: TMR0_ISR();
 18574  000C  319F  27CD  3180   	fcall	_TMR0_ISR
 18575                           
 18576                           ;MCU_B1.c: 115: ;;
 18577                           ;MCU_B1.c: 119: INT_ISR();
 18578  000F  319A  2206         	fcall	_INT_ISR
 18579  0011  0877               	movf	??_ISR,w
 18580  0012  0020               	movlb	0	; select bank0
 18581  0013  00FF               	movwf	127
 18582  0014  107E               	bcf	126,0	;clear compiler interrupt flag
 18583  0015  0009               	retfie
 18584  0016                     __end_of_ISR:	
 18585                           
 18586                           	psect	text132
 18587  1FCD                     __ptext132:	
 18588 ;; *************** function _TMR0_ISR *****************
 18589 ;; Defined at:
 18590 ;;		line 137 in file "../src/MCU_B1.c"
 18591 ;; Parameters:    Size  Location     Type
 18592 ;;		None
 18593 ;; Auto vars:     Size  Location     Type
 18594 ;;		None
 18595 ;; Return value:  Size  Location     Type
 18596 ;;		None               void
 18597 ;; Registers used:
 18598 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18599 ;; Tracked objects:
 18600 ;;		On entry : 0/0
 18601 ;;		On exit  : 0/0
 18602 ;;		Unchanged: 0/0
 18603 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18604 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18605 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18606 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18607 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18608 ;;Total ram usage:        0 bytes
 18609 ;; Hardware stack levels used:    1
 18610 ;; Hardware stack levels required when called:    2
 18611 ;; This function calls:
 18612 ;;		_setDimmerLights_IntrControl
 18613 ;; This function is called by:
 18614 ;;		_ISR
 18615 ;; This function uses a non-reentrant model
 18616 ;;
 18617                           
 18618                           
 18619                           ;psect for function _TMR0_ISR
 18620  1FCD                     _TMR0_ISR:	
 18621                           
 18622                           ;MCU_B1.c: 138: if (TMR0IE == 1 && TMR0IF == 1) {
 18623                           
 18624                           ;incstack = 0
 18625                           ; Regs used in _TMR0_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 18626  1FCD  1E8B               	btfss	11,5	;volatile
 18627  1FCE  0008               	return
 18628  1FCF  1D0B               	btfss	11,2	;volatile
 18629  1FD0  0008               	return
 18630                           
 18631                           ;MCU_B1.c: 139: TMR0 = (256-190);
 18632  1FD1  3042               	movlw	66
 18633  1FD2  0020               	movlb	0	; select bank0
 18634  1FD3  0095               	movwf	21	;volatile
 18635                           
 18636                           ;MCU_B1.c: 140: TMR0IF = 0;
 18637  1FD4  110B               	bcf	11,2	;volatile
 18638                           
 18639                           ;MCU_B1.c: 145: setDimmerLights_IntrControl(1);
 18640  1FD5  3001               	movlw	1
 18641  1FD6  3180  2054  319F   	fcall	_setDimmerLights_IntrControl
 18642                           
 18643                           ;MCU_B1.c: 150: setDimmerLights_IntrControl(2);
 18644  1FD9  3002               	movlw	2
 18645  1FDA  3180  2054  319F   	fcall	_setDimmerLights_IntrControl
 18646                           
 18647                           ;MCU_B1.c: 161: Timer0->Count++;
 18648  1FDD  0021               	movlb	1	; select bank1
 18649  1FDE  0A6E               	incf	_Timer0^(0+128),w
 18650  1FDF  0086               	movwf	6
 18651  1FE0  3001               	movlw	1	; select bank2/3
 18652  1FE1  0087               	movwf	7
 18653  1FE2  3001               	movlw	1
 18654  1FE3  0781               	addwf	1,f
 18655  1FE4  3141               	addfsr 1,1
 18656  1FE5  1803               	skipnc
 18657  1FE6  0A81               	incf	1,f
 18658                           
 18659                           ;MCU_B1.c: 162: if (Timer0->Count == 100) {
 18660  1FE7  0A6E               	incf	_Timer0^(0+128),w
 18661  1FE8  0086               	movwf	6
 18662  1FE9  3001               	movlw	1	; select bank2/3
 18663  1FEA  0087               	movwf	7
 18664  1FEB  3F40               	moviw [0]fsr1
 18665  1FEC  3A64               	xorlw	100
 18666  1FED  1D03               	skipz
 18667  1FEE  2FF1               	goto	u738_25
 18668  1FEF  3F41               	moviw [1]fsr1
 18669  1FF0  3A00               	xorlw	0
 18670  1FF1                     u738_25:	
 18671  1FF1  1D03               	skipz
 18672  1FF2  0008               	return
 18673                           
 18674                           ;MCU_B1.c: 163: Timer0->Count = 0;
 18675  1FF3  0A6E               	incf	_Timer0^(0+128),w
 18676  1FF4  0086               	movwf	6
 18677  1FF5  3001               	movlw	1	; select bank2/3
 18678  1FF6  0087               	movwf	7
 18679  1FF7  3000               	movlw	0
 18680  1FF8  3FC0               	movwi [0]fsr1
 18681  1FF9  3FC1               	movwi [1]fsr1
 18682                           
 18683                           ;MCU_B1.c: 164: myMain->T0_Timerout = 1;
 18684  1FFA  087B               	movf	_myMain,w
 18685  1FFB  0086               	movwf	6
 18686  1FFC  3002               	movlw	2	; select bank4/5
 18687  1FFD  0087               	movwf	7
 18688  1FFE  1481               	bsf	1,1
 18689  1FFF  0008               	return
 18690  2000                     __end_of_TMR0_ISR:	
 18691                           
 18692                           	psect	text133
 18693  0054                     __ptext133:	
 18694 ;; *************** function _setDimmerLights_IntrControl *****************
 18695 ;; Defined at:
 18696 ;;		line 87 in file "../src/Dimmer_B1.c"
 18697 ;; Parameters:    Size  Location     Type
 18698 ;;  lights          1    wreg     unsigned char 
 18699 ;; Auto vars:     Size  Location     Type
 18700 ;;  lights          1    6[COMMON] unsigned char 
 18701 ;; Return value:  Size  Location     Type
 18702 ;;		None               void
 18703 ;; Registers used:
 18704 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18705 ;; Tracked objects:
 18706 ;;		On entry : 0/0
 18707 ;;		On exit  : 0/0
 18708 ;;		Unchanged: 0/0
 18709 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18710 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18711 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18712 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18713 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18714 ;;Total ram usage:        5 bytes
 18715 ;; Hardware stack levels used:    1
 18716 ;; Hardware stack levels required when called:    1
 18717 ;; This function calls:
 18718 ;;		_DimmerIntrPointSelect
 18719 ;;		i1_setLoad_StatusOff
 18720 ;; This function is called by:
 18721 ;;		_TMR0_ISR
 18722 ;; This function uses a non-reentrant model
 18723 ;;
 18724                           
 18725                           
 18726                           ;psect for function _setDimmerLights_IntrControl
 18727  0054                     _setDimmerLights_IntrControl:	
 18728                           
 18729                           ;incstack = 0
 18730                           ; Regs used in _setDimmerLights_IntrControl: [wreg-fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 18731                           ;setDimmerLights_IntrControl@lights stored from wreg
 18732  0054  00F6               	movwf	setDimmerLights_IntrControl@lights
 18733                           
 18734                           ;Dimmer_B1.c: 89: DimmerIntrPointSelect(lights);
 18735  0055  0876               	movf	setDimmerLights_IntrControl@lights,w
 18736  0056  319B  2390  3180   	fcall	_DimmerIntrPointSelect
 18737                           
 18738                           ;Dimmer_B1.c: 90: if (DimmerLightsIntr->GO == 1) {
 18739  0059  087A               	movf	_DimmerLightsIntr,w
 18740  005A  0086               	movwf	6
 18741  005B  3001               	movlw	1	; select bank2/3
 18742  005C  0087               	movwf	7
 18743  005D  1C01               	btfss	1,0
 18744  005E  28B9               	goto	i1l7111
 18745                           
 18746                           ;Dimmer_B1.c: 91: DimmerLightsIntr->Count++;
 18747  005F  3001               	movlw	1
 18748  0060  00F2               	movwf	??_setDimmerLights_IntrControl
 18749  0061  087A               	movf	_DimmerLightsIntr,w
 18750  0062  3E03               	addlw	3
 18751  0063  0086               	movwf	6
 18752  0064  3001               	movlw	1	; select bank2/3
 18753  0065  0087               	movwf	7
 18754  0066  0872               	movf	??_setDimmerLights_IntrControl,w
 18755  0067  0781               	addwf	1,f
 18756                           
 18757                           ;Dimmer_B1.c: 92: if (DimmerLightsIntr->Count >= (DimmerLightsIntr->DimmingValue - Dimme
      +                          r->Correction)) {
 18758  0068  0021               	movlb	1	; select bank1
 18759  0069  084B               	movf	_Dimmer^(0+128),w
 18760  006A  3E02               	addlw	2
 18761  006B  0086               	movwf	6
 18762  006C  0187               	clrf	7
 18763  006D  0801               	movf	1,w
 18764  006E  00F2               	movwf	??_setDimmerLights_IntrControl
 18765  006F  01F3               	clrf	??_setDimmerLights_IntrControl+1
 18766  0070  09F2               	comf	??_setDimmerLights_IntrControl,f
 18767  0071  09F3               	comf	??_setDimmerLights_IntrControl+1,f
 18768  0072  0AF2               	incf	??_setDimmerLights_IntrControl,f
 18769  0073  1903               	skipnz
 18770  0074  0AF3               	incf	??_setDimmerLights_IntrControl+1,f
 18771  0075  087A               	movf	_DimmerLightsIntr,w
 18772  0076  3E04               	addlw	4
 18773  0077  0086               	movwf	6
 18774  0078  3001               	movlw	1	; select bank2/3
 18775  0079  0087               	movwf	7
 18776  007A  0801               	movf	1,w
 18777  007B  0772               	addwf	??_setDimmerLights_IntrControl,w
 18778  007C  00F4               	movwf	??_setDimmerLights_IntrControl+2
 18779  007D  0873               	movf	??_setDimmerLights_IntrControl+1,w
 18780  007E  1803               	skipnc
 18781  007F  0A73               	incf	??_setDimmerLights_IntrControl+1,w
 18782  0080  00F5               	movwf	??_setDimmerLights_IntrControl+3
 18783  0081  087A               	movf	_DimmerLightsIntr,w
 18784  0082  3E03               	addlw	3
 18785  0083  0086               	movwf	6
 18786  0084  3001               	movlw	1	; select bank2/3
 18787  0085  0087               	movwf	7
 18788  0086  0875               	movf	??_setDimmerLights_IntrControl+3,w
 18789  0087  3A80               	xorlw	128
 18790  0088  3C80               	sublw	128
 18791  0089  1D03               	skipz
 18792  008A  288D               	goto	u617_25
 18793  008B  0874               	movf	??_setDimmerLights_IntrControl+2,w
 18794  008C  0201               	subwf	1,w
 18795  008D                     u617_25:	
 18796  008D  1C03               	skipc
 18797  008E  29C8               	goto	i1l7175
 18798                           
 18799                           ;Dimmer_B1.c: 93: DimmerLightsIntr->Count = 0;
 18800  008F  087A               	movf	_DimmerLightsIntr,w
 18801  0090  3E03               	addlw	3
 18802  0091  0086               	movwf	6
 18803  0092  3001               	movlw	1	; select bank2/3
 18804  0093  0087               	movwf	7
 18805  0094  0181               	clrf	1
 18806                           
 18807                           ;Dimmer_B1.c: 94: DimmerLightsIntr->GO = 0;
 18808  0095  087A               	movf	_DimmerLightsIntr,w
 18809  0096  0086               	movwf	6
 18810  0097  3001               	movlw	1	; select bank2/3
 18811  0098  0087               	movwf	7
 18812  0099  1001               	bcf	1,0
 18813                           
 18814                           ;Dimmer_B1.c: 96: if (DimmerLightsIntr->StatusFlag == 1) {
 18815  009A  087A               	movf	_DimmerLightsIntr,w
 18816  009B  0086               	movwf	6
 18817  009C  3001               	movlw	1	; select bank2/3
 18818  009D  0087               	movwf	7
 18819  009E  1F01               	btfss	1,6
 18820  009F  29C8               	goto	i1l7175
 18821                           
 18822                           ;Dimmer_B1.c: 97: DimmerLightsIntr->Flag = 1;
 18823  00A0  087A               	movf	_DimmerLightsIntr,w
 18824  00A1  3E08               	addlw	8
 18825  00A2  0086               	movwf	6
 18826  00A3  3001               	movlw	1	; select bank2/3
 18827  00A4  0087               	movwf	7
 18828  00A5  1401               	bsf	1,0
 18829                           
 18830                           ;Dimmer_B1.c: 98: DimmerLightsIntr->Triac = 1;
 18831  00A6  087A               	movf	_DimmerLightsIntr,w
 18832  00A7  3E08               	addlw	8
 18833  00A8  0086               	movwf	6
 18834  00A9  3001               	movlw	1	; select bank2/3
 18835  00AA  0087               	movwf	7
 18836  00AB  1681               	bsf	1,5
 18837                           
 18838                           ;Dimmer_B1.c: 100: if (lights == 1) {
 18839  00AC  0876               	movf	setDimmerLights_IntrControl@lights,w
 18840  00AD  3A01               	xorlw	1
 18841  00AE  1D03               	skipz
 18842  00AF  28B2               	goto	i1l7107
 18843                           
 18844                           ;Dimmer_B1.c: 101: RA7 = 1;
 18845  00B0  0020               	movlb	0	; select bank0
 18846  00B1  178C               	bsf	12,7	;volatile
 18847  00B2                     i1l7107:	
 18848                           ;Dimmer_B1.c: 102: ;;
 18849                           
 18850                           
 18851                           ;Dimmer_B1.c: 103: }
 18852                           ;Dimmer_B1.c: 106: if (lights == 2) {
 18853  00B2  0876               	movf	setDimmerLights_IntrControl@lights,w
 18854  00B3  3A02               	xorlw	2
 18855  00B4  1D03               	skipz
 18856  00B5  29C8               	goto	i1l7175
 18857                           
 18858                           ;Dimmer_B1.c: 107: RB4 = 1;
 18859  00B6  0020               	movlb	0	; select bank0
 18860  00B7  160D               	bsf	13,4	;volatile
 18861                           
 18862                           ;Dimmer_B1.c: 108: }
 18863                           ;Dimmer_B1.c: 115: }
 18864                           ;Dimmer_B1.c: 116: }
 18865                           ;Dimmer_B1.c: 117: } else {
 18866  00B8  29C8               	goto	i1l7175
 18867  00B9                     i1l7111:	
 18868                           
 18869                           ;Dimmer_B1.c: 118: if (DimmerLightsIntr->Flag == 1) {
 18870  00B9  087A               	movf	_DimmerLightsIntr,w
 18871  00BA  3E08               	addlw	8
 18872  00BB  0086               	movwf	6
 18873  00BC  3001               	movlw	1	; select bank2/3
 18874  00BD  0087               	movwf	7
 18875  00BE  1C01               	btfss	1,0
 18876  00BF  29C8               	goto	i1l7175
 18877                           
 18878                           ;Dimmer_B1.c: 119: DimmerLightsIntr->Flag = 0;
 18879  00C0  087A               	movf	_DimmerLightsIntr,w
 18880  00C1  3E08               	addlw	8
 18881  00C2  0086               	movwf	6
 18882  00C3  3001               	movlw	1	; select bank2/3
 18883  00C4  0087               	movwf	7
 18884  00C5  1001               	bcf	1,0
 18885                           
 18886                           ;Dimmer_B1.c: 120: if (DimmerLightsIntr->Signal == 1) {
 18887  00C6  087A               	movf	_DimmerLightsIntr,w
 18888  00C7  0086               	movwf	6
 18889  00C8  3001               	movlw	1	; select bank2/3
 18890  00C9  0087               	movwf	7
 18891  00CA  1C81               	btfss	1,1
 18892  00CB  29C8               	goto	i1l7175
 18893                           
 18894                           ;Dimmer_B1.c: 121: DimmerLightsIntr->DimmingTime++;
 18895  00CC  3001               	movlw	1
 18896  00CD  00F2               	movwf	??_setDimmerLights_IntrControl
 18897  00CE  0A7A               	incf	_DimmerLightsIntr,w
 18898  00CF  0086               	movwf	6
 18899  00D0  3001               	movlw	1	; select bank2/3
 18900  00D1  0087               	movwf	7
 18901  00D2  0872               	movf	??_setDimmerLights_IntrControl,w
 18902  00D3  0781               	addwf	1,f
 18903                           
 18904                           ;Dimmer_B1.c: 122: if (DimmerLightsIntr->DimmingTime >= DimmerLightsIntr->DimmingTimeVal
      +                          ue) {
 18905  00D4  0A7A               	incf	_DimmerLightsIntr,w
 18906  00D5  0086               	movwf	6
 18907  00D6  3001               	movlw	1	; select bank2/3
 18908  00D7  0087               	movwf	7
 18909  00D8  087A               	movf	_DimmerLightsIntr,w
 18910  00D9  3E02               	addlw	2
 18911  00DA  0084               	movwf	4
 18912  00DB  3001               	movlw	1	; select bank2/3
 18913  00DC  0085               	movwf	5
 18914  00DD  0800               	movf	0,w
 18915  00DE  0201               	subwf	1,w
 18916  00DF  1C03               	skipc
 18917  00E0  29C8               	goto	i1l7175
 18918                           
 18919                           ;Dimmer_B1.c: 123: DimmerLightsIntr->DimmingTime = 0;
 18920  00E1  0A7A               	incf	_DimmerLightsIntr,w
 18921  00E2  0086               	movwf	6
 18922  00E3  3001               	movlw	1	; select bank2/3
 18923  00E4  0087               	movwf	7
 18924  00E5  0181               	clrf	1
 18925                           
 18926                           ;Dimmer_B1.c: 124: if (DimmerLightsIntr->AdjFlag == 1) {
 18927  00E6  087A               	movf	_DimmerLightsIntr,w
 18928  00E7  0086               	movwf	6
 18929  00E8  3001               	movlw	1	; select bank2/3
 18930  00E9  0087               	movwf	7
 18931  00EA  1D81               	btfss	1,3
 18932  00EB  2922               	goto	i1l7137
 18933                           
 18934                           ;Dimmer_B1.c: 125: if (DimmerLightsIntr->AdjStatus == 0) {
 18935  00EC  087A               	movf	_DimmerLightsIntr,w
 18936  00ED  0086               	movwf	6
 18937  00EE  3001               	movlw	1	; select bank2/3
 18938  00EF  0087               	movwf	7
 18939  00F0  1A01               	btfsc	1,4
 18940  00F1  2909               	goto	i1l7131
 18941                           
 18942                           ;Dimmer_B1.c: 126: if (DimmerLightsIntr->DimmingValue > ((char)((100-60)*0.8))) {
 18943  00F2  087A               	movf	_DimmerLightsIntr,w
 18944  00F3  3E04               	addlw	4
 18945  00F4  0086               	movwf	6
 18946  00F5  3001               	movlw	1	; select bank2/3
 18947  00F6  0087               	movwf	7
 18948  00F7  3021               	movlw	33
 18949  00F8  0201               	subwf	1,w
 18950  00F9  1C03               	skipc
 18951  00FA  2903               	goto	i1l7129
 18952                           
 18953                           ;Dimmer_B1.c: 127: DimmerLightsIntr->DimmingValue--;
 18954  00FB  087A               	movf	_DimmerLightsIntr,w
 18955  00FC  3E04               	addlw	4
 18956  00FD  0086               	movwf	6
 18957  00FE  3001               	movlw	1	; select bank2/3
 18958  00FF  0087               	movwf	7
 18959  0100  3001               	movlw	1
 18960  0101  0281               	subwf	1,f
 18961                           
 18962                           ;Dimmer_B1.c: 128: } else {
 18963  0102  29C8               	goto	i1l7175
 18964  0103                     i1l7129:	
 18965                           
 18966                           ;Dimmer_B1.c: 129: DimmerLightsIntr->AdjStatus = 1;
 18967  0103  087A               	movf	_DimmerLightsIntr,w
 18968  0104  0086               	movwf	6
 18969  0105  3001               	movlw	1	; select bank2/3
 18970  0106  0087               	movwf	7
 18971  0107  1601               	bsf	1,4
 18972                           
 18973                           ;Dimmer_B1.c: 130: }
 18974                           ;Dimmer_B1.c: 131: } else {
 18975  0108  29C8               	goto	i1l7175
 18976  0109                     i1l7131:	
 18977                           
 18978                           ;Dimmer_B1.c: 132: if (DimmerLightsIntr->DimmingValue < ((char)((100-25)*0.8))) {
 18979  0109  087A               	movf	_DimmerLightsIntr,w
 18980  010A  3E04               	addlw	4
 18981  010B  0086               	movwf	6
 18982  010C  3001               	movlw	1	; select bank2/3
 18983  010D  0087               	movwf	7
 18984  010E  303C               	movlw	60
 18985  010F  0201               	subwf	1,w
 18986  0110  1803               	skipnc
 18987  0111  291C               	goto	i1l7135
 18988                           
 18989                           ;Dimmer_B1.c: 133: DimmerLightsIntr->DimmingValue++;
 18990  0112  3001               	movlw	1
 18991  0113  00F2               	movwf	??_setDimmerLights_IntrControl
 18992  0114  087A               	movf	_DimmerLightsIntr,w
 18993  0115  3E04               	addlw	4
 18994  0116  0086               	movwf	6
 18995  0117  3001               	movlw	1	; select bank2/3
 18996  0118  0087               	movwf	7
 18997  0119  0872               	movf	??_setDimmerLights_IntrControl,w
 18998  011A  0781               	addwf	1,f
 18999                           
 19000                           ;Dimmer_B1.c: 134: } else {
 19001  011B  29C8               	goto	i1l7175
 19002  011C                     i1l7135:	
 19003                           
 19004                           ;Dimmer_B1.c: 135: DimmerLightsIntr->AdjStatus = 0;
 19005  011C  087A               	movf	_DimmerLightsIntr,w
 19006  011D  0086               	movwf	6
 19007  011E  3001               	movlw	1	; select bank2/3
 19008  011F  0087               	movwf	7
 19009  0120  1201               	bcf	1,4
 19010                           
 19011                           ;Dimmer_B1.c: 136: }
 19012                           ;Dimmer_B1.c: 137: }
 19013                           ;Dimmer_B1.c: 138: } else if (DimmerLightsIntr->AdjRF == 1) {
 19014  0121  29C8               	goto	i1l7175
 19015  0122                     i1l7137:	
 19016  0122  087A               	movf	_DimmerLightsIntr,w
 19017  0123  0086               	movwf	6
 19018  0124  3001               	movlw	1	; select bank2/3
 19019  0125  0087               	movwf	7
 19020  0126  1D01               	btfss	1,2
 19021  0127  2969               	goto	i1l7151
 19022                           
 19023                           ;Dimmer_B1.c: 139: if (DimmerLightsIntr->DimmingValue > DimmerLightsIntr->MaxmumValue) {
 19024  0128  087A               	movf	_DimmerLightsIntr,w
 19025  0129  3E05               	addlw	5
 19026  012A  0086               	movwf	6
 19027  012B  3001               	movlw	1	; select bank2/3
 19028  012C  0087               	movwf	7
 19029  012D  087A               	movf	_DimmerLightsIntr,w
 19030  012E  3E04               	addlw	4
 19031  012F  0084               	movwf	4
 19032  0130  3001               	movlw	1	; select bank2/3
 19033  0131  0085               	movwf	5
 19034  0132  0800               	movf	0,w
 19035  0133  0201               	subwf	1,w
 19036  0134  1803               	skipnc
 19037  0135  293E               	goto	i1l7143
 19038                           
 19039                           ;Dimmer_B1.c: 140: DimmerLightsIntr->DimmingValue--;
 19040  0136  087A               	movf	_DimmerLightsIntr,w
 19041  0137  3E04               	addlw	4
 19042  0138  0086               	movwf	6
 19043  0139  3001               	movlw	1	; select bank2/3
 19044  013A  0087               	movwf	7
 19045  013B  3001               	movlw	1
 19046  013C  0281               	subwf	1,f
 19047                           
 19048                           ;Dimmer_B1.c: 141: } else if (DimmerLightsIntr->DimmingValue < DimmerLightsIntr->MaxmumV
      +                          alue) {
 19049  013D  2955               	goto	i1l7147
 19050  013E                     i1l7143:	
 19051  013E  087A               	movf	_DimmerLightsIntr,w
 19052  013F  3E04               	addlw	4
 19053  0140  0086               	movwf	6
 19054  0141  3001               	movlw	1	; select bank2/3
 19055  0142  0087               	movwf	7
 19056  0143  087A               	movf	_DimmerLightsIntr,w
 19057  0144  3E05               	addlw	5
 19058  0145  0084               	movwf	4
 19059  0146  3001               	movlw	1	; select bank2/3
 19060  0147  0085               	movwf	5
 19061  0148  0800               	movf	0,w
 19062  0149  0201               	subwf	1,w
 19063  014A  1803               	skipnc
 19064  014B  2955               	goto	i1l7147
 19065                           
 19066                           ;Dimmer_B1.c: 142: DimmerLightsIntr->DimmingValue++;
 19067  014C  3001               	movlw	1
 19068  014D  00F2               	movwf	??_setDimmerLights_IntrControl
 19069  014E  087A               	movf	_DimmerLightsIntr,w
 19070  014F  3E04               	addlw	4
 19071  0150  0086               	movwf	6
 19072  0151  3001               	movlw	1	; select bank2/3
 19073  0152  0087               	movwf	7
 19074  0153  0872               	movf	??_setDimmerLights_IntrControl,w
 19075  0154  0781               	addwf	1,f
 19076  0155                     i1l7147:	
 19077                           
 19078                           ;Dimmer_B1.c: 143: }
 19079                           ;Dimmer_B1.c: 144: if (DimmerLightsIntr->DimmingValue == DimmerLightsIntr->MaxmumValue) 
      +                          {
 19080  0155  087A               	movf	_DimmerLightsIntr,w
 19081  0156  3E05               	addlw	5
 19082  0157  0086               	movwf	6
 19083  0158  3001               	movlw	1	; select bank2/3
 19084  0159  0087               	movwf	7
 19085  015A  087A               	movf	_DimmerLightsIntr,w
 19086  015B  3E04               	addlw	4
 19087  015C  0084               	movwf	4
 19088  015D  3001               	movlw	1	; select bank2/3
 19089  015E  0085               	movwf	5
 19090  015F  0800               	movf	0,w
 19091  0160  0601               	xorwf	1,w
 19092  0161  1D03               	skipz
 19093  0162  29C8               	goto	i1l7175
 19094                           
 19095                           ;Dimmer_B1.c: 145: DimmerLightsIntr->AdjRF = 0;
 19096  0163  087A               	movf	_DimmerLightsIntr,w
 19097  0164  0086               	movwf	6
 19098  0165  3001               	movlw	1	; select bank2/3
 19099  0166  0087               	movwf	7
 19100  0167  1101               	bcf	1,2
 19101  0168  2984               	goto	i1l7157
 19102  0169                     i1l7151:	
 19103                           ;Dimmer_B1.c: 147: }
 19104                           ;Dimmer_B1.c: 148: } else {
 19105                           
 19106                           ;Dimmer_B1.c: 146: DimmerLightsIntr->Signal = 0;
 19107                           
 19108                           
 19109                           ;Dimmer_B1.c: 149: if (DimmerLightsIntr->Status == 1) {
 19110  0169  087A               	movf	_DimmerLightsIntr,w
 19111  016A  0086               	movwf	6
 19112  016B  3001               	movlw	1	; select bank2/3
 19113  016C  0087               	movwf	7
 19114  016D  1E81               	btfss	1,5
 19115  016E  298A               	goto	i1l7159
 19116                           
 19117                           ;Dimmer_B1.c: 150: DimmerLightsIntr->DimmingValue--;
 19118  016F  087A               	movf	_DimmerLightsIntr,w
 19119  0170  3E04               	addlw	4
 19120  0171  0086               	movwf	6
 19121  0172  3001               	movlw	1	; select bank2/3
 19122  0173  0087               	movwf	7
 19123  0174  3001               	movlw	1
 19124  0175  0281               	subwf	1,f
 19125                           
 19126                           ;Dimmer_B1.c: 151: if (DimmerLightsIntr->DimmingValue <= DimmerLightsIntr->MaxmumValue) 
      +                          {
 19127  0176  087A               	movf	_DimmerLightsIntr,w
 19128  0177  3E05               	addlw	5
 19129  0178  0086               	movwf	6
 19130  0179  3001               	movlw	1	; select bank2/3
 19131  017A  0087               	movwf	7
 19132  017B  087A               	movf	_DimmerLightsIntr,w
 19133  017C  3E04               	addlw	4
 19134  017D  0084               	movwf	4
 19135  017E  3001               	movlw	1	; select bank2/3
 19136  017F  0085               	movwf	5
 19137  0180  0800               	movf	0,w
 19138  0181  0201               	subwf	1,w
 19139  0182  1C03               	skipc
 19140  0183  29C8               	goto	i1l7175
 19141  0184                     i1l7157:	
 19142                           
 19143                           ;Dimmer_B1.c: 152: DimmerLightsIntr->Signal = 0;
 19144  0184  087A               	movf	_DimmerLightsIntr,w
 19145  0185  0086               	movwf	6
 19146  0186  3001               	movlw	1	; select bank2/3
 19147  0187  0087               	movwf	7
 19148  0188  1081               	bcf	1,1
 19149                           
 19150                           ;Dimmer_B1.c: 153: }
 19151                           ;Dimmer_B1.c: 154: } else {
 19152  0189  29C8               	goto	i1l7175
 19153  018A                     i1l7159:	
 19154                           
 19155                           ;Dimmer_B1.c: 155: DimmerLightsIntr->DimmingValue++;
 19156  018A  3001               	movlw	1
 19157  018B  00F2               	movwf	??_setDimmerLights_IntrControl
 19158  018C  087A               	movf	_DimmerLightsIntr,w
 19159  018D  3E04               	addlw	4
 19160  018E  0086               	movwf	6
 19161  018F  3001               	movlw	1	; select bank2/3
 19162  0190  0087               	movwf	7
 19163  0191  0872               	movf	??_setDimmerLights_IntrControl,w
 19164  0192  0781               	addwf	1,f
 19165                           
 19166                           ;Dimmer_B1.c: 156: if (DimmerLightsIntr->DimmingValue >= DimmerLightsIntr->MinimumValue)
      +                           {
 19167  0193  087A               	movf	_DimmerLightsIntr,w
 19168  0194  3E04               	addlw	4
 19169  0195  0086               	movwf	6
 19170  0196  3001               	movlw	1	; select bank2/3
 19171  0197  0087               	movwf	7
 19172  0198  087A               	movf	_DimmerLightsIntr,w
 19173  0199  3E06               	addlw	6
 19174  019A  0084               	movwf	4
 19175  019B  3001               	movlw	1	; select bank2/3
 19176  019C  0085               	movwf	5
 19177  019D  0800               	movf	0,w
 19178  019E  0201               	subwf	1,w
 19179  019F  1C03               	skipc
 19180  01A0  29C8               	goto	i1l7175
 19181                           
 19182                           ;Dimmer_B1.c: 157: DimmerLightsIntr->Signal = 0;
 19183  01A1  087A               	movf	_DimmerLightsIntr,w
 19184  01A2  0086               	movwf	6
 19185  01A3  3001               	movlw	1	; select bank2/3
 19186  01A4  0087               	movwf	7
 19187  01A5  1081               	bcf	1,1
 19188                           
 19189                           ;Dimmer_B1.c: 158: DimmerLightsIntr->StatusFlag = 0;
 19190  01A6  087A               	movf	_DimmerLightsIntr,w
 19191  01A7  0086               	movwf	6
 19192  01A8  3001               	movlw	1	; select bank2/3
 19193  01A9  0087               	movwf	7
 19194  01AA  1301               	bcf	1,6
 19195                           
 19196                           ;Dimmer_B1.c: 159: DimmerLightsIntr->Clear = 1;
 19197  01AB  087A               	movf	_DimmerLightsIntr,w
 19198  01AC  3E09               	addlw	9
 19199  01AD  0086               	movwf	6
 19200  01AE  3001               	movlw	1	; select bank2/3
 19201  01AF  0087               	movwf	7
 19202  01B0  1501               	bsf	1,2
 19203                           
 19204                           ;Dimmer_B1.c: 160: Dimmer->Detect = 1;
 19205  01B1  0021               	movlb	1	; select bank1
 19206  01B2  084B               	movf	_Dimmer^(0+128),w
 19207  01B3  0086               	movwf	6
 19208  01B4  0187               	clrf	7
 19209  01B5  1401               	bsf	1,0
 19210                           
 19211                           ;Dimmer_B1.c: 162: if (lights == 1) {
 19212  01B6  0876               	movf	setDimmerLights_IntrControl@lights,w
 19213  01B7  3A01               	xorlw	1
 19214  01B8  1D03               	skipz
 19215  01B9  29BC               	goto	i1l7169
 19216                           
 19217                           ;Dimmer_B1.c: 163: RA3 = 0;
 19218  01BA  0020               	movlb	0	; select bank0
 19219  01BB  118C               	bcf	12,3	;volatile
 19220  01BC                     i1l7169:	
 19221                           
 19222                           ;Dimmer_B1.c: 165: }
 19223                           ;Dimmer_B1.c: 168: if (lights == 2) {
 19224  01BC  0876               	movf	setDimmerLights_IntrControl@lights,w
 19225  01BD  3A02               	xorlw	2
 19226  01BE  1D03               	skipz
 19227  01BF  29C2               	goto	i1l7173
 19228                           
 19229                           ;Dimmer_B1.c: 169: RC7 = 0;
 19230  01C0  0020               	movlb	0	; select bank0
 19231  01C1  138E               	bcf	14,7	;volatile
 19232  01C2                     i1l7173:	
 19233                           
 19234                           ;Dimmer_B1.c: 170: }
 19235                           ;Dimmer_B1.c: 177: setLoad_StatusOff(lights, 1);
 19236  01C2  01F0               	clrf	i1setLoad_StatusOff@command
 19237  01C3  0AF0               	incf	i1setLoad_StatusOff@command,f
 19238  01C4  0876               	movf	setDimmerLights_IntrControl@lights,w
 19239  01C5  319C  243D  3180   	fcall	i1_setLoad_StatusOff
 19240  01C8                     i1l7175:	
 19241                           
 19242                           ;Dimmer_B1.c: 178: }
 19243                           ;Dimmer_B1.c: 179: }
 19244                           ;Dimmer_B1.c: 180: }
 19245                           ;Dimmer_B1.c: 181: }
 19246                           ;Dimmer_B1.c: 182: }
 19247                           ;Dimmer_B1.c: 183: }
 19248                           ;Dimmer_B1.c: 184: }
 19249                           ;Dimmer_B1.c: 185: if (DimmerLightsIntr->Triac == 1) {
 19250  01C8  087A               	movf	_DimmerLightsIntr,w
 19251  01C9  3E08               	addlw	8
 19252  01CA  0086               	movwf	6
 19253  01CB  3001               	movlw	1	; select bank2/3
 19254  01CC  0087               	movwf	7
 19255  01CD  1E81               	btfss	1,5
 19256  01CE  29F9               	goto	i1l7193
 19257                           
 19258                           ;Dimmer_B1.c: 186: DimmerLightsIntr->TriacTime++;
 19259  01CF  3001               	movlw	1
 19260  01D0  00F2               	movwf	??_setDimmerLights_IntrControl
 19261  01D1  087A               	movf	_DimmerLightsIntr,w
 19262  01D2  3E07               	addlw	7
 19263  01D3  0086               	movwf	6
 19264  01D4  3001               	movlw	1	; select bank2/3
 19265  01D5  0087               	movwf	7
 19266  01D6  0872               	movf	??_setDimmerLights_IntrControl,w
 19267  01D7  0781               	addwf	1,f
 19268                           
 19269                           ;Dimmer_B1.c: 187: if (DimmerLightsIntr->TriacTime >= 5) {
 19270  01D8  087A               	movf	_DimmerLightsIntr,w
 19271  01D9  3E07               	addlw	7
 19272  01DA  0086               	movwf	6
 19273  01DB  3001               	movlw	1	; select bank2/3
 19274  01DC  0087               	movwf	7
 19275  01DD  3005               	movlw	5
 19276  01DE  0201               	subwf	1,w
 19277  01DF  1C03               	skipc
 19278  01E0  29F9               	goto	i1l7193
 19279                           
 19280                           ;Dimmer_B1.c: 188: DimmerLightsIntr->TriacTime = 0;
 19281  01E1  087A               	movf	_DimmerLightsIntr,w
 19282  01E2  3E07               	addlw	7
 19283  01E3  0086               	movwf	6
 19284  01E4  3001               	movlw	1	; select bank2/3
 19285  01E5  0087               	movwf	7
 19286  01E6  0181               	clrf	1
 19287                           
 19288                           ;Dimmer_B1.c: 189: DimmerLightsIntr->Triac = 0;
 19289  01E7  087A               	movf	_DimmerLightsIntr,w
 19290  01E8  3E08               	addlw	8
 19291  01E9  0086               	movwf	6
 19292  01EA  3001               	movlw	1	; select bank2/3
 19293  01EB  0087               	movwf	7
 19294  01EC  1281               	bcf	1,5
 19295                           
 19296                           ;Dimmer_B1.c: 192: if (lights == 1) {
 19297  01ED  0876               	movf	setDimmerLights_IntrControl@lights,w
 19298  01EE  3A01               	xorlw	1
 19299  01EF  1D03               	skipz
 19300  01F0  29F3               	goto	i1l7189
 19301                           
 19302                           ;Dimmer_B1.c: 193: RA7 = 0;
 19303  01F1  0020               	movlb	0	; select bank0
 19304  01F2  138C               	bcf	12,7	;volatile
 19305  01F3                     i1l7189:	
 19306                           ;Dimmer_B1.c: 194: ;;
 19307                           
 19308                           
 19309                           ;Dimmer_B1.c: 195: }
 19310                           ;Dimmer_B1.c: 198: if (lights == 2) {
 19311  01F3  0876               	movf	setDimmerLights_IntrControl@lights,w
 19312  01F4  3A02               	xorlw	2
 19313  01F5  1D03               	skipz
 19314  01F6  29F9               	goto	i1l7193
 19315                           
 19316                           ;Dimmer_B1.c: 199: RB4 = 0;
 19317  01F7  0020               	movlb	0	; select bank0
 19318  01F8  120D               	bcf	13,4	;volatile
 19319  01F9                     i1l7193:	
 19320                           
 19321                           ;Dimmer_B1.c: 200: }
 19322                           ;Dimmer_B1.c: 207: }
 19323                           ;Dimmer_B1.c: 208: }
 19324                           ;Dimmer_B1.c: 209: if (DimmerLightsIntr->TriacFlag == 1) {
 19325  01F9  087A               	movf	_DimmerLightsIntr,w
 19326  01FA  3E09               	addlw	9
 19327  01FB  0086               	movwf	6
 19328  01FC  3001               	movlw	1	; select bank2/3
 19329  01FD  0087               	movwf	7
 19330  01FE  1E81               	btfss	1,5
 19331  01FF  0008               	return
 19332                           
 19333                           ;Dimmer_B1.c: 210: DimmerLightsIntr->TriacCount++;
 19334  0200  3001               	movlw	1
 19335  0201  00F2               	movwf	??_setDimmerLights_IntrControl
 19336  0202  087A               	movf	_DimmerLightsIntr,w
 19337  0203  3E0A               	addlw	10
 19338  0204  0086               	movwf	6
 19339  0205  3001               	movlw	1	; select bank2/3
 19340  0206  0087               	movwf	7
 19341  0207  0872               	movf	??_setDimmerLights_IntrControl,w
 19342  0208  0781               	addwf	1,f
 19343                           
 19344                           ;Dimmer_B1.c: 211: if (DimmerLightsIntr->TriacCount == 70) {
 19345  0209  087A               	movf	_DimmerLightsIntr,w
 19346  020A  3E0A               	addlw	10
 19347  020B  0086               	movwf	6
 19348  020C  3001               	movlw	1	; select bank2/3
 19349  020D  0087               	movwf	7
 19350  020E  0801               	movf	1,w
 19351  020F  3A46               	xorlw	70
 19352  0210  1D03               	skipz
 19353  0211  0008               	return
 19354                           
 19355                           ;Dimmer_B1.c: 212: DimmerLightsIntr->TriacCount = 0;
 19356  0212  087A               	movf	_DimmerLightsIntr,w
 19357  0213  3E0A               	addlw	10
 19358  0214  0086               	movwf	6
 19359  0215  3001               	movlw	1	; select bank2/3
 19360  0216  0087               	movwf	7
 19361  0217  0181               	clrf	1
 19362                           
 19363                           ;Dimmer_B1.c: 213: DimmerLightsIntr->TriacFlag = 0;
 19364  0218  087A               	movf	_DimmerLightsIntr,w
 19365  0219  3E09               	addlw	9
 19366  021A  0086               	movwf	6
 19367  021B  3001               	movlw	1	; select bank2/3
 19368  021C  0087               	movwf	7
 19369  021D  1281               	bcf	1,5
 19370  021E  0008               	return
 19371  021F                     __end_of_setDimmerLights_IntrControl:	
 19372                           
 19373                           	psect	text134
 19374  1C3D                     __ptext134:	
 19375 ;; *************** function i1_setLoad_StatusOff *****************
 19376 ;; Defined at:
 19377 ;;		line 284 in file "../src/OverLoad_B1.c"
 19378 ;; Parameters:    Size  Location     Type
 19379 ;;  lights          1    wreg     unsigned char 
 19380 ;;  command         1    0[COMMON] unsigned char 
 19381 ;; Auto vars:     Size  Location     Type
 19382 ;;  lights          1    1[COMMON] unsigned char 
 19383 ;; Return value:  Size  Location     Type
 19384 ;;		None               void
 19385 ;; Registers used:
 19386 ;;		wreg, status,2, status,0
 19387 ;; Tracked objects:
 19388 ;;		On entry : 0/0
 19389 ;;		On exit  : 0/0
 19390 ;;		Unchanged: 0/0
 19391 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19392 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19393 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19394 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19395 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19396 ;;Total ram usage:        2 bytes
 19397 ;; Hardware stack levels used:    1
 19398 ;; This function calls:
 19399 ;;		Nothing
 19400 ;; This function is called by:
 19401 ;;		_setDimmerLights_IntrControl
 19402 ;; This function uses a non-reentrant model
 19403 ;;
 19404                           
 19405                           
 19406                           ;psect for function i1_setLoad_StatusOff
 19407  1C3D                     i1_setLoad_StatusOff:	
 19408                           
 19409                           ;incstack = 0
 19410                           ; Regs used in i1_setLoad_StatusOff: [wreg+status,2+status,0]
 19411                           ;i1setLoad_StatusOff@lights stored from wreg
 19412  1C3D  00F1               	movwf	i1setLoad_StatusOff@lights
 19413                           
 19414                           ;OverLoad_B1.c: 285: Load1.StatusOff = command;
 19415  1C3E  0870               	movf	i1setLoad_StatusOff@command,w
 19416  1C3F  0022               	movlb	2	; select bank2
 19417  1C40  13A0               	bcf	_Load1^(0+256),7
 19418  1C41  1D03               	skipz
 19419  1C42  17A0               	bsf	_Load1^(0+256),7
 19420                           
 19421                           ;OverLoad_B1.c: 286: Load1.SafeCount -= 2;
 19422  1C43  3002               	movlw	2
 19423  1C44  02E2               	subwf	(_Load1^(0+256)+66),f
 19424                           
 19425                           ;OverLoad_B1.c: 287: if (lights == 1) {
 19426  1C45  0871               	movf	i1setLoad_StatusOff@lights,w
 19427  1C46  3A01               	xorlw	1
 19428  1C47  1903               	btfsc	3,2
 19429                           
 19430                           ;OverLoad_B1.c: 288: Load1.Lights1Status = 0;
 19431  1C48  01E3               	clrf	(_Load1^(0+256)+67)
 19432                           
 19433                           ;OverLoad_B1.c: 289: }
 19434                           ;OverLoad_B1.c: 290: if (lights == 2) {
 19435  1C49  0871               	movf	i1setLoad_StatusOff@lights,w
 19436  1C4A  3A02               	xorlw	2
 19437  1C4B  1903               	btfsc	3,2
 19438                           
 19439                           ;OverLoad_B1.c: 291: Load1.Lights2Status = 0;
 19440  1C4C  01E4               	clrf	(_Load1^(0+256)+68)
 19441                           
 19442                           ;OverLoad_B1.c: 292: }
 19443                           ;OverLoad_B1.c: 293: if (lights == 3) {
 19444  1C4D  0871               	movf	i1setLoad_StatusOff@lights,w
 19445  1C4E  3A03               	xorlw	3
 19446  1C4F  1D03               	skipz
 19447  1C50  0008               	return
 19448                           
 19449                           ;OverLoad_B1.c: 294: Load1.Lights3Status = 0;
 19450  1C51  01E5               	clrf	(_Load1^(0+256)+69)
 19451  1C52  0008               	return
 19452  1C53                     __end_ofi1_setLoad_StatusOff:	
 19453                           
 19454                           	psect	text135
 19455  1B90                     __ptext135:	
 19456 ;; *************** function _DimmerIntrPointSelect *****************
 19457 ;; Defined at:
 19458 ;;		line 65 in file "../src/Dimmer_B1.c"
 19459 ;; Parameters:    Size  Location     Type
 19460 ;;  lights          1    wreg     unsigned char 
 19461 ;; Auto vars:     Size  Location     Type
 19462 ;;  lights          1    1[COMMON] unsigned char 
 19463 ;; Return value:  Size  Location     Type
 19464 ;;		None               void
 19465 ;; Registers used:
 19466 ;;		wreg
 19467 ;; Tracked objects:
 19468 ;;		On entry : 0/0
 19469 ;;		On exit  : 0/0
 19470 ;;		Unchanged: 0/0
 19471 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19472 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19473 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19474 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19475 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19476 ;;Total ram usage:        2 bytes
 19477 ;; Hardware stack levels used:    1
 19478 ;; This function calls:
 19479 ;;		Nothing
 19480 ;; This function is called by:
 19481 ;;		_setDimmerLights_IntrControl
 19482 ;; This function uses a non-reentrant model
 19483 ;;
 19484                           
 19485                           
 19486                           ;psect for function _DimmerIntrPointSelect
 19487  1B90                     _DimmerIntrPointSelect:	
 19488                           
 19489                           ;incstack = 0
 19490                           ; Regs used in _DimmerIntrPointSelect: [wreg]
 19491                           ;DimmerIntrPointSelect@lights stored from wreg
 19492  1B90  00F1               	movwf	DimmerIntrPointSelect@lights
 19493                           
 19494                           ;Dimmer_B1.c: 67: if (lights == 1) {
 19495  1B91  0871               	movf	DimmerIntrPointSelect@lights,w
 19496  1B92  3A01               	xorlw	1
 19497  1B93  1D03               	skipz
 19498  1B94  2B99               	goto	i1l773
 19499                           
 19500                           ;Dimmer_B1.c: 68: DimmerLightsIntr = &DimmerLights1;
 19501  1B95  30A0               	movlw	_DimmerLights1& (0+255)
 19502  1B96  00F0               	movwf	??_DimmerIntrPointSelect
 19503  1B97  0870               	movf	??_DimmerIntrPointSelect,w
 19504  1B98  00FA               	movwf	_DimmerLightsIntr
 19505  1B99                     i1l773:	
 19506                           
 19507                           ;Dimmer_B1.c: 69: }
 19508                           ;Dimmer_B1.c: 72: if (lights == 2) {
 19509  1B99  0871               	movf	DimmerIntrPointSelect@lights,w
 19510  1B9A  3A02               	xorlw	2
 19511  1B9B  1D03               	skipz
 19512  1B9C  0008               	return
 19513                           
 19514                           ;Dimmer_B1.c: 73: DimmerLightsIntr = &DimmerLights2;
 19515  1B9D  30AF               	movlw	_DimmerLights2& (0+255)
 19516  1B9E  00F0               	movwf	??_DimmerIntrPointSelect
 19517  1B9F  0870               	movf	??_DimmerIntrPointSelect,w
 19518  1BA0  00FA               	movwf	_DimmerLightsIntr
 19519  1BA1  0008               	return
 19520  1BA2                     __end_of_DimmerIntrPointSelect:	
 19521                           
 19522                           	psect	text136
 19523  1AED                     __ptext136:	
 19524 ;; *************** function _IOC_ISR *****************
 19525 ;; Defined at:
 19526 ;;		line 297 in file "../src/MCU_B1.c"
 19527 ;; Parameters:    Size  Location     Type
 19528 ;;		None
 19529 ;; Auto vars:     Size  Location     Type
 19530 ;;		None
 19531 ;; Return value:  Size  Location     Type
 19532 ;;		None               void
 19533 ;; Registers used:
 19534 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19535 ;; Tracked objects:
 19536 ;;		On entry : 0/0
 19537 ;;		On exit  : 0/0
 19538 ;;		Unchanged: 0/0
 19539 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19540 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19541 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19542 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19543 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19544 ;;Total ram usage:        0 bytes
 19545 ;; Hardware stack levels used:    1
 19546 ;; Hardware stack levels required when called:    3
 19547 ;; This function calls:
 19548 ;;		_setDimmerReClock
 19549 ;; This function is called by:
 19550 ;;		_ISR
 19551 ;; This function uses a non-reentrant model
 19552 ;;
 19553                           
 19554                           
 19555                           ;psect for function _IOC_ISR
 19556  1AED                     _IOC_ISR:	
 19557                           
 19558                           ;MCU_B1.c: 298: if (IOCIE == 1 && IOCBF2 == 1) {
 19559                           
 19560                           ;incstack = 0
 19561                           ; Regs used in _IOC_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 19562  1AED  1D8B               	btfss	11,3	;volatile
 19563  1AEE  0008               	return
 19564  1AEF  0027               	movlb	7	; select bank7
 19565  1AF0  1D16               	btfss	22,2	;volatile
 19566  1AF1  0008               	return
 19567                           
 19568                           ;MCU_B1.c: 299: IOCBF2 = 0;
 19569  1AF2  1116               	bcf	22,2	;volatile
 19570                           
 19571                           ;MCU_B1.c: 300: IOCIF = 0;
 19572  1AF3  100B               	bcf	11,0	;volatile
 19573                           
 19574                           ;MCU_B1.c: 301: if (myMain->PowerON == 1) {
 19575  1AF4  087B               	movf	_myMain,w
 19576  1AF5  0086               	movwf	6
 19577  1AF6  3002               	movlw	2	; select bank4/5
 19578  1AF7  0087               	movwf	7
 19579  1AF8  1C01               	btfss	1,0
 19580  1AF9  0008               	return
 19581                           
 19582                           ;MCU_B1.c: 303: setDimmerReClock();
 19583  1AFA  319A  222C         	fcall	_setDimmerReClock
 19584  1AFC  0008               	return
 19585  1AFD                     __end_of_IOC_ISR:	
 19586                           
 19587                           	psect	text137
 19588  1A2C                     __ptext137:	
 19589 ;; *************** function _setDimmerReClock *****************
 19590 ;; Defined at:
 19591 ;;		line 175 in file "../src/MCU_B1.c"
 19592 ;; Parameters:    Size  Location     Type
 19593 ;;		None
 19594 ;; Auto vars:     Size  Location     Type
 19595 ;;		None
 19596 ;; Return value:  Size  Location     Type
 19597 ;;		None               void
 19598 ;; Registers used:
 19599 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19600 ;; Tracked objects:
 19601 ;;		On entry : 0/0
 19602 ;;		On exit  : 0/0
 19603 ;;		Unchanged: 0/0
 19604 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19605 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19606 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19607 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19608 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19609 ;;Total ram usage:        0 bytes
 19610 ;; Hardware stack levels used:    1
 19611 ;; Hardware stack levels required when called:    2
 19612 ;; This function calls:
 19613 ;;		_setDimmerLights_IntrIOC_GO
 19614 ;; This function is called by:
 19615 ;;		_IOC_ISR
 19616 ;; This function uses a non-reentrant model
 19617 ;;
 19618                           
 19619                           
 19620                           ;psect for function _setDimmerReClock
 19621  1A2C                     _setDimmerReClock:	
 19622                           
 19623                           ;MCU_B1.c: 180: setDimmerLights_IntrIOC_GO(1);
 19624                           
 19625                           ;incstack = 0
 19626                           ; Regs used in _setDimmerReClock: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 19627  1A2C  3001               	movlw	1
 19628  1A2D  319D  25B9  319A   	fcall	_setDimmerLights_IntrIOC_GO
 19629                           
 19630                           ;MCU_B1.c: 184: setDimmerLights_IntrIOC_GO(2);
 19631  1A30  3002               	movlw	2
 19632  1A31  319D  25B9         	fcall	_setDimmerLights_IntrIOC_GO
 19633                           
 19634                           ;MCU_B1.c: 191: TMR0 = 255;
 19635  1A33  30FF               	movlw	255
 19636  1A34  0020               	movlb	0	; select bank0
 19637  1A35  0095               	movwf	21	;volatile
 19638  1A36  0008               	return
 19639  1A37                     __end_of_setDimmerReClock:	
 19640                           
 19641                           	psect	text138
 19642  1DB9                     __ptext138:	
 19643 ;; *************** function _setDimmerLights_IntrIOC_GO *****************
 19644 ;; Defined at:
 19645 ;;		line 28 in file "../src/Dimmer_B1.c"
 19646 ;; Parameters:    Size  Location     Type
 19647 ;;  lights          1    wreg     unsigned char 
 19648 ;; Auto vars:     Size  Location     Type
 19649 ;;  lights          1    2[COMMON] unsigned char 
 19650 ;; Return value:  Size  Location     Type
 19651 ;;		None               void
 19652 ;; Registers used:
 19653 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19654 ;; Tracked objects:
 19655 ;;		On entry : 0/0
 19656 ;;		On exit  : 0/0
 19657 ;;		Unchanged: 0/0
 19658 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19659 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19660 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19661 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19662 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19663 ;;Total ram usage:        1 bytes
 19664 ;; Hardware stack levels used:    1
 19665 ;; Hardware stack levels required when called:    1
 19666 ;; This function calls:
 19667 ;;		_DimmerIntrIOCPointSelect
 19668 ;; This function is called by:
 19669 ;;		_setDimmerReClock
 19670 ;; This function uses a non-reentrant model
 19671 ;;
 19672                           
 19673                           
 19674                           ;psect for function _setDimmerLights_IntrIOC_GO
 19675  1DB9                     _setDimmerLights_IntrIOC_GO:	
 19676                           
 19677                           ;incstack = 0
 19678                           ; Regs used in _setDimmerLights_IntrIOC_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 19679                           ;setDimmerLights_IntrIOC_GO@lights stored from wreg
 19680  1DB9  00F2               	movwf	setDimmerLights_IntrIOC_GO@lights
 19681                           
 19682                           ;Dimmer_B1.c: 30: DimmerIntrIOCPointSelect(lights);
 19683  1DBA  0872               	movf	setDimmerLights_IntrIOC_GO@lights,w
 19684  1DBB  319B  23EC  319D   	fcall	_DimmerIntrIOCPointSelect
 19685                           
 19686                           ;Dimmer_B1.c: 32: if (DimmerLightsIntrIOC->GO == 0 && DimmerLightsIntrIOC->TriacFlag == 
      +                          0) {
 19687  1DBE  0021               	movlb	1	; select bank1
 19688  1DBF  084E               	movf	_DimmerLightsIntrIOC^(0+128),w
 19689  1DC0  0086               	movwf	6
 19690  1DC1  3001               	movlw	1	; select bank2/3
 19691  1DC2  0087               	movwf	7
 19692  1DC3  1801               	btfsc	1,0
 19693  1DC4  0008               	return
 19694  1DC5  084E               	movf	_DimmerLightsIntrIOC^(0+128),w
 19695  1DC6  3E09               	addlw	9
 19696  1DC7  0086               	movwf	6
 19697  1DC8  3001               	movlw	1	; select bank2/3
 19698  1DC9  0087               	movwf	7
 19699  1DCA  1A81               	btfsc	1,5
 19700  1DCB  0008               	return
 19701                           
 19702                           ;Dimmer_B1.c: 33: DimmerLightsIntrIOC->GO = 1;
 19703  1DCC  084E               	movf	_DimmerLightsIntrIOC^(0+128),w
 19704  1DCD  0086               	movwf	6
 19705  1DCE  3001               	movlw	1	; select bank2/3
 19706  1DCF  0087               	movwf	7
 19707  1DD0  1401               	bsf	1,0
 19708                           
 19709                           ;Dimmer_B1.c: 34: DimmerLightsIntrIOC->TriacFlag = 1;
 19710  1DD1  084E               	movf	_DimmerLightsIntrIOC^(0+128),w
 19711  1DD2  3E09               	addlw	9
 19712  1DD3  0086               	movwf	6
 19713  1DD4  3001               	movlw	1	; select bank2/3
 19714  1DD5  0087               	movwf	7
 19715  1DD6  1681               	bsf	1,5
 19716  1DD7  0008               	return
 19717  1DD8                     __end_of_setDimmerLights_IntrIOC_GO:	
 19718                           
 19719                           	psect	text139
 19720  1BEC                     __ptext139:	
 19721 ;; *************** function _DimmerIntrIOCPointSelect *****************
 19722 ;; Defined at:
 19723 ;;		line 8 in file "../src/Dimmer_B1.c"
 19724 ;; Parameters:    Size  Location     Type
 19725 ;;  lights          1    wreg     unsigned char 
 19726 ;; Auto vars:     Size  Location     Type
 19727 ;;  lights          1    1[COMMON] unsigned char 
 19728 ;; Return value:  Size  Location     Type
 19729 ;;		None               void
 19730 ;; Registers used:
 19731 ;;		wreg
 19732 ;; Tracked objects:
 19733 ;;		On entry : 0/0
 19734 ;;		On exit  : 0/0
 19735 ;;		Unchanged: 0/0
 19736 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19737 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19738 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19739 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19740 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19741 ;;Total ram usage:        2 bytes
 19742 ;; Hardware stack levels used:    1
 19743 ;; This function calls:
 19744 ;;		Nothing
 19745 ;; This function is called by:
 19746 ;;		_setDimmerLights_IntrIOC_GO
 19747 ;; This function uses a non-reentrant model
 19748 ;;
 19749                           
 19750                           
 19751                           ;psect for function _DimmerIntrIOCPointSelect
 19752  1BEC                     _DimmerIntrIOCPointSelect:	
 19753                           
 19754                           ;incstack = 0
 19755                           ; Regs used in _DimmerIntrIOCPointSelect: [wreg]
 19756                           ;DimmerIntrIOCPointSelect@lights stored from wreg
 19757  1BEC  00F1               	movwf	DimmerIntrIOCPointSelect@lights
 19758                           
 19759                           ;Dimmer_B1.c: 10: if (lights == 1) {
 19760  1BED  0871               	movf	DimmerIntrIOCPointSelect@lights,w
 19761  1BEE  3A01               	xorlw	1
 19762  1BEF  1D03               	skipz
 19763  1BF0  2BF6               	goto	i1l764
 19764                           
 19765                           ;Dimmer_B1.c: 11: DimmerLightsIntrIOC = &DimmerLights1;
 19766  1BF1  30A0               	movlw	_DimmerLights1& (0+255)
 19767  1BF2  00F0               	movwf	??_DimmerIntrIOCPointSelect
 19768  1BF3  0870               	movf	??_DimmerIntrIOCPointSelect,w
 19769  1BF4  0021               	movlb	1	; select bank1
 19770  1BF5  00CE               	movwf	_DimmerLightsIntrIOC^(0+128)
 19771  1BF6                     i1l764:	
 19772                           
 19773                           ;Dimmer_B1.c: 12: }
 19774                           ;Dimmer_B1.c: 15: if (lights == 2) {
 19775  1BF6  0871               	movf	DimmerIntrIOCPointSelect@lights,w
 19776  1BF7  3A02               	xorlw	2
 19777  1BF8  1D03               	skipz
 19778  1BF9  0008               	return
 19779                           
 19780                           ;Dimmer_B1.c: 16: DimmerLightsIntrIOC = &DimmerLights2;
 19781  1BFA  30AF               	movlw	_DimmerLights2& (0+255)
 19782  1BFB  00F0               	movwf	??_DimmerIntrIOCPointSelect
 19783  1BFC  0870               	movf	??_DimmerIntrIOCPointSelect,w
 19784  1BFD  0021               	movlb	1	; select bank1
 19785  1BFE  00CE               	movwf	_DimmerLightsIntrIOC^(0+128)
 19786  1BFF  0008               	return
 19787  1C00                     __end_of_DimmerIntrIOCPointSelect:	
 19788                           
 19789                           	psect	text140
 19790  1A06                     __ptext140:	
 19791 ;; *************** function _INT_ISR *****************
 19792 ;; Defined at:
 19793 ;;		line 250 in file "../src/MCU_B1.c"
 19794 ;; Parameters:    Size  Location     Type
 19795 ;;		None
 19796 ;; Auto vars:     Size  Location     Type
 19797 ;;		None
 19798 ;; Return value:  Size  Location     Type
 19799 ;;		None               void
 19800 ;; Registers used:
 19801 ;;		wreg, status,2, status,0, pclath, cstack
 19802 ;; Tracked objects:
 19803 ;;		On entry : 0/0
 19804 ;;		On exit  : 0/0
 19805 ;;		Unchanged: 0/0
 19806 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19807 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19808 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19809 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19810 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19811 ;;Total ram usage:        0 bytes
 19812 ;; Hardware stack levels used:    1
 19813 ;; Hardware stack levels required when called:    1
 19814 ;; This function calls:
 19815 ;;		_setRF_ReceiveGO
 19816 ;; This function is called by:
 19817 ;;		_ISR
 19818 ;; This function uses a non-reentrant model
 19819 ;;
 19820                           
 19821                           
 19822                           ;psect for function _INT_ISR
 19823  1A06                     _INT_ISR:	
 19824                           
 19825                           ;MCU_B1.c: 251: if (INTE == 1 && INTF == 1) {
 19826                           
 19827                           ;incstack = 0
 19828                           ; Regs used in _INT_ISR: [wreg+status,2+status,0+pclath+cstack]
 19829  1A06  1E0B               	btfss	11,4	;volatile
 19830  1A07  0008               	return
 19831  1A08  1C8B               	btfss	11,1	;volatile
 19832  1A09  0008               	return
 19833                           
 19834                           ;MCU_B1.c: 252: INTF = 0;
 19835  1A0A  108B               	bcf	11,1	;volatile
 19836                           
 19837                           ;MCU_B1.c: 254: setRF_ReceiveGO(1);
 19838  1A0B  3001               	movlw	1
 19839  1A0C  319A  2221         	fcall	_setRF_ReceiveGO
 19840  1A0E  0008               	return
 19841  1A0F                     __end_of_INT_ISR:	
 19842                           
 19843                           	psect	text141
 19844  1A21                     __ptext141:	
 19845 ;; *************** function _setRF_ReceiveGO *****************
 19846 ;; Defined at:
 19847 ;;		line 28 in file "../src/RF_Control_B1.c"
 19848 ;; Parameters:    Size  Location     Type
 19849 ;;  command         1    wreg     unsigned char 
 19850 ;; Auto vars:     Size  Location     Type
 19851 ;;  command         1    0[COMMON] unsigned char 
 19852 ;; Return value:  Size  Location     Type
 19853 ;;		None               void
 19854 ;; Registers used:
 19855 ;;		wreg
 19856 ;; Tracked objects:
 19857 ;;		On entry : 0/0
 19858 ;;		On exit  : 0/0
 19859 ;;		Unchanged: 0/0
 19860 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19861 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19862 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19863 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19864 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19865 ;;Total ram usage:        1 bytes
 19866 ;; Hardware stack levels used:    1
 19867 ;; This function calls:
 19868 ;;		Nothing
 19869 ;; This function is called by:
 19870 ;;		_INT_ISR
 19871 ;; This function uses a non-reentrant model
 19872 ;;
 19873                           
 19874                           
 19875                           ;psect for function _setRF_ReceiveGO
 19876  1A21                     _setRF_ReceiveGO:	
 19877                           
 19878                           ;incstack = 0
 19879                           ; Regs used in _setRF_ReceiveGO: [wreg]
 19880                           ;setRF_ReceiveGO@command stored from wreg
 19881  1A21  00F0               	movwf	setRF_ReceiveGO@command
 19882                           
 19883                           ;RF_Control_B1.c: 29: if (RF1.RxStatus == 1) {
 19884  1A22  0021               	movlb	1	; select bank1
 19885  1A23  1DC1               	btfss	_RF1^(0+128),3
 19886  1A24  0008               	return
 19887                           
 19888                           ;RF_Control_B1.c: 30: RF1.RxStatus = 0;
 19889  1A25  11C1               	bcf	_RF1^(0+128),3
 19890                           
 19891                           ;RF_Control_B1.c: 31: RF1.Run = 1;
 19892  1A26  14C2               	bsf	(_RF1^(0+128)+1),1
 19893                           
 19894                           ;RF_Control_B1.c: 32: RF1.ReceiveGO = command;
 19895  1A27  0870               	movf	setRF_ReceiveGO@command,w
 19896  1A28  10C1               	bcf	_RF1^(0+128),1
 19897  1A29  1D03               	skipz
 19898  1A2A  14C1               	bsf	_RF1^(0+128),1
 19899  1A2B  0008               	return
 19900  1A2C                     __end_of_setRF_ReceiveGO:	
 19901  007E                     btemp	set	126	;btemp
 19902  007E                     pic14e$flags	set	126
 19903  007E                     wtemp	set	126
 19904  007E                     wtemp0	set	126
 19905  0080                     wtemp1	set	128
 19906  0082                     wtemp2	set	130
 19907  0084                     wtemp3	set	132
 19908  0086                     wtemp4	set	134
 19909  0088                     wtemp5	set	136
 19910  007F                     wtemp6	set	127
 19911  007E                     ttemp	set	126
 19912  007E                     ttemp0	set	126
 19913  0081                     ttemp1	set	129
 19914  0084                     ttemp2	set	132
 19915  0087                     ttemp3	set	135
 19916  007F                     ttemp4	set	127
 19917  007E                     ltemp	set	126
 19918  007E                     ltemp0	set	126
 19919  0082                     ltemp1	set	130
 19920  0086                     ltemp2	set	134
 19921  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    102
    Data        32
    BSS         283
    Persistent  4
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      8      14
    BANK0            80     78      80
    BANK1            80      0      79
    BANK2            80      0      78
    BANK3            80      0      66
    BANK4            80      0      52
    BANK5            80      0      37
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    Sw	PTR struct Switch size(1) Largest target is 9
		 -> NULL(NULL[0]), Sw2(BANK3[9]), Sw1(BANK3[9]), 

    RFSW	PTR struct RFSW size(1) Largest target is 1
		 -> NULL(NULL[0]), RFSW2(BANK1[1]), RFSW1(BANK1[1]), 

    Timer0	PTR struct Timer0 size(1) Largest target is 8
		 -> NULL(NULL[0]), VarTimer0(BANK3[8]), 

    Memory	PTR struct FlashMemory size(1) Largest target is 37
		 -> NULL(NULL[0]), VarMemory(BANK5[37]), 

    LED	PTR struct LED size(2) Largest target is 4
		 -> NULL(NULL[0]), VarErrLED(BANK1[4]), VarLED2(BANK2[4]), VarLED1(BANK2[4]), 

    DimmerLights22	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights2(BANK3[15]), 

    DimmerLights11	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights1(BANK3[15]), 

    DimmerLights	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights2(BANK3[15]), DimmerLights1(BANK3[15]), 

    Dimmer	PTR struct Dimmer size(1) Largest target is 3
		 -> NULL(NULL[0]), Dimmer1(BANK1[3]), 

    DimmerLightsIntr	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights2(BANK3[15]), DimmerLights1(BANK3[15]), 

    DimmerLightsIntrIOC	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights2(BANK3[15]), DimmerLights1(BANK3[15]), 

    product	PTR struct Product size(1) Largest target is 32
		 -> NULL(NULL[0]), _product(BANK4[32]), 

    DelayOff	PTR struct DelayOff size(1) Largest target is 5
		 -> NULL(NULL[0]), DlySw2(BANK3[5]), DlySw1(BANK3[5]), 

    myMain	PTR struct myMain size(1) Largest target is 20
		 -> NULL(NULL[0]), _myMain(BANK4[20]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _TMR0_ISR->_setDimmerLights_IntrControl
    _setDimmerLights_IntrControl->_DimmerIntrPointSelect
    _setDimmerLights_IntrControl->i1_setLoad_StatusOff
    _setDimmerReClock->_setDimmerLights_IntrIOC_GO
    _setDimmerLights_IntrIOC_GO->_DimmerIntrIOCPointSelect
    _INT_ISR->_setRF_ReceiveGO

Critical Paths under _main in BANK0

    _my_Main->_setBuz
    _getTemp_AD->_getAD
    _getLoad_AD->_getAD
    _Temp_Main->_setTemp_Main
    _setTemp_Main->_setOverTemp_Exceptions
    _setOverTemp_Exceptions->_DimmerLights_Exceptions
    _Switch_Main->_setSw_Main
    _setSw_Main->_Sw_DimmerOffFunc
    _Sw_DimmerOnFunc->_setRF_DimmerLights
    _Sw_DimmerOffFunc->_setRF_DimmerLights
    _Sw_DimmerAdjFunc->_setDimmerLights_AdjGo
    _Sw_DimmerAdjFunc->_setDimmerLights_TriggerAdj
    _Sw_DimmerAdjFunc->_setRFSW_Status
    _setDimmerLights_TriggerAdj->_DimmerLightsPointSelect
    _setDimmerLights_AdjGo->_DimmerLightsPointSelect
    _Switch_Initialization->_setSw_Initialization
    _setSw_Initialization->_setLED
    _RF_Main->_setRF_Main
    _setLog_Code->_setBuz
    _setControl_Lights_Table->_setRFSW_AdjControl
    _setRFSW_Control->_setRF_DimmerLights
    _setDelayOff_GO->_DelayTimejudge
    _DelayTimejudge->___bmul
    _setRFSW_AdjControl->_setRF_DimmerValue
    _setRF_DimmerValue->_setDimmerLights_AdjRF
    _setDimmerLights_AdjRF->_getPercentValue
    _getPercentValue->___fttol
    ___ftmul->___awtoft
    ___ftadd->___ftmul
    _RF_RxDisable->_CC2500_WriteCommand
    _CC2500_TxData->_CC2500_WriteCommand
    _CC2500_RxData->_setBuz
    _CC2500_ReadStatus->_CC2500_ReadByte
    _CC2500_ReadStatus->_CC2500_WriteByte
    _RF_Initialization->_setRF_Initialization
    _Mcu_Initialization->_TMR0_Set
    _Load_Main->_setLoad_Exceptions
    _setLoad_Exceptions->_DimmerLights_Exceptions
    _setSw_Enable->_SwPointSelect
    _DimmerLights_Exceptions->_setBuz
    _setDimmerLights_TriggerERROR->_DimmerLightsPointSelect
    _setDimmerLights_ERROR->_setRFSW_Status
    _setDimmerLights_ERROR->_setSw_Status
    _setDimmerLights_Clear->_DimmerLightsPointSelect
    _Load_Initialization->_setLoad_AH_AL_Restore
    _LED_Main->_setLED_Main
    _setLED_Main->_LedPointSelect
    _LED_Initialization->_setLED_Initialization
    _setLED_Initialization->_setLED
    _Flash_Memory_Main->_Flash_Memory_Modify
    _Flash_Memory_Modify->_Flash_Memory_Read
    _Flash_Memory_Initialization->_setPercentValue
    _DimmerLights_Main->_setDimmerLights_Main
    _setDimmerLights_Main->_setDimmerLights_Adj
    _setDimmerLights_Adj->_setRF_DimmerLights
    _setDimmerLights->_setLED
    _setDimmerLights->_setMemory_GO
    _setLED->_LedPointSelect
    _DimmerLights_Close->_getDimmerLights_StatusFlag
    _DimmerLights_Close->_setMemory_GO
    _DimmerLights_Initialization->_setDimmerLights_Initialization
    _setDimmerLights_Initialization->_DimmerLightsPointSelect
    _DelayOff_Main->_DlyOff_Main
    _DlyOff_Main->_setRF_DimmerLights
    _setSw_Status->_SwPointSelect
    _setRF_DimmerLights->_setPercentValue
    _setPercentValue->___fttol
    ___fttol->___ftadd
    ___ftdiv->___awtoft
    ___awtoft->___ftpack
    _setRFSW_Status->_RfSWPointSelect
    _setDimmerLights_Trigger->_DimmerLightsPointSelect
    _setDimmerLights_Switch->_DimmerLightsPointSelect
    _setBuz->___awdiv
    _DelayOff_Initialization->_DlyOff_Initialization
    _DlyOff_Initialization->_DelayOffPointSelect
    _CC2500_PowerOnInitial->_CC2500_InitSetREG
    _CC2500_SIDLEMode->_CC2500_WriteCommand
    _CC2500_PowerRST->_DelayTime_1us
    _CC2500_InitSetREG->_CC2500_WriteREG
    _CC2500_InitPATable->_CC2500_WriteREG
    _CC2500_WriteREG->_CC2500_WriteByte
    _CC2500_FrequencyCabr->_DelayTime_1us
    _CC2500_ClearTXFIFO->_CC2500_WriteCommand
    _CC2500_ClearRXFIFO->_CC2500_WriteCommand
    _CC2500_WriteCommand->_CC2500_WriteByte

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     0      4   93202
                                             74 BANK0      4     0      4
              _Buzzer_Initialization
                        _Buzzer_Main
              _CC2500_PowerOnInitial
            _DelayOff_Initialization
                      _DelayOff_Main
        _DimmerLights_Initialization
                  _DimmerLights_Main
        _Flash_Memory_Initialization
                  _Flash_Memory_Main
                 _LED_Initialization
                           _LED_Main
                _Load_Initialization
                          _Load_Main
                 _Mcu_Initialization
                  _RF_Initialization
                            _RF_Main
              _Switch_Initialization
                        _Switch_Main
                _Temp_Initialization
                          _Temp_Main
                         _getLoad_AD
                         _getTemp_AD
              _myMain_Initialization
                            _my_Main
                _my_TestPointCleared
 ---------------------------------------------------------------------------------
 (1) _my_TestPointCleared                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _my_Main                                              0     0      0    1569
                             _setBuz
                     _setLoad_Enable
                       _setRF_Enable
                       _setSw_Enable
                     _setTemp_Enable
 ---------------------------------------------------------------------------------
 (2) _setTemp_Enable                                       1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _setLoad_Enable                                       1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _myMain_Initialization                                1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _getTemp_AD                                           2     2      0     194
                                              4 BANK0      2     2      0
                              _getAD
 ---------------------------------------------------------------------------------
 (1) _getLoad_AD                                           5     5      0     399
                                              4 BANK0      5     5      0
                              _getAD
 ---------------------------------------------------------------------------------
 (2) _getAD                                                4     1      3     172
                                              0 BANK0      4     1      3
 ---------------------------------------------------------------------------------
 (1) _Temp_Main                                            0     0      0    6445
                       _setTemp_Main
 ---------------------------------------------------------------------------------
 (2) _setTemp_Main                                         1     1      0    6445
                                             17 BANK0      1     1      0
                       _getLoad_Safe
             _setOverTemp_Exceptions
 ---------------------------------------------------------------------------------
 (3) _setOverTemp_Exceptions                               3     3      0    6445
                                             14 BANK0      3     3      0
            _DimmerLights_Exceptions
                             _setBuz
                             _setLED
                       _setRF_Enable
                       _setSw_Enable
 ---------------------------------------------------------------------------------
 (3) _getLoad_Safe                                         1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Temp_Initialization                                  0     0      0       0
             _setTemp_Initialization
 ---------------------------------------------------------------------------------
 (2) _setTemp_Initialization                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Switch_Main                                          0     0      0   20482
                         _setSw_Main
 ---------------------------------------------------------------------------------
 (2) _setSw_Main                                           5     5      0   20482
                                             69 BANK0      5     5      0
                      _SwPointSelect
                   _Sw_DimmerAdjFunc
                   _Sw_DimmerOffFunc
                    _Sw_DimmerOnFunc
                             _setBuz
                        _setRF_Learn
 ---------------------------------------------------------------------------------
 (3) _setRF_Learn                                          1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _Sw_DimmerOnFunc                                      2     2      0    9063
                                             66 BANK0      2     2      0
                             _setBuz
             _setDimmerLights_Switch
            _setDimmerLights_Trigger
                     _setRFSW_Status
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _Sw_DimmerOffFunc                                     3     3      0    8655
                                             66 BANK0      3     3      0
                     _setDelayOff_GO
              _setDimmerLights_AdjGo
             _setDimmerLights_Switch
            _setDimmerLights_Trigger
         _setDimmerLights_TriggerAdj
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _Sw_DimmerAdjFunc                                     2     2      0    1103
                                              4 BANK0      2     2      0
              _setDimmerLights_AdjGo
         _setDimmerLights_TriggerAdj
                     _setRFSW_Status
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_TriggerAdj                           2     1      1     216
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_AdjGo                                2     1      1     216
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (1) _Switch_Initialization                                0     0      0     780
                         _TouchPower
               _setSw_Initialization
 ---------------------------------------------------------------------------------
 (2) _setSw_Initialization                                 1     1      0     780
                                              3 BANK0      1     1      0
                             _setLED
 ---------------------------------------------------------------------------------
 (2) _TouchPower                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _RF_Main                                              0     0      0   28921
                         _setRF_Main
 ---------------------------------------------------------------------------------
 (2) _setRF_Main                                           2     2      0   28921
                                             71 BANK0      2     2      0
                      _CC2500_RxData
                      _CC2500_TxData
                _CC2500_WriteCommand
                       _RF_RxDisable
                          _getBuz_GO
                          _getRxData
 ---------------------------------------------------------------------------------
 (3) _getRxData                                            0     0      0   26843
            _setControl_Lights_Table
                        _setLog_Code
 ---------------------------------------------------------------------------------
 (4) _setLog_Code                                          1     1      0    1415
                                             13 BANK0      1     1      0
                             _setBuz
 ---------------------------------------------------------------------------------
 (4) _setControl_Lights_Table                              0     0      0   25428
                             _setBuz
                    _setDimmerLights
                 _setRFSW_AdjControl
                    _setRFSW_Control
                     _setRFSW_Status
                       _setSw_Status
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setRFSW_Control                                      2     2      0   10264
                                             66 BANK0      2     2      0
                    _RfSWPointSelect
                             _setBuz
                     _setDelayOff_GO
             _setDimmerLights_Switch
            _setDimmerLights_Trigger
                 _setRF_DimmerLights
                       _setSw_Status
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setDelayOff_GO                                       5     3      2    1114
                                             10 BANK0      5     3      2
                _DelayOffPointSelect
                     _DelayTimejudge
 ---------------------------------------------------------------------------------
 (5) _DelayTimejudge                                       6     6      0     294
                                              4 BANK0      6     6      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (6) ___bmul                                               4     3      1     156
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (5) _setRFSW_AdjControl                                   3     3      0   11311
                                             68 BANK0      3     3      0
                    _RfSWPointSelect
                  _setRF_DimmerValue
                          _setTxData
 ---------------------------------------------------------------------------------
 (6) _setRF_DimmerValue                                    3     3      0   11179
                                             65 BANK0      3     3      0
              _setDimmerLights_AdjRF
 ---------------------------------------------------------------------------------
 (7) _setDimmerLights_AdjRF                                2     2      0   11113
                                             63 BANK0      2     2      0
            _DimmerLightsPointSelect
                    _getPercentValue
 ---------------------------------------------------------------------------------
 (8) _getPercentValue                                      6     6      0   11047
                                             57 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___fttol
 ---------------------------------------------------------------------------------
 (9) ___ftmul                                             16    10      6    2502
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (9) ___ftadd                                             13     7      6    3118
                                             30 BANK0     13     7      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) _getBuz_GO                                            6     4      2      23
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (3) _RF_RxDisable                                         0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (3) _CC2500_TxData                                        2     2      0     160
                                              4 BANK0      2     2      0
                   _CC2500_WriteByte
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (3) _CC2500_RxData                                        3     3      0    1735
                                             13 BANK0      3     3      0
                    _CC2500_ReadByte
                  _CC2500_ReadStatus
                   _CC2500_WriteByte
                _CC2500_WriteCommand
                             _setBuz
 ---------------------------------------------------------------------------------
 (4) _CC2500_ReadStatus                                    2     2      0     114
                                              2 BANK0      2     2      0
                    _CC2500_ReadByte
                   _CC2500_WriteByte
 ---------------------------------------------------------------------------------
 (5) _CC2500_ReadByte                                      2     2      0      46
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _RF_Initialization                                    0     0      0       0
               _setRF_Initialization
 ---------------------------------------------------------------------------------
 (2) _setRF_Initialization                                 1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Mcu_Initialization                                   1     1      0       0
                                              1 BANK0      1     1      0
                            _ADC_Set
                           _Fosc_Set
                            _INT_Set
                            _IOC_Set
                             _IO_Set
                           _TMR0_Set
 ---------------------------------------------------------------------------------
 (2) _TMR0_Set                                             1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _IO_Set                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IOC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INT_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Fosc_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Load_Main                                            3     3      0    6193
                                             17 BANK0      3     3      0
                            ___lwdiv
                             ___wmul
                       _getTemp_Safe
              _setDimmerLights_Clear
              _setLoad_AH_AL_Restore
                 _setLoad_Exceptions
 ---------------------------------------------------------------------------------
 (2) _setLoad_Exceptions                                   3     3      0    5030
                                             14 BANK0      3     3      0
            _DimmerLights_Exceptions
                             _setLED
                       _setRF_Enable
                       _setSw_Enable
 ---------------------------------------------------------------------------------
 (2) _setSw_Enable                                         1     1      0      88
                                              2 BANK0      1     1      0
                      _SwPointSelect
 ---------------------------------------------------------------------------------
 (2) _setRF_Enable                                         1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _DimmerLights_Exceptions                              1     1      0    3985
                                             13 BANK0      1     1      0
         _getDimmerLights_StatusFlag
                             _setBuz
              _setDimmerLights_ERROR
       _setDimmerLights_TriggerERROR
 ---------------------------------------------------------------------------------
 (5) _setDimmerLights_TriggerERROR                         2     1      1     282
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (5) _setDimmerLights_ERROR                                2     2      0    2174
                                              4 BANK0      2     2      0
            _DimmerLightsPointSelect
                             _setLED
                  _setLoad_StatusOff
                     _setRFSW_Status
                       _setSw_Status
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Clear                                2     1      1     344
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (2) _getTemp_Safe                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     220
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     418
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (1) _Load_Initialization                                  0     0      0      90
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _setLoad_AH_AL_Restore                                2     2      0      90
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _LED_Main                                             0     0      0     154
                        _setLED_Main
 ---------------------------------------------------------------------------------
 (2) _setLED_Main                                          3     3      0     154
                                              1 BANK0      3     3      0
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (1) _LED_Initialization                                   0     0      0     868
              _setLED_Initialization
 ---------------------------------------------------------------------------------
 (2) _setLED_Initialization                                1     1      0     868
                                              3 BANK0      1     1      0
                     _LedPointSelect
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Main                                    0     0      0     230
                _Flash_Memory_Modify
 ---------------------------------------------------------------------------------
 (2) _Flash_Memory_Modify                                  3     3      0     230
                                              4 BANK0      3     3      0
               _Flash_Memory_Erasing
                  _Flash_Memory_Read
                 _Flash_Memory_Write
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Erasing                                 0     0      0       0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Initialization                          2     2      0    5701
                                             61 BANK0      2     2      0
                  _Flash_Memory_Read
                 _Flash_Memory_Write
                    _setPercentValue
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Write                                   2     2      0      91
                                              0 BANK0      2     2      0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (4) _Flash_Memory_Unlock                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Read                                    4     4      0      48
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Main                                    0     0      0    9835
                 _DimmerLights_Close
               _setDimmerLights_Main
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Main                                 2     2      0    9699
                                             69 BANK0      2     2      0
            _DimmerLightsPointSelect
                             _setBuz
                    _setDimmerLights
                _setDimmerLights_Adj
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_Adj                                  3     2      1    6609
                                             66 BANK0      3     2      1
            _DimmerLightsPointSelect
                  _setLoad_StatusOff
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (6) _setLoad_StatusOff                                    2     1      1     254
                                              0 BANK0      2     1      1
 ---------------------------------------------------------------------------------
 (5) _setDimmerLights                                      3     2      1    1430
                                              3 BANK0      3     2      1
            _DimmerLightsPointSelect
                             _setLED
                      _setLoad_Count
                   _setLoad_StatusOn
                       _setMemory_GO
 ---------------------------------------------------------------------------------
 (6) _setLoad_StatusOn                                     2     1      1     152
                                              0 BANK0      2     1      1
 ---------------------------------------------------------------------------------
 (6) _setLoad_Count                                        2     2      0      44
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setLED                                               2     1      1     758
                                              1 BANK0      2     1      1
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (5) _LedPointSelect                                       1     1      0      66
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _DimmerLights_Close                                   0     0      0     136
         _getDimmerLights_StatusFlag
                         _setLoad_GO
                       _setMemory_GO
 ---------------------------------------------------------------------------------
 (6) _setMemory_GO                                         3     3      0      66
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _setLoad_GO                                           1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (5) _getDimmerLights_StatusFlag                           3     3      0      48
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Initialization                          1     1      0      66
                                              4 BANK0      1     1      0
              _Dimmer_Initialization
     _setDimmerLights_Initialization
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Initialization                       2     2      0      66
                                              2 BANK0      2     2      0
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (2) _Dimmer_Initialization                                1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Main                                        0     0      0    9532
                        _DlyOff_Main
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Main                                          3     3      0    9532
                                             66 BANK0      3     3      0
                _DelayOffPointSelect
                             _setBuz
             _setDimmerLights_Switch
            _setDimmerLights_Trigger
                     _setRFSW_Status
                 _setRF_DimmerLights
                       _setSw_Status
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setTxData                                            2     2      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (6) _setSw_Status                                         2     1      1     472
                                              2 BANK0      2     1      1
                      _SwPointSelect
 ---------------------------------------------------------------------------------
 (3) _SwPointSelect                                        2     2      0      44
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setRF_DimmerLights                                   5     4      1    6117
                                             61 BANK0      5     4      1
                    _setPercentValue
 ---------------------------------------------------------------------------------
 (5) _setPercentValue                                      4     4      0    5427
                                             57 BANK0      4     4      0
                           ___awtoft
                            ___ftdiv
                            ___fttol
 ---------------------------------------------------------------------------------
 (6) ___fttol                                             14    10      4     380
                                             43 BANK0     14    10      4
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (6) ___ftdiv                                             16    10      6    2712
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (6) ___awtoft                                             6     3      3    2267
                                              8 BANK0      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) ___ftpack                                             8     3      5    2048
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (6) _setRFSW_Status                                       2     1      1     536
                                              2 BANK0      2     1      1
                    _RfSWPointSelect
 ---------------------------------------------------------------------------------
 (7) _RfSWPointSelect                                      2     2      0      44
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_Trigger                              2     1      1     408
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_Switch                               2     1      1     408
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (6) _DimmerLightsPointSelect                              2     2      0      44
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _setBuz                                               4     2      2    1415
                                              9 BANK0      4     2      2
                            ___awdiv
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4     428
                                              0 BANK0      9     5      4
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Initialization                              0     0      0      66
              _DlyOff_Initialization
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Initialization                                1     1      0      66
                                              2 BANK0      1     1      0
                _DelayOffPointSelect
 ---------------------------------------------------------------------------------
 (5) _DelayOffPointSelect                                  2     2      0      44
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _CC2500_PowerOnInitial                                0     0      0    1677
                 _CC2500_ClearRXFIFO
                 _CC2500_ClearTXFIFO
               _CC2500_FrequencyCabr
                 _CC2500_InitPATable
                  _CC2500_InitSetREG
                    _CC2500_PowerRST
                   _CC2500_SIDLEMode
 ---------------------------------------------------------------------------------
 (2) _CC2500_SIDLEMode                                     0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (2) _CC2500_PowerRST                                      1     1      0     394
                                              6 BANK0      1     1      0
                   _CC2500_WriteByte
                      _DelayTime_1us
 ---------------------------------------------------------------------------------
 (2) _CC2500_InitSetREG                                    4     4      0     354
                                              5 BANK0      4     4      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (2) _CC2500_InitPATable                                   3     3      0     309
                                              5 BANK0      3     3      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (3) _CC2500_WriteREG                                      3     2      1     218
                                              2 BANK0      3     2      1
                   _CC2500_WriteByte
 ---------------------------------------------------------------------------------
 (2) _CC2500_FrequencyCabr                                 0     0      0     416
                _CC2500_WriteCommand
                      _DelayTime_1us
 ---------------------------------------------------------------------------------
 (3) _DelayTime_1us                                        6     4      2     348
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (2) _CC2500_ClearTXFIFO                                   0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (2) _CC2500_ClearRXFIFO                                   0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (4) _CC2500_WriteCommand                                  2     2      0      68
                                              2 BANK0      2     2      0
                   _CC2500_WriteByte
 ---------------------------------------------------------------------------------
 (5) _CC2500_WriteByte                                     2     2      0      46
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Main                                          1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Initialization                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _ISR                                                 1     1      0     422
                                              7 COMMON     1     1      0
                            _INT_ISR
                            _IOC_ISR
                           _TMR0_ISR
 ---------------------------------------------------------------------------------
 (12) _TMR0_ISR                                            0     0      0     334
        _setDimmerLights_IntrControl
 ---------------------------------------------------------------------------------
 (13) _setDimmerLights_IntrControl                         5     5      0     334
                                              2 COMMON     5     5      0
              _DimmerIntrPointSelect
                i1_setLoad_StatusOff
 ---------------------------------------------------------------------------------
 (14) i1_setLoad_StatusOff                                 2     1      1     114
                                              0 COMMON     2     1      1
 ---------------------------------------------------------------------------------
 (14) _DimmerIntrPointSelect                               2     2      0      44
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (12) _IOC_ISR                                             0     0      0      66
                   _setDimmerReClock
 ---------------------------------------------------------------------------------
 (13) _setDimmerReClock                                    0     0      0      66
         _setDimmerLights_IntrIOC_GO
 ---------------------------------------------------------------------------------
 (14) _setDimmerLights_IntrIOC_GO                          1     1      0      66
                                              2 COMMON     1     1      0
           _DimmerIntrIOCPointSelect
 ---------------------------------------------------------------------------------
 (15) _DimmerIntrIOCPointSelect                            2     2      0      44
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (12) _INT_ISR                                             0     0      0      22
                    _setRF_ReceiveGO
 ---------------------------------------------------------------------------------
 (13) _setRF_ReceiveGO                                     1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 15
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Buzzer_Initialization
   _Buzzer_Main
   _CC2500_PowerOnInitial
     _CC2500_ClearRXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
     _CC2500_ClearTXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
     _CC2500_FrequencyCabr
       _CC2500_WriteCommand
         _CC2500_WriteByte
       _DelayTime_1us
     _CC2500_InitPATable
       _CC2500_WriteREG
         _CC2500_WriteByte
     _CC2500_InitSetREG
       _CC2500_WriteREG
         _CC2500_WriteByte
     _CC2500_PowerRST
       _CC2500_WriteByte
       _DelayTime_1us
     _CC2500_SIDLEMode
       _CC2500_WriteCommand
         _CC2500_WriteByte
   _DelayOff_Initialization
     _DlyOff_Initialization
       _DelayOffPointSelect
   _DelayOff_Main
     _DlyOff_Main
       _DelayOffPointSelect
       _setBuz
         ___awdiv
       _setDimmerLights_Switch
         _DimmerLightsPointSelect
       _setDimmerLights_Trigger
         _DimmerLightsPointSelect
       _setRFSW_Status
         _RfSWPointSelect
       _setRF_DimmerLights
         _setPercentValue
           ___awtoft
             ___ftpack
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
       _setSw_Status
         _SwPointSelect
       _setTxData
   _DimmerLights_Initialization
     _Dimmer_Initialization
     _setDimmerLights_Initialization
       _DimmerLightsPointSelect
   _DimmerLights_Main
     _DimmerLights_Close
       _getDimmerLights_StatusFlag
       _setLoad_GO
       _setMemory_GO
     _setDimmerLights_Main
       _DimmerLightsPointSelect
       _setBuz
         ___awdiv
       _setDimmerLights
         _DimmerLightsPointSelect
         _setLED
           _LedPointSelect
         _setLoad_Count
         _setLoad_StatusOn
         _setMemory_GO
       _setDimmerLights_Adj
         _DimmerLightsPointSelect
         _setLoad_StatusOff
         _setRF_DimmerLights
           _setPercentValue
             ___awtoft
               ___ftpack
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setTxData
   _Flash_Memory_Initialization
     _Flash_Memory_Read
     _Flash_Memory_Write
       _Flash_Memory_Unlock
     _setPercentValue
       ___awtoft
         ___ftpack
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
   _Flash_Memory_Main
     _Flash_Memory_Modify
       _Flash_Memory_Erasing
         _Flash_Memory_Unlock
       _Flash_Memory_Read
       _Flash_Memory_Write
         _Flash_Memory_Unlock
   _LED_Initialization
     _setLED_Initialization
       _LedPointSelect
       _setLED
         _LedPointSelect
   _LED_Main
     _setLED_Main
       _LedPointSelect
   _Load_Initialization
     _setLoad_AH_AL_Restore
   _Load_Main
     ___lwdiv
     ___wmul
     _getTemp_Safe
     _setDimmerLights_Clear
       _DimmerLightsPointSelect
     _setLoad_AH_AL_Restore
     _setLoad_Exceptions
       _DimmerLights_Exceptions
         _getDimmerLights_StatusFlag
         _setBuz
           ___awdiv
         _setDimmerLights_ERROR
           _DimmerLightsPointSelect
           _setLED
             _LedPointSelect
           _setLoad_StatusOff
           _setRFSW_Status
             _RfSWPointSelect
           _setSw_Status
             _SwPointSelect
         _setDimmerLights_TriggerERROR
           _DimmerLightsPointSelect
       _setLED
         _LedPointSelect
       _setRF_Enable
       _setSw_Enable
         _SwPointSelect
   _Mcu_Initialization
     _ADC_Set
     _Fosc_Set
     _INT_Set
     _IOC_Set
     _IO_Set
     _TMR0_Set
   _RF_Initialization
     _setRF_Initialization
   _RF_Main
     _setRF_Main
       _CC2500_RxData
         _CC2500_ReadByte
         _CC2500_ReadStatus
           _CC2500_ReadByte
           _CC2500_WriteByte
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
         _setBuz
           ___awdiv
       _CC2500_TxData
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
       _CC2500_WriteCommand
         _CC2500_WriteByte
       _RF_RxDisable
         _CC2500_WriteCommand
           _CC2500_WriteByte
       _getBuz_GO
       _getRxData
         _setControl_Lights_Table
           _setBuz
             ___awdiv
           _setDimmerLights
             _DimmerLightsPointSelect
             _setLED
               _LedPointSelect
             _setLoad_Count
             _setLoad_StatusOn
             _setMemory_GO
           _setRFSW_AdjControl
             _RfSWPointSelect
             _setRF_DimmerValue
               _setDimmerLights_AdjRF
                 _DimmerLightsPointSelect
                 _getPercentValue
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
             _setTxData
           _setRFSW_Control
             _RfSWPointSelect
             _setBuz
               ___awdiv
             _setDelayOff_GO
               _DelayOffPointSelect
               _DelayTimejudge
                 ___bmul
             _setDimmerLights_Switch
               _DimmerLightsPointSelect
             _setDimmerLights_Trigger
               _DimmerLightsPointSelect
             _setRF_DimmerLights
               _setPercentValue
                 ___awtoft
                   ___ftpack
                 ___ftdiv
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
             _setSw_Status
               _SwPointSelect
             _setTxData
           _setRFSW_Status
             _RfSWPointSelect
           _setSw_Status
             _SwPointSelect
           _setTxData
         _setLog_Code
           _setBuz
             ___awdiv
   _Switch_Initialization
     _TouchPower
     _setSw_Initialization
       _setLED
         _LedPointSelect
   _Switch_Main
     _setSw_Main
       _SwPointSelect
       _Sw_DimmerAdjFunc
         _setDimmerLights_AdjGo
           _DimmerLightsPointSelect
         _setDimmerLights_TriggerAdj
           _DimmerLightsPointSelect
         _setRFSW_Status
           _RfSWPointSelect
       _Sw_DimmerOffFunc
         _setDelayOff_GO
           _DelayOffPointSelect
           _DelayTimejudge
             ___bmul
         _setDimmerLights_AdjGo
           _DimmerLightsPointSelect
         _setDimmerLights_Switch
           _DimmerLightsPointSelect
         _setDimmerLights_Trigger
           _DimmerLightsPointSelect
         _setDimmerLights_TriggerAdj
           _DimmerLightsPointSelect
         _setRF_DimmerLights
           _setPercentValue
             ___awtoft
               ___ftpack
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setTxData
       _Sw_DimmerOnFunc
         _setBuz
           ___awdiv
         _setDimmerLights_Switch
           _DimmerLightsPointSelect
         _setDimmerLights_Trigger
           _DimmerLightsPointSelect
         _setRFSW_Status
           _RfSWPointSelect
         _setRF_DimmerLights
           _setPercentValue
             ___awtoft
               ___ftpack
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setTxData
       _setBuz
         ___awdiv
       _setRF_Learn
   _Temp_Initialization
     _setTemp_Initialization
   _Temp_Main
     _setTemp_Main
       _getLoad_Safe
       _setOverTemp_Exceptions
         _DimmerLights_Exceptions
           _getDimmerLights_StatusFlag
           _setBuz
             ___awdiv
           _setDimmerLights_ERROR
             _DimmerLightsPointSelect
             _setLED
               _LedPointSelect
             _setLoad_StatusOff
             _setRFSW_Status
               _RfSWPointSelect
             _setSw_Status
               _SwPointSelect
           _setDimmerLights_TriggerERROR
             _DimmerLightsPointSelect
         _setBuz
           ___awdiv
         _setLED
           _LedPointSelect
         _setRF_Enable
         _setSw_Enable
           _SwPointSelect
   _getLoad_AD
     _getAD
   _getTemp_AD
     _getAD
   _myMain_Initialization
   _my_Main
     _setBuz
       ___awdiv
     _setLoad_Enable
     _setRF_Enable
     _setSw_Enable
       _SwPointSelect
     _setTemp_Enable
   _my_TestPointCleared

 _ISR (ROOT)
   _INT_ISR
     _setRF_ReceiveGO
   _IOC_ISR
     _setDimmerReClock
       _setDimmerLights_IntrIOC_GO
         _DimmerIntrIOCPointSelect
   _TMR0_ISR
     _setDimmerLights_IntrControl
       _DimmerIntrPointSelect
       i1_setLoad_StatusOff

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       1       1        7.1%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      8       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     4E      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      0      4F       7       98.8%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      4E       9       97.5%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      42      11       82.5%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0      34      13       65.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0      25      15       46.3%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     196      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     196      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.32 build 58300 
Symbol Table                                                                                   Fri Oct 17 17:15:18 2014

                   __size_of_Switch_Main 0008                    ?_Flash_Memory_Erasing 0070  
           ??_setDimmerLights_TriggerAdj 0023                           ___bmul@product 0022  
                                     _RD 0CA8                  __end_of_CC2500_WriteREG 1CF7  
                                     _WR 0CA9                             ___awdiv@sign 0026  
                                     _Sw 006F       __end_of_getDimmerLights_StatusFlag 1B6E  
             _getDimmerLights_StatusFlag 1B5D                      ___wmul@multiplicand 0022  
                 __end_of_setDelayOff_GO 1800                             ___ftadd@exp1 004A  
                           ___ftadd@exp2 0049                setDimmerLights_Adj@lights 0064  
              __end_of_setLoad_StatusOff 1E16                     _setDimmerLights_Main 0974  
                           ___ftadd@sign 0048                                      l120 13F2  
                                    l106 1527                                      l116 13F8  
                                    l108 153B                                      l117 13F4  
                                    l301 1F90                                      l118 13E2  
                                    l304 1F96                                      l334 1CD1  
                                    l335 1CD3                                      l271 12CE  
                                    l272 12D3                                      l370 0806  
                                    l346 1CE6                                      l282 0F78  
                                    l266 12A4                                      l275 12D6  
                                    l364 1D34                                      l358 1B05  
                                    l287 0F8A                                      l816 1BD0  
                                    l862 16A3                                      _GIE 005F  
                                    _CRC 00CA                                      _RA0 0060  
                                    _RB0 0068     __size_of_DimmerLights_Initialization 0017  
                                    _RB1 0069                                      _RA3 0063  
                                    _RC0 0070                                      _RA4 0064  
                                    _LED 00C6                                      _RC1 0071  
                                    _RB3 006B                                      _RC2 0072  
                                    _RB4 006C                                      _RA6 0066  
                                    _RB5 006D                                      _RA7 0067  
                                    _RC4 0074                                      _RC5 0075  
                                    _RC7 0077                                      _RF1 00C1  
                                    _ISR 0004                                      _Sw1 01BE  
                                    _Sw2 01C7                setDimmerLights_Adj@status 0062  
               __end_of_CC2500_WriteByte 1CDE           ??_setDimmerLights_TriggerERROR 0023  
                  _Buzzer_Initialization 196E                          __end_of_ADC_Set 19BE  
                        ?_DelayTimejudge 0070                                      wreg 0009  
   setDimmerLights_Initialization@lights 0023                          _setDimmerLights 0CD3  
                  _setDimmerLights_ERROR 149F                    _setDimmerLights_AdjRF 1E9D  
                  _setDimmerLights_AdjGo 1B3D                  __size_of_setTemp_Enable 0008  
                  _setDimmerLights_Clear 1B2D                                     ?_ISR 0070  
                           ___ftdiv@cntr 0038                          __end_of_IOC_ISR 1AFD  
                             Load_Main@i 0033                             ___ftdiv@sign 003D  
                                   l2311 1AE3                                     l1344 1C73  
                                   l1370 1FC6                 ?_DimmerLightsPointSelect 0070  
                                   l3053 15F4                                     l3047 15DD  
                                   l1721 1146                                     l1713 036F  
                                   l2361 11C2                                     l2329 1191  
                                   l2347 1C5E                                     l2291 0A27  
                                   l3076 057B                          __end_of_IOC_Set 1A8A  
                                   l2293 0A4C                                     l2294 0A3B  
                                   l2286 0A07                                     l6001 1BBD  
                                   l1691 0235                                     l2707 1999  
                                   l6101 1469                                     l1694 0360  
                                   l6015 1C0B                                     l6103 1475  
                                   l6031 1F12                                     l6113 1490  
                                   l6117 1498                                     l6109 1487  
                                   l6301 1637                                     l6055 1E64  
                                   l6073 1C1F                                     l6313 1656  
                                   l6321 1662                                     l6305 163D  
                                   l8001 02E7                                     l6091 1461  
                                   l6059 1E6F                                     l6243 17D8  
                                   l6085 1456                                     l6173 0883  
                                   l6317 165C                                     l6333 1E8C  
                                   l6261 1E07                                     l6245 17E5  
                                   l2886 1DA4                                     l6431 0D31  
                                   l8007 02F4                                     l6503 11B0  
                                   l6239 17D2                                     l6337 1E94  
                                   l6265 1E0E                                     l7233 0988  
                                   l8025 031E                                     l8009 02FA  
                                   l6345 108D                                     l6249 17F1  
                                   l6283 161B                                     l6291 1627  
                                   l8051 0366                                     l8019 0312  
                                   l5811 0551                                     l5803 0534  
                                   l5741 15C4                                     l7245 09AD  
                                   l7237 0992                                     l6541 1683  
                                   l8037 033B                                     l8045 035D  
                                   l6381 1D8E                                     l5821 056D  
                                   l5813 0556                                     l5751 15EA  
                                   l5743 15C9                                     l5735 15B3  
                                   l6287 1621                                     l6383 1D94  
                                   l6711 0FDF                                     l5831 059F  
                                   l5823 0577                                     l5815 055A  
                                   l5911 0EFD                                     l6631 07EC  
                                   l6623 07DA                                     l8151 1767  
                                   l6297 1631                                     l7249 09B9  
                                   l5841 05BA                                     l5809 0547  
                                   l6465 0D7A                                     l6617 07BF  
                                   l8145 1759                                     l5739 15BA  
                                   l5851 0E03                                     l7259 09E1  
                                   l7371 16EE                                     l6547 1696  
                                   l6723 0FF8                                     l5827 058D  
                                   l5923 0F19                                     l5915 0F05  
                                   l6475 0D9E                                     l6635 07F5  
                                   l6627 07E3                                     l7611 0457  
                                   l7451 0C15                                     l7427 0BE2  
                                   l6733 0817                                     l5749 15E2  
                                   l6397 1B67                                     l6821 1FAC  
                                   l7365 16D7                                     l7285 1360  
                                   l6549 169B                                     l6709 0FC7  
                                   l6661 12B6                                     l5781 0504  
                                   l7509 0A17                                     l7621 0489  
                                   l7461 0C2C                                     l7429 0BE8  
                                   l6735 0822                                     l5871 0E5A  
                                   l5943 0C65                                     l7375 172D  
                                   l5791 051A                                     l5927 0F21  
                                   l6479 0DB4                                     l7463 0C2E  
                                   l5769 1E41                                     l5857 0E19  
                                   l5961 0C95                                     l7289 1367  
                                   l6673 0F4D                                     l6681 0F7B  
                                   l5785 050B                                     l6921 0921  
                                   l7561 03A4                                     l5971 0CB9  
                                   l5963 0CA3                                     l6771 126F  
                                   l7571 03B4                                     l7563 03AA  
                                   l5973 0CBC                                     l7805 064B  
                                   l5893 0EAC                                     l6941 0962  
                                   l6917 0914                                     l7573 03BC  
                                   l6861 1202                                     l5879 0E73  
                                   l7671 1100                                     l6951 1411  
                                   l5977 0CCA                                     l5969 0CB0  
                                   l7681 111B                                     l7649 1D9E  
                                   l6697 0FB8                                     l6881 137B  
                                   l7489 09FB                                     l6857 11F6  
                                   l5899 0EC2                                     l6955 141E  
                                   l7587 03E9                                     l7907 0B46  
                                   l7677 1112                                     l7669 10F4  
                                   l5997 1BB7                                     l6893 1391  
                                   l7597 0416                    _myMain_Initialization 1BD9  
                                   l7695 13CC                                     l7919 10DC  
                                   l7951 0ACD                                     l7943 0AA2  
                                   l7849 1252                                     l6985 08DE  
                                   l7891 0B16                                     l7981 0254  
                                   l7885 0AF3                                     l7895 0B1E  
                                   _CFGS 0CAE                                     l7987 027E  
                                   _FREE 0CAC                                     _LATA 010C  
                                   _LATB 010D                          __end_of_INT_ISR 1A0F  
                                   _LATC 010E                                     u4015 15BF  
                                   u4035 15D8                                     u4205 0535  
                                   u4055 15E5                                     u4235 0548  
                                   u4085 15FB                                     u4405 0E74  
                                   u4265 055B                                     u4515 0F22  
                                   _PEIE 005E                                     u4365 0E2B  
                                   u4525 0F28                                     u4445 0ECE  
                                   _INTE 005C                                     _INTF 0059  
                                   u4375 0E3B                                     u4615 0CB1  
                                   u4295 056E                                     u4455 0EDE  
                                   u4385 0E5B                                     u4395 0E6A  
                                   u4555 0C6C                                     u4475 0F06  
                                   u4715 1EFE                                     u7205 10F7  
                                   u4485 0F0C                                     u4825 146C  
                                   u4585 0C96                                     u7225 1101  
                                   u4930 0831                                     u7235 110B  
                                   u4845 1476                                     u7245 1113  
                                   u7165 1DA5                                     u4855 1480  
                                   u4935 082F                                     u7175 1DAA  
                                   u4865 1488                                     u7505 0B06  
                                   u7275 13C2                                     u5685 080C  
                                   u7605 0A76                                     u7615 0AB7  
                                   u7545 0B38                                     u7475 1239  
                                   u7575 10D3                                     u7745 0300  
                                   u7585 10E2                                     u7695 02BB  
                                   _LWLO 0CAD                                     _RFSW 00CF  
                                   _TMR0 0015                          __end_of_INT_Set 19A4  
                                   _RSSI 00D0                                     _WREN 0CAA  
                                   _Buz1 00B5                                     _main 1735  
                           ___ftpack@arg 0020                      __end_of_DlyOff_Main 0BC6  
                        __end_of_RF_Main 1977                             ___ftpack@exp 0023  
                                   fsr0h 0005                                     fsr1h 0007  
                                   fsr0l 0004                                     indf0 0000  
                                   indf1 0001                                     fsr1l 0006  
    __size_of_setDimmerLights_TriggerAdj 0010                                     btemp 007E  
                                   ltemp 007E            __size_of_setRF_Initialization 0008  
                       _setDimmerReClock 1A2C                                     start 0016  
                                   ttemp 007E                                     wtemp 007E  
                    DelayTimejudge@value 0029               __end_of_setRFSW_AdjControl 11D7  
                      ___bmul@multiplier 0023                             ___ftmul@cntr 003C  
                           ___ftmul@sign 003D             __size_of_Temp_Initialization 0003  
                                  ??_ISR 0077                             ___fttol@exp1 0058  
                           ___fttol@lval 0054           __size_of_DimmerIntrPointSelect 0012  
                       __end_of_LED_Main 1A7D            __end_of_DimmerIntrPointSelect 1BA2  
                  ?_setDimmerLights_Main 0070                          ?_setDelayOff_GO 002A  
                  __end_of_setLoad_Count 1AB2                                    ?_main 006A  
                        __end_of___awdiv 149F                          __end_of___ftadd 05D2  
                          __CFG_WDTE$OFF 0000                          __end_of___ftdiv 0E95  
                        __end_of___ftmul 0F49                          ___awdiv@divisor 0020  
                        __end_of___fttol 0CD3             setDimmerLights_AdjGo@command 0022  
                                  _IOCBF 0396                                    _IOCBN 0395  
                                  _IOCBP 0394                                    _IOCIE 005B  
                                  _IOCIF 0058                          __end_of___lwdiv 1122  
                                  i1l764 1BF6                                    i1l773 1B99  
                 _setDimmerLights_Switch 1B0D                          ___awdiv@counter 0025  
          __size_of_CC2500_FrequencyCabr 000C                                    _RFSW1 00EC  
                                  _RFSW2 00ED                                    _PORTA 000C  
                                  _PORTB 000D                                    _PORTC 000E  
                           ?_setLED_Main 0070                       setRF_Learn@command 0020  
                                  _TRISA 008C                                    _TRISB 008D  
                                  _TRISC 008E             __size_ofi1_setLoad_StatusOff 0016  
                                  _WPUB0 1068                                    _WPUB1 1069  
                                  _WPUB2 106A                                    _Load1 0120  
                          __CFG_WRT$HALF 0000                                    _Temp1 00D7  
     __end_of_setDimmerLights_IntrIOC_GO 1DD8               _setDimmerLights_IntrIOC_GO 1DB9  
                       __end_of_TMR0_ISR 2000             __size_of_CC2500_WriteCommand 0010  
                       __end_of_TMR0_Set 1A97                                    _getAD 1C69  
                          ___awtoft@sign 002D          __end_of_DimmerLights_Exceptions 16D0  
          DimmerLights_Exceptions@status 002D              DimmerIntrPointSelect@lights 0071  
                          ___ftpack@sign 0024                          __end_of_my_Main 0AD3  
                         _setLoad_Enable 1A18              __size_of_CC2500_ClearRXFIFO 0004  
                          ??_Buzzer_Main 0020              __size_of_CC2500_ClearTXFIFO 0004  
                    CC2500_RxData@loop_f 002F                           __pbitbssCOMMON 03E8  
                    setMemory_GO@command 0022                           __CFG_BOREN$OFF 0000  
                     Flash_Memory_Read@i 0021                         ?_CC2500_ReadByte 0070  
                                  ltemp0 007E                                    ltemp1 0082  
                                  ltemp2 0086                                    ltemp3 0080  
         __size_of_setLED_Initialization 0012            __end_of_setLED_Initialization 1BB4  
                                  ttemp0 007E                                    ttemp1 0081  
                                  ttemp2 0084                                    ttemp3 0087  
                                  ttemp4 007F                             ?_setRF_Learn 0070  
                                  status 0003                                    wtemp0 007E  
                                  wtemp1 0080                                    wtemp2 0082  
                                  wtemp3 0084                                    wtemp4 0086  
                                  wtemp5 0088                                    wtemp6 007F  
                     _setRF_DimmerLights 0827              __size_of_Flash_Memory_Write 0031  
                      ?_CC2500_SIDLEMode 0070               __size_of_RF_Initialization 0003  
                         setSw_Status@sw 0023                 setLoad_StatusOff@command 0020  
       __size_of_DelayOff_Initialization 0008                   ?_setLoad_AH_AL_Restore 0070  
              setDimmerLights_Main@clear 0065                    setLoad_Enable@command 0020  
                 ??_Flash_Memory_Erasing 0020                          _getPercentValue 154F  
                     ??_CC2500_SIDLEMode 0024                          __initialization 0018  
                       ?_CC2500_PowerRST 0070                        ??_Sw_DimmerOnFunc 0062  
                   __end_of_getLoad_Safe 19FE                        ??_setPercentValue 0059  
                           __end_of_main 179A                      ?_setRF_DimmerLights 005D  
                       __end_of_Fosc_Set 1994                         ?_CC2500_WriteREG 0022  
                              ??_ADC_Set 0020                  __end_of_setDimmerLights 0D5D  
                   _setSw_Initialization 19DE                  setOverTemp_Exceptions@i 002F  
             __size_of_setLoad_StatusOff 001F                                   ??_main 006E  
                          ___fttol@sign1 0053                             ?_setLog_Code 0070  
                _setControl_Lights_Table 0773                   ?_Buzzer_Initialization 0070  
      __size_of_DimmerIntrIOCPointSelect 0014                  ??_DlyOff_Initialization 0022  
                             _Receive_OK 03E8                ?_DimmerIntrIOCPointSelect 0070  
                              ??_IOC_ISR 0073                   ?_setDimmerLights_ERROR 0070  
                              ??_IOC_Set 0020          __end_of_DimmerLightsPointSelect 1BD9  
                 ?_setDimmerLights_AdjRF 0070                                ??_INT_ISR 0071  
                 ?_setDimmerLights_AdjGo 0022                 __size_of_setRFSW_Control 008F  
                       ??_setRFSW_Status 0023                                ??_INT_Set 0020  
                 ?_setDimmerLights_Clear 0022                  ??_Switch_Initialization 0024  
                 __end_of_setLoad_Enable 1A21                     __end_of_getTemp_Safe 1990  
                   ??_setRF_DimmerLights 005E                                   ?_getAD 0020  
                            _DlyOff_Main 0B4C                   ?_myMain_Initialization 0070  
                                 _ADCON0 009D                                   _ADCON1 009E  
                              ??_RF_Main 0069                                   _ADRESH 009C  
                                 _ADRESL 009B               i1setLoad_StatusOff@command 0070  
                       ___awdiv@dividend 0022                         __end_of___awtoft 1E58  
                                 _ANSELA 018C                                   _ANSELB 018D  
                                 _ANSELC 018E                         __end_of___ftpack 160B  
                                 _IOCBF2 1CB2                  _setDimmerLights_Trigger 1B1D  
                                 i1l7111 00B9                                   i1l7131 0109  
                                 i1l7107 00B2                                   i1l7143 013E  
                                 i1l7151 0169                                   i1l7135 011C  
                                 i1l7129 0103                                   i1l7137 0122  
                                 i1l7147 0155                                   i1l7173 01C2  
                                 i1l7157 0184                                   i1l7159 018A  
                                 i1l7175 01C8                                   i1l7193 01F9  
                                 i1l7169 01BC                                   i1l7189 01F3  
                                 _FVRCON 0117                                   _PMADRH 0192  
                                 _PMADRL 0191                                   _PMDATH 0194  
                                 _PMDATL 0193                                   _PMCON2 0196  
                                 u617_25 008D                                   _OSCCON 0099  
                     __size_of_Load_Main 016E                                   u738_25 1FF1  
                                 _TMR0IE 005D                                   _TMR0IF 005A  
                                 _IO_Set 1CF7                       DelayTime_1us@count 0020  
                  _Dimmer_Initialization 19B0           __size_of_CC2500_PowerOnInitial 0015  
          __end_of_CC2500_PowerOnInitial 1C3D                                   _Dimmer 00CB  
                                 _DlySw1 01D8                                   _DlySw2 01DD  
            __size_of_setLoad_Exceptions 0038               __end_of_Mcu_Initialization 1CAD  
                    __end_of_Buzzer_Main 13FF                                   _Memory 007C  
                                 _Timer0 00EE       __end_of_setDimmerLights_TriggerAdj 1B5D  
             _setDimmerLights_TriggerAdj 1B4D                                   ___bmul 1BB4  
          setDimmerLights_Switch@command 0022                                   ___wmul 1D9B  
                              ??___awdiv 0024                                ??___ftadd 0044  
           __size_of_DelayOffPointSelect 0014                                ??___ftdiv 0034  
                  setDimmerLights@lights 0025                                ??___ftmul 0034  
                              ??___fttol 004F             ?_Flash_Memory_Initialization 0070  
                              ??___lwdiv 0024              setDimmerLights_AdjRF@lights 0060  
                 ??_setDimmerLights_Main 0065                                   _r_data 00D5  
                                 _s_data 00D6                                   _setLED 160B  
                                 _myMain 007B                         _DimmerLightsIntr 007A  
                  ?_setSw_Initialization 0070                    setDimmerLights@status 0023  
                       ___awdiv@quotient 0027                                   _setBuz 14F6  
                     __size_of_Temp_Main 0003              __end_of_Load_Initialization 1999  
       ??_setDimmerLights_Initialization 0022          ?_setDimmerLights_Initialization 0070  
           __size_of_my_TestPointCleared 0011                    ___ftmul@f3_as_product 0039  
           ??_getDimmerLights_StatusFlag 0020                                ??_my_Main 002D  
    __end_of_setDimmerLights_IntrControl 021F              _setDimmerLights_IntrControl 0054  
               Flash_Memory_Read@address 0022                        RfSWPointSelect@sw 0021  
                  __end_of_SwPointSelect 1C28                          ?_setLoad_Enable 0070  
                          ?_setRF_Enable 0070                           _setTemp_Enable 19FE  
                        _RfSWPointSelect 1C53             __size_of_Flash_Memory_Modify 0065  
      setDimmerLights_IntrControl@lights 0076              __size_of_DimmerLights_Close 0018  
                __size_of_LedPointSelect 0022                      Flash_Memory_Write@i 0021  
           __size_of_Flash_Memory_Unlock 0009                               _TouchPower 1999  
                      ?_Sw_DimmerAdjFunc 0070              __size_of_CC2500_InitPATable 001F  
                    CC2500_TxData@loop_e 0025                  __end_of_getPercentValue 15AA  
       __end_of_CC2500_registers_address 102F                  __end_of__initialization 0050  
            setDimmerLights_AdjGo@lights 0023                                ?_LED_Main 0070  
                             ___ftadd@f1 003E                               ___ftadd@f2 0041  
                     ??_Sw_DimmerAdjFunc 0024                      setSw_Enable@command 0022  
                             ___ftdiv@f1 0031                               ___ftdiv@f2 002E  
                             ___ftdiv@f3 0039                        ?_Sw_DimmerOffFunc 0070  
                             ___awtoft@c 0028                      ___bmul@multiplicand 0020  
           ?_DimmerLights_Initialization 0070                               ___ftmul@f1 002E  
                             ___ftmul@f2 0031                               ___fttol@f1 004B  
                         __pcstackCOMMON 0070           DimmerIntrIOCPointSelect@lights 0071  
                     ??_Sw_DimmerOffFunc 0062                             __pidataBANK4 1E16  
                          __end_of_getAD 1C7F                                ?_TMR0_ISR 0070  
                              ?_TMR0_Set 0070                   setLoad_AH_AL_Restore@i 0021  
           __size_of_setDimmerLights_Adj 0044                       _LED_Initialization 1A65  
              ??_setControl_Lights_Table 0067         __size_of_DimmerLights_Exceptions 0063  
                       ??_DelayTimejudge 0024              ?_getDimmerLights_StatusFlag 0070  
              __size_of_setLoad_StatusOn 0023            ??_Flash_Memory_Initialization 005D  
               __size_of_setRF_ReceiveGO 000B                         ?_setDimmerLights 0023  
                      __end_of_Load_Main 038D                       __size_of_getBuz_GO 0011  
               __end_of_setDimmerReClock 1A37                       __size_of_getRxData 0047  
                    ?_LED_Initialization 0070                   __end_of_setTemp_Enable 1A06  
                      ?_CC2500_WriteByte 0070                           ??_setRF_Enable 0020  
                         _DimmerLights11 00CC                           _DimmerLights22 00CD  
                   __size_of_setLED_Main 0047                ??_setDimmerLights_Trigger 0023  
                                ??_getAD 0023                      _Temp_Initialization 197A  
                     ??_CC2500_WriteByte 0020             setDimmerLights_Switch@lights 0023  
                             __pbssBANK0 006F                               __pbssBANK1 00A0  
                             __pbssBANK2 0120                               __pbssBANK3 01A0  
                             __pbssBANK4 0240                               __pbssBANK5 02A0  
                              ?_Fosc_Set 0070                              _Buzzer_Main 13B5  
                      ??_setRFSW_Control 0062                        __end_of_Temp_Main 1980  
                 ?_Dimmer_Initialization 0070                                  ?_IO_Set 0070  
                             ??_LED_Main 0024                            ?_setMemory_GO 0070  
                        __CFG_VCAPEN$OFF 0000                  _DelayOff_Initialization 19BE  
                             __pnvCOMMON 007B                    __size_of_getLoad_Safe 0008  
                          ??_Switch_Main 006A                           DelayTime_1us@i 0022  
                         DelayTime_1us@j 0024                     ??_LED_Initialization 0024  
                           _DimmerLights 0079                        LedPointSelect@led 0020  
                    i1_setLoad_StatusOff 1C3D                   __size_of_DelayOff_Main 0008  
                   __size_of_setRF_Learn 0008                              setBuz@count 002C  
                             __pmaintext 1735                      _CC2500_WriteCommand 1AFD  
                   ?_Temp_Initialization 0070                                  ?___bmul 0020  
       __size_of_DimmerLightsPointSelect 0013                         ??_setDelayOff_GO 002C  
          ??_DimmerLights_Initialization 0024                                  ?___wmul 0020  
                             ??_TMR0_ISR 0077                            ?_setTemp_Main 0070  
                             ??_TMR0_Set 0020                               _getLoad_AD 0AD3  
                             __pintentry 0004                   ??_setSw_Initialization 0023  
                          ?_setSw_Enable 0070                       __size_of_setTxData 00B9  
                ?_setDimmerLights_Switch 0022                     Sw_DimmerAdjFunc@Idle 0024  
                                ?_setLED 0021                   __size_of_DelayTime_1us 0026  
                                _ADC_Set 19B7                                  ?_setBuz 0029  
                              ?___awtoft 0028                                ?___ftpack 0020  
                             _getTemp_AD 10B5             __end_of_setRF_Initialization 19DE  
                  __size_of_getTemp_Safe 0004                            ?_setSw_Status 0022  
                     _setRFSW_AdjControl 1198                  __end_of_RfSWPointSelect 1C69  
                      Sw_DimmerOnFunc@sw 0063                     ?i1_setLoad_StatusOff 0070  
                                _IOC_ISR 1AED                          ?_setTemp_Enable 0070  
                                _IOC_Set 1A7D                     __size_of_setLog_Code 003E  
                                _INT_ISR 1A06                                  _INT_Set 199E  
                   ?_CC2500_WriteCommand 0070                        _Flash_Memory_Main 1216  
                      _Flash_Memory_Read 1066              ?_setDimmerLights_IntrIOC_GO 0070  
                 __size_of_CC2500_RxData 00B7                   __size_of_CC2500_TxData 0044  
                    ?_setRFSW_AdjControl 0070      setDimmerLights_TriggerERROR@command 0022  
                           _getLoad_Safe 19F6                                  _RF_Data 00A0  
                                _RF_Main 1974                       ?_Flash_Memory_Main 0070  
                     ?_Flash_Memory_Read 0070          __end_of_setControl_Lights_Table 07FE  
                             ??_Fosc_Set 0020                              ?_TouchPower 0070  
                        _Sw_DimmerOnFunc 0902                          _setPercentValue 12E1  
                ??_setLoad_AH_AL_Restore 0020                           ??_setMemory_GO 0020  
                       ?_getPercentValue 0070                                  _Dimmer1 00E9  
           __end_of_CC2500_FrequencyCabr 1A59                          __size_of_IO_Set 0019  
                      __end_of_getBuz_GO 1B7F                      ??_Flash_Memory_Main 0027  
                    ??_Flash_Memory_Read 0020                                  _VarLED1 0166  
                                _VarLED2 016A                        __end_of_getRxData 13B5  
               _CC2500_registers_address 1000         __end_of_DimmerIntrIOCPointSelect 1C00  
                  ??_Temp_Initialization 0020          __end_of_setDimmerLights_Trigger 1B2D  
                   ??_setRFSW_AdjControl 0064                             _getTemp_Safe 198C  
                         ??_setTemp_Main 0031                          __size_of___bmul 0012  
         __end_of_setDimmerLights_Switch 1B1D                                  ___awdiv 144B  
                                ___ftadd 04DC                           ??_setSw_Enable 0022  
                                ___ftdiv 0DEC                          __size_of___wmul 001E  
                                ___ftmul 0E95                                  ___fttol 0C4C  
                    __end_of_Switch_Main 19F6                                  ___lwdiv 10EB  
                ??_Buzzer_Initialization 0020                 ??_setOverTemp_Exceptions 002E  
                                __myMain 0240                               ??___awtoft 002B  
                             ??___ftpack 0025                          __size_of_setLED 0062  
                   setRFSW_AdjControl@sw 0066                  ??_setDimmerLights_ERROR 0024  
                        __size_of_setBuz 0059                           ??_setSw_Status 0023  
                                __ptext1 1B7F                                  __ptext2 0A5D  
                                __ptext3 19FE                                  __ptext4 1A18  
                                __ptext5 1BD9                                  __ptext6 10B5  
                                __ptext7 0AD3                                  __ptext8 1C69  
                                __ptext9 197D                  ??_setDimmerLights_AdjRF 005F  
                ??_setDimmerLights_AdjGo 0023                __size_of_CC2500_SIDLEMode 0004  
                ??_setDimmerLights_Clear 0023                      Sw_DimmerOnFunc@Idle 0062  
                  ??i1_setLoad_StatusOff 0071                    _DimmerIntrPointSelect 1B90  
                           __size_of_ISR 0012                __end_of_Flash_Memory_Main 1259  
              __end_of_Flash_Memory_Read 1080                               _setRF_Main 09E7  
                ??_myMain_Initialization 0020                            _DelayOff_Main 19C6  
                      _DimmerLights_Main 1A42                                  _my_Main 0A5D  
         __size_of_DlyOff_Initialization 000B                    ??_CC2500_WriteCommand 0022  
          __end_of_DlyOff_Initialization 1A42                        ??_setRF_ReceiveGO 0070  
             __end_of_CC2500_ClearRXFIFO 1984                 ??_setTemp_Initialization 0020  
             __end_of_CC2500_ClearTXFIFO 1988            DimmerLightsPointSelect@lights 0021  
                           ?_DlyOff_Main 0070                       ?_DimmerLights_Main 0070  
                                _product 006E                           _LedPointSelect 1E58  
                    _DelayOffPointSelect 1C00                                  clrloop0 19AB  
         __size_of_Switch_Initialization 000D            __end_of_Switch_Initialization 1AA4  
                   end_of_initialization 0050                ??_DelayOff_Initialization 0023  
                             _setLoad_GO 19CE                        _CC2500_InitSetREG 1EC0  
                          _DelayTime_1us 0801                        __end_of_setTxData 0773  
             __end_of_Flash_Memory_Write 1FCD                      _my_TestPointCleared 1B7F  
                                init_ram 19A4                       ?_CC2500_InitSetREG 0070  
                    ??_DimmerLights_Main 0067                     Flash_Memory_Read@ret 0023  
                                initloop 19A5                               _setSw_Main 038D  
                  CC2500_ReadByte@loop_b 0021                        _CC2500_ReadStatus 1D2B  
                 __size_of_setLoad_Count 000E                     Flash_Memory_Modify@i 0026  
                  _setLED_Initialization 1BA2                               getBuz_GO@i 0024  
                     ?_CC2500_ReadStatus 0070                         setRFSW_Status@sw 0023  
               __size_of_CC2500_ReadByte 001D                            _CC2500_RxData 0F49  
                          _CC2500_TxData 129D                      ??_CC2500_InitSetREG 0025  
                   __end_of_setRF_Enable 1AC0              ?_setDimmerLights_TriggerAdj 0022  
          __size_of_Flash_Memory_Erasing 000C                     ?_DelayOffPointSelect 0070  
                    _Flash_Memory_Modify 16D0                  _DimmerLights_Exceptions 166D  
                            ?_getLoad_AD 0070                             __pstringtext 1000  
                    _Flash_Memory_Unlock 1A0F                      ??_CC2500_ReadStatus 0022  
                       _setLoad_StatusOn 1E7A         getDimmerLights_StatusFlag@Status 0021  
                CC2500_InitSetREG@loop_c 0028                              ?_getTemp_AD 0070  
                   ?_my_TestPointCleared 0070                setLoad_Exceptions@command 0030  
                    __size_of_TouchPower 0005                 setLED_Initialization@led 0023  
                 setSw_Initialization@sw 0023                __end_of_DimmerLights_Main 1A4D  
                     _Mcu_Initialization 1C96                         ??_setLoad_Enable 0020  
               __size_of_CC2500_PowerRST 0030                           ?_DelayOff_Main 0070  
                       ?_RfSWPointSelect 0070                          _setSw_Main$6014 0067  
                        _setSw_Main$6015 0068                         __CFG_FOSC$INTOSC 0000  
                 __end_of_LedPointSelect 1E7A                  __end_of_Sw_DimmerOnFunc 0974  
                __end_of_setPercentValue 1327                 __size_of_CC2500_WriteREG 0019  
              __end_of_CC2500_InitSetREG 1EEA                      ?_Mcu_Initialization 0070  
                   ?_Flash_Memory_Modify 0070              __size_of_setRF_DimmerLights 006C  
                         ?_DelayTime_1us 0020                      _setDimmerLights_Adj 1259  
                   ?_Flash_Memory_Unlock 0070                __end_of_CC2500_ReadStatus 1D46  
                          ?_RF_RxDisable 0070               __end_of_setLoad_Exceptions 115A  
                            ___ftdiv@exp 003C                           __end_of_IO_Set 1D10  
                   _setRF_Initialization 19D6                              _Switch_Main 19EE  
            setDimmerLights_Clear@lights 0023                      setLoad_Exceptions@i 002F  
                      __size_of_LED_Main 000C                           ?_CC2500_RxData 0070  
                         ?_CC2500_TxData 0070                  _DimmerLightsPointSelect 1BC6  
                            ___ftmul@exp 0038                    _CC2500_PowerOnInitial 1C28  
                   ??_Mcu_Initialization 0021                    ??_DelayOffPointSelect 0020  
                   ?_setDimmerLights_Adj 0062                           __end_of___bmul 1BC6  
              __size_of_Sw_DimmerAdjFunc 004C                     setRF_DimmerLights@on 005D  
               _DimmerIntrIOCPointSelect 1BEC                           __end_of___wmul 1DB9  
                  ??_my_TestPointCleared 0020                        __size_of_TMR0_ISR 0033  
        __size_of_setOverTemp_Exceptions 003F                   ?_DimmerIntrPointSelect 0070  
                      __size_of_TMR0_Set 000D                     __end_of_setMemory_GO 1D2B  
          __size_of_setDimmerLights_Main 0073                           __end_of_setLED 166D  
                         __end_of_setBuz 154F                            _setLoad_Count 1AA4  
        _getDimmerLights_StatusFlag$2253 0022                     _CC2500_FrequencyCabr 1A4D  
                setLoad_StatusOn@command 0020                __size_of_Sw_DimmerOffFunc 006F  
             __size_of_Flash_Memory_Main 0043               __size_of_Flash_Memory_Read 001A  
                            ?_setRF_Main 0070                          _setRFSW_Control 0D5D  
                      ?_setDimmerReClock 0070                      start_initialization 0018  
                      _setRF_DimmerValue 1080                          ?_LedPointSelect 0070  
             __end_of_DimmerLights_Close 1CC5                                _Load_Main 021F  
                setLoad_StatusOff@lights 0021                              __end_of_ISR 0016  
                  ??_Flash_Memory_Modify 0024             __size_of_Load_Initialization 0005  
                     ??_setDimmerReClock 0073                       ?_setRF_DimmerValue 0070  
             __end_of_CC2500_InitPATable 1DF7          __size_of_setTemp_Initialization 0003  
                  ??_Flash_Memory_Unlock 0020                  ??_Dimmer_Initialization 0020  
                   __end_of_setTemp_Main 0C4C                              ?_setLoad_GO 0070  
                         ??_RF_RxDisable 0024                     __end_of_setSw_Enable 1D7E  
                    __size_of_getLoad_AD 0079                             ?_Buzzer_Main 0070  
                               ??_IO_Set 0020                                _VarErrLED 00E5  
                            ?_setSw_Main 0070                      ??_setRF_DimmerValue 0061  
                    __size_of_getTemp_AD 0036                   ?_setLED_Initialization 0070  
                   __end_of_setSw_Status 1ADE                       Sw_DimmerAdjFunc@sw 0025  
                  ?_setRF_Initialization 0070                        __size_of_Fosc_Set 0004  
              i1setLoad_StatusOff@lights 0071                                _VarMemory 02A0  
                __size_of_setRFSW_Status 000F                __size_of_CC2500_WriteByte 0019  
                              _VarTimer0 01D0                                _Temp_Main 197D  
              ??_DimmerLights_Exceptions 002D            setOverTemp_Exceptions@command 0030  
                              _Rx_Length 00D1                  setRF_DimmerValue@lights 0063  
                               ??___bmul 0021                    ??_setDimmerLights_Adj 0063  
                               ??___wmul 0024                   __size_of_SwPointSelect 0014  
                              _Tx_Length 00D3                              __pdataBANK4 0220  
                               ??_setLED 0022                         ??_setTemp_Enable 0020  
                               ?_ADC_Set 0070                                 ??_setBuz 002B  
                        ??_DelayOff_Main 0065                        ??_CC2500_ReadByte 0020  
                         ?_setLoad_Count 0070                         _CC2500_SIDLEMode 1988  
             __size_of_DimmerLights_Main 000B                __end_of_setRF_DimmerValue 10B5  
                  ?_CC2500_FrequencyCabr 0070                            ??_setLED_Main 0021  
                      __size_of___awtoft 0022                        __size_of___ftpack 0061  
                               ?_IOC_ISR 0070                          _setRF_Main$5052 0068  
                            __pbssCOMMON 0078                                 ?_IOC_Set 0070  
                              ___latbits 0003                               ?_Load_Main 0070  
                  setTemp_Enable@command 0020                                 ?_INT_ISR 0070  
                    setRF_Enable@command 0020                         ?_Sw_DimmerOnFunc 0070  
                          __pcstackBANK0 0020                                 ?_INT_Set 0070  
                       ?_setPercentValue 0070                          ??_DelayTime_1us 0022  
             __size_of_CC2500_InitSetREG 002A                 __size_of_setDimmerLights 008A  
                          DlyOff_Main@sw 0064                        ??_CC2500_PowerRST 0026  
                               ?_RF_Main 0070             setDimmerLights_Clear@command 0022  
                           ??_TouchPower 0020                     __size_of_DlyOff_Main 007A  
             __size_of_CC2500_ReadStatus 001B                   _setOverTemp_Exceptions 11D7  
                      ??_CC2500_WriteREG 0023                            ??_setRF_Learn 0020  
                          _DimmerLights1 01A0                            _DimmerLights2 01AF  
                  CC2500_WriteREG@w_addr 0024                    setDelayOff_GO@command 002A  
              ??_DimmerLightsPointSelect 0020           __size_of_setLoad_AH_AL_Restore 001C  
                  __size_of_setRF_Enable 000E                          ??_CC2500_RxData 002D  
          __end_of_setLoad_AH_AL_Restore 1D62                          ??_CC2500_TxData 0024  
                              __pnvBANK0 006E                                __pnvBANK1 00EE  
            __size_of_LED_Initialization 000C                   ?_CC2500_PowerOnInitial 0070  
                             ?_Temp_Main 0070                      __size_of_setRF_Main 0076  
                       ___lwdiv@dividend 0022                    DelayOffPointSelect@sw 0021  
                             setBuz@time 0029                      setDelayOff_GO@value 002B  
               ?_setControl_Lights_Table 0070                   _setTemp_Initialization 1977  
                              _getBuz_GO 1B6E      __end_of_Flash_Memory_Initialization 06BA  
            _Flash_Memory_Initialization 05D2                                 ?___awdiv 0020  
                              __ptext100 1C14                                __ptext101 0827  
                              __ptext110 1B0D                                __ptext102 12E1  
                              __ptext111 1BC6                                __ptext103 0C4C  
                              __ptext120 1EC0                                __ptext112 14F6  
                              __ptext104 0DEC                                __ptext121 1DD8  
                              __ptext113 144B                                __ptext105 1E36  
                              __ptext130 196E                                __ptext122 1CDE  
                              __ptext114 19BE                                __ptext106 15AA  
                              __ptext123 1A4D                                __ptext115 1A37  
                              __ptext107 1AC0                                __ptext140 1A06  
                              __ptext132 1FCD                                __ptext124 0801  
                              __ptext116 1C00                                __ptext108 1C53  
                              __ptext141 1A21                                __ptext133 0054  
                              __ptext125 1984                                __ptext117 1C28  
                              __ptext109 1B1D                                 ?___ftadd 003E  
                              __ptext134 1C3D                                __ptext126 1980  
                              __ptext118 1988                                __ptext135 1B90  
                              __ptext127 1AFD                                __ptext119 1F6C  
                              __ptext136 1AED                                __ptext128 1CC5  
                              __ptext137 1A2C                                __ptext129 13B5  
                              __ptext138 1DB9                                __ptext139 1BEC  
                              _getRxData 136E                                 ?___ftdiv 002E  
                               ?___ftmul 002E                                 ?___fttol 004B  
                               ?___lwdiv 0020                  __end_of_setRFSW_Control 0DEC  
                        _setRF_ReceiveGO 1A21                      __size_of_setLoad_GO 0008  
          __size_of_setSw_Initialization 0008           __size_of_Buzzer_Initialization 0003  
          __end_of_Buzzer_Initialization 1971                         getPercentValue@i 005C  
                       setPercentValue@i 005A                            ??_setLog_Code 002D  
                     __end_of_TouchPower 199E       setDimmerLights_TriggerERROR@lights 0023  
         __size_of_setDimmerLights_ERROR 0057                 ?_setDimmerLights_Trigger 0022  
                        DelayTimejudge@i 0026                          DelayTimejudge@j 0027  
                        DelayTimejudge@k 0028                      __size_of_setSw_Main 014F  
          __end_of_setDimmerLights_ERROR 14F6             CC2500_ReadStatus@status_addr 0023  
         __size_of_setDimmerLights_AdjRF 0023           __size_of_setDimmerLights_AdjGo 0010  
          __end_of_setDimmerLights_AdjRF 1EC0            __end_of_setDimmerLights_AdjGo 1B4D  
                 CC2500_WriteByte@loop_a 0021           __size_of_setDimmerLights_Clear 0010  
                               ?_my_Main 0070            __end_of_setDimmerLights_Clear 1B3D  
                              _r_address 00D4           __size_of_myMain_Initialization 0013  
           __end_of_CC2500_patable_vaule 1066            __end_of_myMain_Initialization 1BEC  
                         __size_of_getAD 0016                             _setRF_Enable 1AB2  
                       ___lwdiv@quotient 0025                  __size_of_DelayTimejudge 002A  
                          _SwPointSelect 1C14                       Sw_DimmerOffFunc@sw 0064  
                    __end_of_setLED_Main 136E                      _DimmerLightsIntrIOC 00CE  
               __end_of_setLoad_StatusOn 1E9D                   ??_setRF_Initialization 0020  
            __end_of_Temp_Initialization 197D                        _CC2500_rfSettings 102F  
                         ___wmul@product 0024                                 _LED_Main 1A71  
                        SwPointSelect@sw 0021                                clear_ram0 19AA  
               CC2500_InitPATable@loop_d 0027                                _setTxData 06BA  
    __end_of_DimmerLights_Initialization 1C96              _DimmerLights_Initialization 1C7F  
                     _CC2500_ClearRXFIFO 1980                       _CC2500_ClearTXFIFO 1984  
         setDimmerLights_Trigger@command 0022                 setRF_DimmerLights@lights 0061  
                               _GO_nDONE 04E9                      __end_of_setRF_Learn 19EE  
                             ?_getBuz_GO 0020                 __size_of_getPercentValue 005B  
               setRF_DimmerLights@status 0060                   setRF_ReceiveGO@command 0070  
            __size_of_setRFSW_AdjControl 003F                    __size_of_setMemory_GO 001B  
                     _Flash_Memory_Write 1F9C                               ?_getRxData 0070  
                               _TMR0_ISR 1FCD                             ??_getLoad_AD 0024  
                 CC2500_InitSetREG@temp1 0026                   CC2500_InitSetREG@temp2 0027  
            __end_ofi1_setLoad_StatusOff 1C53                                 _TMR0_Set 1A8A  
                       _Sw_DimmerAdjFunc 13FF                      ?_CC2500_ClearRXFIFO 0070  
                    ?_CC2500_ClearTXFIFO 0070                          ??_setLoad_Count 0020  
      setDimmerLights_TriggerAdj@command 0022                                 _RF_Count 00C8  
                   __end_of_RF_RxDisable 1AED                             ??_getTemp_AD 0024  
            __end_of_CC2500_WriteCommand 1B0D                   ??_CC2500_FrequencyCabr 0026  
                DlyOff_Initialization@sw 0022                         __size_of_ADC_Set 0007  
                      ___wmul@multiplier 0020               __size_of_setRF_DimmerValue 0035  
                    ?_Flash_Memory_Write 0070                         _Sw_DimmerOffFunc 0893  
                  __size_of_setTemp_Main 0086                  __size_of_setDelayOff_GO 0066  
                  __size_of_setSw_Enable 001C                                 _DelayOff 0078  
                           setSw_Main@sw 0069         setDimmerLights_IntrIOC_GO@lights 0072  
                            ??_Load_Main 0031                         __size_of_IOC_ISR 0010  
           ?_setDimmerLights_IntrControl 0070                         __size_of_IOC_Set 000D  
           __end_of_Flash_Memory_Erasing 1A65                           ?_SwPointSelect 0070  
                            getAD@adcon0 0023                              getAD@adcon1 0020  
                       __size_of_INT_ISR 0009                           setLED_Main@led 0023  
                       __size_of_INT_Set 0006                      __end_of_setLog_Code 1198  
                  _DlyOff_Initialization 1A37                    __size_of_setSw_Status 000F  
                   ??_CC2500_ClearRXFIFO 0024                     ??_CC2500_ClearTXFIFO 0024  
              __end_of_CC2500_rfSettings 105E                         __size_of_RF_Main 0003  
                               _Fosc_Set 1990                   setLoad_StatusOn@lights 0021  
                     __end_of_getLoad_AD 0B4C                    _Switch_Initialization 1A97  
                   ??_Flash_Memory_Write 0020                        ??_setDimmerLights 0024  
                         _setRFSW_Status 1AC0                             _setMemory_GO 1D10  
                   __size_of_Buzzer_Main 004A                       __end_of_getTemp_AD 10EB  
                             ?_setTxData 0070                             ?_Switch_Main 0070  
             ??_DimmerIntrIOCPointSelect 0070                         _CC2500_WriteByte 1CC5  
                      getLoad_AD@channel 0026             Flash_Memory_Initialization@i 005E  
                __end_of_setRF_ReceiveGO 1A2C                              ??_Temp_Main 0032  
                      setRFSW_Control@sw 0063                      _Load_Initialization 1994  
                              setLED@led 0022     __end_of_setDimmerLights_TriggerERROR 1F3F  
  __size_of_setDimmerLights_TriggerERROR 002B             _setDimmerLights_TriggerERROR 1F14  
                ??_DimmerIntrPointSelect 0070                             _setTemp_Main 0BC6  
                     _setLoad_Exceptions 1122                         __size_of___awdiv 0054  
                       __size_of___ftadd 00F6                         ?_setRFSW_Control 0070  
                       __size_of___ftdiv 00A9                             _setSw_Enable 1D62  
                       __size_of___ftmul 00B4                         __size_of___fttol 0087  
                       __size_of___lwdiv 0037                                 ___awtoft 1E36  
                       ??_LedPointSelect 0020                                 ___ftpack 15AA  
                           _setSw_Status 1ACF                        getTemp_AD@channel 0025  
                           ??_setRF_Main 0067                     CC2500_WriteREG@value 0022  
                            _setLED_Main 1327                      ?_setLoad_Exceptions 0070  
                  setRFSW_Status@command 0022               __end_of_setRF_DimmerLights 0893  
               ?_DelayOff_Initialization 0070                         setDelayOff_GO@sw 002E  
                        ___lwdiv@divisor 0020                         __size_of_my_Main 0076  
                   ?_Load_Initialization 0070                          ___lwdiv@counter 0027  
                               __ptext10 0BC6                                 __ptext11 11D7  
                               __ptext20 13FF                                 __ptext12 19F6  
                               __ptext21 1B4D                                 __ptext13 197A  
                               __ptext30 0773                                 __ptext22 1B3D  
                               __ptext14 1977                                 __ptext31 0D5D  
                               __ptext23 1A97                                 __ptext15 19EE  
                               __ptext40 04DC                                 __ptext32 179A  
                               __ptext24 19DE                                 __ptext16 038D  
                               __ptext41 1B6E                                 __ptext33 1EEA  
                               __ptext25 1999                                 __ptext17 19E6  
                               __ptext50 1A8A                                 __ptext42 1ADE  
                               __ptext34 1BB4                                 __ptext26 1974  
                               __ptext18 0902                                 __ptext51 1CF7  
                               __ptext43 129D                                 __ptext35 1198  
                               __ptext27 09E7                                 __ptext19 0893  
                               __ptext60 166D                                 __ptext52 1A7D  
                               __ptext44 0F49                                 __ptext36 1080  
                               __ptext28 136E                                 __ptext61 1F14  
                               __ptext53 199E                                 __ptext45 1D2B  
                               __ptext37 1E9D                                 __ptext29 115A  
                               __ptext70 1327                                 __ptext62 149F  
                               __ptext54 1990                                 __ptext46 1D7E  
                               __ptext38 154F                                 __ptext71 1A65  
                               __ptext63 1B2D                                 __ptext55 19B7  
                               __ptext47 1971                                 __ptext39 0E95  
                               __ptext80 1A42                                 __ptext72 1BA2  
                               __ptext64 198C                                 __ptext56 021F  
                               __ptext48 19D6                                 __ptext81 0974  
                               __ptext73 1216                                 __ptext65 1D9B  
                               __ptext57 1122                                 __ptext49 1C96  
                               __ptext90 1D10                                 __ptext82 1259  
                               __ptext74 16D0                                 __ptext66 10EB  
                               __ptext58 1D62                                 __ptext91 19CE  
                               __ptext83 1DF7                                 __ptext75 1A59  
                               __ptext67 1994                                 __ptext59 1AB2  
                               __ptext92 1B5D                                 __ptext84 0CD3  
                               __ptext76 05D2                                 __ptext68 1D46  
                               __ptext93 1C7F                                 __ptext85 1E7A  
                               __ptext77 1F9C                                 __ptext69 1A71  
                               __ptext94 1F3F                                 __ptext86 1AA4  
                               __ptext78 1A0F                                 __ptext95 19B0  
                               __ptext87 160B                                 __ptext79 1066  
                               __ptext96 19C6                                 __ptext88 1E58  
                               __ptext97 0B4C                                 __ptext89 1CAD  
                               __ptext98 06BA                                 __ptext99 1ACF  
                               __product 0220            ??_setDimmerLights_IntrControl 0072  
                           ??_setLoad_GO 0020                  ??_setLED_Initialization 0023  
               __size_of_RfSWPointSelect 0016           __size_of_Dimmer_Initialization 0007  
                 __end_of_setRFSW_Status 1ACF            __end_of_Dimmer_Initialization 19B7  
           __end_of_setDimmerLights_Main 09E7              setDimmerLights_ERROR@lights 0025  
                           ??_setSw_Main 0065                            setLED@command 0021  
                          __size_of_main 0065                              _setRF_Learn 19E6  
               __end_of_CC2500_SIDLEMode 198C               setDimmerLights_Main@lights 0066  
            __end_of_DelayOffPointSelect 1C14               CC2500_WriteCommand@command 0023  
                     _DimmerLights_Close 1CAD                 ??_setDimmerLights_Switch 0023  
              __size_of_setDimmerReClock 000B                     ??_setLoad_Exceptions 002E  
                        _CC2500_ReadByte 1D7E                       _CC2500_InitPATable 1DD8  
    __size_of_getDimmerLights_StatusFlag 0011              __end_of_my_TestPointCleared 1B90  
          setDimmerLights_Trigger@lights 0023                       __end_of_setRF_Main 0A5D  
                            ??_getBuz_GO 0022              __size_of_Mcu_Initialization 0017  
                   _CC2500_patable_vaule 105E                              ??_getRxData 0067  
                    ?_DimmerLights_Close 0070         setDimmerLights_TriggerAdj@lights 0023  
                               main@argc 006A            ?_setDimmerLights_TriggerERROR 0022  
                               main@argv 006C                      ?_CC2500_InitPATable 0070  
                        _CC2500_PowerRST 1F6C                       __end_of_setLoad_GO 19D6  
            __end_of_Flash_Memory_Modify 1735                        ??_getPercentValue 0059  
                            _setLog_Code 115A              __end_of_Flash_Memory_Unlock 1A18  
                        ??_SwPointSelect 0020                          _CC2500_WriteREG 1CDE  
                     __end_of_setSw_Main 04DC                        setLoad_GO@command 0020  
                  ??_Load_Initialization 0022                            _Transceive_OK 03E9  
                   setLoad_Count@command 0021                   ?_DlyOff_Initialization 0070  
                ?_setOverTemp_Exceptions 0070                           _DelayTimejudge 1EEA  
                          ?_getLoad_Safe 0070                              pic14e$flags 007E  
                   ??_DimmerLights_Close 0023             ??_setDimmerLights_IntrIOC_GO 0072  
                               intlevel1 0000                     ??_CC2500_InitPATable 0025  
                __size_of_setLoad_Enable 0009                   ?_Switch_Initialization 0070  
                        ?_setRFSW_Status 0022                  ??_CC2500_PowerOnInitial 0029  
 __end_of_setDimmerLights_Initialization 1F6C  __size_of_setDimmerLights_Initialization 002D  
         _setDimmerLights_Initialization 1F3F              __end_of_setDimmerLights_Adj 129D  
                ?_setTemp_Initialization 0070                              ??_setTxData 0020  
                       ?_setRF_ReceiveGO 0070                   CC2500_InitPATable@temp 0026  
                  __size_of_RF_RxDisable 000F                        _RF_Initialization 1971  
   __size_of_setDimmerLights_IntrControl 01CB                              getLoad_AD@i 0028  
                            getLoad_AD@j 0027                            ?_getTemp_Safe 0070  
                   _Flash_Memory_Erasing 1A59                       ?_RF_Initialization 0070  
                             _SPI0Buffer 00D2          __end_of_DelayOff_Initialization 19C6  
    __size_of_setDimmerLights_IntrIOC_GO 001F                               _OPTION_REG 0095  
                  __end_of_DelayOff_Main 19CE                      ??_RF_Initialization 0021  
                         _setDelayOff_GO 179A         __size_of_setControl_Lights_Table 008B  
                      _setLoad_StatusOff 1DF7                   __end_of_DelayTimejudge 1F14  
         __end_of_setOverTemp_Exceptions 1216                           ??_getLoad_Safe 0020  
   __size_of_Flash_Memory_Initialization 00E8                            ??_DlyOff_Main 0062  
                     ?_setLoad_StatusOff 0020                    __end_of_DelayTime_1us 0827  
               __end_of_Sw_DimmerAdjFunc 144B                  __end_of_CC2500_ReadByte 1D9B  
           __end_of_setSw_Initialization 19E6                     getPercentValue@value 005B  
                           _RF_RxDisable 1ADE               __end_of_LED_Initialization 1A71  
       __size_of_setDimmerLights_Trigger 0010                        ?_setLoad_StatusOn 0020  
         __end_of_setTemp_Initialization 197A                 __size_of_Sw_DimmerOnFunc 0072  
                    ??_setLoad_StatusOff 0021                 ?_DimmerLights_Exceptions 0070  
               __size_of_setPercentValue 0046                     setPercentValue@value 0059  
              __end_of_RF_Initialization 1974                 __end_of_Sw_DimmerOffFunc 0902  
                     ??_setLoad_StatusOn 0021          __size_of_setDimmerLights_Switch 0010  
                      ??_RfSWPointSelect 0020                    __end_of_CC2500_RxData 1000  
                  __end_of_CC2500_TxData 12E1                           ??_getTemp_Safe 0020  
                  _setLoad_AH_AL_Restore 1D46                      setSw_Status@command 0022  
                __end_of_CC2500_PowerRST 1F9C  
