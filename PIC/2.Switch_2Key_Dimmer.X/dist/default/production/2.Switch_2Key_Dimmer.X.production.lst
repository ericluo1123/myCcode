

Microchip Technology PIC LITE Macro Assembler V1.32 build 58300 
                                                                                               Wed Oct 15 17:50:22 2014

Microchip Technology Omniscient Code Generator (Lite mode) build 58300
     1                           	processor	16F1518
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK3,global,class=CODE,delta=2
     5                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     6                           	psect	nvCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1
     8                           	psect	cinit,global,class=CODE,merge=1,delta=2
     9                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
    10                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    13                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    14                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1
    15                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    16                           	psect	bssBANK5,global,class=BANK5,space=1,delta=1
    17                           	psect	clrtext,global,class=CODE,delta=2
    18                           	psect	inittext,global,class=CODE,delta=2
    19                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    20                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    21                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    22                           	psect	text1,local,class=CODE,merge=1,delta=2
    23                           	psect	text2,local,class=CODE,merge=1,delta=2
    24                           	psect	text3,local,class=CODE,merge=1,delta=2
    25                           	psect	text4,local,class=CODE,merge=1,delta=2
    26                           	psect	text5,local,class=CODE,merge=1,delta=2
    27                           	psect	text6,local,class=CODE,merge=1,delta=2
    28                           	psect	text7,local,class=CODE,merge=1,delta=2
    29                           	psect	text8,local,class=CODE,merge=1,delta=2
    30                           	psect	text9,local,class=CODE,merge=1,delta=2
    31                           	psect	text10,local,class=CODE,merge=1,delta=2
    32                           	psect	text11,local,class=CODE,merge=1,delta=2
    33                           	psect	text12,local,class=CODE,merge=1,delta=2
    34                           	psect	text13,local,class=CODE,merge=1,delta=2
    35                           	psect	text14,local,class=CODE,merge=1,delta=2
    36                           	psect	text15,local,class=CODE,merge=1,delta=2
    37                           	psect	text16,local,class=CODE,merge=1,delta=2
    38                           	psect	text17,local,class=CODE,merge=1,delta=2
    39                           	psect	text18,local,class=CODE,merge=1,delta=2
    40                           	psect	text19,local,class=CODE,merge=1,delta=2
    41                           	psect	text20,local,class=CODE,merge=1,delta=2
    42                           	psect	text21,local,class=CODE,merge=1,delta=2
    43                           	psect	text22,local,class=CODE,merge=1,delta=2
    44                           	psect	text23,local,class=CODE,merge=1,delta=2
    45                           	psect	text24,local,class=CODE,merge=1,delta=2
    46                           	psect	text25,local,class=CODE,merge=1,delta=2
    47                           	psect	text26,local,class=CODE,merge=1,delta=2
    48                           	psect	text27,local,class=CODE,merge=1,delta=2
    49                           	psect	text28,local,class=CODE,merge=1,delta=2
    50                           	psect	text29,local,class=CODE,merge=1,delta=2
    51                           	psect	text30,local,class=CODE,merge=1,delta=2
    52                           	psect	text31,local,class=CODE,merge=1,delta=2
    53                           	psect	text32,local,class=CODE,merge=1,delta=2
    54                           	psect	text33,local,class=CODE,merge=1,delta=2
    55                           	psect	text34,local,class=CODE,merge=1,delta=2
    56                           	psect	text35,local,class=CODE,merge=1,delta=2
    57                           	psect	text36,local,class=CODE,merge=1,delta=2
    58                           	psect	text37,local,class=CODE,merge=1,delta=2
    59                           	psect	text38,local,class=CODE,merge=1,delta=2
    60                           	psect	text39,local,class=CODE,merge=1,delta=2
    61                           	psect	text40,local,class=CODE,merge=1,delta=2
    62                           	psect	text41,local,class=CODE,merge=1,delta=2
    63                           	psect	text42,local,class=CODE,merge=1,delta=2
    64                           	psect	text43,local,class=CODE,merge=1,delta=2
    65                           	psect	text44,local,class=CODE,merge=1,delta=2
    66                           	psect	text45,local,class=CODE,merge=1,delta=2
    67                           	psect	text46,local,class=CODE,merge=1,delta=2
    68                           	psect	text47,local,class=CODE,merge=1,delta=2
    69                           	psect	text48,local,class=CODE,merge=1,delta=2
    70                           	psect	text49,local,class=CODE,merge=1,delta=2
    71                           	psect	text50,local,class=CODE,merge=1,delta=2
    72                           	psect	text51,local,class=CODE,merge=1,delta=2
    73                           	psect	text52,local,class=CODE,merge=1,delta=2
    74                           	psect	text53,local,class=CODE,merge=1,delta=2
    75                           	psect	text54,local,class=CODE,merge=1,delta=2
    76                           	psect	text55,local,class=CODE,merge=1,delta=2
    77                           	psect	text56,local,class=CODE,merge=1,delta=2
    78                           	psect	text57,local,class=CODE,merge=1,delta=2
    79                           	psect	text58,local,class=CODE,merge=1,delta=2
    80                           	psect	text59,local,class=CODE,merge=1,delta=2
    81                           	psect	text60,local,class=CODE,merge=1,delta=2
    82                           	psect	text61,local,class=CODE,merge=1,delta=2
    83                           	psect	text62,local,class=CODE,merge=1,delta=2
    84                           	psect	text63,local,class=CODE,merge=1,delta=2
    85                           	psect	text64,local,class=CODE,merge=1,delta=2
    86                           	psect	text65,local,class=CODE,merge=1,delta=2
    87                           	psect	text66,local,class=CODE,merge=1,delta=2
    88                           	psect	text67,local,class=CODE,merge=1,delta=2
    89                           	psect	text68,local,class=CODE,merge=1,delta=2
    90                           	psect	text69,local,class=CODE,merge=1,delta=2
    91                           	psect	text70,local,class=CODE,merge=1,delta=2
    92                           	psect	text71,local,class=CODE,merge=1,delta=2
    93                           	psect	text72,local,class=CODE,merge=1,delta=2
    94                           	psect	text73,local,class=CODE,merge=1,delta=2
    95                           	psect	text74,local,class=CODE,merge=1,delta=2
    96                           	psect	text75,local,class=CODE,merge=1,delta=2
    97                           	psect	text76,local,class=CODE,merge=1,delta=2
    98                           	psect	text77,local,class=CODE,merge=1,delta=2
    99                           	psect	text78,local,class=CODE,merge=1,delta=2
   100                           	psect	text79,local,class=CODE,merge=1,delta=2
   101                           	psect	text80,local,class=CODE,merge=1,delta=2
   102                           	psect	text81,local,class=CODE,merge=1,delta=2
   103                           	psect	text82,local,class=CODE,merge=1,delta=2
   104                           	psect	text83,local,class=CODE,merge=1,delta=2
   105                           	psect	text84,local,class=CODE,merge=1,delta=2
   106                           	psect	text85,local,class=CODE,merge=1,delta=2
   107                           	psect	text86,local,class=CODE,merge=1,delta=2
   108                           	psect	text87,local,class=CODE,merge=1,delta=2
   109                           	psect	text88,local,class=CODE,merge=1,delta=2
   110                           	psect	text89,local,class=CODE,merge=1,delta=2
   111                           	psect	text90,local,class=CODE,merge=1,delta=2
   112                           	psect	text91,local,class=CODE,merge=1,delta=2
   113                           	psect	text92,local,class=CODE,merge=1,delta=2
   114                           	psect	text93,local,class=CODE,merge=1,delta=2
   115                           	psect	text94,local,class=CODE,merge=1,delta=2
   116                           	psect	text95,local,class=CODE,merge=1,delta=2
   117                           	psect	text96,local,class=CODE,merge=1,inline,delta=2
   118                           	psect	text97,local,class=CODE,merge=1,delta=2
   119                           	psect	text98,local,class=CODE,merge=1,delta=2
   120                           	psect	text99,local,class=CODE,merge=1,delta=2
   121                           	psect	text100,local,class=CODE,merge=1,delta=2
   122                           	psect	text101,local,class=CODE,merge=1,delta=2
   123                           	psect	text102,local,class=CODE,merge=1,delta=2
   124                           	psect	text103,local,class=CODE,merge=1,delta=2
   125                           	psect	text104,local,class=CODE,merge=1,delta=2
   126                           	psect	text105,local,class=CODE,merge=1,delta=2
   127                           	psect	text106,local,class=CODE,merge=1,delta=2
   128                           	psect	text107,local,class=CODE,merge=1,delta=2
   129                           	psect	text108,local,class=CODE,merge=1,delta=2
   130                           	psect	text109,local,class=CODE,merge=1,delta=2
   131                           	psect	text110,local,class=CODE,merge=1,delta=2
   132                           	psect	text111,local,class=CODE,merge=1,delta=2
   133                           	psect	text112,local,class=CODE,merge=1,delta=2
   134                           	psect	text113,local,class=CODE,merge=1,delta=2
   135                           	psect	text114,local,class=CODE,merge=1,delta=2
   136                           	psect	text115,local,class=CODE,merge=1,delta=2
   137                           	psect	text116,local,class=CODE,merge=1,delta=2
   138                           	psect	text117,local,class=CODE,merge=1,delta=2
   139                           	psect	text118,local,class=CODE,merge=1,delta=2
   140                           	psect	text119,local,class=CODE,merge=1,delta=2
   141                           	psect	text120,local,class=CODE,merge=1,delta=2
   142                           	psect	text121,local,class=CODE,merge=1,delta=2
   143                           	psect	text122,local,class=CODE,merge=1,delta=2
   144                           	psect	text123,local,class=CODE,merge=1,delta=2
   145                           	psect	text124,local,class=CODE,merge=1,delta=2
   146                           	psect	text125,local,class=CODE,merge=1,delta=2
   147                           	psect	text126,local,class=CODE,merge=1,delta=2
   148                           	psect	text127,local,class=CODE,merge=1,delta=2
   149                           	psect	text128,local,class=CODE,merge=1,delta=2
   150                           	psect	text129,local,class=CODE,merge=1,delta=2
   151                           	psect	text130,local,class=CODE,merge=1,delta=2
   152                           	psect	text131,local,class=CODE,merge=1,delta=2
   153                           	psect	text132,local,class=CODE,merge=1,delta=2
   154                           	psect	intentry,global,class=CODE,delta=2
   155                           	psect	text134,local,class=CODE,merge=1,delta=2
   156                           	psect	text135,local,class=CODE,merge=1,inline,delta=2
   157                           	psect	text136,local,class=CODE,merge=1,delta=2
   158                           	psect	text137,local,class=CODE,merge=1,inline,delta=2
   159                           	psect	text138,local,class=CODE,merge=1,delta=2
   160                           	psect	text139,local,class=CODE,merge=1,inline,delta=2
   161                           	psect	text140,local,class=CODE,merge=1,inline,delta=2
   162                           	psect	text141,local,class=CODE,merge=1,inline,delta=2
   163                           	psect	text142,local,class=CODE,merge=1,delta=2
   164                           	psect	text143,local,class=CODE,merge=1,delta=2
   165                           	psect	text144,local,class=CODE,merge=1,delta=2
   166                           	dabs	1,0x7E,2
   167  0000                     	;# 
   168  0001                     	;# 
   169  0002                     	;# 
   170  0003                     	;# 
   171  0004                     	;# 
   172  0005                     	;# 
   173  0006                     	;# 
   174  0007                     	;# 
   175  0008                     	;# 
   176  0009                     	;# 
   177  000A                     	;# 
   178  000B                     	;# 
   179  000C                     	;# 
   180  000D                     	;# 
   181  000E                     	;# 
   182  0010                     	;# 
   183  0011                     	;# 
   184  0012                     	;# 
   185  0015                     	;# 
   186  0016                     	;# 
   187  0016                     	;# 
   188  0017                     	;# 
   189  0018                     	;# 
   190  0019                     	;# 
   191  001A                     	;# 
   192  001B                     	;# 
   193  001C                     	;# 
   194  008C                     	;# 
   195  008D                     	;# 
   196  008E                     	;# 
   197  0090                     	;# 
   198  0091                     	;# 
   199  0092                     	;# 
   200  0095                     	;# 
   201  0096                     	;# 
   202  0097                     	;# 
   203  0099                     	;# 
   204  009A                     	;# 
   205  009B                     	;# 
   206  009B                     	;# 
   207  009C                     	;# 
   208  009D                     	;# 
   209  009E                     	;# 
   210  010C                     	;# 
   211  010D                     	;# 
   212  010E                     	;# 
   213  0116                     	;# 
   214  0117                     	;# 
   215  011D                     	;# 
   216  018C                     	;# 
   217  018D                     	;# 
   218  018E                     	;# 
   219  0191                     	;# 
   220  0191                     	;# 
   221  0192                     	;# 
   222  0193                     	;# 
   223  0193                     	;# 
   224  0194                     	;# 
   225  0195                     	;# 
   226  0196                     	;# 
   227  0197                     	;# 
   228  0199                     	;# 
   229  019A                     	;# 
   230  019B                     	;# 
   231  019B                     	;# 
   232  019B                     	;# 
   233  019B                     	;# 
   234  019C                     	;# 
   235  019C                     	;# 
   236  019D                     	;# 
   237  019E                     	;# 
   238  019F                     	;# 
   239  020D                     	;# 
   240  0210                     	;# 
   241  0211                     	;# 
   242  0211                     	;# 
   243  0212                     	;# 
   244  0212                     	;# 
   245  0213                     	;# 
   246  0213                     	;# 
   247  0214                     	;# 
   248  0214                     	;# 
   249  0215                     	;# 
   250  0215                     	;# 
   251  0215                     	;# 
   252  0216                     	;# 
   253  0216                     	;# 
   254  0217                     	;# 
   255  0217                     	;# 
   256  0291                     	;# 
   257  0291                     	;# 
   258  0292                     	;# 
   259  0293                     	;# 
   260  0298                     	;# 
   261  0298                     	;# 
   262  0299                     	;# 
   263  029A                     	;# 
   264  0394                     	;# 
   265  0395                     	;# 
   266  0396                     	;# 
   267  0FE4                     	;# 
   268  0FE5                     	;# 
   269  0FE6                     	;# 
   270  0FE7                     	;# 
   271  0FE8                     	;# 
   272  0FE9                     	;# 
   273  0FEA                     	;# 
   274  0FEB                     	;# 
   275  0FED                     	;# 
   276  0FEE                     	;# 
   277  0FEF                     	;# 
   278  0000                     	;# 
   279  0001                     	;# 
   280  0002                     	;# 
   281  0003                     	;# 
   282  0004                     	;# 
   283  0005                     	;# 
   284  0006                     	;# 
   285  0007                     	;# 
   286  0008                     	;# 
   287  0009                     	;# 
   288  000A                     	;# 
   289  000B                     	;# 
   290  000C                     	;# 
   291  000D                     	;# 
   292  000E                     	;# 
   293  0010                     	;# 
   294  0011                     	;# 
   295  0012                     	;# 
   296  0015                     	;# 
   297  0016                     	;# 
   298  0016                     	;# 
   299  0017                     	;# 
   300  0018                     	;# 
   301  0019                     	;# 
   302  001A                     	;# 
   303  001B                     	;# 
   304  001C                     	;# 
   305  008C                     	;# 
   306  008D                     	;# 
   307  008E                     	;# 
   308  0090                     	;# 
   309  0091                     	;# 
   310  0092                     	;# 
   311  0095                     	;# 
   312  0096                     	;# 
   313  0097                     	;# 
   314  0099                     	;# 
   315  009A                     	;# 
   316  009B                     	;# 
   317  009B                     	;# 
   318  009C                     	;# 
   319  009D                     	;# 
   320  009E                     	;# 
   321  010C                     	;# 
   322  010D                     	;# 
   323  010E                     	;# 
   324  0116                     	;# 
   325  0117                     	;# 
   326  011D                     	;# 
   327  018C                     	;# 
   328  018D                     	;# 
   329  018E                     	;# 
   330  0191                     	;# 
   331  0191                     	;# 
   332  0192                     	;# 
   333  0193                     	;# 
   334  0193                     	;# 
   335  0194                     	;# 
   336  0195                     	;# 
   337  0196                     	;# 
   338  0197                     	;# 
   339  0199                     	;# 
   340  019A                     	;# 
   341  019B                     	;# 
   342  019B                     	;# 
   343  019B                     	;# 
   344  019B                     	;# 
   345  019C                     	;# 
   346  019C                     	;# 
   347  019D                     	;# 
   348  019E                     	;# 
   349  019F                     	;# 
   350  020D                     	;# 
   351  0210                     	;# 
   352  0211                     	;# 
   353  0211                     	;# 
   354  0212                     	;# 
   355  0212                     	;# 
   356  0213                     	;# 
   357  0213                     	;# 
   358  0214                     	;# 
   359  0214                     	;# 
   360  0215                     	;# 
   361  0215                     	;# 
   362  0215                     	;# 
   363  0216                     	;# 
   364  0216                     	;# 
   365  0217                     	;# 
   366  0217                     	;# 
   367  0291                     	;# 
   368  0291                     	;# 
   369  0292                     	;# 
   370  0293                     	;# 
   371  0298                     	;# 
   372  0298                     	;# 
   373  0299                     	;# 
   374  029A                     	;# 
   375  0394                     	;# 
   376  0395                     	;# 
   377  0396                     	;# 
   378  0FE4                     	;# 
   379  0FE5                     	;# 
   380  0FE6                     	;# 
   381  0FE7                     	;# 
   382  0FE8                     	;# 
   383  0FE9                     	;# 
   384  0FEA                     	;# 
   385  0FEB                     	;# 
   386  0FED                     	;# 
   387  0FEE                     	;# 
   388  0FEF                     	;# 
   389  0000                     	;# 
   390  0001                     	;# 
   391  0002                     	;# 
   392  0003                     	;# 
   393  0004                     	;# 
   394  0005                     	;# 
   395  0006                     	;# 
   396  0007                     	;# 
   397  0008                     	;# 
   398  0009                     	;# 
   399  000A                     	;# 
   400  000B                     	;# 
   401  000C                     	;# 
   402  000D                     	;# 
   403  000E                     	;# 
   404  0010                     	;# 
   405  0011                     	;# 
   406  0012                     	;# 
   407  0015                     	;# 
   408  0016                     	;# 
   409  0016                     	;# 
   410  0017                     	;# 
   411  0018                     	;# 
   412  0019                     	;# 
   413  001A                     	;# 
   414  001B                     	;# 
   415  001C                     	;# 
   416  008C                     	;# 
   417  008D                     	;# 
   418  008E                     	;# 
   419  0090                     	;# 
   420  0091                     	;# 
   421  0092                     	;# 
   422  0095                     	;# 
   423  0096                     	;# 
   424  0097                     	;# 
   425  0099                     	;# 
   426  009A                     	;# 
   427  009B                     	;# 
   428  009B                     	;# 
   429  009C                     	;# 
   430  009D                     	;# 
   431  009E                     	;# 
   432  010C                     	;# 
   433  010D                     	;# 
   434  010E                     	;# 
   435  0116                     	;# 
   436  0117                     	;# 
   437  011D                     	;# 
   438  018C                     	;# 
   439  018D                     	;# 
   440  018E                     	;# 
   441  0191                     	;# 
   442  0191                     	;# 
   443  0192                     	;# 
   444  0193                     	;# 
   445  0193                     	;# 
   446  0194                     	;# 
   447  0195                     	;# 
   448  0196                     	;# 
   449  0197                     	;# 
   450  0199                     	;# 
   451  019A                     	;# 
   452  019B                     	;# 
   453  019B                     	;# 
   454  019B                     	;# 
   455  019B                     	;# 
   456  019C                     	;# 
   457  019C                     	;# 
   458  019D                     	;# 
   459  019E                     	;# 
   460  019F                     	;# 
   461  020D                     	;# 
   462  0210                     	;# 
   463  0211                     	;# 
   464  0211                     	;# 
   465  0212                     	;# 
   466  0212                     	;# 
   467  0213                     	;# 
   468  0213                     	;# 
   469  0214                     	;# 
   470  0214                     	;# 
   471  0215                     	;# 
   472  0215                     	;# 
   473  0215                     	;# 
   474  0216                     	;# 
   475  0216                     	;# 
   476  0217                     	;# 
   477  0217                     	;# 
   478  0291                     	;# 
   479  0291                     	;# 
   480  0292                     	;# 
   481  0293                     	;# 
   482  0298                     	;# 
   483  0298                     	;# 
   484  0299                     	;# 
   485  029A                     	;# 
   486  0394                     	;# 
   487  0395                     	;# 
   488  0396                     	;# 
   489  0FE4                     	;# 
   490  0FE5                     	;# 
   491  0FE6                     	;# 
   492  0FE7                     	;# 
   493  0FE8                     	;# 
   494  0FE9                     	;# 
   495  0FEA                     	;# 
   496  0FEB                     	;# 
   497  0FED                     	;# 
   498  0FEE                     	;# 
   499  0FEF                     	;# 
   500  0000                     	;# 
   501  0001                     	;# 
   502  0002                     	;# 
   503  0003                     	;# 
   504  0004                     	;# 
   505  0005                     	;# 
   506  0006                     	;# 
   507  0007                     	;# 
   508  0008                     	;# 
   509  0009                     	;# 
   510  000A                     	;# 
   511  000B                     	;# 
   512  000C                     	;# 
   513  000D                     	;# 
   514  000E                     	;# 
   515  0010                     	;# 
   516  0011                     	;# 
   517  0012                     	;# 
   518  0015                     	;# 
   519  0016                     	;# 
   520  0016                     	;# 
   521  0017                     	;# 
   522  0018                     	;# 
   523  0019                     	;# 
   524  001A                     	;# 
   525  001B                     	;# 
   526  001C                     	;# 
   527  008C                     	;# 
   528  008D                     	;# 
   529  008E                     	;# 
   530  0090                     	;# 
   531  0091                     	;# 
   532  0092                     	;# 
   533  0095                     	;# 
   534  0096                     	;# 
   535  0097                     	;# 
   536  0099                     	;# 
   537  009A                     	;# 
   538  009B                     	;# 
   539  009B                     	;# 
   540  009C                     	;# 
   541  009D                     	;# 
   542  009E                     	;# 
   543  010C                     	;# 
   544  010D                     	;# 
   545  010E                     	;# 
   546  0116                     	;# 
   547  0117                     	;# 
   548  011D                     	;# 
   549  018C                     	;# 
   550  018D                     	;# 
   551  018E                     	;# 
   552  0191                     	;# 
   553  0191                     	;# 
   554  0192                     	;# 
   555  0193                     	;# 
   556  0193                     	;# 
   557  0194                     	;# 
   558  0195                     	;# 
   559  0196                     	;# 
   560  0197                     	;# 
   561  0199                     	;# 
   562  019A                     	;# 
   563  019B                     	;# 
   564  019B                     	;# 
   565  019B                     	;# 
   566  019B                     	;# 
   567  019C                     	;# 
   568  019C                     	;# 
   569  019D                     	;# 
   570  019E                     	;# 
   571  019F                     	;# 
   572  020D                     	;# 
   573  0210                     	;# 
   574  0211                     	;# 
   575  0211                     	;# 
   576  0212                     	;# 
   577  0212                     	;# 
   578  0213                     	;# 
   579  0213                     	;# 
   580  0214                     	;# 
   581  0214                     	;# 
   582  0215                     	;# 
   583  0215                     	;# 
   584  0215                     	;# 
   585  0216                     	;# 
   586  0216                     	;# 
   587  0217                     	;# 
   588  0217                     	;# 
   589  0291                     	;# 
   590  0291                     	;# 
   591  0292                     	;# 
   592  0293                     	;# 
   593  0298                     	;# 
   594  0298                     	;# 
   595  0299                     	;# 
   596  029A                     	;# 
   597  0394                     	;# 
   598  0395                     	;# 
   599  0396                     	;# 
   600  0FE4                     	;# 
   601  0FE5                     	;# 
   602  0FE6                     	;# 
   603  0FE7                     	;# 
   604  0FE8                     	;# 
   605  0FE9                     	;# 
   606  0FEA                     	;# 
   607  0FEB                     	;# 
   608  0FED                     	;# 
   609  0FEE                     	;# 
   610  0FEF                     	;# 
   611  0000                     	;# 
   612  0001                     	;# 
   613  0002                     	;# 
   614  0003                     	;# 
   615  0004                     	;# 
   616  0005                     	;# 
   617  0006                     	;# 
   618  0007                     	;# 
   619  0008                     	;# 
   620  0009                     	;# 
   621  000A                     	;# 
   622  000B                     	;# 
   623  000C                     	;# 
   624  000D                     	;# 
   625  000E                     	;# 
   626  0010                     	;# 
   627  0011                     	;# 
   628  0012                     	;# 
   629  0015                     	;# 
   630  0016                     	;# 
   631  0016                     	;# 
   632  0017                     	;# 
   633  0018                     	;# 
   634  0019                     	;# 
   635  001A                     	;# 
   636  001B                     	;# 
   637  001C                     	;# 
   638  008C                     	;# 
   639  008D                     	;# 
   640  008E                     	;# 
   641  0090                     	;# 
   642  0091                     	;# 
   643  0092                     	;# 
   644  0095                     	;# 
   645  0096                     	;# 
   646  0097                     	;# 
   647  0099                     	;# 
   648  009A                     	;# 
   649  009B                     	;# 
   650  009B                     	;# 
   651  009C                     	;# 
   652  009D                     	;# 
   653  009E                     	;# 
   654  010C                     	;# 
   655  010D                     	;# 
   656  010E                     	;# 
   657  0116                     	;# 
   658  0117                     	;# 
   659  011D                     	;# 
   660  018C                     	;# 
   661  018D                     	;# 
   662  018E                     	;# 
   663  0191                     	;# 
   664  0191                     	;# 
   665  0192                     	;# 
   666  0193                     	;# 
   667  0193                     	;# 
   668  0194                     	;# 
   669  0195                     	;# 
   670  0196                     	;# 
   671  0197                     	;# 
   672  0199                     	;# 
   673  019A                     	;# 
   674  019B                     	;# 
   675  019B                     	;# 
   676  019B                     	;# 
   677  019B                     	;# 
   678  019C                     	;# 
   679  019C                     	;# 
   680  019D                     	;# 
   681  019E                     	;# 
   682  019F                     	;# 
   683  020D                     	;# 
   684  0210                     	;# 
   685  0211                     	;# 
   686  0211                     	;# 
   687  0212                     	;# 
   688  0212                     	;# 
   689  0213                     	;# 
   690  0213                     	;# 
   691  0214                     	;# 
   692  0214                     	;# 
   693  0215                     	;# 
   694  0215                     	;# 
   695  0215                     	;# 
   696  0216                     	;# 
   697  0216                     	;# 
   698  0217                     	;# 
   699  0217                     	;# 
   700  0291                     	;# 
   701  0291                     	;# 
   702  0292                     	;# 
   703  0293                     	;# 
   704  0298                     	;# 
   705  0298                     	;# 
   706  0299                     	;# 
   707  029A                     	;# 
   708  0394                     	;# 
   709  0395                     	;# 
   710  0396                     	;# 
   711  0FE4                     	;# 
   712  0FE5                     	;# 
   713  0FE6                     	;# 
   714  0FE7                     	;# 
   715  0FE8                     	;# 
   716  0FE9                     	;# 
   717  0FEA                     	;# 
   718  0FEB                     	;# 
   719  0FED                     	;# 
   720  0FEE                     	;# 
   721  0FEF                     	;# 
   722  0000                     	;# 
   723  0001                     	;# 
   724  0002                     	;# 
   725  0003                     	;# 
   726  0004                     	;# 
   727  0005                     	;# 
   728  0006                     	;# 
   729  0007                     	;# 
   730  0008                     	;# 
   731  0009                     	;# 
   732  000A                     	;# 
   733  000B                     	;# 
   734  000C                     	;# 
   735  000D                     	;# 
   736  000E                     	;# 
   737  0010                     	;# 
   738  0011                     	;# 
   739  0012                     	;# 
   740  0015                     	;# 
   741  0016                     	;# 
   742  0016                     	;# 
   743  0017                     	;# 
   744  0018                     	;# 
   745  0019                     	;# 
   746  001A                     	;# 
   747  001B                     	;# 
   748  001C                     	;# 
   749  008C                     	;# 
   750  008D                     	;# 
   751  008E                     	;# 
   752  0090                     	;# 
   753  0091                     	;# 
   754  0092                     	;# 
   755  0095                     	;# 
   756  0096                     	;# 
   757  0097                     	;# 
   758  0099                     	;# 
   759  009A                     	;# 
   760  009B                     	;# 
   761  009B                     	;# 
   762  009C                     	;# 
   763  009D                     	;# 
   764  009E                     	;# 
   765  010C                     	;# 
   766  010D                     	;# 
   767  010E                     	;# 
   768  0116                     	;# 
   769  0117                     	;# 
   770  011D                     	;# 
   771  018C                     	;# 
   772  018D                     	;# 
   773  018E                     	;# 
   774  0191                     	;# 
   775  0191                     	;# 
   776  0192                     	;# 
   777  0193                     	;# 
   778  0193                     	;# 
   779  0194                     	;# 
   780  0195                     	;# 
   781  0196                     	;# 
   782  0197                     	;# 
   783  0199                     	;# 
   784  019A                     	;# 
   785  019B                     	;# 
   786  019B                     	;# 
   787  019B                     	;# 
   788  019B                     	;# 
   789  019C                     	;# 
   790  019C                     	;# 
   791  019D                     	;# 
   792  019E                     	;# 
   793  019F                     	;# 
   794  020D                     	;# 
   795  0210                     	;# 
   796  0211                     	;# 
   797  0211                     	;# 
   798  0212                     	;# 
   799  0212                     	;# 
   800  0213                     	;# 
   801  0213                     	;# 
   802  0214                     	;# 
   803  0214                     	;# 
   804  0215                     	;# 
   805  0215                     	;# 
   806  0215                     	;# 
   807  0216                     	;# 
   808  0216                     	;# 
   809  0217                     	;# 
   810  0217                     	;# 
   811  0291                     	;# 
   812  0291                     	;# 
   813  0292                     	;# 
   814  0293                     	;# 
   815  0298                     	;# 
   816  0298                     	;# 
   817  0299                     	;# 
   818  029A                     	;# 
   819  0394                     	;# 
   820  0395                     	;# 
   821  0396                     	;# 
   822  0FE4                     	;# 
   823  0FE5                     	;# 
   824  0FE6                     	;# 
   825  0FE7                     	;# 
   826  0FE8                     	;# 
   827  0FE9                     	;# 
   828  0FEA                     	;# 
   829  0FEB                     	;# 
   830  0FED                     	;# 
   831  0FEE                     	;# 
   832  0FEF                     	;# 
   833  0000                     	;# 
   834  0001                     	;# 
   835  0002                     	;# 
   836  0003                     	;# 
   837  0004                     	;# 
   838  0005                     	;# 
   839  0006                     	;# 
   840  0007                     	;# 
   841  0008                     	;# 
   842  0009                     	;# 
   843  000A                     	;# 
   844  000B                     	;# 
   845  000C                     	;# 
   846  000D                     	;# 
   847  000E                     	;# 
   848  0010                     	;# 
   849  0011                     	;# 
   850  0012                     	;# 
   851  0015                     	;# 
   852  0016                     	;# 
   853  0016                     	;# 
   854  0017                     	;# 
   855  0018                     	;# 
   856  0019                     	;# 
   857  001A                     	;# 
   858  001B                     	;# 
   859  001C                     	;# 
   860  008C                     	;# 
   861  008D                     	;# 
   862  008E                     	;# 
   863  0090                     	;# 
   864  0091                     	;# 
   865  0092                     	;# 
   866  0095                     	;# 
   867  0096                     	;# 
   868  0097                     	;# 
   869  0099                     	;# 
   870  009A                     	;# 
   871  009B                     	;# 
   872  009B                     	;# 
   873  009C                     	;# 
   874  009D                     	;# 
   875  009E                     	;# 
   876  010C                     	;# 
   877  010D                     	;# 
   878  010E                     	;# 
   879  0116                     	;# 
   880  0117                     	;# 
   881  011D                     	;# 
   882  018C                     	;# 
   883  018D                     	;# 
   884  018E                     	;# 
   885  0191                     	;# 
   886  0191                     	;# 
   887  0192                     	;# 
   888  0193                     	;# 
   889  0193                     	;# 
   890  0194                     	;# 
   891  0195                     	;# 
   892  0196                     	;# 
   893  0197                     	;# 
   894  0199                     	;# 
   895  019A                     	;# 
   896  019B                     	;# 
   897  019B                     	;# 
   898  019B                     	;# 
   899  019B                     	;# 
   900  019C                     	;# 
   901  019C                     	;# 
   902  019D                     	;# 
   903  019E                     	;# 
   904  019F                     	;# 
   905  020D                     	;# 
   906  0210                     	;# 
   907  0211                     	;# 
   908  0211                     	;# 
   909  0212                     	;# 
   910  0212                     	;# 
   911  0213                     	;# 
   912  0213                     	;# 
   913  0214                     	;# 
   914  0214                     	;# 
   915  0215                     	;# 
   916  0215                     	;# 
   917  0215                     	;# 
   918  0216                     	;# 
   919  0216                     	;# 
   920  0217                     	;# 
   921  0217                     	;# 
   922  0291                     	;# 
   923  0291                     	;# 
   924  0292                     	;# 
   925  0293                     	;# 
   926  0298                     	;# 
   927  0298                     	;# 
   928  0299                     	;# 
   929  029A                     	;# 
   930  0394                     	;# 
   931  0395                     	;# 
   932  0396                     	;# 
   933  0FE4                     	;# 
   934  0FE5                     	;# 
   935  0FE6                     	;# 
   936  0FE7                     	;# 
   937  0FE8                     	;# 
   938  0FE9                     	;# 
   939  0FEA                     	;# 
   940  0FEB                     	;# 
   941  0FED                     	;# 
   942  0FEE                     	;# 
   943  0FEF                     	;# 
   944  0000                     	;# 
   945  0001                     	;# 
   946  0002                     	;# 
   947  0003                     	;# 
   948  0004                     	;# 
   949  0005                     	;# 
   950  0006                     	;# 
   951  0007                     	;# 
   952  0008                     	;# 
   953  0009                     	;# 
   954  000A                     	;# 
   955  000B                     	;# 
   956  000C                     	;# 
   957  000D                     	;# 
   958  000E                     	;# 
   959  0010                     	;# 
   960  0011                     	;# 
   961  0012                     	;# 
   962  0015                     	;# 
   963  0016                     	;# 
   964  0016                     	;# 
   965  0017                     	;# 
   966  0018                     	;# 
   967  0019                     	;# 
   968  001A                     	;# 
   969  001B                     	;# 
   970  001C                     	;# 
   971  008C                     	;# 
   972  008D                     	;# 
   973  008E                     	;# 
   974  0090                     	;# 
   975  0091                     	;# 
   976  0092                     	;# 
   977  0095                     	;# 
   978  0096                     	;# 
   979  0097                     	;# 
   980  0099                     	;# 
   981  009A                     	;# 
   982  009B                     	;# 
   983  009B                     	;# 
   984  009C                     	;# 
   985  009D                     	;# 
   986  009E                     	;# 
   987  010C                     	;# 
   988  010D                     	;# 
   989  010E                     	;# 
   990  0116                     	;# 
   991  0117                     	;# 
   992  011D                     	;# 
   993  018C                     	;# 
   994  018D                     	;# 
   995  018E                     	;# 
   996  0191                     	;# 
   997  0191                     	;# 
   998  0192                     	;# 
   999  0193                     	;# 
  1000  0193                     	;# 
  1001  0194                     	;# 
  1002  0195                     	;# 
  1003  0196                     	;# 
  1004  0197                     	;# 
  1005  0199                     	;# 
  1006  019A                     	;# 
  1007  019B                     	;# 
  1008  019B                     	;# 
  1009  019B                     	;# 
  1010  019B                     	;# 
  1011  019C                     	;# 
  1012  019C                     	;# 
  1013  019D                     	;# 
  1014  019E                     	;# 
  1015  019F                     	;# 
  1016  020D                     	;# 
  1017  0210                     	;# 
  1018  0211                     	;# 
  1019  0211                     	;# 
  1020  0212                     	;# 
  1021  0212                     	;# 
  1022  0213                     	;# 
  1023  0213                     	;# 
  1024  0214                     	;# 
  1025  0214                     	;# 
  1026  0215                     	;# 
  1027  0215                     	;# 
  1028  0215                     	;# 
  1029  0216                     	;# 
  1030  0216                     	;# 
  1031  0217                     	;# 
  1032  0217                     	;# 
  1033  0291                     	;# 
  1034  0291                     	;# 
  1035  0292                     	;# 
  1036  0293                     	;# 
  1037  0298                     	;# 
  1038  0298                     	;# 
  1039  0299                     	;# 
  1040  029A                     	;# 
  1041  0394                     	;# 
  1042  0395                     	;# 
  1043  0396                     	;# 
  1044  0FE4                     	;# 
  1045  0FE5                     	;# 
  1046  0FE6                     	;# 
  1047  0FE7                     	;# 
  1048  0FE8                     	;# 
  1049  0FE9                     	;# 
  1050  0FEA                     	;# 
  1051  0FEB                     	;# 
  1052  0FED                     	;# 
  1053  0FEE                     	;# 
  1054  0FEF                     	;# 
  1055  0000                     	;# 
  1056  0001                     	;# 
  1057  0002                     	;# 
  1058  0003                     	;# 
  1059  0004                     	;# 
  1060  0005                     	;# 
  1061  0006                     	;# 
  1062  0007                     	;# 
  1063  0008                     	;# 
  1064  0009                     	;# 
  1065  000A                     	;# 
  1066  000B                     	;# 
  1067  000C                     	;# 
  1068  000D                     	;# 
  1069  000E                     	;# 
  1070  0010                     	;# 
  1071  0011                     	;# 
  1072  0012                     	;# 
  1073  0015                     	;# 
  1074  0016                     	;# 
  1075  0016                     	;# 
  1076  0017                     	;# 
  1077  0018                     	;# 
  1078  0019                     	;# 
  1079  001A                     	;# 
  1080  001B                     	;# 
  1081  001C                     	;# 
  1082  008C                     	;# 
  1083  008D                     	;# 
  1084  008E                     	;# 
  1085  0090                     	;# 
  1086  0091                     	;# 
  1087  0092                     	;# 
  1088  0095                     	;# 
  1089  0096                     	;# 
  1090  0097                     	;# 
  1091  0099                     	;# 
  1092  009A                     	;# 
  1093  009B                     	;# 
  1094  009B                     	;# 
  1095  009C                     	;# 
  1096  009D                     	;# 
  1097  009E                     	;# 
  1098  010C                     	;# 
  1099  010D                     	;# 
  1100  010E                     	;# 
  1101  0116                     	;# 
  1102  0117                     	;# 
  1103  011D                     	;# 
  1104  018C                     	;# 
  1105  018D                     	;# 
  1106  018E                     	;# 
  1107  0191                     	;# 
  1108  0191                     	;# 
  1109  0192                     	;# 
  1110  0193                     	;# 
  1111  0193                     	;# 
  1112  0194                     	;# 
  1113  0195                     	;# 
  1114  0196                     	;# 
  1115  0197                     	;# 
  1116  0199                     	;# 
  1117  019A                     	;# 
  1118  019B                     	;# 
  1119  019B                     	;# 
  1120  019B                     	;# 
  1121  019B                     	;# 
  1122  019C                     	;# 
  1123  019C                     	;# 
  1124  019D                     	;# 
  1125  019E                     	;# 
  1126  019F                     	;# 
  1127  020D                     	;# 
  1128  0210                     	;# 
  1129  0211                     	;# 
  1130  0211                     	;# 
  1131  0212                     	;# 
  1132  0212                     	;# 
  1133  0213                     	;# 
  1134  0213                     	;# 
  1135  0214                     	;# 
  1136  0214                     	;# 
  1137  0215                     	;# 
  1138  0215                     	;# 
  1139  0215                     	;# 
  1140  0216                     	;# 
  1141  0216                     	;# 
  1142  0217                     	;# 
  1143  0217                     	;# 
  1144  0291                     	;# 
  1145  0291                     	;# 
  1146  0292                     	;# 
  1147  0293                     	;# 
  1148  0298                     	;# 
  1149  0298                     	;# 
  1150  0299                     	;# 
  1151  029A                     	;# 
  1152  0394                     	;# 
  1153  0395                     	;# 
  1154  0396                     	;# 
  1155  0FE4                     	;# 
  1156  0FE5                     	;# 
  1157  0FE6                     	;# 
  1158  0FE7                     	;# 
  1159  0FE8                     	;# 
  1160  0FE9                     	;# 
  1161  0FEA                     	;# 
  1162  0FEB                     	;# 
  1163  0FED                     	;# 
  1164  0FEE                     	;# 
  1165  0FEF                     	;# 
  1166  0000                     	;# 
  1167  0001                     	;# 
  1168  0002                     	;# 
  1169  0003                     	;# 
  1170  0004                     	;# 
  1171  0005                     	;# 
  1172  0006                     	;# 
  1173  0007                     	;# 
  1174  0008                     	;# 
  1175  0009                     	;# 
  1176  000A                     	;# 
  1177  000B                     	;# 
  1178  000C                     	;# 
  1179  000D                     	;# 
  1180  000E                     	;# 
  1181  0010                     	;# 
  1182  0011                     	;# 
  1183  0012                     	;# 
  1184  0015                     	;# 
  1185  0016                     	;# 
  1186  0016                     	;# 
  1187  0017                     	;# 
  1188  0018                     	;# 
  1189  0019                     	;# 
  1190  001A                     	;# 
  1191  001B                     	;# 
  1192  001C                     	;# 
  1193  008C                     	;# 
  1194  008D                     	;# 
  1195  008E                     	;# 
  1196  0090                     	;# 
  1197  0091                     	;# 
  1198  0092                     	;# 
  1199  0095                     	;# 
  1200  0096                     	;# 
  1201  0097                     	;# 
  1202  0099                     	;# 
  1203  009A                     	;# 
  1204  009B                     	;# 
  1205  009B                     	;# 
  1206  009C                     	;# 
  1207  009D                     	;# 
  1208  009E                     	;# 
  1209  010C                     	;# 
  1210  010D                     	;# 
  1211  010E                     	;# 
  1212  0116                     	;# 
  1213  0117                     	;# 
  1214  011D                     	;# 
  1215  018C                     	;# 
  1216  018D                     	;# 
  1217  018E                     	;# 
  1218  0191                     	;# 
  1219  0191                     	;# 
  1220  0192                     	;# 
  1221  0193                     	;# 
  1222  0193                     	;# 
  1223  0194                     	;# 
  1224  0195                     	;# 
  1225  0196                     	;# 
  1226  0197                     	;# 
  1227  0199                     	;# 
  1228  019A                     	;# 
  1229  019B                     	;# 
  1230  019B                     	;# 
  1231  019B                     	;# 
  1232  019B                     	;# 
  1233  019C                     	;# 
  1234  019C                     	;# 
  1235  019D                     	;# 
  1236  019E                     	;# 
  1237  019F                     	;# 
  1238  020D                     	;# 
  1239  0210                     	;# 
  1240  0211                     	;# 
  1241  0211                     	;# 
  1242  0212                     	;# 
  1243  0212                     	;# 
  1244  0213                     	;# 
  1245  0213                     	;# 
  1246  0214                     	;# 
  1247  0214                     	;# 
  1248  0215                     	;# 
  1249  0215                     	;# 
  1250  0215                     	;# 
  1251  0216                     	;# 
  1252  0216                     	;# 
  1253  0217                     	;# 
  1254  0217                     	;# 
  1255  0291                     	;# 
  1256  0291                     	;# 
  1257  0292                     	;# 
  1258  0293                     	;# 
  1259  0298                     	;# 
  1260  0298                     	;# 
  1261  0299                     	;# 
  1262  029A                     	;# 
  1263  0394                     	;# 
  1264  0395                     	;# 
  1265  0396                     	;# 
  1266  0FE4                     	;# 
  1267  0FE5                     	;# 
  1268  0FE6                     	;# 
  1269  0FE7                     	;# 
  1270  0FE8                     	;# 
  1271  0FE9                     	;# 
  1272  0FEA                     	;# 
  1273  0FEB                     	;# 
  1274  0FED                     	;# 
  1275  0FEE                     	;# 
  1276  0FEF                     	;# 
  1277  0000                     	;# 
  1278  0001                     	;# 
  1279  0002                     	;# 
  1280  0003                     	;# 
  1281  0004                     	;# 
  1282  0005                     	;# 
  1283  0006                     	;# 
  1284  0007                     	;# 
  1285  0008                     	;# 
  1286  0009                     	;# 
  1287  000A                     	;# 
  1288  000B                     	;# 
  1289  000C                     	;# 
  1290  000D                     	;# 
  1291  000E                     	;# 
  1292  0010                     	;# 
  1293  0011                     	;# 
  1294  0012                     	;# 
  1295  0015                     	;# 
  1296  0016                     	;# 
  1297  0016                     	;# 
  1298  0017                     	;# 
  1299  0018                     	;# 
  1300  0019                     	;# 
  1301  001A                     	;# 
  1302  001B                     	;# 
  1303  001C                     	;# 
  1304  008C                     	;# 
  1305  008D                     	;# 
  1306  008E                     	;# 
  1307  0090                     	;# 
  1308  0091                     	;# 
  1309  0092                     	;# 
  1310  0095                     	;# 
  1311  0096                     	;# 
  1312  0097                     	;# 
  1313  0099                     	;# 
  1314  009A                     	;# 
  1315  009B                     	;# 
  1316  009B                     	;# 
  1317  009C                     	;# 
  1318  009D                     	;# 
  1319  009E                     	;# 
  1320  010C                     	;# 
  1321  010D                     	;# 
  1322  010E                     	;# 
  1323  0116                     	;# 
  1324  0117                     	;# 
  1325  011D                     	;# 
  1326  018C                     	;# 
  1327  018D                     	;# 
  1328  018E                     	;# 
  1329  0191                     	;# 
  1330  0191                     	;# 
  1331  0192                     	;# 
  1332  0193                     	;# 
  1333  0193                     	;# 
  1334  0194                     	;# 
  1335  0195                     	;# 
  1336  0196                     	;# 
  1337  0197                     	;# 
  1338  0199                     	;# 
  1339  019A                     	;# 
  1340  019B                     	;# 
  1341  019B                     	;# 
  1342  019B                     	;# 
  1343  019B                     	;# 
  1344  019C                     	;# 
  1345  019C                     	;# 
  1346  019D                     	;# 
  1347  019E                     	;# 
  1348  019F                     	;# 
  1349  020D                     	;# 
  1350  0210                     	;# 
  1351  0211                     	;# 
  1352  0211                     	;# 
  1353  0212                     	;# 
  1354  0212                     	;# 
  1355  0213                     	;# 
  1356  0213                     	;# 
  1357  0214                     	;# 
  1358  0214                     	;# 
  1359  0215                     	;# 
  1360  0215                     	;# 
  1361  0215                     	;# 
  1362  0216                     	;# 
  1363  0216                     	;# 
  1364  0217                     	;# 
  1365  0217                     	;# 
  1366  0291                     	;# 
  1367  0291                     	;# 
  1368  0292                     	;# 
  1369  0293                     	;# 
  1370  0298                     	;# 
  1371  0298                     	;# 
  1372  0299                     	;# 
  1373  029A                     	;# 
  1374  0394                     	;# 
  1375  0395                     	;# 
  1376  0396                     	;# 
  1377  0FE4                     	;# 
  1378  0FE5                     	;# 
  1379  0FE6                     	;# 
  1380  0FE7                     	;# 
  1381  0FE8                     	;# 
  1382  0FE9                     	;# 
  1383  0FEA                     	;# 
  1384  0FEB                     	;# 
  1385  0FED                     	;# 
  1386  0FEE                     	;# 
  1387  0FEF                     	;# 
  1388  0000                     	;# 
  1389  0001                     	;# 
  1390  0002                     	;# 
  1391  0003                     	;# 
  1392  0004                     	;# 
  1393  0005                     	;# 
  1394  0006                     	;# 
  1395  0007                     	;# 
  1396  0008                     	;# 
  1397  0009                     	;# 
  1398  000A                     	;# 
  1399  000B                     	;# 
  1400  000C                     	;# 
  1401  000D                     	;# 
  1402  000E                     	;# 
  1403  0010                     	;# 
  1404  0011                     	;# 
  1405  0012                     	;# 
  1406  0015                     	;# 
  1407  0016                     	;# 
  1408  0016                     	;# 
  1409  0017                     	;# 
  1410  0018                     	;# 
  1411  0019                     	;# 
  1412  001A                     	;# 
  1413  001B                     	;# 
  1414  001C                     	;# 
  1415  008C                     	;# 
  1416  008D                     	;# 
  1417  008E                     	;# 
  1418  0090                     	;# 
  1419  0091                     	;# 
  1420  0092                     	;# 
  1421  0095                     	;# 
  1422  0096                     	;# 
  1423  0097                     	;# 
  1424  0099                     	;# 
  1425  009A                     	;# 
  1426  009B                     	;# 
  1427  009B                     	;# 
  1428  009C                     	;# 
  1429  009D                     	;# 
  1430  009E                     	;# 
  1431  010C                     	;# 
  1432  010D                     	;# 
  1433  010E                     	;# 
  1434  0116                     	;# 
  1435  0117                     	;# 
  1436  011D                     	;# 
  1437  018C                     	;# 
  1438  018D                     	;# 
  1439  018E                     	;# 
  1440  0191                     	;# 
  1441  0191                     	;# 
  1442  0192                     	;# 
  1443  0193                     	;# 
  1444  0193                     	;# 
  1445  0194                     	;# 
  1446  0195                     	;# 
  1447  0196                     	;# 
  1448  0197                     	;# 
  1449  0199                     	;# 
  1450  019A                     	;# 
  1451  019B                     	;# 
  1452  019B                     	;# 
  1453  019B                     	;# 
  1454  019B                     	;# 
  1455  019C                     	;# 
  1456  019C                     	;# 
  1457  019D                     	;# 
  1458  019E                     	;# 
  1459  019F                     	;# 
  1460  020D                     	;# 
  1461  0210                     	;# 
  1462  0211                     	;# 
  1463  0211                     	;# 
  1464  0212                     	;# 
  1465  0212                     	;# 
  1466  0213                     	;# 
  1467  0213                     	;# 
  1468  0214                     	;# 
  1469  0214                     	;# 
  1470  0215                     	;# 
  1471  0215                     	;# 
  1472  0215                     	;# 
  1473  0216                     	;# 
  1474  0216                     	;# 
  1475  0217                     	;# 
  1476  0217                     	;# 
  1477  0291                     	;# 
  1478  0291                     	;# 
  1479  0292                     	;# 
  1480  0293                     	;# 
  1481  0298                     	;# 
  1482  0298                     	;# 
  1483  0299                     	;# 
  1484  029A                     	;# 
  1485  0394                     	;# 
  1486  0395                     	;# 
  1487  0396                     	;# 
  1488  0FE4                     	;# 
  1489  0FE5                     	;# 
  1490  0FE6                     	;# 
  1491  0FE7                     	;# 
  1492  0FE8                     	;# 
  1493  0FE9                     	;# 
  1494  0FEA                     	;# 
  1495  0FEB                     	;# 
  1496  0FED                     	;# 
  1497  0FEE                     	;# 
  1498  0FEF                     	;# 
  1499  0000                     	;# 
  1500  0001                     	;# 
  1501  0002                     	;# 
  1502  0003                     	;# 
  1503  0004                     	;# 
  1504  0005                     	;# 
  1505  0006                     	;# 
  1506  0007                     	;# 
  1507  0008                     	;# 
  1508  0009                     	;# 
  1509  000A                     	;# 
  1510  000B                     	;# 
  1511  000C                     	;# 
  1512  000D                     	;# 
  1513  000E                     	;# 
  1514  0010                     	;# 
  1515  0011                     	;# 
  1516  0012                     	;# 
  1517  0015                     	;# 
  1518  0016                     	;# 
  1519  0016                     	;# 
  1520  0017                     	;# 
  1521  0018                     	;# 
  1522  0019                     	;# 
  1523  001A                     	;# 
  1524  001B                     	;# 
  1525  001C                     	;# 
  1526  008C                     	;# 
  1527  008D                     	;# 
  1528  008E                     	;# 
  1529  0090                     	;# 
  1530  0091                     	;# 
  1531  0092                     	;# 
  1532  0095                     	;# 
  1533  0096                     	;# 
  1534  0097                     	;# 
  1535  0099                     	;# 
  1536  009A                     	;# 
  1537  009B                     	;# 
  1538  009B                     	;# 
  1539  009C                     	;# 
  1540  009D                     	;# 
  1541  009E                     	;# 
  1542  010C                     	;# 
  1543  010D                     	;# 
  1544  010E                     	;# 
  1545  0116                     	;# 
  1546  0117                     	;# 
  1547  011D                     	;# 
  1548  018C                     	;# 
  1549  018D                     	;# 
  1550  018E                     	;# 
  1551  0191                     	;# 
  1552  0191                     	;# 
  1553  0192                     	;# 
  1554  0193                     	;# 
  1555  0193                     	;# 
  1556  0194                     	;# 
  1557  0195                     	;# 
  1558  0196                     	;# 
  1559  0197                     	;# 
  1560  0199                     	;# 
  1561  019A                     	;# 
  1562  019B                     	;# 
  1563  019B                     	;# 
  1564  019B                     	;# 
  1565  019B                     	;# 
  1566  019C                     	;# 
  1567  019C                     	;# 
  1568  019D                     	;# 
  1569  019E                     	;# 
  1570  019F                     	;# 
  1571  020D                     	;# 
  1572  0210                     	;# 
  1573  0211                     	;# 
  1574  0211                     	;# 
  1575  0212                     	;# 
  1576  0212                     	;# 
  1577  0213                     	;# 
  1578  0213                     	;# 
  1579  0214                     	;# 
  1580  0214                     	;# 
  1581  0215                     	;# 
  1582  0215                     	;# 
  1583  0215                     	;# 
  1584  0216                     	;# 
  1585  0216                     	;# 
  1586  0217                     	;# 
  1587  0217                     	;# 
  1588  0291                     	;# 
  1589  0291                     	;# 
  1590  0292                     	;# 
  1591  0293                     	;# 
  1592  0298                     	;# 
  1593  0298                     	;# 
  1594  0299                     	;# 
  1595  029A                     	;# 
  1596  0394                     	;# 
  1597  0395                     	;# 
  1598  0396                     	;# 
  1599  0FE4                     	;# 
  1600  0FE5                     	;# 
  1601  0FE6                     	;# 
  1602  0FE7                     	;# 
  1603  0FE8                     	;# 
  1604  0FE9                     	;# 
  1605  0FEA                     	;# 
  1606  0FEB                     	;# 
  1607  0FED                     	;# 
  1608  0FEE                     	;# 
  1609  0FEF                     	;# 
  1610  0000                     	;# 
  1611  0001                     	;# 
  1612  0002                     	;# 
  1613  0003                     	;# 
  1614  0004                     	;# 
  1615  0005                     	;# 
  1616  0006                     	;# 
  1617  0007                     	;# 
  1618  0008                     	;# 
  1619  0009                     	;# 
  1620  000A                     	;# 
  1621  000B                     	;# 
  1622  000C                     	;# 
  1623  000D                     	;# 
  1624  000E                     	;# 
  1625  0010                     	;# 
  1626  0011                     	;# 
  1627  0012                     	;# 
  1628  0015                     	;# 
  1629  0016                     	;# 
  1630  0016                     	;# 
  1631  0017                     	;# 
  1632  0018                     	;# 
  1633  0019                     	;# 
  1634  001A                     	;# 
  1635  001B                     	;# 
  1636  001C                     	;# 
  1637  008C                     	;# 
  1638  008D                     	;# 
  1639  008E                     	;# 
  1640  0090                     	;# 
  1641  0091                     	;# 
  1642  0092                     	;# 
  1643  0095                     	;# 
  1644  0096                     	;# 
  1645  0097                     	;# 
  1646  0099                     	;# 
  1647  009A                     	;# 
  1648  009B                     	;# 
  1649  009B                     	;# 
  1650  009C                     	;# 
  1651  009D                     	;# 
  1652  009E                     	;# 
  1653  010C                     	;# 
  1654  010D                     	;# 
  1655  010E                     	;# 
  1656  0116                     	;# 
  1657  0117                     	;# 
  1658  011D                     	;# 
  1659  018C                     	;# 
  1660  018D                     	;# 
  1661  018E                     	;# 
  1662  0191                     	;# 
  1663  0191                     	;# 
  1664  0192                     	;# 
  1665  0193                     	;# 
  1666  0193                     	;# 
  1667  0194                     	;# 
  1668  0195                     	;# 
  1669  0196                     	;# 
  1670  0197                     	;# 
  1671  0199                     	;# 
  1672  019A                     	;# 
  1673  019B                     	;# 
  1674  019B                     	;# 
  1675  019B                     	;# 
  1676  019B                     	;# 
  1677  019C                     	;# 
  1678  019C                     	;# 
  1679  019D                     	;# 
  1680  019E                     	;# 
  1681  019F                     	;# 
  1682  020D                     	;# 
  1683  0210                     	;# 
  1684  0211                     	;# 
  1685  0211                     	;# 
  1686  0212                     	;# 
  1687  0212                     	;# 
  1688  0213                     	;# 
  1689  0213                     	;# 
  1690  0214                     	;# 
  1691  0214                     	;# 
  1692  0215                     	;# 
  1693  0215                     	;# 
  1694  0215                     	;# 
  1695  0216                     	;# 
  1696  0216                     	;# 
  1697  0217                     	;# 
  1698  0217                     	;# 
  1699  0291                     	;# 
  1700  0291                     	;# 
  1701  0292                     	;# 
  1702  0293                     	;# 
  1703  0298                     	;# 
  1704  0298                     	;# 
  1705  0299                     	;# 
  1706  029A                     	;# 
  1707  0394                     	;# 
  1708  0395                     	;# 
  1709  0396                     	;# 
  1710  0FE4                     	;# 
  1711  0FE5                     	;# 
  1712  0FE6                     	;# 
  1713  0FE7                     	;# 
  1714  0FE8                     	;# 
  1715  0FE9                     	;# 
  1716  0FEA                     	;# 
  1717  0FEB                     	;# 
  1718  0FED                     	;# 
  1719  0FEE                     	;# 
  1720  0FEF                     	;# 
  1721  0000                     	;# 
  1722  0001                     	;# 
  1723  0002                     	;# 
  1724  0003                     	;# 
  1725  0004                     	;# 
  1726  0005                     	;# 
  1727  0006                     	;# 
  1728  0007                     	;# 
  1729  0008                     	;# 
  1730  0009                     	;# 
  1731  000A                     	;# 
  1732  000B                     	;# 
  1733  000C                     	;# 
  1734  000D                     	;# 
  1735  000E                     	;# 
  1736  0010                     	;# 
  1737  0011                     	;# 
  1738  0012                     	;# 
  1739  0015                     	;# 
  1740  0016                     	;# 
  1741  0016                     	;# 
  1742  0017                     	;# 
  1743  0018                     	;# 
  1744  0019                     	;# 
  1745  001A                     	;# 
  1746  001B                     	;# 
  1747  001C                     	;# 
  1748  008C                     	;# 
  1749  008D                     	;# 
  1750  008E                     	;# 
  1751  0090                     	;# 
  1752  0091                     	;# 
  1753  0092                     	;# 
  1754  0095                     	;# 
  1755  0096                     	;# 
  1756  0097                     	;# 
  1757  0099                     	;# 
  1758  009A                     	;# 
  1759  009B                     	;# 
  1760  009B                     	;# 
  1761  009C                     	;# 
  1762  009D                     	;# 
  1763  009E                     	;# 
  1764  010C                     	;# 
  1765  010D                     	;# 
  1766  010E                     	;# 
  1767  0116                     	;# 
  1768  0117                     	;# 
  1769  011D                     	;# 
  1770  018C                     	;# 
  1771  018D                     	;# 
  1772  018E                     	;# 
  1773  0191                     	;# 
  1774  0191                     	;# 
  1775  0192                     	;# 
  1776  0193                     	;# 
  1777  0193                     	;# 
  1778  0194                     	;# 
  1779  0195                     	;# 
  1780  0196                     	;# 
  1781  0197                     	;# 
  1782  0199                     	;# 
  1783  019A                     	;# 
  1784  019B                     	;# 
  1785  019B                     	;# 
  1786  019B                     	;# 
  1787  019B                     	;# 
  1788  019C                     	;# 
  1789  019C                     	;# 
  1790  019D                     	;# 
  1791  019E                     	;# 
  1792  019F                     	;# 
  1793  020D                     	;# 
  1794  0210                     	;# 
  1795  0211                     	;# 
  1796  0211                     	;# 
  1797  0212                     	;# 
  1798  0212                     	;# 
  1799  0213                     	;# 
  1800  0213                     	;# 
  1801  0214                     	;# 
  1802  0214                     	;# 
  1803  0215                     	;# 
  1804  0215                     	;# 
  1805  0215                     	;# 
  1806  0216                     	;# 
  1807  0216                     	;# 
  1808  0217                     	;# 
  1809  0217                     	;# 
  1810  0291                     	;# 
  1811  0291                     	;# 
  1812  0292                     	;# 
  1813  0293                     	;# 
  1814  0298                     	;# 
  1815  0298                     	;# 
  1816  0299                     	;# 
  1817  029A                     	;# 
  1818  0394                     	;# 
  1819  0395                     	;# 
  1820  0396                     	;# 
  1821  0FE4                     	;# 
  1822  0FE5                     	;# 
  1823  0FE6                     	;# 
  1824  0FE7                     	;# 
  1825  0FE8                     	;# 
  1826  0FE9                     	;# 
  1827  0FEA                     	;# 
  1828  0FEB                     	;# 
  1829  0FED                     	;# 
  1830  0FEE                     	;# 
  1831  0FEF                     	;# 
  1832  0000                     	;# 
  1833  0001                     	;# 
  1834  0002                     	;# 
  1835  0003                     	;# 
  1836  0004                     	;# 
  1837  0005                     	;# 
  1838  0006                     	;# 
  1839  0007                     	;# 
  1840  0008                     	;# 
  1841  0009                     	;# 
  1842  000A                     	;# 
  1843  000B                     	;# 
  1844  000C                     	;# 
  1845  000D                     	;# 
  1846  000E                     	;# 
  1847  0010                     	;# 
  1848  0011                     	;# 
  1849  0012                     	;# 
  1850  0015                     	;# 
  1851  0016                     	;# 
  1852  0016                     	;# 
  1853  0017                     	;# 
  1854  0018                     	;# 
  1855  0019                     	;# 
  1856  001A                     	;# 
  1857  001B                     	;# 
  1858  001C                     	;# 
  1859  008C                     	;# 
  1860  008D                     	;# 
  1861  008E                     	;# 
  1862  0090                     	;# 
  1863  0091                     	;# 
  1864  0092                     	;# 
  1865  0095                     	;# 
  1866  0096                     	;# 
  1867  0097                     	;# 
  1868  0099                     	;# 
  1869  009A                     	;# 
  1870  009B                     	;# 
  1871  009B                     	;# 
  1872  009C                     	;# 
  1873  009D                     	;# 
  1874  009E                     	;# 
  1875  010C                     	;# 
  1876  010D                     	;# 
  1877  010E                     	;# 
  1878  0116                     	;# 
  1879  0117                     	;# 
  1880  011D                     	;# 
  1881  018C                     	;# 
  1882  018D                     	;# 
  1883  018E                     	;# 
  1884  0191                     	;# 
  1885  0191                     	;# 
  1886  0192                     	;# 
  1887  0193                     	;# 
  1888  0193                     	;# 
  1889  0194                     	;# 
  1890  0195                     	;# 
  1891  0196                     	;# 
  1892  0197                     	;# 
  1893  0199                     	;# 
  1894  019A                     	;# 
  1895  019B                     	;# 
  1896  019B                     	;# 
  1897  019B                     	;# 
  1898  019B                     	;# 
  1899  019C                     	;# 
  1900  019C                     	;# 
  1901  019D                     	;# 
  1902  019E                     	;# 
  1903  019F                     	;# 
  1904  020D                     	;# 
  1905  0210                     	;# 
  1906  0211                     	;# 
  1907  0211                     	;# 
  1908  0212                     	;# 
  1909  0212                     	;# 
  1910  0213                     	;# 
  1911  0213                     	;# 
  1912  0214                     	;# 
  1913  0214                     	;# 
  1914  0215                     	;# 
  1915  0215                     	;# 
  1916  0215                     	;# 
  1917  0216                     	;# 
  1918  0216                     	;# 
  1919  0217                     	;# 
  1920  0217                     	;# 
  1921  0291                     	;# 
  1922  0291                     	;# 
  1923  0292                     	;# 
  1924  0293                     	;# 
  1925  0298                     	;# 
  1926  0298                     	;# 
  1927  0299                     	;# 
  1928  029A                     	;# 
  1929  0394                     	;# 
  1930  0395                     	;# 
  1931  0396                     	;# 
  1932  0FE4                     	;# 
  1933  0FE5                     	;# 
  1934  0FE6                     	;# 
  1935  0FE7                     	;# 
  1936  0FE8                     	;# 
  1937  0FE9                     	;# 
  1938  0FEA                     	;# 
  1939  0FEB                     	;# 
  1940  0FED                     	;# 
  1941  0FEE                     	;# 
  1942  0FEF                     	;# 
  1943  0000                     	;# 
  1944  0001                     	;# 
  1945  0002                     	;# 
  1946  0003                     	;# 
  1947  0004                     	;# 
  1948  0005                     	;# 
  1949  0006                     	;# 
  1950  0007                     	;# 
  1951  0008                     	;# 
  1952  0009                     	;# 
  1953  000A                     	;# 
  1954  000B                     	;# 
  1955  000C                     	;# 
  1956  000D                     	;# 
  1957  000E                     	;# 
  1958  0010                     	;# 
  1959  0011                     	;# 
  1960  0012                     	;# 
  1961  0015                     	;# 
  1962  0016                     	;# 
  1963  0016                     	;# 
  1964  0017                     	;# 
  1965  0018                     	;# 
  1966  0019                     	;# 
  1967  001A                     	;# 
  1968  001B                     	;# 
  1969  001C                     	;# 
  1970  008C                     	;# 
  1971  008D                     	;# 
  1972  008E                     	;# 
  1973  0090                     	;# 
  1974  0091                     	;# 
  1975  0092                     	;# 
  1976  0095                     	;# 
  1977  0096                     	;# 
  1978  0097                     	;# 
  1979  0099                     	;# 
  1980  009A                     	;# 
  1981  009B                     	;# 
  1982  009B                     	;# 
  1983  009C                     	;# 
  1984  009D                     	;# 
  1985  009E                     	;# 
  1986  010C                     	;# 
  1987  010D                     	;# 
  1988  010E                     	;# 
  1989  0116                     	;# 
  1990  0117                     	;# 
  1991  011D                     	;# 
  1992  018C                     	;# 
  1993  018D                     	;# 
  1994  018E                     	;# 
  1995  0191                     	;# 
  1996  0191                     	;# 
  1997  0192                     	;# 
  1998  0193                     	;# 
  1999  0193                     	;# 
  2000  0194                     	;# 
  2001  0195                     	;# 
  2002  0196                     	;# 
  2003  0197                     	;# 
  2004  0199                     	;# 
  2005  019A                     	;# 
  2006  019B                     	;# 
  2007  019B                     	;# 
  2008  019B                     	;# 
  2009  019B                     	;# 
  2010  019C                     	;# 
  2011  019C                     	;# 
  2012  019D                     	;# 
  2013  019E                     	;# 
  2014  019F                     	;# 
  2015  020D                     	;# 
  2016  0210                     	;# 
  2017  0211                     	;# 
  2018  0211                     	;# 
  2019  0212                     	;# 
  2020  0212                     	;# 
  2021  0213                     	;# 
  2022  0213                     	;# 
  2023  0214                     	;# 
  2024  0214                     	;# 
  2025  0215                     	;# 
  2026  0215                     	;# 
  2027  0215                     	;# 
  2028  0216                     	;# 
  2029  0216                     	;# 
  2030  0217                     	;# 
  2031  0217                     	;# 
  2032  0291                     	;# 
  2033  0291                     	;# 
  2034  0292                     	;# 
  2035  0293                     	;# 
  2036  0298                     	;# 
  2037  0298                     	;# 
  2038  0299                     	;# 
  2039  029A                     	;# 
  2040  0394                     	;# 
  2041  0395                     	;# 
  2042  0396                     	;# 
  2043  0FE4                     	;# 
  2044  0FE5                     	;# 
  2045  0FE6                     	;# 
  2046  0FE7                     	;# 
  2047  0FE8                     	;# 
  2048  0FE9                     	;# 
  2049  0FEA                     	;# 
  2050  0FEB                     	;# 
  2051  0FED                     	;# 
  2052  0FEE                     	;# 
  2053  0FEF                     	;# 
  2054                           
  2055                           	psect	idataBANK3
  2056  19F5                     __pidataBANK3:	
  2057                           
  2058                           ;initializer for __product
  2059  19F5  3463               	retlw	99
  2060  19F6  3402               	retlw	2
  2061  19F7  3400               	retlw	0
  2062  19F8  3400               	retlw	0
  2063  19F9  3400               	retlw	0
  2064  19FA  3400               	retlw	0
  2065  19FB  3400               	retlw	0
  2066  19FC  3400               	retlw	0
  2067  19FD  3400               	retlw	0
  2068  19FE  3400               	retlw	0
  2069  19FF  3400               	retlw	0
  2070  1A00  3400               	retlw	0
  2071  1A01  34FF               	retlw	255
  2072  1A02  34FF               	retlw	255
  2073  1A03  34FF               	retlw	255
  2074  1A04  3400               	retlw	0
  2075  1A05  3400               	retlw	0
  2076  1A06  3400               	retlw	0
  2077  1A07  3400               	retlw	0
  2078  1A08  3400               	retlw	0
  2079  1A09  3400               	retlw	0
  2080  1A0A  3400               	retlw	0
  2081  1A0B  3400               	retlw	0
  2082  1A0C  3400               	retlw	0
  2083  1A0D  3400               	retlw	0
  2084  1A0E  3400               	retlw	0
  2085  1A0F  3400               	retlw	0
  2086  1A10  3400               	retlw	0
  2087  1A11  3400               	retlw	0
  2088  1A12  3400               	retlw	0
  2089  1A13  3400               	retlw	0
  2090  1A14  3400               	retlw	0
  2091                           
  2092                           	psect	stringtext
  2093  1800                     __pstringtext:	
  2094  1800                     _CC2500_registers_address:	
  2095  1800  3403               	retlw	3
  2096  1801  3416               	retlw	22
  2097  1802  3417               	retlw	23
  2098  1803  341E               	retlw	30
  2099  1804  341F               	retlw	31
  2100  1805  3420               	retlw	32
  2101  1806  342A               	retlw	42
  2102  1807  342B               	retlw	43
  2103  1808  340B               	retlw	11
  2104  1809  340C               	retlw	12
  2105  180A  340D               	retlw	13
  2106  180B  340E               	retlw	14
  2107  180C  340F               	retlw	15
  2108  180D  3410               	retlw	16
  2109  180E  3411               	retlw	17
  2110  180F  3412               	retlw	18
  2111  1810  3413               	retlw	19
  2112  1811  3414               	retlw	20
  2113  1812  340A               	retlw	10
  2114  1813  3415               	retlw	21
  2115  1814  3421               	retlw	33
  2116  1815  3422               	retlw	34
  2117  1816  3418               	retlw	24
  2118  1817  3419               	retlw	25
  2119  1818  341A               	retlw	26
  2120  1819  341B               	retlw	27
  2121  181A  341C               	retlw	28
  2122  181B  341D               	retlw	29
  2123  181C  3423               	retlw	35
  2124  181D  3424               	retlw	36
  2125  181E  3425               	retlw	37
  2126  181F  3426               	retlw	38
  2127  1820  3429               	retlw	41
  2128  1821  342C               	retlw	44
  2129  1822  342D               	retlw	45
  2130  1823  342E               	retlw	46
  2131  1824  3400               	retlw	0
  2132  1825  3401               	retlw	1
  2133  1826  3402               	retlw	2
  2134  1827  3407               	retlw	7
  2135  1828  3408               	retlw	8
  2136  1829  3409               	retlw	9
  2137  182A  3406               	retlw	6
  2138  182B  3404               	retlw	4
  2139  182C  3405               	retlw	5
  2140  182D  3427               	retlw	39
  2141  182E  3428               	retlw	40
  2142  182F                     __end_of_CC2500_registers_address:	
  2143  182F                     _CC2500_rfSettings:	
  2144  182F  3407               	retlw	7
  2145  1830  3407               	retlw	7
  2146  1831  3430               	retlw	48
  2147  1832  3487               	retlw	135
  2148  1833  346B               	retlw	107
  2149  1834  34F8               	retlw	248
  2150  1835  347F               	retlw	127
  2151  1836  343F               	retlw	63
  2152  1837  3409               	retlw	9
  2153  1838  3400               	retlw	0
  2154  1839  345C               	retlw	92
  2155  183A  34A7               	retlw	167
  2156  183B  3462               	retlw	98
  2157  183C  3486               	retlw	134
  2158  183D  3483               	retlw	131
  2159  183E  3403               	retlw	3
  2160  183F  3422               	retlw	34
  2161  1840  34F8               	retlw	248
  2162  1841  3400               	retlw	0
  2163  1842  3444               	retlw	68
  2164  1843  34B6               	retlw	182
  2165  1844  3410               	retlw	16
  2166  1845  3418               	retlw	24
  2167  1846  341D               	retlw	29
  2168  1847  341C               	retlw	28
  2169  1848  34C7               	retlw	199
  2170  1849  3400               	retlw	0
  2171  184A  34B2               	retlw	178
  2172  184B  34EA               	retlw	234
  2173  184C  340A               	retlw	10
  2174  184D  3400               	retlw	0
  2175  184E  3411               	retlw	17
  2176  184F  3459               	retlw	89
  2177  1850  3488               	retlw	136
  2178  1851  3431               	retlw	49
  2179  1852  340B               	retlw	11
  2180  1853  342F               	retlw	47
  2181  1854  342E               	retlw	46
  2182  1855  3406               	retlw	6
  2183  1856  3404               	retlw	4
  2184  1857  3405               	retlw	5
  2185  1858  3400               	retlw	0
  2186  1859  3430               	retlw	48
  2187  185A  34D3               	retlw	211
  2188  185B  3491               	retlw	145
  2189  185C  3441               	retlw	65
  2190  185D  3400               	retlw	0
  2191  185E                     __end_of_CC2500_rfSettings:	
  2192  185E                     _CC2500_patable_vaule:	
  2193  185E  34FE               	retlw	254
  2194  185F  34FE               	retlw	254
  2195  1860  34FE               	retlw	254
  2196  1861  34FE               	retlw	254
  2197  1862  34FE               	retlw	254
  2198  1863  34FE               	retlw	254
  2199  1864  34FE               	retlw	254
  2200  1865  34FE               	retlw	254
  2201  1866                     __end_of_CC2500_patable_vaule:	
  2202                           
  2203                           	psect	nvCOMMON
  2204  007D                     __pnvCOMMON:	
  2205  007D                     _product:	
  2206  007D                     	ds	1
  2207                           
  2208                           	psect	nvBANK1
  2209  00EB                     __pnvBANK1:	
  2210  00EB                     _Timer0:	
  2211  00EB                     	ds	1
  2212  00EC                     _WDT:	
  2213  00EC                     	ds	1
  2214  00ED                     _myMain:	
  2215  00ED                     	ds	1
  2216  00EE                     _Memory:	
  2217  00EE                     	ds	1
  2218  000C                     _PORTA	set	12
  2219  000D                     _PORTB	set	13
  2220  000E                     _PORTC	set	14
  2221  0015                     _TMR0	set	21
  2222  005F                     _GIE	set	95
  2223  005C                     _INTE	set	92
  2224  0059                     _INTF	set	89
  2225  005B                     _IOCIE	set	91
  2226  0058                     _IOCIF	set	88
  2227  005E                     _PEIE	set	94
  2228  0060                     _RA0	set	96
  2229  0063                     _RA3	set	99
  2230  0064                     _RA4	set	100
  2231  0066                     _RA6	set	102
  2232  0067                     _RA7	set	103
  2233  0068                     _RB0	set	104
  2234  0069                     _RB1	set	105
  2235  006B                     _RB3	set	107
  2236  006C                     _RB4	set	108
  2237  006D                     _RB5	set	109
  2238  0070                     _RC0	set	112
  2239  0071                     _RC1	set	113
  2240  0072                     _RC2	set	114
  2241  0074                     _RC4	set	116
  2242  0075                     _RC5	set	117
  2243  0077                     _RC7	set	119
  2244  005D                     _TMR0IE	set	93
  2245  005A                     _TMR0IF	set	90
  2246  009D                     _ADCON0	set	157
  2247  009E                     _ADCON1	set	158
  2248  009C                     _ADRESH	set	156
  2249  009B                     _ADRESL	set	155
  2250  0095                     _OPTION_REG	set	149
  2251  0099                     _OSCCON	set	153
  2252  008C                     _TRISA	set	140
  2253  008D                     _TRISB	set	141
  2254  008E                     _TRISC	set	142
  2255  0097                     _WDTCON	set	151
  2256  04E9                     _GO_nDONE	set	1257
  2257  0117                     _FVRCON	set	279
  2258  010C                     _LATA	set	268
  2259  010D                     _LATB	set	269
  2260  010E                     _LATC	set	270
  2261  018C                     _ANSELA	set	396
  2262  018D                     _ANSELB	set	397
  2263  018E                     _ANSELC	set	398
  2264  0192                     _PMADRH	set	402
  2265  0191                     _PMADRL	set	401
  2266  0196                     _PMCON2	set	406
  2267  0194                     _PMDATH	set	404
  2268  0193                     _PMDATL	set	403
  2269  0CAE                     _CFGS	set	3246
  2270  0CAC                     _FREE	set	3244
  2271  0CAD                     _LWLO	set	3245
  2272  0CA8                     _RD	set	3240
  2273  0CA9                     _WR	set	3241
  2274  0CAA                     _WREN	set	3242
  2275  1068                     _WPUB0	set	4200
  2276  1069                     _WPUB1	set	4201
  2277  106A                     _WPUB2	set	4202
  2278  0396                     _IOCBF	set	918
  2279  0395                     _IOCBN	set	917
  2280  0394                     _IOCBP	set	916
  2281  1CB2                     _IOCBF2	set	7346
  2282                           
  2283                           ; #config settings
  2284  0000                     
  2285                           	psect	cinit
  2286  0018                     start_initialization:	
  2287  0018                     __initialization:	
  2288                           
  2289                           ; Clear objects allocated to BITCOMMON
  2290  0018  01FC               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
  2291                           
  2292                           ; Clear objects allocated to COMMON
  2293  0019  01F8               	clrf	__pbssCOMMON& (0+127)
  2294  001A  01F9               	clrf	(__pbssCOMMON+1)& (0+127)
  2295  001B  01FA               	clrf	(__pbssCOMMON+2)& (0+127)
  2296  001C  01FB               	clrf	(__pbssCOMMON+3)& (0+127)
  2297                           
  2298                           ; Clear objects allocated to BANK1
  2299  001D  30A0               	movlw	low __pbssBANK1
  2300  001E  0084               	movwf	4
  2301  001F  3000               	movlw	high __pbssBANK1
  2302  0020  0085               	movwf	5
  2303  0021  304B               	movlw	75
  2304  0022  3187  27FA  3180   	fcall	clear_ram0
  2305                           
  2306                           ; Clear objects allocated to BANK2
  2307  0025  3020               	movlw	low __pbssBANK2
  2308  0026  0084               	movwf	4
  2309  0027  3001               	movlw	high __pbssBANK2
  2310  0028  0085               	movwf	5
  2311  0029  3044               	movlw	68
  2312  002A  3187  27FA  3180   	fcall	clear_ram0
  2313                           
  2314                           ; Clear objects allocated to BANK3
  2315  002D  30A0               	movlw	low __pbssBANK3
  2316  002E  0084               	movwf	4
  2317  002F  3001               	movlw	high __pbssBANK3
  2318  0030  0085               	movwf	5
  2319  0031  3022               	movlw	34
  2320  0032  3187  27FA  3180   	fcall	clear_ram0
  2321                           
  2322                           ; Clear objects allocated to BANK4
  2323  0035  3020               	movlw	low __pbssBANK4
  2324  0036  0084               	movwf	4
  2325  0037  3002               	movlw	high __pbssBANK4
  2326  0038  0085               	movwf	5
  2327  0039  3025               	movlw	37
  2328  003A  3187  27FA  3180   	fcall	clear_ram0
  2329                           
  2330                           ; Clear objects allocated to BANK5
  2331  003D  30A0               	movlw	low __pbssBANK5
  2332  003E  0084               	movwf	4
  2333  003F  3002               	movlw	high __pbssBANK5
  2334  0040  0085               	movwf	5
  2335  0041  3047               	movlw	71
  2336  0042  3187  27FA  3180   	fcall	clear_ram0
  2337                           
  2338                           ; Initialize objects allocated to BANK3
  2339  0045  30F5               	movlw	low __pidataBANK3
  2340  0046  0084               	movwf	4
  2341  0047  3099               	movlw	(high __pidataBANK3)| (0+128)
  2342  0048  0085               	movwf	5
  2343  0049  30C2               	movlw	low __pdataBANK3
  2344  004A  0086               	movwf	6
  2345  004B  3001               	movlw	high __pdataBANK3
  2346  004C  0087               	movwf	7
  2347  004D  3020               	movlw	32
  2348  004E  31A5  2504         	fcall	init_ram
  2349  0050                     end_of_initialization:	
  2350                           ;End of C runtime variable initialization code
  2351                           
  2352  0050                     __end_of__initialization:	
  2353  0050  107E               	bcf	pic14e$flags,0	;clear compiler interrupt flag
  2354  0051  0020               	movlb	0
  2355  0052  3192  2AE5         	ljmp	_main	;jump to C main() function
  2356                           
  2357                           	psect	bitbssCOMMON
  2358  03E0                     __pbitbssCOMMON:	
  2359  03E0                     _Receive_OK:	
  2360  03E0                     	ds	1
  2361  03E1                     _Transceive_OK:	
  2362  03E1                     	ds	1
  2363                           
  2364                           	psect	bssCOMMON
  2365  0078                     __pbssCOMMON:	
  2366  0078                     _DimmerLights:	
  2367  0078                     	ds	1
  2368  0079                     _DimmerLightsIntr:	
  2369  0079                     	ds	1
  2370  007A                     _Sw:	
  2371  007A                     	ds	1
  2372  007B                     _Load:	
  2373  007B                     	ds	1
  2374                           
  2375                           	psect	bssBANK1
  2376  00A0                     __pbssBANK1:	
  2377  00A0                     _RF_Data:	
  2378  00A0                     	ds	21
  2379  00B5                     _RF_Count:	
  2380  00B5                     	ds	2
  2381  00B7                     _Buz:	
  2382  00B7                     	ds	1
  2383  00B8                     _CRC:	
  2384  00B8                     	ds	1
  2385  00B9                     _DelayOff:	
  2386  00B9                     	ds	1
  2387  00BA                     _Dimmer:	
  2388  00BA                     	ds	1
  2389  00BB                     _DimmerLights11:	
  2390  00BB                     	ds	1
  2391  00BC                     _DimmerLights22:	
  2392  00BC                     	ds	1
  2393  00BD                     _DimmerLightsIntrIOC:	
  2394  00BD                     	ds	1
  2395  00BE                     _LED:	
  2396  00BE                     	ds	1
  2397  00BF                     _RF:	
  2398  00BF                     	ds	1
  2399  00C0                     _RFSW:	
  2400  00C0                     	ds	1
  2401  00C1                     _RSSI:	
  2402  00C1                     	ds	1
  2403  00C2                     _Rx_Length:	
  2404  00C2                     	ds	1
  2405  00C3                     _SPI0Buffer:	
  2406  00C3                     	ds	1
  2407  00C4                     _Temp:	
  2408  00C4                     	ds	1
  2409  00C5                     _Tx_Length:	
  2410  00C5                     	ds	1
  2411  00C6                     _r_address:	
  2412  00C6                     	ds	1
  2413  00C7                     _r_data:	
  2414  00C7                     	ds	1
  2415  00C8                     _s_data:	
  2416  00C8                     	ds	1
  2417  00C9                     _DlySw1:	
  2418  00C9                     	ds	5
  2419  00CE                     _DlySw2:	
  2420  00CE                     	ds	5
  2421  00D3                     _RF1:	
  2422  00D3                     	ds	5
  2423  00D8                     _VarErrLED:	
  2424  00D8                     	ds	4
  2425  00DC                     _VarLED1:	
  2426  00DC                     	ds	4
  2427  00E0                     _VarLED2:	
  2428  00E0                     	ds	4
  2429  00E4                     _Dimmer1:	
  2430  00E4                     	ds	3
  2431  00E7                     __WDT:	
  2432  00E7                     	ds	2
  2433  00E9                     _RFSW1:	
  2434  00E9                     	ds	1
  2435  00EA                     _RFSW2:	
  2436  00EA                     	ds	1
  2437                           
  2438                           	psect	bssBANK2
  2439  0120                     __pbssBANK2:	
  2440  0120                     _DimmerLights1:	
  2441  0120                     	ds	15
  2442  012F                     _DimmerLights2:	
  2443  012F                     	ds	15
  2444  013E                     _Buz1:	
  2445  013E                     	ds	12
  2446  014A                     _Sw1:	
  2447  014A                     	ds	9
  2448  0153                     _Sw2:	
  2449  0153                     	ds	9
  2450  015C                     _VarTimer0:	
  2451  015C                     	ds	8
  2452                           
  2453                           	psect	bssBANK3
  2454  01A0                     __pbssBANK3:	
  2455  01A0                     __myMain:	
  2456  01A0                     	ds	20
  2457  01B4                     _Temp1:	
  2458  01B4                     	ds	14
  2459                           
  2460                           	psect	dataBANK3
  2461  01C2                     __pdataBANK3:	
  2462  01C2                     __product:	
  2463  01C2                     	ds	32
  2464                           
  2465                           	psect	bssBANK4
  2466  0220                     __pbssBANK4:	
  2467  0220                     _VarMemory:	
  2468  0220                     	ds	37
  2469                           
  2470                           	psect	bssBANK5
  2471  02A0                     __pbssBANK5:	
  2472  02A0                     _Load1:	
  2473  02A0                     	ds	71
  2474                           
  2475                           	psect	clrtext
  2476  07FA                     clear_ram0:	
  2477                           ;	Called with FSR0 containing the base address, and
  2478                           ;	WREG with the size to clear
  2479                           
  2480  07FA  0064               	clrwdt	;clear the watchdog before getting into this loop
  2481  07FB                     clrloop0:	
  2482  07FB  0180               	clrf	0	;clear RAM location pointed to by FSR
  2483  07FC  3101               	addfsr 0,1
  2484  07FD  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2485  07FE  2FFB               	goto	clrloop0	;have we reached the end yet?
  2486  07FF  3400               	retlw	0	;all done for this memory range, return
  2487                           
  2488                           	psect	inittext
  2489  2504                     init_ram:	
  2490  2504  00FE               	movwf	126
  2491  2505                     initloop:	
  2492  2505  0012               	moviw fsr0++
  2493  2506  001E               	movwi fsr1++
  2494  2507  0BFE               	decfsz	126,f
  2495  2508  2D05               	goto	initloop
  2496  2509  3400               	retlw	0
  2497                           
  2498                           	psect	cstackCOMMON
  2499  0070                     __pcstackCOMMON:	
  2500  0070                     ?_CC2500_WriteByte:	
  2501  0070                     ?_CC2500_WriteCommand:	
  2502                           ; 0 bytes @ 0x0
  2503                           
  2504  0070                     ?_CC2500_ReadStatus:	
  2505                           ; 0 bytes @ 0x0
  2506                           
  2507  0070                     ?_CC2500_ReadByte:	
  2508                           ; 0 bytes @ 0x0
  2509                           
  2510  0070                     ?_CC2500_PowerRST:	
  2511                           ; 0 bytes @ 0x0
  2512                           
  2513  0070                     ?_CC2500_InitSetREG:	
  2514                           ; 0 bytes @ 0x0
  2515                           
  2516  0070                     ?_CC2500_InitPATable:	
  2517                           ; 0 bytes @ 0x0
  2518                           
  2519  0070                     ?_CC2500_ClearTXFIFO:	
  2520                           ; 0 bytes @ 0x0
  2521                           
  2522  0070                     ?_CC2500_ClearRXFIFO:	
  2523                           ; 0 bytes @ 0x0
  2524                           
  2525  0070                     ?_CC2500_FrequencyCabr:	
  2526                           ; 0 bytes @ 0x0
  2527                           
  2528  0070                     ?_CC2500_SIDLEMode:	
  2529                           ; 0 bytes @ 0x0
  2530                           
  2531  0070                     ?_DlyOff_Initialization:	
  2532                           ; 0 bytes @ 0x0
  2533                           
  2534  0070                     ?_DlyOff_Main:	
  2535                           ; 0 bytes @ 0x0
  2536                           
  2537  0070                     ?_setTxData:	
  2538                           ; 0 bytes @ 0x0
  2539                           
  2540  0070                     ?_setDimmerLights_Initialization:	
  2541                           ; 0 bytes @ 0x0
  2542                           
  2543  0070                     ?_Dimmer_Initialization:	
  2544                           ; 0 bytes @ 0x0
  2545                           
  2546  0070                     ?_setLoad_GO:	
  2547                           ; 0 bytes @ 0x0
  2548                           
  2549  0070                     ?_setMemory_GO:	
  2550                           ; 0 bytes @ 0x0
  2551                           
  2552  0070                     ?_setDimmerLights_Main:	
  2553                           ; 0 bytes @ 0x0
  2554                           
  2555  0070                     ?_setDimmerLights_ERROR:	
  2556                           ; 0 bytes @ 0x0
  2557                           
  2558  0070                     ?_setLoad_Count:	
  2559                           ; 0 bytes @ 0x0
  2560                           
  2561  0070                     ?_setLED_Initialization:	
  2562                           ; 0 bytes @ 0x0
  2563                           
  2564  0070                     ?_setLED_Main:	
  2565                           ; 0 bytes @ 0x0
  2566                           
  2567  0070                     ?_Fosc_Set:	
  2568                           ; 0 bytes @ 0x0
  2569                           
  2570  0070                     ?_IO_Set:	
  2571                           ; 0 bytes @ 0x0
  2572                           
  2573  0070                     ?_TMR0_Set:	
  2574                           ; 0 bytes @ 0x0
  2575                           
  2576  0070                     ?_ADC_Set:	
  2577                           ; 0 bytes @ 0x0
  2578                           
  2579  0070                     ?_INT_Set:	
  2580                           ; 0 bytes @ 0x0
  2581                           
  2582  0070                     ?_IOC_Set:	
  2583                           ; 0 bytes @ 0x0
  2584                           
  2585  0070                     ?_WDT_Set:	
  2586                           ; 0 bytes @ 0x0
  2587                           
  2588  0070                     ?_IOC_ISR:	
  2589                           ; 0 bytes @ 0x0
  2590                           
  2591  0070                     ?_TMR0_ISR:	
  2592                           ; 0 bytes @ 0x0
  2593                           
  2594  0070                     ?_INT_ISR:	
  2595                           ; 0 bytes @ 0x0
  2596                           
  2597  0070                     ?_Flash_Memory_Write:	
  2598                           ; 0 bytes @ 0x0
  2599                           
  2600  0070                     ?_Flash_Memory_Modify:	
  2601                           ; 0 bytes @ 0x0
  2602                           
  2603  0070                     ?_WDT_Clearing:	
  2604                           ; 0 bytes @ 0x0
  2605                           
  2606  0070                     ?_myMain_Initialization:	
  2607                           ; 0 bytes @ 0x0
  2608                           
  2609  0070                     ?_Temp_Initialization:	
  2610                           ; 0 bytes @ 0x0
  2611                           
  2612  0070                     ?_Load_Initialization:	
  2613                           ; 0 bytes @ 0x0
  2614                           
  2615  0070                     ?_Switch_Initialization:	
  2616                           ; 0 bytes @ 0x0
  2617                           
  2618  0070                     ?_RF_Initialization:	
  2619                           ; 0 bytes @ 0x0
  2620                           
  2621  0070                     ?_getLoad_AD:	
  2622                           ; 0 bytes @ 0x0
  2623                           
  2624  0070                     ?_getTemp_AD:	
  2625                           ; 0 bytes @ 0x0
  2626                           
  2627  0070                     ?_my_Main:	
  2628                           ; 0 bytes @ 0x0
  2629                           
  2630  0070                     ?_my_TestPointCleared:	
  2631                           ; 0 bytes @ 0x0
  2632                           
  2633  0070                     ?_Temp_Main:	
  2634                           ; 0 bytes @ 0x0
  2635                           
  2636  0070                     ?_Load_Main:	
  2637                           ; 0 bytes @ 0x0
  2638                           
  2639  0070                     ?_Switch_Main:	
  2640                           ; 0 bytes @ 0x0
  2641                           
  2642  0070                     ?_RF_Main:	
  2643                           ; 0 bytes @ 0x0
  2644                           
  2645  0070                     ?_setTemp_Enable:	
  2646                           ; 0 bytes @ 0x0
  2647                           
  2648  0070                     ?_setLoad_Enable:	
  2649                           ; 0 bytes @ 0x0
  2650                           
  2651  0070                     ?_setSw_Enable:	
  2652                           ; 0 bytes @ 0x0
  2653                           
  2654  0070                     ?_setLoad_AH_AL_Restore:	
  2655                           ; 0 bytes @ 0x0
  2656                           
  2657  0070                     ?_setLoad_Exceptions:	
  2658                           ; 0 bytes @ 0x0
  2659                           
  2660  0070                     ?_setTemp_Initialization:	
  2661                           ; 0 bytes @ 0x0
  2662                           
  2663  0070                     ?_setTemp_Main:	
  2664                           ; 0 bytes @ 0x0
  2665                           
  2666  0070                     ?_setOverTemp_Exceptions:	
  2667                           ; 0 bytes @ 0x0
  2668                           
  2669  0070                     ?_setRF_Initialization:	
  2670                           ; 0 bytes @ 0x0
  2671                           
  2672  0070                     ?_setRF_Main:	
  2673                           ; 0 bytes @ 0x0
  2674                           
  2675  0070                     ?_RF_RxDisable:	
  2676                           ; 0 bytes @ 0x0
  2677                           
  2678  0070                     ?_getRxData:	
  2679                           ; 0 bytes @ 0x0
  2680                           
  2681  0070                     ?_setLog_Code:	
  2682                           ; 0 bytes @ 0x0
  2683                           
  2684  0070                     ?_setControl_Lights_Table:	
  2685                           ; 0 bytes @ 0x0
  2686                           
  2687  0070                     ?_setRFSW_Control:	
  2688                           ; 0 bytes @ 0x0
  2689                           
  2690  0070                     ?_setRFSW_AdjControl:	
  2691                           ; 0 bytes @ 0x0
  2692                           
  2693  0070                     ?_setRF_DimmerValue:	
  2694                           ; 0 bytes @ 0x0
  2695                           
  2696  0070                     ?_setSw_Initialization:	
  2697                           ; 0 bytes @ 0x0
  2698                           
  2699  0070                     ?_setSw_Main:	
  2700                           ; 0 bytes @ 0x0
  2701                           
  2702  0070                     ?_Sw_DimmerOnFunc:	
  2703                           ; 0 bytes @ 0x0
  2704                           
  2705  0070                     ?_Sw_DimmerAdjFunc:	
  2706                           ; 0 bytes @ 0x0
  2707                           
  2708  0070                     ?_Sw_DimmerOffFunc:	
  2709                           ; 0 bytes @ 0x0
  2710                           
  2711  0070                     ?_Buzzer_Initialization:	
  2712                           ; 0 bytes @ 0x0
  2713                           
  2714  0070                     ?_Buzzer_Main:	
  2715                           ; 0 bytes @ 0x0
  2716                           
  2717  0070                     ?_CC2500_TxData:	
  2718                           ; 0 bytes @ 0x0
  2719                           
  2720  0070                     ?_CC2500_RxData:	
  2721                           ; 0 bytes @ 0x0
  2722                           
  2723  0070                     ?_CC2500_PowerOnInitial:	
  2724                           ; 0 bytes @ 0x0
  2725                           
  2726  0070                     ?_DelayOffPointSelect:	
  2727                           ; 0 bytes @ 0x0
  2728                           
  2729  0070                     ?_DelayOff_Initialization:	
  2730                           ; 0 bytes @ 0x0
  2731                           
  2732  0070                     ?_DelayOff_Main:	
  2733                           ; 0 bytes @ 0x0
  2734                           
  2735  0070                     ?_DimmerIntrIOCPointSelect:	
  2736                           ; 0 bytes @ 0x0
  2737                           
  2738  0070                     ??_DimmerIntrIOCPointSelect:	
  2739                           ; 0 bytes @ 0x0
  2740                           
  2741  0070                     ?_setDimmerLights_IntrIOC_GO:	
  2742                           ; 0 bytes @ 0x0
  2743                           
  2744  0070                     ?_DimmerIntrPointSelect:	
  2745                           ; 0 bytes @ 0x0
  2746                           
  2747  0070                     ??_DimmerIntrPointSelect:	
  2748                           ; 0 bytes @ 0x0
  2749                           
  2750  0070                     ?_setDimmerLights_IntrControl:	
  2751                           ; 0 bytes @ 0x0
  2752                           
  2753  0070                     ?_DimmerLightsPointSelect:	
  2754                           ; 0 bytes @ 0x0
  2755                           
  2756  0070                     ?_DimmerLights_Initialization:	
  2757                           ; 0 bytes @ 0x0
  2758                           
  2759  0070                     ?_DimmerLights_Close:	
  2760                           ; 0 bytes @ 0x0
  2761                           
  2762  0070                     ?_DimmerLights_Main:	
  2763                           ; 0 bytes @ 0x0
  2764                           
  2765  0070                     ?_DimmerLights_Exceptions:	
  2766                           ; 0 bytes @ 0x0
  2767                           
  2768  0070                     ?_setDimmerLights_AdjRF:	
  2769                           ; 0 bytes @ 0x0
  2770                           
  2771  0070                     ?_LedPointSelect:	
  2772                           ; 0 bytes @ 0x0
  2773                           
  2774  0070                     ?_LED_Initialization:	
  2775                           ; 0 bytes @ 0x0
  2776                           
  2777  0070                     ?_LED_Main:	
  2778                           ; 0 bytes @ 0x0
  2779                           
  2780  0070                     ?_Mcu_Initialization:	
  2781                           ; 0 bytes @ 0x0
  2782                           
  2783  0070                     ?_ISR:	
  2784                           ; 0 bytes @ 0x0
  2785                           
  2786  0070                     ?_setDimmerReClock:	
  2787                           ; 0 bytes @ 0x0
  2788                           
  2789  0070                     ?_Flash_Memory_Initialization:	
  2790                           ; 0 bytes @ 0x0
  2791                           
  2792  0070                     ?_Flash_Memory_Main:	
  2793                           ; 0 bytes @ 0x0
  2794                           
  2795  0070                     ?_Flash_Memory_Unlock:	
  2796                           ; 0 bytes @ 0x0
  2797                           
  2798  0070                     ?_Flash_Memory_Erasing:	
  2799                           ; 0 bytes @ 0x0
  2800                           
  2801  0070                     ?_WDT_Main:	
  2802                           ; 0 bytes @ 0x0
  2803                           
  2804  0070                     ?_RfPointSelect:	
  2805                           ; 0 bytes @ 0x0
  2806                           
  2807  0070                     ?_RfSWPointSelect:	
  2808                           ; 0 bytes @ 0x0
  2809                           
  2810  0070                     ?_TouchPower:	
  2811                           ; 0 bytes @ 0x0
  2812                           
  2813  0070                     ?_SwPointSelect:	
  2814                           ; 0 bytes @ 0x0
  2815                           
  2816  0070                     ?i1_setLoad_StatusOff:	
  2817                           ; 0 bytes @ 0x0
  2818                           
  2819  0070                     ?i1_RfPointSelect:	
  2820                           ; 0 bytes @ 0x0
  2821                           
  2822  0070                     ??i1_RfPointSelect:	
  2823                           ; 0 bytes @ 0x0
  2824                           
  2825  0070                     ?_DelayTimejudge:	
  2826                           ; 0 bytes @ 0x0
  2827                           
  2828  0070                     ?_getDimmerLights_StatusFlag:	
  2829                           ; 1 bytes @ 0x0
  2830                           
  2831  0070                     ?_getPercentValue:	
  2832                           ; 1 bytes @ 0x0
  2833                           
  2834  0070                     ?_Flash_Memory_Read:	
  2835                           ; 1 bytes @ 0x0
  2836                           
  2837  0070                     ?_getTemp_Safe:	
  2838                           ; 1 bytes @ 0x0
  2839                           
  2840  0070                     ?_setPercentValue:	
  2841                           ; 1 bytes @ 0x0
  2842                           
  2843  0070                     ?_getLoad_Safe:	
  2844                           ; 1 bytes @ 0x0
  2845                           
  2846  0070                     setRF_Initialization@rf:	
  2847                           ; 1 bytes @ 0x0
  2848                           
  2849  0070                     i1setLoad_StatusOff@command:	
  2850                           ; 1 bytes @ 0x0
  2851                           
  2852                           
  2853                           ; 1 bytes @ 0x0
  2854  0070                     	ds	1
  2855  0071                     ??i1_setLoad_StatusOff:	
  2856  0071                     DimmerIntrIOCPointSelect@lights:	
  2857                           ; 0 bytes @ 0x1
  2858                           
  2859  0071                     DimmerIntrPointSelect@lights:	
  2860                           ; 1 bytes @ 0x1
  2861                           
  2862  0071                     i1setLoad_StatusOff@lights:	
  2863                           ; 1 bytes @ 0x1
  2864                           
  2865  0071                     i1RfPointSelect@rf:	
  2866                           ; 1 bytes @ 0x1
  2867                           
  2868                           
  2869                           ; 1 bytes @ 0x1
  2870  0071                     	ds	1
  2871  0072                     ?_setRF_ReceiveGO:	
  2872  0072                     ??_setDimmerLights_IntrIOC_GO:	
  2873                           ; 0 bytes @ 0x2
  2874                           
  2875  0072                     ??_setDimmerLights_IntrControl:	
  2876                           ; 0 bytes @ 0x2
  2877                           
  2878  0072                     setDimmerLights_IntrIOC_GO@lights:	
  2879                           ; 0 bytes @ 0x2
  2880                           
  2881  0072                     setRF_ReceiveGO@command:	
  2882                           ; 1 bytes @ 0x2
  2883                           
  2884                           
  2885                           ; 1 bytes @ 0x2
  2886  0072                     	ds	1
  2887  0073                     ??_IOC_ISR:	
  2888  0073                     ??_setRF_ReceiveGO:	
  2889                           ; 0 bytes @ 0x3
  2890                           
  2891  0073                     ??_setDimmerReClock:	
  2892                           ; 0 bytes @ 0x3
  2893                           
  2894  0073                     setRF_ReceiveGO@rf:	
  2895                           ; 0 bytes @ 0x3
  2896                           
  2897                           
  2898                           ; 1 bytes @ 0x3
  2899  0073                     	ds	1
  2900  0074                     ??_INT_ISR:	
  2901                           
  2902                           ; 0 bytes @ 0x4
  2903  0074                     	ds	2
  2904  0076                     setDimmerLights_IntrControl@lights:	
  2905                           
  2906                           ; 1 bytes @ 0x6
  2907  0076                     	ds	1
  2908  0077                     ??_TMR0_ISR:	
  2909  0077                     ??_ISR:	
  2910                           ; 0 bytes @ 0x7
  2911                           
  2912                           
  2913                           ; 0 bytes @ 0x7
  2914  0077                     	ds	1
  2915                           
  2916                           	psect	cstackBANK0
  2917  0020                     __pcstackBANK0:	
  2918  0020                     ??_CC2500_WriteByte:	
  2919  0020                     ??_CC2500_ReadByte:	
  2920                           ; 0 bytes @ 0x0
  2921                           
  2922  0020                     ?_DelayTime_1us:	
  2923                           ; 0 bytes @ 0x0
  2924                           
  2925  0020                     ??_DelayTimejudge:	
  2926                           ; 0 bytes @ 0x0
  2927                           
  2928  0020                     ?_setLoad_StatusOff:	
  2929                           ; 0 bytes @ 0x0
  2930                           
  2931  0020                     ??_Dimmer_Initialization:	
  2932                           ; 0 bytes @ 0x0
  2933                           
  2934  0020                     ??_getDimmerLights_StatusFlag:	
  2935                           ; 0 bytes @ 0x0
  2936                           
  2937  0020                     ??_setLoad_GO:	
  2938                           ; 0 bytes @ 0x0
  2939                           
  2940  0020                     ??_setMemory_GO:	
  2941                           ; 0 bytes @ 0x0
  2942                           
  2943  0020                     ??_setLoad_Count:	
  2944                           ; 0 bytes @ 0x0
  2945                           
  2946  0020                     ?_setLoad_StatusOn:	
  2947                           ; 0 bytes @ 0x0
  2948                           
  2949  0020                     ??_Fosc_Set:	
  2950                           ; 0 bytes @ 0x0
  2951                           
  2952  0020                     ??_IO_Set:	
  2953                           ; 0 bytes @ 0x0
  2954                           
  2955  0020                     ??_TMR0_Set:	
  2956                           ; 0 bytes @ 0x0
  2957                           
  2958  0020                     ??_ADC_Set:	
  2959                           ; 0 bytes @ 0x0
  2960                           
  2961  0020                     ??_INT_Set:	
  2962                           ; 0 bytes @ 0x0
  2963                           
  2964  0020                     ??_IOC_Set:	
  2965                           ; 0 bytes @ 0x0
  2966                           
  2967  0020                     ??_WDT_Set:	
  2968                           ; 0 bytes @ 0x0
  2969                           
  2970  0020                     ??_Flash_Memory_Read:	
  2971                           ; 0 bytes @ 0x0
  2972                           
  2973  0020                     ??_Flash_Memory_Write:	
  2974                           ; 0 bytes @ 0x0
  2975                           
  2976  0020                     ??_WDT_Clearing:	
  2977                           ; 0 bytes @ 0x0
  2978                           
  2979  0020                     ??_myMain_Initialization:	
  2980                           ; 0 bytes @ 0x0
  2981                           
  2982  0020                     ??_my_TestPointCleared:	
  2983                           ; 0 bytes @ 0x0
  2984                           
  2985  0020                     ??_setTemp_Enable:	
  2986                           ; 0 bytes @ 0x0
  2987                           
  2988  0020                     ??_setLoad_Enable:	
  2989                           ; 0 bytes @ 0x0
  2990                           
  2991  0020                     ??_setLoad_AH_AL_Restore:	
  2992                           ; 0 bytes @ 0x0
  2993                           
  2994  0020                     ??_getTemp_Safe:	
  2995                           ; 0 bytes @ 0x0
  2996                           
  2997  0020                     ??_setTemp_Initialization:	
  2998                           ; 0 bytes @ 0x0
  2999                           
  3000  0020                     ??_setRF_Initialization:	
  3001                           ; 0 bytes @ 0x0
  3002                           
  3003  0020                     ??_Buzzer_Initialization:	
  3004                           ; 0 bytes @ 0x0
  3005                           
  3006  0020                     ??_Buzzer_Main:	
  3007                           ; 0 bytes @ 0x0
  3008                           
  3009  0020                     ??_DelayOffPointSelect:	
  3010                           ; 0 bytes @ 0x0
  3011                           
  3012  0020                     ??_DimmerLightsPointSelect:	
  3013                           ; 0 bytes @ 0x0
  3014                           
  3015  0020                     ??_LedPointSelect:	
  3016                           ; 0 bytes @ 0x0
  3017                           
  3018  0020                     ??_Flash_Memory_Unlock:	
  3019                           ; 0 bytes @ 0x0
  3020                           
  3021  0020                     ??_Flash_Memory_Erasing:	
  3022                           ; 0 bytes @ 0x0
  3023                           
  3024  0020                     ??_WDT_Main:	
  3025                           ; 0 bytes @ 0x0
  3026                           
  3027  0020                     ??_getLoad_Safe:	
  3028                           ; 0 bytes @ 0x0
  3029                           
  3030  0020                     ??_RfPointSelect:	
  3031                           ; 0 bytes @ 0x0
  3032                           
  3033  0020                     ??_RfSWPointSelect:	
  3034                           ; 0 bytes @ 0x0
  3035                           
  3036  0020                     ??_TouchPower:	
  3037                           ; 0 bytes @ 0x0
  3038                           
  3039  0020                     ??_SwPointSelect:	
  3040                           ; 0 bytes @ 0x0
  3041                           
  3042  0020                     ?_getAD:	
  3043                           ; 0 bytes @ 0x0
  3044                           
  3045  0020                     ?___wmul:	
  3046                           ; 2 bytes @ 0x0
  3047                           
  3048  0020                     ?___awdiv:	
  3049                           ; 2 bytes @ 0x0
  3050                           
  3051  0020                     ?___lwdiv:	
  3052                           ; 2 bytes @ 0x0
  3053                           
  3054  0020                     ?___ftpack:	
  3055                           ; 2 bytes @ 0x0
  3056                           
  3057  0020                     getAD@adcon1:	
  3058                           ; 3 bytes @ 0x0
  3059                           
  3060  0020                     setLoad_Enable@command:	
  3061                           ; 1 bytes @ 0x0
  3062                           
  3063  0020                     setLoad_GO@command:	
  3064                           ; 1 bytes @ 0x0
  3065                           
  3066  0020                     setLoad_StatusOn@command:	
  3067                           ; 1 bytes @ 0x0
  3068                           
  3069  0020                     setLoad_StatusOff@command:	
  3070                           ; 1 bytes @ 0x0
  3071                           
  3072  0020                     setTemp_Enable@command:	
  3073                           ; 1 bytes @ 0x0
  3074                           
  3075  0020                     DelayTime_1us@count:	
  3076                           ; 1 bytes @ 0x0
  3077                           
  3078  0020                     ___wmul@multiplier:	
  3079                           ; 2 bytes @ 0x0
  3080                           
  3081  0020                     ___awdiv@divisor:	
  3082                           ; 2 bytes @ 0x0
  3083                           
  3084  0020                     ___lwdiv@divisor:	
  3085                           ; 2 bytes @ 0x0
  3086                           
  3087  0020                     ___ftpack@arg:	
  3088                           ; 2 bytes @ 0x0
  3089                           
  3090                           
  3091                           ; 3 bytes @ 0x0
  3092  0020                     	ds	1
  3093  0021                     ??_setLoad_StatusOff:	
  3094  0021                     ??_setLoad_StatusOn:	
  3095                           ; 0 bytes @ 0x1
  3096                           
  3097  0021                     ??_Temp_Initialization:	
  3098                           ; 0 bytes @ 0x1
  3099                           
  3100  0021                     ??_RF_Initialization:	
  3101                           ; 0 bytes @ 0x1
  3102                           
  3103  0021                     ??_Mcu_Initialization:	
  3104                           ; 0 bytes @ 0x1
  3105                           
  3106  0021                     CC2500_WriteByte@loop_a:	
  3107                           ; 0 bytes @ 0x1
  3108                           
  3109  0021                     CC2500_ReadByte@loop_b:	
  3110                           ; 1 bytes @ 0x1
  3111                           
  3112  0021                     DelayOffPointSelect@sw:	
  3113                           ; 1 bytes @ 0x1
  3114                           
  3115  0021                     DelayTimejudge@value:	
  3116                           ; 1 bytes @ 0x1
  3117                           
  3118  0021                     DimmerLightsPointSelect@lights:	
  3119                           ; 1 bytes @ 0x1
  3120                           
  3121  0021                     getDimmerLights_StatusFlag@Status:	
  3122                           ; 1 bytes @ 0x1
  3123                           
  3124  0021                     LedPointSelect@led:	
  3125                           ; 1 bytes @ 0x1
  3126                           
  3127  0021                     Flash_Memory_Read@i:	
  3128                           ; 1 bytes @ 0x1
  3129                           
  3130  0021                     Flash_Memory_Write@i:	
  3131                           ; 1 bytes @ 0x1
  3132                           
  3133  0021                     setLoad_Count@command:	
  3134                           ; 1 bytes @ 0x1
  3135                           
  3136  0021                     setLoad_StatusOn@lights:	
  3137                           ; 1 bytes @ 0x1
  3138                           
  3139  0021                     setLoad_StatusOff@lights:	
  3140                           ; 1 bytes @ 0x1
  3141                           
  3142  0021                     setLoad_AH_AL_Restore@i:	
  3143                           ; 1 bytes @ 0x1
  3144                           
  3145  0021                     RfPointSelect@rf:	
  3146                           ; 1 bytes @ 0x1
  3147                           
  3148  0021                     RfSWPointSelect@sw:	
  3149                           ; 1 bytes @ 0x1
  3150                           
  3151  0021                     SwPointSelect@sw:	
  3152                           ; 1 bytes @ 0x1
  3153                           
  3154                           
  3155                           ; 1 bytes @ 0x1
  3156  0021                     	ds	1
  3157  0022                     ??_CC2500_WriteCommand:	
  3158  0022                     ??_CC2500_ReadStatus:	
  3159                           ; 0 bytes @ 0x2
  3160                           
  3161  0022                     ??_DelayTime_1us:	
  3162                           ; 0 bytes @ 0x2
  3163                           
  3164  0022                     ?_CC2500_WriteREG:	
  3165                           ; 0 bytes @ 0x2
  3166                           
  3167  0022                     ??_DlyOff_Initialization:	
  3168                           ; 0 bytes @ 0x2
  3169                           
  3170  0022                     ?_setSw_Status:	
  3171                           ; 0 bytes @ 0x2
  3172                           
  3173  0022                     ?_setRFSW_Status:	
  3174                           ; 0 bytes @ 0x2
  3175                           
  3176  0022                     ?_setDimmerLights_Trigger:	
  3177                           ; 0 bytes @ 0x2
  3178                           
  3179  0022                     ?_setDimmerLights_Switch:	
  3180                           ; 0 bytes @ 0x2
  3181                           
  3182  0022                     ??_setTxData:	
  3183                           ; 0 bytes @ 0x2
  3184                           
  3185  0022                     ??_setDimmerLights_Initialization:	
  3186                           ; 0 bytes @ 0x2
  3187                           
  3188  0022                     ?_setDimmerLights_TriggerERROR:	
  3189                           ; 0 bytes @ 0x2
  3190                           
  3191  0022                     ?_setLED:	
  3192                           ; 0 bytes @ 0x2
  3193                           
  3194  0022                     ??_setLED_Main:	
  3195                           ; 0 bytes @ 0x2
  3196                           
  3197  0022                     ??_Load_Initialization:	
  3198                           ; 0 bytes @ 0x2
  3199                           
  3200  0022                     ??_setSw_Enable:	
  3201                           ; 0 bytes @ 0x2
  3202                           
  3203  0022                     ?_setRF_Enable:	
  3204                           ; 0 bytes @ 0x2
  3205                           
  3206  0022                     ?_setDimmerLights_AdjGo:	
  3207                           ; 0 bytes @ 0x2
  3208                           
  3209  0022                     ?_setDimmerLights_TriggerAdj:	
  3210                           ; 0 bytes @ 0x2
  3211                           
  3212  0022                     ?_setDimmerLights_Clear:	
  3213                           ; 0 bytes @ 0x2
  3214                           
  3215  0022                     ?_setRF_Learn:	
  3216                           ; 0 bytes @ 0x2
  3217                           
  3218  0022                     CC2500_WriteREG@value:	
  3219                           ; 0 bytes @ 0x2
  3220                           
  3221  0022                     DlyOff_Initialization@sw:	
  3222                           ; 1 bytes @ 0x2
  3223                           
  3224  0022                     DelayTimejudge@i:	
  3225                           ; 1 bytes @ 0x2
  3226                           
  3227  0022                     _getDimmerLights_StatusFlag$2316:	
  3228                           ; 1 bytes @ 0x2
  3229                           
  3230  0022                     setDimmerLights_TriggerERROR@command:	
  3231                           ; 1 bytes @ 0x2
  3232                           
  3233  0022                     setDimmerLights_Switch@command:	
  3234                           ; 1 bytes @ 0x2
  3235                           
  3236  0022                     setDimmerLights_AdjGo@command:	
  3237                           ; 1 bytes @ 0x2
  3238                           
  3239  0022                     setDimmerLights_Trigger@command:	
  3240                           ; 1 bytes @ 0x2
  3241                           
  3242  0022                     setDimmerLights_TriggerAdj@command:	
  3243                           ; 1 bytes @ 0x2
  3244                           
  3245  0022                     setDimmerLights_Clear@command:	
  3246                           ; 1 bytes @ 0x2
  3247                           
  3248  0022                     setLED@command:	
  3249                           ; 1 bytes @ 0x2
  3250                           
  3251  0022                     Flash_Memory_Read@address:	
  3252                           ; 1 bytes @ 0x2
  3253                           
  3254  0022                     setMemory_GO@command:	
  3255                           ; 1 bytes @ 0x2
  3256                           
  3257  0022                     setRF_Learn@command:	
  3258                           ; 1 bytes @ 0x2
  3259                           
  3260  0022                     setRF_Enable@command:	
  3261                           ; 1 bytes @ 0x2
  3262                           
  3263  0022                     setRFSW_Status@command:	
  3264                           ; 1 bytes @ 0x2
  3265                           
  3266  0022                     setSw_Enable@command:	
  3267                           ; 1 bytes @ 0x2
  3268                           
  3269  0022                     setSw_Status@command:	
  3270                           ; 1 bytes @ 0x2
  3271                           
  3272  0022                     DelayTime_1us@i:	
  3273                           ; 1 bytes @ 0x2
  3274                           
  3275  0022                     ___wmul@multiplicand:	
  3276                           ; 2 bytes @ 0x2
  3277                           
  3278  0022                     ___awdiv@dividend:	
  3279                           ; 2 bytes @ 0x2
  3280                           
  3281  0022                     ___lwdiv@dividend:	
  3282                           ; 2 bytes @ 0x2
  3283                           
  3284                           
  3285                           ; 2 bytes @ 0x2
  3286  0022                     	ds	1
  3287  0023                     ??_CC2500_WriteREG:	
  3288  0023                     ??_setSw_Status:	
  3289                           ; 0 bytes @ 0x3
  3290                           
  3291  0023                     ??_setRFSW_Status:	
  3292                           ; 0 bytes @ 0x3
  3293                           
  3294  0023                     ??_setDimmerLights_Trigger:	
  3295                           ; 0 bytes @ 0x3
  3296                           
  3297  0023                     ??_setDimmerLights_Switch:	
  3298                           ; 0 bytes @ 0x3
  3299                           
  3300  0023                     ??_setDimmerLights_TriggerERROR:	
  3301                           ; 0 bytes @ 0x3
  3302                           
  3303  0023                     ??_setLED:	
  3304                           ; 0 bytes @ 0x3
  3305                           
  3306  0023                     ??_setRF_Enable:	
  3307                           ; 0 bytes @ 0x3
  3308                           
  3309  0023                     ??_DelayOff_Initialization:	
  3310                           ; 0 bytes @ 0x3
  3311                           
  3312  0023                     ?_setDelayOff_GO:	
  3313                           ; 0 bytes @ 0x3
  3314                           
  3315  0023                     ??_DimmerLights_Close:	
  3316                           ; 0 bytes @ 0x3
  3317                           
  3318  0023                     ??_setDimmerLights_AdjGo:	
  3319                           ; 0 bytes @ 0x3
  3320                           
  3321  0023                     ??_setDimmerLights_TriggerAdj:	
  3322                           ; 0 bytes @ 0x3
  3323                           
  3324  0023                     ??_setDimmerLights_Clear:	
  3325                           ; 0 bytes @ 0x3
  3326                           
  3327  0023                     ??_getAD:	
  3328                           ; 0 bytes @ 0x3
  3329                           
  3330  0023                     ??_setRF_Learn:	
  3331                           ; 0 bytes @ 0x3
  3332                           
  3333  0023                     CC2500_WriteCommand@command:	
  3334                           ; 0 bytes @ 0x3
  3335                           
  3336  0023                     CC2500_ReadStatus@status_addr:	
  3337                           ; 1 bytes @ 0x3
  3338                           
  3339  0023                     setDelayOff_GO@command:	
  3340                           ; 1 bytes @ 0x3
  3341                           
  3342  0023                     setDimmerLights_Initialization@lights:	
  3343                           ; 1 bytes @ 0x3
  3344                           
  3345  0023                     setDimmerLights_TriggerERROR@lights:	
  3346                           ; 1 bytes @ 0x3
  3347                           
  3348  0023                     setDimmerLights_Switch@lights:	
  3349                           ; 1 bytes @ 0x3
  3350                           
  3351  0023                     setDimmerLights_AdjGo@lights:	
  3352                           ; 1 bytes @ 0x3
  3353                           
  3354  0023                     setDimmerLights_Trigger@lights:	
  3355                           ; 1 bytes @ 0x3
  3356                           
  3357  0023                     setDimmerLights_TriggerAdj@lights:	
  3358                           ; 1 bytes @ 0x3
  3359                           
  3360  0023                     setDimmerLights_Clear@lights:	
  3361                           ; 1 bytes @ 0x3
  3362                           
  3363  0023                     setLED@led:	
  3364                           ; 1 bytes @ 0x3
  3365                           
  3366  0023                     getAD@adcon0:	
  3367                           ; 1 bytes @ 0x3
  3368                           
  3369  0023                     Flash_Memory_Read@ret:	
  3370                           ; 1 bytes @ 0x3
  3371                           
  3372  0023                     setRF_Learn@rf:	
  3373                           ; 1 bytes @ 0x3
  3374                           
  3375  0023                     setTxData@rf:	
  3376                           ; 1 bytes @ 0x3
  3377                           
  3378  0023                     setRF_Enable@rf:	
  3379                           ; 1 bytes @ 0x3
  3380                           
  3381  0023                     setRFSW_Status@sw:	
  3382                           ; 1 bytes @ 0x3
  3383                           
  3384  0023                     setSw_Status@sw:	
  3385                           ; 1 bytes @ 0x3
  3386                           
  3387  0023                     ___ftpack@exp:	
  3388                           ; 1 bytes @ 0x3
  3389                           
  3390                           
  3391                           ; 1 bytes @ 0x3
  3392  0023                     	ds	1
  3393  0024                     ??_CC2500_ClearTXFIFO:	
  3394  0024                     ??_CC2500_ClearRXFIFO:	
  3395                           ; 0 bytes @ 0x4
  3396                           
  3397  0024                     ??_CC2500_SIDLEMode:	
  3398                           ; 0 bytes @ 0x4
  3399                           
  3400  0024                     ?_setDimmerLights:	
  3401                           ; 0 bytes @ 0x4
  3402                           
  3403  0024                     ??_setDimmerLights_ERROR:	
  3404                           ; 0 bytes @ 0x4
  3405                           
  3406  0024                     ??_setLED_Initialization:	
  3407                           ; 0 bytes @ 0x4
  3408                           
  3409  0024                     ??_Flash_Memory_Modify:	
  3410                           ; 0 bytes @ 0x4
  3411                           
  3412  0024                     ??_getLoad_AD:	
  3413                           ; 0 bytes @ 0x4
  3414                           
  3415  0024                     ??_getTemp_AD:	
  3416                           ; 0 bytes @ 0x4
  3417                           
  3418  0024                     ??_RF_RxDisable:	
  3419                           ; 0 bytes @ 0x4
  3420                           
  3421  0024                     ??_setSw_Initialization:	
  3422                           ; 0 bytes @ 0x4
  3423                           
  3424  0024                     ??_Sw_DimmerAdjFunc:	
  3425                           ; 0 bytes @ 0x4
  3426                           
  3427  0024                     ??_CC2500_TxData:	
  3428                           ; 0 bytes @ 0x4
  3429                           
  3430  0024                     ??_DimmerLights_Initialization:	
  3431                           ; 0 bytes @ 0x4
  3432                           
  3433  0024                     ??___wmul:	
  3434                           ; 0 bytes @ 0x4
  3435                           
  3436  0024                     ??___awdiv:	
  3437                           ; 0 bytes @ 0x4
  3438                           
  3439  0024                     ??___lwdiv:	
  3440                           ; 0 bytes @ 0x4
  3441                           
  3442  0024                     CC2500_WriteREG@w_addr:	
  3443                           ; 0 bytes @ 0x4
  3444                           
  3445  0024                     setDelayOff_GO@value:	
  3446                           ; 1 bytes @ 0x4
  3447                           
  3448  0024                     setDimmerLights@status:	
  3449                           ; 1 bytes @ 0x4
  3450                           
  3451  0024                     setLED_Initialization@led:	
  3452                           ; 1 bytes @ 0x4
  3453                           
  3454  0024                     setLED_Main@led:	
  3455                           ; 1 bytes @ 0x4
  3456                           
  3457  0024                     RF_RxDisable@rf:	
  3458                           ; 1 bytes @ 0x4
  3459                           
  3460  0024                     setSw_Initialization@sw:	
  3461                           ; 1 bytes @ 0x4
  3462                           
  3463  0024                     Sw_DimmerAdjFunc@Idle:	
  3464                           ; 1 bytes @ 0x4
  3465                           
  3466  0024                     ___ftpack@sign:	
  3467                           ; 1 bytes @ 0x4
  3468                           
  3469  0024                     DelayTime_1us@j:	
  3470                           ; 1 bytes @ 0x4
  3471                           
  3472  0024                     ___wmul@product:	
  3473                           ; 2 bytes @ 0x4
  3474                           
  3475                           
  3476                           ; 2 bytes @ 0x4
  3477  0024                     	ds	1
  3478  0025                     ??_CC2500_InitSetREG:	
  3479  0025                     ??_CC2500_InitPATable:	
  3480                           ; 0 bytes @ 0x5
  3481                           
  3482  0025                     ??_setDimmerLights:	
  3483                           ; 0 bytes @ 0x5
  3484                           
  3485  0025                     ??_Switch_Initialization:	
  3486                           ; 0 bytes @ 0x5
  3487                           
  3488  0025                     ??___ftpack:	
  3489                           ; 0 bytes @ 0x5
  3490                           
  3491  0025                     ??_setDelayOff_GO:	
  3492                           ; 0 bytes @ 0x5
  3493                           
  3494  0025                     ??_LED_Initialization:	
  3495                           ; 0 bytes @ 0x5
  3496                           
  3497  0025                     ??_LED_Main:	
  3498                           ; 0 bytes @ 0x5
  3499                           
  3500  0025                     CC2500_TxData@loop_e:	
  3501                           ; 0 bytes @ 0x5
  3502                           
  3503  0025                     setDimmerLights_ERROR@lights:	
  3504                           ; 1 bytes @ 0x5
  3505                           
  3506  0025                     Sw_DimmerAdjFunc@sw:	
  3507                           ; 1 bytes @ 0x5
  3508                           
  3509  0025                     ___awdiv@counter:	
  3510                           ; 1 bytes @ 0x5
  3511                           
  3512  0025                     ___lwdiv@quotient:	
  3513                           ; 1 bytes @ 0x5
  3514                           
  3515                           
  3516                           ; 2 bytes @ 0x5
  3517  0025                     	ds	1
  3518  0026                     ??_CC2500_PowerRST:	
  3519  0026                     ??_CC2500_FrequencyCabr:	
  3520                           ; 0 bytes @ 0x6
  3521                           
  3522  0026                     CC2500_InitSetREG@temp1:	
  3523                           ; 0 bytes @ 0x6
  3524                           
  3525  0026                     CC2500_InitPATable@temp:	
  3526                           ; 1 bytes @ 0x6
  3527                           
  3528  0026                     setDimmerLights@lights:	
  3529                           ; 1 bytes @ 0x6
  3530                           
  3531  0026                     Flash_Memory_Modify@i:	
  3532                           ; 1 bytes @ 0x6
  3533                           
  3534  0026                     ___awdiv@sign:	
  3535                           ; 1 bytes @ 0x6
  3536                           
  3537                           
  3538                           ; 1 bytes @ 0x6
  3539  0026                     	ds	1
  3540  0027                     ??_Flash_Memory_Main:	
  3541  0027                     CC2500_InitSetREG@temp2:	
  3542                           ; 0 bytes @ 0x7
  3543                           
  3544  0027                     CC2500_InitPATable@loop_d:	
  3545                           ; 1 bytes @ 0x7
  3546                           
  3547  0027                     setDelayOff_GO@sw:	
  3548                           ; 1 bytes @ 0x7
  3549                           
  3550  0027                     ___lwdiv@counter:	
  3551                           ; 1 bytes @ 0x7
  3552                           
  3553  0027                     ___awdiv@quotient:	
  3554                           ; 1 bytes @ 0x7
  3555                           
  3556                           
  3557                           ; 2 bytes @ 0x7
  3558  0027                     	ds	1
  3559  0028                     ?___awtoft:	
  3560  0028                     CC2500_InitSetREG@loop_c:	
  3561                           ; 3 bytes @ 0x8
  3562                           
  3563  0028                     getTemp_AD@channel:	
  3564                           ; 1 bytes @ 0x8
  3565                           
  3566  0028                     ___awtoft@c:	
  3567                           ; 1 bytes @ 0x8
  3568                           
  3569                           
  3570                           ; 2 bytes @ 0x8
  3571  0028                     	ds	1
  3572  0029                     ?_setBuz:	
  3573  0029                     ??_CC2500_PowerOnInitial:	
  3574                           ; 0 bytes @ 0x9
  3575                           
  3576  0029                     getLoad_AD@channel:	
  3577                           ; 0 bytes @ 0x9
  3578                           
  3579  0029                     setBuz@time:	
  3580                           ; 1 bytes @ 0x9
  3581                           
  3582                           
  3583                           ; 2 bytes @ 0x9
  3584  0029                     	ds	1
  3585  002A                     getLoad_AD@j:	
  3586                           
  3587                           ; 1 bytes @ 0xA
  3588  002A                     	ds	1
  3589  002B                     ??_setBuz:	
  3590  002B                     ??___awtoft:	
  3591                           ; 0 bytes @ 0xB
  3592                           
  3593  002B                     getLoad_AD@i:	
  3594                           ; 0 bytes @ 0xB
  3595                           
  3596                           
  3597                           ; 1 bytes @ 0xB
  3598  002B                     	ds	1
  3599  002C                     setBuz@count:	
  3600                           
  3601                           ; 1 bytes @ 0xC
  3602  002C                     	ds	1
  3603  002D                     ??_my_Main:	
  3604  002D                     ??_setLog_Code:	
  3605                           ; 0 bytes @ 0xD
  3606                           
  3607  002D                     ??_CC2500_RxData:	
  3608                           ; 0 bytes @ 0xD
  3609                           
  3610  002D                     ??_DimmerLights_Exceptions:	
  3611                           ; 0 bytes @ 0xD
  3612                           
  3613  002D                     DimmerLights_Exceptions@status:	
  3614                           ; 0 bytes @ 0xD
  3615                           
  3616  002D                     ___awtoft@sign:	
  3617                           ; 1 bytes @ 0xD
  3618                           
  3619                           
  3620                           ; 1 bytes @ 0xD
  3621  002D                     	ds	1
  3622  002E                     ??_setLoad_Exceptions:	
  3623  002E                     ??_setOverTemp_Exceptions:	
  3624                           ; 0 bytes @ 0xE
  3625                           
  3626  002E                     ?___ftdiv:	
  3627                           ; 0 bytes @ 0xE
  3628                           
  3629  002E                     ?___ftmul:	
  3630                           ; 3 bytes @ 0xE
  3631                           
  3632  002E                     setLog_Code@rf:	
  3633                           ; 3 bytes @ 0xE
  3634                           
  3635  002E                     ___ftdiv@f2:	
  3636                           ; 1 bytes @ 0xE
  3637                           
  3638  002E                     ___ftmul@f1:	
  3639                           ; 3 bytes @ 0xE
  3640                           
  3641                           
  3642                           ; 3 bytes @ 0xE
  3643  002E                     	ds	1
  3644  002F                     CC2500_RxData@loop_f:	
  3645  002F                     setLoad_Exceptions@command:	
  3646                           ; 1 bytes @ 0xF
  3647                           
  3648  002F                     setOverTemp_Exceptions@command:	
  3649                           ; 1 bytes @ 0xF
  3650                           
  3651                           
  3652                           ; 1 bytes @ 0xF
  3653  002F                     	ds	1
  3654  0030                     ??_Load_Main:	
  3655  0030                     ??_setTemp_Main:	
  3656                           ; 0 bytes @ 0x10
  3657                           
  3658                           
  3659                           ; 0 bytes @ 0x10
  3660  0030                     	ds	1
  3661  0031                     ___ftdiv@f1:	
  3662  0031                     ___ftmul@f2:	
  3663                           ; 3 bytes @ 0x11
  3664                           
  3665                           
  3666                           ; 3 bytes @ 0x11
  3667  0031                     	ds	2
  3668  0033                     ??_Temp_Main:	
  3669                           
  3670                           ; 0 bytes @ 0x13
  3671  0033                     	ds	1
  3672  0034                     ??___ftdiv:	
  3673  0034                     ??___ftmul:	
  3674                           ; 0 bytes @ 0x14
  3675                           
  3676  0034                     Load_Main@i:	
  3677                           ; 0 bytes @ 0x14
  3678                           
  3679                           
  3680                           ; 1 bytes @ 0x14
  3681  0034                     	ds	4
  3682  0038                     ___ftdiv@cntr:	
  3683  0038                     ___ftmul@exp:	
  3684                           ; 1 bytes @ 0x18
  3685                           
  3686                           
  3687                           ; 1 bytes @ 0x18
  3688  0038                     	ds	1
  3689  0039                     ___ftdiv@f3:	
  3690  0039                     ___ftmul@f3_as_product:	
  3691                           ; 3 bytes @ 0x19
  3692                           
  3693                           
  3694                           ; 3 bytes @ 0x19
  3695  0039                     	ds	3
  3696  003C                     ___ftdiv@exp:	
  3697  003C                     ___ftmul@cntr:	
  3698                           ; 1 bytes @ 0x1C
  3699                           
  3700                           
  3701                           ; 1 bytes @ 0x1C
  3702  003C                     	ds	1
  3703  003D                     ___ftdiv@sign:	
  3704  003D                     ___ftmul@sign:	
  3705                           ; 1 bytes @ 0x1D
  3706                           
  3707                           
  3708                           ; 1 bytes @ 0x1D
  3709  003D                     	ds	1
  3710  003E                     ?___ftadd:	
  3711  003E                     ___ftadd@f1:	
  3712                           ; 3 bytes @ 0x1E
  3713                           
  3714                           
  3715                           ; 3 bytes @ 0x1E
  3716  003E                     	ds	3
  3717  0041                     ___ftadd@f2:	
  3718                           
  3719                           ; 3 bytes @ 0x21
  3720  0041                     	ds	3
  3721  0044                     ??___ftadd:	
  3722                           
  3723                           ; 0 bytes @ 0x24
  3724  0044                     	ds	4
  3725  0048                     ___ftadd@sign:	
  3726                           
  3727                           ; 1 bytes @ 0x28
  3728  0048                     	ds	1
  3729  0049                     ___ftadd@exp2:	
  3730                           
  3731                           ; 1 bytes @ 0x29
  3732  0049                     	ds	1
  3733  004A                     ___ftadd@exp1:	
  3734                           
  3735                           ; 1 bytes @ 0x2A
  3736  004A                     	ds	1
  3737  004B                     ?___fttol:	
  3738  004B                     ___fttol@f1:	
  3739                           ; 4 bytes @ 0x2B
  3740                           
  3741                           
  3742                           ; 3 bytes @ 0x2B
  3743  004B                     	ds	4
  3744  004F                     ??___fttol:	
  3745                           
  3746                           ; 0 bytes @ 0x2F
  3747  004F                     	ds	4
  3748  0053                     ___fttol@sign1:	
  3749                           
  3750                           ; 1 bytes @ 0x33
  3751  0053                     	ds	1
  3752  0054                     ___fttol@lval:	
  3753                           
  3754                           ; 4 bytes @ 0x34
  3755  0054                     	ds	4
  3756  0058                     ___fttol@exp1:	
  3757                           
  3758                           ; 1 bytes @ 0x38
  3759  0058                     	ds	1
  3760  0059                     ??_getPercentValue:	
  3761  0059                     ??_setPercentValue:	
  3762                           ; 0 bytes @ 0x39
  3763                           
  3764  0059                     setPercentValue@value:	
  3765                           ; 0 bytes @ 0x39
  3766                           
  3767                           
  3768                           ; 1 bytes @ 0x39
  3769  0059                     	ds	1
  3770  005A                     setPercentValue@i:	
  3771                           
  3772                           ; 3 bytes @ 0x3A
  3773  005A                     	ds	1
  3774  005B                     getPercentValue@value:	
  3775                           
  3776                           ; 1 bytes @ 0x3B
  3777  005B                     	ds	1
  3778  005C                     getPercentValue@i:	
  3779                           
  3780                           ; 3 bytes @ 0x3C
  3781  005C                     	ds	1
  3782  005D                     ?_setRF_DimmerLights:	
  3783  005D                     ??_Flash_Memory_Initialization:	
  3784                           ; 0 bytes @ 0x3D
  3785                           
  3786  005D                     setRF_DimmerLights@on:	
  3787                           ; 0 bytes @ 0x3D
  3788                           
  3789                           
  3790                           ; 1 bytes @ 0x3D
  3791  005D                     	ds	1
  3792  005E                     ??_setRF_DimmerLights:	
  3793  005E                     Flash_Memory_Initialization@i:	
  3794                           ; 0 bytes @ 0x3E
  3795                           
  3796                           
  3797                           ; 1 bytes @ 0x3E
  3798  005E                     	ds	1
  3799  005F                     ??_setDimmerLights_AdjRF:	
  3800                           
  3801                           ; 0 bytes @ 0x3F
  3802  005F                     	ds	1
  3803  0060                     setDimmerLights_AdjRF@lights:	
  3804  0060                     setRF_DimmerLights@status:	
  3805                           ; 1 bytes @ 0x40
  3806                           
  3807                           
  3808                           ; 1 bytes @ 0x40
  3809  0060                     	ds	1
  3810  0061                     ??_setRF_DimmerValue:	
  3811  0061                     setRF_DimmerLights@lights:	
  3812                           ; 0 bytes @ 0x41
  3813                           
  3814                           
  3815                           ; 1 bytes @ 0x41
  3816  0061                     	ds	1
  3817  0062                     ??_DlyOff_Main:	
  3818  0062                     ?_setDimmerLights_Adj:	
  3819                           ; 0 bytes @ 0x42
  3820                           
  3821  0062                     ??_setRFSW_Control:	
  3822                           ; 0 bytes @ 0x42
  3823                           
  3824  0062                     ??_Sw_DimmerOnFunc:	
  3825                           ; 0 bytes @ 0x42
  3826                           
  3827  0062                     ??_Sw_DimmerOffFunc:	
  3828                           ; 0 bytes @ 0x42
  3829                           
  3830  0062                     setDimmerLights_Adj@status:	
  3831                           ; 0 bytes @ 0x42
  3832                           
  3833  0062                     Sw_DimmerOnFunc@Idle:	
  3834                           ; 1 bytes @ 0x42
  3835                           
  3836                           
  3837                           ; 1 bytes @ 0x42
  3838  0062                     	ds	1
  3839  0063                     ??_setDimmerLights_Adj:	
  3840  0063                     setRFSW_Control@sw:	
  3841                           ; 0 bytes @ 0x43
  3842                           
  3843  0063                     setRF_DimmerValue@lights:	
  3844                           ; 1 bytes @ 0x43
  3845                           
  3846  0063                     Sw_DimmerOnFunc@sw:	
  3847                           ; 1 bytes @ 0x43
  3848                           
  3849                           
  3850                           ; 1 bytes @ 0x43
  3851  0063                     	ds	1
  3852  0064                     ??_setRFSW_AdjControl:	
  3853  0064                     DlyOff_Main@sw:	
  3854                           ; 0 bytes @ 0x44
  3855                           
  3856  0064                     setDimmerLights_Adj@lights:	
  3857                           ; 1 bytes @ 0x44
  3858                           
  3859  0064                     Sw_DimmerOffFunc@sw:	
  3860                           ; 1 bytes @ 0x44
  3861                           
  3862                           
  3863                           ; 1 bytes @ 0x44
  3864  0064                     	ds	1
  3865  0065                     ??_setDimmerLights_Main:	
  3866  0065                     ??_setSw_Main:	
  3867                           ; 0 bytes @ 0x45
  3868                           
  3869  0065                     ??_DelayOff_Main:	
  3870                           ; 0 bytes @ 0x45
  3871                           
  3872  0065                     setDimmerLights_Main@clear:	
  3873                           ; 0 bytes @ 0x45
  3874                           
  3875                           
  3876                           ; 1 bytes @ 0x45
  3877  0065                     	ds	1
  3878  0066                     setDimmerLights_Main@lights:	
  3879  0066                     setRFSW_AdjControl@sw:	
  3880                           ; 1 bytes @ 0x46
  3881                           
  3882                           
  3883                           ; 1 bytes @ 0x46
  3884  0066                     	ds	1
  3885  0067                     ??_setControl_Lights_Table:	
  3886  0067                     ??_DimmerLights_Main:	
  3887                           ; 0 bytes @ 0x47
  3888                           
  3889  0067                     setControl_Lights_Table@rf:	
  3890                           ; 0 bytes @ 0x47
  3891                           
  3892  0067                     _setSw_Main$6260:	
  3893                           ; 1 bytes @ 0x47
  3894                           
  3895                           
  3896                           ; 1 bytes @ 0x47
  3897  0067                     	ds	1
  3898  0068                     ??_getRxData:	
  3899  0068                     getRxData@rf:	
  3900                           ; 0 bytes @ 0x48
  3901                           
  3902  0068                     _setSw_Main$6261:	
  3903                           ; 1 bytes @ 0x48
  3904                           
  3905                           
  3906                           ; 1 bytes @ 0x48
  3907  0068                     	ds	1
  3908  0069                     ??_setRF_Main:	
  3909  0069                     setSw_Main@sw:	
  3910                           ; 0 bytes @ 0x49
  3911                           
  3912                           
  3913                           ; 1 bytes @ 0x49
  3914  0069                     	ds	1
  3915  006A                     ??_Switch_Main:	
  3916  006A                     setRF_Main@rf:	
  3917                           ; 0 bytes @ 0x4A
  3918                           
  3919                           
  3920                           ; 1 bytes @ 0x4A
  3921  006A                     	ds	1
  3922  006B                     _setRF_Main$5264:	
  3923                           
  3924                           ; 1 bytes @ 0x4B
  3925  006B                     	ds	1
  3926  006C                     ??_RF_Main:	
  3927  006C                     ?_main:	
  3928                           ; 0 bytes @ 0x4C
  3929                           
  3930  006C                     main@argc:	
  3931                           ; 2 bytes @ 0x4C
  3932                           
  3933                           
  3934                           ; 2 bytes @ 0x4C
  3935  006C                     	ds	2
  3936  006E                     main@argv:	
  3937                           
  3938                           ; 2 bytes @ 0x4E
  3939  006E                     	ds	2
  3940  0070                     ??_main:	
  3941                           
  3942                           	psect	maintext
  3943  12E5                     __pmaintext:	
  3944                           ; 0 bytes @ 0x50
  3945 ;;
  3946 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  3947 ;;
  3948 ;; *************** function _main *****************
  3949 ;; Defined at:
  3950 ;;		line 7 in file "../src/Main_B1.c"
  3951 ;; Parameters:    Size  Location     Type
  3952 ;;  argc            2   76[BANK0 ] int 
  3953 ;;  argv            2   78[BANK0 ] PTR PTR unsigned char 
  3954 ;; Auto vars:     Size  Location     Type
  3955 ;;		None
  3956 ;; Return value:  Size  Location     Type
  3957 ;;                  2   76[BANK0 ] int 
  3958 ;; Registers used:
  3959 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3960 ;; Tracked objects:
  3961 ;;		On entry : 17F/0
  3962 ;;		On exit  : 0/0
  3963 ;;		Unchanged: 0/0
  3964 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3965 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3966 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3967 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3968 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3969 ;;Total ram usage:        4 bytes
  3970 ;; Hardware stack levels required when called:   15
  3971 ;; This function calls:
  3972 ;;		_Buzzer_Initialization
  3973 ;;		_Buzzer_Main
  3974 ;;		_CC2500_PowerOnInitial
  3975 ;;		_DelayOff_Initialization
  3976 ;;		_DelayOff_Main
  3977 ;;		_DimmerLights_Initialization
  3978 ;;		_DimmerLights_Main
  3979 ;;		_Flash_Memory_Initialization
  3980 ;;		_Flash_Memory_Main
  3981 ;;		_LED_Initialization
  3982 ;;		_LED_Main
  3983 ;;		_Load_Initialization
  3984 ;;		_Load_Main
  3985 ;;		_Mcu_Initialization
  3986 ;;		_RF_Initialization
  3987 ;;		_RF_Main
  3988 ;;		_Switch_Initialization
  3989 ;;		_Switch_Main
  3990 ;;		_Temp_Initialization
  3991 ;;		_Temp_Main
  3992 ;;		_WDT_Main
  3993 ;;		_getLoad_AD
  3994 ;;		_getTemp_AD
  3995 ;;		_myMain_Initialization
  3996 ;;		_my_Main
  3997 ;;		_my_TestPointCleared
  3998 ;; This function is called by:
  3999 ;;		Startup code after reset
  4000 ;; This function uses a non-reentrant model
  4001 ;;
  4002                           
  4003                           
  4004                           ;psect for function _main
  4005  12E5                     _main:	
  4006                           
  4007                           ;Main_B1.c: 9: myMain_Initialization();
  4008                           
  4009                           ;incstack = 0
  4010                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4011  12E5  31A7  274D  3192   	fcall	_myMain_Initialization
  4012                           
  4013                           ;Main_B1.c: 10: Mcu_Initialization();
  4014  12E8  3198  20EF  3192   	fcall	_Mcu_Initialization
  4015                           
  4016                           ;Main_B1.c: 11: Flash_Memory_Initialization();
  4017  12EB  318F  2708  3192   	fcall	_Flash_Memory_Initialization
  4018                           
  4019                           ;Main_B1.c: 12: LED_Initialization();
  4020  12EE  31A5  25AE  3192   	fcall	_LED_Initialization
  4021                           
  4022                           ;Main_B1.c: 13: Buzzer_Initialization();
  4023  12F1  31A5  258A  3192   	fcall	_Buzzer_Initialization
  4024                           
  4025                           ;Main_B1.c: 15: ;;
  4026                           ;Main_B1.c: 16: Temp_Initialization();
  4027  12F4  31A4  24DB  3192   	fcall	_Temp_Initialization
  4028                           
  4029                           ;Main_B1.c: 17: Load_Initialization();
  4030  12F7  31A5  25D2  3192   	fcall	_Load_Initialization
  4031                           
  4032                           ;Main_B1.c: 18: ;;
  4033                           ;Main_B1.c: 19: DelayOff_Initialization();
  4034  12FA  31A5  251F  3192   	fcall	_DelayOff_Initialization
  4035                           
  4036                           ;Main_B1.c: 21: DimmerLights_Initialization();
  4037  12FD  31A7  27B9  3192   	fcall	_DimmerLights_Initialization
  4038                           
  4039                           ;Main_B1.c: 22: ;;
  4040                           ;Main_B1.c: 23: ;;
  4041                           ;Main_B1.c: 24: ;;
  4042                           ;Main_B1.c: 25: Switch_Initialization();
  4043  1300  31A5  25F9  3192   	fcall	_Switch_Initialization
  4044                           
  4045                           ;Main_B1.c: 26: RF_Initialization();
  4046  1303  31A4  24F1  3192   	fcall	_RF_Initialization
  4047                           
  4048                           ;Main_B1.c: 27: CC2500_PowerOnInitial();
  4049  1306  31A7  2761  3192   	fcall	_CC2500_PowerOnInitial
  4050  1309                     l8404:	
  4051                           ;Main_B1.c: 28: ;;
  4052                           ;Main_B1.c: 31: while (1) {
  4053                           
  4054                           
  4055                           ;Main_B1.c: 33: if (myMain->PowerON) {
  4056  1309  0021               	movlb	1	; select bank1
  4057  130A  086D               	movf	_myMain^(0+128),w
  4058  130B  0086               	movwf	6
  4059  130C  3001               	movlw	1	; select bank2/3
  4060  130D  0087               	movwf	7
  4061  130E  1C01               	btfss	1,0
  4062  130F  2B18               	goto	l8408
  4063                           
  4064                           ;Main_B1.c: 35: ;;
  4065                           ;Main_B1.c: 39: getLoad_AD(0x05);
  4066  1310  3005               	movlw	5
  4067  1311  3189  21CD  3192   	fcall	_getLoad_AD
  4068                           
  4069                           ;Main_B1.c: 43: getTemp_AD(0x09);
  4070  1314  3009               	movlw	9
  4071  1315  3195  25FA  3192   	fcall	_getTemp_AD
  4072  1318                     l8408:	
  4073                           ;Main_B1.c: 47: ;;
  4074                           
  4075                           
  4076                           ;Main_B1.c: 58: }
  4077                           ;Main_B1.c: 61: if (myMain->T0_Timerout) {
  4078  1318  0021               	movlb	1	; select bank1
  4079  1319  086D               	movf	_myMain^(0+128),w
  4080  131A  0086               	movwf	6
  4081  131B  3001               	movlw	1	; select bank2/3
  4082  131C  0087               	movwf	7
  4083  131D  1C81               	btfss	1,1
  4084  131E  2B09               	goto	l8404
  4085                           
  4086                           ;Main_B1.c: 62: myMain->T0_Timerout = 0;
  4087  131F  086D               	movf	_myMain^(0+128),w
  4088  1320  0086               	movwf	6
  4089  1321  3001               	movlw	1	; select bank2/3
  4090  1322  0087               	movwf	7
  4091  1323  1081               	bcf	1,1
  4092                           
  4093                           ;Main_B1.c: 63: my_Main();
  4094  1324  3196  2673  3192   	fcall	_my_Main
  4095                           
  4096                           ;Main_B1.c: 64: my_TestPointCleared();
  4097  1327  3190  2000  3192   	fcall	_my_TestPointCleared
  4098                           
  4099                           ;Main_B1.c: 65: WDT_Main();
  4100  132A  3199  2141  3192   	fcall	_WDT_Main
  4101                           
  4102                           ;Main_B1.c: 66: ;;
  4103                           ;Main_B1.c: 67: ;;
  4104                           ;Main_B1.c: 68: if (myMain->PowerON) {
  4105  132D  0021               	movlb	1	; select bank1
  4106  132E  086D               	movf	_myMain^(0+128),w
  4107  132F  0086               	movwf	6
  4108  1330  3001               	movlw	1	; select bank2/3
  4109  1331  0087               	movwf	7
  4110  1332  1C01               	btfss	1,0
  4111  1333  2B09               	goto	l8404
  4112                           
  4113                           ;Main_B1.c: 69: Flash_Memory_Main();
  4114  1334  319E  269C  3192   	fcall	_Flash_Memory_Main
  4115                           
  4116                           ;Main_B1.c: 71: LED_Main();
  4117  1337  31A5  25BA  3192   	fcall	_LED_Main
  4118                           
  4119                           ;Main_B1.c: 72: Buzzer_Main();
  4120  133A  318C  246B  3192   	fcall	_Buzzer_Main
  4121                           
  4122                           ;Main_B1.c: 74: ;;
  4123                           ;Main_B1.c: 75: Temp_Main();
  4124  133D  31A4  24DE  3192   	fcall	_Temp_Main
  4125                           
  4126                           ;Main_B1.c: 76: Load_Main();
  4127  1340  3180  2054  3192   	fcall	_Load_Main
  4128                           
  4129                           ;Main_B1.c: 77: ;;
  4130                           ;Main_B1.c: 79: ;;
  4131                           ;Main_B1.c: 80: DimmerLights_Main();
  4132  1343  31A5  2568  3192   	fcall	_DimmerLights_Main
  4133                           
  4134                           ;Main_B1.c: 81: Switch_Main();
  4135  1346  31A5  253F  3192   	fcall	_Switch_Main
  4136                           
  4137                           ;Main_B1.c: 82: ;;
  4138                           ;Main_B1.c: 83: ;;
  4139                           ;Main_B1.c: 85: RF_Main();
  4140  1349  31A4  24F5  3192   	fcall	_RF_Main
  4141                           
  4142                           ;Main_B1.c: 86: DelayOff_Main();
  4143  134C  31A5  2527  3192   	fcall	_DelayOff_Main
  4144                           
  4145                           ;Main_B1.c: 87: ;;
  4146  134F  2B09               	goto	l8404
  4147  1350                     __end_of_main:	
  4148                           ;Main_B1.c: 88: }
  4149                           ;Main_B1.c: 89: }
  4150                           ;Main_B1.c: 107: }
  4151                           ;Main_B1.c: 108: return (0);
  4152                           ;	Return value of _main is never used
  4153                           
  4154                           
  4155                           	psect	text1
  4156  1000                     __ptext1:	
  4157 ;; *************** function _my_TestPointCleared *****************
  4158 ;; Defined at:
  4159 ;;		line 206 in file "../src/Main_B1.c"
  4160 ;; Parameters:    Size  Location     Type
  4161 ;;		None
  4162 ;; Auto vars:     Size  Location     Type
  4163 ;;		None
  4164 ;; Return value:  Size  Location     Type
  4165 ;;		None               void
  4166 ;; Registers used:
  4167 ;;		wreg, fsr1l, fsr1h
  4168 ;; Tracked objects:
  4169 ;;		On entry : 0/0
  4170 ;;		On exit  : 0/0
  4171 ;;		Unchanged: 0/0
  4172 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4173 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4174 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4175 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4176 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4177 ;;Total ram usage:        0 bytes
  4178 ;; Hardware stack levels used:    1
  4179 ;; Hardware stack levels required when called:    5
  4180 ;; This function calls:
  4181 ;;		Nothing
  4182 ;; This function is called by:
  4183 ;;		_main
  4184 ;; This function uses a non-reentrant model
  4185 ;;
  4186                           
  4187                           
  4188                           ;psect for function _my_TestPointCleared
  4189  1000                     _my_TestPointCleared:	
  4190                           
  4191                           ;Main_B1.c: 207: myMain->pcount1 = 0;
  4192                           
  4193                           ;incstack = 0
  4194                           ; Regs used in _my_TestPointCleared: [wregfsr1]
  4195  1000  0021               	movlb	1	; select bank1
  4196  1001  086D               	movf	_myMain^(0+128),w
  4197  1002  3E10               	addlw	16
  4198  1003  0086               	movwf	6
  4199  1004  3001               	movlw	1	; select bank2/3
  4200  1005  0087               	movwf	7
  4201  1006  3000               	movlw	0
  4202  1007  3FC0               	movwi [0]fsr1
  4203  1008  3FC1               	movwi [1]fsr1
  4204                           
  4205                           ;Main_B1.c: 208: myMain->pcount2 = 0;
  4206  1009  086D               	movf	_myMain^(0+128),w
  4207  100A  3E12               	addlw	18
  4208  100B  0086               	movwf	6
  4209  100C  3001               	movlw	1	; select bank2/3
  4210  100D  0087               	movwf	7
  4211  100E  3000               	movlw	0
  4212  100F  3FC0               	movwi [0]fsr1
  4213  1010  3FC1               	movwi [1]fsr1
  4214  1011  0008               	return
  4215  1012                     __end_of_my_TestPointCleared:	
  4216                           
  4217                           	psect	text2
  4218  1673                     __ptext2:	
  4219 ;; *************** function _my_Main *****************
  4220 ;; Defined at:
  4221 ;;		line 125 in file "../src/Main_B1.c"
  4222 ;; Parameters:    Size  Location     Type
  4223 ;;		None
  4224 ;; Auto vars:     Size  Location     Type
  4225 ;;		None
  4226 ;; Return value:  Size  Location     Type
  4227 ;;		None               void
  4228 ;; Registers used:
  4229 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4230 ;; Tracked objects:
  4231 ;;		On entry : 0/0
  4232 ;;		On exit  : 0/0
  4233 ;;		Unchanged: 0/0
  4234 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4235 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4236 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4237 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4238 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4239 ;;Total ram usage:        0 bytes
  4240 ;; Hardware stack levels used:    1
  4241 ;; Hardware stack levels required when called:    7
  4242 ;; This function calls:
  4243 ;;		_setBuz
  4244 ;;		_setLoad_Enable
  4245 ;;		_setRF_Enable
  4246 ;;		_setSw_Enable
  4247 ;;		_setTemp_Enable
  4248 ;; This function is called by:
  4249 ;;		_main
  4250 ;; This function uses a non-reentrant model
  4251 ;;
  4252                           
  4253                           
  4254                           ;psect for function _my_Main
  4255  1673                     _my_Main:	
  4256                           
  4257                           ;Main_B1.c: 127: if (myMain->PowerON == 0) {
  4258                           
  4259                           ;incstack = 0
  4260                           ; Regs used in _my_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4261  1673  0021               	movlb	1	; select bank1
  4262  1674  086D               	movf	_myMain^(0+128),w
  4263  1675  0086               	movwf	6
  4264  1676  3001               	movlw	1	; select bank2/3
  4265  1677  0087               	movwf	7
  4266  1678  1801               	btfsc	1,0
  4267  1679  2EBD               	goto	l8204
  4268                           
  4269                           ;Main_B1.c: 128: myMain->PowerCount++;
  4270  167A  0A6D               	incf	_myMain^(0+128),w
  4271  167B  0086               	movwf	6
  4272  167C  3001               	movlw	1	; select bank2/3
  4273  167D  0087               	movwf	7
  4274  167E  3001               	movlw	1
  4275  167F  0781               	addwf	1,f
  4276  1680  3141               	addfsr 1,1
  4277  1681  1803               	skipnc
  4278  1682  0A81               	incf	1,f
  4279                           
  4280                           ;Main_B1.c: 129: if (myMain->PowerCount == 150)
  4281  1683  0A6D               	incf	_myMain^(0+128),w
  4282  1684  0086               	movwf	6
  4283  1685  3001               	movlw	1	; select bank2/3
  4284  1686  0087               	movwf	7
  4285  1687  3F40               	moviw [0]fsr1
  4286  1688  3A96               	xorlw	150
  4287  1689  1D03               	skipz
  4288  168A  2E8D               	goto	u7635
  4289  168B  3F41               	moviw [1]fsr1
  4290  168C  3A00               	xorlw	0
  4291  168D                     u7635:	
  4292  168D  1D03               	skipz
  4293  168E  0008               	return
  4294                           
  4295                           ;Main_B1.c: 130: {
  4296                           ;Main_B1.c: 131: myMain->PowerCount = 0;
  4297  168F  0A6D               	incf	_myMain^(0+128),w
  4298  1690  0086               	movwf	6
  4299  1691  3001               	movlw	1	; select bank2/3
  4300  1692  0087               	movwf	7
  4301  1693  3000               	movlw	0
  4302  1694  3FC0               	movwi [0]fsr1
  4303  1695  3FC1               	movwi [1]fsr1
  4304                           
  4305                           ;Main_B1.c: 132: myMain->PowerON = 1;
  4306  1696  086D               	movf	_myMain^(0+128),w
  4307  1697  0086               	movwf	6
  4308  1698  3001               	movlw	1	; select bank2/3
  4309  1699  0087               	movwf	7
  4310  169A  1401               	bsf	1,0
  4311                           
  4312                           ;Main_B1.c: 135: setTemp_Enable(1);
  4313  169B  3001               	movlw	1
  4314  169C  31A6  2606  3196   	fcall	_setTemp_Enable
  4315                           
  4316                           ;Main_B1.c: 139: setLoad_Enable(1);
  4317  169F  3001               	movlw	1
  4318  16A0  31A6  26BD  3196   	fcall	_setLoad_Enable
  4319                           
  4320                           ;Main_B1.c: 145: setBuz(3, 50);
  4321  16A3  3032               	movlw	50
  4322  16A4  0020               	movlb	0	; select bank0
  4323  16A5  00A9               	movwf	setBuz@time
  4324  16A6  3000               	movlw	0
  4325  16A7  00AA               	movwf	setBuz@time+1
  4326  16A8  3003               	movlw	3
  4327  16A9  3189  2137  3196   	fcall	_setBuz
  4328                           
  4329                           ;Main_B1.c: 146: myMain->SelfTest = 1;
  4330  16AC  0021               	movlb	1	; select bank1
  4331  16AD  086D               	movf	_myMain^(0+128),w
  4332  16AE  0086               	movwf	6
  4333  16AF  3001               	movlw	1	; select bank2/3
  4334  16B0  0087               	movwf	7
  4335  16B1  1701               	bsf	1,6
  4336                           
  4337                           ;Main_B1.c: 148: setSw_Enable(1);
  4338  16B2  3001               	movlw	1
  4339  16B3  3199  2125  3196   	fcall	_setSw_Enable
  4340                           
  4341                           ;Main_B1.c: 151: setRF_Enable(1, 1);
  4342  16B6  0020               	movlb	0	; select bank0
  4343  16B7  01A2               	clrf	setRF_Enable@command
  4344  16B8  0AA2               	incf	setRF_Enable@command,f
  4345  16B9  3001               	movlw	1
  4346  16BA  319A  22E4         	fcall	_setRF_Enable
  4347                           
  4348                           ;Main_B1.c: 155: }
  4349                           ;Main_B1.c: 156: } else {
  4350  16BC  0008               	return
  4351  16BD                     l8204:	
  4352                           
  4353                           ;Main_B1.c: 164: myMain->Count1++;
  4354  16BD  0021               	movlb	1	; select bank1
  4355  16BE  086D               	movf	_myMain^(0+128),w
  4356  16BF  3E05               	addlw	5
  4357  16C0  0086               	movwf	6
  4358  16C1  3001               	movlw	1	; select bank2/3
  4359  16C2  0087               	movwf	7
  4360  16C3  3001               	movlw	1
  4361  16C4  0781               	addwf	1,f
  4362  16C5  3141               	addfsr 1,1
  4363  16C6  1803               	skipnc
  4364  16C7  0A81               	incf	1,f
  4365                           
  4366                           ;Main_B1.c: 165: if (myMain->Count1 == 100)
  4367  16C8  086D               	movf	_myMain^(0+128),w
  4368  16C9  3E05               	addlw	5
  4369  16CA  0086               	movwf	6
  4370  16CB  3001               	movlw	1	; select bank2/3
  4371  16CC  0087               	movwf	7
  4372  16CD  3F40               	moviw [0]fsr1
  4373  16CE  3A64               	xorlw	100
  4374  16CF  1D03               	skipz
  4375  16D0  2ED3               	goto	u7645
  4376  16D1  3F41               	moviw [1]fsr1
  4377  16D2  3A00               	xorlw	0
  4378  16D3                     u7645:	
  4379  16D3  1D03               	skipz
  4380  16D4  0008               	return
  4381                           
  4382                           ;Main_B1.c: 166: {
  4383                           ;Main_B1.c: 167: myMain->Count1 = 0;
  4384  16D5  086D               	movf	_myMain^(0+128),w
  4385  16D6  3E05               	addlw	5
  4386  16D7  0086               	movwf	6
  4387  16D8  3001               	movlw	1	; select bank2/3
  4388  16D9  0087               	movwf	7
  4389  16DA  3000               	movlw	0
  4390  16DB  3FC0               	movwi [0]fsr1
  4391  16DC  3FC1               	movwi [1]fsr1
  4392                           
  4393                           ;Main_B1.c: 180: if (myMain->Flag) {
  4394  16DD  086D               	movf	_myMain^(0+128),w
  4395  16DE  0086               	movwf	6
  4396  16DF  3001               	movlw	1	; select bank2/3
  4397  16E0  0087               	movwf	7
  4398  16E1  1D81               	btfss	1,3
  4399  16E2  2EE9               	goto	l8212
  4400                           
  4401                           ;Main_B1.c: 181: myMain->Flag = 0;
  4402  16E3  086D               	movf	_myMain^(0+128),w
  4403  16E4  0086               	movwf	6
  4404  16E5  3001               	movlw	1	; select bank2/3
  4405  16E6  0087               	movwf	7
  4406  16E7  1181               	bcf	1,3
  4407                           
  4408                           ;Main_B1.c: 190: } else {
  4409  16E8  0008               	return
  4410  16E9                     l8212:	
  4411                           
  4412                           ;Main_B1.c: 191: myMain->Flag = 1;
  4413  16E9  086D               	movf	_myMain^(0+128),w
  4414  16EA  0086               	movwf	6
  4415  16EB  3001               	movlw	1	; select bank2/3
  4416  16EC  0087               	movwf	7
  4417  16ED  1581               	bsf	1,3
  4418  16EE  0008               	return
  4419  16EF                     __end_of_my_Main:	
  4420                           
  4421                           	psect	text3
  4422  2606                     __ptext3:	
  4423 ;; *************** function _setTemp_Enable *****************
  4424 ;; Defined at:
  4425 ;;		line 22 in file "../src/OverTemperature_B1.c"
  4426 ;; Parameters:    Size  Location     Type
  4427 ;;  command         1    wreg     unsigned char 
  4428 ;; Auto vars:     Size  Location     Type
  4429 ;;  command         1    0[BANK0 ] unsigned char 
  4430 ;; Return value:  Size  Location     Type
  4431 ;;		None               void
  4432 ;; Registers used:
  4433 ;;		wreg, fsr1l, fsr1h
  4434 ;; Tracked objects:
  4435 ;;		On entry : 0/0
  4436 ;;		On exit  : 0/0
  4437 ;;		Unchanged: 0/0
  4438 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4439 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4440 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4441 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4442 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4443 ;;Total ram usage:        1 bytes
  4444 ;; Hardware stack levels used:    1
  4445 ;; Hardware stack levels required when called:    5
  4446 ;; This function calls:
  4447 ;;		Nothing
  4448 ;; This function is called by:
  4449 ;;		_my_Main
  4450 ;; This function uses a non-reentrant model
  4451 ;;
  4452                           
  4453                           
  4454                           ;psect for function _setTemp_Enable
  4455  2606                     _setTemp_Enable:	
  4456                           
  4457                           ;incstack = 0
  4458                           ; Regs used in _setTemp_Enable: [wregfsr1]
  4459                           ;setTemp_Enable@command stored from wreg
  4460  2606  0020               	movlb	0	; select bank0
  4461  2607  00A0               	movwf	setTemp_Enable@command
  4462                           
  4463                           ;OverTemperature_B1.c: 24: Temp->Enable=command;
  4464  2608  0021               	movlb	1	; select bank1
  4465  2609  0844               	movf	_Temp^(0+128),w
  4466  260A  0086               	movwf	6
  4467  260B  3001               	movlw	1	; select bank2/3
  4468  260C  0087               	movwf	7
  4469  260D  0020               	movlb	0	; select bank0
  4470  260E  0820               	movf	setTemp_Enable@command,w
  4471  260F  1001               	bcf	1,0
  4472  2610  1D03               	skipz
  4473  2611  1401               	bsf	1,0
  4474  2612  0008               	return
  4475  2613                     __end_of_setTemp_Enable:	
  4476                           
  4477                           	psect	text4
  4478  26BD                     __ptext4:	
  4479 ;; *************** function _setLoad_Enable *****************
  4480 ;; Defined at:
  4481 ;;		line 260 in file "../src/OverLoad_B1.c"
  4482 ;; Parameters:    Size  Location     Type
  4483 ;;  command         1    wreg     unsigned char 
  4484 ;; Auto vars:     Size  Location     Type
  4485 ;;  command         1    0[BANK0 ] unsigned char 
  4486 ;; Return value:  Size  Location     Type
  4487 ;;		None               void
  4488 ;; Registers used:
  4489 ;;		wreg, fsr1l, fsr1h
  4490 ;; Tracked objects:
  4491 ;;		On entry : 0/0
  4492 ;;		On exit  : 0/0
  4493 ;;		Unchanged: 0/0
  4494 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4495 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4496 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4497 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4498 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4499 ;;Total ram usage:        1 bytes
  4500 ;; Hardware stack levels used:    1
  4501 ;; Hardware stack levels required when called:    5
  4502 ;; This function calls:
  4503 ;;		Nothing
  4504 ;; This function is called by:
  4505 ;;		_my_Main
  4506 ;; This function uses a non-reentrant model
  4507 ;;
  4508                           
  4509                           
  4510                           ;psect for function _setLoad_Enable
  4511  26BD                     _setLoad_Enable:	
  4512                           
  4513                           ;incstack = 0
  4514                           ; Regs used in _setLoad_Enable: [wregfsr1]
  4515                           ;setLoad_Enable@command stored from wreg
  4516  26BD  0020               	movlb	0	; select bank0
  4517  26BE  00A0               	movwf	setLoad_Enable@command
  4518                           
  4519                           ;OverLoad_B1.c: 261: Load->Enable = command;
  4520  26BF  087B               	movf	_Load,w
  4521  26C0  0086               	movwf	6
  4522  26C1  3002               	movlw	2	; select bank4/5
  4523  26C2  0087               	movwf	7
  4524  26C3  0820               	movf	setLoad_Enable@command,w
  4525  26C4  1001               	bcf	1,0
  4526  26C5  1D03               	skipz
  4527  26C6  1401               	bsf	1,0
  4528                           
  4529                           ;OverLoad_B1.c: 262: Load->GO = 0;
  4530  26C7  087B               	movf	_Load,w
  4531  26C8  0086               	movwf	6
  4532  26C9  3002               	movlw	2	; select bank4/5
  4533  26CA  0087               	movwf	7
  4534  26CB  1081               	bcf	1,1
  4535  26CC  0008               	return
  4536  26CD                     __end_of_setLoad_Enable:	
  4537                           
  4538                           	psect	text5
  4539  274D                     __ptext5:	
  4540 ;; *************** function _myMain_Initialization *****************
  4541 ;; Defined at:
  4542 ;;		line 113 in file "../src/Main_B1.c"
  4543 ;; Parameters:    Size  Location     Type
  4544 ;;		None
  4545 ;; Auto vars:     Size  Location     Type
  4546 ;;		None
  4547 ;; Return value:  Size  Location     Type
  4548 ;;		None               void
  4549 ;; Registers used:
  4550 ;;		wreg, fsr1l, fsr1h
  4551 ;; Tracked objects:
  4552 ;;		On entry : 0/0
  4553 ;;		On exit  : 0/0
  4554 ;;		Unchanged: 0/0
  4555 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4556 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4557 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4558 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4559 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4560 ;;Total ram usage:        1 bytes
  4561 ;; Hardware stack levels used:    1
  4562 ;; Hardware stack levels required when called:    5
  4563 ;; This function calls:
  4564 ;;		Nothing
  4565 ;; This function is called by:
  4566 ;;		_main
  4567 ;; This function uses a non-reentrant model
  4568 ;;
  4569                           
  4570                           
  4571                           ;psect for function _myMain_Initialization
  4572  274D                     _myMain_Initialization:	
  4573                           
  4574                           ;Main_B1.c: 115: product = &_product;
  4575                           
  4576                           ;incstack = 0
  4577                           ; Regs used in _myMain_Initialization: [wregfsr1]
  4578  274D  30C2               	movlw	__product& (0+255)
  4579  274E  0020               	movlb	0	; select bank0
  4580  274F  00A0               	movwf	??_myMain_Initialization
  4581  2750  0820               	movf	??_myMain_Initialization,w
  4582  2751  00FD               	movwf	_product
  4583                           
  4584                           ;Main_B1.c: 116: product->Data[20] = 210;
  4585  2752  30D2               	movlw	210
  4586  2753  00A0               	movwf	??_myMain_Initialization
  4587  2754  087D               	movf	_product,w
  4588  2755  3E14               	addlw	20
  4589  2756  0086               	movwf	6
  4590  2757  3001               	movlw	1	; select bank2/3
  4591  2758  0087               	movwf	7
  4592  2759  0820               	movf	??_myMain_Initialization,w
  4593  275A  0081               	movwf	1
  4594                           
  4595                           ;Main_B1.c: 119: myMain = &_myMain;
  4596  275B  30A0               	movlw	__myMain& (0+255)
  4597  275C  00A0               	movwf	??_myMain_Initialization
  4598  275D  0820               	movf	??_myMain_Initialization,w
  4599  275E  0021               	movlb	1	; select bank1
  4600  275F  00ED               	movwf	_myMain^(0+128)
  4601  2760  0008               	return
  4602  2761                     __end_of_myMain_Initialization:	
  4603                           
  4604                           	psect	text6
  4605  15FA                     __ptext6:	
  4606 ;; *************** function _getTemp_AD *****************
  4607 ;; Defined at:
  4608 ;;		line 35 in file "../src/OverTemperature_B1.c"
  4609 ;; Parameters:    Size  Location     Type
  4610 ;;  channel         1    wreg     unsigned char 
  4611 ;; Auto vars:     Size  Location     Type
  4612 ;;  channel         1    8[BANK0 ] unsigned char 
  4613 ;; Return value:  Size  Location     Type
  4614 ;;		None               void
  4615 ;; Registers used:
  4616 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4617 ;; Tracked objects:
  4618 ;;		On entry : 0/0
  4619 ;;		On exit  : 0/0
  4620 ;;		Unchanged: 0/0
  4621 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4622 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4623 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4624 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4625 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4626 ;;Total ram usage:        5 bytes
  4627 ;; Hardware stack levels used:    1
  4628 ;; Hardware stack levels required when called:    6
  4629 ;; This function calls:
  4630 ;;		_getAD
  4631 ;; This function is called by:
  4632 ;;		_main
  4633 ;; This function uses a non-reentrant model
  4634 ;;
  4635                           
  4636                           
  4637                           ;psect for function _getTemp_AD
  4638  15FA                     _getTemp_AD:	
  4639                           
  4640                           ;incstack = 0
  4641                           ; Regs used in _getTemp_AD: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4642                           ;getTemp_AD@channel stored from wreg
  4643  15FA  0020               	movlb	0	; select bank0
  4644  15FB  00A8               	movwf	getTemp_AD@channel
  4645                           
  4646                           ;OverTemperature_B1.c: 37: if(Temp->ADtoGO)
  4647  15FC  0021               	movlb	1	; select bank1
  4648  15FD  0844               	movf	_Temp^(0+128),w
  4649  15FE  0086               	movwf	6
  4650  15FF  3001               	movlw	1	; select bank2/3
  4651  1600  0087               	movwf	7
  4652  1601  1D01               	btfss	1,2
  4653  1602  0008               	return
  4654                           
  4655                           ;OverTemperature_B1.c: 38: {
  4656                           ;OverTemperature_B1.c: 39: Temp->ADRES=getAD(channel,0xf0);
  4657  1603  30F0               	movlw	240
  4658  1604  0020               	movlb	0	; select bank0
  4659  1605  00A4               	movwf	??_getTemp_AD
  4660  1606  0824               	movf	??_getTemp_AD,w
  4661  1607  00A0               	movwf	getAD@adcon1
  4662  1608  0828               	movf	getTemp_AD@channel,w
  4663  1609  31A7  278C  3195   	fcall	_getAD
  4664  160C  0021               	movlb	1	; select bank1
  4665  160D  0844               	movf	_Temp^(0+128),w
  4666  160E  3E0C               	addlw	12
  4667  160F  0086               	movwf	6
  4668  1610  3001               	movlw	1	; select bank2/3
  4669  1611  0087               	movwf	7
  4670  1612  0020               	movlb	0	; select bank0
  4671  1613  0820               	movf	?_getAD,w
  4672  1614  3FC0               	movwi [0]fsr1
  4673  1615  0821               	movf	?_getAD+1,w
  4674  1616  3FC1               	movwi [1]fsr1
  4675                           
  4676                           ;OverTemperature_B1.c: 40: if(Temp->ADH[0] < Temp->ADRES)
  4677  1617  0021               	movlb	1	; select bank1
  4678  1618  0844               	movf	_Temp^(0+128),w
  4679  1619  3E0C               	addlw	12
  4680  161A  0086               	movwf	6
  4681  161B  3001               	movlw	1	; select bank2/3
  4682  161C  0087               	movwf	7
  4683  161D  3F40               	moviw [0]fsr1
  4684  161E  0020               	movlb	0	; select bank0
  4685  161F  00A4               	movwf	??_getTemp_AD
  4686  1620  3F41               	moviw [1]fsr1
  4687  1621  00A5               	movwf	??_getTemp_AD+1
  4688  1622  0021               	movlb	1	; select bank1
  4689  1623  0844               	movf	_Temp^(0+128),w
  4690  1624  3E08               	addlw	8
  4691  1625  0086               	movwf	6
  4692  1626  3001               	movlw	1	; select bank2/3
  4693  1627  0087               	movwf	7
  4694  1628  3F40               	moviw [0]fsr1
  4695  1629  0020               	movlb	0	; select bank0
  4696  162A  00A6               	movwf	??_getTemp_AD+2
  4697  162B  3F41               	moviw [1]fsr1
  4698  162C  00A7               	movwf	??_getTemp_AD+3
  4699  162D  0825               	movf	??_getTemp_AD+1,w
  4700  162E  0227               	subwf	??_getTemp_AD+3,w
  4701  162F  1D03               	skipz
  4702  1630  2E33               	goto	u7605
  4703  1631  0824               	movf	??_getTemp_AD,w
  4704  1632  0226               	subwf	??_getTemp_AD+2,w
  4705  1633                     u7605:	
  4706  1633  1803               	skipnc
  4707  1634  2E45               	goto	l8184
  4708                           
  4709                           ;OverTemperature_B1.c: 41: {
  4710                           ;OverTemperature_B1.c: 42: Temp->ADH[0]=Temp->ADRES;
  4711  1635  0021               	movlb	1	; select bank1
  4712  1636  0844               	movf	_Temp^(0+128),w
  4713  1637  3E0C               	addlw	12
  4714  1638  0086               	movwf	6
  4715  1639  3001               	movlw	1	; select bank2/3
  4716  163A  0087               	movwf	7
  4717  163B  0844               	movf	_Temp^(0+128),w
  4718  163C  3E08               	addlw	8
  4719  163D  0084               	movwf	4
  4720  163E  3001               	movlw	1	; select bank2/3
  4721  163F  0085               	movwf	5
  4722  1640  3F40               	moviw [0]fsr1
  4723  1641  3F80               	movwi [0]fsr0
  4724  1642  3F41               	moviw [1]fsr1
  4725  1643  3F81               	movwi [1]fsr0
  4726                           
  4727                           ;OverTemperature_B1.c: 43: }
  4728  1644  0008               	return
  4729  1645                     l8184:	
  4730                           
  4731                           ;OverTemperature_B1.c: 44: else if(Temp->ADH[1] < Temp->ADRES)
  4732  1645  0021               	movlb	1	; select bank1
  4733  1646  0844               	movf	_Temp^(0+128),w
  4734  1647  3E0C               	addlw	12
  4735  1648  0086               	movwf	6
  4736  1649  3001               	movlw	1	; select bank2/3
  4737  164A  0087               	movwf	7
  4738  164B  3F40               	moviw [0]fsr1
  4739  164C  0020               	movlb	0	; select bank0
  4740  164D  00A4               	movwf	??_getTemp_AD
  4741  164E  3F41               	moviw [1]fsr1
  4742  164F  00A5               	movwf	??_getTemp_AD+1
  4743  1650  0021               	movlb	1	; select bank1
  4744  1651  0844               	movf	_Temp^(0+128),w
  4745  1652  3E0A               	addlw	10
  4746  1653  0086               	movwf	6
  4747  1654  3001               	movlw	1	; select bank2/3
  4748  1655  0087               	movwf	7
  4749  1656  3F40               	moviw [0]fsr1
  4750  1657  0020               	movlb	0	; select bank0
  4751  1658  00A6               	movwf	??_getTemp_AD+2
  4752  1659  3F41               	moviw [1]fsr1
  4753  165A  00A7               	movwf	??_getTemp_AD+3
  4754  165B  0825               	movf	??_getTemp_AD+1,w
  4755  165C  0227               	subwf	??_getTemp_AD+3,w
  4756  165D  1D03               	skipz
  4757  165E  2E61               	goto	u7615
  4758  165F  0824               	movf	??_getTemp_AD,w
  4759  1660  0226               	subwf	??_getTemp_AD+2,w
  4760  1661                     u7615:	
  4761  1661  1803               	skipnc
  4762  1662  0008               	return
  4763                           
  4764                           ;OverTemperature_B1.c: 45: {
  4765                           ;OverTemperature_B1.c: 46: Temp->ADH[1]=Temp->ADRES;
  4766  1663  0021               	movlb	1	; select bank1
  4767  1664  0844               	movf	_Temp^(0+128),w
  4768  1665  3E0C               	addlw	12
  4769  1666  0086               	movwf	6
  4770  1667  3001               	movlw	1	; select bank2/3
  4771  1668  0087               	movwf	7
  4772  1669  0844               	movf	_Temp^(0+128),w
  4773  166A  3E0A               	addlw	10
  4774  166B  0084               	movwf	4
  4775  166C  3001               	movlw	1	; select bank2/3
  4776  166D  0085               	movwf	5
  4777  166E  3F40               	moviw [0]fsr1
  4778  166F  3F80               	movwi [0]fsr0
  4779  1670  3F41               	moviw [1]fsr1
  4780  1671  3F81               	movwi [1]fsr0
  4781  1672  0008               	return
  4782  1673                     __end_of_getTemp_AD:	
  4783                           
  4784                           	psect	text7
  4785  09CD                     __ptext7:	
  4786 ;; *************** function _getLoad_AD *****************
  4787 ;; Defined at:
  4788 ;;		line 16 in file "../src/OverLoad_B1.c"
  4789 ;; Parameters:    Size  Location     Type
  4790 ;;  channel         1    wreg     unsigned char 
  4791 ;; Auto vars:     Size  Location     Type
  4792 ;;  channel         1    9[BANK0 ] unsigned char 
  4793 ;;  i               1   11[BANK0 ] unsigned char 
  4794 ;;  j               1   10[BANK0 ] unsigned char 
  4795 ;; Return value:  Size  Location     Type
  4796 ;;		None               void
  4797 ;; Registers used:
  4798 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4799 ;; Tracked objects:
  4800 ;;		On entry : 0/0
  4801 ;;		On exit  : 0/0
  4802 ;;		Unchanged: 0/0
  4803 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4804 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4805 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4806 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4807 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4808 ;;Total ram usage:        8 bytes
  4809 ;; Hardware stack levels used:    1
  4810 ;; Hardware stack levels required when called:    6
  4811 ;; This function calls:
  4812 ;;		_getAD
  4813 ;; This function is called by:
  4814 ;;		_main
  4815 ;; This function uses a non-reentrant model
  4816 ;;
  4817                           
  4818                           
  4819                           ;psect for function _getLoad_AD
  4820  09CD                     _getLoad_AD:	
  4821                           
  4822                           ;incstack = 0
  4823                           ; Regs used in _getLoad_AD: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4824                           ;getLoad_AD@channel stored from wreg
  4825  09CD  0020               	movlb	0	; select bank0
  4826  09CE  00A9               	movwf	getLoad_AD@channel
  4827                           
  4828                           ;OverLoad_B1.c: 17: char i = 0, j = 0;
  4829  09CF  01AB               	clrf	getLoad_AD@i
  4830  09D0  01AA               	clrf	getLoad_AD@j
  4831                           
  4832                           ;OverLoad_B1.c: 19: if (Load->ADtoGO) {
  4833  09D1  087B               	movf	_Load,w
  4834  09D2  0086               	movwf	6
  4835  09D3  3002               	movlw	2	; select bank4/5
  4836  09D4  0087               	movwf	7
  4837  09D5  1E01               	btfss	1,4
  4838  09D6  0008               	return
  4839                           
  4840                           ;OverLoad_B1.c: 20: Load->ADRES = getAD(channel, 0xc0);
  4841  09D7  30C0               	movlw	192
  4842  09D8  00A4               	movwf	??_getLoad_AD
  4843  09D9  0824               	movf	??_getLoad_AD,w
  4844  09DA  00A0               	movwf	getAD@adcon1
  4845  09DB  0829               	movf	getLoad_AD@channel,w
  4846  09DC  31A7  278C  3189   	fcall	_getAD
  4847  09DF  087B               	movf	_Load,w
  4848  09E0  3E32               	addlw	50
  4849  09E1  0086               	movwf	6
  4850  09E2  3002               	movlw	2	; select bank4/5
  4851  09E3  0087               	movwf	7
  4852  09E4  0020               	movlb	0	; select bank0
  4853  09E5  0820               	movf	?_getAD,w
  4854  09E6  3FC0               	movwi [0]fsr1
  4855  09E7  0821               	movf	?_getAD+1,w
  4856  09E8  3FC1               	movwi [1]fsr1
  4857                           
  4858                           ;OverLoad_B1.c: 21: for (i = 0; i < 5; i++) {
  4859  09E9  01AB               	clrf	getLoad_AD@i
  4860  09EA  3005               	movlw	5
  4861  09EB  022B               	subwf	getLoad_AD@i,w
  4862  09EC  1803               	btfsc	3,0
  4863  09ED  2A27               	goto	l8160
  4864  09EE                     l8150:	
  4865                           
  4866                           ;OverLoad_B1.c: 22: if (Load->AH[i] < Load->ADRES) {
  4867  09EE  087B               	movf	_Load,w
  4868  09EF  3E32               	addlw	50
  4869  09F0  0086               	movwf	6
  4870  09F1  3002               	movlw	2	; select bank4/5
  4871  09F2  0087               	movwf	7
  4872  09F3  3F40               	moviw [0]fsr1
  4873  09F4  00A4               	movwf	??_getLoad_AD
  4874  09F5  3F41               	moviw [1]fsr1
  4875  09F6  00A5               	movwf	??_getLoad_AD+1
  4876  09F7  352B               	lslf	getLoad_AD@i,w
  4877  09F8  3E08               	addlw	8
  4878  09F9  077B               	addwf	_Load,w
  4879  09FA  00A6               	movwf	??_getLoad_AD+2
  4880  09FB  0826               	movf	??_getLoad_AD+2,w
  4881  09FC  0086               	movwf	6
  4882  09FD  3002               	movlw	2	; select bank4/5
  4883  09FE  0087               	movwf	7
  4884  09FF  3F40               	moviw [0]fsr1
  4885  0A00  00A7               	movwf	??_getLoad_AD+3
  4886  0A01  3F41               	moviw [1]fsr1
  4887  0A02  00A8               	movwf	??_getLoad_AD+4
  4888  0A03  0825               	movf	??_getLoad_AD+1,w
  4889  0A04  0228               	subwf	??_getLoad_AD+4,w
  4890  0A05  1D03               	skipz
  4891  0A06  2A09               	goto	u7535
  4892  0A07  0824               	movf	??_getLoad_AD,w
  4893  0A08  0227               	subwf	??_getLoad_AD+3,w
  4894  0A09                     u7535:	
  4895  0A09  1803               	skipnc
  4896  0A0A  2A1F               	goto	l8156
  4897                           
  4898                           ;OverLoad_B1.c: 23: Load->AH[i] = Load->ADRES;
  4899  0A0B  087B               	movf	_Load,w
  4900  0A0C  3E32               	addlw	50
  4901  0A0D  0086               	movwf	6
  4902  0A0E  3002               	movlw	2	; select bank4/5
  4903  0A0F  0087               	movwf	7
  4904  0A10  352B               	lslf	getLoad_AD@i,w
  4905  0A11  3E08               	addlw	8
  4906  0A12  077B               	addwf	_Load,w
  4907  0A13  00A4               	movwf	??_getLoad_AD
  4908  0A14  0824               	movf	??_getLoad_AD,w
  4909  0A15  0084               	movwf	4
  4910  0A16  3002               	movlw	2	; select bank4/5
  4911  0A17  0085               	movwf	5
  4912  0A18  3F40               	moviw [0]fsr1
  4913  0A19  3F80               	movwi [0]fsr0
  4914  0A1A  3F41               	moviw [1]fsr1
  4915  0A1B  3F81               	movwi [1]fsr0
  4916                           
  4917                           ;OverLoad_B1.c: 24: j = 1;
  4918  0A1C  01AA               	clrf	getLoad_AD@j
  4919  0A1D  0AAA               	incf	getLoad_AD@j,f
  4920                           
  4921                           ;OverLoad_B1.c: 25: break;
  4922  0A1E  2A27               	goto	l8160
  4923  0A1F                     l8156:	
  4924  0A1F  3001               	movlw	1
  4925  0A20  00A4               	movwf	??_getLoad_AD
  4926  0A21  0824               	movf	??_getLoad_AD,w
  4927  0A22  07AB               	addwf	getLoad_AD@i,f
  4928  0A23  3005               	movlw	5
  4929  0A24  022B               	subwf	getLoad_AD@i,w
  4930  0A25  1C03               	skipc
  4931  0A26  29EE               	goto	l8150
  4932  0A27                     l8160:	
  4933                           
  4934                           ;OverLoad_B1.c: 26: }
  4935                           ;OverLoad_B1.c: 27: }
  4936                           ;OverLoad_B1.c: 28: if (!j) {
  4937  0A27  08AA               	movf	getLoad_AD@j,f
  4938  0A28  1D03               	skipz
  4939  0A29  0008               	return
  4940                           
  4941                           ;OverLoad_B1.c: 29: for (i = 0; i < 5; i++) {
  4942  0A2A  01AB               	clrf	getLoad_AD@i
  4943  0A2B                     L1:	
  4944  0A2B  3005               	movlw	5
  4945  0A2C  022B               	subwf	getLoad_AD@i,w
  4946  0A2D  1803               	btfsc	3,0
  4947  0A2E  0008               	return
  4948                           
  4949                           ;OverLoad_B1.c: 30: if (Load->AL[i] > Load->ADRES) {
  4950  0A2F  352B               	lslf	getLoad_AD@i,w
  4951  0A30  3E1A               	addlw	26
  4952  0A31  077B               	addwf	_Load,w
  4953  0A32  00A4               	movwf	??_getLoad_AD
  4954  0A33  0824               	movf	??_getLoad_AD,w
  4955  0A34  0086               	movwf	6
  4956  0A35  3002               	movlw	2	; select bank4/5
  4957  0A36  0087               	movwf	7
  4958  0A37  3F40               	moviw [0]fsr1
  4959  0A38  00A5               	movwf	??_getLoad_AD+1
  4960  0A39  3F41               	moviw [1]fsr1
  4961  0A3A  00A6               	movwf	??_getLoad_AD+2
  4962  0A3B  087B               	movf	_Load,w
  4963  0A3C  3E32               	addlw	50
  4964  0A3D  0086               	movwf	6
  4965  0A3E  3002               	movlw	2	; select bank4/5
  4966  0A3F  0087               	movwf	7
  4967  0A40  3F40               	moviw [0]fsr1
  4968  0A41  00A7               	movwf	??_getLoad_AD+3
  4969  0A42  3F41               	moviw [1]fsr1
  4970  0A43  00A8               	movwf	??_getLoad_AD+4
  4971  0A44  0826               	movf	??_getLoad_AD+2,w
  4972  0A45  0228               	subwf	??_getLoad_AD+4,w
  4973  0A46  1D03               	skipz
  4974  0A47  2A4A               	goto	u7575
  4975  0A48  0825               	movf	??_getLoad_AD+1,w
  4976  0A49  0227               	subwf	??_getLoad_AD+3,w
  4977  0A4A                     u7575:	
  4978  0A4A  1803               	skipnc
  4979  0A4B  2A5E               	goto	l8172
  4980                           
  4981                           ;OverLoad_B1.c: 31: Load->AL[i] = Load->ADRES;
  4982  0A4C  087B               	movf	_Load,w
  4983  0A4D  3E32               	addlw	50
  4984  0A4E  0086               	movwf	6
  4985  0A4F  3002               	movlw	2	; select bank4/5
  4986  0A50  0087               	movwf	7
  4987  0A51  352B               	lslf	getLoad_AD@i,w
  4988  0A52  3E1A               	addlw	26
  4989  0A53  077B               	addwf	_Load,w
  4990  0A54  00A4               	movwf	??_getLoad_AD
  4991  0A55  0824               	movf	??_getLoad_AD,w
  4992  0A56  0084               	movwf	4
  4993  0A57  3002               	movlw	2	; select bank4/5
  4994  0A58  0085               	movwf	5
  4995  0A59  3F40               	moviw [0]fsr1
  4996  0A5A  3F80               	movwi [0]fsr0
  4997  0A5B  3F41               	moviw [1]fsr1
  4998  0A5C  3F81               	movwi [1]fsr0
  4999                           
  5000                           ;OverLoad_B1.c: 32: break;
  5001  0A5D  0008               	return
  5002  0A5E                     l8172:	
  5003  0A5E  3001               	movlw	1
  5004  0A5F  00A4               	movwf	??_getLoad_AD
  5005  0A60  0824               	movf	??_getLoad_AD,w
  5006  0A61  07AB               	addwf	getLoad_AD@i,f
  5007  0A62  2A2B               	goto	L1
  5008  0A63                     __end_of_getLoad_AD:	
  5009                           
  5010                           	psect	text8
  5011  278C                     __ptext8:	
  5012 ;; *************** function _getAD *****************
  5013 ;; Defined at:
  5014 ;;		line 342 in file "../src/MCU_B1.c"
  5015 ;; Parameters:    Size  Location     Type
  5016 ;;  adcon0          1    wreg     unsigned char 
  5017 ;;  adcon1          1    0[BANK0 ] unsigned char 
  5018 ;; Auto vars:     Size  Location     Type
  5019 ;;  adcon0          1    3[BANK0 ] unsigned char 
  5020 ;; Return value:  Size  Location     Type
  5021 ;;                  2    0[BANK0 ] int 
  5022 ;; Registers used:
  5023 ;;		wreg, status,2, status,0
  5024 ;; Tracked objects:
  5025 ;;		On entry : 0/0
  5026 ;;		On exit  : 0/0
  5027 ;;		Unchanged: 0/0
  5028 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5029 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5030 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5031 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5032 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5033 ;;Total ram usage:        4 bytes
  5034 ;; Hardware stack levels used:    1
  5035 ;; Hardware stack levels required when called:    5
  5036 ;; This function calls:
  5037 ;;		Nothing
  5038 ;; This function is called by:
  5039 ;;		_getLoad_AD
  5040 ;;		_getTemp_AD
  5041 ;; This function uses a non-reentrant model
  5042 ;;
  5043                           
  5044                           
  5045                           ;psect for function _getAD
  5046  278C                     _getAD:	
  5047                           
  5048                           ;incstack = 0
  5049                           ; Regs used in _getAD: [wreg+status,2+status,0]
  5050                           ;getAD@adcon0 stored from wreg
  5051  278C  0020               	movlb	0	; select bank0
  5052  278D  00A3               	movwf	getAD@adcon0
  5053                           
  5054                           ;MCU_B1.c: 343: ADCON0 = adcon0;
  5055  278E  0823               	movf	getAD@adcon0,w
  5056  278F  0021               	movlb	1	; select bank1
  5057  2790  009D               	movwf	29	;volatile
  5058                           
  5059                           ;MCU_B1.c: 344: ADCON1 = adcon1;
  5060  2791  0020               	movlb	0	; select bank0
  5061  2792  0820               	movf	getAD@adcon1,w
  5062  2793  0021               	movlb	1	; select bank1
  5063  2794  009E               	movwf	30	;volatile
  5064                           
  5065                           ;MCU_B1.c: 345: GO_nDONE = 1;
  5066  2795  149D               	bsf	29,1	;volatile
  5067  2796                     l1442:	
  5068                           ;MCU_B1.c: 346: while (GO_nDONE == 1);
  5069                           
  5070  2796  189D               	btfsc	29,1	;volatile
  5071  2797  2F96               	goto	l1442
  5072                           
  5073                           ;MCU_B1.c: 347: return ((ADRESH*256)+ADRESL);
  5074  2798  081C               	movf	28,w	;volatile
  5075  2799  0020               	movlb	0	; select bank0
  5076  279A  01A1               	clrf	?_getAD+1
  5077  279B  07A1               	addwf	?_getAD+1,f
  5078  279C  0021               	movlb	1	; select bank1
  5079  279D  081B               	movf	27,w	;volatile
  5080  279E  0020               	movlb	0	; select bank0
  5081  279F  01A0               	clrf	?_getAD
  5082  27A0  07A0               	addwf	?_getAD,f
  5083  27A1  0008               	return
  5084  27A2                     __end_of_getAD:	
  5085                           
  5086                           	psect	text9
  5087  1941                     __ptext9:	
  5088 ;; *************** function _WDT_Main *****************
  5089 ;; Defined at:
  5090 ;;		line 899 in file "../src/MCU_B1.c"
  5091 ;; Parameters:    Size  Location     Type
  5092 ;;		None
  5093 ;; Auto vars:     Size  Location     Type
  5094 ;;		None
  5095 ;; Return value:  Size  Location     Type
  5096 ;;		None               void
  5097 ;; Registers used:
  5098 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5099 ;; Tracked objects:
  5100 ;;		On entry : 0/0
  5101 ;;		On exit  : 0/0
  5102 ;;		Unchanged: 0/0
  5103 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5104 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5105 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5106 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5107 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5108 ;;Total ram usage:        1 bytes
  5109 ;; Hardware stack levels used:    1
  5110 ;; Hardware stack levels required when called:    6
  5111 ;; This function calls:
  5112 ;;		_WDT_Clearing
  5113 ;; This function is called by:
  5114 ;;		_main
  5115 ;; This function uses a non-reentrant model
  5116 ;;
  5117                           
  5118                           
  5119                           ;psect for function _WDT_Main
  5120  1941                     _WDT_Main:	
  5121                           
  5122                           ;MCU_B1.c: 900: if (WDT->Enable == 1) {
  5123                           
  5124                           ;incstack = 0
  5125                           ; Regs used in _WDT_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5126  1941  0021               	movlb	1	; select bank1
  5127  1942  086C               	movf	_WDT^(0+128),w
  5128  1943  0086               	movwf	6
  5129  1944  0187               	clrf	7
  5130  1945  1C01               	btfss	1,0
  5131  1946  0008               	return
  5132                           
  5133                           ;MCU_B1.c: 901: if (WDT->Count-- > 0) {
  5134  1947  0A6C               	incf	_WDT^(0+128),w
  5135  1948  0086               	movwf	6
  5136  1949  0187               	clrf	7
  5137  194A  3001               	movlw	1
  5138  194B  0281               	subwf	1,f
  5139  194C  0801               	movf	1,w
  5140  194D  3AFF               	xorlw	255
  5141  194E  1903               	skipnz
  5142  194F  0008               	return
  5143                           
  5144                           ;MCU_B1.c: 902: WDT->Count = 10;
  5145  1950  300A               	movlw	10
  5146  1951  0020               	movlb	0	; select bank0
  5147  1952  00A0               	movwf	??_WDT_Main
  5148  1953  0021               	movlb	1	; select bank1
  5149  1954  0A6C               	incf	_WDT^(0+128),w
  5150  1955  0086               	movwf	6
  5151  1956  0187               	clrf	7
  5152  1957  0020               	movlb	0	; select bank0
  5153  1958  0820               	movf	??_WDT_Main,w
  5154  1959  0081               	movwf	1
  5155                           
  5156                           ;MCU_B1.c: 903: WDT_Clearing();
  5157  195A  3180  2002         	fcall	_WDT_Clearing
  5158  195C  0008               	return
  5159  195D                     __end_of_WDT_Main:	
  5160                           
  5161                           	psect	text10
  5162  0002                     __ptext10:	
  5163 ;; *************** function _WDT_Clearing *****************
  5164 ;; Defined at:
  5165 ;;		line 909 in file "../src/MCU_B1.c"
  5166 ;; Parameters:    Size  Location     Type
  5167 ;;		None
  5168 ;; Auto vars:     Size  Location     Type
  5169 ;;		None
  5170 ;; Return value:  Size  Location     Type
  5171 ;;		None               void
  5172 ;; Registers used:
  5173 ;;		None
  5174 ;; Tracked objects:
  5175 ;;		On entry : 0/0
  5176 ;;		On exit  : 0/0
  5177 ;;		Unchanged: 0/0
  5178 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5179 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5180 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5181 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5182 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5183 ;;Total ram usage:        0 bytes
  5184 ;; Hardware stack levels used:    1
  5185 ;; Hardware stack levels required when called:    5
  5186 ;; This function calls:
  5187 ;;		Nothing
  5188 ;; This function is called by:
  5189 ;;		_WDT_Main
  5190 ;; This function uses a non-reentrant model
  5191 ;;
  5192                           
  5193                           
  5194                           ;psect for function _WDT_Clearing
  5195  0002                     _WDT_Clearing:	
  5196                           
  5197                           ;incstack = 0
  5198                           ; Regs used in _WDT_Clearing: []
  5199  0002  0064               	clrwdt	;# 
  5200  0003  0008               	return
  5201  0004                     __end_of_WDT_Clearing:	
  5202                           
  5203                           	psect	text11
  5204  24DE                     __ptext11:	
  5205 ;; *************** function _Temp_Main *****************
  5206 ;; Defined at:
  5207 ;;		line 57 in file "../src/OverTemperature_B1.c"
  5208 ;; Parameters:    Size  Location     Type
  5209 ;;		None
  5210 ;; Auto vars:     Size  Location     Type
  5211 ;;		None
  5212 ;; Return value:  Size  Location     Type
  5213 ;;		None               void
  5214 ;; Registers used:
  5215 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5216 ;; Tracked objects:
  5217 ;;		On entry : 0/0
  5218 ;;		On exit  : 0/0
  5219 ;;		Unchanged: 0/0
  5220 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5221 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5222 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5223 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5224 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5225 ;;Total ram usage:        0 bytes
  5226 ;; Hardware stack levels used:    1
  5227 ;; Hardware stack levels required when called:   11
  5228 ;; This function calls:
  5229 ;;		_setTemp_Main
  5230 ;; This function is called by:
  5231 ;;		_main
  5232 ;; This function uses a non-reentrant model
  5233 ;;
  5234                           
  5235                           
  5236                           ;psect for function _Temp_Main
  5237  24DE                     _Temp_Main:	
  5238                           
  5239                           ;OverTemperature_B1.c: 60: setTemp_Main();
  5240                           
  5241                           ;incstack = 0
  5242                           ; Regs used in _Temp_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5243  24DE  3186  2619         	fcall	_setTemp_Main
  5244  24E0  0008               	return
  5245  24E1                     __end_of_Temp_Main:	
  5246                           
  5247                           	psect	text12
  5248  0619                     __ptext12:	
  5249 ;; *************** function _setTemp_Main *****************
  5250 ;; Defined at:
  5251 ;;		line 64 in file "../src/OverTemperature_B1.c"
  5252 ;; Parameters:    Size  Location     Type
  5253 ;;		None
  5254 ;; Auto vars:     Size  Location     Type
  5255 ;;		None
  5256 ;; Return value:  Size  Location     Type
  5257 ;;		None               void
  5258 ;; Registers used:
  5259 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5260 ;; Tracked objects:
  5261 ;;		On entry : 0/0
  5262 ;;		On exit  : 0/0
  5263 ;;		Unchanged: 0/0
  5264 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5265 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5266 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5267 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5268 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5269 ;;Total ram usage:        3 bytes
  5270 ;; Hardware stack levels used:    1
  5271 ;; Hardware stack levels required when called:   10
  5272 ;; This function calls:
  5273 ;;		_getLoad_Safe
  5274 ;;		_setOverTemp_Exceptions
  5275 ;; This function is called by:
  5276 ;;		_Temp_Main
  5277 ;; This function uses a non-reentrant model
  5278 ;;
  5279                           
  5280                           
  5281                           ;psect for function _setTemp_Main
  5282  0619                     _setTemp_Main:	
  5283                           
  5284                           ;OverTemperature_B1.c: 66: if(Temp->Enable)
  5285                           
  5286                           ;incstack = 0
  5287                           ; Regs used in _setTemp_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5288  0619  0021               	movlb	1	; select bank1
  5289  061A  0844               	movf	_Temp^(0+128),w
  5290  061B  0086               	movwf	6
  5291  061C  3001               	movlw	1	; select bank2/3
  5292  061D  0087               	movwf	7
  5293  061E  1C01               	btfss	1,0
  5294  061F  0008               	return
  5295                           
  5296                           ;OverTemperature_B1.c: 67: {
  5297                           ;OverTemperature_B1.c: 68: if(Temp->ADtoGO == 0)
  5298  0620  0844               	movf	_Temp^(0+128),w
  5299  0621  0086               	movwf	6
  5300  0622  3001               	movlw	1	; select bank2/3
  5301  0623  0087               	movwf	7
  5302  0624  1901               	btfsc	1,2
  5303  0625  2E62               	goto	l7646
  5304                           
  5305                           ;OverTemperature_B1.c: 69: {
  5306                           ;OverTemperature_B1.c: 70: Temp->Time++;
  5307  0626  0A44               	incf	_Temp^(0+128),w
  5308  0627  0086               	movwf	6
  5309  0628  3001               	movlw	1	; select bank2/3
  5310  0629  0087               	movwf	7
  5311  062A  3001               	movlw	1
  5312  062B  0781               	addwf	1,f
  5313  062C  3141               	addfsr 1,1
  5314  062D  1803               	skipnc
  5315  062E  0A81               	incf	1,f
  5316                           
  5317                           ;OverTemperature_B1.c: 71: if(Temp->Time >= 500)
  5318  062F  0A44               	incf	_Temp^(0+128),w
  5319  0630  0086               	movwf	6
  5320  0631  3001               	movlw	1	; select bank2/3
  5321  0632  0087               	movwf	7
  5322  0633  3F40               	moviw [0]fsr1
  5323  0634  0020               	movlb	0	; select bank0
  5324  0635  00B0               	movwf	??_setTemp_Main
  5325  0636  3F41               	moviw [1]fsr1
  5326  0637  00B1               	movwf	??_setTemp_Main+1
  5327  0638  3001               	movlw	1
  5328  0639  0231               	subwf	??_setTemp_Main+1,w
  5329  063A  30F4               	movlw	244
  5330  063B  1903               	skipnz
  5331  063C  0230               	subwf	??_setTemp_Main,w
  5332  063D  1C03               	skipc
  5333  063E  0008               	return
  5334                           
  5335                           ;OverTemperature_B1.c: 72: {
  5336                           ;OverTemperature_B1.c: 73: if(getLoad_Safe() && 1)
  5337  063F  31A5  2573  3186   	fcall	_getLoad_Safe
  5338  0642  3A00               	xorlw	0
  5339  0643  1903               	skipnz
  5340  0644  2E58               	goto	l7644
  5341                           
  5342                           ;OverTemperature_B1.c: 74: {
  5343                           ;OverTemperature_B1.c: 75: Temp->Time=0;
  5344  0645  0021               	movlb	1	; select bank1
  5345  0646  0A44               	incf	_Temp^(0+128),w
  5346  0647  0086               	movwf	6
  5347  0648  3001               	movlw	1	; select bank2/3
  5348  0649  0087               	movwf	7
  5349  064A  3000               	movlw	0
  5350  064B  3FC0               	movwi [0]fsr1
  5351  064C  3FC1               	movwi [1]fsr1
  5352                           
  5353                           ;OverTemperature_B1.c: 76: Temp->ADtoGO=1;
  5354  064D  0844               	movf	_Temp^(0+128),w
  5355  064E  0086               	movwf	6
  5356  064F  3001               	movlw	1	; select bank2/3
  5357  0650  0087               	movwf	7
  5358  0651  1501               	bsf	1,2
  5359                           
  5360                           ;OverTemperature_B1.c: 77: Temp->Safe=0;
  5361  0652  0844               	movf	_Temp^(0+128),w
  5362  0653  0086               	movwf	6
  5363  0654  3001               	movlw	1	; select bank2/3
  5364  0655  0087               	movwf	7
  5365  0656  1201               	bcf	1,4
  5366                           
  5367                           ;OverTemperature_B1.c: 78: }
  5368  0657  0008               	return
  5369  0658                     l7644:	
  5370                           
  5371                           ;OverTemperature_B1.c: 79: else
  5372                           ;OverTemperature_B1.c: 80: {
  5373                           ;OverTemperature_B1.c: 81: Temp->Time=1000;
  5374  0658  0021               	movlb	1	; select bank1
  5375  0659  0A44               	incf	_Temp^(0+128),w
  5376  065A  0086               	movwf	6
  5377  065B  3001               	movlw	1	; select bank2/3
  5378  065C  0087               	movwf	7
  5379  065D  30E8               	movlw	232
  5380  065E  3FC0               	movwi [0]fsr1
  5381  065F  3003               	movlw	3
  5382  0660  3FC1               	movwi [1]fsr1
  5383                           
  5384                           ;OverTemperature_B1.c: 82: }
  5385                           ;OverTemperature_B1.c: 83: }
  5386                           ;OverTemperature_B1.c: 84: }
  5387  0661  0008               	return
  5388  0662                     l7646:	
  5389                           
  5390                           ;OverTemperature_B1.c: 85: else
  5391                           ;OverTemperature_B1.c: 86: {
  5392                           ;OverTemperature_B1.c: 87: Temp->Time++;
  5393  0662  0A44               	incf	_Temp^(0+128),w
  5394  0663  0086               	movwf	6
  5395  0664  3001               	movlw	1	; select bank2/3
  5396  0665  0087               	movwf	7
  5397  0666  3001               	movlw	1
  5398  0667  0781               	addwf	1,f
  5399  0668  3141               	addfsr 1,1
  5400  0669  1803               	skipnc
  5401  066A  0A81               	incf	1,f
  5402                           
  5403                           ;OverTemperature_B1.c: 88: if(Temp->Time >= 4)
  5404  066B  0A44               	incf	_Temp^(0+128),w
  5405  066C  0086               	movwf	6
  5406  066D  3001               	movlw	1	; select bank2/3
  5407  066E  0087               	movwf	7
  5408  066F  3F40               	moviw [0]fsr1
  5409  0670  0020               	movlb	0	; select bank0
  5410  0671  00B0               	movwf	??_setTemp_Main
  5411  0672  3F41               	moviw [1]fsr1
  5412  0673  00B1               	movwf	??_setTemp_Main+1
  5413  0674  3000               	movlw	0
  5414  0675  0231               	subwf	??_setTemp_Main+1,w
  5415  0676  3004               	movlw	4
  5416  0677  1903               	skipnz
  5417  0678  0230               	subwf	??_setTemp_Main,w
  5418  0679  1C03               	skipc
  5419  067A  0008               	return
  5420                           
  5421                           ;OverTemperature_B1.c: 89: {
  5422                           ;OverTemperature_B1.c: 90: Temp->Time=0;
  5423  067B  0021               	movlb	1	; select bank1
  5424  067C  0A44               	incf	_Temp^(0+128),w
  5425  067D  0086               	movwf	6
  5426  067E  3001               	movlw	1	; select bank2/3
  5427  067F  0087               	movwf	7
  5428  0680  3000               	movlw	0
  5429  0681  3FC0               	movwi [0]fsr1
  5430  0682  3FC1               	movwi [1]fsr1
  5431                           
  5432                           ;OverTemperature_B1.c: 91: Temp->ADtoGO=0;
  5433  0683  0844               	movf	_Temp^(0+128),w
  5434  0684  0086               	movwf	6
  5435  0685  3001               	movlw	1	; select bank2/3
  5436  0686  0087               	movwf	7
  5437  0687  1101               	bcf	1,2
  5438                           
  5439                           ;OverTemperature_B1.c: 92: Temp->AD=Temp->ADH[1];
  5440  0688  0844               	movf	_Temp^(0+128),w
  5441  0689  3E0A               	addlw	10
  5442  068A  0086               	movwf	6
  5443  068B  3001               	movlw	1	; select bank2/3
  5444  068C  0087               	movwf	7
  5445  068D  0844               	movf	_Temp^(0+128),w
  5446  068E  3E06               	addlw	6
  5447  068F  0084               	movwf	4
  5448  0690  3001               	movlw	1	; select bank2/3
  5449  0691  0085               	movwf	5
  5450  0692  3F40               	moviw [0]fsr1
  5451  0693  3F80               	movwi [0]fsr0
  5452  0694  3F41               	moviw [1]fsr1
  5453  0695  3F81               	movwi [1]fsr0
  5454                           
  5455                           ;OverTemperature_B1.c: 93: if(Temp->ERROR)
  5456  0696  0844               	movf	_Temp^(0+128),w
  5457  0697  0086               	movwf	6
  5458  0698  3001               	movlw	1	; select bank2/3
  5459  0699  0087               	movwf	7
  5460  069A  1C81               	btfss	1,1
  5461  069B  2ECD               	goto	l7668
  5462                           
  5463                           ;OverTemperature_B1.c: 94: {
  5464                           ;OverTemperature_B1.c: 95: if(Temp->AD >= 600)
  5465  069C  0844               	movf	_Temp^(0+128),w
  5466  069D  3E06               	addlw	6
  5467  069E  0086               	movwf	6
  5468  069F  3001               	movlw	1	; select bank2/3
  5469  06A0  0087               	movwf	7
  5470  06A1  3F40               	moviw [0]fsr1
  5471  06A2  0020               	movlb	0	; select bank0
  5472  06A3  00B0               	movwf	??_setTemp_Main
  5473  06A4  3F41               	moviw [1]fsr1
  5474  06A5  00B1               	movwf	??_setTemp_Main+1
  5475  06A6  3002               	movlw	2
  5476  06A7  0231               	subwf	??_setTemp_Main+1,w
  5477  06A8  3058               	movlw	88
  5478  06A9  1903               	skipnz
  5479  06AA  0230               	subwf	??_setTemp_Main,w
  5480  06AB  1C03               	skipc
  5481  06AC  2EFE               	goto	l7678
  5482                           
  5483                           ;OverTemperature_B1.c: 96: {
  5484                           ;OverTemperature_B1.c: 97: Temp->Count++;
  5485  06AD  3001               	movlw	1
  5486  06AE  00B0               	movwf	??_setTemp_Main
  5487  06AF  0021               	movlb	1	; select bank1
  5488  06B0  0844               	movf	_Temp^(0+128),w
  5489  06B1  3E03               	addlw	3
  5490  06B2  0086               	movwf	6
  5491  06B3  3001               	movlw	1	; select bank2/3
  5492  06B4  0087               	movwf	7
  5493  06B5  0020               	movlb	0	; select bank0
  5494  06B6  0830               	movf	??_setTemp_Main,w
  5495  06B7  0781               	addwf	1,f
  5496                           
  5497                           ;OverTemperature_B1.c: 98: if(Temp->Count >= 3)
  5498  06B8  0021               	movlb	1	; select bank1
  5499  06B9  0844               	movf	_Temp^(0+128),w
  5500  06BA  3E03               	addlw	3
  5501  06BB  0086               	movwf	6
  5502  06BC  3001               	movlw	1	; select bank2/3
  5503  06BD  0087               	movwf	7
  5504  06BE  3003               	movlw	3
  5505  06BF  0201               	subwf	1,w
  5506  06C0  1C03               	skipc
  5507  06C1  2F05               	goto	l7680
  5508                           
  5509                           ;OverTemperature_B1.c: 99: {
  5510                           ;OverTemperature_B1.c: 100: Temp->Count=0;
  5511  06C2  0844               	movf	_Temp^(0+128),w
  5512  06C3  3E03               	addlw	3
  5513  06C4  0086               	movwf	6
  5514  06C5  3001               	movlw	1	; select bank2/3
  5515  06C6  0087               	movwf	7
  5516  06C7  0181               	clrf	1
  5517                           
  5518                           ;OverTemperature_B1.c: 101: setOverTemp_Exceptions(0);
  5519  06C8  3000               	movlw	0
  5520  06C9  319F  2727  3186   	fcall	_setOverTemp_Exceptions
  5521                           
  5522                           ;OverTemperature_B1.c: 102: }
  5523                           ;OverTemperature_B1.c: 103: }
  5524  06CC  2F05               	goto	l7680
  5525  06CD                     l7668:	
  5526                           ;OverTemperature_B1.c: 107: }
  5527                           ;OverTemperature_B1.c: 108: }
  5528                           
  5529                           ;OverTemperature_B1.c: 104: else
  5530                           ;OverTemperature_B1.c: 105: {
  5531                           ;OverTemperature_B1.c: 106: Temp->Count=0;
  5532                           
  5533                           
  5534                           ;OverTemperature_B1.c: 109: else
  5535                           ;OverTemperature_B1.c: 110: {
  5536                           ;OverTemperature_B1.c: 111: if(Temp->AD <= 550)
  5537  06CD  0844               	movf	_Temp^(0+128),w
  5538  06CE  3E06               	addlw	6
  5539  06CF  0086               	movwf	6
  5540  06D0  3001               	movlw	1	; select bank2/3
  5541  06D1  0087               	movwf	7
  5542  06D2  3F40               	moviw [0]fsr1
  5543  06D3  0020               	movlb	0	; select bank0
  5544  06D4  00B0               	movwf	??_setTemp_Main
  5545  06D5  3F41               	moviw [1]fsr1
  5546  06D6  00B1               	movwf	??_setTemp_Main+1
  5547  06D7  3002               	movlw	2
  5548  06D8  0231               	subwf	??_setTemp_Main+1,w
  5549  06D9  3027               	movlw	39
  5550  06DA  1903               	skipnz
  5551  06DB  0230               	subwf	??_setTemp_Main,w
  5552  06DC  1803               	skipnc
  5553  06DD  2EFE               	goto	l7678
  5554                           
  5555                           ;OverTemperature_B1.c: 112: {
  5556                           ;OverTemperature_B1.c: 113: Temp->Count++;
  5557  06DE  3001               	movlw	1
  5558  06DF  00B0               	movwf	??_setTemp_Main
  5559  06E0  0021               	movlb	1	; select bank1
  5560  06E1  0844               	movf	_Temp^(0+128),w
  5561  06E2  3E03               	addlw	3
  5562  06E3  0086               	movwf	6
  5563  06E4  3001               	movlw	1	; select bank2/3
  5564  06E5  0087               	movwf	7
  5565  06E6  0020               	movlb	0	; select bank0
  5566  06E7  0830               	movf	??_setTemp_Main,w
  5567  06E8  0781               	addwf	1,f
  5568                           
  5569                           ;OverTemperature_B1.c: 114: if(Temp->Count >= 3)
  5570  06E9  0021               	movlb	1	; select bank1
  5571  06EA  0844               	movf	_Temp^(0+128),w
  5572  06EB  3E03               	addlw	3
  5573  06EC  0086               	movwf	6
  5574  06ED  3001               	movlw	1	; select bank2/3
  5575  06EE  0087               	movwf	7
  5576  06EF  3003               	movlw	3
  5577  06F0  0201               	subwf	1,w
  5578  06F1  1C03               	skipc
  5579  06F2  2F05               	goto	l7680
  5580                           
  5581                           ;OverTemperature_B1.c: 115: {
  5582                           ;OverTemperature_B1.c: 116: Temp->Count=0;
  5583  06F3  0844               	movf	_Temp^(0+128),w
  5584  06F4  3E03               	addlw	3
  5585  06F5  0086               	movwf	6
  5586  06F6  3001               	movlw	1	; select bank2/3
  5587  06F7  0087               	movwf	7
  5588  06F8  0181               	clrf	1
  5589                           
  5590                           ;OverTemperature_B1.c: 117: setOverTemp_Exceptions(1);
  5591  06F9  3001               	movlw	1
  5592  06FA  319F  2727  3186   	fcall	_setOverTemp_Exceptions
  5593                           
  5594                           ;OverTemperature_B1.c: 118: }
  5595                           ;OverTemperature_B1.c: 119: }
  5596  06FD  2F05               	goto	l7680
  5597  06FE                     l7678:	
  5598                           
  5599                           ;OverTemperature_B1.c: 120: else
  5600                           ;OverTemperature_B1.c: 121: {
  5601                           ;OverTemperature_B1.c: 122: Temp->Count=0;
  5602  06FE  0021               	movlb	1	; select bank1
  5603  06FF  0844               	movf	_Temp^(0+128),w
  5604  0700  3E03               	addlw	3
  5605  0701  0086               	movwf	6
  5606  0702  3001               	movlw	1	; select bank2/3
  5607  0703  0087               	movwf	7
  5608  0704  0181               	clrf	1
  5609  0705                     l7680:	
  5610                           
  5611                           ;OverTemperature_B1.c: 123: }
  5612                           ;OverTemperature_B1.c: 124: }
  5613                           ;OverTemperature_B1.c: 125: if(Temp->ERROR == 0)
  5614  0705  0021               	movlb	1	; select bank1
  5615  0706  0844               	movf	_Temp^(0+128),w
  5616  0707  0086               	movwf	6
  5617  0708  3001               	movlw	1	; select bank2/3
  5618  0709  0087               	movwf	7
  5619  070A  1881               	btfsc	1,1
  5620  070B  2F11               	goto	l7684
  5621                           
  5622                           ;OverTemperature_B1.c: 126: {
  5623                           ;OverTemperature_B1.c: 127: Temp->Safe=1;
  5624  070C  0844               	movf	_Temp^(0+128),w
  5625  070D  0086               	movwf	6
  5626  070E  3001               	movlw	1	; select bank2/3
  5627  070F  0087               	movwf	7
  5628  0710  1601               	bsf	1,4
  5629  0711                     l7684:	
  5630                           
  5631                           ;OverTemperature_B1.c: 128: }
  5632                           ;OverTemperature_B1.c: 129: product->Data[24]=Temp->AD >> 8;
  5633  0711  0844               	movf	_Temp^(0+128),w
  5634  0712  3E06               	addlw	6
  5635  0713  0086               	movwf	6
  5636  0714  3001               	movlw	1	; select bank2/3
  5637  0715  0087               	movwf	7
  5638  0716  3F40               	moviw [0]fsr1
  5639  0717  0020               	movlb	0	; select bank0
  5640  0718  00B0               	movwf	??_setTemp_Main
  5641  0719  3F41               	moviw [1]fsr1
  5642  071A  00B1               	movwf	??_setTemp_Main+1
  5643  071B  0831               	movf	??_setTemp_Main+1,w
  5644  071C  00B2               	movwf	??_setTemp_Main+2
  5645  071D  087D               	movf	_product,w
  5646  071E  3E18               	addlw	24
  5647  071F  0086               	movwf	6
  5648  0720  3001               	movlw	1	; select bank2/3
  5649  0721  0087               	movwf	7
  5650  0722  0832               	movf	??_setTemp_Main+2,w
  5651  0723  0081               	movwf	1
  5652                           
  5653                           ;OverTemperature_B1.c: 130: product->Data[25]=Temp->AD;
  5654  0724  0021               	movlb	1	; select bank1
  5655  0725  0844               	movf	_Temp^(0+128),w
  5656  0726  3E06               	addlw	6
  5657  0727  0086               	movwf	6
  5658  0728  3001               	movlw	1	; select bank2/3
  5659  0729  0087               	movwf	7
  5660  072A  0801               	movf	1,w
  5661  072B  0020               	movlb	0	; select bank0
  5662  072C  00B0               	movwf	??_setTemp_Main
  5663  072D  087D               	movf	_product,w
  5664  072E  3E19               	addlw	25
  5665  072F  0086               	movwf	6
  5666  0730  3001               	movlw	1	; select bank2/3
  5667  0731  0087               	movwf	7
  5668  0732  0830               	movf	??_setTemp_Main,w
  5669  0733  0081               	movwf	1
  5670                           
  5671                           ;OverTemperature_B1.c: 131: Temp->ADH[0]=0;
  5672  0734  0021               	movlb	1	; select bank1
  5673  0735  0844               	movf	_Temp^(0+128),w
  5674  0736  3E08               	addlw	8
  5675  0737  0086               	movwf	6
  5676  0738  3001               	movlw	1	; select bank2/3
  5677  0739  0087               	movwf	7
  5678  073A  3000               	movlw	0
  5679  073B  3FC0               	movwi [0]fsr1
  5680  073C  3FC1               	movwi [1]fsr1
  5681                           
  5682                           ;OverTemperature_B1.c: 132: Temp->ADH[1]=0;
  5683  073D  0844               	movf	_Temp^(0+128),w
  5684  073E  3E0A               	addlw	10
  5685  073F  0086               	movwf	6
  5686  0740  3001               	movlw	1	; select bank2/3
  5687  0741  0087               	movwf	7
  5688  0742  3000               	movlw	0
  5689  0743  3FC0               	movwi [0]fsr1
  5690  0744  3FC1               	movwi [1]fsr1
  5691  0745  0008               	return
  5692  0746                     __end_of_setTemp_Main:	
  5693                           
  5694                           	psect	text13
  5695  1F27                     __ptext13:	
  5696 ;; *************** function _setOverTemp_Exceptions *****************
  5697 ;; Defined at:
  5698 ;;		line 138 in file "../src/OverTemperature_B1.c"
  5699 ;; Parameters:    Size  Location     Type
  5700 ;;  command         1    wreg     unsigned char 
  5701 ;; Auto vars:     Size  Location     Type
  5702 ;;  command         1   15[BANK0 ] unsigned char 
  5703 ;; Return value:  Size  Location     Type
  5704 ;;		None               void
  5705 ;; Registers used:
  5706 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5707 ;; Tracked objects:
  5708 ;;		On entry : 0/0
  5709 ;;		On exit  : 0/0
  5710 ;;		Unchanged: 0/0
  5711 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5712 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5713 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5714 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5715 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5716 ;;Total ram usage:        2 bytes
  5717 ;; Hardware stack levels used:    1
  5718 ;; Hardware stack levels required when called:    9
  5719 ;; This function calls:
  5720 ;;		_DimmerLights_Exceptions
  5721 ;;		_setBuz
  5722 ;;		_setLED
  5723 ;;		_setRF_Enable
  5724 ;;		_setSw_Enable
  5725 ;; This function is called by:
  5726 ;;		_setTemp_Main
  5727 ;; This function uses a non-reentrant model
  5728 ;;
  5729                           
  5730                           
  5731                           ;psect for function _setOverTemp_Exceptions
  5732  1F27                     _setOverTemp_Exceptions:	
  5733                           
  5734                           ;incstack = 0
  5735                           ; Regs used in _setOverTemp_Exceptions: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
  5736                           ;setOverTemp_Exceptions@command stored from wreg
  5737  1F27  0020               	movlb	0	; select bank0
  5738  1F28  00AF               	movwf	setOverTemp_Exceptions@command
  5739                           
  5740                           ;OverTemperature_B1.c: 140: Temp->ERROR=command;
  5741  1F29  0021               	movlb	1	; select bank1
  5742  1F2A  0844               	movf	_Temp^(0+128),w
  5743  1F2B  0086               	movwf	6
  5744  1F2C  3001               	movlw	1	; select bank2/3
  5745  1F2D  0087               	movwf	7
  5746  1F2E  0020               	movlb	0	; select bank0
  5747  1F2F  082F               	movf	setOverTemp_Exceptions@command,w
  5748  1F30  1081               	bcf	1,1
  5749  1F31  1D03               	skipz
  5750  1F32  1481               	bsf	1,1
  5751                           
  5752                           ;OverTemperature_B1.c: 141: Temp->Safe=(~command) & 0x01;
  5753  1F33  092F               	comf	setOverTemp_Exceptions@command,w
  5754  1F34  3901               	andlw	1
  5755  1F35  00AE               	movwf	??_setOverTemp_Exceptions
  5756  1F36  0021               	movlb	1	; select bank1
  5757  1F37  0844               	movf	_Temp^(0+128),w
  5758  1F38  0086               	movwf	6
  5759  1F39  3001               	movlw	1	; select bank2/3
  5760  1F3A  0087               	movwf	7
  5761  1F3B  0020               	movlb	0	; select bank0
  5762  1F3C  0EAE               	swapf	??_setOverTemp_Exceptions,f
  5763  1F3D  0801               	movf	1,w
  5764  1F3E  062E               	xorwf	??_setOverTemp_Exceptions,w
  5765  1F3F  39EF               	andlw	-17
  5766  1F40  062E               	xorwf	??_setOverTemp_Exceptions,w
  5767  1F41  0081               	movwf	1
  5768                           
  5769                           ;OverTemperature_B1.c: 142: if(command)
  5770  1F42  082F               	movf	setOverTemp_Exceptions@command,w
  5771  1F43  1903               	btfsc	3,2
  5772  1F44  2F4A               	goto	l7050
  5773                           
  5774                           ;OverTemperature_B1.c: 143: {
  5775                           ;OverTemperature_B1.c: 144: DimmerLights_Exceptions(1);
  5776  1F45  3001               	movlw	1
  5777  1F46  3192  2281  319F   	fcall	_DimmerLights_Exceptions
  5778                           
  5779                           ;OverTemperature_B1.c: 148: }
  5780  1F49  2F53               	goto	l2063
  5781  1F4A                     l7050:	
  5782                           
  5783                           ;OverTemperature_B1.c: 149: else
  5784                           ;OverTemperature_B1.c: 150: {
  5785                           ;OverTemperature_B1.c: 151: setBuz(2,100);
  5786  1F4A  3064               	movlw	100
  5787  1F4B  0020               	movlb	0	; select bank0
  5788  1F4C  00A9               	movwf	setBuz@time
  5789  1F4D  3000               	movlw	0
  5790  1F4E  00AA               	movwf	setBuz@time+1
  5791  1F4F  3002               	movlw	2
  5792  1F50  3189  2137  319F   	fcall	_setBuz
  5793  1F53                     l2063:	
  5794                           
  5795                           ;OverTemperature_B1.c: 152: }
  5796                           ;OverTemperature_B1.c: 155: setLED(99,command+10);
  5797  1F53  0020               	movlb	0	; select bank0
  5798  1F54  082F               	movf	setOverTemp_Exceptions@command,w
  5799  1F55  3E0A               	addlw	10
  5800  1F56  00AE               	movwf	??_setOverTemp_Exceptions
  5801  1F57  082E               	movf	??_setOverTemp_Exceptions,w
  5802  1F58  00A2               	movwf	setLED@command
  5803  1F59  3063               	movlw	99
  5804  1F5A  3191  21C2  319F   	fcall	_setLED
  5805                           
  5806                           ;OverTemperature_B1.c: 157: setSw_Enable((~command) & 0x01);
  5807  1F5D  0020               	movlb	0	; select bank0
  5808  1F5E  092F               	comf	setOverTemp_Exceptions@command,w
  5809  1F5F  3901               	andlw	1
  5810  1F60  3199  2125  319F   	fcall	_setSw_Enable
  5811                           
  5812                           ;OverTemperature_B1.c: 159: setRF_Enable(1,(~command) & 0x01);
  5813  1F63  0020               	movlb	0	; select bank0
  5814  1F64  092F               	comf	setOverTemp_Exceptions@command,w
  5815  1F65  3901               	andlw	1
  5816  1F66  00AE               	movwf	??_setOverTemp_Exceptions
  5817  1F67  082E               	movf	??_setOverTemp_Exceptions,w
  5818  1F68  00A2               	movwf	setRF_Enable@command
  5819  1F69  3001               	movlw	1
  5820  1F6A  319A  22E4         	fcall	_setRF_Enable
  5821  1F6C  0008               	return
  5822  1F6D                     __end_of_setOverTemp_Exceptions:	
  5823                           
  5824                           	psect	text14
  5825  2573                     __ptext14:	
  5826 ;; *************** function _getLoad_Safe *****************
  5827 ;; Defined at:
  5828 ;;		line 298 in file "../src/OverLoad_B1.c"
  5829 ;; Parameters:    Size  Location     Type
  5830 ;;		None
  5831 ;; Auto vars:     Size  Location     Type
  5832 ;;		None
  5833 ;; Return value:  Size  Location     Type
  5834 ;;                  1    wreg      unsigned char 
  5835 ;; Registers used:
  5836 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  5837 ;; Tracked objects:
  5838 ;;		On entry : 0/0
  5839 ;;		On exit  : 0/0
  5840 ;;		Unchanged: 0/0
  5841 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5842 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5843 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5844 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5845 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5846 ;;Total ram usage:        1 bytes
  5847 ;; Hardware stack levels used:    1
  5848 ;; Hardware stack levels required when called:    5
  5849 ;; This function calls:
  5850 ;;		Nothing
  5851 ;; This function is called by:
  5852 ;;		_setTemp_Main
  5853 ;; This function uses a non-reentrant model
  5854 ;;
  5855                           
  5856                           
  5857                           ;psect for function _getLoad_Safe
  5858  2573                     _getLoad_Safe:	
  5859                           
  5860                           ;OverLoad_B1.c: 299: return Load->Safe;
  5861                           
  5862                           ;incstack = 0
  5863                           ; Regs used in _getLoad_Safe: [wreg+fsr1l+fsr1h+status,2+status,0]
  5864  2573  087B               	movf	_Load,w
  5865  2574  0086               	movwf	6
  5866  2575  3002               	movlw	2	; select bank4/5
  5867  2576  0087               	movwf	7
  5868  2577  0C01               	rrf	1,w
  5869  2578  0020               	movlb	0	; select bank0
  5870  2579  00A0               	movwf	??_getLoad_Safe
  5871  257A  0CA0               	rrf	??_getLoad_Safe,f
  5872  257B  0C20               	rrf	??_getLoad_Safe,w
  5873  257C  3901               	andlw	1
  5874  257D  0008               	return
  5875  257E                     __end_of_getLoad_Safe:	
  5876                           
  5877                           	psect	text15
  5878  24DB                     __ptext15:	
  5879 ;; *************** function _Temp_Initialization *****************
  5880 ;; Defined at:
  5881 ;;		line 15 in file "../src/OverTemperature_B1.c"
  5882 ;; Parameters:    Size  Location     Type
  5883 ;;		None
  5884 ;; Auto vars:     Size  Location     Type
  5885 ;;		None
  5886 ;; Return value:  Size  Location     Type
  5887 ;;		None               void
  5888 ;; Registers used:
  5889 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5890 ;; Tracked objects:
  5891 ;;		On entry : 0/0
  5892 ;;		On exit  : 0/0
  5893 ;;		Unchanged: 0/0
  5894 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5895 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5896 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5897 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5898 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5899 ;;Total ram usage:        0 bytes
  5900 ;; Hardware stack levels used:    1
  5901 ;; Hardware stack levels required when called:    6
  5902 ;; This function calls:
  5903 ;;		_setTemp_Initialization
  5904 ;; This function is called by:
  5905 ;;		_main
  5906 ;; This function uses a non-reentrant model
  5907 ;;
  5908                           
  5909                           
  5910                           ;psect for function _Temp_Initialization
  5911  24DB                     _Temp_Initialization:	
  5912                           
  5913                           ;OverTemperature_B1.c: 18: setTemp_Initialization();
  5914                           
  5915                           ;incstack = 0
  5916                           ; Regs used in _Temp_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5917  24DB  31A5  25C6         	fcall	_setTemp_Initialization
  5918  24DD  0008               	return
  5919  24DE                     __end_of_Temp_Initialization:	
  5920                           
  5921                           	psect	text16
  5922  25C6                     __ptext16:	
  5923 ;; *************** function _setTemp_Initialization *****************
  5924 ;; Defined at:
  5925 ;;		line 51 in file "../src/OverTemperature_B1.c"
  5926 ;; Parameters:    Size  Location     Type
  5927 ;;		None
  5928 ;; Auto vars:     Size  Location     Type
  5929 ;;		None
  5930 ;; Return value:  Size  Location     Type
  5931 ;;		None               void
  5932 ;; Registers used:
  5933 ;;		wreg, fsr1l, fsr1h
  5934 ;; Tracked objects:
  5935 ;;		On entry : 0/0
  5936 ;;		On exit  : 0/0
  5937 ;;		Unchanged: 0/0
  5938 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5939 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5940 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5941 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5942 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5943 ;;Total ram usage:        1 bytes
  5944 ;; Hardware stack levels used:    1
  5945 ;; Hardware stack levels required when called:    5
  5946 ;; This function calls:
  5947 ;;		Nothing
  5948 ;; This function is called by:
  5949 ;;		_Temp_Initialization
  5950 ;; This function uses a non-reentrant model
  5951 ;;
  5952                           
  5953                           
  5954                           ;psect for function _setTemp_Initialization
  5955  25C6                     _setTemp_Initialization:	
  5956                           
  5957                           ;OverTemperature_B1.c: 53: Temp=&Temp1;
  5958                           
  5959                           ;incstack = 0
  5960                           ; Regs used in _setTemp_Initialization: [wregfsr1]
  5961  25C6  30B4               	movlw	_Temp1& (0+255)
  5962  25C7  0020               	movlb	0	; select bank0
  5963  25C8  00A0               	movwf	??_setTemp_Initialization
  5964  25C9  0820               	movf	??_setTemp_Initialization,w
  5965  25CA  0021               	movlb	1	; select bank1
  5966  25CB  00C4               	movwf	_Temp^(0+128)
  5967                           
  5968                           ;OverTemperature_B1.c: 54: Temp->Safe=1;
  5969  25CC  0844               	movf	_Temp^(0+128),w
  5970  25CD  0086               	movwf	6
  5971  25CE  3001               	movlw	1	; select bank2/3
  5972  25CF  0087               	movwf	7
  5973  25D0  1601               	bsf	1,4
  5974  25D1  0008               	return
  5975  25D2                     __end_of_setTemp_Initialization:	
  5976                           
  5977                           	psect	text17
  5978  253F                     __ptext17:	
  5979 ;; *************** function _Switch_Main *****************
  5980 ;; Defined at:
  5981 ;;		line 61 in file "../src/Switch_B1.c"
  5982 ;; Parameters:    Size  Location     Type
  5983 ;;		None
  5984 ;; Auto vars:     Size  Location     Type
  5985 ;;		None
  5986 ;; Return value:  Size  Location     Type
  5987 ;;		None               void
  5988 ;; Registers used:
  5989 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5990 ;; Tracked objects:
  5991 ;;		On entry : 0/0
  5992 ;;		On exit  : 0/0
  5993 ;;		Unchanged: 0/0
  5994 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5995 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5996 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5997 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5998 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5999 ;;Total ram usage:        0 bytes
  6000 ;; Hardware stack levels used:    1
  6001 ;; Hardware stack levels required when called:   11
  6002 ;; This function calls:
  6003 ;;		_setSw_Main
  6004 ;; This function is called by:
  6005 ;;		_main
  6006 ;; This function uses a non-reentrant model
  6007 ;;
  6008                           
  6009                           
  6010                           ;psect for function _Switch_Main
  6011  253F                     _Switch_Main:	
  6012                           
  6013                           ;Switch_B1.c: 63: setSw_Main(1);
  6014                           
  6015                           ;incstack = 0
  6016                           ; Regs used in _Switch_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6017  253F  3001               	movlw	1
  6018  2540  3184  24C4  31A5   	fcall	_setSw_Main
  6019                           
  6020                           ;Switch_B1.c: 67: setSw_Main(2);
  6021  2543  3002               	movlw	2
  6022  2544  3184  24C4         	fcall	_setSw_Main
  6023  2546  0008               	return
  6024  2547                     __end_of_Switch_Main:	
  6025                           
  6026                           	psect	text18
  6027  04C4                     __ptext18:	
  6028 ;; *************** function _setSw_Main *****************
  6029 ;; Defined at:
  6030 ;;		line 111 in file "../src/Switch_B1.c"
  6031 ;; Parameters:    Size  Location     Type
  6032 ;;  sw              1    wreg     unsigned char 
  6033 ;; Auto vars:     Size  Location     Type
  6034 ;;  sw              1   73[BANK0 ] unsigned char 
  6035 ;; Return value:  Size  Location     Type
  6036 ;;		None               void
  6037 ;; Registers used:
  6038 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6039 ;; Tracked objects:
  6040 ;;		On entry : 0/0
  6041 ;;		On exit  : 0/0
  6042 ;;		Unchanged: 0/0
  6043 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6044 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6045 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6046 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6047 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6048 ;;Total ram usage:        5 bytes
  6049 ;; Hardware stack levels used:    1
  6050 ;; Hardware stack levels required when called:   10
  6051 ;; This function calls:
  6052 ;;		_SwPointSelect
  6053 ;;		_Sw_DimmerAdjFunc
  6054 ;;		_Sw_DimmerOffFunc
  6055 ;;		_Sw_DimmerOnFunc
  6056 ;;		_setBuz
  6057 ;;		_setRF_Learn
  6058 ;; This function is called by:
  6059 ;;		_Switch_Main
  6060 ;; This function uses a non-reentrant model
  6061 ;;
  6062                           
  6063                           
  6064                           ;psect for function _setSw_Main
  6065  04C4                     _setSw_Main:	
  6066                           
  6067                           ;incstack = 0
  6068                           ; Regs used in _setSw_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6069                           ;setSw_Main@sw stored from wreg
  6070  04C4  0020               	movlb	0	; select bank0
  6071  04C5  00E9               	movwf	setSw_Main@sw
  6072                           
  6073                           ;Switch_B1.c: 112: SwPointSelect(sw);
  6074  04C6  0869               	movf	setSw_Main@sw,w
  6075  04C7  31A7  2739  3184   	fcall	_SwPointSelect
  6076                           
  6077                           ;Switch_B1.c: 113: if (Sw->Enable == 1) {
  6078  04CA  087A               	movf	_Sw,w
  6079  04CB  0086               	movwf	6
  6080  04CC  3001               	movlw	1	; select bank2/3
  6081  04CD  0087               	movwf	7
  6082  04CE  1C01               	btfss	1,0
  6083  04CF  0008               	return
  6084                           
  6085                           ;Switch_B1.c: 125: if (sw == 1) {
  6086  04D0  0020               	movlb	0	; select bank0
  6087  04D1  0869               	movf	setSw_Main@sw,w
  6088  04D2  3A01               	xorlw	1
  6089  04D3  1D03               	skipz
  6090  04D4  2CE1               	goto	l7806
  6091                           
  6092                           ;Switch_B1.c: 126: Sw->Touch = (RA6 == 1 || RA4 == 1) ? 1 : 0;
  6093  04D5  01E7               	clrf	_setSw_Main$6260
  6094  04D6  0AE7               	incf	_setSw_Main$6260,f
  6095  04D7  1F0C               	btfss	12,6	;volatile
  6096  04D8  1A0C               	btfsc	12,4	;volatile
  6097  04D9  2CDB               	goto	l7804
  6098  04DA  01E7               	clrf	_setSw_Main$6260
  6099  04DB                     l7804:	
  6100  04DB  087A               	movf	_Sw,w
  6101  04DC  0086               	movwf	6
  6102  04DD  3001               	movlw	1	; select bank2/3
  6103  04DE  0087               	movwf	7
  6104  04DF  0867               	movf	_setSw_Main$6260,w
  6105  04E0  2CF0               	goto	L2
  6106  04E1                     l7806:	
  6107                           ;Switch_B1.c: 127: } else if (sw == 2) {
  6108                           
  6109  04E1  0869               	movf	setSw_Main@sw,w
  6110  04E2  3A02               	xorlw	2
  6111  04E3  1D03               	skipz
  6112  04E4  2CF3               	goto	l7816
  6113                           
  6114                           ;Switch_B1.c: 128: Sw->Touch = (RA0 == 1 || RB1 == 1) ? 1 : 0;
  6115  04E5  01E8               	clrf	_setSw_Main$6261
  6116  04E6  0AE8               	incf	_setSw_Main$6261,f
  6117  04E7  1C0C               	btfss	12,0	;volatile
  6118  04E8  188D               	btfsc	13,1	;volatile
  6119  04E9  2CEB               	goto	l7814
  6120  04EA  01E8               	clrf	_setSw_Main$6261
  6121  04EB                     l7814:	
  6122  04EB  087A               	movf	_Sw,w
  6123  04EC  0086               	movwf	6
  6124  04ED  3001               	movlw	1	; select bank2/3
  6125  04EE  0087               	movwf	7
  6126  04EF  0868               	movf	_setSw_Main$6261,w
  6127  04F0                     L2:	
  6128  04F0  1081               	bcf	1,1
  6129  04F1  1D03               	skipz
  6130  04F2  1481               	bsf	1,1
  6131  04F3                     l7816:	
  6132                           
  6133                           ;Switch_B1.c: 129: }
  6134                           ;Switch_B1.c: 135: if (Sw->Touch == 1) {
  6135  04F3  087A               	movf	_Sw,w
  6136  04F4  0086               	movwf	6
  6137  04F5  3001               	movlw	1	; select bank2/3
  6138  04F6  0087               	movwf	7
  6139  04F7  1C81               	btfss	1,1
  6140  04F8  2DC4               	goto	l7864
  6141                           
  6142                           ;Switch_B1.c: 136: if (Sw->Debounce == 0) {
  6143  04F9  087A               	movf	_Sw,w
  6144  04FA  0086               	movwf	6
  6145  04FB  3001               	movlw	1	; select bank2/3
  6146  04FC  0087               	movwf	7
  6147  04FD  1901               	btfsc	1,2
  6148  04FE  2D20               	goto	l7830
  6149                           
  6150                           ;Switch_B1.c: 137: Sw->DebounceTime++;
  6151  04FF  3001               	movlw	1
  6152  0500  00E5               	movwf	??_setSw_Main
  6153  0501  087A               	movf	_Sw,w
  6154  0502  3E02               	addlw	2
  6155  0503  0086               	movwf	6
  6156  0504  3001               	movlw	1	; select bank2/3
  6157  0505  0087               	movwf	7
  6158  0506  0865               	movf	??_setSw_Main,w
  6159  0507  0781               	addwf	1,f
  6160                           
  6161                           ;Switch_B1.c: 138: if (Sw->DebounceTime >= 5) {
  6162  0508  087A               	movf	_Sw,w
  6163  0509  3E02               	addlw	2
  6164  050A  0086               	movwf	6
  6165  050B  3001               	movlw	1	; select bank2/3
  6166  050C  0087               	movwf	7
  6167  050D  3005               	movlw	5
  6168  050E  0201               	subwf	1,w
  6169  050F  1C03               	skipc
  6170  0510  0008               	return
  6171                           
  6172                           ;Switch_B1.c: 139: Sw->DebounceTime = 0;
  6173  0511  087A               	movf	_Sw,w
  6174  0512  3E02               	addlw	2
  6175  0513  0086               	movwf	6
  6176  0514  3001               	movlw	1	; select bank2/3
  6177  0515  0087               	movwf	7
  6178  0516  0181               	clrf	1
  6179                           
  6180                           ;Switch_B1.c: 140: Sw->Debounce = 1;
  6181  0517  087A               	movf	_Sw,w
  6182  0518  0086               	movwf	6
  6183  0519  3001               	movlw	1	; select bank2/3
  6184  051A  0087               	movwf	7
  6185  051B  1501               	bsf	1,2
  6186                           
  6187                           ;Switch_B1.c: 143: Sw_DimmerOnFunc(sw);
  6188  051C  0869               	movf	setSw_Main@sw,w
  6189  051D  3195  250E         	fcall	_Sw_DimmerOnFunc
  6190                           
  6191                           ;Switch_B1.c: 145: }
  6192                           ;Switch_B1.c: 146: } else {
  6193  051F  0008               	return
  6194  0520                     l7830:	
  6195                           
  6196                           ;Switch_B1.c: 147: if (Sw->Hold1 == 0) {
  6197  0520  087A               	movf	_Sw,w
  6198  0521  0086               	movwf	6
  6199  0522  3001               	movlw	1	; select bank2/3
  6200  0523  0087               	movwf	7
  6201  0524  1981               	btfsc	1,3
  6202  0525  2D4D               	goto	l7840
  6203                           
  6204                           ;Switch_B1.c: 148: Sw->Hold1Time++;
  6205  0526  087A               	movf	_Sw,w
  6206  0527  3E03               	addlw	3
  6207  0528  0086               	movwf	6
  6208  0529  3001               	movlw	1	; select bank2/3
  6209  052A  0087               	movwf	7
  6210  052B  3001               	movlw	1
  6211  052C  0781               	addwf	1,f
  6212  052D  3141               	addfsr 1,1
  6213  052E  1803               	skipnc
  6214  052F  0A81               	incf	1,f
  6215                           
  6216                           ;Switch_B1.c: 149: if (Sw->Hold1Time >= 150) {
  6217  0530  087A               	movf	_Sw,w
  6218  0531  3E03               	addlw	3
  6219  0532  0086               	movwf	6
  6220  0533  3001               	movlw	1	; select bank2/3
  6221  0534  0087               	movwf	7
  6222  0535  3F40               	moviw [0]fsr1
  6223  0536  0020               	movlb	0	; select bank0
  6224  0537  00E5               	movwf	??_setSw_Main
  6225  0538  3F41               	moviw [1]fsr1
  6226  0539  00E6               	movwf	??_setSw_Main+1
  6227  053A  3000               	movlw	0
  6228  053B  0266               	subwf	??_setSw_Main+1,w
  6229  053C  3096               	movlw	150
  6230  053D  1903               	skipnz
  6231  053E  0265               	subwf	??_setSw_Main,w
  6232  053F  1C03               	skipc
  6233  0540  0008               	return
  6234                           
  6235                           ;Switch_B1.c: 150: Sw->Hold1Time = 0;
  6236  0541  087A               	movf	_Sw,w
  6237  0542  3E03               	addlw	3
  6238  0543  0086               	movwf	6
  6239  0544  3001               	movlw	1	; select bank2/3
  6240  0545  0087               	movwf	7
  6241  0546  3000               	movlw	0
  6242  0547  3FC0               	movwi [0]fsr1
  6243  0548  3FC1               	movwi [1]fsr1
  6244                           
  6245                           ;Switch_B1.c: 153: Sw_DimmerAdjFunc(sw);
  6246  0549  0869               	movf	setSw_Main@sw,w
  6247  054A  319F  27B4         	fcall	_Sw_DimmerAdjFunc
  6248                           
  6249                           ;Switch_B1.c: 156: }
  6250                           ;Switch_B1.c: 157: } else {
  6251  054C  0008               	return
  6252  054D                     l7840:	
  6253                           
  6254                           ;Switch_B1.c: 158: if (Sw->Hold2 == 0) {
  6255  054D  087A               	movf	_Sw,w
  6256  054E  0086               	movwf	6
  6257  054F  3001               	movlw	1	; select bank2/3
  6258  0550  0087               	movwf	7
  6259  0551  1A01               	btfsc	1,4
  6260  0552  2D91               	goto	l7854
  6261                           
  6262                           ;Switch_B1.c: 159: Sw->Hold2Time++;
  6263  0553  087A               	movf	_Sw,w
  6264  0554  3E05               	addlw	5
  6265  0555  0086               	movwf	6
  6266  0556  3001               	movlw	1	; select bank2/3
  6267  0557  0087               	movwf	7
  6268  0558  3001               	movlw	1
  6269  0559  0781               	addwf	1,f
  6270  055A  3141               	addfsr 1,1
  6271  055B  1803               	skipnc
  6272  055C  0A81               	incf	1,f
  6273                           
  6274                           ;Switch_B1.c: 160: if (Sw->Hold2Time >= 150) {
  6275  055D  087A               	movf	_Sw,w
  6276  055E  3E05               	addlw	5
  6277  055F  0086               	movwf	6
  6278  0560  3001               	movlw	1	; select bank2/3
  6279  0561  0087               	movwf	7
  6280  0562  3F40               	moviw [0]fsr1
  6281  0563  0020               	movlb	0	; select bank0
  6282  0564  00E5               	movwf	??_setSw_Main
  6283  0565  3F41               	moviw [1]fsr1
  6284  0566  00E6               	movwf	??_setSw_Main+1
  6285  0567  3000               	movlw	0
  6286  0568  0266               	subwf	??_setSw_Main+1,w
  6287  0569  3096               	movlw	150
  6288  056A  1903               	skipnz
  6289  056B  0265               	subwf	??_setSw_Main,w
  6290  056C  1C03               	skipc
  6291  056D  0008               	return
  6292                           
  6293                           ;Switch_B1.c: 161: Sw->Hold2Time = 0;
  6294  056E  087A               	movf	_Sw,w
  6295  056F  3E05               	addlw	5
  6296  0570  0086               	movwf	6
  6297  0571  3001               	movlw	1	; select bank2/3
  6298  0572  0087               	movwf	7
  6299  0573  3000               	movlw	0
  6300  0574  3FC0               	movwi [0]fsr1
  6301  0575  3FC1               	movwi [1]fsr1
  6302                           
  6303                           ;Switch_B1.c: 162: Sw->Hold2 = 1;
  6304  0576  087A               	movf	_Sw,w
  6305  0577  0086               	movwf	6
  6306  0578  3001               	movlw	1	; select bank2/3
  6307  0579  0087               	movwf	7
  6308  057A  1601               	bsf	1,4
  6309                           
  6310                           ;Switch_B1.c: 165: setRF_Learn(1, 1);
  6311  057B  01A2               	clrf	setRF_Learn@command
  6312  057C  0AA2               	incf	setRF_Learn@command,f
  6313  057D  3001               	movlw	1
  6314  057E  31A6  264E  3184   	fcall	_setRF_Learn
  6315                           
  6316                           ;Switch_B1.c: 167: if (myMain->First == 1) {
  6317  0581  0021               	movlb	1	; select bank1
  6318  0582  086D               	movf	_myMain^(0+128),w
  6319  0583  0086               	movwf	6
  6320  0584  3001               	movlw	1	; select bank2/3
  6321  0585  0087               	movwf	7
  6322  0586  1F81               	btfss	1,7
  6323  0587  0008               	return
  6324                           
  6325                           ;Switch_B1.c: 168: setBuz(2, 100);
  6326  0588  3064               	movlw	100
  6327  0589  0020               	movlb	0	; select bank0
  6328  058A  00A9               	movwf	setBuz@time
  6329  058B  3000               	movlw	0
  6330  058C  00AA               	movwf	setBuz@time+1
  6331  058D  3002               	movlw	2
  6332  058E  3189  2137         	fcall	_setBuz
  6333                           
  6334                           ;Switch_B1.c: 169: }
  6335                           ;Switch_B1.c: 171: }
  6336                           ;Switch_B1.c: 172: } else {
  6337  0590  0008               	return
  6338  0591                     l7854:	
  6339                           
  6340                           ;Switch_B1.c: 173: if (Sw->Hold3 == 0) {
  6341  0591  087A               	movf	_Sw,w
  6342  0592  0086               	movwf	6
  6343  0593  3001               	movlw	1	; select bank2/3
  6344  0594  0087               	movwf	7
  6345  0595  1A81               	btfsc	1,5
  6346  0596  0008               	return
  6347                           
  6348                           ;Switch_B1.c: 174: Sw->Hold3Time++;
  6349  0597  087A               	movf	_Sw,w
  6350  0598  3E07               	addlw	7
  6351  0599  0086               	movwf	6
  6352  059A  3001               	movlw	1	; select bank2/3
  6353  059B  0087               	movwf	7
  6354  059C  3001               	movlw	1
  6355  059D  0781               	addwf	1,f
  6356  059E  3141               	addfsr 1,1
  6357  059F  1803               	skipnc
  6358  05A0  0A81               	incf	1,f
  6359                           
  6360                           ;Switch_B1.c: 175: if (Sw->Hold3Time >= 300) {
  6361  05A1  087A               	movf	_Sw,w
  6362  05A2  3E07               	addlw	7
  6363  05A3  0086               	movwf	6
  6364  05A4  3001               	movlw	1	; select bank2/3
  6365  05A5  0087               	movwf	7
  6366  05A6  3F40               	moviw [0]fsr1
  6367  05A7  0020               	movlb	0	; select bank0
  6368  05A8  00E5               	movwf	??_setSw_Main
  6369  05A9  3F41               	moviw [1]fsr1
  6370  05AA  00E6               	movwf	??_setSw_Main+1
  6371  05AB  3001               	movlw	1
  6372  05AC  0266               	subwf	??_setSw_Main+1,w
  6373  05AD  302C               	movlw	44
  6374  05AE  1903               	skipnz
  6375  05AF  0265               	subwf	??_setSw_Main,w
  6376  05B0  1C03               	skipc
  6377  05B1  0008               	return
  6378                           
  6379                           ;Switch_B1.c: 176: Sw->Hold3Time = 0;
  6380  05B2  087A               	movf	_Sw,w
  6381  05B3  3E07               	addlw	7
  6382  05B4  0086               	movwf	6
  6383  05B5  3001               	movlw	1	; select bank2/3
  6384  05B6  0087               	movwf	7
  6385  05B7  3000               	movlw	0
  6386  05B8  3FC0               	movwi [0]fsr1
  6387  05B9  3FC1               	movwi [1]fsr1
  6388                           
  6389                           ;Switch_B1.c: 177: Sw->Hold3 = 1;
  6390  05BA  087A               	movf	_Sw,w
  6391  05BB  0086               	movwf	6
  6392  05BC  3001               	movlw	1	; select bank2/3
  6393  05BD  0087               	movwf	7
  6394  05BE  1681               	bsf	1,5
  6395                           
  6396                           ;Switch_B1.c: 180: setRF_Learn(1, 0);
  6397  05BF  01A2               	clrf	setRF_Learn@command
  6398  05C0  3001               	movlw	1
  6399  05C1  31A6  264E         	fcall	_setRF_Learn
  6400                           
  6401                           ;Switch_B1.c: 183: }
  6402                           ;Switch_B1.c: 184: }
  6403                           ;Switch_B1.c: 185: }
  6404                           ;Switch_B1.c: 186: }
  6405                           ;Switch_B1.c: 187: }
  6406                           ;Switch_B1.c: 188: } else {
  6407  05C3  0008               	return
  6408  05C4                     l7864:	
  6409                           
  6410                           ;Switch_B1.c: 189: if (Sw->Debounce == 1) {
  6411  05C4  087A               	movf	_Sw,w
  6412  05C5  0086               	movwf	6
  6413  05C6  3001               	movlw	1	; select bank2/3
  6414  05C7  0087               	movwf	7
  6415  05C8  1D01               	btfss	1,2
  6416  05C9  0008               	return
  6417                           
  6418                           ;Switch_B1.c: 190: Sw->DebounceTime++;
  6419  05CA  3001               	movlw	1
  6420  05CB  0020               	movlb	0	; select bank0
  6421  05CC  00E5               	movwf	??_setSw_Main
  6422  05CD  087A               	movf	_Sw,w
  6423  05CE  3E02               	addlw	2
  6424  05CF  0086               	movwf	6
  6425  05D0  3001               	movlw	1	; select bank2/3
  6426  05D1  0087               	movwf	7
  6427  05D2  0865               	movf	??_setSw_Main,w
  6428  05D3  0781               	addwf	1,f
  6429                           
  6430                           ;Switch_B1.c: 191: if (Sw->DebounceTime >= 5) {
  6431  05D4  087A               	movf	_Sw,w
  6432  05D5  3E02               	addlw	2
  6433  05D6  0086               	movwf	6
  6434  05D7  3001               	movlw	1	; select bank2/3
  6435  05D8  0087               	movwf	7
  6436  05D9  3005               	movlw	5
  6437  05DA  0201               	subwf	1,w
  6438  05DB  1C03               	skipc
  6439  05DC  0008               	return
  6440                           
  6441                           ;Switch_B1.c: 192: Sw->DebounceTime = 0;
  6442  05DD  087A               	movf	_Sw,w
  6443  05DE  3E02               	addlw	2
  6444  05DF  0086               	movwf	6
  6445  05E0  3001               	movlw	1	; select bank2/3
  6446  05E1  0087               	movwf	7
  6447  05E2  0181               	clrf	1
  6448                           
  6449                           ;Switch_B1.c: 193: Sw->Debounce = 0;
  6450  05E3  087A               	movf	_Sw,w
  6451  05E4  0086               	movwf	6
  6452  05E5  3001               	movlw	1	; select bank2/3
  6453  05E6  0087               	movwf	7
  6454  05E7  1101               	bcf	1,2
  6455                           
  6456                           ;Switch_B1.c: 194: Sw->Hold1Time = 0;
  6457  05E8  087A               	movf	_Sw,w
  6458  05E9  3E03               	addlw	3
  6459  05EA  0086               	movwf	6
  6460  05EB  3001               	movlw	1	; select bank2/3
  6461  05EC  0087               	movwf	7
  6462  05ED  3000               	movlw	0
  6463  05EE  3FC0               	movwi [0]fsr1
  6464  05EF  3FC1               	movwi [1]fsr1
  6465                           
  6466                           ;Switch_B1.c: 195: Sw->Hold1 = 0;
  6467  05F0  087A               	movf	_Sw,w
  6468  05F1  0086               	movwf	6
  6469  05F2  3001               	movlw	1	; select bank2/3
  6470  05F3  0087               	movwf	7
  6471  05F4  1181               	bcf	1,3
  6472                           
  6473                           ;Switch_B1.c: 196: Sw->Hold2Time = 0;
  6474  05F5  087A               	movf	_Sw,w
  6475  05F6  3E05               	addlw	5
  6476  05F7  0086               	movwf	6
  6477  05F8  3001               	movlw	1	; select bank2/3
  6478  05F9  0087               	movwf	7
  6479  05FA  3000               	movlw	0
  6480  05FB  3FC0               	movwi [0]fsr1
  6481  05FC  3FC1               	movwi [1]fsr1
  6482                           
  6483                           ;Switch_B1.c: 197: Sw->Hold2 = 0;
  6484  05FD  087A               	movf	_Sw,w
  6485  05FE  0086               	movwf	6
  6486  05FF  3001               	movlw	1	; select bank2/3
  6487  0600  0087               	movwf	7
  6488  0601  1201               	bcf	1,4
  6489                           
  6490                           ;Switch_B1.c: 198: Sw->Hold3Time = 0;
  6491  0602  087A               	movf	_Sw,w
  6492  0603  3E07               	addlw	7
  6493  0604  0086               	movwf	6
  6494  0605  3001               	movlw	1	; select bank2/3
  6495  0606  0087               	movwf	7
  6496  0607  3000               	movlw	0
  6497  0608  3FC0               	movwi [0]fsr1
  6498  0609  3FC1               	movwi [1]fsr1
  6499                           
  6500                           ;Switch_B1.c: 199: Sw->Hold3 = 0;
  6501  060A  087A               	movf	_Sw,w
  6502  060B  0086               	movwf	6
  6503  060C  3001               	movlw	1	; select bank2/3
  6504  060D  0087               	movwf	7
  6505  060E  1281               	bcf	1,5
  6506                           
  6507                           ;Switch_B1.c: 201: Sw_DimmerOffFunc(sw);
  6508  060F  0869               	movf	setSw_Main@sw,w
  6509  0610  3194  242A  3184   	fcall	_Sw_DimmerOffFunc
  6510                           
  6511                           ;Switch_B1.c: 204: setRF_Learn(1, 0);
  6512  0613  0020               	movlb	0	; select bank0
  6513  0614  01A2               	clrf	setRF_Learn@command
  6514  0615  3001               	movlw	1
  6515  0616  31A6  264E         	fcall	_setRF_Learn
  6516  0618  0008               	return
  6517  0619                     __end_of_setSw_Main:	
  6518                           
  6519                           	psect	text19
  6520  264E                     __ptext19:	
  6521 ;; *************** function _setRF_Learn *****************
  6522 ;; Defined at:
  6523 ;;		line 33 in file "../src/RF_Control_B1.c"
  6524 ;; Parameters:    Size  Location     Type
  6525 ;;  rf              1    wreg     unsigned char 
  6526 ;;  command         1    2[BANK0 ] unsigned char 
  6527 ;; Auto vars:     Size  Location     Type
  6528 ;;  rf              1    3[BANK0 ] unsigned char 
  6529 ;; Return value:  Size  Location     Type
  6530 ;;		None               void
  6531 ;; Registers used:
  6532 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6533 ;; Tracked objects:
  6534 ;;		On entry : 0/0
  6535 ;;		On exit  : 0/0
  6536 ;;		Unchanged: 0/0
  6537 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6538 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6539 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6540 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6541 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6542 ;;Total ram usage:        2 bytes
  6543 ;; Hardware stack levels used:    1
  6544 ;; Hardware stack levels required when called:    6
  6545 ;; This function calls:
  6546 ;;		_RfPointSelect
  6547 ;; This function is called by:
  6548 ;;		_setSw_Main
  6549 ;; This function uses a non-reentrant model
  6550 ;;
  6551                           
  6552                           
  6553                           ;psect for function _setRF_Learn
  6554  264E                     _setRF_Learn:	
  6555                           
  6556                           ;incstack = 0
  6557                           ; Regs used in _setRF_Learn: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6558                           ;setRF_Learn@rf stored from wreg
  6559  264E  0020               	movlb	0	; select bank0
  6560  264F  00A3               	movwf	setRF_Learn@rf
  6561                           
  6562                           ;RF_Control_B1.c: 34: RfPointSelect(rf);
  6563  2650  0823               	movf	setRF_Learn@rf,w
  6564  2651  31A6  263F         	fcall	_RfPointSelect
  6565                           
  6566                           ;RF_Control_B1.c: 35: RF->Learn = command;
  6567  2653  0021               	movlb	1	; select bank1
  6568  2654  083F               	movf	_RF^(0+128),w
  6569  2655  0086               	movwf	6
  6570  2656  0187               	clrf	7
  6571  2657  0020               	movlb	0	; select bank0
  6572  2658  0822               	movf	setRF_Learn@command,w
  6573  2659  1301               	bcf	1,6
  6574  265A  1D03               	skipz
  6575  265B  1701               	bsf	1,6
  6576  265C  0008               	return
  6577  265D                     __end_of_setRF_Learn:	
  6578                           
  6579                           	psect	text20
  6580  150E                     __ptext20:	
  6581 ;; *************** function _Sw_DimmerOnFunc *****************
  6582 ;; Defined at:
  6583 ;;		line 213 in file "../src/Switch_B1.c"
  6584 ;; Parameters:    Size  Location     Type
  6585 ;;  sw              1    wreg     unsigned char 
  6586 ;; Auto vars:     Size  Location     Type
  6587 ;;  sw              1   67[BANK0 ] unsigned char 
  6588 ;;  Idle            1   66[BANK0 ] unsigned char 
  6589 ;; Return value:  Size  Location     Type
  6590 ;;		None               void
  6591 ;; Registers used:
  6592 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6593 ;; Tracked objects:
  6594 ;;		On entry : 0/0
  6595 ;;		On exit  : 0/0
  6596 ;;		Unchanged: 0/0
  6597 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6598 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6599 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6600 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6601 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6602 ;;Total ram usage:        2 bytes
  6603 ;; Hardware stack levels used:    1
  6604 ;; Hardware stack levels required when called:    9
  6605 ;; This function calls:
  6606 ;;		_setBuz
  6607 ;;		_setDimmerLights_Switch
  6608 ;;		_setDimmerLights_Trigger
  6609 ;;		_setRFSW_Status
  6610 ;;		_setRF_DimmerLights
  6611 ;;		_setTxData
  6612 ;; This function is called by:
  6613 ;;		_setSw_Main
  6614 ;; This function uses a non-reentrant model
  6615 ;;
  6616                           
  6617                           
  6618                           ;psect for function _Sw_DimmerOnFunc
  6619  150E                     _Sw_DimmerOnFunc:	
  6620                           
  6621                           ;incstack = 0
  6622                           ; Regs used in _Sw_DimmerOnFunc: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6623                           ;Sw_DimmerOnFunc@sw stored from wreg
  6624  150E  0020               	movlb	0	; select bank0
  6625  150F  00E3               	movwf	Sw_DimmerOnFunc@sw
  6626                           
  6627                           ;Switch_B1.c: 214: char Idle = 1;
  6628  1510  01E2               	clrf	Sw_DimmerOnFunc@Idle
  6629  1511  0AE2               	incf	Sw_DimmerOnFunc@Idle,f
  6630                           
  6631                           ;Switch_B1.c: 228: if (sw == 1) {
  6632  1512  0863               	movf	Sw_DimmerOnFunc@sw,w
  6633  1513  3A01               	xorlw	1
  6634  1514  1D03               	skipz
  6635  1515  2D20               	goto	l7114
  6636                           
  6637                           ;Switch_B1.c: 229: Idle = (DimmerLights2.AdjGo == 1) ? 0 : 1;
  6638  1516  1003               	clrc
  6639  1517  0022               	movlb	2	; select bank2
  6640  1518  1DB7               	btfss	(_DimmerLights2^(0+256)+8),3
  6641  1519  1403               	setc
  6642  151A  3000               	movlw	0
  6643  151B  1803               	btfsc	3,0
  6644  151C  3001               	movlw	1
  6645  151D  0020               	movlb	0	; select bank0
  6646  151E  00E2               	movwf	Sw_DimmerOnFunc@Idle
  6647                           
  6648                           ;Switch_B1.c: 230: } else if (sw == 2) {
  6649  151F  2D2D               	goto	l7118
  6650  1520                     l7114:	
  6651  1520  0863               	movf	Sw_DimmerOnFunc@sw,w
  6652  1521  3A02               	xorlw	2
  6653  1522  1D03               	skipz
  6654  1523  2D2D               	goto	l7118
  6655                           
  6656                           ;Switch_B1.c: 231: Idle = (DimmerLights1.AdjGo == 1) ? 0 : 1;
  6657  1524  1003               	clrc
  6658  1525  0022               	movlb	2	; select bank2
  6659  1526  1DA8               	btfss	(_DimmerLights1^(0+256)+8),3
  6660  1527  1403               	setc
  6661  1528  3000               	movlw	0
  6662  1529  1803               	btfsc	3,0
  6663  152A  3001               	movlw	1
  6664  152B  0020               	movlb	0	; select bank0
  6665  152C  00E2               	movwf	Sw_DimmerOnFunc@Idle
  6666  152D                     l7118:	
  6667                           
  6668                           ;Switch_B1.c: 232: }
  6669                           ;Switch_B1.c: 235: if (Idle == 1) {
  6670  152D  0862               	movf	Sw_DimmerOnFunc@Idle,w
  6671  152E  3A01               	xorlw	1
  6672  152F  1D03               	skipz
  6673  1530  0008               	return
  6674                           
  6675                           ;Switch_B1.c: 236: Sw->Flag = 1;
  6676  1531  087A               	movf	_Sw,w
  6677  1532  0086               	movwf	6
  6678  1533  3001               	movlw	1	; select bank2/3
  6679  1534  0087               	movwf	7
  6680  1535  1781               	bsf	1,7
  6681                           
  6682                           ;Switch_B1.c: 237: setBuz(1, 100);
  6683  1536  3064               	movlw	100
  6684  1537  00A9               	movwf	setBuz@time
  6685  1538  3000               	movlw	0
  6686  1539  00AA               	movwf	setBuz@time+1
  6687  153A  3001               	movlw	1
  6688  153B  3189  2137  3195   	fcall	_setBuz
  6689                           
  6690                           ;Switch_B1.c: 238: if (Sw->Status == 0) {
  6691  153E  087A               	movf	_Sw,w
  6692  153F  0086               	movwf	6
  6693  1540  3001               	movlw	1	; select bank2/3
  6694  1541  0087               	movwf	7
  6695  1542  1B01               	btfsc	1,6
  6696  1543  2D6F               	goto	l7138
  6697                           
  6698                           ;Switch_B1.c: 239: Sw->Status = 1;
  6699  1544  087A               	movf	_Sw,w
  6700  1545  0086               	movwf	6
  6701  1546  3001               	movlw	1	; select bank2/3
  6702  1547  0087               	movwf	7
  6703  1548  1701               	bsf	1,6
  6704                           
  6705                           ;Switch_B1.c: 240: setRFSW_Status(sw, 1);
  6706  1549  0020               	movlb	0	; select bank0
  6707  154A  01A2               	clrf	setRFSW_Status@command
  6708  154B  0AA2               	incf	setRFSW_Status@command,f
  6709  154C  0863               	movf	Sw_DimmerOnFunc@sw,w
  6710  154D  31A6  2621  3195   	fcall	_setRFSW_Status
  6711                           
  6712                           ;Switch_B1.c: 242: setDimmerLights_Trigger(sw, 1);
  6713  1550  0020               	movlb	0	; select bank0
  6714  1551  01A2               	clrf	setDimmerLights_Trigger@command
  6715  1552  0AA2               	incf	setDimmerLights_Trigger@command,f
  6716  1553  0863               	movf	Sw_DimmerOnFunc@sw,w
  6717  1554  31A6  267D  3195   	fcall	_setDimmerLights_Trigger
  6718                           
  6719                           ;Switch_B1.c: 243: setDimmerLights_Switch(sw, 1);
  6720  1557  0020               	movlb	0	; select bank0
  6721  1558  01A2               	clrf	setDimmerLights_Switch@command
  6722  1559  0AA2               	incf	setDimmerLights_Switch@command,f
  6723  155A  0863               	movf	Sw_DimmerOnFunc@sw,w
  6724  155B  31A6  266D  3195   	fcall	_setDimmerLights_Switch
  6725                           
  6726                           ;Switch_B1.c: 245: setRF_DimmerLights(sw, Sw->Status);
  6727  155E  087A               	movf	_Sw,w
  6728  155F  0086               	movwf	6
  6729  1560  3001               	movlw	1	; select bank2/3
  6730  1561  0087               	movwf	7
  6731  1562  3000               	movlw	0
  6732  1563  1B01               	btfsc	1,6
  6733  1564  3001               	movlw	1
  6734  1565  0020               	movlb	0	; select bank0
  6735  1566  00DD               	movwf	setRF_DimmerLights@on
  6736  1567  0863               	movf	Sw_DimmerOnFunc@sw,w
  6737  1568  3193  2350  3195   	fcall	_setRF_DimmerLights
  6738                           
  6739                           ;Switch_B1.c: 246: setTxData(1);
  6740  156B  3001               	movlw	1
  6741  156C  318A  2263         	fcall	_setTxData
  6742                           
  6743                           ;Switch_B1.c: 248: } else {
  6744  156E  0008               	return
  6745  156F                     l7138:	
  6746                           
  6747                           ;Switch_B1.c: 249: Sw->Status = 0;
  6748  156F  087A               	movf	_Sw,w
  6749  1570  0086               	movwf	6
  6750  1571  3001               	movlw	1	; select bank2/3
  6751  1572  0087               	movwf	7
  6752  1573  1301               	bcf	1,6
  6753                           
  6754                           ;Switch_B1.c: 250: setRFSW_Status(sw, Sw->Status);
  6755  1574  087A               	movf	_Sw,w
  6756  1575  0086               	movwf	6
  6757  1576  3001               	movlw	1	; select bank2/3
  6758  1577  0087               	movwf	7
  6759  1578  3000               	movlw	0
  6760  1579  1B01               	btfsc	1,6
  6761  157A  3001               	movlw	1
  6762  157B  0020               	movlb	0	; select bank0
  6763  157C  00A2               	movwf	setRFSW_Status@command
  6764  157D  0863               	movf	Sw_DimmerOnFunc@sw,w
  6765  157E  31A6  2621         	fcall	_setRFSW_Status
  6766  1580  0008               	return
  6767  1581                     __end_of_Sw_DimmerOnFunc:	
  6768                           
  6769                           	psect	text21
  6770  142A                     __ptext21:	
  6771 ;; *************** function _Sw_DimmerOffFunc *****************
  6772 ;; Defined at:
  6773 ;;		line 256 in file "../src/Switch_B1.c"
  6774 ;; Parameters:    Size  Location     Type
  6775 ;;  sw              1    wreg     unsigned char 
  6776 ;; Auto vars:     Size  Location     Type
  6777 ;;  sw              1   68[BANK0 ] unsigned char 
  6778 ;; Return value:  Size  Location     Type
  6779 ;;		None               void
  6780 ;; Registers used:
  6781 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6782 ;; Tracked objects:
  6783 ;;		On entry : 0/0
  6784 ;;		On exit  : 0/0
  6785 ;;		Unchanged: 0/0
  6786 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6787 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6788 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6789 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6790 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6791 ;;Total ram usage:        3 bytes
  6792 ;; Hardware stack levels used:    1
  6793 ;; Hardware stack levels required when called:    9
  6794 ;; This function calls:
  6795 ;;		_setDelayOff_GO
  6796 ;;		_setDimmerLights_AdjGo
  6797 ;;		_setDimmerLights_Switch
  6798 ;;		_setDimmerLights_Trigger
  6799 ;;		_setDimmerLights_TriggerAdj
  6800 ;;		_setRF_DimmerLights
  6801 ;;		_setTxData
  6802 ;; This function is called by:
  6803 ;;		_setSw_Main
  6804 ;; This function uses a non-reentrant model
  6805 ;;
  6806                           
  6807                           
  6808                           ;psect for function _Sw_DimmerOffFunc
  6809  142A                     _Sw_DimmerOffFunc:	
  6810                           
  6811                           ;incstack = 0
  6812                           ; Regs used in _Sw_DimmerOffFunc: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6813                           ;Sw_DimmerOffFunc@sw stored from wreg
  6814  142A  0020               	movlb	0	; select bank0
  6815  142B  00E4               	movwf	Sw_DimmerOffFunc@sw
  6816                           
  6817                           ;Switch_B1.c: 257: if (Sw->Flag == 1) {
  6818  142C  087A               	movf	_Sw,w
  6819  142D  0086               	movwf	6
  6820  142E  3001               	movlw	1	; select bank2/3
  6821  142F  0087               	movwf	7
  6822  1430  1F81               	btfss	1,7
  6823  1431  0008               	return
  6824                           
  6825                           ;Switch_B1.c: 258: Sw->Flag = 0;
  6826  1432  087A               	movf	_Sw,w
  6827  1433  0086               	movwf	6
  6828  1434  3001               	movlw	1	; select bank2/3
  6829  1435  0087               	movwf	7
  6830  1436  1381               	bcf	1,7
  6831                           
  6832                           ;Switch_B1.c: 259: if (Sw->Status == 1) {
  6833  1437  087A               	movf	_Sw,w
  6834  1438  0086               	movwf	6
  6835  1439  3001               	movlw	1	; select bank2/3
  6836  143A  0087               	movwf	7
  6837  143B  1F01               	btfss	1,6
  6838  143C  2C76               	goto	l7182
  6839                           
  6840                           ;Switch_B1.c: 260: if (Sw->Adj == 1) {
  6841  143D  0A7A               	incf	_Sw,w
  6842  143E  0086               	movwf	6
  6843  143F  3001               	movlw	1	; select bank2/3
  6844  1440  0087               	movwf	7
  6845  1441  1C01               	btfss	1,0
  6846  1442  0008               	return
  6847                           
  6848                           ;Switch_B1.c: 261: Sw->Adj = 0;
  6849  1443  0A7A               	incf	_Sw,w
  6850  1444  0086               	movwf	6
  6851  1445  3001               	movlw	1	; select bank2/3
  6852  1446  0087               	movwf	7
  6853  1447  1001               	bcf	1,0
  6854                           
  6855                           ;Switch_B1.c: 262: setDimmerLights_TriggerAdj(sw, 1);
  6856  1448  01A2               	clrf	setDimmerLights_TriggerAdj@command
  6857  1449  0AA2               	incf	setDimmerLights_TriggerAdj@command,f
  6858  144A  0864               	movf	Sw_DimmerOffFunc@sw,w
  6859  144B  31A6  26AD  3194   	fcall	_setDimmerLights_TriggerAdj
  6860                           
  6861                           ;Switch_B1.c: 263: setDimmerLights_AdjGo(sw, 0);
  6862  144E  0020               	movlb	0	; select bank0
  6863  144F  01A2               	clrf	setDimmerLights_AdjGo@command
  6864  1450  0864               	movf	Sw_DimmerOffFunc@sw,w
  6865  1451  31A6  269D  3194   	fcall	_setDimmerLights_AdjGo
  6866                           
  6867                           ;Switch_B1.c: 265: product->Data[17]=product->Data[26 + sw];
  6868  1454  0020               	movlb	0	; select bank0
  6869  1455  0864               	movf	Sw_DimmerOffFunc@sw,w
  6870  1456  3E1A               	addlw	26
  6871  1457  077D               	addwf	_product,w
  6872  1458  00E2               	movwf	??_Sw_DimmerOffFunc
  6873  1459  0862               	movf	??_Sw_DimmerOffFunc,w
  6874  145A  0086               	movwf	6
  6875  145B  3001               	movlw	1	; select bank2/3
  6876  145C  0087               	movwf	7
  6877  145D  0801               	movf	1,w
  6878  145E  00E3               	movwf	??_Sw_DimmerOffFunc+1
  6879  145F  087D               	movf	_product,w
  6880  1460  3E11               	addlw	17
  6881  1461  0086               	movwf	6
  6882  1462  3001               	movlw	1	; select bank2/3
  6883  1463  0087               	movwf	7
  6884  1464  0863               	movf	??_Sw_DimmerOffFunc+1,w
  6885  1465  0081               	movwf	1
  6886                           
  6887                           ;Switch_B1.c: 266: setRF_DimmerLights(sw, Sw->Status);
  6888  1466  087A               	movf	_Sw,w
  6889  1467  0086               	movwf	6
  6890  1468  3001               	movlw	1	; select bank2/3
  6891  1469  0087               	movwf	7
  6892  146A  3000               	movlw	0
  6893  146B  1B01               	btfsc	1,6
  6894  146C  3001               	movlw	1
  6895  146D  00DD               	movwf	setRF_DimmerLights@on
  6896  146E  0864               	movf	Sw_DimmerOffFunc@sw,w
  6897  146F  3193  2350  3194   	fcall	_setRF_DimmerLights
  6898                           
  6899                           ;Switch_B1.c: 267: setTxData(1);
  6900  1472  3001               	movlw	1
  6901  1473  318A  2263         	fcall	_setTxData
  6902                           
  6903                           ;Switch_B1.c: 269: }
  6904                           ;Switch_B1.c: 270: } else {
  6905  1475  0008               	return
  6906  1476                     l7182:	
  6907                           
  6908                           ;Switch_B1.c: 271: setDimmerLights_Trigger(sw, 1);
  6909  1476  0020               	movlb	0	; select bank0
  6910  1477  01A2               	clrf	setDimmerLights_Trigger@command
  6911  1478  0AA2               	incf	setDimmerLights_Trigger@command,f
  6912  1479  0864               	movf	Sw_DimmerOffFunc@sw,w
  6913  147A  31A6  267D  3194   	fcall	_setDimmerLights_Trigger
  6914                           
  6915                           ;Switch_B1.c: 272: setDimmerLights_Switch(sw, 0);
  6916  147D  0020               	movlb	0	; select bank0
  6917  147E  01A2               	clrf	setDimmerLights_Switch@command
  6918  147F  0864               	movf	Sw_DimmerOffFunc@sw,w
  6919  1480  31A6  266D  3194   	fcall	_setDimmerLights_Switch
  6920                           
  6921                           ;Switch_B1.c: 274: setDelayOff_GO(sw, 0, 0);
  6922  1483  0020               	movlb	0	; select bank0
  6923  1484  01A3               	clrf	setDelayOff_GO@command
  6924  1485  01A4               	clrf	setDelayOff_GO@value
  6925  1486  0864               	movf	Sw_DimmerOffFunc@sw,w
  6926  1487  3191  2165  3194   	fcall	_setDelayOff_GO
  6927                           
  6928                           ;Switch_B1.c: 275: setRF_DimmerLights(sw, Sw->Status);
  6929  148A  087A               	movf	_Sw,w
  6930  148B  0086               	movwf	6
  6931  148C  3001               	movlw	1	; select bank2/3
  6932  148D  0087               	movwf	7
  6933  148E  3000               	movlw	0
  6934  148F  1B01               	btfsc	1,6
  6935  1490  3001               	movlw	1
  6936  1491  0020               	movlb	0	; select bank0
  6937  1492  00DD               	movwf	setRF_DimmerLights@on
  6938  1493  0864               	movf	Sw_DimmerOffFunc@sw,w
  6939  1494  3193  2350  3194   	fcall	_setRF_DimmerLights
  6940                           
  6941                           ;Switch_B1.c: 276: setTxData(1);
  6942  1497  3001               	movlw	1
  6943  1498  318A  2263         	fcall	_setTxData
  6944  149A  0008               	return
  6945  149B                     __end_of_Sw_DimmerOffFunc:	
  6946                           
  6947                           	psect	text22
  6948  1FB4                     __ptext22:	
  6949 ;; *************** function _Sw_DimmerAdjFunc *****************
  6950 ;; Defined at:
  6951 ;;		line 283 in file "../src/Switch_B1.c"
  6952 ;; Parameters:    Size  Location     Type
  6953 ;;  sw              1    wreg     unsigned char 
  6954 ;; Auto vars:     Size  Location     Type
  6955 ;;  sw              1    5[BANK0 ] unsigned char 
  6956 ;;  Idle            1    4[BANK0 ] unsigned char 
  6957 ;; Return value:  Size  Location     Type
  6958 ;;		None               void
  6959 ;; Registers used:
  6960 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6961 ;; Tracked objects:
  6962 ;;		On entry : 0/0
  6963 ;;		On exit  : 0/0
  6964 ;;		Unchanged: 0/0
  6965 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6966 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6967 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6968 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6969 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6970 ;;Total ram usage:        2 bytes
  6971 ;; Hardware stack levels used:    1
  6972 ;; Hardware stack levels required when called:    7
  6973 ;; This function calls:
  6974 ;;		_setDimmerLights_AdjGo
  6975 ;;		_setDimmerLights_TriggerAdj
  6976 ;;		_setRFSW_Status
  6977 ;; This function is called by:
  6978 ;;		_setSw_Main
  6979 ;; This function uses a non-reentrant model
  6980 ;;
  6981                           
  6982                           
  6983                           ;psect for function _Sw_DimmerAdjFunc
  6984  1FB4                     _Sw_DimmerAdjFunc:	
  6985                           
  6986                           ;incstack = 0
  6987                           ; Regs used in _Sw_DimmerAdjFunc: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6988                           ;Sw_DimmerAdjFunc@sw stored from wreg
  6989  1FB4  0020               	movlb	0	; select bank0
  6990  1FB5  00A5               	movwf	Sw_DimmerAdjFunc@sw
  6991                           
  6992                           ;Switch_B1.c: 284: char Idle = 1;
  6993  1FB6  01A4               	clrf	Sw_DimmerAdjFunc@Idle
  6994  1FB7  0AA4               	incf	Sw_DimmerAdjFunc@Idle,f
  6995                           
  6996                           ;Switch_B1.c: 297: if (sw == 1) {
  6997  1FB8  0825               	movf	Sw_DimmerAdjFunc@sw,w
  6998  1FB9  3A01               	xorlw	1
  6999  1FBA  1D03               	skipz
  7000  1FBB  2FC6               	goto	l7148
  7001                           
  7002                           ;Switch_B1.c: 298: Idle = (DimmerLights2.AdjGo == 1) ? 0 : 1;
  7003  1FBC  1003               	clrc
  7004  1FBD  0022               	movlb	2	; select bank2
  7005  1FBE  1DB7               	btfss	(_DimmerLights2^(0+256)+8),3
  7006  1FBF  1403               	setc
  7007  1FC0  3000               	movlw	0
  7008  1FC1  1803               	btfsc	3,0
  7009  1FC2  3001               	movlw	1
  7010  1FC3  0020               	movlb	0	; select bank0
  7011  1FC4  00A4               	movwf	Sw_DimmerAdjFunc@Idle
  7012                           
  7013                           ;Switch_B1.c: 299: } else if (sw == 2) {
  7014  1FC5  2FD3               	goto	l7152
  7015  1FC6                     l7148:	
  7016  1FC6  0825               	movf	Sw_DimmerAdjFunc@sw,w
  7017  1FC7  3A02               	xorlw	2
  7018  1FC8  1D03               	skipz
  7019  1FC9  2FD3               	goto	l7152
  7020                           
  7021                           ;Switch_B1.c: 300: Idle = (DimmerLights1.AdjGo == 1) ? 0 : 1;
  7022  1FCA  1003               	clrc
  7023  1FCB  0022               	movlb	2	; select bank2
  7024  1FCC  1DA8               	btfss	(_DimmerLights1^(0+256)+8),3
  7025  1FCD  1403               	setc
  7026  1FCE  3000               	movlw	0
  7027  1FCF  1803               	btfsc	3,0
  7028  1FD0  3001               	movlw	1
  7029  1FD1  0020               	movlb	0	; select bank0
  7030  1FD2  00A4               	movwf	Sw_DimmerAdjFunc@Idle
  7031  1FD3                     l7152:	
  7032                           
  7033                           ;Switch_B1.c: 301: }
  7034                           ;Switch_B1.c: 304: if (Idle == 1) {
  7035  1FD3  0824               	movf	Sw_DimmerAdjFunc@Idle,w
  7036  1FD4  3A01               	xorlw	1
  7037  1FD5  1D03               	skipz
  7038  1FD6  0008               	return
  7039                           
  7040                           ;Switch_B1.c: 305: if (Sw->Flag == 1) {
  7041  1FD7  087A               	movf	_Sw,w
  7042  1FD8  0086               	movwf	6
  7043  1FD9  3001               	movlw	1	; select bank2/3
  7044  1FDA  0087               	movwf	7
  7045  1FDB  1F81               	btfss	1,7
  7046  1FDC  0008               	return
  7047                           
  7048                           ;Switch_B1.c: 306: Sw->Hold1 = 1;
  7049  1FDD  087A               	movf	_Sw,w
  7050  1FDE  0086               	movwf	6
  7051  1FDF  3001               	movlw	1	; select bank2/3
  7052  1FE0  0087               	movwf	7
  7053  1FE1  1581               	bsf	1,3
  7054                           
  7055                           ;Switch_B1.c: 307: Sw->Adj = 1;
  7056  1FE2  0A7A               	incf	_Sw,w
  7057  1FE3  0086               	movwf	6
  7058  1FE4  3001               	movlw	1	; select bank2/3
  7059  1FE5  0087               	movwf	7
  7060  1FE6  1401               	bsf	1,0
  7061                           
  7062                           ;Switch_B1.c: 308: Sw->Status = 1;
  7063  1FE7  087A               	movf	_Sw,w
  7064  1FE8  0086               	movwf	6
  7065  1FE9  3001               	movlw	1	; select bank2/3
  7066  1FEA  0087               	movwf	7
  7067  1FEB  1701               	bsf	1,6
  7068                           
  7069                           ;Switch_B1.c: 309: setRFSW_Status(sw, 1);
  7070  1FEC  01A2               	clrf	setRFSW_Status@command
  7071  1FED  0AA2               	incf	setRFSW_Status@command,f
  7072  1FEE  0825               	movf	Sw_DimmerAdjFunc@sw,w
  7073  1FEF  31A6  2621  319F   	fcall	_setRFSW_Status
  7074                           
  7075                           ;Switch_B1.c: 311: setDimmerLights_TriggerAdj(sw, 1);
  7076  1FF2  0020               	movlb	0	; select bank0
  7077  1FF3  01A2               	clrf	setDimmerLights_TriggerAdj@command
  7078  1FF4  0AA2               	incf	setDimmerLights_TriggerAdj@command,f
  7079  1FF5  0825               	movf	Sw_DimmerAdjFunc@sw,w
  7080  1FF6  31A6  26AD  319F   	fcall	_setDimmerLights_TriggerAdj
  7081                           
  7082                           ;Switch_B1.c: 312: setDimmerLights_AdjGo(sw, 1);
  7083  1FF9  0020               	movlb	0	; select bank0
  7084  1FFA  01A2               	clrf	setDimmerLights_AdjGo@command
  7085  1FFB  0AA2               	incf	setDimmerLights_AdjGo@command,f
  7086  1FFC  0825               	movf	Sw_DimmerAdjFunc@sw,w
  7087  1FFD  31A6  269D         	fcall	_setDimmerLights_AdjGo
  7088  1FFF  0008               	return
  7089  2000                     __end_of_Sw_DimmerAdjFunc:	
  7090                           
  7091                           	psect	text23
  7092  26AD                     __ptext23:	
  7093 ;; *************** function _setDimmerLights_TriggerAdj *****************
  7094 ;; Defined at:
  7095 ;;		line 711 in file "../src/Dimmer_B1.c"
  7096 ;; Parameters:    Size  Location     Type
  7097 ;;  lights          1    wreg     unsigned char 
  7098 ;;  command         1    2[BANK0 ] unsigned char 
  7099 ;; Auto vars:     Size  Location     Type
  7100 ;;  lights          1    3[BANK0 ] unsigned char 
  7101 ;; Return value:  Size  Location     Type
  7102 ;;		None               void
  7103 ;; Registers used:
  7104 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7105 ;; Tracked objects:
  7106 ;;		On entry : 0/0
  7107 ;;		On exit  : 0/0
  7108 ;;		Unchanged: 0/0
  7109 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7110 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7111 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7112 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7113 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7114 ;;Total ram usage:        2 bytes
  7115 ;; Hardware stack levels used:    1
  7116 ;; Hardware stack levels required when called:    6
  7117 ;; This function calls:
  7118 ;;		_DimmerLightsPointSelect
  7119 ;; This function is called by:
  7120 ;;		_Sw_DimmerOffFunc
  7121 ;;		_Sw_DimmerAdjFunc
  7122 ;; This function uses a non-reentrant model
  7123 ;;
  7124                           
  7125                           
  7126                           ;psect for function _setDimmerLights_TriggerAdj
  7127  26AD                     _setDimmerLights_TriggerAdj:	
  7128                           
  7129                           ;incstack = 0
  7130                           ; Regs used in _setDimmerLights_TriggerAdj: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  7131                           ;setDimmerLights_TriggerAdj@lights stored from wreg
  7132  26AD  0020               	movlb	0	; select bank0
  7133  26AE  00A3               	movwf	setDimmerLights_TriggerAdj@lights
  7134                           
  7135                           ;Dimmer_B1.c: 713: DimmerLightsPointSelect(lights);
  7136  26AF  0823               	movf	setDimmerLights_TriggerAdj@lights,w
  7137  26B0  31A7  2712         	fcall	_DimmerLightsPointSelect
  7138                           
  7139                           ;Dimmer_B1.c: 714: DimmerLights->TriggerAdj = command;
  7140  26B2  0878               	movf	_DimmerLights,w
  7141  26B3  3E08               	addlw	8
  7142  26B4  0086               	movwf	6
  7143  26B5  3001               	movlw	1	; select bank2/3
  7144  26B6  0087               	movwf	7
  7145  26B7  0020               	movlb	0	; select bank0
  7146  26B8  0822               	movf	setDimmerLights_TriggerAdj@command,w
  7147  26B9  1201               	bcf	1,4
  7148  26BA  1D03               	skipz
  7149  26BB  1601               	bsf	1,4
  7150  26BC  0008               	return
  7151  26BD                     __end_of_setDimmerLights_TriggerAdj:	
  7152                           
  7153                           	psect	text24
  7154  269D                     __ptext24:	
  7155 ;; *************** function _setDimmerLights_AdjGo *****************
  7156 ;; Defined at:
  7157 ;;		line 699 in file "../src/Dimmer_B1.c"
  7158 ;; Parameters:    Size  Location     Type
  7159 ;;  lights          1    wreg     unsigned char 
  7160 ;;  command         1    2[BANK0 ] unsigned char 
  7161 ;; Auto vars:     Size  Location     Type
  7162 ;;  lights          1    3[BANK0 ] unsigned char 
  7163 ;; Return value:  Size  Location     Type
  7164 ;;		None               void
  7165 ;; Registers used:
  7166 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7167 ;; Tracked objects:
  7168 ;;		On entry : 0/0
  7169 ;;		On exit  : 0/0
  7170 ;;		Unchanged: 0/0
  7171 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7172 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7173 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7174 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7175 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7176 ;;Total ram usage:        2 bytes
  7177 ;; Hardware stack levels used:    1
  7178 ;; Hardware stack levels required when called:    6
  7179 ;; This function calls:
  7180 ;;		_DimmerLightsPointSelect
  7181 ;; This function is called by:
  7182 ;;		_Sw_DimmerOffFunc
  7183 ;;		_Sw_DimmerAdjFunc
  7184 ;; This function uses a non-reentrant model
  7185 ;;
  7186                           
  7187                           
  7188                           ;psect for function _setDimmerLights_AdjGo
  7189  269D                     _setDimmerLights_AdjGo:	
  7190                           
  7191                           ;incstack = 0
  7192                           ; Regs used in _setDimmerLights_AdjGo: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  7193                           ;setDimmerLights_AdjGo@lights stored from wreg
  7194  269D  0020               	movlb	0	; select bank0
  7195  269E  00A3               	movwf	setDimmerLights_AdjGo@lights
  7196                           
  7197                           ;Dimmer_B1.c: 701: DimmerLightsPointSelect(lights);
  7198  269F  0823               	movf	setDimmerLights_AdjGo@lights,w
  7199  26A0  31A7  2712         	fcall	_DimmerLightsPointSelect
  7200                           
  7201                           ;Dimmer_B1.c: 702: DimmerLights->AdjGo = command;
  7202  26A2  0878               	movf	_DimmerLights,w
  7203  26A3  3E08               	addlw	8
  7204  26A4  0086               	movwf	6
  7205  26A5  3001               	movlw	1	; select bank2/3
  7206  26A6  0087               	movwf	7
  7207  26A7  0020               	movlb	0	; select bank0
  7208  26A8  0822               	movf	setDimmerLights_AdjGo@command,w
  7209  26A9  1181               	bcf	1,3
  7210  26AA  1D03               	skipz
  7211  26AB  1581               	bsf	1,3
  7212  26AC  0008               	return
  7213  26AD                     __end_of_setDimmerLights_AdjGo:	
  7214                           
  7215                           	psect	text25
  7216  25F9                     __ptext25:	
  7217 ;; *************** function _Switch_Initialization *****************
  7218 ;; Defined at:
  7219 ;;		line 37 in file "../src/Switch_B1.c"
  7220 ;; Parameters:    Size  Location     Type
  7221 ;;		None
  7222 ;; Auto vars:     Size  Location     Type
  7223 ;;		None
  7224 ;; Return value:  Size  Location     Type
  7225 ;;		None               void
  7226 ;; Registers used:
  7227 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7228 ;; Tracked objects:
  7229 ;;		On entry : 0/0
  7230 ;;		On exit  : 0/0
  7231 ;;		Unchanged: 0/0
  7232 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7233 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7234 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7235 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7236 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7237 ;;Total ram usage:        0 bytes
  7238 ;; Hardware stack levels used:    1
  7239 ;; Hardware stack levels required when called:    8
  7240 ;; This function calls:
  7241 ;;		_TouchPower
  7242 ;;		_setSw_Initialization
  7243 ;; This function is called by:
  7244 ;;		_main
  7245 ;; This function uses a non-reentrant model
  7246 ;;
  7247                           
  7248                           
  7249                           ;psect for function _Switch_Initialization
  7250  25F9                     _Switch_Initialization:	
  7251                           
  7252                           ;Switch_B1.c: 38: TouchPower();
  7253                           
  7254                           ;incstack = 0
  7255                           ; Regs used in _Switch_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  7256  25F9  31A4  24F9  31A5   	fcall	_TouchPower
  7257                           
  7258                           ;Switch_B1.c: 40: WPUB1 = 0;
  7259  25FC  0024               	movlb	4	; select bank4
  7260  25FD  108D               	bcf	13,1	;volatile
  7261                           
  7262                           ;Switch_B1.c: 49: setSw_Initialization(1);
  7263  25FE  3001               	movlw	1
  7264  25FF  31A5  2537  31A5   	fcall	_setSw_Initialization
  7265                           
  7266                           ;Switch_B1.c: 52: setSw_Initialization(2);
  7267  2602  3002               	movlw	2
  7268  2603  31A5  2537         	fcall	_setSw_Initialization
  7269  2605  0008               	return
  7270  2606                     __end_of_Switch_Initialization:	
  7271                           
  7272                           	psect	text26
  7273  2537                     __ptext26:	
  7274 ;; *************** function _setSw_Initialization *****************
  7275 ;; Defined at:
  7276 ;;		line 77 in file "../src/Switch_B1.c"
  7277 ;; Parameters:    Size  Location     Type
  7278 ;;  sw              1    wreg     unsigned char 
  7279 ;; Auto vars:     Size  Location     Type
  7280 ;;  sw              1    4[BANK0 ] unsigned char 
  7281 ;; Return value:  Size  Location     Type
  7282 ;;		None               void
  7283 ;; Registers used:
  7284 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7285 ;; Tracked objects:
  7286 ;;		On entry : 0/0
  7287 ;;		On exit  : 0/0
  7288 ;;		Unchanged: 0/0
  7289 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7290 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7291 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7292 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7293 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7294 ;;Total ram usage:        1 bytes
  7295 ;; Hardware stack levels used:    1
  7296 ;; Hardware stack levels required when called:    7
  7297 ;; This function calls:
  7298 ;;		_setLED
  7299 ;; This function is called by:
  7300 ;;		_Switch_Initialization
  7301 ;; This function uses a non-reentrant model
  7302 ;;
  7303                           
  7304                           
  7305                           ;psect for function _setSw_Initialization
  7306  2537                     _setSw_Initialization:	
  7307                           
  7308                           ;incstack = 0
  7309                           ; Regs used in _setSw_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7310                           ;setSw_Initialization@sw stored from wreg
  7311  2537  0020               	movlb	0	; select bank0
  7312  2538  00A4               	movwf	setSw_Initialization@sw
  7313                           
  7314                           ;Switch_B1.c: 78: setLED(sw, 1);
  7315  2539  01A2               	clrf	setLED@command
  7316  253A  0AA2               	incf	setLED@command,f
  7317  253B  0824               	movf	setSw_Initialization@sw,w
  7318  253C  3191  21C2         	fcall	_setLED
  7319  253E  0008               	return
  7320  253F                     __end_of_setSw_Initialization:	
  7321                           
  7322                           	psect	text27
  7323  24F9                     __ptext27:	
  7324 ;; *************** function _TouchPower *****************
  7325 ;; Defined at:
  7326 ;;		line 10 in file "../src/Switch_B1.c"
  7327 ;; Parameters:    Size  Location     Type
  7328 ;;		None
  7329 ;; Auto vars:     Size  Location     Type
  7330 ;;		None
  7331 ;; Return value:  Size  Location     Type
  7332 ;;		None               void
  7333 ;; Registers used:
  7334 ;;		None
  7335 ;; Tracked objects:
  7336 ;;		On entry : 0/0
  7337 ;;		On exit  : 0/0
  7338 ;;		Unchanged: 0/0
  7339 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7340 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7341 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7342 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7343 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7344 ;;Total ram usage:        0 bytes
  7345 ;; Hardware stack levels used:    1
  7346 ;; Hardware stack levels required when called:    5
  7347 ;; This function calls:
  7348 ;;		Nothing
  7349 ;; This function is called by:
  7350 ;;		_Switch_Initialization
  7351 ;; This function uses a non-reentrant model
  7352 ;;
  7353                           
  7354                           
  7355                           ;psect for function _TouchPower
  7356  24F9                     _TouchPower:	
  7357  24F9                     l2928:	
  7358                           ;Switch_B1.c: 11: while (RC5 == 0)
  7359                           
  7360                           ;incstack = 0
  7361                           ; Regs used in _TouchPower: []
  7362                           
  7363  24F9  0020               	movlb	0	; select bank0
  7364  24FA  1A8E               	btfsc	14,5	;volatile
  7365  24FB  0008               	return
  7366                           
  7367                           ;Switch_B1.c: 12: RC5 = 1;
  7368  24FC  168E               	bsf	14,5	;volatile
  7369  24FD  2CF9               	goto	l2928
  7370  24FE                     __end_of_TouchPower:	
  7371                           
  7372                           	psect	text28
  7373  24F5                     __ptext28:	
  7374 ;; *************** function _RF_Main *****************
  7375 ;; Defined at:
  7376 ;;		line 26 in file "../src/RF_Control_B1.c"
  7377 ;; Parameters:    Size  Location     Type
  7378 ;;		None
  7379 ;; Auto vars:     Size  Location     Type
  7380 ;;		None
  7381 ;; Return value:  Size  Location     Type
  7382 ;;		None               void
  7383 ;; Registers used:
  7384 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7385 ;; Tracked objects:
  7386 ;;		On entry : 0/0
  7387 ;;		On exit  : 0/0
  7388 ;;		Unchanged: 0/0
  7389 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7390 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7391 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7392 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7393 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7394 ;;Total ram usage:        0 bytes
  7395 ;; Hardware stack levels used:    1
  7396 ;; Hardware stack levels required when called:   14
  7397 ;; This function calls:
  7398 ;;		_setRF_Main
  7399 ;; This function is called by:
  7400 ;;		_main
  7401 ;; This function uses a non-reentrant model
  7402 ;;
  7403                           
  7404                           
  7405                           ;psect for function _RF_Main
  7406  24F5                     _RF_Main:	
  7407                           
  7408                           ;RF_Control_B1.c: 28: setRF_Main(1);
  7409                           
  7410                           ;incstack = 0
  7411                           ; Regs used in _RF_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7412  24F5  3001               	movlw	1
  7413  24F6  318D  2532         	fcall	_setRF_Main
  7414  24F8  0008               	return
  7415  24F9                     __end_of_RF_Main:	
  7416                           
  7417                           	psect	text29
  7418  0D32                     __ptext29:	
  7419 ;; *************** function _setRF_Main *****************
  7420 ;; Defined at:
  7421 ;;		line 64 in file "../src/RF_Control_B1.c"
  7422 ;; Parameters:    Size  Location     Type
  7423 ;;  rf              1    wreg     unsigned char 
  7424 ;; Auto vars:     Size  Location     Type
  7425 ;;  rf              1   74[BANK0 ] unsigned char 
  7426 ;; Return value:  Size  Location     Type
  7427 ;;		None               void
  7428 ;; Registers used:
  7429 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7430 ;; Tracked objects:
  7431 ;;		On entry : 0/0
  7432 ;;		On exit  : 0/0
  7433 ;;		Unchanged: 0/0
  7434 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7435 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7436 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7437 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7438 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7439 ;;Total ram usage:        3 bytes
  7440 ;; Hardware stack levels used:    1
  7441 ;; Hardware stack levels required when called:   13
  7442 ;; This function calls:
  7443 ;;		_CC2500_RxData
  7444 ;;		_CC2500_TxData
  7445 ;;		_CC2500_WriteCommand
  7446 ;;		_RF_RxDisable
  7447 ;;		_RfPointSelect
  7448 ;;		_getRxData
  7449 ;; This function is called by:
  7450 ;;		_RF_Main
  7451 ;; This function uses a non-reentrant model
  7452 ;;
  7453                           
  7454                           
  7455                           ;psect for function _setRF_Main
  7456  0D32                     _setRF_Main:	
  7457                           
  7458                           ;incstack = 0
  7459                           ; Regs used in _setRF_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7460                           ;setRF_Main@rf stored from wreg
  7461  0D32  0020               	movlb	0	; select bank0
  7462  0D33  00EA               	movwf	setRF_Main@rf
  7463                           
  7464                           ;RF_Control_B1.c: 65: RfPointSelect(rf);
  7465  0D34  086A               	movf	setRF_Main@rf,w
  7466  0D35  31A6  263F  318D   	fcall	_RfPointSelect
  7467                           
  7468                           ;RF_Control_B1.c: 66: if (RF->Enable == 1) {
  7469  0D38  0021               	movlb	1	; select bank1
  7470  0D39  083F               	movf	_RF^(0+128),w
  7471  0D3A  0086               	movwf	6
  7472  0D3B  0187               	clrf	7
  7473  0D3C  1C01               	btfss	1,0
  7474  0D3D  0008               	return
  7475                           
  7476                           ;RF_Control_B1.c: 69: if (Buz->GO == 0) {
  7477  0D3E  0837               	movf	_Buz^(0+128),w
  7478  0D3F  0086               	movwf	6
  7479  0D40  3001               	movlw	1	; select bank2/3
  7480  0D41  0087               	movwf	7
  7481  0D42  1881               	btfsc	1,1
  7482  0D43  0008               	return
  7483                           
  7484                           ;RF_Control_B1.c: 75: RF->Key = (RA6 == 1 || RA4 == 1 || RA0 == 1 || RB1 == 1) ? 1 : 0;
  7485  0D44  0020               	movlb	0	; select bank0
  7486  0D45  01EB               	clrf	_setRF_Main$5264
  7487  0D46  0AEB               	incf	_setRF_Main$5264,f
  7488  0D47  1F0C               	btfss	12,6	;volatile
  7489  0D48  1A0C               	btfsc	12,4	;volatile
  7490  0D49  2D4E               	goto	l7710
  7491  0D4A  1C0C               	btfss	12,0	;volatile
  7492  0D4B  188D               	btfsc	13,1	;volatile
  7493  0D4C  2D4E               	goto	l7710
  7494  0D4D  01EB               	clrf	_setRF_Main$5264
  7495  0D4E                     l7710:	
  7496  0D4E  0021               	movlb	1	; select bank1
  7497  0D4F  083F               	movf	_RF^(0+128),w
  7498  0D50  0086               	movwf	6
  7499  0D51  0187               	clrf	7
  7500  0D52  0020               	movlb	0	; select bank0
  7501  0D53  086B               	movf	_setRF_Main$5264,w
  7502  0D54  1381               	bcf	1,7
  7503  0D55  1D03               	skipz
  7504  0D56  1781               	bsf	1,7
  7505                           
  7506                           ;RF_Control_B1.c: 81: if (RF->Key == 1 && RF->Learn == 0) {
  7507  0D57  0021               	movlb	1	; select bank1
  7508  0D58  083F               	movf	_RF^(0+128),w
  7509  0D59  0086               	movwf	6
  7510  0D5A  0187               	clrf	7
  7511  0D5B  1F81               	btfss	1,7
  7512  0D5C  2D6A               	goto	l7720
  7513  0D5D  083F               	movf	_RF^(0+128),w
  7514  0D5E  0086               	movwf	6
  7515  0D5F  0187               	clrf	7
  7516  0D60  1B01               	btfsc	1,6
  7517  0D61  2D6A               	goto	l7720
  7518                           
  7519                           ;RF_Control_B1.c: 82: RF->Run = 1;
  7520  0D62  0A3F               	incf	_RF^(0+128),w
  7521  0D63  0086               	movwf	6
  7522  0D64  0187               	clrf	7
  7523  0D65  1481               	bsf	1,1
  7524                           
  7525                           ;RF_Control_B1.c: 83: RF_RxDisable(1);
  7526  0D66  3001               	movlw	1
  7527  0D67  319A  2215         	fcall	_RF_RxDisable
  7528                           
  7529                           ;RF_Control_B1.c: 84: } else {
  7530  0D69  0008               	return
  7531  0D6A                     l7720:	
  7532                           
  7533                           ;RF_Control_B1.c: 85: if (RF->Run == 1 && RF->Learn == 0) {
  7534  0D6A  0021               	movlb	1	; select bank1
  7535  0D6B  0A3F               	incf	_RF^(0+128),w
  7536  0D6C  0086               	movwf	6
  7537  0D6D  0187               	clrf	7
  7538  0D6E  1C81               	btfss	1,1
  7539  0D6F  2D93               	goto	l7732
  7540  0D70  083F               	movf	_RF^(0+128),w
  7541  0D71  0086               	movwf	6
  7542  0D72  0187               	clrf	7
  7543  0D73  1B01               	btfsc	1,6
  7544  0D74  2D93               	goto	l7732
  7545                           
  7546                           ;RF_Control_B1.c: 86: RF->Count++;
  7547  0D75  3001               	movlw	1
  7548  0D76  0020               	movlb	0	; select bank0
  7549  0D77  00E9               	movwf	??_setRF_Main
  7550  0D78  0021               	movlb	1	; select bank1
  7551  0D79  083F               	movf	_RF^(0+128),w
  7552  0D7A  3E03               	addlw	3
  7553  0D7B  0086               	movwf	6
  7554  0D7C  0187               	clrf	7
  7555  0D7D  0020               	movlb	0	; select bank0
  7556  0D7E  0869               	movf	??_setRF_Main,w
  7557  0D7F  0781               	addwf	1,f
  7558                           
  7559                           ;RF_Control_B1.c: 87: if (RF->Count == 5) {
  7560  0D80  0021               	movlb	1	; select bank1
  7561  0D81  083F               	movf	_RF^(0+128),w
  7562  0D82  3E03               	addlw	3
  7563  0D83  0086               	movwf	6
  7564  0D84  0187               	clrf	7
  7565  0D85  0801               	movf	1,w
  7566  0D86  3A05               	xorlw	5
  7567  0D87  1D03               	skipz
  7568  0D88  0008               	return
  7569                           
  7570                           ;RF_Control_B1.c: 88: RF->Count = 0;
  7571  0D89  083F               	movf	_RF^(0+128),w
  7572  0D8A  3E03               	addlw	3
  7573  0D8B  0086               	movwf	6
  7574  0D8C  0187               	clrf	7
  7575  0D8D  0181               	clrf	1
  7576                           
  7577                           ;RF_Control_B1.c: 89: RF->Run = 0;
  7578  0D8E  0A3F               	incf	_RF^(0+128),w
  7579  0D8F  0086               	movwf	6
  7580  0D90  0187               	clrf	7
  7581  0D91  1081               	bcf	1,1
  7582                           
  7583                           ;RF_Control_B1.c: 90: }
  7584                           ;RF_Control_B1.c: 91: } else {
  7585  0D92  0008               	return
  7586  0D93                     l7732:	
  7587                           
  7588                           ;RF_Control_B1.c: 92: RF->Count = 0;
  7589  0D93  083F               	movf	_RF^(0+128),w
  7590  0D94  3E03               	addlw	3
  7591  0D95  0086               	movwf	6
  7592  0D96  0187               	clrf	7
  7593  0D97  0181               	clrf	1
  7594                           
  7595                           ;RF_Control_B1.c: 93: RF->Run = 0;
  7596  0D98  0A3F               	incf	_RF^(0+128),w
  7597  0D99  0086               	movwf	6
  7598  0D9A  0187               	clrf	7
  7599  0D9B  1081               	bcf	1,1
  7600                           
  7601                           ;RF_Control_B1.c: 95: if (RF->ReceiveGO == 1) {
  7602  0D9C  083F               	movf	_RF^(0+128),w
  7603  0D9D  0086               	movwf	6
  7604  0D9E  0187               	clrf	7
  7605  0D9F  1C81               	btfss	1,1
  7606  0DA0  2DB1               	goto	l7746
  7607                           
  7608                           ;RF_Control_B1.c: 96: RF->ReceiveGO = 0;
  7609  0DA1  083F               	movf	_RF^(0+128),w
  7610  0DA2  0086               	movwf	6
  7611  0DA3  0187               	clrf	7
  7612  0DA4  1081               	bcf	1,1
  7613                           
  7614                           ;RF_Control_B1.c: 97: CC2500_RxData();
  7615  0DA5  318B  23AD  318D   	fcall	_CC2500_RxData
  7616                           
  7617                           ;RF_Control_B1.c: 104: getRxData(1);
  7618  0DA8  3001               	movlw	1
  7619  0DA9  3190  2012         	fcall	_getRxData
  7620                           
  7621                           ;RF_Control_B1.c: 107: RF->Run = 1;
  7622  0DAB  0021               	movlb	1	; select bank1
  7623  0DAC  0A3F               	incf	_RF^(0+128),w
  7624  0DAD  0086               	movwf	6
  7625  0DAE  0187               	clrf	7
  7626  0DAF  1481               	bsf	1,1
  7627                           
  7628                           ;RF_Control_B1.c: 108: } else {
  7629  0DB0  0008               	return
  7630  0DB1                     l7746:	
  7631                           
  7632                           ;RF_Control_B1.c: 109: if (RF->Learn == 0) {
  7633  0DB1  083F               	movf	_RF^(0+128),w
  7634  0DB2  0086               	movwf	6
  7635  0DB3  0187               	clrf	7
  7636  0DB4  1B01               	btfsc	1,6
  7637  0DB5  2DF4               	goto	l7774
  7638                           
  7639                           ;RF_Control_B1.c: 110: if (RF->TransceiveGO == 1) {
  7640  0DB6  083F               	movf	_RF^(0+128),w
  7641  0DB7  0086               	movwf	6
  7642  0DB8  0187               	clrf	7
  7643  0DB9  1D01               	btfss	1,2
  7644  0DBA  2DD7               	goto	l7760
  7645                           
  7646                           ;RF_Control_B1.c: 111: RF->TransceiveGO = 0;
  7647  0DBB  083F               	movf	_RF^(0+128),w
  7648  0DBC  0086               	movwf	6
  7649  0DBD  0187               	clrf	7
  7650  0DBE  1101               	bcf	1,2
  7651                           
  7652                           ;RF_Control_B1.c: 112: RF->RxStatus = 0;
  7653  0DBF  083F               	movf	_RF^(0+128),w
  7654  0DC0  0086               	movwf	6
  7655  0DC1  0187               	clrf	7
  7656  0DC2  1181               	bcf	1,3
  7657                           
  7658                           ;RF_Control_B1.c: 113: RF->ReceiveGO = 0;
  7659  0DC3  083F               	movf	_RF^(0+128),w
  7660  0DC4  0086               	movwf	6
  7661  0DC5  0187               	clrf	7
  7662  0DC6  1081               	bcf	1,1
  7663                           
  7664                           ;RF_Control_B1.c: 115: CC2500_WriteCommand(0x36);
  7665  0DC7  3036               	movlw	54
  7666  0DC8  31A6  265D  318D   	fcall	_CC2500_WriteCommand
  7667                           
  7668                           ;RF_Control_B1.c: 116: CC2500_WriteCommand(0x3B);
  7669  0DCB  303B               	movlw	59
  7670  0DCC  31A6  265D  318D   	fcall	_CC2500_WriteCommand
  7671                           
  7672                           ;RF_Control_B1.c: 117: CC2500_TxData();
  7673  0DCF  319E  2613         	fcall	_CC2500_TxData
  7674                           
  7675                           ;RF_Control_B1.c: 118: RF->Run = 1;
  7676  0DD1  0021               	movlb	1	; select bank1
  7677  0DD2  0A3F               	incf	_RF^(0+128),w
  7678  0DD3  0086               	movwf	6
  7679  0DD4  0187               	clrf	7
  7680  0DD5  1481               	bsf	1,1
  7681                           
  7682                           ;RF_Control_B1.c: 119: } else {
  7683  0DD6  0008               	return
  7684  0DD7                     l7760:	
  7685                           
  7686                           ;RF_Control_B1.c: 121: if (RF->RxStatus == 0 && RF->ReceiveGO == 0) {
  7687  0DD7  083F               	movf	_RF^(0+128),w
  7688  0DD8  0086               	movwf	6
  7689  0DD9  0187               	clrf	7
  7690  0DDA  1981               	btfsc	1,3
  7691  0DDB  0008               	return
  7692  0DDC  083F               	movf	_RF^(0+128),w
  7693  0DDD  0086               	movwf	6
  7694  0DDE  0187               	clrf	7
  7695  0DDF  1881               	btfsc	1,1
  7696  0DE0  0008               	return
  7697                           
  7698                           ;RF_Control_B1.c: 122: RF->RxStatus = 1;
  7699  0DE1  083F               	movf	_RF^(0+128),w
  7700  0DE2  0086               	movwf	6
  7701  0DE3  0187               	clrf	7
  7702  0DE4  1581               	bsf	1,3
  7703                           
  7704                           ;RF_Control_B1.c: 123: CC2500_WriteCommand(0x36);
  7705  0DE5  3036               	movlw	54
  7706  0DE6  31A6  265D  318D   	fcall	_CC2500_WriteCommand
  7707                           
  7708                           ;RF_Control_B1.c: 124: CC2500_WriteCommand(0x3A);
  7709  0DE9  303A               	movlw	58
  7710  0DEA  31A6  265D  318D   	fcall	_CC2500_WriteCommand
  7711                           
  7712                           ;RF_Control_B1.c: 125: CC2500_WriteCommand(0x34);
  7713  0DED  3034               	movlw	52
  7714  0DEE  31A6  265D         	fcall	_CC2500_WriteCommand
  7715                           
  7716                           ;RF_Control_B1.c: 127: RB5 = RB5 == 1 ? 0 : 1;
  7717  0DF0  3020               	movlw	32
  7718  0DF1  0020               	movlb	0	; select bank0
  7719  0DF2  068D               	xorwf	13,f
  7720                           
  7721                           ;RF_Control_B1.c: 128: }
  7722                           ;RF_Control_B1.c: 131: }
  7723                           ;RF_Control_B1.c: 132: } else {
  7724  0DF3  0008               	return
  7725  0DF4                     l7774:	
  7726                           
  7727                           ;RF_Control_B1.c: 134: if (RF->RxStatus == 0 && RF->ReceiveGO == 0) {
  7728  0DF4  0021               	movlb	1	; select bank1
  7729  0DF5  083F               	movf	_RF^(0+128),w
  7730  0DF6  0086               	movwf	6
  7731  0DF7  0187               	clrf	7
  7732  0DF8  1981               	btfsc	1,3
  7733  0DF9  0008               	return
  7734  0DFA  083F               	movf	_RF^(0+128),w
  7735  0DFB  0086               	movwf	6
  7736  0DFC  0187               	clrf	7
  7737  0DFD  1881               	btfsc	1,1
  7738  0DFE  0008               	return
  7739                           
  7740                           ;RF_Control_B1.c: 135: RF->RxStatus = 1;
  7741  0DFF  083F               	movf	_RF^(0+128),w
  7742  0E00  0086               	movwf	6
  7743  0E01  0187               	clrf	7
  7744  0E02  1581               	bsf	1,3
  7745                           
  7746                           ;RF_Control_B1.c: 136: CC2500_WriteCommand(0x36);
  7747  0E03  3036               	movlw	54
  7748  0E04  31A6  265D  318D   	fcall	_CC2500_WriteCommand
  7749                           
  7750                           ;RF_Control_B1.c: 137: CC2500_WriteCommand(0x3A);
  7751  0E07  303A               	movlw	58
  7752  0E08  31A6  265D  318D   	fcall	_CC2500_WriteCommand
  7753                           
  7754                           ;RF_Control_B1.c: 138: CC2500_WriteCommand(0x34);
  7755  0E0B  3034               	movlw	52
  7756  0E0C  31A6  265D         	fcall	_CC2500_WriteCommand
  7757                           
  7758                           ;RF_Control_B1.c: 140: RB5 = RB5 == 1 ? 0 : 1;
  7759  0E0E  3020               	movlw	32
  7760  0E0F  0020               	movlb	0	; select bank0
  7761  0E10  068D               	xorwf	13,f
  7762  0E11  0008               	return
  7763  0E12                     __end_of_setRF_Main:	
  7764                           
  7765                           	psect	text30
  7766  1012                     __ptext30:	
  7767 ;; *************** function _getRxData *****************
  7768 ;; Defined at:
  7769 ;;		line 228 in file "../src/RF_Control_B1.c"
  7770 ;; Parameters:    Size  Location     Type
  7771 ;;  rf              1    wreg     unsigned char 
  7772 ;; Auto vars:     Size  Location     Type
  7773 ;;  rf              1   72[BANK0 ] unsigned char 
  7774 ;; Return value:  Size  Location     Type
  7775 ;;		None               void
  7776 ;; Registers used:
  7777 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7778 ;; Tracked objects:
  7779 ;;		On entry : 0/0
  7780 ;;		On exit  : 0/0
  7781 ;;		Unchanged: 0/0
  7782 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7783 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7784 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7785 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7786 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7787 ;;Total ram usage:        1 bytes
  7788 ;; Hardware stack levels used:    1
  7789 ;; Hardware stack levels required when called:   12
  7790 ;; This function calls:
  7791 ;;		_RfPointSelect
  7792 ;;		_setControl_Lights_Table
  7793 ;;		_setLog_Code
  7794 ;; This function is called by:
  7795 ;;		_setRF_Main
  7796 ;; This function uses a non-reentrant model
  7797 ;;
  7798                           
  7799                           
  7800                           ;psect for function _getRxData
  7801  1012                     _getRxData:	
  7802                           
  7803                           ;incstack = 0
  7804                           ; Regs used in _getRxData: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7805                           ;getRxData@rf stored from wreg
  7806  1012  0020               	movlb	0	; select bank0
  7807  1013  00E8               	movwf	getRxData@rf
  7808                           
  7809                           ;RF_Control_B1.c: 229: RfPointSelect(rf);
  7810  1014  0868               	movf	getRxData@rf,w
  7811  1015  31A6  263F  3190   	fcall	_RfPointSelect
  7812                           
  7813                           ;RF_Control_B1.c: 230: if (RF->Learn) {
  7814  1018  0021               	movlb	1	; select bank1
  7815  1019  083F               	movf	_RF^(0+128),w
  7816  101A  0086               	movwf	6
  7817  101B  0187               	clrf	7
  7818  101C  1F01               	btfss	1,6
  7819  101D  2829               	goto	l7078
  7820                           
  7821                           ;RF_Control_B1.c: 231: if (RF_Data[0] == 0x0 && RF_Data[1] == 0x64)
  7822  101E  08A0               	movf	_RF_Data^(0+128),f
  7823  101F  1D03               	skipz
  7824  1020  0008               	return
  7825  1021  0821               	movf	(_RF_Data^(0+128)+1),w
  7826  1022  3A64               	xorlw	100
  7827  1023  1D03               	skipz
  7828  1024  0008               	return
  7829                           
  7830                           ;RF_Control_B1.c: 232: {
  7831                           ;RF_Control_B1.c: 233: setLog_Code(1);
  7832  1025  3001               	movlw	1
  7833  1026  319F  276D         	fcall	_setLog_Code
  7834                           
  7835                           ;RF_Control_B1.c: 234: }
  7836                           ;RF_Control_B1.c: 235: } else {
  7837  1028  0008               	return
  7838  1029                     l7078:	
  7839                           
  7840                           ;RF_Control_B1.c: 236: if (RF_Data[0] == 0x00 && RF_Data[1] == 0x02)
  7841  1029  0021               	movlb	1	; select bank1
  7842  102A  08A0               	movf	_RF_Data^(0+128),f
  7843  102B  1D03               	skipz
  7844  102C  0008               	return
  7845  102D  0821               	movf	(_RF_Data^(0+128)+1),w
  7846  102E  3A02               	xorlw	2
  7847  102F  1D03               	skipz
  7848  1030  0008               	return
  7849                           
  7850                           ;RF_Control_B1.c: 237: {
  7851                           ;RF_Control_B1.c: 238: if (RF_Data[12] == 0xff && RF_Data[13] == 0xff && RF_Data[14] == 
      +                          0xff) {
  7852  1031  082C               	movf	(_RF_Data^(0+128)+12),w
  7853  1032  3AFF               	xorlw	255
  7854  1033  1D03               	skipz
  7855  1034  283F               	goto	l7090
  7856  1035  082D               	movf	(_RF_Data^(0+128)+13),w
  7857  1036  3AFF               	xorlw	255
  7858  1037  1D03               	skipz
  7859  1038  283F               	goto	l7090
  7860  1039  082E               	movf	(_RF_Data^(0+128)+14),w
  7861  103A  3AFF               	xorlw	255
  7862  103B  1D03               	skipz
  7863  103C  283F               	goto	l7090
  7864                           
  7865                           ;RF_Control_B1.c: 239: __nop();
  7866  103D  0000               	nop
  7867                           
  7868                           ;RF_Control_B1.c: 240: } else {
  7869  103E  0008               	return
  7870  103F                     l7090:	
  7871                           
  7872                           ;RF_Control_B1.c: 241: if (RF_Data[12] == product->Data[12] && RF_Data[13] == product->D
      +                          ata[13] && RF_Data[14] == product->Data[14]) {
  7873  103F  087D               	movf	_product,w
  7874  1040  3E0C               	addlw	12
  7875  1041  0086               	movwf	6
  7876  1042  3001               	movlw	1	; select bank2/3
  7877  1043  0087               	movwf	7
  7878  1044  0021               	movlb	1	; select bank1
  7879  1045  082C               	movf	(_RF_Data^(0+128)+12),w
  7880  1046  0601               	xorwf	1,w
  7881  1047  1D03               	skipz
  7882  1048  0008               	return
  7883  1049  087D               	movf	_product,w
  7884  104A  3E0D               	addlw	13
  7885  104B  0086               	movwf	6
  7886  104C  3001               	movlw	1	; select bank2/3
  7887  104D  0087               	movwf	7
  7888  104E  082D               	movf	(_RF_Data^(0+128)+13),w
  7889  104F  0601               	xorwf	1,w
  7890  1050  1D03               	skipz
  7891  1051  0008               	return
  7892  1052  087D               	movf	_product,w
  7893  1053  3E0E               	addlw	14
  7894  1054  0086               	movwf	6
  7895  1055  3001               	movlw	1	; select bank2/3
  7896  1056  0087               	movwf	7
  7897  1057  082E               	movf	(_RF_Data^(0+128)+14),w
  7898  1058  0601               	xorwf	1,w
  7899  1059  1D03               	skipz
  7900  105A  0008               	return
  7901                           
  7902                           ;RF_Control_B1.c: 242: setControl_Lights_Table(1);
  7903  105B  3001               	movlw	1
  7904  105C  3188  20A5         	fcall	_setControl_Lights_Table
  7905                           
  7906                           ;RF_Control_B1.c: 249: {
  7907                           ;RF_Control_B1.c: 250: ;
  7908                           
  7909                           ;RF_Control_B1.c: 246: {
  7910                           ;RF_Control_B1.c: 247: ;
  7911                           ;RF_Control_B1.c: 248: } else if (RF_Data[0] == 0x0 && RF_Data[1] == 0x65)
  7912                           
  7913                           ;RF_Control_B1.c: 243: }
  7914                           ;RF_Control_B1.c: 244: }
  7915                           ;RF_Control_B1.c: 245: } else if (RF_Data[0] == 0xff && RF_Data[1] == 0x02)
  7916  105E  0008               	return
  7917  105F                     __end_of_getRxData:	
  7918                           
  7919                           	psect	text31
  7920  1F6D                     __ptext31:	
  7921 ;; *************** function _setLog_Code *****************
  7922 ;; Defined at:
  7923 ;;		line 260 in file "../src/RF_Control_B1.c"
  7924 ;; Parameters:    Size  Location     Type
  7925 ;;  rf              1    wreg     unsigned char 
  7926 ;; Auto vars:     Size  Location     Type
  7927 ;;  rf              1   14[BANK0 ] unsigned char 
  7928 ;; Return value:  Size  Location     Type
  7929 ;;		None               void
  7930 ;; Registers used:
  7931 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7932 ;; Tracked objects:
  7933 ;;		On entry : 0/0
  7934 ;;		On exit  : 0/0
  7935 ;;		Unchanged: 0/0
  7936 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7937 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7938 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7939 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7940 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7941 ;;Total ram usage:        2 bytes
  7942 ;; Hardware stack levels used:    1
  7943 ;; Hardware stack levels required when called:    7
  7944 ;; This function calls:
  7945 ;;		_RfPointSelect
  7946 ;;		_setBuz
  7947 ;; This function is called by:
  7948 ;;		_getRxData
  7949 ;; This function uses a non-reentrant model
  7950 ;;
  7951                           
  7952                           
  7953                           ;psect for function _setLog_Code
  7954  1F6D                     _setLog_Code:	
  7955                           
  7956                           ;incstack = 0
  7957                           ; Regs used in _setLog_Code: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7958                           ;setLog_Code@rf stored from wreg
  7959  1F6D  0020               	movlb	0	; select bank0
  7960  1F6E  00AE               	movwf	setLog_Code@rf
  7961                           
  7962                           ;RF_Control_B1.c: 261: RfPointSelect(rf);
  7963  1F6F  082E               	movf	setLog_Code@rf,w
  7964  1F70  31A6  263F  319F   	fcall	_RfPointSelect
  7965                           
  7966                           ;RF_Control_B1.c: 262: product->Data[12]=RF_Data[12];
  7967  1F73  0021               	movlb	1	; select bank1
  7968  1F74  082C               	movf	(_RF_Data^(0+128)+12),w
  7969  1F75  0020               	movlb	0	; select bank0
  7970  1F76  00AD               	movwf	??_setLog_Code
  7971  1F77  087D               	movf	_product,w
  7972  1F78  3E0C               	addlw	12
  7973  1F79  0086               	movwf	6
  7974  1F7A  3001               	movlw	1	; select bank2/3
  7975  1F7B  0087               	movwf	7
  7976  1F7C  082D               	movf	??_setLog_Code,w
  7977  1F7D  0081               	movwf	1
  7978                           
  7979                           ;RF_Control_B1.c: 263: product->Data[13]=RF_Data[13];
  7980  1F7E  0021               	movlb	1	; select bank1
  7981  1F7F  082D               	movf	(_RF_Data^(0+128)+13),w
  7982  1F80  0020               	movlb	0	; select bank0
  7983  1F81  00AD               	movwf	??_setLog_Code
  7984  1F82  087D               	movf	_product,w
  7985  1F83  3E0D               	addlw	13
  7986  1F84  0086               	movwf	6
  7987  1F85  3001               	movlw	1	; select bank2/3
  7988  1F86  0087               	movwf	7
  7989  1F87  082D               	movf	??_setLog_Code,w
  7990  1F88  0081               	movwf	1
  7991                           
  7992                           ;RF_Control_B1.c: 264: product->Data[14]=RF_Data[14];
  7993  1F89  0021               	movlb	1	; select bank1
  7994  1F8A  082E               	movf	(_RF_Data^(0+128)+14),w
  7995  1F8B  0020               	movlb	0	; select bank0
  7996  1F8C  00AD               	movwf	??_setLog_Code
  7997  1F8D  087D               	movf	_product,w
  7998  1F8E  3E0E               	addlw	14
  7999  1F8F  0086               	movwf	6
  8000  1F90  3001               	movlw	1	; select bank2/3
  8001  1F91  0087               	movwf	7
  8002  1F92  082D               	movf	??_setLog_Code,w
  8003  1F93  0081               	movwf	1
  8004                           
  8005                           ;RF_Control_B1.c: 265: setBuz(1, 100);
  8006  1F94  3064               	movlw	100
  8007  1F95  00A9               	movwf	setBuz@time
  8008  1F96  3000               	movlw	0
  8009  1F97  00AA               	movwf	setBuz@time+1
  8010  1F98  3001               	movlw	1
  8011  1F99  3189  2137  319F   	fcall	_setBuz
  8012                           
  8013                           ;RF_Control_B1.c: 266: RF->Learn = 0;
  8014  1F9C  0021               	movlb	1	; select bank1
  8015  1F9D  083F               	movf	_RF^(0+128),w
  8016  1F9E  0086               	movwf	6
  8017  1F9F  0187               	clrf	7
  8018  1FA0  1301               	bcf	1,6
  8019                           
  8020                           ;RF_Control_B1.c: 267: if (myMain->First) {
  8021  1FA1  086D               	movf	_myMain^(0+128),w
  8022  1FA2  0086               	movwf	6
  8023  1FA3  3001               	movlw	1	; select bank2/3
  8024  1FA4  0087               	movwf	7
  8025  1FA5  1F81               	btfss	1,7
  8026  1FA6  2FAD               	goto	l2514
  8027                           
  8028                           ;RF_Control_B1.c: 268: Memory->LoopSave=1;
  8029  1FA7  086E               	movf	_Memory^(0+128),w
  8030  1FA8  3E24               	addlw	36
  8031  1FA9  0086               	movwf	6
  8032  1FAA  3002               	movlw	2	; select bank4/5
  8033  1FAB  0087               	movwf	7
  8034  1FAC  1501               	bsf	1,2
  8035  1FAD                     l2514:	
  8036                           
  8037                           ;RF_Control_B1.c: 269: }
  8038                           ;RF_Control_B1.c: 270: Memory->Modify=1;
  8039  1FAD  086E               	movf	_Memory^(0+128),w
  8040  1FAE  3E24               	addlw	36
  8041  1FAF  0086               	movwf	6
  8042  1FB0  3002               	movlw	2	; select bank4/5
  8043  1FB1  0087               	movwf	7
  8044  1FB2  1401               	bsf	1,0
  8045  1FB3  0008               	return
  8046  1FB4                     __end_of_setLog_Code:	
  8047                           
  8048                           	psect	text32
  8049  08A5                     __ptext32:	
  8050 ;; *************** function _setControl_Lights_Table *****************
  8051 ;; Defined at:
  8052 ;;		line 274 in file "../src/RF_Control_B1.c"
  8053 ;; Parameters:    Size  Location     Type
  8054 ;;  rf              1    wreg     unsigned char 
  8055 ;; Auto vars:     Size  Location     Type
  8056 ;;  rf              1   71[BANK0 ] unsigned char 
  8057 ;; Return value:  Size  Location     Type
  8058 ;;		None               void
  8059 ;; Registers used:
  8060 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8061 ;; Tracked objects:
  8062 ;;		On entry : 0/0
  8063 ;;		On exit  : 0/0
  8064 ;;		Unchanged: 0/0
  8065 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8066 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8067 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8068 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8069 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8070 ;;Total ram usage:        1 bytes
  8071 ;; Hardware stack levels used:    1
  8072 ;; Hardware stack levels required when called:   11
  8073 ;; This function calls:
  8074 ;;		_RfPointSelect
  8075 ;;		_setBuz
  8076 ;;		_setDimmerLights
  8077 ;;		_setRFSW_AdjControl
  8078 ;;		_setRFSW_Control
  8079 ;;		_setRFSW_Status
  8080 ;;		_setSw_Status
  8081 ;;		_setTxData
  8082 ;; This function is called by:
  8083 ;;		_getRxData
  8084 ;; This function uses a non-reentrant model
  8085 ;;
  8086                           
  8087                           
  8088                           ;psect for function _setControl_Lights_Table
  8089  08A5                     _setControl_Lights_Table:	
  8090                           
  8091                           ;incstack = 0
  8092                           ; Regs used in _setControl_Lights_Table: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8093                           ;setControl_Lights_Table@rf stored from wreg
  8094  08A5  0020               	movlb	0	; select bank0
  8095  08A6  00E7               	movwf	setControl_Lights_Table@rf
  8096                           
  8097                           ;RF_Control_B1.c: 275: RfPointSelect(rf);
  8098  08A7  0867               	movf	setControl_Lights_Table@rf,w
  8099  08A8  31A6  263F  3188   	fcall	_RfPointSelect
  8100                           
  8101                           ;RF_Control_B1.c: 276: if (RF_Data[15] == 0x00) {
  8102  08AB  0021               	movlb	1	; select bank1
  8103  08AC  08AF               	movf	(_RF_Data^(0+128)+15),f
  8104  08AD  1D03               	skipz
  8105  08AE  28F8               	goto	l6814
  8106                           
  8107                           ;RF_Control_B1.c: 278: setDimmerLights(1, 0);
  8108  08AF  0020               	movlb	0	; select bank0
  8109  08B0  01A4               	clrf	setDimmerLights@status
  8110  08B1  3001               	movlw	1
  8111  08B2  3197  2776  3188   	fcall	_setDimmerLights
  8112                           
  8113                           ;RF_Control_B1.c: 279: setRFSW_Status(1, 0);
  8114  08B5  0020               	movlb	0	; select bank0
  8115  08B6  01A2               	clrf	setRFSW_Status@command
  8116  08B7  3001               	movlw	1
  8117  08B8  31A6  2621  3188   	fcall	_setRFSW_Status
  8118                           
  8119                           ;RF_Control_B1.c: 280: setSw_Status(1, 0);
  8120  08BB  0020               	movlb	0	; select bank0
  8121  08BC  01A2               	clrf	setSw_Status@command
  8122  08BD  3001               	movlw	1
  8123  08BE  31A6  2630  3188   	fcall	_setSw_Status
  8124                           
  8125                           ;RF_Control_B1.c: 283: setDimmerLights(2, 0);
  8126  08C1  0020               	movlb	0	; select bank0
  8127  08C2  01A4               	clrf	setDimmerLights@status
  8128  08C3  3002               	movlw	2
  8129  08C4  3197  2776  3188   	fcall	_setDimmerLights
  8130                           
  8131                           ;RF_Control_B1.c: 284: setRFSW_Status(2, 0);
  8132  08C7  0020               	movlb	0	; select bank0
  8133  08C8  01A2               	clrf	setRFSW_Status@command
  8134  08C9  3002               	movlw	2
  8135  08CA  31A6  2621  3188   	fcall	_setRFSW_Status
  8136                           
  8137                           ;RF_Control_B1.c: 285: setSw_Status(2, 0);
  8138  08CD  0020               	movlb	0	; select bank0
  8139  08CE  01A2               	clrf	setSw_Status@command
  8140  08CF  3002               	movlw	2
  8141  08D0  31A6  2630  3188   	fcall	_setSw_Status
  8142                           
  8143                           ;RF_Control_B1.c: 293: product->Data[9]=0;
  8144  08D3  087D               	movf	_product,w
  8145  08D4  3E09               	addlw	9
  8146  08D5  0086               	movwf	6
  8147  08D6  3001               	movlw	1	; select bank2/3
  8148  08D7  0087               	movwf	7
  8149  08D8  0181               	clrf	1
  8150                           
  8151                           ;RF_Control_B1.c: 294: product->Data[11]=0;
  8152  08D9  087D               	movf	_product,w
  8153  08DA  3E0B               	addlw	11
  8154  08DB  0086               	movwf	6
  8155  08DC  3001               	movlw	1	; select bank2/3
  8156  08DD  0087               	movwf	7
  8157  08DE  0181               	clrf	1
  8158                           
  8159                           ;RF_Control_B1.c: 295: product->Data[15]=0;
  8160  08DF  087D               	movf	_product,w
  8161  08E0  3E0F               	addlw	15
  8162  08E1  0086               	movwf	6
  8163  08E2  3001               	movlw	1	; select bank2/3
  8164  08E3  0087               	movwf	7
  8165  08E4  0181               	clrf	1
  8166                           
  8167                           ;RF_Control_B1.c: 296: product->Data[17]=0;
  8168  08E5  087D               	movf	_product,w
  8169  08E6  3E11               	addlw	17
  8170  08E7  0086               	movwf	6
  8171  08E8  3001               	movlw	1	; select bank2/3
  8172  08E9  0087               	movwf	7
  8173  08EA  0181               	clrf	1
  8174                           
  8175                           ;RF_Control_B1.c: 297: setBuz(1, 100);
  8176  08EB  3064               	movlw	100
  8177  08EC  0020               	movlb	0	; select bank0
  8178  08ED  00A9               	movwf	setBuz@time
  8179  08EE  3000               	movlw	0
  8180  08EF  00AA               	movwf	setBuz@time+1
  8181  08F0  3001               	movlw	1
  8182  08F1  3189  2137  3188   	fcall	_setBuz
  8183                           
  8184                           ;RF_Control_B1.c: 298: setTxData(1);
  8185  08F4  3001               	movlw	1
  8186  08F5  318A  2263         	fcall	_setTxData
  8187                           
  8188                           ;RF_Control_B1.c: 299: } else if (RF_Data[15] == 0x20) {
  8189  08F7  0008               	return
  8190  08F8                     l6814:	
  8191  08F8  0021               	movlb	1	; select bank1
  8192  08F9  082F               	movf	(_RF_Data^(0+128)+15),w
  8193  08FA  3A20               	xorlw	32
  8194  08FB  1D03               	skipz
  8195  08FC  2913               	goto	l6820
  8196                           
  8197                           ;RF_Control_B1.c: 300: product->Data[9]=0;
  8198  08FD  087D               	movf	_product,w
  8199  08FE  3E09               	addlw	9
  8200  08FF  0086               	movwf	6
  8201  0900  3001               	movlw	1	; select bank2/3
  8202  0901  0087               	movwf	7
  8203  0902  0181               	clrf	1
  8204                           
  8205                           ;RF_Control_B1.c: 301: product->Data[11]=0;
  8206  0903  087D               	movf	_product,w
  8207  0904  3E0B               	addlw	11
  8208  0905  0086               	movwf	6
  8209  0906  3001               	movlw	1	; select bank2/3
  8210  0907  0087               	movwf	7
  8211  0908  0181               	clrf	1
  8212                           
  8213                           ;RF_Control_B1.c: 302: product->Data[17]=0;
  8214  0909  087D               	movf	_product,w
  8215  090A  3E11               	addlw	17
  8216  090B  0086               	movwf	6
  8217  090C  3001               	movlw	1	; select bank2/3
  8218  090D  0087               	movwf	7
  8219  090E  0181               	clrf	1
  8220                           
  8221                           ;RF_Control_B1.c: 303: setTxData(1);
  8222  090F  3001               	movlw	1
  8223  0910  318A  2263         	fcall	_setTxData
  8224                           
  8225                           ;RF_Control_B1.c: 304: }
  8226  0912  0008               	return
  8227  0913                     l6820:	
  8228                           
  8229                           ;RF_Control_B1.c: 306: else if (RF_Data[15] == 0x01) {
  8230  0913  0021               	movlb	1	; select bank1
  8231  0914  082F               	movf	(_RF_Data^(0+128)+15),w
  8232  0915  3A01               	xorlw	1
  8233  0916  1D03               	skipz
  8234  0917  291C               	goto	l6824
  8235                           
  8236                           ;RF_Control_B1.c: 307: setRFSW_Control(1);
  8237  0918  3001               	movlw	1
  8238  0919  3188  2015         	fcall	_setRFSW_Control
  8239                           
  8240                           ;RF_Control_B1.c: 308: }
  8241  091B  0008               	return
  8242  091C                     l6824:	
  8243                           
  8244                           ;RF_Control_B1.c: 310: else if (RF_Data[15] == 0x11) {
  8245  091C  0021               	movlb	1	; select bank1
  8246  091D  082F               	movf	(_RF_Data^(0+128)+15),w
  8247  091E  3A11               	xorlw	17
  8248  091F  1D03               	skipz
  8249  0920  2925               	goto	l6828
  8250                           
  8251                           ;RF_Control_B1.c: 311: setRFSW_AdjControl(1);
  8252  0921  3001               	movlw	1
  8253  0922  319D  2590         	fcall	_setRFSW_AdjControl
  8254                           
  8255                           ;RF_Control_B1.c: 312: }
  8256  0924  0008               	return
  8257  0925                     l6828:	
  8258                           
  8259                           ;RF_Control_B1.c: 317: else if (RF_Data[15] == 0x02) {
  8260  0925  0021               	movlb	1	; select bank1
  8261  0926  082F               	movf	(_RF_Data^(0+128)+15),w
  8262  0927  3A02               	xorlw	2
  8263  0928  1D03               	skipz
  8264  0929  292E               	goto	l6832
  8265                           
  8266                           ;RF_Control_B1.c: 318: setRFSW_Control(2);
  8267  092A  3002               	movlw	2
  8268  092B  3188  2015         	fcall	_setRFSW_Control
  8269                           
  8270                           ;RF_Control_B1.c: 319: }
  8271  092D  0008               	return
  8272  092E                     l6832:	
  8273                           
  8274                           ;RF_Control_B1.c: 321: else if (RF_Data[15] == 0x21) {
  8275  092E  0021               	movlb	1	; select bank1
  8276  092F  082F               	movf	(_RF_Data^(0+128)+15),w
  8277  0930  3A21               	xorlw	33
  8278  0931  1D03               	skipz
  8279  0932  0008               	return
  8280                           
  8281                           ;RF_Control_B1.c: 322: setRFSW_AdjControl(2);
  8282  0933  3002               	movlw	2
  8283  0934  319D  2590         	fcall	_setRFSW_AdjControl
  8284  0936  0008               	return
  8285  0937                     __end_of_setControl_Lights_Table:	
  8286                           
  8287                           	psect	text33
  8288  0815                     __ptext33:	
  8289 ;; *************** function _setRFSW_Control *****************
  8290 ;; Defined at:
  8291 ;;		line 359 in file "../src/RF_Control_B1.c"
  8292 ;; Parameters:    Size  Location     Type
  8293 ;;  sw              1    wreg     unsigned char 
  8294 ;; Auto vars:     Size  Location     Type
  8295 ;;  sw              1   67[BANK0 ] unsigned char 
  8296 ;; Return value:  Size  Location     Type
  8297 ;;		None               void
  8298 ;; Registers used:
  8299 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8300 ;; Tracked objects:
  8301 ;;		On entry : 0/0
  8302 ;;		On exit  : 0/0
  8303 ;;		Unchanged: 0/0
  8304 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8305 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8306 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8307 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8308 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8309 ;;Total ram usage:        2 bytes
  8310 ;; Hardware stack levels used:    1
  8311 ;; Hardware stack levels required when called:    9
  8312 ;; This function calls:
  8313 ;;		_RfSWPointSelect
  8314 ;;		_setBuz
  8315 ;;		_setDelayOff_GO
  8316 ;;		_setDimmerLights_Switch
  8317 ;;		_setDimmerLights_Trigger
  8318 ;;		_setRF_DimmerLights
  8319 ;;		_setSw_Status
  8320 ;;		_setTxData
  8321 ;; This function is called by:
  8322 ;;		_setControl_Lights_Table
  8323 ;; This function uses a non-reentrant model
  8324 ;;
  8325                           
  8326                           
  8327                           ;psect for function _setRFSW_Control
  8328  0815                     _setRFSW_Control:	
  8329                           
  8330                           ;incstack = 0
  8331                           ; Regs used in _setRFSW_Control: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8332                           ;setRFSW_Control@sw stored from wreg
  8333  0815  0020               	movlb	0	; select bank0
  8334  0816  00E3               	movwf	setRFSW_Control@sw
  8335                           
  8336                           ;RF_Control_B1.c: 360: RfSWPointSelect(sw);
  8337  0817  0863               	movf	setRFSW_Control@sw,w
  8338  0818  31A7  2776  3188   	fcall	_RfSWPointSelect
  8339                           
  8340                           ;RF_Control_B1.c: 361: if (!RFSW->Status) {
  8341  081B  0021               	movlb	1	; select bank1
  8342  081C  0840               	movf	_RFSW^(0+128),w
  8343  081D  0086               	movwf	6
  8344  081E  0187               	clrf	7
  8345  081F  1801               	btfsc	1,0
  8346  0820  2856               	goto	l6670
  8347                           
  8348                           ;RF_Control_B1.c: 362: if (RF_Data[16] == 0x80) {
  8349  0821  0830               	movf	(_RF_Data^(0+128)+16),w
  8350  0822  3A80               	xorlw	128
  8351  0823  1D03               	skipz
  8352  0824  2832               	goto	l6660
  8353                           
  8354                           ;RF_Control_B1.c: 363: setDelayOff_GO(sw, 1, RF_Data[17]);
  8355  0825  0020               	movlb	0	; select bank0
  8356  0826  01A3               	clrf	setDelayOff_GO@command
  8357  0827  0AA3               	incf	setDelayOff_GO@command,f
  8358  0828  0021               	movlb	1	; select bank1
  8359  0829  0831               	movf	(_RF_Data^(0+128)+17),w
  8360  082A  0020               	movlb	0	; select bank0
  8361  082B  00E2               	movwf	??_setRFSW_Control
  8362  082C  0862               	movf	??_setRFSW_Control,w
  8363  082D  00A4               	movwf	setDelayOff_GO@value
  8364  082E  0863               	movf	setRFSW_Control@sw,w
  8365  082F  3191  2165  3188   	fcall	_setDelayOff_GO
  8366  0832                     l6660:	
  8367                           
  8368                           ;RF_Control_B1.c: 364: }
  8369                           ;RF_Control_B1.c: 365: RFSW->Status = 1;
  8370  0832  0021               	movlb	1	; select bank1
  8371  0833  0840               	movf	_RFSW^(0+128),w
  8372  0834  0086               	movwf	6
  8373  0835  0187               	clrf	7
  8374  0836  1401               	bsf	1,0
  8375                           
  8376                           ;RF_Control_B1.c: 366: setSw_Status(sw, 1);
  8377  0837  0020               	movlb	0	; select bank0
  8378  0838  01A2               	clrf	setSw_Status@command
  8379  0839  0AA2               	incf	setSw_Status@command,f
  8380  083A  0863               	movf	setRFSW_Control@sw,w
  8381  083B  31A6  2630  3188   	fcall	_setSw_Status
  8382                           
  8383                           ;RF_Control_B1.c: 368: setDimmerLights_Trigger(sw, 1);
  8384  083E  0020               	movlb	0	; select bank0
  8385  083F  01A2               	clrf	setDimmerLights_Trigger@command
  8386  0840  0AA2               	incf	setDimmerLights_Trigger@command,f
  8387  0841  0863               	movf	setRFSW_Control@sw,w
  8388  0842  31A6  267D  3188   	fcall	_setDimmerLights_Trigger
  8389                           
  8390                           ;RF_Control_B1.c: 369: setDimmerLights_Switch(sw, 1);
  8391  0845  0020               	movlb	0	; select bank0
  8392  0846  01A2               	clrf	setDimmerLights_Switch@command
  8393  0847  0AA2               	incf	setDimmerLights_Switch@command,f
  8394  0848  0863               	movf	setRFSW_Control@sw,w
  8395  0849  31A6  266D  3188   	fcall	_setDimmerLights_Switch
  8396                           
  8397                           ;RF_Control_B1.c: 371: setRF_DimmerLights(sw, RFSW->Status);
  8398  084C  0021               	movlb	1	; select bank1
  8399  084D  0840               	movf	_RFSW^(0+128),w
  8400  084E  0086               	movwf	6
  8401  084F  0187               	clrf	7
  8402  0850  3000               	movlw	0
  8403  0851  1801               	btfsc	1,0
  8404  0852  3001               	movlw	1
  8405  0853  0020               	movlb	0	; select bank0
  8406  0854  00DD               	movwf	setRF_DimmerLights@on
  8407  0855  2894               	goto	L3
  8408  0856                     l6670:	
  8409                           ;RF_Control_B1.c: 372: } else {
  8410                           
  8411                           
  8412                           ;RF_Control_B1.c: 373: if (RF_Data[16] == 0x80) {
  8413  0856  0021               	movlb	1	; select bank1
  8414  0857  0830               	movf	(_RF_Data^(0+128)+16),w
  8415  0858  3A80               	xorlw	128
  8416  0859  1D03               	skipz
  8417  085A  286C               	goto	l6676
  8418                           
  8419                           ;RF_Control_B1.c: 374: setDelayOff_GO(sw, 1, RF_Data[17]);
  8420  085B  0020               	movlb	0	; select bank0
  8421  085C  01A3               	clrf	setDelayOff_GO@command
  8422  085D  0AA3               	incf	setDelayOff_GO@command,f
  8423  085E  0021               	movlb	1	; select bank1
  8424  085F  0831               	movf	(_RF_Data^(0+128)+17),w
  8425  0860  0020               	movlb	0	; select bank0
  8426  0861  00E2               	movwf	??_setRFSW_Control
  8427  0862  0862               	movf	??_setRFSW_Control,w
  8428  0863  00A4               	movwf	setDelayOff_GO@value
  8429  0864  0863               	movf	setRFSW_Control@sw,w
  8430  0865  3191  2165  3188   	fcall	_setDelayOff_GO
  8431                           
  8432                           ;RF_Control_B1.c: 375: setRF_DimmerLights(sw, 1);
  8433  0868  0020               	movlb	0	; select bank0
  8434  0869  01DD               	clrf	setRF_DimmerLights@on
  8435  086A  0ADD               	incf	setRF_DimmerLights@on,f
  8436  086B  2894               	goto	L3
  8437  086C                     l6676:	
  8438                           ;RF_Control_B1.c: 376: } else {
  8439                           
  8440                           
  8441                           ;RF_Control_B1.c: 377: RFSW->Status = 0;
  8442  086C  0021               	movlb	1	; select bank1
  8443  086D  0840               	movf	_RFSW^(0+128),w
  8444  086E  0086               	movwf	6
  8445  086F  0187               	clrf	7
  8446  0870  1001               	bcf	1,0
  8447                           
  8448                           ;RF_Control_B1.c: 378: setSw_Status(sw, 0);
  8449  0871  0020               	movlb	0	; select bank0
  8450  0872  01A2               	clrf	setSw_Status@command
  8451  0873  0863               	movf	setRFSW_Control@sw,w
  8452  0874  31A6  2630  3188   	fcall	_setSw_Status
  8453                           
  8454                           ;RF_Control_B1.c: 380: setDimmerLights_Trigger(sw, 1);
  8455  0877  0020               	movlb	0	; select bank0
  8456  0878  01A2               	clrf	setDimmerLights_Trigger@command
  8457  0879  0AA2               	incf	setDimmerLights_Trigger@command,f
  8458  087A  0863               	movf	setRFSW_Control@sw,w
  8459  087B  31A6  267D  3188   	fcall	_setDimmerLights_Trigger
  8460                           
  8461                           ;RF_Control_B1.c: 381: setDimmerLights_Switch(sw, RFSW->Status);
  8462  087E  0021               	movlb	1	; select bank1
  8463  087F  0840               	movf	_RFSW^(0+128),w
  8464  0880  0086               	movwf	6
  8465  0881  0187               	clrf	7
  8466  0882  3000               	movlw	0
  8467  0883  1801               	btfsc	1,0
  8468  0884  3001               	movlw	1
  8469  0885  0020               	movlb	0	; select bank0
  8470  0886  00A2               	movwf	setDimmerLights_Switch@command
  8471  0887  0863               	movf	setRFSW_Control@sw,w
  8472  0888  31A6  266D  3188   	fcall	_setDimmerLights_Switch
  8473                           
  8474                           ;RF_Control_B1.c: 383: setDelayOff_GO(sw, 0, 0);
  8475  088B  0020               	movlb	0	; select bank0
  8476  088C  01A3               	clrf	setDelayOff_GO@command
  8477  088D  01A4               	clrf	setDelayOff_GO@value
  8478  088E  0863               	movf	setRFSW_Control@sw,w
  8479  088F  3191  2165  3188   	fcall	_setDelayOff_GO
  8480                           
  8481                           ;RF_Control_B1.c: 384: setRF_DimmerLights(sw, 0);
  8482  0892  0020               	movlb	0	; select bank0
  8483  0893  01DD               	clrf	setRF_DimmerLights@on
  8484  0894                     L3:	
  8485  0894  0863               	movf	setRFSW_Control@sw,w
  8486  0895  3193  2350  3188   	fcall	_setRF_DimmerLights
  8487                           
  8488                           ;RF_Control_B1.c: 385: }
  8489                           ;RF_Control_B1.c: 386: }
  8490                           ;RF_Control_B1.c: 387: setBuz(1, 100);
  8491  0898  3064               	movlw	100
  8492  0899  0020               	movlb	0	; select bank0
  8493  089A  00A9               	movwf	setBuz@time
  8494  089B  3000               	movlw	0
  8495  089C  00AA               	movwf	setBuz@time+1
  8496  089D  3001               	movlw	1
  8497  089E  3189  2137  3188   	fcall	_setBuz
  8498                           
  8499                           ;RF_Control_B1.c: 388: setTxData(1);
  8500  08A1  3001               	movlw	1
  8501  08A2  318A  2263         	fcall	_setTxData
  8502  08A4  0008               	return
  8503  08A5                     __end_of_setRFSW_Control:	
  8504                           
  8505                           	psect	text34
  8506  1165                     __ptext34:	
  8507 ;; *************** function _setDelayOff_GO *****************
  8508 ;; Defined at:
  8509 ;;		line 85 in file "../src/DelayOff_B1.c"
  8510 ;; Parameters:    Size  Location     Type
  8511 ;;  sw              1    wreg     unsigned char 
  8512 ;;  command         1    3[BANK0 ] unsigned char 
  8513 ;;  value           1    4[BANK0 ] unsigned char 
  8514 ;; Auto vars:     Size  Location     Type
  8515 ;;  sw              1    7[BANK0 ] unsigned char 
  8516 ;; Return value:  Size  Location     Type
  8517 ;;		None               void
  8518 ;; Registers used:
  8519 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8520 ;; Tracked objects:
  8521 ;;		On entry : 0/0
  8522 ;;		On exit  : 0/0
  8523 ;;		Unchanged: 0/0
  8524 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8525 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8526 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8527 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8528 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8529 ;;Total ram usage:        5 bytes
  8530 ;; Hardware stack levels used:    1
  8531 ;; Hardware stack levels required when called:    6
  8532 ;; This function calls:
  8533 ;;		_DelayOffPointSelect
  8534 ;;		_DelayTimejudge
  8535 ;; This function is called by:
  8536 ;;		_setRFSW_Control
  8537 ;;		_Sw_DimmerOffFunc
  8538 ;; This function uses a non-reentrant model
  8539 ;;
  8540                           
  8541                           
  8542                           ;psect for function _setDelayOff_GO
  8543  1165                     _setDelayOff_GO:	
  8544                           
  8545                           ;incstack = 0
  8546                           ; Regs used in _setDelayOff_GO: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8547                           ;setDelayOff_GO@sw stored from wreg
  8548  1165  0020               	movlb	0	; select bank0
  8549  1166  00A7               	movwf	setDelayOff_GO@sw
  8550                           
  8551                           ;DelayOff_B1.c: 86: DelayOffPointSelect(sw);
  8552  1167  0827               	movf	setDelayOff_GO@sw,w
  8553  1168  31A7  27A2  3191   	fcall	_DelayOffPointSelect
  8554                           
  8555                           ;DelayOff_B1.c: 87: if (DelayOff->Enable) {
  8556  116B  0021               	movlb	1	; select bank1
  8557  116C  0839               	movf	_DelayOff^(0+128),w
  8558  116D  0086               	movwf	6
  8559  116E  0187               	clrf	7
  8560  116F  1C01               	btfss	1,0
  8561  1170  0008               	return
  8562                           
  8563                           ;DelayOff_B1.c: 88: DelayOff->GO = command;
  8564  1171  0839               	movf	_DelayOff^(0+128),w
  8565  1172  0086               	movwf	6
  8566  1173  0187               	clrf	7
  8567  1174  0020               	movlb	0	; select bank0
  8568  1175  0823               	movf	setDelayOff_GO@command,w
  8569  1176  1081               	bcf	1,1
  8570  1177  1D03               	skipz
  8571  1178  1481               	bsf	1,1
  8572                           
  8573                           ;DelayOff_B1.c: 89: if (command == 1) {
  8574  1179  0823               	movf	setDelayOff_GO@command,w
  8575  117A  3A01               	xorlw	1
  8576  117B  1D03               	skipz
  8577  117C  29A8               	goto	l6450
  8578                           
  8579                           ;DelayOff_B1.c: 90: DelayOff->Value = DelayTimejudge(value);
  8580  117D  0824               	movf	setDelayOff_GO@value,w
  8581  117E  319B  2362  3191   	fcall	_DelayTimejudge
  8582  1181  0020               	movlb	0	; select bank0
  8583  1182  00A5               	movwf	??_setDelayOff_GO
  8584  1183  0021               	movlb	1	; select bank1
  8585  1184  0A39               	incf	_DelayOff^(0+128),w
  8586  1185  0086               	movwf	6
  8587  1186  0187               	clrf	7
  8588  1187  0020               	movlb	0	; select bank0
  8589  1188  0825               	movf	??_setDelayOff_GO,w
  8590  1189  0081               	movwf	1
  8591                           
  8592                           ;DelayOff_B1.c: 91: if (((value % 16) == 5 || !(value % 16)) && value <= 0x25) {
  8593  118A  300F               	movlw	15
  8594  118B  0524               	andwf	setDelayOff_GO@value,w
  8595  118C  00A5               	movwf	??_setDelayOff_GO
  8596  118D  0825               	movf	??_setDelayOff_GO,w
  8597  118E  3A05               	xorlw	5
  8598  118F  1903               	skipnz
  8599  1190  2995               	goto	l6444
  8600  1191  0824               	movf	setDelayOff_GO@value,w
  8601  1192  390F               	andlw	15
  8602  1193  1D03               	btfss	3,2
  8603  1194  299B               	goto	l6448
  8604  1195                     l6444:	
  8605  1195  3026               	movlw	38
  8606  1196  0224               	subwf	setDelayOff_GO@value,w
  8607  1197  1803               	skipnc
  8608  1198  299B               	goto	l6448
  8609                           
  8610                           ;DelayOff_B1.c: 92: product->Data[26 + sw]=value;
  8611  1199  0824               	movf	setDelayOff_GO@value,w
  8612  119A  299C               	goto	L4
  8613  119B                     l6448:	
  8614                           ;DelayOff_B1.c: 93: } else {
  8615                           
  8616                           
  8617                           ;DelayOff_B1.c: 94: product->Data[26 + sw]=0x05;
  8618  119B  3005               	movlw	5
  8619  119C                     L4:	
  8620  119C  00A5               	movwf	??_setDelayOff_GO
  8621  119D  0827               	movf	setDelayOff_GO@sw,w
  8622  119E  3E1A               	addlw	26
  8623  119F  077D               	addwf	_product,w
  8624  11A0  00A6               	movwf	??_setDelayOff_GO+1
  8625  11A1  0826               	movf	??_setDelayOff_GO+1,w
  8626  11A2  0086               	movwf	6
  8627  11A3  3001               	movlw	1	; select bank2/3
  8628  11A4  0087               	movwf	7
  8629  11A5  0825               	movf	??_setDelayOff_GO,w
  8630  11A6  0081               	movwf	1
  8631                           
  8632                           ;DelayOff_B1.c: 95: }
  8633                           ;DelayOff_B1.c: 96: } else if (command == 0) {
  8634  11A7  29B4               	goto	l6454
  8635  11A8                     l6450:	
  8636  11A8  08A3               	movf	setDelayOff_GO@command,f
  8637  11A9  1D03               	skipz
  8638  11AA  29B4               	goto	l6454
  8639                           
  8640                           ;DelayOff_B1.c: 97: product->Data[sw + 26]=0;
  8641  11AB  0827               	movf	setDelayOff_GO@sw,w
  8642  11AC  3E1A               	addlw	26
  8643  11AD  077D               	addwf	_product,w
  8644  11AE  00A5               	movwf	??_setDelayOff_GO
  8645  11AF  0825               	movf	??_setDelayOff_GO,w
  8646  11B0  0086               	movwf	6
  8647  11B1  3001               	movlw	1	; select bank2/3
  8648  11B2  0087               	movwf	7
  8649  11B3  0181               	clrf	1
  8650  11B4                     l6454:	
  8651                           
  8652                           ;DelayOff_B1.c: 98: }
  8653                           ;DelayOff_B1.c: 99: DelayOff->SecondTime = 0;
  8654  11B4  0021               	movlb	1	; select bank1
  8655  11B5  0839               	movf	_DelayOff^(0+128),w
  8656  11B6  3E02               	addlw	2
  8657  11B7  0086               	movwf	6
  8658  11B8  0187               	clrf	7
  8659  11B9  3000               	movlw	0
  8660  11BA  3FC0               	movwi [0]fsr1
  8661  11BB  3FC1               	movwi [1]fsr1
  8662                           
  8663                           ;DelayOff_B1.c: 100: DelayOff->MinuteTime = 0;
  8664  11BC  0839               	movf	_DelayOff^(0+128),w
  8665  11BD  3E04               	addlw	4
  8666  11BE  0086               	movwf	6
  8667  11BF  0187               	clrf	7
  8668  11C0  0181               	clrf	1
  8669  11C1  0008               	return
  8670  11C2                     __end_of_setDelayOff_GO:	
  8671                           
  8672                           	psect	text35
  8673  1B62                     __ptext35:	
  8674 ;; *************** function _DelayTimejudge *****************
  8675 ;; Defined at:
  8676 ;;		line 105 in file "../src/DelayOff_B1.c"
  8677 ;; Parameters:    Size  Location     Type
  8678 ;;  value           1    wreg     unsigned char 
  8679 ;; Auto vars:     Size  Location     Type
  8680 ;;  value           1    1[BANK0 ] unsigned char 
  8681 ;;  i               1    2[BANK0 ] unsigned char 
  8682 ;; Return value:  Size  Location     Type
  8683 ;;                  1    wreg      unsigned char 
  8684 ;; Registers used:
  8685 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  8686 ;; Tracked objects:
  8687 ;;		On entry : 0/0
  8688 ;;		On exit  : 0/0
  8689 ;;		Unchanged: 0/0
  8690 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8691 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8692 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8693 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8694 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8695 ;;Total ram usage:        3 bytes
  8696 ;; Hardware stack levels used:    1
  8697 ;; Hardware stack levels required when called:    5
  8698 ;; This function calls:
  8699 ;;		Nothing
  8700 ;; This function is called by:
  8701 ;;		_setDelayOff_GO
  8702 ;; This function uses a non-reentrant model
  8703 ;;
  8704                           
  8705                           
  8706                           ;psect for function _DelayTimejudge
  8707  1B62                     _DelayTimejudge:	
  8708                           
  8709                           ;incstack = 0
  8710                           ; Regs used in _DelayTimejudge: [wreg-fsr0h+status,2+status,0]
  8711                           ;DelayTimejudge@value stored from wreg
  8712  1B62  0020               	movlb	0	; select bank0
  8713  1B63  00A1               	movwf	DelayTimejudge@value
  8714                           
  8715                           ;DelayOff_B1.c: 106: char i = 5;
  8716  1B64  3005               	movlw	5
  8717  1B65  00A0               	movwf	??_DelayTimejudge
  8718  1B66  0820               	movf	??_DelayTimejudge,w
  8719  1B67  00A2               	movwf	DelayTimejudge@i
  8720                           
  8721                           ;DelayOff_B1.c: 107: switch (value) {
  8722  1B68  2B78               	goto	l6264
  8723  1B69                     l6250:	
  8724                           ;DelayOff_B1.c: 108: case 0x05:
  8725                           
  8726                           
  8727                           ;DelayOff_B1.c: 109: i = 5;
  8728  1B69  3005               	movlw	5
  8729  1B6A  2B74               	goto	L9
  8730  1B6B                     l6252:	
  8731                           ;DelayOff_B1.c: 111: case 0x10:
  8732                           
  8733                           ;DelayOff_B1.c: 110: break;
  8734                           
  8735                           
  8736                           ;DelayOff_B1.c: 112: i = 10;
  8737  1B6B  300A               	movlw	10
  8738  1B6C  2B74               	goto	L9
  8739  1B6D                     l6254:	
  8740                           ;DelayOff_B1.c: 114: case 0x15:
  8741                           
  8742                           ;DelayOff_B1.c: 113: break;
  8743                           
  8744                           
  8745                           ;DelayOff_B1.c: 115: i = 15;
  8746  1B6D  300F               	movlw	15
  8747  1B6E  2B74               	goto	L9
  8748  1B6F                     l6256:	
  8749                           ;DelayOff_B1.c: 117: case 0x20:
  8750                           
  8751                           ;DelayOff_B1.c: 116: break;
  8752                           
  8753                           
  8754                           ;DelayOff_B1.c: 118: i = 20;
  8755  1B6F  3014               	movlw	20
  8756  1B70  2B74               	goto	L9
  8757  1B71                     l6258:	
  8758                           ;DelayOff_B1.c: 120: case 0x25:
  8759                           
  8760                           ;DelayOff_B1.c: 119: break;
  8761                           
  8762                           
  8763                           ;DelayOff_B1.c: 121: i = 25;
  8764  1B71  3019               	movlw	25
  8765  1B72  2B74               	goto	L9
  8766  1B73                     l6260:	
  8767                           ;DelayOff_B1.c: 123: case 0x30:
  8768                           
  8769                           ;DelayOff_B1.c: 122: break;
  8770                           
  8771                           
  8772                           ;DelayOff_B1.c: 124: i = 30;
  8773  1B73  301E               	movlw	30
  8774  1B74                     L9:	
  8775  1B74  00A0               	movwf	??_DelayTimejudge
  8776  1B75  0820               	movf	??_DelayTimejudge,w
  8777  1B76  00A2               	movwf	DelayTimejudge@i
  8778                           
  8779                           ;DelayOff_B1.c: 126: }
  8780                           
  8781                           ;DelayOff_B1.c: 125: break;
  8782  1B77  2B8C               	goto	l6266
  8783  1B78                     l6264:	
  8784  1B78  0821               	movf	DelayTimejudge@value,w
  8785                           
  8786                           ; Switch size 1, requested type "space"
  8787                           ; Number of cases is 6, Range of values is 5 to 48
  8788                           ; switch strategies available:
  8789                           ; Name         Instructions Cycles
  8790                           ; simple_byte           19    10 (average)
  8791                           ; direct_byte           97     9 (fixed)
  8792                           ; jumptable            263     9 (fixed)
  8793                           ;	Chosen strategy is simple_byte
  8794  1B79  3A05               	xorlw	5	; case 5
  8795  1B7A  1903               	skipnz
  8796  1B7B  2B69               	goto	l6250
  8797  1B7C  3A15               	xorlw	21	; case 16
  8798  1B7D  1903               	skipnz
  8799  1B7E  2B6B               	goto	l6252
  8800  1B7F  3A05               	xorlw	5	; case 21
  8801  1B80  1903               	skipnz
  8802  1B81  2B6D               	goto	l6254
  8803  1B82  3A35               	xorlw	53	; case 32
  8804  1B83  1903               	skipnz
  8805  1B84  2B6F               	goto	l6256
  8806  1B85  3A05               	xorlw	5	; case 37
  8807  1B86  1903               	skipnz
  8808  1B87  2B71               	goto	l6258
  8809  1B88  3A15               	xorlw	21	; case 48
  8810  1B89  1903               	skipnz
  8811  1B8A  2B73               	goto	l6260
  8812  1B8B  2B8C               	goto	l6266
  8813  1B8C                     l6266:	
  8814                           
  8815                           ;DelayOff_B1.c: 127: return i;
  8816  1B8C  0822               	movf	DelayTimejudge@i,w
  8817  1B8D  0008               	return
  8818  1B8E                     __end_of_DelayTimejudge:	
  8819                           
  8820                           	psect	text36
  8821  1D90                     __ptext36:	
  8822 ;; *************** function _setRFSW_AdjControl *****************
  8823 ;; Defined at:
  8824 ;;		line 392 in file "../src/RF_Control_B1.c"
  8825 ;; Parameters:    Size  Location     Type
  8826 ;;  sw              1    wreg     unsigned char 
  8827 ;; Auto vars:     Size  Location     Type
  8828 ;;  sw              1   70[BANK0 ] unsigned char 
  8829 ;; Return value:  Size  Location     Type
  8830 ;;		None               void
  8831 ;; Registers used:
  8832 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8833 ;; Tracked objects:
  8834 ;;		On entry : 0/0
  8835 ;;		On exit  : 0/0
  8836 ;;		Unchanged: 0/0
  8837 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8838 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8839 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8840 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8841 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8842 ;;Total ram usage:        3 bytes
  8843 ;; Hardware stack levels used:    1
  8844 ;; Hardware stack levels required when called:   10
  8845 ;; This function calls:
  8846 ;;		_RfSWPointSelect
  8847 ;;		_setRF_DimmerValue
  8848 ;;		_setTxData
  8849 ;; This function is called by:
  8850 ;;		_setControl_Lights_Table
  8851 ;; This function uses a non-reentrant model
  8852 ;;
  8853                           
  8854                           
  8855                           ;psect for function _setRFSW_AdjControl
  8856  1D90                     _setRFSW_AdjControl:	
  8857                           
  8858                           ;incstack = 0
  8859                           ; Regs used in _setRFSW_AdjControl: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8860                           ;setRFSW_AdjControl@sw stored from wreg
  8861  1D90  0020               	movlb	0	; select bank0
  8862  1D91  00E6               	movwf	setRFSW_AdjControl@sw
  8863                           
  8864                           ;RF_Control_B1.c: 393: RfSWPointSelect(sw);
  8865  1D92  0866               	movf	setRFSW_AdjControl@sw,w
  8866  1D93  31A7  2776  319D   	fcall	_RfSWPointSelect
  8867                           
  8868                           ;RF_Control_B1.c: 394: if (RFSW->Status == 1) {
  8869  1D96  0021               	movlb	1	; select bank1
  8870  1D97  0840               	movf	_RFSW^(0+128),w
  8871  1D98  0086               	movwf	6
  8872  1D99  0187               	clrf	7
  8873  1D9A  1C01               	btfss	1,0
  8874  1D9B  2DA8               	goto	l6700
  8875                           
  8876                           ;RF_Control_B1.c: 395: Memory->Modify=1;
  8877  1D9C  086E               	movf	_Memory^(0+128),w
  8878  1D9D  3E24               	addlw	36
  8879  1D9E  0086               	movwf	6
  8880  1D9F  3002               	movlw	2	; select bank4/5
  8881  1DA0  0087               	movwf	7
  8882  1DA1  1401               	bsf	1,0
  8883                           
  8884                           ;RF_Control_B1.c: 396: setRF_DimmerValue(sw);
  8885  1DA2  0020               	movlb	0	; select bank0
  8886  1DA3  0866               	movf	setRFSW_AdjControl@sw,w
  8887  1DA4  319C  24E4  319D   	fcall	_setRF_DimmerValue
  8888                           
  8889                           ;RF_Control_B1.c: 397: } else {
  8890  1DA7  2DBA               	goto	l2546
  8891  1DA8                     l6700:	
  8892                           
  8893                           ;RF_Control_B1.c: 398: product->Data[9]=product->Data[20 + sw];
  8894  1DA8  0020               	movlb	0	; select bank0
  8895  1DA9  0866               	movf	setRFSW_AdjControl@sw,w
  8896  1DAA  3E14               	addlw	20
  8897  1DAB  077D               	addwf	_product,w
  8898  1DAC  00E4               	movwf	??_setRFSW_AdjControl
  8899  1DAD  0864               	movf	??_setRFSW_AdjControl,w
  8900  1DAE  0086               	movwf	6
  8901  1DAF  3001               	movlw	1	; select bank2/3
  8902  1DB0  0087               	movwf	7
  8903  1DB1  0801               	movf	1,w
  8904  1DB2  00E5               	movwf	??_setRFSW_AdjControl+1
  8905  1DB3  087D               	movf	_product,w
  8906  1DB4  3E09               	addlw	9
  8907  1DB5  0086               	movwf	6
  8908  1DB6  3001               	movlw	1	; select bank2/3
  8909  1DB7  0087               	movwf	7
  8910  1DB8  0865               	movf	??_setRFSW_AdjControl+1,w
  8911  1DB9  0081               	movwf	1
  8912  1DBA                     l2546:	
  8913                           
  8914                           ;RF_Control_B1.c: 399: }
  8915                           ;RF_Control_B1.c: 400: product->Data[17]=product->Data[26 + sw];
  8916  1DBA  0020               	movlb	0	; select bank0
  8917  1DBB  0866               	movf	setRFSW_AdjControl@sw,w
  8918  1DBC  3E1A               	addlw	26
  8919  1DBD  077D               	addwf	_product,w
  8920  1DBE  00E4               	movwf	??_setRFSW_AdjControl
  8921  1DBF  0864               	movf	??_setRFSW_AdjControl,w
  8922  1DC0  0086               	movwf	6
  8923  1DC1  3001               	movlw	1	; select bank2/3
  8924  1DC2  0087               	movwf	7
  8925  1DC3  0801               	movf	1,w
  8926  1DC4  00E5               	movwf	??_setRFSW_AdjControl+1
  8927  1DC5  087D               	movf	_product,w
  8928  1DC6  3E11               	addlw	17
  8929  1DC7  0086               	movwf	6
  8930  1DC8  3001               	movlw	1	; select bank2/3
  8931  1DC9  0087               	movwf	7
  8932  1DCA  0865               	movf	??_setRFSW_AdjControl+1,w
  8933  1DCB  0081               	movwf	1
  8934                           
  8935                           ;RF_Control_B1.c: 401: setTxData(1);
  8936  1DCC  3001               	movlw	1
  8937  1DCD  318A  2263         	fcall	_setTxData
  8938  1DCF  0008               	return
  8939  1DD0                     __end_of_setRFSW_AdjControl:	
  8940                           
  8941                           	psect	text37
  8942  1CE4                     __ptext37:	
  8943 ;; *************** function _setRF_DimmerValue *****************
  8944 ;; Defined at:
  8945 ;;		line 412 in file "../src/RF_Control_B1.c"
  8946 ;; Parameters:    Size  Location     Type
  8947 ;;  lights          1    wreg     unsigned char 
  8948 ;; Auto vars:     Size  Location     Type
  8949 ;;  lights          1   67[BANK0 ] unsigned char 
  8950 ;; Return value:  Size  Location     Type
  8951 ;;		None               void
  8952 ;; Registers used:
  8953 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8954 ;; Tracked objects:
  8955 ;;		On entry : 0/0
  8956 ;;		On exit  : 0/0
  8957 ;;		Unchanged: 0/0
  8958 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8959 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8960 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8961 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8962 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8963 ;;Total ram usage:        3 bytes
  8964 ;; Hardware stack levels used:    1
  8965 ;; Hardware stack levels required when called:    9
  8966 ;; This function calls:
  8967 ;;		_setDimmerLights_AdjRF
  8968 ;; This function is called by:
  8969 ;;		_setRFSW_AdjControl
  8970 ;; This function uses a non-reentrant model
  8971 ;;
  8972                           
  8973                           
  8974                           ;psect for function _setRF_DimmerValue
  8975  1CE4                     _setRF_DimmerValue:	
  8976                           
  8977                           ;incstack = 0
  8978                           ; Regs used in _setRF_DimmerValue: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8979                           ;setRF_DimmerValue@lights stored from wreg
  8980  1CE4  0020               	movlb	0	; select bank0
  8981  1CE5  00E3               	movwf	setRF_DimmerValue@lights
  8982                           
  8983                           ;RF_Control_B1.c: 413: if (RF_Data[9] > 0x64) {
  8984  1CE6  3065               	movlw	101
  8985  1CE7  0021               	movlb	1	; select bank1
  8986  1CE8  0229               	subwf	(_RF_Data^(0+128)+9),w
  8987  1CE9  1C03               	skipc
  8988  1CEA  2CF1               	goto	l6550
  8989                           
  8990                           ;RF_Control_B1.c: 414: RF_Data[9] = 0x64;
  8991  1CEB  3064               	movlw	100
  8992  1CEC  0020               	movlb	0	; select bank0
  8993  1CED  00E1               	movwf	??_setRF_DimmerValue
  8994  1CEE  0861               	movf	??_setRF_DimmerValue,w
  8995  1CEF  0021               	movlb	1	; select bank1
  8996  1CF0  00A9               	movwf	(_RF_Data^(0+128)+9)
  8997  1CF1                     l6550:	
  8998                           
  8999                           ;RF_Control_B1.c: 415: }
  9000                           ;RF_Control_B1.c: 416: product->Data[9]=RF_Data[9];
  9001  1CF1  0829               	movf	(_RF_Data^(0+128)+9),w
  9002  1CF2  0020               	movlb	0	; select bank0
  9003  1CF3  00E1               	movwf	??_setRF_DimmerValue
  9004  1CF4  087D               	movf	_product,w
  9005  1CF5  3E09               	addlw	9
  9006  1CF6  0086               	movwf	6
  9007  1CF7  3001               	movlw	1	; select bank2/3
  9008  1CF8  0087               	movwf	7
  9009  1CF9  0861               	movf	??_setRF_DimmerValue,w
  9010  1CFA  0081               	movwf	1
  9011                           
  9012                           ;RF_Control_B1.c: 417: product->Data[11]=lights;
  9013  1CFB  0863               	movf	setRF_DimmerValue@lights,w
  9014  1CFC  00E1               	movwf	??_setRF_DimmerValue
  9015  1CFD  087D               	movf	_product,w
  9016  1CFE  3E0B               	addlw	11
  9017  1CFF  0086               	movwf	6
  9018  1D00  3001               	movlw	1	; select bank2/3
  9019  1D01  0087               	movwf	7
  9020  1D02  0861               	movf	??_setRF_DimmerValue,w
  9021  1D03  0081               	movwf	1
  9022                           
  9023                           ;RF_Control_B1.c: 418: product->Data[(20 + lights)]=product->Data[9];
  9024  1D04  087D               	movf	_product,w
  9025  1D05  3E09               	addlw	9
  9026  1D06  0086               	movwf	6
  9027  1D07  3001               	movlw	1	; select bank2/3
  9028  1D08  0087               	movwf	7
  9029  1D09  0801               	movf	1,w
  9030  1D0A  00E1               	movwf	??_setRF_DimmerValue
  9031  1D0B  0863               	movf	setRF_DimmerValue@lights,w
  9032  1D0C  3E14               	addlw	20
  9033  1D0D  077D               	addwf	_product,w
  9034  1D0E  00E2               	movwf	??_setRF_DimmerValue+1
  9035  1D0F  0862               	movf	??_setRF_DimmerValue+1,w
  9036  1D10  0086               	movwf	6
  9037  1D11  3001               	movlw	1	; select bank2/3
  9038  1D12  0087               	movwf	7
  9039  1D13  0861               	movf	??_setRF_DimmerValue,w
  9040  1D14  0081               	movwf	1
  9041                           
  9042                           ;RF_Control_B1.c: 419: setDimmerLights_AdjRF(lights);
  9043  1D15  0863               	movf	setRF_DimmerValue@lights,w
  9044  1D16  319A  229C         	fcall	_setDimmerLights_AdjRF
  9045  1D18  0008               	return
  9046  1D19                     __end_of_setRF_DimmerValue:	
  9047                           
  9048                           	psect	text38
  9049  1A9C                     __ptext38:	
  9050 ;; *************** function _setDimmerLights_AdjRF *****************
  9051 ;; Defined at:
  9052 ;;		line 679 in file "../src/Dimmer_B1.c"
  9053 ;; Parameters:    Size  Location     Type
  9054 ;;  lights          1    wreg     unsigned char 
  9055 ;; Auto vars:     Size  Location     Type
  9056 ;;  lights          1   64[BANK0 ] unsigned char 
  9057 ;; Return value:  Size  Location     Type
  9058 ;;		None               void
  9059 ;; Registers used:
  9060 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9061 ;; Tracked objects:
  9062 ;;		On entry : 0/0
  9063 ;;		On exit  : 0/0
  9064 ;;		Unchanged: 0/0
  9065 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9066 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9067 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9068 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9069 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9070 ;;Total ram usage:        2 bytes
  9071 ;; Hardware stack levels used:    1
  9072 ;; Hardware stack levels required when called:    8
  9073 ;; This function calls:
  9074 ;;		_DimmerLightsPointSelect
  9075 ;;		_getPercentValue
  9076 ;; This function is called by:
  9077 ;;		_setRF_DimmerValue
  9078 ;; This function uses a non-reentrant model
  9079 ;;
  9080                           
  9081                           
  9082                           ;psect for function _setDimmerLights_AdjRF
  9083  1A9C                     _setDimmerLights_AdjRF:	
  9084                           
  9085                           ;incstack = 0
  9086                           ; Regs used in _setDimmerLights_AdjRF: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  9087                           ;setDimmerLights_AdjRF@lights stored from wreg
  9088  1A9C  0020               	movlb	0	; select bank0
  9089  1A9D  00E0               	movwf	setDimmerLights_AdjRF@lights
  9090                           
  9091                           ;Dimmer_B1.c: 681: DimmerLightsPointSelect(lights);
  9092  1A9E  0860               	movf	setDimmerLights_AdjRF@lights,w
  9093  1A9F  31A7  2712  319A   	fcall	_DimmerLightsPointSelect
  9094                           
  9095                           ;Dimmer_B1.c: 682: DimmerLights->AdjRF = 1;
  9096  1AA2  0878               	movf	_DimmerLights,w
  9097  1AA3  0086               	movwf	6
  9098  1AA4  3001               	movlw	1	; select bank2/3
  9099  1AA5  0087               	movwf	7
  9100  1AA6  1501               	bsf	1,2
  9101                           
  9102                           ;Dimmer_B1.c: 683: DimmerLights->Signal = 1;
  9103  1AA7  0878               	movf	_DimmerLights,w
  9104  1AA8  0086               	movwf	6
  9105  1AA9  3001               	movlw	1	; select bank2/3
  9106  1AAA  0087               	movwf	7
  9107  1AAB  1481               	bsf	1,1
  9108                           
  9109                           ;Dimmer_B1.c: 684: DimmerLights->MaxmumValue = getPercentValue(product->Data[9]);
  9110  1AAC  087D               	movf	_product,w
  9111  1AAD  3E09               	addlw	9
  9112  1AAE  0086               	movwf	6
  9113  1AAF  3001               	movlw	1	; select bank2/3
  9114  1AB0  0087               	movwf	7
  9115  1AB1  0801               	movf	1,w
  9116  1AB2  3191  210A         	fcall	_getPercentValue
  9117  1AB4  0020               	movlb	0	; select bank0
  9118  1AB5  00DF               	movwf	??_setDimmerLights_AdjRF
  9119  1AB6  0878               	movf	_DimmerLights,w
  9120  1AB7  3E05               	addlw	5
  9121  1AB8  0086               	movwf	6
  9122  1AB9  3001               	movlw	1	; select bank2/3
  9123  1ABA  0087               	movwf	7
  9124  1ABB  085F               	movf	??_setDimmerLights_AdjRF,w
  9125  1ABC  0081               	movwf	1
  9126  1ABD  0008               	return
  9127  1ABE                     __end_of_setDimmerLights_AdjRF:	
  9128                           
  9129                           	psect	text39
  9130  110A                     __ptext39:	
  9131 ;; *************** function _getPercentValue *****************
  9132 ;; Defined at:
  9133 ;;		line 752 in file "../src/Dimmer_B1.c"
  9134 ;; Parameters:    Size  Location     Type
  9135 ;;  value           1    wreg     unsigned char 
  9136 ;; Auto vars:     Size  Location     Type
  9137 ;;  value           1   59[BANK0 ] unsigned char 
  9138 ;;  i               3   60[BANK0 ] float 
  9139 ;; Return value:  Size  Location     Type
  9140 ;;                  1    wreg      unsigned char 
  9141 ;; Registers used:
  9142 ;;		wreg, status,2, status,0, pclath, cstack
  9143 ;; Tracked objects:
  9144 ;;		On entry : 0/0
  9145 ;;		On exit  : 0/0
  9146 ;;		Unchanged: 0/0
  9147 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9148 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9149 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9150 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9151 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9152 ;;Total ram usage:        6 bytes
  9153 ;; Hardware stack levels used:    1
  9154 ;; Hardware stack levels required when called:    7
  9155 ;; This function calls:
  9156 ;;		___awtoft
  9157 ;;		___ftadd
  9158 ;;		___ftdiv
  9159 ;;		___ftmul
  9160 ;;		___fttol
  9161 ;; This function is called by:
  9162 ;;		_setDimmerLights_AdjRF
  9163 ;; This function uses a non-reentrant model
  9164 ;;
  9165                           
  9166                           
  9167                           ;psect for function _getPercentValue
  9168  110A                     _getPercentValue:	
  9169                           
  9170                           ;incstack = 0
  9171                           ; Regs used in _getPercentValue: [wreg+status,2+status,0+pclath+cstack]
  9172                           ;getPercentValue@value stored from wreg
  9173  110A  0020               	movlb	0	; select bank0
  9174  110B  00DB               	movwf	getPercentValue@value
  9175                           
  9176                           ;Dimmer_B1.c: 754: float i = ((char)((100-25)*0.8)) - ((char)((100-60)*0.8));
  9177  110C  3000               	movlw	0
  9178  110D  00DC               	movwf	getPercentValue@i
  9179  110E  30E0               	movlw	224
  9180  110F  00DD               	movwf	getPercentValue@i+1
  9181  1110  3041               	movlw	65
  9182  1111  00DE               	movwf	getPercentValue@i+2
  9183                           
  9184                           ;Dimmer_B1.c: 755: i /= 100;
  9185  1112  3000               	movlw	0
  9186  1113  00AE               	movwf	___ftdiv@f2
  9187  1114  30C8               	movlw	200
  9188  1115  00AF               	movwf	___ftdiv@f2+1
  9189  1116  3042               	movlw	66
  9190  1117  00B0               	movwf	___ftdiv@f2+2
  9191  1118  085C               	movf	getPercentValue@i,w
  9192  1119  00B1               	movwf	___ftdiv@f1
  9193  111A  085D               	movf	getPercentValue@i+1,w
  9194  111B  00B2               	movwf	___ftdiv@f1+1
  9195  111C  085E               	movf	getPercentValue@i+2,w
  9196  111D  00B3               	movwf	___ftdiv@f1+2
  9197  111E  318B  2304  3191   	fcall	___ftdiv
  9198  1121  0020               	movlb	0	; select bank0
  9199  1122  082E               	movf	?___ftdiv,w
  9200  1123  00DC               	movwf	getPercentValue@i
  9201  1124  082F               	movf	?___ftdiv+1,w
  9202  1125  00DD               	movwf	getPercentValue@i+1
  9203  1126  0830               	movf	?___ftdiv+2,w
  9204  1127  00DE               	movwf	getPercentValue@i+2
  9205                           
  9206                           ;Dimmer_B1.c: 756: return (char) (((100 - value) * i) + ((char)((100-60)*0.8)));
  9207  1128  085B               	movf	getPercentValue@value,w
  9208  1129  00D9               	movwf	??_getPercentValue
  9209  112A  01DA               	clrf	??_getPercentValue+1
  9210  112B  09D9               	comf	??_getPercentValue,f
  9211  112C  09DA               	comf	??_getPercentValue+1,f
  9212  112D  0AD9               	incf	??_getPercentValue,f
  9213  112E  1903               	skipnz
  9214  112F  0ADA               	incf	??_getPercentValue+1,f
  9215  1130  0859               	movf	??_getPercentValue,w
  9216  1131  3E64               	addlw	100
  9217  1132  00A8               	movwf	___awtoft@c
  9218  1133  3000               	movlw	0
  9219  1134  3D5A               	addwfc	??_getPercentValue+1,w
  9220  1135  00A9               	movwf	___awtoft@c+1
  9221  1136  319A  2236  3191   	fcall	___awtoft
  9222  1139  0020               	movlb	0	; select bank0
  9223  113A  0828               	movf	?___awtoft,w
  9224  113B  00B1               	movwf	___ftmul@f2
  9225  113C  0829               	movf	?___awtoft+1,w
  9226  113D  00B2               	movwf	___ftmul@f2+1
  9227  113E  082A               	movf	?___awtoft+2,w
  9228  113F  00B3               	movwf	___ftmul@f2+2
  9229  1140  085C               	movf	getPercentValue@i,w
  9230  1141  00AE               	movwf	___ftmul@f1
  9231  1142  085D               	movf	getPercentValue@i+1,w
  9232  1143  00AF               	movwf	___ftmul@f1+1
  9233  1144  085E               	movf	getPercentValue@i+2,w
  9234  1145  00B0               	movwf	___ftmul@f1+2
  9235  1146  3187  2746  3191   	fcall	___ftmul
  9236  1149  0020               	movlb	0	; select bank0
  9237  114A  082E               	movf	?___ftmul,w
  9238  114B  00C1               	movwf	___ftadd@f2
  9239  114C  082F               	movf	?___ftmul+1,w
  9240  114D  00C2               	movwf	___ftadd@f2+1
  9241  114E  0830               	movf	?___ftmul+2,w
  9242  114F  00C3               	movwf	___ftadd@f2+2
  9243  1150  3000               	movlw	0
  9244  1151  00BE               	movwf	___ftadd@f1
  9245  1152  3000               	movlw	0
  9246  1153  00BF               	movwf	___ftadd@f1+1
  9247  1154  3042               	movlw	66
  9248  1155  00C0               	movwf	___ftadd@f1+2
  9249  1156  318E  2612  3191   	fcall	___ftadd
  9250  1159  0020               	movlb	0	; select bank0
  9251  115A  083E               	movf	?___ftadd,w
  9252  115B  00CB               	movwf	___fttol@f1
  9253  115C  083F               	movf	?___ftadd+1,w
  9254  115D  00CC               	movwf	___fttol@f1+1
  9255  115E  0840               	movf	?___ftadd+2,w
  9256  115F  00CD               	movwf	___fttol@f1+2
  9257  1160  3196  26EF         	fcall	___fttol
  9258  1162  0020               	movlb	0	; select bank0
  9259  1163  084B               	movf	?___fttol,w
  9260  1164  0008               	return
  9261  1165                     __end_of_getPercentValue:	
  9262                           
  9263                           	psect	text40
  9264  0746                     __ptext40:	
  9265 ;; *************** function ___ftmul *****************
  9266 ;; Defined at:
  9267 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftmul.c"
  9268 ;; Parameters:    Size  Location     Type
  9269 ;;  f1              3   14[BANK0 ] float 
  9270 ;;  f2              3   17[BANK0 ] float 
  9271 ;; Auto vars:     Size  Location     Type
  9272 ;;  f3_as_produc    3   25[BANK0 ] unsigned um
  9273 ;;  sign            1   29[BANK0 ] unsigned char 
  9274 ;;  cntr            1   28[BANK0 ] unsigned char 
  9275 ;;  exp             1   24[BANK0 ] unsigned char 
  9276 ;; Return value:  Size  Location     Type
  9277 ;;                  3   14[BANK0 ] float 
  9278 ;; Registers used:
  9279 ;;		wreg, status,2, status,0, pclath, cstack
  9280 ;; Tracked objects:
  9281 ;;		On entry : 0/0
  9282 ;;		On exit  : 0/0
  9283 ;;		Unchanged: 0/0
  9284 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9285 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9286 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9287 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9288 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9289 ;;Total ram usage:       16 bytes
  9290 ;; Hardware stack levels used:    1
  9291 ;; Hardware stack levels required when called:    6
  9292 ;; This function calls:
  9293 ;;		___ftpack
  9294 ;; This function is called by:
  9295 ;;		_getPercentValue
  9296 ;; This function uses a non-reentrant model
  9297 ;;
  9298                           
  9299                           
  9300                           ;psect for function ___ftmul
  9301  0746                     ___ftmul:	
  9302                           
  9303                           ;incstack = 0
  9304                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  9305  0746  0020               	movlb	0	; select bank0
  9306  0747  082E               	movf	___ftmul@f1,w
  9307  0748  00B4               	movwf	??___ftmul
  9308  0749  082F               	movf	___ftmul@f1+1,w
  9309  074A  00B5               	movwf	??___ftmul+1
  9310  074B  0830               	movf	___ftmul@f1+2,w
  9311  074C  00B6               	movwf	??___ftmul+2
  9312  074D  1003               	clrc
  9313  074E  0D35               	rlf	??___ftmul+1,w
  9314  074F  0D36               	rlf	??___ftmul+2,w
  9315  0750  00B7               	movwf	??___ftmul+3
  9316  0751  0837               	movf	??___ftmul+3,w
  9317  0752  00B8               	movwf	___ftmul@exp
  9318  0753  08B8               	movf	___ftmul@exp,f
  9319  0754  1D03               	skipz
  9320  0755  2F5D               	goto	l6138
  9321  0756  3000               	movlw	0
  9322  0757  00AE               	movwf	?___ftmul
  9323  0758  3000               	movlw	0
  9324  0759  00AF               	movwf	?___ftmul+1
  9325  075A  3000               	movlw	0
  9326  075B  00B0               	movwf	?___ftmul+2
  9327  075C  0008               	return
  9328  075D                     l6138:	
  9329  075D  0831               	movf	___ftmul@f2,w
  9330  075E  00B4               	movwf	??___ftmul
  9331  075F  0832               	movf	___ftmul@f2+1,w
  9332  0760  00B5               	movwf	??___ftmul+1
  9333  0761  0833               	movf	___ftmul@f2+2,w
  9334  0762  00B6               	movwf	??___ftmul+2
  9335  0763  1003               	clrc
  9336  0764  0D35               	rlf	??___ftmul+1,w
  9337  0765  0D36               	rlf	??___ftmul+2,w
  9338  0766  00B7               	movwf	??___ftmul+3
  9339  0767  0837               	movf	??___ftmul+3,w
  9340  0768  00BD               	movwf	___ftmul@sign
  9341  0769  08BD               	movf	___ftmul@sign,f
  9342  076A  1D03               	skipz
  9343  076B  2F73               	goto	l6144
  9344  076C  3000               	movlw	0
  9345  076D  00AE               	movwf	?___ftmul
  9346  076E  3000               	movlw	0
  9347  076F  00AF               	movwf	?___ftmul+1
  9348  0770  3000               	movlw	0
  9349  0771  00B0               	movwf	?___ftmul+2
  9350  0772  0008               	return
  9351  0773                     l6144:	
  9352  0773  083D               	movf	___ftmul@sign,w
  9353  0774  3E7B               	addlw	123
  9354  0775  00B4               	movwf	??___ftmul
  9355  0776  0834               	movf	??___ftmul,w
  9356  0777  07B8               	addwf	___ftmul@exp,f
  9357  0778  082E               	movf	___ftmul@f1,w
  9358  0779  00B4               	movwf	??___ftmul
  9359  077A  082F               	movf	___ftmul@f1+1,w
  9360  077B  00B5               	movwf	??___ftmul+1
  9361  077C  0830               	movf	___ftmul@f1+2,w
  9362  077D  00B6               	movwf	??___ftmul+2
  9363  077E  3010               	movlw	16
  9364  077F                     u4465:	
  9365  077F  36B6               	lsrf	??___ftmul+2,f
  9366  0780  0CB5               	rrf	??___ftmul+1,f
  9367  0781  0CB4               	rrf	??___ftmul,f
  9368  0782  0B89               	decfsz	9,f
  9369  0783  2F7F               	goto	u4465
  9370  0784  0834               	movf	??___ftmul,w
  9371  0785  00B7               	movwf	??___ftmul+3
  9372  0786  0837               	movf	??___ftmul+3,w
  9373  0787  00BD               	movwf	___ftmul@sign
  9374  0788  0831               	movf	___ftmul@f2,w
  9375  0789  00B4               	movwf	??___ftmul
  9376  078A  0832               	movf	___ftmul@f2+1,w
  9377  078B  00B5               	movwf	??___ftmul+1
  9378  078C  0833               	movf	___ftmul@f2+2,w
  9379  078D  00B6               	movwf	??___ftmul+2
  9380  078E  3010               	movlw	16
  9381  078F                     u4475:	
  9382  078F  36B6               	lsrf	??___ftmul+2,f
  9383  0790  0CB5               	rrf	??___ftmul+1,f
  9384  0791  0CB4               	rrf	??___ftmul,f
  9385  0792  0B89               	decfsz	9,f
  9386  0793  2F8F               	goto	u4475
  9387  0794  0834               	movf	??___ftmul,w
  9388  0795  00B7               	movwf	??___ftmul+3
  9389  0796  0837               	movf	??___ftmul+3,w
  9390  0797  06BD               	xorwf	___ftmul@sign,f
  9391  0798  3080               	movlw	128
  9392  0799  00B4               	movwf	??___ftmul
  9393  079A  0834               	movf	??___ftmul,w
  9394  079B  05BD               	andwf	___ftmul@sign,f
  9395  079C  17AF               	bsf	___ftmul@f1+1,7
  9396  079D  17B2               	bsf	___ftmul@f2+1,7
  9397  079E  30FF               	movlw	255
  9398  079F  05B1               	andwf	___ftmul@f2,f
  9399  07A0  30FF               	movlw	255
  9400  07A1  05B2               	andwf	___ftmul@f2+1,f
  9401  07A2  3000               	movlw	0
  9402  07A3  05B3               	andwf	___ftmul@f2+2,f
  9403  07A4  3000               	movlw	0
  9404  07A5  00B9               	movwf	___ftmul@f3_as_product
  9405  07A6  3000               	movlw	0
  9406  07A7  00BA               	movwf	___ftmul@f3_as_product+1
  9407  07A8  3000               	movlw	0
  9408  07A9  00BB               	movwf	___ftmul@f3_as_product+2
  9409  07AA  3007               	movlw	7
  9410  07AB  00B4               	movwf	??___ftmul
  9411  07AC  0834               	movf	??___ftmul,w
  9412  07AD  00BC               	movwf	___ftmul@cntr
  9413  07AE                     l6156:	
  9414  07AE  1C2E               	btfss	___ftmul@f1,0
  9415  07AF  2FB6               	goto	l6160
  9416  07B0  0831               	movf	___ftmul@f2,w
  9417  07B1  07B9               	addwf	___ftmul@f3_as_product,f
  9418  07B2  0832               	movf	___ftmul@f2+1,w
  9419  07B3  3DBA               	addwfc	___ftmul@f3_as_product+1,f
  9420  07B4  0833               	movf	___ftmul@f2+2,w
  9421  07B5  3DBB               	addwfc	___ftmul@f3_as_product+2,f
  9422  07B6                     l6160:	
  9423  07B6  3001               	movlw	1
  9424  07B7                     u4495:	
  9425  07B7  36B0               	lsrf	___ftmul@f1+2,f
  9426  07B8  0CAF               	rrf	___ftmul@f1+1,f
  9427  07B9  0CAE               	rrf	___ftmul@f1,f
  9428  07BA  0B89               	decfsz	9,f
  9429  07BB  2FB7               	goto	u4495
  9430  07BC  3001               	movlw	1
  9431  07BD                     u4505:	
  9432  07BD  35B1               	lslf	___ftmul@f2,f
  9433  07BE  0DB2               	rlf	___ftmul@f2+1,f
  9434  07BF  0DB3               	rlf	___ftmul@f2+2,f
  9435  07C0  0B89               	decfsz	9,f
  9436  07C1  2FBD               	goto	u4505
  9437  07C2  3001               	movlw	1
  9438  07C3  02BC               	subwf	___ftmul@cntr,f
  9439  07C4  1D03               	btfss	3,2
  9440  07C5  2FAE               	goto	l6156
  9441  07C6  3009               	movlw	9
  9442  07C7  00B4               	movwf	??___ftmul
  9443  07C8  0834               	movf	??___ftmul,w
  9444  07C9  00BC               	movwf	___ftmul@cntr
  9445  07CA                     l6168:	
  9446  07CA  1C2E               	btfss	___ftmul@f1,0
  9447  07CB  2FD2               	goto	l6172
  9448  07CC  0831               	movf	___ftmul@f2,w
  9449  07CD  07B9               	addwf	___ftmul@f3_as_product,f
  9450  07CE  0832               	movf	___ftmul@f2+1,w
  9451  07CF  3DBA               	addwfc	___ftmul@f3_as_product+1,f
  9452  07D0  0833               	movf	___ftmul@f2+2,w
  9453  07D1  3DBB               	addwfc	___ftmul@f3_as_product+2,f
  9454  07D2                     l6172:	
  9455  07D2  3001               	movlw	1
  9456  07D3                     u4535:	
  9457  07D3  36B0               	lsrf	___ftmul@f1+2,f
  9458  07D4  0CAF               	rrf	___ftmul@f1+1,f
  9459  07D5  0CAE               	rrf	___ftmul@f1,f
  9460  07D6  0B89               	decfsz	9,f
  9461  07D7  2FD3               	goto	u4535
  9462  07D8  3001               	movlw	1
  9463  07D9                     u4545:	
  9464  07D9  36BB               	lsrf	___ftmul@f3_as_product+2,f
  9465  07DA  0CBA               	rrf	___ftmul@f3_as_product+1,f
  9466  07DB  0CB9               	rrf	___ftmul@f3_as_product,f
  9467  07DC  0B89               	decfsz	9,f
  9468  07DD  2FD9               	goto	u4545
  9469  07DE  3001               	movlw	1
  9470  07DF  02BC               	subwf	___ftmul@cntr,f
  9471  07E0  1D03               	btfss	3,2
  9472  07E1  2FCA               	goto	l6168
  9473  07E2  0839               	movf	___ftmul@f3_as_product,w
  9474  07E3  00A0               	movwf	___ftpack@arg
  9475  07E4  083A               	movf	___ftmul@f3_as_product+1,w
  9476  07E5  00A1               	movwf	___ftpack@arg+1
  9477  07E6  083B               	movf	___ftmul@f3_as_product+2,w
  9478  07E7  00A2               	movwf	___ftpack@arg+2
  9479  07E8  0838               	movf	___ftmul@exp,w
  9480  07E9  00B4               	movwf	??___ftmul
  9481  07EA  0834               	movf	??___ftmul,w
  9482  07EB  00A3               	movwf	___ftpack@exp
  9483  07EC  083D               	movf	___ftmul@sign,w
  9484  07ED  00B5               	movwf	??___ftmul+1
  9485  07EE  0835               	movf	??___ftmul+1,w
  9486  07EF  00A4               	movwf	___ftpack@sign
  9487  07F0  3192  2220         	fcall	___ftpack
  9488  07F2  0020               	movlb	0	; select bank0
  9489  07F3  0820               	movf	?___ftpack,w
  9490  07F4  00AE               	movwf	?___ftmul
  9491  07F5  0821               	movf	?___ftpack+1,w
  9492  07F6  00AF               	movwf	?___ftmul+1
  9493  07F7  0822               	movf	?___ftpack+2,w
  9494  07F8  00B0               	movwf	?___ftmul+2
  9495  07F9  0008               	return
  9496  07FA                     __end_of___ftmul:	
  9497                           
  9498                           	psect	text41
  9499  0E12                     __ptext41:	
  9500 ;; *************** function ___ftadd *****************
  9501 ;; Defined at:
  9502 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftadd.c"
  9503 ;; Parameters:    Size  Location     Type
  9504 ;;  f1              3   30[BANK0 ] float 
  9505 ;;  f2              3   33[BANK0 ] float 
  9506 ;; Auto vars:     Size  Location     Type
  9507 ;;  exp1            1   42[BANK0 ] unsigned char 
  9508 ;;  exp2            1   41[BANK0 ] unsigned char 
  9509 ;;  sign            1   40[BANK0 ] unsigned char 
  9510 ;; Return value:  Size  Location     Type
  9511 ;;                  3   30[BANK0 ] float 
  9512 ;; Registers used:
  9513 ;;		wreg, status,2, status,0, pclath, cstack
  9514 ;; Tracked objects:
  9515 ;;		On entry : 0/0
  9516 ;;		On exit  : 0/0
  9517 ;;		Unchanged: 0/0
  9518 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9519 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9520 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9521 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9522 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9523 ;;Total ram usage:       13 bytes
  9524 ;; Hardware stack levels used:    1
  9525 ;; Hardware stack levels required when called:    6
  9526 ;; This function calls:
  9527 ;;		___ftpack
  9528 ;; This function is called by:
  9529 ;;		_getPercentValue
  9530 ;; This function uses a non-reentrant model
  9531 ;;
  9532                           
  9533                           
  9534                           ;psect for function ___ftadd
  9535  0E12                     ___ftadd:	
  9536                           
  9537                           ;incstack = 0
  9538                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
  9539  0E12  0020               	movlb	0	; select bank0
  9540  0E13  083E               	movf	___ftadd@f1,w
  9541  0E14  00C4               	movwf	??___ftadd
  9542  0E15  083F               	movf	___ftadd@f1+1,w
  9543  0E16  00C5               	movwf	??___ftadd+1
  9544  0E17  0840               	movf	___ftadd@f1+2,w
  9545  0E18  00C6               	movwf	??___ftadd+2
  9546  0E19  1003               	clrc
  9547  0E1A  0D45               	rlf	??___ftadd+1,w
  9548  0E1B  0D46               	rlf	??___ftadd+2,w
  9549  0E1C  00C7               	movwf	??___ftadd+3
  9550  0E1D  0847               	movf	??___ftadd+3,w
  9551  0E1E  00CA               	movwf	___ftadd@exp1
  9552  0E1F  0841               	movf	___ftadd@f2,w
  9553  0E20  00C4               	movwf	??___ftadd
  9554  0E21  0842               	movf	___ftadd@f2+1,w
  9555  0E22  00C5               	movwf	??___ftadd+1
  9556  0E23  0843               	movf	___ftadd@f2+2,w
  9557  0E24  00C6               	movwf	??___ftadd+2
  9558  0E25  1003               	clrc
  9559  0E26  0D45               	rlf	??___ftadd+1,w
  9560  0E27  0D46               	rlf	??___ftadd+2,w
  9561  0E28  00C7               	movwf	??___ftadd+3
  9562  0E29  0847               	movf	??___ftadd+3,w
  9563  0E2A  00C9               	movwf	___ftadd@exp2
  9564  0E2B  084A               	movf	___ftadd@exp1,w
  9565  0E2C  1903               	btfsc	3,2
  9566  0E2D  2E3A               	goto	l6026
  9567  0E2E  0849               	movf	___ftadd@exp2,w
  9568  0E2F  024A               	subwf	___ftadd@exp1,w
  9569  0E30  1803               	skipnc
  9570  0E31  2E41               	goto	l6030
  9571  0E32  034A               	decf	___ftadd@exp1,w
  9572  0E33  3AFF               	xorlw	255
  9573  0E34  0749               	addwf	___ftadd@exp2,w
  9574  0E35  00C4               	movwf	??___ftadd
  9575  0E36  3019               	movlw	25
  9576  0E37  0244               	subwf	??___ftadd,w
  9577  0E38  1C03               	skipc
  9578  0E39  2E41               	goto	l6030
  9579  0E3A                     l6026:	
  9580  0E3A  0841               	movf	___ftadd@f2,w
  9581  0E3B  00BE               	movwf	?___ftadd
  9582  0E3C  0842               	movf	___ftadd@f2+1,w
  9583  0E3D  00BF               	movwf	?___ftadd+1
  9584  0E3E  0843               	movf	___ftadd@f2+2,w
  9585  0E3F  00C0               	movwf	?___ftadd+2
  9586  0E40  0008               	return
  9587  0E41                     l6030:	
  9588  0E41  0849               	movf	___ftadd@exp2,w
  9589  0E42  1903               	btfsc	3,2
  9590  0E43  0008               	return
  9591  0E44  084A               	movf	___ftadd@exp1,w
  9592  0E45  0249               	subwf	___ftadd@exp2,w
  9593  0E46  1803               	skipnc
  9594  0E47  2E50               	goto	l6036
  9595  0E48  0349               	decf	___ftadd@exp2,w
  9596  0E49  3AFF               	xorlw	255
  9597  0E4A  074A               	addwf	___ftadd@exp1,w
  9598  0E4B  00C4               	movwf	??___ftadd
  9599  0E4C  3019               	movlw	25
  9600  0E4D  0244               	subwf	??___ftadd,w
  9601  0E4E  1803               	btfsc	3,0
  9602  0E4F  0008               	return
  9603  0E50                     l6036:	
  9604  0E50  3006               	movlw	6
  9605  0E51  00C4               	movwf	??___ftadd
  9606  0E52  0844               	movf	??___ftadd,w
  9607  0E53  00C8               	movwf	___ftadd@sign
  9608  0E54  1BC0               	btfsc	___ftadd@f1+2,7
  9609  0E55  17C8               	bsf	___ftadd@sign,7
  9610  0E56  1BC3               	btfsc	___ftadd@f2+2,7
  9611  0E57  1748               	bsf	___ftadd@sign,6
  9612  0E58  17BF               	bsf	___ftadd@f1+1,7
  9613  0E59  30FF               	movlw	255
  9614  0E5A  05BE               	andwf	___ftadd@f1,f
  9615  0E5B  30FF               	movlw	255
  9616  0E5C  05BF               	andwf	___ftadd@f1+1,f
  9617  0E5D  3000               	movlw	0
  9618  0E5E  05C0               	andwf	___ftadd@f1+2,f
  9619  0E5F  17C2               	bsf	___ftadd@f2+1,7
  9620  0E60  30FF               	movlw	255
  9621  0E61  05C1               	andwf	___ftadd@f2,f
  9622  0E62  30FF               	movlw	255
  9623  0E63  05C2               	andwf	___ftadd@f2+1,f
  9624  0E64  3000               	movlw	0
  9625  0E65  05C3               	andwf	___ftadd@f2+2,f
  9626  0E66  0849               	movf	___ftadd@exp2,w
  9627  0E67  024A               	subwf	___ftadd@exp1,w
  9628  0E68  1803               	skipnc
  9629  0E69  2E8C               	goto	l6058
  9630  0E6A                     l6048:	
  9631  0E6A  3001               	movlw	1
  9632  0E6B                     u4225:	
  9633  0E6B  35C1               	lslf	___ftadd@f2,f
  9634  0E6C  0DC2               	rlf	___ftadd@f2+1,f
  9635  0E6D  0DC3               	rlf	___ftadd@f2+2,f
  9636  0E6E  0B89               	decfsz	9,f
  9637  0E6F  2E6B               	goto	u4225
  9638  0E70  3001               	movlw	1
  9639  0E71  02C9               	subwf	___ftadd@exp2,f
  9640  0E72  0849               	movf	___ftadd@exp2,w
  9641  0E73  064A               	xorwf	___ftadd@exp1,w
  9642  0E74  1903               	skipnz
  9643  0E75  2E87               	goto	l6056
  9644  0E76  3001               	movlw	1
  9645  0E77  02C8               	subwf	___ftadd@sign,f
  9646  0E78  0848               	movf	___ftadd@sign,w
  9647  0E79  3907               	andlw	7
  9648  0E7A  1903               	btfsc	3,2
  9649  0E7B  2E87               	goto	l6056
  9650  0E7C  2E6A               	goto	l6048
  9651  0E7D                     l6054:	
  9652  0E7D  3001               	movlw	1
  9653  0E7E                     u4255:	
  9654  0E7E  36C0               	lsrf	___ftadd@f1+2,f
  9655  0E7F  0CBF               	rrf	___ftadd@f1+1,f
  9656  0E80  0CBE               	rrf	___ftadd@f1,f
  9657  0E81  0B89               	decfsz	9,f
  9658  0E82  2E7E               	goto	u4255
  9659  0E83  3001               	movlw	1
  9660  0E84  00C4               	movwf	??___ftadd
  9661  0E85  0844               	movf	??___ftadd,w
  9662  0E86  07CA               	addwf	___ftadd@exp1,f
  9663  0E87                     l6056:	
  9664  0E87  084A               	movf	___ftadd@exp1,w
  9665  0E88  0649               	xorwf	___ftadd@exp2,w
  9666  0E89  1903               	btfsc	3,2
  9667  0E8A  2EB1               	goto	l3309
  9668  0E8B  2E7D               	goto	l6054
  9669  0E8C                     l6058:	
  9670  0E8C  084A               	movf	___ftadd@exp1,w
  9671  0E8D  0249               	subwf	___ftadd@exp2,w
  9672  0E8E  1803               	skipnc
  9673  0E8F  2EB1               	goto	l3309
  9674  0E90                     l6060:	
  9675  0E90  3001               	movlw	1
  9676  0E91                     u4285:	
  9677  0E91  35BE               	lslf	___ftadd@f1,f
  9678  0E92  0DBF               	rlf	___ftadd@f1+1,f
  9679  0E93  0DC0               	rlf	___ftadd@f1+2,f
  9680  0E94  0B89               	decfsz	9,f
  9681  0E95  2E91               	goto	u4285
  9682  0E96  3001               	movlw	1
  9683  0E97  02CA               	subwf	___ftadd@exp1,f
  9684  0E98  0849               	movf	___ftadd@exp2,w
  9685  0E99  064A               	xorwf	___ftadd@exp1,w
  9686  0E9A  1903               	skipnz
  9687  0E9B  2EAD               	goto	l6068
  9688  0E9C  3001               	movlw	1
  9689  0E9D  02C8               	subwf	___ftadd@sign,f
  9690  0E9E  0848               	movf	___ftadd@sign,w
  9691  0E9F  3907               	andlw	7
  9692  0EA0  1903               	btfsc	3,2
  9693  0EA1  2EAD               	goto	l6068
  9694  0EA2  2E90               	goto	l6060
  9695  0EA3                     l6066:	
  9696  0EA3  3001               	movlw	1
  9697  0EA4                     u4315:	
  9698  0EA4  36C3               	lsrf	___ftadd@f2+2,f
  9699  0EA5  0CC2               	rrf	___ftadd@f2+1,f
  9700  0EA6  0CC1               	rrf	___ftadd@f2,f
  9701  0EA7  0B89               	decfsz	9,f
  9702  0EA8  2EA4               	goto	u4315
  9703  0EA9  3001               	movlw	1
  9704  0EAA  00C4               	movwf	??___ftadd
  9705  0EAB  0844               	movf	??___ftadd,w
  9706  0EAC  07C9               	addwf	___ftadd@exp2,f
  9707  0EAD                     l6068:	
  9708  0EAD  084A               	movf	___ftadd@exp1,w
  9709  0EAE  0649               	xorwf	___ftadd@exp2,w
  9710  0EAF  1D03               	skipz
  9711  0EB0  2EA3               	goto	l6066
  9712  0EB1                     l3309:	
  9713  0EB1  1FC8               	btfss	___ftadd@sign,7
  9714  0EB2  2EC3               	goto	l6072
  9715  0EB3  30FF               	movlw	255
  9716  0EB4  06BE               	xorwf	___ftadd@f1,f
  9717  0EB5  30FF               	movlw	255
  9718  0EB6  06BF               	xorwf	___ftadd@f1+1,f
  9719  0EB7  30FF               	movlw	255
  9720  0EB8  06C0               	xorwf	___ftadd@f1+2,f
  9721  0EB9  3001               	movlw	1
  9722  0EBA  07BE               	addwf	___ftadd@f1,f
  9723  0EBB  3000               	movlw	0
  9724  0EBC  1803               	skipnc
  9725  0EBD  3001               	movlw	1
  9726  0EBE  07BF               	addwf	___ftadd@f1+1,f
  9727  0EBF  3000               	movlw	0
  9728  0EC0  1803               	skipnc
  9729  0EC1  3001               	movlw	1
  9730  0EC2  07C0               	addwf	___ftadd@f1+2,f
  9731  0EC3                     l6072:	
  9732  0EC3  1F48               	btfss	___ftadd@sign,6
  9733  0EC4  2ED5               	goto	l6076
  9734  0EC5  30FF               	movlw	255
  9735  0EC6  06C1               	xorwf	___ftadd@f2,f
  9736  0EC7  30FF               	movlw	255
  9737  0EC8  06C2               	xorwf	___ftadd@f2+1,f
  9738  0EC9  30FF               	movlw	255
  9739  0ECA  06C3               	xorwf	___ftadd@f2+2,f
  9740  0ECB  3001               	movlw	1
  9741  0ECC  07C1               	addwf	___ftadd@f2,f
  9742  0ECD  3000               	movlw	0
  9743  0ECE  1803               	skipnc
  9744  0ECF  3001               	movlw	1
  9745  0ED0  07C2               	addwf	___ftadd@f2+1,f
  9746  0ED1  3000               	movlw	0
  9747  0ED2  1803               	skipnc
  9748  0ED3  3001               	movlw	1
  9749  0ED4  07C3               	addwf	___ftadd@f2+2,f
  9750  0ED5                     l6076:	
  9751  0ED5  01C8               	clrf	___ftadd@sign
  9752  0ED6  083E               	movf	___ftadd@f1,w
  9753  0ED7  07C1               	addwf	___ftadd@f2,f
  9754  0ED8  083F               	movf	___ftadd@f1+1,w
  9755  0ED9  3DC2               	addwfc	___ftadd@f2+1,f
  9756  0EDA  0840               	movf	___ftadd@f1+2,w
  9757  0EDB  3DC3               	addwfc	___ftadd@f2+2,f
  9758  0EDC  1FC3               	btfss	___ftadd@f2+2,7
  9759  0EDD  2EF0               	goto	l6086
  9760  0EDE  30FF               	movlw	255
  9761  0EDF  06C1               	xorwf	___ftadd@f2,f
  9762  0EE0  30FF               	movlw	255
  9763  0EE1  06C2               	xorwf	___ftadd@f2+1,f
  9764  0EE2  30FF               	movlw	255
  9765  0EE3  06C3               	xorwf	___ftadd@f2+2,f
  9766  0EE4  3001               	movlw	1
  9767  0EE5  07C1               	addwf	___ftadd@f2,f
  9768  0EE6  3000               	movlw	0
  9769  0EE7  1803               	skipnc
  9770  0EE8  3001               	movlw	1
  9771  0EE9  07C2               	addwf	___ftadd@f2+1,f
  9772  0EEA  3000               	movlw	0
  9773  0EEB  1803               	skipnc
  9774  0EEC  3001               	movlw	1
  9775  0EED  07C3               	addwf	___ftadd@f2+2,f
  9776  0EEE  01C8               	clrf	___ftadd@sign
  9777  0EEF  0AC8               	incf	___ftadd@sign,f
  9778  0EF0                     l6086:	
  9779  0EF0  0841               	movf	___ftadd@f2,w
  9780  0EF1  00A0               	movwf	___ftpack@arg
  9781  0EF2  0842               	movf	___ftadd@f2+1,w
  9782  0EF3  00A1               	movwf	___ftpack@arg+1
  9783  0EF4  0843               	movf	___ftadd@f2+2,w
  9784  0EF5  00A2               	movwf	___ftpack@arg+2
  9785  0EF6  084A               	movf	___ftadd@exp1,w
  9786  0EF7  00C4               	movwf	??___ftadd
  9787  0EF8  0844               	movf	??___ftadd,w
  9788  0EF9  00A3               	movwf	___ftpack@exp
  9789  0EFA  0848               	movf	___ftadd@sign,w
  9790  0EFB  00C5               	movwf	??___ftadd+1
  9791  0EFC  0845               	movf	??___ftadd+1,w
  9792  0EFD  00A4               	movwf	___ftpack@sign
  9793  0EFE  3192  2220         	fcall	___ftpack
  9794  0F00  0020               	movlb	0	; select bank0
  9795  0F01  0820               	movf	?___ftpack,w
  9796  0F02  00BE               	movwf	?___ftadd
  9797  0F03  0821               	movf	?___ftpack+1,w
  9798  0F04  00BF               	movwf	?___ftadd+1
  9799  0F05  0822               	movf	?___ftpack+2,w
  9800  0F06  00C0               	movwf	?___ftadd+2
  9801  0F07  0008               	return
  9802  0F08                     __end_of___ftadd:	
  9803                           
  9804                           	psect	text42
  9805  1A15                     __ptext42:	
  9806 ;; *************** function _RF_RxDisable *****************
  9807 ;; Defined at:
  9808 ;;		line 215 in file "../src/RF_Control_B1.c"
  9809 ;; Parameters:    Size  Location     Type
  9810 ;;  rf              1    wreg     unsigned char 
  9811 ;; Auto vars:     Size  Location     Type
  9812 ;;  rf              1    4[BANK0 ] unsigned char 
  9813 ;; Return value:  Size  Location     Type
  9814 ;;		None               void
  9815 ;; Registers used:
  9816 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9817 ;; Tracked objects:
  9818 ;;		On entry : 0/0
  9819 ;;		On exit  : 0/0
  9820 ;;		Unchanged: 0/0
  9821 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9822 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9823 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9824 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9825 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9826 ;;Total ram usage:        1 bytes
  9827 ;; Hardware stack levels used:    1
  9828 ;; Hardware stack levels required when called:    7
  9829 ;; This function calls:
  9830 ;;		_CC2500_WriteCommand
  9831 ;;		_RfPointSelect
  9832 ;; This function is called by:
  9833 ;;		_setRF_Main
  9834 ;; This function uses a non-reentrant model
  9835 ;;
  9836                           
  9837                           
  9838                           ;psect for function _RF_RxDisable
  9839  1A15                     _RF_RxDisable:	
  9840                           
  9841                           ;incstack = 0
  9842                           ; Regs used in _RF_RxDisable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9843                           ;RF_RxDisable@rf stored from wreg
  9844  1A15  0020               	movlb	0	; select bank0
  9845  1A16  00A4               	movwf	RF_RxDisable@rf
  9846                           
  9847                           ;RF_Control_B1.c: 216: RfPointSelect(rf);
  9848  1A17  0824               	movf	RF_RxDisable@rf,w
  9849  1A18  31A6  263F  319A   	fcall	_RfPointSelect
  9850                           
  9851                           ;RF_Control_B1.c: 218: if (RF->ReceiveGO == 1 || RF->RxStatus == 1) {
  9852  1A1B  0021               	movlb	1	; select bank1
  9853  1A1C  083F               	movf	_RF^(0+128),w
  9854  1A1D  0086               	movwf	6
  9855  1A1E  0187               	clrf	7
  9856  1A1F  1881               	btfsc	1,1
  9857  1A20  2A26               	goto	l7062
  9858  1A21  083F               	movf	_RF^(0+128),w
  9859  1A22  0086               	movwf	6
  9860  1A23  0187               	clrf	7
  9861  1A24  1D81               	btfss	1,3
  9862  1A25  0008               	return
  9863  1A26                     l7062:	
  9864                           
  9865                           ;RF_Control_B1.c: 219: RF->RxStatus = 0;
  9866  1A26  083F               	movf	_RF^(0+128),w
  9867  1A27  0086               	movwf	6
  9868  1A28  0187               	clrf	7
  9869  1A29  1181               	bcf	1,3
  9870                           
  9871                           ;RF_Control_B1.c: 220: RF->ReceiveGO = 0;
  9872  1A2A  083F               	movf	_RF^(0+128),w
  9873  1A2B  0086               	movwf	6
  9874  1A2C  0187               	clrf	7
  9875  1A2D  1081               	bcf	1,1
  9876                           
  9877                           ;RF_Control_B1.c: 221: CC2500_WriteCommand(0x36);
  9878  1A2E  3036               	movlw	54
  9879  1A2F  31A6  265D  319A   	fcall	_CC2500_WriteCommand
  9880                           
  9881                           ;RF_Control_B1.c: 222: CC2500_WriteCommand(0x3A);
  9882  1A32  303A               	movlw	58
  9883  1A33  31A6  265D         	fcall	_CC2500_WriteCommand
  9884  1A35  0008               	return
  9885  1A36                     __end_of_RF_RxDisable:	
  9886                           
  9887                           	psect	text43
  9888  1E13                     __ptext43:	
  9889 ;; *************** function _CC2500_TxData *****************
  9890 ;; Defined at:
  9891 ;;		line 32 in file "../src/CC2500_B1.c"
  9892 ;; Parameters:    Size  Location     Type
  9893 ;;		None
  9894 ;; Auto vars:     Size  Location     Type
  9895 ;;  loop_e          1    5[BANK0 ] unsigned char 
  9896 ;; Return value:  Size  Location     Type
  9897 ;;		None               void
  9898 ;; Registers used:
  9899 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9900 ;; Tracked objects:
  9901 ;;		On entry : 0/0
  9902 ;;		On exit  : 0/0
  9903 ;;		Unchanged: 0/0
  9904 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9905 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9906 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9907 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9908 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9909 ;;Total ram usage:        2 bytes
  9910 ;; Hardware stack levels used:    1
  9911 ;; Hardware stack levels required when called:    7
  9912 ;; This function calls:
  9913 ;;		_CC2500_WriteByte
  9914 ;;		_CC2500_WriteCommand
  9915 ;; This function is called by:
  9916 ;;		_setRF_Main
  9917 ;; This function uses a non-reentrant model
  9918 ;;
  9919                           
  9920                           
  9921                           ;psect for function _CC2500_TxData
  9922  1E13                     _CC2500_TxData:	
  9923                           
  9924                           ;CC2500_B1.c: 33: unsigned char loop_e;
  9925                           ;CC2500_B1.c: 35: RC4 = 0;
  9926                           
  9927                           ;incstack = 0
  9928                           ; Regs used in _CC2500_TxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9929  1E13  0020               	movlb	0	; select bank0
  9930  1E14  120E               	bcf	14,4	;volatile
  9931                           
  9932                           ;CC2500_B1.c: 36: SPI0Buffer = 0x3F + 0x40;
  9933  1E15  307F               	movlw	127
  9934  1E16  00A4               	movwf	??_CC2500_TxData
  9935  1E17  0824               	movf	??_CC2500_TxData,w
  9936  1E18  0021               	movlb	1	; select bank1
  9937  1E19  00C3               	movwf	_SPI0Buffer^(0+128)
  9938  1E1A                     l291:	
  9939                           ;CC2500_B1.c: 37: while (RC2 == 1);
  9940                           
  9941  1E1A  0020               	movlb	0	; select bank0
  9942  1E1B  190E               	btfsc	14,2	;volatile
  9943  1E1C  2E1A               	goto	l291
  9944                           
  9945                           ;CC2500_B1.c: 38: CC2500_WriteByte();
  9946  1E1D  3198  206F  319E   	fcall	_CC2500_WriteByte
  9947                           
  9948                           ;CC2500_B1.c: 39: SPI0Buffer = Tx_Length;
  9949  1E20  0021               	movlb	1	; select bank1
  9950  1E21  0845               	movf	_Tx_Length^(0+128),w
  9951  1E22  0020               	movlb	0	; select bank0
  9952  1E23  00A4               	movwf	??_CC2500_TxData
  9953  1E24  0824               	movf	??_CC2500_TxData,w
  9954  1E25  0021               	movlb	1	; select bank1
  9955  1E26  00C3               	movwf	_SPI0Buffer^(0+128)
  9956                           
  9957                           ;CC2500_B1.c: 40: CC2500_WriteByte();
  9958  1E27  3198  206F  319E   	fcall	_CC2500_WriteByte
  9959                           
  9960                           ;CC2500_B1.c: 41: for (loop_e = 0; loop_e < Tx_Length; loop_e++) {
  9961  1E2A  0020               	movlb	0	; select bank0
  9962  1E2B  01A5               	clrf	CC2500_TxData@loop_e
  9963  1E2C                     l6854:	
  9964  1E2C  0021               	movlb	1	; select bank1
  9965  1E2D  0845               	movf	_Tx_Length^(0+128),w
  9966  1E2E  0020               	movlb	0	; select bank0
  9967  1E2F  0225               	subwf	CC2500_TxData@loop_e,w
  9968  1E30  1803               	btfsc	3,0
  9969  1E31  2E44               	goto	l296
  9970                           
  9971                           ;CC2500_B1.c: 42: SPI0Buffer = RF_Data[loop_e];
  9972  1E32  0825               	movf	CC2500_TxData@loop_e,w
  9973  1E33  3EA0               	addlw	_RF_Data& (0+255)
  9974  1E34  0086               	movwf	6
  9975  1E35  0187               	clrf	7
  9976  1E36  0801               	movf	1,w
  9977  1E37  00A4               	movwf	??_CC2500_TxData
  9978  1E38  0824               	movf	??_CC2500_TxData,w
  9979  1E39  0021               	movlb	1	; select bank1
  9980  1E3A  00C3               	movwf	_SPI0Buffer^(0+128)
  9981                           
  9982                           ;CC2500_B1.c: 43: CC2500_WriteByte();
  9983  1E3B  3198  206F  319E   	fcall	_CC2500_WriteByte
  9984  1E3E  3001               	movlw	1
  9985  1E3F  0020               	movlb	0	; select bank0
  9986  1E40  00A4               	movwf	??_CC2500_TxData
  9987  1E41  0824               	movf	??_CC2500_TxData,w
  9988  1E42  07A5               	addwf	CC2500_TxData@loop_e,f
  9989  1E43  2E2C               	goto	l6854
  9990  1E44                     l296:	
  9991                           
  9992                           ;CC2500_B1.c: 44: }
  9993                           ;CC2500_B1.c: 45: RC4 = 1;
  9994  1E44  160E               	bsf	14,4	;volatile
  9995                           
  9996                           ;CC2500_B1.c: 46: CC2500_WriteCommand(0x35);
  9997  1E45  3035               	movlw	53
  9998  1E46  31A6  265D  319E   	fcall	_CC2500_WriteCommand
  9999  1E49                     l297:	
 10000                           ;CC2500_B1.c: 47: while (RB0 == 0);
 10001                           
 10002  1E49  0020               	movlb	0	; select bank0
 10003  1E4A  1C0D               	btfss	13,0	;volatile
 10004  1E4B  2E49               	goto	l297
 10005  1E4C                     l300:	
 10006                           ;CC2500_B1.c: 48: while (RB0 == 1);
 10007                           
 10008  1E4C  180D               	btfsc	13,0	;volatile
 10009  1E4D  2E4C               	goto	l300
 10010                           
 10011                           ;CC2500_B1.c: 49: CC2500_WriteCommand(0x36);
 10012  1E4E  3036               	movlw	54
 10013  1E4F  31A6  265D  319E   	fcall	_CC2500_WriteCommand
 10014                           
 10015                           ;CC2500_B1.c: 50: CC2500_WriteCommand(0x3B);
 10016  1E52  303B               	movlw	59
 10017  1E53  31A6  265D         	fcall	_CC2500_WriteCommand
 10018                           
 10019                           ;CC2500_B1.c: 51: Transceive_OK = 1;
 10020  1E55  14FC               	bsf	_Transceive_OK/(0+8),_Transceive_OK& (0+7)
 10021  1E56  0008               	return
 10022  1E57                     __end_of_CC2500_TxData:	
 10023                           
 10024                           	psect	text44
 10025  0BAD                     __ptext44:	
 10026 ;; *************** function _CC2500_RxData *****************
 10027 ;; Defined at:
 10028 ;;		line 57 in file "../src/CC2500_B1.c"
 10029 ;; Parameters:    Size  Location     Type
 10030 ;;		None
 10031 ;; Auto vars:     Size  Location     Type
 10032 ;;  loop_f          1   15[BANK0 ] unsigned char 
 10033 ;; Return value:  Size  Location     Type
 10034 ;;		None               void
 10035 ;; Registers used:
 10036 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10037 ;; Tracked objects:
 10038 ;;		On entry : 0/0
 10039 ;;		On exit  : 0/0
 10040 ;;		Unchanged: 0/0
 10041 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10042 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10043 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10044 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10045 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10046 ;;Total ram usage:        3 bytes
 10047 ;; Hardware stack levels used:    1
 10048 ;; Hardware stack levels required when called:    7
 10049 ;; This function calls:
 10050 ;;		_CC2500_ReadByte
 10051 ;;		_CC2500_ReadStatus
 10052 ;;		_CC2500_WriteByte
 10053 ;;		_CC2500_WriteCommand
 10054 ;;		_setBuz
 10055 ;; This function is called by:
 10056 ;;		_setRF_Main
 10057 ;; This function uses a non-reentrant model
 10058 ;;
 10059                           
 10060                           
 10061                           ;psect for function _CC2500_RxData
 10062  0BAD                     _CC2500_RxData:	
 10063                           
 10064                           ;CC2500_B1.c: 58: unsigned char loop_f;
 10065                           ;CC2500_B1.c: 62: if (RB0 == 1)
 10066                           
 10067                           ;incstack = 0
 10068                           ; Regs used in _CC2500_RxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10069  0BAD  0020               	movlb	0	; select bank0
 10070  0BAE  180D               	btfsc	13,0	;volatile
 10071  0BAF  2BE0               	goto	l307
 10072  0BB0  2BE3               	goto	l6874
 10073  0BB1                     l6866:	
 10074                           ;CC2500_B1.c: 63: {
 10075                           ;CC2500_B1.c: 64: while (RB0 == 1) {
 10076                           
 10077                           
 10078                           ;CC2500_B1.c: 65: myMain->pcount1++;
 10079  0BB1  0021               	movlb	1	; select bank1
 10080  0BB2  086D               	movf	_myMain^(0+128),w
 10081  0BB3  3E10               	addlw	16
 10082  0BB4  0086               	movwf	6
 10083  0BB5  3001               	movlw	1	; select bank2/3
 10084  0BB6  0087               	movwf	7
 10085  0BB7  3001               	movlw	1
 10086  0BB8  0781               	addwf	1,f
 10087  0BB9  3141               	addfsr 1,1
 10088  0BBA  1803               	skipnc
 10089  0BBB  0A81               	incf	1,f
 10090                           
 10091                           ;CC2500_B1.c: 66: if (myMain->pcount1 >= 10000) {
 10092  0BBC  086D               	movf	_myMain^(0+128),w
 10093  0BBD  3E10               	addlw	16
 10094  0BBE  0086               	movwf	6
 10095  0BBF  3001               	movlw	1	; select bank2/3
 10096  0BC0  0087               	movwf	7
 10097  0BC1  3F40               	moviw [0]fsr1
 10098  0BC2  0020               	movlb	0	; select bank0
 10099  0BC3  00AD               	movwf	??_CC2500_RxData
 10100  0BC4  3F41               	moviw [1]fsr1
 10101  0BC5  00AE               	movwf	??_CC2500_RxData+1
 10102  0BC6  3027               	movlw	39
 10103  0BC7  022E               	subwf	??_CC2500_RxData+1,w
 10104  0BC8  3010               	movlw	16
 10105  0BC9  1903               	skipnz
 10106  0BCA  022D               	subwf	??_CC2500_RxData,w
 10107  0BCB  1C03               	skipc
 10108  0BCC  2BE0               	goto	l307
 10109                           
 10110                           ;CC2500_B1.c: 67: myMain->pcount1 = 0;
 10111  0BCD  0021               	movlb	1	; select bank1
 10112  0BCE  086D               	movf	_myMain^(0+128),w
 10113  0BCF  3E10               	addlw	16
 10114  0BD0  0086               	movwf	6
 10115  0BD1  3001               	movlw	1	; select bank2/3
 10116  0BD2  0087               	movwf	7
 10117  0BD3  3000               	movlw	0
 10118  0BD4  3FC0               	movwi [0]fsr1
 10119  0BD5  3FC1               	movwi [1]fsr1
 10120                           
 10121                           ;CC2500_B1.c: 68: setBuz(1, 250);
 10122  0BD6  30FA               	movlw	250
 10123  0BD7  0020               	movlb	0	; select bank0
 10124  0BD8  00A9               	movwf	setBuz@time
 10125  0BD9  3000               	movlw	0
 10126  0BDA  00AA               	movwf	setBuz@time+1
 10127  0BDB  3001               	movlw	1
 10128  0BDC  3189  2137  318B   	fcall	_setBuz
 10129                           
 10130                           ;CC2500_B1.c: 69: break;
 10131  0BDF  2BE3               	goto	l6874
 10132  0BE0                     l307:	
 10133  0BE0  0020               	movlb	0	; select bank0
 10134  0BE1  180D               	btfsc	13,0	;volatile
 10135  0BE2  2BB1               	goto	l6866
 10136  0BE3                     l6874:	
 10137                           ;CC2500_B1.c: 70: }
 10138                           ;CC2500_B1.c: 71: };
 10139                           
 10140                           
 10141                           ;CC2500_B1.c: 72: }
 10142                           ;CC2500_B1.c: 74: CC2500_ReadStatus(0x3B);
 10143  0BE3  303B               	movlw	59
 10144  0BE4  3199  210A  318B   	fcall	_CC2500_ReadStatus
 10145                           
 10146                           ;CC2500_B1.c: 75: if (s_data != 0) {
 10147  0BE7  0021               	movlb	1	; select bank1
 10148  0BE8  0848               	movf	_s_data^(0+128),w
 10149  0BE9  1903               	btfsc	3,2
 10150  0BEA  2C63               	goto	l6916
 10151                           
 10152                           ;CC2500_B1.c: 76: RC4 = 0;
 10153  0BEB  0020               	movlb	0	; select bank0
 10154  0BEC  120E               	bcf	14,4	;volatile
 10155                           
 10156                           ;CC2500_B1.c: 77: SPI0Buffer = 0x3F + 0xC0;
 10157  0BED  30FF               	movlw	255
 10158  0BEE  00AD               	movwf	??_CC2500_RxData
 10159  0BEF  082D               	movf	??_CC2500_RxData,w
 10160  0BF0  0021               	movlb	1	; select bank1
 10161  0BF1  00C3               	movwf	_SPI0Buffer^(0+128)
 10162  0BF2                     l312:	
 10163                           ;CC2500_B1.c: 78: while (RC2 == 1) {
 10164                           
 10165  0BF2  0020               	movlb	0	; select bank0
 10166  0BF3  1D0E               	btfss	14,2	;volatile
 10167  0BF4  2C23               	goto	l6890
 10168                           
 10169                           ;CC2500_B1.c: 79: myMain->pcount2++;
 10170  0BF5  0021               	movlb	1	; select bank1
 10171  0BF6  086D               	movf	_myMain^(0+128),w
 10172  0BF7  3E12               	addlw	18
 10173  0BF8  0086               	movwf	6
 10174  0BF9  3001               	movlw	1	; select bank2/3
 10175  0BFA  0087               	movwf	7
 10176  0BFB  3001               	movlw	1
 10177  0BFC  0781               	addwf	1,f
 10178  0BFD  3141               	addfsr 1,1
 10179  0BFE  1803               	skipnc
 10180  0BFF  0A81               	incf	1,f
 10181                           
 10182                           ;CC2500_B1.c: 80: if (myMain->pcount2 >= 10000) {
 10183  0C00  086D               	movf	_myMain^(0+128),w
 10184  0C01  3E12               	addlw	18
 10185  0C02  0086               	movwf	6
 10186  0C03  3001               	movlw	1	; select bank2/3
 10187  0C04  0087               	movwf	7
 10188  0C05  3F40               	moviw [0]fsr1
 10189  0C06  0020               	movlb	0	; select bank0
 10190  0C07  00AD               	movwf	??_CC2500_RxData
 10191  0C08  3F41               	moviw [1]fsr1
 10192  0C09  00AE               	movwf	??_CC2500_RxData+1
 10193  0C0A  3027               	movlw	39
 10194  0C0B  022E               	subwf	??_CC2500_RxData+1,w
 10195  0C0C  3010               	movlw	16
 10196  0C0D  1903               	skipnz
 10197  0C0E  022D               	subwf	??_CC2500_RxData,w
 10198  0C0F  1C03               	skipc
 10199  0C10  2BF2               	goto	l312
 10200                           
 10201                           ;CC2500_B1.c: 81: myMain->pcount2 = 0;
 10202  0C11  0021               	movlb	1	; select bank1
 10203  0C12  086D               	movf	_myMain^(0+128),w
 10204  0C13  3E12               	addlw	18
 10205  0C14  0086               	movwf	6
 10206  0C15  3001               	movlw	1	; select bank2/3
 10207  0C16  0087               	movwf	7
 10208  0C17  3000               	movlw	0
 10209  0C18  3FC0               	movwi [0]fsr1
 10210  0C19  3FC1               	movwi [1]fsr1
 10211                           
 10212                           ;CC2500_B1.c: 82: setBuz(2, 250);
 10213  0C1A  30FA               	movlw	250
 10214  0C1B  0020               	movlb	0	; select bank0
 10215  0C1C  00A9               	movwf	setBuz@time
 10216  0C1D  3000               	movlw	0
 10217  0C1E  00AA               	movwf	setBuz@time+1
 10218  0C1F  3002               	movlw	2
 10219  0C20  3189  2137  318B   	fcall	_setBuz
 10220  0C23                     l6890:	
 10221                           ;CC2500_B1.c: 83: break;
 10222                           
 10223                           
 10224                           ;CC2500_B1.c: 84: }
 10225                           ;CC2500_B1.c: 85: };
 10226                           ;CC2500_B1.c: 87: CC2500_WriteByte();
 10227  0C23  3198  206F  318B   	fcall	_CC2500_WriteByte
 10228                           
 10229                           ;CC2500_B1.c: 89: CC2500_ReadByte();
 10230  0C26  3199  215D  318B   	fcall	_CC2500_ReadByte
 10231                           
 10232                           ;CC2500_B1.c: 90: Rx_Length = SPI0Buffer;
 10233  0C29  0021               	movlb	1	; select bank1
 10234  0C2A  0843               	movf	_SPI0Buffer^(0+128),w
 10235  0C2B  0020               	movlb	0	; select bank0
 10236  0C2C  00AD               	movwf	??_CC2500_RxData
 10237  0C2D  082D               	movf	??_CC2500_RxData,w
 10238  0C2E  0021               	movlb	1	; select bank1
 10239  0C2F  00C2               	movwf	_Rx_Length^(0+128)
 10240                           
 10241                           ;CC2500_B1.c: 91: for (loop_f = 0; loop_f < Rx_Length; loop_f++) {
 10242  0C30  0020               	movlb	0	; select bank0
 10243  0C31  01AF               	clrf	CC2500_RxData@loop_f
 10244  0C32                     l6902:	
 10245  0C32  0021               	movlb	1	; select bank1
 10246  0C33  0842               	movf	_Rx_Length^(0+128),w
 10247  0C34  0020               	movlb	0	; select bank0
 10248  0C35  022F               	subwf	CC2500_RxData@loop_f,w
 10249  0C36  1803               	btfsc	3,0
 10250  0C37  2C4A               	goto	l6904
 10251                           
 10252                           ;CC2500_B1.c: 92: CC2500_ReadByte();
 10253  0C38  3199  215D  318B   	fcall	_CC2500_ReadByte
 10254                           
 10255                           ;CC2500_B1.c: 93: RF_Data[loop_f] = SPI0Buffer;
 10256  0C3B  0021               	movlb	1	; select bank1
 10257  0C3C  0843               	movf	_SPI0Buffer^(0+128),w
 10258  0C3D  0020               	movlb	0	; select bank0
 10259  0C3E  00AD               	movwf	??_CC2500_RxData
 10260  0C3F  082F               	movf	CC2500_RxData@loop_f,w
 10261  0C40  3EA0               	addlw	_RF_Data& (0+255)
 10262  0C41  0086               	movwf	6
 10263  0C42  0187               	clrf	7
 10264  0C43  082D               	movf	??_CC2500_RxData,w
 10265  0C44  0081               	movwf	1
 10266  0C45  3001               	movlw	1
 10267  0C46  00AD               	movwf	??_CC2500_RxData
 10268  0C47  082D               	movf	??_CC2500_RxData,w
 10269  0C48  07AF               	addwf	CC2500_RxData@loop_f,f
 10270  0C49  2C32               	goto	l6902
 10271  0C4A                     l6904:	
 10272                           
 10273                           ;CC2500_B1.c: 94: }
 10274                           ;CC2500_B1.c: 95: CC2500_ReadByte();
 10275  0C4A  3199  215D  318B   	fcall	_CC2500_ReadByte
 10276                           
 10277                           ;CC2500_B1.c: 96: RSSI = SPI0Buffer;
 10278  0C4D  0021               	movlb	1	; select bank1
 10279  0C4E  0843               	movf	_SPI0Buffer^(0+128),w
 10280  0C4F  0020               	movlb	0	; select bank0
 10281  0C50  00AD               	movwf	??_CC2500_RxData
 10282  0C51  082D               	movf	??_CC2500_RxData,w
 10283  0C52  0021               	movlb	1	; select bank1
 10284  0C53  00C1               	movwf	_RSSI^(0+128)
 10285                           
 10286                           ;CC2500_B1.c: 97: CC2500_ReadByte();
 10287  0C54  3199  215D  318B   	fcall	_CC2500_ReadByte
 10288                           
 10289                           ;CC2500_B1.c: 98: CRC = SPI0Buffer;
 10290  0C57  0021               	movlb	1	; select bank1
 10291  0C58  0843               	movf	_SPI0Buffer^(0+128),w
 10292  0C59  0020               	movlb	0	; select bank0
 10293  0C5A  00AD               	movwf	??_CC2500_RxData
 10294  0C5B  082D               	movf	??_CC2500_RxData,w
 10295  0C5C  0021               	movlb	1	; select bank1
 10296  0C5D  00B8               	movwf	_CRC^(0+128)
 10297                           
 10298                           ;CC2500_B1.c: 99: RC4 = 1;
 10299  0C5E  0020               	movlb	0	; select bank0
 10300  0C5F  160E               	bsf	14,4	;volatile
 10301                           
 10302                           ;CC2500_B1.c: 100: if (CRC & 0x80)
 10303  0C60  0021               	movlb	1	; select bank1
 10304  0C61  1BB8               	btfsc	_CRC^(0+128),7
 10305                           
 10306                           ;CC2500_B1.c: 101: Receive_OK = 1;
 10307  0C62  147C               	bsf	_Receive_OK/(0+8),_Receive_OK& (0+7)
 10308  0C63                     l6916:	
 10309                           
 10310                           ;CC2500_B1.c: 102: }
 10311                           ;CC2500_B1.c: 104: CC2500_WriteCommand(0x36);
 10312  0C63  3036               	movlw	54
 10313  0C64  31A6  265D  318B   	fcall	_CC2500_WriteCommand
 10314                           
 10315                           ;CC2500_B1.c: 105: CC2500_WriteCommand(0x3A);
 10316  0C67  303A               	movlw	58
 10317  0C68  31A6  265D         	fcall	_CC2500_WriteCommand
 10318  0C6A  0008               	return
 10319  0C6B                     __end_of_CC2500_RxData:	
 10320                           
 10321                           	psect	text45
 10322  190A                     __ptext45:	
 10323 ;; *************** function _CC2500_ReadStatus *****************
 10324 ;; Defined at:
 10325 ;;		line 277 in file "../src/CC2500_B1.c"
 10326 ;; Parameters:    Size  Location     Type
 10327 ;;  status_addr     1    wreg     unsigned char 
 10328 ;; Auto vars:     Size  Location     Type
 10329 ;;  status_addr     1    3[BANK0 ] unsigned char 
 10330 ;; Return value:  Size  Location     Type
 10331 ;;		None               void
 10332 ;; Registers used:
 10333 ;;		wreg, status,2, status,0, pclath, cstack
 10334 ;; Tracked objects:
 10335 ;;		On entry : 0/0
 10336 ;;		On exit  : 0/0
 10337 ;;		Unchanged: 0/0
 10338 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10339 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10340 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10341 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10342 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10343 ;;Total ram usage:        2 bytes
 10344 ;; Hardware stack levels used:    1
 10345 ;; Hardware stack levels required when called:    6
 10346 ;; This function calls:
 10347 ;;		_CC2500_ReadByte
 10348 ;;		_CC2500_WriteByte
 10349 ;; This function is called by:
 10350 ;;		_CC2500_RxData
 10351 ;; This function uses a non-reentrant model
 10352 ;;
 10353                           
 10354                           
 10355                           ;psect for function _CC2500_ReadStatus
 10356  190A                     _CC2500_ReadStatus:	
 10357                           
 10358                           ;incstack = 0
 10359                           ; Regs used in _CC2500_ReadStatus: [wreg+status,2+status,0+pclath+cstack]
 10360                           ;CC2500_ReadStatus@status_addr stored from wreg
 10361  190A  0020               	movlb	0	; select bank0
 10362  190B  00A3               	movwf	CC2500_ReadStatus@status_addr
 10363                           
 10364                           ;CC2500_B1.c: 278: RC4 = 0;
 10365  190C  120E               	bcf	14,4	;volatile
 10366                           
 10367                           ;CC2500_B1.c: 279: SPI0Buffer = status_addr + 0xC0;
 10368  190D  0823               	movf	CC2500_ReadStatus@status_addr,w
 10369  190E  3EC0               	addlw	192
 10370  190F  00A2               	movwf	??_CC2500_ReadStatus
 10371  1910  0822               	movf	??_CC2500_ReadStatus,w
 10372  1911  0021               	movlb	1	; select bank1
 10373  1912  00C3               	movwf	_SPI0Buffer^(0+128)
 10374  1913                     l389:	
 10375                           ;CC2500_B1.c: 281: while (RC2 == 1);
 10376                           
 10377  1913  0020               	movlb	0	; select bank0
 10378  1914  190E               	btfsc	14,2	;volatile
 10379  1915  2913               	goto	l389
 10380                           
 10381                           ;CC2500_B1.c: 283: CC2500_WriteByte();
 10382  1916  3198  206F  3199   	fcall	_CC2500_WriteByte
 10383                           
 10384                           ;CC2500_B1.c: 284: CC2500_ReadByte();
 10385  1919  3199  215D         	fcall	_CC2500_ReadByte
 10386                           
 10387                           ;CC2500_B1.c: 285: RC4 = 1;
 10388  191B  0020               	movlb	0	; select bank0
 10389  191C  160E               	bsf	14,4	;volatile
 10390                           
 10391                           ;CC2500_B1.c: 287: s_data = SPI0Buffer;
 10392  191D  0021               	movlb	1	; select bank1
 10393  191E  0843               	movf	_SPI0Buffer^(0+128),w
 10394  191F  0020               	movlb	0	; select bank0
 10395  1920  00A2               	movwf	??_CC2500_ReadStatus
 10396  1921  0822               	movf	??_CC2500_ReadStatus,w
 10397  1922  0021               	movlb	1	; select bank1
 10398  1923  00C8               	movwf	_s_data^(0+128)
 10399  1924  0008               	return
 10400  1925                     __end_of_CC2500_ReadStatus:	
 10401                           
 10402                           	psect	text46
 10403  195D                     __ptext46:	
 10404 ;; *************** function _CC2500_ReadByte *****************
 10405 ;; Defined at:
 10406 ;;		line 221 in file "../src/CC2500_B1.c"
 10407 ;; Parameters:    Size  Location     Type
 10408 ;;		None
 10409 ;; Auto vars:     Size  Location     Type
 10410 ;;  loop_b          1    1[BANK0 ] unsigned char 
 10411 ;; Return value:  Size  Location     Type
 10412 ;;		None               void
 10413 ;; Registers used:
 10414 ;;		wreg, status,2, status,0
 10415 ;; Tracked objects:
 10416 ;;		On entry : 0/0
 10417 ;;		On exit  : 0/0
 10418 ;;		Unchanged: 0/0
 10419 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10420 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10421 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10422 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10423 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10424 ;;Total ram usage:        2 bytes
 10425 ;; Hardware stack levels used:    1
 10426 ;; Hardware stack levels required when called:    5
 10427 ;; This function calls:
 10428 ;;		Nothing
 10429 ;; This function is called by:
 10430 ;;		_CC2500_RxData
 10431 ;;		_CC2500_ReadStatus
 10432 ;;		_CC2500_ReadREG
 10433 ;; This function uses a non-reentrant model
 10434 ;;
 10435                           
 10436                           
 10437                           ;psect for function _CC2500_ReadByte
 10438  195D                     _CC2500_ReadByte:	
 10439                           
 10440                           ;CC2500_B1.c: 222: unsigned char loop_b;
 10441                           ;CC2500_B1.c: 223: for (loop_b = 0; loop_b < 8; loop_b++) {
 10442                           
 10443                           ;incstack = 0
 10444                           ; Regs used in _CC2500_ReadByte: [wreg+status,2+status,0]
 10445  195D  0020               	movlb	0	; select bank0
 10446  195E  01A1               	clrf	CC2500_ReadByte@loop_b
 10447  195F                     L10:	
 10448  195F  3008               	movlw	8
 10449  1960  0221               	subwf	CC2500_ReadByte@loop_b,w
 10450  1961  1803               	btfsc	3,0
 10451  1962  0008               	return
 10452                           
 10453                           ;CC2500_B1.c: 224: RC1 = 1;
 10454  1963  148E               	bsf	14,1	;volatile
 10455                           
 10456                           ;CC2500_B1.c: 225: SPI0Buffer <<= 1;
 10457  1964  1003               	clrc
 10458  1965  0021               	movlb	1	; select bank1
 10459  1966  0DC3               	rlf	_SPI0Buffer^(0+128),f
 10460                           
 10461                           ;CC2500_B1.c: 226: if (RC2 == 1)
 10462  1967  0020               	movlb	0	; select bank0
 10463  1968  1D0E               	btfss	14,2	;volatile
 10464  1969  296D               	goto	l6586
 10465                           
 10466                           ;CC2500_B1.c: 227: SPI0Buffer |= 0x01;
 10467  196A  0021               	movlb	1	; select bank1
 10468  196B  1443               	bsf	_SPI0Buffer^(0+128),0
 10469  196C  2973               	goto	l6588
 10470  196D                     l6586:	
 10471                           
 10472                           ;CC2500_B1.c: 228: else
 10473                           ;CC2500_B1.c: 229: SPI0Buffer &= 0xFE;
 10474  196D  30FE               	movlw	254
 10475  196E  0020               	movlb	0	; select bank0
 10476  196F  00A0               	movwf	??_CC2500_ReadByte
 10477  1970  0820               	movf	??_CC2500_ReadByte,w
 10478  1971  0021               	movlb	1	; select bank1
 10479  1972  05C3               	andwf	_SPI0Buffer^(0+128),f
 10480  1973                     l6588:	
 10481                           
 10482                           ;CC2500_B1.c: 230: RC1 = 0;
 10483  1973  0020               	movlb	0	; select bank0
 10484  1974  108E               	bcf	14,1	;volatile
 10485  1975  3001               	movlw	1
 10486  1976  00A0               	movwf	??_CC2500_ReadByte
 10487  1977  0820               	movf	??_CC2500_ReadByte,w
 10488  1978  07A1               	addwf	CC2500_ReadByte@loop_b,f
 10489  1979  295F               	goto	L10
 10490  197A                     __end_of_CC2500_ReadByte:	
 10491                           
 10492                           	psect	text47
 10493  24F1                     __ptext47:	
 10494 ;; *************** function _RF_Initialization *****************
 10495 ;; Defined at:
 10496 ;;		line 19 in file "../src/RF_Control_B1.c"
 10497 ;; Parameters:    Size  Location     Type
 10498 ;;		None
 10499 ;; Auto vars:     Size  Location     Type
 10500 ;;		None
 10501 ;; Return value:  Size  Location     Type
 10502 ;;		None               void
 10503 ;; Registers used:
 10504 ;;		wreg, status,2, status,0, pclath, cstack
 10505 ;; Tracked objects:
 10506 ;;		On entry : 0/0
 10507 ;;		On exit  : 0/0
 10508 ;;		Unchanged: 0/0
 10509 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10510 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10511 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10512 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10513 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10514 ;;Total ram usage:        0 bytes
 10515 ;; Hardware stack levels used:    1
 10516 ;; Hardware stack levels required when called:    6
 10517 ;; This function calls:
 10518 ;;		_setRF_Initialization
 10519 ;; This function is called by:
 10520 ;;		_main
 10521 ;; This function uses a non-reentrant model
 10522 ;;
 10523                           
 10524                           
 10525                           ;psect for function _RF_Initialization
 10526  24F1                     _RF_Initialization:	
 10527                           
 10528                           ;RF_Control_B1.c: 21: setRF_Initialization(1);
 10529                           
 10530                           ;incstack = 0
 10531                           ; Regs used in _RF_Initialization: [wreg+status,2+status,0+pclath+cstack]
 10532  24F1  3001               	movlw	1
 10533  24F2  31A5  2518         	fcall	_setRF_Initialization
 10534  24F4  0008               	return
 10535  24F5                     __end_of_RF_Initialization:	
 10536                           
 10537                           	psect	text48
 10538  2518                     __ptext48:	
 10539 ;; *************** function _setRF_Initialization *****************
 10540 ;; Defined at:
 10541 ;;		line 56 in file "../src/RF_Control_B1.c"
 10542 ;; Parameters:    Size  Location     Type
 10543 ;;  rf              1    wreg     unsigned char 
 10544 ;; Auto vars:     Size  Location     Type
 10545 ;;  rf              1    0[COMMON] unsigned char 
 10546 ;; Return value:  Size  Location     Type
 10547 ;;		None               void
 10548 ;; Registers used:
 10549 ;;		wreg
 10550 ;; Tracked objects:
 10551 ;;		On entry : 0/0
 10552 ;;		On exit  : 0/0
 10553 ;;		Unchanged: 0/0
 10554 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10555 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10556 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10557 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10558 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10559 ;;Total ram usage:        1 bytes
 10560 ;; Hardware stack levels used:    1
 10561 ;; Hardware stack levels required when called:    5
 10562 ;; This function calls:
 10563 ;;		Nothing
 10564 ;; This function is called by:
 10565 ;;		_RF_Initialization
 10566 ;; This function uses a non-reentrant model
 10567 ;;
 10568                           
 10569                           
 10570                           ;psect for function _setRF_Initialization
 10571  2518                     _setRF_Initialization:	
 10572                           
 10573                           ;RF_Control_B1.c: 59: Tx_Length = 21;
 10574                           
 10575                           ;incstack = 0
 10576                           ; Regs used in _setRF_Initialization: [wreg]
 10577  2518  3015               	movlw	21
 10578  2519  0020               	movlb	0	; select bank0
 10579  251A  00A0               	movwf	??_setRF_Initialization
 10580  251B  0820               	movf	??_setRF_Initialization,w
 10581  251C  0021               	movlb	1	; select bank1
 10582  251D  00C5               	movwf	_Tx_Length^(0+128)
 10583  251E  0008               	return
 10584  251F                     __end_of_setRF_Initialization:	
 10585                           
 10586                           	psect	text49
 10587  18EF                     __ptext49:	
 10588 ;; *************** function _Mcu_Initialization *****************
 10589 ;; Defined at:
 10590 ;;		line 30 in file "../src/MCU_B1.c"
 10591 ;; Parameters:    Size  Location     Type
 10592 ;;		None
 10593 ;; Auto vars:     Size  Location     Type
 10594 ;;		None
 10595 ;; Return value:  Size  Location     Type
 10596 ;;		None               void
 10597 ;; Registers used:
 10598 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10599 ;; Tracked objects:
 10600 ;;		On entry : 0/0
 10601 ;;		On exit  : 0/0
 10602 ;;		Unchanged: 0/0
 10603 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10604 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10605 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10606 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10607 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10608 ;;Total ram usage:        1 bytes
 10609 ;; Hardware stack levels used:    1
 10610 ;; Hardware stack levels required when called:    6
 10611 ;; This function calls:
 10612 ;;		_ADC_Set
 10613 ;;		_Fosc_Set
 10614 ;;		_INT_Set
 10615 ;;		_IOC_Set
 10616 ;;		_IO_Set
 10617 ;;		_TMR0_Set
 10618 ;;		_WDT_Set
 10619 ;; This function is called by:
 10620 ;;		_main
 10621 ;; This function uses a non-reentrant model
 10622 ;;
 10623                           
 10624                           
 10625                           ;psect for function _Mcu_Initialization
 10626  18EF                     _Mcu_Initialization:	
 10627                           
 10628                           ;MCU_B1.c: 32: Fosc_Set();
 10629                           
 10630                           ;incstack = 0
 10631                           ; Regs used in _Mcu_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10632  18EF  31A4  24ED  3198   	fcall	_Fosc_Set
 10633                           
 10634                           ;MCU_B1.c: 34: IO_Set();
 10635  18F2  3198  20A1  3198   	fcall	_IO_Set
 10636                           
 10637                           ;MCU_B1.c: 36: TMR0_Set();
 10638  18F5  31A5  25EC  3198   	fcall	_TMR0_Set
 10639                           
 10640                           ;MCU_B1.c: 38: ;;
 10641                           ;MCU_B1.c: 40: ADC_Set();
 10642  18F8  31A5  2511  3198   	fcall	_ADC_Set
 10643                           
 10644                           ;MCU_B1.c: 44: INT_Set();
 10645  18FB  31A4  24FE  3198   	fcall	_INT_Set
 10646                           
 10647                           ;MCU_B1.c: 46: IOC_Set();
 10648  18FE  31A5  25DF  3198   	fcall	_IOC_Set
 10649                           
 10650                           ;MCU_B1.c: 48: ;;
 10651                           ;MCU_B1.c: 50: ;;
 10652                           ;MCU_B1.c: 52: Memory=&VarMemory;
 10653  1901  3020               	movlw	_VarMemory& (0+255)
 10654  1902  0020               	movlb	0	; select bank0
 10655  1903  00A1               	movwf	??_Mcu_Initialization
 10656  1904  0821               	movf	??_Mcu_Initialization,w
 10657  1905  0021               	movlb	1	; select bank1
 10658  1906  00EE               	movwf	_Memory^(0+128)
 10659                           
 10660                           ;MCU_B1.c: 54: WDT_Set();
 10661  1907  31A7  27E8         	fcall	_WDT_Set
 10662  1909  0008               	return
 10663  190A                     __end_of_Mcu_Initialization:	
 10664                           
 10665                           	psect	text50
 10666  27E8                     __ptext50:	
 10667 ;; *************** function _WDT_Set *****************
 10668 ;; Defined at:
 10669 ;;		line 891 in file "../src/MCU_B1.c"
 10670 ;; Parameters:    Size  Location     Type
 10671 ;;		None
 10672 ;; Auto vars:     Size  Location     Type
 10673 ;;		None
 10674 ;; Return value:  Size  Location     Type
 10675 ;;		None               void
 10676 ;; Registers used:
 10677 ;;		wreg, fsr1l, fsr1h
 10678 ;; Tracked objects:
 10679 ;;		On entry : 0/0
 10680 ;;		On exit  : 0/0
 10681 ;;		Unchanged: 0/0
 10682 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10683 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10684 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10685 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10686 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10687 ;;Total ram usage:        1 bytes
 10688 ;; Hardware stack levels used:    1
 10689 ;; Hardware stack levels required when called:    5
 10690 ;; This function calls:
 10691 ;;		Nothing
 10692 ;; This function is called by:
 10693 ;;		_Mcu_Initialization
 10694 ;; This function uses a non-reentrant model
 10695 ;;
 10696                           
 10697                           
 10698                           ;psect for function _WDT_Set
 10699  27E8                     _WDT_Set:	
 10700                           
 10701                           ;MCU_B1.c: 892: WDTCON = 0b00010111;;
 10702                           
 10703                           ;incstack = 0
 10704                           ; Regs used in _WDT_Set: [wregfsr1]
 10705  27E8  3017               	movlw	23
 10706  27E9  0021               	movlb	1	; select bank1
 10707  27EA  0097               	movwf	23	;volatile
 10708                           
 10709                           ;MCU_B1.c: 893: WDT = &_WDT;
 10710  27EB  30E7               	movlw	__WDT& (0+255)
 10711  27EC  0020               	movlb	0	; select bank0
 10712  27ED  00A0               	movwf	??_WDT_Set
 10713  27EE  0820               	movf	??_WDT_Set,w
 10714  27EF  0021               	movlb	1	; select bank1
 10715  27F0  00EC               	movwf	_WDT^(0+128)
 10716                           
 10717                           ;MCU_B1.c: 894: WDT->Enable = 1;
 10718  27F1  086C               	movf	_WDT^(0+128),w
 10719  27F2  0086               	movwf	6
 10720  27F3  0187               	clrf	7
 10721  27F4  1401               	bsf	1,0
 10722                           
 10723                           ;MCU_B1.c: 895: WDT->Count = 10;
 10724  27F5  300A               	movlw	10
 10725  27F6  0020               	movlb	0	; select bank0
 10726  27F7  00A0               	movwf	??_WDT_Set
 10727  27F8  0021               	movlb	1	; select bank1
 10728  27F9  0A6C               	incf	_WDT^(0+128),w
 10729  27FA  0086               	movwf	6
 10730  27FB  0187               	clrf	7
 10731  27FC  0020               	movlb	0	; select bank0
 10732  27FD  0820               	movf	??_WDT_Set,w
 10733  27FE  0081               	movwf	1
 10734  27FF  0008               	return
 10735  2800                     __end_of_WDT_Set:	
 10736                           
 10737                           	psect	text51
 10738  25EC                     __ptext51:	
 10739 ;; *************** function _TMR0_Set *****************
 10740 ;; Defined at:
 10741 ;;		line 128 in file "../src/MCU_B1.c"
 10742 ;; Parameters:    Size  Location     Type
 10743 ;;		None
 10744 ;; Auto vars:     Size  Location     Type
 10745 ;;		None
 10746 ;; Return value:  Size  Location     Type
 10747 ;;		None               void
 10748 ;; Registers used:
 10749 ;;		wreg, status,2
 10750 ;; Tracked objects:
 10751 ;;		On entry : 0/0
 10752 ;;		On exit  : 0/0
 10753 ;;		Unchanged: 0/0
 10754 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10755 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10756 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10757 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10758 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10759 ;;Total ram usage:        1 bytes
 10760 ;; Hardware stack levels used:    1
 10761 ;; Hardware stack levels required when called:    5
 10762 ;; This function calls:
 10763 ;;		Nothing
 10764 ;; This function is called by:
 10765 ;;		_Mcu_Initialization
 10766 ;; This function uses a non-reentrant model
 10767 ;;
 10768                           
 10769                           
 10770                           ;psect for function _TMR0_Set
 10771  25EC                     _TMR0_Set:	
 10772                           
 10773                           ;MCU_B1.c: 129: Timer0 = &VarTimer0;
 10774                           
 10775                           ;incstack = 0
 10776                           ; Regs used in _TMR0_Set: [wreg+status,2]
 10777  25EC  305C               	movlw	_VarTimer0& (0+255)
 10778  25ED  0020               	movlb	0	; select bank0
 10779  25EE  00A0               	movwf	??_TMR0_Set
 10780  25EF  0820               	movf	??_TMR0_Set,w
 10781  25F0  0021               	movlb	1	; select bank1
 10782  25F1  00EB               	movwf	_Timer0^(0+128)
 10783                           
 10784                           ;MCU_B1.c: 130: OPTION_REG = 0x00;
 10785  25F2  0195               	clrf	21	;volatile
 10786                           
 10787                           ;MCU_B1.c: 131: TMR0 = (256-190);
 10788  25F3  3042               	movlw	66
 10789  25F4  0020               	movlb	0	; select bank0
 10790  25F5  0095               	movwf	21	;volatile
 10791                           
 10792                           ;MCU_B1.c: 132: TMR0IE = 1;
 10793  25F6  168B               	bsf	11,5	;volatile
 10794                           
 10795                           ;MCU_B1.c: 133: GIE = 1;
 10796  25F7  178B               	bsf	11,7	;volatile
 10797  25F8  0008               	return
 10798  25F9                     __end_of_TMR0_Set:	
 10799                           
 10800                           	psect	text52
 10801  18A1                     __ptext52:	
 10802 ;; *************** function _IO_Set *****************
 10803 ;; Defined at:
 10804 ;;		line 62 in file "../src/MCU_B1.c"
 10805 ;; Parameters:    Size  Location     Type
 10806 ;;		None
 10807 ;; Auto vars:     Size  Location     Type
 10808 ;;		None
 10809 ;; Return value:  Size  Location     Type
 10810 ;;		None               void
 10811 ;; Registers used:
 10812 ;;		wreg, status,2
 10813 ;; Tracked objects:
 10814 ;;		On entry : 0/0
 10815 ;;		On exit  : 0/0
 10816 ;;		Unchanged: 0/0
 10817 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10818 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10819 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10820 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10821 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10822 ;;Total ram usage:        0 bytes
 10823 ;; Hardware stack levels used:    1
 10824 ;; Hardware stack levels required when called:    5
 10825 ;; This function calls:
 10826 ;;		Nothing
 10827 ;; This function is called by:
 10828 ;;		_Mcu_Initialization
 10829 ;; This function uses a non-reentrant model
 10830 ;;
 10831                           
 10832                           
 10833                           ;psect for function _IO_Set
 10834  18A1                     _IO_Set:	
 10835                           
 10836                           ;MCU_B1.c: 90: TRISA = 0b01110111;;
 10837                           
 10838                           ;incstack = 0
 10839                           ; Regs used in _IO_Set: [wreg+status,2]
 10840  18A1  3077               	movlw	119
 10841  18A2  0021               	movlb	1	; select bank1
 10842  18A3  008C               	movwf	12	;volatile
 10843                           
 10844                           ;MCU_B1.c: 91: TRISB = 0b00000111;;
 10845  18A4  3007               	movlw	7
 10846  18A5  008D               	movwf	13	;volatile
 10847                           
 10848                           ;MCU_B1.c: 92: TRISC = 0b00001100;;
 10849  18A6  300C               	movlw	12
 10850  18A7  008E               	movwf	14	;volatile
 10851                           
 10852                           ;MCU_B1.c: 93: LATA = 0b00000000;;
 10853  18A8  0022               	movlb	2	; select bank2
 10854  18A9  018C               	clrf	12	;volatile
 10855                           
 10856                           ;MCU_B1.c: 94: LATB = 0b00000010;;
 10857  18AA  3002               	movlw	2
 10858  18AB  008D               	movwf	13	;volatile
 10859                           
 10860                           ;MCU_B1.c: 95: LATC = 0b00000000;;
 10861  18AC  018E               	clrf	14	;volatile
 10862                           
 10863                           ;MCU_B1.c: 96: ANSELA = 0b00100010;;
 10864  18AD  3022               	movlw	34
 10865  18AE  0023               	movlb	3	; select bank3
 10866  18AF  008C               	movwf	12	;volatile
 10867                           
 10868                           ;MCU_B1.c: 97: ANSELB = 0b00000000;;
 10869  18B0  018D               	clrf	13	;volatile
 10870                           
 10871                           ;MCU_B1.c: 98: ANSELC = 0b00000000;;
 10872  18B1  018E               	clrf	14	;volatile
 10873                           
 10874                           ;MCU_B1.c: 99: PORTA = 0b01110111;;
 10875  18B2  3077               	movlw	119
 10876  18B3  0020               	movlb	0	; select bank0
 10877  18B4  008C               	movwf	12	;volatile
 10878                           
 10879                           ;MCU_B1.c: 100: PORTB = 0b00000111;;
 10880  18B5  3007               	movlw	7
 10881  18B6  008D               	movwf	13	;volatile
 10882                           
 10883                           ;MCU_B1.c: 101: PORTC = 0b00001100;;
 10884  18B7  300C               	movlw	12
 10885  18B8  008E               	movwf	14	;volatile
 10886  18B9  0008               	return
 10887  18BA                     __end_of_IO_Set:	
 10888                           
 10889                           	psect	text53
 10890  25DF                     __ptext53:	
 10891 ;; *************** function _IOC_Set *****************
 10892 ;; Defined at:
 10893 ;;		line 269 in file "../src/MCU_B1.c"
 10894 ;; Parameters:    Size  Location     Type
 10895 ;;		None
 10896 ;; Auto vars:     Size  Location     Type
 10897 ;;		None
 10898 ;; Return value:  Size  Location     Type
 10899 ;;		None               void
 10900 ;; Registers used:
 10901 ;;		wreg, status,2
 10902 ;; Tracked objects:
 10903 ;;		On entry : 0/0
 10904 ;;		On exit  : 0/0
 10905 ;;		Unchanged: 0/0
 10906 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10907 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10908 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10909 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10910 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10911 ;;Total ram usage:        0 bytes
 10912 ;; Hardware stack levels used:    1
 10913 ;; Hardware stack levels required when called:    5
 10914 ;; This function calls:
 10915 ;;		Nothing
 10916 ;; This function is called by:
 10917 ;;		_Mcu_Initialization
 10918 ;; This function uses a non-reentrant model
 10919 ;;
 10920                           
 10921                           
 10922                           ;psect for function _IOC_Set
 10923  25DF                     _IOC_Set:	
 10924                           
 10925                           ;MCU_B1.c: 270: WPUB2 = 0;
 10926                           
 10927                           ;incstack = 0
 10928                           ; Regs used in _IOC_Set: [wreg+status,2]
 10929  25DF  0024               	movlb	4	; select bank4
 10930  25E0  110D               	bcf	13,2	;volatile
 10931                           
 10932                           ;MCU_B1.c: 272: IOCBP = 0b00000100;
 10933  25E1  3004               	movlw	4
 10934  25E2  0027               	movlb	7	; select bank7
 10935  25E3  0094               	movwf	20	;volatile
 10936                           
 10937                           ;MCU_B1.c: 273: IOCBN = 0b00000100;
 10938  25E4  3004               	movlw	4
 10939  25E5  0095               	movwf	21	;volatile
 10940                           
 10941                           ;MCU_B1.c: 288: IOCBF = 0b00000000;
 10942  25E6  0196               	clrf	22	;volatile
 10943                           
 10944                           ;MCU_B1.c: 290: IOCIE = 1;
 10945  25E7  158B               	bsf	11,3	;volatile
 10946                           
 10947                           ;MCU_B1.c: 291: IOCIF = 0;
 10948  25E8  100B               	bcf	11,0	;volatile
 10949                           
 10950                           ;MCU_B1.c: 292: PEIE = 1;
 10951  25E9  170B               	bsf	11,6	;volatile
 10952                           
 10953                           ;MCU_B1.c: 293: GIE = 1;
 10954  25EA  178B               	bsf	11,7	;volatile
 10955  25EB  0008               	return
 10956  25EC                     __end_of_IOC_Set:	
 10957                           
 10958                           	psect	text54
 10959  24FE                     __ptext54:	
 10960 ;; *************** function _INT_Set *****************
 10961 ;; Defined at:
 10962 ;;		line 242 in file "../src/MCU_B1.c"
 10963 ;; Parameters:    Size  Location     Type
 10964 ;;		None
 10965 ;; Auto vars:     Size  Location     Type
 10966 ;;		None
 10967 ;; Return value:  Size  Location     Type
 10968 ;;		None               void
 10969 ;; Registers used:
 10970 ;;		None
 10971 ;; Tracked objects:
 10972 ;;		On entry : 0/0
 10973 ;;		On exit  : 0/0
 10974 ;;		Unchanged: 0/0
 10975 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10976 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10977 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10978 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10979 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10980 ;;Total ram usage:        0 bytes
 10981 ;; Hardware stack levels used:    1
 10982 ;; Hardware stack levels required when called:    5
 10983 ;; This function calls:
 10984 ;;		Nothing
 10985 ;; This function is called by:
 10986 ;;		_Mcu_Initialization
 10987 ;; This function uses a non-reentrant model
 10988 ;;
 10989                           
 10990                           
 10991                           ;psect for function _INT_Set
 10992  24FE                     _INT_Set:	
 10993                           
 10994                           ;MCU_B1.c: 243: WPUB0 = 0;
 10995                           
 10996                           ;incstack = 0
 10997                           ; Regs used in _INT_Set: []
 10998  24FE  0024               	movlb	4	; select bank4
 10999  24FF  100D               	bcf	13,0	;volatile
 11000                           
 11001                           ;MCU_B1.c: 244: INTE = 0;
 11002  2500  120B               	bcf	11,4	;volatile
 11003                           
 11004                           ;MCU_B1.c: 245: PEIE = 1;
 11005  2501  170B               	bsf	11,6	;volatile
 11006                           
 11007                           ;MCU_B1.c: 246: GIE = 1;
 11008  2502  178B               	bsf	11,7	;volatile
 11009  2503  0008               	return
 11010  2504                     __end_of_INT_Set:	
 11011                           
 11012                           	psect	text55
 11013  24ED                     __ptext55:	
 11014 ;; *************** function _Fosc_Set *****************
 11015 ;; Defined at:
 11016 ;;		line 58 in file "../src/MCU_B1.c"
 11017 ;; Parameters:    Size  Location     Type
 11018 ;;		None
 11019 ;; Auto vars:     Size  Location     Type
 11020 ;;		None
 11021 ;; Return value:  Size  Location     Type
 11022 ;;		None               void
 11023 ;; Registers used:
 11024 ;;		wreg
 11025 ;; Tracked objects:
 11026 ;;		On entry : 0/0
 11027 ;;		On exit  : 0/0
 11028 ;;		Unchanged: 0/0
 11029 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11030 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11031 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11032 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11033 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11034 ;;Total ram usage:        0 bytes
 11035 ;; Hardware stack levels used:    1
 11036 ;; Hardware stack levels required when called:    5
 11037 ;; This function calls:
 11038 ;;		Nothing
 11039 ;; This function is called by:
 11040 ;;		_Mcu_Initialization
 11041 ;; This function uses a non-reentrant model
 11042 ;;
 11043                           
 11044                           
 11045                           ;psect for function _Fosc_Set
 11046  24ED                     _Fosc_Set:	
 11047                           
 11048                           ;MCU_B1.c: 59: OSCCON = 0x78;
 11049                           
 11050                           ;incstack = 0
 11051                           ; Regs used in _Fosc_Set: [wreg]
 11052  24ED  3078               	movlw	120
 11053  24EE  0021               	movlb	1	; select bank1
 11054  24EF  0099               	movwf	25	;volatile
 11055  24F0  0008               	return
 11056  24F1                     __end_of_Fosc_Set:	
 11057                           
 11058                           	psect	text56
 11059  2511                     __ptext56:	
 11060 ;; *************** function _ADC_Set *****************
 11061 ;; Defined at:
 11062 ;;		line 315 in file "../src/MCU_B1.c"
 11063 ;; Parameters:    Size  Location     Type
 11064 ;;		None
 11065 ;; Auto vars:     Size  Location     Type
 11066 ;;		None
 11067 ;; Return value:  Size  Location     Type
 11068 ;;		None               void
 11069 ;; Registers used:
 11070 ;;		wreg
 11071 ;; Tracked objects:
 11072 ;;		On entry : 0/0
 11073 ;;		On exit  : 0/0
 11074 ;;		Unchanged: 0/0
 11075 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11076 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11077 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11078 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11079 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11080 ;;Total ram usage:        0 bytes
 11081 ;; Hardware stack levels used:    1
 11082 ;; Hardware stack levels required when called:    5
 11083 ;; This function calls:
 11084 ;;		Nothing
 11085 ;; This function is called by:
 11086 ;;		_Mcu_Initialization
 11087 ;; This function uses a non-reentrant model
 11088 ;;
 11089                           
 11090                           
 11091                           ;psect for function _ADC_Set
 11092  2511                     _ADC_Set:	
 11093                           
 11094                           ;MCU_B1.c: 316: ADCON1 = 0xf2;
 11095                           
 11096                           ;incstack = 0
 11097                           ; Regs used in _ADC_Set: [wreg]
 11098  2511  30F2               	movlw	242
 11099  2512  0021               	movlb	1	; select bank1
 11100  2513  009E               	movwf	30	;volatile
 11101                           
 11102                           ;MCU_B1.c: 317: FVRCON = 0xc0;
 11103  2514  30C0               	movlw	192
 11104  2515  0022               	movlb	2	; select bank2
 11105  2516  0097               	movwf	23	;volatile
 11106  2517  0008               	return
 11107  2518                     __end_of_ADC_Set:	
 11108                           
 11109                           	psect	text57
 11110  0054                     __ptext57:	
 11111 ;; *************** function _Load_Main *****************
 11112 ;; Defined at:
 11113 ;;		line 40 in file "../src/OverLoad_B1.c"
 11114 ;; Parameters:    Size  Location     Type
 11115 ;;		None
 11116 ;; Auto vars:     Size  Location     Type
 11117 ;;  i               1   20[BANK0 ] unsigned char 
 11118 ;; Return value:  Size  Location     Type
 11119 ;;		None               void
 11120 ;; Registers used:
 11121 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11122 ;; Tracked objects:
 11123 ;;		On entry : 0/0
 11124 ;;		On exit  : 0/0
 11125 ;;		Unchanged: 0/0
 11126 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11127 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11128 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11129 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11130 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11131 ;;Total ram usage:        5 bytes
 11132 ;; Hardware stack levels used:    1
 11133 ;; Hardware stack levels required when called:   10
 11134 ;; This function calls:
 11135 ;;		___lwdiv
 11136 ;;		___wmul
 11137 ;;		_getTemp_Safe
 11138 ;;		_setDimmerLights_Clear
 11139 ;;		_setLoad_AH_AL_Restore
 11140 ;;		_setLoad_Exceptions
 11141 ;; This function is called by:
 11142 ;;		_main
 11143 ;; This function uses a non-reentrant model
 11144 ;;
 11145                           
 11146                           
 11147                           ;psect for function _Load_Main
 11148  0054                     _Load_Main:	
 11149                           
 11150                           ;OverLoad_B1.c: 41: char i;
 11151                           ;OverLoad_B1.c: 42: if (Load->ERROR) {
 11152                           
 11153                           ;incstack = 0
 11154                           ; Regs used in _Load_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11155  0054  087B               	movf	_Load,w
 11156  0055  0086               	movwf	6
 11157  0056  3002               	movlw	2	; select bank4/5
 11158  0057  0087               	movwf	7
 11159  0058  1E81               	btfss	1,5
 11160  0059  2881               	goto	l8228
 11161                           
 11162                           ;OverLoad_B1.c: 43: Load->ErrorTime++;
 11163  005A  087B               	movf	_Load,w
 11164  005B  3E03               	addlw	3
 11165  005C  0086               	movwf	6
 11166  005D  3002               	movlw	2	; select bank4/5
 11167  005E  0087               	movwf	7
 11168  005F  3001               	movlw	1
 11169  0060  0781               	addwf	1,f
 11170  0061  3141               	addfsr 1,1
 11171  0062  1803               	skipnc
 11172  0063  0A81               	incf	1,f
 11173                           
 11174                           ;OverLoad_B1.c: 44: if (Load->ErrorTime >= 1000)
 11175  0064  087B               	movf	_Load,w
 11176  0065  3E03               	addlw	3
 11177  0066  0086               	movwf	6
 11178  0067  3002               	movlw	2	; select bank4/5
 11179  0068  0087               	movwf	7
 11180  0069  3F40               	moviw [0]fsr1
 11181  006A  0020               	movlb	0	; select bank0
 11182  006B  00B0               	movwf	??_Load_Main
 11183  006C  3F41               	moviw [1]fsr1
 11184  006D  00B1               	movwf	??_Load_Main+1
 11185  006E  3003               	movlw	3
 11186  006F  0231               	subwf	??_Load_Main+1,w
 11187  0070  30E8               	movlw	232
 11188  0071  1903               	skipnz
 11189  0072  0230               	subwf	??_Load_Main,w
 11190  0073  1C03               	skipc
 11191  0074  0008               	return
 11192                           
 11193                           ;OverLoad_B1.c: 45: {
 11194                           ;OverLoad_B1.c: 46: Load->ErrorTime = 0;
 11195  0075  087B               	movf	_Load,w
 11196  0076  3E03               	addlw	3
 11197  0077  0086               	movwf	6
 11198  0078  3002               	movlw	2	; select bank4/5
 11199  0079  0087               	movwf	7
 11200  007A  3000               	movlw	0
 11201  007B  3FC0               	movwi [0]fsr1
 11202  007C  3FC1               	movwi [1]fsr1
 11203                           
 11204                           ;OverLoad_B1.c: 47: setLoad_Exceptions(0);
 11205  007D  3000               	movlw	0
 11206  007E  319D  25D0         	fcall	_setLoad_Exceptions
 11207                           
 11208                           ;OverLoad_B1.c: 48: }
 11209                           ;OverLoad_B1.c: 49: } else {
 11210  0080  0008               	return
 11211  0081                     l8228:	
 11212                           
 11213                           ;OverLoad_B1.c: 50: if (Load->ADtoGO) {
 11214  0081  087B               	movf	_Load,w
 11215  0082  0086               	movwf	6
 11216  0083  3002               	movlw	2	; select bank4/5
 11217  0084  0087               	movwf	7
 11218  0085  1E01               	btfss	1,4
 11219  0086  2A88               	goto	l8310
 11220                           
 11221                           ;OverLoad_B1.c: 51: Load->Time++;
 11222  0087  0A7B               	incf	_Load,w
 11223  0088  0086               	movwf	6
 11224  0089  3002               	movlw	2	; select bank4/5
 11225  008A  0087               	movwf	7
 11226  008B  3001               	movlw	1
 11227  008C  0781               	addwf	1,f
 11228  008D  3141               	addfsr 1,1
 11229  008E  1803               	skipnc
 11230  008F  0A81               	incf	1,f
 11231                           
 11232                           ;OverLoad_B1.c: 52: if (Load->Time >= 5)
 11233  0090  0A7B               	incf	_Load,w
 11234  0091  0086               	movwf	6
 11235  0092  3002               	movlw	2	; select bank4/5
 11236  0093  0087               	movwf	7
 11237  0094  3F40               	moviw [0]fsr1
 11238  0095  0020               	movlb	0	; select bank0
 11239  0096  00B0               	movwf	??_Load_Main
 11240  0097  3F41               	moviw [1]fsr1
 11241  0098  00B1               	movwf	??_Load_Main+1
 11242  0099  3000               	movlw	0
 11243  009A  0231               	subwf	??_Load_Main+1,w
 11244  009B  3005               	movlw	5
 11245  009C  1903               	skipnz
 11246  009D  0230               	subwf	??_Load_Main,w
 11247  009E  1C03               	skipc
 11248  009F  0008               	return
 11249                           
 11250                           ;OverLoad_B1.c: 53: {
 11251                           ;OverLoad_B1.c: 54: Load->Time = 0;
 11252  00A0  0A7B               	incf	_Load,w
 11253  00A1  0086               	movwf	6
 11254  00A2  3002               	movlw	2	; select bank4/5
 11255  00A3  0087               	movwf	7
 11256  00A4  3000               	movlw	0
 11257  00A5  3FC0               	movwi [0]fsr1
 11258  00A6  3FC1               	movwi [1]fsr1
 11259                           
 11260                           ;OverLoad_B1.c: 55: Load->ADtoGO = 0;
 11261  00A7  087B               	movf	_Load,w
 11262  00A8  0086               	movwf	6
 11263  00A9  3002               	movlw	2	; select bank4/5
 11264  00AA  0087               	movwf	7
 11265  00AB  1201               	bcf	1,4
 11266                           
 11267                           ;OverLoad_B1.c: 56: Load->LightsCount = Load->Lights1Status + Load->Lights2Status + Load
      +                          ->Lights3Status;
 11268  00AC  087B               	movf	_Load,w
 11269  00AD  3E45               	addlw	69
 11270  00AE  0086               	movwf	6
 11271  00AF  3002               	movlw	2	; select bank4/5
 11272  00B0  0087               	movwf	7
 11273  00B1  087B               	movf	_Load,w
 11274  00B2  3E44               	addlw	68
 11275  00B3  0084               	movwf	4
 11276  00B4  3002               	movlw	2	; select bank4/5
 11277  00B5  0085               	movwf	5
 11278  00B6  0800               	movf	0,w
 11279  00B7  00B0               	movwf	??_Load_Main
 11280  00B8  087B               	movf	_Load,w
 11281  00B9  3E43               	addlw	67
 11282  00BA  0084               	movwf	4
 11283  00BB  3002               	movlw	2	; select bank4/5
 11284  00BC  0085               	movwf	5
 11285  00BD  0800               	movf	0,w
 11286  00BE  0730               	addwf	??_Load_Main,w
 11287  00BF  0701               	addwf	1,w
 11288  00C0  00B1               	movwf	??_Load_Main+1
 11289  00C1  087B               	movf	_Load,w
 11290  00C2  3E3E               	addlw	62
 11291  00C3  0086               	movwf	6
 11292  00C4  3002               	movlw	2	; select bank4/5
 11293  00C5  0087               	movwf	7
 11294  00C6  0831               	movf	??_Load_Main+1,w
 11295  00C7  0081               	movwf	1
 11296                           
 11297                           ;OverLoad_B1.c: 57: for (i = 1; i < 4; i++) {
 11298  00C8  01B4               	clrf	Load_Main@i
 11299  00C9  0AB4               	incf	Load_Main@i,f
 11300  00CA  3004               	movlw	4
 11301  00CB  0234               	subwf	Load_Main@i,w
 11302  00CC  1803               	btfsc	3,0
 11303  00CD  28FC               	goto	l8250
 11304  00CE                     l8244:	
 11305                           
 11306                           ;OverLoad_B1.c: 58: Load->ADH += Load->AH[i];
 11307  00CE  3534               	lslf	Load_Main@i,w
 11308  00CF  3E08               	addlw	8
 11309  00D0  077B               	addwf	_Load,w
 11310  00D1  00B0               	movwf	??_Load_Main
 11311  00D2  0830               	movf	??_Load_Main,w
 11312  00D3  0086               	movwf	6
 11313  00D4  3002               	movlw	2	; select bank4/5
 11314  00D5  0087               	movwf	7
 11315  00D6  087B               	movf	_Load,w
 11316  00D7  3E2E               	addlw	46
 11317  00D8  0084               	movwf	4
 11318  00D9  3002               	movlw	2	; select bank4/5
 11319  00DA  0085               	movwf	5
 11320  00DB  3F40               	moviw [0]fsr1
 11321  00DC  0780               	addwf	0,f
 11322  00DD  3101               	addfsr 0,1
 11323  00DE  3F41               	moviw [1]fsr1
 11324  00DF  3D80               	addwfc	0,f
 11325  00E0  313F               	addfsr 0,-1
 11326                           
 11327                           ;OverLoad_B1.c: 59: Load->ADL += Load->AL[i];
 11328  00E1  3534               	lslf	Load_Main@i,w
 11329  00E2  3E1A               	addlw	26
 11330  00E3  077B               	addwf	_Load,w
 11331  00E4  00B0               	movwf	??_Load_Main
 11332  00E5  0830               	movf	??_Load_Main,w
 11333  00E6  0086               	movwf	6
 11334  00E7  3002               	movlw	2	; select bank4/5
 11335  00E8  0087               	movwf	7
 11336  00E9  087B               	movf	_Load,w
 11337  00EA  3E30               	addlw	48
 11338  00EB  0084               	movwf	4
 11339  00EC  3002               	movlw	2	; select bank4/5
 11340  00ED  0085               	movwf	5
 11341  00EE  3F40               	moviw [0]fsr1
 11342  00EF  0780               	addwf	0,f
 11343  00F0  3101               	addfsr 0,1
 11344  00F1  3F41               	moviw [1]fsr1
 11345  00F2  3D80               	addwfc	0,f
 11346  00F3  313F               	addfsr 0,-1
 11347  00F4  3001               	movlw	1
 11348  00F5  00B0               	movwf	??_Load_Main
 11349  00F6  0830               	movf	??_Load_Main,w
 11350  00F7  07B4               	addwf	Load_Main@i,f
 11351  00F8  3004               	movlw	4
 11352  00F9  0234               	subwf	Load_Main@i,w
 11353  00FA  1C03               	skipc
 11354  00FB  28CE               	goto	l8244
 11355  00FC                     l8250:	
 11356                           
 11357                           ;OverLoad_B1.c: 60: }
 11358                           ;OverLoad_B1.c: 61: Load->ADH /= 3;
 11359  00FC  3003               	movlw	3
 11360  00FD  00A0               	movwf	___lwdiv@divisor
 11361  00FE  3000               	movlw	0
 11362  00FF  00A1               	movwf	___lwdiv@divisor+1
 11363  0100  087B               	movf	_Load,w
 11364  0101  3E2E               	addlw	46
 11365  0102  0086               	movwf	6
 11366  0103  3002               	movlw	2	; select bank4/5
 11367  0104  0087               	movwf	7
 11368  0105  3F40               	moviw [0]fsr1
 11369  0106  00A2               	movwf	___lwdiv@dividend
 11370  0107  3F41               	moviw [1]fsr1
 11371  0108  00A3               	movwf	___lwdiv@dividend+1
 11372  0109  319D  2519  3180   	fcall	___lwdiv
 11373  010C  087B               	movf	_Load,w
 11374  010D  3E2E               	addlw	46
 11375  010E  0086               	movwf	6
 11376  010F  3002               	movlw	2	; select bank4/5
 11377  0110  0087               	movwf	7
 11378  0111  0020               	movlb	0	; select bank0
 11379  0112  0820               	movf	?___lwdiv,w
 11380  0113  3FC0               	movwi [0]fsr1
 11381  0114  0821               	movf	?___lwdiv+1,w
 11382  0115  3FC1               	movwi [1]fsr1
 11383                           
 11384                           ;OverLoad_B1.c: 62: Load->ADL /= 3;
 11385  0116  3003               	movlw	3
 11386  0117  00A0               	movwf	___lwdiv@divisor
 11387  0118  3000               	movlw	0
 11388  0119  00A1               	movwf	___lwdiv@divisor+1
 11389  011A  087B               	movf	_Load,w
 11390  011B  3E30               	addlw	48
 11391  011C  0086               	movwf	6
 11392  011D  3002               	movlw	2	; select bank4/5
 11393  011E  0087               	movwf	7
 11394  011F  3F40               	moviw [0]fsr1
 11395  0120  00A2               	movwf	___lwdiv@dividend
 11396  0121  3F41               	moviw [1]fsr1
 11397  0122  00A3               	movwf	___lwdiv@dividend+1
 11398  0123  319D  2519  3180   	fcall	___lwdiv
 11399  0126  087B               	movf	_Load,w
 11400  0127  3E30               	addlw	48
 11401  0128  0086               	movwf	6
 11402  0129  3002               	movlw	2	; select bank4/5
 11403  012A  0087               	movwf	7
 11404  012B  0020               	movlb	0	; select bank0
 11405  012C  0820               	movf	?___lwdiv,w
 11406  012D  3FC0               	movwi [0]fsr1
 11407  012E  0821               	movf	?___lwdiv+1,w
 11408  012F  3FC1               	movwi [1]fsr1
 11409                           
 11410                           ;OverLoad_B1.c: 63: if (Load->ADH > Load->ADL) {
 11411  0130  087B               	movf	_Load,w
 11412  0131  3E2E               	addlw	46
 11413  0132  0086               	movwf	6
 11414  0133  3002               	movlw	2	; select bank4/5
 11415  0134  0087               	movwf	7
 11416  0135  3F40               	moviw [0]fsr1
 11417  0136  00B0               	movwf	??_Load_Main
 11418  0137  3F41               	moviw [1]fsr1
 11419  0138  00B1               	movwf	??_Load_Main+1
 11420  0139  087B               	movf	_Load,w
 11421  013A  3E30               	addlw	48
 11422  013B  0086               	movwf	6
 11423  013C  3002               	movlw	2	; select bank4/5
 11424  013D  0087               	movwf	7
 11425  013E  3F40               	moviw [0]fsr1
 11426  013F  00B2               	movwf	??_Load_Main+2
 11427  0140  3F41               	moviw [1]fsr1
 11428  0141  00B3               	movwf	??_Load_Main+3
 11429  0142  0831               	movf	??_Load_Main+1,w
 11430  0143  0233               	subwf	??_Load_Main+3,w
 11431  0144  1D03               	skipz
 11432  0145  2948               	goto	u7725
 11433  0146  0830               	movf	??_Load_Main,w
 11434  0147  0232               	subwf	??_Load_Main+2,w
 11435  0148                     u7725:	
 11436  0148  1803               	skipnc
 11437  0149  2A85               	goto	l8308
 11438                           
 11439                           ;OverLoad_B1.c: 64: Load->AD = (Load->ADH - Load->ADL);
 11440  014A  087B               	movf	_Load,w
 11441  014B  3E2E               	addlw	46
 11442  014C  0086               	movwf	6
 11443  014D  3002               	movlw	2	; select bank4/5
 11444  014E  0087               	movwf	7
 11445  014F  087B               	movf	_Load,w
 11446  0150  3E30               	addlw	48
 11447  0151  0084               	movwf	4
 11448  0152  3002               	movlw	2	; select bank4/5
 11449  0153  0085               	movwf	5
 11450  0154  3F00               	moviw [0]fsr0
 11451  0155  00B0               	movwf	??_Load_Main
 11452  0156  3F01               	moviw [1]fsr0
 11453  0157  00B1               	movwf	??_Load_Main+1
 11454  0158  09B0               	comf	??_Load_Main,f
 11455  0159  09B1               	comf	??_Load_Main+1,f
 11456  015A  0AB0               	incf	??_Load_Main,f
 11457  015B  1903               	skipnz
 11458  015C  0AB1               	incf	??_Load_Main+1,f
 11459  015D  3F40               	moviw [0]fsr1
 11460  015E  0730               	addwf	??_Load_Main,w
 11461  015F  00B2               	movwf	??_Load_Main+2
 11462  0160  3F41               	moviw [1]fsr1
 11463  0161  3D31               	addwfc	??_Load_Main+1,w
 11464  0162  00B3               	movwf	??_Load_Main+3
 11465  0163  087B               	movf	_Load,w
 11466  0164  3E2C               	addlw	44
 11467  0165  0086               	movwf	6
 11468  0166  3002               	movlw	2	; select bank4/5
 11469  0167  0087               	movwf	7
 11470  0168  0832               	movf	??_Load_Main+2,w
 11471  0169  3FC0               	movwi [0]fsr1
 11472  016A  0833               	movf	??_Load_Main+3,w
 11473  016B  3FC1               	movwi [1]fsr1
 11474                           
 11475                           ;OverLoad_B1.c: 66: if (Load->Count < 2) {
 11476  016C  087B               	movf	_Load,w
 11477  016D  3E3A               	addlw	58
 11478  016E  0086               	movwf	6
 11479  016F  3002               	movlw	2	; select bank4/5
 11480  0170  0087               	movwf	7
 11481  0171  3002               	movlw	2
 11482  0172  0201               	subwf	1,w
 11483  0173  1803               	skipnc
 11484  0174  29C5               	goto	l8272
 11485                           
 11486                           ;OverLoad_B1.c: 67: Load->Count++;
 11487  0175  3001               	movlw	1
 11488  0176  00B0               	movwf	??_Load_Main
 11489  0177  087B               	movf	_Load,w
 11490  0178  3E3A               	addlw	58
 11491  0179  0086               	movwf	6
 11492  017A  3002               	movlw	2	; select bank4/5
 11493  017B  0087               	movwf	7
 11494  017C  0830               	movf	??_Load_Main,w
 11495  017D  0781               	addwf	1,f
 11496                           
 11497                           ;OverLoad_B1.c: 68: if (Load->Count == 1) {
 11498  017E  087B               	movf	_Load,w
 11499  017F  3E3A               	addlw	58
 11500  0180  0086               	movwf	6
 11501  0181  3002               	movlw	2	; select bank4/5
 11502  0182  0087               	movwf	7
 11503  0183  0801               	movf	1,w
 11504  0184  3A01               	xorlw	1
 11505  0185  1D03               	skipz
 11506  0186  2991               	goto	l8264
 11507                           
 11508                           ;OverLoad_B1.c: 69: Load->JudgeValue = 500;
 11509  0187  087B               	movf	_Load,w
 11510  0188  3E36               	addlw	54
 11511  0189  0086               	movwf	6
 11512  018A  3002               	movlw	2	; select bank4/5
 11513  018B  0087               	movwf	7
 11514  018C  30F4               	movlw	244
 11515  018D  3FC0               	movwi [0]fsr1
 11516  018E  3001               	movlw	1
 11517  018F  3FC1               	movwi [1]fsr1
 11518                           
 11519                           ;OverLoad_B1.c: 70: } else if (Load->Count == 2) {
 11520  0190  29C5               	goto	l8272
 11521  0191                     l8264:	
 11522  0191  087B               	movf	_Load,w
 11523  0192  3E3A               	addlw	58
 11524  0193  0086               	movwf	6
 11525  0194  3002               	movlw	2	; select bank4/5
 11526  0195  0087               	movwf	7
 11527  0196  0801               	movf	1,w
 11528  0197  3A02               	xorlw	2
 11529  0198  1D03               	skipz
 11530  0199  29C5               	goto	l8272
 11531                           
 11532                           ;OverLoad_B1.c: 71: if (Load->LightsCount == 1) {
 11533  019A  087B               	movf	_Load,w
 11534  019B  3E3E               	addlw	62
 11535  019C  0086               	movwf	6
 11536  019D  3002               	movlw	2	; select bank4/5
 11537  019E  0087               	movwf	7
 11538  019F  0801               	movf	1,w
 11539  01A0  3A01               	xorlw	1
 11540  01A1  1D03               	skipz
 11541  01A2  29AD               	goto	l8270
 11542                           
 11543                           ;OverLoad_B1.c: 72: Load->JudgeValue = 0x32;
 11544  01A3  087B               	movf	_Load,w
 11545  01A4  3E36               	addlw	54
 11546  01A5  0086               	movwf	6
 11547  01A6  3002               	movlw	2	; select bank4/5
 11548  01A7  0087               	movwf	7
 11549  01A8  3032               	movlw	50
 11550  01A9  3FC0               	movwi [0]fsr1
 11551  01AA  3000               	movlw	0
 11552  01AB  3FC1               	movwi [1]fsr1
 11553                           
 11554                           ;OverLoad_B1.c: 73: } else {
 11555  01AC  29C5               	goto	l8272
 11556  01AD                     l8270:	
 11557                           
 11558                           ;OverLoad_B1.c: 74: Load->JudgeValue = (0x32 + Load->TotalLoad) - 0x08;
 11559  01AD  087B               	movf	_Load,w
 11560  01AE  3E06               	addlw	6
 11561  01AF  0086               	movwf	6
 11562  01B0  3002               	movlw	2	; select bank4/5
 11563  01B1  0087               	movwf	7
 11564  01B2  3F40               	moviw [0]fsr1
 11565  01B3  00B0               	movwf	??_Load_Main
 11566  01B4  3F41               	moviw [1]fsr1
 11567  01B5  00B1               	movwf	??_Load_Main+1
 11568  01B6  0830               	movf	??_Load_Main,w
 11569  01B7  3E2A               	addlw	42
 11570  01B8  00B2               	movwf	??_Load_Main+2
 11571  01B9  3000               	movlw	0
 11572  01BA  3D31               	addwfc	??_Load_Main+1,w
 11573  01BB  00B3               	movwf	??_Load_Main+3
 11574  01BC  087B               	movf	_Load,w
 11575  01BD  3E36               	addlw	54
 11576  01BE  0086               	movwf	6
 11577  01BF  3002               	movlw	2	; select bank4/5
 11578  01C0  0087               	movwf	7
 11579  01C1  0832               	movf	??_Load_Main+2,w
 11580  01C2  3FC0               	movwi [0]fsr1
 11581  01C3  0833               	movf	??_Load_Main+3,w
 11582  01C4  3FC1               	movwi [1]fsr1
 11583  01C5                     l8272:	
 11584                           
 11585                           ;OverLoad_B1.c: 75: }
 11586                           ;OverLoad_B1.c: 76: }
 11587                           ;OverLoad_B1.c: 77: }
 11588                           ;OverLoad_B1.c: 79: if (Load->AD >= Load->JudgeValue) {
 11589  01C5  087B               	movf	_Load,w
 11590  01C6  3E36               	addlw	54
 11591  01C7  0086               	movwf	6
 11592  01C8  3002               	movlw	2	; select bank4/5
 11593  01C9  0087               	movwf	7
 11594  01CA  3F40               	moviw [0]fsr1
 11595  01CB  00B0               	movwf	??_Load_Main
 11596  01CC  3F41               	moviw [1]fsr1
 11597  01CD  00B1               	movwf	??_Load_Main+1
 11598  01CE  087B               	movf	_Load,w
 11599  01CF  3E2C               	addlw	44
 11600  01D0  0086               	movwf	6
 11601  01D1  3002               	movlw	2	; select bank4/5
 11602  01D2  0087               	movwf	7
 11603  01D3  3F40               	moviw [0]fsr1
 11604  01D4  00B2               	movwf	??_Load_Main+2
 11605  01D5  3F41               	moviw [1]fsr1
 11606  01D6  00B3               	movwf	??_Load_Main+3
 11607  01D7  0831               	movf	??_Load_Main+1,w
 11608  01D8  0233               	subwf	??_Load_Main+3,w
 11609  01D9  1D03               	skipz
 11610  01DA  29DD               	goto	u7775
 11611  01DB  0830               	movf	??_Load_Main,w
 11612  01DC  0232               	subwf	??_Load_Main+2,w
 11613  01DD                     u7775:	
 11614  01DD  1C03               	skipc
 11615  01DE  29FC               	goto	l8282
 11616                           
 11617                           ;OverLoad_B1.c: 80: Load->ErrorCount++;
 11618  01DF  3001               	movlw	1
 11619  01E0  00B0               	movwf	??_Load_Main
 11620  01E1  087B               	movf	_Load,w
 11621  01E2  3E3C               	addlw	60
 11622  01E3  0086               	movwf	6
 11623  01E4  3002               	movlw	2	; select bank4/5
 11624  01E5  0087               	movwf	7
 11625  01E6  0830               	movf	??_Load_Main,w
 11626  01E7  0781               	addwf	1,f
 11627                           
 11628                           ;OverLoad_B1.c: 81: if (Load->ErrorCount > 2) {
 11629  01E8  087B               	movf	_Load,w
 11630  01E9  3E3C               	addlw	60
 11631  01EA  0086               	movwf	6
 11632  01EB  3002               	movlw	2	; select bank4/5
 11633  01EC  0087               	movwf	7
 11634  01ED  3003               	movlw	3
 11635  01EE  0201               	subwf	1,w
 11636  01EF  1C03               	skipc
 11637  01F0  2A85               	goto	l8308
 11638                           
 11639                           ;OverLoad_B1.c: 82: Load->ErrorCount = 0;
 11640  01F1  087B               	movf	_Load,w
 11641  01F2  3E3C               	addlw	60
 11642  01F3  0086               	movwf	6
 11643  01F4  3002               	movlw	2	; select bank4/5
 11644  01F5  0087               	movwf	7
 11645  01F6  0181               	clrf	1
 11646                           
 11647                           ;OverLoad_B1.c: 83: setLoad_Exceptions(1);
 11648  01F7  3001               	movlw	1
 11649  01F8  319D  25D0  3180   	fcall	_setLoad_Exceptions
 11650                           
 11651                           ;OverLoad_B1.c: 92: }
 11652                           ;OverLoad_B1.c: 93: } else {
 11653  01FB  2A85               	goto	l8308
 11654  01FC                     l8282:	
 11655                           
 11656                           ;OverLoad_B1.c: 94: Load->ErrorCount = 0;
 11657  01FC  087B               	movf	_Load,w
 11658  01FD  3E3C               	addlw	60
 11659  01FE  0086               	movwf	6
 11660  01FF  3002               	movlw	2	; select bank4/5
 11661  0200  0087               	movwf	7
 11662  0201  0181               	clrf	1
 11663                           
 11664                           ;OverLoad_B1.c: 95: if (Load->SafeCount < 10) {
 11665  0202  087B               	movf	_Load,w
 11666  0203  3E42               	addlw	66
 11667  0204  0086               	movwf	6
 11668  0205  3002               	movlw	2	; select bank4/5
 11669  0206  0087               	movwf	7
 11670  0207  300A               	movlw	10
 11671  0208  0201               	subwf	1,w
 11672  0209  1803               	skipnc
 11673  020A  2A15               	goto	l8288
 11674                           
 11675                           ;OverLoad_B1.c: 96: Load->SafeCount++;
 11676  020B  3001               	movlw	1
 11677  020C  0020               	movlb	0	; select bank0
 11678  020D  00B0               	movwf	??_Load_Main
 11679  020E  087B               	movf	_Load,w
 11680  020F  3E42               	addlw	66
 11681  0210  0086               	movwf	6
 11682  0211  3002               	movlw	2	; select bank4/5
 11683  0212  0087               	movwf	7
 11684  0213  0830               	movf	??_Load_Main,w
 11685  0214  0781               	addwf	1,f
 11686  0215                     l8288:	
 11687                           
 11688                           ;OverLoad_B1.c: 97: }
 11689                           ;OverLoad_B1.c: 98: if (Load->SafeCount >= 10) {
 11690  0215  087B               	movf	_Load,w
 11691  0216  3E42               	addlw	66
 11692  0217  0086               	movwf	6
 11693  0218  3002               	movlw	2	; select bank4/5
 11694  0219  0087               	movwf	7
 11695  021A  300A               	movlw	10
 11696  021B  0201               	subwf	1,w
 11697  021C  1C03               	skipc
 11698  021D  2A85               	goto	l8308
 11699                           
 11700                           ;OverLoad_B1.c: 99: Load->Safe = 1;
 11701  021E  087B               	movf	_Load,w
 11702  021F  0086               	movwf	6
 11703  0220  3002               	movlw	2	; select bank4/5
 11704  0221  0087               	movwf	7
 11705  0222  1581               	bsf	1,3
 11706                           
 11707                           ;OverLoad_B1.c: 103: setDimmerLights_Clear(1, 1);
 11708  0223  0020               	movlb	0	; select bank0
 11709  0224  01A2               	clrf	setDimmerLights_Clear@command
 11710  0225  0AA2               	incf	setDimmerLights_Clear@command,f
 11711  0226  3001               	movlw	1
 11712  0227  31A6  268D  3180   	fcall	_setDimmerLights_Clear
 11713                           
 11714                           ;OverLoad_B1.c: 107: ;;
 11715                           ;OverLoad_B1.c: 113: setDimmerLights_Clear(2, 1);
 11716  022A  0020               	movlb	0	; select bank0
 11717  022B  01A2               	clrf	setDimmerLights_Clear@command
 11718  022C  0AA2               	incf	setDimmerLights_Clear@command,f
 11719  022D  3002               	movlw	2
 11720  022E  31A6  268D  3180   	fcall	_setDimmerLights_Clear
 11721                           
 11722                           ;OverLoad_B1.c: 117: ;;
 11723                           ;OverLoad_B1.c: 132: if (Load->StatusOn) {
 11724  0231  087B               	movf	_Load,w
 11725  0232  3E46               	addlw	70
 11726  0233  0086               	movwf	6
 11727  0234  3002               	movlw	2	; select bank4/5
 11728  0235  0087               	movwf	7
 11729  0236  1C01               	btfss	1,0
 11730  0237  2A4C               	goto	l8300
 11731                           
 11732                           ;OverLoad_B1.c: 133: Load->StatusOn = 0;
 11733  0238  087B               	movf	_Load,w
 11734  0239  3E46               	addlw	70
 11735  023A  0086               	movwf	6
 11736  023B  3002               	movlw	2	; select bank4/5
 11737  023C  0087               	movwf	7
 11738  023D  1001               	bcf	1,0
 11739                           
 11740                           ;OverLoad_B1.c: 134: Load->TotalLoad = Load->AD;
 11741  023E  087B               	movf	_Load,w
 11742  023F  3E2C               	addlw	44
 11743  0240  0086               	movwf	6
 11744  0241  3002               	movlw	2	; select bank4/5
 11745  0242  0087               	movwf	7
 11746  0243  087B               	movf	_Load,w
 11747  0244  3E06               	addlw	6
 11748  0245  0084               	movwf	4
 11749  0246  3002               	movlw	2	; select bank4/5
 11750  0247  0085               	movwf	5
 11751  0248  3F40               	moviw [0]fsr1
 11752  0249  3F80               	movwi [0]fsr0
 11753  024A  3F41               	moviw [1]fsr1
 11754  024B  3F81               	movwi [1]fsr0
 11755  024C                     l8300:	
 11756                           
 11757                           ;OverLoad_B1.c: 136: }
 11758                           ;OverLoad_B1.c: 138: if (Load->StatusOff) {
 11759  024C  087B               	movf	_Load,w
 11760  024D  3E46               	addlw	70
 11761  024E  0086               	movwf	6
 11762  024F  3002               	movlw	2	; select bank4/5
 11763  0250  0087               	movwf	7
 11764  0251  1C81               	btfss	1,1
 11765  0252  2A85               	goto	l8308
 11766                           
 11767                           ;OverLoad_B1.c: 139: Load->StatusOff = 0;
 11768  0253  087B               	movf	_Load,w
 11769  0254  3E46               	addlw	70
 11770  0255  0086               	movwf	6
 11771  0256  3002               	movlw	2	; select bank4/5
 11772  0257  0087               	movwf	7
 11773  0258  1081               	bcf	1,1
 11774                           
 11775                           ;OverLoad_B1.c: 140: Load->TotalLoad = Load->AD;
 11776  0259  087B               	movf	_Load,w
 11777  025A  3E2C               	addlw	44
 11778  025B  0086               	movwf	6
 11779  025C  3002               	movlw	2	; select bank4/5
 11780  025D  0087               	movwf	7
 11781  025E  087B               	movf	_Load,w
 11782  025F  3E06               	addlw	6
 11783  0260  0084               	movwf	4
 11784  0261  3002               	movlw	2	; select bank4/5
 11785  0262  0085               	movwf	5
 11786  0263  3F40               	moviw [0]fsr1
 11787  0264  3F80               	movwi [0]fsr0
 11788  0265  3F41               	moviw [1]fsr1
 11789  0266  3F81               	movwi [1]fsr0
 11790                           
 11791                           ;OverLoad_B1.c: 141: Load->JudgeValue = 0x32 * Load->LightsCount;
 11792  0267  087B               	movf	_Load,w
 11793  0268  3E3E               	addlw	62
 11794  0269  0086               	movwf	6
 11795  026A  3002               	movlw	2	; select bank4/5
 11796  026B  0087               	movwf	7
 11797  026C  0801               	movf	1,w
 11798  026D  0020               	movlb	0	; select bank0
 11799  026E  00B0               	movwf	??_Load_Main
 11800  026F  01B1               	clrf	??_Load_Main+1
 11801  0270  0830               	movf	??_Load_Main,w
 11802  0271  00A0               	movwf	___wmul@multiplier
 11803  0272  0831               	movf	??_Load_Main+1,w
 11804  0273  00A1               	movwf	___wmul@multiplier+1
 11805  0274  3032               	movlw	50
 11806  0275  00A2               	movwf	___wmul@multiplicand
 11807  0276  3000               	movlw	0
 11808  0277  00A3               	movwf	___wmul@multiplicand+1
 11809  0278  3199  217A  3180   	fcall	___wmul
 11810  027B  087B               	movf	_Load,w
 11811  027C  3E36               	addlw	54
 11812  027D  0086               	movwf	6
 11813  027E  3002               	movlw	2	; select bank4/5
 11814  027F  0087               	movwf	7
 11815  0280  0020               	movlb	0	; select bank0
 11816  0281  0820               	movf	?___wmul,w
 11817  0282  3FC0               	movwi [0]fsr1
 11818  0283  0821               	movf	?___wmul+1,w
 11819  0284  3FC1               	movwi [1]fsr1
 11820  0285                     l8308:	
 11821                           
 11822                           ;OverLoad_B1.c: 142: }
 11823                           ;OverLoad_B1.c: 143: }
 11824                           ;OverLoad_B1.c: 144: }
 11825                           ;OverLoad_B1.c: 145: }
 11826                           ;OverLoad_B1.c: 146: setLoad_AH_AL_Restore();
 11827  0285  319A  227A         	fcall	_setLoad_AH_AL_Restore
 11828                           
 11829                           ;OverLoad_B1.c: 158: }
 11830                           ;OverLoad_B1.c: 159: } else {
 11831  0287  0008               	return
 11832  0288                     l8310:	
 11833                           
 11834                           ;OverLoad_B1.c: 160: if (Load->GO) {
 11835  0288  087B               	movf	_Load,w
 11836  0289  0086               	movwf	6
 11837  028A  3002               	movlw	2	; select bank4/5
 11838  028B  0087               	movwf	7
 11839  028C  1C81               	btfss	1,1
 11840  028D  2AAA               	goto	l8320
 11841                           
 11842                           ;OverLoad_B1.c: 161: if (!Load->LightsON) {
 11843  028E  087B               	movf	_Load,w
 11844  028F  0086               	movwf	6
 11845  0290  3002               	movlw	2	; select bank4/5
 11846  0291  0087               	movwf	7
 11847  0292  1901               	btfsc	1,2
 11848  0293  2A9E               	goto	l8316
 11849                           
 11850                           ;OverLoad_B1.c: 162: Load->LightsON = 1;
 11851  0294  087B               	movf	_Load,w
 11852  0295  0086               	movwf	6
 11853  0296  3002               	movlw	2	; select bank4/5
 11854  0297  0087               	movwf	7
 11855  0298  1501               	bsf	1,2
 11856                           
 11857                           ;OverLoad_B1.c: 163: Load->Safe = 0;
 11858  0299  087B               	movf	_Load,w
 11859  029A  0086               	movwf	6
 11860  029B  3002               	movlw	2	; select bank4/5
 11861  029C  0087               	movwf	7
 11862  029D  1181               	bcf	1,3
 11863  029E                     l8316:	
 11864                           
 11865                           ;OverLoad_B1.c: 164: }
 11866                           ;OverLoad_B1.c: 165: if (getTemp_Safe() && 1) {
 11867  029E  31A5  252F  3180   	fcall	_getTemp_Safe
 11868  02A1  3A00               	xorlw	0
 11869  02A2  1903               	skipnz
 11870  02A3  0008               	return
 11871                           
 11872                           ;OverLoad_B1.c: 166: Load->ADtoGO = 1;
 11873  02A4  087B               	movf	_Load,w
 11874  02A5  0086               	movwf	6
 11875  02A6  3002               	movlw	2	; select bank4/5
 11876  02A7  0087               	movwf	7
 11877  02A8  1601               	bsf	1,4
 11878                           
 11879                           ;OverLoad_B1.c: 167: }
 11880                           ;OverLoad_B1.c: 168: } else {
 11881  02A9  0008               	return
 11882  02AA                     l8320:	
 11883                           
 11884                           ;OverLoad_B1.c: 169: if (Load->LightsON) {
 11885  02AA  087B               	movf	_Load,w
 11886  02AB  0086               	movwf	6
 11887  02AC  3002               	movlw	2	; select bank4/5
 11888  02AD  0087               	movwf	7
 11889  02AE  1D01               	btfss	1,2
 11890  02AF  0008               	return
 11891                           
 11892                           ;OverLoad_B1.c: 170: Load->LightsON = 0;
 11893  02B0  087B               	movf	_Load,w
 11894  02B1  0086               	movwf	6
 11895  02B2  3002               	movlw	2	; select bank4/5
 11896  02B3  0087               	movwf	7
 11897  02B4  1101               	bcf	1,2
 11898                           
 11899                           ;OverLoad_B1.c: 171: Load->Safe = 1;
 11900  02B5  087B               	movf	_Load,w
 11901  02B6  0086               	movwf	6
 11902  02B7  3002               	movlw	2	; select bank4/5
 11903  02B8  0087               	movwf	7
 11904  02B9  1581               	bsf	1,3
 11905                           
 11906                           ;OverLoad_B1.c: 172: Load->ErrorCount = 0;
 11907  02BA  087B               	movf	_Load,w
 11908  02BB  3E3C               	addlw	60
 11909  02BC  0086               	movwf	6
 11910  02BD  3002               	movlw	2	; select bank4/5
 11911  02BE  0087               	movwf	7
 11912  02BF  0181               	clrf	1
 11913                           
 11914                           ;OverLoad_B1.c: 173: Load->Count = 0;
 11915  02C0  087B               	movf	_Load,w
 11916  02C1  3E3A               	addlw	58
 11917  02C2  0086               	movwf	6
 11918  02C3  3002               	movlw	2	; select bank4/5
 11919  02C4  0087               	movwf	7
 11920  02C5  0181               	clrf	1
 11921                           
 11922                           ;OverLoad_B1.c: 174: Load->TotalLoad = 0;
 11923  02C6  087B               	movf	_Load,w
 11924  02C7  3E06               	addlw	6
 11925  02C8  0086               	movwf	6
 11926  02C9  3002               	movlw	2	; select bank4/5
 11927  02CA  0087               	movwf	7
 11928  02CB  3000               	movlw	0
 11929  02CC  3FC0               	movwi [0]fsr1
 11930  02CD  3FC1               	movwi [1]fsr1
 11931                           
 11932                           ;OverLoad_B1.c: 175: Load->NumberCount = 0;
 11933  02CE  087B               	movf	_Load,w
 11934  02CF  3E3F               	addlw	63
 11935  02D0  0086               	movwf	6
 11936  02D1  3002               	movlw	2	; select bank4/5
 11937  02D2  0087               	movwf	7
 11938  02D3  0181               	clrf	1
 11939                           
 11940                           ;OverLoad_B1.c: 176: Load->StatusOn = 0;
 11941  02D4  087B               	movf	_Load,w
 11942  02D5  3E46               	addlw	70
 11943  02D6  0086               	movwf	6
 11944  02D7  3002               	movlw	2	; select bank4/5
 11945  02D8  0087               	movwf	7
 11946  02D9  1001               	bcf	1,0
 11947                           
 11948                           ;OverLoad_B1.c: 177: Load->StatusOff = 0;
 11949  02DA  087B               	movf	_Load,w
 11950  02DB  3E46               	addlw	70
 11951  02DC  0086               	movwf	6
 11952  02DD  3002               	movlw	2	; select bank4/5
 11953  02DE  0087               	movwf	7
 11954  02DF  1081               	bcf	1,1
 11955                           
 11956                           ;OverLoad_B1.c: 178: Load->AD = 0;
 11957  02E0  087B               	movf	_Load,w
 11958  02E1  3E2C               	addlw	44
 11959  02E2  0086               	movwf	6
 11960  02E3  3002               	movlw	2	; select bank4/5
 11961  02E4  0087               	movwf	7
 11962  02E5  3000               	movlw	0
 11963  02E6  3FC0               	movwi [0]fsr1
 11964  02E7  3FC1               	movwi [1]fsr1
 11965                           
 11966                           ;OverLoad_B1.c: 179: setLoad_AH_AL_Restore();
 11967  02E8  319A  227A  3180   	fcall	_setLoad_AH_AL_Restore
 11968                           
 11969                           ;OverLoad_B1.c: 183: setDimmerLights_Clear(1, 1);
 11970  02EB  0020               	movlb	0	; select bank0
 11971  02EC  01A2               	clrf	setDimmerLights_Clear@command
 11972  02ED  0AA2               	incf	setDimmerLights_Clear@command,f
 11973  02EE  3001               	movlw	1
 11974  02EF  31A6  268D  3180   	fcall	_setDimmerLights_Clear
 11975                           
 11976                           ;OverLoad_B1.c: 187: ;;
 11977                           ;OverLoad_B1.c: 193: setDimmerLights_Clear(2, 1);
 11978  02F2  0020               	movlb	0	; select bank0
 11979  02F3  01A2               	clrf	setDimmerLights_Clear@command
 11980  02F4  0AA2               	incf	setDimmerLights_Clear@command,f
 11981  02F5  3002               	movlw	2
 11982  02F6  31A6  268D         	fcall	_setDimmerLights_Clear
 11983                           
 11984                           ;OverLoad_B1.c: 197: ;;
 11985  02F8  0008               	return
 11986  02F9                     __end_of_Load_Main:	
 11987                           
 11988                           	psect	text58
 11989  1DD0                     __ptext58:	
 11990 ;; *************** function _setLoad_Exceptions *****************
 11991 ;; Defined at:
 11992 ;;		line 232 in file "../src/OverLoad_B1.c"
 11993 ;; Parameters:    Size  Location     Type
 11994 ;;  command         1    wreg     unsigned char 
 11995 ;; Auto vars:     Size  Location     Type
 11996 ;;  command         1   15[BANK0 ] unsigned char 
 11997 ;; Return value:  Size  Location     Type
 11998 ;;		None               void
 11999 ;; Registers used:
 12000 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12001 ;; Tracked objects:
 12002 ;;		On entry : 0/0
 12003 ;;		On exit  : 0/0
 12004 ;;		Unchanged: 0/0
 12005 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12006 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12007 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12008 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12009 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12010 ;;Total ram usage:        2 bytes
 12011 ;; Hardware stack levels used:    1
 12012 ;; Hardware stack levels required when called:    9
 12013 ;; This function calls:
 12014 ;;		_DimmerLights_Exceptions
 12015 ;;		_setLED
 12016 ;;		_setRF_Enable
 12017 ;;		_setSw_Enable
 12018 ;; This function is called by:
 12019 ;;		_Load_Main
 12020 ;; This function uses a non-reentrant model
 12021 ;;
 12022                           
 12023                           
 12024                           ;psect for function _setLoad_Exceptions
 12025  1DD0                     _setLoad_Exceptions:	
 12026                           
 12027                           ;incstack = 0
 12028                           ; Regs used in _setLoad_Exceptions: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12029                           ;setLoad_Exceptions@command stored from wreg
 12030  1DD0  0020               	movlb	0	; select bank0
 12031  1DD1  00AF               	movwf	setLoad_Exceptions@command
 12032                           
 12033                           ;OverLoad_B1.c: 233: Load->ERROR = command;
 12034  1DD2  087B               	movf	_Load,w
 12035  1DD3  0086               	movwf	6
 12036  1DD4  3002               	movlw	2	; select bank4/5
 12037  1DD5  0087               	movwf	7
 12038  1DD6  082F               	movf	setLoad_Exceptions@command,w
 12039  1DD7  1281               	bcf	1,5
 12040  1DD8  1D03               	skipz
 12041  1DD9  1681               	bsf	1,5
 12042                           
 12043                           ;OverLoad_B1.c: 234: Load->Safe = (~command) & 0x01;
 12044  1DDA  092F               	comf	setLoad_Exceptions@command,w
 12045  1DDB  3901               	andlw	1
 12046  1DDC  00AE               	movwf	??_setLoad_Exceptions
 12047  1DDD  087B               	movf	_Load,w
 12048  1DDE  0086               	movwf	6
 12049  1DDF  3002               	movlw	2	; select bank4/5
 12050  1DE0  0087               	movwf	7
 12051  1DE1  0DAE               	rlf	??_setLoad_Exceptions,f
 12052  1DE2  0DAE               	rlf	??_setLoad_Exceptions,f
 12053  1DE3  0DAE               	rlf	??_setLoad_Exceptions,f
 12054  1DE4  0801               	movf	1,w
 12055  1DE5  062E               	xorwf	??_setLoad_Exceptions,w
 12056  1DE6  39F7               	andlw	-9
 12057  1DE7  062E               	xorwf	??_setLoad_Exceptions,w
 12058  1DE8  0081               	movwf	1
 12059                           
 12060                           ;OverLoad_B1.c: 235: Load->ErrorStatus = command;
 12061  1DE9  082F               	movf	setLoad_Exceptions@command,w
 12062  1DEA  00AE               	movwf	??_setLoad_Exceptions
 12063  1DEB  087B               	movf	_Load,w
 12064  1DEC  3E05               	addlw	5
 12065  1DED  0086               	movwf	6
 12066  1DEE  3002               	movlw	2	; select bank4/5
 12067  1DEF  0087               	movwf	7
 12068  1DF0  082E               	movf	??_setLoad_Exceptions,w
 12069  1DF1  0081               	movwf	1
 12070                           
 12071                           ;OverLoad_B1.c: 237: if (command) {
 12072  1DF2  082F               	movf	setLoad_Exceptions@command,w
 12073  1DF3  1903               	btfsc	3,2
 12074  1DF4  2DF9               	goto	l1856
 12075                           
 12076                           ;OverLoad_B1.c: 238: DimmerLights_Exceptions(2);
 12077  1DF5  3002               	movlw	2
 12078  1DF6  3192  2281  319D   	fcall	_DimmerLights_Exceptions
 12079  1DF9                     l1856:	
 12080                           
 12081                           ;OverLoad_B1.c: 242: }
 12082                           ;OverLoad_B1.c: 243: setLED(99, command + 10);
 12083  1DF9  0020               	movlb	0	; select bank0
 12084  1DFA  082F               	movf	setLoad_Exceptions@command,w
 12085  1DFB  3E0A               	addlw	10
 12086  1DFC  00AE               	movwf	??_setLoad_Exceptions
 12087  1DFD  082E               	movf	??_setLoad_Exceptions,w
 12088  1DFE  00A2               	movwf	setLED@command
 12089  1DFF  3063               	movlw	99
 12090  1E00  3191  21C2  319D   	fcall	_setLED
 12091                           
 12092                           ;OverLoad_B1.c: 245: setSw_Enable((~command) & 0x01);
 12093  1E03  0020               	movlb	0	; select bank0
 12094  1E04  092F               	comf	setLoad_Exceptions@command,w
 12095  1E05  3901               	andlw	1
 12096  1E06  3199  2125  319D   	fcall	_setSw_Enable
 12097                           
 12098                           ;OverLoad_B1.c: 247: setRF_Enable(1, (~command) & 0x01);
 12099  1E09  0020               	movlb	0	; select bank0
 12100  1E0A  092F               	comf	setLoad_Exceptions@command,w
 12101  1E0B  3901               	andlw	1
 12102  1E0C  00AE               	movwf	??_setLoad_Exceptions
 12103  1E0D  082E               	movf	??_setLoad_Exceptions,w
 12104  1E0E  00A2               	movwf	setRF_Enable@command
 12105  1E0F  3001               	movlw	1
 12106  1E10  319A  22E4         	fcall	_setRF_Enable
 12107  1E12  0008               	return
 12108  1E13                     __end_of_setLoad_Exceptions:	
 12109                           
 12110                           	psect	text59
 12111  1925                     __ptext59:	
 12112 ;; *************** function _setSw_Enable *****************
 12113 ;; Defined at:
 12114 ;;		line 85 in file "../src/Switch_B1.c"
 12115 ;; Parameters:    Size  Location     Type
 12116 ;;  command         1    wreg     unsigned char 
 12117 ;; Auto vars:     Size  Location     Type
 12118 ;;  command         1    2[BANK0 ] unsigned char 
 12119 ;; Return value:  Size  Location     Type
 12120 ;;		None               void
 12121 ;; Registers used:
 12122 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12123 ;; Tracked objects:
 12124 ;;		On entry : 0/0
 12125 ;;		On exit  : 0/0
 12126 ;;		Unchanged: 0/0
 12127 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12128 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12129 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12130 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12131 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12132 ;;Total ram usage:        1 bytes
 12133 ;; Hardware stack levels used:    1
 12134 ;; Hardware stack levels required when called:    6
 12135 ;; This function calls:
 12136 ;;		_SwPointSelect
 12137 ;; This function is called by:
 12138 ;;		_my_Main
 12139 ;;		_setLoad_Exceptions
 12140 ;;		_setOverTemp_Exceptions
 12141 ;; This function uses a non-reentrant model
 12142 ;;
 12143                           
 12144                           
 12145                           ;psect for function _setSw_Enable
 12146  1925                     _setSw_Enable:	
 12147                           
 12148                           ;incstack = 0
 12149                           ; Regs used in _setSw_Enable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12150                           ;setSw_Enable@command stored from wreg
 12151  1925  0020               	movlb	0	; select bank0
 12152  1926  00A2               	movwf	setSw_Enable@command
 12153                           
 12154                           ;Switch_B1.c: 88: SwPointSelect(1);
 12155  1927  3001               	movlw	1
 12156  1928  31A7  2739  3199   	fcall	_SwPointSelect
 12157                           
 12158                           ;Switch_B1.c: 89: Sw->Enable = command;
 12159  192B  087A               	movf	_Sw,w
 12160  192C  0086               	movwf	6
 12161  192D  3001               	movlw	1	; select bank2/3
 12162  192E  0087               	movwf	7
 12163  192F  0020               	movlb	0	; select bank0
 12164  1930  0822               	movf	setSw_Enable@command,w
 12165  1931  1001               	bcf	1,0
 12166  1932  1D03               	skipz
 12167  1933  1401               	bsf	1,0
 12168                           
 12169                           ;Switch_B1.c: 93: SwPointSelect(2);
 12170  1934  3002               	movlw	2
 12171  1935  31A7  2739         	fcall	_SwPointSelect
 12172                           
 12173                           ;Switch_B1.c: 94: Sw->Enable = command;
 12174  1937  087A               	movf	_Sw,w
 12175  1938  0086               	movwf	6
 12176  1939  3001               	movlw	1	; select bank2/3
 12177  193A  0087               	movwf	7
 12178  193B  0020               	movlb	0	; select bank0
 12179  193C  0822               	movf	setSw_Enable@command,w
 12180  193D  1001               	bcf	1,0
 12181  193E  1D03               	skipz
 12182  193F  1401               	bsf	1,0
 12183  1940  0008               	return
 12184  1941                     __end_of_setSw_Enable:	
 12185                           
 12186                           	psect	text60
 12187  1AE4                     __ptext60:	
 12188 ;; *************** function _setRF_Enable *****************
 12189 ;; Defined at:
 12190 ;;		line 202 in file "../src/RF_Control_B1.c"
 12191 ;; Parameters:    Size  Location     Type
 12192 ;;  rf              1    wreg     unsigned char 
 12193 ;;  command         1    2[BANK0 ] unsigned char 
 12194 ;; Auto vars:     Size  Location     Type
 12195 ;;  rf              1    3[BANK0 ] unsigned char 
 12196 ;; Return value:  Size  Location     Type
 12197 ;;		None               void
 12198 ;; Registers used:
 12199 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12200 ;; Tracked objects:
 12201 ;;		On entry : 0/0
 12202 ;;		On exit  : 0/0
 12203 ;;		Unchanged: 0/0
 12204 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12205 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12206 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12207 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12208 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12209 ;;Total ram usage:        2 bytes
 12210 ;; Hardware stack levels used:    1
 12211 ;; Hardware stack levels required when called:    6
 12212 ;; This function calls:
 12213 ;;		_RfPointSelect
 12214 ;; This function is called by:
 12215 ;;		_my_Main
 12216 ;;		_setLoad_Exceptions
 12217 ;;		_setOverTemp_Exceptions
 12218 ;; This function uses a non-reentrant model
 12219 ;;
 12220                           
 12221                           
 12222                           ;psect for function _setRF_Enable
 12223  1AE4                     _setRF_Enable:	
 12224                           
 12225                           ;incstack = 0
 12226                           ; Regs used in _setRF_Enable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12227                           ;setRF_Enable@rf stored from wreg
 12228  1AE4  0020               	movlb	0	; select bank0
 12229  1AE5  00A3               	movwf	setRF_Enable@rf
 12230                           
 12231                           ;RF_Control_B1.c: 203: RfPointSelect(rf);
 12232  1AE6  0823               	movf	setRF_Enable@rf,w
 12233  1AE7  31A6  263F         	fcall	_RfPointSelect
 12234                           
 12235                           ;RF_Control_B1.c: 204: RF->Enable = command;
 12236  1AE9  0021               	movlb	1	; select bank1
 12237  1AEA  083F               	movf	_RF^(0+128),w
 12238  1AEB  0086               	movwf	6
 12239  1AEC  0187               	clrf	7
 12240  1AED  0020               	movlb	0	; select bank0
 12241  1AEE  0822               	movf	setRF_Enable@command,w
 12242  1AEF  1001               	bcf	1,0
 12243  1AF0  1D03               	skipz
 12244  1AF1  1401               	bsf	1,0
 12245                           
 12246                           ;RF_Control_B1.c: 205: RF->Learn = 0;
 12247  1AF2  0021               	movlb	1	; select bank1
 12248  1AF3  083F               	movf	_RF^(0+128),w
 12249  1AF4  0086               	movwf	6
 12250  1AF5  0187               	clrf	7
 12251  1AF6  1301               	bcf	1,6
 12252                           
 12253                           ;RF_Control_B1.c: 206: RF->TransceiveGO = 0;
 12254  1AF7  083F               	movf	_RF^(0+128),w
 12255  1AF8  0086               	movwf	6
 12256  1AF9  0187               	clrf	7
 12257  1AFA  1101               	bcf	1,2
 12258                           
 12259                           ;RF_Control_B1.c: 207: RF->RxStatus = 0;
 12260  1AFB  083F               	movf	_RF^(0+128),w
 12261  1AFC  0086               	movwf	6
 12262  1AFD  0187               	clrf	7
 12263  1AFE  1181               	bcf	1,3
 12264                           
 12265                           ;RF_Control_B1.c: 208: RF->ReceiveGO = 0;
 12266  1AFF  083F               	movf	_RF^(0+128),w
 12267  1B00  0086               	movwf	6
 12268  1B01  0187               	clrf	7
 12269  1B02  1081               	bcf	1,1
 12270                           
 12271                           ;RF_Control_B1.c: 209: RF->DebounceTime = 0;
 12272  1B03  083F               	movf	_RF^(0+128),w
 12273  1B04  3E04               	addlw	4
 12274  1B05  0086               	movwf	6
 12275  1B06  0187               	clrf	7
 12276  1B07  0181               	clrf	1
 12277                           
 12278                           ;RF_Control_B1.c: 210: RF->Debounce = 0;
 12279  1B08  083F               	movf	_RF^(0+128),w
 12280  1B09  0086               	movwf	6
 12281  1B0A  0187               	clrf	7
 12282  1B0B  1281               	bcf	1,5
 12283  1B0C  0008               	return
 12284  1B0D                     __end_of_setRF_Enable:	
 12285                           
 12286                           	psect	text61
 12287  1281                     __ptext61:	
 12288 ;; *************** function _DimmerLights_Exceptions *****************
 12289 ;; Defined at:
 12290 ;;		line 513 in file "../src/Dimmer_B1.c"
 12291 ;; Parameters:    Size  Location     Type
 12292 ;;  status          1    wreg     unsigned char 
 12293 ;; Auto vars:     Size  Location     Type
 12294 ;;  status          1   13[BANK0 ] unsigned char 
 12295 ;; Return value:  Size  Location     Type
 12296 ;;		None               void
 12297 ;; Registers used:
 12298 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12299 ;; Tracked objects:
 12300 ;;		On entry : 0/0
 12301 ;;		On exit  : 0/0
 12302 ;;		Unchanged: 0/0
 12303 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12304 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12305 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12306 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12307 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12308 ;;Total ram usage:        1 bytes
 12309 ;; Hardware stack levels used:    1
 12310 ;; Hardware stack levels required when called:    8
 12311 ;; This function calls:
 12312 ;;		_getDimmerLights_StatusFlag
 12313 ;;		_setBuz
 12314 ;;		_setDimmerLights_ERROR
 12315 ;;		_setDimmerLights_TriggerERROR
 12316 ;; This function is called by:
 12317 ;;		_setLoad_Exceptions
 12318 ;;		_setOverTemp_Exceptions
 12319 ;; This function uses a non-reentrant model
 12320 ;;
 12321                           
 12322                           
 12323                           ;psect for function _DimmerLights_Exceptions
 12324  1281                     _DimmerLights_Exceptions:	
 12325                           
 12326                           ;incstack = 0
 12327                           ; Regs used in _DimmerLights_Exceptions: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 12328                           ;DimmerLights_Exceptions@status stored from wreg
 12329  1281  0020               	movlb	0	; select bank0
 12330  1282  00AD               	movwf	DimmerLights_Exceptions@status
 12331                           
 12332                           ;Dimmer_B1.c: 514: if (status == 1) {
 12333  1283  082D               	movf	DimmerLights_Exceptions@status,w
 12334  1284  3A01               	xorlw	1
 12335  1285  1D03               	skipz
 12336  1286  2A97               	goto	l6734
 12337                           
 12338                           ;Dimmer_B1.c: 515: if (getDimmerLights_StatusFlag() == 1) {
 12339  1287  31A6  26DE  3192   	fcall	_getDimmerLights_StatusFlag
 12340  128A  3A01               	xorlw	1
 12341  128B  1D03               	skipz
 12342  128C  2AAF               	goto	l6740
 12343                           
 12344                           ;Dimmer_B1.c: 516: setBuz(10, 300);
 12345  128D  302C               	movlw	44
 12346  128E  0020               	movlb	0	; select bank0
 12347  128F  00A9               	movwf	setBuz@time
 12348  1290  3001               	movlw	1
 12349  1291  00AA               	movwf	setBuz@time+1
 12350  1292  300A               	movlw	10
 12351  1293  3189  2137  3192   	fcall	_setBuz
 12352  1296  2AAF               	goto	l6740
 12353  1297                     l6734:	
 12354                           ;Dimmer_B1.c: 528: } else if (status == 2)
 12355                           
 12356                           ;Dimmer_B1.c: 523: setDimmerLights_ERROR(2);
 12357                           
 12358                           ;Dimmer_B1.c: 517: }
 12359                           ;Dimmer_B1.c: 520: setDimmerLights_ERROR(1);
 12360                           
 12361  1297  0020               	movlb	0	; select bank0
 12362  1298  082D               	movf	DimmerLights_Exceptions@status,w
 12363  1299  3A02               	xorlw	2
 12364  129A  1D03               	skipz
 12365  129B  2AAA               	goto	l6738
 12366                           
 12367                           ;Dimmer_B1.c: 529: {
 12368                           ;Dimmer_B1.c: 530: setBuz(5, 300);
 12369  129C  302C               	movlw	44
 12370  129D  00A9               	movwf	setBuz@time
 12371  129E  3001               	movlw	1
 12372  129F  00AA               	movwf	setBuz@time+1
 12373  12A0  3005               	movlw	5
 12374  12A1  3189  2137  3192   	fcall	_setBuz
 12375                           
 12376                           ;Dimmer_B1.c: 531: setDimmerLights_ERROR(Dimmer->Load);
 12377  12A4  0021               	movlb	1	; select bank1
 12378  12A5  0A3A               	incf	_Dimmer^(0+128),w
 12379  12A6  0086               	movwf	6
 12380  12A7  0187               	clrf	7
 12381  12A8  0801               	movf	1,w
 12382  12A9  2AB4               	goto	L11
 12383  12AA                     l6738:	
 12384                           ;Dimmer_B1.c: 532: } else if (status == 3)
 12385                           
 12386  12AA  0020               	movlb	0	; select bank0
 12387  12AB  082D               	movf	DimmerLights_Exceptions@status,w
 12388  12AC  3A03               	xorlw	3
 12389  12AD  1D03               	skipz
 12390  12AE  2AB7               	goto	l930
 12391  12AF                     l6740:	
 12392                           
 12393                           ;Dimmer_B1.c: 533: {
 12394                           ;Dimmer_B1.c: 535: setDimmerLights_ERROR(1);
 12395  12AF  3001               	movlw	1
 12396  12B0  3190  20B3  3192   	fcall	_setDimmerLights_ERROR
 12397                           
 12398                           ;Dimmer_B1.c: 538: setDimmerLights_ERROR(2);
 12399  12B3  3002               	movlw	2
 12400  12B4                     L11:	
 12401  12B4  3190  20B3  3192   	fcall	_setDimmerLights_ERROR
 12402  12B7                     l930:	
 12403                           
 12404                           ;Dimmer_B1.c: 543: }
 12405                           ;Dimmer_B1.c: 546: setDimmerLights_TriggerERROR(1, 0);
 12406  12B7  0020               	movlb	0	; select bank0
 12407  12B8  01A2               	clrf	setDimmerLights_TriggerERROR@command
 12408  12B9  3001               	movlw	1
 12409  12BA  319B  2337  3192   	fcall	_setDimmerLights_TriggerERROR
 12410                           
 12411                           ;Dimmer_B1.c: 549: setDimmerLights_TriggerERROR(2, 0);
 12412  12BD  0020               	movlb	0	; select bank0
 12413  12BE  01A2               	clrf	setDimmerLights_TriggerERROR@command
 12414  12BF  3002               	movlw	2
 12415  12C0  319B  2337  3192   	fcall	_setDimmerLights_TriggerERROR
 12416                           
 12417                           ;Dimmer_B1.c: 555: if (myMain->SelfTest == 0) {
 12418  12C3  0021               	movlb	1	; select bank1
 12419  12C4  086D               	movf	_myMain^(0+128),w
 12420  12C5  0086               	movwf	6
 12421  12C6  3001               	movlw	1	; select bank2/3
 12422  12C7  0087               	movwf	7
 12423  12C8  1B01               	btfsc	1,6
 12424  12C9  0008               	return
 12425                           
 12426                           ;Dimmer_B1.c: 556: myMain->i = 0;
 12427  12CA  086D               	movf	_myMain^(0+128),w
 12428  12CB  3E0E               	addlw	14
 12429  12CC  0086               	movwf	6
 12430  12CD  3001               	movlw	1	; select bank2/3
 12431  12CE  0087               	movwf	7
 12432  12CF  1001               	bcf	1,0
 12433                           
 12434                           ;Dimmer_B1.c: 557: myMain->j = 0;
 12435  12D0  086D               	movf	_myMain^(0+128),w
 12436  12D1  3E0E               	addlw	14
 12437  12D2  0086               	movwf	6
 12438  12D3  3001               	movlw	1	; select bank2/3
 12439  12D4  0087               	movwf	7
 12440  12D5  1081               	bcf	1,1
 12441                           
 12442                           ;Dimmer_B1.c: 558: myMain->k = 1;
 12443  12D6  086D               	movf	_myMain^(0+128),w
 12444  12D7  3E0E               	addlw	14
 12445  12D8  0086               	movwf	6
 12446  12D9  3001               	movlw	1	; select bank2/3
 12447  12DA  0087               	movwf	7
 12448  12DB  1501               	bsf	1,2
 12449                           
 12450                           ;Dimmer_B1.c: 559: myMain->Count2 = 0;
 12451  12DC  086D               	movf	_myMain^(0+128),w
 12452  12DD  3E07               	addlw	7
 12453  12DE  0086               	movwf	6
 12454  12DF  3001               	movlw	1	; select bank2/3
 12455  12E0  0087               	movwf	7
 12456  12E1  3000               	movlw	0
 12457  12E2  3FC0               	movwi [0]fsr1
 12458  12E3  3FC1               	movwi [1]fsr1
 12459  12E4  0008               	return
 12460  12E5                     __end_of_DimmerLights_Exceptions:	
 12461                           
 12462                           	psect	text62
 12463  1B37                     __ptext62:	
 12464 ;; *************** function _setDimmerLights_TriggerERROR *****************
 12465 ;; Defined at:
 12466 ;;		line 582 in file "../src/Dimmer_B1.c"
 12467 ;; Parameters:    Size  Location     Type
 12468 ;;  lights          1    wreg     unsigned char 
 12469 ;;  command         1    2[BANK0 ] unsigned char 
 12470 ;; Auto vars:     Size  Location     Type
 12471 ;;  lights          1    3[BANK0 ] unsigned char 
 12472 ;; Return value:  Size  Location     Type
 12473 ;;		None               void
 12474 ;; Registers used:
 12475 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12476 ;; Tracked objects:
 12477 ;;		On entry : 0/0
 12478 ;;		On exit  : 0/0
 12479 ;;		Unchanged: 0/0
 12480 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12481 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12482 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12483 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12484 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12485 ;;Total ram usage:        2 bytes
 12486 ;; Hardware stack levels used:    1
 12487 ;; Hardware stack levels required when called:    6
 12488 ;; This function calls:
 12489 ;;		_DimmerLightsPointSelect
 12490 ;; This function is called by:
 12491 ;;		_DimmerLights_Exceptions
 12492 ;; This function uses a non-reentrant model
 12493 ;;
 12494                           
 12495                           
 12496                           ;psect for function _setDimmerLights_TriggerERROR
 12497  1B37                     _setDimmerLights_TriggerERROR:	
 12498                           
 12499                           ;incstack = 0
 12500                           ; Regs used in _setDimmerLights_TriggerERROR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath
      +                          +cstack]
 12501                           ;setDimmerLights_TriggerERROR@lights stored from wreg
 12502  1B37  0020               	movlb	0	; select bank0
 12503  1B38  00A3               	movwf	setDimmerLights_TriggerERROR@lights
 12504                           
 12505                           ;Dimmer_B1.c: 584: DimmerLightsPointSelect(lights);
 12506  1B39  0823               	movf	setDimmerLights_TriggerERROR@lights,w
 12507  1B3A  31A7  2712         	fcall	_DimmerLightsPointSelect
 12508                           
 12509                           ;Dimmer_B1.c: 585: DimmerLights->Trigger = command;
 12510  1B3C  0878               	movf	_DimmerLights,w
 12511  1B3D  3E08               	addlw	8
 12512  1B3E  0086               	movwf	6
 12513  1B3F  3001               	movlw	1	; select bank2/3
 12514  1B40  0087               	movwf	7
 12515  1B41  0020               	movlb	0	; select bank0
 12516  1B42  0822               	movf	setDimmerLights_TriggerERROR@command,w
 12517  1B43  1101               	bcf	1,2
 12518  1B44  1D03               	skipz
 12519  1B45  1501               	bsf	1,2
 12520                           
 12521                           ;Dimmer_B1.c: 586: DimmerLights->Switch = command;
 12522  1B46  0878               	movf	_DimmerLights,w
 12523  1B47  3E08               	addlw	8
 12524  1B48  0086               	movwf	6
 12525  1B49  3001               	movlw	1	; select bank2/3
 12526  1B4A  0087               	movwf	7
 12527  1B4B  0822               	movf	setDimmerLights_TriggerERROR@command,w
 12528  1B4C  1081               	bcf	1,1
 12529  1B4D  1D03               	skipz
 12530  1B4E  1481               	bsf	1,1
 12531                           
 12532                           ;Dimmer_B1.c: 587: DimmerLights->TriggerAdj = command;
 12533  1B4F  0878               	movf	_DimmerLights,w
 12534  1B50  3E08               	addlw	8
 12535  1B51  0086               	movwf	6
 12536  1B52  3001               	movlw	1	; select bank2/3
 12537  1B53  0087               	movwf	7
 12538  1B54  0822               	movf	setDimmerLights_TriggerERROR@command,w
 12539  1B55  1201               	bcf	1,4
 12540  1B56  1D03               	skipz
 12541  1B57  1601               	bsf	1,4
 12542                           
 12543                           ;Dimmer_B1.c: 588: DimmerLights->AdjGo = command;
 12544  1B58  0878               	movf	_DimmerLights,w
 12545  1B59  3E08               	addlw	8
 12546  1B5A  0086               	movwf	6
 12547  1B5B  3001               	movlw	1	; select bank2/3
 12548  1B5C  0087               	movwf	7
 12549  1B5D  0822               	movf	setDimmerLights_TriggerERROR@command,w
 12550  1B5E  1181               	bcf	1,3
 12551  1B5F  1D03               	skipz
 12552  1B60  1581               	bsf	1,3
 12553  1B61  0008               	return
 12554  1B62                     __end_of_setDimmerLights_TriggerERROR:	
 12555                           
 12556                           	psect	text63
 12557  10B3                     __ptext63:	
 12558 ;; *************** function _setDimmerLights_ERROR *****************
 12559 ;; Defined at:
 12560 ;;		line 564 in file "../src/Dimmer_B1.c"
 12561 ;; Parameters:    Size  Location     Type
 12562 ;;  lights          1    wreg     unsigned char 
 12563 ;; Auto vars:     Size  Location     Type
 12564 ;;  lights          1    5[BANK0 ] unsigned char 
 12565 ;; Return value:  Size  Location     Type
 12566 ;;		None               void
 12567 ;; Registers used:
 12568 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12569 ;; Tracked objects:
 12570 ;;		On entry : 0/0
 12571 ;;		On exit  : 0/0
 12572 ;;		Unchanged: 0/0
 12573 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12574 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12575 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12576 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12577 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12578 ;;Total ram usage:        2 bytes
 12579 ;; Hardware stack levels used:    1
 12580 ;; Hardware stack levels required when called:    7
 12581 ;; This function calls:
 12582 ;;		_DimmerLightsPointSelect
 12583 ;;		_setLED
 12584 ;;		_setLoad_StatusOff
 12585 ;;		_setRFSW_Status
 12586 ;;		_setSw_Status
 12587 ;; This function is called by:
 12588 ;;		_DimmerLights_Exceptions
 12589 ;; This function uses a non-reentrant model
 12590 ;;
 12591                           
 12592                           
 12593                           ;psect for function _setDimmerLights_ERROR
 12594  10B3                     _setDimmerLights_ERROR:	
 12595                           
 12596                           ;incstack = 0
 12597                           ; Regs used in _setDimmerLights_ERROR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 12598                           ;setDimmerLights_ERROR@lights stored from wreg
 12599  10B3  0020               	movlb	0	; select bank0
 12600  10B4  00A5               	movwf	setDimmerLights_ERROR@lights
 12601                           
 12602                           ;Dimmer_B1.c: 565: DimmerLightsPointSelect(lights);
 12603  10B5  0825               	movf	setDimmerLights_ERROR@lights,w
 12604  10B6  31A7  2712  3190   	fcall	_DimmerLightsPointSelect
 12605                           
 12606                           ;Dimmer_B1.c: 566: if (DimmerLights->Status == 1) {
 12607  10B9  0878               	movf	_DimmerLights,w
 12608  10BA  0086               	movwf	6
 12609  10BB  3001               	movlw	1	; select bank2/3
 12610  10BC  0087               	movwf	7
 12611  10BD  1E81               	btfss	1,5
 12612  10BE  0008               	return
 12613                           
 12614                           ;Dimmer_B1.c: 568: DimmerLights->Signal = 0;
 12615  10BF  0878               	movf	_DimmerLights,w
 12616  10C0  0086               	movwf	6
 12617  10C1  3001               	movlw	1	; select bank2/3
 12618  10C2  0087               	movwf	7
 12619  10C3  1081               	bcf	1,1
 12620                           
 12621                           ;Dimmer_B1.c: 569: DimmerLights->AdjFlag = 0;
 12622  10C4  0878               	movf	_DimmerLights,w
 12623  10C5  0086               	movwf	6
 12624  10C6  3001               	movlw	1	; select bank2/3
 12625  10C7  0087               	movwf	7
 12626  10C8  1181               	bcf	1,3
 12627                           
 12628                           ;Dimmer_B1.c: 570: DimmerLights->AdjStatus = 0;
 12629  10C9  0878               	movf	_DimmerLights,w
 12630  10CA  0086               	movwf	6
 12631  10CB  3001               	movlw	1	; select bank2/3
 12632  10CC  0087               	movwf	7
 12633  10CD  1201               	bcf	1,4
 12634                           
 12635                           ;Dimmer_B1.c: 571: DimmerLights->StatusFlag = 0;
 12636  10CE  0878               	movf	_DimmerLights,w
 12637  10CF  0086               	movwf	6
 12638  10D0  3001               	movlw	1	; select bank2/3
 12639  10D1  0087               	movwf	7
 12640  10D2  1301               	bcf	1,6
 12641                           
 12642                           ;Dimmer_B1.c: 572: DimmerLights->DimmingTimeValue = 7;
 12643  10D3  3007               	movlw	7
 12644  10D4  0020               	movlb	0	; select bank0
 12645  10D5  00A4               	movwf	??_setDimmerLights_ERROR
 12646  10D6  0878               	movf	_DimmerLights,w
 12647  10D7  3E02               	addlw	2
 12648  10D8  0086               	movwf	6
 12649  10D9  3001               	movlw	1	; select bank2/3
 12650  10DA  0087               	movwf	7
 12651  10DB  0824               	movf	??_setDimmerLights_ERROR,w
 12652  10DC  0081               	movwf	1
 12653                           
 12654                           ;Dimmer_B1.c: 573: DimmerLights->DimmingValue = DimmerLights->MinimumValue;
 12655  10DD  0878               	movf	_DimmerLights,w
 12656  10DE  3E06               	addlw	6
 12657  10DF  0086               	movwf	6
 12658  10E0  3001               	movlw	1	; select bank2/3
 12659  10E1  0087               	movwf	7
 12660  10E2  0801               	movf	1,w
 12661  10E3  00A4               	movwf	??_setDimmerLights_ERROR
 12662  10E4  0878               	movf	_DimmerLights,w
 12663  10E5  3E04               	addlw	4
 12664  10E6  0086               	movwf	6
 12665  10E7  3001               	movlw	1	; select bank2/3
 12666  10E8  0087               	movwf	7
 12667  10E9  0824               	movf	??_setDimmerLights_ERROR,w
 12668  10EA  0081               	movwf	1
 12669                           
 12670                           ;Dimmer_B1.c: 574: Dimmer->Detect = 1;
 12671  10EB  0021               	movlb	1	; select bank1
 12672  10EC  083A               	movf	_Dimmer^(0+128),w
 12673  10ED  0086               	movwf	6
 12674  10EE  0187               	clrf	7
 12675  10EF  1401               	bsf	1,0
 12676                           
 12677                           ;Dimmer_B1.c: 575: setLoad_StatusOff(lights, 1);
 12678  10F0  0020               	movlb	0	; select bank0
 12679  10F1  01A0               	clrf	setLoad_StatusOff@command
 12680  10F2  0AA0               	incf	setLoad_StatusOff@command,f
 12681  10F3  0825               	movf	setDimmerLights_ERROR@lights,w
 12682  10F4  319C  241B  3190   	fcall	_setLoad_StatusOff
 12683                           
 12684                           ;Dimmer_B1.c: 576: setLED(lights, 1);
 12685  10F7  0020               	movlb	0	; select bank0
 12686  10F8  01A2               	clrf	setLED@command
 12687  10F9  0AA2               	incf	setLED@command,f
 12688  10FA  0825               	movf	setDimmerLights_ERROR@lights,w
 12689  10FB  3191  21C2  3190   	fcall	_setLED
 12690                           
 12691                           ;Dimmer_B1.c: 577: setSw_Status(lights, 0);
 12692  10FE  0020               	movlb	0	; select bank0
 12693  10FF  01A2               	clrf	setSw_Status@command
 12694  1100  0825               	movf	setDimmerLights_ERROR@lights,w
 12695  1101  31A6  2630  3190   	fcall	_setSw_Status
 12696                           
 12697                           ;Dimmer_B1.c: 578: setRFSW_Status(lights, 0);
 12698  1104  0020               	movlb	0	; select bank0
 12699  1105  01A2               	clrf	setRFSW_Status@command
 12700  1106  0825               	movf	setDimmerLights_ERROR@lights,w
 12701  1107  31A6  2621         	fcall	_setRFSW_Status
 12702  1109  0008               	return
 12703  110A                     __end_of_setDimmerLights_ERROR:	
 12704                           
 12705                           	psect	text64
 12706  268D                     __ptext64:	
 12707 ;; *************** function _setDimmerLights_Clear *****************
 12708 ;; Defined at:
 12709 ;;		line 717 in file "../src/Dimmer_B1.c"
 12710 ;; Parameters:    Size  Location     Type
 12711 ;;  lights          1    wreg     unsigned char 
 12712 ;;  command         1    2[BANK0 ] unsigned char 
 12713 ;; Auto vars:     Size  Location     Type
 12714 ;;  lights          1    3[BANK0 ] unsigned char 
 12715 ;; Return value:  Size  Location     Type
 12716 ;;		None               void
 12717 ;; Registers used:
 12718 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12719 ;; Tracked objects:
 12720 ;;		On entry : 0/0
 12721 ;;		On exit  : 0/0
 12722 ;;		Unchanged: 0/0
 12723 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12724 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12725 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12726 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12727 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12728 ;;Total ram usage:        2 bytes
 12729 ;; Hardware stack levels used:    1
 12730 ;; Hardware stack levels required when called:    6
 12731 ;; This function calls:
 12732 ;;		_DimmerLightsPointSelect
 12733 ;; This function is called by:
 12734 ;;		_Load_Main
 12735 ;; This function uses a non-reentrant model
 12736 ;;
 12737                           
 12738                           
 12739                           ;psect for function _setDimmerLights_Clear
 12740  268D                     _setDimmerLights_Clear:	
 12741                           
 12742                           ;incstack = 0
 12743                           ; Regs used in _setDimmerLights_Clear: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 12744                           ;setDimmerLights_Clear@lights stored from wreg
 12745  268D  0020               	movlb	0	; select bank0
 12746  268E  00A3               	movwf	setDimmerLights_Clear@lights
 12747                           
 12748                           ;Dimmer_B1.c: 719: DimmerLightsPointSelect(lights);
 12749  268F  0823               	movf	setDimmerLights_Clear@lights,w
 12750  2690  31A7  2712         	fcall	_DimmerLightsPointSelect
 12751                           
 12752                           ;Dimmer_B1.c: 720: DimmerLights->Clear = command;
 12753  2692  0878               	movf	_DimmerLights,w
 12754  2693  3E09               	addlw	9
 12755  2694  0086               	movwf	6
 12756  2695  3001               	movlw	1	; select bank2/3
 12757  2696  0087               	movwf	7
 12758  2697  0020               	movlb	0	; select bank0
 12759  2698  0822               	movf	setDimmerLights_Clear@command,w
 12760  2699  1101               	bcf	1,2
 12761  269A  1D03               	skipz
 12762  269B  1501               	bsf	1,2
 12763  269C  0008               	return
 12764  269D                     __end_of_setDimmerLights_Clear:	
 12765                           
 12766                           	psect	text65
 12767  252F                     __ptext65:	
 12768 ;; *************** function _getTemp_Safe *****************
 12769 ;; Defined at:
 12770 ;;		line 26 in file "../src/OverTemperature_B1.c"
 12771 ;; Parameters:    Size  Location     Type
 12772 ;;		None
 12773 ;; Auto vars:     Size  Location     Type
 12774 ;;		None
 12775 ;; Return value:  Size  Location     Type
 12776 ;;                  1    wreg      unsigned char 
 12777 ;; Registers used:
 12778 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 12779 ;; Tracked objects:
 12780 ;;		On entry : 0/0
 12781 ;;		On exit  : 0/0
 12782 ;;		Unchanged: 0/0
 12783 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12784 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12785 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12786 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12787 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12788 ;;Total ram usage:        0 bytes
 12789 ;; Hardware stack levels used:    1
 12790 ;; Hardware stack levels required when called:    5
 12791 ;; This function calls:
 12792 ;;		Nothing
 12793 ;; This function is called by:
 12794 ;;		_Load_Main
 12795 ;; This function uses a non-reentrant model
 12796 ;;
 12797                           
 12798                           
 12799                           ;psect for function _getTemp_Safe
 12800  252F                     _getTemp_Safe:	
 12801                           
 12802                           ;OverTemperature_B1.c: 28: return Temp->Safe;
 12803                           
 12804                           ;incstack = 0
 12805                           ; Regs used in _getTemp_Safe: [wreg+fsr1l+fsr1h+status,2+status,0]
 12806  252F  0021               	movlb	1	; select bank1
 12807  2530  0844               	movf	_Temp^(0+128),w
 12808  2531  0086               	movwf	6
 12809  2532  3001               	movlw	1	; select bank2/3
 12810  2533  0087               	movwf	7
 12811  2534  0E01               	swapf	1,w
 12812  2535  3901               	andlw	1
 12813  2536  0008               	return
 12814  2537                     __end_of_getTemp_Safe:	
 12815                           
 12816                           	psect	text66
 12817  197A                     __ptext66:	
 12818 ;; *************** function ___wmul *****************
 12819 ;; Defined at:
 12820 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul16.c"
 12821 ;; Parameters:    Size  Location     Type
 12822 ;;  multiplier      2    0[BANK0 ] unsigned int 
 12823 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 12824 ;; Auto vars:     Size  Location     Type
 12825 ;;  product         2    4[BANK0 ] unsigned int 
 12826 ;; Return value:  Size  Location     Type
 12827 ;;                  2    0[BANK0 ] unsigned int 
 12828 ;; Registers used:
 12829 ;;		wreg, status,2, status,0
 12830 ;; Tracked objects:
 12831 ;;		On entry : 0/0
 12832 ;;		On exit  : 0/0
 12833 ;;		Unchanged: 0/0
 12834 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12835 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12836 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12837 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12838 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12839 ;;Total ram usage:        6 bytes
 12840 ;; Hardware stack levels used:    1
 12841 ;; Hardware stack levels required when called:    5
 12842 ;; This function calls:
 12843 ;;		Nothing
 12844 ;; This function is called by:
 12845 ;;		_Load_Main
 12846 ;; This function uses a non-reentrant model
 12847 ;;
 12848                           
 12849                           
 12850                           ;psect for function ___wmul
 12851  197A                     ___wmul:	
 12852                           
 12853                           ;incstack = 0
 12854                           ; Regs used in ___wmul: [wreg+status,2+status,0]
 12855  197A  0020               	movlb	0	; select bank0
 12856  197B  01A4               	clrf	___wmul@product
 12857  197C  01A5               	clrf	___wmul@product+1
 12858  197D                     l7892:	
 12859  197D  1C20               	btfss	___wmul@multiplier,0
 12860  197E  2983               	goto	l3119
 12861  197F  0822               	movf	___wmul@multiplicand,w
 12862  1980  07A4               	addwf	___wmul@product,f
 12863  1981  0823               	movf	___wmul@multiplicand+1,w
 12864  1982  3DA5               	addwfc	___wmul@product+1,f
 12865  1983                     l3119:	
 12866  1983  3001               	movlw	1
 12867  1984                     u7175:	
 12868  1984  35A2               	lslf	___wmul@multiplicand,f
 12869  1985  0DA3               	rlf	___wmul@multiplicand+1,f
 12870  1986  0B89               	decfsz	9,f
 12871  1987  2984               	goto	u7175
 12872  1988  3001               	movlw	1
 12873  1989                     u7185:	
 12874  1989  36A1               	lsrf	___wmul@multiplier+1,f
 12875  198A  0CA0               	rrf	___wmul@multiplier,f
 12876  198B  0B89               	decfsz	9,f
 12877  198C  2989               	goto	u7185
 12878  198D  0821               	movf	___wmul@multiplier+1,w
 12879  198E  0420               	iorwf	___wmul@multiplier,w
 12880  198F  1D03               	skipz
 12881  1990  297D               	goto	l7892
 12882  1991  0825               	movf	___wmul@product+1,w
 12883  1992  01A1               	clrf	?___wmul+1
 12884  1993  07A1               	addwf	?___wmul+1,f
 12885  1994  0824               	movf	___wmul@product,w
 12886  1995  01A0               	clrf	?___wmul
 12887  1996  07A0               	addwf	?___wmul,f
 12888  1997  0008               	return
 12889  1998                     __end_of___wmul:	
 12890                           
 12891                           	psect	text67
 12892  1D19                     __ptext67:	
 12893 ;; *************** function ___lwdiv *****************
 12894 ;; Defined at:
 12895 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\lwdiv.c"
 12896 ;; Parameters:    Size  Location     Type
 12897 ;;  divisor         2    0[BANK0 ] unsigned int 
 12898 ;;  dividend        2    2[BANK0 ] unsigned int 
 12899 ;; Auto vars:     Size  Location     Type
 12900 ;;  quotient        2    5[BANK0 ] unsigned int 
 12901 ;;  counter         1    7[BANK0 ] unsigned char 
 12902 ;; Return value:  Size  Location     Type
 12903 ;;                  2    0[BANK0 ] unsigned int 
 12904 ;; Registers used:
 12905 ;;		wreg, status,2, status,0
 12906 ;; Tracked objects:
 12907 ;;		On entry : 0/0
 12908 ;;		On exit  : 0/0
 12909 ;;		Unchanged: 0/0
 12910 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12911 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12912 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12913 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12914 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12915 ;;Total ram usage:        8 bytes
 12916 ;; Hardware stack levels used:    1
 12917 ;; Hardware stack levels required when called:    5
 12918 ;; This function calls:
 12919 ;;		Nothing
 12920 ;; This function is called by:
 12921 ;;		_Load_Main
 12922 ;; This function uses a non-reentrant model
 12923 ;;
 12924                           
 12925                           
 12926                           ;psect for function ___lwdiv
 12927  1D19                     ___lwdiv:	
 12928                           
 12929                           ;incstack = 0
 12930                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
 12931  1D19  0020               	movlb	0	; select bank0
 12932  1D1A  01A5               	clrf	___lwdiv@quotient
 12933  1D1B  01A6               	clrf	___lwdiv@quotient+1
 12934  1D1C  0821               	movf	___lwdiv@divisor+1,w
 12935  1D1D  0420               	iorwf	___lwdiv@divisor,w
 12936  1D1E  1903               	skipnz
 12937  1D1F  2D49               	goto	l7924
 12938  1D20  01A7               	clrf	___lwdiv@counter
 12939  1D21  0AA7               	incf	___lwdiv@counter,f
 12940  1D22                     l7912:	
 12941  1D22  1BA1               	btfsc	___lwdiv@divisor+1,7
 12942  1D23  2D2E               	goto	l7914
 12943  1D24  3001               	movlw	1
 12944  1D25                     u7215:	
 12945  1D25  35A0               	lslf	___lwdiv@divisor,f
 12946  1D26  0DA1               	rlf	___lwdiv@divisor+1,f
 12947  1D27  0B89               	decfsz	9,f
 12948  1D28  2D25               	goto	u7215
 12949  1D29  3001               	movlw	1
 12950  1D2A  00A4               	movwf	??___lwdiv
 12951  1D2B  0824               	movf	??___lwdiv,w
 12952  1D2C  07A7               	addwf	___lwdiv@counter,f
 12953  1D2D  2D22               	goto	l7912
 12954  1D2E                     l7914:	
 12955  1D2E  3001               	movlw	1
 12956  1D2F                     u7235:	
 12957  1D2F  35A5               	lslf	___lwdiv@quotient,f
 12958  1D30  0DA6               	rlf	___lwdiv@quotient+1,f
 12959  1D31  0B89               	decfsz	9,f
 12960  1D32  2D2F               	goto	u7235
 12961  1D33  0821               	movf	___lwdiv@divisor+1,w
 12962  1D34  0223               	subwf	___lwdiv@dividend+1,w
 12963  1D35  1D03               	skipz
 12964  1D36  2D39               	goto	u7245
 12965  1D37  0820               	movf	___lwdiv@divisor,w
 12966  1D38  0222               	subwf	___lwdiv@dividend,w
 12967  1D39                     u7245:	
 12968  1D39  1C03               	skipc
 12969  1D3A  2D40               	goto	l7920
 12970  1D3B  0820               	movf	___lwdiv@divisor,w
 12971  1D3C  02A2               	subwf	___lwdiv@dividend,f
 12972  1D3D  0821               	movf	___lwdiv@divisor+1,w
 12973  1D3E  3BA3               	subwfb	___lwdiv@dividend+1,f
 12974  1D3F  1425               	bsf	___lwdiv@quotient,0
 12975  1D40                     l7920:	
 12976  1D40  3001               	movlw	1
 12977  1D41                     u7255:	
 12978  1D41  36A1               	lsrf	___lwdiv@divisor+1,f
 12979  1D42  0CA0               	rrf	___lwdiv@divisor,f
 12980  1D43  0B89               	decfsz	9,f
 12981  1D44  2D41               	goto	u7255
 12982  1D45  3001               	movlw	1
 12983  1D46  02A7               	subwf	___lwdiv@counter,f
 12984  1D47  1D03               	btfss	3,2
 12985  1D48  2D2E               	goto	l7914
 12986  1D49                     l7924:	
 12987  1D49  0826               	movf	___lwdiv@quotient+1,w
 12988  1D4A  01A1               	clrf	?___lwdiv+1
 12989  1D4B  07A1               	addwf	?___lwdiv+1,f
 12990  1D4C  0825               	movf	___lwdiv@quotient,w
 12991  1D4D  01A0               	clrf	?___lwdiv
 12992  1D4E  07A0               	addwf	?___lwdiv,f
 12993  1D4F  0008               	return
 12994  1D50                     __end_of___lwdiv:	
 12995                           
 12996                           	psect	text68
 12997  25D2                     __ptext68:	
 12998 ;; *************** function _Load_Initialization *****************
 12999 ;; Defined at:
 13000 ;;		line 9 in file "../src/OverLoad_B1.c"
 13001 ;; Parameters:    Size  Location     Type
 13002 ;;		None
 13003 ;; Auto vars:     Size  Location     Type
 13004 ;;		None
 13005 ;; Return value:  Size  Location     Type
 13006 ;;		None               void
 13007 ;; Registers used:
 13008 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13009 ;; Tracked objects:
 13010 ;;		On entry : 0/0
 13011 ;;		On exit  : 0/0
 13012 ;;		Unchanged: 0/0
 13013 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13014 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13015 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13016 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13017 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13018 ;;Total ram usage:        1 bytes
 13019 ;; Hardware stack levels used:    1
 13020 ;; Hardware stack levels required when called:    6
 13021 ;; This function calls:
 13022 ;;		_setLoad_AH_AL_Restore
 13023 ;; This function is called by:
 13024 ;;		_main
 13025 ;; This function uses a non-reentrant model
 13026 ;;
 13027                           
 13028                           
 13029                           ;psect for function _Load_Initialization
 13030  25D2                     _Load_Initialization:	
 13031                           
 13032                           ;OverLoad_B1.c: 10: Load = &Load1;
 13033                           
 13034                           ;incstack = 0
 13035                           ; Regs used in _Load_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13036  25D2  30A0               	movlw	_Load1& (0+255)
 13037  25D3  0020               	movlb	0	; select bank0
 13038  25D4  00A2               	movwf	??_Load_Initialization
 13039  25D5  0822               	movf	??_Load_Initialization,w
 13040  25D6  00FB               	movwf	_Load
 13041                           
 13042                           ;OverLoad_B1.c: 11: Load->Safe = 1;
 13043  25D7  087B               	movf	_Load,w
 13044  25D8  0086               	movwf	6
 13045  25D9  3002               	movlw	2	; select bank4/5
 13046  25DA  0087               	movwf	7
 13047  25DB  1581               	bsf	1,3
 13048                           
 13049                           ;OverLoad_B1.c: 12: setLoad_AH_AL_Restore();
 13050  25DC  319A  227A         	fcall	_setLoad_AH_AL_Restore
 13051  25DE  0008               	return
 13052  25DF                     __end_of_Load_Initialization:	
 13053                           
 13054                           	psect	text69
 13055  1A7A                     __ptext69:	
 13056 ;; *************** function _setLoad_AH_AL_Restore *****************
 13057 ;; Defined at:
 13058 ;;		line 307 in file "../src/OverLoad_B1.c"
 13059 ;; Parameters:    Size  Location     Type
 13060 ;;		None
 13061 ;; Auto vars:     Size  Location     Type
 13062 ;;  i               1    1[BANK0 ] unsigned char 
 13063 ;; Return value:  Size  Location     Type
 13064 ;;		None               void
 13065 ;; Registers used:
 13066 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 13067 ;; Tracked objects:
 13068 ;;		On entry : 0/0
 13069 ;;		On exit  : 0/0
 13070 ;;		Unchanged: 0/0
 13071 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13072 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13073 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13074 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13075 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13076 ;;Total ram usage:        2 bytes
 13077 ;; Hardware stack levels used:    1
 13078 ;; Hardware stack levels required when called:    5
 13079 ;; This function calls:
 13080 ;;		Nothing
 13081 ;; This function is called by:
 13082 ;;		_Load_Initialization
 13083 ;;		_Load_Main
 13084 ;; This function uses a non-reentrant model
 13085 ;;
 13086                           
 13087                           
 13088                           ;psect for function _setLoad_AH_AL_Restore
 13089  1A7A                     _setLoad_AH_AL_Restore:	
 13090                           
 13091                           ;OverLoad_B1.c: 308: char i;
 13092                           ;OverLoad_B1.c: 309: for (i = 0; i < 5; i++) {
 13093                           
 13094                           ;incstack = 0
 13095                           ; Regs used in _setLoad_AH_AL_Restore: [wreg+fsr1l+fsr1h+status,2+status,0]
 13096  1A7A  0020               	movlb	0	; select bank0
 13097  1A7B  01A1               	clrf	setLoad_AH_AL_Restore@i
 13098  1A7C                     L12:	
 13099  1A7C  3005               	movlw	5
 13100  1A7D  0221               	subwf	setLoad_AH_AL_Restore@i,w
 13101  1A7E  1803               	btfsc	3,0
 13102  1A7F  0008               	return
 13103                           
 13104                           ;OverLoad_B1.c: 310: Load->AH[i] = 0;
 13105  1A80  3521               	lslf	setLoad_AH_AL_Restore@i,w
 13106  1A81  3E08               	addlw	8
 13107  1A82  077B               	addwf	_Load,w
 13108  1A83  00A0               	movwf	??_setLoad_AH_AL_Restore
 13109  1A84  0820               	movf	??_setLoad_AH_AL_Restore,w
 13110  1A85  0086               	movwf	6
 13111  1A86  3002               	movlw	2	; select bank4/5
 13112  1A87  0087               	movwf	7
 13113  1A88  3000               	movlw	0
 13114  1A89  3FC0               	movwi [0]fsr1
 13115  1A8A  3FC1               	movwi [1]fsr1
 13116                           
 13117                           ;OverLoad_B1.c: 311: Load->AL[i] = 0xffff;
 13118  1A8B  3521               	lslf	setLoad_AH_AL_Restore@i,w
 13119  1A8C  3E1A               	addlw	26
 13120  1A8D  077B               	addwf	_Load,w
 13121  1A8E  00A0               	movwf	??_setLoad_AH_AL_Restore
 13122  1A8F  0820               	movf	??_setLoad_AH_AL_Restore,w
 13123  1A90  0086               	movwf	6
 13124  1A91  3002               	movlw	2	; select bank4/5
 13125  1A92  0087               	movwf	7
 13126  1A93  30FF               	movlw	255
 13127  1A94  3FC0               	movwi [0]fsr1
 13128  1A95  30FF               	movlw	255
 13129  1A96  3FC1               	movwi [1]fsr1
 13130  1A97  3001               	movlw	1
 13131  1A98  00A0               	movwf	??_setLoad_AH_AL_Restore
 13132  1A99  0820               	movf	??_setLoad_AH_AL_Restore,w
 13133  1A9A  07A1               	addwf	setLoad_AH_AL_Restore@i,f
 13134  1A9B  2A7C               	goto	L12
 13135  1A9C                     __end_of_setLoad_AH_AL_Restore:	
 13136                           
 13137                           	psect	text70
 13138  25BA                     __ptext70:	
 13139 ;; *************** function _LED_Main *****************
 13140 ;; Defined at:
 13141 ;;		line 51 in file "../src/LED_B1.c"
 13142 ;; Parameters:    Size  Location     Type
 13143 ;;		None
 13144 ;; Auto vars:     Size  Location     Type
 13145 ;;		None
 13146 ;; Return value:  Size  Location     Type
 13147 ;;		None               void
 13148 ;; Registers used:
 13149 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13150 ;; Tracked objects:
 13151 ;;		On entry : 0/0
 13152 ;;		On exit  : 0/0
 13153 ;;		Unchanged: 0/0
 13154 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13155 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13156 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13157 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13158 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13159 ;;Total ram usage:        0 bytes
 13160 ;; Hardware stack levels used:    1
 13161 ;; Hardware stack levels required when called:    7
 13162 ;; This function calls:
 13163 ;;		_setLED_Main
 13164 ;; This function is called by:
 13165 ;;		_main
 13166 ;; This function uses a non-reentrant model
 13167 ;;
 13168                           
 13169                           
 13170                           ;psect for function _LED_Main
 13171  25BA                     _LED_Main:	
 13172                           
 13173                           ;LED_B1.c: 54: setLED_Main(1);
 13174                           
 13175                           ;incstack = 0
 13176                           ; Regs used in _LED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13177  25BA  3001               	movlw	1
 13178  25BB  319D  2550  31A5   	fcall	_setLED_Main
 13179                           
 13180                           ;LED_B1.c: 57: setLED_Main(2);
 13181  25BE  3002               	movlw	2
 13182  25BF  319D  2550  31A5   	fcall	_setLED_Main
 13183                           
 13184                           ;LED_B1.c: 63: setLED_Main(99);
 13185  25C2  3063               	movlw	99
 13186  25C3  319D  2550         	fcall	_setLED_Main
 13187  25C5  0008               	return
 13188  25C6                     __end_of_LED_Main:	
 13189                           
 13190                           	psect	text71
 13191  1D50                     __ptext71:	
 13192 ;; *************** function _setLED_Main *****************
 13193 ;; Defined at:
 13194 ;;		line 215 in file "../src/LED_B1.c"
 13195 ;; Parameters:    Size  Location     Type
 13196 ;;  led             1    wreg     unsigned char 
 13197 ;; Auto vars:     Size  Location     Type
 13198 ;;  led             1    4[BANK0 ] unsigned char 
 13199 ;; Return value:  Size  Location     Type
 13200 ;;		None               void
 13201 ;; Registers used:
 13202 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13203 ;; Tracked objects:
 13204 ;;		On entry : 0/0
 13205 ;;		On exit  : 0/0
 13206 ;;		Unchanged: 0/0
 13207 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13208 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13209 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13210 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13211 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13212 ;;Total ram usage:        3 bytes
 13213 ;; Hardware stack levels used:    1
 13214 ;; Hardware stack levels required when called:    6
 13215 ;; This function calls:
 13216 ;;		_LedPointSelect
 13217 ;; This function is called by:
 13218 ;;		_LED_Main
 13219 ;; This function uses a non-reentrant model
 13220 ;;
 13221                           
 13222                           
 13223                           ;psect for function _setLED_Main
 13224  1D50                     _setLED_Main:	
 13225                           
 13226                           ;incstack = 0
 13227                           ; Regs used in _setLED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13228                           ;setLED_Main@led stored from wreg
 13229  1D50  0020               	movlb	0	; select bank0
 13230  1D51  00A4               	movwf	setLED_Main@led
 13231                           
 13232                           ;LED_B1.c: 217: LedPointSelect(led);
 13233  1D52  0824               	movf	setLED_Main@led,w
 13234  1D53  319A  2258  319D   	fcall	_LedPointSelect
 13235                           
 13236                           ;LED_B1.c: 218: if(LED->GO)
 13237  1D56  0021               	movlb	1	; select bank1
 13238  1D57  083E               	movf	_LED^(0+128),w
 13239  1D58  0086               	movwf	6
 13240  1D59  0187               	clrf	7
 13241  1D5A  1C81               	btfss	1,1
 13242  1D5B  0008               	return
 13243                           
 13244                           ;LED_B1.c: 219: {
 13245                           ;LED_B1.c: 220: LED->Time++;
 13246  1D5C  0A3E               	incf	_LED^(0+128),w
 13247  1D5D  0086               	movwf	6
 13248  1D5E  0187               	clrf	7
 13249  1D5F  3001               	movlw	1
 13250  1D60  0781               	addwf	1,f
 13251  1D61  3141               	addfsr 1,1
 13252  1D62  1803               	skipnc
 13253  1D63  0A81               	incf	1,f
 13254                           
 13255                           ;LED_B1.c: 221: if(LED->Time >= 500/10)
 13256  1D64  0A3E               	incf	_LED^(0+128),w
 13257  1D65  0086               	movwf	6
 13258  1D66  0187               	clrf	7
 13259  1D67  3F40               	moviw [0]fsr1
 13260  1D68  0020               	movlb	0	; select bank0
 13261  1D69  00A2               	movwf	??_setLED_Main
 13262  1D6A  3F41               	moviw [1]fsr1
 13263  1D6B  00A3               	movwf	??_setLED_Main+1
 13264  1D6C  3000               	movlw	0
 13265  1D6D  0223               	subwf	??_setLED_Main+1,w
 13266  1D6E  3032               	movlw	50
 13267  1D6F  1903               	skipnz
 13268  1D70  0222               	subwf	??_setLED_Main,w
 13269  1D71  1C03               	skipc
 13270  1D72  0008               	return
 13271                           
 13272                           ;LED_B1.c: 222: {
 13273                           ;LED_B1.c: 223: LED->Time=0;
 13274  1D73  0021               	movlb	1	; select bank1
 13275  1D74  0A3E               	incf	_LED^(0+128),w
 13276  1D75  0086               	movwf	6
 13277  1D76  0187               	clrf	7
 13278  1D77  3000               	movlw	0
 13279  1D78  3FC0               	movwi [0]fsr1
 13280  1D79  3FC1               	movwi [1]fsr1
 13281                           
 13282                           ;LED_B1.c: 225: if(led == 1)
 13283  1D7A  0020               	movlb	0	; select bank0
 13284  1D7B  0824               	movf	setLED_Main@led,w
 13285  1D7C  3A01               	xorlw	1
 13286  1D7D  1D03               	skipz
 13287  1D7E  2D82               	goto	l7492
 13288                           
 13289                           ;LED_B1.c: 226: {
 13290                           ;LED_B1.c: 227: RA3=~RA3;
 13291  1D7F  3008               	movlw	8
 13292  1D80  068C               	xorwf	12,f
 13293                           
 13294                           ;LED_B1.c: 228: }
 13295  1D81  0008               	return
 13296  1D82                     l7492:	
 13297                           
 13298                           ;LED_B1.c: 231: else if(led == 2)
 13299  1D82  0824               	movf	setLED_Main@led,w
 13300  1D83  3A02               	xorlw	2
 13301  1D84  1D03               	skipz
 13302  1D85  2D89               	goto	l7496
 13303                           
 13304                           ;LED_B1.c: 232: {
 13305                           ;LED_B1.c: 233: RC7=~RC7;
 13306  1D86  3080               	movlw	128
 13307  1D87  068E               	xorwf	14,f
 13308                           
 13309                           ;LED_B1.c: 234: }
 13310  1D88  0008               	return
 13311  1D89                     l7496:	
 13312                           
 13313                           ;LED_B1.c: 243: else if(led == 99)
 13314  1D89  0824               	movf	setLED_Main@led,w
 13315  1D8A  3A63               	xorlw	99
 13316  1D8B  1D03               	skipz
 13317  1D8C  0008               	return
 13318                           
 13319                           ;LED_B1.c: 244: {
 13320                           ;LED_B1.c: 245: RB5=~RB5;
 13321  1D8D  3020               	movlw	32
 13322  1D8E  068D               	xorwf	13,f
 13323  1D8F  0008               	return
 13324  1D90                     __end_of_setLED_Main:	
 13325                           
 13326                           	psect	text72
 13327  25AE                     __ptext72:	
 13328 ;; *************** function _LED_Initialization *****************
 13329 ;; Defined at:
 13330 ;;		line 35 in file "../src/LED_B1.c"
 13331 ;; Parameters:    Size  Location     Type
 13332 ;;		None
 13333 ;; Auto vars:     Size  Location     Type
 13334 ;;		None
 13335 ;; Return value:  Size  Location     Type
 13336 ;;		None               void
 13337 ;; Registers used:
 13338 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13339 ;; Tracked objects:
 13340 ;;		On entry : 0/0
 13341 ;;		On exit  : 0/0
 13342 ;;		Unchanged: 0/0
 13343 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13344 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13345 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13346 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13347 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13348 ;;Total ram usage:        0 bytes
 13349 ;; Hardware stack levels used:    1
 13350 ;; Hardware stack levels required when called:    8
 13351 ;; This function calls:
 13352 ;;		_setLED_Initialization
 13353 ;; This function is called by:
 13354 ;;		_main
 13355 ;; This function uses a non-reentrant model
 13356 ;;
 13357                           
 13358                           
 13359                           ;psect for function _LED_Initialization
 13360  25AE                     _LED_Initialization:	
 13361                           
 13362                           ;LED_B1.c: 38: setLED_Initialization(1);
 13363                           
 13364                           ;incstack = 0
 13365                           ; Regs used in _LED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13366  25AE  3001               	movlw	1
 13367  25AF  31A6  26EF  31A5   	fcall	_setLED_Initialization
 13368                           
 13369                           ;LED_B1.c: 41: setLED_Initialization(2);
 13370  25B2  3002               	movlw	2
 13371  25B3  31A6  26EF  31A5   	fcall	_setLED_Initialization
 13372                           
 13373                           ;LED_B1.c: 47: setLED_Initialization(99);
 13374  25B6  3063               	movlw	99
 13375  25B7  31A6  26EF         	fcall	_setLED_Initialization
 13376  25B9  0008               	return
 13377  25BA                     __end_of_LED_Initialization:	
 13378                           
 13379                           	psect	text73
 13380  26EF                     __ptext73:	
 13381 ;; *************** function _setLED_Initialization *****************
 13382 ;; Defined at:
 13383 ;;		line 67 in file "../src/LED_B1.c"
 13384 ;; Parameters:    Size  Location     Type
 13385 ;;  led             1    wreg     unsigned char 
 13386 ;; Auto vars:     Size  Location     Type
 13387 ;;  led             1    4[BANK0 ] unsigned char 
 13388 ;; Return value:  Size  Location     Type
 13389 ;;		None               void
 13390 ;; Registers used:
 13391 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13392 ;; Tracked objects:
 13393 ;;		On entry : 0/0
 13394 ;;		On exit  : 0/0
 13395 ;;		Unchanged: 0/0
 13396 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13397 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13398 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13399 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13400 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13401 ;;Total ram usage:        1 bytes
 13402 ;; Hardware stack levels used:    1
 13403 ;; Hardware stack levels required when called:    7
 13404 ;; This function calls:
 13405 ;;		_LedPointSelect
 13406 ;;		_setLED
 13407 ;; This function is called by:
 13408 ;;		_LED_Initialization
 13409 ;; This function uses a non-reentrant model
 13410 ;;
 13411                           
 13412                           
 13413                           ;psect for function _setLED_Initialization
 13414  26EF                     _setLED_Initialization:	
 13415                           
 13416                           ;incstack = 0
 13417                           ; Regs used in _setLED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 13418                           ;setLED_Initialization@led stored from wreg
 13419  26EF  0020               	movlb	0	; select bank0
 13420  26F0  00A4               	movwf	setLED_Initialization@led
 13421                           
 13422                           ;LED_B1.c: 69: LedPointSelect(led);
 13423  26F1  0824               	movf	setLED_Initialization@led,w
 13424  26F2  319A  2258  31A6   	fcall	_LedPointSelect
 13425                           
 13426                           ;LED_B1.c: 70: LED->Enable=1;
 13427  26F5  0021               	movlb	1	; select bank1
 13428  26F6  083E               	movf	_LED^(0+128),w
 13429  26F7  0086               	movwf	6
 13430  26F8  0187               	clrf	7
 13431  26F9  1401               	bsf	1,0
 13432                           
 13433                           ;LED_B1.c: 71: setLED(led,0);
 13434  26FA  0020               	movlb	0	; select bank0
 13435  26FB  01A2               	clrf	setLED@command
 13436  26FC  0824               	movf	setLED_Initialization@led,w
 13437  26FD  3191  21C2         	fcall	_setLED
 13438  26FF  0008               	return
 13439  2700                     __end_of_setLED_Initialization:	
 13440                           
 13441                           	psect	text74
 13442  1E9C                     __ptext74:	
 13443 ;; *************** function _Flash_Memory_Main *****************
 13444 ;; Defined at:
 13445 ;;		line 786 in file "../src/MCU_B1.c"
 13446 ;; Parameters:    Size  Location     Type
 13447 ;;		None
 13448 ;; Auto vars:     Size  Location     Type
 13449 ;;		None
 13450 ;; Return value:  Size  Location     Type
 13451 ;;		None               void
 13452 ;; Registers used:
 13453 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13454 ;; Tracked objects:
 13455 ;;		On entry : 0/0
 13456 ;;		On exit  : 0/0
 13457 ;;		Unchanged: 0/0
 13458 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13459 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13460 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13461 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13462 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13463 ;;Total ram usage:        0 bytes
 13464 ;; Hardware stack levels used:    1
 13465 ;; Hardware stack levels required when called:    8
 13466 ;; This function calls:
 13467 ;;		_Flash_Memory_Modify
 13468 ;; This function is called by:
 13469 ;;		_main
 13470 ;; This function uses a non-reentrant model
 13471 ;;
 13472                           
 13473                           
 13474                           ;psect for function _Flash_Memory_Main
 13475  1E9C                     _Flash_Memory_Main:	
 13476                           
 13477                           ;MCU_B1.c: 787: if (Memory->GO == 1) {
 13478                           
 13479                           ;incstack = 0
 13480                           ; Regs used in _Flash_Memory_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13481  1E9C  0021               	movlb	1	; select bank1
 13482  1E9D  086E               	movf	_Memory^(0+128),w
 13483  1E9E  3E24               	addlw	36
 13484  1E9F  0086               	movwf	6
 13485  1EA0  3002               	movlw	2	; select bank4/5
 13486  1EA1  0087               	movwf	7
 13487  1EA2  1C81               	btfss	1,1
 13488  1EA3  0008               	return
 13489                           
 13490                           ;MCU_B1.c: 788: if (Memory->Modify == 1) {
 13491  1EA4  086E               	movf	_Memory^(0+128),w
 13492  1EA5  3E24               	addlw	36
 13493  1EA6  0086               	movwf	6
 13494  1EA7  3002               	movlw	2	; select bank4/5
 13495  1EA8  0087               	movwf	7
 13496  1EA9  1C01               	btfss	1,0
 13497  1EAA  2ED9               	goto	l8104
 13498                           
 13499                           ;MCU_B1.c: 789: Memory->Time++;
 13500  1EAB  086E               	movf	_Memory^(0+128),w
 13501  1EAC  3E22               	addlw	34
 13502  1EAD  0086               	movwf	6
 13503  1EAE  3002               	movlw	2	; select bank4/5
 13504  1EAF  0087               	movwf	7
 13505  1EB0  3001               	movlw	1
 13506  1EB1  0781               	addwf	1,f
 13507  1EB2  3141               	addfsr 1,1
 13508  1EB3  1803               	skipnc
 13509  1EB4  0A81               	incf	1,f
 13510                           
 13511                           ;MCU_B1.c: 790: if (Memory->Time == 25)
 13512  1EB5  086E               	movf	_Memory^(0+128),w
 13513  1EB6  3E22               	addlw	34
 13514  1EB7  0086               	movwf	6
 13515  1EB8  3002               	movlw	2	; select bank4/5
 13516  1EB9  0087               	movwf	7
 13517  1EBA  3F40               	moviw [0]fsr1
 13518  1EBB  3A19               	xorlw	25
 13519  1EBC  1D03               	skipz
 13520  1EBD  2EC0               	goto	u7485
 13521  1EBE  3F41               	moviw [1]fsr1
 13522  1EBF  3A00               	xorlw	0
 13523  1EC0                     u7485:	
 13524  1EC0  1D03               	skipz
 13525  1EC1  0008               	return
 13526                           
 13527                           ;MCU_B1.c: 791: {
 13528                           ;MCU_B1.c: 792: Memory->Time = 0;
 13529  1EC2  086E               	movf	_Memory^(0+128),w
 13530  1EC3  3E22               	addlw	34
 13531  1EC4  0086               	movwf	6
 13532  1EC5  3002               	movlw	2	; select bank4/5
 13533  1EC6  0087               	movwf	7
 13534  1EC7  3000               	movlw	0
 13535  1EC8  3FC0               	movwi [0]fsr1
 13536  1EC9  3FC1               	movwi [1]fsr1
 13537                           
 13538                           ;MCU_B1.c: 793: Memory->Modify = 0;
 13539  1ECA  086E               	movf	_Memory^(0+128),w
 13540  1ECB  3E24               	addlw	36
 13541  1ECC  0086               	movwf	6
 13542  1ECD  3002               	movlw	2	; select bank4/5
 13543  1ECE  0087               	movwf	7
 13544  1ECF  1001               	bcf	1,0
 13545                           
 13546                           ;MCU_B1.c: 794: Memory->GO = 0;
 13547  1ED0  086E               	movf	_Memory^(0+128),w
 13548  1ED1  3E24               	addlw	36
 13549  1ED2  0086               	movwf	6
 13550  1ED3  3002               	movlw	2	; select bank4/5
 13551  1ED4  0087               	movwf	7
 13552  1ED5  1081               	bcf	1,1
 13553                           
 13554                           ;MCU_B1.c: 795: Flash_Memory_Modify();
 13555  1ED6  3193  23BC         	fcall	_Flash_Memory_Modify
 13556                           
 13557                           ;MCU_B1.c: 796: }
 13558                           ;MCU_B1.c: 797: } else {
 13559  1ED8  0008               	return
 13560  1ED9                     l8104:	
 13561                           
 13562                           ;MCU_B1.c: 798: Memory->GO = 0;
 13563  1ED9  0021               	movlb	1	; select bank1
 13564  1EDA  086E               	movf	_Memory^(0+128),w
 13565  1EDB  3E24               	addlw	36
 13566  1EDC  0086               	movwf	6
 13567  1EDD  3002               	movlw	2	; select bank4/5
 13568  1EDE  0087               	movwf	7
 13569  1EDF  1081               	bcf	1,1
 13570  1EE0  0008               	return
 13571  1EE1                     __end_of_Flash_Memory_Main:	
 13572                           
 13573                           	psect	text75
 13574  13BC                     __ptext75:	
 13575 ;; *************** function _Flash_Memory_Modify *****************
 13576 ;; Defined at:
 13577 ;;		line 855 in file "../src/MCU_B1.c"
 13578 ;; Parameters:    Size  Location     Type
 13579 ;;		None
 13580 ;; Auto vars:     Size  Location     Type
 13581 ;;  i               1    6[BANK0 ] unsigned char 
 13582 ;; Return value:  Size  Location     Type
 13583 ;;		None               void
 13584 ;; Registers used:
 13585 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13586 ;; Tracked objects:
 13587 ;;		On entry : 0/0
 13588 ;;		On exit  : 0/0
 13589 ;;		Unchanged: 0/0
 13590 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13591 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13592 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13593 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13594 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13595 ;;Total ram usage:        3 bytes
 13596 ;; Hardware stack levels used:    1
 13597 ;; Hardware stack levels required when called:    7
 13598 ;; This function calls:
 13599 ;;		_Flash_Memory_Erasing
 13600 ;;		_Flash_Memory_Read
 13601 ;;		_Flash_Memory_Write
 13602 ;; This function is called by:
 13603 ;;		_Flash_Memory_Main
 13604 ;; This function uses a non-reentrant model
 13605 ;;
 13606                           
 13607                           
 13608                           ;psect for function _Flash_Memory_Modify
 13609  13BC                     _Flash_Memory_Modify:	
 13610                           
 13611                           ;MCU_B1.c: 856: char i = 0;
 13612                           
 13613                           ;incstack = 0
 13614                           ; Regs used in _Flash_Memory_Modify: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13615  13BC  0020               	movlb	0	; select bank0
 13616  13BD  01A6               	clrf	Flash_Memory_Modify@i
 13617                           
 13618                           ;MCU_B1.c: 857: for (i = 0; i < 32; i++) {
 13619  13BE  01A6               	clrf	Flash_Memory_Modify@i
 13620  13BF  3020               	movlw	32
 13621  13C0  0226               	subwf	Flash_Memory_Modify@i,w
 13622  13C1  1803               	btfsc	3,0
 13623  13C2  2BDC               	goto	l7584
 13624  13C3                     l7578:	
 13625                           
 13626                           ;MCU_B1.c: 858: Memory->Data[i] = Flash_Memory_Read(i);
 13627  13C3  0826               	movf	Flash_Memory_Modify@i,w
 13628  13C4  3198  20BA  3193   	fcall	_Flash_Memory_Read
 13629  13C7  0020               	movlb	0	; select bank0
 13630  13C8  00A4               	movwf	??_Flash_Memory_Modify
 13631  13C9  0826               	movf	Flash_Memory_Modify@i,w
 13632  13CA  0021               	movlb	1	; select bank1
 13633  13CB  076E               	addwf	_Memory^(0+128),w
 13634  13CC  0020               	movlb	0	; select bank0
 13635  13CD  00A5               	movwf	??_Flash_Memory_Modify+1
 13636  13CE  0825               	movf	??_Flash_Memory_Modify+1,w
 13637  13CF  0086               	movwf	6
 13638  13D0  3002               	movlw	2	; select bank4/5
 13639  13D1  0087               	movwf	7
 13640  13D2  0824               	movf	??_Flash_Memory_Modify,w
 13641  13D3  0081               	movwf	1
 13642  13D4  3001               	movlw	1
 13643  13D5  00A4               	movwf	??_Flash_Memory_Modify
 13644  13D6  0824               	movf	??_Flash_Memory_Modify,w
 13645  13D7  07A6               	addwf	Flash_Memory_Modify@i,f
 13646  13D8  3020               	movlw	32
 13647  13D9  0226               	subwf	Flash_Memory_Modify@i,w
 13648  13DA  1C03               	skipc
 13649  13DB  2BC3               	goto	l7578
 13650  13DC                     l7584:	
 13651                           
 13652                           ;MCU_B1.c: 859: }
 13653                           ;MCU_B1.c: 860: Memory->Data[0]=product->Data[12];
 13654  13DC  087D               	movf	_product,w
 13655  13DD  3E0C               	addlw	12
 13656  13DE  0086               	movwf	6
 13657  13DF  3001               	movlw	1	; select bank2/3
 13658  13E0  0087               	movwf	7
 13659  13E1  0801               	movf	1,w
 13660  13E2  00A4               	movwf	??_Flash_Memory_Modify
 13661  13E3  0021               	movlb	1	; select bank1
 13662  13E4  086E               	movf	_Memory^(0+128),w
 13663  13E5  0086               	movwf	6
 13664  13E6  3002               	movlw	2	; select bank4/5
 13665  13E7  0087               	movwf	7
 13666  13E8  0020               	movlb	0	; select bank0
 13667  13E9  0824               	movf	??_Flash_Memory_Modify,w
 13668  13EA  0081               	movwf	1
 13669                           
 13670                           ;MCU_B1.c: 861: Memory->Data[1]=product->Data[13];
 13671  13EB  087D               	movf	_product,w
 13672  13EC  3E0D               	addlw	13
 13673  13ED  0086               	movwf	6
 13674  13EE  3001               	movlw	1	; select bank2/3
 13675  13EF  0087               	movwf	7
 13676  13F0  0801               	movf	1,w
 13677  13F1  00A4               	movwf	??_Flash_Memory_Modify
 13678  13F2  0021               	movlb	1	; select bank1
 13679  13F3  0A6E               	incf	_Memory^(0+128),w
 13680  13F4  0086               	movwf	6
 13681  13F5  3002               	movlw	2	; select bank4/5
 13682  13F6  0087               	movwf	7
 13683  13F7  0020               	movlb	0	; select bank0
 13684  13F8  0824               	movf	??_Flash_Memory_Modify,w
 13685  13F9  0081               	movwf	1
 13686                           
 13687                           ;MCU_B1.c: 862: Memory->Data[2]=product->Data[14];
 13688  13FA  087D               	movf	_product,w
 13689  13FB  3E0E               	addlw	14
 13690  13FC  0086               	movwf	6
 13691  13FD  3001               	movlw	1	; select bank2/3
 13692  13FE  0087               	movwf	7
 13693  13FF  0801               	movf	1,w
 13694  1400  00A4               	movwf	??_Flash_Memory_Modify
 13695  1401  0021               	movlb	1	; select bank1
 13696  1402  086E               	movf	_Memory^(0+128),w
 13697  1403  3E02               	addlw	2
 13698  1404  0086               	movwf	6
 13699  1405  3002               	movlw	2	; select bank4/5
 13700  1406  0087               	movwf	7
 13701  1407  0020               	movlb	0	; select bank0
 13702  1408  0824               	movf	??_Flash_Memory_Modify,w
 13703  1409  0081               	movwf	1
 13704                           
 13705                           ;MCU_B1.c: 868: if (Memory->LoopSave == 1) {
 13706  140A  0021               	movlb	1	; select bank1
 13707  140B  086E               	movf	_Memory^(0+128),w
 13708  140C  3E24               	addlw	36
 13709  140D  0086               	movwf	6
 13710  140E  3002               	movlw	2	; select bank4/5
 13711  140F  0087               	movwf	7
 13712  1410  1D01               	btfss	1,2
 13713  1411  2C22               	goto	l7588
 13714                           
 13715                           ;MCU_B1.c: 869: Memory->LoopSave = 0;
 13716  1412  086E               	movf	_Memory^(0+128),w
 13717  1413  3E24               	addlw	36
 13718  1414  0086               	movwf	6
 13719  1415  3002               	movlw	2	; select bank4/5
 13720  1416  0087               	movwf	7
 13721  1417  1101               	bcf	1,2
 13722                           
 13723                           ;MCU_B1.c: 870: myMain->FirstOpen = 0;
 13724  1418  086D               	movf	_myMain^(0+128),w
 13725  1419  0086               	movwf	6
 13726  141A  3001               	movlw	1	; select bank2/3
 13727  141B  0087               	movwf	7
 13728  141C  1281               	bcf	1,5
 13729                           
 13730                           ;MCU_B1.c: 871: myMain->First = 0;
 13731  141D  086D               	movf	_myMain^(0+128),w
 13732  141E  0086               	movwf	6
 13733  141F  3001               	movlw	1	; select bank2/3
 13734  1420  0087               	movwf	7
 13735  1421  1381               	bcf	1,7
 13736  1422                     l7588:	
 13737                           
 13738                           ;MCU_B1.c: 873: }
 13739                           ;MCU_B1.c: 874: GIE = 0;
 13740  1422  138B               	bcf	11,7	;volatile
 13741                           
 13742                           ;MCU_B1.c: 875: Flash_Memory_Erasing();
 13743  1423  31A5  25A2  3193   	fcall	_Flash_Memory_Erasing
 13744                           
 13745                           ;MCU_B1.c: 876: Flash_Memory_Write();
 13746  1426  319C  24B1         	fcall	_Flash_Memory_Write
 13747                           
 13748                           ;MCU_B1.c: 877: GIE = 1;
 13749  1428  178B               	bsf	11,7	;volatile
 13750  1429  0008               	return
 13751  142A                     __end_of_Flash_Memory_Modify:	
 13752                           
 13753                           	psect	text76
 13754  25A2                     __ptext76:	
 13755 ;; *************** function _Flash_Memory_Erasing *****************
 13756 ;; Defined at:
 13757 ;;		line 844 in file "../src/MCU_B1.c"
 13758 ;; Parameters:    Size  Location     Type
 13759 ;;		None
 13760 ;; Auto vars:     Size  Location     Type
 13761 ;;		None
 13762 ;; Return value:  Size  Location     Type
 13763 ;;		None               void
 13764 ;; Registers used:
 13765 ;;		wreg, status,2, status,0, pclath, cstack
 13766 ;; Tracked objects:
 13767 ;;		On entry : 0/0
 13768 ;;		On exit  : 0/0
 13769 ;;		Unchanged: 0/0
 13770 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13771 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13772 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13773 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13774 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13775 ;;Total ram usage:        0 bytes
 13776 ;; Hardware stack levels used:    1
 13777 ;; Hardware stack levels required when called:    6
 13778 ;; This function calls:
 13779 ;;		_Flash_Memory_Unlock
 13780 ;; This function is called by:
 13781 ;;		_Flash_Memory_Modify
 13782 ;; This function uses a non-reentrant model
 13783 ;;
 13784                           
 13785                           
 13786                           ;psect for function _Flash_Memory_Erasing
 13787  25A2                     _Flash_Memory_Erasing:	
 13788                           
 13789                           ;MCU_B1.c: 845: CFGS = 0;
 13790                           
 13791                           ;incstack = 0
 13792                           ; Regs used in _Flash_Memory_Erasing: [wreg+status,2+status,0+pclath+cstack]
 13793  25A2  0023               	movlb	3	; select bank3
 13794  25A3  1315               	bcf	21,6	;volatile
 13795                           
 13796                           ;MCU_B1.c: 846: PMADRH = 0x30;
 13797  25A4  3030               	movlw	48
 13798  25A5  0092               	movwf	18	;volatile
 13799                           
 13800                           ;MCU_B1.c: 847: PMADRL = 0x00;
 13801  25A6  0191               	clrf	17	;volatile
 13802                           
 13803                           ;MCU_B1.c: 848: FREE = 1;
 13804  25A7  1615               	bsf	21,4	;volatile
 13805                           
 13806                           ;MCU_B1.c: 849: WREN = 1;
 13807  25A8  1515               	bsf	21,2	;volatile
 13808                           
 13809                           ;MCU_B1.c: 850: Flash_Memory_Unlock();
 13810  25A9  3198  2066         	fcall	_Flash_Memory_Unlock
 13811                           
 13812                           ;MCU_B1.c: 851: WREN = 0;
 13813  25AB  0023               	movlb	3	; select bank3
 13814  25AC  1115               	bcf	21,2	;volatile
 13815  25AD  0008               	return
 13816  25AE                     __end_of_Flash_Memory_Erasing:	
 13817                           
 13818                           	psect	text77
 13819  0F08                     __ptext77:	
 13820 ;; *************** function _Flash_Memory_Initialization *****************
 13821 ;; Defined at:
 13822 ;;		line 745 in file "../src/MCU_B1.c"
 13823 ;; Parameters:    Size  Location     Type
 13824 ;;		None
 13825 ;; Auto vars:     Size  Location     Type
 13826 ;;  i               1   62[BANK0 ] unsigned char 
 13827 ;; Return value:  Size  Location     Type
 13828 ;;		None               void
 13829 ;; Registers used:
 13830 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13831 ;; Tracked objects:
 13832 ;;		On entry : 0/0
 13833 ;;		On exit  : 0/0
 13834 ;;		Unchanged: 0/0
 13835 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13836 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13837 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13838 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13839 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13840 ;;Total ram usage:        2 bytes
 13841 ;; Hardware stack levels used:    1
 13842 ;; Hardware stack levels required when called:    8
 13843 ;; This function calls:
 13844 ;;		_Flash_Memory_Read
 13845 ;;		_Flash_Memory_Write
 13846 ;;		_setPercentValue
 13847 ;; This function is called by:
 13848 ;;		_main
 13849 ;; This function uses a non-reentrant model
 13850 ;;
 13851                           
 13852                           
 13853                           ;psect for function _Flash_Memory_Initialization
 13854  0F08                     _Flash_Memory_Initialization:	
 13855                           
 13856                           ;MCU_B1.c: 746: char i = 0;
 13857                           
 13858                           ;incstack = 0
 13859                           ; Regs used in _Flash_Memory_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 13860  0F08  0020               	movlb	0	; select bank0
 13861  0F09  01DE               	clrf	Flash_Memory_Initialization@i
 13862                           
 13863                           ;MCU_B1.c: 747: if (Flash_Memory_Read(31) == 0xaa) {
 13864  0F0A  301F               	movlw	31
 13865  0F0B  3198  20BA  318F   	fcall	_Flash_Memory_Read
 13866  0F0E  3AAA               	xorlw	170
 13867  0F0F  1D03               	skipz
 13868  0F10  2F82               	goto	l8060
 13869                           
 13870                           ;MCU_B1.c: 748: product->Data[12] = Flash_Memory_Read(0);
 13871  0F11  3000               	movlw	0
 13872  0F12  3198  20BA  318F   	fcall	_Flash_Memory_Read
 13873  0F15  0020               	movlb	0	; select bank0
 13874  0F16  00DD               	movwf	??_Flash_Memory_Initialization
 13875  0F17  087D               	movf	_product,w
 13876  0F18  3E0C               	addlw	12
 13877  0F19  0086               	movwf	6
 13878  0F1A  3001               	movlw	1	; select bank2/3
 13879  0F1B  0087               	movwf	7
 13880  0F1C  085D               	movf	??_Flash_Memory_Initialization,w
 13881  0F1D  0081               	movwf	1
 13882                           
 13883                           ;MCU_B1.c: 749: product->Data[13] = Flash_Memory_Read(1);
 13884  0F1E  3001               	movlw	1
 13885  0F1F  3198  20BA  318F   	fcall	_Flash_Memory_Read
 13886  0F22  0020               	movlb	0	; select bank0
 13887  0F23  00DD               	movwf	??_Flash_Memory_Initialization
 13888  0F24  087D               	movf	_product,w
 13889  0F25  3E0D               	addlw	13
 13890  0F26  0086               	movwf	6
 13891  0F27  3001               	movlw	1	; select bank2/3
 13892  0F28  0087               	movwf	7
 13893  0F29  085D               	movf	??_Flash_Memory_Initialization,w
 13894  0F2A  0081               	movwf	1
 13895                           
 13896                           ;MCU_B1.c: 750: product->Data[14] = Flash_Memory_Read(2);
 13897  0F2B  3002               	movlw	2
 13898  0F2C  3198  20BA  318F   	fcall	_Flash_Memory_Read
 13899  0F2F  0020               	movlb	0	; select bank0
 13900  0F30  00DD               	movwf	??_Flash_Memory_Initialization
 13901  0F31  087D               	movf	_product,w
 13902  0F32  3E0E               	addlw	14
 13903  0F33  0086               	movwf	6
 13904  0F34  3001               	movlw	1	; select bank2/3
 13905  0F35  0087               	movwf	7
 13906  0F36  085D               	movf	??_Flash_Memory_Initialization,w
 13907  0F37  0081               	movwf	1
 13908                           
 13909                           ;MCU_B1.c: 756: i = setPercentValue(((char)((100-60)*0.8)));
 13910  0F38  3020               	movlw	32
 13911  0F39  319E  26E1  318F   	fcall	_setPercentValue
 13912  0F3C  0020               	movlb	0	; select bank0
 13913  0F3D  00DD               	movwf	??_Flash_Memory_Initialization
 13914  0F3E  085D               	movf	??_Flash_Memory_Initialization,w
 13915  0F3F  00DE               	movwf	Flash_Memory_Initialization@i
 13916                           
 13917                           ;MCU_B1.c: 757: product->Data[21] = i;
 13918  0F40  085E               	movf	Flash_Memory_Initialization@i,w
 13919  0F41  00DD               	movwf	??_Flash_Memory_Initialization
 13920  0F42  087D               	movf	_product,w
 13921  0F43  3E15               	addlw	21
 13922  0F44  0086               	movwf	6
 13923  0F45  3001               	movlw	1	; select bank2/3
 13924  0F46  0087               	movwf	7
 13925  0F47  085D               	movf	??_Flash_Memory_Initialization,w
 13926  0F48  0081               	movwf	1
 13927                           
 13928                           ;MCU_B1.c: 758: product->Data[22] = i;
 13929  0F49  085E               	movf	Flash_Memory_Initialization@i,w
 13930  0F4A  00DD               	movwf	??_Flash_Memory_Initialization
 13931  0F4B  087D               	movf	_product,w
 13932  0F4C  3E16               	addlw	22
 13933  0F4D  0086               	movwf	6
 13934  0F4E  3001               	movlw	1	; select bank2/3
 13935  0F4F  0087               	movwf	7
 13936  0F50  085D               	movf	??_Flash_Memory_Initialization,w
 13937  0F51  0081               	movwf	1
 13938                           
 13939                           ;MCU_B1.c: 759: product->Data[23] = i;
 13940  0F52  085E               	movf	Flash_Memory_Initialization@i,w
 13941  0F53  00DD               	movwf	??_Flash_Memory_Initialization
 13942  0F54  087D               	movf	_product,w
 13943  0F55  3E17               	addlw	23
 13944  0F56  0086               	movwf	6
 13945  0F57  3001               	movlw	1	; select bank2/3
 13946  0F58  0087               	movwf	7
 13947  0F59  085D               	movf	??_Flash_Memory_Initialization,w
 13948  0F5A  0081               	movwf	1
 13949                           
 13950                           ;MCU_B1.c: 761: if (product->Data[12] == 0xff && product->Data[13] == 0xff && product->D
      +                          ata[14] == 0xff) {
 13951  0F5B  087D               	movf	_product,w
 13952  0F5C  3E0C               	addlw	12
 13953  0F5D  0086               	movwf	6
 13954  0F5E  3001               	movlw	1	; select bank2/3
 13955  0F5F  0087               	movwf	7
 13956  0F60  0801               	movf	1,w
 13957  0F61  3AFF               	xorlw	255
 13958  0F62  1D03               	skipz
 13959  0F63  0008               	return
 13960  0F64  087D               	movf	_product,w
 13961  0F65  3E0D               	addlw	13
 13962  0F66  0086               	movwf	6
 13963  0F67  3001               	movlw	1	; select bank2/3
 13964  0F68  0087               	movwf	7
 13965  0F69  0801               	movf	1,w
 13966  0F6A  3AFF               	xorlw	255
 13967  0F6B  1D03               	skipz
 13968  0F6C  0008               	return
 13969  0F6D  087D               	movf	_product,w
 13970  0F6E  3E0E               	addlw	14
 13971  0F6F  0086               	movwf	6
 13972  0F70  3001               	movlw	1	; select bank2/3
 13973  0F71  0087               	movwf	7
 13974  0F72  0801               	movf	1,w
 13975  0F73  3AFF               	xorlw	255
 13976  0F74  1D03               	skipz
 13977  0F75  0008               	return
 13978                           
 13979                           ;MCU_B1.c: 762: myMain->FirstOpen = 1;
 13980  0F76  0021               	movlb	1	; select bank1
 13981  0F77  086D               	movf	_myMain^(0+128),w
 13982  0F78  0086               	movwf	6
 13983  0F79  3001               	movlw	1	; select bank2/3
 13984  0F7A  0087               	movwf	7
 13985  0F7B  1681               	bsf	1,5
 13986                           
 13987                           ;MCU_B1.c: 763: myMain->First = 1;
 13988  0F7C  086D               	movf	_myMain^(0+128),w
 13989  0F7D  0086               	movwf	6
 13990  0F7E  3001               	movlw	1	; select bank2/3
 13991  0F7F  0087               	movwf	7
 13992  0F80  1781               	bsf	1,7
 13993                           
 13994                           ;MCU_B1.c: 764: }
 13995                           ;MCU_B1.c: 765: } else {
 13996  0F81  0008               	return
 13997  0F82                     l8060:	
 13998                           
 13999                           ;MCU_B1.c: 766: i = setPercentValue(((char)((100-60)*0.8)));
 14000  0F82  3020               	movlw	32
 14001  0F83  319E  26E1  318F   	fcall	_setPercentValue
 14002  0F86  0020               	movlb	0	; select bank0
 14003  0F87  00DD               	movwf	??_Flash_Memory_Initialization
 14004  0F88  085D               	movf	??_Flash_Memory_Initialization,w
 14005  0F89  00DE               	movwf	Flash_Memory_Initialization@i
 14006                           
 14007                           ;MCU_B1.c: 767: Memory->Data[0]=0xff;
 14008  0F8A  30FF               	movlw	255
 14009  0F8B  00DD               	movwf	??_Flash_Memory_Initialization
 14010  0F8C  0021               	movlb	1	; select bank1
 14011  0F8D  086E               	movf	_Memory^(0+128),w
 14012  0F8E  0086               	movwf	6
 14013  0F8F  3002               	movlw	2	; select bank4/5
 14014  0F90  0087               	movwf	7
 14015  0F91  0020               	movlb	0	; select bank0
 14016  0F92  085D               	movf	??_Flash_Memory_Initialization,w
 14017  0F93  0081               	movwf	1
 14018                           
 14019                           ;MCU_B1.c: 768: Memory->Data[1]=0xff;
 14020  0F94  30FF               	movlw	255
 14021  0F95  00DD               	movwf	??_Flash_Memory_Initialization
 14022  0F96  0021               	movlb	1	; select bank1
 14023  0F97  0A6E               	incf	_Memory^(0+128),w
 14024  0F98  0086               	movwf	6
 14025  0F99  3002               	movlw	2	; select bank4/5
 14026  0F9A  0087               	movwf	7
 14027  0F9B  0020               	movlb	0	; select bank0
 14028  0F9C  085D               	movf	??_Flash_Memory_Initialization,w
 14029  0F9D  0081               	movwf	1
 14030                           
 14031                           ;MCU_B1.c: 769: Memory->Data[2]=0xff;
 14032  0F9E  30FF               	movlw	255
 14033  0F9F  00DD               	movwf	??_Flash_Memory_Initialization
 14034  0FA0  0021               	movlb	1	; select bank1
 14035  0FA1  086E               	movf	_Memory^(0+128),w
 14036  0FA2  3E02               	addlw	2
 14037  0FA3  0086               	movwf	6
 14038  0FA4  3002               	movlw	2	; select bank4/5
 14039  0FA5  0087               	movwf	7
 14040  0FA6  0020               	movlb	0	; select bank0
 14041  0FA7  085D               	movf	??_Flash_Memory_Initialization,w
 14042  0FA8  0081               	movwf	1
 14043                           
 14044                           ;MCU_B1.c: 770: Memory->Data[3]=0xff;
 14045  0FA9  30FF               	movlw	255
 14046  0FAA  00DD               	movwf	??_Flash_Memory_Initialization
 14047  0FAB  0021               	movlb	1	; select bank1
 14048  0FAC  086E               	movf	_Memory^(0+128),w
 14049  0FAD  3E03               	addlw	3
 14050  0FAE  0086               	movwf	6
 14051  0FAF  3002               	movlw	2	; select bank4/5
 14052  0FB0  0087               	movwf	7
 14053  0FB1  0020               	movlb	0	; select bank0
 14054  0FB2  085D               	movf	??_Flash_Memory_Initialization,w
 14055  0FB3  0081               	movwf	1
 14056                           
 14057                           ;MCU_B1.c: 771: Memory->Data[4]=0xff;
 14058  0FB4  30FF               	movlw	255
 14059  0FB5  00DD               	movwf	??_Flash_Memory_Initialization
 14060  0FB6  0021               	movlb	1	; select bank1
 14061  0FB7  086E               	movf	_Memory^(0+128),w
 14062  0FB8  3E04               	addlw	4
 14063  0FB9  0086               	movwf	6
 14064  0FBA  3002               	movlw	2	; select bank4/5
 14065  0FBB  0087               	movwf	7
 14066  0FBC  0020               	movlb	0	; select bank0
 14067  0FBD  085D               	movf	??_Flash_Memory_Initialization,w
 14068  0FBE  0081               	movwf	1
 14069                           
 14070                           ;MCU_B1.c: 772: Memory->Data[5]=0xff;
 14071  0FBF  30FF               	movlw	255
 14072  0FC0  00DD               	movwf	??_Flash_Memory_Initialization
 14073  0FC1  0021               	movlb	1	; select bank1
 14074  0FC2  086E               	movf	_Memory^(0+128),w
 14075  0FC3  3E05               	addlw	5
 14076  0FC4  0086               	movwf	6
 14077  0FC5  3002               	movlw	2	; select bank4/5
 14078  0FC6  0087               	movwf	7
 14079  0FC7  0020               	movlb	0	; select bank0
 14080  0FC8  085D               	movf	??_Flash_Memory_Initialization,w
 14081  0FC9  0081               	movwf	1
 14082                           
 14083                           ;MCU_B1.c: 773: Memory->Data[31]=0xaa;
 14084  0FCA  30AA               	movlw	170
 14085  0FCB  00DD               	movwf	??_Flash_Memory_Initialization
 14086  0FCC  0021               	movlb	1	; select bank1
 14087  0FCD  086E               	movf	_Memory^(0+128),w
 14088  0FCE  3E1F               	addlw	31
 14089  0FCF  0086               	movwf	6
 14090  0FD0  3002               	movlw	2	; select bank4/5
 14091  0FD1  0087               	movwf	7
 14092  0FD2  0020               	movlb	0	; select bank0
 14093  0FD3  085D               	movf	??_Flash_Memory_Initialization,w
 14094  0FD4  0081               	movwf	1
 14095                           
 14096                           ;MCU_B1.c: 774: product->Data[21] = i;
 14097  0FD5  085E               	movf	Flash_Memory_Initialization@i,w
 14098  0FD6  00DD               	movwf	??_Flash_Memory_Initialization
 14099  0FD7  087D               	movf	_product,w
 14100  0FD8  3E15               	addlw	21
 14101  0FD9  0086               	movwf	6
 14102  0FDA  3001               	movlw	1	; select bank2/3
 14103  0FDB  0087               	movwf	7
 14104  0FDC  085D               	movf	??_Flash_Memory_Initialization,w
 14105  0FDD  0081               	movwf	1
 14106                           
 14107                           ;MCU_B1.c: 775: product->Data[22] = i;
 14108  0FDE  085E               	movf	Flash_Memory_Initialization@i,w
 14109  0FDF  00DD               	movwf	??_Flash_Memory_Initialization
 14110  0FE0  087D               	movf	_product,w
 14111  0FE1  3E16               	addlw	22
 14112  0FE2  0086               	movwf	6
 14113  0FE3  3001               	movlw	1	; select bank2/3
 14114  0FE4  0087               	movwf	7
 14115  0FE5  085D               	movf	??_Flash_Memory_Initialization,w
 14116  0FE6  0081               	movwf	1
 14117                           
 14118                           ;MCU_B1.c: 776: product->Data[23] = i;
 14119  0FE7  085E               	movf	Flash_Memory_Initialization@i,w
 14120  0FE8  00DD               	movwf	??_Flash_Memory_Initialization
 14121  0FE9  087D               	movf	_product,w
 14122  0FEA  3E17               	addlw	23
 14123  0FEB  0086               	movwf	6
 14124  0FEC  3001               	movlw	1	; select bank2/3
 14125  0FED  0087               	movwf	7
 14126  0FEE  085D               	movf	??_Flash_Memory_Initialization,w
 14127  0FEF  0081               	movwf	1
 14128                           
 14129                           ;MCU_B1.c: 777: GIE = 0;
 14130  0FF0  138B               	bcf	11,7	;volatile
 14131                           
 14132                           ;MCU_B1.c: 778: Flash_Memory_Write();
 14133  0FF1  319C  24B1         	fcall	_Flash_Memory_Write
 14134                           
 14135                           ;MCU_B1.c: 779: GIE = 1;
 14136  0FF3  178B               	bsf	11,7	;volatile
 14137                           
 14138                           ;MCU_B1.c: 780: myMain->FirstOpen = 1;
 14139  0FF4  0021               	movlb	1	; select bank1
 14140  0FF5  086D               	movf	_myMain^(0+128),w
 14141  0FF6  0086               	movwf	6
 14142  0FF7  3001               	movlw	1	; select bank2/3
 14143  0FF8  0087               	movwf	7
 14144  0FF9  1681               	bsf	1,5
 14145                           
 14146                           ;MCU_B1.c: 781: myMain->First = 1;
 14147  0FFA  086D               	movf	_myMain^(0+128),w
 14148  0FFB  0086               	movwf	6
 14149  0FFC  3001               	movlw	1	; select bank2/3
 14150  0FFD  0087               	movwf	7
 14151  0FFE  1781               	bsf	1,7
 14152  0FFF  0008               	return
 14153  1000                     __end_of_Flash_Memory_Initialization:	
 14154                           
 14155                           	psect	text78
 14156  1CB1                     __ptext78:	
 14157 ;; *************** function _Flash_Memory_Write *****************
 14158 ;; Defined at:
 14159 ;;		line 825 in file "../src/MCU_B1.c"
 14160 ;; Parameters:    Size  Location     Type
 14161 ;;		None
 14162 ;; Auto vars:     Size  Location     Type
 14163 ;;  i               1    1[BANK0 ] unsigned char 
 14164 ;; Return value:  Size  Location     Type
 14165 ;;		None               void
 14166 ;; Registers used:
 14167 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14168 ;; Tracked objects:
 14169 ;;		On entry : 0/0
 14170 ;;		On exit  : 0/0
 14171 ;;		Unchanged: 0/0
 14172 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14173 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14174 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14175 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14176 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14177 ;;Total ram usage:        2 bytes
 14178 ;; Hardware stack levels used:    1
 14179 ;; Hardware stack levels required when called:    6
 14180 ;; This function calls:
 14181 ;;		_Flash_Memory_Unlock
 14182 ;; This function is called by:
 14183 ;;		_Flash_Memory_Initialization
 14184 ;;		_Flash_Memory_Modify
 14185 ;; This function uses a non-reentrant model
 14186 ;;
 14187                           
 14188                           
 14189                           ;psect for function _Flash_Memory_Write
 14190  1CB1                     _Flash_Memory_Write:	
 14191                           
 14192                           ;MCU_B1.c: 826: char i = 0;
 14193                           
 14194                           ;incstack = 0
 14195                           ; Regs used in _Flash_Memory_Write: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14196  1CB1  0020               	movlb	0	; select bank0
 14197  1CB2  01A1               	clrf	Flash_Memory_Write@i
 14198                           
 14199                           ;MCU_B1.c: 827: CFGS = 0;
 14200  1CB3  0023               	movlb	3	; select bank3
 14201  1CB4  1315               	bcf	21,6	;volatile
 14202                           
 14203                           ;MCU_B1.c: 828: PMADRH = 0x30;
 14204  1CB5  3030               	movlw	48
 14205  1CB6  0092               	movwf	18	;volatile
 14206                           
 14207                           ;MCU_B1.c: 829: PMDATH = 0;
 14208  1CB7  0194               	clrf	20	;volatile
 14209                           
 14210                           ;MCU_B1.c: 830: FREE = 0;
 14211  1CB8  1215               	bcf	21,4	;volatile
 14212                           
 14213                           ;MCU_B1.c: 831: LWLO = 1;
 14214  1CB9  1695               	bsf	21,5	;volatile
 14215                           
 14216                           ;MCU_B1.c: 832: WREN = 1;
 14217  1CBA  1515               	bsf	21,2	;volatile
 14218                           
 14219                           ;MCU_B1.c: 833: for (i = 0; i < 32; i++) {
 14220  1CBB  0020               	movlb	0	; select bank0
 14221  1CBC  01A1               	clrf	Flash_Memory_Write@i
 14222  1CBD  3020               	movlw	32
 14223  1CBE  0221               	subwf	Flash_Memory_Write@i,w
 14224  1CBF  1803               	btfsc	3,0
 14225  1CC0  2CDD               	goto	l1468
 14226  1CC1                     l7010:	
 14227                           
 14228                           ;MCU_B1.c: 834: PMADRL = i;
 14229  1CC1  0821               	movf	Flash_Memory_Write@i,w
 14230  1CC2  0023               	movlb	3	; select bank3
 14231  1CC3  0091               	movwf	17	;volatile
 14232                           
 14233                           ;MCU_B1.c: 835: PMDATL = Memory->Data[i];
 14234  1CC4  0020               	movlb	0	; select bank0
 14235  1CC5  0821               	movf	Flash_Memory_Write@i,w
 14236  1CC6  0021               	movlb	1	; select bank1
 14237  1CC7  076E               	addwf	_Memory^(0+128),w
 14238  1CC8  0020               	movlb	0	; select bank0
 14239  1CC9  00A0               	movwf	??_Flash_Memory_Write
 14240  1CCA  0820               	movf	??_Flash_Memory_Write,w
 14241  1CCB  0086               	movwf	6
 14242  1CCC  3002               	movlw	2	; select bank4/5
 14243  1CCD  0087               	movwf	7
 14244  1CCE  0801               	movf	1,w
 14245  1CCF  0023               	movlb	3	; select bank3
 14246  1CD0  0093               	movwf	19	;volatile
 14247                           
 14248                           ;MCU_B1.c: 836: Flash_Memory_Unlock();
 14249  1CD1  3198  2066  319C   	fcall	_Flash_Memory_Unlock
 14250  1CD4  3001               	movlw	1
 14251  1CD5  0020               	movlb	0	; select bank0
 14252  1CD6  00A0               	movwf	??_Flash_Memory_Write
 14253  1CD7  0820               	movf	??_Flash_Memory_Write,w
 14254  1CD8  07A1               	addwf	Flash_Memory_Write@i,f
 14255  1CD9  3020               	movlw	32
 14256  1CDA  0221               	subwf	Flash_Memory_Write@i,w
 14257  1CDB  1C03               	skipc
 14258  1CDC  2CC1               	goto	l7010
 14259  1CDD                     l1468:	
 14260                           
 14261                           ;MCU_B1.c: 837: }
 14262                           ;MCU_B1.c: 838: LWLO = 0;
 14263  1CDD  0023               	movlb	3	; select bank3
 14264  1CDE  1295               	bcf	21,5	;volatile
 14265                           
 14266                           ;MCU_B1.c: 839: Flash_Memory_Unlock();
 14267  1CDF  3198  2066         	fcall	_Flash_Memory_Unlock
 14268                           
 14269                           ;MCU_B1.c: 840: WREN = 0;
 14270  1CE1  0023               	movlb	3	; select bank3
 14271  1CE2  1115               	bcf	21,2	;volatile
 14272  1CE3  0008               	return
 14273  1CE4                     __end_of_Flash_Memory_Write:	
 14274                           
 14275                           	psect	text79
 14276  1866                     __ptext79:	
 14277 ;; *************** function _Flash_Memory_Unlock *****************
 14278 ;; Defined at:
 14279 ;;		line 804 in file "../src/MCU_B1.c"
 14280 ;; Parameters:    Size  Location     Type
 14281 ;;		None
 14282 ;; Auto vars:     Size  Location     Type
 14283 ;;		None
 14284 ;; Return value:  Size  Location     Type
 14285 ;;		None               void
 14286 ;; Registers used:
 14287 ;;		wreg
 14288 ;; Tracked objects:
 14289 ;;		On entry : 0/0
 14290 ;;		On exit  : 0/0
 14291 ;;		Unchanged: 0/0
 14292 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14293 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14294 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14295 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14296 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14297 ;;Total ram usage:        0 bytes
 14298 ;; Hardware stack levels used:    1
 14299 ;; Hardware stack levels required when called:    5
 14300 ;; This function calls:
 14301 ;;		Nothing
 14302 ;; This function is called by:
 14303 ;;		_Flash_Memory_Write
 14304 ;;		_Flash_Memory_Erasing
 14305 ;; This function uses a non-reentrant model
 14306 ;;
 14307                           
 14308                           
 14309                           ;psect for function _Flash_Memory_Unlock
 14310  1866                     _Flash_Memory_Unlock:	
 14311                           
 14312                           ;MCU_B1.c: 805: PMCON2 = 0x55;
 14313                           
 14314                           ;incstack = 0
 14315                           ; Regs used in _Flash_Memory_Unlock: [wreg]
 14316  1866  3055               	movlw	85
 14317  1867  0023               	movlb	3	; select bank3
 14318  1868  0096               	movwf	22	;volatile
 14319                           
 14320                           ;MCU_B1.c: 806: PMCON2 = 0xaa;
 14321  1869  30AA               	movlw	170
 14322  186A  0096               	movwf	22	;volatile
 14323                           
 14324                           ;MCU_B1.c: 807: WR = 1;
 14325  186B  1495               	bsf	21,1	;volatile
 14326                           
 14327                           ;MCU_B1.c: 808: __nop();
 14328  186C  0000               	nop
 14329                           
 14330                           ;MCU_B1.c: 809: __nop();
 14331  186D  0000               	nop
 14332  186E  0008               	return
 14333  186F                     __end_of_Flash_Memory_Unlock:	
 14334                           
 14335                           	psect	text80
 14336  18BA                     __ptext80:	
 14337 ;; *************** function _Flash_Memory_Read *****************
 14338 ;; Defined at:
 14339 ;;		line 813 in file "../src/MCU_B1.c"
 14340 ;; Parameters:    Size  Location     Type
 14341 ;;  address         1    wreg     unsigned char 
 14342 ;; Auto vars:     Size  Location     Type
 14343 ;;  address         1    2[BANK0 ] unsigned char 
 14344 ;;  ret             1    3[BANK0 ] unsigned char 
 14345 ;;  i               1    1[BANK0 ] unsigned char 
 14346 ;; Return value:  Size  Location     Type
 14347 ;;                  1    wreg      unsigned char 
 14348 ;; Registers used:
 14349 ;;		wreg, status,2
 14350 ;; Tracked objects:
 14351 ;;		On entry : 0/0
 14352 ;;		On exit  : 0/0
 14353 ;;		Unchanged: 0/0
 14354 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14355 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14356 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14357 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14358 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14359 ;;Total ram usage:        4 bytes
 14360 ;; Hardware stack levels used:    1
 14361 ;; Hardware stack levels required when called:    5
 14362 ;; This function calls:
 14363 ;;		Nothing
 14364 ;; This function is called by:
 14365 ;;		_Flash_Memory_Initialization
 14366 ;;		_Flash_Memory_Modify
 14367 ;; This function uses a non-reentrant model
 14368 ;;
 14369                           
 14370                           
 14371                           ;psect for function _Flash_Memory_Read
 14372  18BA                     _Flash_Memory_Read:	
 14373                           
 14374                           ;incstack = 0
 14375                           ; Regs used in _Flash_Memory_Read: [wreg+status,2]
 14376                           ;Flash_Memory_Read@address stored from wreg
 14377  18BA  0020               	movlb	0	; select bank0
 14378  18BB  00A2               	movwf	Flash_Memory_Read@address
 14379                           
 14380                           ;MCU_B1.c: 814: char i = 0, ret = 0;
 14381  18BC  01A1               	clrf	Flash_Memory_Read@i
 14382  18BD  01A3               	clrf	Flash_Memory_Read@ret
 14383                           
 14384                           ;MCU_B1.c: 815: PMADRH = 0x30;
 14385  18BE  3030               	movlw	48
 14386  18BF  0023               	movlb	3	; select bank3
 14387  18C0  0092               	movwf	18	;volatile
 14388                           
 14389                           ;MCU_B1.c: 816: PMADRL = address;
 14390  18C1  0020               	movlb	0	; select bank0
 14391  18C2  0822               	movf	Flash_Memory_Read@address,w
 14392  18C3  0023               	movlb	3	; select bank3
 14393  18C4  0091               	movwf	17	;volatile
 14394                           
 14395                           ;MCU_B1.c: 817: CFGS = 0;
 14396  18C5  1315               	bcf	21,6	;volatile
 14397                           
 14398                           ;MCU_B1.c: 818: RD = 1;
 14399  18C6  1415               	bsf	21,0	;volatile
 14400                           
 14401                           ;MCU_B1.c: 819: i = PMDATH;
 14402  18C7  0814               	movf	20,w	;volatile
 14403  18C8  0020               	movlb	0	; select bank0
 14404  18C9  00A0               	movwf	??_Flash_Memory_Read
 14405  18CA  0820               	movf	??_Flash_Memory_Read,w
 14406  18CB  00A1               	movwf	Flash_Memory_Read@i
 14407                           
 14408                           ;MCU_B1.c: 820: ret = PMDATL;
 14409  18CC  0023               	movlb	3	; select bank3
 14410  18CD  0813               	movf	19,w	;volatile
 14411  18CE  0020               	movlb	0	; select bank0
 14412  18CF  00A0               	movwf	??_Flash_Memory_Read
 14413  18D0  0820               	movf	??_Flash_Memory_Read,w
 14414  18D1  00A3               	movwf	Flash_Memory_Read@ret
 14415                           
 14416                           ;MCU_B1.c: 821: return ret;
 14417  18D2  0823               	movf	Flash_Memory_Read@ret,w
 14418  18D3  0008               	return
 14419  18D4                     __end_of_Flash_Memory_Read:	
 14420                           
 14421                           	psect	text81
 14422  2568                     __ptext81:	
 14423 ;; *************** function _DimmerLights_Main *****************
 14424 ;; Defined at:
 14425 ;;		line 407 in file "../src/Dimmer_B1.c"
 14426 ;; Parameters:    Size  Location     Type
 14427 ;;		None
 14428 ;; Auto vars:     Size  Location     Type
 14429 ;;		None
 14430 ;; Return value:  Size  Location     Type
 14431 ;;		None               void
 14432 ;; Registers used:
 14433 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14434 ;; Tracked objects:
 14435 ;;		On entry : 0/0
 14436 ;;		On exit  : 0/0
 14437 ;;		Unchanged: 0/0
 14438 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14439 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14440 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14441 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14442 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14443 ;;Total ram usage:        0 bytes
 14444 ;; Hardware stack levels used:    1
 14445 ;; Hardware stack levels required when called:   11
 14446 ;; This function calls:
 14447 ;;		_DimmerLights_Close
 14448 ;;		_setDimmerLights_Main
 14449 ;; This function is called by:
 14450 ;;		_main
 14451 ;; This function uses a non-reentrant model
 14452 ;;
 14453                           
 14454                           
 14455                           ;psect for function _DimmerLights_Main
 14456  2568                     _DimmerLights_Main:	
 14457                           
 14458                           ;Dimmer_B1.c: 410: setDimmerLights_Main(1);
 14459                           
 14460                           ;incstack = 0
 14461                           ; Regs used in _DimmerLights_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14462  2568  3001               	movlw	1
 14463  2569  3194  249B  31A5   	fcall	_setDimmerLights_Main
 14464                           
 14465                           ;Dimmer_B1.c: 414: setDimmerLights_Main(2);
 14466  256C  3002               	movlw	2
 14467  256D  3194  249B  31A5   	fcall	_setDimmerLights_Main
 14468                           
 14469                           ;Dimmer_B1.c: 421: DimmerLights_Close();
 14470  2570  31A7  27D0         	fcall	_DimmerLights_Close
 14471  2572  0008               	return
 14472  2573                     __end_of_DimmerLights_Main:	
 14473                           
 14474                           	psect	text82
 14475  149B                     __ptext82:	
 14476 ;; *************** function _setDimmerLights_Main *****************
 14477 ;; Defined at:
 14478 ;;		line 425 in file "../src/Dimmer_B1.c"
 14479 ;; Parameters:    Size  Location     Type
 14480 ;;  lights          1    wreg     unsigned char 
 14481 ;; Auto vars:     Size  Location     Type
 14482 ;;  lights          1   70[BANK0 ] unsigned char 
 14483 ;;  clear           1   69[BANK0 ] unsigned char 
 14484 ;; Return value:  Size  Location     Type
 14485 ;;		None               void
 14486 ;; Registers used:
 14487 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14488 ;; Tracked objects:
 14489 ;;		On entry : 0/0
 14490 ;;		On exit  : 0/0
 14491 ;;		Unchanged: 0/0
 14492 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14493 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14494 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14495 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14496 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14497 ;;Total ram usage:        2 bytes
 14498 ;; Hardware stack levels used:    1
 14499 ;; Hardware stack levels required when called:   10
 14500 ;; This function calls:
 14501 ;;		_DimmerLightsPointSelect
 14502 ;;		_setBuz
 14503 ;;		_setDimmerLights
 14504 ;;		_setDimmerLights_Adj
 14505 ;; This function is called by:
 14506 ;;		_DimmerLights_Main
 14507 ;; This function uses a non-reentrant model
 14508 ;;
 14509                           
 14510                           
 14511                           ;psect for function _setDimmerLights_Main
 14512  149B                     _setDimmerLights_Main:	
 14513                           
 14514                           ;incstack = 0
 14515                           ; Regs used in _setDimmerLights_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14516                           ;setDimmerLights_Main@lights stored from wreg
 14517  149B  0020               	movlb	0	; select bank0
 14518  149C  00E6               	movwf	setDimmerLights_Main@lights
 14519                           
 14520                           ;Dimmer_B1.c: 426: char clear = 1;
 14521  149D  01E5               	clrf	setDimmerLights_Main@clear
 14522  149E  0AE5               	incf	setDimmerLights_Main@clear,f
 14523                           
 14524                           ;Dimmer_B1.c: 427: DimmerLightsPointSelect(lights);
 14525  149F  0866               	movf	setDimmerLights_Main@lights,w
 14526  14A0  31A7  2712  3194   	fcall	_DimmerLightsPointSelect
 14527                           
 14528                           ;Dimmer_B1.c: 440: if (lights == 1) {
 14529  14A3  0020               	movlb	0	; select bank0
 14530  14A4  0866               	movf	setDimmerLights_Main@lights,w
 14531  14A5  3A01               	xorlw	1
 14532  14A6  1D03               	skipz
 14533  14A7  2CAF               	goto	l7442
 14534                           
 14535                           ;Dimmer_B1.c: 441: clear = (DimmerLights2.Clear == 0) ? 0 : 1;
 14536  14A8  3000               	movlw	0
 14537  14A9  0022               	movlb	2	; select bank2
 14538  14AA  1938               	btfsc	(_DimmerLights2^(0+256)+9),2
 14539  14AB  3001               	movlw	1
 14540  14AC  0020               	movlb	0	; select bank0
 14541  14AD  00E5               	movwf	setDimmerLights_Main@clear
 14542                           
 14543                           ;Dimmer_B1.c: 442: } else if (lights == 2) {
 14544  14AE  2CB9               	goto	l7446
 14545  14AF                     l7442:	
 14546  14AF  0866               	movf	setDimmerLights_Main@lights,w
 14547  14B0  3A02               	xorlw	2
 14548  14B1  1D03               	skipz
 14549  14B2  2CB9               	goto	l7446
 14550                           
 14551                           ;Dimmer_B1.c: 443: clear = (DimmerLights1.Clear == 0) ? 0 : 1;
 14552  14B3  3000               	movlw	0
 14553  14B4  0022               	movlb	2	; select bank2
 14554  14B5  1929               	btfsc	(_DimmerLights1^(0+256)+9),2
 14555  14B6  3001               	movlw	1
 14556  14B7  0020               	movlb	0	; select bank0
 14557  14B8  00E5               	movwf	setDimmerLights_Main@clear
 14558  14B9                     l7446:	
 14559                           
 14560                           ;Dimmer_B1.c: 444: }
 14561                           ;Dimmer_B1.c: 447: if (DimmerLights->Trigger == 1) {
 14562  14B9  0878               	movf	_DimmerLights,w
 14563  14BA  3E08               	addlw	8
 14564  14BB  0086               	movwf	6
 14565  14BC  3001               	movlw	1	; select bank2/3
 14566  14BD  0087               	movwf	7
 14567  14BE  1D01               	btfss	1,2
 14568  14BF  2CE0               	goto	l7458
 14569                           
 14570                           ;Dimmer_B1.c: 448: if (clear == 1) {
 14571  14C0  0865               	movf	setDimmerLights_Main@clear,w
 14572  14C1  3A01               	xorlw	1
 14573  14C2  1D03               	skipz
 14574  14C3  0008               	return
 14575                           
 14576                           ;Dimmer_B1.c: 449: DimmerLights->Trigger = 0;
 14577  14C4  0878               	movf	_DimmerLights,w
 14578  14C5  3E08               	addlw	8
 14579  14C6  0086               	movwf	6
 14580  14C7  3001               	movlw	1	; select bank2/3
 14581  14C8  0087               	movwf	7
 14582  14C9  1101               	bcf	1,2
 14583                           
 14584                           ;Dimmer_B1.c: 450: if (DimmerLights->Switch == 1) {
 14585  14CA  0878               	movf	_DimmerLights,w
 14586  14CB  3E08               	addlw	8
 14587  14CC  0086               	movwf	6
 14588  14CD  3001               	movlw	1	; select bank2/3
 14589  14CE  0087               	movwf	7
 14590  14CF  1C81               	btfss	1,1
 14591  14D0  2CD4               	goto	l7454
 14592                           
 14593                           ;Dimmer_B1.c: 451: setDimmerLights(lights, 1);
 14594  14D1  01A4               	clrf	setDimmerLights@status
 14595  14D2  0AA4               	incf	setDimmerLights@status,f
 14596  14D3  2CD6               	goto	L13
 14597  14D4                     l7454:	
 14598                           ;Dimmer_B1.c: 452: } else {
 14599                           
 14600                           
 14601                           ;Dimmer_B1.c: 453: setDimmerLights(lights, 0);
 14602  14D4  0020               	movlb	0	; select bank0
 14603  14D5  01A4               	clrf	setDimmerLights@status
 14604  14D6                     L13:	
 14605  14D6  0866               	movf	setDimmerLights_Main@lights,w
 14606  14D7  3197  2776         	fcall	_setDimmerLights
 14607                           
 14608                           ;Dimmer_B1.c: 454: }
 14609                           ;Dimmer_B1.c: 456: DimmerLights->Clear = 0;
 14610  14D9  0878               	movf	_DimmerLights,w
 14611  14DA  3E09               	addlw	9
 14612  14DB  0086               	movwf	6
 14613  14DC  3001               	movlw	1	; select bank2/3
 14614  14DD  0087               	movwf	7
 14615  14DE  1101               	bcf	1,2
 14616                           
 14617                           ;Dimmer_B1.c: 458: }
 14618                           ;Dimmer_B1.c: 459: } else {
 14619  14DF  0008               	return
 14620  14E0                     l7458:	
 14621                           
 14622                           ;Dimmer_B1.c: 460: if (DimmerLights->TriggerAdj == 1) {
 14623  14E0  0878               	movf	_DimmerLights,w
 14624  14E1  3E08               	addlw	8
 14625  14E2  0086               	movwf	6
 14626  14E3  3001               	movlw	1	; select bank2/3
 14627  14E4  0087               	movwf	7
 14628  14E5  1E01               	btfss	1,4
 14629  14E6  0008               	return
 14630                           
 14631                           ;Dimmer_B1.c: 461: if (clear == 1) {
 14632  14E7  0020               	movlb	0	; select bank0
 14633  14E8  0865               	movf	setDimmerLights_Main@clear,w
 14634  14E9  3A01               	xorlw	1
 14635  14EA  1D03               	skipz
 14636  14EB  0008               	return
 14637                           
 14638                           ;Dimmer_B1.c: 462: DimmerLights->TriggerAdj = 0;
 14639  14EC  0878               	movf	_DimmerLights,w
 14640  14ED  3E08               	addlw	8
 14641  14EE  0086               	movwf	6
 14642  14EF  3001               	movlw	1	; select bank2/3
 14643  14F0  0087               	movwf	7
 14644  14F1  1201               	bcf	1,4
 14645                           
 14646                           ;Dimmer_B1.c: 463: if (DimmerLights->AdjGo == 1) {
 14647  14F2  0878               	movf	_DimmerLights,w
 14648  14F3  3E08               	addlw	8
 14649  14F4  0086               	movwf	6
 14650  14F5  3001               	movlw	1	; select bank2/3
 14651  14F6  0087               	movwf	7
 14652  14F7  1D81               	btfss	1,3
 14653  14F8  2D08               	goto	l7466
 14654                           
 14655                           ;Dimmer_B1.c: 464: setDimmerLights_Adj(lights, 1);
 14656  14F9  01E2               	clrf	setDimmerLights_Adj@status
 14657  14FA  0AE2               	incf	setDimmerLights_Adj@status,f
 14658  14FB  0866               	movf	setDimmerLights_Main@lights,w
 14659  14FC  319E  2657  3194   	fcall	_setDimmerLights_Adj
 14660                           
 14661                           ;Dimmer_B1.c: 465: setBuz(1, 100);
 14662  14FF  3064               	movlw	100
 14663  1500  0020               	movlb	0	; select bank0
 14664  1501  00A9               	movwf	setBuz@time
 14665  1502  3000               	movlw	0
 14666  1503  00AA               	movwf	setBuz@time+1
 14667  1504  3001               	movlw	1
 14668  1505  3189  2137         	fcall	_setBuz
 14669                           
 14670                           ;Dimmer_B1.c: 466: } else {
 14671  1507  0008               	return
 14672  1508                     l7466:	
 14673                           
 14674                           ;Dimmer_B1.c: 467: setDimmerLights_Adj(lights, 0);
 14675  1508  0020               	movlb	0	; select bank0
 14676  1509  01E2               	clrf	setDimmerLights_Adj@status
 14677  150A  0866               	movf	setDimmerLights_Main@lights,w
 14678  150B  319E  2657         	fcall	_setDimmerLights_Adj
 14679  150D  0008               	return
 14680  150E                     __end_of_setDimmerLights_Main:	
 14681                           
 14682                           	psect	text83
 14683  1E57                     __ptext83:	
 14684 ;; *************** function _setDimmerLights_Adj *****************
 14685 ;; Defined at:
 14686 ;;		line 646 in file "../src/Dimmer_B1.c"
 14687 ;; Parameters:    Size  Location     Type
 14688 ;;  lights          1    wreg     unsigned char 
 14689 ;;  status          1   66[BANK0 ] unsigned char 
 14690 ;; Auto vars:     Size  Location     Type
 14691 ;;  lights          1   68[BANK0 ] unsigned char 
 14692 ;; Return value:  Size  Location     Type
 14693 ;;		None               void
 14694 ;; Registers used:
 14695 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14696 ;; Tracked objects:
 14697 ;;		On entry : 0/0
 14698 ;;		On exit  : 0/0
 14699 ;;		Unchanged: 0/0
 14700 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14701 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14702 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14703 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14704 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14705 ;;Total ram usage:        3 bytes
 14706 ;; Hardware stack levels used:    1
 14707 ;; Hardware stack levels required when called:    9
 14708 ;; This function calls:
 14709 ;;		_DimmerLightsPointSelect
 14710 ;;		_setLoad_StatusOff
 14711 ;;		_setRF_DimmerLights
 14712 ;;		_setTxData
 14713 ;; This function is called by:
 14714 ;;		_setDimmerLights_Main
 14715 ;; This function uses a non-reentrant model
 14716 ;;
 14717                           
 14718                           
 14719                           ;psect for function _setDimmerLights_Adj
 14720  1E57                     _setDimmerLights_Adj:	
 14721                           
 14722                           ;incstack = 0
 14723                           ; Regs used in _setDimmerLights_Adj: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14724                           ;setDimmerLights_Adj@lights stored from wreg
 14725  1E57  0020               	movlb	0	; select bank0
 14726  1E58  00E4               	movwf	setDimmerLights_Adj@lights
 14727                           
 14728                           ;Dimmer_B1.c: 647: DimmerLightsPointSelect(lights);
 14729  1E59  0864               	movf	setDimmerLights_Adj@lights,w
 14730  1E5A  31A7  2712  319E   	fcall	_DimmerLightsPointSelect
 14731                           
 14732                           ;Dimmer_B1.c: 648: if (status == 1) {
 14733  1E5D  0020               	movlb	0	; select bank0
 14734  1E5E  0862               	movf	setDimmerLights_Adj@status,w
 14735  1E5F  3A01               	xorlw	1
 14736  1E60  1D03               	skipz
 14737  1E61  2E6D               	goto	l6964
 14738                           
 14739                           ;Dimmer_B1.c: 649: DimmerLights->AdjFlag = 1;
 14740  1E62  0878               	movf	_DimmerLights,w
 14741  1E63  0086               	movwf	6
 14742  1E64  3001               	movlw	1	; select bank2/3
 14743  1E65  0087               	movwf	7
 14744  1E66  1581               	bsf	1,3
 14745                           
 14746                           ;Dimmer_B1.c: 650: DimmerLights->Signal = 1;
 14747  1E67  0878               	movf	_DimmerLights,w
 14748  1E68  0086               	movwf	6
 14749  1E69  3001               	movlw	1	; select bank2/3
 14750  1E6A  0087               	movwf	7
 14751  1E6B  1481               	bsf	1,1
 14752                           
 14753                           ;Dimmer_B1.c: 651: } else {
 14754  1E6C  0008               	return
 14755  1E6D                     l6964:	
 14756                           
 14757                           ;Dimmer_B1.c: 652: if (DimmerLights->AdjFlag == 1) {
 14758  1E6D  0878               	movf	_DimmerLights,w
 14759  1E6E  0086               	movwf	6
 14760  1E6F  3001               	movlw	1	; select bank2/3
 14761  1E70  0087               	movwf	7
 14762  1E71  1D81               	btfss	1,3
 14763  1E72  0008               	return
 14764                           
 14765                           ;Dimmer_B1.c: 654: DimmerLights->Signal = 0;
 14766  1E73  0878               	movf	_DimmerLights,w
 14767  1E74  0086               	movwf	6
 14768  1E75  3001               	movlw	1	; select bank2/3
 14769  1E76  0087               	movwf	7
 14770  1E77  1081               	bcf	1,1
 14771                           
 14772                           ;Dimmer_B1.c: 655: DimmerLights->AdjFlag = 0;
 14773  1E78  0878               	movf	_DimmerLights,w
 14774  1E79  0086               	movwf	6
 14775  1E7A  3001               	movlw	1	; select bank2/3
 14776  1E7B  0087               	movwf	7
 14777  1E7C  1181               	bcf	1,3
 14778                           
 14779                           ;Dimmer_B1.c: 656: setLoad_StatusOff(0, 1);
 14780  1E7D  01A0               	clrf	setLoad_StatusOff@command
 14781  1E7E  0AA0               	incf	setLoad_StatusOff@command,f
 14782  1E7F  3000               	movlw	0
 14783  1E80  319C  241B  319E   	fcall	_setLoad_StatusOff
 14784                           
 14785                           ;Dimmer_B1.c: 657: DimmerLights->MaxmumValue = DimmerLights->DimmingValue;
 14786  1E83  0878               	movf	_DimmerLights,w
 14787  1E84  3E04               	addlw	4
 14788  1E85  0086               	movwf	6
 14789  1E86  3001               	movlw	1	; select bank2/3
 14790  1E87  0087               	movwf	7
 14791  1E88  0801               	movf	1,w
 14792  1E89  0020               	movlb	0	; select bank0
 14793  1E8A  00E3               	movwf	??_setDimmerLights_Adj
 14794  1E8B  0878               	movf	_DimmerLights,w
 14795  1E8C  3E05               	addlw	5
 14796  1E8D  0086               	movwf	6
 14797  1E8E  3001               	movlw	1	; select bank2/3
 14798  1E8F  0087               	movwf	7
 14799  1E90  0863               	movf	??_setDimmerLights_Adj,w
 14800  1E91  0081               	movwf	1
 14801                           
 14802                           ;Dimmer_B1.c: 665: setRF_DimmerLights(lights, 1);
 14803  1E92  01DD               	clrf	setRF_DimmerLights@on
 14804  1E93  0ADD               	incf	setRF_DimmerLights@on,f
 14805  1E94  0864               	movf	setDimmerLights_Adj@lights,w
 14806  1E95  3193  2350  319E   	fcall	_setRF_DimmerLights
 14807                           
 14808                           ;Dimmer_B1.c: 666: setTxData(1);
 14809  1E98  3001               	movlw	1
 14810  1E99  318A  2263         	fcall	_setTxData
 14811  1E9B  0008               	return
 14812  1E9C                     __end_of_setDimmerLights_Adj:	
 14813                           
 14814                           	psect	text84
 14815  1C1B                     __ptext84:	
 14816 ;; *************** function _setLoad_StatusOff *****************
 14817 ;; Defined at:
 14818 ;;		line 284 in file "../src/OverLoad_B1.c"
 14819 ;; Parameters:    Size  Location     Type
 14820 ;;  lights          1    wreg     unsigned char 
 14821 ;;  command         1    0[BANK0 ] unsigned char 
 14822 ;; Auto vars:     Size  Location     Type
 14823 ;;  lights          1    1[BANK0 ] unsigned char 
 14824 ;; Return value:  Size  Location     Type
 14825 ;;		None               void
 14826 ;; Registers used:
 14827 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 14828 ;; Tracked objects:
 14829 ;;		On entry : 0/0
 14830 ;;		On exit  : 0/0
 14831 ;;		Unchanged: 0/0
 14832 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14833 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14834 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14835 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14836 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14837 ;;Total ram usage:        2 bytes
 14838 ;; Hardware stack levels used:    1
 14839 ;; Hardware stack levels required when called:    5
 14840 ;; This function calls:
 14841 ;;		Nothing
 14842 ;; This function is called by:
 14843 ;;		_setDimmerLights_ERROR
 14844 ;;		_setDimmerLights_Adj
 14845 ;; This function uses a non-reentrant model
 14846 ;;
 14847                           
 14848                           
 14849                           ;psect for function _setLoad_StatusOff
 14850  1C1B                     _setLoad_StatusOff:	
 14851                           
 14852                           ;incstack = 0
 14853                           ; Regs used in _setLoad_StatusOff: [wreg+fsr1l+fsr1h+status,2+status,0]
 14854                           ;setLoad_StatusOff@lights stored from wreg
 14855  1C1B  0020               	movlb	0	; select bank0
 14856  1C1C  00A1               	movwf	setLoad_StatusOff@lights
 14857                           
 14858                           ;OverLoad_B1.c: 285: Load->StatusOff = command;
 14859  1C1D  087B               	movf	_Load,w
 14860  1C1E  3E46               	addlw	70
 14861  1C1F  0086               	movwf	6
 14862  1C20  3002               	movlw	2	; select bank4/5
 14863  1C21  0087               	movwf	7
 14864  1C22  0820               	movf	setLoad_StatusOff@command,w
 14865  1C23  1081               	bcf	1,1
 14866  1C24  1D03               	skipz
 14867  1C25  1481               	bsf	1,1
 14868                           
 14869                           ;OverLoad_B1.c: 286: Load->SafeCount -= 2;
 14870  1C26  087B               	movf	_Load,w
 14871  1C27  3E42               	addlw	66
 14872  1C28  0086               	movwf	6
 14873  1C29  3002               	movlw	2	; select bank4/5
 14874  1C2A  0087               	movwf	7
 14875  1C2B  3002               	movlw	2
 14876  1C2C  0281               	subwf	1,f
 14877                           
 14878                           ;OverLoad_B1.c: 287: if (lights == 1) {
 14879  1C2D  0821               	movf	setLoad_StatusOff@lights,w
 14880  1C2E  3A01               	xorlw	1
 14881  1C2F  1D03               	skipz
 14882  1C30  2C37               	goto	l6466
 14883                           
 14884                           ;OverLoad_B1.c: 288: Load->Lights1Status = 0;
 14885  1C31  087B               	movf	_Load,w
 14886  1C32  3E43               	addlw	67
 14887  1C33  0086               	movwf	6
 14888  1C34  3002               	movlw	2	; select bank4/5
 14889  1C35  0087               	movwf	7
 14890  1C36  0181               	clrf	1
 14891  1C37                     l6466:	
 14892                           
 14893                           ;OverLoad_B1.c: 289: }
 14894                           ;OverLoad_B1.c: 290: if (lights == 2) {
 14895  1C37  0821               	movf	setLoad_StatusOff@lights,w
 14896  1C38  3A02               	xorlw	2
 14897  1C39  1D03               	skipz
 14898  1C3A  2C41               	goto	l6470
 14899                           
 14900                           ;OverLoad_B1.c: 291: Load->Lights2Status = 0;
 14901  1C3B  087B               	movf	_Load,w
 14902  1C3C  3E44               	addlw	68
 14903  1C3D  0086               	movwf	6
 14904  1C3E  3002               	movlw	2	; select bank4/5
 14905  1C3F  0087               	movwf	7
 14906  1C40  0181               	clrf	1
 14907  1C41                     l6470:	
 14908                           
 14909                           ;OverLoad_B1.c: 292: }
 14910                           ;OverLoad_B1.c: 293: if (lights == 3) {
 14911  1C41  0821               	movf	setLoad_StatusOff@lights,w
 14912  1C42  3A03               	xorlw	3
 14913  1C43  1D03               	skipz
 14914  1C44  0008               	return
 14915                           
 14916                           ;OverLoad_B1.c: 294: Load->Lights3Status = 0;
 14917  1C45  087B               	movf	_Load,w
 14918  1C46  3E45               	addlw	69
 14919  1C47  0086               	movwf	6
 14920  1C48  3002               	movlw	2	; select bank4/5
 14921  1C49  0087               	movwf	7
 14922  1C4A  0181               	clrf	1
 14923  1C4B  0008               	return
 14924  1C4C                     __end_of_setLoad_StatusOff:	
 14925                           
 14926                           	psect	text85
 14927  1776                     __ptext85:	
 14928 ;; *************** function _setDimmerLights *****************
 14929 ;; Defined at:
 14930 ;;		line 593 in file "../src/Dimmer_B1.c"
 14931 ;; Parameters:    Size  Location     Type
 14932 ;;  lights          1    wreg     unsigned char 
 14933 ;;  status          1    4[BANK0 ] unsigned char 
 14934 ;; Auto vars:     Size  Location     Type
 14935 ;;  lights          1    6[BANK0 ] unsigned char 
 14936 ;; Return value:  Size  Location     Type
 14937 ;;		None               void
 14938 ;; Registers used:
 14939 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14940 ;; Tracked objects:
 14941 ;;		On entry : 0/0
 14942 ;;		On exit  : 0/0
 14943 ;;		Unchanged: 0/0
 14944 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14945 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14946 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14947 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14948 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14949 ;;Total ram usage:        3 bytes
 14950 ;; Hardware stack levels used:    1
 14951 ;; Hardware stack levels required when called:    7
 14952 ;; This function calls:
 14953 ;;		_DimmerLightsPointSelect
 14954 ;;		_setLED
 14955 ;;		_setLoad_Count
 14956 ;;		_setLoad_StatusOn
 14957 ;;		_setMemory_GO
 14958 ;; This function is called by:
 14959 ;;		_setDimmerLights_Main
 14960 ;;		_setControl_Lights_Table
 14961 ;; This function uses a non-reentrant model
 14962 ;;
 14963                           
 14964                           
 14965                           ;psect for function _setDimmerLights
 14966  1776                     _setDimmerLights:	
 14967                           
 14968                           ;incstack = 0
 14969                           ; Regs used in _setDimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14970                           ;setDimmerLights@lights stored from wreg
 14971  1776  0020               	movlb	0	; select bank0
 14972  1777  00A6               	movwf	setDimmerLights@lights
 14973                           
 14974                           ;Dimmer_B1.c: 594: DimmerLightsPointSelect(lights);
 14975  1778  0826               	movf	setDimmerLights@lights,w
 14976  1779  31A7  2712  3197   	fcall	_DimmerLightsPointSelect
 14977                           
 14978                           ;Dimmer_B1.c: 595: Dimmer->Load = lights;
 14979  177C  0020               	movlb	0	; select bank0
 14980  177D  0826               	movf	setDimmerLights@lights,w
 14981  177E  00A5               	movwf	??_setDimmerLights
 14982  177F  0021               	movlb	1	; select bank1
 14983  1780  0A3A               	incf	_Dimmer^(0+128),w
 14984  1781  0086               	movwf	6
 14985  1782  0187               	clrf	7
 14986  1783  0020               	movlb	0	; select bank0
 14987  1784  0825               	movf	??_setDimmerLights,w
 14988  1785  0081               	movwf	1
 14989                           
 14990                           ;Dimmer_B1.c: 596: if (status == 1) {
 14991  1786  0824               	movf	setDimmerLights@status,w
 14992  1787  3A01               	xorlw	1
 14993  1788  1D03               	skipz
 14994  1789  2FD4               	goto	l6626
 14995                           
 14996                           ;Dimmer_B1.c: 597: DimmerLights->Status = 1;
 14997  178A  0878               	movf	_DimmerLights,w
 14998  178B  0086               	movwf	6
 14999  178C  3001               	movlw	1	; select bank2/3
 15000  178D  0087               	movwf	7
 15001  178E  1681               	bsf	1,5
 15002                           
 15003                           ;Dimmer_B1.c: 598: setLED(lights, 0);
 15004  178F  01A2               	clrf	setLED@command
 15005  1790  0826               	movf	setDimmerLights@lights,w
 15006  1791  3191  21C2  3197   	fcall	_setLED
 15007                           
 15008                           ;Dimmer_B1.c: 600: setLoad_Count(0);
 15009  1794  3000               	movlw	0
 15010  1795  3188  2000  3197   	fcall	_setLoad_Count
 15011                           
 15012                           ;Dimmer_B1.c: 602: DimmerLights->Signal = 1;
 15013  1798  0878               	movf	_DimmerLights,w
 15014  1799  0086               	movwf	6
 15015  179A  3001               	movlw	1	; select bank2/3
 15016  179B  0087               	movwf	7
 15017  179C  1481               	bsf	1,1
 15018                           
 15019                           ;Dimmer_B1.c: 603: DimmerLights->DimmingTimeValue = 7;
 15020  179D  3007               	movlw	7
 15021  179E  0020               	movlb	0	; select bank0
 15022  179F  00A5               	movwf	??_setDimmerLights
 15023  17A0  0878               	movf	_DimmerLights,w
 15024  17A1  3E02               	addlw	2
 15025  17A2  0086               	movwf	6
 15026  17A3  3001               	movlw	1	; select bank2/3
 15027  17A4  0087               	movwf	7
 15028  17A5  0825               	movf	??_setDimmerLights,w
 15029  17A6  0081               	movwf	1
 15030                           
 15031                           ;Dimmer_B1.c: 605: if (DimmerLights->StatusFlag == 0) {
 15032  17A7  0878               	movf	_DimmerLights,w
 15033  17A8  0086               	movwf	6
 15034  17A9  3001               	movlw	1	; select bank2/3
 15035  17AA  0087               	movwf	7
 15036  17AB  1B01               	btfsc	1,6
 15037  17AC  0008               	return
 15038                           
 15039                           ;Dimmer_B1.c: 606: DimmerLights->StatusFlag = 1;
 15040  17AD  0878               	movf	_DimmerLights,w
 15041  17AE  0086               	movwf	6
 15042  17AF  3001               	movlw	1	; select bank2/3
 15043  17B0  0087               	movwf	7
 15044  17B1  1701               	bsf	1,6
 15045                           
 15046                           ;Dimmer_B1.c: 607: setLoad_StatusOn(lights, 1);
 15047  17B2  01A0               	clrf	setLoad_StatusOn@command
 15048  17B3  0AA0               	incf	setLoad_StatusOn@command,f
 15049  17B4  0826               	movf	setDimmerLights@lights,w
 15050  17B5  319C  244C  3197   	fcall	_setLoad_StatusOn
 15051                           
 15052                           ;Dimmer_B1.c: 608: setMemory_GO(0);
 15053  17B8  3000               	movlw	0
 15054  17B9  3199  21D6         	fcall	_setMemory_GO
 15055                           
 15056                           ;Dimmer_B1.c: 611: DimmerLights->DimmingValue = DimmerLights->MaxmumValue;
 15057  17BB  0878               	movf	_DimmerLights,w
 15058  17BC  3E05               	addlw	5
 15059  17BD  0086               	movwf	6
 15060  17BE  3001               	movlw	1	; select bank2/3
 15061  17BF  0087               	movwf	7
 15062  17C0  0801               	movf	1,w
 15063  17C1  0020               	movlb	0	; select bank0
 15064  17C2  00A5               	movwf	??_setDimmerLights
 15065  17C3  0878               	movf	_DimmerLights,w
 15066  17C4  3E04               	addlw	4
 15067  17C5  0086               	movwf	6
 15068  17C6  3001               	movlw	1	; select bank2/3
 15069  17C7  0087               	movwf	7
 15070  17C8  0825               	movf	??_setDimmerLights,w
 15071  17C9  0081               	movwf	1
 15072                           
 15073                           ;Dimmer_B1.c: 615: DimmerLights->DimmingValue = ((char)((100-60)*0.8));
 15074  17CA  3020               	movlw	32
 15075  17CB  00A5               	movwf	??_setDimmerLights
 15076  17CC  0878               	movf	_DimmerLights,w
 15077  17CD  3E04               	addlw	4
 15078  17CE  0086               	movwf	6
 15079  17CF  3001               	movlw	1	; select bank2/3
 15080  17D0  0087               	movwf	7
 15081  17D1  0825               	movf	??_setDimmerLights,w
 15082  17D2  0081               	movwf	1
 15083                           
 15084                           ;Dimmer_B1.c: 617: }
 15085                           ;Dimmer_B1.c: 618: } else {
 15086  17D3  0008               	return
 15087  17D4                     l6626:	
 15088                           
 15089                           ;Dimmer_B1.c: 619: DimmerLights->Status = 0;
 15090  17D4  0878               	movf	_DimmerLights,w
 15091  17D5  0086               	movwf	6
 15092  17D6  3001               	movlw	1	; select bank2/3
 15093  17D7  0087               	movwf	7
 15094  17D8  1281               	bcf	1,5
 15095                           
 15096                           ;Dimmer_B1.c: 621: DimmerLights->DimmingValue = DimmerLights->MinimumValue;
 15097  17D9  0878               	movf	_DimmerLights,w
 15098  17DA  3E06               	addlw	6
 15099  17DB  0086               	movwf	6
 15100  17DC  3001               	movlw	1	; select bank2/3
 15101  17DD  0087               	movwf	7
 15102  17DE  0801               	movf	1,w
 15103  17DF  00A5               	movwf	??_setDimmerLights
 15104  17E0  0878               	movf	_DimmerLights,w
 15105  17E1  3E04               	addlw	4
 15106  17E2  0086               	movwf	6
 15107  17E3  3001               	movlw	1	; select bank2/3
 15108  17E4  0087               	movwf	7
 15109  17E5  0825               	movf	??_setDimmerLights,w
 15110  17E6  0081               	movwf	1
 15111                           
 15112                           ;Dimmer_B1.c: 628: DimmerLights->Signal = 1;
 15113  17E7  0878               	movf	_DimmerLights,w
 15114  17E8  0086               	movwf	6
 15115  17E9  3001               	movlw	1	; select bank2/3
 15116  17EA  0087               	movwf	7
 15117  17EB  1481               	bsf	1,1
 15118                           
 15119                           ;Dimmer_B1.c: 629: DimmerLights->AdjFlag = 0;
 15120  17EC  0878               	movf	_DimmerLights,w
 15121  17ED  0086               	movwf	6
 15122  17EE  3001               	movlw	1	; select bank2/3
 15123  17EF  0087               	movwf	7
 15124  17F0  1181               	bcf	1,3
 15125                           
 15126                           ;Dimmer_B1.c: 630: DimmerLights->AdjStatus = 0;
 15127  17F1  0878               	movf	_DimmerLights,w
 15128  17F2  0086               	movwf	6
 15129  17F3  3001               	movlw	1	; select bank2/3
 15130  17F4  0087               	movwf	7
 15131  17F5  1201               	bcf	1,4
 15132                           
 15133                           ;Dimmer_B1.c: 631: DimmerLights->DimmingTimeValue = 7;
 15134  17F6  3007               	movlw	7
 15135  17F7  00A5               	movwf	??_setDimmerLights
 15136  17F8  0878               	movf	_DimmerLights,w
 15137  17F9  3E02               	addlw	2
 15138  17FA  0086               	movwf	6
 15139  17FB  3001               	movlw	1	; select bank2/3
 15140  17FC  0087               	movwf	7
 15141  17FD  0825               	movf	??_setDimmerLights,w
 15142  17FE  0081               	movwf	1
 15143  17FF  0008               	return
 15144  1800                     __end_of_setDimmerLights:	
 15145                           
 15146                           	psect	text86
 15147  1C4C                     __ptext86:	
 15148 ;; *************** function _setLoad_StatusOn *****************
 15149 ;; Defined at:
 15150 ;;		line 269 in file "../src/OverLoad_B1.c"
 15151 ;; Parameters:    Size  Location     Type
 15152 ;;  lights          1    wreg     unsigned char 
 15153 ;;  command         1    0[BANK0 ] unsigned char 
 15154 ;; Auto vars:     Size  Location     Type
 15155 ;;  lights          1    1[BANK0 ] unsigned char 
 15156 ;; Return value:  Size  Location     Type
 15157 ;;		None               void
 15158 ;; Registers used:
 15159 ;;		wreg, fsr1l, fsr1h
 15160 ;; Tracked objects:
 15161 ;;		On entry : 0/0
 15162 ;;		On exit  : 0/0
 15163 ;;		Unchanged: 0/0
 15164 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15165 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15166 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15167 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15168 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15169 ;;Total ram usage:        2 bytes
 15170 ;; Hardware stack levels used:    1
 15171 ;; Hardware stack levels required when called:    5
 15172 ;; This function calls:
 15173 ;;		Nothing
 15174 ;; This function is called by:
 15175 ;;		_setDimmerLights
 15176 ;; This function uses a non-reentrant model
 15177 ;;
 15178                           
 15179                           
 15180                           ;psect for function _setLoad_StatusOn
 15181  1C4C                     _setLoad_StatusOn:	
 15182                           
 15183                           ;incstack = 0
 15184                           ; Regs used in _setLoad_StatusOn: [wregfsr1]
 15185                           ;setLoad_StatusOn@lights stored from wreg
 15186  1C4C  0020               	movlb	0	; select bank0
 15187  1C4D  00A1               	movwf	setLoad_StatusOn@lights
 15188                           
 15189                           ;OverLoad_B1.c: 270: Load->GO = 1;
 15190  1C4E  087B               	movf	_Load,w
 15191  1C4F  0086               	movwf	6
 15192  1C50  3002               	movlw	2	; select bank4/5
 15193  1C51  0087               	movwf	7
 15194  1C52  1481               	bsf	1,1
 15195                           
 15196                           ;OverLoad_B1.c: 271: Load->StatusOn = command;
 15197  1C53  087B               	movf	_Load,w
 15198  1C54  3E46               	addlw	70
 15199  1C55  0086               	movwf	6
 15200  1C56  3002               	movlw	2	; select bank4/5
 15201  1C57  0087               	movwf	7
 15202  1C58  0820               	movf	setLoad_StatusOn@command,w
 15203  1C59  1001               	bcf	1,0
 15204  1C5A  1D03               	skipz
 15205  1C5B  1401               	bsf	1,0
 15206                           
 15207                           ;OverLoad_B1.c: 273: if (lights == 1) {
 15208  1C5C  0821               	movf	setLoad_StatusOn@lights,w
 15209  1C5D  3A01               	xorlw	1
 15210  1C5E  1D03               	skipz
 15211  1C5F  2C67               	goto	l6538
 15212                           
 15213                           ;OverLoad_B1.c: 274: Load->Lights1Status = 1;
 15214  1C60  087B               	movf	_Load,w
 15215  1C61  3E43               	addlw	67
 15216  1C62  0086               	movwf	6
 15217  1C63  3002               	movlw	2	; select bank4/5
 15218  1C64  0087               	movwf	7
 15219  1C65  0181               	clrf	1
 15220  1C66  0A81               	incf	1,f
 15221  1C67                     l6538:	
 15222                           
 15223                           ;OverLoad_B1.c: 275: }
 15224                           ;OverLoad_B1.c: 276: if (lights == 2) {
 15225  1C67  0821               	movf	setLoad_StatusOn@lights,w
 15226  1C68  3A02               	xorlw	2
 15227  1C69  1D03               	skipz
 15228  1C6A  2C72               	goto	l6542
 15229                           
 15230                           ;OverLoad_B1.c: 277: Load->Lights2Status = 1;
 15231  1C6B  087B               	movf	_Load,w
 15232  1C6C  3E44               	addlw	68
 15233  1C6D  0086               	movwf	6
 15234  1C6E  3002               	movlw	2	; select bank4/5
 15235  1C6F  0087               	movwf	7
 15236  1C70  0181               	clrf	1
 15237  1C71  0A81               	incf	1,f
 15238  1C72                     l6542:	
 15239                           
 15240                           ;OverLoad_B1.c: 278: }
 15241                           ;OverLoad_B1.c: 279: if (lights == 3) {
 15242  1C72  0821               	movf	setLoad_StatusOn@lights,w
 15243  1C73  3A03               	xorlw	3
 15244  1C74  1D03               	skipz
 15245  1C75  0008               	return
 15246                           
 15247                           ;OverLoad_B1.c: 280: Load->Lights3Status = 1;
 15248  1C76  087B               	movf	_Load,w
 15249  1C77  3E45               	addlw	69
 15250  1C78  0086               	movwf	6
 15251  1C79  3002               	movlw	2	; select bank4/5
 15252  1C7A  0087               	movwf	7
 15253  1C7B  0181               	clrf	1
 15254  1C7C  0A81               	incf	1,f
 15255  1C7D  0008               	return
 15256  1C7E                     __end_of_setLoad_StatusOn:	
 15257                           
 15258                           	psect	text87
 15259  0800                     __ptext87:	
 15260 ;; *************** function _setLoad_Count *****************
 15261 ;; Defined at:
 15262 ;;		line 254 in file "../src/OverLoad_B1.c"
 15263 ;; Parameters:    Size  Location     Type
 15264 ;;  command         1    wreg     unsigned char 
 15265 ;; Auto vars:     Size  Location     Type
 15266 ;;  command         1    1[BANK0 ] unsigned char 
 15267 ;; Return value:  Size  Location     Type
 15268 ;;		None               void
 15269 ;; Registers used:
 15270 ;;		wreg, fsr1l, fsr1h
 15271 ;; Tracked objects:
 15272 ;;		On entry : 0/0
 15273 ;;		On exit  : 0/0
 15274 ;;		Unchanged: 0/0
 15275 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15276 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15277 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15278 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15279 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15280 ;;Total ram usage:        2 bytes
 15281 ;; Hardware stack levels used:    1
 15282 ;; Hardware stack levels required when called:    5
 15283 ;; This function calls:
 15284 ;;		Nothing
 15285 ;; This function is called by:
 15286 ;;		_setDimmerLights
 15287 ;; This function uses a non-reentrant model
 15288 ;;
 15289                           
 15290                           
 15291                           ;psect for function _setLoad_Count
 15292  0800                     _setLoad_Count:	
 15293                           
 15294                           ;incstack = 0
 15295                           ; Regs used in _setLoad_Count: [wregfsr1]
 15296                           ;setLoad_Count@command stored from wreg
 15297  0800  0020               	movlb	0	; select bank0
 15298  0801  00A1               	movwf	setLoad_Count@command
 15299                           
 15300                           ;OverLoad_B1.c: 255: Load->Count = command;
 15301  0802  0821               	movf	setLoad_Count@command,w
 15302  0803  00A0               	movwf	??_setLoad_Count
 15303  0804  087B               	movf	_Load,w
 15304  0805  3E3A               	addlw	58
 15305  0806  0086               	movwf	6
 15306  0807  3002               	movlw	2	; select bank4/5
 15307  0808  0087               	movwf	7
 15308  0809  0820               	movf	??_setLoad_Count,w
 15309  080A  0081               	movwf	1
 15310                           
 15311                           ;OverLoad_B1.c: 256: Load->SafeCount = command;
 15312  080B  0821               	movf	setLoad_Count@command,w
 15313  080C  00A0               	movwf	??_setLoad_Count
 15314  080D  087B               	movf	_Load,w
 15315  080E  3E42               	addlw	66
 15316  080F  0086               	movwf	6
 15317  0810  3002               	movlw	2	; select bank4/5
 15318  0811  0087               	movwf	7
 15319  0812  0820               	movf	??_setLoad_Count,w
 15320  0813  0081               	movwf	1
 15321  0814  0008               	return
 15322  0815                     __end_of_setLoad_Count:	
 15323                           
 15324                           	psect	text88
 15325  11C2                     __ptext88:	
 15326 ;; *************** function _setLED *****************
 15327 ;; Defined at:
 15328 ;;		line 74 in file "../src/LED_B1.c"
 15329 ;; Parameters:    Size  Location     Type
 15330 ;;  led             1    wreg     unsigned char 
 15331 ;;  command         1    2[BANK0 ] unsigned char 
 15332 ;; Auto vars:     Size  Location     Type
 15333 ;;  led             1    3[BANK0 ] unsigned char 
 15334 ;; Return value:  Size  Location     Type
 15335 ;;		None               void
 15336 ;; Registers used:
 15337 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15338 ;; Tracked objects:
 15339 ;;		On entry : 0/0
 15340 ;;		On exit  : 0/0
 15341 ;;		Unchanged: 0/0
 15342 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15343 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15344 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15345 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15346 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15347 ;;Total ram usage:        2 bytes
 15348 ;; Hardware stack levels used:    1
 15349 ;; Hardware stack levels required when called:    6
 15350 ;; This function calls:
 15351 ;;		_LedPointSelect
 15352 ;; This function is called by:
 15353 ;;		_setDimmerLights_ERROR
 15354 ;;		_setDimmerLights
 15355 ;;		_setLED_Initialization
 15356 ;;		_setLoad_Exceptions
 15357 ;;		_setOverTemp_Exceptions
 15358 ;;		_setSw_Initialization
 15359 ;; This function uses a non-reentrant model
 15360 ;;
 15361                           
 15362                           
 15363                           ;psect for function _setLED
 15364  11C2                     _setLED:	
 15365                           
 15366                           ;incstack = 0
 15367                           ; Regs used in _setLED: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15368                           ;setLED@led stored from wreg
 15369  11C2  0020               	movlb	0	; select bank0
 15370  11C3  00A3               	movwf	setLED@led
 15371                           
 15372                           ;LED_B1.c: 76: LedPointSelect(led);
 15373  11C4  0823               	movf	setLED@led,w
 15374  11C5  319A  2258  3191   	fcall	_LedPointSelect
 15375                           
 15376                           ;LED_B1.c: 77: if(command == 0)
 15377  11C8  0020               	movlb	0	; select bank0
 15378  11C9  08A2               	movf	setLED@command,f
 15379  11CA  1D03               	skipz
 15380  11CB  29DE               	goto	l6496
 15381                           
 15382                           ;LED_B1.c: 78: {
 15383                           ;LED_B1.c: 80: if(led == 1)
 15384  11CC  0823               	movf	setLED@led,w
 15385  11CD  3A01               	xorlw	1
 15386  11CE  1D03               	skipz
 15387  11CF  29D2               	goto	l6488
 15388                           
 15389                           ;LED_B1.c: 81: {
 15390                           ;LED_B1.c: 85: RA3=1;
 15391  11D0  158C               	bsf	12,3	;volatile
 15392                           
 15393                           ;LED_B1.c: 87: }
 15394  11D1  0008               	return
 15395  11D2                     l6488:	
 15396                           
 15397                           ;LED_B1.c: 90: else if(led == 2)
 15398  11D2  0823               	movf	setLED@led,w
 15399  11D3  3A02               	xorlw	2
 15400  11D4  1D03               	skipz
 15401  11D5  29D8               	goto	l6492
 15402                           
 15403                           ;LED_B1.c: 91: {
 15404                           ;LED_B1.c: 95: RC7=1;
 15405  11D6  178E               	bsf	14,7	;volatile
 15406                           
 15407                           ;LED_B1.c: 97: }
 15408  11D7  0008               	return
 15409  11D8                     l6492:	
 15410                           
 15411                           ;LED_B1.c: 110: else if(led == 99)
 15412  11D8  0823               	movf	setLED@led,w
 15413  11D9  3A63               	xorlw	99
 15414  11DA  1D03               	skipz
 15415  11DB  0008               	return
 15416                           
 15417                           ;LED_B1.c: 111: {
 15418                           ;LED_B1.c: 115: RB5=1;
 15419  11DC  168D               	bsf	13,5	;volatile
 15420                           
 15421                           ;LED_B1.c: 117: }
 15422                           ;LED_B1.c: 119: }
 15423  11DD  0008               	return
 15424  11DE                     l6496:	
 15425                           
 15426                           ;LED_B1.c: 120: else if(command == 1)
 15427  11DE  0822               	movf	setLED@command,w
 15428  11DF  3A01               	xorlw	1
 15429  11E0  1D03               	skipz
 15430  11E1  29F4               	goto	l6510
 15431                           
 15432                           ;LED_B1.c: 121: {
 15433                           ;LED_B1.c: 123: if(led == 1)
 15434  11E2  0823               	movf	setLED@led,w
 15435  11E3  3A01               	xorlw	1
 15436  11E4  1D03               	skipz
 15437  11E5  29E8               	goto	l6502
 15438                           
 15439                           ;LED_B1.c: 124: {
 15440                           ;LED_B1.c: 128: RA3=0;
 15441  11E6  118C               	bcf	12,3	;volatile
 15442                           
 15443                           ;LED_B1.c: 130: }
 15444  11E7  0008               	return
 15445  11E8                     l6502:	
 15446                           
 15447                           ;LED_B1.c: 133: else if(led == 2)
 15448  11E8  0823               	movf	setLED@led,w
 15449  11E9  3A02               	xorlw	2
 15450  11EA  1D03               	skipz
 15451  11EB  29EE               	goto	l6506
 15452                           
 15453                           ;LED_B1.c: 134: {
 15454                           ;LED_B1.c: 138: RC7=0;
 15455  11EC  138E               	bcf	14,7	;volatile
 15456                           
 15457                           ;LED_B1.c: 140: }
 15458  11ED  0008               	return
 15459  11EE                     l6506:	
 15460                           
 15461                           ;LED_B1.c: 153: else if(led == 99)
 15462  11EE  0823               	movf	setLED@led,w
 15463  11EF  3A63               	xorlw	99
 15464  11F0  1D03               	skipz
 15465  11F1  0008               	return
 15466                           
 15467                           ;LED_B1.c: 154: {
 15468                           ;LED_B1.c: 158: RB5=0;
 15469  11F2  128D               	bcf	13,5	;volatile
 15470                           
 15471                           ;LED_B1.c: 160: }
 15472                           ;LED_B1.c: 162: }
 15473  11F3  0008               	return
 15474  11F4                     l6510:	
 15475                           
 15476                           ;LED_B1.c: 163: else if(command == 10)
 15477  11F4  0822               	movf	setLED@command,w
 15478  11F5  3A0A               	xorlw	10
 15479  11F6  1D03               	skipz
 15480  11F7  2A16               	goto	l6526
 15481                           
 15482                           ;LED_B1.c: 164: {
 15483                           ;LED_B1.c: 165: LED->GO=0;
 15484  11F8  0021               	movlb	1	; select bank1
 15485  11F9  083E               	movf	_LED^(0+128),w
 15486  11FA  0086               	movwf	6
 15487  11FB  0187               	clrf	7
 15488  11FC  1081               	bcf	1,1
 15489                           
 15490                           ;LED_B1.c: 166: LED->Time=0;
 15491  11FD  0A3E               	incf	_LED^(0+128),w
 15492  11FE  0086               	movwf	6
 15493  11FF  0187               	clrf	7
 15494  1200  3000               	movlw	0
 15495  1201  3FC0               	movwi [0]fsr1
 15496  1202  3FC1               	movwi [1]fsr1
 15497                           
 15498                           ;LED_B1.c: 168: if(led == 1)
 15499  1203  0020               	movlb	0	; select bank0
 15500  1204  0823               	movf	setLED@led,w
 15501  1205  3A01               	xorlw	1
 15502  1206  1D03               	skipz
 15503  1207  2A0A               	goto	l6518
 15504                           
 15505                           ;LED_B1.c: 169: {
 15506                           ;LED_B1.c: 173: RA3=1;
 15507  1208  158C               	bsf	12,3	;volatile
 15508                           
 15509                           ;LED_B1.c: 175: }
 15510  1209  0008               	return
 15511  120A                     l6518:	
 15512                           
 15513                           ;LED_B1.c: 178: else if(led == 2)
 15514  120A  0823               	movf	setLED@led,w
 15515  120B  3A02               	xorlw	2
 15516  120C  1D03               	skipz
 15517  120D  2A10               	goto	l6522
 15518                           
 15519                           ;LED_B1.c: 179: {
 15520                           ;LED_B1.c: 183: RC7=1;
 15521  120E  178E               	bsf	14,7	;volatile
 15522                           
 15523                           ;LED_B1.c: 185: }
 15524  120F  0008               	return
 15525  1210                     l6522:	
 15526                           
 15527                           ;LED_B1.c: 198: else if(led == 99)
 15528  1210  0823               	movf	setLED@led,w
 15529  1211  3A63               	xorlw	99
 15530  1212  1D03               	skipz
 15531  1213  0008               	return
 15532                           
 15533                           ;LED_B1.c: 199: {
 15534                           ;LED_B1.c: 203: RB5=1;
 15535  1214  168D               	bsf	13,5	;volatile
 15536                           
 15537                           ;LED_B1.c: 205: }
 15538                           ;LED_B1.c: 207: }
 15539  1215  0008               	return
 15540  1216                     l6526:	
 15541                           
 15542                           ;LED_B1.c: 208: else if(command == 11)
 15543  1216  0822               	movf	setLED@command,w
 15544  1217  3A0B               	xorlw	11
 15545  1218  1D03               	skipz
 15546  1219  0008               	return
 15547                           
 15548                           ;LED_B1.c: 209: {
 15549                           ;LED_B1.c: 210: LED->GO=1;
 15550  121A  0021               	movlb	1	; select bank1
 15551  121B  083E               	movf	_LED^(0+128),w
 15552  121C  0086               	movwf	6
 15553  121D  0187               	clrf	7
 15554  121E  1481               	bsf	1,1
 15555  121F  0008               	return
 15556  1220                     __end_of_setLED:	
 15557                           
 15558                           	psect	text89
 15559  1A58                     __ptext89:	
 15560 ;; *************** function _LedPointSelect *****************
 15561 ;; Defined at:
 15562 ;;		line 7 in file "../src/LED_B1.c"
 15563 ;; Parameters:    Size  Location     Type
 15564 ;;  led             1    wreg     unsigned char 
 15565 ;; Auto vars:     Size  Location     Type
 15566 ;;  led             1    1[BANK0 ] unsigned char 
 15567 ;; Return value:  Size  Location     Type
 15568 ;;		None               void
 15569 ;; Registers used:
 15570 ;;		wreg
 15571 ;; Tracked objects:
 15572 ;;		On entry : 0/0
 15573 ;;		On exit  : 0/0
 15574 ;;		Unchanged: 0/0
 15575 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15576 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15577 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15578 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15579 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15580 ;;Total ram usage:        2 bytes
 15581 ;; Hardware stack levels used:    1
 15582 ;; Hardware stack levels required when called:    5
 15583 ;; This function calls:
 15584 ;;		Nothing
 15585 ;; This function is called by:
 15586 ;;		_setLED_Initialization
 15587 ;;		_setLED
 15588 ;;		_setLED_Main
 15589 ;; This function uses a non-reentrant model
 15590 ;;
 15591                           
 15592                           
 15593                           ;psect for function _LedPointSelect
 15594  1A58                     _LedPointSelect:	
 15595                           
 15596                           ;incstack = 0
 15597                           ; Regs used in _LedPointSelect: [wreg]
 15598                           ;LedPointSelect@led stored from wreg
 15599  1A58  0020               	movlb	0	; select bank0
 15600  1A59  00A1               	movwf	LedPointSelect@led
 15601                           
 15602                           ;LED_B1.c: 10: if(led == 1)
 15603  1A5A  0821               	movf	LedPointSelect@led,w
 15604  1A5B  3A01               	xorlw	1
 15605  1A5C  1D03               	skipz
 15606  1A5D  2A64               	goto	l6290
 15607                           
 15608                           ;LED_B1.c: 11: {
 15609                           ;LED_B1.c: 12: LED=&VarLED1;
 15610  1A5E  30DC               	movlw	_VarLED1& (0+255)
 15611  1A5F  00A0               	movwf	??_LedPointSelect
 15612  1A60  0820               	movf	??_LedPointSelect,w
 15613  1A61  0021               	movlb	1	; select bank1
 15614  1A62  00BE               	movwf	_LED^(0+128)
 15615                           
 15616                           ;LED_B1.c: 13: }
 15617  1A63  0008               	return
 15618  1A64                     l6290:	
 15619                           
 15620                           ;LED_B1.c: 16: else if(led == 2)
 15621  1A64  0020               	movlb	0	; select bank0
 15622  1A65  0821               	movf	LedPointSelect@led,w
 15623  1A66  3A02               	xorlw	2
 15624  1A67  1D03               	skipz
 15625  1A68  2A6F               	goto	l6294
 15626                           
 15627                           ;LED_B1.c: 17: {
 15628                           ;LED_B1.c: 18: LED=&VarLED2;
 15629  1A69  30E0               	movlw	_VarLED2& (0+255)
 15630  1A6A  00A0               	movwf	??_LedPointSelect
 15631  1A6B  0820               	movf	??_LedPointSelect,w
 15632  1A6C  0021               	movlb	1	; select bank1
 15633  1A6D  00BE               	movwf	_LED^(0+128)
 15634                           
 15635                           ;LED_B1.c: 19: }
 15636  1A6E  0008               	return
 15637  1A6F                     l6294:	
 15638                           
 15639                           ;LED_B1.c: 28: else if(led == 99)
 15640  1A6F  0020               	movlb	0	; select bank0
 15641  1A70  0821               	movf	LedPointSelect@led,w
 15642  1A71  3A63               	xorlw	99
 15643  1A72  1D03               	skipz
 15644  1A73  0008               	return
 15645                           
 15646                           ;LED_B1.c: 29: {
 15647                           ;LED_B1.c: 30: LED=&VarErrLED;
 15648  1A74  30D8               	movlw	_VarErrLED& (0+255)
 15649  1A75  00A0               	movwf	??_LedPointSelect
 15650  1A76  0820               	movf	??_LedPointSelect,w
 15651  1A77  0021               	movlb	1	; select bank1
 15652  1A78  00BE               	movwf	_LED^(0+128)
 15653  1A79  0008               	return
 15654  1A7A                     __end_of_LedPointSelect:	
 15655                           
 15656                           	psect	text90
 15657  27D0                     __ptext90:	
 15658 ;; *************** function _DimmerLights_Close *****************
 15659 ;; Defined at:
 15660 ;;		line 396 in file "../src/Dimmer_B1.c"
 15661 ;; Parameters:    Size  Location     Type
 15662 ;;		None
 15663 ;; Auto vars:     Size  Location     Type
 15664 ;;		None
 15665 ;; Return value:  Size  Location     Type
 15666 ;;		None               void
 15667 ;; Registers used:
 15668 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15669 ;; Tracked objects:
 15670 ;;		On entry : 0/0
 15671 ;;		On exit  : 0/0
 15672 ;;		Unchanged: 0/0
 15673 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15674 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15675 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15676 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15677 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15678 ;;Total ram usage:        0 bytes
 15679 ;; Hardware stack levels used:    1
 15680 ;; Hardware stack levels required when called:    6
 15681 ;; This function calls:
 15682 ;;		_getDimmerLights_StatusFlag
 15683 ;;		_setLoad_GO
 15684 ;;		_setMemory_GO
 15685 ;; This function is called by:
 15686 ;;		_DimmerLights_Main
 15687 ;; This function uses a non-reentrant model
 15688 ;;
 15689                           
 15690                           
 15691                           ;psect for function _DimmerLights_Close
 15692  27D0                     _DimmerLights_Close:	
 15693                           
 15694                           ;Dimmer_B1.c: 397: if (Dimmer->Detect == 1) {
 15695                           
 15696                           ;incstack = 0
 15697                           ; Regs used in _DimmerLights_Close: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15698  27D0  0021               	movlb	1	; select bank1
 15699  27D1  083A               	movf	_Dimmer^(0+128),w
 15700  27D2  0086               	movwf	6
 15701  27D3  0187               	clrf	7
 15702  27D4  1C01               	btfss	1,0
 15703  27D5  0008               	return
 15704                           
 15705                           ;Dimmer_B1.c: 398: Dimmer->Detect = 0;
 15706  27D6  083A               	movf	_Dimmer^(0+128),w
 15707  27D7  0086               	movwf	6
 15708  27D8  0187               	clrf	7
 15709  27D9  1001               	bcf	1,0
 15710                           
 15711                           ;Dimmer_B1.c: 399: if (getDimmerLights_StatusFlag() == 0) {
 15712  27DA  31A6  26DE  31A7   	fcall	_getDimmerLights_StatusFlag
 15713  27DD  3800               	iorlw	0
 15714  27DE  1D03               	skipz
 15715  27DF  0008               	return
 15716                           
 15717                           ;Dimmer_B1.c: 400: setLoad_GO(0);
 15718  27E0  3000               	movlw	0
 15719  27E1  31A5  255D  31A7   	fcall	_setLoad_GO
 15720                           
 15721                           ;Dimmer_B1.c: 401: setMemory_GO(1);
 15722  27E4  3001               	movlw	1
 15723  27E5  3199  21D6         	fcall	_setMemory_GO
 15724  27E7  0008               	return
 15725  27E8                     __end_of_DimmerLights_Close:	
 15726                           
 15727                           	psect	text91
 15728  19D6                     __ptext91:	
 15729 ;; *************** function _setMemory_GO *****************
 15730 ;; Defined at:
 15731 ;;		line 882 in file "../src/MCU_B1.c"
 15732 ;; Parameters:    Size  Location     Type
 15733 ;;  command         1    wreg     unsigned char 
 15734 ;; Auto vars:     Size  Location     Type
 15735 ;;  command         1    2[BANK0 ] unsigned char 
 15736 ;; Return value:  Size  Location     Type
 15737 ;;		None               void
 15738 ;; Registers used:
 15739 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 15740 ;; Tracked objects:
 15741 ;;		On entry : 0/0
 15742 ;;		On exit  : 0/0
 15743 ;;		Unchanged: 0/0
 15744 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15745 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15746 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15747 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15748 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15749 ;;Total ram usage:        3 bytes
 15750 ;; Hardware stack levels used:    1
 15751 ;; Hardware stack levels required when called:    5
 15752 ;; This function calls:
 15753 ;;		Nothing
 15754 ;; This function is called by:
 15755 ;;		_DimmerLights_Close
 15756 ;;		_setDimmerLights
 15757 ;; This function uses a non-reentrant model
 15758 ;;
 15759                           
 15760                           
 15761                           ;psect for function _setMemory_GO
 15762  19D6                     _setMemory_GO:	
 15763                           
 15764                           ;incstack = 0
 15765                           ; Regs used in _setMemory_GO: [wreg+fsr1l+fsr1h+status,2+status,0]
 15766                           ;setMemory_GO@command stored from wreg
 15767  19D6  0020               	movlb	0	; select bank0
 15768  19D7  00A2               	movwf	setMemory_GO@command
 15769                           
 15770                           ;MCU_B1.c: 883: Memory->GO = command;
 15771  19D8  0021               	movlb	1	; select bank1
 15772  19D9  086E               	movf	_Memory^(0+128),w
 15773  19DA  3E24               	addlw	36
 15774  19DB  0086               	movwf	6
 15775  19DC  3002               	movlw	2	; select bank4/5
 15776  19DD  0087               	movwf	7
 15777  19DE  0020               	movlb	0	; select bank0
 15778  19DF  0822               	movf	setMemory_GO@command,w
 15779  19E0  1081               	bcf	1,1
 15780  19E1  1D03               	skipz
 15781  19E2  1481               	bsf	1,1
 15782                           
 15783                           ;MCU_B1.c: 884: if (command == 0) {
 15784  19E3  08A2               	movf	setMemory_GO@command,f
 15785  19E4  1D03               	skipz
 15786  19E5  0008               	return
 15787                           
 15788                           ;MCU_B1.c: 885: Memory->Time = command;
 15789  19E6  0822               	movf	setMemory_GO@command,w
 15790  19E7  00A0               	movwf	??_setMemory_GO
 15791  19E8  01A1               	clrf	??_setMemory_GO+1
 15792  19E9  0021               	movlb	1	; select bank1
 15793  19EA  086E               	movf	_Memory^(0+128),w
 15794  19EB  3E22               	addlw	34
 15795  19EC  0086               	movwf	6
 15796  19ED  3002               	movlw	2	; select bank4/5
 15797  19EE  0087               	movwf	7
 15798  19EF  0020               	movlb	0	; select bank0
 15799  19F0  0820               	movf	??_setMemory_GO,w
 15800  19F1  3FC0               	movwi [0]fsr1
 15801  19F2  0821               	movf	??_setMemory_GO+1,w
 15802  19F3  3FC1               	movwi [1]fsr1
 15803  19F4  0008               	return
 15804  19F5                     __end_of_setMemory_GO:	
 15805                           
 15806                           	psect	text92
 15807  255D                     __ptext92:	
 15808 ;; *************** function _setLoad_GO *****************
 15809 ;; Defined at:
 15810 ;;		line 265 in file "../src/OverLoad_B1.c"
 15811 ;; Parameters:    Size  Location     Type
 15812 ;;  command         1    wreg     unsigned char 
 15813 ;; Auto vars:     Size  Location     Type
 15814 ;;  command         1    0[BANK0 ] unsigned char 
 15815 ;; Return value:  Size  Location     Type
 15816 ;;		None               void
 15817 ;; Registers used:
 15818 ;;		wreg, fsr1l, fsr1h
 15819 ;; Tracked objects:
 15820 ;;		On entry : 0/0
 15821 ;;		On exit  : 0/0
 15822 ;;		Unchanged: 0/0
 15823 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15824 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15825 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15826 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15827 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15828 ;;Total ram usage:        1 bytes
 15829 ;; Hardware stack levels used:    1
 15830 ;; Hardware stack levels required when called:    5
 15831 ;; This function calls:
 15832 ;;		Nothing
 15833 ;; This function is called by:
 15834 ;;		_DimmerLights_Close
 15835 ;; This function uses a non-reentrant model
 15836 ;;
 15837                           
 15838                           
 15839                           ;psect for function _setLoad_GO
 15840  255D                     _setLoad_GO:	
 15841                           
 15842                           ;incstack = 0
 15843                           ; Regs used in _setLoad_GO: [wregfsr1]
 15844                           ;setLoad_GO@command stored from wreg
 15845  255D  0020               	movlb	0	; select bank0
 15846  255E  00A0               	movwf	setLoad_GO@command
 15847                           
 15848                           ;OverLoad_B1.c: 266: Load->GO = command;
 15849  255F  087B               	movf	_Load,w
 15850  2560  0086               	movwf	6
 15851  2561  3002               	movlw	2	; select bank4/5
 15852  2562  0087               	movwf	7
 15853  2563  0820               	movf	setLoad_GO@command,w
 15854  2564  1081               	bcf	1,1
 15855  2565  1D03               	skipz
 15856  2566  1481               	bsf	1,1
 15857  2567  0008               	return
 15858  2568                     __end_of_setLoad_GO:	
 15859                           
 15860                           	psect	text93
 15861  26DE                     __ptext93:	
 15862 ;; *************** function _getDimmerLights_StatusFlag *****************
 15863 ;; Defined at:
 15864 ;;		line 475 in file "../src/Dimmer_B1.c"
 15865 ;; Parameters:    Size  Location     Type
 15866 ;;		None
 15867 ;; Auto vars:     Size  Location     Type
 15868 ;;  Status          1    1[BANK0 ] unsigned char 
 15869 ;; Return value:  Size  Location     Type
 15870 ;;                  1    wreg      unsigned char 
 15871 ;; Registers used:
 15872 ;;		wreg, status,2
 15873 ;; Tracked objects:
 15874 ;;		On entry : 0/0
 15875 ;;		On exit  : 0/0
 15876 ;;		Unchanged: 0/0
 15877 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15878 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15879 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15880 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15881 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15882 ;;Total ram usage:        3 bytes
 15883 ;; Hardware stack levels used:    1
 15884 ;; Hardware stack levels required when called:    5
 15885 ;; This function calls:
 15886 ;;		Nothing
 15887 ;; This function is called by:
 15888 ;;		_DimmerLights_Close
 15889 ;;		_DimmerLights_Exceptions
 15890 ;; This function uses a non-reentrant model
 15891 ;;
 15892                           
 15893                           
 15894                           ;psect for function _getDimmerLights_StatusFlag
 15895  26DE                     _getDimmerLights_StatusFlag:	
 15896                           
 15897                           ;Dimmer_B1.c: 476: char Status = 0;
 15898                           
 15899                           ;incstack = 0
 15900                           ; Regs used in _getDimmerLights_StatusFlag: [wreg+status,2]
 15901  26DE  0020               	movlb	0	; select bank0
 15902  26DF  01A1               	clrf	getDimmerLights_StatusFlag@Status
 15903                           
 15904                           ;Dimmer_B1.c: 483: Status = (DimmerLights1.StatusFlag == 1 || DimmerLights2.StatusFlag =
      +                          = 1) ? 1 : 0;
 15905  26E0  01A2               	clrf	_getDimmerLights_StatusFlag$2316
 15906  26E1  0AA2               	incf	_getDimmerLights_StatusFlag$2316,f
 15907  26E2  0022               	movlb	2	; select bank2
 15908  26E3  1F20               	btfss	_DimmerLights1^(0+256),6
 15909  26E4  1B2F               	btfsc	_DimmerLights2^(0+256),6
 15910  26E5  2EE8               	goto	l6602
 15911  26E6  0020               	movlb	0	; select bank0
 15912  26E7  01A2               	clrf	_getDimmerLights_StatusFlag$2316
 15913  26E8                     l6602:	
 15914  26E8  0020               	movlb	0	; select bank0
 15915  26E9  0822               	movf	_getDimmerLights_StatusFlag$2316,w
 15916  26EA  00A0               	movwf	??_getDimmerLights_StatusFlag
 15917  26EB  0820               	movf	??_getDimmerLights_StatusFlag,w
 15918  26EC  00A1               	movwf	getDimmerLights_StatusFlag@Status
 15919                           
 15920                           ;Dimmer_B1.c: 490: return Status;
 15921  26ED  0821               	movf	getDimmerLights_StatusFlag@Status,w
 15922  26EE  0008               	return
 15923  26EF                     __end_of_getDimmerLights_StatusFlag:	
 15924                           
 15925                           	psect	text94
 15926  27B9                     __ptext94:	
 15927 ;; *************** function _DimmerLights_Initialization *****************
 15928 ;; Defined at:
 15929 ;;		line 334 in file "../src/Dimmer_B1.c"
 15930 ;; Parameters:    Size  Location     Type
 15931 ;;		None
 15932 ;; Auto vars:     Size  Location     Type
 15933 ;;		None
 15934 ;; Return value:  Size  Location     Type
 15935 ;;		None               void
 15936 ;; Registers used:
 15937 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15938 ;; Tracked objects:
 15939 ;;		On entry : 0/0
 15940 ;;		On exit  : 0/0
 15941 ;;		Unchanged: 0/0
 15942 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15943 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15944 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15945 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15946 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15947 ;;Total ram usage:        1 bytes
 15948 ;; Hardware stack levels used:    1
 15949 ;; Hardware stack levels required when called:    7
 15950 ;; This function calls:
 15951 ;;		_Dimmer_Initialization
 15952 ;;		_setDimmerLights_Initialization
 15953 ;; This function is called by:
 15954 ;;		_main
 15955 ;; This function uses a non-reentrant model
 15956 ;;
 15957                           
 15958                           
 15959                           ;psect for function _DimmerLights_Initialization
 15960  27B9                     _DimmerLights_Initialization:	
 15961                           
 15962                           ;Dimmer_B1.c: 337: DimmerLights11 = &DimmerLights1;
 15963                           
 15964                           ;incstack = 0
 15965                           ; Regs used in _DimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 15966  27B9  3020               	movlw	_DimmerLights1& (0+255)
 15967  27BA  0020               	movlb	0	; select bank0
 15968  27BB  00A4               	movwf	??_DimmerLights_Initialization
 15969  27BC  0824               	movf	??_DimmerLights_Initialization,w
 15970  27BD  0021               	movlb	1	; select bank1
 15971  27BE  00BB               	movwf	_DimmerLights11^(0+128)
 15972                           
 15973                           ;Dimmer_B1.c: 338: setDimmerLights_Initialization(1);
 15974  27BF  3001               	movlw	1
 15975  27C0  319B  238E  31A7   	fcall	_setDimmerLights_Initialization
 15976                           
 15977                           ;Dimmer_B1.c: 342: DimmerLights22 = &DimmerLights2;
 15978  27C3  302F               	movlw	_DimmerLights2& (0+255)
 15979  27C4  0020               	movlb	0	; select bank0
 15980  27C5  00A4               	movwf	??_DimmerLights_Initialization
 15981  27C6  0824               	movf	??_DimmerLights_Initialization,w
 15982  27C7  0021               	movlb	1	; select bank1
 15983  27C8  00BC               	movwf	_DimmerLights22^(0+128)
 15984                           
 15985                           ;Dimmer_B1.c: 343: setDimmerLights_Initialization(2);
 15986  27C9  3002               	movlw	2
 15987  27CA  319B  238E  31A7   	fcall	_setDimmerLights_Initialization
 15988                           
 15989                           ;Dimmer_B1.c: 352: Dimmer_Initialization();
 15990  27CD  31A5  250A         	fcall	_Dimmer_Initialization
 15991  27CF  0008               	return
 15992  27D0                     __end_of_DimmerLights_Initialization:	
 15993                           
 15994                           	psect	text95
 15995  1B8E                     __ptext95:	
 15996 ;; *************** function _setDimmerLights_Initialization *****************
 15997 ;; Defined at:
 15998 ;;		line 357 in file "../src/Dimmer_B1.c"
 15999 ;; Parameters:    Size  Location     Type
 16000 ;;  lights          1    wreg     unsigned char 
 16001 ;; Auto vars:     Size  Location     Type
 16002 ;;  lights          1    3[BANK0 ] unsigned char 
 16003 ;; Return value:  Size  Location     Type
 16004 ;;		None               void
 16005 ;; Registers used:
 16006 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16007 ;; Tracked objects:
 16008 ;;		On entry : 0/0
 16009 ;;		On exit  : 0/0
 16010 ;;		Unchanged: 0/0
 16011 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16012 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16013 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16014 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16015 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16016 ;;Total ram usage:        2 bytes
 16017 ;; Hardware stack levels used:    1
 16018 ;; Hardware stack levels required when called:    6
 16019 ;; This function calls:
 16020 ;;		_DimmerLightsPointSelect
 16021 ;; This function is called by:
 16022 ;;		_DimmerLights_Initialization
 16023 ;; This function uses a non-reentrant model
 16024 ;;
 16025                           
 16026                           
 16027                           ;psect for function _setDimmerLights_Initialization
 16028  1B8E                     _setDimmerLights_Initialization:	
 16029                           
 16030                           ;incstack = 0
 16031                           ; Regs used in _setDimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pcla
      +                          th+cstack]
 16032                           ;setDimmerLights_Initialization@lights stored from wreg
 16033  1B8E  0020               	movlb	0	; select bank0
 16034  1B8F  00A3               	movwf	setDimmerLights_Initialization@lights
 16035                           
 16036                           ;Dimmer_B1.c: 359: DimmerLightsPointSelect(lights);
 16037  1B90  0823               	movf	setDimmerLights_Initialization@lights,w
 16038  1B91  31A7  2712         	fcall	_DimmerLightsPointSelect
 16039                           
 16040                           ;Dimmer_B1.c: 360: DimmerLights->Clear = 1;
 16041  1B93  0878               	movf	_DimmerLights,w
 16042  1B94  3E09               	addlw	9
 16043  1B95  0086               	movwf	6
 16044  1B96  3001               	movlw	1	; select bank2/3
 16045  1B97  0087               	movwf	7
 16046  1B98  1501               	bsf	1,2
 16047                           
 16048                           ;Dimmer_B1.c: 366: DimmerLights->MaxmumValue = ((char)((100-60)*0.8));
 16049  1B99  3020               	movlw	32
 16050  1B9A  0020               	movlb	0	; select bank0
 16051  1B9B  00A2               	movwf	??_setDimmerLights_Initialization
 16052  1B9C  0878               	movf	_DimmerLights,w
 16053  1B9D  3E05               	addlw	5
 16054  1B9E  0086               	movwf	6
 16055  1B9F  3001               	movlw	1	; select bank2/3
 16056  1BA0  0087               	movwf	7
 16057  1BA1  0822               	movf	??_setDimmerLights_Initialization,w
 16058  1BA2  0081               	movwf	1
 16059                           
 16060                           ;Dimmer_B1.c: 367: DimmerLights->MinimumValue = ((char)((100-25)*0.8));
 16061  1BA3  303C               	movlw	60
 16062  1BA4  00A2               	movwf	??_setDimmerLights_Initialization
 16063  1BA5  0878               	movf	_DimmerLights,w
 16064  1BA6  3E06               	addlw	6
 16065  1BA7  0086               	movwf	6
 16066  1BA8  3001               	movlw	1	; select bank2/3
 16067  1BA9  0087               	movwf	7
 16068  1BAA  0822               	movf	??_setDimmerLights_Initialization,w
 16069  1BAB  0081               	movwf	1
 16070                           
 16071                           ;Dimmer_B1.c: 377: DimmerLights->DimmingValue = DimmerLights->MinimumValue;
 16072  1BAC  0878               	movf	_DimmerLights,w
 16073  1BAD  3E06               	addlw	6
 16074  1BAE  0086               	movwf	6
 16075  1BAF  3001               	movlw	1	; select bank2/3
 16076  1BB0  0087               	movwf	7
 16077  1BB1  0801               	movf	1,w
 16078  1BB2  00A2               	movwf	??_setDimmerLights_Initialization
 16079  1BB3  0878               	movf	_DimmerLights,w
 16080  1BB4  3E04               	addlw	4
 16081  1BB5  0086               	movwf	6
 16082  1BB6  3001               	movlw	1	; select bank2/3
 16083  1BB7  0087               	movwf	7
 16084  1BB8  0822               	movf	??_setDimmerLights_Initialization,w
 16085  1BB9  0081               	movwf	1
 16086  1BBA  0008               	return
 16087  1BBB                     __end_of_setDimmerLights_Initialization:	
 16088                           
 16089                           	psect	text96
 16090  250A                     __ptext96:	
 16091 ;; *************** function _Dimmer_Initialization *****************
 16092 ;; Defined at:
 16093 ;;		line 786 in file "../src/Dimmer_B1.c"
 16094 ;; Parameters:    Size  Location     Type
 16095 ;;		None
 16096 ;; Auto vars:     Size  Location     Type
 16097 ;;		None
 16098 ;; Return value:  Size  Location     Type
 16099 ;;		None               void
 16100 ;; Registers used:
 16101 ;;		wreg
 16102 ;; Tracked objects:
 16103 ;;		On entry : 0/0
 16104 ;;		On exit  : 0/0
 16105 ;;		Unchanged: 0/0
 16106 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16107 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16108 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16109 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16110 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16111 ;;Total ram usage:        1 bytes
 16112 ;; Hardware stack levels used:    1
 16113 ;; Hardware stack levels required when called:    5
 16114 ;; This function calls:
 16115 ;;		Nothing
 16116 ;; This function is called by:
 16117 ;;		_DimmerLights_Initialization
 16118 ;; This function uses a non-reentrant model
 16119 ;;
 16120                           
 16121                           
 16122                           ;psect for function _Dimmer_Initialization
 16123  250A                     _Dimmer_Initialization:	
 16124                           
 16125                           ;Dimmer_B1.c: 788: Dimmer = &Dimmer1;
 16126                           
 16127                           ;incstack = 0
 16128                           ; Regs used in _Dimmer_Initialization: [wreg]
 16129  250A  30E4               	movlw	_Dimmer1& (0+255)
 16130  250B  0020               	movlb	0	; select bank0
 16131  250C  00A0               	movwf	??_Dimmer_Initialization
 16132  250D  0820               	movf	??_Dimmer_Initialization,w
 16133  250E  0021               	movlb	1	; select bank1
 16134  250F  00BA               	movwf	_Dimmer^(0+128)
 16135  2510  0008               	return
 16136  2511                     __end_of_Dimmer_Initialization:	
 16137                           
 16138                           	psect	text97
 16139  2527                     __ptext97:	
 16140 ;; *************** function _DelayOff_Main *****************
 16141 ;; Defined at:
 16142 ;;		line 41 in file "../src/DelayOff_B1.c"
 16143 ;; Parameters:    Size  Location     Type
 16144 ;;		None
 16145 ;; Auto vars:     Size  Location     Type
 16146 ;;		None
 16147 ;; Return value:  Size  Location     Type
 16148 ;;		None               void
 16149 ;; Registers used:
 16150 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16151 ;; Tracked objects:
 16152 ;;		On entry : 0/0
 16153 ;;		On exit  : 0/0
 16154 ;;		Unchanged: 0/0
 16155 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16156 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16157 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16158 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16159 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16160 ;;Total ram usage:        0 bytes
 16161 ;; Hardware stack levels used:    1
 16162 ;; Hardware stack levels required when called:   10
 16163 ;; This function calls:
 16164 ;;		_DlyOff_Main
 16165 ;; This function is called by:
 16166 ;;		_main
 16167 ;; This function uses a non-reentrant model
 16168 ;;
 16169                           
 16170                           
 16171                           ;psect for function _DelayOff_Main
 16172  2527                     _DelayOff_Main:	
 16173                           
 16174                           ;DelayOff_B1.c: 43: DlyOff_Main(1);
 16175                           
 16176                           ;incstack = 0
 16177                           ; Regs used in _DelayOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 16178  2527  3001               	movlw	1
 16179  2528  3195  2581  31A5   	fcall	_DlyOff_Main
 16180                           
 16181                           ;DelayOff_B1.c: 47: DlyOff_Main(2);
 16182  252B  3002               	movlw	2
 16183  252C  3195  2581         	fcall	_DlyOff_Main
 16184  252E  0008               	return
 16185  252F                     __end_of_DelayOff_Main:	
 16186                           
 16187                           	psect	text98
 16188  1581                     __ptext98:	
 16189 ;; *************** function _DlyOff_Main *****************
 16190 ;; Defined at:
 16191 ;;		line 62 in file "../src/DelayOff_B1.c"
 16192 ;; Parameters:    Size  Location     Type
 16193 ;;  sw              1    wreg     unsigned char 
 16194 ;; Auto vars:     Size  Location     Type
 16195 ;;  sw              1   68[BANK0 ] unsigned char 
 16196 ;; Return value:  Size  Location     Type
 16197 ;;		None               void
 16198 ;; Registers used:
 16199 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16200 ;; Tracked objects:
 16201 ;;		On entry : 0/0
 16202 ;;		On exit  : 0/0
 16203 ;;		Unchanged: 0/0
 16204 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16205 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16206 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16207 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16208 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16209 ;;Total ram usage:        3 bytes
 16210 ;; Hardware stack levels used:    1
 16211 ;; Hardware stack levels required when called:    9
 16212 ;; This function calls:
 16213 ;;		_DelayOffPointSelect
 16214 ;;		_setBuz
 16215 ;;		_setDimmerLights_Switch
 16216 ;;		_setDimmerLights_Trigger
 16217 ;;		_setRFSW_Status
 16218 ;;		_setRF_DimmerLights
 16219 ;;		_setSw_Status
 16220 ;;		_setTxData
 16221 ;; This function is called by:
 16222 ;;		_DelayOff_Main
 16223 ;; This function uses a non-reentrant model
 16224 ;;
 16225                           
 16226                           
 16227                           ;psect for function _DlyOff_Main
 16228  1581                     _DlyOff_Main:	
 16229                           
 16230                           ;incstack = 0
 16231                           ; Regs used in _DlyOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 16232                           ;DlyOff_Main@sw stored from wreg
 16233  1581  0020               	movlb	0	; select bank0
 16234  1582  00E4               	movwf	DlyOff_Main@sw
 16235                           
 16236                           ;DelayOff_B1.c: 63: DelayOffPointSelect(sw);
 16237  1583  0864               	movf	DlyOff_Main@sw,w
 16238  1584  31A7  27A2  3195   	fcall	_DelayOffPointSelect
 16239                           
 16240                           ;DelayOff_B1.c: 64: if (DelayOff->GO) {
 16241  1587  0021               	movlb	1	; select bank1
 16242  1588  0839               	movf	_DelayOff^(0+128),w
 16243  1589  0086               	movwf	6
 16244  158A  0187               	clrf	7
 16245  158B  1C81               	btfss	1,1
 16246  158C  0008               	return
 16247                           
 16248                           ;DelayOff_B1.c: 65: DelayOff->SecondTime++;
 16249  158D  0839               	movf	_DelayOff^(0+128),w
 16250  158E  3E02               	addlw	2
 16251  158F  0086               	movwf	6
 16252  1590  0187               	clrf	7
 16253  1591  3001               	movlw	1
 16254  1592  0781               	addwf	1,f
 16255  1593  3141               	addfsr 1,1
 16256  1594  1803               	skipnc
 16257  1595  0A81               	incf	1,f
 16258                           
 16259                           ;DelayOff_B1.c: 66: if (DelayOff->SecondTime >= 5650) {
 16260  1596  0839               	movf	_DelayOff^(0+128),w
 16261  1597  3E02               	addlw	2
 16262  1598  0086               	movwf	6
 16263  1599  0187               	clrf	7
 16264  159A  3F40               	moviw [0]fsr1
 16265  159B  0020               	movlb	0	; select bank0
 16266  159C  00E2               	movwf	??_DlyOff_Main
 16267  159D  3F41               	moviw [1]fsr1
 16268  159E  00E3               	movwf	??_DlyOff_Main+1
 16269  159F  3016               	movlw	22
 16270  15A0  0263               	subwf	??_DlyOff_Main+1,w
 16271  15A1  3012               	movlw	18
 16272  15A2  1903               	skipnz
 16273  15A3  0262               	subwf	??_DlyOff_Main,w
 16274  15A4  1C03               	skipc
 16275  15A5  0008               	return
 16276                           
 16277                           ;DelayOff_B1.c: 67: DelayOff->SecondTime = 0;
 16278  15A6  0021               	movlb	1	; select bank1
 16279  15A7  0839               	movf	_DelayOff^(0+128),w
 16280  15A8  3E02               	addlw	2
 16281  15A9  0086               	movwf	6
 16282  15AA  0187               	clrf	7
 16283  15AB  3000               	movlw	0
 16284  15AC  3FC0               	movwi [0]fsr1
 16285  15AD  3FC1               	movwi [1]fsr1
 16286                           
 16287                           ;DelayOff_B1.c: 68: DelayOff->MinuteTime++;
 16288  15AE  3001               	movlw	1
 16289  15AF  0020               	movlb	0	; select bank0
 16290  15B0  00E2               	movwf	??_DlyOff_Main
 16291  15B1  0021               	movlb	1	; select bank1
 16292  15B2  0839               	movf	_DelayOff^(0+128),w
 16293  15B3  3E04               	addlw	4
 16294  15B4  0086               	movwf	6
 16295  15B5  0187               	clrf	7
 16296  15B6  0020               	movlb	0	; select bank0
 16297  15B7  0862               	movf	??_DlyOff_Main,w
 16298  15B8  0781               	addwf	1,f
 16299                           
 16300                           ;DelayOff_B1.c: 69: if (DelayOff->MinuteTime >= DelayOff->Value) {
 16301  15B9  0021               	movlb	1	; select bank1
 16302  15BA  0839               	movf	_DelayOff^(0+128),w
 16303  15BB  3E04               	addlw	4
 16304  15BC  0086               	movwf	6
 16305  15BD  0187               	clrf	7
 16306  15BE  0A39               	incf	_DelayOff^(0+128),w
 16307  15BF  0084               	movwf	4
 16308  15C0  0185               	clrf	5
 16309  15C1  0800               	movf	0,w
 16310  15C2  0201               	subwf	1,w
 16311  15C3  1C03               	skipc
 16312  15C4  0008               	return
 16313                           
 16314                           ;DelayOff_B1.c: 70: DelayOff->MinuteTime = 0;
 16315  15C5  0839               	movf	_DelayOff^(0+128),w
 16316  15C6  3E04               	addlw	4
 16317  15C7  0086               	movwf	6
 16318  15C8  0187               	clrf	7
 16319  15C9  0181               	clrf	1
 16320                           
 16321                           ;DelayOff_B1.c: 71: DelayOff->GO = 0;
 16322  15CA  0839               	movf	_DelayOff^(0+128),w
 16323  15CB  0086               	movwf	6
 16324  15CC  0187               	clrf	7
 16325  15CD  1081               	bcf	1,1
 16326                           
 16327                           ;DelayOff_B1.c: 72: setSw_Status(sw, 0);
 16328  15CE  0020               	movlb	0	; select bank0
 16329  15CF  01A2               	clrf	setSw_Status@command
 16330  15D0  0864               	movf	DlyOff_Main@sw,w
 16331  15D1  31A6  2630  3195   	fcall	_setSw_Status
 16332                           
 16333                           ;DelayOff_B1.c: 73: setRFSW_Status(sw, 0);
 16334  15D4  0020               	movlb	0	; select bank0
 16335  15D5  01A2               	clrf	setRFSW_Status@command
 16336  15D6  0864               	movf	DlyOff_Main@sw,w
 16337  15D7  31A6  2621  3195   	fcall	_setRFSW_Status
 16338                           
 16339                           ;DelayOff_B1.c: 74: setRF_DimmerLights(sw, 0);
 16340  15DA  0020               	movlb	0	; select bank0
 16341  15DB  01DD               	clrf	setRF_DimmerLights@on
 16342  15DC  0864               	movf	DlyOff_Main@sw,w
 16343  15DD  3193  2350  3195   	fcall	_setRF_DimmerLights
 16344                           
 16345                           ;DelayOff_B1.c: 75: setDimmerLights_Trigger(sw, 1);
 16346  15E0  0020               	movlb	0	; select bank0
 16347  15E1  01A2               	clrf	setDimmerLights_Trigger@command
 16348  15E2  0AA2               	incf	setDimmerLights_Trigger@command,f
 16349  15E3  0864               	movf	DlyOff_Main@sw,w
 16350  15E4  31A6  267D  3195   	fcall	_setDimmerLights_Trigger
 16351                           
 16352                           ;DelayOff_B1.c: 76: setDimmerLights_Switch(sw, 0);
 16353  15E7  0020               	movlb	0	; select bank0
 16354  15E8  01A2               	clrf	setDimmerLights_Switch@command
 16355  15E9  0864               	movf	DlyOff_Main@sw,w
 16356  15EA  31A6  266D  3195   	fcall	_setDimmerLights_Switch
 16357                           
 16358                           ;DelayOff_B1.c: 77: setTxData(1);
 16359  15ED  3001               	movlw	1
 16360  15EE  318A  2263  3195   	fcall	_setTxData
 16361                           
 16362                           ;DelayOff_B1.c: 78: setBuz(1, 100);
 16363  15F1  3064               	movlw	100
 16364  15F2  0020               	movlb	0	; select bank0
 16365  15F3  00A9               	movwf	setBuz@time
 16366  15F4  3000               	movlw	0
 16367  15F5  00AA               	movwf	setBuz@time+1
 16368  15F6  3001               	movlw	1
 16369  15F7  3189  2137         	fcall	_setBuz
 16370  15F9  0008               	return
 16371  15FA                     __end_of_DlyOff_Main:	
 16372                           
 16373                           	psect	text99
 16374  0A63                     __ptext99:	
 16375 ;; *************** function _setTxData *****************
 16376 ;; Defined at:
 16377 ;;		line 161 in file "../src/RF_Control_B1.c"
 16378 ;; Parameters:    Size  Location     Type
 16379 ;;  rf              1    wreg     unsigned char 
 16380 ;; Auto vars:     Size  Location     Type
 16381 ;;  rf              1    3[BANK0 ] unsigned char 
 16382 ;;  i               1    0        unsigned char 
 16383 ;; Return value:  Size  Location     Type
 16384 ;;		None               void
 16385 ;; Registers used:
 16386 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16387 ;; Tracked objects:
 16388 ;;		On entry : 0/0
 16389 ;;		On exit  : 0/0
 16390 ;;		Unchanged: 0/0
 16391 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16392 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16393 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16394 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16395 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16396 ;;Total ram usage:        2 bytes
 16397 ;; Hardware stack levels used:    1
 16398 ;; Hardware stack levels required when called:    6
 16399 ;; This function calls:
 16400 ;;		_RfPointSelect
 16401 ;; This function is called by:
 16402 ;;		_DlyOff_Main
 16403 ;;		_setDimmerLights_Adj
 16404 ;;		_setControl_Lights_Table
 16405 ;;		_setRFSW_Control
 16406 ;;		_setRFSW_AdjControl
 16407 ;;		_Sw_DimmerOnFunc
 16408 ;;		_Sw_DimmerOffFunc
 16409 ;; This function uses a non-reentrant model
 16410 ;;
 16411                           
 16412                           
 16413                           ;psect for function _setTxData
 16414  0A63                     _setTxData:	
 16415                           
 16416                           ;incstack = 0
 16417                           ; Regs used in _setTxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16418                           ;setTxData@rf stored from wreg
 16419  0A63  0020               	movlb	0	; select bank0
 16420  0A64  00A3               	movwf	setTxData@rf
 16421                           
 16422                           ;RF_Control_B1.c: 162: char i;
 16423                           ;RF_Control_B1.c: 163: RfPointSelect(rf);
 16424  0A65  0823               	movf	setTxData@rf,w
 16425  0A66  31A6  263F  318A   	fcall	_RfPointSelect
 16426                           
 16427                           ;RF_Control_B1.c: 164: if (RF->Enable == 1) {
 16428  0A69  0021               	movlb	1	; select bank1
 16429  0A6A  083F               	movf	_RF^(0+128),w
 16430  0A6B  0086               	movwf	6
 16431  0A6C  0187               	clrf	7
 16432  0A6D  1C01               	btfss	1,0
 16433  0A6E  0008               	return
 16434                           
 16435                           ;RF_Control_B1.c: 166: RF->TransceiveGO = 1;
 16436  0A6F  083F               	movf	_RF^(0+128),w
 16437  0A70  0086               	movwf	6
 16438  0A71  0187               	clrf	7
 16439  0A72  1501               	bsf	1,2
 16440                           
 16441                           ;RF_Control_B1.c: 176: RF_Data[0] = 0x63;
 16442  0A73  3063               	movlw	99
 16443  0A74  0020               	movlb	0	; select bank0
 16444  0A75  00A2               	movwf	??_setTxData
 16445  0A76  0822               	movf	??_setTxData,w
 16446  0A77  0021               	movlb	1	; select bank1
 16447  0A78  00A0               	movwf	_RF_Data^(0+128)
 16448                           
 16449                           ;RF_Control_B1.c: 177: RF_Data[1] = 0x02;
 16450  0A79  3002               	movlw	2
 16451  0A7A  0020               	movlb	0	; select bank0
 16452  0A7B  00A2               	movwf	??_setTxData
 16453  0A7C  0822               	movf	??_setTxData,w
 16454  0A7D  0021               	movlb	1	; select bank1
 16455  0A7E  00A1               	movwf	(_RF_Data^(0+128)+1)
 16456                           
 16457                           ;RF_Control_B1.c: 178: RF_Data[2] = product->Data[2];
 16458  0A7F  087D               	movf	_product,w
 16459  0A80  0086               	movwf	6
 16460  0A81  3001               	movlw	1	; select bank2/3
 16461  0A82  0087               	movwf	7
 16462  0A83  3001               	movlw	1	; select bank2/3
 16463  0A84  3F42               	moviw [2]fsr1
 16464  0A85  00A2               	movwf	(_RF_Data^(0+128)+2)
 16465                           
 16466                           ;RF_Control_B1.c: 179: RF_Data[3] = product->Data[3];
 16467  0A86  087D               	movf	_product,w
 16468  0A87  0086               	movwf	6
 16469  0A88  3001               	movlw	1	; select bank2/3
 16470  0A89  0087               	movwf	7
 16471  0A8A  3001               	movlw	1	; select bank2/3
 16472  0A8B  3F43               	moviw [3]fsr1
 16473  0A8C  00A3               	movwf	(_RF_Data^(0+128)+3)
 16474                           
 16475                           ;RF_Control_B1.c: 180: RF_Data[4] = product->Data[4];
 16476  0A8D  087D               	movf	_product,w
 16477  0A8E  0086               	movwf	6
 16478  0A8F  3001               	movlw	1	; select bank2/3
 16479  0A90  0087               	movwf	7
 16480  0A91  3001               	movlw	1	; select bank2/3
 16481  0A92  3F44               	moviw [4]fsr1
 16482  0A93  00A4               	movwf	(_RF_Data^(0+128)+4)
 16483                           
 16484                           ;RF_Control_B1.c: 181: RF_Data[5] = product->Data[5];
 16485  0A94  087D               	movf	_product,w
 16486  0A95  0086               	movwf	6
 16487  0A96  3001               	movlw	1	; select bank2/3
 16488  0A97  0087               	movwf	7
 16489  0A98  3001               	movlw	1	; select bank2/3
 16490  0A99  3F45               	moviw [5]fsr1
 16491  0A9A  00A5               	movwf	(_RF_Data^(0+128)+5)
 16492                           
 16493                           ;RF_Control_B1.c: 182: RF_Data[6] = product->Data[6];
 16494  0A9B  087D               	movf	_product,w
 16495  0A9C  0086               	movwf	6
 16496  0A9D  3001               	movlw	1	; select bank2/3
 16497  0A9E  0087               	movwf	7
 16498  0A9F  3001               	movlw	1	; select bank2/3
 16499  0AA0  3F46               	moviw [6]fsr1
 16500  0AA1  00A6               	movwf	(_RF_Data^(0+128)+6)
 16501                           
 16502                           ;RF_Control_B1.c: 183: RF_Data[7] = product->Data[7];
 16503  0AA2  087D               	movf	_product,w
 16504  0AA3  0086               	movwf	6
 16505  0AA4  3001               	movlw	1	; select bank2/3
 16506  0AA5  0087               	movwf	7
 16507  0AA6  3001               	movlw	1	; select bank2/3
 16508  0AA7  3F47               	moviw [7]fsr1
 16509  0AA8  00A7               	movwf	(_RF_Data^(0+128)+7)
 16510                           
 16511                           ;RF_Control_B1.c: 184: RF_Data[8] = product->Data[8];
 16512  0AA9  087D               	movf	_product,w
 16513  0AAA  0086               	movwf	6
 16514  0AAB  3001               	movlw	1	; select bank2/3
 16515  0AAC  0087               	movwf	7
 16516  0AAD  3001               	movlw	1	; select bank2/3
 16517  0AAE  3F48               	moviw [8]fsr1
 16518  0AAF  00A8               	movwf	(_RF_Data^(0+128)+8)
 16519                           
 16520                           ;RF_Control_B1.c: 185: RF_Data[9] = product->Data[9];
 16521  0AB0  087D               	movf	_product,w
 16522  0AB1  0086               	movwf	6
 16523  0AB2  3001               	movlw	1	; select bank2/3
 16524  0AB3  0087               	movwf	7
 16525  0AB4  3001               	movlw	1	; select bank2/3
 16526  0AB5  3F49               	moviw [9]fsr1
 16527  0AB6  00A9               	movwf	(_RF_Data^(0+128)+9)
 16528                           
 16529                           ;RF_Control_B1.c: 186: RF_Data[10] = product->Data[10];
 16530  0AB7  087D               	movf	_product,w
 16531  0AB8  0086               	movwf	6
 16532  0AB9  3001               	movlw	1	; select bank2/3
 16533  0ABA  0087               	movwf	7
 16534  0ABB  3001               	movlw	1	; select bank2/3
 16535  0ABC  3F4A               	moviw [10]fsr1
 16536  0ABD  00AA               	movwf	(_RF_Data^(0+128)+10)
 16537                           
 16538                           ;RF_Control_B1.c: 187: RF_Data[11] = product->Data[11];
 16539  0ABE  087D               	movf	_product,w
 16540  0ABF  0086               	movwf	6
 16541  0AC0  3001               	movlw	1	; select bank2/3
 16542  0AC1  0087               	movwf	7
 16543  0AC2  3001               	movlw	1	; select bank2/3
 16544  0AC3  3F4B               	moviw [11]fsr1
 16545  0AC4  00AB               	movwf	(_RF_Data^(0+128)+11)
 16546                           
 16547                           ;RF_Control_B1.c: 188: RF_Data[12] = product->Data[12];
 16548  0AC5  087D               	movf	_product,w
 16549  0AC6  0086               	movwf	6
 16550  0AC7  3001               	movlw	1	; select bank2/3
 16551  0AC8  0087               	movwf	7
 16552  0AC9  3001               	movlw	1	; select bank2/3
 16553  0ACA  3F4C               	moviw [12]fsr1
 16554  0ACB  00AC               	movwf	(_RF_Data^(0+128)+12)
 16555                           
 16556                           ;RF_Control_B1.c: 189: RF_Data[13] = product->Data[13];
 16557  0ACC  087D               	movf	_product,w
 16558  0ACD  0086               	movwf	6
 16559  0ACE  3001               	movlw	1	; select bank2/3
 16560  0ACF  0087               	movwf	7
 16561  0AD0  3001               	movlw	1	; select bank2/3
 16562  0AD1  3F4D               	moviw [13]fsr1
 16563  0AD2  00AD               	movwf	(_RF_Data^(0+128)+13)
 16564                           
 16565                           ;RF_Control_B1.c: 190: RF_Data[14] = product->Data[14];
 16566  0AD3  087D               	movf	_product,w
 16567  0AD4  0086               	movwf	6
 16568  0AD5  3001               	movlw	1	; select bank2/3
 16569  0AD6  0087               	movwf	7
 16570  0AD7  3001               	movlw	1	; select bank2/3
 16571  0AD8  3F4E               	moviw [14]fsr1
 16572  0AD9  00AE               	movwf	(_RF_Data^(0+128)+14)
 16573                           
 16574                           ;RF_Control_B1.c: 191: RF_Data[15] = product->Data[15];
 16575  0ADA  087D               	movf	_product,w
 16576  0ADB  0086               	movwf	6
 16577  0ADC  3001               	movlw	1	; select bank2/3
 16578  0ADD  0087               	movwf	7
 16579  0ADE  3001               	movlw	1	; select bank2/3
 16580  0ADF  3F4F               	moviw [15]fsr1
 16581  0AE0  00AF               	movwf	(_RF_Data^(0+128)+15)
 16582                           
 16583                           ;RF_Control_B1.c: 192: RF_Data[16] = product->Data[16];
 16584  0AE1  087D               	movf	_product,w
 16585  0AE2  0086               	movwf	6
 16586  0AE3  3001               	movlw	1	; select bank2/3
 16587  0AE4  0087               	movwf	7
 16588  0AE5  3001               	movlw	1	; select bank2/3
 16589  0AE6  3F50               	moviw [16]fsr1
 16590  0AE7  00B0               	movwf	(_RF_Data^(0+128)+16)
 16591                           
 16592                           ;RF_Control_B1.c: 193: RF_Data[17] = product->Data[17];
 16593  0AE8  087D               	movf	_product,w
 16594  0AE9  0086               	movwf	6
 16595  0AEA  3001               	movlw	1	; select bank2/3
 16596  0AEB  0087               	movwf	7
 16597  0AEC  3001               	movlw	1	; select bank2/3
 16598  0AED  3F51               	moviw [17]fsr1
 16599  0AEE  00B1               	movwf	(_RF_Data^(0+128)+17)
 16600                           
 16601                           ;RF_Control_B1.c: 194: RF_Data[18] = product->Data[18];
 16602  0AEF  087D               	movf	_product,w
 16603  0AF0  0086               	movwf	6
 16604  0AF1  3001               	movlw	1	; select bank2/3
 16605  0AF2  0087               	movwf	7
 16606  0AF3  3001               	movlw	1	; select bank2/3
 16607  0AF4  3F52               	moviw [18]fsr1
 16608  0AF5  00B2               	movwf	(_RF_Data^(0+128)+18)
 16609                           
 16610                           ;RF_Control_B1.c: 195: RF_Data[19] = product->Data[19];
 16611  0AF6  087D               	movf	_product,w
 16612  0AF7  0086               	movwf	6
 16613  0AF8  3001               	movlw	1	; select bank2/3
 16614  0AF9  0087               	movwf	7
 16615  0AFA  3001               	movlw	1	; select bank2/3
 16616  0AFB  3F53               	moviw [19]fsr1
 16617  0AFC  00B3               	movwf	(_RF_Data^(0+128)+19)
 16618                           
 16619                           ;RF_Control_B1.c: 196: RF_Data[20] = 210;
 16620  0AFD  30D2               	movlw	210
 16621  0AFE  0020               	movlb	0	; select bank0
 16622  0AFF  00A2               	movwf	??_setTxData
 16623  0B00  0822               	movf	??_setTxData,w
 16624  0B01  0021               	movlb	1	; select bank1
 16625  0B02  00B4               	movwf	(_RF_Data^(0+128)+20)
 16626  0B03  0008               	return
 16627  0B04                     __end_of_setTxData:	
 16628                           
 16629                           	psect	text100
 16630  263F                     __ptext100:	
 16631 ;; *************** function _RfPointSelect *****************
 16632 ;; Defined at:
 16633 ;;		line 7 in file "../src/RF_Control_B1.c"
 16634 ;; Parameters:    Size  Location     Type
 16635 ;;  rf              1    wreg     unsigned char 
 16636 ;; Auto vars:     Size  Location     Type
 16637 ;;  rf              1    1[BANK0 ] unsigned char 
 16638 ;; Return value:  Size  Location     Type
 16639 ;;		None               void
 16640 ;; Registers used:
 16641 ;;		wreg
 16642 ;; Tracked objects:
 16643 ;;		On entry : 0/0
 16644 ;;		On exit  : 0/0
 16645 ;;		Unchanged: 0/0
 16646 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16647 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16648 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16649 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16650 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16651 ;;Total ram usage:        2 bytes
 16652 ;; Hardware stack levels used:    1
 16653 ;; Hardware stack levels required when called:    5
 16654 ;; This function calls:
 16655 ;;		Nothing
 16656 ;; This function is called by:
 16657 ;;		_setRF_Learn
 16658 ;;		_setRF_Main
 16659 ;;		_setTxData
 16660 ;;		_setRF_Enable
 16661 ;;		_RF_RxDisable
 16662 ;;		_getRxData
 16663 ;;		_setLog_Code
 16664 ;;		_setControl_Lights_Table
 16665 ;;		_setRF_RxStatus
 16666 ;; This function uses a non-reentrant model
 16667 ;;
 16668                           
 16669                           
 16670                           ;psect for function _RfPointSelect
 16671  263F                     _RfPointSelect:	
 16672                           
 16673                           ;incstack = 0
 16674                           ; Regs used in _RfPointSelect: [wreg]
 16675                           ;RfPointSelect@rf stored from wreg
 16676  263F  0020               	movlb	0	; select bank0
 16677  2640  00A1               	movwf	RfPointSelect@rf
 16678                           
 16679                           ;RF_Control_B1.c: 9: if (rf == 1) {
 16680  2641  0821               	movf	RfPointSelect@rf,w
 16681  2642  3A01               	xorlw	1
 16682  2643  1D03               	skipz
 16683  2644  2E4A               	goto	l6302
 16684                           
 16685                           ;RF_Control_B1.c: 10: RF = &RF1;
 16686  2645  30D3               	movlw	_RF1& (0+255)
 16687  2646  00A0               	movwf	??_RfPointSelect
 16688  2647  0820               	movf	??_RfPointSelect,w
 16689  2648  0021               	movlb	1	; select bank1
 16690  2649  00BF               	movwf	_RF^(0+128)
 16691  264A                     l6302:	
 16692                           
 16693                           ;RF_Control_B1.c: 11: }
 16694                           ;RF_Control_B1.c: 12: if (INTE == 0) {
 16695  264A  1A0B               	btfsc	11,4	;volatile
 16696  264B  0008               	return
 16697                           
 16698                           ;RF_Control_B1.c: 13: INTE = 1;
 16699  264C  160B               	bsf	11,4	;volatile
 16700  264D  0008               	return
 16701  264E                     __end_of_RfPointSelect:	
 16702                           
 16703                           	psect	text101
 16704  2630                     __ptext101:	
 16705 ;; *************** function _setSw_Status *****************
 16706 ;; Defined at:
 16707 ;;		line 105 in file "../src/Switch_B1.c"
 16708 ;; Parameters:    Size  Location     Type
 16709 ;;  sw              1    wreg     unsigned char 
 16710 ;;  command         1    2[BANK0 ] unsigned char 
 16711 ;; Auto vars:     Size  Location     Type
 16712 ;;  sw              1    3[BANK0 ] unsigned char 
 16713 ;; Return value:  Size  Location     Type
 16714 ;;		None               void
 16715 ;; Registers used:
 16716 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16717 ;; Tracked objects:
 16718 ;;		On entry : 0/0
 16719 ;;		On exit  : 0/0
 16720 ;;		Unchanged: 0/0
 16721 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16722 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16723 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16724 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16725 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16726 ;;Total ram usage:        2 bytes
 16727 ;; Hardware stack levels used:    1
 16728 ;; Hardware stack levels required when called:    6
 16729 ;; This function calls:
 16730 ;;		_SwPointSelect
 16731 ;; This function is called by:
 16732 ;;		_DlyOff_Main
 16733 ;;		_setDimmerLights_ERROR
 16734 ;;		_setControl_Lights_Table
 16735 ;;		_setRFSW_Control
 16736 ;; This function uses a non-reentrant model
 16737 ;;
 16738                           
 16739                           
 16740                           ;psect for function _setSw_Status
 16741  2630                     _setSw_Status:	
 16742                           
 16743                           ;incstack = 0
 16744                           ; Regs used in _setSw_Status: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16745                           ;setSw_Status@sw stored from wreg
 16746  2630  0020               	movlb	0	; select bank0
 16747  2631  00A3               	movwf	setSw_Status@sw
 16748                           
 16749                           ;Switch_B1.c: 106: SwPointSelect(sw);
 16750  2632  0823               	movf	setSw_Status@sw,w
 16751  2633  31A7  2739         	fcall	_SwPointSelect
 16752                           
 16753                           ;Switch_B1.c: 107: Sw->Status = command;
 16754  2635  087A               	movf	_Sw,w
 16755  2636  0086               	movwf	6
 16756  2637  3001               	movlw	1	; select bank2/3
 16757  2638  0087               	movwf	7
 16758  2639  0020               	movlb	0	; select bank0
 16759  263A  0822               	movf	setSw_Status@command,w
 16760  263B  1301               	bcf	1,6
 16761  263C  1D03               	skipz
 16762  263D  1701               	bsf	1,6
 16763  263E  0008               	return
 16764  263F                     __end_of_setSw_Status:	
 16765                           
 16766                           	psect	text102
 16767  2739                     __ptext102:	
 16768 ;; *************** function _SwPointSelect *****************
 16769 ;; Defined at:
 16770 ;;		line 17 in file "../src/Switch_B1.c"
 16771 ;; Parameters:    Size  Location     Type
 16772 ;;  sw              1    wreg     unsigned char 
 16773 ;; Auto vars:     Size  Location     Type
 16774 ;;  sw              1    1[BANK0 ] unsigned char 
 16775 ;; Return value:  Size  Location     Type
 16776 ;;		None               void
 16777 ;; Registers used:
 16778 ;;		wreg
 16779 ;; Tracked objects:
 16780 ;;		On entry : 0/0
 16781 ;;		On exit  : 0/0
 16782 ;;		Unchanged: 0/0
 16783 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16784 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16785 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16786 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16787 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16788 ;;Total ram usage:        2 bytes
 16789 ;; Hardware stack levels used:    1
 16790 ;; Hardware stack levels required when called:    5
 16791 ;; This function calls:
 16792 ;;		Nothing
 16793 ;; This function is called by:
 16794 ;;		_setSw_Enable
 16795 ;;		_setSw_Status
 16796 ;;		_setSw_Main
 16797 ;;		_Sw_Detect
 16798 ;; This function uses a non-reentrant model
 16799 ;;
 16800                           
 16801                           
 16802                           ;psect for function _SwPointSelect
 16803  2739                     _SwPointSelect:	
 16804                           
 16805                           ;incstack = 0
 16806                           ; Regs used in _SwPointSelect: [wreg]
 16807                           ;SwPointSelect@sw stored from wreg
 16808  2739  0020               	movlb	0	; select bank0
 16809  273A  00A1               	movwf	SwPointSelect@sw
 16810                           
 16811                           ;Switch_B1.c: 20: if (sw == 1) {
 16812  273B  0821               	movf	SwPointSelect@sw,w
 16813  273C  3A01               	xorlw	1
 16814  273D  1D03               	skipz
 16815  273E  2F44               	goto	l6316
 16816                           
 16817                           ;Switch_B1.c: 21: Sw = &Sw1;
 16818  273F  304A               	movlw	_Sw1& (0+255)
 16819  2740  00A0               	movwf	??_SwPointSelect
 16820  2741  0820               	movf	??_SwPointSelect,w
 16821  2742  00FA               	movwf	_Sw
 16822                           
 16823                           ;Switch_B1.c: 22: }
 16824  2743  0008               	return
 16825  2744                     l6316:	
 16826                           
 16827                           ;Switch_B1.c: 25: else if (sw == 2) {
 16828  2744  0821               	movf	SwPointSelect@sw,w
 16829  2745  3A02               	xorlw	2
 16830  2746  1D03               	skipz
 16831  2747  0008               	return
 16832                           
 16833                           ;Switch_B1.c: 26: Sw = &Sw2;
 16834  2748  3053               	movlw	_Sw2& (0+255)
 16835  2749  00A0               	movwf	??_SwPointSelect
 16836  274A  0820               	movf	??_SwPointSelect,w
 16837  274B  00FA               	movwf	_Sw
 16838  274C  0008               	return
 16839  274D                     __end_of_SwPointSelect:	
 16840                           
 16841                           	psect	text103
 16842  1350                     __ptext103:	
 16843 ;; *************** function _setRF_DimmerLights *****************
 16844 ;; Defined at:
 16845 ;;		line 423 in file "../src/RF_Control_B1.c"
 16846 ;; Parameters:    Size  Location     Type
 16847 ;;  lights          1    wreg     unsigned char 
 16848 ;;  on              1   61[BANK0 ] unsigned char 
 16849 ;; Auto vars:     Size  Location     Type
 16850 ;;  lights          1   65[BANK0 ] unsigned char 
 16851 ;;  status          1   64[BANK0 ] unsigned char 
 16852 ;; Return value:  Size  Location     Type
 16853 ;;		None               void
 16854 ;; Registers used:
 16855 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16856 ;; Tracked objects:
 16857 ;;		On entry : 0/0
 16858 ;;		On exit  : 0/0
 16859 ;;		Unchanged: 0/0
 16860 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16861 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16862 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16863 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16864 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16865 ;;Total ram usage:        5 bytes
 16866 ;; Hardware stack levels used:    1
 16867 ;; Hardware stack levels required when called:    8
 16868 ;; This function calls:
 16869 ;;		_setPercentValue
 16870 ;; This function is called by:
 16871 ;;		_DlyOff_Main
 16872 ;;		_setDimmerLights_Adj
 16873 ;;		_setRFSW_Control
 16874 ;;		_Sw_DimmerOnFunc
 16875 ;;		_Sw_DimmerOffFunc
 16876 ;; This function uses a non-reentrant model
 16877 ;;
 16878                           
 16879                           
 16880                           ;psect for function _setRF_DimmerLights
 16881  1350                     _setRF_DimmerLights:	
 16882                           
 16883                           ;incstack = 0
 16884                           ; Regs used in _setRF_DimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16885                           ;setRF_DimmerLights@lights stored from wreg
 16886  1350  0020               	movlb	0	; select bank0
 16887  1351  00E1               	movwf	setRF_DimmerLights@lights
 16888                           
 16889                           ;RF_Control_B1.c: 424: char status;
 16890                           ;RF_Control_B1.c: 425: status = 1;
 16891  1352  01E0               	clrf	setRF_DimmerLights@status
 16892  1353  0AE0               	incf	setRF_DimmerLights@status,f
 16893                           
 16894                           ;RF_Control_B1.c: 426: status <<= (lights - 1);
 16895  1354  0861               	movf	setRF_DimmerLights@lights,w
 16896  1355  3EFF               	addlw	-1
 16897  1356  0A89               	incf	9,f
 16898  1357  2B5A               	goto	u4930
 16899  1358                     u4935:	
 16900  1358  1003               	clrc
 16901  1359  0DE0               	rlf	setRF_DimmerLights@status,f
 16902  135A                     u4930:	
 16903  135A  3EFF               	addlw	-1
 16904  135B  1D03               	skipz
 16905  135C  2B58               	goto	u4935
 16906                           
 16907                           ;RF_Control_B1.c: 427: product->Data[11]=lights;
 16908  135D  0861               	movf	setRF_DimmerLights@lights,w
 16909  135E  00DE               	movwf	??_setRF_DimmerLights
 16910  135F  087D               	movf	_product,w
 16911  1360  3E0B               	addlw	11
 16912  1361  0086               	movwf	6
 16913  1362  3001               	movlw	1	; select bank2/3
 16914  1363  0087               	movwf	7
 16915  1364  085E               	movf	??_setRF_DimmerLights,w
 16916  1365  0081               	movwf	1
 16917                           
 16918                           ;RF_Control_B1.c: 430: product->Data[(20 + lights)]=setPercentValue(((char)((100-60)*0.8
      +                          )));
 16919  1366  3020               	movlw	32
 16920  1367  319E  26E1  3193   	fcall	_setPercentValue
 16921  136A  0020               	movlb	0	; select bank0
 16922  136B  00DE               	movwf	??_setRF_DimmerLights
 16923  136C  0861               	movf	setRF_DimmerLights@lights,w
 16924  136D  3E14               	addlw	20
 16925  136E  077D               	addwf	_product,w
 16926  136F  00DF               	movwf	??_setRF_DimmerLights+1
 16927  1370  085F               	movf	??_setRF_DimmerLights+1,w
 16928  1371  0086               	movwf	6
 16929  1372  3001               	movlw	1	; select bank2/3
 16930  1373  0087               	movwf	7
 16931  1374  085E               	movf	??_setRF_DimmerLights,w
 16932  1375  0081               	movwf	1
 16933                           
 16934                           ;RF_Control_B1.c: 433: product->Data[9]=product->Data[20 + lights];
 16935  1376  0861               	movf	setRF_DimmerLights@lights,w
 16936  1377  3E14               	addlw	20
 16937  1378  077D               	addwf	_product,w
 16938  1379  00DE               	movwf	??_setRF_DimmerLights
 16939  137A  085E               	movf	??_setRF_DimmerLights,w
 16940  137B  0086               	movwf	6
 16941  137C  3001               	movlw	1	; select bank2/3
 16942  137D  0087               	movwf	7
 16943  137E  0801               	movf	1,w
 16944  137F  00DF               	movwf	??_setRF_DimmerLights+1
 16945  1380  087D               	movf	_product,w
 16946  1381  3E09               	addlw	9
 16947  1382  0086               	movwf	6
 16948  1383  3001               	movlw	1	; select bank2/3
 16949  1384  0087               	movwf	7
 16950  1385  085F               	movf	??_setRF_DimmerLights+1,w
 16951  1386  0081               	movwf	1
 16952                           
 16953                           ;RF_Control_B1.c: 434: product->Data[17]=product->Data[26 + lights];
 16954  1387  0861               	movf	setRF_DimmerLights@lights,w
 16955  1388  3E1A               	addlw	26
 16956  1389  077D               	addwf	_product,w
 16957  138A  00DE               	movwf	??_setRF_DimmerLights
 16958  138B  085E               	movf	??_setRF_DimmerLights,w
 16959  138C  0086               	movwf	6
 16960  138D  3001               	movlw	1	; select bank2/3
 16961  138E  0087               	movwf	7
 16962  138F  0801               	movf	1,w
 16963  1390  00DF               	movwf	??_setRF_DimmerLights+1
 16964  1391  087D               	movf	_product,w
 16965  1392  3E11               	addlw	17
 16966  1393  0086               	movwf	6
 16967  1394  3001               	movlw	1	; select bank2/3
 16968  1395  0087               	movwf	7
 16969  1396  085F               	movf	??_setRF_DimmerLights+1,w
 16970  1397  0081               	movwf	1
 16971                           
 16972                           ;RF_Control_B1.c: 435: if (on == 1) {
 16973  1398  085D               	movf	setRF_DimmerLights@on,w
 16974  1399  3A01               	xorlw	1
 16975  139A  1D03               	skipz
 16976  139B  2BAC               	goto	l6408
 16977                           
 16978                           ;RF_Control_B1.c: 436: product->Data[15]=(product->Data[15] | status);
 16979  139C  087D               	movf	_product,w
 16980  139D  3E0F               	addlw	15
 16981  139E  0086               	movwf	6
 16982  139F  3001               	movlw	1	; select bank2/3
 16983  13A0  0087               	movwf	7
 16984  13A1  0801               	movf	1,w
 16985  13A2  0460               	iorwf	setRF_DimmerLights@status,w
 16986  13A3  00DE               	movwf	??_setRF_DimmerLights
 16987  13A4  087D               	movf	_product,w
 16988  13A5  3E0F               	addlw	15
 16989  13A6  0086               	movwf	6
 16990  13A7  3001               	movlw	1	; select bank2/3
 16991  13A8  0087               	movwf	7
 16992  13A9  085E               	movf	??_setRF_DimmerLights,w
 16993  13AA  0081               	movwf	1
 16994                           
 16995                           ;RF_Control_B1.c: 437: } else {
 16996  13AB  0008               	return
 16997  13AC                     l6408:	
 16998                           
 16999                           ;RF_Control_B1.c: 438: product->Data[15]=(product->Data[15]&(~status));
 17000  13AC  087D               	movf	_product,w
 17001  13AD  3E0F               	addlw	15
 17002  13AE  0086               	movwf	6
 17003  13AF  3001               	movlw	1	; select bank2/3
 17004  13B0  0087               	movwf	7
 17005  13B1  0960               	comf	setRF_DimmerLights@status,w
 17006  13B2  0501               	andwf	1,w
 17007  13B3  00DE               	movwf	??_setRF_DimmerLights
 17008  13B4  087D               	movf	_product,w
 17009  13B5  3E0F               	addlw	15
 17010  13B6  0086               	movwf	6
 17011  13B7  3001               	movlw	1	; select bank2/3
 17012  13B8  0087               	movwf	7
 17013  13B9  085E               	movf	??_setRF_DimmerLights,w
 17014  13BA  0081               	movwf	1
 17015  13BB  0008               	return
 17016  13BC                     __end_of_setRF_DimmerLights:	
 17017                           
 17018                           	psect	text104
 17019  1EE1                     __ptext104:	
 17020 ;; *************** function _setPercentValue *****************
 17021 ;; Defined at:
 17022 ;;		line 768 in file "../src/Dimmer_B1.c"
 17023 ;; Parameters:    Size  Location     Type
 17024 ;;  value           1    wreg     unsigned char 
 17025 ;; Auto vars:     Size  Location     Type
 17026 ;;  value           1   57[BANK0 ] unsigned char 
 17027 ;;  i               3   58[BANK0 ] float 
 17028 ;; Return value:  Size  Location     Type
 17029 ;;                  1    wreg      unsigned char 
 17030 ;; Registers used:
 17031 ;;		wreg, status,2, status,0, pclath, cstack
 17032 ;; Tracked objects:
 17033 ;;		On entry : 0/0
 17034 ;;		On exit  : 0/0
 17035 ;;		Unchanged: 0/0
 17036 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17037 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17038 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17039 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17040 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17041 ;;Total ram usage:        4 bytes
 17042 ;; Hardware stack levels used:    1
 17043 ;; Hardware stack levels required when called:    7
 17044 ;; This function calls:
 17045 ;;		___awtoft
 17046 ;;		___ftdiv
 17047 ;;		___fttol
 17048 ;; This function is called by:
 17049 ;;		_Flash_Memory_Initialization
 17050 ;;		_setRF_DimmerLights
 17051 ;; This function uses a non-reentrant model
 17052 ;;
 17053                           
 17054                           
 17055                           ;psect for function _setPercentValue
 17056  1EE1                     _setPercentValue:	
 17057                           
 17058                           ;incstack = 0
 17059                           ; Regs used in _setPercentValue: [wreg+status,2+status,0+pclath+cstack]
 17060                           ;setPercentValue@value stored from wreg
 17061  1EE1  0020               	movlb	0	; select bank0
 17062  1EE2  00D9               	movwf	setPercentValue@value
 17063                           
 17064                           ;Dimmer_B1.c: 770: float i = ((char)((100-25)*0.8)) - ((char)((100-60)*0.8));
 17065  1EE3  3000               	movlw	0
 17066  1EE4  00DA               	movwf	setPercentValue@i
 17067  1EE5  30E0               	movlw	224
 17068  1EE6  00DB               	movwf	setPercentValue@i+1
 17069  1EE7  3041               	movlw	65
 17070  1EE8  00DC               	movwf	setPercentValue@i+2
 17071                           
 17072                           ;Dimmer_B1.c: 771: i /= 100;
 17073  1EE9  3000               	movlw	0
 17074  1EEA  00AE               	movwf	___ftdiv@f2
 17075  1EEB  30C8               	movlw	200
 17076  1EEC  00AF               	movwf	___ftdiv@f2+1
 17077  1EED  3042               	movlw	66
 17078  1EEE  00B0               	movwf	___ftdiv@f2+2
 17079  1EEF  085A               	movf	setPercentValue@i,w
 17080  1EF0  00B1               	movwf	___ftdiv@f1
 17081  1EF1  085B               	movf	setPercentValue@i+1,w
 17082  1EF2  00B2               	movwf	___ftdiv@f1+1
 17083  1EF3  085C               	movf	setPercentValue@i+2,w
 17084  1EF4  00B3               	movwf	___ftdiv@f1+2
 17085  1EF5  318B  2304  319E   	fcall	___ftdiv
 17086  1EF8  0020               	movlb	0	; select bank0
 17087  1EF9  082E               	movf	?___ftdiv,w
 17088  1EFA  00DA               	movwf	setPercentValue@i
 17089  1EFB  082F               	movf	?___ftdiv+1,w
 17090  1EFC  00DB               	movwf	setPercentValue@i+1
 17091  1EFD  0830               	movf	?___ftdiv+2,w
 17092  1EFE  00DC               	movwf	setPercentValue@i+2
 17093                           
 17094                           ;Dimmer_B1.c: 772: return (100 - (char) ((value - ((char)((100-60)*0.8))) / i));
 17095  1EFF  0859               	movf	setPercentValue@value,w
 17096  1F00  3EE0               	addlw	224
 17097  1F01  00A8               	movwf	___awtoft@c
 17098  1F02  30FF               	movlw	255
 17099  1F03  1803               	skipnc
 17100  1F04  3000               	movlw	0
 17101  1F05  00A9               	movwf	___awtoft@c+1
 17102  1F06  319A  2236  319E   	fcall	___awtoft
 17103  1F09  0020               	movlb	0	; select bank0
 17104  1F0A  0828               	movf	?___awtoft,w
 17105  1F0B  00B1               	movwf	___ftdiv@f1
 17106  1F0C  0829               	movf	?___awtoft+1,w
 17107  1F0D  00B2               	movwf	___ftdiv@f1+1
 17108  1F0E  082A               	movf	?___awtoft+2,w
 17109  1F0F  00B3               	movwf	___ftdiv@f1+2
 17110  1F10  085A               	movf	setPercentValue@i,w
 17111  1F11  00AE               	movwf	___ftdiv@f2
 17112  1F12  085B               	movf	setPercentValue@i+1,w
 17113  1F13  00AF               	movwf	___ftdiv@f2+1
 17114  1F14  085C               	movf	setPercentValue@i+2,w
 17115  1F15  00B0               	movwf	___ftdiv@f2+2
 17116  1F16  318B  2304  319E   	fcall	___ftdiv
 17117  1F19  0020               	movlb	0	; select bank0
 17118  1F1A  082E               	movf	?___ftdiv,w
 17119  1F1B  00CB               	movwf	___fttol@f1
 17120  1F1C  082F               	movf	?___ftdiv+1,w
 17121  1F1D  00CC               	movwf	___fttol@f1+1
 17122  1F1E  0830               	movf	?___ftdiv+2,w
 17123  1F1F  00CD               	movwf	___fttol@f1+2
 17124  1F20  3196  26EF         	fcall	___fttol
 17125  1F22  0020               	movlb	0	; select bank0
 17126  1F23  034B               	decf	?___fttol,w
 17127  1F24  3AFF               	xorlw	255
 17128  1F25  3E64               	addlw	100
 17129  1F26  0008               	return
 17130  1F27                     __end_of_setPercentValue:	
 17131                           
 17132                           	psect	text105
 17133  16EF                     __ptext105:	
 17134 ;; *************** function ___fttol *****************
 17135 ;; Defined at:
 17136 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\fttol.c"
 17137 ;; Parameters:    Size  Location     Type
 17138 ;;  f1              3   43[BANK0 ] float 
 17139 ;; Auto vars:     Size  Location     Type
 17140 ;;  lval            4   52[BANK0 ] unsigned long 
 17141 ;;  exp1            1   56[BANK0 ] unsigned char 
 17142 ;;  sign1           1   51[BANK0 ] unsigned char 
 17143 ;; Return value:  Size  Location     Type
 17144 ;;                  4   43[BANK0 ] long 
 17145 ;; Registers used:
 17146 ;;		wreg, status,2, status,0
 17147 ;; Tracked objects:
 17148 ;;		On entry : 0/0
 17149 ;;		On exit  : 0/0
 17150 ;;		Unchanged: 0/0
 17151 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17152 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17153 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17154 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17155 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17156 ;;Total ram usage:       14 bytes
 17157 ;; Hardware stack levels used:    1
 17158 ;; Hardware stack levels required when called:    5
 17159 ;; This function calls:
 17160 ;;		Nothing
 17161 ;; This function is called by:
 17162 ;;		_getPercentValue
 17163 ;;		_setPercentValue
 17164 ;; This function uses a non-reentrant model
 17165 ;;
 17166                           
 17167                           
 17168                           ;psect for function ___fttol
 17169  16EF                     ___fttol:	
 17170                           
 17171                           ;incstack = 0
 17172                           ; Regs used in ___fttol: [wreg+status,2+status,0]
 17173  16EF  0020               	movlb	0	; select bank0
 17174  16F0  084B               	movf	___fttol@f1,w
 17175  16F1  00CF               	movwf	??___fttol
 17176  16F2  084C               	movf	___fttol@f1+1,w
 17177  16F3  00D0               	movwf	??___fttol+1
 17178  16F4  084D               	movf	___fttol@f1+2,w
 17179  16F5  00D1               	movwf	??___fttol+2
 17180  16F6  1003               	clrc
 17181  16F7  0D50               	rlf	??___fttol+1,w
 17182  16F8  0D51               	rlf	??___fttol+2,w
 17183  16F9  00D2               	movwf	??___fttol+3
 17184  16FA  0852               	movf	??___fttol+3,w
 17185  16FB  00D8               	movwf	___fttol@exp1
 17186  16FC  08D8               	movf	___fttol@exp1,f
 17187  16FD  1D03               	skipz
 17188  16FE  2F08               	goto	l6188
 17189  16FF  3000               	movlw	0
 17190  1700  00CE               	movwf	?___fttol+3
 17191  1701  3000               	movlw	0
 17192  1702  00CD               	movwf	?___fttol+2
 17193  1703  3000               	movlw	0
 17194  1704  00CC               	movwf	?___fttol+1
 17195  1705  3000               	movlw	0
 17196  1706  00CB               	movwf	?___fttol
 17197  1707  0008               	return
 17198  1708                     l6188:	
 17199  1708  084B               	movf	___fttol@f1,w
 17200  1709  00CF               	movwf	??___fttol
 17201  170A  084C               	movf	___fttol@f1+1,w
 17202  170B  00D0               	movwf	??___fttol+1
 17203  170C  084D               	movf	___fttol@f1+2,w
 17204  170D  00D1               	movwf	??___fttol+2
 17205  170E  3017               	movlw	23
 17206  170F                     u4575:	
 17207  170F  36D1               	lsrf	??___fttol+2,f
 17208  1710  0CD0               	rrf	??___fttol+1,f
 17209  1711  0CCF               	rrf	??___fttol,f
 17210  1712  0B89               	decfsz	9,f
 17211  1713  2F0F               	goto	u4575
 17212  1714  084F               	movf	??___fttol,w
 17213  1715  00D2               	movwf	??___fttol+3
 17214  1716  0852               	movf	??___fttol+3,w
 17215  1717  00D3               	movwf	___fttol@sign1
 17216  1718  17CC               	bsf	___fttol@f1+1,7
 17217  1719  30FF               	movlw	255
 17218  171A  05CB               	andwf	___fttol@f1,f
 17219  171B  30FF               	movlw	255
 17220  171C  05CC               	andwf	___fttol@f1+1,f
 17221  171D  3000               	movlw	0
 17222  171E  05CD               	andwf	___fttol@f1+2,f
 17223  171F  084B               	movf	___fttol@f1,w
 17224  1720  00D4               	movwf	___fttol@lval
 17225  1721  084C               	movf	___fttol@f1+1,w
 17226  1722  00D5               	movwf	___fttol@lval+1
 17227  1723  084D               	movf	___fttol@f1+2,w
 17228  1724  00D6               	movwf	___fttol@lval+2
 17229  1725  01D7               	clrf	___fttol@lval+3
 17230  1726  308E               	movlw	142
 17231  1727  02D8               	subwf	___fttol@exp1,f
 17232  1728  1FD8               	btfss	___fttol@exp1,7
 17233  1729  2F46               	goto	l6208
 17234  172A  0858               	movf	___fttol@exp1,w
 17235  172B  3A80               	xorlw	128
 17236  172C  3E8F               	addlw	143
 17237  172D  1803               	skipnc
 17238  172E  2F38               	goto	l6206
 17239  172F  3000               	movlw	0
 17240  1730  00CE               	movwf	?___fttol+3
 17241  1731  3000               	movlw	0
 17242  1732  00CD               	movwf	?___fttol+2
 17243  1733  3000               	movlw	0
 17244  1734  00CC               	movwf	?___fttol+1
 17245  1735  3000               	movlw	0
 17246  1736  00CB               	movwf	?___fttol
 17247  1737  0008               	return
 17248  1738                     l6206:	
 17249  1738  3001               	movlw	1
 17250  1739                     u4605:	
 17251  1739  36D7               	lsrf	___fttol@lval+3,f
 17252  173A  0CD6               	rrf	___fttol@lval+2,f
 17253  173B  0CD5               	rrf	___fttol@lval+1,f
 17254  173C  0CD4               	rrf	___fttol@lval,f
 17255  173D  0B89               	decfsz	9,f
 17256  173E  2F39               	goto	u4605
 17257  173F  3001               	movlw	1
 17258  1740  00CF               	movwf	??___fttol
 17259  1741  084F               	movf	??___fttol,w
 17260  1742  07D8               	addwf	___fttol@exp1,f
 17261  1743  1903               	btfsc	3,2
 17262  1744  2F5F               	goto	l6218
 17263  1745  2F38               	goto	l6206
 17264  1746                     l6208:	
 17265  1746  3018               	movlw	24
 17266  1747  0258               	subwf	___fttol@exp1,w
 17267  1748  1C03               	skipc
 17268  1749  2F5C               	goto	l6216
 17269  174A  3000               	movlw	0
 17270  174B  00CE               	movwf	?___fttol+3
 17271  174C  3000               	movlw	0
 17272  174D  00CD               	movwf	?___fttol+2
 17273  174E  3000               	movlw	0
 17274  174F  00CC               	movwf	?___fttol+1
 17275  1750  3000               	movlw	0
 17276  1751  00CB               	movwf	?___fttol
 17277  1752  0008               	return
 17278  1753                     l6214:	
 17279  1753  3001               	movlw	1
 17280  1754                     u4635:	
 17281  1754  35D4               	lslf	___fttol@lval,f
 17282  1755  0DD5               	rlf	___fttol@lval+1,f
 17283  1756  0DD6               	rlf	___fttol@lval+2,f
 17284  1757  0DD7               	rlf	___fttol@lval+3,f
 17285  1758  0B89               	decfsz	9,f
 17286  1759  2F54               	goto	u4635
 17287  175A  3001               	movlw	1
 17288  175B  02D8               	subwf	___fttol@exp1,f
 17289  175C                     l6216:	
 17290  175C  08D8               	movf	___fttol@exp1,f
 17291  175D  1D03               	skipz
 17292  175E  2F53               	goto	l6214
 17293  175F                     l6218:	
 17294  175F  0853               	movf	___fttol@sign1,w
 17295  1760  1903               	btfsc	3,2
 17296  1761  2F6D               	goto	l6222
 17297  1762  09D4               	comf	___fttol@lval,f
 17298  1763  09D5               	comf	___fttol@lval+1,f
 17299  1764  09D6               	comf	___fttol@lval+2,f
 17300  1765  09D7               	comf	___fttol@lval+3,f
 17301  1766  0AD4               	incf	___fttol@lval,f
 17302  1767  1903               	skipnz
 17303  1768  0AD5               	incf	___fttol@lval+1,f
 17304  1769  1903               	skipnz
 17305  176A  0AD6               	incf	___fttol@lval+2,f
 17306  176B  1903               	skipnz
 17307  176C  0AD7               	incf	___fttol@lval+3,f
 17308  176D                     l6222:	
 17309  176D  0857               	movf	___fttol@lval+3,w
 17310  176E  00CE               	movwf	?___fttol+3
 17311  176F  0856               	movf	___fttol@lval+2,w
 17312  1770  00CD               	movwf	?___fttol+2
 17313  1771  0855               	movf	___fttol@lval+1,w
 17314  1772  00CC               	movwf	?___fttol+1
 17315  1773  0854               	movf	___fttol@lval,w
 17316  1774  00CB               	movwf	?___fttol
 17317  1775  0008               	return
 17318  1776                     __end_of___fttol:	
 17319                           
 17320                           	psect	text106
 17321  0B04                     __ptext106:	
 17322 ;; *************** function ___ftdiv *****************
 17323 ;; Defined at:
 17324 ;;		line 49 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\pic\ftdiv.c"
 17325 ;; Parameters:    Size  Location     Type
 17326 ;;  f2              3   14[BANK0 ] float 
 17327 ;;  f1              3   17[BANK0 ] float 
 17328 ;; Auto vars:     Size  Location     Type
 17329 ;;  f3              3   25[BANK0 ] float 
 17330 ;;  sign            1   29[BANK0 ] unsigned char 
 17331 ;;  exp             1   28[BANK0 ] unsigned char 
 17332 ;;  cntr            1   24[BANK0 ] unsigned char 
 17333 ;; Return value:  Size  Location     Type
 17334 ;;                  3   14[BANK0 ] float 
 17335 ;; Registers used:
 17336 ;;		wreg, status,2, status,0, pclath, cstack
 17337 ;; Tracked objects:
 17338 ;;		On entry : 0/0
 17339 ;;		On exit  : 0/0
 17340 ;;		Unchanged: 0/0
 17341 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17342 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17343 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17344 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17345 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17346 ;;Total ram usage:       16 bytes
 17347 ;; Hardware stack levels used:    1
 17348 ;; Hardware stack levels required when called:    6
 17349 ;; This function calls:
 17350 ;;		___ftpack
 17351 ;; This function is called by:
 17352 ;;		_getPercentValue
 17353 ;;		_setPercentValue
 17354 ;; This function uses a non-reentrant model
 17355 ;;
 17356                           
 17357                           
 17358                           ;psect for function ___ftdiv
 17359  0B04                     ___ftdiv:	
 17360                           
 17361                           ;incstack = 0
 17362                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
 17363  0B04  0020               	movlb	0	; select bank0
 17364  0B05  0831               	movf	___ftdiv@f1,w
 17365  0B06  00B4               	movwf	??___ftdiv
 17366  0B07  0832               	movf	___ftdiv@f1+1,w
 17367  0B08  00B5               	movwf	??___ftdiv+1
 17368  0B09  0833               	movf	___ftdiv@f1+2,w
 17369  0B0A  00B6               	movwf	??___ftdiv+2
 17370  0B0B  1003               	clrc
 17371  0B0C  0D35               	rlf	??___ftdiv+1,w
 17372  0B0D  0D36               	rlf	??___ftdiv+2,w
 17373  0B0E  00B7               	movwf	??___ftdiv+3
 17374  0B0F  0837               	movf	??___ftdiv+3,w
 17375  0B10  00BC               	movwf	___ftdiv@exp
 17376  0B11  08BC               	movf	___ftdiv@exp,f
 17377  0B12  1D03               	skipz
 17378  0B13  2B1B               	goto	l6096
 17379  0B14  3000               	movlw	0
 17380  0B15  00AE               	movwf	?___ftdiv
 17381  0B16  3000               	movlw	0
 17382  0B17  00AF               	movwf	?___ftdiv+1
 17383  0B18  3000               	movlw	0
 17384  0B19  00B0               	movwf	?___ftdiv+2
 17385  0B1A  0008               	return
 17386  0B1B                     l6096:	
 17387  0B1B  082E               	movf	___ftdiv@f2,w
 17388  0B1C  00B4               	movwf	??___ftdiv
 17389  0B1D  082F               	movf	___ftdiv@f2+1,w
 17390  0B1E  00B5               	movwf	??___ftdiv+1
 17391  0B1F  0830               	movf	___ftdiv@f2+2,w
 17392  0B20  00B6               	movwf	??___ftdiv+2
 17393  0B21  1003               	clrc
 17394  0B22  0D35               	rlf	??___ftdiv+1,w
 17395  0B23  0D36               	rlf	??___ftdiv+2,w
 17396  0B24  00B7               	movwf	??___ftdiv+3
 17397  0B25  0837               	movf	??___ftdiv+3,w
 17398  0B26  00BD               	movwf	___ftdiv@sign
 17399  0B27  08BD               	movf	___ftdiv@sign,f
 17400  0B28  1D03               	skipz
 17401  0B29  2B31               	goto	l6102
 17402  0B2A  3000               	movlw	0
 17403  0B2B  00AE               	movwf	?___ftdiv
 17404  0B2C  3000               	movlw	0
 17405  0B2D  00AF               	movwf	?___ftdiv+1
 17406  0B2E  3000               	movlw	0
 17407  0B2F  00B0               	movwf	?___ftdiv+2
 17408  0B30  0008               	return
 17409  0B31                     l6102:	
 17410  0B31  3000               	movlw	0
 17411  0B32  00B9               	movwf	___ftdiv@f3
 17412  0B33  3000               	movlw	0
 17413  0B34  00BA               	movwf	___ftdiv@f3+1
 17414  0B35  3000               	movlw	0
 17415  0B36  00BB               	movwf	___ftdiv@f3+2
 17416  0B37  3089               	movlw	137
 17417  0B38  073D               	addwf	___ftdiv@sign,w
 17418  0B39  00B4               	movwf	??___ftdiv
 17419  0B3A  0834               	movf	??___ftdiv,w
 17420  0B3B  02BC               	subwf	___ftdiv@exp,f
 17421  0B3C  0831               	movf	___ftdiv@f1,w
 17422  0B3D  00B4               	movwf	??___ftdiv
 17423  0B3E  0832               	movf	___ftdiv@f1+1,w
 17424  0B3F  00B5               	movwf	??___ftdiv+1
 17425  0B40  0833               	movf	___ftdiv@f1+2,w
 17426  0B41  00B6               	movwf	??___ftdiv+2
 17427  0B42  3010               	movlw	16
 17428  0B43                     u4385:	
 17429  0B43  36B6               	lsrf	??___ftdiv+2,f
 17430  0B44  0CB5               	rrf	??___ftdiv+1,f
 17431  0B45  0CB4               	rrf	??___ftdiv,f
 17432  0B46  0B89               	decfsz	9,f
 17433  0B47  2B43               	goto	u4385
 17434  0B48  0834               	movf	??___ftdiv,w
 17435  0B49  00B7               	movwf	??___ftdiv+3
 17436  0B4A  0837               	movf	??___ftdiv+3,w
 17437  0B4B  00BD               	movwf	___ftdiv@sign
 17438  0B4C  082E               	movf	___ftdiv@f2,w
 17439  0B4D  00B4               	movwf	??___ftdiv
 17440  0B4E  082F               	movf	___ftdiv@f2+1,w
 17441  0B4F  00B5               	movwf	??___ftdiv+1
 17442  0B50  0830               	movf	___ftdiv@f2+2,w
 17443  0B51  00B6               	movwf	??___ftdiv+2
 17444  0B52  3010               	movlw	16
 17445  0B53                     u4395:	
 17446  0B53  36B6               	lsrf	??___ftdiv+2,f
 17447  0B54  0CB5               	rrf	??___ftdiv+1,f
 17448  0B55  0CB4               	rrf	??___ftdiv,f
 17449  0B56  0B89               	decfsz	9,f
 17450  0B57  2B53               	goto	u4395
 17451  0B58  0834               	movf	??___ftdiv,w
 17452  0B59  00B7               	movwf	??___ftdiv+3
 17453  0B5A  0837               	movf	??___ftdiv+3,w
 17454  0B5B  06BD               	xorwf	___ftdiv@sign,f
 17455  0B5C  3080               	movlw	128
 17456  0B5D  00B4               	movwf	??___ftdiv
 17457  0B5E  0834               	movf	??___ftdiv,w
 17458  0B5F  05BD               	andwf	___ftdiv@sign,f
 17459  0B60  17B2               	bsf	___ftdiv@f1+1,7
 17460  0B61  30FF               	movlw	255
 17461  0B62  05B1               	andwf	___ftdiv@f1,f
 17462  0B63  30FF               	movlw	255
 17463  0B64  05B2               	andwf	___ftdiv@f1+1,f
 17464  0B65  3000               	movlw	0
 17465  0B66  05B3               	andwf	___ftdiv@f1+2,f
 17466  0B67  17AF               	bsf	___ftdiv@f2+1,7
 17467  0B68  30FF               	movlw	255
 17468  0B69  05AE               	andwf	___ftdiv@f2,f
 17469  0B6A  30FF               	movlw	255
 17470  0B6B  05AF               	andwf	___ftdiv@f2+1,f
 17471  0B6C  3000               	movlw	0
 17472  0B6D  05B0               	andwf	___ftdiv@f2+2,f
 17473  0B6E  3018               	movlw	24
 17474  0B6F  00B4               	movwf	??___ftdiv
 17475  0B70  0834               	movf	??___ftdiv,w
 17476  0B71  00B8               	movwf	___ftdiv@cntr
 17477  0B72                     l6116:	
 17478  0B72  3001               	movlw	1
 17479  0B73                     u4405:	
 17480  0B73  35B9               	lslf	___ftdiv@f3,f
 17481  0B74  0DBA               	rlf	___ftdiv@f3+1,f
 17482  0B75  0DBB               	rlf	___ftdiv@f3+2,f
 17483  0B76  0B89               	decfsz	9,f
 17484  0B77  2B73               	goto	u4405
 17485  0B78  0830               	movf	___ftdiv@f2+2,w
 17486  0B79  0233               	subwf	___ftdiv@f1+2,w
 17487  0B7A  1D03               	skipz
 17488  0B7B  2B82               	goto	u4415
 17489  0B7C  082F               	movf	___ftdiv@f2+1,w
 17490  0B7D  0232               	subwf	___ftdiv@f1+1,w
 17491  0B7E  1D03               	skipz
 17492  0B7F  2B82               	goto	u4415
 17493  0B80  082E               	movf	___ftdiv@f2,w
 17494  0B81  0231               	subwf	___ftdiv@f1,w
 17495  0B82                     u4415:	
 17496  0B82  1C03               	skipc
 17497  0B83  2B8B               	goto	l6124
 17498  0B84  082E               	movf	___ftdiv@f2,w
 17499  0B85  02B1               	subwf	___ftdiv@f1,f
 17500  0B86  082F               	movf	___ftdiv@f2+1,w
 17501  0B87  3BB2               	subwfb	___ftdiv@f1+1,f
 17502  0B88  0830               	movf	___ftdiv@f2+2,w
 17503  0B89  3BB3               	subwfb	___ftdiv@f1+2,f
 17504  0B8A  1439               	bsf	___ftdiv@f3,0
 17505  0B8B                     l6124:	
 17506  0B8B  3001               	movlw	1
 17507  0B8C                     u4425:	
 17508  0B8C  35B1               	lslf	___ftdiv@f1,f
 17509  0B8D  0DB2               	rlf	___ftdiv@f1+1,f
 17510  0B8E  0DB3               	rlf	___ftdiv@f1+2,f
 17511  0B8F  0B89               	decfsz	9,f
 17512  0B90  2B8C               	goto	u4425
 17513  0B91  3001               	movlw	1
 17514  0B92  02B8               	subwf	___ftdiv@cntr,f
 17515  0B93  1D03               	btfss	3,2
 17516  0B94  2B72               	goto	l6116
 17517  0B95  0839               	movf	___ftdiv@f3,w
 17518  0B96  00A0               	movwf	___ftpack@arg
 17519  0B97  083A               	movf	___ftdiv@f3+1,w
 17520  0B98  00A1               	movwf	___ftpack@arg+1
 17521  0B99  083B               	movf	___ftdiv@f3+2,w
 17522  0B9A  00A2               	movwf	___ftpack@arg+2
 17523  0B9B  083C               	movf	___ftdiv@exp,w
 17524  0B9C  00B4               	movwf	??___ftdiv
 17525  0B9D  0834               	movf	??___ftdiv,w
 17526  0B9E  00A3               	movwf	___ftpack@exp
 17527  0B9F  083D               	movf	___ftdiv@sign,w
 17528  0BA0  00B5               	movwf	??___ftdiv+1
 17529  0BA1  0835               	movf	??___ftdiv+1,w
 17530  0BA2  00A4               	movwf	___ftpack@sign
 17531  0BA3  3192  2220         	fcall	___ftpack
 17532  0BA5  0020               	movlb	0	; select bank0
 17533  0BA6  0820               	movf	?___ftpack,w
 17534  0BA7  00AE               	movwf	?___ftdiv
 17535  0BA8  0821               	movf	?___ftpack+1,w
 17536  0BA9  00AF               	movwf	?___ftdiv+1
 17537  0BAA  0822               	movf	?___ftpack+2,w
 17538  0BAB  00B0               	movwf	?___ftdiv+2
 17539  0BAC  0008               	return
 17540  0BAD                     __end_of___ftdiv:	
 17541                           
 17542                           	psect	text107
 17543  1A36                     __ptext107:	
 17544 ;; *************** function ___awtoft *****************
 17545 ;; Defined at:
 17546 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awtoft.c"
 17547 ;; Parameters:    Size  Location     Type
 17548 ;;  c               2    8[BANK0 ] int 
 17549 ;; Auto vars:     Size  Location     Type
 17550 ;;  sign            1   13[BANK0 ] unsigned char 
 17551 ;; Return value:  Size  Location     Type
 17552 ;;                  3    8[BANK0 ] float 
 17553 ;; Registers used:
 17554 ;;		wreg, status,2, status,0, pclath, cstack
 17555 ;; Tracked objects:
 17556 ;;		On entry : 0/0
 17557 ;;		On exit  : 0/0
 17558 ;;		Unchanged: 0/0
 17559 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17560 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17561 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17562 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17563 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17564 ;;Total ram usage:        6 bytes
 17565 ;; Hardware stack levels used:    1
 17566 ;; Hardware stack levels required when called:    6
 17567 ;; This function calls:
 17568 ;;		___ftpack
 17569 ;; This function is called by:
 17570 ;;		_getPercentValue
 17571 ;;		_setPercentValue
 17572 ;; This function uses a non-reentrant model
 17573 ;;
 17574                           
 17575                           
 17576                           ;psect for function ___awtoft
 17577  1A36                     ___awtoft:	
 17578                           
 17579                           ;incstack = 0
 17580                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
 17581  1A36  0020               	movlb	0	; select bank0
 17582  1A37  01AD               	clrf	___awtoft@sign
 17583  1A38  1FA9               	btfss	___awtoft@c+1,7
 17584  1A39  2A41               	goto	l6014
 17585  1A3A  09A8               	comf	___awtoft@c,f
 17586  1A3B  09A9               	comf	___awtoft@c+1,f
 17587  1A3C  0AA8               	incf	___awtoft@c,f
 17588  1A3D  1903               	skipnz
 17589  1A3E  0AA9               	incf	___awtoft@c+1,f
 17590  1A3F  01AD               	clrf	___awtoft@sign
 17591  1A40  0AAD               	incf	___awtoft@sign,f
 17592  1A41                     l6014:	
 17593  1A41  0828               	movf	___awtoft@c,w
 17594  1A42  00A0               	movwf	___ftpack@arg
 17595  1A43  0829               	movf	___awtoft@c+1,w
 17596  1A44  00A1               	movwf	___ftpack@arg+1
 17597  1A45  01A2               	clrf	___ftpack@arg+2
 17598  1A46  308E               	movlw	142
 17599  1A47  00AB               	movwf	??___awtoft
 17600  1A48  082B               	movf	??___awtoft,w
 17601  1A49  00A3               	movwf	___ftpack@exp
 17602  1A4A  082D               	movf	___awtoft@sign,w
 17603  1A4B  00AC               	movwf	??___awtoft+1
 17604  1A4C  082C               	movf	??___awtoft+1,w
 17605  1A4D  00A4               	movwf	___ftpack@sign
 17606  1A4E  3192  2220         	fcall	___ftpack
 17607  1A50  0020               	movlb	0	; select bank0
 17608  1A51  0820               	movf	?___ftpack,w
 17609  1A52  00A8               	movwf	?___awtoft
 17610  1A53  0821               	movf	?___ftpack+1,w
 17611  1A54  00A9               	movwf	?___awtoft+1
 17612  1A55  0822               	movf	?___ftpack+2,w
 17613  1A56  00AA               	movwf	?___awtoft+2
 17614  1A57  0008               	return
 17615  1A58                     __end_of___awtoft:	
 17616                           
 17617                           	psect	text108
 17618  1220                     __ptext108:	
 17619 ;; *************** function ___ftpack *****************
 17620 ;; Defined at:
 17621 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\float.c"
 17622 ;; Parameters:    Size  Location     Type
 17623 ;;  arg             3    0[BANK0 ] unsigned um
 17624 ;;  exp             1    3[BANK0 ] unsigned char 
 17625 ;;  sign            1    4[BANK0 ] unsigned char 
 17626 ;; Auto vars:     Size  Location     Type
 17627 ;;		None
 17628 ;; Return value:  Size  Location     Type
 17629 ;;                  3    0[BANK0 ] float 
 17630 ;; Registers used:
 17631 ;;		wreg, status,2, status,0
 17632 ;; Tracked objects:
 17633 ;;		On entry : 0/0
 17634 ;;		On exit  : 0/0
 17635 ;;		Unchanged: 0/0
 17636 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17637 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17638 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17639 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17640 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17641 ;;Total ram usage:        8 bytes
 17642 ;; Hardware stack levels used:    1
 17643 ;; Hardware stack levels required when called:    5
 17644 ;; This function calls:
 17645 ;;		Nothing
 17646 ;; This function is called by:
 17647 ;;		___awtoft
 17648 ;;		___ftadd
 17649 ;;		___ftdiv
 17650 ;;		___ftmul
 17651 ;; This function uses a non-reentrant model
 17652 ;;
 17653                           
 17654                           
 17655                           ;psect for function ___ftpack
 17656  1220                     ___ftpack:	
 17657                           
 17658                           ;incstack = 0
 17659                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 17660  1220  0020               	movlb	0	; select bank0
 17661  1221  0823               	movf	___ftpack@exp,w
 17662  1222  1903               	btfsc	3,2
 17663  1223  2A29               	goto	l5980
 17664  1224  0822               	movf	___ftpack@arg+2,w
 17665  1225  0421               	iorwf	___ftpack@arg+1,w
 17666  1226  0420               	iorwf	___ftpack@arg,w
 17667  1227  1D03               	skipz
 17668  1228  2A3A               	goto	l5986
 17669  1229                     l5980:	
 17670  1229  3000               	movlw	0
 17671  122A  00A0               	movwf	?___ftpack
 17672  122B  3000               	movlw	0
 17673  122C  00A1               	movwf	?___ftpack+1
 17674  122D  3000               	movlw	0
 17675  122E  00A2               	movwf	?___ftpack+2
 17676  122F  0008               	return
 17677  1230                     l5984:	
 17678  1230  3001               	movlw	1
 17679  1231  00A5               	movwf	??___ftpack
 17680  1232  0825               	movf	??___ftpack,w
 17681  1233  07A3               	addwf	___ftpack@exp,f
 17682  1234  3001               	movlw	1
 17683  1235                     u4035:	
 17684  1235  36A2               	lsrf	___ftpack@arg+2,f
 17685  1236  0CA1               	rrf	___ftpack@arg+1,f
 17686  1237  0CA0               	rrf	___ftpack@arg,f
 17687  1238  0B89               	decfsz	9,f
 17688  1239  2A35               	goto	u4035
 17689  123A                     l5986:	
 17690  123A  30FE               	movlw	254
 17691  123B  0522               	andwf	___ftpack@arg+2,w
 17692  123C  1903               	btfsc	3,2
 17693  123D  2A53               	goto	l3280
 17694  123E  2A30               	goto	l5984
 17695  123F                     l5988:	
 17696  123F  3001               	movlw	1
 17697  1240  00A5               	movwf	??___ftpack
 17698  1241  0825               	movf	??___ftpack,w
 17699  1242  07A3               	addwf	___ftpack@exp,f
 17700  1243  3001               	movlw	1
 17701  1244  07A0               	addwf	___ftpack@arg,f
 17702  1245  3000               	movlw	0
 17703  1246  1803               	skipnc
 17704  1247  3001               	movlw	1
 17705  1248  07A1               	addwf	___ftpack@arg+1,f
 17706  1249  3000               	movlw	0
 17707  124A  1803               	skipnc
 17708  124B  3001               	movlw	1
 17709  124C  07A2               	addwf	___ftpack@arg+2,f
 17710  124D  3001               	movlw	1
 17711  124E                     u4055:	
 17712  124E  36A2               	lsrf	___ftpack@arg+2,f
 17713  124F  0CA1               	rrf	___ftpack@arg+1,f
 17714  1250  0CA0               	rrf	___ftpack@arg,f
 17715  1251  0B89               	decfsz	9,f
 17716  1252  2A4E               	goto	u4055
 17717  1253                     l3280:	
 17718  1253  30FF               	movlw	255
 17719  1254  0522               	andwf	___ftpack@arg+2,w
 17720  1255  1903               	btfsc	3,2
 17721  1256  2A60               	goto	l5996
 17722  1257  2A3F               	goto	l5988
 17723  1258                     l5994:	
 17724  1258  3001               	movlw	1
 17725  1259  02A3               	subwf	___ftpack@exp,f
 17726  125A  3001               	movlw	1
 17727  125B                     u4075:	
 17728  125B  35A0               	lslf	___ftpack@arg,f
 17729  125C  0DA1               	rlf	___ftpack@arg+1,f
 17730  125D  0DA2               	rlf	___ftpack@arg+2,f
 17731  125E  0B89               	decfsz	9,f
 17732  125F  2A5B               	goto	u4075
 17733  1260                     l5996:	
 17734  1260  1FA1               	btfss	___ftpack@arg+1,7
 17735  1261  2A58               	goto	l5994
 17736  1262  1823               	btfsc	___ftpack@exp,0
 17737  1263  2A6A               	goto	l3286
 17738  1264  30FF               	movlw	255
 17739  1265  05A0               	andwf	___ftpack@arg,f
 17740  1266  307F               	movlw	127
 17741  1267  05A1               	andwf	___ftpack@arg+1,f
 17742  1268  30FF               	movlw	255
 17743  1269  05A2               	andwf	___ftpack@arg+2,f
 17744  126A                     l3286:	
 17745  126A  1003               	clrc
 17746  126B  0CA3               	rrf	___ftpack@exp,f
 17747  126C  0823               	movf	___ftpack@exp,w
 17748  126D  00A5               	movwf	??___ftpack
 17749  126E  01A6               	clrf	??___ftpack+1
 17750  126F  01A7               	clrf	??___ftpack+2
 17751  1270  3010               	movlw	16
 17752  1271                     u4105:	
 17753  1271  35A5               	lslf	??___ftpack,f
 17754  1272  0DA6               	rlf	??___ftpack+1,f
 17755  1273  0DA7               	rlf	??___ftpack+2,f
 17756  1274  0B89               	decfsz	9,f
 17757  1275  2A71               	goto	u4105
 17758  1276  0825               	movf	??___ftpack,w
 17759  1277  04A0               	iorwf	___ftpack@arg,f
 17760  1278  0826               	movf	??___ftpack+1,w
 17761  1279  04A1               	iorwf	___ftpack@arg+1,f
 17762  127A  0827               	movf	??___ftpack+2,w
 17763  127B  04A2               	iorwf	___ftpack@arg+2,f
 17764  127C  0824               	movf	___ftpack@sign,w
 17765  127D  1903               	btfsc	3,2
 17766  127E  0008               	return
 17767  127F  17A2               	bsf	___ftpack@arg+2,7
 17768  1280  0008               	return
 17769  1281                     __end_of___ftpack:	
 17770                           
 17771                           	psect	text109
 17772  2621                     __ptext109:	
 17773 ;; *************** function _setRFSW_Status *****************
 17774 ;; Defined at:
 17775 ;;		line 405 in file "../src/RF_Control_B1.c"
 17776 ;; Parameters:    Size  Location     Type
 17777 ;;  sw              1    wreg     unsigned char 
 17778 ;;  command         1    2[BANK0 ] unsigned char 
 17779 ;; Auto vars:     Size  Location     Type
 17780 ;;  sw              1    3[BANK0 ] unsigned char 
 17781 ;; Return value:  Size  Location     Type
 17782 ;;		None               void
 17783 ;; Registers used:
 17784 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17785 ;; Tracked objects:
 17786 ;;		On entry : 0/0
 17787 ;;		On exit  : 0/0
 17788 ;;		Unchanged: 0/0
 17789 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17790 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17791 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17792 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17793 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17794 ;;Total ram usage:        2 bytes
 17795 ;; Hardware stack levels used:    1
 17796 ;; Hardware stack levels required when called:    6
 17797 ;; This function calls:
 17798 ;;		_RfSWPointSelect
 17799 ;; This function is called by:
 17800 ;;		_DlyOff_Main
 17801 ;;		_setDimmerLights_ERROR
 17802 ;;		_setControl_Lights_Table
 17803 ;;		_Sw_DimmerOnFunc
 17804 ;;		_Sw_DimmerAdjFunc
 17805 ;; This function uses a non-reentrant model
 17806 ;;
 17807                           
 17808                           
 17809                           ;psect for function _setRFSW_Status
 17810  2621                     _setRFSW_Status:	
 17811                           
 17812                           ;incstack = 0
 17813                           ; Regs used in _setRFSW_Status: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17814                           ;setRFSW_Status@sw stored from wreg
 17815  2621  0020               	movlb	0	; select bank0
 17816  2622  00A3               	movwf	setRFSW_Status@sw
 17817                           
 17818                           ;RF_Control_B1.c: 406: RfSWPointSelect(sw);
 17819  2623  0823               	movf	setRFSW_Status@sw,w
 17820  2624  31A7  2776         	fcall	_RfSWPointSelect
 17821                           
 17822                           ;RF_Control_B1.c: 407: RFSW->Status = command;
 17823  2626  0021               	movlb	1	; select bank1
 17824  2627  0840               	movf	_RFSW^(0+128),w
 17825  2628  0086               	movwf	6
 17826  2629  0187               	clrf	7
 17827  262A  0020               	movlb	0	; select bank0
 17828  262B  0822               	movf	setRFSW_Status@command,w
 17829  262C  1001               	bcf	1,0
 17830  262D  1D03               	skipz
 17831  262E  1401               	bsf	1,0
 17832  262F  0008               	return
 17833  2630                     __end_of_setRFSW_Status:	
 17834                           
 17835                           	psect	text110
 17836  2776                     __ptext110:	
 17837 ;; *************** function _RfSWPointSelect *****************
 17838 ;; Defined at:
 17839 ;;		line 340 in file "../src/RF_Control_B1.c"
 17840 ;; Parameters:    Size  Location     Type
 17841 ;;  sw              1    wreg     unsigned char 
 17842 ;; Auto vars:     Size  Location     Type
 17843 ;;  sw              1    1[BANK0 ] unsigned char 
 17844 ;; Return value:  Size  Location     Type
 17845 ;;		None               void
 17846 ;; Registers used:
 17847 ;;		wreg
 17848 ;; Tracked objects:
 17849 ;;		On entry : 0/0
 17850 ;;		On exit  : 0/0
 17851 ;;		Unchanged: 0/0
 17852 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17853 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17854 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17855 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17856 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17857 ;;Total ram usage:        2 bytes
 17858 ;; Hardware stack levels used:    1
 17859 ;; Hardware stack levels required when called:    5
 17860 ;; This function calls:
 17861 ;;		Nothing
 17862 ;; This function is called by:
 17863 ;;		_setRFSW_Control
 17864 ;;		_setRFSW_AdjControl
 17865 ;;		_setRFSW_Status
 17866 ;; This function uses a non-reentrant model
 17867 ;;
 17868                           
 17869                           
 17870                           ;psect for function _RfSWPointSelect
 17871  2776                     _RfSWPointSelect:	
 17872                           
 17873                           ;incstack = 0
 17874                           ; Regs used in _RfSWPointSelect: [wreg]
 17875                           ;RfSWPointSelect@sw stored from wreg
 17876  2776  0020               	movlb	0	; select bank0
 17877  2777  00A1               	movwf	RfSWPointSelect@sw
 17878                           
 17879                           ;RF_Control_B1.c: 342: if (sw == 1) {
 17880  2778  0821               	movf	RfSWPointSelect@sw,w
 17881  2779  3A01               	xorlw	1
 17882  277A  1D03               	skipz
 17883  277B  2F81               	goto	l2532
 17884                           
 17885                           ;RF_Control_B1.c: 343: RFSW = &RFSW1;
 17886  277C  30E9               	movlw	_RFSW1& (0+255)
 17887  277D  00A0               	movwf	??_RfSWPointSelect
 17888  277E  0820               	movf	??_RfSWPointSelect,w
 17889  277F  0021               	movlb	1	; select bank1
 17890  2780  00C0               	movwf	_RFSW^(0+128)
 17891  2781                     l2532:	
 17892                           
 17893                           ;RF_Control_B1.c: 344: }
 17894                           ;RF_Control_B1.c: 347: if (sw == 2) {
 17895  2781  0020               	movlb	0	; select bank0
 17896  2782  0821               	movf	RfSWPointSelect@sw,w
 17897  2783  3A02               	xorlw	2
 17898  2784  1D03               	skipz
 17899  2785  0008               	return
 17900                           
 17901                           ;RF_Control_B1.c: 348: RFSW = &RFSW2;
 17902  2786  30EA               	movlw	_RFSW2& (0+255)
 17903  2787  00A0               	movwf	??_RfSWPointSelect
 17904  2788  0820               	movf	??_RfSWPointSelect,w
 17905  2789  0021               	movlb	1	; select bank1
 17906  278A  00C0               	movwf	_RFSW^(0+128)
 17907  278B  0008               	return
 17908  278C                     __end_of_RfSWPointSelect:	
 17909                           
 17910                           	psect	text111
 17911  267D                     __ptext111:	
 17912 ;; *************** function _setDimmerLights_Trigger *****************
 17913 ;; Defined at:
 17914 ;;		line 705 in file "../src/Dimmer_B1.c"
 17915 ;; Parameters:    Size  Location     Type
 17916 ;;  lights          1    wreg     unsigned char 
 17917 ;;  command         1    2[BANK0 ] unsigned char 
 17918 ;; Auto vars:     Size  Location     Type
 17919 ;;  lights          1    3[BANK0 ] unsigned char 
 17920 ;; Return value:  Size  Location     Type
 17921 ;;		None               void
 17922 ;; Registers used:
 17923 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17924 ;; Tracked objects:
 17925 ;;		On entry : 0/0
 17926 ;;		On exit  : 0/0
 17927 ;;		Unchanged: 0/0
 17928 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17929 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17930 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17931 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17932 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17933 ;;Total ram usage:        2 bytes
 17934 ;; Hardware stack levels used:    1
 17935 ;; Hardware stack levels required when called:    6
 17936 ;; This function calls:
 17937 ;;		_DimmerLightsPointSelect
 17938 ;; This function is called by:
 17939 ;;		_DlyOff_Main
 17940 ;;		_setRFSW_Control
 17941 ;;		_Sw_DimmerOnFunc
 17942 ;;		_Sw_DimmerOffFunc
 17943 ;; This function uses a non-reentrant model
 17944 ;;
 17945                           
 17946                           
 17947                           ;psect for function _setDimmerLights_Trigger
 17948  267D                     _setDimmerLights_Trigger:	
 17949                           
 17950                           ;incstack = 0
 17951                           ; Regs used in _setDimmerLights_Trigger: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 17952                           ;setDimmerLights_Trigger@lights stored from wreg
 17953  267D  0020               	movlb	0	; select bank0
 17954  267E  00A3               	movwf	setDimmerLights_Trigger@lights
 17955                           
 17956                           ;Dimmer_B1.c: 707: DimmerLightsPointSelect(lights);
 17957  267F  0823               	movf	setDimmerLights_Trigger@lights,w
 17958  2680  31A7  2712         	fcall	_DimmerLightsPointSelect
 17959                           
 17960                           ;Dimmer_B1.c: 708: DimmerLights->Trigger = command;
 17961  2682  0878               	movf	_DimmerLights,w
 17962  2683  3E08               	addlw	8
 17963  2684  0086               	movwf	6
 17964  2685  3001               	movlw	1	; select bank2/3
 17965  2686  0087               	movwf	7
 17966  2687  0020               	movlb	0	; select bank0
 17967  2688  0822               	movf	setDimmerLights_Trigger@command,w
 17968  2689  1101               	bcf	1,2
 17969  268A  1D03               	skipz
 17970  268B  1501               	bsf	1,2
 17971  268C  0008               	return
 17972  268D                     __end_of_setDimmerLights_Trigger:	
 17973                           
 17974                           	psect	text112
 17975  266D                     __ptext112:	
 17976 ;; *************** function _setDimmerLights_Switch *****************
 17977 ;; Defined at:
 17978 ;;		line 693 in file "../src/Dimmer_B1.c"
 17979 ;; Parameters:    Size  Location     Type
 17980 ;;  lights          1    wreg     unsigned char 
 17981 ;;  command         1    2[BANK0 ] unsigned char 
 17982 ;; Auto vars:     Size  Location     Type
 17983 ;;  lights          1    3[BANK0 ] unsigned char 
 17984 ;; Return value:  Size  Location     Type
 17985 ;;		None               void
 17986 ;; Registers used:
 17987 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17988 ;; Tracked objects:
 17989 ;;		On entry : 0/0
 17990 ;;		On exit  : 0/0
 17991 ;;		Unchanged: 0/0
 17992 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17993 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17994 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17995 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17996 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17997 ;;Total ram usage:        2 bytes
 17998 ;; Hardware stack levels used:    1
 17999 ;; Hardware stack levels required when called:    6
 18000 ;; This function calls:
 18001 ;;		_DimmerLightsPointSelect
 18002 ;; This function is called by:
 18003 ;;		_DlyOff_Main
 18004 ;;		_setRFSW_Control
 18005 ;;		_Sw_DimmerOnFunc
 18006 ;;		_Sw_DimmerOffFunc
 18007 ;; This function uses a non-reentrant model
 18008 ;;
 18009                           
 18010                           
 18011                           ;psect for function _setDimmerLights_Switch
 18012  266D                     _setDimmerLights_Switch:	
 18013                           
 18014                           ;incstack = 0
 18015                           ; Regs used in _setDimmerLights_Switch: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
 18016                           ;setDimmerLights_Switch@lights stored from wreg
 18017  266D  0020               	movlb	0	; select bank0
 18018  266E  00A3               	movwf	setDimmerLights_Switch@lights
 18019                           
 18020                           ;Dimmer_B1.c: 695: DimmerLightsPointSelect(lights);
 18021  266F  0823               	movf	setDimmerLights_Switch@lights,w
 18022  2670  31A7  2712         	fcall	_DimmerLightsPointSelect
 18023                           
 18024                           ;Dimmer_B1.c: 696: DimmerLights->Switch = command;
 18025  2672  0878               	movf	_DimmerLights,w
 18026  2673  3E08               	addlw	8
 18027  2674  0086               	movwf	6
 18028  2675  3001               	movlw	1	; select bank2/3
 18029  2676  0087               	movwf	7
 18030  2677  0020               	movlb	0	; select bank0
 18031  2678  0822               	movf	setDimmerLights_Switch@command,w
 18032  2679  1081               	bcf	1,1
 18033  267A  1D03               	skipz
 18034  267B  1481               	bsf	1,1
 18035  267C  0008               	return
 18036  267D                     __end_of_setDimmerLights_Switch:	
 18037                           
 18038                           	psect	text113
 18039  2712                     __ptext113:	
 18040 ;; *************** function _DimmerLightsPointSelect *****************
 18041 ;; Defined at:
 18042 ;;		line 315 in file "../src/Dimmer_B1.c"
 18043 ;; Parameters:    Size  Location     Type
 18044 ;;  lights          1    wreg     unsigned char 
 18045 ;; Auto vars:     Size  Location     Type
 18046 ;;  lights          1    1[BANK0 ] unsigned char 
 18047 ;; Return value:  Size  Location     Type
 18048 ;;		None               void
 18049 ;; Registers used:
 18050 ;;		wreg
 18051 ;; Tracked objects:
 18052 ;;		On entry : 0/0
 18053 ;;		On exit  : 0/0
 18054 ;;		Unchanged: 0/0
 18055 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18056 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18057 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18058 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18059 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18060 ;;Total ram usage:        2 bytes
 18061 ;; Hardware stack levels used:    1
 18062 ;; Hardware stack levels required when called:    5
 18063 ;; This function calls:
 18064 ;;		Nothing
 18065 ;; This function is called by:
 18066 ;;		_setDimmerLights_Initialization
 18067 ;;		_setDimmerLights_Main
 18068 ;;		_setDimmerLights_ERROR
 18069 ;;		_setDimmerLights_TriggerERROR
 18070 ;;		_setDimmerLights
 18071 ;;		_setDimmerLights_Adj
 18072 ;;		_setDimmerLights_AdjRF
 18073 ;;		_setDimmerLights_Switch
 18074 ;;		_setDimmerLights_AdjGo
 18075 ;;		_setDimmerLights_Trigger
 18076 ;;		_setDimmerLights_TriggerAdj
 18077 ;;		_setDimmerLights_Clear
 18078 ;;		_setDimmerLights_GO
 18079 ;;		_setDimmerLights_MaxmumValue
 18080 ;; This function uses a non-reentrant model
 18081 ;;
 18082                           
 18083                           
 18084                           ;psect for function _DimmerLightsPointSelect
 18085  2712                     _DimmerLightsPointSelect:	
 18086                           
 18087                           ;incstack = 0
 18088                           ; Regs used in _DimmerLightsPointSelect: [wreg]
 18089                           ;DimmerLightsPointSelect@lights stored from wreg
 18090  2712  0020               	movlb	0	; select bank0
 18091  2713  00A1               	movwf	DimmerLightsPointSelect@lights
 18092                           
 18093                           ;Dimmer_B1.c: 317: if (lights == 1) {
 18094  2714  0821               	movf	DimmerLightsPointSelect@lights,w
 18095  2715  3A01               	xorlw	1
 18096  2716  1D03               	skipz
 18097  2717  2F1C               	goto	l884
 18098                           
 18099                           ;Dimmer_B1.c: 318: DimmerLights = &DimmerLights1;
 18100  2718  3020               	movlw	_DimmerLights1& (0+255)
 18101  2719  00A0               	movwf	??_DimmerLightsPointSelect
 18102  271A  0820               	movf	??_DimmerLightsPointSelect,w
 18103  271B  00F8               	movwf	_DimmerLights
 18104  271C                     l884:	
 18105                           
 18106                           ;Dimmer_B1.c: 319: }
 18107                           ;Dimmer_B1.c: 322: if (lights == 2) {
 18108  271C  0821               	movf	DimmerLightsPointSelect@lights,w
 18109  271D  3A02               	xorlw	2
 18110  271E  1D03               	skipz
 18111  271F  0008               	return
 18112                           
 18113                           ;Dimmer_B1.c: 323: DimmerLights = &DimmerLights2;
 18114  2720  302F               	movlw	_DimmerLights2& (0+255)
 18115  2721  00A0               	movwf	??_DimmerLightsPointSelect
 18116  2722  0820               	movf	??_DimmerLightsPointSelect,w
 18117  2723  00F8               	movwf	_DimmerLights
 18118  2724  0008               	return
 18119  2725                     __end_of_DimmerLightsPointSelect:	
 18120                           
 18121                           	psect	text114
 18122  0937                     __ptext114:	
 18123 ;; *************** function _setBuz *****************
 18124 ;; Defined at:
 18125 ;;		line 30 in file "../src/Buzzer_B1.c"
 18126 ;; Parameters:    Size  Location     Type
 18127 ;;  count           1    wreg     unsigned char 
 18128 ;;  time            2    9[BANK0 ] int 
 18129 ;; Auto vars:     Size  Location     Type
 18130 ;;  count           1   12[BANK0 ] unsigned char 
 18131 ;; Return value:  Size  Location     Type
 18132 ;;		None               void
 18133 ;; Registers used:
 18134 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18135 ;; Tracked objects:
 18136 ;;		On entry : 0/0
 18137 ;;		On exit  : 0/0
 18138 ;;		Unchanged: 0/0
 18139 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18140 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18141 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18142 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18143 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18144 ;;Total ram usage:        4 bytes
 18145 ;; Hardware stack levels used:    1
 18146 ;; Hardware stack levels required when called:    6
 18147 ;; This function calls:
 18148 ;;		___awdiv
 18149 ;; This function is called by:
 18150 ;;		_CC2500_RxData
 18151 ;;		_DlyOff_Main
 18152 ;;		_setDimmerLights_Main
 18153 ;;		_DimmerLights_Exceptions
 18154 ;;		_my_Main
 18155 ;;		_setOverTemp_Exceptions
 18156 ;;		_setLog_Code
 18157 ;;		_setControl_Lights_Table
 18158 ;;		_setRFSW_Control
 18159 ;;		_setSw_Main
 18160 ;;		_Sw_DimmerOnFunc
 18161 ;; This function uses a non-reentrant model
 18162 ;;
 18163                           
 18164                           
 18165                           ;psect for function _setBuz
 18166  0937                     _setBuz:	
 18167                           
 18168                           ;incstack = 0
 18169                           ; Regs used in _setBuz: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 18170                           ;setBuz@count stored from wreg
 18171  0937  0020               	movlb	0	; select bank0
 18172  0938  00AC               	movwf	setBuz@count
 18173                           
 18174                           ;Buzzer_B1.c: 31: Buz = &Buz1;
 18175  0939  303E               	movlw	_Buz1& (0+255)
 18176  093A  00AB               	movwf	??_setBuz
 18177  093B  082B               	movf	??_setBuz,w
 18178  093C  0021               	movlb	1	; select bank1
 18179  093D  00B7               	movwf	_Buz^(0+128)
 18180                           
 18181                           ;Buzzer_B1.c: 32: time /= 10;
 18182  093E  300A               	movlw	10
 18183  093F  0020               	movlb	0	; select bank0
 18184  0940  00A0               	movwf	___awdiv@divisor
 18185  0941  3000               	movlw	0
 18186  0942  00A1               	movwf	___awdiv@divisor+1
 18187  0943  082A               	movf	setBuz@time+1,w
 18188  0944  01A3               	clrf	___awdiv@dividend+1
 18189  0945  07A3               	addwf	___awdiv@dividend+1,f
 18190  0946  0829               	movf	setBuz@time,w
 18191  0947  01A2               	clrf	___awdiv@dividend
 18192  0948  07A2               	addwf	___awdiv@dividend,f
 18193  0949  3190  205F  3189   	fcall	___awdiv
 18194  094C  0020               	movlb	0	; select bank0
 18195  094D  0821               	movf	?___awdiv+1,w
 18196  094E  01AA               	clrf	setBuz@time+1
 18197  094F  07AA               	addwf	setBuz@time+1,f
 18198  0950  0820               	movf	?___awdiv,w
 18199  0951  01A9               	clrf	setBuz@time
 18200  0952  07A9               	addwf	setBuz@time,f
 18201                           
 18202                           ;Buzzer_B1.c: 33: if (Buz->Enable == 1) {
 18203  0953  0021               	movlb	1	; select bank1
 18204  0954  0837               	movf	_Buz^(0+128),w
 18205  0955  0086               	movwf	6
 18206  0956  3001               	movlw	1	; select bank2/3
 18207  0957  0087               	movwf	7
 18208  0958  1C01               	btfss	1,0
 18209  0959  0008               	return
 18210                           
 18211                           ;Buzzer_B1.c: 34: if (Buz->GO == 0) {
 18212  095A  0837               	movf	_Buz^(0+128),w
 18213  095B  0086               	movwf	6
 18214  095C  3001               	movlw	1	; select bank2/3
 18215  095D  0087               	movwf	7
 18216  095E  1881               	btfsc	1,1
 18217  095F  2985               	goto	l6376
 18218                           
 18219                           ;Buzzer_B1.c: 35: Buz->GO = 1;
 18220  0960  0837               	movf	_Buz^(0+128),w
 18221  0961  0086               	movwf	6
 18222  0962  3001               	movlw	1	; select bank2/3
 18223  0963  0087               	movwf	7
 18224  0964  1481               	bsf	1,1
 18225                           
 18226                           ;Buzzer_B1.c: 36: Buz->Counter = 0;
 18227  0965  0A37               	incf	_Buz^(0+128),w
 18228  0966  0086               	movwf	6
 18229  0967  3001               	movlw	1	; select bank2/3
 18230  0968  0087               	movwf	7
 18231  0969  3000               	movlw	0
 18232  096A  3FC0               	movwi [0]fsr1
 18233  096B  3FC1               	movwi [1]fsr1
 18234                           
 18235                           ;Buzzer_B1.c: 37: Buz->Count = count;
 18236  096C  0020               	movlb	0	; select bank0
 18237  096D  082C               	movf	setBuz@count,w
 18238  096E  00AB               	movwf	??_setBuz
 18239  096F  0021               	movlb	1	; select bank1
 18240  0970  0837               	movf	_Buz^(0+128),w
 18241  0971  3E03               	addlw	3
 18242  0972  0086               	movwf	6
 18243  0973  3001               	movlw	1	; select bank2/3
 18244  0974  0087               	movwf	7
 18245  0975  0020               	movlb	0	; select bank0
 18246  0976  082B               	movf	??_setBuz,w
 18247  0977  0081               	movwf	1
 18248                           
 18249                           ;Buzzer_B1.c: 38: Buz->TimeValue = time;
 18250  0978  0021               	movlb	1	; select bank1
 18251  0979  0837               	movf	_Buz^(0+128),w
 18252  097A  3E06               	addlw	6
 18253  097B  0086               	movwf	6
 18254  097C  3001               	movlw	1	; select bank2/3
 18255  097D  0087               	movwf	7
 18256  097E  0020               	movlb	0	; select bank0
 18257  097F  0829               	movf	setBuz@time,w
 18258  0980  3FC0               	movwi [0]fsr1
 18259  0981  082A               	movf	setBuz@time+1,w
 18260  0982  3FC1               	movwi [1]fsr1
 18261                           
 18262                           ;Buzzer_B1.c: 39: RB3 = 1;
 18263  0983  158D               	bsf	13,3	;volatile
 18264                           
 18265                           ;Buzzer_B1.c: 40: } else {
 18266  0984  0008               	return
 18267  0985                     l6376:	
 18268                           
 18269                           ;Buzzer_B1.c: 41: if (Buz->BufferStatus1 == 0) {
 18270  0985  0021               	movlb	1	; select bank1
 18271  0986  0837               	movf	_Buz^(0+128),w
 18272  0987  0086               	movwf	6
 18273  0988  3001               	movlw	1	; select bank2/3
 18274  0989  0087               	movwf	7
 18275  098A  1981               	btfsc	1,3
 18276  098B  29A9               	goto	l6380
 18277                           
 18278                           ;Buzzer_B1.c: 42: Buz->BufferStatus1 = 1;
 18279  098C  0837               	movf	_Buz^(0+128),w
 18280  098D  0086               	movwf	6
 18281  098E  3001               	movlw	1	; select bank2/3
 18282  098F  0087               	movwf	7
 18283  0990  1581               	bsf	1,3
 18284                           
 18285                           ;Buzzer_B1.c: 43: Buz->CountBuffer1 = count;
 18286  0991  0020               	movlb	0	; select bank0
 18287  0992  082C               	movf	setBuz@count,w
 18288  0993  00AB               	movwf	??_setBuz
 18289  0994  0021               	movlb	1	; select bank1
 18290  0995  0837               	movf	_Buz^(0+128),w
 18291  0996  3E04               	addlw	4
 18292  0997  0086               	movwf	6
 18293  0998  3001               	movlw	1	; select bank2/3
 18294  0999  0087               	movwf	7
 18295  099A  0020               	movlb	0	; select bank0
 18296  099B  082B               	movf	??_setBuz,w
 18297  099C  0081               	movwf	1
 18298                           
 18299                           ;Buzzer_B1.c: 44: Buz->TimeValueBuffer1 = time;
 18300  099D  0021               	movlb	1	; select bank1
 18301  099E  0837               	movf	_Buz^(0+128),w
 18302  099F  3E08               	addlw	8
 18303  09A0  0086               	movwf	6
 18304  09A1  3001               	movlw	1	; select bank2/3
 18305  09A2  0087               	movwf	7
 18306  09A3  0020               	movlb	0	; select bank0
 18307  09A4  0829               	movf	setBuz@time,w
 18308  09A5  3FC0               	movwi [0]fsr1
 18309  09A6  082A               	movf	setBuz@time+1,w
 18310  09A7  3FC1               	movwi [1]fsr1
 18311                           
 18312                           ;Buzzer_B1.c: 45: } else if (Buz->BufferStatus2 == 0) {
 18313  09A8  0008               	return
 18314  09A9                     l6380:	
 18315  09A9  0021               	movlb	1	; select bank1
 18316  09AA  0837               	movf	_Buz^(0+128),w
 18317  09AB  0086               	movwf	6
 18318  09AC  3001               	movlw	1	; select bank2/3
 18319  09AD  0087               	movwf	7
 18320  09AE  1A01               	btfsc	1,4
 18321  09AF  0008               	return
 18322                           
 18323                           ;Buzzer_B1.c: 46: Buz->BufferStatus2 = 1;
 18324  09B0  0837               	movf	_Buz^(0+128),w
 18325  09B1  0086               	movwf	6
 18326  09B2  3001               	movlw	1	; select bank2/3
 18327  09B3  0087               	movwf	7
 18328  09B4  1601               	bsf	1,4
 18329                           
 18330                           ;Buzzer_B1.c: 47: Buz->CountBuffer2 = count;
 18331  09B5  0020               	movlb	0	; select bank0
 18332  09B6  082C               	movf	setBuz@count,w
 18333  09B7  00AB               	movwf	??_setBuz
 18334  09B8  0021               	movlb	1	; select bank1
 18335  09B9  0837               	movf	_Buz^(0+128),w
 18336  09BA  3E05               	addlw	5
 18337  09BB  0086               	movwf	6
 18338  09BC  3001               	movlw	1	; select bank2/3
 18339  09BD  0087               	movwf	7
 18340  09BE  0020               	movlb	0	; select bank0
 18341  09BF  082B               	movf	??_setBuz,w
 18342  09C0  0081               	movwf	1
 18343                           
 18344                           ;Buzzer_B1.c: 48: Buz->TimeValueBuffer2 = time;
 18345  09C1  0021               	movlb	1	; select bank1
 18346  09C2  0837               	movf	_Buz^(0+128),w
 18347  09C3  3E0A               	addlw	10
 18348  09C4  0086               	movwf	6
 18349  09C5  3001               	movlw	1	; select bank2/3
 18350  09C6  0087               	movwf	7
 18351  09C7  0020               	movlb	0	; select bank0
 18352  09C8  0829               	movf	setBuz@time,w
 18353  09C9  3FC0               	movwi [0]fsr1
 18354  09CA  082A               	movf	setBuz@time+1,w
 18355  09CB  3FC1               	movwi [1]fsr1
 18356  09CC  0008               	return
 18357  09CD                     __end_of_setBuz:	
 18358                           
 18359                           	psect	text115
 18360  105F                     __ptext115:	
 18361 ;; *************** function ___awdiv *****************
 18362 ;; Defined at:
 18363 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awdiv.c"
 18364 ;; Parameters:    Size  Location     Type
 18365 ;;  divisor         2    0[BANK0 ] int 
 18366 ;;  dividend        2    2[BANK0 ] int 
 18367 ;; Auto vars:     Size  Location     Type
 18368 ;;  quotient        2    7[BANK0 ] int 
 18369 ;;  sign            1    6[BANK0 ] unsigned char 
 18370 ;;  counter         1    5[BANK0 ] unsigned char 
 18371 ;; Return value:  Size  Location     Type
 18372 ;;                  2    0[BANK0 ] int 
 18373 ;; Registers used:
 18374 ;;		wreg, status,2, status,0
 18375 ;; Tracked objects:
 18376 ;;		On entry : 0/0
 18377 ;;		On exit  : 0/0
 18378 ;;		Unchanged: 0/0
 18379 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18380 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18381 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18382 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18383 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18384 ;;Total ram usage:        9 bytes
 18385 ;; Hardware stack levels used:    1
 18386 ;; Hardware stack levels required when called:    5
 18387 ;; This function calls:
 18388 ;;		Nothing
 18389 ;; This function is called by:
 18390 ;;		_setBuz
 18391 ;; This function uses a non-reentrant model
 18392 ;;
 18393                           
 18394                           
 18395                           ;psect for function ___awdiv
 18396  105F                     ___awdiv:	
 18397                           
 18398                           ;incstack = 0
 18399                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 18400  105F  0020               	movlb	0	; select bank0
 18401  1060  01A6               	clrf	___awdiv@sign
 18402  1061  1FA1               	btfss	___awdiv@divisor+1,7
 18403  1062  286A               	goto	l6328
 18404  1063  09A0               	comf	___awdiv@divisor,f
 18405  1064  09A1               	comf	___awdiv@divisor+1,f
 18406  1065  0AA0               	incf	___awdiv@divisor,f
 18407  1066  1903               	skipnz
 18408  1067  0AA1               	incf	___awdiv@divisor+1,f
 18409  1068  01A6               	clrf	___awdiv@sign
 18410  1069  0AA6               	incf	___awdiv@sign,f
 18411  106A                     l6328:	
 18412  106A  1FA3               	btfss	___awdiv@dividend+1,7
 18413  106B  2875               	goto	l6334
 18414  106C  09A2               	comf	___awdiv@dividend,f
 18415  106D  09A3               	comf	___awdiv@dividend+1,f
 18416  106E  0AA2               	incf	___awdiv@dividend,f
 18417  106F  1903               	skipnz
 18418  1070  0AA3               	incf	___awdiv@dividend+1,f
 18419  1071  3001               	movlw	1
 18420  1072  00A4               	movwf	??___awdiv
 18421  1073  0824               	movf	??___awdiv,w
 18422  1074  06A6               	xorwf	___awdiv@sign,f
 18423  1075                     l6334:	
 18424  1075  01A7               	clrf	___awdiv@quotient
 18425  1076  01A8               	clrf	___awdiv@quotient+1
 18426  1077  0821               	movf	___awdiv@divisor+1,w
 18427  1078  0420               	iorwf	___awdiv@divisor,w
 18428  1079  1903               	skipnz
 18429  107A  28A4               	goto	l6356
 18430  107B  01A5               	clrf	___awdiv@counter
 18431  107C  0AA5               	incf	___awdiv@counter,f
 18432  107D                     l6344:	
 18433  107D  1BA1               	btfsc	___awdiv@divisor+1,7
 18434  107E  2889               	goto	l6346
 18435  107F  3001               	movlw	1
 18436  1080                     u4825:	
 18437  1080  35A0               	lslf	___awdiv@divisor,f
 18438  1081  0DA1               	rlf	___awdiv@divisor+1,f
 18439  1082  0B89               	decfsz	9,f
 18440  1083  2880               	goto	u4825
 18441  1084  3001               	movlw	1
 18442  1085  00A4               	movwf	??___awdiv
 18443  1086  0824               	movf	??___awdiv,w
 18444  1087  07A5               	addwf	___awdiv@counter,f
 18445  1088  287D               	goto	l6344
 18446  1089                     l6346:	
 18447  1089  3001               	movlw	1
 18448  108A                     u4845:	
 18449  108A  35A7               	lslf	___awdiv@quotient,f
 18450  108B  0DA8               	rlf	___awdiv@quotient+1,f
 18451  108C  0B89               	decfsz	9,f
 18452  108D  288A               	goto	u4845
 18453  108E  0821               	movf	___awdiv@divisor+1,w
 18454  108F  0223               	subwf	___awdiv@dividend+1,w
 18455  1090  1D03               	skipz
 18456  1091  2894               	goto	u4855
 18457  1092  0820               	movf	___awdiv@divisor,w
 18458  1093  0222               	subwf	___awdiv@dividend,w
 18459  1094                     u4855:	
 18460  1094  1C03               	skipc
 18461  1095  289B               	goto	l6352
 18462  1096  0820               	movf	___awdiv@divisor,w
 18463  1097  02A2               	subwf	___awdiv@dividend,f
 18464  1098  0821               	movf	___awdiv@divisor+1,w
 18465  1099  3BA3               	subwfb	___awdiv@dividend+1,f
 18466  109A  1427               	bsf	___awdiv@quotient,0
 18467  109B                     l6352:	
 18468  109B  3001               	movlw	1
 18469  109C                     u4865:	
 18470  109C  36A1               	lsrf	___awdiv@divisor+1,f
 18471  109D  0CA0               	rrf	___awdiv@divisor,f
 18472  109E  0B89               	decfsz	9,f
 18473  109F  289C               	goto	u4865
 18474  10A0  3001               	movlw	1
 18475  10A1  02A5               	subwf	___awdiv@counter,f
 18476  10A2  1D03               	btfss	3,2
 18477  10A3  2889               	goto	l6346
 18478  10A4                     l6356:	
 18479  10A4  0826               	movf	___awdiv@sign,w
 18480  10A5  1903               	btfsc	3,2
 18481  10A6  28AC               	goto	l6360
 18482  10A7  09A7               	comf	___awdiv@quotient,f
 18483  10A8  09A8               	comf	___awdiv@quotient+1,f
 18484  10A9  0AA7               	incf	___awdiv@quotient,f
 18485  10AA  1903               	skipnz
 18486  10AB  0AA8               	incf	___awdiv@quotient+1,f
 18487  10AC                     l6360:	
 18488  10AC  0828               	movf	___awdiv@quotient+1,w
 18489  10AD  01A1               	clrf	?___awdiv+1
 18490  10AE  07A1               	addwf	?___awdiv+1,f
 18491  10AF  0827               	movf	___awdiv@quotient,w
 18492  10B0  01A0               	clrf	?___awdiv
 18493  10B1  07A0               	addwf	?___awdiv,f
 18494  10B2  0008               	return
 18495  10B3                     __end_of___awdiv:	
 18496                           
 18497                           	psect	text116
 18498  251F                     __ptext116:	
 18499 ;; *************** function _DelayOff_Initialization *****************
 18500 ;; Defined at:
 18501 ;;		line 26 in file "../src/DelayOff_B1.c"
 18502 ;; Parameters:    Size  Location     Type
 18503 ;;		None
 18504 ;; Auto vars:     Size  Location     Type
 18505 ;;		None
 18506 ;; Return value:  Size  Location     Type
 18507 ;;		None               void
 18508 ;; Registers used:
 18509 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18510 ;; Tracked objects:
 18511 ;;		On entry : 0/0
 18512 ;;		On exit  : 0/0
 18513 ;;		Unchanged: 0/0
 18514 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18515 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18516 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18517 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18518 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18519 ;;Total ram usage:        0 bytes
 18520 ;; Hardware stack levels used:    1
 18521 ;; Hardware stack levels required when called:    7
 18522 ;; This function calls:
 18523 ;;		_DlyOff_Initialization
 18524 ;; This function is called by:
 18525 ;;		_main
 18526 ;; This function uses a non-reentrant model
 18527 ;;
 18528                           
 18529                           
 18530                           ;psect for function _DelayOff_Initialization
 18531  251F                     _DelayOff_Initialization:	
 18532                           
 18533                           ;DelayOff_B1.c: 28: DlyOff_Initialization(1);
 18534                           
 18535                           ;incstack = 0
 18536                           ; Regs used in _DelayOff_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 18537  251F  3001               	movlw	1
 18538  2520  31A5  2552  31A5   	fcall	_DlyOff_Initialization
 18539                           
 18540                           ;DelayOff_B1.c: 32: DlyOff_Initialization(2);
 18541  2523  3002               	movlw	2
 18542  2524  31A5  2552         	fcall	_DlyOff_Initialization
 18543  2526  0008               	return
 18544  2527                     __end_of_DelayOff_Initialization:	
 18545                           
 18546                           	psect	text117
 18547  2552                     __ptext117:	
 18548 ;; *************** function _DlyOff_Initialization *****************
 18549 ;; Defined at:
 18550 ;;		line 56 in file "../src/DelayOff_B1.c"
 18551 ;; Parameters:    Size  Location     Type
 18552 ;;  sw              1    wreg     unsigned char 
 18553 ;; Auto vars:     Size  Location     Type
 18554 ;;  sw              1    2[BANK0 ] unsigned char 
 18555 ;; Return value:  Size  Location     Type
 18556 ;;		None               void
 18557 ;; Registers used:
 18558 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18559 ;; Tracked objects:
 18560 ;;		On entry : 0/0
 18561 ;;		On exit  : 0/0
 18562 ;;		Unchanged: 0/0
 18563 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18564 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18565 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18566 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18567 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18568 ;;Total ram usage:        1 bytes
 18569 ;; Hardware stack levels used:    1
 18570 ;; Hardware stack levels required when called:    6
 18571 ;; This function calls:
 18572 ;;		_DelayOffPointSelect
 18573 ;; This function is called by:
 18574 ;;		_DelayOff_Initialization
 18575 ;; This function uses a non-reentrant model
 18576 ;;
 18577                           
 18578                           
 18579                           ;psect for function _DlyOff_Initialization
 18580  2552                     _DlyOff_Initialization:	
 18581                           
 18582                           ;incstack = 0
 18583                           ; Regs used in _DlyOff_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 18584                           ;DlyOff_Initialization@sw stored from wreg
 18585  2552  0020               	movlb	0	; select bank0
 18586  2553  00A2               	movwf	DlyOff_Initialization@sw
 18587                           
 18588                           ;DelayOff_B1.c: 57: DelayOffPointSelect(sw);
 18589  2554  0822               	movf	DlyOff_Initialization@sw,w
 18590  2555  31A7  27A2         	fcall	_DelayOffPointSelect
 18591                           
 18592                           ;DelayOff_B1.c: 58: DelayOff->Enable = 1;
 18593  2557  0021               	movlb	1	; select bank1
 18594  2558  0839               	movf	_DelayOff^(0+128),w
 18595  2559  0086               	movwf	6
 18596  255A  0187               	clrf	7
 18597  255B  1401               	bsf	1,0
 18598  255C  0008               	return
 18599  255D                     __end_of_DlyOff_Initialization:	
 18600                           
 18601                           	psect	text118
 18602  27A2                     __ptext118:	
 18603 ;; *************** function _DelayOffPointSelect *****************
 18604 ;; Defined at:
 18605 ;;		line 7 in file "../src/DelayOff_B1.c"
 18606 ;; Parameters:    Size  Location     Type
 18607 ;;  sw              1    wreg     unsigned char 
 18608 ;; Auto vars:     Size  Location     Type
 18609 ;;  sw              1    1[BANK0 ] unsigned char 
 18610 ;; Return value:  Size  Location     Type
 18611 ;;		None               void
 18612 ;; Registers used:
 18613 ;;		wreg
 18614 ;; Tracked objects:
 18615 ;;		On entry : 0/0
 18616 ;;		On exit  : 0/0
 18617 ;;		Unchanged: 0/0
 18618 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18619 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18620 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18621 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18622 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18623 ;;Total ram usage:        2 bytes
 18624 ;; Hardware stack levels used:    1
 18625 ;; Hardware stack levels required when called:    5
 18626 ;; This function calls:
 18627 ;;		Nothing
 18628 ;; This function is called by:
 18629 ;;		_DlyOff_Initialization
 18630 ;;		_DlyOff_Main
 18631 ;;		_setDelayOff_GO
 18632 ;; This function uses a non-reentrant model
 18633 ;;
 18634                           
 18635                           
 18636                           ;psect for function _DelayOffPointSelect
 18637  27A2                     _DelayOffPointSelect:	
 18638                           
 18639                           ;incstack = 0
 18640                           ; Regs used in _DelayOffPointSelect: [wreg]
 18641                           ;DelayOffPointSelect@sw stored from wreg
 18642  27A2  0020               	movlb	0	; select bank0
 18643  27A3  00A1               	movwf	DelayOffPointSelect@sw
 18644                           
 18645                           ;DelayOff_B1.c: 9: if (sw == 1) {
 18646  27A4  0821               	movf	DelayOffPointSelect@sw,w
 18647  27A5  3A01               	xorlw	1
 18648  27A6  1D03               	skipz
 18649  27A7  2FAE               	goto	l6244
 18650                           
 18651                           ;DelayOff_B1.c: 10: DelayOff = &DlySw1;
 18652  27A8  30C9               	movlw	_DlySw1& (0+255)
 18653  27A9  00A0               	movwf	??_DelayOffPointSelect
 18654  27AA  0820               	movf	??_DelayOffPointSelect,w
 18655  27AB  0021               	movlb	1	; select bank1
 18656  27AC  00B9               	movwf	_DelayOff^(0+128)
 18657                           
 18658                           ;DelayOff_B1.c: 11: }
 18659  27AD  0008               	return
 18660  27AE                     l6244:	
 18661                           
 18662                           ;DelayOff_B1.c: 14: else if (sw == 2) {
 18663  27AE  0020               	movlb	0	; select bank0
 18664  27AF  0821               	movf	DelayOffPointSelect@sw,w
 18665  27B0  3A02               	xorlw	2
 18666  27B1  1D03               	skipz
 18667  27B2  0008               	return
 18668                           
 18669                           ;DelayOff_B1.c: 15: DelayOff = &DlySw2;
 18670  27B3  30CE               	movlw	_DlySw2& (0+255)
 18671  27B4  00A0               	movwf	??_DelayOffPointSelect
 18672  27B5  0820               	movf	??_DelayOffPointSelect,w
 18673  27B6  0021               	movlb	1	; select bank1
 18674  27B7  00B9               	movwf	_DelayOff^(0+128)
 18675  27B8  0008               	return
 18676  27B9                     __end_of_DelayOffPointSelect:	
 18677                           
 18678                           	psect	text119
 18679  2761                     __ptext119:	
 18680 ;; *************** function _CC2500_PowerOnInitial *****************
 18681 ;; Defined at:
 18682 ;;		line 111 in file "../src/CC2500_B1.c"
 18683 ;; Parameters:    Size  Location     Type
 18684 ;;		None
 18685 ;; Auto vars:     Size  Location     Type
 18686 ;;		None
 18687 ;; Return value:  Size  Location     Type
 18688 ;;		None               void
 18689 ;; Registers used:
 18690 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 18691 ;; Tracked objects:
 18692 ;;		On entry : 0/0
 18693 ;;		On exit  : 0/0
 18694 ;;		Unchanged: 0/0
 18695 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18696 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18697 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18698 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18699 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18700 ;;Total ram usage:        0 bytes
 18701 ;; Hardware stack levels used:    1
 18702 ;; Hardware stack levels required when called:    8
 18703 ;; This function calls:
 18704 ;;		_CC2500_ClearRXFIFO
 18705 ;;		_CC2500_ClearTXFIFO
 18706 ;;		_CC2500_FrequencyCabr
 18707 ;;		_CC2500_InitPATable
 18708 ;;		_CC2500_InitSetREG
 18709 ;;		_CC2500_PowerRST
 18710 ;;		_CC2500_SIDLEMode
 18711 ;; This function is called by:
 18712 ;;		_main
 18713 ;; This function uses a non-reentrant model
 18714 ;;
 18715                           
 18716                           
 18717                           ;psect for function _CC2500_PowerOnInitial
 18718  2761                     _CC2500_PowerOnInitial:	
 18719                           
 18720                           ;CC2500_B1.c: 112: CC2500_PowerRST();
 18721                           
 18722                           ;incstack = 0
 18723                           ; Regs used in _CC2500_PowerOnInitial: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 18724  2761  319B  23EB  31A7   	fcall	_CC2500_PowerRST
 18725                           
 18726                           ;CC2500_B1.c: 113: CC2500_InitSetREG();
 18727  2764  319B  230D  31A7   	fcall	_CC2500_InitSetREG
 18728                           
 18729                           ;CC2500_B1.c: 114: CC2500_InitPATable();
 18730  2767  3199  21B7  31A7   	fcall	_CC2500_InitPATable
 18731                           
 18732                           ;CC2500_B1.c: 115: CC2500_ClearTXFIFO();
 18733  276A  31A4  24E5  31A7   	fcall	_CC2500_ClearTXFIFO
 18734                           
 18735                           ;CC2500_B1.c: 116: CC2500_ClearRXFIFO();
 18736  276D  31A4  24E1  31A7   	fcall	_CC2500_ClearRXFIFO
 18737                           
 18738                           ;CC2500_B1.c: 117: CC2500_FrequencyCabr();
 18739  2770  31A5  2596  31A7   	fcall	_CC2500_FrequencyCabr
 18740                           
 18741                           ;CC2500_B1.c: 118: CC2500_SIDLEMode();
 18742  2773  31A4  24E9         	fcall	_CC2500_SIDLEMode
 18743  2775  0008               	return
 18744  2776                     __end_of_CC2500_PowerOnInitial:	
 18745                           
 18746                           	psect	text120
 18747  24E9                     __ptext120:	
 18748 ;; *************** function _CC2500_SIDLEMode *****************
 18749 ;; Defined at:
 18750 ;;		line 195 in file "../src/CC2500_B1.c"
 18751 ;; Parameters:    Size  Location     Type
 18752 ;;		None
 18753 ;; Auto vars:     Size  Location     Type
 18754 ;;		None
 18755 ;; Return value:  Size  Location     Type
 18756 ;;		None               void
 18757 ;; Registers used:
 18758 ;;		wreg, status,2, status,0, pclath, cstack
 18759 ;; Tracked objects:
 18760 ;;		On entry : 0/0
 18761 ;;		On exit  : 0/0
 18762 ;;		Unchanged: 0/0
 18763 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18764 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18765 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18766 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18767 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18768 ;;Total ram usage:        0 bytes
 18769 ;; Hardware stack levels used:    1
 18770 ;; Hardware stack levels required when called:    7
 18771 ;; This function calls:
 18772 ;;		_CC2500_WriteCommand
 18773 ;; This function is called by:
 18774 ;;		_CC2500_PowerOnInitial
 18775 ;; This function uses a non-reentrant model
 18776 ;;
 18777                           
 18778                           
 18779                           ;psect for function _CC2500_SIDLEMode
 18780  24E9                     _CC2500_SIDLEMode:	
 18781                           
 18782                           ;CC2500_B1.c: 196: CC2500_WriteCommand(0x36);
 18783                           
 18784                           ;incstack = 0
 18785                           ; Regs used in _CC2500_SIDLEMode: [wreg+status,2+status,0+pclath+cstack]
 18786  24E9  3036               	movlw	54
 18787  24EA  31A6  265D         	fcall	_CC2500_WriteCommand
 18788  24EC  0008               	return
 18789  24ED                     __end_of_CC2500_SIDLEMode:	
 18790                           
 18791                           	psect	text121
 18792  1BEB                     __ptext121:	
 18793 ;; *************** function _CC2500_PowerRST *****************
 18794 ;; Defined at:
 18795 ;;		line 124 in file "../src/CC2500_B1.c"
 18796 ;; Parameters:    Size  Location     Type
 18797 ;;		None
 18798 ;; Auto vars:     Size  Location     Type
 18799 ;;		None
 18800 ;; Return value:  Size  Location     Type
 18801 ;;		None               void
 18802 ;; Registers used:
 18803 ;;		wreg, status,2, status,0, pclath, cstack
 18804 ;; Tracked objects:
 18805 ;;		On entry : 0/0
 18806 ;;		On exit  : 0/0
 18807 ;;		Unchanged: 0/0
 18808 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18809 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18810 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18811 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18812 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18813 ;;Total ram usage:        1 bytes
 18814 ;; Hardware stack levels used:    1
 18815 ;; Hardware stack levels required when called:    6
 18816 ;; This function calls:
 18817 ;;		_CC2500_WriteByte
 18818 ;;		_DelayTime_1us
 18819 ;; This function is called by:
 18820 ;;		_CC2500_PowerOnInitial
 18821 ;; This function uses a non-reentrant model
 18822 ;;
 18823                           
 18824                           
 18825                           ;psect for function _CC2500_PowerRST
 18826  1BEB                     _CC2500_PowerRST:	
 18827                           
 18828                           ;CC2500_B1.c: 125: RC1 = 0;
 18829                           
 18830                           ;incstack = 0
 18831                           ; Regs used in _CC2500_PowerRST: [wreg+status,2+status,0+pclath+cstack]
 18832  1BEB  0020               	movlb	0	; select bank0
 18833  1BEC  108E               	bcf	14,1	;volatile
 18834                           
 18835                           ;CC2500_B1.c: 126: RC0 = 0;
 18836  1BED  100E               	bcf	14,0	;volatile
 18837                           
 18838                           ;CC2500_B1.c: 127: RC4 = 1;
 18839  1BEE  160E               	bsf	14,4	;volatile
 18840                           
 18841                           ;CC2500_B1.c: 128: DelayTime_1us(10);
 18842  1BEF  300A               	movlw	10
 18843  1BF0  00A0               	movwf	DelayTime_1us@count
 18844  1BF1  3000               	movlw	0
 18845  1BF2  00A1               	movwf	DelayTime_1us@count+1
 18846  1BF3  319A  22BE  319B   	fcall	_DelayTime_1us
 18847                           
 18848                           ;CC2500_B1.c: 129: RC4 = 0;
 18849  1BF6  0020               	movlb	0	; select bank0
 18850  1BF7  120E               	bcf	14,4	;volatile
 18851                           
 18852                           ;CC2500_B1.c: 130: DelayTime_1us(10);
 18853  1BF8  300A               	movlw	10
 18854  1BF9  00A0               	movwf	DelayTime_1us@count
 18855  1BFA  3000               	movlw	0
 18856  1BFB  00A1               	movwf	DelayTime_1us@count+1
 18857  1BFC  319A  22BE  319B   	fcall	_DelayTime_1us
 18858                           
 18859                           ;CC2500_B1.c: 131: RC4 = 1;
 18860  1BFF  0020               	movlb	0	; select bank0
 18861  1C00  160E               	bsf	14,4	;volatile
 18862                           
 18863                           ;CC2500_B1.c: 132: DelayTime_1us(40);
 18864  1C01  3028               	movlw	40
 18865  1C02  00A0               	movwf	DelayTime_1us@count
 18866  1C03  3000               	movlw	0
 18867  1C04  00A1               	movwf	DelayTime_1us@count+1
 18868  1C05  319A  22BE  319B   	fcall	_DelayTime_1us
 18869                           
 18870                           ;CC2500_B1.c: 133: RC4 = 0;
 18871  1C08  0020               	movlb	0	; select bank0
 18872  1C09  120E               	bcf	14,4	;volatile
 18873                           
 18874                           ;CC2500_B1.c: 134: SPI0Buffer = 0x30;
 18875  1C0A  3030               	movlw	48
 18876  1C0B  00A6               	movwf	??_CC2500_PowerRST
 18877  1C0C  0826               	movf	??_CC2500_PowerRST,w
 18878  1C0D  0021               	movlb	1	; select bank1
 18879  1C0E  00C3               	movwf	_SPI0Buffer^(0+128)
 18880  1C0F                     l326:	
 18881                           ;CC2500_B1.c: 135: while (RC2 == 1);
 18882                           
 18883  1C0F  0020               	movlb	0	; select bank0
 18884  1C10  190E               	btfsc	14,2	;volatile
 18885  1C11  2C0F               	goto	l326
 18886                           
 18887                           ;CC2500_B1.c: 136: CC2500_WriteByte();
 18888  1C12  3198  206F  319B   	fcall	_CC2500_WriteByte
 18889  1C15                     l329:	
 18890                           ;CC2500_B1.c: 137: while (RC2 == 1);
 18891                           
 18892  1C15  0020               	movlb	0	; select bank0
 18893  1C16  190E               	btfsc	14,2	;volatile
 18894  1C17  2C15               	goto	l329
 18895                           
 18896                           ;CC2500_B1.c: 138: RC0 = 0;
 18897  1C18  100E               	bcf	14,0	;volatile
 18898                           
 18899                           ;CC2500_B1.c: 139: RC4 = 1;
 18900  1C19  160E               	bsf	14,4	;volatile
 18901  1C1A  0008               	return
 18902  1C1B                     __end_of_CC2500_PowerRST:	
 18903                           
 18904                           	psect	text122
 18905  1B0D                     __ptext122:	
 18906 ;; *************** function _CC2500_InitSetREG *****************
 18907 ;; Defined at:
 18908 ;;		line 145 in file "../src/CC2500_B1.c"
 18909 ;; Parameters:    Size  Location     Type
 18910 ;;		None
 18911 ;; Auto vars:     Size  Location     Type
 18912 ;;  loop_c          1    8[BANK0 ] unsigned char 
 18913 ;;  temp2           1    7[BANK0 ] unsigned char 
 18914 ;;  temp1           1    6[BANK0 ] unsigned char 
 18915 ;; Return value:  Size  Location     Type
 18916 ;;		None               void
 18917 ;; Registers used:
 18918 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 18919 ;; Tracked objects:
 18920 ;;		On entry : 0/0
 18921 ;;		On exit  : 0/0
 18922 ;;		Unchanged: 0/0
 18923 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18924 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18925 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18926 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18927 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18928 ;;Total ram usage:        4 bytes
 18929 ;; Hardware stack levels used:    1
 18930 ;; Hardware stack levels required when called:    7
 18931 ;; This function calls:
 18932 ;;		_CC2500_WriteREG
 18933 ;; This function is called by:
 18934 ;;		_CC2500_PowerOnInitial
 18935 ;; This function uses a non-reentrant model
 18936 ;;
 18937                           
 18938                           
 18939                           ;psect for function _CC2500_InitSetREG
 18940  1B0D                     _CC2500_InitSetREG:	
 18941                           
 18942                           ;CC2500_B1.c: 146: unsigned char loop_c;
 18943                           ;CC2500_B1.c: 147: unsigned char temp1, temp2;
 18944                           ;CC2500_B1.c: 149: for (loop_c = 0; loop_c < 47; loop_c++) {
 18945                           
 18946                           ;incstack = 0
 18947                           ; Regs used in _CC2500_InitSetREG: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 18948  1B0D  0020               	movlb	0	; select bank0
 18949  1B0E  01A8               	clrf	CC2500_InitSetREG@loop_c
 18950  1B0F                     L14:	
 18951  1B0F  302F               	movlw	47
 18952  1B10  0228               	subwf	CC2500_InitSetREG@loop_c,w
 18953  1B11  1803               	btfsc	3,0
 18954  1B12  0008               	return
 18955                           
 18956                           ;CC2500_B1.c: 150: temp1 = CC2500_registers_address[loop_c];
 18957  1B13  0828               	movf	CC2500_InitSetREG@loop_c,w
 18958  1B14  3E00               	addlw	low (_CC2500_registers_address| (0+32768))
 18959  1B15  0084               	movwf	4
 18960  1B16  3098               	movlw	high (_CC2500_registers_address| (0+32768))
 18961  1B17  1803               	skipnc
 18962  1B18  3E01               	addlw	1
 18963  1B19  0085               	movwf	5
 18964  1B1A  0800               	movf	0,w	;code access
 18965  1B1B  00A5               	movwf	??_CC2500_InitSetREG
 18966  1B1C  0825               	movf	??_CC2500_InitSetREG,w
 18967  1B1D  00A6               	movwf	CC2500_InitSetREG@temp1
 18968                           
 18969                           ;CC2500_B1.c: 151: temp2 = CC2500_rfSettings[loop_c];
 18970  1B1E  0828               	movf	CC2500_InitSetREG@loop_c,w
 18971  1B1F  3E2F               	addlw	low (_CC2500_rfSettings| (0+32768))
 18972  1B20  0084               	movwf	4
 18973  1B21  3098               	movlw	high (_CC2500_rfSettings| (0+32768))
 18974  1B22  1803               	skipnc
 18975  1B23  3E01               	addlw	1
 18976  1B24  0085               	movwf	5
 18977  1B25  0800               	movf	0,w	;code access
 18978  1B26  00A5               	movwf	??_CC2500_InitSetREG
 18979  1B27  0825               	movf	??_CC2500_InitSetREG,w
 18980  1B28  00A7               	movwf	CC2500_InitSetREG@temp2
 18981                           
 18982                           ;CC2500_B1.c: 153: CC2500_WriteREG(temp1, temp2);
 18983  1B29  0827               	movf	CC2500_InitSetREG@temp2,w
 18984  1B2A  00A5               	movwf	??_CC2500_InitSetREG
 18985  1B2B  0825               	movf	??_CC2500_InitSetREG,w
 18986  1B2C  00A2               	movwf	CC2500_WriteREG@value
 18987  1B2D  0826               	movf	CC2500_InitSetREG@temp1,w
 18988  1B2E  3198  2088  319B   	fcall	_CC2500_WriteREG
 18989  1B31  3001               	movlw	1
 18990  1B32  0020               	movlb	0	; select bank0
 18991  1B33  00A5               	movwf	??_CC2500_InitSetREG
 18992  1B34  0825               	movf	??_CC2500_InitSetREG,w
 18993  1B35  07A8               	addwf	CC2500_InitSetREG@loop_c,f
 18994  1B36  2B0F               	goto	L14
 18995  1B37                     __end_of_CC2500_InitSetREG:	
 18996                           
 18997                           	psect	text123
 18998  19B7                     __ptext123:	
 18999 ;; *************** function _CC2500_InitPATable *****************
 19000 ;; Defined at:
 19001 ;;		line 160 in file "../src/CC2500_B1.c"
 19002 ;; Parameters:    Size  Location     Type
 19003 ;;		None
 19004 ;; Auto vars:     Size  Location     Type
 19005 ;;  loop_d          1    7[BANK0 ] unsigned char 
 19006 ;;  temp            1    6[BANK0 ] unsigned char 
 19007 ;; Return value:  Size  Location     Type
 19008 ;;		None               void
 19009 ;; Registers used:
 19010 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 19011 ;; Tracked objects:
 19012 ;;		On entry : 0/0
 19013 ;;		On exit  : 0/0
 19014 ;;		Unchanged: 0/0
 19015 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19016 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19017 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19018 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19019 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19020 ;;Total ram usage:        3 bytes
 19021 ;; Hardware stack levels used:    1
 19022 ;; Hardware stack levels required when called:    7
 19023 ;; This function calls:
 19024 ;;		_CC2500_WriteREG
 19025 ;; This function is called by:
 19026 ;;		_CC2500_PowerOnInitial
 19027 ;; This function uses a non-reentrant model
 19028 ;;
 19029                           
 19030                           
 19031                           ;psect for function _CC2500_InitPATable
 19032  19B7                     _CC2500_InitPATable:	
 19033                           
 19034                           ;CC2500_B1.c: 161: unsigned char loop_d;
 19035                           ;CC2500_B1.c: 162: unsigned char temp;
 19036                           ;CC2500_B1.c: 164: for (loop_d = 0; loop_d < 8; loop_d++) {
 19037                           
 19038                           ;incstack = 0
 19039                           ; Regs used in _CC2500_InitPATable: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 19040  19B7  0020               	movlb	0	; select bank0
 19041  19B8  01A7               	clrf	CC2500_InitPATable@loop_d
 19042  19B9                     L15:	
 19043  19B9  3008               	movlw	8
 19044  19BA  0227               	subwf	CC2500_InitPATable@loop_d,w
 19045  19BB  1803               	btfsc	3,0
 19046  19BC  0008               	return
 19047                           
 19048                           ;CC2500_B1.c: 165: temp = CC2500_patable_vaule[loop_d];
 19049  19BD  0827               	movf	CC2500_InitPATable@loop_d,w
 19050  19BE  3E5E               	addlw	low (_CC2500_patable_vaule| (0+32768))
 19051  19BF  0084               	movwf	4
 19052  19C0  3098               	movlw	high (_CC2500_patable_vaule| (0+32768))
 19053  19C1  1803               	skipnc
 19054  19C2  3E01               	addlw	1
 19055  19C3  0085               	movwf	5
 19056  19C4  0800               	movf	0,w	;code access
 19057  19C5  00A5               	movwf	??_CC2500_InitPATable
 19058  19C6  0825               	movf	??_CC2500_InitPATable,w
 19059  19C7  00A6               	movwf	CC2500_InitPATable@temp
 19060                           
 19061                           ;CC2500_B1.c: 166: CC2500_WriteREG(0x3E, temp);
 19062  19C8  0826               	movf	CC2500_InitPATable@temp,w
 19063  19C9  00A5               	movwf	??_CC2500_InitPATable
 19064  19CA  0825               	movf	??_CC2500_InitPATable,w
 19065  19CB  00A2               	movwf	CC2500_WriteREG@value
 19066  19CC  303E               	movlw	62
 19067  19CD  3198  2088  3199   	fcall	_CC2500_WriteREG
 19068  19D0  3001               	movlw	1
 19069  19D1  0020               	movlb	0	; select bank0
 19070  19D2  00A5               	movwf	??_CC2500_InitPATable
 19071  19D3  0825               	movf	??_CC2500_InitPATable,w
 19072  19D4  07A7               	addwf	CC2500_InitPATable@loop_d,f
 19073  19D5  29B9               	goto	L15
 19074  19D6                     __end_of_CC2500_InitPATable:	
 19075                           
 19076                           	psect	text124
 19077  1888                     __ptext124:	
 19078 ;; *************** function _CC2500_WriteREG *****************
 19079 ;; Defined at:
 19080 ;;		line 237 in file "../src/CC2500_B1.c"
 19081 ;; Parameters:    Size  Location     Type
 19082 ;;  w_addr          1    wreg     unsigned char 
 19083 ;;  value           1    2[BANK0 ] unsigned char 
 19084 ;; Auto vars:     Size  Location     Type
 19085 ;;  w_addr          1    4[BANK0 ] unsigned char 
 19086 ;; Return value:  Size  Location     Type
 19087 ;;		None               void
 19088 ;; Registers used:
 19089 ;;		wreg, status,2, status,0, pclath, cstack
 19090 ;; Tracked objects:
 19091 ;;		On entry : 0/0
 19092 ;;		On exit  : 0/0
 19093 ;;		Unchanged: 0/0
 19094 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19095 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19096 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19097 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19098 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19099 ;;Total ram usage:        3 bytes
 19100 ;; Hardware stack levels used:    1
 19101 ;; Hardware stack levels required when called:    6
 19102 ;; This function calls:
 19103 ;;		_CC2500_WriteByte
 19104 ;; This function is called by:
 19105 ;;		_CC2500_InitSetREG
 19106 ;;		_CC2500_InitPATable
 19107 ;; This function uses a non-reentrant model
 19108 ;;
 19109                           
 19110                           
 19111                           ;psect for function _CC2500_WriteREG
 19112  1888                     _CC2500_WriteREG:	
 19113                           
 19114                           ;incstack = 0
 19115                           ; Regs used in _CC2500_WriteREG: [wreg+status,2+status,0+pclath+cstack]
 19116                           ;CC2500_WriteREG@w_addr stored from wreg
 19117  1888  0020               	movlb	0	; select bank0
 19118  1889  00A4               	movwf	CC2500_WriteREG@w_addr
 19119                           
 19120                           ;CC2500_B1.c: 238: RC4 = 0;
 19121  188A  120E               	bcf	14,4	;volatile
 19122                           
 19123                           ;CC2500_B1.c: 239: SPI0Buffer = w_addr;
 19124  188B  0824               	movf	CC2500_WriteREG@w_addr,w
 19125  188C  00A3               	movwf	??_CC2500_WriteREG
 19126  188D  0823               	movf	??_CC2500_WriteREG,w
 19127  188E  0021               	movlb	1	; select bank1
 19128  188F  00C3               	movwf	_SPI0Buffer^(0+128)
 19129  1890                     l371:	
 19130                           ;CC2500_B1.c: 240: while (RC2 == 1);
 19131                           
 19132  1890  0020               	movlb	0	; select bank0
 19133  1891  190E               	btfsc	14,2	;volatile
 19134  1892  2890               	goto	l371
 19135                           
 19136                           ;CC2500_B1.c: 241: CC2500_WriteByte();
 19137  1893  3198  206F  3198   	fcall	_CC2500_WriteByte
 19138                           
 19139                           ;CC2500_B1.c: 242: SPI0Buffer = value;
 19140  1896  0020               	movlb	0	; select bank0
 19141  1897  0822               	movf	CC2500_WriteREG@value,w
 19142  1898  00A3               	movwf	??_CC2500_WriteREG
 19143  1899  0823               	movf	??_CC2500_WriteREG,w
 19144  189A  0021               	movlb	1	; select bank1
 19145  189B  00C3               	movwf	_SPI0Buffer^(0+128)
 19146                           
 19147                           ;CC2500_B1.c: 243: CC2500_WriteByte();
 19148  189C  3198  206F         	fcall	_CC2500_WriteByte
 19149                           
 19150                           ;CC2500_B1.c: 244: RC4 = 1;
 19151  189E  0020               	movlb	0	; select bank0
 19152  189F  160E               	bsf	14,4	;volatile
 19153  18A0  0008               	return
 19154  18A1                     __end_of_CC2500_WriteREG:	
 19155                           
 19156                           	psect	text125
 19157  2596                     __ptext125:	
 19158 ;; *************** function _CC2500_FrequencyCabr *****************
 19159 ;; Defined at:
 19160 ;;		line 187 in file "../src/CC2500_B1.c"
 19161 ;; Parameters:    Size  Location     Type
 19162 ;;		None
 19163 ;; Auto vars:     Size  Location     Type
 19164 ;;		None
 19165 ;; Return value:  Size  Location     Type
 19166 ;;		None               void
 19167 ;; Registers used:
 19168 ;;		wreg, status,2, status,0, pclath, cstack
 19169 ;; Tracked objects:
 19170 ;;		On entry : 0/0
 19171 ;;		On exit  : 0/0
 19172 ;;		Unchanged: 0/0
 19173 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19174 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19175 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19176 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19177 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19178 ;;Total ram usage:        0 bytes
 19179 ;; Hardware stack levels used:    1
 19180 ;; Hardware stack levels required when called:    7
 19181 ;; This function calls:
 19182 ;;		_CC2500_WriteCommand
 19183 ;;		_DelayTime_1us
 19184 ;; This function is called by:
 19185 ;;		_CC2500_PowerOnInitial
 19186 ;; This function uses a non-reentrant model
 19187 ;;
 19188                           
 19189                           
 19190                           ;psect for function _CC2500_FrequencyCabr
 19191  2596                     _CC2500_FrequencyCabr:	
 19192                           
 19193                           ;CC2500_B1.c: 188: CC2500_WriteCommand(0x33);
 19194                           
 19195                           ;incstack = 0
 19196                           ; Regs used in _CC2500_FrequencyCabr: [wreg+status,2+status,0+pclath+cstack]
 19197  2596  3033               	movlw	51
 19198  2597  31A6  265D  31A5   	fcall	_CC2500_WriteCommand
 19199                           
 19200                           ;CC2500_B1.c: 189: DelayTime_1us(1000);
 19201  259A  30E8               	movlw	232
 19202  259B  0020               	movlb	0	; select bank0
 19203  259C  00A0               	movwf	DelayTime_1us@count
 19204  259D  3003               	movlw	3
 19205  259E  00A1               	movwf	DelayTime_1us@count+1
 19206  259F  319A  22BE         	fcall	_DelayTime_1us
 19207  25A1  0008               	return
 19208  25A2                     __end_of_CC2500_FrequencyCabr:	
 19209                           
 19210                           	psect	text126
 19211  1ABE                     __ptext126:	
 19212 ;; *************** function _DelayTime_1us *****************
 19213 ;; Defined at:
 19214 ;;		line 293 in file "../src/CC2500_B1.c"
 19215 ;; Parameters:    Size  Location     Type
 19216 ;;  count           2    0[BANK0 ] int 
 19217 ;; Auto vars:     Size  Location     Type
 19218 ;;  j               2    4[BANK0 ] unsigned int 
 19219 ;;  i               2    2[BANK0 ] unsigned int 
 19220 ;; Return value:  Size  Location     Type
 19221 ;;		None               void
 19222 ;; Registers used:
 19223 ;;		wreg, status,2
 19224 ;; Tracked objects:
 19225 ;;		On entry : 0/0
 19226 ;;		On exit  : 0/0
 19227 ;;		Unchanged: 0/0
 19228 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19229 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19230 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19231 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19232 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19233 ;;Total ram usage:        6 bytes
 19234 ;; Hardware stack levels used:    1
 19235 ;; Hardware stack levels required when called:    5
 19236 ;; This function calls:
 19237 ;;		Nothing
 19238 ;; This function is called by:
 19239 ;;		_CC2500_PowerRST
 19240 ;;		_CC2500_FrequencyCabr
 19241 ;; This function uses a non-reentrant model
 19242 ;;
 19243                           
 19244                           
 19245                           ;psect for function _DelayTime_1us
 19246  1ABE                     _DelayTime_1us:	
 19247                           
 19248                           ;CC2500_B1.c: 294: unsigned int i, j;
 19249                           ;CC2500_B1.c: 295: for (i = 1; i < count; i++)
 19250                           
 19251                           ;incstack = 0
 19252                           ; Regs used in _DelayTime_1us: [wreg+status,2]
 19253  1ABE  3001               	movlw	1
 19254  1ABF  0020               	movlb	0	; select bank0
 19255  1AC0  00A2               	movwf	DelayTime_1us@i
 19256  1AC1  3000               	movlw	0
 19257  1AC2  00A3               	movwf	DelayTime_1us@i+1
 19258  1AC3                     l395:	
 19259  1AC3  0821               	movf	DelayTime_1us@count+1,w
 19260  1AC4  0223               	subwf	DelayTime_1us@i+1,w
 19261  1AC5  1D03               	skipz
 19262  1AC6  2AC9               	goto	u5685
 19263  1AC7  0820               	movf	DelayTime_1us@count,w
 19264  1AC8  0222               	subwf	DelayTime_1us@i,w
 19265  1AC9                     u5685:	
 19266  1AC9  1803               	btfsc	3,0
 19267  1ACA  0008               	return
 19268                           
 19269                           ;CC2500_B1.c: 296: for (j = 0; j <= 1; j++);
 19270  1ACB  01A4               	clrf	DelayTime_1us@j
 19271  1ACC  01A5               	clrf	DelayTime_1us@j+1
 19272  1ACD  3000               	movlw	0
 19273  1ACE  0225               	subwf	DelayTime_1us@j+1,w
 19274  1ACF  3002               	movlw	2
 19275  1AD0  1903               	skipnz
 19276  1AD1  0224               	subwf	DelayTime_1us@j,w
 19277  1AD2  1803               	btfsc	3,0
 19278  1AD3  2ADF               	goto	l6928
 19279  1AD4                     l6926:	
 19280  1AD4  3001               	movlw	1
 19281  1AD5  07A4               	addwf	DelayTime_1us@j,f
 19282  1AD6  3000               	movlw	0
 19283  1AD7  3DA5               	addwfc	DelayTime_1us@j+1,f
 19284  1AD8  3000               	movlw	0
 19285  1AD9  0225               	subwf	DelayTime_1us@j+1,w
 19286  1ADA  3002               	movlw	2
 19287  1ADB  1903               	skipnz
 19288  1ADC  0224               	subwf	DelayTime_1us@j,w
 19289  1ADD  1C03               	skipc
 19290  1ADE  2AD4               	goto	l6926
 19291  1ADF                     l6928:	
 19292  1ADF  3001               	movlw	1
 19293  1AE0  07A2               	addwf	DelayTime_1us@i,f
 19294  1AE1  3000               	movlw	0
 19295  1AE2  3DA3               	addwfc	DelayTime_1us@i+1,f
 19296  1AE3  2AC3               	goto	l395
 19297  1AE4                     __end_of_DelayTime_1us:	
 19298                           
 19299                           	psect	text127
 19300  24E5                     __ptext127:	
 19301 ;; *************** function _CC2500_ClearTXFIFO *****************
 19302 ;; Defined at:
 19303 ;;		line 173 in file "../src/CC2500_B1.c"
 19304 ;; Parameters:    Size  Location     Type
 19305 ;;		None
 19306 ;; Auto vars:     Size  Location     Type
 19307 ;;		None
 19308 ;; Return value:  Size  Location     Type
 19309 ;;		None               void
 19310 ;; Registers used:
 19311 ;;		wreg, status,2, status,0, pclath, cstack
 19312 ;; Tracked objects:
 19313 ;;		On entry : 0/0
 19314 ;;		On exit  : 0/0
 19315 ;;		Unchanged: 0/0
 19316 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19317 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19318 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19319 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19320 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19321 ;;Total ram usage:        0 bytes
 19322 ;; Hardware stack levels used:    1
 19323 ;; Hardware stack levels required when called:    7
 19324 ;; This function calls:
 19325 ;;		_CC2500_WriteCommand
 19326 ;; This function is called by:
 19327 ;;		_CC2500_PowerOnInitial
 19328 ;; This function uses a non-reentrant model
 19329 ;;
 19330                           
 19331                           
 19332                           ;psect for function _CC2500_ClearTXFIFO
 19333  24E5                     _CC2500_ClearTXFIFO:	
 19334                           
 19335                           ;CC2500_B1.c: 174: CC2500_WriteCommand(0x3B);
 19336                           
 19337                           ;incstack = 0
 19338                           ; Regs used in _CC2500_ClearTXFIFO: [wreg+status,2+status,0+pclath+cstack]
 19339  24E5  303B               	movlw	59
 19340  24E6  31A6  265D         	fcall	_CC2500_WriteCommand
 19341  24E8  0008               	return
 19342  24E9                     __end_of_CC2500_ClearTXFIFO:	
 19343                           
 19344                           	psect	text128
 19345  24E1                     __ptext128:	
 19346 ;; *************** function _CC2500_ClearRXFIFO *****************
 19347 ;; Defined at:
 19348 ;;		line 180 in file "../src/CC2500_B1.c"
 19349 ;; Parameters:    Size  Location     Type
 19350 ;;		None
 19351 ;; Auto vars:     Size  Location     Type
 19352 ;;		None
 19353 ;; Return value:  Size  Location     Type
 19354 ;;		None               void
 19355 ;; Registers used:
 19356 ;;		wreg, status,2, status,0, pclath, cstack
 19357 ;; Tracked objects:
 19358 ;;		On entry : 0/0
 19359 ;;		On exit  : 0/0
 19360 ;;		Unchanged: 0/0
 19361 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19362 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19363 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19364 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19365 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19366 ;;Total ram usage:        0 bytes
 19367 ;; Hardware stack levels used:    1
 19368 ;; Hardware stack levels required when called:    7
 19369 ;; This function calls:
 19370 ;;		_CC2500_WriteCommand
 19371 ;; This function is called by:
 19372 ;;		_CC2500_PowerOnInitial
 19373 ;; This function uses a non-reentrant model
 19374 ;;
 19375                           
 19376                           
 19377                           ;psect for function _CC2500_ClearRXFIFO
 19378  24E1                     _CC2500_ClearRXFIFO:	
 19379                           
 19380                           ;CC2500_B1.c: 181: CC2500_WriteCommand(0x3A);
 19381                           
 19382                           ;incstack = 0
 19383                           ; Regs used in _CC2500_ClearRXFIFO: [wreg+status,2+status,0+pclath+cstack]
 19384  24E1  303A               	movlw	58
 19385  24E2  31A6  265D         	fcall	_CC2500_WriteCommand
 19386  24E4  0008               	return
 19387  24E5                     __end_of_CC2500_ClearRXFIFO:	
 19388                           
 19389                           	psect	text129
 19390  265D                     __ptext129:	
 19391 ;; *************** function _CC2500_WriteCommand *****************
 19392 ;; Defined at:
 19393 ;;		line 263 in file "../src/CC2500_B1.c"
 19394 ;; Parameters:    Size  Location     Type
 19395 ;;  command         1    wreg     unsigned char 
 19396 ;; Auto vars:     Size  Location     Type
 19397 ;;  command         1    3[BANK0 ] unsigned char 
 19398 ;; Return value:  Size  Location     Type
 19399 ;;		None               void
 19400 ;; Registers used:
 19401 ;;		wreg, status,2, status,0, pclath, cstack
 19402 ;; Tracked objects:
 19403 ;;		On entry : 0/0
 19404 ;;		On exit  : 0/0
 19405 ;;		Unchanged: 0/0
 19406 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19407 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19408 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19409 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19410 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19411 ;;Total ram usage:        2 bytes
 19412 ;; Hardware stack levels used:    1
 19413 ;; Hardware stack levels required when called:    6
 19414 ;; This function calls:
 19415 ;;		_CC2500_WriteByte
 19416 ;; This function is called by:
 19417 ;;		_CC2500_TxData
 19418 ;;		_CC2500_RxData
 19419 ;;		_CC2500_ClearTXFIFO
 19420 ;;		_CC2500_ClearRXFIFO
 19421 ;;		_CC2500_FrequencyCabr
 19422 ;;		_CC2500_SIDLEMode
 19423 ;;		_setRF_Main
 19424 ;;		_RF_RxDisable
 19425 ;; This function uses a non-reentrant model
 19426 ;;
 19427                           
 19428                           
 19429                           ;psect for function _CC2500_WriteCommand
 19430  265D                     _CC2500_WriteCommand:	
 19431                           
 19432                           ;incstack = 0
 19433                           ; Regs used in _CC2500_WriteCommand: [wreg+status,2+status,0+pclath+cstack]
 19434                           ;CC2500_WriteCommand@command stored from wreg
 19435  265D  0020               	movlb	0	; select bank0
 19436  265E  00A3               	movwf	CC2500_WriteCommand@command
 19437                           
 19438                           ;CC2500_B1.c: 264: RC4 = 0;
 19439  265F  120E               	bcf	14,4	;volatile
 19440                           
 19441                           ;CC2500_B1.c: 265: SPI0Buffer = command;
 19442  2660  0823               	movf	CC2500_WriteCommand@command,w
 19443  2661  00A2               	movwf	??_CC2500_WriteCommand
 19444  2662  0822               	movf	??_CC2500_WriteCommand,w
 19445  2663  0021               	movlb	1	; select bank1
 19446  2664  00C3               	movwf	_SPI0Buffer^(0+128)
 19447  2665                     l383:	
 19448                           ;CC2500_B1.c: 267: while (RC2 == 1);
 19449                           
 19450  2665  0020               	movlb	0	; select bank0
 19451  2666  190E               	btfsc	14,2	;volatile
 19452  2667  2E65               	goto	l383
 19453                           
 19454                           ;CC2500_B1.c: 269: CC2500_WriteByte();
 19455  2668  3198  206F         	fcall	_CC2500_WriteByte
 19456                           
 19457                           ;CC2500_B1.c: 270: RC4 = 1;
 19458  266A  0020               	movlb	0	; select bank0
 19459  266B  160E               	bsf	14,4	;volatile
 19460  266C  0008               	return
 19461  266D                     __end_of_CC2500_WriteCommand:	
 19462                           
 19463                           	psect	text130
 19464  186F                     __ptext130:	
 19465 ;; *************** function _CC2500_WriteByte *****************
 19466 ;; Defined at:
 19467 ;;		line 205 in file "../src/CC2500_B1.c"
 19468 ;; Parameters:    Size  Location     Type
 19469 ;;		None
 19470 ;; Auto vars:     Size  Location     Type
 19471 ;;  loop_a          1    1[BANK0 ] unsigned char 
 19472 ;; Return value:  Size  Location     Type
 19473 ;;		None               void
 19474 ;; Registers used:
 19475 ;;		wreg, status,2, status,0
 19476 ;; Tracked objects:
 19477 ;;		On entry : 0/0
 19478 ;;		On exit  : 0/0
 19479 ;;		Unchanged: 0/0
 19480 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19481 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19482 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19483 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19484 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19485 ;;Total ram usage:        2 bytes
 19486 ;; Hardware stack levels used:    1
 19487 ;; Hardware stack levels required when called:    5
 19488 ;; This function calls:
 19489 ;;		Nothing
 19490 ;; This function is called by:
 19491 ;;		_CC2500_TxData
 19492 ;;		_CC2500_RxData
 19493 ;;		_CC2500_PowerRST
 19494 ;;		_CC2500_WriteREG
 19495 ;;		_CC2500_WriteCommand
 19496 ;;		_CC2500_ReadStatus
 19497 ;;		_CC2500_ReadREG
 19498 ;; This function uses a non-reentrant model
 19499 ;;
 19500                           
 19501                           
 19502                           ;psect for function _CC2500_WriteByte
 19503  186F                     _CC2500_WriteByte:	
 19504                           
 19505                           ;CC2500_B1.c: 206: unsigned char loop_a;
 19506                           ;CC2500_B1.c: 207: for (loop_a = 0; loop_a < 8; loop_a++) {
 19507                           
 19508                           ;incstack = 0
 19509                           ; Regs used in _CC2500_WriteByte: [wreg+status,2+status,0]
 19510  186F  0020               	movlb	0	; select bank0
 19511  1870  01A1               	clrf	CC2500_WriteByte@loop_a
 19512  1871                     L16:	
 19513  1871  3008               	movlw	8
 19514  1872  0221               	subwf	CC2500_WriteByte@loop_a,w
 19515  1873  1803               	btfsc	3,0
 19516  1874  0008               	return
 19517                           
 19518                           ;CC2500_B1.c: 208: if (SPI0Buffer & 0x80)
 19519  1875  0021               	movlb	1	; select bank1
 19520  1876  1FC3               	btfss	_SPI0Buffer^(0+128),7
 19521  1877  287B               	goto	l359
 19522                           
 19523                           ;CC2500_B1.c: 209: RC0 = 1;
 19524  1878  0020               	movlb	0	; select bank0
 19525  1879  140E               	bsf	14,0	;volatile
 19526  187A  287D               	goto	l360
 19527  187B                     l359:	
 19528                           
 19529                           ;CC2500_B1.c: 210: else
 19530                           ;CC2500_B1.c: 211: RC0 = 0;
 19531  187B  0020               	movlb	0	; select bank0
 19532  187C  100E               	bcf	14,0	;volatile
 19533  187D                     l360:	
 19534                           
 19535                           ;CC2500_B1.c: 212: RC1 = 1;
 19536  187D  148E               	bsf	14,1	;volatile
 19537                           
 19538                           ;CC2500_B1.c: 213: SPI0Buffer <<= 1;
 19539  187E  1003               	clrc
 19540  187F  0021               	movlb	1	; select bank1
 19541  1880  0DC3               	rlf	_SPI0Buffer^(0+128),f
 19542                           
 19543                           ;CC2500_B1.c: 214: RC1 = 0;
 19544  1881  0020               	movlb	0	; select bank0
 19545  1882  108E               	bcf	14,1	;volatile
 19546  1883  3001               	movlw	1
 19547  1884  00A0               	movwf	??_CC2500_WriteByte
 19548  1885  0820               	movf	??_CC2500_WriteByte,w
 19549  1886  07A1               	addwf	CC2500_WriteByte@loop_a,f
 19550  1887  2871               	goto	L16
 19551  1888                     __end_of_CC2500_WriteByte:	
 19552                           
 19553                           	psect	text131
 19554  0C6B                     __ptext131:	
 19555 ;; *************** function _Buzzer_Main *****************
 19556 ;; Defined at:
 19557 ;;		line 55 in file "../src/Buzzer_B1.c"
 19558 ;; Parameters:    Size  Location     Type
 19559 ;;		None
 19560 ;; Auto vars:     Size  Location     Type
 19561 ;;		None
 19562 ;; Return value:  Size  Location     Type
 19563 ;;		None               void
 19564 ;; Registers used:
 19565 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
 19566 ;; Tracked objects:
 19567 ;;		On entry : 0/0
 19568 ;;		On exit  : 0/0
 19569 ;;		Unchanged: 0/0
 19570 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19571 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19572 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19573 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19574 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19575 ;;Total ram usage:        4 bytes
 19576 ;; Hardware stack levels used:    1
 19577 ;; Hardware stack levels required when called:    5
 19578 ;; This function calls:
 19579 ;;		Nothing
 19580 ;; This function is called by:
 19581 ;;		_main
 19582 ;; This function uses a non-reentrant model
 19583 ;;
 19584                           
 19585                           
 19586                           ;psect for function _Buzzer_Main
 19587  0C6B                     _Buzzer_Main:	
 19588                           
 19589                           ;Buzzer_B1.c: 56: Buz = &Buz1;
 19590                           
 19591                           ;incstack = 0
 19592                           ; Regs used in _Buzzer_Main: [wreg-fsr1h+status,2+status,0]
 19593  0C6B  303E               	movlw	_Buz1& (0+255)
 19594  0C6C  0020               	movlb	0	; select bank0
 19595  0C6D  00A0               	movwf	??_Buzzer_Main
 19596  0C6E  0820               	movf	??_Buzzer_Main,w
 19597  0C6F  0021               	movlb	1	; select bank1
 19598  0C70  00B7               	movwf	_Buz^(0+128)
 19599                           
 19600                           ;Buzzer_B1.c: 57: if (Buz->GO == 1) {
 19601  0C71  0837               	movf	_Buz^(0+128),w
 19602  0C72  0086               	movwf	6
 19603  0C73  3001               	movlw	1	; select bank2/3
 19604  0C74  0087               	movwf	7
 19605  0C75  1C81               	btfss	1,1
 19606  0C76  0008               	return
 19607                           
 19608                           ;Buzzer_B1.c: 58: Buz->Counter++;
 19609  0C77  0A37               	incf	_Buz^(0+128),w
 19610  0C78  0086               	movwf	6
 19611  0C79  3001               	movlw	1	; select bank2/3
 19612  0C7A  0087               	movwf	7
 19613  0C7B  3001               	movlw	1
 19614  0C7C  0781               	addwf	1,f
 19615  0C7D  3141               	addfsr 1,1
 19616  0C7E  1803               	skipnc
 19617  0C7F  0A81               	incf	1,f
 19618                           
 19619                           ;Buzzer_B1.c: 59: if (Buz->Counter >= Buz->TimeValue) {
 19620  0C80  0837               	movf	_Buz^(0+128),w
 19621  0C81  3E06               	addlw	6
 19622  0C82  0086               	movwf	6
 19623  0C83  3001               	movlw	1	; select bank2/3
 19624  0C84  0087               	movwf	7
 19625  0C85  3F40               	moviw [0]fsr1
 19626  0C86  0020               	movlb	0	; select bank0
 19627  0C87  00A0               	movwf	??_Buzzer_Main
 19628  0C88  3F41               	moviw [1]fsr1
 19629  0C89  00A1               	movwf	??_Buzzer_Main+1
 19630  0C8A  0021               	movlb	1	; select bank1
 19631  0C8B  0A37               	incf	_Buz^(0+128),w
 19632  0C8C  0086               	movwf	6
 19633  0C8D  3001               	movlw	1	; select bank2/3
 19634  0C8E  0087               	movwf	7
 19635  0C8F  3F40               	moviw [0]fsr1
 19636  0C90  0020               	movlb	0	; select bank0
 19637  0C91  00A2               	movwf	??_Buzzer_Main+2
 19638  0C92  3F41               	moviw [1]fsr1
 19639  0C93  00A3               	movwf	??_Buzzer_Main+3
 19640  0C94  0821               	movf	??_Buzzer_Main+1,w
 19641  0C95  0223               	subwf	??_Buzzer_Main+3,w
 19642  0C96  1D03               	skipz
 19643  0C97  2C9A               	goto	u7285
 19644  0C98  0820               	movf	??_Buzzer_Main,w
 19645  0C99  0222               	subwf	??_Buzzer_Main+2,w
 19646  0C9A                     u7285:	
 19647  0C9A  1C03               	skipc
 19648  0C9B  0008               	return
 19649                           
 19650                           ;Buzzer_B1.c: 60: Buz->Counter = 0;
 19651  0C9C  0021               	movlb	1	; select bank1
 19652  0C9D  0A37               	incf	_Buz^(0+128),w
 19653  0C9E  0086               	movwf	6
 19654  0C9F  3001               	movlw	1	; select bank2/3
 19655  0CA0  0087               	movwf	7
 19656  0CA1  3000               	movlw	0
 19657  0CA2  3FC0               	movwi [0]fsr1
 19658  0CA3  3FC1               	movwi [1]fsr1
 19659                           
 19660                           ;Buzzer_B1.c: 61: Buz->Switch = (RB3 == 1) ? 1 : 0;
 19661  0CA4  0837               	movf	_Buz^(0+128),w
 19662  0CA5  0086               	movwf	6
 19663  0CA6  3001               	movlw	1	; select bank2/3
 19664  0CA7  0087               	movwf	7
 19665  0CA8  1281               	bcf	1,5
 19666  0CA9  0020               	movlb	0	; select bank0
 19667  0CAA  198D               	btfsc	13,3	;volatile
 19668  0CAB  1681               	bsf	1,5
 19669                           
 19670                           ;Buzzer_B1.c: 62: if (Buz->Switch == 0) {
 19671  0CAC  0021               	movlb	1	; select bank1
 19672  0CAD  0837               	movf	_Buz^(0+128),w
 19673  0CAE  0086               	movwf	6
 19674  0CAF  3001               	movlw	1	; select bank2/3
 19675  0CB0  0087               	movwf	7
 19676  0CB1  1A81               	btfsc	1,5
 19677  0CB2  2D21               	goto	l7962
 19678                           
 19679                           ;Buzzer_B1.c: 63: if (Buz->Count == 0) {
 19680  0CB3  0837               	movf	_Buz^(0+128),w
 19681  0CB4  3E03               	addlw	3
 19682  0CB5  0086               	movwf	6
 19683  0CB6  3001               	movlw	1	; select bank2/3
 19684  0CB7  0087               	movwf	7
 19685  0CB8  0881               	movf	1,f
 19686  0CB9  1D03               	skipz
 19687  0CBA  2D19               	goto	l7958
 19688                           
 19689                           ;Buzzer_B1.c: 64: if (Buz->BufferStatus1 == 1) {
 19690  0CBB  0837               	movf	_Buz^(0+128),w
 19691  0CBC  0086               	movwf	6
 19692  0CBD  3001               	movlw	1	; select bank2/3
 19693  0CBE  0087               	movwf	7
 19694  0CBF  1D81               	btfss	1,3
 19695  0CC0  2CE7               	goto	l7950
 19696                           
 19697                           ;Buzzer_B1.c: 65: Buz->BufferStatus1 = 0;
 19698  0CC1  0837               	movf	_Buz^(0+128),w
 19699  0CC2  0086               	movwf	6
 19700  0CC3  3001               	movlw	1	; select bank2/3
 19701  0CC4  0087               	movwf	7
 19702  0CC5  1181               	bcf	1,3
 19703                           
 19704                           ;Buzzer_B1.c: 66: Buz->Count = Buz->CountBuffer1;
 19705  0CC6  0837               	movf	_Buz^(0+128),w
 19706  0CC7  3E04               	addlw	4
 19707  0CC8  0086               	movwf	6
 19708  0CC9  3001               	movlw	1	; select bank2/3
 19709  0CCA  0087               	movwf	7
 19710  0CCB  0801               	movf	1,w
 19711  0CCC  0020               	movlb	0	; select bank0
 19712  0CCD  00A0               	movwf	??_Buzzer_Main
 19713  0CCE  0021               	movlb	1	; select bank1
 19714  0CCF  0837               	movf	_Buz^(0+128),w
 19715  0CD0  3E03               	addlw	3
 19716  0CD1  0086               	movwf	6
 19717  0CD2  3001               	movlw	1	; select bank2/3
 19718  0CD3  0087               	movwf	7
 19719  0CD4  0020               	movlb	0	; select bank0
 19720  0CD5  0820               	movf	??_Buzzer_Main,w
 19721  0CD6  0081               	movwf	1
 19722                           
 19723                           ;Buzzer_B1.c: 67: Buz->TimeValue = Buz->TimeValueBuffer1;
 19724  0CD7  0021               	movlb	1	; select bank1
 19725  0CD8  0837               	movf	_Buz^(0+128),w
 19726  0CD9  3E08               	addlw	8
 19727  0CDA  0086               	movwf	6
 19728  0CDB  3001               	movlw	1	; select bank2/3
 19729  0CDC  0087               	movwf	7
 19730  0CDD  0837               	movf	_Buz^(0+128),w
 19731  0CDE  3E06               	addlw	6
 19732  0CDF  0084               	movwf	4
 19733  0CE0  3001               	movlw	1	; select bank2/3
 19734  0CE1  0085               	movwf	5
 19735  0CE2  3F40               	moviw [0]fsr1
 19736  0CE3  3F80               	movwi [0]fsr0
 19737  0CE4  3F41               	moviw [1]fsr1
 19738  0CE5  3F81               	movwi [1]fsr0
 19739                           
 19740                           ;Buzzer_B1.c: 68: } else if (Buz->BufferStatus2 == 1) {
 19741  0CE6  0008               	return
 19742  0CE7                     l7950:	
 19743  0CE7  0837               	movf	_Buz^(0+128),w
 19744  0CE8  0086               	movwf	6
 19745  0CE9  3001               	movlw	1	; select bank2/3
 19746  0CEA  0087               	movwf	7
 19747  0CEB  1E01               	btfss	1,4
 19748  0CEC  2D13               	goto	l7956
 19749                           
 19750                           ;Buzzer_B1.c: 69: Buz->BufferStatus2 = 0;
 19751  0CED  0837               	movf	_Buz^(0+128),w
 19752  0CEE  0086               	movwf	6
 19753  0CEF  3001               	movlw	1	; select bank2/3
 19754  0CF0  0087               	movwf	7
 19755  0CF1  1201               	bcf	1,4
 19756                           
 19757                           ;Buzzer_B1.c: 70: Buz->Count = Buz->CountBuffer2;
 19758  0CF2  0837               	movf	_Buz^(0+128),w
 19759  0CF3  3E05               	addlw	5
 19760  0CF4  0086               	movwf	6
 19761  0CF5  3001               	movlw	1	; select bank2/3
 19762  0CF6  0087               	movwf	7
 19763  0CF7  0801               	movf	1,w
 19764  0CF8  0020               	movlb	0	; select bank0
 19765  0CF9  00A0               	movwf	??_Buzzer_Main
 19766  0CFA  0021               	movlb	1	; select bank1
 19767  0CFB  0837               	movf	_Buz^(0+128),w
 19768  0CFC  3E03               	addlw	3
 19769  0CFD  0086               	movwf	6
 19770  0CFE  3001               	movlw	1	; select bank2/3
 19771  0CFF  0087               	movwf	7
 19772  0D00  0020               	movlb	0	; select bank0
 19773  0D01  0820               	movf	??_Buzzer_Main,w
 19774  0D02  0081               	movwf	1
 19775                           
 19776                           ;Buzzer_B1.c: 71: Buz->TimeValue = Buz->TimeValueBuffer2;
 19777  0D03  0021               	movlb	1	; select bank1
 19778  0D04  0837               	movf	_Buz^(0+128),w
 19779  0D05  3E0A               	addlw	10
 19780  0D06  0086               	movwf	6
 19781  0D07  3001               	movlw	1	; select bank2/3
 19782  0D08  0087               	movwf	7
 19783  0D09  0837               	movf	_Buz^(0+128),w
 19784  0D0A  3E06               	addlw	6
 19785  0D0B  0084               	movwf	4
 19786  0D0C  3001               	movlw	1	; select bank2/3
 19787  0D0D  0085               	movwf	5
 19788  0D0E  3F40               	moviw [0]fsr1
 19789  0D0F  3F80               	movwi [0]fsr0
 19790  0D10  3F41               	moviw [1]fsr1
 19791  0D11  3F81               	movwi [1]fsr0
 19792                           
 19793                           ;Buzzer_B1.c: 72: } else {
 19794  0D12  0008               	return
 19795  0D13                     l7956:	
 19796                           
 19797                           ;Buzzer_B1.c: 73: Buz->GO = 0;
 19798  0D13  0837               	movf	_Buz^(0+128),w
 19799  0D14  0086               	movwf	6
 19800  0D15  3001               	movlw	1	; select bank2/3
 19801  0D16  0087               	movwf	7
 19802  0D17  1081               	bcf	1,1
 19803                           
 19804                           ;Buzzer_B1.c: 74: }
 19805                           ;Buzzer_B1.c: 75: } else {
 19806  0D18  0008               	return
 19807  0D19                     l7958:	
 19808                           
 19809                           ;Buzzer_B1.c: 76: Buz->Switch = 1;
 19810  0D19  0837               	movf	_Buz^(0+128),w
 19811  0D1A  0086               	movwf	6
 19812  0D1B  3001               	movlw	1	; select bank2/3
 19813  0D1C  0087               	movwf	7
 19814  0D1D  1681               	bsf	1,5
 19815                           
 19816                           ;Buzzer_B1.c: 78: RB3 = 1;
 19817  0D1E  0020               	movlb	0	; select bank0
 19818  0D1F  158D               	bsf	13,3	;volatile
 19819                           
 19820                           ;Buzzer_B1.c: 79: }
 19821                           ;Buzzer_B1.c: 80: } else {
 19822  0D20  0008               	return
 19823  0D21                     l7962:	
 19824                           
 19825                           ;Buzzer_B1.c: 81: Buz->Switch = 0;
 19826  0D21  0021               	movlb	1	; select bank1
 19827  0D22  0837               	movf	_Buz^(0+128),w
 19828  0D23  0086               	movwf	6
 19829  0D24  3001               	movlw	1	; select bank2/3
 19830  0D25  0087               	movwf	7
 19831  0D26  1281               	bcf	1,5
 19832                           
 19833                           ;Buzzer_B1.c: 83: RB3 = 0;
 19834  0D27  0020               	movlb	0	; select bank0
 19835  0D28  118D               	bcf	13,3	;volatile
 19836                           
 19837                           ;Buzzer_B1.c: 85: Buz->Count--;
 19838  0D29  0021               	movlb	1	; select bank1
 19839  0D2A  0837               	movf	_Buz^(0+128),w
 19840  0D2B  3E03               	addlw	3
 19841  0D2C  0086               	movwf	6
 19842  0D2D  3001               	movlw	1	; select bank2/3
 19843  0D2E  0087               	movwf	7
 19844  0D2F  3001               	movlw	1
 19845  0D30  0281               	subwf	1,f
 19846  0D31  0008               	return
 19847  0D32                     __end_of_Buzzer_Main:	
 19848                           
 19849                           	psect	text132
 19850  258A                     __ptext132:	
 19851 ;; *************** function _Buzzer_Initialization *****************
 19852 ;; Defined at:
 19853 ;;		line 11 in file "../src/Buzzer_B1.c"
 19854 ;; Parameters:    Size  Location     Type
 19855 ;;		None
 19856 ;; Auto vars:     Size  Location     Type
 19857 ;;		None
 19858 ;; Return value:  Size  Location     Type
 19859 ;;		None               void
 19860 ;; Registers used:
 19861 ;;		wreg, fsr1l, fsr1h
 19862 ;; Tracked objects:
 19863 ;;		On entry : 0/0
 19864 ;;		On exit  : 0/0
 19865 ;;		Unchanged: 0/0
 19866 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19867 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19868 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19869 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19870 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19871 ;;Total ram usage:        1 bytes
 19872 ;; Hardware stack levels used:    1
 19873 ;; Hardware stack levels required when called:    5
 19874 ;; This function calls:
 19875 ;;		Nothing
 19876 ;; This function is called by:
 19877 ;;		_main
 19878 ;; This function uses a non-reentrant model
 19879 ;;
 19880                           
 19881                           
 19882                           ;psect for function _Buzzer_Initialization
 19883  258A                     _Buzzer_Initialization:	
 19884                           
 19885                           ;Buzzer_B1.c: 12: Buz = &Buz1;
 19886                           
 19887                           ;incstack = 0
 19888                           ; Regs used in _Buzzer_Initialization: [wregfsr1]
 19889  258A  303E               	movlw	_Buz1& (0+255)
 19890  258B  0020               	movlb	0	; select bank0
 19891  258C  00A0               	movwf	??_Buzzer_Initialization
 19892  258D  0820               	movf	??_Buzzer_Initialization,w
 19893  258E  0021               	movlb	1	; select bank1
 19894  258F  00B7               	movwf	_Buz^(0+128)
 19895                           
 19896                           ;Buzzer_B1.c: 13: Buz->Enable = 1;
 19897  2590  0837               	movf	_Buz^(0+128),w
 19898  2591  0086               	movwf	6
 19899  2592  3001               	movlw	1	; select bank2/3
 19900  2593  0087               	movwf	7
 19901  2594  1401               	bsf	1,0
 19902  2595  0008               	return
 19903  2596                     __end_of_Buzzer_Initialization:	
 19904                           
 19905                           	psect	intentry
 19906  0004                     __pintentry:	
 19907 ;; *************** function _ISR *****************
 19908 ;; Defined at:
 19909 ;;		line 109 in file "../src/MCU_B1.c"
 19910 ;; Parameters:    Size  Location     Type
 19911 ;;		None
 19912 ;; Auto vars:     Size  Location     Type
 19913 ;;		None
 19914 ;; Return value:  Size  Location     Type
 19915 ;;		None               void
 19916 ;; Registers used:
 19917 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19918 ;; Tracked objects:
 19919 ;;		On entry : 0/0
 19920 ;;		On exit  : 0/0
 19921 ;;		Unchanged: 0/0
 19922 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19923 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19924 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19925 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19926 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19927 ;;Total ram usage:        1 bytes
 19928 ;; Hardware stack levels used:    1
 19929 ;; Hardware stack levels required when called:    4
 19930 ;; This function calls:
 19931 ;;		_INT_ISR
 19932 ;;		_IOC_ISR
 19933 ;;		_TMR0_ISR
 19934 ;; This function is called by:
 19935 ;;		Interrupt level 1
 19936 ;; This function uses a non-reentrant model
 19937 ;;
 19938                           
 19939  0004                     _ISR:	
 19940                           
 19941                           ;incstack = 0
 19942                           ; Regs used in _ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 19943  0004  147E               	bsf	126,0	;set compiler interrupt flag
 19944  0005  3180               	pagesel	$
 19945  0006  0020               	movlb	0	; select bank0
 19946  0007  087F               	movf	127,w
 19947  0008  00F7               	movwf	??_ISR
 19948                           
 19949                           ;MCU_B1.c: 111: IOC_ISR();
 19950  0009  31A6  26CD  3180   	fcall	_IOC_ISR
 19951                           
 19952                           ;MCU_B1.c: 113: TMR0_ISR();
 19953  000C  319C  247E  3180   	fcall	_TMR0_ISR
 19954                           
 19955                           ;MCU_B1.c: 115: ;;
 19956                           ;MCU_B1.c: 119: INT_ISR();
 19957  000F  31A5  257E         	fcall	_INT_ISR
 19958  0011  0877               	movf	??_ISR,w
 19959  0012  0020               	movlb	0	; select bank0
 19960  0013  00FF               	movwf	127
 19961  0014  107E               	bcf	126,0	;clear compiler interrupt flag
 19962  0015  0009               	retfie
 19963  0016                     __end_of_ISR:	
 19964                           
 19965                           	psect	text134
 19966  1C7E                     __ptext134:	
 19967 ;; *************** function _TMR0_ISR *****************
 19968 ;; Defined at:
 19969 ;;		line 137 in file "../src/MCU_B1.c"
 19970 ;; Parameters:    Size  Location     Type
 19971 ;;		None
 19972 ;; Auto vars:     Size  Location     Type
 19973 ;;		None
 19974 ;; Return value:  Size  Location     Type
 19975 ;;		None               void
 19976 ;; Registers used:
 19977 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19978 ;; Tracked objects:
 19979 ;;		On entry : 0/0
 19980 ;;		On exit  : 0/0
 19981 ;;		Unchanged: 0/0
 19982 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19983 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19984 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19985 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19986 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19987 ;;Total ram usage:        0 bytes
 19988 ;; Hardware stack levels used:    1
 19989 ;; Hardware stack levels required when called:    2
 19990 ;; This function calls:
 19991 ;;		_setDimmerLights_IntrControl
 19992 ;; This function is called by:
 19993 ;;		_ISR
 19994 ;; This function uses a non-reentrant model
 19995 ;;
 19996                           
 19997                           
 19998                           ;psect for function _TMR0_ISR
 19999  1C7E                     _TMR0_ISR:	
 20000                           
 20001                           ;MCU_B1.c: 138: if (TMR0IE == 1 && TMR0IF == 1) {
 20002                           
 20003                           ;incstack = 0
 20004                           ; Regs used in _TMR0_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 20005  1C7E  1E8B               	btfss	11,5	;volatile
 20006  1C7F  0008               	return
 20007  1C80  1D0B               	btfss	11,2	;volatile
 20008  1C81  0008               	return
 20009                           
 20010                           ;MCU_B1.c: 139: TMR0 = (256-190);
 20011  1C82  3042               	movlw	66
 20012  1C83  0020               	movlb	0	; select bank0
 20013  1C84  0095               	movwf	21	;volatile
 20014                           
 20015                           ;MCU_B1.c: 140: TMR0IF = 0;
 20016  1C85  110B               	bcf	11,2	;volatile
 20017                           
 20018                           ;MCU_B1.c: 145: setDimmerLights_IntrControl(1);
 20019  1C86  3001               	movlw	1
 20020  1C87  3182  22F9  319C   	fcall	_setDimmerLights_IntrControl
 20021                           
 20022                           ;MCU_B1.c: 150: setDimmerLights_IntrControl(2);
 20023  1C8A  3002               	movlw	2
 20024  1C8B  3182  22F9  319C   	fcall	_setDimmerLights_IntrControl
 20025                           
 20026                           ;MCU_B1.c: 161: Timer0->Count++;
 20027  1C8E  0021               	movlb	1	; select bank1
 20028  1C8F  0A6B               	incf	_Timer0^(0+128),w
 20029  1C90  0086               	movwf	6
 20030  1C91  3001               	movlw	1	; select bank2/3
 20031  1C92  0087               	movwf	7
 20032  1C93  3001               	movlw	1
 20033  1C94  0781               	addwf	1,f
 20034  1C95  3141               	addfsr 1,1
 20035  1C96  1803               	skipnc
 20036  1C97  0A81               	incf	1,f
 20037                           
 20038                           ;MCU_B1.c: 162: if (Timer0->Count == 100) {
 20039  1C98  0A6B               	incf	_Timer0^(0+128),w
 20040  1C99  0086               	movwf	6
 20041  1C9A  3001               	movlw	1	; select bank2/3
 20042  1C9B  0087               	movwf	7
 20043  1C9C  3F40               	moviw [0]fsr1
 20044  1C9D  3A64               	xorlw	100
 20045  1C9E  1D03               	skipz
 20046  1C9F  2CA2               	goto	u739_25
 20047  1CA0  3F41               	moviw [1]fsr1
 20048  1CA1  3A00               	xorlw	0
 20049  1CA2                     u739_25:	
 20050  1CA2  1D03               	skipz
 20051  1CA3  0008               	return
 20052                           
 20053                           ;MCU_B1.c: 163: Timer0->Count = 0;
 20054  1CA4  0A6B               	incf	_Timer0^(0+128),w
 20055  1CA5  0086               	movwf	6
 20056  1CA6  3001               	movlw	1	; select bank2/3
 20057  1CA7  0087               	movwf	7
 20058  1CA8  3000               	movlw	0
 20059  1CA9  3FC0               	movwi [0]fsr1
 20060  1CAA  3FC1               	movwi [1]fsr1
 20061                           
 20062                           ;MCU_B1.c: 164: myMain->T0_Timerout = 1;
 20063  1CAB  086D               	movf	_myMain^(0+128),w
 20064  1CAC  0086               	movwf	6
 20065  1CAD  3001               	movlw	1	; select bank2/3
 20066  1CAE  0087               	movwf	7
 20067  1CAF  1481               	bsf	1,1
 20068  1CB0  0008               	return
 20069  1CB1                     __end_of_TMR0_ISR:	
 20070                           
 20071                           	psect	text135
 20072  02F9                     __ptext135:	
 20073 ;; *************** function _setDimmerLights_IntrControl *****************
 20074 ;; Defined at:
 20075 ;;		line 87 in file "../src/Dimmer_B1.c"
 20076 ;; Parameters:    Size  Location     Type
 20077 ;;  lights          1    wreg     unsigned char 
 20078 ;; Auto vars:     Size  Location     Type
 20079 ;;  lights          1    6[COMMON] unsigned char 
 20080 ;; Return value:  Size  Location     Type
 20081 ;;		None               void
 20082 ;; Registers used:
 20083 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 20084 ;; Tracked objects:
 20085 ;;		On entry : 0/0
 20086 ;;		On exit  : 0/0
 20087 ;;		Unchanged: 0/0
 20088 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20089 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20090 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20091 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20092 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20093 ;;Total ram usage:        5 bytes
 20094 ;; Hardware stack levels used:    1
 20095 ;; Hardware stack levels required when called:    1
 20096 ;; This function calls:
 20097 ;;		_DimmerIntrPointSelect
 20098 ;;		i1_setLoad_StatusOff
 20099 ;; This function is called by:
 20100 ;;		_TMR0_ISR
 20101 ;; This function uses a non-reentrant model
 20102 ;;
 20103                           
 20104                           
 20105                           ;psect for function _setDimmerLights_IntrControl
 20106  02F9                     _setDimmerLights_IntrControl:	
 20107                           
 20108                           ;incstack = 0
 20109                           ; Regs used in _setDimmerLights_IntrControl: [wreg-fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 20110                           ;setDimmerLights_IntrControl@lights stored from wreg
 20111  02F9  00F6               	movwf	setDimmerLights_IntrControl@lights
 20112                           
 20113                           ;Dimmer_B1.c: 89: DimmerIntrPointSelect(lights);
 20114  02FA  0876               	movf	setDimmerLights_IntrControl@lights,w
 20115  02FB  31A7  2700  3182   	fcall	_DimmerIntrPointSelect
 20116                           
 20117                           ;Dimmer_B1.c: 90: if (DimmerLightsIntr->GO == 1) {
 20118  02FE  0879               	movf	_DimmerLightsIntr,w
 20119  02FF  0086               	movwf	6
 20120  0300  3001               	movlw	1	; select bank2/3
 20121  0301  0087               	movwf	7
 20122  0302  1C01               	btfss	1,0
 20123  0303  2B5E               	goto	i1l7322
 20124                           
 20125                           ;Dimmer_B1.c: 91: DimmerLightsIntr->Count++;
 20126  0304  3001               	movlw	1
 20127  0305  00F2               	movwf	??_setDimmerLights_IntrControl
 20128  0306  0879               	movf	_DimmerLightsIntr,w
 20129  0307  3E03               	addlw	3
 20130  0308  0086               	movwf	6
 20131  0309  3001               	movlw	1	; select bank2/3
 20132  030A  0087               	movwf	7
 20133  030B  0872               	movf	??_setDimmerLights_IntrControl,w
 20134  030C  0781               	addwf	1,f
 20135                           
 20136                           ;Dimmer_B1.c: 92: if (DimmerLightsIntr->Count >= (DimmerLightsIntr->DimmingValue - Dimme
      +                          r->Correction)) {
 20137  030D  0021               	movlb	1	; select bank1
 20138  030E  083A               	movf	_Dimmer^(0+128),w
 20139  030F  3E02               	addlw	2
 20140  0310  0086               	movwf	6
 20141  0311  0187               	clrf	7
 20142  0312  0801               	movf	1,w
 20143  0313  00F2               	movwf	??_setDimmerLights_IntrControl
 20144  0314  01F3               	clrf	??_setDimmerLights_IntrControl+1
 20145  0315  09F2               	comf	??_setDimmerLights_IntrControl,f
 20146  0316  09F3               	comf	??_setDimmerLights_IntrControl+1,f
 20147  0317  0AF2               	incf	??_setDimmerLights_IntrControl,f
 20148  0318  1903               	skipnz
 20149  0319  0AF3               	incf	??_setDimmerLights_IntrControl+1,f
 20150  031A  0879               	movf	_DimmerLightsIntr,w
 20151  031B  3E04               	addlw	4
 20152  031C  0086               	movwf	6
 20153  031D  3001               	movlw	1	; select bank2/3
 20154  031E  0087               	movwf	7
 20155  031F  0801               	movf	1,w
 20156  0320  0772               	addwf	??_setDimmerLights_IntrControl,w
 20157  0321  00F4               	movwf	??_setDimmerLights_IntrControl+2
 20158  0322  0873               	movf	??_setDimmerLights_IntrControl+1,w
 20159  0323  1803               	skipnc
 20160  0324  0A73               	incf	??_setDimmerLights_IntrControl+1,w
 20161  0325  00F5               	movwf	??_setDimmerLights_IntrControl+3
 20162  0326  0879               	movf	_DimmerLightsIntr,w
 20163  0327  3E03               	addlw	3
 20164  0328  0086               	movwf	6
 20165  0329  3001               	movlw	1	; select bank2/3
 20166  032A  0087               	movwf	7
 20167  032B  0875               	movf	??_setDimmerLights_IntrControl+3,w
 20168  032C  3A80               	xorlw	128
 20169  032D  3C80               	sublw	128
 20170  032E  1D03               	skipz
 20171  032F  2B32               	goto	u618_25
 20172  0330  0874               	movf	??_setDimmerLights_IntrControl+2,w
 20173  0331  0201               	subwf	1,w
 20174  0332                     u618_25:	
 20175  0332  1C03               	skipc
 20176  0333  2C6D               	goto	i1l7386
 20177                           
 20178                           ;Dimmer_B1.c: 93: DimmerLightsIntr->Count = 0;
 20179  0334  0879               	movf	_DimmerLightsIntr,w
 20180  0335  3E03               	addlw	3
 20181  0336  0086               	movwf	6
 20182  0337  3001               	movlw	1	; select bank2/3
 20183  0338  0087               	movwf	7
 20184  0339  0181               	clrf	1
 20185                           
 20186                           ;Dimmer_B1.c: 94: DimmerLightsIntr->GO = 0;
 20187  033A  0879               	movf	_DimmerLightsIntr,w
 20188  033B  0086               	movwf	6
 20189  033C  3001               	movlw	1	; select bank2/3
 20190  033D  0087               	movwf	7
 20191  033E  1001               	bcf	1,0
 20192                           
 20193                           ;Dimmer_B1.c: 96: if (DimmerLightsIntr->StatusFlag == 1) {
 20194  033F  0879               	movf	_DimmerLightsIntr,w
 20195  0340  0086               	movwf	6
 20196  0341  3001               	movlw	1	; select bank2/3
 20197  0342  0087               	movwf	7
 20198  0343  1F01               	btfss	1,6
 20199  0344  2C6D               	goto	i1l7386
 20200                           
 20201                           ;Dimmer_B1.c: 97: DimmerLightsIntr->Flag = 1;
 20202  0345  0879               	movf	_DimmerLightsIntr,w
 20203  0346  3E08               	addlw	8
 20204  0347  0086               	movwf	6
 20205  0348  3001               	movlw	1	; select bank2/3
 20206  0349  0087               	movwf	7
 20207  034A  1401               	bsf	1,0
 20208                           
 20209                           ;Dimmer_B1.c: 98: DimmerLightsIntr->Triac = 1;
 20210  034B  0879               	movf	_DimmerLightsIntr,w
 20211  034C  3E08               	addlw	8
 20212  034D  0086               	movwf	6
 20213  034E  3001               	movlw	1	; select bank2/3
 20214  034F  0087               	movwf	7
 20215  0350  1681               	bsf	1,5
 20216                           
 20217                           ;Dimmer_B1.c: 100: if (lights == 1) {
 20218  0351  0876               	movf	setDimmerLights_IntrControl@lights,w
 20219  0352  3A01               	xorlw	1
 20220  0353  1D03               	skipz
 20221  0354  2B57               	goto	i1l7318
 20222                           
 20223                           ;Dimmer_B1.c: 101: RA7 = 1;
 20224  0355  0020               	movlb	0	; select bank0
 20225  0356  178C               	bsf	12,7	;volatile
 20226  0357                     i1l7318:	
 20227                           ;Dimmer_B1.c: 102: ;;
 20228                           
 20229                           
 20230                           ;Dimmer_B1.c: 103: }
 20231                           ;Dimmer_B1.c: 106: if (lights == 2) {
 20232  0357  0876               	movf	setDimmerLights_IntrControl@lights,w
 20233  0358  3A02               	xorlw	2
 20234  0359  1D03               	skipz
 20235  035A  2C6D               	goto	i1l7386
 20236                           
 20237                           ;Dimmer_B1.c: 107: RB4 = 1;
 20238  035B  0020               	movlb	0	; select bank0
 20239  035C  160D               	bsf	13,4	;volatile
 20240                           
 20241                           ;Dimmer_B1.c: 108: }
 20242                           ;Dimmer_B1.c: 115: }
 20243                           ;Dimmer_B1.c: 116: }
 20244                           ;Dimmer_B1.c: 117: } else {
 20245  035D  2C6D               	goto	i1l7386
 20246  035E                     i1l7322:	
 20247                           
 20248                           ;Dimmer_B1.c: 118: if (DimmerLightsIntr->Flag == 1) {
 20249  035E  0879               	movf	_DimmerLightsIntr,w
 20250  035F  3E08               	addlw	8
 20251  0360  0086               	movwf	6
 20252  0361  3001               	movlw	1	; select bank2/3
 20253  0362  0087               	movwf	7
 20254  0363  1C01               	btfss	1,0
 20255  0364  2C6D               	goto	i1l7386
 20256                           
 20257                           ;Dimmer_B1.c: 119: DimmerLightsIntr->Flag = 0;
 20258  0365  0879               	movf	_DimmerLightsIntr,w
 20259  0366  3E08               	addlw	8
 20260  0367  0086               	movwf	6
 20261  0368  3001               	movlw	1	; select bank2/3
 20262  0369  0087               	movwf	7
 20263  036A  1001               	bcf	1,0
 20264                           
 20265                           ;Dimmer_B1.c: 120: if (DimmerLightsIntr->Signal == 1) {
 20266  036B  0879               	movf	_DimmerLightsIntr,w
 20267  036C  0086               	movwf	6
 20268  036D  3001               	movlw	1	; select bank2/3
 20269  036E  0087               	movwf	7
 20270  036F  1C81               	btfss	1,1
 20271  0370  2C6D               	goto	i1l7386
 20272                           
 20273                           ;Dimmer_B1.c: 121: DimmerLightsIntr->DimmingTime++;
 20274  0371  3001               	movlw	1
 20275  0372  00F2               	movwf	??_setDimmerLights_IntrControl
 20276  0373  0A79               	incf	_DimmerLightsIntr,w
 20277  0374  0086               	movwf	6
 20278  0375  3001               	movlw	1	; select bank2/3
 20279  0376  0087               	movwf	7
 20280  0377  0872               	movf	??_setDimmerLights_IntrControl,w
 20281  0378  0781               	addwf	1,f
 20282                           
 20283                           ;Dimmer_B1.c: 122: if (DimmerLightsIntr->DimmingTime >= DimmerLightsIntr->DimmingTimeVal
      +                          ue) {
 20284  0379  0A79               	incf	_DimmerLightsIntr,w
 20285  037A  0086               	movwf	6
 20286  037B  3001               	movlw	1	; select bank2/3
 20287  037C  0087               	movwf	7
 20288  037D  0879               	movf	_DimmerLightsIntr,w
 20289  037E  3E02               	addlw	2
 20290  037F  0084               	movwf	4
 20291  0380  3001               	movlw	1	; select bank2/3
 20292  0381  0085               	movwf	5
 20293  0382  0800               	movf	0,w
 20294  0383  0201               	subwf	1,w
 20295  0384  1C03               	skipc
 20296  0385  2C6D               	goto	i1l7386
 20297                           
 20298                           ;Dimmer_B1.c: 123: DimmerLightsIntr->DimmingTime = 0;
 20299  0386  0A79               	incf	_DimmerLightsIntr,w
 20300  0387  0086               	movwf	6
 20301  0388  3001               	movlw	1	; select bank2/3
 20302  0389  0087               	movwf	7
 20303  038A  0181               	clrf	1
 20304                           
 20305                           ;Dimmer_B1.c: 124: if (DimmerLightsIntr->AdjFlag == 1) {
 20306  038B  0879               	movf	_DimmerLightsIntr,w
 20307  038C  0086               	movwf	6
 20308  038D  3001               	movlw	1	; select bank2/3
 20309  038E  0087               	movwf	7
 20310  038F  1D81               	btfss	1,3
 20311  0390  2BC7               	goto	i1l7348
 20312                           
 20313                           ;Dimmer_B1.c: 125: if (DimmerLightsIntr->AdjStatus == 0) {
 20314  0391  0879               	movf	_DimmerLightsIntr,w
 20315  0392  0086               	movwf	6
 20316  0393  3001               	movlw	1	; select bank2/3
 20317  0394  0087               	movwf	7
 20318  0395  1A01               	btfsc	1,4
 20319  0396  2BAE               	goto	i1l7342
 20320                           
 20321                           ;Dimmer_B1.c: 126: if (DimmerLightsIntr->DimmingValue > ((char)((100-60)*0.8))) {
 20322  0397  0879               	movf	_DimmerLightsIntr,w
 20323  0398  3E04               	addlw	4
 20324  0399  0086               	movwf	6
 20325  039A  3001               	movlw	1	; select bank2/3
 20326  039B  0087               	movwf	7
 20327  039C  3021               	movlw	33
 20328  039D  0201               	subwf	1,w
 20329  039E  1C03               	skipc
 20330  039F  2BA8               	goto	i1l7340
 20331                           
 20332                           ;Dimmer_B1.c: 127: DimmerLightsIntr->DimmingValue--;
 20333  03A0  0879               	movf	_DimmerLightsIntr,w
 20334  03A1  3E04               	addlw	4
 20335  03A2  0086               	movwf	6
 20336  03A3  3001               	movlw	1	; select bank2/3
 20337  03A4  0087               	movwf	7
 20338  03A5  3001               	movlw	1
 20339  03A6  0281               	subwf	1,f
 20340                           
 20341                           ;Dimmer_B1.c: 128: } else {
 20342  03A7  2C6D               	goto	i1l7386
 20343  03A8                     i1l7340:	
 20344                           
 20345                           ;Dimmer_B1.c: 129: DimmerLightsIntr->AdjStatus = 1;
 20346  03A8  0879               	movf	_DimmerLightsIntr,w
 20347  03A9  0086               	movwf	6
 20348  03AA  3001               	movlw	1	; select bank2/3
 20349  03AB  0087               	movwf	7
 20350  03AC  1601               	bsf	1,4
 20351                           
 20352                           ;Dimmer_B1.c: 130: }
 20353                           ;Dimmer_B1.c: 131: } else {
 20354  03AD  2C6D               	goto	i1l7386
 20355  03AE                     i1l7342:	
 20356                           
 20357                           ;Dimmer_B1.c: 132: if (DimmerLightsIntr->DimmingValue < ((char)((100-25)*0.8))) {
 20358  03AE  0879               	movf	_DimmerLightsIntr,w
 20359  03AF  3E04               	addlw	4
 20360  03B0  0086               	movwf	6
 20361  03B1  3001               	movlw	1	; select bank2/3
 20362  03B2  0087               	movwf	7
 20363  03B3  303C               	movlw	60
 20364  03B4  0201               	subwf	1,w
 20365  03B5  1803               	skipnc
 20366  03B6  2BC1               	goto	i1l7346
 20367                           
 20368                           ;Dimmer_B1.c: 133: DimmerLightsIntr->DimmingValue++;
 20369  03B7  3001               	movlw	1
 20370  03B8  00F2               	movwf	??_setDimmerLights_IntrControl
 20371  03B9  0879               	movf	_DimmerLightsIntr,w
 20372  03BA  3E04               	addlw	4
 20373  03BB  0086               	movwf	6
 20374  03BC  3001               	movlw	1	; select bank2/3
 20375  03BD  0087               	movwf	7
 20376  03BE  0872               	movf	??_setDimmerLights_IntrControl,w
 20377  03BF  0781               	addwf	1,f
 20378                           
 20379                           ;Dimmer_B1.c: 134: } else {
 20380  03C0  2C6D               	goto	i1l7386
 20381  03C1                     i1l7346:	
 20382                           
 20383                           ;Dimmer_B1.c: 135: DimmerLightsIntr->AdjStatus = 0;
 20384  03C1  0879               	movf	_DimmerLightsIntr,w
 20385  03C2  0086               	movwf	6
 20386  03C3  3001               	movlw	1	; select bank2/3
 20387  03C4  0087               	movwf	7
 20388  03C5  1201               	bcf	1,4
 20389                           
 20390                           ;Dimmer_B1.c: 136: }
 20391                           ;Dimmer_B1.c: 137: }
 20392                           ;Dimmer_B1.c: 138: } else if (DimmerLightsIntr->AdjRF == 1) {
 20393  03C6  2C6D               	goto	i1l7386
 20394  03C7                     i1l7348:	
 20395  03C7  0879               	movf	_DimmerLightsIntr,w
 20396  03C8  0086               	movwf	6
 20397  03C9  3001               	movlw	1	; select bank2/3
 20398  03CA  0087               	movwf	7
 20399  03CB  1D01               	btfss	1,2
 20400  03CC  2C0E               	goto	i1l7362
 20401                           
 20402                           ;Dimmer_B1.c: 139: if (DimmerLightsIntr->DimmingValue > DimmerLightsIntr->MaxmumValue) {
 20403  03CD  0879               	movf	_DimmerLightsIntr,w
 20404  03CE  3E05               	addlw	5
 20405  03CF  0086               	movwf	6
 20406  03D0  3001               	movlw	1	; select bank2/3
 20407  03D1  0087               	movwf	7
 20408  03D2  0879               	movf	_DimmerLightsIntr,w
 20409  03D3  3E04               	addlw	4
 20410  03D4  0084               	movwf	4
 20411  03D5  3001               	movlw	1	; select bank2/3
 20412  03D6  0085               	movwf	5
 20413  03D7  0800               	movf	0,w
 20414  03D8  0201               	subwf	1,w
 20415  03D9  1803               	skipnc
 20416  03DA  2BE3               	goto	i1l7354
 20417                           
 20418                           ;Dimmer_B1.c: 140: DimmerLightsIntr->DimmingValue--;
 20419  03DB  0879               	movf	_DimmerLightsIntr,w
 20420  03DC  3E04               	addlw	4
 20421  03DD  0086               	movwf	6
 20422  03DE  3001               	movlw	1	; select bank2/3
 20423  03DF  0087               	movwf	7
 20424  03E0  3001               	movlw	1
 20425  03E1  0281               	subwf	1,f
 20426                           
 20427                           ;Dimmer_B1.c: 141: } else if (DimmerLightsIntr->DimmingValue < DimmerLightsIntr->MaxmumV
      +                          alue) {
 20428  03E2  2BFA               	goto	i1l7358
 20429  03E3                     i1l7354:	
 20430  03E3  0879               	movf	_DimmerLightsIntr,w
 20431  03E4  3E04               	addlw	4
 20432  03E5  0086               	movwf	6
 20433  03E6  3001               	movlw	1	; select bank2/3
 20434  03E7  0087               	movwf	7
 20435  03E8  0879               	movf	_DimmerLightsIntr,w
 20436  03E9  3E05               	addlw	5
 20437  03EA  0084               	movwf	4
 20438  03EB  3001               	movlw	1	; select bank2/3
 20439  03EC  0085               	movwf	5
 20440  03ED  0800               	movf	0,w
 20441  03EE  0201               	subwf	1,w
 20442  03EF  1803               	skipnc
 20443  03F0  2BFA               	goto	i1l7358
 20444                           
 20445                           ;Dimmer_B1.c: 142: DimmerLightsIntr->DimmingValue++;
 20446  03F1  3001               	movlw	1
 20447  03F2  00F2               	movwf	??_setDimmerLights_IntrControl
 20448  03F3  0879               	movf	_DimmerLightsIntr,w
 20449  03F4  3E04               	addlw	4
 20450  03F5  0086               	movwf	6
 20451  03F6  3001               	movlw	1	; select bank2/3
 20452  03F7  0087               	movwf	7
 20453  03F8  0872               	movf	??_setDimmerLights_IntrControl,w
 20454  03F9  0781               	addwf	1,f
 20455  03FA                     i1l7358:	
 20456                           
 20457                           ;Dimmer_B1.c: 143: }
 20458                           ;Dimmer_B1.c: 144: if (DimmerLightsIntr->DimmingValue == DimmerLightsIntr->MaxmumValue) 
      +                          {
 20459  03FA  0879               	movf	_DimmerLightsIntr,w
 20460  03FB  3E05               	addlw	5
 20461  03FC  0086               	movwf	6
 20462  03FD  3001               	movlw	1	; select bank2/3
 20463  03FE  0087               	movwf	7
 20464  03FF  0879               	movf	_DimmerLightsIntr,w
 20465  0400  3E04               	addlw	4
 20466  0401  0084               	movwf	4
 20467  0402  3001               	movlw	1	; select bank2/3
 20468  0403  0085               	movwf	5
 20469  0404  0800               	movf	0,w
 20470  0405  0601               	xorwf	1,w
 20471  0406  1D03               	skipz
 20472  0407  2C6D               	goto	i1l7386
 20473                           
 20474                           ;Dimmer_B1.c: 145: DimmerLightsIntr->AdjRF = 0;
 20475  0408  0879               	movf	_DimmerLightsIntr,w
 20476  0409  0086               	movwf	6
 20477  040A  3001               	movlw	1	; select bank2/3
 20478  040B  0087               	movwf	7
 20479  040C  1101               	bcf	1,2
 20480  040D  2C29               	goto	i1l7368
 20481  040E                     i1l7362:	
 20482                           ;Dimmer_B1.c: 147: }
 20483                           ;Dimmer_B1.c: 148: } else {
 20484                           
 20485                           ;Dimmer_B1.c: 146: DimmerLightsIntr->Signal = 0;
 20486                           
 20487                           
 20488                           ;Dimmer_B1.c: 149: if (DimmerLightsIntr->Status == 1) {
 20489  040E  0879               	movf	_DimmerLightsIntr,w
 20490  040F  0086               	movwf	6
 20491  0410  3001               	movlw	1	; select bank2/3
 20492  0411  0087               	movwf	7
 20493  0412  1E81               	btfss	1,5
 20494  0413  2C2F               	goto	i1l7370
 20495                           
 20496                           ;Dimmer_B1.c: 150: DimmerLightsIntr->DimmingValue--;
 20497  0414  0879               	movf	_DimmerLightsIntr,w
 20498  0415  3E04               	addlw	4
 20499  0416  0086               	movwf	6
 20500  0417  3001               	movlw	1	; select bank2/3
 20501  0418  0087               	movwf	7
 20502  0419  3001               	movlw	1
 20503  041A  0281               	subwf	1,f
 20504                           
 20505                           ;Dimmer_B1.c: 151: if (DimmerLightsIntr->DimmingValue <= DimmerLightsIntr->MaxmumValue) 
      +                          {
 20506  041B  0879               	movf	_DimmerLightsIntr,w
 20507  041C  3E05               	addlw	5
 20508  041D  0086               	movwf	6
 20509  041E  3001               	movlw	1	; select bank2/3
 20510  041F  0087               	movwf	7
 20511  0420  0879               	movf	_DimmerLightsIntr,w
 20512  0421  3E04               	addlw	4
 20513  0422  0084               	movwf	4
 20514  0423  3001               	movlw	1	; select bank2/3
 20515  0424  0085               	movwf	5
 20516  0425  0800               	movf	0,w
 20517  0426  0201               	subwf	1,w
 20518  0427  1C03               	skipc
 20519  0428  2C6D               	goto	i1l7386
 20520  0429                     i1l7368:	
 20521                           
 20522                           ;Dimmer_B1.c: 152: DimmerLightsIntr->Signal = 0;
 20523  0429  0879               	movf	_DimmerLightsIntr,w
 20524  042A  0086               	movwf	6
 20525  042B  3001               	movlw	1	; select bank2/3
 20526  042C  0087               	movwf	7
 20527  042D  1081               	bcf	1,1
 20528                           
 20529                           ;Dimmer_B1.c: 153: }
 20530                           ;Dimmer_B1.c: 154: } else {
 20531  042E  2C6D               	goto	i1l7386
 20532  042F                     i1l7370:	
 20533                           
 20534                           ;Dimmer_B1.c: 155: DimmerLightsIntr->DimmingValue++;
 20535  042F  3001               	movlw	1
 20536  0430  00F2               	movwf	??_setDimmerLights_IntrControl
 20537  0431  0879               	movf	_DimmerLightsIntr,w
 20538  0432  3E04               	addlw	4
 20539  0433  0086               	movwf	6
 20540  0434  3001               	movlw	1	; select bank2/3
 20541  0435  0087               	movwf	7
 20542  0436  0872               	movf	??_setDimmerLights_IntrControl,w
 20543  0437  0781               	addwf	1,f
 20544                           
 20545                           ;Dimmer_B1.c: 156: if (DimmerLightsIntr->DimmingValue >= DimmerLightsIntr->MinimumValue)
      +                           {
 20546  0438  0879               	movf	_DimmerLightsIntr,w
 20547  0439  3E04               	addlw	4
 20548  043A  0086               	movwf	6
 20549  043B  3001               	movlw	1	; select bank2/3
 20550  043C  0087               	movwf	7
 20551  043D  0879               	movf	_DimmerLightsIntr,w
 20552  043E  3E06               	addlw	6
 20553  043F  0084               	movwf	4
 20554  0440  3001               	movlw	1	; select bank2/3
 20555  0441  0085               	movwf	5
 20556  0442  0800               	movf	0,w
 20557  0443  0201               	subwf	1,w
 20558  0444  1C03               	skipc
 20559  0445  2C6D               	goto	i1l7386
 20560                           
 20561                           ;Dimmer_B1.c: 157: DimmerLightsIntr->Signal = 0;
 20562  0446  0879               	movf	_DimmerLightsIntr,w
 20563  0447  0086               	movwf	6
 20564  0448  3001               	movlw	1	; select bank2/3
 20565  0449  0087               	movwf	7
 20566  044A  1081               	bcf	1,1
 20567                           
 20568                           ;Dimmer_B1.c: 158: DimmerLightsIntr->StatusFlag = 0;
 20569  044B  0879               	movf	_DimmerLightsIntr,w
 20570  044C  0086               	movwf	6
 20571  044D  3001               	movlw	1	; select bank2/3
 20572  044E  0087               	movwf	7
 20573  044F  1301               	bcf	1,6
 20574                           
 20575                           ;Dimmer_B1.c: 159: DimmerLightsIntr->Clear = 1;
 20576  0450  0879               	movf	_DimmerLightsIntr,w
 20577  0451  3E09               	addlw	9
 20578  0452  0086               	movwf	6
 20579  0453  3001               	movlw	1	; select bank2/3
 20580  0454  0087               	movwf	7
 20581  0455  1501               	bsf	1,2
 20582                           
 20583                           ;Dimmer_B1.c: 160: Dimmer->Detect = 1;
 20584  0456  0021               	movlb	1	; select bank1
 20585  0457  083A               	movf	_Dimmer^(0+128),w
 20586  0458  0086               	movwf	6
 20587  0459  0187               	clrf	7
 20588  045A  1401               	bsf	1,0
 20589                           
 20590                           ;Dimmer_B1.c: 162: if (lights == 1) {
 20591  045B  0876               	movf	setDimmerLights_IntrControl@lights,w
 20592  045C  3A01               	xorlw	1
 20593  045D  1D03               	skipz
 20594  045E  2C61               	goto	i1l7380
 20595                           
 20596                           ;Dimmer_B1.c: 163: RA3 = 0;
 20597  045F  0020               	movlb	0	; select bank0
 20598  0460  118C               	bcf	12,3	;volatile
 20599  0461                     i1l7380:	
 20600                           
 20601                           ;Dimmer_B1.c: 165: }
 20602                           ;Dimmer_B1.c: 168: if (lights == 2) {
 20603  0461  0876               	movf	setDimmerLights_IntrControl@lights,w
 20604  0462  3A02               	xorlw	2
 20605  0463  1D03               	skipz
 20606  0464  2C67               	goto	i1l7384
 20607                           
 20608                           ;Dimmer_B1.c: 169: RC7 = 0;
 20609  0465  0020               	movlb	0	; select bank0
 20610  0466  138E               	bcf	14,7	;volatile
 20611  0467                     i1l7384:	
 20612                           
 20613                           ;Dimmer_B1.c: 170: }
 20614                           ;Dimmer_B1.c: 177: setLoad_StatusOff(lights, 1);
 20615  0467  01F0               	clrf	i1setLoad_StatusOff@command
 20616  0468  0AF0               	incf	i1setLoad_StatusOff@command,f
 20617  0469  0876               	movf	setDimmerLights_IntrControl@lights,w
 20618  046A  319B  23BB  3182   	fcall	i1_setLoad_StatusOff
 20619  046D                     i1l7386:	
 20620                           
 20621                           ;Dimmer_B1.c: 178: }
 20622                           ;Dimmer_B1.c: 179: }
 20623                           ;Dimmer_B1.c: 180: }
 20624                           ;Dimmer_B1.c: 181: }
 20625                           ;Dimmer_B1.c: 182: }
 20626                           ;Dimmer_B1.c: 183: }
 20627                           ;Dimmer_B1.c: 184: }
 20628                           ;Dimmer_B1.c: 185: if (DimmerLightsIntr->Triac == 1) {
 20629  046D  0879               	movf	_DimmerLightsIntr,w
 20630  046E  3E08               	addlw	8
 20631  046F  0086               	movwf	6
 20632  0470  3001               	movlw	1	; select bank2/3
 20633  0471  0087               	movwf	7
 20634  0472  1E81               	btfss	1,5
 20635  0473  2C9E               	goto	i1l7404
 20636                           
 20637                           ;Dimmer_B1.c: 186: DimmerLightsIntr->TriacTime++;
 20638  0474  3001               	movlw	1
 20639  0475  00F2               	movwf	??_setDimmerLights_IntrControl
 20640  0476  0879               	movf	_DimmerLightsIntr,w
 20641  0477  3E07               	addlw	7
 20642  0478  0086               	movwf	6
 20643  0479  3001               	movlw	1	; select bank2/3
 20644  047A  0087               	movwf	7
 20645  047B  0872               	movf	??_setDimmerLights_IntrControl,w
 20646  047C  0781               	addwf	1,f
 20647                           
 20648                           ;Dimmer_B1.c: 187: if (DimmerLightsIntr->TriacTime >= 5) {
 20649  047D  0879               	movf	_DimmerLightsIntr,w
 20650  047E  3E07               	addlw	7
 20651  047F  0086               	movwf	6
 20652  0480  3001               	movlw	1	; select bank2/3
 20653  0481  0087               	movwf	7
 20654  0482  3005               	movlw	5
 20655  0483  0201               	subwf	1,w
 20656  0484  1C03               	skipc
 20657  0485  2C9E               	goto	i1l7404
 20658                           
 20659                           ;Dimmer_B1.c: 188: DimmerLightsIntr->TriacTime = 0;
 20660  0486  0879               	movf	_DimmerLightsIntr,w
 20661  0487  3E07               	addlw	7
 20662  0488  0086               	movwf	6
 20663  0489  3001               	movlw	1	; select bank2/3
 20664  048A  0087               	movwf	7
 20665  048B  0181               	clrf	1
 20666                           
 20667                           ;Dimmer_B1.c: 189: DimmerLightsIntr->Triac = 0;
 20668  048C  0879               	movf	_DimmerLightsIntr,w
 20669  048D  3E08               	addlw	8
 20670  048E  0086               	movwf	6
 20671  048F  3001               	movlw	1	; select bank2/3
 20672  0490  0087               	movwf	7
 20673  0491  1281               	bcf	1,5
 20674                           
 20675                           ;Dimmer_B1.c: 192: if (lights == 1) {
 20676  0492  0876               	movf	setDimmerLights_IntrControl@lights,w
 20677  0493  3A01               	xorlw	1
 20678  0494  1D03               	skipz
 20679  0495  2C98               	goto	i1l7400
 20680                           
 20681                           ;Dimmer_B1.c: 193: RA7 = 0;
 20682  0496  0020               	movlb	0	; select bank0
 20683  0497  138C               	bcf	12,7	;volatile
 20684  0498                     i1l7400:	
 20685                           ;Dimmer_B1.c: 194: ;;
 20686                           
 20687                           
 20688                           ;Dimmer_B1.c: 195: }
 20689                           ;Dimmer_B1.c: 198: if (lights == 2) {
 20690  0498  0876               	movf	setDimmerLights_IntrControl@lights,w
 20691  0499  3A02               	xorlw	2
 20692  049A  1D03               	skipz
 20693  049B  2C9E               	goto	i1l7404
 20694                           
 20695                           ;Dimmer_B1.c: 199: RB4 = 0;
 20696  049C  0020               	movlb	0	; select bank0
 20697  049D  120D               	bcf	13,4	;volatile
 20698  049E                     i1l7404:	
 20699                           
 20700                           ;Dimmer_B1.c: 200: }
 20701                           ;Dimmer_B1.c: 207: }
 20702                           ;Dimmer_B1.c: 208: }
 20703                           ;Dimmer_B1.c: 209: if (DimmerLightsIntr->TriacFlag == 1) {
 20704  049E  0879               	movf	_DimmerLightsIntr,w
 20705  049F  3E09               	addlw	9
 20706  04A0  0086               	movwf	6
 20707  04A1  3001               	movlw	1	; select bank2/3
 20708  04A2  0087               	movwf	7
 20709  04A3  1E81               	btfss	1,5
 20710  04A4  0008               	return
 20711                           
 20712                           ;Dimmer_B1.c: 210: DimmerLightsIntr->TriacCount++;
 20713  04A5  3001               	movlw	1
 20714  04A6  00F2               	movwf	??_setDimmerLights_IntrControl
 20715  04A7  0879               	movf	_DimmerLightsIntr,w
 20716  04A8  3E0A               	addlw	10
 20717  04A9  0086               	movwf	6
 20718  04AA  3001               	movlw	1	; select bank2/3
 20719  04AB  0087               	movwf	7
 20720  04AC  0872               	movf	??_setDimmerLights_IntrControl,w
 20721  04AD  0781               	addwf	1,f
 20722                           
 20723                           ;Dimmer_B1.c: 211: if (DimmerLightsIntr->TriacCount == 70) {
 20724  04AE  0879               	movf	_DimmerLightsIntr,w
 20725  04AF  3E0A               	addlw	10
 20726  04B0  0086               	movwf	6
 20727  04B1  3001               	movlw	1	; select bank2/3
 20728  04B2  0087               	movwf	7
 20729  04B3  0801               	movf	1,w
 20730  04B4  3A46               	xorlw	70
 20731  04B5  1D03               	skipz
 20732  04B6  0008               	return
 20733                           
 20734                           ;Dimmer_B1.c: 212: DimmerLightsIntr->TriacCount = 0;
 20735  04B7  0879               	movf	_DimmerLightsIntr,w
 20736  04B8  3E0A               	addlw	10
 20737  04B9  0086               	movwf	6
 20738  04BA  3001               	movlw	1	; select bank2/3
 20739  04BB  0087               	movwf	7
 20740  04BC  0181               	clrf	1
 20741                           
 20742                           ;Dimmer_B1.c: 213: DimmerLightsIntr->TriacFlag = 0;
 20743  04BD  0879               	movf	_DimmerLightsIntr,w
 20744  04BE  3E09               	addlw	9
 20745  04BF  0086               	movwf	6
 20746  04C0  3001               	movlw	1	; select bank2/3
 20747  04C1  0087               	movwf	7
 20748  04C2  1281               	bcf	1,5
 20749  04C3  0008               	return
 20750  04C4                     __end_of_setDimmerLights_IntrControl:	
 20751                           
 20752                           	psect	text136
 20753  1BBB                     __ptext136:	
 20754 ;; *************** function i1_setLoad_StatusOff *****************
 20755 ;; Defined at:
 20756 ;;		line 284 in file "../src/OverLoad_B1.c"
 20757 ;; Parameters:    Size  Location     Type
 20758 ;;  lights          1    wreg     unsigned char 
 20759 ;;  command         1    0[COMMON] unsigned char 
 20760 ;; Auto vars:     Size  Location     Type
 20761 ;;  lights          1    1[COMMON] unsigned char 
 20762 ;; Return value:  Size  Location     Type
 20763 ;;		None               void
 20764 ;; Registers used:
 20765 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 20766 ;; Tracked objects:
 20767 ;;		On entry : 0/0
 20768 ;;		On exit  : 0/0
 20769 ;;		Unchanged: 0/0
 20770 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20771 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20772 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20773 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20774 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20775 ;;Total ram usage:        2 bytes
 20776 ;; Hardware stack levels used:    1
 20777 ;; This function calls:
 20778 ;;		Nothing
 20779 ;; This function is called by:
 20780 ;;		_setDimmerLights_IntrControl
 20781 ;; This function uses a non-reentrant model
 20782 ;;
 20783                           
 20784                           
 20785                           ;psect for function i1_setLoad_StatusOff
 20786  1BBB                     i1_setLoad_StatusOff:	
 20787                           
 20788                           ;incstack = 0
 20789                           ; Regs used in i1_setLoad_StatusOff: [wreg+fsr1l+fsr1h+status,2+status,0]
 20790                           ;i1setLoad_StatusOff@lights stored from wreg
 20791  1BBB  00F1               	movwf	i1setLoad_StatusOff@lights
 20792                           
 20793                           ;OverLoad_B1.c: 285: Load->StatusOff = command;
 20794  1BBC  087B               	movf	_Load,w
 20795  1BBD  3E46               	addlw	70
 20796  1BBE  0086               	movwf	6
 20797  1BBF  3002               	movlw	2	; select bank4/5
 20798  1BC0  0087               	movwf	7
 20799  1BC1  0870               	movf	i1setLoad_StatusOff@command,w
 20800  1BC2  1081               	bcf	1,1
 20801  1BC3  1D03               	skipz
 20802  1BC4  1481               	bsf	1,1
 20803                           
 20804                           ;OverLoad_B1.c: 286: Load->SafeCount -= 2;
 20805  1BC5  087B               	movf	_Load,w
 20806  1BC6  3E42               	addlw	66
 20807  1BC7  0086               	movwf	6
 20808  1BC8  3002               	movlw	2	; select bank4/5
 20809  1BC9  0087               	movwf	7
 20810  1BCA  3002               	movlw	2
 20811  1BCB  0281               	subwf	1,f
 20812                           
 20813                           ;OverLoad_B1.c: 287: if (lights == 1) {
 20814  1BCC  0871               	movf	i1setLoad_StatusOff@lights,w
 20815  1BCD  3A01               	xorlw	1
 20816  1BCE  1D03               	skipz
 20817  1BCF  2BD6               	goto	i1l7198
 20818                           
 20819                           ;OverLoad_B1.c: 288: Load->Lights1Status = 0;
 20820  1BD0  087B               	movf	_Load,w
 20821  1BD1  3E43               	addlw	67
 20822  1BD2  0086               	movwf	6
 20823  1BD3  3002               	movlw	2	; select bank4/5
 20824  1BD4  0087               	movwf	7
 20825  1BD5  0181               	clrf	1
 20826  1BD6                     i1l7198:	
 20827                           
 20828                           ;OverLoad_B1.c: 289: }
 20829                           ;OverLoad_B1.c: 290: if (lights == 2) {
 20830  1BD6  0871               	movf	i1setLoad_StatusOff@lights,w
 20831  1BD7  3A02               	xorlw	2
 20832  1BD8  1D03               	skipz
 20833  1BD9  2BE0               	goto	i1l7202
 20834                           
 20835                           ;OverLoad_B1.c: 291: Load->Lights2Status = 0;
 20836  1BDA  087B               	movf	_Load,w
 20837  1BDB  3E44               	addlw	68
 20838  1BDC  0086               	movwf	6
 20839  1BDD  3002               	movlw	2	; select bank4/5
 20840  1BDE  0087               	movwf	7
 20841  1BDF  0181               	clrf	1
 20842  1BE0                     i1l7202:	
 20843                           
 20844                           ;OverLoad_B1.c: 292: }
 20845                           ;OverLoad_B1.c: 293: if (lights == 3) {
 20846  1BE0  0871               	movf	i1setLoad_StatusOff@lights,w
 20847  1BE1  3A03               	xorlw	3
 20848  1BE2  1D03               	skipz
 20849  1BE3  0008               	return
 20850                           
 20851                           ;OverLoad_B1.c: 294: Load->Lights3Status = 0;
 20852  1BE4  087B               	movf	_Load,w
 20853  1BE5  3E45               	addlw	69
 20854  1BE6  0086               	movwf	6
 20855  1BE7  3002               	movlw	2	; select bank4/5
 20856  1BE8  0087               	movwf	7
 20857  1BE9  0181               	clrf	1
 20858  1BEA  0008               	return
 20859  1BEB                     __end_ofi1_setLoad_StatusOff:	
 20860                           
 20861                           	psect	text137
 20862  2700                     __ptext137:	
 20863 ;; *************** function _DimmerIntrPointSelect *****************
 20864 ;; Defined at:
 20865 ;;		line 65 in file "../src/Dimmer_B1.c"
 20866 ;; Parameters:    Size  Location     Type
 20867 ;;  lights          1    wreg     unsigned char 
 20868 ;; Auto vars:     Size  Location     Type
 20869 ;;  lights          1    1[COMMON] unsigned char 
 20870 ;; Return value:  Size  Location     Type
 20871 ;;		None               void
 20872 ;; Registers used:
 20873 ;;		wreg
 20874 ;; Tracked objects:
 20875 ;;		On entry : 0/0
 20876 ;;		On exit  : 0/0
 20877 ;;		Unchanged: 0/0
 20878 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20879 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20880 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20881 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20882 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20883 ;;Total ram usage:        2 bytes
 20884 ;; Hardware stack levels used:    1
 20885 ;; This function calls:
 20886 ;;		Nothing
 20887 ;; This function is called by:
 20888 ;;		_setDimmerLights_IntrControl
 20889 ;; This function uses a non-reentrant model
 20890 ;;
 20891                           
 20892                           
 20893                           ;psect for function _DimmerIntrPointSelect
 20894  2700                     _DimmerIntrPointSelect:	
 20895                           
 20896                           ;incstack = 0
 20897                           ; Regs used in _DimmerIntrPointSelect: [wreg]
 20898                           ;DimmerIntrPointSelect@lights stored from wreg
 20899  2700  00F1               	movwf	DimmerIntrPointSelect@lights
 20900                           
 20901                           ;Dimmer_B1.c: 67: if (lights == 1) {
 20902  2701  0871               	movf	DimmerIntrPointSelect@lights,w
 20903  2702  3A01               	xorlw	1
 20904  2703  1D03               	skipz
 20905  2704  2F09               	goto	i1l841
 20906                           
 20907                           ;Dimmer_B1.c: 68: DimmerLightsIntr = &DimmerLights1;
 20908  2705  3020               	movlw	_DimmerLights1& (0+255)
 20909  2706  00F0               	movwf	??_DimmerIntrPointSelect
 20910  2707  0870               	movf	??_DimmerIntrPointSelect,w
 20911  2708  00F9               	movwf	_DimmerLightsIntr
 20912  2709                     i1l841:	
 20913                           
 20914                           ;Dimmer_B1.c: 69: }
 20915                           ;Dimmer_B1.c: 72: if (lights == 2) {
 20916  2709  0871               	movf	DimmerIntrPointSelect@lights,w
 20917  270A  3A02               	xorlw	2
 20918  270B  1D03               	skipz
 20919  270C  0008               	return
 20920                           
 20921                           ;Dimmer_B1.c: 73: DimmerLightsIntr = &DimmerLights2;
 20922  270D  302F               	movlw	_DimmerLights2& (0+255)
 20923  270E  00F0               	movwf	??_DimmerIntrPointSelect
 20924  270F  0870               	movf	??_DimmerIntrPointSelect,w
 20925  2710  00F9               	movwf	_DimmerLightsIntr
 20926  2711  0008               	return
 20927  2712                     __end_of_DimmerIntrPointSelect:	
 20928                           
 20929                           	psect	text138
 20930  26CD                     __ptext138:	
 20931 ;; *************** function _IOC_ISR *****************
 20932 ;; Defined at:
 20933 ;;		line 297 in file "../src/MCU_B1.c"
 20934 ;; Parameters:    Size  Location     Type
 20935 ;;		None
 20936 ;; Auto vars:     Size  Location     Type
 20937 ;;		None
 20938 ;; Return value:  Size  Location     Type
 20939 ;;		None               void
 20940 ;; Registers used:
 20941 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 20942 ;; Tracked objects:
 20943 ;;		On entry : 0/0
 20944 ;;		On exit  : 0/0
 20945 ;;		Unchanged: 0/0
 20946 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20947 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20948 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20949 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20950 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20951 ;;Total ram usage:        0 bytes
 20952 ;; Hardware stack levels used:    1
 20953 ;; Hardware stack levels required when called:    3
 20954 ;; This function calls:
 20955 ;;		_setDimmerReClock
 20956 ;; This function is called by:
 20957 ;;		_ISR
 20958 ;; This function uses a non-reentrant model
 20959 ;;
 20960                           
 20961                           
 20962                           ;psect for function _IOC_ISR
 20963  26CD                     _IOC_ISR:	
 20964                           
 20965                           ;MCU_B1.c: 298: if (IOCIE == 1 && IOCBF2 == 1) {
 20966                           
 20967                           ;incstack = 0
 20968                           ; Regs used in _IOC_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 20969  26CD  1D8B               	btfss	11,3	;volatile
 20970  26CE  0008               	return
 20971  26CF  0027               	movlb	7	; select bank7
 20972  26D0  1D16               	btfss	22,2	;volatile
 20973  26D1  0008               	return
 20974                           
 20975                           ;MCU_B1.c: 299: IOCBF2 = 0;
 20976  26D2  1116               	bcf	22,2	;volatile
 20977                           
 20978                           ;MCU_B1.c: 300: IOCIF = 0;
 20979  26D3  100B               	bcf	11,0	;volatile
 20980                           
 20981                           ;MCU_B1.c: 301: if (myMain->PowerON == 1) {
 20982  26D4  0021               	movlb	1	; select bank1
 20983  26D5  086D               	movf	_myMain^(0+128),w
 20984  26D6  0086               	movwf	6
 20985  26D7  3001               	movlw	1	; select bank2/3
 20986  26D8  0087               	movwf	7
 20987  26D9  1C01               	btfss	1,0
 20988  26DA  0008               	return
 20989                           
 20990                           ;MCU_B1.c: 303: setDimmerReClock();
 20991  26DB  31A5  2547         	fcall	_setDimmerReClock
 20992  26DD  0008               	return
 20993  26DE                     __end_of_IOC_ISR:	
 20994                           
 20995                           	psect	text139
 20996  2547                     __ptext139:	
 20997 ;; *************** function _setDimmerReClock *****************
 20998 ;; Defined at:
 20999 ;;		line 175 in file "../src/MCU_B1.c"
 21000 ;; Parameters:    Size  Location     Type
 21001 ;;		None
 21002 ;; Auto vars:     Size  Location     Type
 21003 ;;		None
 21004 ;; Return value:  Size  Location     Type
 21005 ;;		None               void
 21006 ;; Registers used:
 21007 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 21008 ;; Tracked objects:
 21009 ;;		On entry : 0/0
 21010 ;;		On exit  : 0/0
 21011 ;;		Unchanged: 0/0
 21012 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 21013 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21014 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21015 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21016 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21017 ;;Total ram usage:        0 bytes
 21018 ;; Hardware stack levels used:    1
 21019 ;; Hardware stack levels required when called:    2
 21020 ;; This function calls:
 21021 ;;		_setDimmerLights_IntrIOC_GO
 21022 ;; This function is called by:
 21023 ;;		_IOC_ISR
 21024 ;; This function uses a non-reentrant model
 21025 ;;
 21026                           
 21027                           
 21028                           ;psect for function _setDimmerReClock
 21029  2547                     _setDimmerReClock:	
 21030                           
 21031                           ;MCU_B1.c: 180: setDimmerLights_IntrIOC_GO(1);
 21032                           
 21033                           ;incstack = 0
 21034                           ; Regs used in _setDimmerReClock: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 21035  2547  3001               	movlw	1
 21036  2548  3199  2198  31A5   	fcall	_setDimmerLights_IntrIOC_GO
 21037                           
 21038                           ;MCU_B1.c: 184: setDimmerLights_IntrIOC_GO(2);
 21039  254B  3002               	movlw	2
 21040  254C  3199  2198         	fcall	_setDimmerLights_IntrIOC_GO
 21041                           
 21042                           ;MCU_B1.c: 191: TMR0 = 255;
 21043  254E  30FF               	movlw	255
 21044  254F  0020               	movlb	0	; select bank0
 21045  2550  0095               	movwf	21	;volatile
 21046  2551  0008               	return
 21047  2552                     __end_of_setDimmerReClock:	
 21048                           
 21049                           	psect	text140
 21050  1998                     __ptext140:	
 21051 ;; *************** function _setDimmerLights_IntrIOC_GO *****************
 21052 ;; Defined at:
 21053 ;;		line 28 in file "../src/Dimmer_B1.c"
 21054 ;; Parameters:    Size  Location     Type
 21055 ;;  lights          1    wreg     unsigned char 
 21056 ;; Auto vars:     Size  Location     Type
 21057 ;;  lights          1    2[COMMON] unsigned char 
 21058 ;; Return value:  Size  Location     Type
 21059 ;;		None               void
 21060 ;; Registers used:
 21061 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 21062 ;; Tracked objects:
 21063 ;;		On entry : 0/0
 21064 ;;		On exit  : 0/0
 21065 ;;		Unchanged: 0/0
 21066 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 21067 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21068 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21069 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21070 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21071 ;;Total ram usage:        1 bytes
 21072 ;; Hardware stack levels used:    1
 21073 ;; Hardware stack levels required when called:    1
 21074 ;; This function calls:
 21075 ;;		_DimmerIntrIOCPointSelect
 21076 ;; This function is called by:
 21077 ;;		_setDimmerReClock
 21078 ;; This function uses a non-reentrant model
 21079 ;;
 21080                           
 21081                           
 21082                           ;psect for function _setDimmerLights_IntrIOC_GO
 21083  1998                     _setDimmerLights_IntrIOC_GO:	
 21084                           
 21085                           ;incstack = 0
 21086                           ; Regs used in _setDimmerLights_IntrIOC_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 21087                           ;setDimmerLights_IntrIOC_GO@lights stored from wreg
 21088  1998  00F2               	movwf	setDimmerLights_IntrIOC_GO@lights
 21089                           
 21090                           ;Dimmer_B1.c: 30: DimmerIntrIOCPointSelect(lights);
 21091  1999  0872               	movf	setDimmerLights_IntrIOC_GO@lights,w
 21092  199A  31A7  2725  3199   	fcall	_DimmerIntrIOCPointSelect
 21093                           
 21094                           ;Dimmer_B1.c: 32: if (DimmerLightsIntrIOC->GO == 0 && DimmerLightsIntrIOC->TriacFlag == 
      +                          0) {
 21095  199D  0021               	movlb	1	; select bank1
 21096  199E  083D               	movf	_DimmerLightsIntrIOC^(0+128),w
 21097  199F  0086               	movwf	6
 21098  19A0  3001               	movlw	1	; select bank2/3
 21099  19A1  0087               	movwf	7
 21100  19A2  1801               	btfsc	1,0
 21101  19A3  0008               	return
 21102  19A4  083D               	movf	_DimmerLightsIntrIOC^(0+128),w
 21103  19A5  3E09               	addlw	9
 21104  19A6  0086               	movwf	6
 21105  19A7  3001               	movlw	1	; select bank2/3
 21106  19A8  0087               	movwf	7
 21107  19A9  1A81               	btfsc	1,5
 21108  19AA  0008               	return
 21109                           
 21110                           ;Dimmer_B1.c: 33: DimmerLightsIntrIOC->GO = 1;
 21111  19AB  083D               	movf	_DimmerLightsIntrIOC^(0+128),w
 21112  19AC  0086               	movwf	6
 21113  19AD  3001               	movlw	1	; select bank2/3
 21114  19AE  0087               	movwf	7
 21115  19AF  1401               	bsf	1,0
 21116                           
 21117                           ;Dimmer_B1.c: 34: DimmerLightsIntrIOC->TriacFlag = 1;
 21118  19B0  083D               	movf	_DimmerLightsIntrIOC^(0+128),w
 21119  19B1  3E09               	addlw	9
 21120  19B2  0086               	movwf	6
 21121  19B3  3001               	movlw	1	; select bank2/3
 21122  19B4  0087               	movwf	7
 21123  19B5  1681               	bsf	1,5
 21124  19B6  0008               	return
 21125  19B7                     __end_of_setDimmerLights_IntrIOC_GO:	
 21126                           
 21127                           	psect	text141
 21128  2725                     __ptext141:	
 21129 ;; *************** function _DimmerIntrIOCPointSelect *****************
 21130 ;; Defined at:
 21131 ;;		line 8 in file "../src/Dimmer_B1.c"
 21132 ;; Parameters:    Size  Location     Type
 21133 ;;  lights          1    wreg     unsigned char 
 21134 ;; Auto vars:     Size  Location     Type
 21135 ;;  lights          1    1[COMMON] unsigned char 
 21136 ;; Return value:  Size  Location     Type
 21137 ;;		None               void
 21138 ;; Registers used:
 21139 ;;		wreg
 21140 ;; Tracked objects:
 21141 ;;		On entry : 0/0
 21142 ;;		On exit  : 0/0
 21143 ;;		Unchanged: 0/0
 21144 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 21145 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21146 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21147 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21148 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21149 ;;Total ram usage:        2 bytes
 21150 ;; Hardware stack levels used:    1
 21151 ;; This function calls:
 21152 ;;		Nothing
 21153 ;; This function is called by:
 21154 ;;		_setDimmerLights_IntrIOC_GO
 21155 ;; This function uses a non-reentrant model
 21156 ;;
 21157                           
 21158                           
 21159                           ;psect for function _DimmerIntrIOCPointSelect
 21160  2725                     _DimmerIntrIOCPointSelect:	
 21161                           
 21162                           ;incstack = 0
 21163                           ; Regs used in _DimmerIntrIOCPointSelect: [wreg]
 21164                           ;DimmerIntrIOCPointSelect@lights stored from wreg
 21165  2725  00F1               	movwf	DimmerIntrIOCPointSelect@lights
 21166                           
 21167                           ;Dimmer_B1.c: 10: if (lights == 1) {
 21168  2726  0871               	movf	DimmerIntrIOCPointSelect@lights,w
 21169  2727  3A01               	xorlw	1
 21170  2728  1D03               	skipz
 21171  2729  2F2F               	goto	i1l832
 21172                           
 21173                           ;Dimmer_B1.c: 11: DimmerLightsIntrIOC = &DimmerLights1;
 21174  272A  3020               	movlw	_DimmerLights1& (0+255)
 21175  272B  00F0               	movwf	??_DimmerIntrIOCPointSelect
 21176  272C  0870               	movf	??_DimmerIntrIOCPointSelect,w
 21177  272D  0021               	movlb	1	; select bank1
 21178  272E  00BD               	movwf	_DimmerLightsIntrIOC^(0+128)
 21179  272F                     i1l832:	
 21180                           
 21181                           ;Dimmer_B1.c: 12: }
 21182                           ;Dimmer_B1.c: 15: if (lights == 2) {
 21183  272F  0871               	movf	DimmerIntrIOCPointSelect@lights,w
 21184  2730  3A02               	xorlw	2
 21185  2731  1D03               	skipz
 21186  2732  0008               	return
 21187                           
 21188                           ;Dimmer_B1.c: 16: DimmerLightsIntrIOC = &DimmerLights2;
 21189  2733  302F               	movlw	_DimmerLights2& (0+255)
 21190  2734  00F0               	movwf	??_DimmerIntrIOCPointSelect
 21191  2735  0870               	movf	??_DimmerIntrIOCPointSelect,w
 21192  2736  0021               	movlb	1	; select bank1
 21193  2737  00BD               	movwf	_DimmerLightsIntrIOC^(0+128)
 21194  2738  0008               	return
 21195  2739                     __end_of_DimmerIntrIOCPointSelect:	
 21196                           
 21197                           	psect	text142
 21198  257E                     __ptext142:	
 21199 ;; *************** function _INT_ISR *****************
 21200 ;; Defined at:
 21201 ;;		line 250 in file "../src/MCU_B1.c"
 21202 ;; Parameters:    Size  Location     Type
 21203 ;;		None
 21204 ;; Auto vars:     Size  Location     Type
 21205 ;;		None
 21206 ;; Return value:  Size  Location     Type
 21207 ;;		None               void
 21208 ;; Registers used:
 21209 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 21210 ;; Tracked objects:
 21211 ;;		On entry : 0/0
 21212 ;;		On exit  : 0/0
 21213 ;;		Unchanged: 0/0
 21214 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 21215 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21216 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21217 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21218 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21219 ;;Total ram usage:        0 bytes
 21220 ;; Hardware stack levels used:    1
 21221 ;; Hardware stack levels required when called:    2
 21222 ;; This function calls:
 21223 ;;		_setRF_ReceiveGO
 21224 ;; This function is called by:
 21225 ;;		_ISR
 21226 ;; This function uses a non-reentrant model
 21227 ;;
 21228                           
 21229                           
 21230                           ;psect for function _INT_ISR
 21231  257E                     _INT_ISR:	
 21232                           
 21233                           ;MCU_B1.c: 251: if (INTE == 1 && INTF == 1) {
 21234                           
 21235                           ;incstack = 0
 21236                           ; Regs used in _INT_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 21237  257E  1E0B               	btfss	11,4	;volatile
 21238  257F  0008               	return
 21239  2580  1C8B               	btfss	11,1	;volatile
 21240  2581  0008               	return
 21241                           
 21242                           ;MCU_B1.c: 252: INTF = 0;
 21243  2582  108B               	bcf	11,1	;volatile
 21244                           
 21245                           ;MCU_B1.c: 253: INTE = 0;
 21246  2583  120B               	bcf	11,4	;volatile
 21247                           
 21248                           ;MCU_B1.c: 254: setRF_ReceiveGO(1, 1);
 21249  2584  01F2               	clrf	setRF_ReceiveGO@command
 21250  2585  0AF2               	incf	setRF_ReceiveGO@command,f
 21251  2586  3001               	movlw	1
 21252  2587  3198  20D4         	fcall	_setRF_ReceiveGO
 21253  2589  0008               	return
 21254  258A                     __end_of_INT_ISR:	
 21255                           
 21256                           	psect	text143
 21257  18D4                     __ptext143:	
 21258 ;; *************** function _setRF_ReceiveGO *****************
 21259 ;; Defined at:
 21260 ;;		line 39 in file "../src/RF_Control_B1.c"
 21261 ;; Parameters:    Size  Location     Type
 21262 ;;  rf              1    wreg     unsigned char 
 21263 ;;  command         1    2[COMMON] unsigned char 
 21264 ;; Auto vars:     Size  Location     Type
 21265 ;;  rf              1    3[COMMON] unsigned char 
 21266 ;; Return value:  Size  Location     Type
 21267 ;;		None               void
 21268 ;; Registers used:
 21269 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 21270 ;; Tracked objects:
 21271 ;;		On entry : 0/0
 21272 ;;		On exit  : 0/0
 21273 ;;		Unchanged: 0/0
 21274 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 21275 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21276 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21277 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21278 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21279 ;;Total ram usage:        2 bytes
 21280 ;; Hardware stack levels used:    1
 21281 ;; Hardware stack levels required when called:    1
 21282 ;; This function calls:
 21283 ;;		i1_RfPointSelect
 21284 ;; This function is called by:
 21285 ;;		_INT_ISR
 21286 ;; This function uses a non-reentrant model
 21287 ;;
 21288                           
 21289                           
 21290                           ;psect for function _setRF_ReceiveGO
 21291  18D4                     _setRF_ReceiveGO:	
 21292                           
 21293                           ;incstack = 0
 21294                           ; Regs used in _setRF_ReceiveGO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 21295                           ;setRF_ReceiveGO@rf stored from wreg
 21296  18D4  00F3               	movwf	setRF_ReceiveGO@rf
 21297                           
 21298                           ;RF_Control_B1.c: 40: RfPointSelect(rf);
 21299  18D5  0873               	movf	setRF_ReceiveGO@rf,w
 21300  18D6  31A6  2613  3198   	fcall	i1_RfPointSelect
 21301                           
 21302                           ;RF_Control_B1.c: 41: if (RF->RxStatus == 1) {
 21303  18D9  0021               	movlb	1	; select bank1
 21304  18DA  083F               	movf	_RF^(0+128),w
 21305  18DB  0086               	movwf	6
 21306  18DC  0187               	clrf	7
 21307  18DD  1D81               	btfss	1,3
 21308  18DE  0008               	return
 21309                           
 21310                           ;RF_Control_B1.c: 42: RF->RxStatus = 0;
 21311  18DF  083F               	movf	_RF^(0+128),w
 21312  18E0  0086               	movwf	6
 21313  18E1  0187               	clrf	7
 21314  18E2  1181               	bcf	1,3
 21315                           
 21316                           ;RF_Control_B1.c: 43: RF->Run = 1;
 21317  18E3  0A3F               	incf	_RF^(0+128),w
 21318  18E4  0086               	movwf	6
 21319  18E5  0187               	clrf	7
 21320  18E6  1481               	bsf	1,1
 21321                           
 21322                           ;RF_Control_B1.c: 44: RF->ReceiveGO = command;
 21323  18E7  083F               	movf	_RF^(0+128),w
 21324  18E8  0086               	movwf	6
 21325  18E9  0187               	clrf	7
 21326  18EA  0872               	movf	setRF_ReceiveGO@command,w
 21327  18EB  1081               	bcf	1,1
 21328  18EC  1D03               	skipz
 21329  18ED  1481               	bsf	1,1
 21330  18EE  0008               	return
 21331  18EF                     __end_of_setRF_ReceiveGO:	
 21332                           
 21333                           	psect	text144
 21334  2613                     __ptext144:	
 21335 ;; *************** function i1_RfPointSelect *****************
 21336 ;; Defined at:
 21337 ;;		line 7 in file "../src/RF_Control_B1.c"
 21338 ;; Parameters:    Size  Location     Type
 21339 ;;  rf              1    wreg     unsigned char 
 21340 ;; Auto vars:     Size  Location     Type
 21341 ;;  rf              1    1[COMMON] unsigned char 
 21342 ;; Return value:  Size  Location     Type
 21343 ;;		None               void
 21344 ;; Registers used:
 21345 ;;		wreg
 21346 ;; Tracked objects:
 21347 ;;		On entry : 0/0
 21348 ;;		On exit  : 0/0
 21349 ;;		Unchanged: 0/0
 21350 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 21351 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21352 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21353 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21354 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21355 ;;Total ram usage:        2 bytes
 21356 ;; Hardware stack levels used:    1
 21357 ;; This function calls:
 21358 ;;		Nothing
 21359 ;; This function is called by:
 21360 ;;		_setRF_ReceiveGO
 21361 ;; This function uses a non-reentrant model
 21362 ;;
 21363                           
 21364                           
 21365                           ;psect for function i1_RfPointSelect
 21366  2613                     i1_RfPointSelect:	
 21367                           
 21368                           ;incstack = 0
 21369                           ; Regs used in i1_RfPointSelect: [wreg]
 21370                           ;i1RfPointSelect@rf stored from wreg
 21371  2613  00F1               	movwf	i1RfPointSelect@rf
 21372                           
 21373                           ;RF_Control_B1.c: 9: if (rf == 1) {
 21374  2614  0871               	movf	i1RfPointSelect@rf,w
 21375  2615  3A01               	xorlw	1
 21376  2616  1D03               	skipz
 21377  2617  2E1D               	goto	i1l7210
 21378                           
 21379                           ;RF_Control_B1.c: 10: RF = &RF1;
 21380  2618  30D3               	movlw	_RF1& (0+255)
 21381  2619  00F0               	movwf	??i1_RfPointSelect
 21382  261A  0870               	movf	??i1_RfPointSelect,w
 21383  261B  0021               	movlb	1	; select bank1
 21384  261C  00BF               	movwf	_RF^(0+128)
 21385  261D                     i1l7210:	
 21386                           
 21387                           ;RF_Control_B1.c: 11: }
 21388                           ;RF_Control_B1.c: 12: if (INTE == 0) {
 21389  261D  1A0B               	btfsc	11,4	;volatile
 21390  261E  0008               	return
 21391                           
 21392                           ;RF_Control_B1.c: 13: INTE = 1;
 21393  261F  160B               	bsf	11,4	;volatile
 21394  2620  0008               	return
 21395  2621                     __end_ofi1_RfPointSelect:	
 21396  007E                     btemp	set	126	;btemp
 21397  007E                     pic14e$flags	set	126
 21398  007E                     wtemp	set	126
 21399  007E                     wtemp0	set	126
 21400  0080                     wtemp1	set	128
 21401  0082                     wtemp2	set	130
 21402  0084                     wtemp3	set	132
 21403  0086                     wtemp4	set	134
 21404  0088                     wtemp5	set	136
 21405  007F                     wtemp6	set	127
 21406  007E                     ttemp	set	126
 21407  007E                     ttemp0	set	126
 21408  0081                     ttemp1	set	129
 21409  0084                     ttemp2	set	132
 21410  0087                     ttemp3	set	135
 21411  007F                     ttemp4	set	127
 21412  007E                     ltemp	set	126
 21413  007E                     ltemp0	set	126
 21414  0082                     ltemp1	set	130
 21415  0086                     ltemp2	set	134
 21416  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    102
    Data        32
    BSS         289
    Persistent  5
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      8      14
    BANK0            80     80      80
    BANK1            80      0      79
    BANK2            80      0      68
    BANK3            80      0      66
    BANK4            80      0      37
    BANK5            80      0      71
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    Sw	PTR struct Switch size(1) Largest target is 9
		 -> NULL(NULL[0]), Sw2(BANK2[9]), Sw1(BANK2[9]), 

    RFSW	PTR struct RFSW size(1) Largest target is 1
		 -> NULL(NULL[0]), RFSW2(BANK1[1]), RFSW1(BANK1[1]), 

    RF	PTR struct RF size(1) Largest target is 5
		 -> NULL(NULL[0]), RF1(BANK1[5]), 

    Temp	PTR struct OverTemp size(1) Largest target is 14
		 -> NULL(NULL[0]), Temp1(BANK3[14]), 

    Load	PTR struct OverLoad size(1) Largest target is 71
		 -> NULL(NULL[0]), Load1(BANK5[71]), 

    WDT	PTR struct WDT size(1) Largest target is 2
		 -> NULL(NULL[0]), _WDT(BANK1[2]), 

    Timer0	PTR struct Timer0 size(1) Largest target is 8
		 -> NULL(NULL[0]), VarTimer0(BANK2[8]), 

    Memory	PTR struct FlashMemory size(1) Largest target is 37
		 -> NULL(NULL[0]), VarMemory(BANK4[37]), 

    LED	PTR struct LED size(1) Largest target is 4
		 -> NULL(NULL[0]), VarErrLED(BANK1[4]), VarLED2(BANK1[4]), VarLED1(BANK1[4]), 

    DimmerLights22	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights2(BANK2[15]), 

    DimmerLights11	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights1(BANK2[15]), 

    DimmerLights	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights2(BANK2[15]), DimmerLights1(BANK2[15]), 

    Dimmer	PTR struct Dimmer size(1) Largest target is 3
		 -> NULL(NULL[0]), Dimmer1(BANK1[3]), 

    DimmerLightsIntr	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights2(BANK2[15]), DimmerLights1(BANK2[15]), 

    DimmerLightsIntrIOC	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights2(BANK2[15]), DimmerLights1(BANK2[15]), 

    product	PTR struct Product size(1) Largest target is 32
		 -> NULL(NULL[0]), _product(BANK3[32]), 

    DelayOff	PTR struct DelayOff size(1) Largest target is 5
		 -> NULL(NULL[0]), DlySw2(BANK1[5]), DlySw1(BANK1[5]), 

    myMain	PTR struct myMain size(1) Largest target is 20
		 -> NULL(NULL[0]), _myMain(BANK3[20]), 

    Buz	PTR struct Buzzer size(1) Largest target is 12
		 -> NULL(NULL[0]), Buz1(BANK2[12]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _TMR0_ISR->_setDimmerLights_IntrControl
    _setDimmerLights_IntrControl->_DimmerIntrPointSelect
    _setDimmerLights_IntrControl->i1_setLoad_StatusOff
    _setDimmerReClock->_setDimmerLights_IntrIOC_GO
    _setDimmerLights_IntrIOC_GO->_DimmerIntrIOCPointSelect
    _INT_ISR->_setRF_ReceiveGO
    _setRF_ReceiveGO->i1_RfPointSelect

Critical Paths under _main in BANK0

    _my_Main->_setBuz
    _getTemp_AD->_getAD
    _getLoad_AD->_getAD
    _Temp_Main->_setTemp_Main
    _setTemp_Main->_setOverTemp_Exceptions
    _setOverTemp_Exceptions->_DimmerLights_Exceptions
    _Temp_Initialization->_setTemp_Initialization
    _Switch_Main->_setSw_Main
    _setSw_Main->_Sw_DimmerOffFunc
    _setRF_Learn->_RfPointSelect
    _Sw_DimmerOnFunc->_setRF_DimmerLights
    _Sw_DimmerOffFunc->_setRF_DimmerLights
    _Sw_DimmerAdjFunc->_setDimmerLights_AdjGo
    _Sw_DimmerAdjFunc->_setDimmerLights_TriggerAdj
    _Sw_DimmerAdjFunc->_setRFSW_Status
    _setDimmerLights_TriggerAdj->_DimmerLightsPointSelect
    _setDimmerLights_AdjGo->_DimmerLightsPointSelect
    _Switch_Initialization->_setSw_Initialization
    _setSw_Initialization->_setLED
    _RF_Main->_setRF_Main
    _setRF_Main->_getRxData
    _getRxData->_setControl_Lights_Table
    _setLog_Code->_setBuz
    _setControl_Lights_Table->_setRFSW_AdjControl
    _setRFSW_Control->_setRF_DimmerLights
    _setDelayOff_GO->_DelayTimejudge
    _setRFSW_AdjControl->_setRF_DimmerValue
    _setRF_DimmerValue->_setDimmerLights_AdjRF
    _setDimmerLights_AdjRF->_getPercentValue
    _getPercentValue->___fttol
    ___ftmul->___awtoft
    ___ftadd->___ftmul
    _RF_RxDisable->_CC2500_WriteCommand
    _CC2500_TxData->_CC2500_WriteCommand
    _CC2500_RxData->_setBuz
    _CC2500_ReadStatus->_CC2500_ReadByte
    _CC2500_ReadStatus->_CC2500_WriteByte
    _RF_Initialization->_setRF_Initialization
    _Mcu_Initialization->_TMR0_Set
    _Mcu_Initialization->_WDT_Set
    _Load_Main->_setLoad_Exceptions
    _setLoad_Exceptions->_DimmerLights_Exceptions
    _setSw_Enable->_SwPointSelect
    _setRF_Enable->_RfPointSelect
    _DimmerLights_Exceptions->_setBuz
    _setDimmerLights_TriggerERROR->_DimmerLightsPointSelect
    _setDimmerLights_ERROR->_setLED
    _setDimmerLights_ERROR->_setRFSW_Status
    _setDimmerLights_ERROR->_setSw_Status
    _setDimmerLights_Clear->_DimmerLightsPointSelect
    _Load_Initialization->_setLoad_AH_AL_Restore
    _LED_Main->_setLED_Main
    _setLED_Main->_LedPointSelect
    _LED_Initialization->_setLED_Initialization
    _setLED_Initialization->_setLED
    _Flash_Memory_Main->_Flash_Memory_Modify
    _Flash_Memory_Modify->_Flash_Memory_Read
    _Flash_Memory_Initialization->_setPercentValue
    _DimmerLights_Main->_setDimmerLights_Main
    _setDimmerLights_Main->_setDimmerLights_Adj
    _setDimmerLights_Adj->_setRF_DimmerLights
    _setDimmerLights->_setLED
    _setLED->_LedPointSelect
    _DimmerLights_Close->_getDimmerLights_StatusFlag
    _DimmerLights_Close->_setMemory_GO
    _DimmerLights_Initialization->_setDimmerLights_Initialization
    _setDimmerLights_Initialization->_DimmerLightsPointSelect
    _DelayOff_Main->_DlyOff_Main
    _DlyOff_Main->_setRF_DimmerLights
    _setTxData->_RfPointSelect
    _setSw_Status->_SwPointSelect
    _setRF_DimmerLights->_setPercentValue
    _setPercentValue->___fttol
    ___fttol->___ftadd
    ___ftdiv->___awtoft
    ___awtoft->___ftpack
    _setRFSW_Status->_RfSWPointSelect
    _setDimmerLights_Trigger->_DimmerLightsPointSelect
    _setDimmerLights_Switch->_DimmerLightsPointSelect
    _setBuz->___awdiv
    _DelayOff_Initialization->_DlyOff_Initialization
    _DlyOff_Initialization->_DelayOffPointSelect
    _CC2500_PowerOnInitial->_CC2500_InitSetREG
    _CC2500_SIDLEMode->_CC2500_WriteCommand
    _CC2500_PowerRST->_DelayTime_1us
    _CC2500_InitSetREG->_CC2500_WriteREG
    _CC2500_InitPATable->_CC2500_WriteREG
    _CC2500_WriteREG->_CC2500_WriteByte
    _CC2500_FrequencyCabr->_DelayTime_1us
    _CC2500_ClearTXFIFO->_CC2500_WriteCommand
    _CC2500_ClearRXFIFO->_CC2500_WriteCommand
    _CC2500_WriteCommand->_CC2500_WriteByte

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     0      4   94096
                                             76 BANK0      4     0      4
              _Buzzer_Initialization
                        _Buzzer_Main
              _CC2500_PowerOnInitial
            _DelayOff_Initialization
                      _DelayOff_Main
        _DimmerLights_Initialization
                  _DimmerLights_Main
        _Flash_Memory_Initialization
                  _Flash_Memory_Main
                 _LED_Initialization
                           _LED_Main
                _Load_Initialization
                          _Load_Main
                 _Mcu_Initialization
                  _RF_Initialization
                            _RF_Main
              _Switch_Initialization
                        _Switch_Main
                _Temp_Initialization
                          _Temp_Main
                           _WDT_Main
                         _getLoad_AD
                         _getTemp_AD
              _myMain_Initialization
                            _my_Main
                _my_TestPointCleared
 ---------------------------------------------------------------------------------
 (1) _my_TestPointCleared                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _my_Main                                              0     0      0    1805
                             _setBuz
                     _setLoad_Enable
                       _setRF_Enable
                       _setSw_Enable
                     _setTemp_Enable
 ---------------------------------------------------------------------------------
 (2) _setTemp_Enable                                       1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _setLoad_Enable                                       1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _myMain_Initialization                                1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _getTemp_AD                                           5     5      0     194
                                              4 BANK0      5     5      0
                              _getAD
 ---------------------------------------------------------------------------------
 (1) _getLoad_AD                                           8     8      0     399
                                              4 BANK0      8     8      0
                              _getAD
 ---------------------------------------------------------------------------------
 (2) _getAD                                                4     1      3     172
                                              0 BANK0      4     1      3
 ---------------------------------------------------------------------------------
 (1) _WDT_Main                                             1     1      0       0
                                              0 BANK0      1     1      0
                       _WDT_Clearing
 ---------------------------------------------------------------------------------
 (2) _WDT_Clearing                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Temp_Main                                            0     0      0    6636
                       _setTemp_Main
 ---------------------------------------------------------------------------------
 (2) _setTemp_Main                                         3     3      0    6636
                                             16 BANK0      3     3      0
                       _getLoad_Safe
             _setOverTemp_Exceptions
 ---------------------------------------------------------------------------------
 (3) _setOverTemp_Exceptions                               2     2      0    6636
                                             14 BANK0      2     2      0
            _DimmerLights_Exceptions
                             _setBuz
                             _setLED
                       _setRF_Enable
                       _setSw_Enable
 ---------------------------------------------------------------------------------
 (3) _getLoad_Safe                                         1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Temp_Initialization                                  0     0      0       0
             _setTemp_Initialization
 ---------------------------------------------------------------------------------
 (2) _setTemp_Initialization                               1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Switch_Main                                          0     0      0   20563
                         _setSw_Main
 ---------------------------------------------------------------------------------
 (2) _setSw_Main                                           5     5      0   20563
                                             69 BANK0      5     5      0
                      _SwPointSelect
                   _Sw_DimmerAdjFunc
                   _Sw_DimmerOffFunc
                    _Sw_DimmerOnFunc
                             _setBuz
                        _setRF_Learn
 ---------------------------------------------------------------------------------
 (3) _setRF_Learn                                          2     1      1     258
                                              2 BANK0      2     1      1
                      _RfPointSelect
 ---------------------------------------------------------------------------------
 (3) _Sw_DimmerOnFunc                                      2     2      0    9107
                                             66 BANK0      2     2      0
                             _setBuz
             _setDimmerLights_Switch
            _setDimmerLights_Trigger
                     _setRFSW_Status
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _Sw_DimmerOffFunc                                     3     3      0    8456
                                             66 BANK0      3     3      0
                     _setDelayOff_GO
              _setDimmerLights_AdjGo
             _setDimmerLights_Switch
            _setDimmerLights_Trigger
         _setDimmerLights_TriggerAdj
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _Sw_DimmerAdjFunc                                     2     2      0    1103
                                              4 BANK0      2     2      0
              _setDimmerLights_AdjGo
         _setDimmerLights_TriggerAdj
                     _setRFSW_Status
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_TriggerAdj                           2     1      1     216
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_AdjGo                                2     1      1     216
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (1) _Switch_Initialization                                0     0      0     780
                         _TouchPower
               _setSw_Initialization
 ---------------------------------------------------------------------------------
 (2) _setSw_Initialization                                 1     1      0     780
                                              4 BANK0      1     1      0
                             _setLED
 ---------------------------------------------------------------------------------
 (2) _TouchPower                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _RF_Main                                              0     0      0   29007
                         _setRF_Main
 ---------------------------------------------------------------------------------
 (2) _setRF_Main                                           3     3      0   29007
                                             73 BANK0      3     3      0
                      _CC2500_RxData
                      _CC2500_TxData
                _CC2500_WriteCommand
                       _RF_RxDisable
                      _RfPointSelect
                          _getRxData
 ---------------------------------------------------------------------------------
 (3) _getRxData                                            1     1      0   26864
                                             72 BANK0      1     1      0
                      _RfPointSelect
            _setControl_Lights_Table
                        _setLog_Code
 ---------------------------------------------------------------------------------
 (4) _setLog_Code                                          2     2      0    1459
                                             13 BANK0      2     2      0
                      _RfPointSelect
                             _setBuz
 ---------------------------------------------------------------------------------
 (4) _setControl_Lights_Table                              1     1      0   25361
                                             71 BANK0      1     1      0
                      _RfPointSelect
                             _setBuz
                    _setDimmerLights
                 _setRFSW_AdjControl
                    _setRFSW_Control
                     _setRFSW_Status
                       _setSw_Status
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setRFSW_Control                                      2     2      0   10065
                                             66 BANK0      2     2      0
                    _RfSWPointSelect
                             _setBuz
                     _setDelayOff_GO
             _setDimmerLights_Switch
            _setDimmerLights_Trigger
                 _setRF_DimmerLights
                       _setSw_Status
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setDelayOff_GO                                       5     3      2     871
                                              3 BANK0      5     3      2
                _DelayOffPointSelect
                     _DelayTimejudge
 ---------------------------------------------------------------------------------
 (5) _DelayTimejudge                                       3     3      0      51
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (5) _setRFSW_AdjControl                                   3     3      0   11355
                                             68 BANK0      3     3      0
                    _RfSWPointSelect
                  _setRF_DimmerValue
                          _setTxData
 ---------------------------------------------------------------------------------
 (6) _setRF_DimmerValue                                    3     3      0   11179
                                             65 BANK0      3     3      0
              _setDimmerLights_AdjRF
 ---------------------------------------------------------------------------------
 (7) _setDimmerLights_AdjRF                                2     2      0   11113
                                             63 BANK0      2     2      0
            _DimmerLightsPointSelect
                    _getPercentValue
 ---------------------------------------------------------------------------------
 (8) _getPercentValue                                      6     6      0   11047
                                             57 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___fttol
 ---------------------------------------------------------------------------------
 (9) ___ftmul                                             16    10      6    2502
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (9) ___ftadd                                             13     7      6    3118
                                             30 BANK0     13     7      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) _RF_RxDisable                                         1     1      0     112
                                              4 BANK0      1     1      0
                _CC2500_WriteCommand
                      _RfPointSelect
 ---------------------------------------------------------------------------------
 (3) _CC2500_TxData                                        2     2      0     160
                                              4 BANK0      2     2      0
                   _CC2500_WriteByte
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (3) _CC2500_RxData                                        3     3      0    1735
                                             13 BANK0      3     3      0
                    _CC2500_ReadByte
                  _CC2500_ReadStatus
                   _CC2500_WriteByte
                _CC2500_WriteCommand
                             _setBuz
 ---------------------------------------------------------------------------------
 (4) _CC2500_ReadStatus                                    2     2      0     114
                                              2 BANK0      2     2      0
                    _CC2500_ReadByte
                   _CC2500_WriteByte
 ---------------------------------------------------------------------------------
 (5) _CC2500_ReadByte                                      2     2      0      46
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _RF_Initialization                                    0     0      0       0
               _setRF_Initialization
 ---------------------------------------------------------------------------------
 (2) _setRF_Initialization                                 2     2      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Mcu_Initialization                                   1     1      0       0
                                              1 BANK0      1     1      0
                            _ADC_Set
                           _Fosc_Set
                            _INT_Set
                            _IOC_Set
                             _IO_Set
                           _TMR0_Set
                            _WDT_Set
 ---------------------------------------------------------------------------------
 (2) _WDT_Set                                              1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _TMR0_Set                                             1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _IO_Set                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IOC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INT_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Fosc_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Load_Main                                            5     5      0    6405
                                             16 BANK0      5     5      0
                            ___lwdiv
                             ___wmul
                       _getTemp_Safe
              _setDimmerLights_Clear
              _setLoad_AH_AL_Restore
                 _setLoad_Exceptions
 ---------------------------------------------------------------------------------
 (2) _setLoad_Exceptions                                   2     2      0    5243
                                             14 BANK0      2     2      0
            _DimmerLights_Exceptions
                             _setLED
                       _setRF_Enable
                       _setSw_Enable
 ---------------------------------------------------------------------------------
 (2) _setSw_Enable                                         1     1      0      88
                                              2 BANK0      1     1      0
                      _SwPointSelect
 ---------------------------------------------------------------------------------
 (2) _setRF_Enable                                         2     1      1     258
                                              2 BANK0      2     1      1
                      _RfPointSelect
 ---------------------------------------------------------------------------------
 (4) _DimmerLights_Exceptions                              1     1      0    3985
                                             13 BANK0      1     1      0
         _getDimmerLights_StatusFlag
                             _setBuz
              _setDimmerLights_ERROR
       _setDimmerLights_TriggerERROR
 ---------------------------------------------------------------------------------
 (5) _setDimmerLights_TriggerERROR                         2     1      1     282
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (5) _setDimmerLights_ERROR                                2     2      0    2174
                                              4 BANK0      2     2      0
            _DimmerLightsPointSelect
                             _setLED
                  _setLoad_StatusOff
                     _setRFSW_Status
                       _setSw_Status
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Clear                                2     1      1     344
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (2) _getTemp_Safe                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     220
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     418
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (1) _Load_Initialization                                  1     1      0      90
                                              2 BANK0      1     1      0
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _setLoad_AH_AL_Restore                                2     2      0      90
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _LED_Main                                             0     0      0     154
                        _setLED_Main
 ---------------------------------------------------------------------------------
 (2) _setLED_Main                                          3     3      0     154
                                              2 BANK0      3     3      0
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (1) _LED_Initialization                                   0     0      0     868
              _setLED_Initialization
 ---------------------------------------------------------------------------------
 (2) _setLED_Initialization                                1     1      0     868
                                              4 BANK0      1     1      0
                     _LedPointSelect
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Main                                    0     0      0     230
                _Flash_Memory_Modify
 ---------------------------------------------------------------------------------
 (2) _Flash_Memory_Modify                                  3     3      0     230
                                              4 BANK0      3     3      0
               _Flash_Memory_Erasing
                  _Flash_Memory_Read
                 _Flash_Memory_Write
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Erasing                                 0     0      0       0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Initialization                          2     2      0    5701
                                             61 BANK0      2     2      0
                  _Flash_Memory_Read
                 _Flash_Memory_Write
                    _setPercentValue
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Write                                   2     2      0      91
                                              0 BANK0      2     2      0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (4) _Flash_Memory_Unlock                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Read                                    4     4      0      48
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Main                                    0     0      0    9879
                 _DimmerLights_Close
               _setDimmerLights_Main
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Main                                 2     2      0    9743
                                             69 BANK0      2     2      0
            _DimmerLightsPointSelect
                             _setBuz
                    _setDimmerLights
                _setDimmerLights_Adj
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_Adj                                  3     2      1    6653
                                             66 BANK0      3     2      1
            _DimmerLightsPointSelect
                  _setLoad_StatusOff
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (6) _setLoad_StatusOff                                    2     1      1     254
                                              0 BANK0      2     1      1
 ---------------------------------------------------------------------------------
 (5) _setDimmerLights                                      3     2      1    1430
                                              4 BANK0      3     2      1
            _DimmerLightsPointSelect
                             _setLED
                      _setLoad_Count
                   _setLoad_StatusOn
                       _setMemory_GO
 ---------------------------------------------------------------------------------
 (6) _setLoad_StatusOn                                     2     1      1     152
                                              0 BANK0      2     1      1
 ---------------------------------------------------------------------------------
 (6) _setLoad_Count                                        2     2      0      44
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setLED                                               2     1      1     758
                                              2 BANK0      2     1      1
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (5) _LedPointSelect                                       2     2      0      66
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _DimmerLights_Close                                   0     0      0     136
         _getDimmerLights_StatusFlag
                         _setLoad_GO
                       _setMemory_GO
 ---------------------------------------------------------------------------------
 (6) _setMemory_GO                                         3     3      0      66
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _setLoad_GO                                           1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (5) _getDimmerLights_StatusFlag                           3     3      0      48
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Initialization                          1     1      0      66
                                              4 BANK0      1     1      0
              _Dimmer_Initialization
     _setDimmerLights_Initialization
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Initialization                       2     2      0      66
                                              2 BANK0      2     2      0
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (2) _Dimmer_Initialization                                1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Main                                        0     0      0    9576
                        _DlyOff_Main
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Main                                          3     3      0    9576
                                             66 BANK0      3     3      0
                _DelayOffPointSelect
                             _setBuz
             _setDimmerLights_Switch
            _setDimmerLights_Trigger
                     _setRFSW_Status
                 _setRF_DimmerLights
                       _setSw_Status
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setTxData                                            3     3      0      44
                                              2 BANK0      2     2      0
                      _RfPointSelect
 ---------------------------------------------------------------------------------
 (3) _RfPointSelect                                        2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (6) _setSw_Status                                         2     1      1     472
                                              2 BANK0      2     1      1
                      _SwPointSelect
 ---------------------------------------------------------------------------------
 (3) _SwPointSelect                                        2     2      0      44
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setRF_DimmerLights                                   5     4      1    6117
                                             61 BANK0      5     4      1
                    _setPercentValue
 ---------------------------------------------------------------------------------
 (5) _setPercentValue                                      4     4      0    5427
                                             57 BANK0      4     4      0
                           ___awtoft
                            ___ftdiv
                            ___fttol
 ---------------------------------------------------------------------------------
 (6) ___fttol                                             14    10      4     380
                                             43 BANK0     14    10      4
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (6) ___ftdiv                                             16    10      6    2712
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (6) ___awtoft                                             6     3      3    2267
                                              8 BANK0      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) ___ftpack                                             8     3      5    2048
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (6) _setRFSW_Status                                       2     1      1     536
                                              2 BANK0      2     1      1
                    _RfSWPointSelect
 ---------------------------------------------------------------------------------
 (7) _RfSWPointSelect                                      2     2      0      44
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_Trigger                              2     1      1     408
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_Switch                               2     1      1     408
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (6) _DimmerLightsPointSelect                              2     2      0      44
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _setBuz                                               4     2      2    1415
                                              9 BANK0      4     2      2
                            ___awdiv
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4     428
                                              0 BANK0      9     5      4
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Initialization                              0     0      0      66
              _DlyOff_Initialization
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Initialization                                1     1      0      66
                                              2 BANK0      1     1      0
                _DelayOffPointSelect
 ---------------------------------------------------------------------------------
 (5) _DelayOffPointSelect                                  2     2      0      44
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _CC2500_PowerOnInitial                                0     0      0    1677
                 _CC2500_ClearRXFIFO
                 _CC2500_ClearTXFIFO
               _CC2500_FrequencyCabr
                 _CC2500_InitPATable
                  _CC2500_InitSetREG
                    _CC2500_PowerRST
                   _CC2500_SIDLEMode
 ---------------------------------------------------------------------------------
 (2) _CC2500_SIDLEMode                                     0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (2) _CC2500_PowerRST                                      1     1      0     394
                                              6 BANK0      1     1      0
                   _CC2500_WriteByte
                      _DelayTime_1us
 ---------------------------------------------------------------------------------
 (2) _CC2500_InitSetREG                                    4     4      0     354
                                              5 BANK0      4     4      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (2) _CC2500_InitPATable                                   3     3      0     309
                                              5 BANK0      3     3      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (3) _CC2500_WriteREG                                      3     2      1     218
                                              2 BANK0      3     2      1
                   _CC2500_WriteByte
 ---------------------------------------------------------------------------------
 (2) _CC2500_FrequencyCabr                                 0     0      0     416
                _CC2500_WriteCommand
                      _DelayTime_1us
 ---------------------------------------------------------------------------------
 (3) _DelayTime_1us                                        6     4      2     348
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (2) _CC2500_ClearTXFIFO                                   0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (2) _CC2500_ClearRXFIFO                                   0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (4) _CC2500_WriteCommand                                  2     2      0      68
                                              2 BANK0      2     2      0
                   _CC2500_WriteByte
 ---------------------------------------------------------------------------------
 (5) _CC2500_WriteByte                                     2     2      0      46
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Main                                          4     4      0       0
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Initialization                                1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _ISR                                                 1     1      0     530
                                              7 COMMON     1     1      0
                            _INT_ISR
                            _IOC_ISR
                           _TMR0_ISR
 ---------------------------------------------------------------------------------
 (12) _TMR0_ISR                                            0     0      0     334
        _setDimmerLights_IntrControl
 ---------------------------------------------------------------------------------
 (13) _setDimmerLights_IntrControl                         5     5      0     334
                                              2 COMMON     5     5      0
              _DimmerIntrPointSelect
                i1_setLoad_StatusOff
 ---------------------------------------------------------------------------------
 (14) i1_setLoad_StatusOff                                 2     1      1     114
                                              0 COMMON     2     1      1
 ---------------------------------------------------------------------------------
 (14) _DimmerIntrPointSelect                               2     2      0      44
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (12) _IOC_ISR                                             0     0      0      66
                   _setDimmerReClock
 ---------------------------------------------------------------------------------
 (13) _setDimmerReClock                                    0     0      0      66
         _setDimmerLights_IntrIOC_GO
 ---------------------------------------------------------------------------------
 (14) _setDimmerLights_IntrIOC_GO                          1     1      0      66
                                              2 COMMON     1     1      0
           _DimmerIntrIOCPointSelect
 ---------------------------------------------------------------------------------
 (15) _DimmerIntrIOCPointSelect                            2     2      0      44
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (12) _INT_ISR                                             0     0      0     130
                    _setRF_ReceiveGO
 ---------------------------------------------------------------------------------
 (13) _setRF_ReceiveGO                                     2     1      1     130
                                              2 COMMON     2     1      1
                    i1_RfPointSelect
 ---------------------------------------------------------------------------------
 (14) i1_RfPointSelect                                     2     2      0      22
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 15
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Buzzer_Initialization
   _Buzzer_Main
   _CC2500_PowerOnInitial
     _CC2500_ClearRXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
     _CC2500_ClearTXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
     _CC2500_FrequencyCabr
       _CC2500_WriteCommand
         _CC2500_WriteByte
       _DelayTime_1us
     _CC2500_InitPATable
       _CC2500_WriteREG
         _CC2500_WriteByte
     _CC2500_InitSetREG
       _CC2500_WriteREG
         _CC2500_WriteByte
     _CC2500_PowerRST
       _CC2500_WriteByte
       _DelayTime_1us
     _CC2500_SIDLEMode
       _CC2500_WriteCommand
         _CC2500_WriteByte
   _DelayOff_Initialization
     _DlyOff_Initialization
       _DelayOffPointSelect
   _DelayOff_Main
     _DlyOff_Main
       _DelayOffPointSelect
       _setBuz
         ___awdiv
       _setDimmerLights_Switch
         _DimmerLightsPointSelect
       _setDimmerLights_Trigger
         _DimmerLightsPointSelect
       _setRFSW_Status
         _RfSWPointSelect
       _setRF_DimmerLights
         _setPercentValue
           ___awtoft
             ___ftpack
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
       _setSw_Status
         _SwPointSelect
       _setTxData
         _RfPointSelect
   _DimmerLights_Initialization
     _Dimmer_Initialization
     _setDimmerLights_Initialization
       _DimmerLightsPointSelect
   _DimmerLights_Main
     _DimmerLights_Close
       _getDimmerLights_StatusFlag
       _setLoad_GO
       _setMemory_GO
     _setDimmerLights_Main
       _DimmerLightsPointSelect
       _setBuz
         ___awdiv
       _setDimmerLights
         _DimmerLightsPointSelect
         _setLED
           _LedPointSelect
         _setLoad_Count
         _setLoad_StatusOn
         _setMemory_GO
       _setDimmerLights_Adj
         _DimmerLightsPointSelect
         _setLoad_StatusOff
         _setRF_DimmerLights
           _setPercentValue
             ___awtoft
               ___ftpack
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setTxData
           _RfPointSelect
   _Flash_Memory_Initialization
     _Flash_Memory_Read
     _Flash_Memory_Write
       _Flash_Memory_Unlock
     _setPercentValue
       ___awtoft
         ___ftpack
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
   _Flash_Memory_Main
     _Flash_Memory_Modify
       _Flash_Memory_Erasing
         _Flash_Memory_Unlock
       _Flash_Memory_Read
       _Flash_Memory_Write
         _Flash_Memory_Unlock
   _LED_Initialization
     _setLED_Initialization
       _LedPointSelect
       _setLED
         _LedPointSelect
   _LED_Main
     _setLED_Main
       _LedPointSelect
   _Load_Initialization
     _setLoad_AH_AL_Restore
   _Load_Main
     ___lwdiv
     ___wmul
     _getTemp_Safe
     _setDimmerLights_Clear
       _DimmerLightsPointSelect
     _setLoad_AH_AL_Restore
     _setLoad_Exceptions
       _DimmerLights_Exceptions
         _getDimmerLights_StatusFlag
         _setBuz
           ___awdiv
         _setDimmerLights_ERROR
           _DimmerLightsPointSelect
           _setLED
             _LedPointSelect
           _setLoad_StatusOff
           _setRFSW_Status
             _RfSWPointSelect
           _setSw_Status
             _SwPointSelect
         _setDimmerLights_TriggerERROR
           _DimmerLightsPointSelect
       _setLED
         _LedPointSelect
       _setRF_Enable
         _RfPointSelect
       _setSw_Enable
         _SwPointSelect
   _Mcu_Initialization
     _ADC_Set
     _Fosc_Set
     _INT_Set
     _IOC_Set
     _IO_Set
     _TMR0_Set
     _WDT_Set
   _RF_Initialization
     _setRF_Initialization
   _RF_Main
     _setRF_Main
       _CC2500_RxData
         _CC2500_ReadByte
         _CC2500_ReadStatus
           _CC2500_ReadByte
           _CC2500_WriteByte
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
         _setBuz
           ___awdiv
       _CC2500_TxData
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
       _CC2500_WriteCommand
         _CC2500_WriteByte
       _RF_RxDisable
         _CC2500_WriteCommand
           _CC2500_WriteByte
         _RfPointSelect
       _RfPointSelect
       _getRxData
         _RfPointSelect
         _setControl_Lights_Table
           _RfPointSelect
           _setBuz
             ___awdiv
           _setDimmerLights
             _DimmerLightsPointSelect
             _setLED
               _LedPointSelect
             _setLoad_Count
             _setLoad_StatusOn
             _setMemory_GO
           _setRFSW_AdjControl
             _RfSWPointSelect
             _setRF_DimmerValue
               _setDimmerLights_AdjRF
                 _DimmerLightsPointSelect
                 _getPercentValue
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
             _setTxData
               _RfPointSelect
           _setRFSW_Control
             _RfSWPointSelect
             _setBuz
               ___awdiv
             _setDelayOff_GO
               _DelayOffPointSelect
               _DelayTimejudge
             _setDimmerLights_Switch
               _DimmerLightsPointSelect
             _setDimmerLights_Trigger
               _DimmerLightsPointSelect
             _setRF_DimmerLights
               _setPercentValue
                 ___awtoft
                   ___ftpack
                 ___ftdiv
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
             _setSw_Status
               _SwPointSelect
             _setTxData
               _RfPointSelect
           _setRFSW_Status
             _RfSWPointSelect
           _setSw_Status
             _SwPointSelect
           _setTxData
             _RfPointSelect
         _setLog_Code
           _RfPointSelect
           _setBuz
             ___awdiv
   _Switch_Initialization
     _TouchPower
     _setSw_Initialization
       _setLED
         _LedPointSelect
   _Switch_Main
     _setSw_Main
       _SwPointSelect
       _Sw_DimmerAdjFunc
         _setDimmerLights_AdjGo
           _DimmerLightsPointSelect
         _setDimmerLights_TriggerAdj
           _DimmerLightsPointSelect
         _setRFSW_Status
           _RfSWPointSelect
       _Sw_DimmerOffFunc
         _setDelayOff_GO
           _DelayOffPointSelect
           _DelayTimejudge
         _setDimmerLights_AdjGo
           _DimmerLightsPointSelect
         _setDimmerLights_Switch
           _DimmerLightsPointSelect
         _setDimmerLights_Trigger
           _DimmerLightsPointSelect
         _setDimmerLights_TriggerAdj
           _DimmerLightsPointSelect
         _setRF_DimmerLights
           _setPercentValue
             ___awtoft
               ___ftpack
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setTxData
           _RfPointSelect
       _Sw_DimmerOnFunc
         _setBuz
           ___awdiv
         _setDimmerLights_Switch
           _DimmerLightsPointSelect
         _setDimmerLights_Trigger
           _DimmerLightsPointSelect
         _setRFSW_Status
           _RfSWPointSelect
         _setRF_DimmerLights
           _setPercentValue
             ___awtoft
               ___ftpack
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setTxData
           _RfPointSelect
       _setBuz
         ___awdiv
       _setRF_Learn
         _RfPointSelect
   _Temp_Initialization
     _setTemp_Initialization
   _Temp_Main
     _setTemp_Main
       _getLoad_Safe
       _setOverTemp_Exceptions
         _DimmerLights_Exceptions
           _getDimmerLights_StatusFlag
           _setBuz
             ___awdiv
           _setDimmerLights_ERROR
             _DimmerLightsPointSelect
             _setLED
               _LedPointSelect
             _setLoad_StatusOff
             _setRFSW_Status
               _RfSWPointSelect
             _setSw_Status
               _SwPointSelect
           _setDimmerLights_TriggerERROR
             _DimmerLightsPointSelect
         _setBuz
           ___awdiv
         _setLED
           _LedPointSelect
         _setRF_Enable
           _RfPointSelect
         _setSw_Enable
           _SwPointSelect
   _WDT_Main
     _WDT_Clearing
   _getLoad_AD
     _getAD
   _getTemp_AD
     _getAD
   _myMain_Initialization
   _my_Main
     _setBuz
       ___awdiv
     _setLoad_Enable
     _setRF_Enable
       _RfPointSelect
     _setSw_Enable
       _SwPointSelect
     _setTemp_Enable
   _my_TestPointCleared

 _ISR (ROOT)
   _INT_ISR
     _setRF_ReceiveGO
       i1_RfPointSelect
   _IOC_ISR
     _setDimmerReClock
       _setDimmerLights_IntrIOC_GO
         _DimmerIntrIOCPointSelect
   _TMR0_ISR
     _setDimmerLights_IntrControl
       _DimmerIntrPointSelect
       i1_setLoad_StatusOff

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       1       1        7.1%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      8       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     50      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      0      4F       7       98.8%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      44       9       85.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      42      11       82.5%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0      25      13       46.3%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0      47      15       88.8%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     19F      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     19F      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.32 build 58300 
Symbol Table                                                                                   Wed Oct 15 17:50:22 2014

                   __size_of_Switch_Main 0008                    ?_Flash_Memory_Erasing 0070  
                           _WDT_Clearing 0002             ??_setDimmerLights_TriggerAdj 0023  
                                     _RD 0CA8                                       _RF 00BF  
                __end_of_CC2500_WriteREG 18A1                                       _WR 0CA9  
                           ___awdiv@sign 0026                                       _Sw 007A  
     __end_of_getDimmerLights_StatusFlag 26EF               _getDimmerLights_StatusFlag 26DE  
                    ___wmul@multiplicand 0022                   __end_of_setDelayOff_GO 11C2  
                           ___ftadd@exp1 004A                             ___ftadd@exp2 0049  
              setDimmerLights_Adj@lights 0064                __end_of_setLoad_StatusOff 1C4C  
                   _setDimmerLights_Main 149B                             ___ftadd@sign 0048  
                                    l300 1E4C                                      l312 0BF2  
                                    l307 0BE0                                      l326 1C0F  
                                    l360 187D                                      l329 1C15  
                                    l371 1890                                      l291 1E1A  
                                    l359 187B                                      l383 2665  
                                    l296 1E44                                      l297 1E49  
                                    l395 1AC3                                      l389 1913  
                                    l930 12B7                                      l884 271C  
                                    _GIE 005F                                      _CRC 00B8  
                                    _RA0 0060                                      _RB0 0068  
   __size_of_DimmerLights_Initialization 0017                                      _RB1 0069  
                                    _RA3 0063                                      _RC0 0070  
                                    _RA4 0064                                      _LED 00BE  
                                    _RC1 0071                                      _RB3 006B  
                                    _RC2 0072                                      _RB4 006C  
                                    _RA6 0066                                      _RB5 006D  
                                    _RA7 0067                                      _RC4 0074  
                                    _RC5 0075                                      _RC7 0077  
                                    _RF1 00D3                                      _ISR 0004  
                                    _WDT 00EC                                      _Sw1 014A  
                                    _Sw2 0153                                      _Buz 00B7  
              setDimmerLights_Adj@status 0062                 __end_of_CC2500_WriteByte 1888  
         ??_setDimmerLights_TriggerERROR 0023                    _Buzzer_Initialization 258A  
                        __end_of_ADC_Set 2518                          ?_DelayTimejudge 0070  
                                    wreg 0009     setDimmerLights_Initialization@lights 0023  
                        _setDimmerLights 1776                    _setDimmerLights_ERROR 10B3  
                  _setDimmerLights_AdjRF 1A9C                    _setDimmerLights_AdjGo 269D  
                __size_of_setTemp_Enable 000D                    _setDimmerLights_Clear 268D  
                                   ?_ISR 0070                             ___ftdiv@cntr 0038  
                        __end_of_IOC_ISR 26DE                               Load_Main@i 0034  
                           ___ftdiv@sign 003D                                     l2063 1F53  
                                   l1442 2796                 ?_DimmerLightsPointSelect 0070  
                                   l3119 1983                                     l2514 1FAD  
                                   l2532 2781                                     l1468 1CDD  
                        __end_of_IOC_Set 25EC                                     l3309 0EB1  
                                   l3280 1253                                     l2546 1DBA  
                                   l3286 126A                                     l6014 1A41  
                                   l6102 0B31                                     l6030 0E41  
                                   l1856 1DF9                                     l7010 1CC1  
                                   l6026 0E3A                                     l6124 0B8B  
                                   l6116 0B72                                     l6060 0E90  
                                   l6036 0E50                                     l6222 176D  
                                   l6214 1753                                     l6206 1738  
                                   l6302 264A                                     l6054 0E7D  
                                   l6216 175C                                     l6208 1746  
                                   l6072 0EC3                                     l6056 0E87  
                                   l6048 0E6A                                     l6160 07B6  
                                   l6144 0773                                     l2928 24F9  
                                   l6218 175F                                     l6066 0EA3  
                                   l6058 0E8C                                     l6138 075D  
                                   l6250 1B69                                     l7114 1520  
                                   l7050 1F4A                                     l6244 27AE  
                                   l6316 2744                                     l6076 0ED5  
                                   l6068 0EAD                                     l6172 07D2  
                                   l6156 07AE                                     l6260 1B73  
                                   l6252 1B6B                                     l6334 1075  
                                   l6502 11E8                                     l6510 11F4  
                                   l7062 1A26                                     l6086 0EF0  
                                   l6254 1B6D                                     l7118 152D  
                                   l6360 10AC                                     l6352 109B  
                                   l6344 107D                                     l6328 106A  
                                   l6096 0B1B                                     l6408 13AC  
                                   l8104 1ED9                                     l6168 07CA  
                                   l6256 1B6F                                     l6264 1B78  
                                   l7152 1FD3                                     l6346 1089  
                                   l6602 26E8                                     l6290 1A64  
                                   l6522 1210                                     l6506 11EE  
                                   l6258 1B71                                     l6266 1B8C  
                                   l6450 11A8                                     l7090 103F  
                                   l7138 156F                                     l6356 10A4  
                                   l6380 09A9                                     l6188 1708  
                                   l8060 0F82                                     l8300 024C  
                                   l6700 1DA8                                     l6444 1195  
                                   l7148 1FC6                                     l8212 16E9  
                                   l8204 16BD                                     l6294 1A6F  
                                   l6518 120A                                     l6526 1216  
                                   l6542 1C72                                     l6470 1C41  
                                   l8310 0288                                     l6550 1CF1  
                                   l6454 11B4                                     l7078 1029  
                                   l7182 1476                                     l8150 09EE  
                                   l6376 0985                                     l8320 02AA  
                                   l6448 119B                                     l8160 0A27  
                                   l6538 1C67                                     l6626 17D4  
                                   l6466 1C37                                     l7442 14AF  
                                   l8250 00FC                                     l6492 11D8  
                                   l6740 12AF                                     l8316 029E  
                                   l8308 0285                                     l8244 00CE  
                                   l8228 0081                                     l6660 0832  
                                   l6820 0913                                     l8172 0A5E  
                                   l8156 0A1F                                     l8404 1309  
                                   l7454 14D4                                     l7446 14B9  
                                   l6734 1297                                     l8270 01AD  
                                   l6902 0C32                                     l6670 0856  
                                   l6814 08F8                                     l7710 0D4E  
                                   l6488 11D2                                     l6496 11DE  
                                   l8264 0191                                     l8272 01C5  
                                   l6904 0C4A                                     l6832 092E  
                                   l6824 091C                                     l7720 0D6A  
                                   l8184 1645                                     l8408 1318  
                                   l7466 1508                                     l7458 14E0  
                                   l6738 12AA                                     l8282 01FC  
                                   l6586 196D                                     l5980 1229  
                                   l7492 1D82                                     l6588 1973  
                                   l6916 0C63                                     l6676 086C  
                                   l6828 0925                                     l7732 0D93  
                                   l7804 04DB                                     l7644 0658  
                                   l6926 1AD4                                     l6854 1E2C  
                                   l7830 0520                                     l7814 04EB  
                                   l7806 04E1                                     l7646 0662  
                                   l6928 1ADF                                     l5984 1230  
                                   l7584 13DC                                     l7496 1D89  
                                   l7920 1D40                                     l7912 1D22  
                                   l8288 0215                                     l7760 0DD7  
                                   l7840 054D                                     l7816 04F3  
                                   l7680 0705                                     l5994 1258  
                                   l5986 123A                                     l7578 13C3  
                                   l7914 1D2E                                     l6890 0C23  
                                   l6866 0BB1                                     l6874 0BE3  
                                   l7746 0DB1                                     l5996 1260  
                                   l5988 123F                                     l6964 1E6D  
                                   l7588 1422                                     l7924 1D49  
                                   l7684 0711                                     l7668 06CD  
                  _myMain_Initialization 274D                                     l7950 0CE7  
                                   l7774 0DF4                                     l7854 0591  
                                   l7678 06FE                                     l7864 05C4  
                                   l7962 0D21                                     l7956 0D13  
                                   l7892 197D                                     l7958 0D19  
                                   _CFGS 0CAE                                     _FREE 0CAC  
                                   _LATA 010C                                     _LATB 010D  
                        __end_of_INT_ISR 258A                                     _LATC 010E  
                                   u4105 1271                                     u4035 1235  
                                   u4055 124E                                     u4225 0E6B  
                                   u4075 125B                                     u4315 0EA4  
                                   u4405 0B73                                     u4415 0B82  
                                   u4255 0E7E                                     u4425 0B8C  
                                   u4505 07BD                                     _PEIE 005E  
                                   u4605 1739                                     u4285 0E91  
                                   _INTE 005C                                     _INTF 0059  
                                   u4535 07D3                                     u4385 0B43  
                                   u4545 07D9                                     u4465 077F  
                                   u4395 0B53                                     u4635 1754  
                                   u4475 078F                                     u4575 170F  
                                   u7215 1D25                                     u4495 07B7  
                                   u4825 1080                                     u4930 135A  
                                   u7235 1D2F                                     u4845 108A  
                                   u7245 1D39                                     u4855 1094  
                                   u4935 1358                                     u7255 1D41  
                                   u7175 1984                                     u4865 109C  
                                   u7185 1989                                     u7285 0C9A  
                                   u5685 1AC9                                     u7605 1633  
                                   u7535 0A09                                     u7615 1661  
                                   u7635 168D                                     u7485 1EC0  
                                   u7725 0148                                     u7645 16D3  
                                   u7575 0A4A                                     u7775 01DD  
                                   _LWLO 0CAD                                     _RFSW 00C0  
                                   _TMR0 0015                          __end_of_INT_Set 2504  
                                   _RSSI 00C1                                     _WREN 0CAA  
                                   _Buz1 013E                                     __WDT 00E7  
                                   _Load 007B                                     _Temp 00C4  
                                   _main 12E5                             ___ftpack@arg 0020  
                    __end_of_DlyOff_Main 15FA                          __end_of_RF_Main 24F9  
                           ___ftpack@exp 0023                                     fsr0h 0005  
                                   fsr1h 0007                                     fsr0l 0004  
                                   indf0 0000                                     indf1 0001  
                                   fsr1l 0006      __size_of_setDimmerLights_TriggerAdj 0010  
                                   btemp 007E                          __end_of_WDT_Set 2800  
                                   ltemp 007E            __size_of_setRF_Initialization 0007  
                       _setDimmerReClock 2547                                     start 0016  
                                   ttemp 007E                                     wtemp 007E  
                    DelayTimejudge@value 0021                            _RfPointSelect 263F  
             __end_of_setRFSW_AdjControl 1DD0                             ___ftmul@cntr 003C  
                           ___ftmul@sign 003D             __size_of_Temp_Initialization 0003  
                                  ??_ISR 0077                             ___fttol@exp1 0058  
                           ___fttol@lval 0054           __size_of_DimmerIntrPointSelect 0012  
                       __end_of_LED_Main 25C6            __end_of_DimmerIntrPointSelect 2712  
                  ?_setDimmerLights_Main 0070                          ?_setDelayOff_GO 0023  
                  __end_of_setLoad_Count 0815                                    ?_main 006C  
              setControl_Lights_Table@rf 0067                          __end_of___awdiv 10B3  
                        __end_of___ftadd 0F08                          __end_of___ftdiv 0BAD  
                        __end_of___ftmul 07FA                          ___awdiv@divisor 0020  
                        __end_of___fttol 1776             setDimmerLights_AdjGo@command 0022  
                                  _IOCBF 0396                                    _IOCBN 0395  
                                  _IOCBP 0394                                    _IOCIE 005B  
                                  _IOCIF 0058                          __end_of___lwdiv 1D50  
                                  i1l832 272F                                    i1l841 2709  
                 _setDimmerLights_Switch 266D                          ___awdiv@counter 0025  
          __size_of_CC2500_FrequencyCabr 000C                                    _RFSW1 00E9  
                                  _RFSW2 00EA                                    _PORTA 000C  
                                  _PORTB 000D                                    _PORTC 000E  
                           ?_setLED_Main 0070                       setRF_Learn@command 0022  
                                  _TRISA 008C                                    _TRISB 008D  
                                  _TRISC 008E             __size_ofi1_setLoad_StatusOff 0030  
                                  _WPUB0 1068                                    _WPUB1 1069  
                                  _WPUB2 106A                            setRF_Learn@rf 0023  
                                  _Load1 02A0                            __CFG_WRT$HALF 0000  
                                  _Temp1 01B4       __end_of_setDimmerLights_IntrIOC_GO 19B7  
             _setDimmerLights_IntrIOC_GO 1998                         __end_of_TMR0_ISR 1CB1  
           __size_of_CC2500_WriteCommand 0010                         __end_of_TMR0_Set 25F9  
                                  _getAD 278C                            ___awtoft@sign 002D  
        __end_of_DimmerLights_Exceptions 12E5            DimmerLights_Exceptions@status 002D  
            DimmerIntrPointSelect@lights 0071                            ___ftpack@sign 0024  
                        __end_of_my_Main 16EF                           _setLoad_Enable 26BD  
            __size_of_CC2500_ClearRXFIFO 0004                            ??_Buzzer_Main 0020  
                       __end_of_WDT_Main 195D              __size_of_CC2500_ClearTXFIFO 0004  
                    CC2500_RxData@loop_f 002F                           __pbitbssCOMMON 03E0  
                    setMemory_GO@command 0022                           __CFG_BOREN$OFF 0000  
                     Flash_Memory_Read@i 0021                         ?_CC2500_ReadByte 0070  
                                  ltemp0 007E                                    ltemp1 0082  
                                  ltemp2 0086                                    ltemp3 0080  
         __size_of_setLED_Initialization 0011            __end_of_setLED_Initialization 2700  
                                  ttemp0 007E                                    ttemp1 0081  
                                  ttemp2 0084                                    ttemp3 0087  
                                  ttemp4 007F                             ?_setRF_Learn 0022  
                                  status 0003                                    wtemp0 007E  
                                  wtemp1 0080                                    wtemp2 0082  
                                  wtemp3 0084                                    wtemp4 0086  
                                  wtemp5 0088                                    wtemp6 007F  
                     _setRF_DimmerLights 1350              __size_of_Flash_Memory_Write 0033  
                      ?_CC2500_SIDLEMode 0070               __size_of_RF_Initialization 0004  
                         ?_RfPointSelect 0070                           setSw_Status@sw 0023  
               setLoad_StatusOff@command 0020         __size_of_DelayOff_Initialization 0008  
                 ?_setLoad_AH_AL_Restore 0070                setDimmerLights_Main@clear 0065  
                  setLoad_Enable@command 0020                   ??_Flash_Memory_Erasing 0020  
                        _getPercentValue 110A                       ??_CC2500_SIDLEMode 0024  
                        __initialization 0018                         ?_CC2500_PowerRST 0070  
                      ??_Sw_DimmerOnFunc 0062                     __end_of_getLoad_Safe 257E  
                      ??_setPercentValue 0059                             __end_of_main 1350  
                    ?_setRF_DimmerLights 005D                         __end_of_Fosc_Set 24F1  
                       ?_CC2500_WriteREG 0022                                ??_ADC_Set 0020  
                __end_of_setDimmerLights 1800                     _setSw_Initialization 2537  
             __size_of_setLoad_StatusOff 0031                                   ??_main 0070  
                          ___fttol@sign1 0053                             ?_setLog_Code 0070  
                _setControl_Lights_Table 08A5                   ?_Buzzer_Initialization 0070  
      __size_of_DimmerIntrIOCPointSelect 0014                  ??_DlyOff_Initialization 0022  
                             _Receive_OK 03E0                ?_DimmerIntrIOCPointSelect 0070  
                              ??_IOC_ISR 0073                   ?_setDimmerLights_ERROR 0070  
                              ??_IOC_Set 0020          __end_of_DimmerLightsPointSelect 2725  
                 ?_setDimmerLights_AdjRF 0070                                ??_INT_ISR 0074  
                 ?_setDimmerLights_AdjGo 0022                 __size_of_setRFSW_Control 0090  
                       ??_setRFSW_Status 0023                                ??_INT_Set 0020  
                 ?_setDimmerLights_Clear 0022                  ??_Switch_Initialization 0025  
                 __end_of_setLoad_Enable 26CD                     __end_of_getTemp_Safe 2537  
                      i1RfPointSelect@rf 0071                     ??_setRF_DimmerLights 005E  
                                 ?_getAD 0020                              _DlyOff_Main 1581  
                 ?_myMain_Initialization 0070                                   _ADCON0 009D  
                                 _ADCON1 009E                                ??_RF_Main 006C  
                                 _ADRESH 009C                                   _ADRESL 009B  
             i1setLoad_StatusOff@command 0070                         ___awdiv@dividend 0022  
                              ??_WDT_Set 0020                           setRF_Enable@rf 0023  
                       __end_of___awtoft 1A58                                   _ANSELA 018C  
                                 _ANSELB 018D                                   _ANSELC 018E  
                       __end_of___ftpack 1281                                   _IOCBF2 1CB2  
                _setDimmerLights_Trigger 267D                                   i1l7210 261D  
                                 i1l7202 1BE0                                   i1l7400 0498  
                                 i1l7322 035E                                   i1l7404 049E  
                                 i1l7340 03A8                                   i1l7342 03AE  
                                 i1l7318 0357                                   i1l7370 042F  
                                 i1l7354 03E3                                   i1l7362 040E  
                                 i1l7346 03C1                                   i1l7380 0461  
                                 i1l7348 03C7                                   i1l7198 1BD6  
                                 i1l7358 03FA                                   i1l7384 0467  
                                 i1l7368 0429                                   i1l7386 046D  
                                 _FVRCON 0117                                   _PMADRH 0192  
                                 _PMADRL 0191                                   _PMDATH 0194  
                                 _PMDATL 0193                                   _PMCON2 0196  
                                 _OSCCON 0099                                   u618_25 0332  
                     __size_of_Load_Main 02A5                                   u739_25 1CA2  
                                 _TMR0IE 005D                                   _TMR0IF 005A  
                                 _IO_Set 18A1                                   _WDTCON 0097  
                     DelayTime_1us@count 0020                    _Dimmer_Initialization 250A  
         __size_of_CC2500_PowerOnInitial 0015            __end_of_CC2500_PowerOnInitial 2776  
                                 _Dimmer 00BA                                   _DlySw1 00C9  
                                 _DlySw2 00CE              __size_of_setLoad_Exceptions 0043  
             __end_of_Mcu_Initialization 190A                      __end_of_Buzzer_Main 0D32  
                                 _Memory 00EE                                   _Timer0 00EB  
     __end_of_setDimmerLights_TriggerAdj 26BD               _setDimmerLights_TriggerAdj 26AD  
          setDimmerLights_Switch@command 0022                                   ___wmul 197A  
                              ??___awdiv 0024                                ??___ftadd 0044  
           __size_of_DelayOffPointSelect 0017                                ??___ftdiv 0034  
                  setDimmerLights@lights 0026                                ??___ftmul 0034  
                              ??___fttol 004F             ?_Flash_Memory_Initialization 0070  
                              ??___lwdiv 0024                          i1_RfPointSelect 2613  
            setDimmerLights_AdjRF@lights 0060                   ??_setDimmerLights_Main 0065  
                                 _r_data 00C7                                   _s_data 00C8  
                                 _setLED 11C2                                   _myMain 00ED  
                       _DimmerLightsIntr 0079                    ?_setSw_Initialization 0070  
                  setDimmerLights@status 0024                         ___awdiv@quotient 0027  
                                 _setBuz 0937                       __size_of_Temp_Main 0003  
            __end_of_Load_Initialization 25DF         ??_setDimmerLights_Initialization 0022  
        ?_setDimmerLights_Initialization 0070             __size_of_my_TestPointCleared 0012  
                  ___ftmul@f3_as_product 0039             ??_getDimmerLights_StatusFlag 0020  
                              ??_my_Main 002D      __end_of_setDimmerLights_IntrControl 04C4  
            _setDimmerLights_IntrControl 02F9                 Flash_Memory_Read@address 0022  
                      RfSWPointSelect@sw 0021                    __end_of_SwPointSelect 274D  
                        ?_setLoad_Enable 0070                            ?_setRF_Enable 0022  
                         _setTemp_Enable 2606                          _RfSWPointSelect 2776  
           __size_of_Flash_Memory_Modify 006E        setDimmerLights_IntrControl@lights 0076  
            __size_of_DimmerLights_Close 0018                  __size_of_LedPointSelect 0022  
                    Flash_Memory_Write@i 0021             __size_of_Flash_Memory_Unlock 0009  
                             _TouchPower 24F9                        ?_Sw_DimmerAdjFunc 0070  
            __size_of_CC2500_InitPATable 001F                      CC2500_TxData@loop_e 0025  
                __end_of_getPercentValue 1165         __end_of_CC2500_registers_address 182F  
                __end_of__initialization 0050                          ??_RfPointSelect 0020  
            setDimmerLights_AdjGo@lights 0023                                ?_LED_Main 0070  
                             ___ftadd@f1 003E                               ___ftadd@f2 0041  
                     ??_Sw_DimmerAdjFunc 0024                      setSw_Enable@command 0022  
                             ___ftdiv@f1 0031                               ___ftdiv@f2 002E  
                             ___ftdiv@f3 0039                        ?_Sw_DimmerOffFunc 0070  
                             ___awtoft@c 0028             ?_DimmerLights_Initialization 0070  
                             ___ftmul@f1 002E                               ___ftmul@f2 0031  
                             ___fttol@f1 004B                           __pcstackCOMMON 0070  
         DimmerIntrIOCPointSelect@lights 0071                       ??_Sw_DimmerOffFunc 0062  
                           __pidataBANK3 19F5                            __end_of_getAD 27A2  
                              ?_TMR0_ISR 0070                                ?_TMR0_Set 0070  
                 setLoad_AH_AL_Restore@i 0021             __size_of_setDimmerLights_Adj 0045  
                     _LED_Initialization 25AE                ??_setControl_Lights_Table 0067  
       __size_of_DimmerLights_Exceptions 0064                         ??_DelayTimejudge 0020  
            ?_getDimmerLights_StatusFlag 0070                __size_of_setLoad_StatusOn 0032  
          ??_Flash_Memory_Initialization 005D                 __size_of_setRF_ReceiveGO 001B  
                       ?_setDimmerLights 0024                                ?_WDT_Main 0070  
                      __end_of_Load_Main 02F9                 __end_of_setDimmerReClock 2552  
                     __size_of_getRxData 004D                      ?_LED_Initialization 0070  
                 __end_of_setTemp_Enable 2613                        ?_CC2500_WriteByte 0070  
                         ??_setRF_Enable 0023                           _DimmerLights11 00BB  
                         _DimmerLights22 00BC                     __size_of_setLED_Main 0040  
              ??_setDimmerLights_Trigger 0023                                  ??_getAD 0023  
                    _Temp_Initialization 24DB                       ??_CC2500_WriteByte 0020  
           setDimmerLights_Switch@lights 0023                               __pbssBANK1 00A0  
                             __pbssBANK2 0120                               __pbssBANK3 01A0  
                             __pbssBANK4 0220                               __pbssBANK5 02A0  
                              ?_Fosc_Set 0070                              _Buzzer_Main 0C6B  
                      ??_setRFSW_Control 0062                        __end_of_Temp_Main 24E1  
                 ?_Dimmer_Initialization 0070                                  ?_IO_Set 0070  
                             ??_LED_Main 0025                            ?_setMemory_GO 0070  
                        __CFG_VCAPEN$OFF 0000                  _DelayOff_Initialization 251F  
                             __pnvCOMMON 007D                    __size_of_getLoad_Safe 000B  
                          ??_Switch_Main 006A                           DelayTime_1us@i 0022  
                         DelayTime_1us@j 0024                     ??_LED_Initialization 0025  
                           _DimmerLights 0078                        LedPointSelect@led 0021  
                __end_ofi1_RfPointSelect 2621                      i1_setLoad_StatusOff 1BBB  
                 __size_of_DelayOff_Main 0008                     __size_of_setRF_Learn 000F  
                            setBuz@count 002C                               __pmaintext 12E5  
                    _CC2500_WriteCommand 265D                     ?_Temp_Initialization 0070  
       __size_of_DimmerLightsPointSelect 0013                         ??_setDelayOff_GO 0025  
          ??_DimmerLights_Initialization 0024                                  ?___wmul 0020  
                             ??_TMR0_ISR 0077                            ?_setTemp_Main 0070  
                             ??_TMR0_Set 0020                               _getLoad_AD 09CD  
                             __pintentry 0004                   ??_setSw_Initialization 0024  
                          ?_setSw_Enable 0070                       __size_of_setTxData 00A1  
                ?_setDimmerLights_Switch 0022                     Sw_DimmerAdjFunc@Idle 0024  
                                ?_setLED 0022                   __size_of_DelayTime_1us 0026  
                                _ADC_Set 2511                                  ?_setBuz 0029  
                              ?___awtoft 0028                                ?___ftpack 0020  
                             _getTemp_AD 15FA                               ??_WDT_Main 0020  
           __end_of_setRF_Initialization 251F                    __size_of_getTemp_Safe 0008  
                          ?_setSw_Status 0022                       _setRFSW_AdjControl 1D90  
                __end_of_RfSWPointSelect 278C                        Sw_DimmerOnFunc@sw 0063  
                   ?i1_setLoad_StatusOff 0070                                  _IOC_ISR 26CD  
                        ?_setTemp_Enable 0070                                  _IOC_Set 25DF  
                   __size_of_setLog_Code 0047                                  _INT_ISR 257E  
                                _INT_Set 24FE                     ?_CC2500_WriteCommand 0070  
                      _Flash_Memory_Main 1E9C                        _Flash_Memory_Read 18BA  
            ?_setDimmerLights_IntrIOC_GO 0070                   __size_of_CC2500_RxData 00BE  
                 __size_of_CC2500_TxData 0044                      ?_setRFSW_AdjControl 0070  
    setDimmerLights_TriggerERROR@command 0022                             _getLoad_Safe 2573  
                            setTxData@rf 0023                                  _RF_Data 00A0  
                                _RF_Main 24F5                       ?_Flash_Memory_Main 0070  
                     ?_Flash_Memory_Read 0070                                  _WDT_Set 27E8  
        __end_of_setControl_Lights_Table 0937                               ??_Fosc_Set 0020  
                            ?_TouchPower 0070                          _Sw_DimmerOnFunc 150E  
                        _setPercentValue 1EE1                  ??_setLoad_AH_AL_Restore 0020  
                          setLog_Code@rf 002E                           ??_setMemory_GO 0020  
                       ?_getPercentValue 0070                                  _Dimmer1 00E4  
           __end_of_CC2500_FrequencyCabr 25A2                          __size_of_IO_Set 0019  
                    ??_Flash_Memory_Main 0027                      ??_Flash_Memory_Read 0020  
                                _VarLED1 00DC                                  _VarLED2 00E0  
                      __end_of_getRxData 105F                 _CC2500_registers_address 1800  
       __end_of_DimmerIntrIOCPointSelect 2739                           RF_RxDisable@rf 0024  
                  ??_Temp_Initialization 0021          __end_of_setDimmerLights_Trigger 268D  
                   ??_setRFSW_AdjControl 0064                             _getTemp_Safe 252F  
                         ??_setTemp_Main 0030           __end_of_setDimmerLights_Switch 267D  
                                ___awdiv 105F                                  ___ftadd 0E12  
                         ??_setSw_Enable 0022                                  ___ftdiv 0B04  
                        __size_of___wmul 001E                                  ___ftmul 0746  
                                ___fttol 16EF                      __end_of_Switch_Main 2547  
                                ___lwdiv 1D19                  ??_Buzzer_Initialization 0020  
               ??_setOverTemp_Exceptions 002E                                  __myMain 01A0  
                             ??___awtoft 002B                               ??___ftpack 0025  
                        __size_of_setLED 005E                     setRFSW_AdjControl@sw 0066  
                ??_setDimmerLights_ERROR 0024                          __size_of_setBuz 0096  
                         ??_setSw_Status 0023                                  __ptext1 1000  
                                __ptext2 1673                                  __ptext3 2606  
                                __ptext4 26BD                                  __ptext5 274D  
                                __ptext6 15FA                                  __ptext7 09CD  
                                __ptext8 278C                                  __ptext9 1941  
                ??_setDimmerLights_AdjRF 005F                  ??_setDimmerLights_AdjGo 0023  
              __size_of_CC2500_SIDLEMode 0004                  ??_setDimmerLights_Clear 0023  
                    Sw_DimmerOnFunc@Idle 0062                    ??i1_setLoad_StatusOff 0071  
                  _DimmerIntrPointSelect 2700                             __size_of_ISR 0012  
              __end_of_Flash_Memory_Main 1EE1                __end_of_Flash_Memory_Read 18D4  
                             _setRF_Main 0D32                  ??_myMain_Initialization 0020  
                          _DelayOff_Main 2527                        _DimmerLights_Main 2568  
                                _my_Main 1673           __size_of_DlyOff_Initialization 000B  
                  ??_CC2500_WriteCommand 0022            __end_of_DlyOff_Initialization 255D  
                      ??_setRF_ReceiveGO 0073               __end_of_CC2500_ClearRXFIFO 24E5  
               ??_setTemp_Initialization 0020               __end_of_CC2500_ClearTXFIFO 24E9  
          DimmerLightsPointSelect@lights 0021                             ?_DlyOff_Main 0070  
                     ?_DimmerLights_Main 0070                                  _product 007D  
                         _LedPointSelect 1A58                      _DelayOffPointSelect 27A2  
                                clrloop0 07FB           __size_of_Switch_Initialization 000D  
          __end_of_Switch_Initialization 2606                     end_of_initialization 0050  
              ??_DelayOff_Initialization 0023                               _setLoad_GO 255D  
                      _CC2500_InitSetREG 1B0D                            _DelayTime_1us 1ABE  
                      __end_of_setTxData 0B04               __end_of_Flash_Memory_Write 1CE4  
                    _my_TestPointCleared 1000                                  init_ram 2504  
                     ?_CC2500_InitSetREG 0070                      ??_DimmerLights_Main 0067  
                   Flash_Memory_Read@ret 0023                                  initloop 2505  
                             _setSw_Main 04C4                    CC2500_ReadByte@loop_b 0021  
                      _CC2500_ReadStatus 190A                   __size_of_setLoad_Count 0015  
                   Flash_Memory_Modify@i 0026                    _setLED_Initialization 26EF  
                       ?i1_RfPointSelect 0070                       ?_CC2500_ReadStatus 0070  
                       setRFSW_Status@sw 0023                 __size_of_CC2500_ReadByte 001D  
                          _CC2500_RxData 0BAD                            _CC2500_TxData 1E13  
                    ??_CC2500_InitSetREG 0025                     __end_of_setRF_Enable 1B0D  
            ?_setDimmerLights_TriggerAdj 0022            __size_of_Flash_Memory_Erasing 000C  
                   ?_DelayOffPointSelect 0070                      _Flash_Memory_Modify 13BC  
                _DimmerLights_Exceptions 1281                              ?_getLoad_AD 0070  
                           __pstringtext 1800                      _Flash_Memory_Unlock 1866  
                    ??_CC2500_ReadStatus 0022                   setRF_Initialization@rf 0070  
                       _setLoad_StatusOn 1C4C         getDimmerLights_StatusFlag@Status 0021  
                CC2500_InitSetREG@loop_c 0028                              ?_getTemp_AD 0070  
                   ?_my_TestPointCleared 0070                setLoad_Exceptions@command 002F  
                    __size_of_TouchPower 0005                 setLED_Initialization@led 0024  
                 setSw_Initialization@sw 0024                __end_of_DimmerLights_Main 2573  
                     _Mcu_Initialization 18EF                         ??_setLoad_Enable 0020  
               __size_of_CC2500_PowerRST 0030                           ?_DelayOff_Main 0070  
                       ?_RfSWPointSelect 0070                          _setSw_Main$6260 0067  
                        _setSw_Main$6261 0068                         __CFG_FOSC$INTOSC 0000  
                 __end_of_LedPointSelect 1A7A                  __end_of_Sw_DimmerOnFunc 1581  
                __end_of_setPercentValue 1F27                 __size_of_CC2500_WriteREG 0019  
              __end_of_CC2500_InitSetREG 1B37                      ?_Mcu_Initialization 0070  
                   ?_Flash_Memory_Modify 0070              __size_of_setRF_DimmerLights 006C  
                         ?_DelayTime_1us 0020                      _setDimmerLights_Adj 1E57  
                   ?_Flash_Memory_Unlock 0070                __end_of_CC2500_ReadStatus 1925  
                          ?_RF_RxDisable 0070               __end_of_setLoad_Exceptions 1E13  
                            ___ftdiv@exp 003C                           __end_of_IO_Set 18BA  
                   _setRF_Initialization 2518                              _Switch_Main 253F  
            setDimmerLights_Clear@lights 0023                        __size_of_LED_Main 000C  
                         ?_CC2500_RxData 0070                           ?_CC2500_TxData 0070  
                _DimmerLightsPointSelect 2712                              ___ftmul@exp 0038  
                  _CC2500_PowerOnInitial 2761                     ??_Mcu_Initialization 0021  
                  ??_DelayOffPointSelect 0020                            ?_WDT_Clearing 0070  
                   ?_setDimmerLights_Adj 0062                __size_of_Sw_DimmerAdjFunc 004C  
                   setRF_DimmerLights@on 005D                 _DimmerIntrIOCPointSelect 2725  
                         __end_of___wmul 1998                    ??_my_TestPointCleared 0020  
                           setRF_Main@rf 006A                        __size_of_TMR0_ISR 0033  
        __size_of_setOverTemp_Exceptions 0046                   ?_DimmerIntrPointSelect 0070  
                      __size_of_TMR0_Set 000D                     __end_of_setMemory_GO 19F5  
          __size_of_setDimmerLights_Main 0073                           __end_of_setLED 1220  
                         __end_of_setBuz 09CD                            _setLoad_Count 0800  
        _getDimmerLights_StatusFlag$2316 0022                     _CC2500_FrequencyCabr 2596  
                setLoad_StatusOn@command 0020                __size_of_Sw_DimmerOffFunc 0071  
             __size_of_Flash_Memory_Main 0045               __size_of_Flash_Memory_Read 001A  
                            ?_setRF_Main 0070                          _setRFSW_Control 0815  
                      __size_of_WDT_Main 001C                        ?_setDimmerReClock 0070  
                    start_initialization 0018                        _setRF_DimmerValue 1CE4  
                        ?_LedPointSelect 0070               __end_of_DimmerLights_Close 27E8  
                              _Load_Main 0054                  setLoad_StatusOff@lights 0021  
                            __end_of_ISR 0016                    ??_Flash_Memory_Modify 0024  
           __size_of_Load_Initialization 000D                       ??_setDimmerReClock 0073  
                     ?_setRF_DimmerValue 0070               __end_of_CC2500_InitPATable 19D6  
        __size_of_setTemp_Initialization 000C                    ??_Flash_Memory_Unlock 0020  
                ??_Dimmer_Initialization 0020                     __end_of_setTemp_Main 0746  
                            ?_setLoad_GO 0070                           ??_RF_RxDisable 0024  
                   __end_of_setSw_Enable 1941                          RfPointSelect@rf 0021  
                    __size_of_getLoad_AD 0096                             ?_Buzzer_Main 0070  
                               ??_IO_Set 0020                                _VarErrLED 00D8  
                            ?_setSw_Main 0070                      ??_setRF_DimmerValue 0061  
                    __size_of_getTemp_AD 0079                   ?_setLED_Initialization 0070  
                   __end_of_setSw_Status 263F                       Sw_DimmerAdjFunc@sw 0025  
                  ?_setRF_Initialization 0070                        __size_of_Fosc_Set 0004  
              i1setLoad_StatusOff@lights 0071                                _VarMemory 0220  
                __size_of_setRFSW_Status 000F                    __end_of_RfPointSelect 264E  
              __size_of_CC2500_WriteByte 0019                                _VarTimer0 015C  
                              _Temp_Main 24DE                ??_DimmerLights_Exceptions 002D  
          setOverTemp_Exceptions@command 002F                           ??_WDT_Clearing 0020  
                              _Rx_Length 00C2                  setRF_DimmerValue@lights 0063  
                  ??_setDimmerLights_Adj 0063                                 ??___wmul 0024  
                 __size_of_SwPointSelect 0014                                _Tx_Length 00C5  
                            __pdataBANK3 01C2                                 ??_setLED 0023  
                       ??_setTemp_Enable 0020                                 ?_ADC_Set 0070  
                               ??_setBuz 002B                          ??_DelayOff_Main 0065  
                      ??_CC2500_ReadByte 0020                           ?_setLoad_Count 0070  
                       _CC2500_SIDLEMode 24E9               __size_of_DimmerLights_Main 000B  
              __end_of_setRF_DimmerValue 1D19                    ?_CC2500_FrequencyCabr 0070  
                          ??_setLED_Main 0022                        __size_of___awtoft 0022  
                      __size_of___ftpack 0061                                 ?_IOC_ISR 0070  
                        _setRF_Main$5264 006B                              __pbssCOMMON 0078  
                               ?_IOC_Set 0070                                ___latbits 0003  
                             ?_Load_Main 0070                    setTemp_Enable@command 0020  
                               ?_INT_ISR 0070                      setRF_Enable@command 0022  
                       ?_Sw_DimmerOnFunc 0070                            __pcstackBANK0 0020  
                               ?_INT_Set 0070                         ?_setPercentValue 0070  
                        ??_DelayTime_1us 0022               __size_of_CC2500_InitSetREG 002A  
               __size_of_setDimmerLights 008A                            DlyOff_Main@sw 0064  
                      ??_CC2500_PowerRST 0026                                 ?_RF_Main 0070  
                               ?_WDT_Set 0070             setDimmerLights_Clear@command 0022  
                           ??_TouchPower 0020                     __size_of_DlyOff_Main 0079  
             __size_of_CC2500_ReadStatus 001B                   _setOverTemp_Exceptions 1F27  
                          ??_setRF_Learn 0023                        ??_CC2500_WriteREG 0023  
                          _DimmerLights1 0120                            _DimmerLights2 012F  
                  CC2500_WriteREG@w_addr 0024                    setDelayOff_GO@command 0023  
              ??_DimmerLightsPointSelect 0020           __size_of_setLoad_AH_AL_Restore 0022  
                  __size_of_setRF_Enable 0029                          ??_CC2500_RxData 002D  
          __end_of_setLoad_AH_AL_Restore 1A9C                          ??_CC2500_TxData 0024  
                              __pnvBANK1 00EB              __size_of_LED_Initialization 000C  
                 ?_CC2500_PowerOnInitial 0070                               ?_Temp_Main 0070  
                    __size_of_setRF_Main 00E0                         ___lwdiv@dividend 0022  
                  DelayOffPointSelect@sw 0021                               setBuz@time 0029  
                    setDelayOff_GO@value 0024                 ?_setControl_Lights_Table 0070  
                 _setTemp_Initialization 25C6      __end_of_Flash_Memory_Initialization 1000  
            _Flash_Memory_Initialization 0F08                                 ?___awdiv 0020  
                              __ptext100 263F                                __ptext101 2630  
                              __ptext110 2776                                __ptext102 2739  
                              __ptext111 267D                                __ptext103 1350  
                              __ptext120 24E9                                __ptext112 266D  
                              __ptext104 1EE1                                __ptext121 1BEB  
                              __ptext113 2712                                __ptext105 16EF  
                              __ptext130 186F                                __ptext122 1B0D  
                              __ptext114 0937                                __ptext106 0B04  
                              __ptext131 0C6B                                __ptext123 19B7  
                              __ptext115 105F                                __ptext107 1A36  
                              __ptext140 1998                                __ptext132 258A  
                              __ptext124 1888                                __ptext116 251F  
                              __ptext108 1220                                __ptext141 2725  
                              __ptext125 2596                                __ptext117 2552  
                              __ptext109 2621                                 ?___ftadd 003E  
                              __ptext142 257E                                __ptext134 1C7E  
                              __ptext126 1ABE                                __ptext118 27A2  
                              __ptext143 18D4                                __ptext135 02F9  
                              __ptext127 24E5                                __ptext119 2761  
                              __ptext144 2613                                __ptext136 1BBB  
                              __ptext128 24E1                                __ptext137 2700  
                              __ptext129 265D                                __ptext138 26CD  
                              __ptext139 2547                                _getRxData 1012  
                               ?___ftdiv 002E                                 ?___ftmul 002E  
                               ?___fttol 004B                                 ?___lwdiv 0020  
                __end_of_setRFSW_Control 08A5                          _setRF_ReceiveGO 18D4  
                    __size_of_setLoad_GO 000B            __size_of_setSw_Initialization 0008  
         __size_of_Buzzer_Initialization 000C            __end_of_Buzzer_Initialization 2596  
                       getPercentValue@i 005C                         setPercentValue@i 005A  
                          ??_setLog_Code 002D                       __end_of_TouchPower 24FE  
     setDimmerLights_TriggerERROR@lights 0023           __size_of_setDimmerLights_ERROR 0057  
               ?_setDimmerLights_Trigger 0022                          DelayTimejudge@i 0022  
                    __size_of_setSw_Main 0155            __end_of_setDimmerLights_ERROR 110A  
           CC2500_ReadStatus@status_addr 0023           __size_of_setDimmerLights_AdjRF 0022  
         __size_of_setDimmerLights_AdjGo 0010            __end_of_setDimmerLights_AdjRF 1ABE  
          __end_of_setDimmerLights_AdjGo 26AD                   CC2500_WriteByte@loop_a 0021  
         __size_of_setDimmerLights_Clear 0010                                 ?_my_Main 0070  
          __end_of_setDimmerLights_Clear 269D                                _r_address 00C6  
         __size_of_myMain_Initialization 0014             __end_of_CC2500_patable_vaule 1866  
          __end_of_myMain_Initialization 2761                         __CFG_WDTE$SWDTEN 0000  
                         __size_of_getAD 0016                             _setRF_Enable 1AE4  
                       ___lwdiv@quotient 0025                  __size_of_DelayTimejudge 002C  
                          _SwPointSelect 2739                       Sw_DimmerOffFunc@sw 0064  
                    __end_of_setLED_Main 1D90                      _DimmerLightsIntrIOC 00BD  
               __end_of_setLoad_StatusOn 1C7E                   ??_setRF_Initialization 0020  
            __end_of_Temp_Initialization 24DE                        _CC2500_rfSettings 182F  
                         ___wmul@product 0024                                 _LED_Main 25BA  
                        SwPointSelect@sw 0021                                clear_ram0 07FA  
               CC2500_InitPATable@loop_d 0027                                _setTxData 0A63  
    __end_of_DimmerLights_Initialization 27D0              _DimmerLights_Initialization 27B9  
                     _CC2500_ClearRXFIFO 24E1                       _CC2500_ClearTXFIFO 24E5  
         setDimmerLights_Trigger@command 0022                 setRF_DimmerLights@lights 0061  
                               _GO_nDONE 04E9                      __end_of_setRF_Learn 265D  
               __size_of_getPercentValue 005B                 setRF_DimmerLights@status 0060  
                 setRF_ReceiveGO@command 0072              __size_of_setRFSW_AdjControl 0040  
                  __size_of_setMemory_GO 001F                       _Flash_Memory_Write 1CB1  
                             ?_getRxData 0070                                 _TMR0_ISR 1C7E  
                           ??_getLoad_AD 0024                   CC2500_InitSetREG@temp1 0026  
                 CC2500_InitSetREG@temp2 0027              __end_ofi1_setLoad_StatusOff 1BEB  
                      setRF_ReceiveGO@rf 0073                                 _TMR0_Set 25EC  
                       _Sw_DimmerAdjFunc 1FB4                      ?_CC2500_ClearRXFIFO 0070  
                    ?_CC2500_ClearTXFIFO 0070                          ??_setLoad_Count 0020  
      setDimmerLights_TriggerAdj@command 0022                                 _RF_Count 00B5  
                   __end_of_RF_RxDisable 1A36                             ??_getTemp_AD 0024  
            __end_of_CC2500_WriteCommand 266D                   ??_CC2500_FrequencyCabr 0026  
                               _WDT_Main 1941                  DlyOff_Initialization@sw 0022  
                       __size_of_ADC_Set 0007                        ___wmul@multiplier 0020  
             __size_of_setRF_DimmerValue 0035                      ?_Flash_Memory_Write 0070  
                       _Sw_DimmerOffFunc 142A                    __size_of_setTemp_Main 012D  
                __size_of_setDelayOff_GO 005D                    __size_of_setSw_Enable 001C  
                               _DelayOff 00B9                             setSw_Main@sw 0069  
       setDimmerLights_IntrIOC_GO@lights 0072                              ??_Load_Main 0030  
                       __size_of_IOC_ISR 0011             ?_setDimmerLights_IntrControl 0070  
                       __size_of_IOC_Set 000D             __end_of_Flash_Memory_Erasing 25AE  
                         ?_SwPointSelect 0070                              getAD@adcon0 0023  
                            getAD@adcon1 0020                         __size_of_INT_ISR 000C  
                         setLED_Main@led 0024                     __end_of_WDT_Clearing 0004  
                       __size_of_INT_Set 0006                      __end_of_setLog_Code 1FB4  
                  _DlyOff_Initialization 2552                    __size_of_setSw_Status 000F  
                   ??_CC2500_ClearRXFIFO 0024                     ??_CC2500_ClearTXFIFO 0024  
              __end_of_CC2500_rfSettings 185E                         __size_of_RF_Main 0004  
                               _Fosc_Set 24ED                         __size_of_WDT_Set 0018  
                 setLoad_StatusOn@lights 0021                       __end_of_getLoad_AD 0A63  
                  _Switch_Initialization 25F9                     ??_Flash_Memory_Write 0020  
                      ??_setDimmerLights 0025                           _setRFSW_Status 2621  
                           _setMemory_GO 19D6                     __size_of_Buzzer_Main 00C7  
                     __end_of_getTemp_AD 1673                               ?_setTxData 0070  
                           ?_Switch_Main 0070               ??_DimmerIntrIOCPointSelect 0070  
                       _CC2500_WriteByte 186F                        getLoad_AD@channel 0029  
           Flash_Memory_Initialization@i 005E                  __end_of_setRF_ReceiveGO 18EF  
                            ??_Temp_Main 0033                        setRFSW_Control@sw 0063  
                    _Load_Initialization 25D2                                setLED@led 0023  
   __end_of_setDimmerLights_TriggerERROR 1B62    __size_of_setDimmerLights_TriggerERROR 002B  
           _setDimmerLights_TriggerERROR 1B37                  ??_DimmerIntrPointSelect 0070  
                           _setTemp_Main 0619                       _setLoad_Exceptions 1DD0  
                       __size_of___awdiv 0054                         __size_of___ftadd 00F6  
                       ?_setRFSW_Control 0070                         __size_of___ftdiv 00A9  
                           _setSw_Enable 1925                         __size_of___ftmul 00B4  
                       __size_of___fttol 0087                         __size_of___lwdiv 0037  
               __size_ofi1_RfPointSelect 000E                                 ___awtoft 1A36  
                       ??_LedPointSelect 0020                                 ___ftpack 1220  
                           _setSw_Status 2630                        getTemp_AD@channel 0028  
                           ??_setRF_Main 0069                     CC2500_WriteREG@value 0022  
                            _setLED_Main 1D50                      ?_setLoad_Exceptions 0070  
                  setRFSW_Status@command 0022               __end_of_setRF_DimmerLights 13BC  
               ?_DelayOff_Initialization 0070                         setDelayOff_GO@sw 0027  
                        ___lwdiv@divisor 0020                         __size_of_my_Main 007C  
                   ?_Load_Initialization 0070                          ___lwdiv@counter 0027  
                               __ptext10 0002                                 __ptext11 24DE  
                               __ptext20 150E                                 __ptext12 0619  
                               __ptext21 142A                                 __ptext13 1F27  
                               __ptext30 1012                                 __ptext22 1FB4  
                               __ptext14 2573                                 __ptext31 1F6D  
                               __ptext23 26AD                                 __ptext15 24DB  
                               __ptext40 0746                                 __ptext32 08A5  
                               __ptext24 269D                                 __ptext16 25C6  
                               __ptext41 0E12                                 __ptext33 0815  
                               __ptext25 25F9                                 __ptext17 253F  
                               __ptext50 27E8                                 __ptext42 1A15  
                               __ptext34 1165                                 __ptext26 2537  
                               __ptext18 04C4                                 __ptext51 25EC  
                               __ptext43 1E13                                 __ptext35 1B62  
                               __ptext27 24F9                                 __ptext19 264E  
                               __ptext60 1AE4                                 __ptext52 18A1  
                               __ptext44 0BAD                                 __ptext36 1D90  
                               __ptext28 24F5                                 __ptext61 1281  
                               __ptext53 25DF                                 __ptext45 190A  
                               __ptext37 1CE4                                 __ptext29 0D32  
                               __ptext70 25BA                                 __ptext62 1B37  
                               __ptext54 24FE                                 __ptext46 195D  
                               __ptext38 1A9C                                 __ptext71 1D50  
                               __ptext63 10B3                                 __ptext55 24ED  
                               __ptext47 24F1                                 __ptext39 110A  
                               __ptext80 18BA                                 __ptext72 25AE  
                               __ptext64 268D                                 __ptext56 2511  
                               __ptext48 2518                                 __ptext81 2568  
                               __ptext73 26EF                                 __ptext65 252F  
                               __ptext57 0054                                 __ptext49 18EF  
                               __ptext90 27D0                                 __ptext82 149B  
                               __ptext74 1E9C                                 __ptext66 197A  
                               __ptext58 1DD0                                 __ptext91 19D6  
                               __ptext83 1E57                                 __ptext75 13BC  
                               __ptext67 1D19                                 __ptext59 1925  
                               __ptext92 255D                                 __ptext84 1C1B  
                               __ptext76 25A2                                 __ptext68 25D2  
                               __ptext93 26DE                                 __ptext85 1776  
                               __ptext77 0F08                                 __ptext69 1A7A  
                               __ptext94 27B9                                 __ptext86 1C4C  
                               __ptext78 1CB1                                 __ptext95 1B8E  
                               __ptext87 0800                                 __ptext79 1866  
                               __ptext96 250A                                 __ptext88 11C2  
                               __ptext97 2527                                 __ptext89 1A58  
                               __ptext98 1581                                 __ptext99 0A63  
                               __product 01C2            ??_setDimmerLights_IntrControl 0072  
                           ??_setLoad_GO 0020                  ??_setLED_Initialization 0024  
               __size_of_RfSWPointSelect 0016           __size_of_Dimmer_Initialization 0007  
                 __end_of_setRFSW_Status 2630            __end_of_Dimmer_Initialization 2511  
           __end_of_setDimmerLights_Main 150E              setDimmerLights_ERROR@lights 0025  
                           ??_setSw_Main 0065                            setLED@command 0022  
                          __size_of_main 006B                              _setRF_Learn 264E  
               __end_of_CC2500_SIDLEMode 24ED               setDimmerLights_Main@lights 0066  
            __end_of_DelayOffPointSelect 27B9               CC2500_WriteCommand@command 0023  
                     _DimmerLights_Close 27D0                 ??_setDimmerLights_Switch 0023  
              __size_of_setDimmerReClock 000B                     ??_setLoad_Exceptions 002E  
                        _CC2500_ReadByte 195D                       _CC2500_InitPATable 19B7  
    __size_of_getDimmerLights_StatusFlag 0011              __end_of_my_TestPointCleared 1012  
          setDimmerLights_Trigger@lights 0023                       __end_of_setRF_Main 0E12  
            __size_of_Mcu_Initialization 001B                     _CC2500_patable_vaule 185E  
                            ??_getRxData 0068                      ?_DimmerLights_Close 0070  
       setDimmerLights_TriggerAdj@lights 0023                                 main@argc 006C  
          ?_setDimmerLights_TriggerERROR 0022                                 main@argv 006E  
                    ?_CC2500_InitPATable 0070                          _CC2500_PowerRST 1BEB  
                     __end_of_setLoad_GO 2568              __end_of_Flash_Memory_Modify 142A  
                      ??_getPercentValue 0059                              _setLog_Code 1F6D  
            __end_of_Flash_Memory_Unlock 186F                          ??_SwPointSelect 0020  
                        _CC2500_WriteREG 1888                       __end_of_setSw_Main 0619  
                      setLoad_GO@command 0020                    ??_Load_Initialization 0022  
                          _Transceive_OK 03E1                     setLoad_Count@command 0021  
                 ?_DlyOff_Initialization 0070                  ?_setOverTemp_Exceptions 0070  
                         _DelayTimejudge 1B62                            ?_getLoad_Safe 0070  
                            pic14e$flags 007E                     ??_DimmerLights_Close 0023  
           ??_setDimmerLights_IntrIOC_GO 0072                                 intlevel1 0000  
                   ??_CC2500_InitPATable 0025                  __size_of_setLoad_Enable 0010  
                 ?_Switch_Initialization 0070                          ?_setRFSW_Status 0022  
                ??_CC2500_PowerOnInitial 0029   __end_of_setDimmerLights_Initialization 1BBB  
__size_of_setDimmerLights_Initialization 002D           _setDimmerLights_Initialization 1B8E  
            __end_of_setDimmerLights_Adj 1E9C                  ?_setTemp_Initialization 0070  
                            ??_setTxData 0022                         ?_setRF_ReceiveGO 0072  
                 CC2500_InitPATable@temp 0026                    __size_of_RF_RxDisable 0021  
                      _RF_Initialization 24F1     __size_of_setDimmerLights_IntrControl 01CB  
                            getLoad_AD@i 002B                              getLoad_AD@j 002A  
                          ?_getTemp_Safe 0070                     _Flash_Memory_Erasing 25A2  
                     ?_RF_Initialization 0070                               _SPI0Buffer 00C3  
        __end_of_DelayOff_Initialization 2527      __size_of_setDimmerLights_IntrIOC_GO 001F  
                             _OPTION_REG 0095                    __size_of_WDT_Clearing 0002  
                  __end_of_DelayOff_Main 252F                      ??_RF_Initialization 0021  
                            getRxData@rf 0068                           _setDelayOff_GO 1165  
       __size_of_setControl_Lights_Table 0092                        _setLoad_StatusOff 1C1B  
                 __end_of_DelayTimejudge 1B8E           __end_of_setOverTemp_Exceptions 1F6D  
                 __size_of_RfPointSelect 000F                        ??i1_RfPointSelect 0070  
                         ??_getLoad_Safe 0020     __size_of_Flash_Memory_Initialization 00F8  
                          ??_DlyOff_Main 0062                       ?_setLoad_StatusOff 0020  
                  __end_of_DelayTime_1us 1AE4                 __end_of_Sw_DimmerAdjFunc 2000  
                __end_of_CC2500_ReadByte 197A             __end_of_setSw_Initialization 253F  
                   getPercentValue@value 005B                             _RF_RxDisable 1A15  
             __end_of_LED_Initialization 25BA         __size_of_setDimmerLights_Trigger 0010  
                      ?_setLoad_StatusOn 0020           __end_of_setTemp_Initialization 25D2  
               __size_of_Sw_DimmerOnFunc 0073                      ??_setLoad_StatusOff 0021  
               ?_DimmerLights_Exceptions 0070                 __size_of_setPercentValue 0046  
                   setPercentValue@value 0059                __end_of_RF_Initialization 24F5  
               __end_of_Sw_DimmerOffFunc 149B                       ??_setLoad_StatusOn 0021  
        __size_of_setDimmerLights_Switch 0010                        ??_RfSWPointSelect 0020  
                  __end_of_CC2500_RxData 0C6B                    __end_of_CC2500_TxData 1E57  
                         ??_getTemp_Safe 0020                    _setLoad_AH_AL_Restore 1A7A  
                    setSw_Status@command 0022                  __end_of_CC2500_PowerRST 1C1B  
