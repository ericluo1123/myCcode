

Microchip Technology PIC LITE Macro Assembler V1.32 build 58300 
                                                                                               Mon Oct 13 17:03:33 2014

Microchip Technology Omniscient Code Generator (Lite mode) build 58300
     1                           	processor	16F1518
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK3,global,class=CODE,delta=2
     5                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     6                           	psect	nvCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1
     8                           	psect	cinit,global,class=CODE,merge=1,delta=2
     9                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
    10                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    13                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    14                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1
    15                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    16                           	psect	clrtext,global,class=CODE,delta=2
    17                           	psect	inittext,global,class=CODE,delta=2
    18                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    19                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    20                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    21                           	psect	text1,local,class=CODE,merge=1,delta=2
    22                           	psect	text2,local,class=CODE,merge=1,delta=2
    23                           	psect	text3,local,class=CODE,merge=1,delta=2
    24                           	psect	text4,local,class=CODE,merge=1,delta=2
    25                           	psect	text5,local,class=CODE,merge=1,delta=2
    26                           	psect	text6,local,class=CODE,merge=1,delta=2
    27                           	psect	text7,local,class=CODE,merge=1,delta=2
    28                           	psect	text8,local,class=CODE,merge=1,delta=2
    29                           	psect	text9,local,class=CODE,merge=1,delta=2
    30                           	psect	text10,local,class=CODE,merge=1,delta=2
    31                           	psect	text11,local,class=CODE,merge=1,delta=2
    32                           	psect	text12,local,class=CODE,merge=1,delta=2
    33                           	psect	text13,local,class=CODE,merge=1,delta=2
    34                           	psect	text14,local,class=CODE,merge=1,delta=2
    35                           	psect	text15,local,class=CODE,merge=1,delta=2
    36                           	psect	text16,local,class=CODE,merge=1,delta=2
    37                           	psect	text17,local,class=CODE,merge=1,delta=2
    38                           	psect	text18,local,class=CODE,merge=1,delta=2
    39                           	psect	text19,local,class=CODE,merge=1,delta=2
    40                           	psect	text20,local,class=CODE,merge=1,delta=2
    41                           	psect	text21,local,class=CODE,merge=1,delta=2
    42                           	psect	text22,local,class=CODE,merge=1,delta=2
    43                           	psect	text23,local,class=CODE,merge=1,delta=2
    44                           	psect	text24,local,class=CODE,merge=1,delta=2
    45                           	psect	text25,local,class=CODE,merge=1,delta=2
    46                           	psect	text26,local,class=CODE,merge=1,delta=2
    47                           	psect	text27,local,class=CODE,merge=1,delta=2
    48                           	psect	text28,local,class=CODE,merge=1,delta=2
    49                           	psect	text29,local,class=CODE,merge=1,delta=2
    50                           	psect	text30,local,class=CODE,merge=1,delta=2
    51                           	psect	text31,local,class=CODE,merge=1,delta=2
    52                           	psect	text32,local,class=CODE,merge=1,delta=2
    53                           	psect	text33,local,class=CODE,merge=1,delta=2
    54                           	psect	text34,local,class=CODE,merge=1,delta=2
    55                           	psect	text35,local,class=CODE,merge=1,delta=2
    56                           	psect	text36,local,class=CODE,merge=1,delta=2
    57                           	psect	text37,local,class=CODE,merge=1,delta=2
    58                           	psect	text38,local,class=CODE,merge=1,delta=2
    59                           	psect	text39,local,class=CODE,merge=1,delta=2
    60                           	psect	text40,local,class=CODE,merge=1,delta=2
    61                           	psect	text41,local,class=CODE,merge=1,delta=2
    62                           	psect	text42,local,class=CODE,merge=1,delta=2
    63                           	psect	text43,local,class=CODE,merge=1,delta=2
    64                           	psect	text44,local,class=CODE,merge=1,delta=2
    65                           	psect	text45,local,class=CODE,merge=1,delta=2
    66                           	psect	text46,local,class=CODE,merge=1,delta=2
    67                           	psect	text47,local,class=CODE,merge=1,delta=2
    68                           	psect	text48,local,class=CODE,merge=1,delta=2
    69                           	psect	text49,local,class=CODE,merge=1,delta=2
    70                           	psect	text50,local,class=CODE,merge=1,delta=2
    71                           	psect	text51,local,class=CODE,merge=1,delta=2
    72                           	psect	text52,local,class=CODE,merge=1,delta=2
    73                           	psect	text53,local,class=CODE,merge=1,delta=2
    74                           	psect	text54,local,class=CODE,merge=1,delta=2
    75                           	psect	text55,local,class=CODE,merge=1,delta=2
    76                           	psect	text56,local,class=CODE,merge=1,delta=2
    77                           	psect	text57,local,class=CODE,merge=1,delta=2
    78                           	psect	text58,local,class=CODE,merge=1,delta=2
    79                           	psect	text59,local,class=CODE,merge=1,delta=2
    80                           	psect	text60,local,class=CODE,merge=1,delta=2
    81                           	psect	text61,local,class=CODE,merge=1,delta=2
    82                           	psect	text62,local,class=CODE,merge=1,delta=2
    83                           	psect	text63,local,class=CODE,merge=1,delta=2
    84                           	psect	text64,local,class=CODE,merge=1,delta=2
    85                           	psect	text65,local,class=CODE,merge=1,delta=2
    86                           	psect	text66,local,class=CODE,merge=1,delta=2
    87                           	psect	text67,local,class=CODE,merge=1,delta=2
    88                           	psect	text68,local,class=CODE,merge=1,delta=2
    89                           	psect	text69,local,class=CODE,merge=1,delta=2
    90                           	psect	text70,local,class=CODE,merge=1,inline,delta=2
    91                           	psect	text71,local,class=CODE,merge=1,delta=2
    92                           	psect	text72,local,class=CODE,merge=1,delta=2
    93                           	psect	text73,local,class=CODE,merge=1,delta=2
    94                           	psect	text74,local,class=CODE,merge=1,delta=2
    95                           	psect	text75,local,class=CODE,merge=1,delta=2
    96                           	psect	text76,local,class=CODE,merge=1,delta=2
    97                           	psect	text77,local,class=CODE,merge=1,delta=2
    98                           	psect	text78,local,class=CODE,merge=1,delta=2
    99                           	psect	text79,local,class=CODE,merge=1,delta=2
   100                           	psect	text80,local,class=CODE,merge=1,delta=2
   101                           	psect	text81,local,class=CODE,merge=1,delta=2
   102                           	psect	text82,local,class=CODE,merge=1,delta=2
   103                           	psect	text83,local,class=CODE,merge=1,delta=2
   104                           	psect	text84,local,class=CODE,merge=1,delta=2
   105                           	psect	text85,local,class=CODE,merge=1,delta=2
   106                           	psect	text86,local,class=CODE,merge=1,delta=2
   107                           	psect	text87,local,class=CODE,merge=1,delta=2
   108                           	psect	text88,local,class=CODE,merge=1,delta=2
   109                           	psect	text89,local,class=CODE,merge=1,delta=2
   110                           	psect	text90,local,class=CODE,merge=1,delta=2
   111                           	psect	text91,local,class=CODE,merge=1,delta=2
   112                           	psect	text92,local,class=CODE,merge=1,delta=2
   113                           	psect	text93,local,class=CODE,merge=1,delta=2
   114                           	psect	text94,local,class=CODE,merge=1,delta=2
   115                           	psect	text95,local,class=CODE,merge=1,delta=2
   116                           	psect	text96,local,class=CODE,merge=1,delta=2
   117                           	psect	text97,local,class=CODE,merge=1,delta=2
   118                           	psect	text98,local,class=CODE,merge=1,delta=2
   119                           	psect	text99,local,class=CODE,merge=1,delta=2
   120                           	psect	text100,local,class=CODE,merge=1,delta=2
   121                           	psect	text101,local,class=CODE,merge=1,delta=2
   122                           	psect	text102,local,class=CODE,merge=1,delta=2
   123                           	psect	text103,local,class=CODE,merge=1,delta=2
   124                           	psect	text104,local,class=CODE,merge=1,delta=2
   125                           	psect	text105,local,class=CODE,merge=1,delta=2
   126                           	psect	text106,local,class=CODE,merge=1,delta=2
   127                           	psect	intentry,global,class=CODE,delta=2
   128                           	psect	text108,local,class=CODE,merge=1,delta=2
   129                           	psect	text109,local,class=CODE,merge=1,inline,delta=2
   130                           	psect	text110,local,class=CODE,merge=1,inline,delta=2
   131                           	psect	text111,local,class=CODE,merge=1,inline,delta=2
   132                           	psect	text112,local,class=CODE,merge=1,delta=2
   133                           	psect	text113,local,class=CODE,merge=1,inline,delta=2
   134                           	psect	text114,local,class=CODE,merge=1,inline,delta=2
   135                           	psect	text115,local,class=CODE,merge=1,inline,delta=2
   136                           	psect	text116,local,class=CODE,merge=1,delta=2
   137                           	psect	text117,local,class=CODE,merge=1,delta=2
   138                           	psect	text118,local,class=CODE,merge=1,delta=2
   139                           	psect	text119,local,class=CODE,merge=1,delta=2
   140                           	dabs	1,0x7E,2
   141  0000                     	;# 
   142  0001                     	;# 
   143  0002                     	;# 
   144  0003                     	;# 
   145  0004                     	;# 
   146  0005                     	;# 
   147  0006                     	;# 
   148  0007                     	;# 
   149  0008                     	;# 
   150  0009                     	;# 
   151  000A                     	;# 
   152  000B                     	;# 
   153  000C                     	;# 
   154  000D                     	;# 
   155  000E                     	;# 
   156  0010                     	;# 
   157  0011                     	;# 
   158  0012                     	;# 
   159  0015                     	;# 
   160  0016                     	;# 
   161  0016                     	;# 
   162  0017                     	;# 
   163  0018                     	;# 
   164  0019                     	;# 
   165  001A                     	;# 
   166  001B                     	;# 
   167  001C                     	;# 
   168  008C                     	;# 
   169  008D                     	;# 
   170  008E                     	;# 
   171  0090                     	;# 
   172  0091                     	;# 
   173  0092                     	;# 
   174  0095                     	;# 
   175  0096                     	;# 
   176  0097                     	;# 
   177  0099                     	;# 
   178  009A                     	;# 
   179  009B                     	;# 
   180  009B                     	;# 
   181  009C                     	;# 
   182  009D                     	;# 
   183  009E                     	;# 
   184  010C                     	;# 
   185  010D                     	;# 
   186  010E                     	;# 
   187  0116                     	;# 
   188  0117                     	;# 
   189  011D                     	;# 
   190  018C                     	;# 
   191  018D                     	;# 
   192  018E                     	;# 
   193  0191                     	;# 
   194  0191                     	;# 
   195  0192                     	;# 
   196  0193                     	;# 
   197  0193                     	;# 
   198  0194                     	;# 
   199  0195                     	;# 
   200  0196                     	;# 
   201  0197                     	;# 
   202  0199                     	;# 
   203  019A                     	;# 
   204  019B                     	;# 
   205  019B                     	;# 
   206  019B                     	;# 
   207  019B                     	;# 
   208  019C                     	;# 
   209  019C                     	;# 
   210  019D                     	;# 
   211  019E                     	;# 
   212  019F                     	;# 
   213  020D                     	;# 
   214  0210                     	;# 
   215  0211                     	;# 
   216  0211                     	;# 
   217  0212                     	;# 
   218  0212                     	;# 
   219  0213                     	;# 
   220  0213                     	;# 
   221  0214                     	;# 
   222  0214                     	;# 
   223  0215                     	;# 
   224  0215                     	;# 
   225  0215                     	;# 
   226  0216                     	;# 
   227  0216                     	;# 
   228  0217                     	;# 
   229  0217                     	;# 
   230  0291                     	;# 
   231  0291                     	;# 
   232  0292                     	;# 
   233  0293                     	;# 
   234  0298                     	;# 
   235  0298                     	;# 
   236  0299                     	;# 
   237  029A                     	;# 
   238  0394                     	;# 
   239  0395                     	;# 
   240  0396                     	;# 
   241  0FE4                     	;# 
   242  0FE5                     	;# 
   243  0FE6                     	;# 
   244  0FE7                     	;# 
   245  0FE8                     	;# 
   246  0FE9                     	;# 
   247  0FEA                     	;# 
   248  0FEB                     	;# 
   249  0FED                     	;# 
   250  0FEE                     	;# 
   251  0FEF                     	;# 
   252  0000                     	;# 
   253  0001                     	;# 
   254  0002                     	;# 
   255  0003                     	;# 
   256  0004                     	;# 
   257  0005                     	;# 
   258  0006                     	;# 
   259  0007                     	;# 
   260  0008                     	;# 
   261  0009                     	;# 
   262  000A                     	;# 
   263  000B                     	;# 
   264  000C                     	;# 
   265  000D                     	;# 
   266  000E                     	;# 
   267  0010                     	;# 
   268  0011                     	;# 
   269  0012                     	;# 
   270  0015                     	;# 
   271  0016                     	;# 
   272  0016                     	;# 
   273  0017                     	;# 
   274  0018                     	;# 
   275  0019                     	;# 
   276  001A                     	;# 
   277  001B                     	;# 
   278  001C                     	;# 
   279  008C                     	;# 
   280  008D                     	;# 
   281  008E                     	;# 
   282  0090                     	;# 
   283  0091                     	;# 
   284  0092                     	;# 
   285  0095                     	;# 
   286  0096                     	;# 
   287  0097                     	;# 
   288  0099                     	;# 
   289  009A                     	;# 
   290  009B                     	;# 
   291  009B                     	;# 
   292  009C                     	;# 
   293  009D                     	;# 
   294  009E                     	;# 
   295  010C                     	;# 
   296  010D                     	;# 
   297  010E                     	;# 
   298  0116                     	;# 
   299  0117                     	;# 
   300  011D                     	;# 
   301  018C                     	;# 
   302  018D                     	;# 
   303  018E                     	;# 
   304  0191                     	;# 
   305  0191                     	;# 
   306  0192                     	;# 
   307  0193                     	;# 
   308  0193                     	;# 
   309  0194                     	;# 
   310  0195                     	;# 
   311  0196                     	;# 
   312  0197                     	;# 
   313  0199                     	;# 
   314  019A                     	;# 
   315  019B                     	;# 
   316  019B                     	;# 
   317  019B                     	;# 
   318  019B                     	;# 
   319  019C                     	;# 
   320  019C                     	;# 
   321  019D                     	;# 
   322  019E                     	;# 
   323  019F                     	;# 
   324  020D                     	;# 
   325  0210                     	;# 
   326  0211                     	;# 
   327  0211                     	;# 
   328  0212                     	;# 
   329  0212                     	;# 
   330  0213                     	;# 
   331  0213                     	;# 
   332  0214                     	;# 
   333  0214                     	;# 
   334  0215                     	;# 
   335  0215                     	;# 
   336  0215                     	;# 
   337  0216                     	;# 
   338  0216                     	;# 
   339  0217                     	;# 
   340  0217                     	;# 
   341  0291                     	;# 
   342  0291                     	;# 
   343  0292                     	;# 
   344  0293                     	;# 
   345  0298                     	;# 
   346  0298                     	;# 
   347  0299                     	;# 
   348  029A                     	;# 
   349  0394                     	;# 
   350  0395                     	;# 
   351  0396                     	;# 
   352  0FE4                     	;# 
   353  0FE5                     	;# 
   354  0FE6                     	;# 
   355  0FE7                     	;# 
   356  0FE8                     	;# 
   357  0FE9                     	;# 
   358  0FEA                     	;# 
   359  0FEB                     	;# 
   360  0FED                     	;# 
   361  0FEE                     	;# 
   362  0FEF                     	;# 
   363  0000                     	;# 
   364  0001                     	;# 
   365  0002                     	;# 
   366  0003                     	;# 
   367  0004                     	;# 
   368  0005                     	;# 
   369  0006                     	;# 
   370  0007                     	;# 
   371  0008                     	;# 
   372  0009                     	;# 
   373  000A                     	;# 
   374  000B                     	;# 
   375  000C                     	;# 
   376  000D                     	;# 
   377  000E                     	;# 
   378  0010                     	;# 
   379  0011                     	;# 
   380  0012                     	;# 
   381  0015                     	;# 
   382  0016                     	;# 
   383  0016                     	;# 
   384  0017                     	;# 
   385  0018                     	;# 
   386  0019                     	;# 
   387  001A                     	;# 
   388  001B                     	;# 
   389  001C                     	;# 
   390  008C                     	;# 
   391  008D                     	;# 
   392  008E                     	;# 
   393  0090                     	;# 
   394  0091                     	;# 
   395  0092                     	;# 
   396  0095                     	;# 
   397  0096                     	;# 
   398  0097                     	;# 
   399  0099                     	;# 
   400  009A                     	;# 
   401  009B                     	;# 
   402  009B                     	;# 
   403  009C                     	;# 
   404  009D                     	;# 
   405  009E                     	;# 
   406  010C                     	;# 
   407  010D                     	;# 
   408  010E                     	;# 
   409  0116                     	;# 
   410  0117                     	;# 
   411  011D                     	;# 
   412  018C                     	;# 
   413  018D                     	;# 
   414  018E                     	;# 
   415  0191                     	;# 
   416  0191                     	;# 
   417  0192                     	;# 
   418  0193                     	;# 
   419  0193                     	;# 
   420  0194                     	;# 
   421  0195                     	;# 
   422  0196                     	;# 
   423  0197                     	;# 
   424  0199                     	;# 
   425  019A                     	;# 
   426  019B                     	;# 
   427  019B                     	;# 
   428  019B                     	;# 
   429  019B                     	;# 
   430  019C                     	;# 
   431  019C                     	;# 
   432  019D                     	;# 
   433  019E                     	;# 
   434  019F                     	;# 
   435  020D                     	;# 
   436  0210                     	;# 
   437  0211                     	;# 
   438  0211                     	;# 
   439  0212                     	;# 
   440  0212                     	;# 
   441  0213                     	;# 
   442  0213                     	;# 
   443  0214                     	;# 
   444  0214                     	;# 
   445  0215                     	;# 
   446  0215                     	;# 
   447  0215                     	;# 
   448  0216                     	;# 
   449  0216                     	;# 
   450  0217                     	;# 
   451  0217                     	;# 
   452  0291                     	;# 
   453  0291                     	;# 
   454  0292                     	;# 
   455  0293                     	;# 
   456  0298                     	;# 
   457  0298                     	;# 
   458  0299                     	;# 
   459  029A                     	;# 
   460  0394                     	;# 
   461  0395                     	;# 
   462  0396                     	;# 
   463  0FE4                     	;# 
   464  0FE5                     	;# 
   465  0FE6                     	;# 
   466  0FE7                     	;# 
   467  0FE8                     	;# 
   468  0FE9                     	;# 
   469  0FEA                     	;# 
   470  0FEB                     	;# 
   471  0FED                     	;# 
   472  0FEE                     	;# 
   473  0FEF                     	;# 
   474  0000                     	;# 
   475  0001                     	;# 
   476  0002                     	;# 
   477  0003                     	;# 
   478  0004                     	;# 
   479  0005                     	;# 
   480  0006                     	;# 
   481  0007                     	;# 
   482  0008                     	;# 
   483  0009                     	;# 
   484  000A                     	;# 
   485  000B                     	;# 
   486  000C                     	;# 
   487  000D                     	;# 
   488  000E                     	;# 
   489  0010                     	;# 
   490  0011                     	;# 
   491  0012                     	;# 
   492  0015                     	;# 
   493  0016                     	;# 
   494  0016                     	;# 
   495  0017                     	;# 
   496  0018                     	;# 
   497  0019                     	;# 
   498  001A                     	;# 
   499  001B                     	;# 
   500  001C                     	;# 
   501  008C                     	;# 
   502  008D                     	;# 
   503  008E                     	;# 
   504  0090                     	;# 
   505  0091                     	;# 
   506  0092                     	;# 
   507  0095                     	;# 
   508  0096                     	;# 
   509  0097                     	;# 
   510  0099                     	;# 
   511  009A                     	;# 
   512  009B                     	;# 
   513  009B                     	;# 
   514  009C                     	;# 
   515  009D                     	;# 
   516  009E                     	;# 
   517  010C                     	;# 
   518  010D                     	;# 
   519  010E                     	;# 
   520  0116                     	;# 
   521  0117                     	;# 
   522  011D                     	;# 
   523  018C                     	;# 
   524  018D                     	;# 
   525  018E                     	;# 
   526  0191                     	;# 
   527  0191                     	;# 
   528  0192                     	;# 
   529  0193                     	;# 
   530  0193                     	;# 
   531  0194                     	;# 
   532  0195                     	;# 
   533  0196                     	;# 
   534  0197                     	;# 
   535  0199                     	;# 
   536  019A                     	;# 
   537  019B                     	;# 
   538  019B                     	;# 
   539  019B                     	;# 
   540  019B                     	;# 
   541  019C                     	;# 
   542  019C                     	;# 
   543  019D                     	;# 
   544  019E                     	;# 
   545  019F                     	;# 
   546  020D                     	;# 
   547  0210                     	;# 
   548  0211                     	;# 
   549  0211                     	;# 
   550  0212                     	;# 
   551  0212                     	;# 
   552  0213                     	;# 
   553  0213                     	;# 
   554  0214                     	;# 
   555  0214                     	;# 
   556  0215                     	;# 
   557  0215                     	;# 
   558  0215                     	;# 
   559  0216                     	;# 
   560  0216                     	;# 
   561  0217                     	;# 
   562  0217                     	;# 
   563  0291                     	;# 
   564  0291                     	;# 
   565  0292                     	;# 
   566  0293                     	;# 
   567  0298                     	;# 
   568  0298                     	;# 
   569  0299                     	;# 
   570  029A                     	;# 
   571  0394                     	;# 
   572  0395                     	;# 
   573  0396                     	;# 
   574  0FE4                     	;# 
   575  0FE5                     	;# 
   576  0FE6                     	;# 
   577  0FE7                     	;# 
   578  0FE8                     	;# 
   579  0FE9                     	;# 
   580  0FEA                     	;# 
   581  0FEB                     	;# 
   582  0FED                     	;# 
   583  0FEE                     	;# 
   584  0FEF                     	;# 
   585  0000                     	;# 
   586  0001                     	;# 
   587  0002                     	;# 
   588  0003                     	;# 
   589  0004                     	;# 
   590  0005                     	;# 
   591  0006                     	;# 
   592  0007                     	;# 
   593  0008                     	;# 
   594  0009                     	;# 
   595  000A                     	;# 
   596  000B                     	;# 
   597  000C                     	;# 
   598  000D                     	;# 
   599  000E                     	;# 
   600  0010                     	;# 
   601  0011                     	;# 
   602  0012                     	;# 
   603  0015                     	;# 
   604  0016                     	;# 
   605  0016                     	;# 
   606  0017                     	;# 
   607  0018                     	;# 
   608  0019                     	;# 
   609  001A                     	;# 
   610  001B                     	;# 
   611  001C                     	;# 
   612  008C                     	;# 
   613  008D                     	;# 
   614  008E                     	;# 
   615  0090                     	;# 
   616  0091                     	;# 
   617  0092                     	;# 
   618  0095                     	;# 
   619  0096                     	;# 
   620  0097                     	;# 
   621  0099                     	;# 
   622  009A                     	;# 
   623  009B                     	;# 
   624  009B                     	;# 
   625  009C                     	;# 
   626  009D                     	;# 
   627  009E                     	;# 
   628  010C                     	;# 
   629  010D                     	;# 
   630  010E                     	;# 
   631  0116                     	;# 
   632  0117                     	;# 
   633  011D                     	;# 
   634  018C                     	;# 
   635  018D                     	;# 
   636  018E                     	;# 
   637  0191                     	;# 
   638  0191                     	;# 
   639  0192                     	;# 
   640  0193                     	;# 
   641  0193                     	;# 
   642  0194                     	;# 
   643  0195                     	;# 
   644  0196                     	;# 
   645  0197                     	;# 
   646  0199                     	;# 
   647  019A                     	;# 
   648  019B                     	;# 
   649  019B                     	;# 
   650  019B                     	;# 
   651  019B                     	;# 
   652  019C                     	;# 
   653  019C                     	;# 
   654  019D                     	;# 
   655  019E                     	;# 
   656  019F                     	;# 
   657  020D                     	;# 
   658  0210                     	;# 
   659  0211                     	;# 
   660  0211                     	;# 
   661  0212                     	;# 
   662  0212                     	;# 
   663  0213                     	;# 
   664  0213                     	;# 
   665  0214                     	;# 
   666  0214                     	;# 
   667  0215                     	;# 
   668  0215                     	;# 
   669  0215                     	;# 
   670  0216                     	;# 
   671  0216                     	;# 
   672  0217                     	;# 
   673  0217                     	;# 
   674  0291                     	;# 
   675  0291                     	;# 
   676  0292                     	;# 
   677  0293                     	;# 
   678  0298                     	;# 
   679  0298                     	;# 
   680  0299                     	;# 
   681  029A                     	;# 
   682  0394                     	;# 
   683  0395                     	;# 
   684  0396                     	;# 
   685  0FE4                     	;# 
   686  0FE5                     	;# 
   687  0FE6                     	;# 
   688  0FE7                     	;# 
   689  0FE8                     	;# 
   690  0FE9                     	;# 
   691  0FEA                     	;# 
   692  0FEB                     	;# 
   693  0FED                     	;# 
   694  0FEE                     	;# 
   695  0FEF                     	;# 
   696  0000                     	;# 
   697  0001                     	;# 
   698  0002                     	;# 
   699  0003                     	;# 
   700  0004                     	;# 
   701  0005                     	;# 
   702  0006                     	;# 
   703  0007                     	;# 
   704  0008                     	;# 
   705  0009                     	;# 
   706  000A                     	;# 
   707  000B                     	;# 
   708  000C                     	;# 
   709  000D                     	;# 
   710  000E                     	;# 
   711  0010                     	;# 
   712  0011                     	;# 
   713  0012                     	;# 
   714  0015                     	;# 
   715  0016                     	;# 
   716  0016                     	;# 
   717  0017                     	;# 
   718  0018                     	;# 
   719  0019                     	;# 
   720  001A                     	;# 
   721  001B                     	;# 
   722  001C                     	;# 
   723  008C                     	;# 
   724  008D                     	;# 
   725  008E                     	;# 
   726  0090                     	;# 
   727  0091                     	;# 
   728  0092                     	;# 
   729  0095                     	;# 
   730  0096                     	;# 
   731  0097                     	;# 
   732  0099                     	;# 
   733  009A                     	;# 
   734  009B                     	;# 
   735  009B                     	;# 
   736  009C                     	;# 
   737  009D                     	;# 
   738  009E                     	;# 
   739  010C                     	;# 
   740  010D                     	;# 
   741  010E                     	;# 
   742  0116                     	;# 
   743  0117                     	;# 
   744  011D                     	;# 
   745  018C                     	;# 
   746  018D                     	;# 
   747  018E                     	;# 
   748  0191                     	;# 
   749  0191                     	;# 
   750  0192                     	;# 
   751  0193                     	;# 
   752  0193                     	;# 
   753  0194                     	;# 
   754  0195                     	;# 
   755  0196                     	;# 
   756  0197                     	;# 
   757  0199                     	;# 
   758  019A                     	;# 
   759  019B                     	;# 
   760  019B                     	;# 
   761  019B                     	;# 
   762  019B                     	;# 
   763  019C                     	;# 
   764  019C                     	;# 
   765  019D                     	;# 
   766  019E                     	;# 
   767  019F                     	;# 
   768  020D                     	;# 
   769  0210                     	;# 
   770  0211                     	;# 
   771  0211                     	;# 
   772  0212                     	;# 
   773  0212                     	;# 
   774  0213                     	;# 
   775  0213                     	;# 
   776  0214                     	;# 
   777  0214                     	;# 
   778  0215                     	;# 
   779  0215                     	;# 
   780  0215                     	;# 
   781  0216                     	;# 
   782  0216                     	;# 
   783  0217                     	;# 
   784  0217                     	;# 
   785  0291                     	;# 
   786  0291                     	;# 
   787  0292                     	;# 
   788  0293                     	;# 
   789  0298                     	;# 
   790  0298                     	;# 
   791  0299                     	;# 
   792  029A                     	;# 
   793  0394                     	;# 
   794  0395                     	;# 
   795  0396                     	;# 
   796  0FE4                     	;# 
   797  0FE5                     	;# 
   798  0FE6                     	;# 
   799  0FE7                     	;# 
   800  0FE8                     	;# 
   801  0FE9                     	;# 
   802  0FEA                     	;# 
   803  0FEB                     	;# 
   804  0FED                     	;# 
   805  0FEE                     	;# 
   806  0FEF                     	;# 
   807  0000                     	;# 
   808  0001                     	;# 
   809  0002                     	;# 
   810  0003                     	;# 
   811  0004                     	;# 
   812  0005                     	;# 
   813  0006                     	;# 
   814  0007                     	;# 
   815  0008                     	;# 
   816  0009                     	;# 
   817  000A                     	;# 
   818  000B                     	;# 
   819  000C                     	;# 
   820  000D                     	;# 
   821  000E                     	;# 
   822  0010                     	;# 
   823  0011                     	;# 
   824  0012                     	;# 
   825  0015                     	;# 
   826  0016                     	;# 
   827  0016                     	;# 
   828  0017                     	;# 
   829  0018                     	;# 
   830  0019                     	;# 
   831  001A                     	;# 
   832  001B                     	;# 
   833  001C                     	;# 
   834  008C                     	;# 
   835  008D                     	;# 
   836  008E                     	;# 
   837  0090                     	;# 
   838  0091                     	;# 
   839  0092                     	;# 
   840  0095                     	;# 
   841  0096                     	;# 
   842  0097                     	;# 
   843  0099                     	;# 
   844  009A                     	;# 
   845  009B                     	;# 
   846  009B                     	;# 
   847  009C                     	;# 
   848  009D                     	;# 
   849  009E                     	;# 
   850  010C                     	;# 
   851  010D                     	;# 
   852  010E                     	;# 
   853  0116                     	;# 
   854  0117                     	;# 
   855  011D                     	;# 
   856  018C                     	;# 
   857  018D                     	;# 
   858  018E                     	;# 
   859  0191                     	;# 
   860  0191                     	;# 
   861  0192                     	;# 
   862  0193                     	;# 
   863  0193                     	;# 
   864  0194                     	;# 
   865  0195                     	;# 
   866  0196                     	;# 
   867  0197                     	;# 
   868  0199                     	;# 
   869  019A                     	;# 
   870  019B                     	;# 
   871  019B                     	;# 
   872  019B                     	;# 
   873  019B                     	;# 
   874  019C                     	;# 
   875  019C                     	;# 
   876  019D                     	;# 
   877  019E                     	;# 
   878  019F                     	;# 
   879  020D                     	;# 
   880  0210                     	;# 
   881  0211                     	;# 
   882  0211                     	;# 
   883  0212                     	;# 
   884  0212                     	;# 
   885  0213                     	;# 
   886  0213                     	;# 
   887  0214                     	;# 
   888  0214                     	;# 
   889  0215                     	;# 
   890  0215                     	;# 
   891  0215                     	;# 
   892  0216                     	;# 
   893  0216                     	;# 
   894  0217                     	;# 
   895  0217                     	;# 
   896  0291                     	;# 
   897  0291                     	;# 
   898  0292                     	;# 
   899  0293                     	;# 
   900  0298                     	;# 
   901  0298                     	;# 
   902  0299                     	;# 
   903  029A                     	;# 
   904  0394                     	;# 
   905  0395                     	;# 
   906  0396                     	;# 
   907  0FE4                     	;# 
   908  0FE5                     	;# 
   909  0FE6                     	;# 
   910  0FE7                     	;# 
   911  0FE8                     	;# 
   912  0FE9                     	;# 
   913  0FEA                     	;# 
   914  0FEB                     	;# 
   915  0FED                     	;# 
   916  0FEE                     	;# 
   917  0FEF                     	;# 
   918  0000                     	;# 
   919  0001                     	;# 
   920  0002                     	;# 
   921  0003                     	;# 
   922  0004                     	;# 
   923  0005                     	;# 
   924  0006                     	;# 
   925  0007                     	;# 
   926  0008                     	;# 
   927  0009                     	;# 
   928  000A                     	;# 
   929  000B                     	;# 
   930  000C                     	;# 
   931  000D                     	;# 
   932  000E                     	;# 
   933  0010                     	;# 
   934  0011                     	;# 
   935  0012                     	;# 
   936  0015                     	;# 
   937  0016                     	;# 
   938  0016                     	;# 
   939  0017                     	;# 
   940  0018                     	;# 
   941  0019                     	;# 
   942  001A                     	;# 
   943  001B                     	;# 
   944  001C                     	;# 
   945  008C                     	;# 
   946  008D                     	;# 
   947  008E                     	;# 
   948  0090                     	;# 
   949  0091                     	;# 
   950  0092                     	;# 
   951  0095                     	;# 
   952  0096                     	;# 
   953  0097                     	;# 
   954  0099                     	;# 
   955  009A                     	;# 
   956  009B                     	;# 
   957  009B                     	;# 
   958  009C                     	;# 
   959  009D                     	;# 
   960  009E                     	;# 
   961  010C                     	;# 
   962  010D                     	;# 
   963  010E                     	;# 
   964  0116                     	;# 
   965  0117                     	;# 
   966  011D                     	;# 
   967  018C                     	;# 
   968  018D                     	;# 
   969  018E                     	;# 
   970  0191                     	;# 
   971  0191                     	;# 
   972  0192                     	;# 
   973  0193                     	;# 
   974  0193                     	;# 
   975  0194                     	;# 
   976  0195                     	;# 
   977  0196                     	;# 
   978  0197                     	;# 
   979  0199                     	;# 
   980  019A                     	;# 
   981  019B                     	;# 
   982  019B                     	;# 
   983  019B                     	;# 
   984  019B                     	;# 
   985  019C                     	;# 
   986  019C                     	;# 
   987  019D                     	;# 
   988  019E                     	;# 
   989  019F                     	;# 
   990  020D                     	;# 
   991  0210                     	;# 
   992  0211                     	;# 
   993  0211                     	;# 
   994  0212                     	;# 
   995  0212                     	;# 
   996  0213                     	;# 
   997  0213                     	;# 
   998  0214                     	;# 
   999  0214                     	;# 
  1000  0215                     	;# 
  1001  0215                     	;# 
  1002  0215                     	;# 
  1003  0216                     	;# 
  1004  0216                     	;# 
  1005  0217                     	;# 
  1006  0217                     	;# 
  1007  0291                     	;# 
  1008  0291                     	;# 
  1009  0292                     	;# 
  1010  0293                     	;# 
  1011  0298                     	;# 
  1012  0298                     	;# 
  1013  0299                     	;# 
  1014  029A                     	;# 
  1015  0394                     	;# 
  1016  0395                     	;# 
  1017  0396                     	;# 
  1018  0FE4                     	;# 
  1019  0FE5                     	;# 
  1020  0FE6                     	;# 
  1021  0FE7                     	;# 
  1022  0FE8                     	;# 
  1023  0FE9                     	;# 
  1024  0FEA                     	;# 
  1025  0FEB                     	;# 
  1026  0FED                     	;# 
  1027  0FEE                     	;# 
  1028  0FEF                     	;# 
  1029  0000                     	;# 
  1030  0001                     	;# 
  1031  0002                     	;# 
  1032  0003                     	;# 
  1033  0004                     	;# 
  1034  0005                     	;# 
  1035  0006                     	;# 
  1036  0007                     	;# 
  1037  0008                     	;# 
  1038  0009                     	;# 
  1039  000A                     	;# 
  1040  000B                     	;# 
  1041  000C                     	;# 
  1042  000D                     	;# 
  1043  000E                     	;# 
  1044  0010                     	;# 
  1045  0011                     	;# 
  1046  0012                     	;# 
  1047  0015                     	;# 
  1048  0016                     	;# 
  1049  0016                     	;# 
  1050  0017                     	;# 
  1051  0018                     	;# 
  1052  0019                     	;# 
  1053  001A                     	;# 
  1054  001B                     	;# 
  1055  001C                     	;# 
  1056  008C                     	;# 
  1057  008D                     	;# 
  1058  008E                     	;# 
  1059  0090                     	;# 
  1060  0091                     	;# 
  1061  0092                     	;# 
  1062  0095                     	;# 
  1063  0096                     	;# 
  1064  0097                     	;# 
  1065  0099                     	;# 
  1066  009A                     	;# 
  1067  009B                     	;# 
  1068  009B                     	;# 
  1069  009C                     	;# 
  1070  009D                     	;# 
  1071  009E                     	;# 
  1072  010C                     	;# 
  1073  010D                     	;# 
  1074  010E                     	;# 
  1075  0116                     	;# 
  1076  0117                     	;# 
  1077  011D                     	;# 
  1078  018C                     	;# 
  1079  018D                     	;# 
  1080  018E                     	;# 
  1081  0191                     	;# 
  1082  0191                     	;# 
  1083  0192                     	;# 
  1084  0193                     	;# 
  1085  0193                     	;# 
  1086  0194                     	;# 
  1087  0195                     	;# 
  1088  0196                     	;# 
  1089  0197                     	;# 
  1090  0199                     	;# 
  1091  019A                     	;# 
  1092  019B                     	;# 
  1093  019B                     	;# 
  1094  019B                     	;# 
  1095  019B                     	;# 
  1096  019C                     	;# 
  1097  019C                     	;# 
  1098  019D                     	;# 
  1099  019E                     	;# 
  1100  019F                     	;# 
  1101  020D                     	;# 
  1102  0210                     	;# 
  1103  0211                     	;# 
  1104  0211                     	;# 
  1105  0212                     	;# 
  1106  0212                     	;# 
  1107  0213                     	;# 
  1108  0213                     	;# 
  1109  0214                     	;# 
  1110  0214                     	;# 
  1111  0215                     	;# 
  1112  0215                     	;# 
  1113  0215                     	;# 
  1114  0216                     	;# 
  1115  0216                     	;# 
  1116  0217                     	;# 
  1117  0217                     	;# 
  1118  0291                     	;# 
  1119  0291                     	;# 
  1120  0292                     	;# 
  1121  0293                     	;# 
  1122  0298                     	;# 
  1123  0298                     	;# 
  1124  0299                     	;# 
  1125  029A                     	;# 
  1126  0394                     	;# 
  1127  0395                     	;# 
  1128  0396                     	;# 
  1129  0FE4                     	;# 
  1130  0FE5                     	;# 
  1131  0FE6                     	;# 
  1132  0FE7                     	;# 
  1133  0FE8                     	;# 
  1134  0FE9                     	;# 
  1135  0FEA                     	;# 
  1136  0FEB                     	;# 
  1137  0FED                     	;# 
  1138  0FEE                     	;# 
  1139  0FEF                     	;# 
  1140  0000                     	;# 
  1141  0001                     	;# 
  1142  0002                     	;# 
  1143  0003                     	;# 
  1144  0004                     	;# 
  1145  0005                     	;# 
  1146  0006                     	;# 
  1147  0007                     	;# 
  1148  0008                     	;# 
  1149  0009                     	;# 
  1150  000A                     	;# 
  1151  000B                     	;# 
  1152  000C                     	;# 
  1153  000D                     	;# 
  1154  000E                     	;# 
  1155  0010                     	;# 
  1156  0011                     	;# 
  1157  0012                     	;# 
  1158  0015                     	;# 
  1159  0016                     	;# 
  1160  0016                     	;# 
  1161  0017                     	;# 
  1162  0018                     	;# 
  1163  0019                     	;# 
  1164  001A                     	;# 
  1165  001B                     	;# 
  1166  001C                     	;# 
  1167  008C                     	;# 
  1168  008D                     	;# 
  1169  008E                     	;# 
  1170  0090                     	;# 
  1171  0091                     	;# 
  1172  0092                     	;# 
  1173  0095                     	;# 
  1174  0096                     	;# 
  1175  0097                     	;# 
  1176  0099                     	;# 
  1177  009A                     	;# 
  1178  009B                     	;# 
  1179  009B                     	;# 
  1180  009C                     	;# 
  1181  009D                     	;# 
  1182  009E                     	;# 
  1183  010C                     	;# 
  1184  010D                     	;# 
  1185  010E                     	;# 
  1186  0116                     	;# 
  1187  0117                     	;# 
  1188  011D                     	;# 
  1189  018C                     	;# 
  1190  018D                     	;# 
  1191  018E                     	;# 
  1192  0191                     	;# 
  1193  0191                     	;# 
  1194  0192                     	;# 
  1195  0193                     	;# 
  1196  0193                     	;# 
  1197  0194                     	;# 
  1198  0195                     	;# 
  1199  0196                     	;# 
  1200  0197                     	;# 
  1201  0199                     	;# 
  1202  019A                     	;# 
  1203  019B                     	;# 
  1204  019B                     	;# 
  1205  019B                     	;# 
  1206  019B                     	;# 
  1207  019C                     	;# 
  1208  019C                     	;# 
  1209  019D                     	;# 
  1210  019E                     	;# 
  1211  019F                     	;# 
  1212  020D                     	;# 
  1213  0210                     	;# 
  1214  0211                     	;# 
  1215  0211                     	;# 
  1216  0212                     	;# 
  1217  0212                     	;# 
  1218  0213                     	;# 
  1219  0213                     	;# 
  1220  0214                     	;# 
  1221  0214                     	;# 
  1222  0215                     	;# 
  1223  0215                     	;# 
  1224  0215                     	;# 
  1225  0216                     	;# 
  1226  0216                     	;# 
  1227  0217                     	;# 
  1228  0217                     	;# 
  1229  0291                     	;# 
  1230  0291                     	;# 
  1231  0292                     	;# 
  1232  0293                     	;# 
  1233  0298                     	;# 
  1234  0298                     	;# 
  1235  0299                     	;# 
  1236  029A                     	;# 
  1237  0394                     	;# 
  1238  0395                     	;# 
  1239  0396                     	;# 
  1240  0FE4                     	;# 
  1241  0FE5                     	;# 
  1242  0FE6                     	;# 
  1243  0FE7                     	;# 
  1244  0FE8                     	;# 
  1245  0FE9                     	;# 
  1246  0FEA                     	;# 
  1247  0FEB                     	;# 
  1248  0FED                     	;# 
  1249  0FEE                     	;# 
  1250  0FEF                     	;# 
  1251  0000                     	;# 
  1252  0001                     	;# 
  1253  0002                     	;# 
  1254  0003                     	;# 
  1255  0004                     	;# 
  1256  0005                     	;# 
  1257  0006                     	;# 
  1258  0007                     	;# 
  1259  0008                     	;# 
  1260  0009                     	;# 
  1261  000A                     	;# 
  1262  000B                     	;# 
  1263  000C                     	;# 
  1264  000D                     	;# 
  1265  000E                     	;# 
  1266  0010                     	;# 
  1267  0011                     	;# 
  1268  0012                     	;# 
  1269  0015                     	;# 
  1270  0016                     	;# 
  1271  0016                     	;# 
  1272  0017                     	;# 
  1273  0018                     	;# 
  1274  0019                     	;# 
  1275  001A                     	;# 
  1276  001B                     	;# 
  1277  001C                     	;# 
  1278  008C                     	;# 
  1279  008D                     	;# 
  1280  008E                     	;# 
  1281  0090                     	;# 
  1282  0091                     	;# 
  1283  0092                     	;# 
  1284  0095                     	;# 
  1285  0096                     	;# 
  1286  0097                     	;# 
  1287  0099                     	;# 
  1288  009A                     	;# 
  1289  009B                     	;# 
  1290  009B                     	;# 
  1291  009C                     	;# 
  1292  009D                     	;# 
  1293  009E                     	;# 
  1294  010C                     	;# 
  1295  010D                     	;# 
  1296  010E                     	;# 
  1297  0116                     	;# 
  1298  0117                     	;# 
  1299  011D                     	;# 
  1300  018C                     	;# 
  1301  018D                     	;# 
  1302  018E                     	;# 
  1303  0191                     	;# 
  1304  0191                     	;# 
  1305  0192                     	;# 
  1306  0193                     	;# 
  1307  0193                     	;# 
  1308  0194                     	;# 
  1309  0195                     	;# 
  1310  0196                     	;# 
  1311  0197                     	;# 
  1312  0199                     	;# 
  1313  019A                     	;# 
  1314  019B                     	;# 
  1315  019B                     	;# 
  1316  019B                     	;# 
  1317  019B                     	;# 
  1318  019C                     	;# 
  1319  019C                     	;# 
  1320  019D                     	;# 
  1321  019E                     	;# 
  1322  019F                     	;# 
  1323  020D                     	;# 
  1324  0210                     	;# 
  1325  0211                     	;# 
  1326  0211                     	;# 
  1327  0212                     	;# 
  1328  0212                     	;# 
  1329  0213                     	;# 
  1330  0213                     	;# 
  1331  0214                     	;# 
  1332  0214                     	;# 
  1333  0215                     	;# 
  1334  0215                     	;# 
  1335  0215                     	;# 
  1336  0216                     	;# 
  1337  0216                     	;# 
  1338  0217                     	;# 
  1339  0217                     	;# 
  1340  0291                     	;# 
  1341  0291                     	;# 
  1342  0292                     	;# 
  1343  0293                     	;# 
  1344  0298                     	;# 
  1345  0298                     	;# 
  1346  0299                     	;# 
  1347  029A                     	;# 
  1348  0394                     	;# 
  1349  0395                     	;# 
  1350  0396                     	;# 
  1351  0FE4                     	;# 
  1352  0FE5                     	;# 
  1353  0FE6                     	;# 
  1354  0FE7                     	;# 
  1355  0FE8                     	;# 
  1356  0FE9                     	;# 
  1357  0FEA                     	;# 
  1358  0FEB                     	;# 
  1359  0FED                     	;# 
  1360  0FEE                     	;# 
  1361  0FEF                     	;# 
  1362  0000                     	;# 
  1363  0001                     	;# 
  1364  0002                     	;# 
  1365  0003                     	;# 
  1366  0004                     	;# 
  1367  0005                     	;# 
  1368  0006                     	;# 
  1369  0007                     	;# 
  1370  0008                     	;# 
  1371  0009                     	;# 
  1372  000A                     	;# 
  1373  000B                     	;# 
  1374  000C                     	;# 
  1375  000D                     	;# 
  1376  000E                     	;# 
  1377  0010                     	;# 
  1378  0011                     	;# 
  1379  0012                     	;# 
  1380  0015                     	;# 
  1381  0016                     	;# 
  1382  0016                     	;# 
  1383  0017                     	;# 
  1384  0018                     	;# 
  1385  0019                     	;# 
  1386  001A                     	;# 
  1387  001B                     	;# 
  1388  001C                     	;# 
  1389  008C                     	;# 
  1390  008D                     	;# 
  1391  008E                     	;# 
  1392  0090                     	;# 
  1393  0091                     	;# 
  1394  0092                     	;# 
  1395  0095                     	;# 
  1396  0096                     	;# 
  1397  0097                     	;# 
  1398  0099                     	;# 
  1399  009A                     	;# 
  1400  009B                     	;# 
  1401  009B                     	;# 
  1402  009C                     	;# 
  1403  009D                     	;# 
  1404  009E                     	;# 
  1405  010C                     	;# 
  1406  010D                     	;# 
  1407  010E                     	;# 
  1408  0116                     	;# 
  1409  0117                     	;# 
  1410  011D                     	;# 
  1411  018C                     	;# 
  1412  018D                     	;# 
  1413  018E                     	;# 
  1414  0191                     	;# 
  1415  0191                     	;# 
  1416  0192                     	;# 
  1417  0193                     	;# 
  1418  0193                     	;# 
  1419  0194                     	;# 
  1420  0195                     	;# 
  1421  0196                     	;# 
  1422  0197                     	;# 
  1423  0199                     	;# 
  1424  019A                     	;# 
  1425  019B                     	;# 
  1426  019B                     	;# 
  1427  019B                     	;# 
  1428  019B                     	;# 
  1429  019C                     	;# 
  1430  019C                     	;# 
  1431  019D                     	;# 
  1432  019E                     	;# 
  1433  019F                     	;# 
  1434  020D                     	;# 
  1435  0210                     	;# 
  1436  0211                     	;# 
  1437  0211                     	;# 
  1438  0212                     	;# 
  1439  0212                     	;# 
  1440  0213                     	;# 
  1441  0213                     	;# 
  1442  0214                     	;# 
  1443  0214                     	;# 
  1444  0215                     	;# 
  1445  0215                     	;# 
  1446  0215                     	;# 
  1447  0216                     	;# 
  1448  0216                     	;# 
  1449  0217                     	;# 
  1450  0217                     	;# 
  1451  0291                     	;# 
  1452  0291                     	;# 
  1453  0292                     	;# 
  1454  0293                     	;# 
  1455  0298                     	;# 
  1456  0298                     	;# 
  1457  0299                     	;# 
  1458  029A                     	;# 
  1459  0394                     	;# 
  1460  0395                     	;# 
  1461  0396                     	;# 
  1462  0FE4                     	;# 
  1463  0FE5                     	;# 
  1464  0FE6                     	;# 
  1465  0FE7                     	;# 
  1466  0FE8                     	;# 
  1467  0FE9                     	;# 
  1468  0FEA                     	;# 
  1469  0FEB                     	;# 
  1470  0FED                     	;# 
  1471  0FEE                     	;# 
  1472  0FEF                     	;# 
  1473  0000                     	;# 
  1474  0001                     	;# 
  1475  0002                     	;# 
  1476  0003                     	;# 
  1477  0004                     	;# 
  1478  0005                     	;# 
  1479  0006                     	;# 
  1480  0007                     	;# 
  1481  0008                     	;# 
  1482  0009                     	;# 
  1483  000A                     	;# 
  1484  000B                     	;# 
  1485  000C                     	;# 
  1486  000D                     	;# 
  1487  000E                     	;# 
  1488  0010                     	;# 
  1489  0011                     	;# 
  1490  0012                     	;# 
  1491  0015                     	;# 
  1492  0016                     	;# 
  1493  0016                     	;# 
  1494  0017                     	;# 
  1495  0018                     	;# 
  1496  0019                     	;# 
  1497  001A                     	;# 
  1498  001B                     	;# 
  1499  001C                     	;# 
  1500  008C                     	;# 
  1501  008D                     	;# 
  1502  008E                     	;# 
  1503  0090                     	;# 
  1504  0091                     	;# 
  1505  0092                     	;# 
  1506  0095                     	;# 
  1507  0096                     	;# 
  1508  0097                     	;# 
  1509  0099                     	;# 
  1510  009A                     	;# 
  1511  009B                     	;# 
  1512  009B                     	;# 
  1513  009C                     	;# 
  1514  009D                     	;# 
  1515  009E                     	;# 
  1516  010C                     	;# 
  1517  010D                     	;# 
  1518  010E                     	;# 
  1519  0116                     	;# 
  1520  0117                     	;# 
  1521  011D                     	;# 
  1522  018C                     	;# 
  1523  018D                     	;# 
  1524  018E                     	;# 
  1525  0191                     	;# 
  1526  0191                     	;# 
  1527  0192                     	;# 
  1528  0193                     	;# 
  1529  0193                     	;# 
  1530  0194                     	;# 
  1531  0195                     	;# 
  1532  0196                     	;# 
  1533  0197                     	;# 
  1534  0199                     	;# 
  1535  019A                     	;# 
  1536  019B                     	;# 
  1537  019B                     	;# 
  1538  019B                     	;# 
  1539  019B                     	;# 
  1540  019C                     	;# 
  1541  019C                     	;# 
  1542  019D                     	;# 
  1543  019E                     	;# 
  1544  019F                     	;# 
  1545  020D                     	;# 
  1546  0210                     	;# 
  1547  0211                     	;# 
  1548  0211                     	;# 
  1549  0212                     	;# 
  1550  0212                     	;# 
  1551  0213                     	;# 
  1552  0213                     	;# 
  1553  0214                     	;# 
  1554  0214                     	;# 
  1555  0215                     	;# 
  1556  0215                     	;# 
  1557  0215                     	;# 
  1558  0216                     	;# 
  1559  0216                     	;# 
  1560  0217                     	;# 
  1561  0217                     	;# 
  1562  0291                     	;# 
  1563  0291                     	;# 
  1564  0292                     	;# 
  1565  0293                     	;# 
  1566  0298                     	;# 
  1567  0298                     	;# 
  1568  0299                     	;# 
  1569  029A                     	;# 
  1570  0394                     	;# 
  1571  0395                     	;# 
  1572  0396                     	;# 
  1573  0FE4                     	;# 
  1574  0FE5                     	;# 
  1575  0FE6                     	;# 
  1576  0FE7                     	;# 
  1577  0FE8                     	;# 
  1578  0FE9                     	;# 
  1579  0FEA                     	;# 
  1580  0FEB                     	;# 
  1581  0FED                     	;# 
  1582  0FEE                     	;# 
  1583  0FEF                     	;# 
  1584  0000                     	;# 
  1585  0001                     	;# 
  1586  0002                     	;# 
  1587  0003                     	;# 
  1588  0004                     	;# 
  1589  0005                     	;# 
  1590  0006                     	;# 
  1591  0007                     	;# 
  1592  0008                     	;# 
  1593  0009                     	;# 
  1594  000A                     	;# 
  1595  000B                     	;# 
  1596  000C                     	;# 
  1597  000D                     	;# 
  1598  000E                     	;# 
  1599  0010                     	;# 
  1600  0011                     	;# 
  1601  0012                     	;# 
  1602  0015                     	;# 
  1603  0016                     	;# 
  1604  0016                     	;# 
  1605  0017                     	;# 
  1606  0018                     	;# 
  1607  0019                     	;# 
  1608  001A                     	;# 
  1609  001B                     	;# 
  1610  001C                     	;# 
  1611  008C                     	;# 
  1612  008D                     	;# 
  1613  008E                     	;# 
  1614  0090                     	;# 
  1615  0091                     	;# 
  1616  0092                     	;# 
  1617  0095                     	;# 
  1618  0096                     	;# 
  1619  0097                     	;# 
  1620  0099                     	;# 
  1621  009A                     	;# 
  1622  009B                     	;# 
  1623  009B                     	;# 
  1624  009C                     	;# 
  1625  009D                     	;# 
  1626  009E                     	;# 
  1627  010C                     	;# 
  1628  010D                     	;# 
  1629  010E                     	;# 
  1630  0116                     	;# 
  1631  0117                     	;# 
  1632  011D                     	;# 
  1633  018C                     	;# 
  1634  018D                     	;# 
  1635  018E                     	;# 
  1636  0191                     	;# 
  1637  0191                     	;# 
  1638  0192                     	;# 
  1639  0193                     	;# 
  1640  0193                     	;# 
  1641  0194                     	;# 
  1642  0195                     	;# 
  1643  0196                     	;# 
  1644  0197                     	;# 
  1645  0199                     	;# 
  1646  019A                     	;# 
  1647  019B                     	;# 
  1648  019B                     	;# 
  1649  019B                     	;# 
  1650  019B                     	;# 
  1651  019C                     	;# 
  1652  019C                     	;# 
  1653  019D                     	;# 
  1654  019E                     	;# 
  1655  019F                     	;# 
  1656  020D                     	;# 
  1657  0210                     	;# 
  1658  0211                     	;# 
  1659  0211                     	;# 
  1660  0212                     	;# 
  1661  0212                     	;# 
  1662  0213                     	;# 
  1663  0213                     	;# 
  1664  0214                     	;# 
  1665  0214                     	;# 
  1666  0215                     	;# 
  1667  0215                     	;# 
  1668  0215                     	;# 
  1669  0216                     	;# 
  1670  0216                     	;# 
  1671  0217                     	;# 
  1672  0217                     	;# 
  1673  0291                     	;# 
  1674  0291                     	;# 
  1675  0292                     	;# 
  1676  0293                     	;# 
  1677  0298                     	;# 
  1678  0298                     	;# 
  1679  0299                     	;# 
  1680  029A                     	;# 
  1681  0394                     	;# 
  1682  0395                     	;# 
  1683  0396                     	;# 
  1684  0FE4                     	;# 
  1685  0FE5                     	;# 
  1686  0FE6                     	;# 
  1687  0FE7                     	;# 
  1688  0FE8                     	;# 
  1689  0FE9                     	;# 
  1690  0FEA                     	;# 
  1691  0FEB                     	;# 
  1692  0FED                     	;# 
  1693  0FEE                     	;# 
  1694  0FEF                     	;# 
  1695  0000                     	;# 
  1696  0001                     	;# 
  1697  0002                     	;# 
  1698  0003                     	;# 
  1699  0004                     	;# 
  1700  0005                     	;# 
  1701  0006                     	;# 
  1702  0007                     	;# 
  1703  0008                     	;# 
  1704  0009                     	;# 
  1705  000A                     	;# 
  1706  000B                     	;# 
  1707  000C                     	;# 
  1708  000D                     	;# 
  1709  000E                     	;# 
  1710  0010                     	;# 
  1711  0011                     	;# 
  1712  0012                     	;# 
  1713  0015                     	;# 
  1714  0016                     	;# 
  1715  0016                     	;# 
  1716  0017                     	;# 
  1717  0018                     	;# 
  1718  0019                     	;# 
  1719  001A                     	;# 
  1720  001B                     	;# 
  1721  001C                     	;# 
  1722  008C                     	;# 
  1723  008D                     	;# 
  1724  008E                     	;# 
  1725  0090                     	;# 
  1726  0091                     	;# 
  1727  0092                     	;# 
  1728  0095                     	;# 
  1729  0096                     	;# 
  1730  0097                     	;# 
  1731  0099                     	;# 
  1732  009A                     	;# 
  1733  009B                     	;# 
  1734  009B                     	;# 
  1735  009C                     	;# 
  1736  009D                     	;# 
  1737  009E                     	;# 
  1738  010C                     	;# 
  1739  010D                     	;# 
  1740  010E                     	;# 
  1741  0116                     	;# 
  1742  0117                     	;# 
  1743  011D                     	;# 
  1744  018C                     	;# 
  1745  018D                     	;# 
  1746  018E                     	;# 
  1747  0191                     	;# 
  1748  0191                     	;# 
  1749  0192                     	;# 
  1750  0193                     	;# 
  1751  0193                     	;# 
  1752  0194                     	;# 
  1753  0195                     	;# 
  1754  0196                     	;# 
  1755  0197                     	;# 
  1756  0199                     	;# 
  1757  019A                     	;# 
  1758  019B                     	;# 
  1759  019B                     	;# 
  1760  019B                     	;# 
  1761  019B                     	;# 
  1762  019C                     	;# 
  1763  019C                     	;# 
  1764  019D                     	;# 
  1765  019E                     	;# 
  1766  019F                     	;# 
  1767  020D                     	;# 
  1768  0210                     	;# 
  1769  0211                     	;# 
  1770  0211                     	;# 
  1771  0212                     	;# 
  1772  0212                     	;# 
  1773  0213                     	;# 
  1774  0213                     	;# 
  1775  0214                     	;# 
  1776  0214                     	;# 
  1777  0215                     	;# 
  1778  0215                     	;# 
  1779  0215                     	;# 
  1780  0216                     	;# 
  1781  0216                     	;# 
  1782  0217                     	;# 
  1783  0217                     	;# 
  1784  0291                     	;# 
  1785  0291                     	;# 
  1786  0292                     	;# 
  1787  0293                     	;# 
  1788  0298                     	;# 
  1789  0298                     	;# 
  1790  0299                     	;# 
  1791  029A                     	;# 
  1792  0394                     	;# 
  1793  0395                     	;# 
  1794  0396                     	;# 
  1795  0FE4                     	;# 
  1796  0FE5                     	;# 
  1797  0FE6                     	;# 
  1798  0FE7                     	;# 
  1799  0FE8                     	;# 
  1800  0FE9                     	;# 
  1801  0FEA                     	;# 
  1802  0FEB                     	;# 
  1803  0FED                     	;# 
  1804  0FEE                     	;# 
  1805  0FEF                     	;# 
  1806  0000                     	;# 
  1807  0001                     	;# 
  1808  0002                     	;# 
  1809  0003                     	;# 
  1810  0004                     	;# 
  1811  0005                     	;# 
  1812  0006                     	;# 
  1813  0007                     	;# 
  1814  0008                     	;# 
  1815  0009                     	;# 
  1816  000A                     	;# 
  1817  000B                     	;# 
  1818  000C                     	;# 
  1819  000D                     	;# 
  1820  000E                     	;# 
  1821  0010                     	;# 
  1822  0011                     	;# 
  1823  0012                     	;# 
  1824  0015                     	;# 
  1825  0016                     	;# 
  1826  0016                     	;# 
  1827  0017                     	;# 
  1828  0018                     	;# 
  1829  0019                     	;# 
  1830  001A                     	;# 
  1831  001B                     	;# 
  1832  001C                     	;# 
  1833  008C                     	;# 
  1834  008D                     	;# 
  1835  008E                     	;# 
  1836  0090                     	;# 
  1837  0091                     	;# 
  1838  0092                     	;# 
  1839  0095                     	;# 
  1840  0096                     	;# 
  1841  0097                     	;# 
  1842  0099                     	;# 
  1843  009A                     	;# 
  1844  009B                     	;# 
  1845  009B                     	;# 
  1846  009C                     	;# 
  1847  009D                     	;# 
  1848  009E                     	;# 
  1849  010C                     	;# 
  1850  010D                     	;# 
  1851  010E                     	;# 
  1852  0116                     	;# 
  1853  0117                     	;# 
  1854  011D                     	;# 
  1855  018C                     	;# 
  1856  018D                     	;# 
  1857  018E                     	;# 
  1858  0191                     	;# 
  1859  0191                     	;# 
  1860  0192                     	;# 
  1861  0193                     	;# 
  1862  0193                     	;# 
  1863  0194                     	;# 
  1864  0195                     	;# 
  1865  0196                     	;# 
  1866  0197                     	;# 
  1867  0199                     	;# 
  1868  019A                     	;# 
  1869  019B                     	;# 
  1870  019B                     	;# 
  1871  019B                     	;# 
  1872  019B                     	;# 
  1873  019C                     	;# 
  1874  019C                     	;# 
  1875  019D                     	;# 
  1876  019E                     	;# 
  1877  019F                     	;# 
  1878  020D                     	;# 
  1879  0210                     	;# 
  1880  0211                     	;# 
  1881  0211                     	;# 
  1882  0212                     	;# 
  1883  0212                     	;# 
  1884  0213                     	;# 
  1885  0213                     	;# 
  1886  0214                     	;# 
  1887  0214                     	;# 
  1888  0215                     	;# 
  1889  0215                     	;# 
  1890  0215                     	;# 
  1891  0216                     	;# 
  1892  0216                     	;# 
  1893  0217                     	;# 
  1894  0217                     	;# 
  1895  0291                     	;# 
  1896  0291                     	;# 
  1897  0292                     	;# 
  1898  0293                     	;# 
  1899  0298                     	;# 
  1900  0298                     	;# 
  1901  0299                     	;# 
  1902  029A                     	;# 
  1903  0394                     	;# 
  1904  0395                     	;# 
  1905  0396                     	;# 
  1906  0FE4                     	;# 
  1907  0FE5                     	;# 
  1908  0FE6                     	;# 
  1909  0FE7                     	;# 
  1910  0FE8                     	;# 
  1911  0FE9                     	;# 
  1912  0FEA                     	;# 
  1913  0FEB                     	;# 
  1914  0FED                     	;# 
  1915  0FEE                     	;# 
  1916  0FEF                     	;# 
  1917  0000                     	;# 
  1918  0001                     	;# 
  1919  0002                     	;# 
  1920  0003                     	;# 
  1921  0004                     	;# 
  1922  0005                     	;# 
  1923  0006                     	;# 
  1924  0007                     	;# 
  1925  0008                     	;# 
  1926  0009                     	;# 
  1927  000A                     	;# 
  1928  000B                     	;# 
  1929  000C                     	;# 
  1930  000D                     	;# 
  1931  000E                     	;# 
  1932  0010                     	;# 
  1933  0011                     	;# 
  1934  0012                     	;# 
  1935  0015                     	;# 
  1936  0016                     	;# 
  1937  0016                     	;# 
  1938  0017                     	;# 
  1939  0018                     	;# 
  1940  0019                     	;# 
  1941  001A                     	;# 
  1942  001B                     	;# 
  1943  001C                     	;# 
  1944  008C                     	;# 
  1945  008D                     	;# 
  1946  008E                     	;# 
  1947  0090                     	;# 
  1948  0091                     	;# 
  1949  0092                     	;# 
  1950  0095                     	;# 
  1951  0096                     	;# 
  1952  0097                     	;# 
  1953  0099                     	;# 
  1954  009A                     	;# 
  1955  009B                     	;# 
  1956  009B                     	;# 
  1957  009C                     	;# 
  1958  009D                     	;# 
  1959  009E                     	;# 
  1960  010C                     	;# 
  1961  010D                     	;# 
  1962  010E                     	;# 
  1963  0116                     	;# 
  1964  0117                     	;# 
  1965  011D                     	;# 
  1966  018C                     	;# 
  1967  018D                     	;# 
  1968  018E                     	;# 
  1969  0191                     	;# 
  1970  0191                     	;# 
  1971  0192                     	;# 
  1972  0193                     	;# 
  1973  0193                     	;# 
  1974  0194                     	;# 
  1975  0195                     	;# 
  1976  0196                     	;# 
  1977  0197                     	;# 
  1978  0199                     	;# 
  1979  019A                     	;# 
  1980  019B                     	;# 
  1981  019B                     	;# 
  1982  019B                     	;# 
  1983  019B                     	;# 
  1984  019C                     	;# 
  1985  019C                     	;# 
  1986  019D                     	;# 
  1987  019E                     	;# 
  1988  019F                     	;# 
  1989  020D                     	;# 
  1990  0210                     	;# 
  1991  0211                     	;# 
  1992  0211                     	;# 
  1993  0212                     	;# 
  1994  0212                     	;# 
  1995  0213                     	;# 
  1996  0213                     	;# 
  1997  0214                     	;# 
  1998  0214                     	;# 
  1999  0215                     	;# 
  2000  0215                     	;# 
  2001  0215                     	;# 
  2002  0216                     	;# 
  2003  0216                     	;# 
  2004  0217                     	;# 
  2005  0217                     	;# 
  2006  0291                     	;# 
  2007  0291                     	;# 
  2008  0292                     	;# 
  2009  0293                     	;# 
  2010  0298                     	;# 
  2011  0298                     	;# 
  2012  0299                     	;# 
  2013  029A                     	;# 
  2014  0394                     	;# 
  2015  0395                     	;# 
  2016  0396                     	;# 
  2017  0FE4                     	;# 
  2018  0FE5                     	;# 
  2019  0FE6                     	;# 
  2020  0FE7                     	;# 
  2021  0FE8                     	;# 
  2022  0FE9                     	;# 
  2023  0FEA                     	;# 
  2024  0FEB                     	;# 
  2025  0FED                     	;# 
  2026  0FEE                     	;# 
  2027  0FEF                     	;# 
  2028                           
  2029                           	psect	idataBANK3
  2030  1227                     __pidataBANK3:	
  2031                           
  2032                           ;initializer for __product
  2033  1227  3463               	retlw	99
  2034  1228  3402               	retlw	2
  2035  1229  3400               	retlw	0
  2036  122A  3400               	retlw	0
  2037  122B  3400               	retlw	0
  2038  122C  3400               	retlw	0
  2039  122D  3400               	retlw	0
  2040  122E  3400               	retlw	0
  2041  122F  3400               	retlw	0
  2042  1230  3400               	retlw	0
  2043  1231  3400               	retlw	0
  2044  1232  3400               	retlw	0
  2045  1233  34FF               	retlw	255
  2046  1234  34FF               	retlw	255
  2047  1235  34FF               	retlw	255
  2048  1236  3400               	retlw	0
  2049  1237  3400               	retlw	0
  2050  1238  3400               	retlw	0
  2051  1239  3400               	retlw	0
  2052  123A  3400               	retlw	0
  2053  123B  3400               	retlw	0
  2054  123C  3400               	retlw	0
  2055  123D  3400               	retlw	0
  2056  123E  3400               	retlw	0
  2057  123F  3400               	retlw	0
  2058  1240  3400               	retlw	0
  2059  1241  3400               	retlw	0
  2060  1242  3400               	retlw	0
  2061  1243  3400               	retlw	0
  2062  1244  3400               	retlw	0
  2063  1245  3400               	retlw	0
  2064  1246  3400               	retlw	0
  2065                           
  2066                           	psect	stringtext
  2067  1000                     __pstringtext:	
  2068  1000                     _CC2500_registers_address:	
  2069  1000  3403               	retlw	3
  2070  1001  3416               	retlw	22
  2071  1002  3417               	retlw	23
  2072  1003  341E               	retlw	30
  2073  1004  341F               	retlw	31
  2074  1005  3420               	retlw	32
  2075  1006  342A               	retlw	42
  2076  1007  342B               	retlw	43
  2077  1008  340B               	retlw	11
  2078  1009  340C               	retlw	12
  2079  100A  340D               	retlw	13
  2080  100B  340E               	retlw	14
  2081  100C  340F               	retlw	15
  2082  100D  3410               	retlw	16
  2083  100E  3411               	retlw	17
  2084  100F  3412               	retlw	18
  2085  1010  3413               	retlw	19
  2086  1011  3414               	retlw	20
  2087  1012  340A               	retlw	10
  2088  1013  3415               	retlw	21
  2089  1014  3421               	retlw	33
  2090  1015  3422               	retlw	34
  2091  1016  3418               	retlw	24
  2092  1017  3419               	retlw	25
  2093  1018  341A               	retlw	26
  2094  1019  341B               	retlw	27
  2095  101A  341C               	retlw	28
  2096  101B  341D               	retlw	29
  2097  101C  3423               	retlw	35
  2098  101D  3424               	retlw	36
  2099  101E  3425               	retlw	37
  2100  101F  3426               	retlw	38
  2101  1020  3429               	retlw	41
  2102  1021  342C               	retlw	44
  2103  1022  342D               	retlw	45
  2104  1023  342E               	retlw	46
  2105  1024  3400               	retlw	0
  2106  1025  3401               	retlw	1
  2107  1026  3402               	retlw	2
  2108  1027  3407               	retlw	7
  2109  1028  3408               	retlw	8
  2110  1029  3409               	retlw	9
  2111  102A  3406               	retlw	6
  2112  102B  3404               	retlw	4
  2113  102C  3405               	retlw	5
  2114  102D  3427               	retlw	39
  2115  102E  3428               	retlw	40
  2116  102F                     __end_of_CC2500_registers_address:	
  2117  102F                     _CC2500_rfSettings:	
  2118  102F  3407               	retlw	7
  2119  1030  3407               	retlw	7
  2120  1031  3430               	retlw	48
  2121  1032  3487               	retlw	135
  2122  1033  346B               	retlw	107
  2123  1034  34F8               	retlw	248
  2124  1035  347F               	retlw	127
  2125  1036  343F               	retlw	63
  2126  1037  3409               	retlw	9
  2127  1038  3400               	retlw	0
  2128  1039  345C               	retlw	92
  2129  103A  34A7               	retlw	167
  2130  103B  3462               	retlw	98
  2131  103C  3486               	retlw	134
  2132  103D  3483               	retlw	131
  2133  103E  3403               	retlw	3
  2134  103F  3422               	retlw	34
  2135  1040  34F8               	retlw	248
  2136  1041  3400               	retlw	0
  2137  1042  3444               	retlw	68
  2138  1043  34B6               	retlw	182
  2139  1044  3410               	retlw	16
  2140  1045  3418               	retlw	24
  2141  1046  341D               	retlw	29
  2142  1047  341C               	retlw	28
  2143  1048  34C7               	retlw	199
  2144  1049  3400               	retlw	0
  2145  104A  34B2               	retlw	178
  2146  104B  34EA               	retlw	234
  2147  104C  340A               	retlw	10
  2148  104D  3400               	retlw	0
  2149  104E  3411               	retlw	17
  2150  104F  3459               	retlw	89
  2151  1050  3488               	retlw	136
  2152  1051  3431               	retlw	49
  2153  1052  340B               	retlw	11
  2154  1053  342F               	retlw	47
  2155  1054  342E               	retlw	46
  2156  1055  3406               	retlw	6
  2157  1056  3404               	retlw	4
  2158  1057  3405               	retlw	5
  2159  1058  3400               	retlw	0
  2160  1059  3430               	retlw	48
  2161  105A  34D3               	retlw	211
  2162  105B  3491               	retlw	145
  2163  105C  3441               	retlw	65
  2164  105D  3400               	retlw	0
  2165  105E                     __end_of_CC2500_rfSettings:	
  2166  105E                     _CC2500_patable_vaule:	
  2167  105E  34FE               	retlw	254
  2168  105F  34FE               	retlw	254
  2169  1060  34FE               	retlw	254
  2170  1061  34FE               	retlw	254
  2171  1062  34FE               	retlw	254
  2172  1063  34FE               	retlw	254
  2173  1064  34FE               	retlw	254
  2174  1065  34FE               	retlw	254
  2175  1066                     __end_of_CC2500_patable_vaule:	
  2176                           
  2177                           	psect	nvCOMMON
  2178  007D                     __pnvCOMMON:	
  2179  007D                     _product:	
  2180  007D                     	ds	1
  2181                           
  2182                           	psect	nvBANK1
  2183  00E9                     __pnvBANK1:	
  2184  00E9                     _Timer0:	
  2185  00E9                     	ds	1
  2186  00EA                     _WDT:	
  2187  00EA                     	ds	1
  2188  00EB                     _myMain:	
  2189  00EB                     	ds	1
  2190  00EC                     _Memory:	
  2191  00EC                     	ds	1
  2192  000C                     _PORTA	set	12
  2193  000D                     _PORTB	set	13
  2194  000E                     _PORTC	set	14
  2195  0015                     _TMR0	set	21
  2196  005F                     _GIE	set	95
  2197  005C                     _INTE	set	92
  2198  0059                     _INTF	set	89
  2199  005B                     _IOCIE	set	91
  2200  0058                     _IOCIF	set	88
  2201  005E                     _PEIE	set	94
  2202  0060                     _RA0	set	96
  2203  0063                     _RA3	set	99
  2204  0064                     _RA4	set	100
  2205  0066                     _RA6	set	102
  2206  0067                     _RA7	set	103
  2207  0068                     _RB0	set	104
  2208  0069                     _RB1	set	105
  2209  006B                     _RB3	set	107
  2210  006C                     _RB4	set	108
  2211  006D                     _RB5	set	109
  2212  0070                     _RC0	set	112
  2213  0071                     _RC1	set	113
  2214  0072                     _RC2	set	114
  2215  0074                     _RC4	set	116
  2216  0075                     _RC5	set	117
  2217  0077                     _RC7	set	119
  2218  005D                     _TMR0IE	set	93
  2219  005A                     _TMR0IF	set	90
  2220  009D                     _ADCON0	set	157
  2221  009E                     _ADCON1	set	158
  2222  009C                     _ADRESH	set	156
  2223  009B                     _ADRESL	set	155
  2224  0095                     _OPTION_REG	set	149
  2225  0099                     _OSCCON	set	153
  2226  008C                     _TRISA	set	140
  2227  008D                     _TRISB	set	141
  2228  008E                     _TRISC	set	142
  2229  0097                     _WDTCON	set	151
  2230  04E9                     _GO_nDONE	set	1257
  2231  0117                     _FVRCON	set	279
  2232  010C                     _LATA	set	268
  2233  010D                     _LATB	set	269
  2234  010E                     _LATC	set	270
  2235  018C                     _ANSELA	set	396
  2236  018D                     _ANSELB	set	397
  2237  018E                     _ANSELC	set	398
  2238  0192                     _PMADRH	set	402
  2239  0191                     _PMADRL	set	401
  2240  0196                     _PMCON2	set	406
  2241  0194                     _PMDATH	set	404
  2242  0193                     _PMDATL	set	403
  2243  0CAE                     _CFGS	set	3246
  2244  0CAC                     _FREE	set	3244
  2245  0CAD                     _LWLO	set	3245
  2246  0CA8                     _RD	set	3240
  2247  0CA9                     _WR	set	3241
  2248  0CAA                     _WREN	set	3242
  2249  1068                     _WPUB0	set	4200
  2250  1069                     _WPUB1	set	4201
  2251  106A                     _WPUB2	set	4202
  2252  0396                     _IOCBF	set	918
  2253  0395                     _IOCBN	set	917
  2254  0394                     _IOCBP	set	916
  2255  1CB2                     _IOCBF2	set	7346
  2256                           
  2257                           ; #config settings
  2258  0000                     
  2259                           	psect	cinit
  2260  0018                     start_initialization:	
  2261  0018                     __initialization:	
  2262                           
  2263                           ; Clear objects allocated to BITCOMMON
  2264  0018  01FC               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
  2265                           
  2266                           ; Clear objects allocated to COMMON
  2267  0019  01F8               	clrf	__pbssCOMMON& (0+127)
  2268  001A  01F9               	clrf	(__pbssCOMMON+1)& (0+127)
  2269  001B  01FA               	clrf	(__pbssCOMMON+2)& (0+127)
  2270  001C  01FB               	clrf	(__pbssCOMMON+3)& (0+127)
  2271                           
  2272                           ; Clear objects allocated to BANK1
  2273  001D  30A0               	movlw	low __pbssBANK1
  2274  001E  0084               	movwf	4
  2275  001F  3000               	movlw	high __pbssBANK1
  2276  0020  0085               	movwf	5
  2277  0021  3049               	movlw	73
  2278  0022  3187  27FA  3180   	fcall	clear_ram0
  2279                           
  2280                           ; Clear objects allocated to BANK2
  2281  0025  3020               	movlw	low __pbssBANK2
  2282  0026  0084               	movwf	4
  2283  0027  3001               	movlw	high __pbssBANK2
  2284  0028  0085               	movwf	5
  2285  0029  3044               	movlw	68
  2286  002A  3187  27FA  3180   	fcall	clear_ram0
  2287                           
  2288                           ; Clear objects allocated to BANK3
  2289  002D  30C0               	movlw	low __pbssBANK3
  2290  002E  0084               	movwf	4
  2291  002F  3001               	movlw	high __pbssBANK3
  2292  0030  0085               	movwf	5
  2293  0031  3010               	movlw	16
  2294  0032  3187  27FA  3180   	fcall	clear_ram0
  2295                           
  2296                           ; Clear objects allocated to BANK4
  2297  0035  3020               	movlw	low __pbssBANK4
  2298  0036  0084               	movwf	4
  2299  0037  3002               	movlw	high __pbssBANK4
  2300  0038  0085               	movwf	5
  2301  0039  3025               	movlw	37
  2302  003A  3187  27FA  3180   	fcall	clear_ram0
  2303                           
  2304                           ; Initialize objects allocated to BANK3
  2305  003D  3027               	movlw	low __pidataBANK3
  2306  003E  0084               	movwf	4
  2307  003F  3092               	movlw	(high __pidataBANK3)| (0+128)
  2308  0040  0085               	movwf	5
  2309  0041  30A0               	movlw	low __pdataBANK3
  2310  0042  0086               	movwf	6
  2311  0043  3001               	movlw	high __pdataBANK3
  2312  0044  0087               	movwf	7
  2313  0045  3020               	movlw	32
  2314  0046  319D  25EE         	fcall	init_ram
  2315  0048                     end_of_initialization:	
  2316                           ;End of C runtime variable initialization code
  2317                           
  2318  0048                     __end_of__initialization:	
  2319  0048  107E               	bcf	pic14e$flags,0	;clear compiler interrupt flag
  2320  0049  0020               	movlb	0
  2321  004A  3197  2F04         	ljmp	_main	;jump to C main() function
  2322                           
  2323                           	psect	bitbssCOMMON
  2324  03E0                     __pbitbssCOMMON:	
  2325  03E0                     _Receive_OK:	
  2326  03E0                     	ds	1
  2327  03E1                     _Transceive_OK:	
  2328  03E1                     	ds	1
  2329                           
  2330                           	psect	bssCOMMON
  2331  0078                     __pbssCOMMON:	
  2332  0078                     _Buz:	
  2333  0078                     	ds	1
  2334  0079                     _DimmerLights:	
  2335  0079                     	ds	1
  2336  007A                     _DimmerLightsIntr:	
  2337  007A                     	ds	1
  2338  007B                     _Sw:	
  2339  007B                     	ds	1
  2340                           
  2341                           	psect	bssBANK1
  2342  00A0                     __pbssBANK1:	
  2343  00A0                     _RF_Data:	
  2344  00A0                     	ds	21
  2345  00B5                     _RF_Count:	
  2346  00B5                     	ds	2
  2347  00B7                     _CRC:	
  2348  00B7                     	ds	1
  2349  00B8                     _DelayOff:	
  2350  00B8                     	ds	1
  2351  00B9                     _Dimmer:	
  2352  00B9                     	ds	1
  2353  00BA                     _DimmerLights11:	
  2354  00BA                     	ds	1
  2355  00BB                     _DimmerLights22:	
  2356  00BB                     	ds	1
  2357  00BC                     _DimmerLightsIntrIOC:	
  2358  00BC                     	ds	1
  2359  00BD                     _LED:	
  2360  00BD                     	ds	1
  2361  00BE                     _RF:	
  2362  00BE                     	ds	1
  2363  00BF                     _RFSW:	
  2364  00BF                     	ds	1
  2365  00C0                     _RSSI:	
  2366  00C0                     	ds	1
  2367  00C1                     _Rx_Length:	
  2368  00C1                     	ds	1
  2369  00C2                     _SPI0Buffer:	
  2370  00C2                     	ds	1
  2371  00C3                     _Tx_Length:	
  2372  00C3                     	ds	1
  2373  00C4                     _r_address:	
  2374  00C4                     	ds	1
  2375  00C5                     _r_data:	
  2376  00C5                     	ds	1
  2377  00C6                     _s_data:	
  2378  00C6                     	ds	1
  2379  00C7                     _DlySw1:	
  2380  00C7                     	ds	5
  2381  00CC                     _DlySw2:	
  2382  00CC                     	ds	5
  2383  00D1                     _RF1:	
  2384  00D1                     	ds	5
  2385  00D6                     _VarErrLED:	
  2386  00D6                     	ds	4
  2387  00DA                     _VarLED1:	
  2388  00DA                     	ds	4
  2389  00DE                     _VarLED2:	
  2390  00DE                     	ds	4
  2391  00E2                     _Dimmer1:	
  2392  00E2                     	ds	3
  2393  00E5                     __WDT:	
  2394  00E5                     	ds	2
  2395  00E7                     _RFSW1:	
  2396  00E7                     	ds	1
  2397  00E8                     _RFSW2:	
  2398  00E8                     	ds	1
  2399                           
  2400                           	psect	bssBANK2
  2401  0120                     __pbssBANK2:	
  2402  0120                     _DimmerLights1:	
  2403  0120                     	ds	15
  2404  012F                     _DimmerLights2:	
  2405  012F                     	ds	15
  2406  013E                     _Buz1:	
  2407  013E                     	ds	12
  2408  014A                     _Sw1:	
  2409  014A                     	ds	9
  2410  0153                     _Sw2:	
  2411  0153                     	ds	9
  2412  015C                     _VarTimer0:	
  2413  015C                     	ds	8
  2414                           
  2415                           	psect	bssBANK3
  2416  01C0                     __pbssBANK3:	
  2417  01C0                     __myMain:	
  2418  01C0                     	ds	16
  2419                           
  2420                           	psect	dataBANK3
  2421  01A0                     __pdataBANK3:	
  2422  01A0                     __product:	
  2423  01A0                     	ds	32
  2424                           
  2425                           	psect	bssBANK4
  2426  0220                     __pbssBANK4:	
  2427  0220                     _VarMemory:	
  2428  0220                     	ds	37
  2429                           
  2430                           	psect	clrtext
  2431  07FA                     clear_ram0:	
  2432                           ;	Called with FSR0 containing the base address, and
  2433                           ;	WREG with the size to clear
  2434                           
  2435  07FA  0064               	clrwdt	;clear the watchdog before getting into this loop
  2436  07FB                     clrloop0:	
  2437  07FB  0180               	clrf	0	;clear RAM location pointed to by FSR
  2438  07FC  3101               	addfsr 0,1
  2439  07FD  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2440  07FE  2FFB               	goto	clrloop0	;have we reached the end yet?
  2441  07FF  3400               	retlw	0	;all done for this memory range, return
  2442                           
  2443                           	psect	inittext
  2444  1DEE                     init_ram:	
  2445  1DEE  00FE               	movwf	126
  2446  1DEF                     initloop:	
  2447  1DEF  0012               	moviw fsr0++
  2448  1DF0  001E               	movwi fsr1++
  2449  1DF1  0BFE               	decfsz	126,f
  2450  1DF2  2DEF               	goto	initloop
  2451  1DF3  3400               	retlw	0
  2452                           
  2453                           	psect	cstackCOMMON
  2454  0070                     __pcstackCOMMON:	
  2455  0070                     ?_CC2500_WriteByte:	
  2456  0070                     ?_CC2500_WriteCommand:	
  2457                           ; 0 bytes @ 0x0
  2458                           
  2459  0070                     ?_CC2500_ReadStatus:	
  2460                           ; 0 bytes @ 0x0
  2461                           
  2462  0070                     ?_CC2500_ReadByte:	
  2463                           ; 0 bytes @ 0x0
  2464                           
  2465  0070                     ?_CC2500_PowerRST:	
  2466                           ; 0 bytes @ 0x0
  2467                           
  2468  0070                     ?_CC2500_InitSetREG:	
  2469                           ; 0 bytes @ 0x0
  2470                           
  2471  0070                     ?_CC2500_InitPATable:	
  2472                           ; 0 bytes @ 0x0
  2473                           
  2474  0070                     ?_CC2500_ClearTXFIFO:	
  2475                           ; 0 bytes @ 0x0
  2476                           
  2477  0070                     ?_CC2500_ClearRXFIFO:	
  2478                           ; 0 bytes @ 0x0
  2479                           
  2480  0070                     ?_CC2500_FrequencyCabr:	
  2481                           ; 0 bytes @ 0x0
  2482                           
  2483  0070                     ?_CC2500_SIDLEMode:	
  2484                           ; 0 bytes @ 0x0
  2485                           
  2486  0070                     ?_DlyOff_Initialization:	
  2487                           ; 0 bytes @ 0x0
  2488                           
  2489  0070                     ?_DlyOff_Main:	
  2490                           ; 0 bytes @ 0x0
  2491                           
  2492  0070                     ?_setTxData:	
  2493                           ; 0 bytes @ 0x0
  2494                           
  2495  0070                     ?_setDimmerLights_Initialization:	
  2496                           ; 0 bytes @ 0x0
  2497                           
  2498  0070                     ?_Dimmer_Initialization:	
  2499                           ; 0 bytes @ 0x0
  2500                           
  2501  0070                     ?_setMemory_GO:	
  2502                           ; 0 bytes @ 0x0
  2503                           
  2504  0070                     ?_setDimmerLights_Main:	
  2505                           ; 0 bytes @ 0x0
  2506                           
  2507  0070                     ?_setLED_Initialization:	
  2508                           ; 0 bytes @ 0x0
  2509                           
  2510  0070                     ?_setLED_Main:	
  2511                           ; 0 bytes @ 0x0
  2512                           
  2513  0070                     ?_Fosc_Set:	
  2514                           ; 0 bytes @ 0x0
  2515                           
  2516  0070                     ?_IO_Set:	
  2517                           ; 0 bytes @ 0x0
  2518                           
  2519  0070                     ?_TMR0_Set:	
  2520                           ; 0 bytes @ 0x0
  2521                           
  2522  0070                     ?_ADC_Set:	
  2523                           ; 0 bytes @ 0x0
  2524                           
  2525  0070                     ?_INT_Set:	
  2526                           ; 0 bytes @ 0x0
  2527                           
  2528  0070                     ?_IOC_Set:	
  2529                           ; 0 bytes @ 0x0
  2530                           
  2531  0070                     ?_WDT_Set:	
  2532                           ; 0 bytes @ 0x0
  2533                           
  2534  0070                     ?_IOC_ISR:	
  2535                           ; 0 bytes @ 0x0
  2536                           
  2537  0070                     ?_TMR0_ISR:	
  2538                           ; 0 bytes @ 0x0
  2539                           
  2540  0070                     ?_INT_ISR:	
  2541                           ; 0 bytes @ 0x0
  2542                           
  2543  0070                     ?_Flash_Memory_Write:	
  2544                           ; 0 bytes @ 0x0
  2545                           
  2546  0070                     ?_Flash_Memory_Modify:	
  2547                           ; 0 bytes @ 0x0
  2548                           
  2549  0070                     ?_WDT_Clearing:	
  2550                           ; 0 bytes @ 0x0
  2551                           
  2552  0070                     ?_myMain_Initialization:	
  2553                           ; 0 bytes @ 0x0
  2554                           
  2555  0070                     ?_Switch_Initialization:	
  2556                           ; 0 bytes @ 0x0
  2557                           
  2558  0070                     ?_RF_Initialization:	
  2559                           ; 0 bytes @ 0x0
  2560                           
  2561  0070                     ?_my_Main:	
  2562                           ; 0 bytes @ 0x0
  2563                           
  2564  0070                     ?_Switch_Main:	
  2565                           ; 0 bytes @ 0x0
  2566                           
  2567  0070                     ?_RF_Main:	
  2568                           ; 0 bytes @ 0x0
  2569                           
  2570  0070                     ?_setSw_Enable:	
  2571                           ; 0 bytes @ 0x0
  2572                           
  2573  0070                     ?_setRF_Initialization:	
  2574                           ; 0 bytes @ 0x0
  2575                           
  2576  0070                     ?_setRF_Main:	
  2577                           ; 0 bytes @ 0x0
  2578                           
  2579  0070                     ?_RF_RxDisable:	
  2580                           ; 0 bytes @ 0x0
  2581                           
  2582  0070                     ?_getRxData:	
  2583                           ; 0 bytes @ 0x0
  2584                           
  2585  0070                     ?_setLog_Code:	
  2586                           ; 0 bytes @ 0x0
  2587                           
  2588  0070                     ?_setControl_Lights_Table:	
  2589                           ; 0 bytes @ 0x0
  2590                           
  2591  0070                     ?_setRFSW_Control:	
  2592                           ; 0 bytes @ 0x0
  2593                           
  2594  0070                     ?_setRFSW_AdjControl:	
  2595                           ; 0 bytes @ 0x0
  2596                           
  2597  0070                     ?_setRF_DimmerValue:	
  2598                           ; 0 bytes @ 0x0
  2599                           
  2600  0070                     ?_setSw_Initialization:	
  2601                           ; 0 bytes @ 0x0
  2602                           
  2603  0070                     ?_setSw_Main:	
  2604                           ; 0 bytes @ 0x0
  2605                           
  2606  0070                     ?_Sw_DimmerOnFunc:	
  2607                           ; 0 bytes @ 0x0
  2608                           
  2609  0070                     ?_Sw_DimmerAdjFunc:	
  2610                           ; 0 bytes @ 0x0
  2611                           
  2612  0070                     ?_Sw_DimmerOffFunc:	
  2613                           ; 0 bytes @ 0x0
  2614                           
  2615  0070                     ?_Buzzer_Initialization:	
  2616                           ; 0 bytes @ 0x0
  2617                           
  2618  0070                     ?_Buz_Counter:	
  2619                           ; 0 bytes @ 0x0
  2620                           
  2621  0070                     ??_Buz_Counter:	
  2622                           ; 0 bytes @ 0x0
  2623                           
  2624  0070                     ?_Buzzer_Main:	
  2625                           ; 0 bytes @ 0x0
  2626                           
  2627  0070                     ?_CC2500_TxData:	
  2628                           ; 0 bytes @ 0x0
  2629                           
  2630  0070                     ?_CC2500_RxData:	
  2631                           ; 0 bytes @ 0x0
  2632                           
  2633  0070                     ?_CC2500_PowerOnInitial:	
  2634                           ; 0 bytes @ 0x0
  2635                           
  2636  0070                     ?_DelayOffPointSelect:	
  2637                           ; 0 bytes @ 0x0
  2638                           
  2639  0070                     ?_DelayOff_Initialization:	
  2640                           ; 0 bytes @ 0x0
  2641                           
  2642  0070                     ?_DelayOff_Main:	
  2643                           ; 0 bytes @ 0x0
  2644                           
  2645  0070                     ?_DimmerIntrIOCPointSelect:	
  2646                           ; 0 bytes @ 0x0
  2647                           
  2648  0070                     ??_DimmerIntrIOCPointSelect:	
  2649                           ; 0 bytes @ 0x0
  2650                           
  2651  0070                     ?_setDimmerLights_IntrIOC_GO:	
  2652                           ; 0 bytes @ 0x0
  2653                           
  2654  0070                     ?_DimmerIntrPointSelect:	
  2655                           ; 0 bytes @ 0x0
  2656                           
  2657  0070                     ??_DimmerIntrPointSelect:	
  2658                           ; 0 bytes @ 0x0
  2659                           
  2660  0070                     ?_setDimmerLights_IntrControl:	
  2661                           ; 0 bytes @ 0x0
  2662                           
  2663  0070                     ?_DimmerLightsPointSelect:	
  2664                           ; 0 bytes @ 0x0
  2665                           
  2666  0070                     ?_DimmerLights_Initialization:	
  2667                           ; 0 bytes @ 0x0
  2668                           
  2669  0070                     ?_DimmerLights_Close:	
  2670                           ; 0 bytes @ 0x0
  2671                           
  2672  0070                     ?_DimmerLights_Main:	
  2673                           ; 0 bytes @ 0x0
  2674                           
  2675  0070                     ?_setDimmerLights_AdjRF:	
  2676                           ; 0 bytes @ 0x0
  2677                           
  2678  0070                     ?_LedPointSelect:	
  2679                           ; 0 bytes @ 0x0
  2680                           
  2681  0070                     ?_LED_Initialization:	
  2682                           ; 0 bytes @ 0x0
  2683                           
  2684  0070                     ?_LED_Main:	
  2685                           ; 0 bytes @ 0x0
  2686                           
  2687  0070                     ?_Mcu_Initialization:	
  2688                           ; 0 bytes @ 0x0
  2689                           
  2690  0070                     ?_ISR:	
  2691                           ; 0 bytes @ 0x0
  2692                           
  2693  0070                     ?_setDimmerReClock:	
  2694                           ; 0 bytes @ 0x0
  2695                           
  2696  0070                     ?_setINT_GO:	
  2697                           ; 0 bytes @ 0x0
  2698                           
  2699  0070                     ?_Flash_Memory_Initialization:	
  2700                           ; 0 bytes @ 0x0
  2701                           
  2702  0070                     ?_Flash_Memory_Main:	
  2703                           ; 0 bytes @ 0x0
  2704                           
  2705  0070                     ?_Flash_Memory_Unlock:	
  2706                           ; 0 bytes @ 0x0
  2707                           
  2708  0070                     ?_Flash_Memory_Erasing:	
  2709                           ; 0 bytes @ 0x0
  2710                           
  2711  0070                     ?_WDT_Main:	
  2712                           ; 0 bytes @ 0x0
  2713                           
  2714  0070                     ?_RfPointSelect:	
  2715                           ; 0 bytes @ 0x0
  2716                           
  2717  0070                     ?_RfSWPointSelect:	
  2718                           ; 0 bytes @ 0x0
  2719                           
  2720  0070                     ?_TouchPower:	
  2721                           ; 0 bytes @ 0x0
  2722                           
  2723  0070                     ?_SwPointSelect:	
  2724                           ; 0 bytes @ 0x0
  2725                           
  2726  0070                     ?i1_RfPointSelect:	
  2727                           ; 0 bytes @ 0x0
  2728                           
  2729  0070                     ??i1_RfPointSelect:	
  2730                           ; 0 bytes @ 0x0
  2731                           
  2732  0070                     ?_DelayTimejudge:	
  2733                           ; 0 bytes @ 0x0
  2734                           
  2735  0070                     ?_getDimmerLights_StatusFlag:	
  2736                           ; 1 bytes @ 0x0
  2737                           
  2738  0070                     ?_getPercentValue:	
  2739                           ; 1 bytes @ 0x0
  2740                           
  2741  0070                     ?_Flash_Memory_Read:	
  2742                           ; 1 bytes @ 0x0
  2743                           
  2744  0070                     ?_setPercentValue:	
  2745                           ; 1 bytes @ 0x0
  2746                           
  2747  0070                     setRF_Initialization@rf:	
  2748                           ; 1 bytes @ 0x0
  2749                           
  2750                           
  2751                           ; 1 bytes @ 0x0
  2752  0070                     	ds	1
  2753  0071                     DimmerIntrIOCPointSelect@lights:	
  2754  0071                     DimmerIntrPointSelect@lights:	
  2755                           ; 1 bytes @ 0x1
  2756                           
  2757  0071                     i1RfPointSelect@rf:	
  2758                           ; 1 bytes @ 0x1
  2759                           
  2760                           
  2761                           ; 1 bytes @ 0x1
  2762  0071                     	ds	1
  2763  0072                     ?_setRF_ReceiveGO:	
  2764  0072                     ?_setRF_RxStatus:	
  2765                           ; 0 bytes @ 0x2
  2766                           
  2767  0072                     ??_setDimmerLights_IntrIOC_GO:	
  2768                           ; 0 bytes @ 0x2
  2769                           
  2770  0072                     ??_setDimmerLights_IntrControl:	
  2771                           ; 0 bytes @ 0x2
  2772                           
  2773  0072                     setDimmerLights_IntrIOC_GO@lights:	
  2774                           ; 0 bytes @ 0x2
  2775                           
  2776  0072                     setRF_ReceiveGO@command:	
  2777                           ; 1 bytes @ 0x2
  2778                           
  2779  0072                     setRF_RxStatus@command:	
  2780                           ; 1 bytes @ 0x2
  2781                           
  2782                           
  2783                           ; 1 bytes @ 0x2
  2784  0072                     	ds	1
  2785  0073                     ??_IOC_ISR:	
  2786  0073                     ??_setRF_ReceiveGO:	
  2787                           ; 0 bytes @ 0x3
  2788                           
  2789  0073                     ??_setRF_RxStatus:	
  2790                           ; 0 bytes @ 0x3
  2791                           
  2792  0073                     ??_setDimmerReClock:	
  2793                           ; 0 bytes @ 0x3
  2794                           
  2795  0073                     setRF_ReceiveGO@rf:	
  2796                           ; 0 bytes @ 0x3
  2797                           
  2798  0073                     setRF_RxStatus@rf:	
  2799                           ; 1 bytes @ 0x3
  2800                           
  2801                           
  2802                           ; 1 bytes @ 0x3
  2803  0073                     	ds	1
  2804  0074                     ??_INT_ISR:	
  2805                           
  2806                           ; 0 bytes @ 0x4
  2807  0074                     	ds	2
  2808  0076                     setDimmerLights_IntrControl@lights:	
  2809                           
  2810                           ; 1 bytes @ 0x6
  2811  0076                     	ds	1
  2812  0077                     ??_TMR0_ISR:	
  2813  0077                     ??_ISR:	
  2814                           ; 0 bytes @ 0x7
  2815                           
  2816                           
  2817                           ; 0 bytes @ 0x7
  2818  0077                     	ds	1
  2819                           
  2820                           	psect	cstackBANK0
  2821  0020                     __pcstackBANK0:	
  2822  0020                     ??_CC2500_WriteByte:	
  2823  0020                     ??_CC2500_ReadByte:	
  2824                           ; 0 bytes @ 0x0
  2825                           
  2826  0020                     ?_DelayTime_1us:	
  2827                           ; 0 bytes @ 0x0
  2828                           
  2829  0020                     ??_DelayTimejudge:	
  2830                           ; 0 bytes @ 0x0
  2831                           
  2832  0020                     ??_Dimmer_Initialization:	
  2833                           ; 0 bytes @ 0x0
  2834                           
  2835  0020                     ??_getDimmerLights_StatusFlag:	
  2836                           ; 0 bytes @ 0x0
  2837                           
  2838  0020                     ??_setMemory_GO:	
  2839                           ; 0 bytes @ 0x0
  2840                           
  2841  0020                     ??_Fosc_Set:	
  2842                           ; 0 bytes @ 0x0
  2843                           
  2844  0020                     ??_IO_Set:	
  2845                           ; 0 bytes @ 0x0
  2846                           
  2847  0020                     ??_TMR0_Set:	
  2848                           ; 0 bytes @ 0x0
  2849                           
  2850  0020                     ??_ADC_Set:	
  2851                           ; 0 bytes @ 0x0
  2852                           
  2853  0020                     ??_INT_Set:	
  2854                           ; 0 bytes @ 0x0
  2855                           
  2856  0020                     ??_IOC_Set:	
  2857                           ; 0 bytes @ 0x0
  2858                           
  2859  0020                     ??_WDT_Set:	
  2860                           ; 0 bytes @ 0x0
  2861                           
  2862  0020                     ??_Flash_Memory_Read:	
  2863                           ; 0 bytes @ 0x0
  2864                           
  2865  0020                     ??_Flash_Memory_Write:	
  2866                           ; 0 bytes @ 0x0
  2867                           
  2868  0020                     ??_WDT_Clearing:	
  2869                           ; 0 bytes @ 0x0
  2870                           
  2871  0020                     ??_myMain_Initialization:	
  2872                           ; 0 bytes @ 0x0
  2873                           
  2874  0020                     ??_setRF_Initialization:	
  2875                           ; 0 bytes @ 0x0
  2876                           
  2877  0020                     ??_Buzzer_Initialization:	
  2878                           ; 0 bytes @ 0x0
  2879                           
  2880  0020                     ??_Buzzer_Main:	
  2881                           ; 0 bytes @ 0x0
  2882                           
  2883  0020                     ??_DelayOffPointSelect:	
  2884                           ; 0 bytes @ 0x0
  2885                           
  2886  0020                     ??_DimmerLightsPointSelect:	
  2887                           ; 0 bytes @ 0x0
  2888                           
  2889  0020                     ??_LedPointSelect:	
  2890                           ; 0 bytes @ 0x0
  2891                           
  2892  0020                     ??_setINT_GO:	
  2893                           ; 0 bytes @ 0x0
  2894                           
  2895  0020                     ??_Flash_Memory_Unlock:	
  2896                           ; 0 bytes @ 0x0
  2897                           
  2898  0020                     ??_Flash_Memory_Erasing:	
  2899                           ; 0 bytes @ 0x0
  2900                           
  2901  0020                     ??_WDT_Main:	
  2902                           ; 0 bytes @ 0x0
  2903                           
  2904  0020                     ??_RfPointSelect:	
  2905                           ; 0 bytes @ 0x0
  2906                           
  2907  0020                     ??_RfSWPointSelect:	
  2908                           ; 0 bytes @ 0x0
  2909                           
  2910  0020                     ??_TouchPower:	
  2911                           ; 0 bytes @ 0x0
  2912                           
  2913  0020                     ??_SwPointSelect:	
  2914                           ; 0 bytes @ 0x0
  2915                           
  2916  0020                     ?___awdiv:	
  2917                           ; 0 bytes @ 0x0
  2918                           
  2919  0020                     ?___ftpack:	
  2920                           ; 2 bytes @ 0x0
  2921                           
  2922  0020                     setINT_GO@command:	
  2923                           ; 3 bytes @ 0x0
  2924                           
  2925  0020                     DelayTime_1us@count:	
  2926                           ; 1 bytes @ 0x0
  2927                           
  2928  0020                     ___awdiv@divisor:	
  2929                           ; 2 bytes @ 0x0
  2930                           
  2931  0020                     ___ftpack@arg:	
  2932                           ; 2 bytes @ 0x0
  2933                           
  2934                           
  2935                           ; 3 bytes @ 0x0
  2936  0020                     	ds	1
  2937  0021                     ??_RF_Initialization:	
  2938  0021                     ??_Mcu_Initialization:	
  2939                           ; 0 bytes @ 0x1
  2940                           
  2941  0021                     CC2500_WriteByte@loop_a:	
  2942                           ; 0 bytes @ 0x1
  2943                           
  2944  0021                     CC2500_ReadByte@loop_b:	
  2945                           ; 1 bytes @ 0x1
  2946                           
  2947  0021                     DelayOffPointSelect@sw:	
  2948                           ; 1 bytes @ 0x1
  2949                           
  2950  0021                     DelayTimejudge@value:	
  2951                           ; 1 bytes @ 0x1
  2952                           
  2953  0021                     DimmerLightsPointSelect@lights:	
  2954                           ; 1 bytes @ 0x1
  2955                           
  2956  0021                     getDimmerLights_StatusFlag@Status:	
  2957                           ; 1 bytes @ 0x1
  2958                           
  2959  0021                     LedPointSelect@led:	
  2960                           ; 1 bytes @ 0x1
  2961                           
  2962  0021                     Flash_Memory_Read@i:	
  2963                           ; 1 bytes @ 0x1
  2964                           
  2965  0021                     Flash_Memory_Write@i:	
  2966                           ; 1 bytes @ 0x1
  2967                           
  2968  0021                     RfPointSelect@rf:	
  2969                           ; 1 bytes @ 0x1
  2970                           
  2971  0021                     RfSWPointSelect@sw:	
  2972                           ; 1 bytes @ 0x1
  2973                           
  2974  0021                     SwPointSelect@sw:	
  2975                           ; 1 bytes @ 0x1
  2976                           
  2977                           
  2978                           ; 1 bytes @ 0x1
  2979  0021                     	ds	1
  2980  0022                     ??_CC2500_WriteCommand:	
  2981  0022                     ??_CC2500_ReadStatus:	
  2982                           ; 0 bytes @ 0x2
  2983                           
  2984  0022                     ??_DelayTime_1us:	
  2985                           ; 0 bytes @ 0x2
  2986                           
  2987  0022                     ?_CC2500_WriteREG:	
  2988                           ; 0 bytes @ 0x2
  2989                           
  2990  0022                     ??_DlyOff_Initialization:	
  2991                           ; 0 bytes @ 0x2
  2992                           
  2993  0022                     ?_setSw_Status:	
  2994                           ; 0 bytes @ 0x2
  2995                           
  2996  0022                     ?_setRFSW_Status:	
  2997                           ; 0 bytes @ 0x2
  2998                           
  2999  0022                     ?_setDimmerLights_Trigger:	
  3000                           ; 0 bytes @ 0x2
  3001                           
  3002  0022                     ?_setDimmerLights_Switch:	
  3003                           ; 0 bytes @ 0x2
  3004                           
  3005  0022                     ??_setTxData:	
  3006                           ; 0 bytes @ 0x2
  3007                           
  3008  0022                     ??_setDimmerLights_Initialization:	
  3009                           ; 0 bytes @ 0x2
  3010                           
  3011  0022                     ?_setLED:	
  3012                           ; 0 bytes @ 0x2
  3013                           
  3014  0022                     ??_setLED_Main:	
  3015                           ; 0 bytes @ 0x2
  3016                           
  3017  0022                     ??_setSw_Enable:	
  3018                           ; 0 bytes @ 0x2
  3019                           
  3020  0022                     ?_setRF_Enable:	
  3021                           ; 0 bytes @ 0x2
  3022                           
  3023  0022                     ?_setDimmerLights_AdjGo:	
  3024                           ; 0 bytes @ 0x2
  3025                           
  3026  0022                     ?_setDimmerLights_TriggerAdj:	
  3027                           ; 0 bytes @ 0x2
  3028                           
  3029  0022                     ?_setRF_Learn:	
  3030                           ; 0 bytes @ 0x2
  3031                           
  3032  0022                     CC2500_WriteREG@value:	
  3033                           ; 0 bytes @ 0x2
  3034                           
  3035  0022                     DlyOff_Initialization@sw:	
  3036                           ; 1 bytes @ 0x2
  3037                           
  3038  0022                     DelayTimejudge@i:	
  3039                           ; 1 bytes @ 0x2
  3040                           
  3041  0022                     _getDimmerLights_StatusFlag$1916:	
  3042                           ; 1 bytes @ 0x2
  3043                           
  3044  0022                     setDimmerLights_Switch@command:	
  3045                           ; 1 bytes @ 0x2
  3046                           
  3047  0022                     setDimmerLights_AdjGo@command:	
  3048                           ; 1 bytes @ 0x2
  3049                           
  3050  0022                     setDimmerLights_Trigger@command:	
  3051                           ; 1 bytes @ 0x2
  3052                           
  3053  0022                     setDimmerLights_TriggerAdj@command:	
  3054                           ; 1 bytes @ 0x2
  3055                           
  3056  0022                     setLED@command:	
  3057                           ; 1 bytes @ 0x2
  3058                           
  3059  0022                     Flash_Memory_Read@address:	
  3060                           ; 1 bytes @ 0x2
  3061                           
  3062  0022                     setMemory_GO@command:	
  3063                           ; 1 bytes @ 0x2
  3064                           
  3065  0022                     setRF_Learn@command:	
  3066                           ; 1 bytes @ 0x2
  3067                           
  3068  0022                     setRF_Enable@command:	
  3069                           ; 1 bytes @ 0x2
  3070                           
  3071  0022                     setRFSW_Status@command:	
  3072                           ; 1 bytes @ 0x2
  3073                           
  3074  0022                     setSw_Enable@command:	
  3075                           ; 1 bytes @ 0x2
  3076                           
  3077  0022                     setSw_Status@command:	
  3078                           ; 1 bytes @ 0x2
  3079                           
  3080  0022                     DelayTime_1us@i:	
  3081                           ; 1 bytes @ 0x2
  3082                           
  3083  0022                     ___awdiv@dividend:	
  3084                           ; 2 bytes @ 0x2
  3085                           
  3086                           
  3087                           ; 2 bytes @ 0x2
  3088  0022                     	ds	1
  3089  0023                     ??_CC2500_WriteREG:	
  3090  0023                     ??_setSw_Status:	
  3091                           ; 0 bytes @ 0x3
  3092                           
  3093  0023                     ??_setRFSW_Status:	
  3094                           ; 0 bytes @ 0x3
  3095                           
  3096  0023                     ??_setDimmerLights_Trigger:	
  3097                           ; 0 bytes @ 0x3
  3098                           
  3099  0023                     ??_setDimmerLights_Switch:	
  3100                           ; 0 bytes @ 0x3
  3101                           
  3102  0023                     ??_setLED:	
  3103                           ; 0 bytes @ 0x3
  3104                           
  3105  0023                     ??_setRF_Enable:	
  3106                           ; 0 bytes @ 0x3
  3107                           
  3108  0023                     ??_DelayOff_Initialization:	
  3109                           ; 0 bytes @ 0x3
  3110                           
  3111  0023                     ?_setDelayOff_GO:	
  3112                           ; 0 bytes @ 0x3
  3113                           
  3114  0023                     ??_DimmerLights_Close:	
  3115                           ; 0 bytes @ 0x3
  3116                           
  3117  0023                     ??_setDimmerLights_AdjGo:	
  3118                           ; 0 bytes @ 0x3
  3119                           
  3120  0023                     ??_setDimmerLights_TriggerAdj:	
  3121                           ; 0 bytes @ 0x3
  3122                           
  3123  0023                     ??_setRF_Learn:	
  3124                           ; 0 bytes @ 0x3
  3125                           
  3126  0023                     CC2500_WriteCommand@command:	
  3127                           ; 0 bytes @ 0x3
  3128                           
  3129  0023                     CC2500_ReadStatus@status_addr:	
  3130                           ; 1 bytes @ 0x3
  3131                           
  3132  0023                     setDelayOff_GO@command:	
  3133                           ; 1 bytes @ 0x3
  3134                           
  3135  0023                     setDimmerLights_Initialization@lights:	
  3136                           ; 1 bytes @ 0x3
  3137                           
  3138  0023                     setDimmerLights_Switch@lights:	
  3139                           ; 1 bytes @ 0x3
  3140                           
  3141  0023                     setDimmerLights_AdjGo@lights:	
  3142                           ; 1 bytes @ 0x3
  3143                           
  3144  0023                     setDimmerLights_Trigger@lights:	
  3145                           ; 1 bytes @ 0x3
  3146                           
  3147  0023                     setDimmerLights_TriggerAdj@lights:	
  3148                           ; 1 bytes @ 0x3
  3149                           
  3150  0023                     setLED@led:	
  3151                           ; 1 bytes @ 0x3
  3152                           
  3153  0023                     Flash_Memory_Read@ret:	
  3154                           ; 1 bytes @ 0x3
  3155                           
  3156  0023                     setRF_Learn@rf:	
  3157                           ; 1 bytes @ 0x3
  3158                           
  3159  0023                     setTxData@rf:	
  3160                           ; 1 bytes @ 0x3
  3161                           
  3162  0023                     setRF_Enable@rf:	
  3163                           ; 1 bytes @ 0x3
  3164                           
  3165  0023                     setRFSW_Status@sw:	
  3166                           ; 1 bytes @ 0x3
  3167                           
  3168  0023                     setSw_Status@sw:	
  3169                           ; 1 bytes @ 0x3
  3170                           
  3171  0023                     ___ftpack@exp:	
  3172                           ; 1 bytes @ 0x3
  3173                           
  3174                           
  3175                           ; 1 bytes @ 0x3
  3176  0023                     	ds	1
  3177  0024                     ??_CC2500_ClearTXFIFO:	
  3178  0024                     ??_CC2500_ClearRXFIFO:	
  3179                           ; 0 bytes @ 0x4
  3180                           
  3181  0024                     ??_CC2500_SIDLEMode:	
  3182                           ; 0 bytes @ 0x4
  3183                           
  3184  0024                     ?_setDimmerLights:	
  3185                           ; 0 bytes @ 0x4
  3186                           
  3187  0024                     ??_setLED_Initialization:	
  3188                           ; 0 bytes @ 0x4
  3189                           
  3190  0024                     ??_Flash_Memory_Modify:	
  3191                           ; 0 bytes @ 0x4
  3192                           
  3193  0024                     ??_RF_RxDisable:	
  3194                           ; 0 bytes @ 0x4
  3195                           
  3196  0024                     ??_setSw_Initialization:	
  3197                           ; 0 bytes @ 0x4
  3198                           
  3199  0024                     ??_Sw_DimmerAdjFunc:	
  3200                           ; 0 bytes @ 0x4
  3201                           
  3202  0024                     ??_CC2500_TxData:	
  3203                           ; 0 bytes @ 0x4
  3204                           
  3205  0024                     ??_CC2500_RxData:	
  3206                           ; 0 bytes @ 0x4
  3207                           
  3208  0024                     ??_DimmerLights_Initialization:	
  3209                           ; 0 bytes @ 0x4
  3210                           
  3211  0024                     ??___awdiv:	
  3212                           ; 0 bytes @ 0x4
  3213                           
  3214  0024                     CC2500_WriteREG@w_addr:	
  3215                           ; 0 bytes @ 0x4
  3216                           
  3217  0024                     setDelayOff_GO@value:	
  3218                           ; 1 bytes @ 0x4
  3219                           
  3220  0024                     setDimmerLights@status:	
  3221                           ; 1 bytes @ 0x4
  3222                           
  3223  0024                     setLED_Initialization@led:	
  3224                           ; 1 bytes @ 0x4
  3225                           
  3226  0024                     setLED_Main@led:	
  3227                           ; 1 bytes @ 0x4
  3228                           
  3229  0024                     RF_RxDisable@rf:	
  3230                           ; 1 bytes @ 0x4
  3231                           
  3232  0024                     setSw_Initialization@sw:	
  3233                           ; 1 bytes @ 0x4
  3234                           
  3235  0024                     Sw_DimmerAdjFunc@Idle:	
  3236                           ; 1 bytes @ 0x4
  3237                           
  3238  0024                     ___ftpack@sign:	
  3239                           ; 1 bytes @ 0x4
  3240                           
  3241  0024                     DelayTime_1us@j:	
  3242                           ; 1 bytes @ 0x4
  3243                           
  3244                           
  3245                           ; 2 bytes @ 0x4
  3246  0024                     	ds	1
  3247  0025                     ??_CC2500_InitSetREG:	
  3248  0025                     ??_CC2500_InitPATable:	
  3249                           ; 0 bytes @ 0x5
  3250                           
  3251  0025                     ??_setDimmerLights:	
  3252                           ; 0 bytes @ 0x5
  3253                           
  3254  0025                     ??_Switch_Initialization:	
  3255                           ; 0 bytes @ 0x5
  3256                           
  3257  0025                     ??___ftpack:	
  3258                           ; 0 bytes @ 0x5
  3259                           
  3260  0025                     ??_setDelayOff_GO:	
  3261                           ; 0 bytes @ 0x5
  3262                           
  3263  0025                     ??_LED_Initialization:	
  3264                           ; 0 bytes @ 0x5
  3265                           
  3266  0025                     ??_LED_Main:	
  3267                           ; 0 bytes @ 0x5
  3268                           
  3269  0025                     CC2500_TxData@loop_e:	
  3270                           ; 0 bytes @ 0x5
  3271                           
  3272  0025                     CC2500_RxData@loop_f:	
  3273                           ; 1 bytes @ 0x5
  3274                           
  3275  0025                     Sw_DimmerAdjFunc@sw:	
  3276                           ; 1 bytes @ 0x5
  3277                           
  3278  0025                     ___awdiv@counter:	
  3279                           ; 1 bytes @ 0x5
  3280                           
  3281                           
  3282                           ; 1 bytes @ 0x5
  3283  0025                     	ds	1
  3284  0026                     ??_CC2500_PowerRST:	
  3285  0026                     ??_CC2500_FrequencyCabr:	
  3286                           ; 0 bytes @ 0x6
  3287                           
  3288  0026                     CC2500_InitSetREG@temp1:	
  3289                           ; 0 bytes @ 0x6
  3290                           
  3291  0026                     CC2500_InitPATable@temp:	
  3292                           ; 1 bytes @ 0x6
  3293                           
  3294  0026                     setDimmerLights@lights:	
  3295                           ; 1 bytes @ 0x6
  3296                           
  3297  0026                     Flash_Memory_Modify@i:	
  3298                           ; 1 bytes @ 0x6
  3299                           
  3300  0026                     ___awdiv@sign:	
  3301                           ; 1 bytes @ 0x6
  3302                           
  3303                           
  3304                           ; 1 bytes @ 0x6
  3305  0026                     	ds	1
  3306  0027                     ??_Flash_Memory_Main:	
  3307  0027                     CC2500_InitSetREG@temp2:	
  3308                           ; 0 bytes @ 0x7
  3309                           
  3310  0027                     CC2500_InitPATable@loop_d:	
  3311                           ; 1 bytes @ 0x7
  3312                           
  3313  0027                     setDelayOff_GO@sw:	
  3314                           ; 1 bytes @ 0x7
  3315                           
  3316  0027                     ___awdiv@quotient:	
  3317                           ; 1 bytes @ 0x7
  3318                           
  3319                           
  3320                           ; 2 bytes @ 0x7
  3321  0027                     	ds	1
  3322  0028                     ?___awtoft:	
  3323  0028                     CC2500_InitSetREG@loop_c:	
  3324                           ; 3 bytes @ 0x8
  3325                           
  3326  0028                     ___awtoft@c:	
  3327                           ; 1 bytes @ 0x8
  3328                           
  3329                           
  3330                           ; 2 bytes @ 0x8
  3331  0028                     	ds	1
  3332  0029                     ?_setBuz:	
  3333  0029                     ??_CC2500_PowerOnInitial:	
  3334                           ; 0 bytes @ 0x9
  3335                           
  3336  0029                     setBuz@time:	
  3337                           ; 0 bytes @ 0x9
  3338                           
  3339                           
  3340                           ; 2 bytes @ 0x9
  3341  0029                     	ds	2
  3342  002B                     ??_setBuz:	
  3343  002B                     ??___awtoft:	
  3344                           ; 0 bytes @ 0xB
  3345                           
  3346                           
  3347                           ; 0 bytes @ 0xB
  3348  002B                     	ds	1
  3349  002C                     setBuz@count:	
  3350                           
  3351                           ; 1 bytes @ 0xC
  3352  002C                     	ds	1
  3353  002D                     ??_my_Main:	
  3354  002D                     ??_setLog_Code:	
  3355                           ; 0 bytes @ 0xD
  3356                           
  3357  002D                     ___awtoft@sign:	
  3358                           ; 0 bytes @ 0xD
  3359                           
  3360                           
  3361                           ; 1 bytes @ 0xD
  3362  002D                     	ds	1
  3363  002E                     ?___ftdiv:	
  3364  002E                     ?___ftmul:	
  3365                           ; 3 bytes @ 0xE
  3366                           
  3367  002E                     setLog_Code@rf:	
  3368                           ; 3 bytes @ 0xE
  3369                           
  3370  002E                     ___ftdiv@f2:	
  3371                           ; 1 bytes @ 0xE
  3372                           
  3373  002E                     ___ftmul@f1:	
  3374                           ; 3 bytes @ 0xE
  3375                           
  3376                           
  3377                           ; 3 bytes @ 0xE
  3378  002E                     	ds	3
  3379  0031                     ___ftdiv@f1:	
  3380  0031                     ___ftmul@f2:	
  3381                           ; 3 bytes @ 0x11
  3382                           
  3383                           
  3384                           ; 3 bytes @ 0x11
  3385  0031                     	ds	3
  3386  0034                     ??___ftdiv:	
  3387  0034                     ??___ftmul:	
  3388                           ; 0 bytes @ 0x14
  3389                           
  3390                           
  3391                           ; 0 bytes @ 0x14
  3392  0034                     	ds	4
  3393  0038                     ___ftdiv@cntr:	
  3394  0038                     ___ftmul@exp:	
  3395                           ; 1 bytes @ 0x18
  3396                           
  3397                           
  3398                           ; 1 bytes @ 0x18
  3399  0038                     	ds	1
  3400  0039                     ___ftdiv@f3:	
  3401  0039                     ___ftmul@f3_as_product:	
  3402                           ; 3 bytes @ 0x19
  3403                           
  3404                           
  3405                           ; 3 bytes @ 0x19
  3406  0039                     	ds	3
  3407  003C                     ___ftdiv@exp:	
  3408  003C                     ___ftmul@cntr:	
  3409                           ; 1 bytes @ 0x1C
  3410                           
  3411                           
  3412                           ; 1 bytes @ 0x1C
  3413  003C                     	ds	1
  3414  003D                     ___ftdiv@sign:	
  3415  003D                     ___ftmul@sign:	
  3416                           ; 1 bytes @ 0x1D
  3417                           
  3418                           
  3419                           ; 1 bytes @ 0x1D
  3420  003D                     	ds	1
  3421  003E                     ?___ftadd:	
  3422  003E                     ___ftadd@f1:	
  3423                           ; 3 bytes @ 0x1E
  3424                           
  3425                           
  3426                           ; 3 bytes @ 0x1E
  3427  003E                     	ds	3
  3428  0041                     ___ftadd@f2:	
  3429                           
  3430                           ; 3 bytes @ 0x21
  3431  0041                     	ds	3
  3432  0044                     ??___ftadd:	
  3433                           
  3434                           ; 0 bytes @ 0x24
  3435  0044                     	ds	4
  3436  0048                     ___ftadd@sign:	
  3437                           
  3438                           ; 1 bytes @ 0x28
  3439  0048                     	ds	1
  3440  0049                     ___ftadd@exp2:	
  3441                           
  3442                           ; 1 bytes @ 0x29
  3443  0049                     	ds	1
  3444  004A                     ___ftadd@exp1:	
  3445                           
  3446                           ; 1 bytes @ 0x2A
  3447  004A                     	ds	1
  3448  004B                     ?___fttol:	
  3449  004B                     ___fttol@f1:	
  3450                           ; 4 bytes @ 0x2B
  3451                           
  3452                           
  3453                           ; 3 bytes @ 0x2B
  3454  004B                     	ds	4
  3455  004F                     ??___fttol:	
  3456                           
  3457                           ; 0 bytes @ 0x2F
  3458  004F                     	ds	4
  3459  0053                     ___fttol@sign1:	
  3460                           
  3461                           ; 1 bytes @ 0x33
  3462  0053                     	ds	1
  3463  0054                     ___fttol@lval:	
  3464                           
  3465                           ; 4 bytes @ 0x34
  3466  0054                     	ds	4
  3467  0058                     ___fttol@exp1:	
  3468                           
  3469                           ; 1 bytes @ 0x38
  3470  0058                     	ds	1
  3471  0059                     ??_getPercentValue:	
  3472  0059                     ??_setPercentValue:	
  3473                           ; 0 bytes @ 0x39
  3474                           
  3475  0059                     setPercentValue@value:	
  3476                           ; 0 bytes @ 0x39
  3477                           
  3478                           
  3479                           ; 1 bytes @ 0x39
  3480  0059                     	ds	1
  3481  005A                     setPercentValue@i:	
  3482                           
  3483                           ; 3 bytes @ 0x3A
  3484  005A                     	ds	1
  3485  005B                     getPercentValue@value:	
  3486                           
  3487                           ; 1 bytes @ 0x3B
  3488  005B                     	ds	1
  3489  005C                     getPercentValue@i:	
  3490                           
  3491                           ; 3 bytes @ 0x3C
  3492  005C                     	ds	1
  3493  005D                     ?_setRF_DimmerLights:	
  3494  005D                     ??_Flash_Memory_Initialization:	
  3495                           ; 0 bytes @ 0x3D
  3496                           
  3497  005D                     setRF_DimmerLights@on:	
  3498                           ; 0 bytes @ 0x3D
  3499                           
  3500                           
  3501                           ; 1 bytes @ 0x3D
  3502  005D                     	ds	1
  3503  005E                     ??_setRF_DimmerLights:	
  3504  005E                     Flash_Memory_Initialization@i:	
  3505                           ; 0 bytes @ 0x3E
  3506                           
  3507                           
  3508                           ; 1 bytes @ 0x3E
  3509  005E                     	ds	1
  3510  005F                     ??_setDimmerLights_AdjRF:	
  3511                           
  3512                           ; 0 bytes @ 0x3F
  3513  005F                     	ds	1
  3514  0060                     setDimmerLights_AdjRF@lights:	
  3515  0060                     setRF_DimmerLights@status:	
  3516                           ; 1 bytes @ 0x40
  3517                           
  3518                           
  3519                           ; 1 bytes @ 0x40
  3520  0060                     	ds	1
  3521  0061                     ??_setRF_DimmerValue:	
  3522  0061                     setRF_DimmerLights@lights:	
  3523                           ; 0 bytes @ 0x41
  3524                           
  3525                           
  3526                           ; 1 bytes @ 0x41
  3527  0061                     	ds	1
  3528  0062                     ??_DlyOff_Main:	
  3529  0062                     ?_setDimmerLights_Adj:	
  3530                           ; 0 bytes @ 0x42
  3531                           
  3532  0062                     ??_setRFSW_Control:	
  3533                           ; 0 bytes @ 0x42
  3534                           
  3535  0062                     ??_Sw_DimmerOnFunc:	
  3536                           ; 0 bytes @ 0x42
  3537                           
  3538  0062                     ??_Sw_DimmerOffFunc:	
  3539                           ; 0 bytes @ 0x42
  3540                           
  3541  0062                     setDimmerLights_Adj@status:	
  3542                           ; 0 bytes @ 0x42
  3543                           
  3544  0062                     Sw_DimmerOnFunc@Idle:	
  3545                           ; 1 bytes @ 0x42
  3546                           
  3547                           
  3548                           ; 1 bytes @ 0x42
  3549  0062                     	ds	1
  3550  0063                     ??_setDimmerLights_Adj:	
  3551  0063                     setRFSW_Control@sw:	
  3552                           ; 0 bytes @ 0x43
  3553                           
  3554  0063                     setRF_DimmerValue@lights:	
  3555                           ; 1 bytes @ 0x43
  3556                           
  3557  0063                     Sw_DimmerOnFunc@sw:	
  3558                           ; 1 bytes @ 0x43
  3559                           
  3560                           
  3561                           ; 1 bytes @ 0x43
  3562  0063                     	ds	1
  3563  0064                     ??_setRFSW_AdjControl:	
  3564  0064                     DlyOff_Main@sw:	
  3565                           ; 0 bytes @ 0x44
  3566                           
  3567  0064                     setDimmerLights_Adj@lights:	
  3568                           ; 1 bytes @ 0x44
  3569                           
  3570  0064                     Sw_DimmerOffFunc@sw:	
  3571                           ; 1 bytes @ 0x44
  3572                           
  3573                           
  3574                           ; 1 bytes @ 0x44
  3575  0064                     	ds	1
  3576  0065                     ??_setDimmerLights_Main:	
  3577  0065                     ??_setSw_Main:	
  3578                           ; 0 bytes @ 0x45
  3579                           
  3580  0065                     ??_DelayOff_Main:	
  3581                           ; 0 bytes @ 0x45
  3582                           
  3583  0065                     setDimmerLights_Main@clear:	
  3584                           ; 0 bytes @ 0x45
  3585                           
  3586                           
  3587                           ; 1 bytes @ 0x45
  3588  0065                     	ds	1
  3589  0066                     setDimmerLights_Main@lights:	
  3590  0066                     setRFSW_AdjControl@sw:	
  3591                           ; 1 bytes @ 0x46
  3592                           
  3593                           
  3594                           ; 1 bytes @ 0x46
  3595  0066                     	ds	1
  3596  0067                     ??_setControl_Lights_Table:	
  3597  0067                     ??_DimmerLights_Main:	
  3598                           ; 0 bytes @ 0x47
  3599                           
  3600  0067                     setControl_Lights_Table@rf:	
  3601                           ; 0 bytes @ 0x47
  3602                           
  3603  0067                     _setSw_Main$5079:	
  3604                           ; 1 bytes @ 0x47
  3605                           
  3606                           
  3607                           ; 1 bytes @ 0x47
  3608  0067                     	ds	1
  3609  0068                     ??_getRxData:	
  3610  0068                     getRxData@rf:	
  3611                           ; 0 bytes @ 0x48
  3612                           
  3613  0068                     _setSw_Main$5080:	
  3614                           ; 1 bytes @ 0x48
  3615                           
  3616                           
  3617                           ; 1 bytes @ 0x48
  3618  0068                     	ds	1
  3619  0069                     ??_setRF_Main:	
  3620  0069                     setSw_Main@sw:	
  3621                           ; 0 bytes @ 0x49
  3622                           
  3623                           
  3624                           ; 1 bytes @ 0x49
  3625  0069                     	ds	1
  3626  006A                     ??_Switch_Main:	
  3627  006A                     setRF_Main@rf:	
  3628                           ; 0 bytes @ 0x4A
  3629                           
  3630                           
  3631                           ; 1 bytes @ 0x4A
  3632  006A                     	ds	1
  3633  006B                     _setRF_Main$4260:	
  3634                           
  3635                           ; 1 bytes @ 0x4B
  3636  006B                     	ds	1
  3637  006C                     ??_RF_Main:	
  3638  006C                     ?_main:	
  3639                           ; 0 bytes @ 0x4C
  3640                           
  3641  006C                     main@argc:	
  3642                           ; 2 bytes @ 0x4C
  3643                           
  3644                           
  3645                           ; 2 bytes @ 0x4C
  3646  006C                     	ds	2
  3647  006E                     main@argv:	
  3648                           
  3649                           ; 2 bytes @ 0x4E
  3650  006E                     	ds	2
  3651  0070                     ??_main:	
  3652                           
  3653                           	psect	maintext
  3654  1704                     __pmaintext:	
  3655                           ; 0 bytes @ 0x50
  3656 ;;
  3657 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  3658 ;;
  3659 ;; *************** function _main *****************
  3660 ;; Defined at:
  3661 ;;		line 7 in file "../src/Main_B1.c"
  3662 ;; Parameters:    Size  Location     Type
  3663 ;;  argc            2   76[BANK0 ] int 
  3664 ;;  argv            2   78[BANK0 ] PTR PTR unsigned char 
  3665 ;; Auto vars:     Size  Location     Type
  3666 ;;		None
  3667 ;; Return value:  Size  Location     Type
  3668 ;;                  2   76[BANK0 ] int 
  3669 ;; Registers used:
  3670 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3671 ;; Tracked objects:
  3672 ;;		On entry : 17F/0
  3673 ;;		On exit  : 0/0
  3674 ;;		Unchanged: 0/0
  3675 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3676 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3677 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3678 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3679 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3680 ;;Total ram usage:        4 bytes
  3681 ;; Hardware stack levels required when called:   15
  3682 ;; This function calls:
  3683 ;;		_Buzzer_Initialization
  3684 ;;		_Buzzer_Main
  3685 ;;		_CC2500_PowerOnInitial
  3686 ;;		_DelayOff_Initialization
  3687 ;;		_DelayOff_Main
  3688 ;;		_DimmerLights_Initialization
  3689 ;;		_DimmerLights_Main
  3690 ;;		_Flash_Memory_Initialization
  3691 ;;		_Flash_Memory_Main
  3692 ;;		_LED_Initialization
  3693 ;;		_LED_Main
  3694 ;;		_Mcu_Initialization
  3695 ;;		_RF_Initialization
  3696 ;;		_RF_Main
  3697 ;;		_Switch_Initialization
  3698 ;;		_Switch_Main
  3699 ;;		_WDT_Main
  3700 ;;		_myMain_Initialization
  3701 ;;		_my_Main
  3702 ;; This function is called by:
  3703 ;;		Startup code after reset
  3704 ;; This function uses a non-reentrant model
  3705 ;;
  3706                           
  3707                           
  3708                           ;psect for function _main
  3709  1704                     _main:	
  3710                           
  3711                           ;Main_B1.c: 9: myMain_Initialization();
  3712                           
  3713                           ;incstack = 0
  3714                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3715  1704  3190  2075  3197   	fcall	_myMain_Initialization
  3716                           
  3717                           ;Main_B1.c: 10: Mcu_Initialization();
  3718  1707  3191  215E  3197   	fcall	_Mcu_Initialization
  3719                           
  3720                           ;Main_B1.c: 11: Flash_Memory_Initialization();
  3721  170A  3184  2467  3197   	fcall	_Flash_Memory_Initialization
  3722                           
  3723                           ;Main_B1.c: 12: LED_Initialization();
  3724  170D  319E  2696  3197   	fcall	_LED_Initialization
  3725                           
  3726                           ;Main_B1.c: 13: Buzzer_Initialization();
  3727  1710  319E  2651  3197   	fcall	_Buzzer_Initialization
  3728                           
  3729                           ;Main_B1.c: 15: ;;
  3730                           ;Main_B1.c: 16: ;;
  3731                           ;Main_B1.c: 17: ;;
  3732                           ;Main_B1.c: 18: ;;
  3733                           ;Main_B1.c: 19: DelayOff_Initialization();
  3734  1713  319E  2609  3197   	fcall	_DelayOff_Initialization
  3735                           
  3736                           ;Main_B1.c: 21: DimmerLights_Initialization();
  3737  1716  3190  20CB  3197   	fcall	_DimmerLights_Initialization
  3738                           
  3739                           ;Main_B1.c: 22: ;;
  3740                           ;Main_B1.c: 23: ;;
  3741                           ;Main_B1.c: 24: ;;
  3742                           ;Main_B1.c: 26: Switch_Initialization();
  3743  1719  319E  26E2  3197   	fcall	_Switch_Initialization
  3744                           
  3745                           ;Main_B1.c: 27: RF_Initialization();
  3746  171C  319D  25DB  3197   	fcall	_RF_Initialization
  3747                           
  3748                           ;Main_B1.c: 28: CC2500_PowerOnInitial();
  3749  171F  3190  2089  3197   	fcall	_CC2500_PowerOnInitial
  3750  1722                     l7196:	
  3751                           ;Main_B1.c: 35: ;;
  3752                           ;Main_B1.c: 39: ;;
  3753                           ;Main_B1.c: 43: ;;
  3754                           ;Main_B1.c: 47: ;;
  3755                           
  3756                           ;Main_B1.c: 29: ;;
  3757                           ;Main_B1.c: 32: while (1) {
  3758                           
  3759                           
  3760                           ;Main_B1.c: 58: }
  3761                           ;Main_B1.c: 61: if (myMain->T0_Timerout) {
  3762  1722  0021               	movlb	1	; select bank1
  3763  1723  086B               	movf	_myMain^(0+128),w
  3764  1724  0086               	movwf	6
  3765  1725  3001               	movlw	1	; select bank2/3
  3766  1726  0087               	movwf	7
  3767  1727  1C81               	btfss	1,1
  3768  1728  2F22               	goto	l7196
  3769                           
  3770                           ;Main_B1.c: 62: myMain->T0_Timerout = 0;
  3771  1729  086B               	movf	_myMain^(0+128),w
  3772  172A  0086               	movwf	6
  3773  172B  3001               	movlw	1	; select bank2/3
  3774  172C  0087               	movwf	7
  3775  172D  1081               	bcf	1,1
  3776                           
  3777                           ;Main_B1.c: 63: my_Main();
  3778  172E  318B  2348  3197   	fcall	_my_Main
  3779                           
  3780                           ;Main_B1.c: 64: WDT_Main();
  3781  1731  3191  2194  3197   	fcall	_WDT_Main
  3782                           
  3783                           ;Main_B1.c: 65: ;;
  3784                           ;Main_B1.c: 66: ;;
  3785                           ;Main_B1.c: 67: if (myMain->PowerON) {
  3786  1734  0021               	movlb	1	; select bank1
  3787  1735  086B               	movf	_myMain^(0+128),w
  3788  1736  0086               	movwf	6
  3789  1737  3001               	movlw	1	; select bank2/3
  3790  1738  0087               	movwf	7
  3791  1739  1C01               	btfss	1,0
  3792  173A  2F22               	goto	l7196
  3793                           
  3794                           ;Main_B1.c: 68: Flash_Memory_Main();
  3795  173B  3195  25A0  3197   	fcall	_Flash_Memory_Main
  3796                           
  3797                           ;Main_B1.c: 70: LED_Main();
  3798  173E  319E  26A2  3197   	fcall	_LED_Main
  3799                           
  3800                           ;Main_B1.c: 71: Buzzer_Main();
  3801  1741  318F  275E  3197   	fcall	_Buzzer_Main
  3802                           
  3803                           ;Main_B1.c: 73: ;;
  3804                           ;Main_B1.c: 74: ;;
  3805                           ;Main_B1.c: 75: ;;
  3806                           ;Main_B1.c: 76: ;;
  3807                           ;Main_B1.c: 78: ;;
  3808                           ;Main_B1.c: 79: DimmerLights_Main();
  3809  1744  319E  2667  3197   	fcall	_DimmerLights_Main
  3810                           
  3811                           ;Main_B1.c: 80: Switch_Main();
  3812  1747  319E  2621  3197   	fcall	_Switch_Main
  3813                           
  3814                           ;Main_B1.c: 81: ;;
  3815                           ;Main_B1.c: 82: ;;
  3816                           ;Main_B1.c: 84: RF_Main();
  3817  174A  319D  25DF  3197   	fcall	_RF_Main
  3818                           
  3819                           ;Main_B1.c: 85: DelayOff_Main();
  3820  174D  319E  2611  3197   	fcall	_DelayOff_Main
  3821                           
  3822                           ;Main_B1.c: 86: ;;
  3823  1750  2F22               	goto	l7196
  3824  1751                     __end_of_main:	
  3825                           
  3826                           	psect	text1
  3827  0B48                     __ptext1:	
  3828 ;; *************** function _my_Main *****************
  3829 ;; Defined at:
  3830 ;;		line 123 in file "../src/Main_B1.c"
  3831 ;; Parameters:    Size  Location     Type
  3832 ;;		None
  3833 ;; Auto vars:     Size  Location     Type
  3834 ;;		None
  3835 ;; Return value:  Size  Location     Type
  3836 ;;		None               void
  3837 ;; Registers used:
  3838 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3839 ;; Tracked objects:
  3840 ;;		On entry : 0/0
  3841 ;;		On exit  : 0/0
  3842 ;;		Unchanged: 0/0
  3843 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3844 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3845 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3846 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3847 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3848 ;;Total ram usage:        0 bytes
  3849 ;; Hardware stack levels used:    1
  3850 ;; Hardware stack levels required when called:    7
  3851 ;; This function calls:
  3852 ;;		_setBuz
  3853 ;;		_setRF_Enable
  3854 ;;		_setSw_Enable
  3855 ;; This function is called by:
  3856 ;;		_main
  3857 ;; This function uses a non-reentrant model
  3858 ;;
  3859                           
  3860                           
  3861                           ;psect for function _my_Main
  3862  0B48                     _my_Main:	
  3863                           
  3864                           ;Main_B1.c: 125: if (myMain->PowerON == 0) {
  3865                           
  3866                           ;incstack = 0
  3867                           ; Regs used in _my_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3868  0B48  0021               	movlb	1	; select bank1
  3869  0B49  086B               	movf	_myMain^(0+128),w
  3870  0B4A  0086               	movwf	6
  3871  0B4B  3001               	movlw	1	; select bank2/3
  3872  0B4C  0087               	movwf	7
  3873  0B4D  1801               	btfsc	1,0
  3874  0B4E  2B8A               	goto	l7090
  3875                           
  3876                           ;Main_B1.c: 126: myMain->PowerCount++;
  3877  0B4F  0A6B               	incf	_myMain^(0+128),w
  3878  0B50  0086               	movwf	6
  3879  0B51  3001               	movlw	1	; select bank2/3
  3880  0B52  0087               	movwf	7
  3881  0B53  3001               	movlw	1
  3882  0B54  0781               	addwf	1,f
  3883  0B55  3141               	addfsr 1,1
  3884  0B56  1803               	skipnc
  3885  0B57  0A81               	incf	1,f
  3886                           
  3887                           ;Main_B1.c: 127: if (myMain->PowerCount == 150)
  3888  0B58  0A6B               	incf	_myMain^(0+128),w
  3889  0B59  0086               	movwf	6
  3890  0B5A  3001               	movlw	1	; select bank2/3
  3891  0B5B  0087               	movwf	7
  3892  0B5C  3F40               	moviw [0]fsr1
  3893  0B5D  3A96               	xorlw	150
  3894  0B5E  1D03               	skipz
  3895  0B5F  2B62               	goto	u6295
  3896  0B60  3F41               	moviw [1]fsr1
  3897  0B61  3A00               	xorlw	0
  3898  0B62                     u6295:	
  3899  0B62  1D03               	skipz
  3900  0B63  0008               	return
  3901                           
  3902                           ;Main_B1.c: 128: {
  3903                           ;Main_B1.c: 129: myMain->PowerCount = 0;
  3904  0B64  0A6B               	incf	_myMain^(0+128),w
  3905  0B65  0086               	movwf	6
  3906  0B66  3001               	movlw	1	; select bank2/3
  3907  0B67  0087               	movwf	7
  3908  0B68  3000               	movlw	0
  3909  0B69  3FC0               	movwi [0]fsr1
  3910  0B6A  3FC1               	movwi [1]fsr1
  3911                           
  3912                           ;Main_B1.c: 130: myMain->PowerON = 1;
  3913  0B6B  086B               	movf	_myMain^(0+128),w
  3914  0B6C  0086               	movwf	6
  3915  0B6D  3001               	movlw	1	; select bank2/3
  3916  0B6E  0087               	movwf	7
  3917  0B6F  1401               	bsf	1,0
  3918                           
  3919                           ;Main_B1.c: 133: ;;
  3920                           ;Main_B1.c: 137: ;;
  3921                           ;Main_B1.c: 143: setBuz(3, 50);
  3922  0B70  3032               	movlw	50
  3923  0B71  0020               	movlb	0	; select bank0
  3924  0B72  00A9               	movwf	setBuz@time
  3925  0B73  3000               	movlw	0
  3926  0B74  00AA               	movwf	setBuz@time+1
  3927  0B75  3003               	movlw	3
  3928  0B76  318B  23BC  318B   	fcall	_setBuz
  3929                           
  3930                           ;Main_B1.c: 144: myMain->SelfTest = 1;
  3931  0B79  0021               	movlb	1	; select bank1
  3932  0B7A  086B               	movf	_myMain^(0+128),w
  3933  0B7B  0086               	movwf	6
  3934  0B7C  3001               	movlw	1	; select bank2/3
  3935  0B7D  0087               	movwf	7
  3936  0B7E  1701               	bsf	1,6
  3937                           
  3938                           ;Main_B1.c: 146: setSw_Enable(1);
  3939  0B7F  3001               	movlw	1
  3940  0B80  3191  21B0  318B   	fcall	_setSw_Enable
  3941                           
  3942                           ;Main_B1.c: 149: setRF_Enable(1, 1);
  3943  0B83  0020               	movlb	0	; select bank0
  3944  0B84  01A2               	clrf	setRF_Enable@command
  3945  0B85  0AA2               	incf	setRF_Enable@command,f
  3946  0B86  3001               	movlw	1
  3947  0B87  3193  23A6         	fcall	_setRF_Enable
  3948                           
  3949                           ;Main_B1.c: 153: }
  3950                           ;Main_B1.c: 154: } else {
  3951  0B89  0008               	return
  3952  0B8A                     l7090:	
  3953                           
  3954                           ;Main_B1.c: 162: myMain->Count1++;
  3955  0B8A  0021               	movlb	1	; select bank1
  3956  0B8B  086B               	movf	_myMain^(0+128),w
  3957  0B8C  3E05               	addlw	5
  3958  0B8D  0086               	movwf	6
  3959  0B8E  3001               	movlw	1	; select bank2/3
  3960  0B8F  0087               	movwf	7
  3961  0B90  3001               	movlw	1
  3962  0B91  0781               	addwf	1,f
  3963  0B92  3141               	addfsr 1,1
  3964  0B93  1803               	skipnc
  3965  0B94  0A81               	incf	1,f
  3966                           
  3967                           ;Main_B1.c: 163: if (myMain->Count1 == 100)
  3968  0B95  086B               	movf	_myMain^(0+128),w
  3969  0B96  3E05               	addlw	5
  3970  0B97  0086               	movwf	6
  3971  0B98  3001               	movlw	1	; select bank2/3
  3972  0B99  0087               	movwf	7
  3973  0B9A  3F40               	moviw [0]fsr1
  3974  0B9B  3A64               	xorlw	100
  3975  0B9C  1D03               	skipz
  3976  0B9D  2BA0               	goto	u6305
  3977  0B9E  3F41               	moviw [1]fsr1
  3978  0B9F  3A00               	xorlw	0
  3979  0BA0                     u6305:	
  3980  0BA0  1D03               	skipz
  3981  0BA1  0008               	return
  3982                           
  3983                           ;Main_B1.c: 164: {
  3984                           ;Main_B1.c: 165: myMain->Count1 = 0;
  3985  0BA2  086B               	movf	_myMain^(0+128),w
  3986  0BA3  3E05               	addlw	5
  3987  0BA4  0086               	movwf	6
  3988  0BA5  3001               	movlw	1	; select bank2/3
  3989  0BA6  0087               	movwf	7
  3990  0BA7  3000               	movlw	0
  3991  0BA8  3FC0               	movwi [0]fsr1
  3992  0BA9  3FC1               	movwi [1]fsr1
  3993                           
  3994                           ;Main_B1.c: 178: if (myMain->Flag) {
  3995  0BAA  086B               	movf	_myMain^(0+128),w
  3996  0BAB  0086               	movwf	6
  3997  0BAC  3001               	movlw	1	; select bank2/3
  3998  0BAD  0087               	movwf	7
  3999  0BAE  1D81               	btfss	1,3
  4000  0BAF  2BB6               	goto	l7098
  4001                           
  4002                           ;Main_B1.c: 179: myMain->Flag = 0;
  4003  0BB0  086B               	movf	_myMain^(0+128),w
  4004  0BB1  0086               	movwf	6
  4005  0BB2  3001               	movlw	1	; select bank2/3
  4006  0BB3  0087               	movwf	7
  4007  0BB4  1181               	bcf	1,3
  4008                           
  4009                           ;Main_B1.c: 188: } else {
  4010  0BB5  0008               	return
  4011  0BB6                     l7098:	
  4012                           
  4013                           ;Main_B1.c: 189: myMain->Flag = 1;
  4014  0BB6  086B               	movf	_myMain^(0+128),w
  4015  0BB7  0086               	movwf	6
  4016  0BB8  3001               	movlw	1	; select bank2/3
  4017  0BB9  0087               	movwf	7
  4018  0BBA  1581               	bsf	1,3
  4019  0BBB  0008               	return
  4020  0BBC                     __end_of_my_Main:	
  4021                           
  4022                           	psect	text2
  4023  11B0                     __ptext2:	
  4024 ;; *************** function _setSw_Enable *****************
  4025 ;; Defined at:
  4026 ;;		line 85 in file "../src/Switch_B1.c"
  4027 ;; Parameters:    Size  Location     Type
  4028 ;;  command         1    wreg     unsigned char 
  4029 ;; Auto vars:     Size  Location     Type
  4030 ;;  command         1    2[BANK0 ] unsigned char 
  4031 ;; Return value:  Size  Location     Type
  4032 ;;		None               void
  4033 ;; Registers used:
  4034 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4035 ;; Tracked objects:
  4036 ;;		On entry : 0/0
  4037 ;;		On exit  : 0/0
  4038 ;;		Unchanged: 0/0
  4039 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4040 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4041 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4042 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4043 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4044 ;;Total ram usage:        1 bytes
  4045 ;; Hardware stack levels used:    1
  4046 ;; Hardware stack levels required when called:    6
  4047 ;; This function calls:
  4048 ;;		_SwPointSelect
  4049 ;; This function is called by:
  4050 ;;		_my_Main
  4051 ;; This function uses a non-reentrant model
  4052 ;;
  4053                           
  4054                           
  4055                           ;psect for function _setSw_Enable
  4056  11B0                     _setSw_Enable:	
  4057                           
  4058                           ;incstack = 0
  4059                           ; Regs used in _setSw_Enable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4060                           ;setSw_Enable@command stored from wreg
  4061  11B0  0020               	movlb	0	; select bank0
  4062  11B1  00A2               	movwf	setSw_Enable@command
  4063                           
  4064                           ;Switch_B1.c: 88: SwPointSelect(1);
  4065  11B2  3001               	movlw	1
  4066  11B3  319F  27D8  3191   	fcall	_SwPointSelect
  4067                           
  4068                           ;Switch_B1.c: 89: Sw->Enable = command;
  4069  11B6  087B               	movf	_Sw,w
  4070  11B7  0086               	movwf	6
  4071  11B8  3001               	movlw	1	; select bank2/3
  4072  11B9  0087               	movwf	7
  4073  11BA  0020               	movlb	0	; select bank0
  4074  11BB  0822               	movf	setSw_Enable@command,w
  4075  11BC  1001               	bcf	1,0
  4076  11BD  1D03               	skipz
  4077  11BE  1401               	bsf	1,0
  4078                           
  4079                           ;Switch_B1.c: 93: SwPointSelect(2);
  4080  11BF  3002               	movlw	2
  4081  11C0  319F  27D8         	fcall	_SwPointSelect
  4082                           
  4083                           ;Switch_B1.c: 94: Sw->Enable = command;
  4084  11C2  087B               	movf	_Sw,w
  4085  11C3  0086               	movwf	6
  4086  11C4  3001               	movlw	1	; select bank2/3
  4087  11C5  0087               	movwf	7
  4088  11C6  0020               	movlb	0	; select bank0
  4089  11C7  0822               	movf	setSw_Enable@command,w
  4090  11C8  1001               	bcf	1,0
  4091  11C9  1D03               	skipz
  4092  11CA  1401               	bsf	1,0
  4093  11CB  0008               	return
  4094  11CC                     __end_of_setSw_Enable:	
  4095                           
  4096                           	psect	text3
  4097  13A6                     __ptext3:	
  4098 ;; *************** function _setRF_Enable *****************
  4099 ;; Defined at:
  4100 ;;		line 181 in file "../src/RF_Control_B1.c"
  4101 ;; Parameters:    Size  Location     Type
  4102 ;;  rf              1    wreg     unsigned char 
  4103 ;;  command         1    2[BANK0 ] unsigned char 
  4104 ;; Auto vars:     Size  Location     Type
  4105 ;;  rf              1    3[BANK0 ] unsigned char 
  4106 ;; Return value:  Size  Location     Type
  4107 ;;		None               void
  4108 ;; Registers used:
  4109 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4110 ;; Tracked objects:
  4111 ;;		On entry : 0/0
  4112 ;;		On exit  : 0/0
  4113 ;;		Unchanged: 0/0
  4114 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4115 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4116 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4117 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4118 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4119 ;;Total ram usage:        2 bytes
  4120 ;; Hardware stack levels used:    1
  4121 ;; Hardware stack levels required when called:    6
  4122 ;; This function calls:
  4123 ;;		_RfPointSelect
  4124 ;;		_setINT_GO
  4125 ;; This function is called by:
  4126 ;;		_my_Main
  4127 ;; This function uses a non-reentrant model
  4128 ;;
  4129                           
  4130                           
  4131                           ;psect for function _setRF_Enable
  4132  13A6                     _setRF_Enable:	
  4133                           
  4134                           ;incstack = 0
  4135                           ; Regs used in _setRF_Enable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4136                           ;setRF_Enable@rf stored from wreg
  4137  13A6  0020               	movlb	0	; select bank0
  4138  13A7  00A3               	movwf	setRF_Enable@rf
  4139                           
  4140                           ;RF_Control_B1.c: 182: RfPointSelect(rf);
  4141  13A8  0823               	movf	setRF_Enable@rf,w
  4142  13A9  319E  267E  3193   	fcall	_RfPointSelect
  4143                           
  4144                           ;RF_Control_B1.c: 183: RF->Enable = command;
  4145  13AC  0021               	movlb	1	; select bank1
  4146  13AD  083E               	movf	_RF^(0+128),w
  4147  13AE  0086               	movwf	6
  4148  13AF  0187               	clrf	7
  4149  13B0  0020               	movlb	0	; select bank0
  4150  13B1  0822               	movf	setRF_Enable@command,w
  4151  13B2  1001               	bcf	1,0
  4152  13B3  1D03               	skipz
  4153  13B4  1401               	bsf	1,0
  4154                           
  4155                           ;RF_Control_B1.c: 184: RF->Learn = 0;
  4156  13B5  0021               	movlb	1	; select bank1
  4157  13B6  083E               	movf	_RF^(0+128),w
  4158  13B7  0086               	movwf	6
  4159  13B8  0187               	clrf	7
  4160  13B9  1301               	bcf	1,6
  4161                           
  4162                           ;RF_Control_B1.c: 185: RF->TransceiveGO = 0;
  4163  13BA  083E               	movf	_RF^(0+128),w
  4164  13BB  0086               	movwf	6
  4165  13BC  0187               	clrf	7
  4166  13BD  1101               	bcf	1,2
  4167                           
  4168                           ;RF_Control_B1.c: 186: RF->RxStatus = 0;
  4169  13BE  083E               	movf	_RF^(0+128),w
  4170  13BF  0086               	movwf	6
  4171  13C0  0187               	clrf	7
  4172  13C1  1181               	bcf	1,3
  4173                           
  4174                           ;RF_Control_B1.c: 187: RF->ReceiveGO = 0;
  4175  13C2  083E               	movf	_RF^(0+128),w
  4176  13C3  0086               	movwf	6
  4177  13C4  0187               	clrf	7
  4178  13C5  1081               	bcf	1,1
  4179                           
  4180                           ;RF_Control_B1.c: 188: RF->DebounceTime = 0;
  4181  13C6  083E               	movf	_RF^(0+128),w
  4182  13C7  3E04               	addlw	4
  4183  13C8  0086               	movwf	6
  4184  13C9  0187               	clrf	7
  4185  13CA  0181               	clrf	1
  4186                           
  4187                           ;RF_Control_B1.c: 189: RF->Debounce = 0;
  4188  13CB  083E               	movf	_RF^(0+128),w
  4189  13CC  0086               	movwf	6
  4190  13CD  0187               	clrf	7
  4191  13CE  1281               	bcf	1,5
  4192                           
  4193                           ;RF_Control_B1.c: 190: setINT_GO(0);
  4194  13CF  3000               	movlw	0
  4195  13D0  319E  2632         	fcall	_setINT_GO
  4196  13D2  0008               	return
  4197  13D3                     __end_of_setRF_Enable:	
  4198                           
  4199                           	psect	text4
  4200  1075                     __ptext4:	
  4201 ;; *************** function _myMain_Initialization *****************
  4202 ;; Defined at:
  4203 ;;		line 111 in file "../src/Main_B1.c"
  4204 ;; Parameters:    Size  Location     Type
  4205 ;;		None
  4206 ;; Auto vars:     Size  Location     Type
  4207 ;;		None
  4208 ;; Return value:  Size  Location     Type
  4209 ;;		None               void
  4210 ;; Registers used:
  4211 ;;		wreg, fsr1l, fsr1h
  4212 ;; Tracked objects:
  4213 ;;		On entry : 0/0
  4214 ;;		On exit  : 0/0
  4215 ;;		Unchanged: 0/0
  4216 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4217 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4218 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4219 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4220 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4221 ;;Total ram usage:        1 bytes
  4222 ;; Hardware stack levels used:    1
  4223 ;; Hardware stack levels required when called:    5
  4224 ;; This function calls:
  4225 ;;		Nothing
  4226 ;; This function is called by:
  4227 ;;		_main
  4228 ;; This function uses a non-reentrant model
  4229 ;;
  4230                           
  4231                           
  4232                           ;psect for function _myMain_Initialization
  4233  1075                     _myMain_Initialization:	
  4234                           
  4235                           ;Main_B1.c: 113: product = &_product;
  4236                           
  4237                           ;incstack = 0
  4238                           ; Regs used in _myMain_Initialization: [wregfsr1]
  4239  1075  30A0               	movlw	__product& (0+255)
  4240  1076  0020               	movlb	0	; select bank0
  4241  1077  00A0               	movwf	??_myMain_Initialization
  4242  1078  0820               	movf	??_myMain_Initialization,w
  4243  1079  00FD               	movwf	_product
  4244                           
  4245                           ;Main_B1.c: 114: product->Data[20] = 210;
  4246  107A  30D2               	movlw	210
  4247  107B  00A0               	movwf	??_myMain_Initialization
  4248  107C  087D               	movf	_product,w
  4249  107D  3E14               	addlw	20
  4250  107E  0086               	movwf	6
  4251  107F  3001               	movlw	1	; select bank2/3
  4252  1080  0087               	movwf	7
  4253  1081  0820               	movf	??_myMain_Initialization,w
  4254  1082  0081               	movwf	1
  4255                           
  4256                           ;Main_B1.c: 117: myMain = &_myMain;
  4257  1083  30C0               	movlw	__myMain& (0+255)
  4258  1084  00A0               	movwf	??_myMain_Initialization
  4259  1085  0820               	movf	??_myMain_Initialization,w
  4260  1086  0021               	movlb	1	; select bank1
  4261  1087  00EB               	movwf	_myMain^(0+128)
  4262  1088  0008               	return
  4263  1089                     __end_of_myMain_Initialization:	
  4264                           
  4265                           	psect	text5
  4266  1194                     __ptext5:	
  4267 ;; *************** function _WDT_Main *****************
  4268 ;; Defined at:
  4269 ;;		line 909 in file "../src/MCU_B1.c"
  4270 ;; Parameters:    Size  Location     Type
  4271 ;;		None
  4272 ;; Auto vars:     Size  Location     Type
  4273 ;;		None
  4274 ;; Return value:  Size  Location     Type
  4275 ;;		None               void
  4276 ;; Registers used:
  4277 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4278 ;; Tracked objects:
  4279 ;;		On entry : 0/0
  4280 ;;		On exit  : 0/0
  4281 ;;		Unchanged: 0/0
  4282 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4283 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4284 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4285 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4286 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4287 ;;Total ram usage:        1 bytes
  4288 ;; Hardware stack levels used:    1
  4289 ;; Hardware stack levels required when called:    6
  4290 ;; This function calls:
  4291 ;;		_WDT_Clearing
  4292 ;; This function is called by:
  4293 ;;		_main
  4294 ;; This function uses a non-reentrant model
  4295 ;;
  4296                           
  4297                           
  4298                           ;psect for function _WDT_Main
  4299  1194                     _WDT_Main:	
  4300                           
  4301                           ;MCU_B1.c: 910: if (WDT->Enable == 1) {
  4302                           
  4303                           ;incstack = 0
  4304                           ; Regs used in _WDT_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4305  1194  0021               	movlb	1	; select bank1
  4306  1195  086A               	movf	_WDT^(0+128),w
  4307  1196  0086               	movwf	6
  4308  1197  0187               	clrf	7
  4309  1198  1C01               	btfss	1,0
  4310  1199  0008               	return
  4311                           
  4312                           ;MCU_B1.c: 911: if (WDT->Count-- > 0) {
  4313  119A  0A6A               	incf	_WDT^(0+128),w
  4314  119B  0086               	movwf	6
  4315  119C  0187               	clrf	7
  4316  119D  3001               	movlw	1
  4317  119E  0281               	subwf	1,f
  4318  119F  0801               	movf	1,w
  4319  11A0  3AFF               	xorlw	255
  4320  11A1  1903               	skipnz
  4321  11A2  0008               	return
  4322                           
  4323                           ;MCU_B1.c: 912: WDT->Count = 10;
  4324  11A3  300A               	movlw	10
  4325  11A4  0020               	movlb	0	; select bank0
  4326  11A5  00A0               	movwf	??_WDT_Main
  4327  11A6  0021               	movlb	1	; select bank1
  4328  11A7  0A6A               	incf	_WDT^(0+128),w
  4329  11A8  0086               	movwf	6
  4330  11A9  0187               	clrf	7
  4331  11AA  0020               	movlb	0	; select bank0
  4332  11AB  0820               	movf	??_WDT_Main,w
  4333  11AC  0081               	movwf	1
  4334                           
  4335                           ;MCU_B1.c: 913: WDT_Clearing();
  4336  11AD  3180  2002         	fcall	_WDT_Clearing
  4337  11AF  0008               	return
  4338  11B0                     __end_of_WDT_Main:	
  4339                           
  4340                           	psect	text6
  4341  0002                     __ptext6:	
  4342 ;; *************** function _WDT_Clearing *****************
  4343 ;; Defined at:
  4344 ;;		line 919 in file "../src/MCU_B1.c"
  4345 ;; Parameters:    Size  Location     Type
  4346 ;;		None
  4347 ;; Auto vars:     Size  Location     Type
  4348 ;;		None
  4349 ;; Return value:  Size  Location     Type
  4350 ;;		None               void
  4351 ;; Registers used:
  4352 ;;		None
  4353 ;; Tracked objects:
  4354 ;;		On entry : 0/0
  4355 ;;		On exit  : 0/0
  4356 ;;		Unchanged: 0/0
  4357 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4358 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4359 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4360 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4361 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4362 ;;Total ram usage:        0 bytes
  4363 ;; Hardware stack levels used:    1
  4364 ;; Hardware stack levels required when called:    5
  4365 ;; This function calls:
  4366 ;;		Nothing
  4367 ;; This function is called by:
  4368 ;;		_WDT_Main
  4369 ;; This function uses a non-reentrant model
  4370 ;;
  4371                           
  4372                           
  4373                           ;psect for function _WDT_Clearing
  4374  0002                     _WDT_Clearing:	
  4375                           
  4376                           ;incstack = 0
  4377                           ; Regs used in _WDT_Clearing: []
  4378  0002  0064               	clrwdt	;# 
  4379  0003  0008               	return
  4380  0004                     __end_of_WDT_Clearing:	
  4381                           
  4382                           	psect	text7
  4383  1E21                     __ptext7:	
  4384 ;; *************** function _Switch_Main *****************
  4385 ;; Defined at:
  4386 ;;		line 61 in file "../src/Switch_B1.c"
  4387 ;; Parameters:    Size  Location     Type
  4388 ;;		None
  4389 ;; Auto vars:     Size  Location     Type
  4390 ;;		None
  4391 ;; Return value:  Size  Location     Type
  4392 ;;		None               void
  4393 ;; Registers used:
  4394 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4395 ;; Tracked objects:
  4396 ;;		On entry : 0/0
  4397 ;;		On exit  : 0/0
  4398 ;;		Unchanged: 0/0
  4399 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4400 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4401 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4402 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4403 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4404 ;;Total ram usage:        0 bytes
  4405 ;; Hardware stack levels used:    1
  4406 ;; Hardware stack levels required when called:   11
  4407 ;; This function calls:
  4408 ;;		_setSw_Main
  4409 ;; This function is called by:
  4410 ;;		_main
  4411 ;; This function uses a non-reentrant model
  4412 ;;
  4413                           
  4414                           
  4415                           ;psect for function _Switch_Main
  4416  1E21                     _Switch_Main:	
  4417                           
  4418                           ;Switch_B1.c: 63: setSw_Main(1);
  4419                           
  4420                           ;incstack = 0
  4421                           ; Regs used in _Switch_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4422  1E21  3001               	movlw	1
  4423  1E22  3182  2217  319E   	fcall	_setSw_Main
  4424                           
  4425                           ;Switch_B1.c: 67: setSw_Main(2);
  4426  1E25  3002               	movlw	2
  4427  1E26  3182  2217         	fcall	_setSw_Main
  4428  1E28  0008               	return
  4429  1E29                     __end_of_Switch_Main:	
  4430                           
  4431                           	psect	text8
  4432  0217                     __ptext8:	
  4433 ;; *************** function _setSw_Main *****************
  4434 ;; Defined at:
  4435 ;;		line 111 in file "../src/Switch_B1.c"
  4436 ;; Parameters:    Size  Location     Type
  4437 ;;  sw              1    wreg     unsigned char 
  4438 ;; Auto vars:     Size  Location     Type
  4439 ;;  sw              1   73[BANK0 ] unsigned char 
  4440 ;; Return value:  Size  Location     Type
  4441 ;;		None               void
  4442 ;; Registers used:
  4443 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4444 ;; Tracked objects:
  4445 ;;		On entry : 0/0
  4446 ;;		On exit  : 0/0
  4447 ;;		Unchanged: 0/0
  4448 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4449 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4450 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4451 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4452 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4453 ;;Total ram usage:        5 bytes
  4454 ;; Hardware stack levels used:    1
  4455 ;; Hardware stack levels required when called:   10
  4456 ;; This function calls:
  4457 ;;		_SwPointSelect
  4458 ;;		_Sw_DimmerAdjFunc
  4459 ;;		_Sw_DimmerOffFunc
  4460 ;;		_Sw_DimmerOnFunc
  4461 ;;		_setBuz
  4462 ;;		_setRF_Learn
  4463 ;; This function is called by:
  4464 ;;		_Switch_Main
  4465 ;; This function uses a non-reentrant model
  4466 ;;
  4467                           
  4468                           
  4469                           ;psect for function _setSw_Main
  4470  0217                     _setSw_Main:	
  4471                           
  4472                           ;incstack = 0
  4473                           ; Regs used in _setSw_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4474                           ;setSw_Main@sw stored from wreg
  4475  0217  0020               	movlb	0	; select bank0
  4476  0218  00E9               	movwf	setSw_Main@sw
  4477                           
  4478                           ;Switch_B1.c: 112: if (Sw->Enable == 1) {
  4479  0219  087B               	movf	_Sw,w
  4480  021A  0086               	movwf	6
  4481  021B  3001               	movlw	1	; select bank2/3
  4482  021C  0087               	movwf	7
  4483  021D  1C01               	btfss	1,0
  4484  021E  0008               	return
  4485                           
  4486                           ;Switch_B1.c: 113: SwPointSelect(sw);
  4487  021F  0869               	movf	setSw_Main@sw,w
  4488  0220  319F  27D8  3182   	fcall	_SwPointSelect
  4489                           
  4490                           ;Switch_B1.c: 125: if (sw == 1) {
  4491  0223  0020               	movlb	0	; select bank0
  4492  0224  0869               	movf	setSw_Main@sw,w
  4493  0225  3A01               	xorlw	1
  4494  0226  1D03               	skipz
  4495  0227  2A34               	goto	l6798
  4496                           
  4497                           ;Switch_B1.c: 126: Sw->Touch = (RA6 || RA4) ? 1 : 0;
  4498  0228  01E7               	clrf	_setSw_Main$5079
  4499  0229  0AE7               	incf	_setSw_Main$5079,f
  4500  022A  1F0C               	btfss	12,6	;volatile
  4501  022B  1A0C               	btfsc	12,4	;volatile
  4502  022C  2A2E               	goto	l6796
  4503  022D  01E7               	clrf	_setSw_Main$5079
  4504  022E                     l6796:	
  4505  022E  087B               	movf	_Sw,w
  4506  022F  0086               	movwf	6
  4507  0230  3001               	movlw	1	; select bank2/3
  4508  0231  0087               	movwf	7
  4509  0232  0867               	movf	_setSw_Main$5079,w
  4510  0233  2A43               	goto	L1
  4511  0234                     l6798:	
  4512                           ;Switch_B1.c: 127: } else if (sw == 2) {
  4513                           
  4514  0234  0869               	movf	setSw_Main@sw,w
  4515  0235  3A02               	xorlw	2
  4516  0236  1D03               	skipz
  4517  0237  2A46               	goto	l6808
  4518                           
  4519                           ;Switch_B1.c: 128: Sw->Touch = (RA0 || RB1) ? 1 : 0;
  4520  0238  01E8               	clrf	_setSw_Main$5080
  4521  0239  0AE8               	incf	_setSw_Main$5080,f
  4522  023A  1C0C               	btfss	12,0	;volatile
  4523  023B  188D               	btfsc	13,1	;volatile
  4524  023C  2A3E               	goto	l6806
  4525  023D  01E8               	clrf	_setSw_Main$5080
  4526  023E                     l6806:	
  4527  023E  087B               	movf	_Sw,w
  4528  023F  0086               	movwf	6
  4529  0240  3001               	movlw	1	; select bank2/3
  4530  0241  0087               	movwf	7
  4531  0242  0868               	movf	_setSw_Main$5080,w
  4532  0243                     L1:	
  4533  0243  1081               	bcf	1,1
  4534  0244  1D03               	skipz
  4535  0245  1481               	bsf	1,1
  4536  0246                     l6808:	
  4537                           
  4538                           ;Switch_B1.c: 129: }
  4539                           ;Switch_B1.c: 137: if (Sw->Touch == 1) {
  4540  0246  087B               	movf	_Sw,w
  4541  0247  0086               	movwf	6
  4542  0248  3001               	movlw	1	; select bank2/3
  4543  0249  0087               	movwf	7
  4544  024A  1C81               	btfss	1,1
  4545  024B  2B1C               	goto	l6856
  4546                           
  4547                           ;Switch_B1.c: 138: if (Sw->Debounce == 0) {
  4548  024C  087B               	movf	_Sw,w
  4549  024D  0086               	movwf	6
  4550  024E  3001               	movlw	1	; select bank2/3
  4551  024F  0087               	movwf	7
  4552  0250  1901               	btfsc	1,2
  4553  0251  2A73               	goto	l6822
  4554                           
  4555                           ;Switch_B1.c: 139: Sw->DebounceTime++;
  4556  0252  3001               	movlw	1
  4557  0253  00E5               	movwf	??_setSw_Main
  4558  0254  087B               	movf	_Sw,w
  4559  0255  3E02               	addlw	2
  4560  0256  0086               	movwf	6
  4561  0257  3001               	movlw	1	; select bank2/3
  4562  0258  0087               	movwf	7
  4563  0259  0865               	movf	??_setSw_Main,w
  4564  025A  0781               	addwf	1,f
  4565                           
  4566                           ;Switch_B1.c: 140: if (Sw->DebounceTime >= 5) {
  4567  025B  087B               	movf	_Sw,w
  4568  025C  3E02               	addlw	2
  4569  025D  0086               	movwf	6
  4570  025E  3001               	movlw	1	; select bank2/3
  4571  025F  0087               	movwf	7
  4572  0260  3005               	movlw	5
  4573  0261  0201               	subwf	1,w
  4574  0262  1C03               	skipc
  4575  0263  0008               	return
  4576                           
  4577                           ;Switch_B1.c: 141: Sw->DebounceTime = 0;
  4578  0264  087B               	movf	_Sw,w
  4579  0265  3E02               	addlw	2
  4580  0266  0086               	movwf	6
  4581  0267  3001               	movlw	1	; select bank2/3
  4582  0268  0087               	movwf	7
  4583  0269  0181               	clrf	1
  4584                           
  4585                           ;Switch_B1.c: 142: Sw->Debounce = 1;
  4586  026A  087B               	movf	_Sw,w
  4587  026B  0086               	movwf	6
  4588  026C  3001               	movlw	1	; select bank2/3
  4589  026D  0087               	movwf	7
  4590  026E  1501               	bsf	1,2
  4591                           
  4592                           ;Switch_B1.c: 146: Sw_DimmerOnFunc(sw);
  4593  026F  0869               	movf	setSw_Main@sw,w
  4594  0270  318A  22D6         	fcall	_Sw_DimmerOnFunc
  4595                           
  4596                           ;Switch_B1.c: 149: }
  4597                           ;Switch_B1.c: 150: } else {
  4598  0272  0008               	return
  4599  0273                     l6822:	
  4600                           
  4601                           ;Switch_B1.c: 151: if (Sw->Hold1 == 0) {
  4602  0273  087B               	movf	_Sw,w
  4603  0274  0086               	movwf	6
  4604  0275  3001               	movlw	1	; select bank2/3
  4605  0276  0087               	movwf	7
  4606  0277  1981               	btfsc	1,3
  4607  0278  2AA5               	goto	l6832
  4608                           
  4609                           ;Switch_B1.c: 152: Sw->Hold1Time++;
  4610  0279  087B               	movf	_Sw,w
  4611  027A  3E03               	addlw	3
  4612  027B  0086               	movwf	6
  4613  027C  3001               	movlw	1	; select bank2/3
  4614  027D  0087               	movwf	7
  4615  027E  3001               	movlw	1
  4616  027F  0781               	addwf	1,f
  4617  0280  3141               	addfsr 1,1
  4618  0281  1803               	skipnc
  4619  0282  0A81               	incf	1,f
  4620                           
  4621                           ;Switch_B1.c: 153: if (Sw->Hold1Time >= 150) {
  4622  0283  087B               	movf	_Sw,w
  4623  0284  3E03               	addlw	3
  4624  0285  0086               	movwf	6
  4625  0286  3001               	movlw	1	; select bank2/3
  4626  0287  0087               	movwf	7
  4627  0288  3F40               	moviw [0]fsr1
  4628  0289  0020               	movlb	0	; select bank0
  4629  028A  00E5               	movwf	??_setSw_Main
  4630  028B  3F41               	moviw [1]fsr1
  4631  028C  00E6               	movwf	??_setSw_Main+1
  4632  028D  3000               	movlw	0
  4633  028E  0266               	subwf	??_setSw_Main+1,w
  4634  028F  3096               	movlw	150
  4635  0290  1903               	skipnz
  4636  0291  0265               	subwf	??_setSw_Main,w
  4637  0292  1C03               	skipc
  4638  0293  0008               	return
  4639                           
  4640                           ;Switch_B1.c: 154: Sw->Hold1Time = 0;
  4641  0294  087B               	movf	_Sw,w
  4642  0295  3E03               	addlw	3
  4643  0296  0086               	movwf	6
  4644  0297  3001               	movlw	1	; select bank2/3
  4645  0298  0087               	movwf	7
  4646  0299  3000               	movlw	0
  4647  029A  3FC0               	movwi [0]fsr1
  4648  029B  3FC1               	movwi [1]fsr1
  4649                           
  4650                           ;Switch_B1.c: 155: Sw->Hold1 = 1;
  4651  029C  087B               	movf	_Sw,w
  4652  029D  0086               	movwf	6
  4653  029E  3001               	movlw	1	; select bank2/3
  4654  029F  0087               	movwf	7
  4655  02A0  1581               	bsf	1,3
  4656                           
  4657                           ;Switch_B1.c: 158: Sw_DimmerAdjFunc(sw);
  4658  02A1  0869               	movf	setSw_Main@sw,w
  4659  02A2  3195  25E5         	fcall	_Sw_DimmerAdjFunc
  4660                           
  4661                           ;Switch_B1.c: 161: }
  4662                           ;Switch_B1.c: 162: } else {
  4663  02A4  0008               	return
  4664  02A5                     l6832:	
  4665                           
  4666                           ;Switch_B1.c: 163: if (!Sw->Hold2) {
  4667  02A5  087B               	movf	_Sw,w
  4668  02A6  0086               	movwf	6
  4669  02A7  3001               	movlw	1	; select bank2/3
  4670  02A8  0087               	movwf	7
  4671  02A9  1A01               	btfsc	1,4
  4672  02AA  2AE9               	goto	l6846
  4673                           
  4674                           ;Switch_B1.c: 164: Sw->Hold2Time++;
  4675  02AB  087B               	movf	_Sw,w
  4676  02AC  3E05               	addlw	5
  4677  02AD  0086               	movwf	6
  4678  02AE  3001               	movlw	1	; select bank2/3
  4679  02AF  0087               	movwf	7
  4680  02B0  3001               	movlw	1
  4681  02B1  0781               	addwf	1,f
  4682  02B2  3141               	addfsr 1,1
  4683  02B3  1803               	skipnc
  4684  02B4  0A81               	incf	1,f
  4685                           
  4686                           ;Switch_B1.c: 165: if (Sw->Hold2Time >= 150) {
  4687  02B5  087B               	movf	_Sw,w
  4688  02B6  3E05               	addlw	5
  4689  02B7  0086               	movwf	6
  4690  02B8  3001               	movlw	1	; select bank2/3
  4691  02B9  0087               	movwf	7
  4692  02BA  3F40               	moviw [0]fsr1
  4693  02BB  0020               	movlb	0	; select bank0
  4694  02BC  00E5               	movwf	??_setSw_Main
  4695  02BD  3F41               	moviw [1]fsr1
  4696  02BE  00E6               	movwf	??_setSw_Main+1
  4697  02BF  3000               	movlw	0
  4698  02C0  0266               	subwf	??_setSw_Main+1,w
  4699  02C1  3096               	movlw	150
  4700  02C2  1903               	skipnz
  4701  02C3  0265               	subwf	??_setSw_Main,w
  4702  02C4  1C03               	skipc
  4703  02C5  0008               	return
  4704                           
  4705                           ;Switch_B1.c: 166: Sw->Hold2Time = 0;
  4706  02C6  087B               	movf	_Sw,w
  4707  02C7  3E05               	addlw	5
  4708  02C8  0086               	movwf	6
  4709  02C9  3001               	movlw	1	; select bank2/3
  4710  02CA  0087               	movwf	7
  4711  02CB  3000               	movlw	0
  4712  02CC  3FC0               	movwi [0]fsr1
  4713  02CD  3FC1               	movwi [1]fsr1
  4714                           
  4715                           ;Switch_B1.c: 167: Sw->Hold2 = 1;
  4716  02CE  087B               	movf	_Sw,w
  4717  02CF  0086               	movwf	6
  4718  02D0  3001               	movlw	1	; select bank2/3
  4719  02D1  0087               	movwf	7
  4720  02D2  1601               	bsf	1,4
  4721                           
  4722                           ;Switch_B1.c: 171: setRF_Learn(1, 1);
  4723  02D3  01A2               	clrf	setRF_Learn@command
  4724  02D4  0AA2               	incf	setRF_Learn@command,f
  4725  02D5  3001               	movlw	1
  4726  02D6  3190  2066  3182   	fcall	_setRF_Learn
  4727                           
  4728                           ;Switch_B1.c: 173: if (myMain->First) {
  4729  02D9  0021               	movlb	1	; select bank1
  4730  02DA  086B               	movf	_myMain^(0+128),w
  4731  02DB  0086               	movwf	6
  4732  02DC  3001               	movlw	1	; select bank2/3
  4733  02DD  0087               	movwf	7
  4734  02DE  1F81               	btfss	1,7
  4735  02DF  0008               	return
  4736                           
  4737                           ;Switch_B1.c: 174: setBuz(2, 100);
  4738  02E0  3064               	movlw	100
  4739  02E1  0020               	movlb	0	; select bank0
  4740  02E2  00A9               	movwf	setBuz@time
  4741  02E3  3000               	movlw	0
  4742  02E4  00AA               	movwf	setBuz@time+1
  4743  02E5  3002               	movlw	2
  4744  02E6  318B  23BC         	fcall	_setBuz
  4745                           
  4746                           ;Switch_B1.c: 175: }
  4747                           ;Switch_B1.c: 177: }
  4748                           ;Switch_B1.c: 178: } else {
  4749  02E8  0008               	return
  4750  02E9                     l6846:	
  4751                           
  4752                           ;Switch_B1.c: 179: if (!Sw->Hold3) {
  4753  02E9  087B               	movf	_Sw,w
  4754  02EA  0086               	movwf	6
  4755  02EB  3001               	movlw	1	; select bank2/3
  4756  02EC  0087               	movwf	7
  4757  02ED  1A81               	btfsc	1,5
  4758  02EE  0008               	return
  4759                           
  4760                           ;Switch_B1.c: 180: Sw->Hold3Time++;
  4761  02EF  087B               	movf	_Sw,w
  4762  02F0  3E07               	addlw	7
  4763  02F1  0086               	movwf	6
  4764  02F2  3001               	movlw	1	; select bank2/3
  4765  02F3  0087               	movwf	7
  4766  02F4  3001               	movlw	1
  4767  02F5  0781               	addwf	1,f
  4768  02F6  3141               	addfsr 1,1
  4769  02F7  1803               	skipnc
  4770  02F8  0A81               	incf	1,f
  4771                           
  4772                           ;Switch_B1.c: 181: if (Sw->Hold3Time >= 300)
  4773  02F9  087B               	movf	_Sw,w
  4774  02FA  3E07               	addlw	7
  4775  02FB  0086               	movwf	6
  4776  02FC  3001               	movlw	1	; select bank2/3
  4777  02FD  0087               	movwf	7
  4778  02FE  3F40               	moviw [0]fsr1
  4779  02FF  0020               	movlb	0	; select bank0
  4780  0300  00E5               	movwf	??_setSw_Main
  4781  0301  3F41               	moviw [1]fsr1
  4782  0302  00E6               	movwf	??_setSw_Main+1
  4783  0303  3001               	movlw	1
  4784  0304  0266               	subwf	??_setSw_Main+1,w
  4785  0305  302C               	movlw	44
  4786  0306  1903               	skipnz
  4787  0307  0265               	subwf	??_setSw_Main,w
  4788  0308  1C03               	skipc
  4789  0309  0008               	return
  4790                           
  4791                           ;Switch_B1.c: 182: {
  4792                           ;Switch_B1.c: 183: Sw->Hold3Time = 0;
  4793  030A  087B               	movf	_Sw,w
  4794  030B  3E07               	addlw	7
  4795  030C  0086               	movwf	6
  4796  030D  3001               	movlw	1	; select bank2/3
  4797  030E  0087               	movwf	7
  4798  030F  3000               	movlw	0
  4799  0310  3FC0               	movwi [0]fsr1
  4800  0311  3FC1               	movwi [1]fsr1
  4801                           
  4802                           ;Switch_B1.c: 184: Sw->Hold3 = 1;
  4803  0312  087B               	movf	_Sw,w
  4804  0313  0086               	movwf	6
  4805  0314  3001               	movlw	1	; select bank2/3
  4806  0315  0087               	movwf	7
  4807  0316  1681               	bsf	1,5
  4808                           
  4809                           ;Switch_B1.c: 187: setRF_Learn(1, 0);
  4810  0317  01A2               	clrf	setRF_Learn@command
  4811  0318  3001               	movlw	1
  4812  0319  3190  2066         	fcall	_setRF_Learn
  4813                           
  4814                           ;Switch_B1.c: 190: }
  4815                           ;Switch_B1.c: 191: }
  4816                           ;Switch_B1.c: 192: }
  4817                           ;Switch_B1.c: 193: }
  4818                           ;Switch_B1.c: 194: }
  4819                           ;Switch_B1.c: 195: } else {
  4820  031B  0008               	return
  4821  031C                     l6856:	
  4822                           
  4823                           ;Switch_B1.c: 196: if (Sw->Debounce) {
  4824  031C  087B               	movf	_Sw,w
  4825  031D  0086               	movwf	6
  4826  031E  3001               	movlw	1	; select bank2/3
  4827  031F  0087               	movwf	7
  4828  0320  1D01               	btfss	1,2
  4829  0321  0008               	return
  4830                           
  4831                           ;Switch_B1.c: 197: Sw->DebounceTime++;
  4832  0322  3001               	movlw	1
  4833  0323  0020               	movlb	0	; select bank0
  4834  0324  00E5               	movwf	??_setSw_Main
  4835  0325  087B               	movf	_Sw,w
  4836  0326  3E02               	addlw	2
  4837  0327  0086               	movwf	6
  4838  0328  3001               	movlw	1	; select bank2/3
  4839  0329  0087               	movwf	7
  4840  032A  0865               	movf	??_setSw_Main,w
  4841  032B  0781               	addwf	1,f
  4842                           
  4843                           ;Switch_B1.c: 198: if (Sw->DebounceTime >= 5) {
  4844  032C  087B               	movf	_Sw,w
  4845  032D  3E02               	addlw	2
  4846  032E  0086               	movwf	6
  4847  032F  3001               	movlw	1	; select bank2/3
  4848  0330  0087               	movwf	7
  4849  0331  3005               	movlw	5
  4850  0332  0201               	subwf	1,w
  4851  0333  1C03               	skipc
  4852  0334  0008               	return
  4853                           
  4854                           ;Switch_B1.c: 199: Sw->DebounceTime = 0;
  4855  0335  087B               	movf	_Sw,w
  4856  0336  3E02               	addlw	2
  4857  0337  0086               	movwf	6
  4858  0338  3001               	movlw	1	; select bank2/3
  4859  0339  0087               	movwf	7
  4860  033A  0181               	clrf	1
  4861                           
  4862                           ;Switch_B1.c: 200: Sw->Debounce = 0;
  4863  033B  087B               	movf	_Sw,w
  4864  033C  0086               	movwf	6
  4865  033D  3001               	movlw	1	; select bank2/3
  4866  033E  0087               	movwf	7
  4867  033F  1101               	bcf	1,2
  4868                           
  4869                           ;Switch_B1.c: 201: Sw->Hold1Time = 0;
  4870  0340  087B               	movf	_Sw,w
  4871  0341  3E03               	addlw	3
  4872  0342  0086               	movwf	6
  4873  0343  3001               	movlw	1	; select bank2/3
  4874  0344  0087               	movwf	7
  4875  0345  3000               	movlw	0
  4876  0346  3FC0               	movwi [0]fsr1
  4877  0347  3FC1               	movwi [1]fsr1
  4878                           
  4879                           ;Switch_B1.c: 202: Sw->Hold1 = 0;
  4880  0348  087B               	movf	_Sw,w
  4881  0349  0086               	movwf	6
  4882  034A  3001               	movlw	1	; select bank2/3
  4883  034B  0087               	movwf	7
  4884  034C  1181               	bcf	1,3
  4885                           
  4886                           ;Switch_B1.c: 203: Sw->Hold2Time = 0;
  4887  034D  087B               	movf	_Sw,w
  4888  034E  3E05               	addlw	5
  4889  034F  0086               	movwf	6
  4890  0350  3001               	movlw	1	; select bank2/3
  4891  0351  0087               	movwf	7
  4892  0352  3000               	movlw	0
  4893  0353  3FC0               	movwi [0]fsr1
  4894  0354  3FC1               	movwi [1]fsr1
  4895                           
  4896                           ;Switch_B1.c: 204: Sw->Hold2 = 0;
  4897  0355  087B               	movf	_Sw,w
  4898  0356  0086               	movwf	6
  4899  0357  3001               	movlw	1	; select bank2/3
  4900  0358  0087               	movwf	7
  4901  0359  1201               	bcf	1,4
  4902                           
  4903                           ;Switch_B1.c: 205: Sw->Hold3Time = 0;
  4904  035A  087B               	movf	_Sw,w
  4905  035B  3E07               	addlw	7
  4906  035C  0086               	movwf	6
  4907  035D  3001               	movlw	1	; select bank2/3
  4908  035E  0087               	movwf	7
  4909  035F  3000               	movlw	0
  4910  0360  3FC0               	movwi [0]fsr1
  4911  0361  3FC1               	movwi [1]fsr1
  4912                           
  4913                           ;Switch_B1.c: 206: Sw->Hold3 = 0;
  4914  0362  087B               	movf	_Sw,w
  4915  0363  0086               	movwf	6
  4916  0364  3001               	movlw	1	; select bank2/3
  4917  0365  0087               	movwf	7
  4918  0366  1281               	bcf	1,5
  4919                           
  4920                           ;Switch_B1.c: 209: Sw_DimmerOffFunc(sw);
  4921  0367  0869               	movf	setSw_Main@sw,w
  4922  0368  318A  2265  3182   	fcall	_Sw_DimmerOffFunc
  4923                           
  4924                           ;Switch_B1.c: 214: setRF_Learn(1, 0);
  4925  036B  0020               	movlb	0	; select bank0
  4926  036C  01A2               	clrf	setRF_Learn@command
  4927  036D  3001               	movlw	1
  4928  036E  3190  2066         	fcall	_setRF_Learn
  4929  0370  0008               	return
  4930  0371                     __end_of_setSw_Main:	
  4931                           
  4932                           	psect	text9
  4933  1066                     __ptext9:	
  4934 ;; *************** function _setRF_Learn *****************
  4935 ;; Defined at:
  4936 ;;		line 30 in file "../src/RF_Control_B1.c"
  4937 ;; Parameters:    Size  Location     Type
  4938 ;;  rf              1    wreg     unsigned char 
  4939 ;;  command         1    2[BANK0 ] unsigned char 
  4940 ;; Auto vars:     Size  Location     Type
  4941 ;;  rf              1    3[BANK0 ] unsigned char 
  4942 ;; Return value:  Size  Location     Type
  4943 ;;		None               void
  4944 ;; Registers used:
  4945 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4946 ;; Tracked objects:
  4947 ;;		On entry : 0/0
  4948 ;;		On exit  : 0/0
  4949 ;;		Unchanged: 0/0
  4950 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4951 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4952 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4953 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4954 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4955 ;;Total ram usage:        2 bytes
  4956 ;; Hardware stack levels used:    1
  4957 ;; Hardware stack levels required when called:    6
  4958 ;; This function calls:
  4959 ;;		_RfPointSelect
  4960 ;; This function is called by:
  4961 ;;		_setSw_Main
  4962 ;; This function uses a non-reentrant model
  4963 ;;
  4964                           
  4965                           
  4966                           ;psect for function _setRF_Learn
  4967  1066                     _setRF_Learn:	
  4968                           
  4969                           ;incstack = 0
  4970                           ; Regs used in _setRF_Learn: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4971                           ;setRF_Learn@rf stored from wreg
  4972  1066  0020               	movlb	0	; select bank0
  4973  1067  00A3               	movwf	setRF_Learn@rf
  4974                           
  4975                           ;RF_Control_B1.c: 31: RfPointSelect(rf);
  4976  1068  0823               	movf	setRF_Learn@rf,w
  4977  1069  319E  267E         	fcall	_RfPointSelect
  4978                           
  4979                           ;RF_Control_B1.c: 32: RF->Learn = command;
  4980  106B  0021               	movlb	1	; select bank1
  4981  106C  083E               	movf	_RF^(0+128),w
  4982  106D  0086               	movwf	6
  4983  106E  0187               	clrf	7
  4984  106F  0020               	movlb	0	; select bank0
  4985  1070  0822               	movf	setRF_Learn@command,w
  4986  1071  1301               	bcf	1,6
  4987  1072  1D03               	skipz
  4988  1073  1701               	bsf	1,6
  4989  1074  0008               	return
  4990  1075                     __end_of_setRF_Learn:	
  4991                           
  4992                           	psect	text10
  4993  0AD6                     __ptext10:	
  4994 ;; *************** function _Sw_DimmerOnFunc *****************
  4995 ;; Defined at:
  4996 ;;		line 223 in file "../src/Switch_B1.c"
  4997 ;; Parameters:    Size  Location     Type
  4998 ;;  sw              1    wreg     unsigned char 
  4999 ;; Auto vars:     Size  Location     Type
  5000 ;;  sw              1   67[BANK0 ] unsigned char 
  5001 ;;  Idle            1   66[BANK0 ] unsigned char 
  5002 ;; Return value:  Size  Location     Type
  5003 ;;		None               void
  5004 ;; Registers used:
  5005 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5006 ;; Tracked objects:
  5007 ;;		On entry : 0/0
  5008 ;;		On exit  : 0/0
  5009 ;;		Unchanged: 0/0
  5010 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5011 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5012 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5013 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5014 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5015 ;;Total ram usage:        2 bytes
  5016 ;; Hardware stack levels used:    1
  5017 ;; Hardware stack levels required when called:    9
  5018 ;; This function calls:
  5019 ;;		_setBuz
  5020 ;;		_setDimmerLights_Switch
  5021 ;;		_setDimmerLights_Trigger
  5022 ;;		_setRFSW_Status
  5023 ;;		_setRF_DimmerLights
  5024 ;;		_setTxData
  5025 ;; This function is called by:
  5026 ;;		_setSw_Main
  5027 ;; This function uses a non-reentrant model
  5028 ;;
  5029                           
  5030                           
  5031                           ;psect for function _Sw_DimmerOnFunc
  5032  0AD6                     _Sw_DimmerOnFunc:	
  5033                           
  5034                           ;incstack = 0
  5035                           ; Regs used in _Sw_DimmerOnFunc: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5036                           ;Sw_DimmerOnFunc@sw stored from wreg
  5037  0AD6  0020               	movlb	0	; select bank0
  5038  0AD7  00E3               	movwf	Sw_DimmerOnFunc@sw
  5039                           
  5040                           ;Switch_B1.c: 224: char Idle = 1;
  5041  0AD8  01E2               	clrf	Sw_DimmerOnFunc@Idle
  5042  0AD9  0AE2               	incf	Sw_DimmerOnFunc@Idle,f
  5043                           
  5044                           ;Switch_B1.c: 238: if (sw == 1) {
  5045  0ADA  0863               	movf	Sw_DimmerOnFunc@sw,w
  5046  0ADB  3A01               	xorlw	1
  5047  0ADC  1D03               	skipz
  5048  0ADD  2AE1               	goto	l6214
  5049                           
  5050                           ;Switch_B1.c: 239: Idle = (DimmerLights22->AdjGo == 1) ? 0 : 1;
  5051  0ADE  0021               	movlb	1	; select bank1
  5052  0ADF  083B               	movf	_DimmerLights22^(0+128),w
  5053  0AE0  2AE7               	goto	L2
  5054  0AE1                     l6214:	
  5055                           ;Switch_B1.c: 240: } else if (sw == 2) {
  5056                           
  5057  0AE1  0863               	movf	Sw_DimmerOnFunc@sw,w
  5058  0AE2  3A02               	xorlw	2
  5059  0AE3  1D03               	skipz
  5060  0AE4  2AF3               	goto	l6218
  5061                           
  5062                           ;Switch_B1.c: 241: Idle = (DimmerLights11->AdjGo == 1) ? 0 : 1;
  5063  0AE5  0021               	movlb	1	; select bank1
  5064  0AE6  083A               	movf	_DimmerLights11^(0+128),w
  5065  0AE7                     L2:	
  5066  0AE7  3E08               	addlw	8
  5067  0AE8  0086               	movwf	6
  5068  0AE9  3001               	movlw	1	; select bank2/3
  5069  0AEA  0087               	movwf	7
  5070  0AEB  1003               	clrc
  5071  0AEC  1D81               	btfss	1,3
  5072  0AED  1403               	setc
  5073  0AEE  3000               	movlw	0
  5074  0AEF  1803               	btfsc	3,0
  5075  0AF0  3001               	movlw	1
  5076  0AF1  0020               	movlb	0	; select bank0
  5077  0AF2  00E2               	movwf	Sw_DimmerOnFunc@Idle
  5078  0AF3                     l6218:	
  5079                           
  5080                           ;Switch_B1.c: 242: }
  5081                           ;Switch_B1.c: 245: if (Idle) {
  5082  0AF3  0862               	movf	Sw_DimmerOnFunc@Idle,w
  5083  0AF4  1903               	btfsc	3,2
  5084  0AF5  0008               	return
  5085                           
  5086                           ;Switch_B1.c: 246: Sw->Flag = 1;
  5087  0AF6  087B               	movf	_Sw,w
  5088  0AF7  0086               	movwf	6
  5089  0AF8  3001               	movlw	1	; select bank2/3
  5090  0AF9  0087               	movwf	7
  5091  0AFA  1781               	bsf	1,7
  5092                           
  5093                           ;Switch_B1.c: 247: setBuz(1, 100);
  5094  0AFB  3064               	movlw	100
  5095  0AFC  00A9               	movwf	setBuz@time
  5096  0AFD  3000               	movlw	0
  5097  0AFE  00AA               	movwf	setBuz@time+1
  5098  0AFF  3001               	movlw	1
  5099  0B00  318B  23BC  318A   	fcall	_setBuz
  5100                           
  5101                           ;Switch_B1.c: 248: if (!Sw->Status) {
  5102  0B03  087B               	movf	_Sw,w
  5103  0B04  0086               	movwf	6
  5104  0B05  3001               	movlw	1	; select bank2/3
  5105  0B06  0087               	movwf	7
  5106  0B07  1B01               	btfsc	1,6
  5107  0B08  2B35               	goto	l6238
  5108                           
  5109                           ;Switch_B1.c: 249: Sw->Status = 1;
  5110  0B09  087B               	movf	_Sw,w
  5111  0B0A  0086               	movwf	6
  5112  0B0B  3001               	movlw	1	; select bank2/3
  5113  0B0C  0087               	movwf	7
  5114  0B0D  1701               	bsf	1,6
  5115                           
  5116                           ;Switch_B1.c: 250: setRFSW_Status(sw, 1);
  5117  0B0E  0020               	movlb	0	; select bank0
  5118  0B0F  01A2               	clrf	setRFSW_Status@command
  5119  0B10  0AA2               	incf	setRFSW_Status@command,f
  5120  0B11  0863               	movf	Sw_DimmerOnFunc@sw,w
  5121  0B12  319E  26EF  318A   	fcall	_setRFSW_Status
  5122                           
  5123                           ;Switch_B1.c: 252: setDimmerLights_Trigger(sw, 1);
  5124  0B15  0020               	movlb	0	; select bank0
  5125  0B16  01A2               	clrf	setDimmerLights_Trigger@command
  5126  0B17  0AA2               	incf	setDimmerLights_Trigger@command,f
  5127  0B18  0863               	movf	Sw_DimmerOnFunc@sw,w
  5128  0B19  319F  273D  318A   	fcall	_setDimmerLights_Trigger
  5129                           
  5130                           ;Switch_B1.c: 253: setDimmerLights_Switch(sw, 1);
  5131  0B1C  0020               	movlb	0	; select bank0
  5132  0B1D  01A2               	clrf	setDimmerLights_Switch@command
  5133  0B1E  0AA2               	incf	setDimmerLights_Switch@command,f
  5134  0B1F  0863               	movf	Sw_DimmerOnFunc@sw,w
  5135  0B20  319F  272D  318A   	fcall	_setDimmerLights_Switch
  5136                           
  5137                           ;Switch_B1.c: 255: setRF_DimmerLights(sw, Sw->Status);
  5138  0B23  087B               	movf	_Sw,w
  5139  0B24  0086               	movwf	6
  5140  0B25  3001               	movlw	1	; select bank2/3
  5141  0B26  0087               	movwf	7
  5142  0B27  3000               	movlw	0
  5143  0B28  1B01               	btfsc	1,6
  5144  0B29  3001               	movlw	1
  5145  0B2A  0020               	movlb	0	; select bank0
  5146  0B2B  00DD               	movwf	setRF_DimmerLights@on
  5147  0B2C  0863               	movf	Sw_DimmerOnFunc@sw,w
  5148  0B2D  3189  218C  318A   	fcall	_setRF_DimmerLights
  5149                           
  5150                           ;Switch_B1.c: 256: setTxData(1);
  5151  0B30  3001               	movlw	1
  5152  0B31  318E  26BD         	fcall	_setTxData
  5153                           
  5154                           ;Switch_B1.c: 258: } else {
  5155  0B33  0020               	movlb	0	; select bank0
  5156  0B34  0008               	return
  5157  0B35                     l6238:	
  5158                           
  5159                           ;Switch_B1.c: 259: Sw->Status = 0;
  5160  0B35  087B               	movf	_Sw,w
  5161  0B36  0086               	movwf	6
  5162  0B37  3001               	movlw	1	; select bank2/3
  5163  0B38  0087               	movwf	7
  5164  0B39  1301               	bcf	1,6
  5165                           
  5166                           ;Switch_B1.c: 260: setRFSW_Status(sw, Sw->Status);
  5167  0B3A  087B               	movf	_Sw,w
  5168  0B3B  0086               	movwf	6
  5169  0B3C  3001               	movlw	1	; select bank2/3
  5170  0B3D  0087               	movwf	7
  5171  0B3E  3000               	movlw	0
  5172  0B3F  1B01               	btfsc	1,6
  5173  0B40  3001               	movlw	1
  5174  0B41  0020               	movlb	0	; select bank0
  5175  0B42  00A2               	movwf	setRFSW_Status@command
  5176  0B43  0863               	movf	Sw_DimmerOnFunc@sw,w
  5177  0B44  319E  26EF         	fcall	_setRFSW_Status
  5178  0B46  0020               	movlb	0	; select bank0
  5179  0B47  0008               	return
  5180  0B48                     __end_of_Sw_DimmerOnFunc:	
  5181                           
  5182                           	psect	text11
  5183  0A65                     __ptext11:	
  5184 ;; *************** function _Sw_DimmerOffFunc *****************
  5185 ;; Defined at:
  5186 ;;		line 266 in file "../src/Switch_B1.c"
  5187 ;; Parameters:    Size  Location     Type
  5188 ;;  sw              1    wreg     unsigned char 
  5189 ;; Auto vars:     Size  Location     Type
  5190 ;;  sw              1   68[BANK0 ] unsigned char 
  5191 ;; Return value:  Size  Location     Type
  5192 ;;		None               void
  5193 ;; Registers used:
  5194 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5195 ;; Tracked objects:
  5196 ;;		On entry : 0/0
  5197 ;;		On exit  : 0/0
  5198 ;;		Unchanged: 0/0
  5199 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5200 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5201 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5202 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5203 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5204 ;;Total ram usage:        3 bytes
  5205 ;; Hardware stack levels used:    1
  5206 ;; Hardware stack levels required when called:    9
  5207 ;; This function calls:
  5208 ;;		_setDelayOff_GO
  5209 ;;		_setDimmerLights_AdjGo
  5210 ;;		_setDimmerLights_Switch
  5211 ;;		_setDimmerLights_Trigger
  5212 ;;		_setDimmerLights_TriggerAdj
  5213 ;;		_setRF_DimmerLights
  5214 ;;		_setTxData
  5215 ;; This function is called by:
  5216 ;;		_setSw_Main
  5217 ;; This function uses a non-reentrant model
  5218 ;;
  5219                           
  5220                           
  5221                           ;psect for function _Sw_DimmerOffFunc
  5222  0A65                     _Sw_DimmerOffFunc:	
  5223                           
  5224                           ;incstack = 0
  5225                           ; Regs used in _Sw_DimmerOffFunc: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5226                           ;Sw_DimmerOffFunc@sw stored from wreg
  5227  0A65  0020               	movlb	0	; select bank0
  5228  0A66  00E4               	movwf	Sw_DimmerOffFunc@sw
  5229                           
  5230                           ;Switch_B1.c: 267: if (Sw->Flag) {
  5231  0A67  087B               	movf	_Sw,w
  5232  0A68  0086               	movwf	6
  5233  0A69  3001               	movlw	1	; select bank2/3
  5234  0A6A  0087               	movwf	7
  5235  0A6B  1F81               	btfss	1,7
  5236  0A6C  0008               	return
  5237                           
  5238                           ;Switch_B1.c: 268: Sw->Flag = 0;
  5239  0A6D  087B               	movf	_Sw,w
  5240  0A6E  0086               	movwf	6
  5241  0A6F  3001               	movlw	1	; select bank2/3
  5242  0A70  0087               	movwf	7
  5243  0A71  1381               	bcf	1,7
  5244                           
  5245                           ;Switch_B1.c: 269: if (Sw->Status) {
  5246  0A72  087B               	movf	_Sw,w
  5247  0A73  0086               	movwf	6
  5248  0A74  3001               	movlw	1	; select bank2/3
  5249  0A75  0087               	movwf	7
  5250  0A76  1F01               	btfss	1,6
  5251  0A77  2AB1               	goto	l6282
  5252                           
  5253                           ;Switch_B1.c: 270: if (Sw->Adj) {
  5254  0A78  0A7B               	incf	_Sw,w
  5255  0A79  0086               	movwf	6
  5256  0A7A  3001               	movlw	1	; select bank2/3
  5257  0A7B  0087               	movwf	7
  5258  0A7C  1C01               	btfss	1,0
  5259  0A7D  0008               	return
  5260                           
  5261                           ;Switch_B1.c: 271: Sw->Adj = 0;
  5262  0A7E  0A7B               	incf	_Sw,w
  5263  0A7F  0086               	movwf	6
  5264  0A80  3001               	movlw	1	; select bank2/3
  5265  0A81  0087               	movwf	7
  5266  0A82  1001               	bcf	1,0
  5267                           
  5268                           ;Switch_B1.c: 272: setDimmerLights_TriggerAdj(sw, 1);
  5269  0A83  01A2               	clrf	setDimmerLights_TriggerAdj@command
  5270  0A84  0AA2               	incf	setDimmerLights_TriggerAdj@command,f
  5271  0A85  0864               	movf	Sw_DimmerOffFunc@sw,w
  5272  0A86  319F  275D  318A   	fcall	_setDimmerLights_TriggerAdj
  5273                           
  5274                           ;Switch_B1.c: 273: setDimmerLights_AdjGo(sw, 0);
  5275  0A89  0020               	movlb	0	; select bank0
  5276  0A8A  01A2               	clrf	setDimmerLights_AdjGo@command
  5277  0A8B  0864               	movf	Sw_DimmerOffFunc@sw,w
  5278  0A8C  319F  274D  318A   	fcall	_setDimmerLights_AdjGo
  5279                           
  5280                           ;Switch_B1.c: 275: product->Data[17]=product->Data[26 + sw];
  5281  0A8F  0020               	movlb	0	; select bank0
  5282  0A90  0864               	movf	Sw_DimmerOffFunc@sw,w
  5283  0A91  3E1A               	addlw	26
  5284  0A92  077D               	addwf	_product,w
  5285  0A93  00E2               	movwf	??_Sw_DimmerOffFunc
  5286  0A94  0862               	movf	??_Sw_DimmerOffFunc,w
  5287  0A95  0086               	movwf	6
  5288  0A96  3001               	movlw	1	; select bank2/3
  5289  0A97  0087               	movwf	7
  5290  0A98  0801               	movf	1,w
  5291  0A99  00E3               	movwf	??_Sw_DimmerOffFunc+1
  5292  0A9A  087D               	movf	_product,w
  5293  0A9B  3E11               	addlw	17
  5294  0A9C  0086               	movwf	6
  5295  0A9D  3001               	movlw	1	; select bank2/3
  5296  0A9E  0087               	movwf	7
  5297  0A9F  0863               	movf	??_Sw_DimmerOffFunc+1,w
  5298  0AA0  0081               	movwf	1
  5299                           
  5300                           ;Switch_B1.c: 276: setRF_DimmerLights(sw, Sw->Status);
  5301  0AA1  087B               	movf	_Sw,w
  5302  0AA2  0086               	movwf	6
  5303  0AA3  3001               	movlw	1	; select bank2/3
  5304  0AA4  0087               	movwf	7
  5305  0AA5  3000               	movlw	0
  5306  0AA6  1B01               	btfsc	1,6
  5307  0AA7  3001               	movlw	1
  5308  0AA8  00DD               	movwf	setRF_DimmerLights@on
  5309  0AA9  0864               	movf	Sw_DimmerOffFunc@sw,w
  5310  0AAA  3189  218C  318A   	fcall	_setRF_DimmerLights
  5311                           
  5312                           ;Switch_B1.c: 277: setTxData(1);
  5313  0AAD  3001               	movlw	1
  5314  0AAE  318E  26BD         	fcall	_setTxData
  5315                           
  5316                           ;Switch_B1.c: 279: }
  5317                           ;Switch_B1.c: 280: } else {
  5318  0AB0  0008               	return
  5319  0AB1                     l6282:	
  5320                           
  5321                           ;Switch_B1.c: 281: setDimmerLights_Trigger(sw, 1);
  5322  0AB1  0020               	movlb	0	; select bank0
  5323  0AB2  01A2               	clrf	setDimmerLights_Trigger@command
  5324  0AB3  0AA2               	incf	setDimmerLights_Trigger@command,f
  5325  0AB4  0864               	movf	Sw_DimmerOffFunc@sw,w
  5326  0AB5  319F  273D  318A   	fcall	_setDimmerLights_Trigger
  5327                           
  5328                           ;Switch_B1.c: 282: setDimmerLights_Switch(sw, 0);
  5329  0AB8  0020               	movlb	0	; select bank0
  5330  0AB9  01A2               	clrf	setDimmerLights_Switch@command
  5331  0ABA  0864               	movf	Sw_DimmerOffFunc@sw,w
  5332  0ABB  319F  272D  318A   	fcall	_setDimmerLights_Switch
  5333                           
  5334                           ;Switch_B1.c: 284: setDelayOff_GO(sw, 0, 0);
  5335  0ABE  0020               	movlb	0	; select bank0
  5336  0ABF  01A3               	clrf	setDelayOff_GO@command
  5337  0AC0  01A4               	clrf	setDelayOff_GO@value
  5338  0AC1  0864               	movf	Sw_DimmerOffFunc@sw,w
  5339  0AC2  3188  2012  318A   	fcall	_setDelayOff_GO
  5340                           
  5341                           ;Switch_B1.c: 285: setRF_DimmerLights(sw, Sw->Status);
  5342  0AC5  087B               	movf	_Sw,w
  5343  0AC6  0086               	movwf	6
  5344  0AC7  3001               	movlw	1	; select bank2/3
  5345  0AC8  0087               	movwf	7
  5346  0AC9  3000               	movlw	0
  5347  0ACA  1B01               	btfsc	1,6
  5348  0ACB  3001               	movlw	1
  5349  0ACC  0020               	movlb	0	; select bank0
  5350  0ACD  00DD               	movwf	setRF_DimmerLights@on
  5351  0ACE  0864               	movf	Sw_DimmerOffFunc@sw,w
  5352  0ACF  3189  218C  318A   	fcall	_setRF_DimmerLights
  5353                           
  5354                           ;Switch_B1.c: 286: setTxData(1);
  5355  0AD2  3001               	movlw	1
  5356  0AD3  318E  26BD         	fcall	_setTxData
  5357  0AD5  0008               	return
  5358  0AD6                     __end_of_Sw_DimmerOffFunc:	
  5359                           
  5360                           	psect	text12
  5361  15E5                     __ptext12:	
  5362 ;; *************** function _Sw_DimmerAdjFunc *****************
  5363 ;; Defined at:
  5364 ;;		line 293 in file "../src/Switch_B1.c"
  5365 ;; Parameters:    Size  Location     Type
  5366 ;;  sw              1    wreg     unsigned char 
  5367 ;; Auto vars:     Size  Location     Type
  5368 ;;  sw              1    5[BANK0 ] unsigned char 
  5369 ;;  Idle            1    4[BANK0 ] unsigned char 
  5370 ;; Return value:  Size  Location     Type
  5371 ;;		None               void
  5372 ;; Registers used:
  5373 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5374 ;; Tracked objects:
  5375 ;;		On entry : 0/0
  5376 ;;		On exit  : 0/0
  5377 ;;		Unchanged: 0/0
  5378 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5379 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5380 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5381 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5382 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5383 ;;Total ram usage:        2 bytes
  5384 ;; Hardware stack levels used:    1
  5385 ;; Hardware stack levels required when called:    7
  5386 ;; This function calls:
  5387 ;;		_setDimmerLights_AdjGo
  5388 ;;		_setDimmerLights_TriggerAdj
  5389 ;;		_setRFSW_Status
  5390 ;; This function is called by:
  5391 ;;		_setSw_Main
  5392 ;; This function uses a non-reentrant model
  5393 ;;
  5394                           
  5395                           
  5396                           ;psect for function _Sw_DimmerAdjFunc
  5397  15E5                     _Sw_DimmerAdjFunc:	
  5398                           
  5399                           ;incstack = 0
  5400                           ; Regs used in _Sw_DimmerAdjFunc: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5401                           ;Sw_DimmerAdjFunc@sw stored from wreg
  5402  15E5  0020               	movlb	0	; select bank0
  5403  15E6  00A5               	movwf	Sw_DimmerAdjFunc@sw
  5404                           
  5405                           ;Switch_B1.c: 294: char Idle = 1;
  5406  15E7  01A4               	clrf	Sw_DimmerAdjFunc@Idle
  5407  15E8  0AA4               	incf	Sw_DimmerAdjFunc@Idle,f
  5408                           
  5409                           ;Switch_B1.c: 307: if (sw == 1) {
  5410  15E9  0825               	movf	Sw_DimmerAdjFunc@sw,w
  5411  15EA  3A01               	xorlw	1
  5412  15EB  1D03               	skipz
  5413  15EC  2DF0               	goto	l6248
  5414                           
  5415                           ;Switch_B1.c: 308: Idle = (DimmerLights22->AdjGo) ? 0 : 1;
  5416  15ED  0021               	movlb	1	; select bank1
  5417  15EE  083B               	movf	_DimmerLights22^(0+128),w
  5418  15EF  2DF6               	goto	L3
  5419  15F0                     l6248:	
  5420                           ;Switch_B1.c: 309: } else if (sw == 2) {
  5421                           
  5422  15F0  0825               	movf	Sw_DimmerAdjFunc@sw,w
  5423  15F1  3A02               	xorlw	2
  5424  15F2  1D03               	skipz
  5425  15F3  2E02               	goto	l6252
  5426                           
  5427                           ;Switch_B1.c: 310: Idle = (DimmerLights11->AdjGo) ? 0 : 1;
  5428  15F4  0021               	movlb	1	; select bank1
  5429  15F5  083A               	movf	_DimmerLights11^(0+128),w
  5430  15F6                     L3:	
  5431  15F6  3E08               	addlw	8
  5432  15F7  0086               	movwf	6
  5433  15F8  3001               	movlw	1	; select bank2/3
  5434  15F9  0087               	movwf	7
  5435  15FA  1003               	clrc
  5436  15FB  1D81               	btfss	1,3
  5437  15FC  1403               	setc
  5438  15FD  3000               	movlw	0
  5439  15FE  1803               	btfsc	3,0
  5440  15FF  3001               	movlw	1
  5441  1600  0020               	movlb	0	; select bank0
  5442  1601  00A4               	movwf	Sw_DimmerAdjFunc@Idle
  5443  1602                     l6252:	
  5444                           
  5445                           ;Switch_B1.c: 311: }
  5446                           ;Switch_B1.c: 314: if (Idle) {
  5447  1602  0824               	movf	Sw_DimmerAdjFunc@Idle,w
  5448  1603  1903               	btfsc	3,2
  5449  1604  0008               	return
  5450                           
  5451                           ;Switch_B1.c: 315: if (Sw->Flag) {
  5452  1605  087B               	movf	_Sw,w
  5453  1606  0086               	movwf	6
  5454  1607  3001               	movlw	1	; select bank2/3
  5455  1608  0087               	movwf	7
  5456  1609  1F81               	btfss	1,7
  5457  160A  0008               	return
  5458                           
  5459                           ;Switch_B1.c: 316: Sw->Adj = 1;
  5460  160B  0A7B               	incf	_Sw,w
  5461  160C  0086               	movwf	6
  5462  160D  3001               	movlw	1	; select bank2/3
  5463  160E  0087               	movwf	7
  5464  160F  1401               	bsf	1,0
  5465                           
  5466                           ;Switch_B1.c: 317: Sw->Status = 1;
  5467  1610  087B               	movf	_Sw,w
  5468  1611  0086               	movwf	6
  5469  1612  3001               	movlw	1	; select bank2/3
  5470  1613  0087               	movwf	7
  5471  1614  1701               	bsf	1,6
  5472                           
  5473                           ;Switch_B1.c: 318: setRFSW_Status(sw, 1);
  5474  1615  01A2               	clrf	setRFSW_Status@command
  5475  1616  0AA2               	incf	setRFSW_Status@command,f
  5476  1617  0825               	movf	Sw_DimmerAdjFunc@sw,w
  5477  1618  319E  26EF  3195   	fcall	_setRFSW_Status
  5478                           
  5479                           ;Switch_B1.c: 320: setDimmerLights_TriggerAdj(sw, 1);
  5480  161B  0020               	movlb	0	; select bank0
  5481  161C  01A2               	clrf	setDimmerLights_TriggerAdj@command
  5482  161D  0AA2               	incf	setDimmerLights_TriggerAdj@command,f
  5483  161E  0825               	movf	Sw_DimmerAdjFunc@sw,w
  5484  161F  319F  275D  3195   	fcall	_setDimmerLights_TriggerAdj
  5485                           
  5486                           ;Switch_B1.c: 321: setDimmerLights_AdjGo(sw, 1);
  5487  1622  0020               	movlb	0	; select bank0
  5488  1623  01A2               	clrf	setDimmerLights_AdjGo@command
  5489  1624  0AA2               	incf	setDimmerLights_AdjGo@command,f
  5490  1625  0825               	movf	Sw_DimmerAdjFunc@sw,w
  5491  1626  319F  274D         	fcall	_setDimmerLights_AdjGo
  5492  1628  0020               	movlb	0	; select bank0
  5493  1629  0008               	return
  5494  162A                     __end_of_Sw_DimmerAdjFunc:	
  5495                           
  5496                           	psect	text13
  5497  1F5D                     __ptext13:	
  5498 ;; *************** function _setDimmerLights_TriggerAdj *****************
  5499 ;; Defined at:
  5500 ;;		line 737 in file "../src/Dimmer_B1.c"
  5501 ;; Parameters:    Size  Location     Type
  5502 ;;  lights          1    wreg     unsigned char 
  5503 ;;  command         1    2[BANK0 ] unsigned char 
  5504 ;; Auto vars:     Size  Location     Type
  5505 ;;  lights          1    3[BANK0 ] unsigned char 
  5506 ;; Return value:  Size  Location     Type
  5507 ;;		None               void
  5508 ;; Registers used:
  5509 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5510 ;; Tracked objects:
  5511 ;;		On entry : 0/0
  5512 ;;		On exit  : 0/0
  5513 ;;		Unchanged: 0/0
  5514 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5515 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5516 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5517 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5518 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5519 ;;Total ram usage:        2 bytes
  5520 ;; Hardware stack levels used:    1
  5521 ;; Hardware stack levels required when called:    6
  5522 ;; This function calls:
  5523 ;;		_DimmerLightsPointSelect
  5524 ;; This function is called by:
  5525 ;;		_Sw_DimmerOffFunc
  5526 ;;		_Sw_DimmerAdjFunc
  5527 ;; This function uses a non-reentrant model
  5528 ;;
  5529                           
  5530                           
  5531                           ;psect for function _setDimmerLights_TriggerAdj
  5532  1F5D                     _setDimmerLights_TriggerAdj:	
  5533                           
  5534                           ;incstack = 0
  5535                           ; Regs used in _setDimmerLights_TriggerAdj: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  5536                           ;setDimmerLights_TriggerAdj@lights stored from wreg
  5537  1F5D  0020               	movlb	0	; select bank0
  5538  1F5E  00A3               	movwf	setDimmerLights_TriggerAdj@lights
  5539                           
  5540                           ;Dimmer_B1.c: 739: DimmerLightsPointSelect(lights);
  5541  1F5F  0823               	movf	setDimmerLights_TriggerAdj@lights,w
  5542  1F60  319F  27B1         	fcall	_DimmerLightsPointSelect
  5543                           
  5544                           ;Dimmer_B1.c: 740: DimmerLights->TriggerAdj = command;
  5545  1F62  0879               	movf	_DimmerLights,w
  5546  1F63  3E08               	addlw	8
  5547  1F64  0086               	movwf	6
  5548  1F65  3001               	movlw	1	; select bank2/3
  5549  1F66  0087               	movwf	7
  5550  1F67  0020               	movlb	0	; select bank0
  5551  1F68  0822               	movf	setDimmerLights_TriggerAdj@command,w
  5552  1F69  1201               	bcf	1,4
  5553  1F6A  1D03               	skipz
  5554  1F6B  1601               	bsf	1,4
  5555  1F6C  0008               	return
  5556  1F6D                     __end_of_setDimmerLights_TriggerAdj:	
  5557                           
  5558                           	psect	text14
  5559  1F4D                     __ptext14:	
  5560 ;; *************** function _setDimmerLights_AdjGo *****************
  5561 ;; Defined at:
  5562 ;;		line 725 in file "../src/Dimmer_B1.c"
  5563 ;; Parameters:    Size  Location     Type
  5564 ;;  lights          1    wreg     unsigned char 
  5565 ;;  command         1    2[BANK0 ] unsigned char 
  5566 ;; Auto vars:     Size  Location     Type
  5567 ;;  lights          1    3[BANK0 ] unsigned char 
  5568 ;; Return value:  Size  Location     Type
  5569 ;;		None               void
  5570 ;; Registers used:
  5571 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5572 ;; Tracked objects:
  5573 ;;		On entry : 0/0
  5574 ;;		On exit  : 0/0
  5575 ;;		Unchanged: 0/0
  5576 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5577 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5578 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5579 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5580 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5581 ;;Total ram usage:        2 bytes
  5582 ;; Hardware stack levels used:    1
  5583 ;; Hardware stack levels required when called:    6
  5584 ;; This function calls:
  5585 ;;		_DimmerLightsPointSelect
  5586 ;; This function is called by:
  5587 ;;		_Sw_DimmerOffFunc
  5588 ;;		_Sw_DimmerAdjFunc
  5589 ;; This function uses a non-reentrant model
  5590 ;;
  5591                           
  5592                           
  5593                           ;psect for function _setDimmerLights_AdjGo
  5594  1F4D                     _setDimmerLights_AdjGo:	
  5595                           
  5596                           ;incstack = 0
  5597                           ; Regs used in _setDimmerLights_AdjGo: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  5598                           ;setDimmerLights_AdjGo@lights stored from wreg
  5599  1F4D  0020               	movlb	0	; select bank0
  5600  1F4E  00A3               	movwf	setDimmerLights_AdjGo@lights
  5601                           
  5602                           ;Dimmer_B1.c: 727: DimmerLightsPointSelect(lights);
  5603  1F4F  0823               	movf	setDimmerLights_AdjGo@lights,w
  5604  1F50  319F  27B1         	fcall	_DimmerLightsPointSelect
  5605                           
  5606                           ;Dimmer_B1.c: 728: DimmerLights->AdjGo = command;
  5607  1F52  0879               	movf	_DimmerLights,w
  5608  1F53  3E08               	addlw	8
  5609  1F54  0086               	movwf	6
  5610  1F55  3001               	movlw	1	; select bank2/3
  5611  1F56  0087               	movwf	7
  5612  1F57  0020               	movlb	0	; select bank0
  5613  1F58  0822               	movf	setDimmerLights_AdjGo@command,w
  5614  1F59  1181               	bcf	1,3
  5615  1F5A  1D03               	skipz
  5616  1F5B  1581               	bsf	1,3
  5617  1F5C  0008               	return
  5618  1F5D                     __end_of_setDimmerLights_AdjGo:	
  5619                           
  5620                           	psect	text15
  5621  1EE2                     __ptext15:	
  5622 ;; *************** function _Switch_Initialization *****************
  5623 ;; Defined at:
  5624 ;;		line 37 in file "../src/Switch_B1.c"
  5625 ;; Parameters:    Size  Location     Type
  5626 ;;		None
  5627 ;; Auto vars:     Size  Location     Type
  5628 ;;		None
  5629 ;; Return value:  Size  Location     Type
  5630 ;;		None               void
  5631 ;; Registers used:
  5632 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5633 ;; Tracked objects:
  5634 ;;		On entry : 0/0
  5635 ;;		On exit  : 0/0
  5636 ;;		Unchanged: 0/0
  5637 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5638 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5639 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5640 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5641 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5642 ;;Total ram usage:        0 bytes
  5643 ;; Hardware stack levels used:    1
  5644 ;; Hardware stack levels required when called:    8
  5645 ;; This function calls:
  5646 ;;		_TouchPower
  5647 ;;		_setSw_Initialization
  5648 ;; This function is called by:
  5649 ;;		_main
  5650 ;; This function uses a non-reentrant model
  5651 ;;
  5652                           
  5653                           
  5654                           ;psect for function _Switch_Initialization
  5655  1EE2                     _Switch_Initialization:	
  5656                           
  5657                           ;Switch_B1.c: 38: TouchPower();
  5658                           
  5659                           ;incstack = 0
  5660                           ; Regs used in _Switch_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  5661  1EE2  319D  25E3  319E   	fcall	_TouchPower
  5662                           
  5663                           ;Switch_B1.c: 40: WPUB1 = 0;
  5664  1EE5  0024               	movlb	4	; select bank4
  5665  1EE6  108D               	bcf	13,1	;volatile
  5666                           
  5667                           ;Switch_B1.c: 49: setSw_Initialization(1);
  5668  1EE7  3001               	movlw	1
  5669  1EE8  319E  2619  319E   	fcall	_setSw_Initialization
  5670                           
  5671                           ;Switch_B1.c: 52: setSw_Initialization(2);
  5672  1EEB  3002               	movlw	2
  5673  1EEC  319E  2619         	fcall	_setSw_Initialization
  5674  1EEE  0008               	return
  5675  1EEF                     __end_of_Switch_Initialization:	
  5676                           
  5677                           	psect	text16
  5678  1E19                     __ptext16:	
  5679 ;; *************** function _setSw_Initialization *****************
  5680 ;; Defined at:
  5681 ;;		line 77 in file "../src/Switch_B1.c"
  5682 ;; Parameters:    Size  Location     Type
  5683 ;;  sw              1    wreg     unsigned char 
  5684 ;; Auto vars:     Size  Location     Type
  5685 ;;  sw              1    4[BANK0 ] unsigned char 
  5686 ;; Return value:  Size  Location     Type
  5687 ;;		None               void
  5688 ;; Registers used:
  5689 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5690 ;; Tracked objects:
  5691 ;;		On entry : 0/0
  5692 ;;		On exit  : 0/0
  5693 ;;		Unchanged: 0/0
  5694 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5695 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5696 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5697 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5698 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5699 ;;Total ram usage:        1 bytes
  5700 ;; Hardware stack levels used:    1
  5701 ;; Hardware stack levels required when called:    7
  5702 ;; This function calls:
  5703 ;;		_setLED
  5704 ;; This function is called by:
  5705 ;;		_Switch_Initialization
  5706 ;; This function uses a non-reentrant model
  5707 ;;
  5708                           
  5709                           
  5710                           ;psect for function _setSw_Initialization
  5711  1E19                     _setSw_Initialization:	
  5712                           
  5713                           ;incstack = 0
  5714                           ; Regs used in _setSw_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5715                           ;setSw_Initialization@sw stored from wreg
  5716  1E19  0020               	movlb	0	; select bank0
  5717  1E1A  00A4               	movwf	setSw_Initialization@sw
  5718                           
  5719                           ;Switch_B1.c: 78: setLED(sw, 1);
  5720  1E1B  01A2               	clrf	setLED@command
  5721  1E1C  0AA2               	incf	setLED@command,f
  5722  1E1D  0824               	movf	setSw_Initialization@sw,w
  5723  1E1E  3188  206F         	fcall	_setLED
  5724  1E20  0008               	return
  5725  1E21                     __end_of_setSw_Initialization:	
  5726                           
  5727                           	psect	text17
  5728  1DE3                     __ptext17:	
  5729 ;; *************** function _TouchPower *****************
  5730 ;; Defined at:
  5731 ;;		line 10 in file "../src/Switch_B1.c"
  5732 ;; Parameters:    Size  Location     Type
  5733 ;;		None
  5734 ;; Auto vars:     Size  Location     Type
  5735 ;;		None
  5736 ;; Return value:  Size  Location     Type
  5737 ;;		None               void
  5738 ;; Registers used:
  5739 ;;		None
  5740 ;; Tracked objects:
  5741 ;;		On entry : 0/0
  5742 ;;		On exit  : 0/0
  5743 ;;		Unchanged: 0/0
  5744 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5745 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5746 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5747 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5748 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5749 ;;Total ram usage:        0 bytes
  5750 ;; Hardware stack levels used:    1
  5751 ;; Hardware stack levels required when called:    5
  5752 ;; This function calls:
  5753 ;;		Nothing
  5754 ;; This function is called by:
  5755 ;;		_Switch_Initialization
  5756 ;; This function uses a non-reentrant model
  5757 ;;
  5758                           
  5759                           
  5760                           ;psect for function _TouchPower
  5761  1DE3                     _TouchPower:	
  5762  1DE3                     l2598:	
  5763                           ;Switch_B1.c: 11: while (RC5 == 0)
  5764                           
  5765                           ;incstack = 0
  5766                           ; Regs used in _TouchPower: []
  5767                           
  5768  1DE3  0020               	movlb	0	; select bank0
  5769  1DE4  1A8E               	btfsc	14,5	;volatile
  5770  1DE5  0008               	return
  5771                           
  5772                           ;Switch_B1.c: 12: RC5 = 1;
  5773  1DE6  168E               	bsf	14,5	;volatile
  5774  1DE7  2DE3               	goto	l2598
  5775  1DE8                     __end_of_TouchPower:	
  5776                           
  5777                           	psect	text18
  5778  1DDF                     __ptext18:	
  5779 ;; *************** function _RF_Main *****************
  5780 ;; Defined at:
  5781 ;;		line 23 in file "../src/RF_Control_B1.c"
  5782 ;; Parameters:    Size  Location     Type
  5783 ;;		None
  5784 ;; Auto vars:     Size  Location     Type
  5785 ;;		None
  5786 ;; Return value:  Size  Location     Type
  5787 ;;		None               void
  5788 ;; Registers used:
  5789 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5790 ;; Tracked objects:
  5791 ;;		On entry : 0/0
  5792 ;;		On exit  : 0/0
  5793 ;;		Unchanged: 0/0
  5794 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5795 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5796 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5797 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5798 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5799 ;;Total ram usage:        0 bytes
  5800 ;; Hardware stack levels used:    1
  5801 ;; Hardware stack levels required when called:   14
  5802 ;; This function calls:
  5803 ;;		_setRF_Main
  5804 ;; This function is called by:
  5805 ;;		_main
  5806 ;; This function uses a non-reentrant model
  5807 ;;
  5808                           
  5809                           
  5810                           ;psect for function _RF_Main
  5811  1DDF                     _RF_Main:	
  5812                           
  5813                           ;RF_Control_B1.c: 25: setRF_Main(1);
  5814                           
  5815                           ;incstack = 0
  5816                           ; Regs used in _RF_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5817  1DDF  3001               	movlw	1
  5818  1DE0  3186  2611         	fcall	_setRF_Main
  5819  1DE2  0008               	return
  5820  1DE3                     __end_of_RF_Main:	
  5821                           
  5822                           	psect	text19
  5823  0611                     __ptext19:	
  5824 ;; *************** function _setRF_Main *****************
  5825 ;; Defined at:
  5826 ;;		line 57 in file "../src/RF_Control_B1.c"
  5827 ;; Parameters:    Size  Location     Type
  5828 ;;  rf              1    wreg     unsigned char 
  5829 ;; Auto vars:     Size  Location     Type
  5830 ;;  rf              1   74[BANK0 ] unsigned char 
  5831 ;; Return value:  Size  Location     Type
  5832 ;;		None               void
  5833 ;; Registers used:
  5834 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5835 ;; Tracked objects:
  5836 ;;		On entry : 0/0
  5837 ;;		On exit  : 0/0
  5838 ;;		Unchanged: 0/0
  5839 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5840 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5841 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5842 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5843 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5844 ;;Total ram usage:        3 bytes
  5845 ;; Hardware stack levels used:    1
  5846 ;; Hardware stack levels required when called:   13
  5847 ;; This function calls:
  5848 ;;		_CC2500_RxData
  5849 ;;		_CC2500_TxData
  5850 ;;		_CC2500_WriteCommand
  5851 ;;		_RF_RxDisable
  5852 ;;		_RfPointSelect
  5853 ;;		_getRxData
  5854 ;;		_setINT_GO
  5855 ;; This function is called by:
  5856 ;;		_RF_Main
  5857 ;; This function uses a non-reentrant model
  5858 ;;
  5859                           
  5860                           
  5861                           ;psect for function _setRF_Main
  5862  0611                     _setRF_Main:	
  5863                           
  5864                           ;incstack = 0
  5865                           ; Regs used in _setRF_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5866                           ;setRF_Main@rf stored from wreg
  5867  0611  0020               	movlb	0	; select bank0
  5868  0612  00EA               	movwf	setRF_Main@rf
  5869                           
  5870                           ;RF_Control_B1.c: 58: RfPointSelect(rf);
  5871  0613  086A               	movf	setRF_Main@rf,w
  5872  0614  319E  267E  3186   	fcall	_RfPointSelect
  5873                           
  5874                           ;RF_Control_B1.c: 59: if (RF->Enable == 1) {
  5875  0617  0021               	movlb	1	; select bank1
  5876  0618  083E               	movf	_RF^(0+128),w
  5877  0619  0086               	movwf	6
  5878  061A  0187               	clrf	7
  5879  061B  1C01               	btfss	1,0
  5880  061C  0008               	return
  5881                           
  5882                           ;RF_Control_B1.c: 62: if (Buz->GO == 0) {
  5883  061D  0878               	movf	_Buz,w
  5884  061E  0086               	movwf	6
  5885  061F  3001               	movlw	1	; select bank2/3
  5886  0620  0087               	movwf	7
  5887  0621  1881               	btfsc	1,1
  5888  0622  0008               	return
  5889                           
  5890                           ;RF_Control_B1.c: 68: RF->Key = (RA6 == 1 || RA4 == 1 || RA0 == 1 || RB1 == 1) ? 1 : 0;
  5891  0623  0020               	movlb	0	; select bank0
  5892  0624  01EB               	clrf	_setRF_Main$4260
  5893  0625  0AEB               	incf	_setRF_Main$4260,f
  5894  0626  1F0C               	btfss	12,6	;volatile
  5895  0627  1A0C               	btfsc	12,4	;volatile
  5896  0628  2E2D               	goto	l6722
  5897  0629  1C0C               	btfss	12,0	;volatile
  5898  062A  188D               	btfsc	13,1	;volatile
  5899  062B  2E2D               	goto	l6722
  5900  062C  01EB               	clrf	_setRF_Main$4260
  5901  062D                     l6722:	
  5902  062D  0021               	movlb	1	; select bank1
  5903  062E  083E               	movf	_RF^(0+128),w
  5904  062F  0086               	movwf	6
  5905  0630  0187               	clrf	7
  5906  0631  0020               	movlb	0	; select bank0
  5907  0632  086B               	movf	_setRF_Main$4260,w
  5908  0633  1381               	bcf	1,7
  5909  0634  1D03               	skipz
  5910  0635  1781               	bsf	1,7
  5911                           
  5912                           ;RF_Control_B1.c: 74: if (RF->Key == 1 && RF->Learn == 0) {
  5913  0636  0021               	movlb	1	; select bank1
  5914  0637  083E               	movf	_RF^(0+128),w
  5915  0638  0086               	movwf	6
  5916  0639  0187               	clrf	7
  5917  063A  1F81               	btfss	1,7
  5918  063B  2E49               	goto	l6732
  5919  063C  083E               	movf	_RF^(0+128),w
  5920  063D  0086               	movwf	6
  5921  063E  0187               	clrf	7
  5922  063F  1B01               	btfsc	1,6
  5923  0640  2E49               	goto	l6732
  5924                           
  5925                           ;RF_Control_B1.c: 75: RF->Run = 1;
  5926  0641  0A3E               	incf	_RF^(0+128),w
  5927  0642  0086               	movwf	6
  5928  0643  0187               	clrf	7
  5929  0644  1481               	bsf	1,1
  5930                           
  5931                           ;RF_Control_B1.c: 76: RF_RxDisable(1);
  5932  0645  3001               	movlw	1
  5933  0646  3193  2322         	fcall	_RF_RxDisable
  5934                           
  5935                           ;RF_Control_B1.c: 77: } else {
  5936  0648  0008               	return
  5937  0649                     l6732:	
  5938                           
  5939                           ;RF_Control_B1.c: 78: if (RF->Run == 1 && RF->Learn == 0) {
  5940  0649  0021               	movlb	1	; select bank1
  5941  064A  0A3E               	incf	_RF^(0+128),w
  5942  064B  0086               	movwf	6
  5943  064C  0187               	clrf	7
  5944  064D  1C81               	btfss	1,1
  5945  064E  2E72               	goto	l6744
  5946  064F  083E               	movf	_RF^(0+128),w
  5947  0650  0086               	movwf	6
  5948  0651  0187               	clrf	7
  5949  0652  1B01               	btfsc	1,6
  5950  0653  2E72               	goto	l6744
  5951                           
  5952                           ;RF_Control_B1.c: 79: RF->Count++;
  5953  0654  3001               	movlw	1
  5954  0655  0020               	movlb	0	; select bank0
  5955  0656  00E9               	movwf	??_setRF_Main
  5956  0657  0021               	movlb	1	; select bank1
  5957  0658  083E               	movf	_RF^(0+128),w
  5958  0659  3E03               	addlw	3
  5959  065A  0086               	movwf	6
  5960  065B  0187               	clrf	7
  5961  065C  0020               	movlb	0	; select bank0
  5962  065D  0869               	movf	??_setRF_Main,w
  5963  065E  0781               	addwf	1,f
  5964                           
  5965                           ;RF_Control_B1.c: 80: if (RF->Count == 25) {
  5966  065F  0021               	movlb	1	; select bank1
  5967  0660  083E               	movf	_RF^(0+128),w
  5968  0661  3E03               	addlw	3
  5969  0662  0086               	movwf	6
  5970  0663  0187               	clrf	7
  5971  0664  0801               	movf	1,w
  5972  0665  3A19               	xorlw	25
  5973  0666  1D03               	skipz
  5974  0667  0008               	return
  5975                           
  5976                           ;RF_Control_B1.c: 81: RF->Count = 0;
  5977  0668  083E               	movf	_RF^(0+128),w
  5978  0669  3E03               	addlw	3
  5979  066A  0086               	movwf	6
  5980  066B  0187               	clrf	7
  5981  066C  0181               	clrf	1
  5982                           
  5983                           ;RF_Control_B1.c: 82: RF->Run = 0;
  5984  066D  0A3E               	incf	_RF^(0+128),w
  5985  066E  0086               	movwf	6
  5986  066F  0187               	clrf	7
  5987  0670  1081               	bcf	1,1
  5988                           
  5989                           ;RF_Control_B1.c: 83: }
  5990                           ;RF_Control_B1.c: 84: } else {
  5991  0671  0008               	return
  5992  0672                     l6744:	
  5993                           
  5994                           ;RF_Control_B1.c: 85: RF->Count = 0;
  5995  0672  083E               	movf	_RF^(0+128),w
  5996  0673  3E03               	addlw	3
  5997  0674  0086               	movwf	6
  5998  0675  0187               	clrf	7
  5999  0676  0181               	clrf	1
  6000                           
  6001                           ;RF_Control_B1.c: 86: RF->Run = 0;
  6002  0677  0A3E               	incf	_RF^(0+128),w
  6003  0678  0086               	movwf	6
  6004  0679  0187               	clrf	7
  6005  067A  1081               	bcf	1,1
  6006                           
  6007                           ;RF_Control_B1.c: 88: if (RF->ReceiveGO == 1) {
  6008  067B  083E               	movf	_RF^(0+128),w
  6009  067C  0086               	movwf	6
  6010  067D  0187               	clrf	7
  6011  067E  1C81               	btfss	1,1
  6012  067F  2E8F               	goto	l6758
  6013                           
  6014                           ;RF_Control_B1.c: 89: RF->ReceiveGO = 0;
  6015  0680  083E               	movf	_RF^(0+128),w
  6016  0681  0086               	movwf	6
  6017  0682  0187               	clrf	7
  6018  0683  1081               	bcf	1,1
  6019                           
  6020                           ;RF_Control_B1.c: 90: RF_RxDisable(1);
  6021  0684  3001               	movlw	1
  6022  0685  3193  2322  3186   	fcall	_RF_RxDisable
  6023                           
  6024                           ;RF_Control_B1.c: 91: CC2500_RxData();
  6025  0688  3188  20CD  3186   	fcall	_CC2500_RxData
  6026                           
  6027                           ;RF_Control_B1.c: 99: getRxData(1);
  6028  068B  3001               	movlw	1
  6029  068C  3196  26B7         	fcall	_getRxData
  6030                           
  6031                           ;RF_Control_B1.c: 102: } else {
  6032  068E  0008               	return
  6033  068F                     l6758:	
  6034                           
  6035                           ;RF_Control_B1.c: 103: if (RF->Learn == 0) {
  6036  068F  0021               	movlb	1	; select bank1
  6037  0690  083E               	movf	_RF^(0+128),w
  6038  0691  0086               	movwf	6
  6039  0692  0187               	clrf	7
  6040  0693  1B01               	btfsc	1,6
  6041  0694  2EB2               	goto	l6774
  6042                           
  6043                           ;RF_Control_B1.c: 104: if (RF->TransceiveGO == 1) {
  6044  0695  083E               	movf	_RF^(0+128),w
  6045  0696  0086               	movwf	6
  6046  0697  0187               	clrf	7
  6047  0698  1D01               	btfss	1,2
  6048  0699  2EA5               	goto	l6768
  6049                           
  6050                           ;RF_Control_B1.c: 105: RF->TransceiveGO = 0;
  6051  069A  083E               	movf	_RF^(0+128),w
  6052  069B  0086               	movwf	6
  6053  069C  0187               	clrf	7
  6054  069D  1101               	bcf	1,2
  6055                           
  6056                           ;RF_Control_B1.c: 106: RF_RxDisable(1);
  6057  069E  3001               	movlw	1
  6058  069F  3193  2322  3186   	fcall	_RF_RxDisable
  6059                           
  6060                           ;RF_Control_B1.c: 107: CC2500_TxData();
  6061  06A2  3195  255C         	fcall	_CC2500_TxData
  6062                           
  6063                           ;RF_Control_B1.c: 109: } else {
  6064  06A4  0008               	return
  6065  06A5                     l6768:	
  6066                           
  6067                           ;RF_Control_B1.c: 111: RF->RxStatus = 1;
  6068  06A5  0021               	movlb	1	; select bank1
  6069  06A6  083E               	movf	_RF^(0+128),w
  6070  06A7  0086               	movwf	6
  6071  06A8  0187               	clrf	7
  6072  06A9  1581               	bsf	1,3
  6073                           
  6074                           ;RF_Control_B1.c: 112: CC2500_WriteCommand(0x34);
  6075  06AA  3034               	movlw	52
  6076  06AB  319F  271D  3186   	fcall	_CC2500_WriteCommand
  6077                           
  6078                           ;RF_Control_B1.c: 113: setINT_GO(1);
  6079  06AE  3001               	movlw	1
  6080  06AF  319E  2632         	fcall	_setINT_GO
  6081                           
  6082                           ;RF_Control_B1.c: 115: }
  6083                           ;RF_Control_B1.c: 116: } else {
  6084  06B1  0008               	return
  6085  06B2                     l6774:	
  6086                           
  6087                           ;RF_Control_B1.c: 118: RF->RxStatus = 1;
  6088  06B2  0021               	movlb	1	; select bank1
  6089  06B3  083E               	movf	_RF^(0+128),w
  6090  06B4  0086               	movwf	6
  6091  06B5  0187               	clrf	7
  6092  06B6  1581               	bsf	1,3
  6093                           
  6094                           ;RF_Control_B1.c: 119: CC2500_WriteCommand(0x34);
  6095  06B7  3034               	movlw	52
  6096  06B8  319F  271D  3186   	fcall	_CC2500_WriteCommand
  6097                           
  6098                           ;RF_Control_B1.c: 120: setINT_GO(1);
  6099  06BB  3001               	movlw	1
  6100  06BC  319E  2632         	fcall	_setINT_GO
  6101  06BE  0008               	return
  6102  06BF                     __end_of_setRF_Main:	
  6103                           
  6104                           	psect	text20
  6105  16B7                     __ptext20:	
  6106 ;; *************** function _getRxData *****************
  6107 ;; Defined at:
  6108 ;;		line 209 in file "../src/RF_Control_B1.c"
  6109 ;; Parameters:    Size  Location     Type
  6110 ;;  rf              1    wreg     unsigned char 
  6111 ;; Auto vars:     Size  Location     Type
  6112 ;;  rf              1   72[BANK0 ] unsigned char 
  6113 ;;  i               1    0        unsigned char 
  6114 ;; Return value:  Size  Location     Type
  6115 ;;		None               void
  6116 ;; Registers used:
  6117 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6118 ;; Tracked objects:
  6119 ;;		On entry : 0/0
  6120 ;;		On exit  : 0/0
  6121 ;;		Unchanged: 0/0
  6122 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6123 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6124 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6125 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6126 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6127 ;;Total ram usage:        1 bytes
  6128 ;; Hardware stack levels used:    1
  6129 ;; Hardware stack levels required when called:   12
  6130 ;; This function calls:
  6131 ;;		_RfPointSelect
  6132 ;;		_setControl_Lights_Table
  6133 ;;		_setLog_Code
  6134 ;; This function is called by:
  6135 ;;		_setRF_Main
  6136 ;; This function uses a non-reentrant model
  6137 ;;
  6138                           
  6139                           
  6140                           ;psect for function _getRxData
  6141  16B7                     _getRxData:	
  6142                           
  6143                           ;incstack = 0
  6144                           ; Regs used in _getRxData: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6145                           ;getRxData@rf stored from wreg
  6146  16B7  0020               	movlb	0	; select bank0
  6147  16B8  00E8               	movwf	getRxData@rf
  6148                           
  6149                           ;RF_Control_B1.c: 210: unsigned char i;
  6150                           ;RF_Control_B1.c: 211: RfPointSelect(rf);
  6151  16B9  0868               	movf	getRxData@rf,w
  6152  16BA  319E  267E  3196   	fcall	_RfPointSelect
  6153                           
  6154                           ;RF_Control_B1.c: 212: if (RF->Learn) {
  6155  16BD  0021               	movlb	1	; select bank1
  6156  16BE  083E               	movf	_RF^(0+128),w
  6157  16BF  0086               	movwf	6
  6158  16C0  0187               	clrf	7
  6159  16C1  1F01               	btfss	1,6
  6160  16C2  2ECE               	goto	l6178
  6161                           
  6162                           ;RF_Control_B1.c: 213: if (RF_Data[0] == 0x0 && RF_Data[1] == 0x64)
  6163  16C3  08A0               	movf	_RF_Data^(0+128),f
  6164  16C4  1D03               	skipz
  6165  16C5  0008               	return
  6166  16C6  0821               	movf	(_RF_Data^(0+128)+1),w
  6167  16C7  3A64               	xorlw	100
  6168  16C8  1D03               	skipz
  6169  16C9  0008               	return
  6170                           
  6171                           ;RF_Control_B1.c: 214: {
  6172                           ;RF_Control_B1.c: 215: setLog_Code(1);
  6173  16CA  3001               	movlw	1
  6174  16CB  3196  2670         	fcall	_setLog_Code
  6175                           
  6176                           ;RF_Control_B1.c: 216: }
  6177                           ;RF_Control_B1.c: 217: } else {
  6178  16CD  0008               	return
  6179  16CE                     l6178:	
  6180                           
  6181                           ;RF_Control_B1.c: 218: if (RF_Data[0] == 0x00 && RF_Data[1] == 0x02)
  6182  16CE  0021               	movlb	1	; select bank1
  6183  16CF  08A0               	movf	_RF_Data^(0+128),f
  6184  16D0  1D03               	skipz
  6185  16D1  0008               	return
  6186  16D2  0821               	movf	(_RF_Data^(0+128)+1),w
  6187  16D3  3A02               	xorlw	2
  6188  16D4  1D03               	skipz
  6189  16D5  0008               	return
  6190                           
  6191                           ;RF_Control_B1.c: 219: {
  6192                           ;RF_Control_B1.c: 220: if (RF_Data[12] == 0xff && RF_Data[13] == 0xff && RF_Data[14] == 
      +                          0xff) {
  6193  16D6  082C               	movf	(_RF_Data^(0+128)+12),w
  6194  16D7  3AFF               	xorlw	255
  6195  16D8  1D03               	skipz
  6196  16D9  2EE4               	goto	l6190
  6197  16DA  082D               	movf	(_RF_Data^(0+128)+13),w
  6198  16DB  3AFF               	xorlw	255
  6199  16DC  1D03               	skipz
  6200  16DD  2EE4               	goto	l6190
  6201  16DE  082E               	movf	(_RF_Data^(0+128)+14),w
  6202  16DF  3AFF               	xorlw	255
  6203  16E0  1D03               	skipz
  6204  16E1  2EE4               	goto	l6190
  6205                           
  6206                           ;RF_Control_B1.c: 221: __nop();
  6207  16E2  0000               	nop
  6208                           
  6209                           ;RF_Control_B1.c: 222: } else {
  6210  16E3  0008               	return
  6211  16E4                     l6190:	
  6212                           
  6213                           ;RF_Control_B1.c: 223: if (RF_Data[12] == product->Data[12] && RF_Data[13] == product->D
      +                          ata[13] && RF_Data[14] == product->Data[14]) {
  6214  16E4  087D               	movf	_product,w
  6215  16E5  3E0C               	addlw	12
  6216  16E6  0086               	movwf	6
  6217  16E7  3001               	movlw	1	; select bank2/3
  6218  16E8  0087               	movwf	7
  6219  16E9  0021               	movlb	1	; select bank1
  6220  16EA  082C               	movf	(_RF_Data^(0+128)+12),w
  6221  16EB  0601               	xorwf	1,w
  6222  16EC  1D03               	skipz
  6223  16ED  0008               	return
  6224  16EE  087D               	movf	_product,w
  6225  16EF  3E0D               	addlw	13
  6226  16F0  0086               	movwf	6
  6227  16F1  3001               	movlw	1	; select bank2/3
  6228  16F2  0087               	movwf	7
  6229  16F3  082D               	movf	(_RF_Data^(0+128)+13),w
  6230  16F4  0601               	xorwf	1,w
  6231  16F5  1D03               	skipz
  6232  16F6  0008               	return
  6233  16F7  087D               	movf	_product,w
  6234  16F8  3E0E               	addlw	14
  6235  16F9  0086               	movwf	6
  6236  16FA  3001               	movlw	1	; select bank2/3
  6237  16FB  0087               	movwf	7
  6238  16FC  082E               	movf	(_RF_Data^(0+128)+14),w
  6239  16FD  0601               	xorwf	1,w
  6240  16FE  1D03               	skipz
  6241  16FF  0008               	return
  6242                           
  6243                           ;RF_Control_B1.c: 224: setControl_Lights_Table(1);
  6244  1700  3001               	movlw	1
  6245  1701  3187  2768         	fcall	_setControl_Lights_Table
  6246                           
  6247                           ;RF_Control_B1.c: 231: {
  6248                           ;RF_Control_B1.c: 232: ;
  6249                           
  6250                           ;RF_Control_B1.c: 228: {
  6251                           ;RF_Control_B1.c: 229: ;
  6252                           ;RF_Control_B1.c: 230: } else if (RF_Data[0] == 0x0 && RF_Data[1] == 0x65)
  6253                           
  6254                           ;RF_Control_B1.c: 225: }
  6255                           ;RF_Control_B1.c: 226: }
  6256                           ;RF_Control_B1.c: 227: } else if (RF_Data[0] == 0xff && RF_Data[1] == 0x02)
  6257  1703  0008               	return
  6258  1704                     __end_of_getRxData:	
  6259                           
  6260                           	psect	text21
  6261  1670                     __ptext21:	
  6262 ;; *************** function _setLog_Code *****************
  6263 ;; Defined at:
  6264 ;;		line 242 in file "../src/RF_Control_B1.c"
  6265 ;; Parameters:    Size  Location     Type
  6266 ;;  rf              1    wreg     unsigned char 
  6267 ;; Auto vars:     Size  Location     Type
  6268 ;;  rf              1   14[BANK0 ] unsigned char 
  6269 ;; Return value:  Size  Location     Type
  6270 ;;		None               void
  6271 ;; Registers used:
  6272 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6273 ;; Tracked objects:
  6274 ;;		On entry : 0/0
  6275 ;;		On exit  : 0/0
  6276 ;;		Unchanged: 0/0
  6277 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6278 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6279 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6280 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6281 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6282 ;;Total ram usage:        2 bytes
  6283 ;; Hardware stack levels used:    1
  6284 ;; Hardware stack levels required when called:    7
  6285 ;; This function calls:
  6286 ;;		_RfPointSelect
  6287 ;;		_setBuz
  6288 ;; This function is called by:
  6289 ;;		_getRxData
  6290 ;; This function uses a non-reentrant model
  6291 ;;
  6292                           
  6293                           
  6294                           ;psect for function _setLog_Code
  6295  1670                     _setLog_Code:	
  6296                           
  6297                           ;incstack = 0
  6298                           ; Regs used in _setLog_Code: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6299                           ;setLog_Code@rf stored from wreg
  6300  1670  0020               	movlb	0	; select bank0
  6301  1671  00AE               	movwf	setLog_Code@rf
  6302                           
  6303                           ;RF_Control_B1.c: 243: RfPointSelect(rf);
  6304  1672  082E               	movf	setLog_Code@rf,w
  6305  1673  319E  267E  3196   	fcall	_RfPointSelect
  6306                           
  6307                           ;RF_Control_B1.c: 244: product->Data[12]=RF_Data[12];
  6308  1676  0021               	movlb	1	; select bank1
  6309  1677  082C               	movf	(_RF_Data^(0+128)+12),w
  6310  1678  0020               	movlb	0	; select bank0
  6311  1679  00AD               	movwf	??_setLog_Code
  6312  167A  087D               	movf	_product,w
  6313  167B  3E0C               	addlw	12
  6314  167C  0086               	movwf	6
  6315  167D  3001               	movlw	1	; select bank2/3
  6316  167E  0087               	movwf	7
  6317  167F  082D               	movf	??_setLog_Code,w
  6318  1680  0081               	movwf	1
  6319                           
  6320                           ;RF_Control_B1.c: 245: product->Data[13]=RF_Data[13];
  6321  1681  0021               	movlb	1	; select bank1
  6322  1682  082D               	movf	(_RF_Data^(0+128)+13),w
  6323  1683  0020               	movlb	0	; select bank0
  6324  1684  00AD               	movwf	??_setLog_Code
  6325  1685  087D               	movf	_product,w
  6326  1686  3E0D               	addlw	13
  6327  1687  0086               	movwf	6
  6328  1688  3001               	movlw	1	; select bank2/3
  6329  1689  0087               	movwf	7
  6330  168A  082D               	movf	??_setLog_Code,w
  6331  168B  0081               	movwf	1
  6332                           
  6333                           ;RF_Control_B1.c: 246: product->Data[14]=RF_Data[14];
  6334  168C  0021               	movlb	1	; select bank1
  6335  168D  082E               	movf	(_RF_Data^(0+128)+14),w
  6336  168E  0020               	movlb	0	; select bank0
  6337  168F  00AD               	movwf	??_setLog_Code
  6338  1690  087D               	movf	_product,w
  6339  1691  3E0E               	addlw	14
  6340  1692  0086               	movwf	6
  6341  1693  3001               	movlw	1	; select bank2/3
  6342  1694  0087               	movwf	7
  6343  1695  082D               	movf	??_setLog_Code,w
  6344  1696  0081               	movwf	1
  6345                           
  6346                           ;RF_Control_B1.c: 247: setBuz(1, 100);
  6347  1697  3064               	movlw	100
  6348  1698  00A9               	movwf	setBuz@time
  6349  1699  3000               	movlw	0
  6350  169A  00AA               	movwf	setBuz@time+1
  6351  169B  3001               	movlw	1
  6352  169C  318B  23BC  3196   	fcall	_setBuz
  6353                           
  6354                           ;RF_Control_B1.c: 248: RF->Learn = 0;
  6355  169F  0021               	movlb	1	; select bank1
  6356  16A0  083E               	movf	_RF^(0+128),w
  6357  16A1  0086               	movwf	6
  6358  16A2  0187               	clrf	7
  6359  16A3  1301               	bcf	1,6
  6360                           
  6361                           ;RF_Control_B1.c: 249: if (myMain->First) {
  6362  16A4  086B               	movf	_myMain^(0+128),w
  6363  16A5  0086               	movwf	6
  6364  16A6  3001               	movlw	1	; select bank2/3
  6365  16A7  0087               	movwf	7
  6366  16A8  1F81               	btfss	1,7
  6367  16A9  2EB0               	goto	l2212
  6368                           
  6369                           ;RF_Control_B1.c: 250: Memory->LoopSave=1;
  6370  16AA  086C               	movf	_Memory^(0+128),w
  6371  16AB  3E24               	addlw	36
  6372  16AC  0086               	movwf	6
  6373  16AD  3002               	movlw	2	; select bank4/5
  6374  16AE  0087               	movwf	7
  6375  16AF  1501               	bsf	1,2
  6376  16B0                     l2212:	
  6377                           
  6378                           ;RF_Control_B1.c: 251: }
  6379                           ;RF_Control_B1.c: 252: Memory->Modify=1;
  6380  16B0  086C               	movf	_Memory^(0+128),w
  6381  16B1  3E24               	addlw	36
  6382  16B2  0086               	movwf	6
  6383  16B3  3002               	movlw	2	; select bank4/5
  6384  16B4  0087               	movwf	7
  6385  16B5  1401               	bsf	1,0
  6386  16B6  0008               	return
  6387  16B7                     __end_of_setLog_Code:	
  6388                           
  6389                           	psect	text22
  6390  0768                     __ptext22:	
  6391 ;; *************** function _setControl_Lights_Table *****************
  6392 ;; Defined at:
  6393 ;;		line 256 in file "../src/RF_Control_B1.c"
  6394 ;; Parameters:    Size  Location     Type
  6395 ;;  rf              1    wreg     unsigned char 
  6396 ;; Auto vars:     Size  Location     Type
  6397 ;;  rf              1   71[BANK0 ] unsigned char 
  6398 ;; Return value:  Size  Location     Type
  6399 ;;		None               void
  6400 ;; Registers used:
  6401 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6402 ;; Tracked objects:
  6403 ;;		On entry : 0/0
  6404 ;;		On exit  : 0/0
  6405 ;;		Unchanged: 0/0
  6406 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6407 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6408 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6409 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6410 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6411 ;;Total ram usage:        1 bytes
  6412 ;; Hardware stack levels used:    1
  6413 ;; Hardware stack levels required when called:   11
  6414 ;; This function calls:
  6415 ;;		_RfPointSelect
  6416 ;;		_setBuz
  6417 ;;		_setDimmerLights
  6418 ;;		_setRFSW_AdjControl
  6419 ;;		_setRFSW_Control
  6420 ;;		_setRFSW_Status
  6421 ;;		_setSw_Status
  6422 ;;		_setTxData
  6423 ;; This function is called by:
  6424 ;;		_getRxData
  6425 ;; This function uses a non-reentrant model
  6426 ;;
  6427                           
  6428                           
  6429                           ;psect for function _setControl_Lights_Table
  6430  0768                     _setControl_Lights_Table:	
  6431                           
  6432                           ;incstack = 0
  6433                           ; Regs used in _setControl_Lights_Table: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6434                           ;setControl_Lights_Table@rf stored from wreg
  6435  0768  0020               	movlb	0	; select bank0
  6436  0769  00E7               	movwf	setControl_Lights_Table@rf
  6437                           
  6438                           ;RF_Control_B1.c: 257: RfPointSelect(rf);
  6439  076A  0867               	movf	setControl_Lights_Table@rf,w
  6440  076B  319E  267E  3187   	fcall	_RfPointSelect
  6441                           
  6442                           ;RF_Control_B1.c: 258: if (RF_Data[15] == 0x00) {
  6443  076E  0021               	movlb	1	; select bank1
  6444  076F  08AF               	movf	(_RF_Data^(0+128)+15),f
  6445  0770  1D03               	skipz
  6446  0771  2FBB               	goto	l5928
  6447                           
  6448                           ;RF_Control_B1.c: 260: setDimmerLights(1, 0);
  6449  0772  0020               	movlb	0	; select bank0
  6450  0773  01A4               	clrf	setDimmerLights@status
  6451  0774  3001               	movlw	1
  6452  0775  318D  2527  3187   	fcall	_setDimmerLights
  6453                           
  6454                           ;RF_Control_B1.c: 261: setRFSW_Status(1, 0);
  6455  0778  0020               	movlb	0	; select bank0
  6456  0779  01A2               	clrf	setRFSW_Status@command
  6457  077A  3001               	movlw	1
  6458  077B  319E  26EF  3187   	fcall	_setRFSW_Status
  6459                           
  6460                           ;RF_Control_B1.c: 262: setSw_Status(1, 0);
  6461  077E  0020               	movlb	0	; select bank0
  6462  077F  01A2               	clrf	setSw_Status@command
  6463  0780  3001               	movlw	1
  6464  0781  319E  26FE  3187   	fcall	_setSw_Status
  6465                           
  6466                           ;RF_Control_B1.c: 265: setDimmerLights(2, 0);
  6467  0784  0020               	movlb	0	; select bank0
  6468  0785  01A4               	clrf	setDimmerLights@status
  6469  0786  3002               	movlw	2
  6470  0787  318D  2527  3187   	fcall	_setDimmerLights
  6471                           
  6472                           ;RF_Control_B1.c: 266: setRFSW_Status(2, 0);
  6473  078A  0020               	movlb	0	; select bank0
  6474  078B  01A2               	clrf	setRFSW_Status@command
  6475  078C  3002               	movlw	2
  6476  078D  319E  26EF  3187   	fcall	_setRFSW_Status
  6477                           
  6478                           ;RF_Control_B1.c: 267: setSw_Status(2, 0);
  6479  0790  0020               	movlb	0	; select bank0
  6480  0791  01A2               	clrf	setSw_Status@command
  6481  0792  3002               	movlw	2
  6482  0793  319E  26FE  3187   	fcall	_setSw_Status
  6483                           
  6484                           ;RF_Control_B1.c: 275: product->Data[9]=0;
  6485  0796  087D               	movf	_product,w
  6486  0797  3E09               	addlw	9
  6487  0798  0086               	movwf	6
  6488  0799  3001               	movlw	1	; select bank2/3
  6489  079A  0087               	movwf	7
  6490  079B  0181               	clrf	1
  6491                           
  6492                           ;RF_Control_B1.c: 276: product->Data[11]=0;
  6493  079C  087D               	movf	_product,w
  6494  079D  3E0B               	addlw	11
  6495  079E  0086               	movwf	6
  6496  079F  3001               	movlw	1	; select bank2/3
  6497  07A0  0087               	movwf	7
  6498  07A1  0181               	clrf	1
  6499                           
  6500                           ;RF_Control_B1.c: 277: product->Data[15]=0;
  6501  07A2  087D               	movf	_product,w
  6502  07A3  3E0F               	addlw	15
  6503  07A4  0086               	movwf	6
  6504  07A5  3001               	movlw	1	; select bank2/3
  6505  07A6  0087               	movwf	7
  6506  07A7  0181               	clrf	1
  6507                           
  6508                           ;RF_Control_B1.c: 278: product->Data[17]=0;
  6509  07A8  087D               	movf	_product,w
  6510  07A9  3E11               	addlw	17
  6511  07AA  0086               	movwf	6
  6512  07AB  3001               	movlw	1	; select bank2/3
  6513  07AC  0087               	movwf	7
  6514  07AD  0181               	clrf	1
  6515                           
  6516                           ;RF_Control_B1.c: 279: setBuz(1, 100);
  6517  07AE  3064               	movlw	100
  6518  07AF  0020               	movlb	0	; select bank0
  6519  07B0  00A9               	movwf	setBuz@time
  6520  07B1  3000               	movlw	0
  6521  07B2  00AA               	movwf	setBuz@time+1
  6522  07B3  3001               	movlw	1
  6523  07B4  318B  23BC  3187   	fcall	_setBuz
  6524                           
  6525                           ;RF_Control_B1.c: 280: setTxData(1);
  6526  07B7  3001               	movlw	1
  6527  07B8  318E  26BD         	fcall	_setTxData
  6528                           
  6529                           ;RF_Control_B1.c: 281: } else if (RF_Data[15] == 0x20) {
  6530  07BA  0008               	return
  6531  07BB                     l5928:	
  6532  07BB  0021               	movlb	1	; select bank1
  6533  07BC  082F               	movf	(_RF_Data^(0+128)+15),w
  6534  07BD  3A20               	xorlw	32
  6535  07BE  1D03               	skipz
  6536  07BF  2FD6               	goto	l5934
  6537                           
  6538                           ;RF_Control_B1.c: 282: product->Data[9]=0;
  6539  07C0  087D               	movf	_product,w
  6540  07C1  3E09               	addlw	9
  6541  07C2  0086               	movwf	6
  6542  07C3  3001               	movlw	1	; select bank2/3
  6543  07C4  0087               	movwf	7
  6544  07C5  0181               	clrf	1
  6545                           
  6546                           ;RF_Control_B1.c: 283: product->Data[11]=0;
  6547  07C6  087D               	movf	_product,w
  6548  07C7  3E0B               	addlw	11
  6549  07C8  0086               	movwf	6
  6550  07C9  3001               	movlw	1	; select bank2/3
  6551  07CA  0087               	movwf	7
  6552  07CB  0181               	clrf	1
  6553                           
  6554                           ;RF_Control_B1.c: 284: product->Data[17]=0;
  6555  07CC  087D               	movf	_product,w
  6556  07CD  3E11               	addlw	17
  6557  07CE  0086               	movwf	6
  6558  07CF  3001               	movlw	1	; select bank2/3
  6559  07D0  0087               	movwf	7
  6560  07D1  0181               	clrf	1
  6561                           
  6562                           ;RF_Control_B1.c: 285: setTxData(1);
  6563  07D2  3001               	movlw	1
  6564  07D3  318E  26BD         	fcall	_setTxData
  6565                           
  6566                           ;RF_Control_B1.c: 286: }
  6567  07D5  0008               	return
  6568  07D6                     l5934:	
  6569                           
  6570                           ;RF_Control_B1.c: 288: else if (RF_Data[15] == 0x01) {
  6571  07D6  0021               	movlb	1	; select bank1
  6572  07D7  082F               	movf	(_RF_Data^(0+128)+15),w
  6573  07D8  3A01               	xorlw	1
  6574  07D9  1D03               	skipz
  6575  07DA  2FDF               	goto	l5938
  6576                           
  6577                           ;RF_Control_B1.c: 289: setRFSW_Control(1);
  6578  07DB  3001               	movlw	1
  6579  07DC  318E  262D         	fcall	_setRFSW_Control
  6580                           
  6581                           ;RF_Control_B1.c: 290: }
  6582  07DE  0008               	return
  6583  07DF                     l5938:	
  6584                           
  6585                           ;RF_Control_B1.c: 292: else if (RF_Data[15] == 0x11) {
  6586  07DF  0021               	movlb	1	; select bank1
  6587  07E0  082F               	movf	(_RF_Data^(0+128)+15),w
  6588  07E1  3A11               	xorlw	17
  6589  07E2  1D03               	skipz
  6590  07E3  2FE8               	goto	l5942
  6591                           
  6592                           ;RF_Control_B1.c: 293: setRFSW_AdjControl(1);
  6593  07E4  3001               	movlw	1
  6594  07E5  3195  251C         	fcall	_setRFSW_AdjControl
  6595                           
  6596                           ;RF_Control_B1.c: 294: }
  6597  07E7  0008               	return
  6598  07E8                     l5942:	
  6599                           
  6600                           ;RF_Control_B1.c: 299: else if (RF_Data[15] == 0x02) {
  6601  07E8  0021               	movlb	1	; select bank1
  6602  07E9  082F               	movf	(_RF_Data^(0+128)+15),w
  6603  07EA  3A02               	xorlw	2
  6604  07EB  1D03               	skipz
  6605  07EC  2FF1               	goto	l5946
  6606                           
  6607                           ;RF_Control_B1.c: 300: setRFSW_Control(2);
  6608  07ED  3002               	movlw	2
  6609  07EE  318E  262D         	fcall	_setRFSW_Control
  6610                           
  6611                           ;RF_Control_B1.c: 301: }
  6612  07F0  0008               	return
  6613  07F1                     l5946:	
  6614                           
  6615                           ;RF_Control_B1.c: 303: else if (RF_Data[15] == 0x21) {
  6616  07F1  0021               	movlb	1	; select bank1
  6617  07F2  082F               	movf	(_RF_Data^(0+128)+15),w
  6618  07F3  3A21               	xorlw	33
  6619  07F4  1D03               	skipz
  6620  07F5  0008               	return
  6621                           
  6622                           ;RF_Control_B1.c: 304: setRFSW_AdjControl(2);
  6623  07F6  3002               	movlw	2
  6624  07F7  3195  251C         	fcall	_setRFSW_AdjControl
  6625  07F9  0008               	return
  6626  07FA                     __end_of_setControl_Lights_Table:	
  6627                           
  6628                           	psect	text23
  6629  0E2D                     __ptext23:	
  6630 ;; *************** function _setRFSW_Control *****************
  6631 ;; Defined at:
  6632 ;;		line 341 in file "../src/RF_Control_B1.c"
  6633 ;; Parameters:    Size  Location     Type
  6634 ;;  sw              1    wreg     unsigned char 
  6635 ;; Auto vars:     Size  Location     Type
  6636 ;;  sw              1   67[BANK0 ] unsigned char 
  6637 ;; Return value:  Size  Location     Type
  6638 ;;		None               void
  6639 ;; Registers used:
  6640 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6641 ;; Tracked objects:
  6642 ;;		On entry : 0/0
  6643 ;;		On exit  : 0/0
  6644 ;;		Unchanged: 0/0
  6645 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6646 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6647 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6648 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6649 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6650 ;;Total ram usage:        2 bytes
  6651 ;; Hardware stack levels used:    1
  6652 ;; Hardware stack levels required when called:    9
  6653 ;; This function calls:
  6654 ;;		_RfSWPointSelect
  6655 ;;		_setBuz
  6656 ;;		_setDelayOff_GO
  6657 ;;		_setDimmerLights_Switch
  6658 ;;		_setDimmerLights_Trigger
  6659 ;;		_setRF_DimmerLights
  6660 ;;		_setSw_Status
  6661 ;;		_setTxData
  6662 ;; This function is called by:
  6663 ;;		_setControl_Lights_Table
  6664 ;; This function uses a non-reentrant model
  6665 ;;
  6666                           
  6667                           
  6668                           ;psect for function _setRFSW_Control
  6669  0E2D                     _setRFSW_Control:	
  6670                           
  6671                           ;incstack = 0
  6672                           ; Regs used in _setRFSW_Control: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6673                           ;setRFSW_Control@sw stored from wreg
  6674  0E2D  0020               	movlb	0	; select bank0
  6675  0E2E  00E3               	movwf	setRFSW_Control@sw
  6676                           
  6677                           ;RF_Control_B1.c: 342: RfSWPointSelect(sw);
  6678  0E2F  0863               	movf	setRFSW_Control@sw,w
  6679  0E30  3190  209E  318E   	fcall	_RfSWPointSelect
  6680                           
  6681                           ;RF_Control_B1.c: 343: if (!RFSW->Status) {
  6682  0E33  0021               	movlb	1	; select bank1
  6683  0E34  083F               	movf	_RFSW^(0+128),w
  6684  0E35  0086               	movwf	6
  6685  0E36  0187               	clrf	7
  6686  0E37  1801               	btfsc	1,0
  6687  0E38  2E6E               	goto	l5820
  6688                           
  6689                           ;RF_Control_B1.c: 344: if (RF_Data[16] == 0x80) {
  6690  0E39  0830               	movf	(_RF_Data^(0+128)+16),w
  6691  0E3A  3A80               	xorlw	128
  6692  0E3B  1D03               	skipz
  6693  0E3C  2E4A               	goto	l5810
  6694                           
  6695                           ;RF_Control_B1.c: 345: setDelayOff_GO(sw, 1, RF_Data[17]);
  6696  0E3D  0020               	movlb	0	; select bank0
  6697  0E3E  01A3               	clrf	setDelayOff_GO@command
  6698  0E3F  0AA3               	incf	setDelayOff_GO@command,f
  6699  0E40  0021               	movlb	1	; select bank1
  6700  0E41  0831               	movf	(_RF_Data^(0+128)+17),w
  6701  0E42  0020               	movlb	0	; select bank0
  6702  0E43  00E2               	movwf	??_setRFSW_Control
  6703  0E44  0862               	movf	??_setRFSW_Control,w
  6704  0E45  00A4               	movwf	setDelayOff_GO@value
  6705  0E46  0863               	movf	setRFSW_Control@sw,w
  6706  0E47  3188  2012  318E   	fcall	_setDelayOff_GO
  6707  0E4A                     l5810:	
  6708                           
  6709                           ;RF_Control_B1.c: 346: }
  6710                           ;RF_Control_B1.c: 347: RFSW->Status = 1;
  6711  0E4A  0021               	movlb	1	; select bank1
  6712  0E4B  083F               	movf	_RFSW^(0+128),w
  6713  0E4C  0086               	movwf	6
  6714  0E4D  0187               	clrf	7
  6715  0E4E  1401               	bsf	1,0
  6716                           
  6717                           ;RF_Control_B1.c: 348: setSw_Status(sw, 1);
  6718  0E4F  0020               	movlb	0	; select bank0
  6719  0E50  01A2               	clrf	setSw_Status@command
  6720  0E51  0AA2               	incf	setSw_Status@command,f
  6721  0E52  0863               	movf	setRFSW_Control@sw,w
  6722  0E53  319E  26FE  318E   	fcall	_setSw_Status
  6723                           
  6724                           ;RF_Control_B1.c: 350: setDimmerLights_Trigger(sw, 1);
  6725  0E56  0020               	movlb	0	; select bank0
  6726  0E57  01A2               	clrf	setDimmerLights_Trigger@command
  6727  0E58  0AA2               	incf	setDimmerLights_Trigger@command,f
  6728  0E59  0863               	movf	setRFSW_Control@sw,w
  6729  0E5A  319F  273D  318E   	fcall	_setDimmerLights_Trigger
  6730                           
  6731                           ;RF_Control_B1.c: 351: setDimmerLights_Switch(sw, 1);
  6732  0E5D  0020               	movlb	0	; select bank0
  6733  0E5E  01A2               	clrf	setDimmerLights_Switch@command
  6734  0E5F  0AA2               	incf	setDimmerLights_Switch@command,f
  6735  0E60  0863               	movf	setRFSW_Control@sw,w
  6736  0E61  319F  272D  318E   	fcall	_setDimmerLights_Switch
  6737                           
  6738                           ;RF_Control_B1.c: 353: setRF_DimmerLights(sw, RFSW->Status);
  6739  0E64  0021               	movlb	1	; select bank1
  6740  0E65  083F               	movf	_RFSW^(0+128),w
  6741  0E66  0086               	movwf	6
  6742  0E67  0187               	clrf	7
  6743  0E68  3000               	movlw	0
  6744  0E69  1801               	btfsc	1,0
  6745  0E6A  3001               	movlw	1
  6746  0E6B  0020               	movlb	0	; select bank0
  6747  0E6C  00DD               	movwf	setRF_DimmerLights@on
  6748  0E6D  2EAC               	goto	L4
  6749  0E6E                     l5820:	
  6750                           ;RF_Control_B1.c: 354: } else {
  6751                           
  6752                           
  6753                           ;RF_Control_B1.c: 355: if (RF_Data[16] == 0x80) {
  6754  0E6E  0021               	movlb	1	; select bank1
  6755  0E6F  0830               	movf	(_RF_Data^(0+128)+16),w
  6756  0E70  3A80               	xorlw	128
  6757  0E71  1D03               	skipz
  6758  0E72  2E84               	goto	l5826
  6759                           
  6760                           ;RF_Control_B1.c: 356: setDelayOff_GO(sw, 1, RF_Data[17]);
  6761  0E73  0020               	movlb	0	; select bank0
  6762  0E74  01A3               	clrf	setDelayOff_GO@command
  6763  0E75  0AA3               	incf	setDelayOff_GO@command,f
  6764  0E76  0021               	movlb	1	; select bank1
  6765  0E77  0831               	movf	(_RF_Data^(0+128)+17),w
  6766  0E78  0020               	movlb	0	; select bank0
  6767  0E79  00E2               	movwf	??_setRFSW_Control
  6768  0E7A  0862               	movf	??_setRFSW_Control,w
  6769  0E7B  00A4               	movwf	setDelayOff_GO@value
  6770  0E7C  0863               	movf	setRFSW_Control@sw,w
  6771  0E7D  3188  2012  318E   	fcall	_setDelayOff_GO
  6772                           
  6773                           ;RF_Control_B1.c: 357: setRF_DimmerLights(sw, 1);
  6774  0E80  0020               	movlb	0	; select bank0
  6775  0E81  01DD               	clrf	setRF_DimmerLights@on
  6776  0E82  0ADD               	incf	setRF_DimmerLights@on,f
  6777  0E83  2EAC               	goto	L4
  6778  0E84                     l5826:	
  6779                           ;RF_Control_B1.c: 358: } else {
  6780                           
  6781                           
  6782                           ;RF_Control_B1.c: 359: RFSW->Status = 0;
  6783  0E84  0021               	movlb	1	; select bank1
  6784  0E85  083F               	movf	_RFSW^(0+128),w
  6785  0E86  0086               	movwf	6
  6786  0E87  0187               	clrf	7
  6787  0E88  1001               	bcf	1,0
  6788                           
  6789                           ;RF_Control_B1.c: 360: setSw_Status(sw, 0);
  6790  0E89  0020               	movlb	0	; select bank0
  6791  0E8A  01A2               	clrf	setSw_Status@command
  6792  0E8B  0863               	movf	setRFSW_Control@sw,w
  6793  0E8C  319E  26FE  318E   	fcall	_setSw_Status
  6794                           
  6795                           ;RF_Control_B1.c: 362: setDimmerLights_Trigger(sw, 1);
  6796  0E8F  0020               	movlb	0	; select bank0
  6797  0E90  01A2               	clrf	setDimmerLights_Trigger@command
  6798  0E91  0AA2               	incf	setDimmerLights_Trigger@command,f
  6799  0E92  0863               	movf	setRFSW_Control@sw,w
  6800  0E93  319F  273D  318E   	fcall	_setDimmerLights_Trigger
  6801                           
  6802                           ;RF_Control_B1.c: 363: setDimmerLights_Switch(sw, RFSW->Status);
  6803  0E96  0021               	movlb	1	; select bank1
  6804  0E97  083F               	movf	_RFSW^(0+128),w
  6805  0E98  0086               	movwf	6
  6806  0E99  0187               	clrf	7
  6807  0E9A  3000               	movlw	0
  6808  0E9B  1801               	btfsc	1,0
  6809  0E9C  3001               	movlw	1
  6810  0E9D  0020               	movlb	0	; select bank0
  6811  0E9E  00A2               	movwf	setDimmerLights_Switch@command
  6812  0E9F  0863               	movf	setRFSW_Control@sw,w
  6813  0EA0  319F  272D  318E   	fcall	_setDimmerLights_Switch
  6814                           
  6815                           ;RF_Control_B1.c: 365: setDelayOff_GO(sw, 0, 0);
  6816  0EA3  0020               	movlb	0	; select bank0
  6817  0EA4  01A3               	clrf	setDelayOff_GO@command
  6818  0EA5  01A4               	clrf	setDelayOff_GO@value
  6819  0EA6  0863               	movf	setRFSW_Control@sw,w
  6820  0EA7  3188  2012  318E   	fcall	_setDelayOff_GO
  6821                           
  6822                           ;RF_Control_B1.c: 366: setRF_DimmerLights(sw, 0);
  6823  0EAA  0020               	movlb	0	; select bank0
  6824  0EAB  01DD               	clrf	setRF_DimmerLights@on
  6825  0EAC                     L4:	
  6826  0EAC  0863               	movf	setRFSW_Control@sw,w
  6827  0EAD  3189  218C  318E   	fcall	_setRF_DimmerLights
  6828                           
  6829                           ;RF_Control_B1.c: 367: }
  6830                           ;RF_Control_B1.c: 368: }
  6831                           ;RF_Control_B1.c: 369: setBuz(1, 100);
  6832  0EB0  3064               	movlw	100
  6833  0EB1  0020               	movlb	0	; select bank0
  6834  0EB2  00A9               	movwf	setBuz@time
  6835  0EB3  3000               	movlw	0
  6836  0EB4  00AA               	movwf	setBuz@time+1
  6837  0EB5  3001               	movlw	1
  6838  0EB6  318B  23BC  318E   	fcall	_setBuz
  6839                           
  6840                           ;RF_Control_B1.c: 370: setTxData(1);
  6841  0EB9  3001               	movlw	1
  6842  0EBA  318E  26BD         	fcall	_setTxData
  6843  0EBC  0008               	return
  6844  0EBD                     __end_of_setRFSW_Control:	
  6845                           
  6846                           	psect	text24
  6847  0812                     __ptext24:	
  6848 ;; *************** function _setDelayOff_GO *****************
  6849 ;; Defined at:
  6850 ;;		line 85 in file "../src/DelayOff_B1.c"
  6851 ;; Parameters:    Size  Location     Type
  6852 ;;  sw              1    wreg     unsigned char 
  6853 ;;  command         1    3[BANK0 ] unsigned char 
  6854 ;;  value           1    4[BANK0 ] unsigned char 
  6855 ;; Auto vars:     Size  Location     Type
  6856 ;;  sw              1    7[BANK0 ] unsigned char 
  6857 ;; Return value:  Size  Location     Type
  6858 ;;		None               void
  6859 ;; Registers used:
  6860 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6861 ;; Tracked objects:
  6862 ;;		On entry : 0/0
  6863 ;;		On exit  : 0/0
  6864 ;;		Unchanged: 0/0
  6865 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6866 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6867 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6868 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6869 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6870 ;;Total ram usage:        5 bytes
  6871 ;; Hardware stack levels used:    1
  6872 ;; Hardware stack levels required when called:    6
  6873 ;; This function calls:
  6874 ;;		_DelayOffPointSelect
  6875 ;;		_DelayTimejudge
  6876 ;; This function is called by:
  6877 ;;		_setRFSW_Control
  6878 ;;		_Sw_DimmerOffFunc
  6879 ;; This function uses a non-reentrant model
  6880 ;;
  6881                           
  6882                           
  6883                           ;psect for function _setDelayOff_GO
  6884  0812                     _setDelayOff_GO:	
  6885                           
  6886                           ;incstack = 0
  6887                           ; Regs used in _setDelayOff_GO: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6888                           ;setDelayOff_GO@sw stored from wreg
  6889  0812  0020               	movlb	0	; select bank0
  6890  0813  00A7               	movwf	setDelayOff_GO@sw
  6891                           
  6892                           ;DelayOff_B1.c: 86: DelayOffPointSelect(sw);
  6893  0814  0827               	movf	setDelayOff_GO@sw,w
  6894  0815  3190  20B4  3188   	fcall	_DelayOffPointSelect
  6895                           
  6896                           ;DelayOff_B1.c: 87: if (DelayOff->Enable) {
  6897  0818  0021               	movlb	1	; select bank1
  6898  0819  0838               	movf	_DelayOff^(0+128),w
  6899  081A  0086               	movwf	6
  6900  081B  0187               	clrf	7
  6901  081C  1C01               	btfss	1,0
  6902  081D  0008               	return
  6903                           
  6904                           ;DelayOff_B1.c: 88: DelayOff->GO = command;
  6905  081E  0838               	movf	_DelayOff^(0+128),w
  6906  081F  0086               	movwf	6
  6907  0820  0187               	clrf	7
  6908  0821  0020               	movlb	0	; select bank0
  6909  0822  0823               	movf	setDelayOff_GO@command,w
  6910  0823  1081               	bcf	1,1
  6911  0824  1D03               	skipz
  6912  0825  1481               	bsf	1,1
  6913                           
  6914                           ;DelayOff_B1.c: 89: if (command == 1) {
  6915  0826  0823               	movf	setDelayOff_GO@command,w
  6916  0827  3A01               	xorlw	1
  6917  0828  1D03               	skipz
  6918  0829  2855               	goto	l5656
  6919                           
  6920                           ;DelayOff_B1.c: 90: DelayOff->Value = DelayTimejudge(value);
  6921  082A  0824               	movf	setDelayOff_GO@value,w
  6922  082B  3193  234D  3188   	fcall	_DelayTimejudge
  6923  082E  0020               	movlb	0	; select bank0
  6924  082F  00A5               	movwf	??_setDelayOff_GO
  6925  0830  0021               	movlb	1	; select bank1
  6926  0831  0A38               	incf	_DelayOff^(0+128),w
  6927  0832  0086               	movwf	6
  6928  0833  0187               	clrf	7
  6929  0834  0020               	movlb	0	; select bank0
  6930  0835  0825               	movf	??_setDelayOff_GO,w
  6931  0836  0081               	movwf	1
  6932                           
  6933                           ;DelayOff_B1.c: 91: if (((value % 16) == 5 || !(value % 16)) && value <= 0x25) {
  6934  0837  300F               	movlw	15
  6935  0838  0524               	andwf	setDelayOff_GO@value,w
  6936  0839  00A5               	movwf	??_setDelayOff_GO
  6937  083A  0825               	movf	??_setDelayOff_GO,w
  6938  083B  3A05               	xorlw	5
  6939  083C  1903               	skipnz
  6940  083D  2842               	goto	l5650
  6941  083E  0824               	movf	setDelayOff_GO@value,w
  6942  083F  390F               	andlw	15
  6943  0840  1D03               	btfss	3,2
  6944  0841  2848               	goto	l5654
  6945  0842                     l5650:	
  6946  0842  3026               	movlw	38
  6947  0843  0224               	subwf	setDelayOff_GO@value,w
  6948  0844  1803               	skipnc
  6949  0845  2848               	goto	l5654
  6950                           
  6951                           ;DelayOff_B1.c: 92: product->Data[26 + sw]=value;
  6952  0846  0824               	movf	setDelayOff_GO@value,w
  6953  0847  2849               	goto	L5
  6954  0848                     l5654:	
  6955                           ;DelayOff_B1.c: 93: } else {
  6956                           
  6957                           
  6958                           ;DelayOff_B1.c: 94: product->Data[26 + sw]=0x05;
  6959  0848  3005               	movlw	5
  6960  0849                     L5:	
  6961  0849  00A5               	movwf	??_setDelayOff_GO
  6962  084A  0827               	movf	setDelayOff_GO@sw,w
  6963  084B  3E1A               	addlw	26
  6964  084C  077D               	addwf	_product,w
  6965  084D  00A6               	movwf	??_setDelayOff_GO+1
  6966  084E  0826               	movf	??_setDelayOff_GO+1,w
  6967  084F  0086               	movwf	6
  6968  0850  3001               	movlw	1	; select bank2/3
  6969  0851  0087               	movwf	7
  6970  0852  0825               	movf	??_setDelayOff_GO,w
  6971  0853  0081               	movwf	1
  6972                           
  6973                           ;DelayOff_B1.c: 95: }
  6974                           ;DelayOff_B1.c: 96: } else if (command == 0) {
  6975  0854  2861               	goto	l5660
  6976  0855                     l5656:	
  6977  0855  08A3               	movf	setDelayOff_GO@command,f
  6978  0856  1D03               	skipz
  6979  0857  2861               	goto	l5660
  6980                           
  6981                           ;DelayOff_B1.c: 97: product->Data[sw + 26]=0;
  6982  0858  0827               	movf	setDelayOff_GO@sw,w
  6983  0859  3E1A               	addlw	26
  6984  085A  077D               	addwf	_product,w
  6985  085B  00A5               	movwf	??_setDelayOff_GO
  6986  085C  0825               	movf	??_setDelayOff_GO,w
  6987  085D  0086               	movwf	6
  6988  085E  3001               	movlw	1	; select bank2/3
  6989  085F  0087               	movwf	7
  6990  0860  0181               	clrf	1
  6991  0861                     l5660:	
  6992                           
  6993                           ;DelayOff_B1.c: 98: }
  6994                           ;DelayOff_B1.c: 99: DelayOff->SecondTime = 0;
  6995  0861  0021               	movlb	1	; select bank1
  6996  0862  0838               	movf	_DelayOff^(0+128),w
  6997  0863  3E02               	addlw	2
  6998  0864  0086               	movwf	6
  6999  0865  0187               	clrf	7
  7000  0866  3000               	movlw	0
  7001  0867  3FC0               	movwi [0]fsr1
  7002  0868  3FC1               	movwi [1]fsr1
  7003                           
  7004                           ;DelayOff_B1.c: 100: DelayOff->MinuteTime = 0;
  7005  0869  0838               	movf	_DelayOff^(0+128),w
  7006  086A  3E04               	addlw	4
  7007  086B  0086               	movwf	6
  7008  086C  0187               	clrf	7
  7009  086D  0181               	clrf	1
  7010  086E  0008               	return
  7011  086F                     __end_of_setDelayOff_GO:	
  7012                           
  7013                           	psect	text25
  7014  134D                     __ptext25:	
  7015 ;; *************** function _DelayTimejudge *****************
  7016 ;; Defined at:
  7017 ;;		line 105 in file "../src/DelayOff_B1.c"
  7018 ;; Parameters:    Size  Location     Type
  7019 ;;  value           1    wreg     unsigned char 
  7020 ;; Auto vars:     Size  Location     Type
  7021 ;;  value           1    1[BANK0 ] unsigned char 
  7022 ;;  i               1    2[BANK0 ] unsigned char 
  7023 ;; Return value:  Size  Location     Type
  7024 ;;                  1    wreg      unsigned char 
  7025 ;; Registers used:
  7026 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  7027 ;; Tracked objects:
  7028 ;;		On entry : 0/0
  7029 ;;		On exit  : 0/0
  7030 ;;		Unchanged: 0/0
  7031 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7032 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7033 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7034 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7035 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7036 ;;Total ram usage:        3 bytes
  7037 ;; Hardware stack levels used:    1
  7038 ;; Hardware stack levels required when called:    5
  7039 ;; This function calls:
  7040 ;;		Nothing
  7041 ;; This function is called by:
  7042 ;;		_setDelayOff_GO
  7043 ;; This function uses a non-reentrant model
  7044 ;;
  7045                           
  7046                           
  7047                           ;psect for function _DelayTimejudge
  7048  134D                     _DelayTimejudge:	
  7049                           
  7050                           ;incstack = 0
  7051                           ; Regs used in _DelayTimejudge: [wreg-fsr0h+status,2+status,0]
  7052                           ;DelayTimejudge@value stored from wreg
  7053  134D  0020               	movlb	0	; select bank0
  7054  134E  00A1               	movwf	DelayTimejudge@value
  7055                           
  7056                           ;DelayOff_B1.c: 106: char i = 5;
  7057  134F  3005               	movlw	5
  7058  1350  00A0               	movwf	??_DelayTimejudge
  7059  1351  0820               	movf	??_DelayTimejudge,w
  7060  1352  00A2               	movwf	DelayTimejudge@i
  7061                           
  7062                           ;DelayOff_B1.c: 107: switch (value) {
  7063  1353  2B63               	goto	l5486
  7064  1354                     l5472:	
  7065                           ;DelayOff_B1.c: 108: case 0x05:
  7066                           
  7067                           
  7068                           ;DelayOff_B1.c: 109: i = 5;
  7069  1354  3005               	movlw	5
  7070  1355  2B5F               	goto	L10
  7071  1356                     l5474:	
  7072                           ;DelayOff_B1.c: 111: case 0x10:
  7073                           
  7074                           ;DelayOff_B1.c: 110: break;
  7075                           
  7076                           
  7077                           ;DelayOff_B1.c: 112: i = 10;
  7078  1356  300A               	movlw	10
  7079  1357  2B5F               	goto	L10
  7080  1358                     l5476:	
  7081                           ;DelayOff_B1.c: 114: case 0x15:
  7082                           
  7083                           ;DelayOff_B1.c: 113: break;
  7084                           
  7085                           
  7086                           ;DelayOff_B1.c: 115: i = 15;
  7087  1358  300F               	movlw	15
  7088  1359  2B5F               	goto	L10
  7089  135A                     l5478:	
  7090                           ;DelayOff_B1.c: 117: case 0x20:
  7091                           
  7092                           ;DelayOff_B1.c: 116: break;
  7093                           
  7094                           
  7095                           ;DelayOff_B1.c: 118: i = 20;
  7096  135A  3014               	movlw	20
  7097  135B  2B5F               	goto	L10
  7098  135C                     l5480:	
  7099                           ;DelayOff_B1.c: 120: case 0x25:
  7100                           
  7101                           ;DelayOff_B1.c: 119: break;
  7102                           
  7103                           
  7104                           ;DelayOff_B1.c: 121: i = 25;
  7105  135C  3019               	movlw	25
  7106  135D  2B5F               	goto	L10
  7107  135E                     l5482:	
  7108                           ;DelayOff_B1.c: 123: case 0x30:
  7109                           
  7110                           ;DelayOff_B1.c: 122: break;
  7111                           
  7112                           
  7113                           ;DelayOff_B1.c: 124: i = 30;
  7114  135E  301E               	movlw	30
  7115  135F                     L10:	
  7116  135F  00A0               	movwf	??_DelayTimejudge
  7117  1360  0820               	movf	??_DelayTimejudge,w
  7118  1361  00A2               	movwf	DelayTimejudge@i
  7119                           
  7120                           ;DelayOff_B1.c: 126: }
  7121                           
  7122                           ;DelayOff_B1.c: 125: break;
  7123  1362  2B77               	goto	l5488
  7124  1363                     l5486:	
  7125  1363  0821               	movf	DelayTimejudge@value,w
  7126                           
  7127                           ; Switch size 1, requested type "space"
  7128                           ; Number of cases is 6, Range of values is 5 to 48
  7129                           ; switch strategies available:
  7130                           ; Name         Instructions Cycles
  7131                           ; simple_byte           19    10 (average)
  7132                           ; direct_byte           97     9 (fixed)
  7133                           ; jumptable            263     9 (fixed)
  7134                           ;	Chosen strategy is simple_byte
  7135  1364  3A05               	xorlw	5	; case 5
  7136  1365  1903               	skipnz
  7137  1366  2B54               	goto	l5472
  7138  1367  3A15               	xorlw	21	; case 16
  7139  1368  1903               	skipnz
  7140  1369  2B56               	goto	l5474
  7141  136A  3A05               	xorlw	5	; case 21
  7142  136B  1903               	skipnz
  7143  136C  2B58               	goto	l5476
  7144  136D  3A35               	xorlw	53	; case 32
  7145  136E  1903               	skipnz
  7146  136F  2B5A               	goto	l5478
  7147  1370  3A05               	xorlw	5	; case 37
  7148  1371  1903               	skipnz
  7149  1372  2B5C               	goto	l5480
  7150  1373  3A15               	xorlw	21	; case 48
  7151  1374  1903               	skipnz
  7152  1375  2B5E               	goto	l5482
  7153  1376  2B77               	goto	l5488
  7154  1377                     l5488:	
  7155                           
  7156                           ;DelayOff_B1.c: 127: return i;
  7157  1377  0822               	movf	DelayTimejudge@i,w
  7158  1378  0008               	return
  7159  1379                     __end_of_DelayTimejudge:	
  7160                           
  7161                           	psect	text26
  7162  151C                     __ptext26:	
  7163 ;; *************** function _setRFSW_AdjControl *****************
  7164 ;; Defined at:
  7165 ;;		line 374 in file "../src/RF_Control_B1.c"
  7166 ;; Parameters:    Size  Location     Type
  7167 ;;  sw              1    wreg     unsigned char 
  7168 ;; Auto vars:     Size  Location     Type
  7169 ;;  sw              1   70[BANK0 ] unsigned char 
  7170 ;; Return value:  Size  Location     Type
  7171 ;;		None               void
  7172 ;; Registers used:
  7173 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7174 ;; Tracked objects:
  7175 ;;		On entry : 0/0
  7176 ;;		On exit  : 0/0
  7177 ;;		Unchanged: 0/0
  7178 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7179 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7180 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7181 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7182 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7183 ;;Total ram usage:        3 bytes
  7184 ;; Hardware stack levels used:    1
  7185 ;; Hardware stack levels required when called:   10
  7186 ;; This function calls:
  7187 ;;		_RfSWPointSelect
  7188 ;;		_setRF_DimmerValue
  7189 ;;		_setTxData
  7190 ;; This function is called by:
  7191 ;;		_setControl_Lights_Table
  7192 ;; This function uses a non-reentrant model
  7193 ;;
  7194                           
  7195                           
  7196                           ;psect for function _setRFSW_AdjControl
  7197  151C                     _setRFSW_AdjControl:	
  7198                           
  7199                           ;incstack = 0
  7200                           ; Regs used in _setRFSW_AdjControl: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7201                           ;setRFSW_AdjControl@sw stored from wreg
  7202  151C  0020               	movlb	0	; select bank0
  7203  151D  00E6               	movwf	setRFSW_AdjControl@sw
  7204                           
  7205                           ;RF_Control_B1.c: 375: RfSWPointSelect(sw);
  7206  151E  0866               	movf	setRFSW_AdjControl@sw,w
  7207  151F  3190  209E  3195   	fcall	_RfSWPointSelect
  7208                           
  7209                           ;RF_Control_B1.c: 376: if (RFSW->Status == 1) {
  7210  1522  0021               	movlb	1	; select bank1
  7211  1523  083F               	movf	_RFSW^(0+128),w
  7212  1524  0086               	movwf	6
  7213  1525  0187               	clrf	7
  7214  1526  1C01               	btfss	1,0
  7215  1527  2D34               	goto	l5850
  7216                           
  7217                           ;RF_Control_B1.c: 377: Memory->Modify=1;
  7218  1528  086C               	movf	_Memory^(0+128),w
  7219  1529  3E24               	addlw	36
  7220  152A  0086               	movwf	6
  7221  152B  3002               	movlw	2	; select bank4/5
  7222  152C  0087               	movwf	7
  7223  152D  1401               	bsf	1,0
  7224                           
  7225                           ;RF_Control_B1.c: 378: setRF_DimmerValue(sw);
  7226  152E  0020               	movlb	0	; select bank0
  7227  152F  0866               	movf	setRFSW_AdjControl@sw,w
  7228  1530  3194  2469  3195   	fcall	_setRF_DimmerValue
  7229                           
  7230                           ;RF_Control_B1.c: 379: } else {
  7231  1533  2D46               	goto	l2244
  7232  1534                     l5850:	
  7233                           
  7234                           ;RF_Control_B1.c: 380: product->Data[9]=product->Data[20 + sw];
  7235  1534  0020               	movlb	0	; select bank0
  7236  1535  0866               	movf	setRFSW_AdjControl@sw,w
  7237  1536  3E14               	addlw	20
  7238  1537  077D               	addwf	_product,w
  7239  1538  00E4               	movwf	??_setRFSW_AdjControl
  7240  1539  0864               	movf	??_setRFSW_AdjControl,w
  7241  153A  0086               	movwf	6
  7242  153B  3001               	movlw	1	; select bank2/3
  7243  153C  0087               	movwf	7
  7244  153D  0801               	movf	1,w
  7245  153E  00E5               	movwf	??_setRFSW_AdjControl+1
  7246  153F  087D               	movf	_product,w
  7247  1540  3E09               	addlw	9
  7248  1541  0086               	movwf	6
  7249  1542  3001               	movlw	1	; select bank2/3
  7250  1543  0087               	movwf	7
  7251  1544  0865               	movf	??_setRFSW_AdjControl+1,w
  7252  1545  0081               	movwf	1
  7253  1546                     l2244:	
  7254                           
  7255                           ;RF_Control_B1.c: 381: }
  7256                           ;RF_Control_B1.c: 382: product->Data[17]=product->Data[26 + sw];
  7257  1546  0020               	movlb	0	; select bank0
  7258  1547  0866               	movf	setRFSW_AdjControl@sw,w
  7259  1548  3E1A               	addlw	26
  7260  1549  077D               	addwf	_product,w
  7261  154A  00E4               	movwf	??_setRFSW_AdjControl
  7262  154B  0864               	movf	??_setRFSW_AdjControl,w
  7263  154C  0086               	movwf	6
  7264  154D  3001               	movlw	1	; select bank2/3
  7265  154E  0087               	movwf	7
  7266  154F  0801               	movf	1,w
  7267  1550  00E5               	movwf	??_setRFSW_AdjControl+1
  7268  1551  087D               	movf	_product,w
  7269  1552  3E11               	addlw	17
  7270  1553  0086               	movwf	6
  7271  1554  3001               	movlw	1	; select bank2/3
  7272  1555  0087               	movwf	7
  7273  1556  0865               	movf	??_setRFSW_AdjControl+1,w
  7274  1557  0081               	movwf	1
  7275                           
  7276                           ;RF_Control_B1.c: 383: setTxData(1);
  7277  1558  3001               	movlw	1
  7278  1559  318E  26BD         	fcall	_setTxData
  7279  155B  0008               	return
  7280  155C                     __end_of_setRFSW_AdjControl:	
  7281                           
  7282                           	psect	text27
  7283  1469                     __ptext27:	
  7284 ;; *************** function _setRF_DimmerValue *****************
  7285 ;; Defined at:
  7286 ;;		line 394 in file "../src/RF_Control_B1.c"
  7287 ;; Parameters:    Size  Location     Type
  7288 ;;  lights          1    wreg     unsigned char 
  7289 ;; Auto vars:     Size  Location     Type
  7290 ;;  lights          1   67[BANK0 ] unsigned char 
  7291 ;; Return value:  Size  Location     Type
  7292 ;;		None               void
  7293 ;; Registers used:
  7294 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7295 ;; Tracked objects:
  7296 ;;		On entry : 0/0
  7297 ;;		On exit  : 0/0
  7298 ;;		Unchanged: 0/0
  7299 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7300 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7301 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7302 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7303 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7304 ;;Total ram usage:        3 bytes
  7305 ;; Hardware stack levels used:    1
  7306 ;; Hardware stack levels required when called:    9
  7307 ;; This function calls:
  7308 ;;		_setDimmerLights_AdjRF
  7309 ;; This function is called by:
  7310 ;;		_setRFSW_AdjControl
  7311 ;; This function uses a non-reentrant model
  7312 ;;
  7313                           
  7314                           
  7315                           ;psect for function _setRF_DimmerValue
  7316  1469                     _setRF_DimmerValue:	
  7317                           
  7318                           ;incstack = 0
  7319                           ; Regs used in _setRF_DimmerValue: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7320                           ;setRF_DimmerValue@lights stored from wreg
  7321  1469  0020               	movlb	0	; select bank0
  7322  146A  00E3               	movwf	setRF_DimmerValue@lights
  7323                           
  7324                           ;RF_Control_B1.c: 395: if (RF_Data[9] > 0x64) {
  7325  146B  3065               	movlw	101
  7326  146C  0021               	movlb	1	; select bank1
  7327  146D  0229               	subwf	(_RF_Data^(0+128)+9),w
  7328  146E  1C03               	skipc
  7329  146F  2C76               	goto	l5730
  7330                           
  7331                           ;RF_Control_B1.c: 396: RF_Data[9] = 0x64;
  7332  1470  3064               	movlw	100
  7333  1471  0020               	movlb	0	; select bank0
  7334  1472  00E1               	movwf	??_setRF_DimmerValue
  7335  1473  0861               	movf	??_setRF_DimmerValue,w
  7336  1474  0021               	movlb	1	; select bank1
  7337  1475  00A9               	movwf	(_RF_Data^(0+128)+9)
  7338  1476                     l5730:	
  7339                           
  7340                           ;RF_Control_B1.c: 397: }
  7341                           ;RF_Control_B1.c: 398: product->Data[9]=RF_Data[9];
  7342  1476  0829               	movf	(_RF_Data^(0+128)+9),w
  7343  1477  0020               	movlb	0	; select bank0
  7344  1478  00E1               	movwf	??_setRF_DimmerValue
  7345  1479  087D               	movf	_product,w
  7346  147A  3E09               	addlw	9
  7347  147B  0086               	movwf	6
  7348  147C  3001               	movlw	1	; select bank2/3
  7349  147D  0087               	movwf	7
  7350  147E  0861               	movf	??_setRF_DimmerValue,w
  7351  147F  0081               	movwf	1
  7352                           
  7353                           ;RF_Control_B1.c: 399: product->Data[11]=lights;
  7354  1480  0863               	movf	setRF_DimmerValue@lights,w
  7355  1481  00E1               	movwf	??_setRF_DimmerValue
  7356  1482  087D               	movf	_product,w
  7357  1483  3E0B               	addlw	11
  7358  1484  0086               	movwf	6
  7359  1485  3001               	movlw	1	; select bank2/3
  7360  1486  0087               	movwf	7
  7361  1487  0861               	movf	??_setRF_DimmerValue,w
  7362  1488  0081               	movwf	1
  7363                           
  7364                           ;RF_Control_B1.c: 400: product->Data[(20 + lights)]=product->Data[9];
  7365  1489  087D               	movf	_product,w
  7366  148A  3E09               	addlw	9
  7367  148B  0086               	movwf	6
  7368  148C  3001               	movlw	1	; select bank2/3
  7369  148D  0087               	movwf	7
  7370  148E  0801               	movf	1,w
  7371  148F  00E1               	movwf	??_setRF_DimmerValue
  7372  1490  0863               	movf	setRF_DimmerValue@lights,w
  7373  1491  3E14               	addlw	20
  7374  1492  077D               	addwf	_product,w
  7375  1493  00E2               	movwf	??_setRF_DimmerValue+1
  7376  1494  0862               	movf	??_setRF_DimmerValue+1,w
  7377  1495  0086               	movwf	6
  7378  1496  3001               	movlw	1	; select bank2/3
  7379  1497  0087               	movwf	7
  7380  1498  0861               	movf	??_setRF_DimmerValue,w
  7381  1499  0081               	movwf	1
  7382                           
  7383                           ;RF_Control_B1.c: 401: setDimmerLights_AdjRF(lights);
  7384  149A  0863               	movf	setRF_DimmerValue@lights,w
  7385  149B  3192  228B         	fcall	_setDimmerLights_AdjRF
  7386  149D  0008               	return
  7387  149E                     __end_of_setRF_DimmerValue:	
  7388                           
  7389                           	psect	text28
  7390  128B                     __ptext28:	
  7391 ;; *************** function _setDimmerLights_AdjRF *****************
  7392 ;; Defined at:
  7393 ;;		line 705 in file "../src/Dimmer_B1.c"
  7394 ;; Parameters:    Size  Location     Type
  7395 ;;  lights          1    wreg     unsigned char 
  7396 ;; Auto vars:     Size  Location     Type
  7397 ;;  lights          1   64[BANK0 ] unsigned char 
  7398 ;; Return value:  Size  Location     Type
  7399 ;;		None               void
  7400 ;; Registers used:
  7401 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7402 ;; Tracked objects:
  7403 ;;		On entry : 0/0
  7404 ;;		On exit  : 0/0
  7405 ;;		Unchanged: 0/0
  7406 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7407 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7408 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7409 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7410 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7411 ;;Total ram usage:        2 bytes
  7412 ;; Hardware stack levels used:    1
  7413 ;; Hardware stack levels required when called:    8
  7414 ;; This function calls:
  7415 ;;		_DimmerLightsPointSelect
  7416 ;;		_getPercentValue
  7417 ;; This function is called by:
  7418 ;;		_setRF_DimmerValue
  7419 ;; This function uses a non-reentrant model
  7420 ;;
  7421                           
  7422                           
  7423                           ;psect for function _setDimmerLights_AdjRF
  7424  128B                     _setDimmerLights_AdjRF:	
  7425                           
  7426                           ;incstack = 0
  7427                           ; Regs used in _setDimmerLights_AdjRF: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  7428                           ;setDimmerLights_AdjRF@lights stored from wreg
  7429  128B  0020               	movlb	0	; select bank0
  7430  128C  00E0               	movwf	setDimmerLights_AdjRF@lights
  7431                           
  7432                           ;Dimmer_B1.c: 707: DimmerLightsPointSelect(lights);
  7433  128D  0860               	movf	setDimmerLights_AdjRF@lights,w
  7434  128E  319F  27B1  3192   	fcall	_DimmerLightsPointSelect
  7435                           
  7436                           ;Dimmer_B1.c: 708: DimmerLights->AdjRF = 1;
  7437  1291  0879               	movf	_DimmerLights,w
  7438  1292  0086               	movwf	6
  7439  1293  3001               	movlw	1	; select bank2/3
  7440  1294  0087               	movwf	7
  7441  1295  1501               	bsf	1,2
  7442                           
  7443                           ;Dimmer_B1.c: 709: DimmerLights->Signal = 1;
  7444  1296  0879               	movf	_DimmerLights,w
  7445  1297  0086               	movwf	6
  7446  1298  3001               	movlw	1	; select bank2/3
  7447  1299  0087               	movwf	7
  7448  129A  1481               	bsf	1,1
  7449                           
  7450                           ;Dimmer_B1.c: 710: DimmerLights->MaxmumValue = getPercentValue(product->Data[9]);
  7451  129B  087D               	movf	_product,w
  7452  129C  3E09               	addlw	9
  7453  129D  0086               	movwf	6
  7454  129E  3001               	movlw	1	; select bank2/3
  7455  129F  0087               	movwf	7
  7456  12A0  0801               	movf	1,w
  7457  12A1  3197  27A5         	fcall	_getPercentValue
  7458  12A3  0020               	movlb	0	; select bank0
  7459  12A4  00DF               	movwf	??_setDimmerLights_AdjRF
  7460  12A5  0879               	movf	_DimmerLights,w
  7461  12A6  3E05               	addlw	5
  7462  12A7  0086               	movwf	6
  7463  12A8  3001               	movlw	1	; select bank2/3
  7464  12A9  0087               	movwf	7
  7465  12AA  085F               	movf	??_setDimmerLights_AdjRF,w
  7466  12AB  0081               	movwf	1
  7467  12AC  0008               	return
  7468  12AD                     __end_of_setDimmerLights_AdjRF:	
  7469                           
  7470                           	psect	text29
  7471  17A5                     __ptext29:	
  7472 ;; *************** function _getPercentValue *****************
  7473 ;; Defined at:
  7474 ;;		line 778 in file "../src/Dimmer_B1.c"
  7475 ;; Parameters:    Size  Location     Type
  7476 ;;  value           1    wreg     unsigned char 
  7477 ;; Auto vars:     Size  Location     Type
  7478 ;;  value           1   59[BANK0 ] unsigned char 
  7479 ;;  i               3   60[BANK0 ] float 
  7480 ;; Return value:  Size  Location     Type
  7481 ;;                  1    wreg      unsigned char 
  7482 ;; Registers used:
  7483 ;;		wreg, status,2, status,0, pclath, cstack
  7484 ;; Tracked objects:
  7485 ;;		On entry : 0/0
  7486 ;;		On exit  : 0/0
  7487 ;;		Unchanged: 0/0
  7488 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7489 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7490 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7491 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7492 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7493 ;;Total ram usage:        6 bytes
  7494 ;; Hardware stack levels used:    1
  7495 ;; Hardware stack levels required when called:    7
  7496 ;; This function calls:
  7497 ;;		___awtoft
  7498 ;;		___ftadd
  7499 ;;		___ftdiv
  7500 ;;		___ftmul
  7501 ;;		___fttol
  7502 ;; This function is called by:
  7503 ;;		_setDimmerLights_AdjRF
  7504 ;; This function uses a non-reentrant model
  7505 ;;
  7506                           
  7507                           
  7508                           ;psect for function _getPercentValue
  7509  17A5                     _getPercentValue:	
  7510                           
  7511                           ;incstack = 0
  7512                           ; Regs used in _getPercentValue: [wreg+status,2+status,0+pclath+cstack]
  7513                           ;getPercentValue@value stored from wreg
  7514  17A5  0020               	movlb	0	; select bank0
  7515  17A6  00DB               	movwf	getPercentValue@value
  7516                           
  7517                           ;Dimmer_B1.c: 780: float i = ((char)((100-20)*0.8)) - ((char)((100-70)*0.8));
  7518  17A7  3000               	movlw	0
  7519  17A8  00DC               	movwf	getPercentValue@i
  7520  17A9  3020               	movlw	32
  7521  17AA  00DD               	movwf	getPercentValue@i+1
  7522  17AB  3042               	movlw	66
  7523  17AC  00DE               	movwf	getPercentValue@i+2
  7524                           
  7525                           ;Dimmer_B1.c: 781: i /= 100;
  7526  17AD  3000               	movlw	0
  7527  17AE  00AE               	movwf	___ftdiv@f2
  7528  17AF  30C8               	movlw	200
  7529  17B0  00AF               	movwf	___ftdiv@f2+1
  7530  17B1  3042               	movlw	66
  7531  17B2  00B0               	movwf	___ftdiv@f2+2
  7532  17B3  085C               	movf	getPercentValue@i,w
  7533  17B4  00B1               	movwf	___ftdiv@f1
  7534  17B5  085D               	movf	getPercentValue@i+1,w
  7535  17B6  00B2               	movwf	___ftdiv@f1+1
  7536  17B7  085E               	movf	getPercentValue@i+2,w
  7537  17B8  00B3               	movwf	___ftdiv@f1+2
  7538  17B9  3186  26BF  3197   	fcall	___ftdiv
  7539  17BC  0020               	movlb	0	; select bank0
  7540  17BD  082E               	movf	?___ftdiv,w
  7541  17BE  00DC               	movwf	getPercentValue@i
  7542  17BF  082F               	movf	?___ftdiv+1,w
  7543  17C0  00DD               	movwf	getPercentValue@i+1
  7544  17C1  0830               	movf	?___ftdiv+2,w
  7545  17C2  00DE               	movwf	getPercentValue@i+2
  7546                           
  7547                           ;Dimmer_B1.c: 782: return (char) (((100 - value) * i) + ((char)((100-70)*0.8)));
  7548  17C3  085B               	movf	getPercentValue@value,w
  7549  17C4  00D9               	movwf	??_getPercentValue
  7550  17C5  01DA               	clrf	??_getPercentValue+1
  7551  17C6  09D9               	comf	??_getPercentValue,f
  7552  17C7  09DA               	comf	??_getPercentValue+1,f
  7553  17C8  0AD9               	incf	??_getPercentValue,f
  7554  17C9  1903               	skipnz
  7555  17CA  0ADA               	incf	??_getPercentValue+1,f
  7556  17CB  0859               	movf	??_getPercentValue,w
  7557  17CC  3E64               	addlw	100
  7558  17CD  00A8               	movwf	___awtoft@c
  7559  17CE  3000               	movlw	0
  7560  17CF  3D5A               	addwfc	??_getPercentValue+1,w
  7561  17D0  00A9               	movwf	___awtoft@c+1
  7562  17D1  3192  2247  3197   	fcall	___awtoft
  7563  17D4  0020               	movlb	0	; select bank0
  7564  17D5  0828               	movf	?___awtoft,w
  7565  17D6  00B1               	movwf	___ftmul@f2
  7566  17D7  0829               	movf	?___awtoft+1,w
  7567  17D8  00B2               	movwf	___ftmul@f2+1
  7568  17D9  082A               	movf	?___awtoft+2,w
  7569  17DA  00B3               	movwf	___ftmul@f2+2
  7570  17DB  085C               	movf	getPercentValue@i,w
  7571  17DC  00AE               	movwf	___ftmul@f1
  7572  17DD  085D               	movf	getPercentValue@i+1,w
  7573  17DE  00AF               	movwf	___ftmul@f1+1
  7574  17DF  085E               	movf	getPercentValue@i+2,w
  7575  17E0  00B0               	movwf	___ftmul@f1+2
  7576  17E1  3185  255D  3197   	fcall	___ftmul
  7577  17E4  0020               	movlb	0	; select bank0
  7578  17E5  082E               	movf	?___ftmul,w
  7579  17E6  00C1               	movwf	___ftadd@f2
  7580  17E7  082F               	movf	?___ftmul+1,w
  7581  17E8  00C2               	movwf	___ftadd@f2+1
  7582  17E9  0830               	movf	?___ftmul+2,w
  7583  17EA  00C3               	movwf	___ftadd@f2+2
  7584  17EB  3000               	movlw	0
  7585  17EC  00BE               	movwf	___ftadd@f1
  7586  17ED  30C0               	movlw	192
  7587  17EE  00BF               	movwf	___ftadd@f1+1
  7588  17EF  3041               	movlw	65
  7589  17F0  00C0               	movwf	___ftadd@f1+2
  7590  17F1  3183  2371  3197   	fcall	___ftadd
  7591  17F4  0020               	movlb	0	; select bank0
  7592  17F5  083E               	movf	?___ftadd,w
  7593  17F6  00CB               	movwf	___fttol@f1
  7594  17F7  083F               	movf	?___ftadd+1,w
  7595  17F8  00CC               	movwf	___fttol@f1+1
  7596  17F9  0840               	movf	?___ftadd+2,w
  7597  17FA  00CD               	movwf	___fttol@f1+2
  7598  17FB  318D  25A6         	fcall	___fttol
  7599  17FD  0020               	movlb	0	; select bank0
  7600  17FE  084B               	movf	?___fttol,w
  7601  17FF  0008               	return
  7602  1800                     __end_of_getPercentValue:	
  7603                           
  7604                           	psect	text30
  7605  055D                     __ptext30:	
  7606 ;; *************** function ___ftmul *****************
  7607 ;; Defined at:
  7608 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftmul.c"
  7609 ;; Parameters:    Size  Location     Type
  7610 ;;  f1              3   14[BANK0 ] float 
  7611 ;;  f2              3   17[BANK0 ] float 
  7612 ;; Auto vars:     Size  Location     Type
  7613 ;;  f3_as_produc    3   25[BANK0 ] unsigned um
  7614 ;;  sign            1   29[BANK0 ] unsigned char 
  7615 ;;  cntr            1   28[BANK0 ] unsigned char 
  7616 ;;  exp             1   24[BANK0 ] unsigned char 
  7617 ;; Return value:  Size  Location     Type
  7618 ;;                  3   14[BANK0 ] float 
  7619 ;; Registers used:
  7620 ;;		wreg, status,2, status,0, pclath, cstack
  7621 ;; Tracked objects:
  7622 ;;		On entry : 0/0
  7623 ;;		On exit  : 0/0
  7624 ;;		Unchanged: 0/0
  7625 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7626 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7627 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7628 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7629 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7630 ;;Total ram usage:       16 bytes
  7631 ;; Hardware stack levels used:    1
  7632 ;; Hardware stack levels required when called:    6
  7633 ;; This function calls:
  7634 ;;		___ftpack
  7635 ;; This function is called by:
  7636 ;;		_getPercentValue
  7637 ;; This function uses a non-reentrant model
  7638 ;;
  7639                           
  7640                           
  7641                           ;psect for function ___ftmul
  7642  055D                     ___ftmul:	
  7643                           
  7644                           ;incstack = 0
  7645                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  7646  055D  0020               	movlb	0	; select bank0
  7647  055E  082E               	movf	___ftmul@f1,w
  7648  055F  00B4               	movwf	??___ftmul
  7649  0560  082F               	movf	___ftmul@f1+1,w
  7650  0561  00B5               	movwf	??___ftmul+1
  7651  0562  0830               	movf	___ftmul@f1+2,w
  7652  0563  00B6               	movwf	??___ftmul+2
  7653  0564  1003               	clrc
  7654  0565  0D35               	rlf	??___ftmul+1,w
  7655  0566  0D36               	rlf	??___ftmul+2,w
  7656  0567  00B7               	movwf	??___ftmul+3
  7657  0568  0837               	movf	??___ftmul+3,w
  7658  0569  00B8               	movwf	___ftmul@exp
  7659  056A  08B8               	movf	___ftmul@exp,f
  7660  056B  1D03               	skipz
  7661  056C  2D74               	goto	l5360
  7662  056D  3000               	movlw	0
  7663  056E  00AE               	movwf	?___ftmul
  7664  056F  3000               	movlw	0
  7665  0570  00AF               	movwf	?___ftmul+1
  7666  0571  3000               	movlw	0
  7667  0572  00B0               	movwf	?___ftmul+2
  7668  0573  0008               	return
  7669  0574                     l5360:	
  7670  0574  0831               	movf	___ftmul@f2,w
  7671  0575  00B4               	movwf	??___ftmul
  7672  0576  0832               	movf	___ftmul@f2+1,w
  7673  0577  00B5               	movwf	??___ftmul+1
  7674  0578  0833               	movf	___ftmul@f2+2,w
  7675  0579  00B6               	movwf	??___ftmul+2
  7676  057A  1003               	clrc
  7677  057B  0D35               	rlf	??___ftmul+1,w
  7678  057C  0D36               	rlf	??___ftmul+2,w
  7679  057D  00B7               	movwf	??___ftmul+3
  7680  057E  0837               	movf	??___ftmul+3,w
  7681  057F  00BD               	movwf	___ftmul@sign
  7682  0580  08BD               	movf	___ftmul@sign,f
  7683  0581  1D03               	skipz
  7684  0582  2D8A               	goto	l5366
  7685  0583  3000               	movlw	0
  7686  0584  00AE               	movwf	?___ftmul
  7687  0585  3000               	movlw	0
  7688  0586  00AF               	movwf	?___ftmul+1
  7689  0587  3000               	movlw	0
  7690  0588  00B0               	movwf	?___ftmul+2
  7691  0589  0008               	return
  7692  058A                     l5366:	
  7693  058A  083D               	movf	___ftmul@sign,w
  7694  058B  3E7B               	addlw	123
  7695  058C  00B4               	movwf	??___ftmul
  7696  058D  0834               	movf	??___ftmul,w
  7697  058E  07B8               	addwf	___ftmul@exp,f
  7698  058F  082E               	movf	___ftmul@f1,w
  7699  0590  00B4               	movwf	??___ftmul
  7700  0591  082F               	movf	___ftmul@f1+1,w
  7701  0592  00B5               	movwf	??___ftmul+1
  7702  0593  0830               	movf	___ftmul@f1+2,w
  7703  0594  00B6               	movwf	??___ftmul+2
  7704  0595  3010               	movlw	16
  7705  0596                     u3695:	
  7706  0596  36B6               	lsrf	??___ftmul+2,f
  7707  0597  0CB5               	rrf	??___ftmul+1,f
  7708  0598  0CB4               	rrf	??___ftmul,f
  7709  0599  0B89               	decfsz	9,f
  7710  059A  2D96               	goto	u3695
  7711  059B  0834               	movf	??___ftmul,w
  7712  059C  00B7               	movwf	??___ftmul+3
  7713  059D  0837               	movf	??___ftmul+3,w
  7714  059E  00BD               	movwf	___ftmul@sign
  7715  059F  0831               	movf	___ftmul@f2,w
  7716  05A0  00B4               	movwf	??___ftmul
  7717  05A1  0832               	movf	___ftmul@f2+1,w
  7718  05A2  00B5               	movwf	??___ftmul+1
  7719  05A3  0833               	movf	___ftmul@f2+2,w
  7720  05A4  00B6               	movwf	??___ftmul+2
  7721  05A5  3010               	movlw	16
  7722  05A6                     u3705:	
  7723  05A6  36B6               	lsrf	??___ftmul+2,f
  7724  05A7  0CB5               	rrf	??___ftmul+1,f
  7725  05A8  0CB4               	rrf	??___ftmul,f
  7726  05A9  0B89               	decfsz	9,f
  7727  05AA  2DA6               	goto	u3705
  7728  05AB  0834               	movf	??___ftmul,w
  7729  05AC  00B7               	movwf	??___ftmul+3
  7730  05AD  0837               	movf	??___ftmul+3,w
  7731  05AE  06BD               	xorwf	___ftmul@sign,f
  7732  05AF  3080               	movlw	128
  7733  05B0  00B4               	movwf	??___ftmul
  7734  05B1  0834               	movf	??___ftmul,w
  7735  05B2  05BD               	andwf	___ftmul@sign,f
  7736  05B3  17AF               	bsf	___ftmul@f1+1,7
  7737  05B4  17B2               	bsf	___ftmul@f2+1,7
  7738  05B5  30FF               	movlw	255
  7739  05B6  05B1               	andwf	___ftmul@f2,f
  7740  05B7  30FF               	movlw	255
  7741  05B8  05B2               	andwf	___ftmul@f2+1,f
  7742  05B9  3000               	movlw	0
  7743  05BA  05B3               	andwf	___ftmul@f2+2,f
  7744  05BB  3000               	movlw	0
  7745  05BC  00B9               	movwf	___ftmul@f3_as_product
  7746  05BD  3000               	movlw	0
  7747  05BE  00BA               	movwf	___ftmul@f3_as_product+1
  7748  05BF  3000               	movlw	0
  7749  05C0  00BB               	movwf	___ftmul@f3_as_product+2
  7750  05C1  3007               	movlw	7
  7751  05C2  00B4               	movwf	??___ftmul
  7752  05C3  0834               	movf	??___ftmul,w
  7753  05C4  00BC               	movwf	___ftmul@cntr
  7754  05C5                     l5378:	
  7755  05C5  1C2E               	btfss	___ftmul@f1,0
  7756  05C6  2DCD               	goto	l5382
  7757  05C7  0831               	movf	___ftmul@f2,w
  7758  05C8  07B9               	addwf	___ftmul@f3_as_product,f
  7759  05C9  0832               	movf	___ftmul@f2+1,w
  7760  05CA  3DBA               	addwfc	___ftmul@f3_as_product+1,f
  7761  05CB  0833               	movf	___ftmul@f2+2,w
  7762  05CC  3DBB               	addwfc	___ftmul@f3_as_product+2,f
  7763  05CD                     l5382:	
  7764  05CD  3001               	movlw	1
  7765  05CE                     u3725:	
  7766  05CE  36B0               	lsrf	___ftmul@f1+2,f
  7767  05CF  0CAF               	rrf	___ftmul@f1+1,f
  7768  05D0  0CAE               	rrf	___ftmul@f1,f
  7769  05D1  0B89               	decfsz	9,f
  7770  05D2  2DCE               	goto	u3725
  7771  05D3  3001               	movlw	1
  7772  05D4                     u3735:	
  7773  05D4  35B1               	lslf	___ftmul@f2,f
  7774  05D5  0DB2               	rlf	___ftmul@f2+1,f
  7775  05D6  0DB3               	rlf	___ftmul@f2+2,f
  7776  05D7  0B89               	decfsz	9,f
  7777  05D8  2DD4               	goto	u3735
  7778  05D9  3001               	movlw	1
  7779  05DA  02BC               	subwf	___ftmul@cntr,f
  7780  05DB  1D03               	btfss	3,2
  7781  05DC  2DC5               	goto	l5378
  7782  05DD  3009               	movlw	9
  7783  05DE  00B4               	movwf	??___ftmul
  7784  05DF  0834               	movf	??___ftmul,w
  7785  05E0  00BC               	movwf	___ftmul@cntr
  7786  05E1                     l5390:	
  7787  05E1  1C2E               	btfss	___ftmul@f1,0
  7788  05E2  2DE9               	goto	l5394
  7789  05E3  0831               	movf	___ftmul@f2,w
  7790  05E4  07B9               	addwf	___ftmul@f3_as_product,f
  7791  05E5  0832               	movf	___ftmul@f2+1,w
  7792  05E6  3DBA               	addwfc	___ftmul@f3_as_product+1,f
  7793  05E7  0833               	movf	___ftmul@f2+2,w
  7794  05E8  3DBB               	addwfc	___ftmul@f3_as_product+2,f
  7795  05E9                     l5394:	
  7796  05E9  3001               	movlw	1
  7797  05EA                     u3765:	
  7798  05EA  36B0               	lsrf	___ftmul@f1+2,f
  7799  05EB  0CAF               	rrf	___ftmul@f1+1,f
  7800  05EC  0CAE               	rrf	___ftmul@f1,f
  7801  05ED  0B89               	decfsz	9,f
  7802  05EE  2DEA               	goto	u3765
  7803  05EF  3001               	movlw	1
  7804  05F0                     u3775:	
  7805  05F0  36BB               	lsrf	___ftmul@f3_as_product+2,f
  7806  05F1  0CBA               	rrf	___ftmul@f3_as_product+1,f
  7807  05F2  0CB9               	rrf	___ftmul@f3_as_product,f
  7808  05F3  0B89               	decfsz	9,f
  7809  05F4  2DF0               	goto	u3775
  7810  05F5  3001               	movlw	1
  7811  05F6  02BC               	subwf	___ftmul@cntr,f
  7812  05F7  1D03               	btfss	3,2
  7813  05F8  2DE1               	goto	l5390
  7814  05F9  0839               	movf	___ftmul@f3_as_product,w
  7815  05FA  00A0               	movwf	___ftpack@arg
  7816  05FB  083A               	movf	___ftmul@f3_as_product+1,w
  7817  05FC  00A1               	movwf	___ftpack@arg+1
  7818  05FD  083B               	movf	___ftmul@f3_as_product+2,w
  7819  05FE  00A2               	movwf	___ftpack@arg+2
  7820  05FF  0838               	movf	___ftmul@exp,w
  7821  0600  00B4               	movwf	??___ftmul
  7822  0601  0834               	movf	??___ftmul,w
  7823  0602  00A3               	movwf	___ftpack@exp
  7824  0603  083D               	movf	___ftmul@sign,w
  7825  0604  00B5               	movwf	??___ftmul+1
  7826  0605  0835               	movf	??___ftmul+1,w
  7827  0606  00A4               	movwf	___ftpack@sign
  7828  0607  3189  212B         	fcall	___ftpack
  7829  0609  0020               	movlb	0	; select bank0
  7830  060A  0820               	movf	?___ftpack,w
  7831  060B  00AE               	movwf	?___ftmul
  7832  060C  0821               	movf	?___ftpack+1,w
  7833  060D  00AF               	movwf	?___ftmul+1
  7834  060E  0822               	movf	?___ftpack+2,w
  7835  060F  00B0               	movwf	?___ftmul+2
  7836  0610  0008               	return
  7837  0611                     __end_of___ftmul:	
  7838                           
  7839                           	psect	text31
  7840  0371                     __ptext31:	
  7841 ;; *************** function ___ftadd *****************
  7842 ;; Defined at:
  7843 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftadd.c"
  7844 ;; Parameters:    Size  Location     Type
  7845 ;;  f1              3   30[BANK0 ] float 
  7846 ;;  f2              3   33[BANK0 ] float 
  7847 ;; Auto vars:     Size  Location     Type
  7848 ;;  exp1            1   42[BANK0 ] unsigned char 
  7849 ;;  exp2            1   41[BANK0 ] unsigned char 
  7850 ;;  sign            1   40[BANK0 ] unsigned char 
  7851 ;; Return value:  Size  Location     Type
  7852 ;;                  3   30[BANK0 ] float 
  7853 ;; Registers used:
  7854 ;;		wreg, status,2, status,0, pclath, cstack
  7855 ;; Tracked objects:
  7856 ;;		On entry : 0/0
  7857 ;;		On exit  : 0/0
  7858 ;;		Unchanged: 0/0
  7859 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7860 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7861 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7862 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7863 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7864 ;;Total ram usage:       13 bytes
  7865 ;; Hardware stack levels used:    1
  7866 ;; Hardware stack levels required when called:    6
  7867 ;; This function calls:
  7868 ;;		___ftpack
  7869 ;; This function is called by:
  7870 ;;		_getPercentValue
  7871 ;; This function uses a non-reentrant model
  7872 ;;
  7873                           
  7874                           
  7875                           ;psect for function ___ftadd
  7876  0371                     ___ftadd:	
  7877                           
  7878                           ;incstack = 0
  7879                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
  7880  0371  0020               	movlb	0	; select bank0
  7881  0372  083E               	movf	___ftadd@f1,w
  7882  0373  00C4               	movwf	??___ftadd
  7883  0374  083F               	movf	___ftadd@f1+1,w
  7884  0375  00C5               	movwf	??___ftadd+1
  7885  0376  0840               	movf	___ftadd@f1+2,w
  7886  0377  00C6               	movwf	??___ftadd+2
  7887  0378  1003               	clrc
  7888  0379  0D45               	rlf	??___ftadd+1,w
  7889  037A  0D46               	rlf	??___ftadd+2,w
  7890  037B  00C7               	movwf	??___ftadd+3
  7891  037C  0847               	movf	??___ftadd+3,w
  7892  037D  00CA               	movwf	___ftadd@exp1
  7893  037E  0841               	movf	___ftadd@f2,w
  7894  037F  00C4               	movwf	??___ftadd
  7895  0380  0842               	movf	___ftadd@f2+1,w
  7896  0381  00C5               	movwf	??___ftadd+1
  7897  0382  0843               	movf	___ftadd@f2+2,w
  7898  0383  00C6               	movwf	??___ftadd+2
  7899  0384  1003               	clrc
  7900  0385  0D45               	rlf	??___ftadd+1,w
  7901  0386  0D46               	rlf	??___ftadd+2,w
  7902  0387  00C7               	movwf	??___ftadd+3
  7903  0388  0847               	movf	??___ftadd+3,w
  7904  0389  00C9               	movwf	___ftadd@exp2
  7905  038A  084A               	movf	___ftadd@exp1,w
  7906  038B  1903               	btfsc	3,2
  7907  038C  2B99               	goto	l5248
  7908  038D  0849               	movf	___ftadd@exp2,w
  7909  038E  024A               	subwf	___ftadd@exp1,w
  7910  038F  1803               	skipnc
  7911  0390  2BA0               	goto	l5252
  7912  0391  034A               	decf	___ftadd@exp1,w
  7913  0392  3AFF               	xorlw	255
  7914  0393  0749               	addwf	___ftadd@exp2,w
  7915  0394  00C4               	movwf	??___ftadd
  7916  0395  3019               	movlw	25
  7917  0396  0244               	subwf	??___ftadd,w
  7918  0397  1C03               	skipc
  7919  0398  2BA0               	goto	l5252
  7920  0399                     l5248:	
  7921  0399  0841               	movf	___ftadd@f2,w
  7922  039A  00BE               	movwf	?___ftadd
  7923  039B  0842               	movf	___ftadd@f2+1,w
  7924  039C  00BF               	movwf	?___ftadd+1
  7925  039D  0843               	movf	___ftadd@f2+2,w
  7926  039E  00C0               	movwf	?___ftadd+2
  7927  039F  0008               	return
  7928  03A0                     l5252:	
  7929  03A0  0849               	movf	___ftadd@exp2,w
  7930  03A1  1903               	btfsc	3,2
  7931  03A2  0008               	return
  7932  03A3  084A               	movf	___ftadd@exp1,w
  7933  03A4  0249               	subwf	___ftadd@exp2,w
  7934  03A5  1803               	skipnc
  7935  03A6  2BAF               	goto	l5258
  7936  03A7  0349               	decf	___ftadd@exp2,w
  7937  03A8  3AFF               	xorlw	255
  7938  03A9  074A               	addwf	___ftadd@exp1,w
  7939  03AA  00C4               	movwf	??___ftadd
  7940  03AB  3019               	movlw	25
  7941  03AC  0244               	subwf	??___ftadd,w
  7942  03AD  1803               	btfsc	3,0
  7943  03AE  0008               	return
  7944  03AF                     l5258:	
  7945  03AF  3006               	movlw	6
  7946  03B0  00C4               	movwf	??___ftadd
  7947  03B1  0844               	movf	??___ftadd,w
  7948  03B2  00C8               	movwf	___ftadd@sign
  7949  03B3  1BC0               	btfsc	___ftadd@f1+2,7
  7950  03B4  17C8               	bsf	___ftadd@sign,7
  7951  03B5  1BC3               	btfsc	___ftadd@f2+2,7
  7952  03B6  1748               	bsf	___ftadd@sign,6
  7953  03B7  17BF               	bsf	___ftadd@f1+1,7
  7954  03B8  30FF               	movlw	255
  7955  03B9  05BE               	andwf	___ftadd@f1,f
  7956  03BA  30FF               	movlw	255
  7957  03BB  05BF               	andwf	___ftadd@f1+1,f
  7958  03BC  3000               	movlw	0
  7959  03BD  05C0               	andwf	___ftadd@f1+2,f
  7960  03BE  17C2               	bsf	___ftadd@f2+1,7
  7961  03BF  30FF               	movlw	255
  7962  03C0  05C1               	andwf	___ftadd@f2,f
  7963  03C1  30FF               	movlw	255
  7964  03C2  05C2               	andwf	___ftadd@f2+1,f
  7965  03C3  3000               	movlw	0
  7966  03C4  05C3               	andwf	___ftadd@f2+2,f
  7967  03C5  0849               	movf	___ftadd@exp2,w
  7968  03C6  024A               	subwf	___ftadd@exp1,w
  7969  03C7  1803               	skipnc
  7970  03C8  2BEB               	goto	l5280
  7971  03C9                     l5270:	
  7972  03C9  3001               	movlw	1
  7973  03CA                     u3455:	
  7974  03CA  35C1               	lslf	___ftadd@f2,f
  7975  03CB  0DC2               	rlf	___ftadd@f2+1,f
  7976  03CC  0DC3               	rlf	___ftadd@f2+2,f
  7977  03CD  0B89               	decfsz	9,f
  7978  03CE  2BCA               	goto	u3455
  7979  03CF  3001               	movlw	1
  7980  03D0  02C9               	subwf	___ftadd@exp2,f
  7981  03D1  0849               	movf	___ftadd@exp2,w
  7982  03D2  064A               	xorwf	___ftadd@exp1,w
  7983  03D3  1903               	skipnz
  7984  03D4  2BE6               	goto	l5278
  7985  03D5  3001               	movlw	1
  7986  03D6  02C8               	subwf	___ftadd@sign,f
  7987  03D7  0848               	movf	___ftadd@sign,w
  7988  03D8  3907               	andlw	7
  7989  03D9  1903               	btfsc	3,2
  7990  03DA  2BE6               	goto	l5278
  7991  03DB  2BC9               	goto	l5270
  7992  03DC                     l5276:	
  7993  03DC  3001               	movlw	1
  7994  03DD                     u3485:	
  7995  03DD  36C0               	lsrf	___ftadd@f1+2,f
  7996  03DE  0CBF               	rrf	___ftadd@f1+1,f
  7997  03DF  0CBE               	rrf	___ftadd@f1,f
  7998  03E0  0B89               	decfsz	9,f
  7999  03E1  2BDD               	goto	u3485
  8000  03E2  3001               	movlw	1
  8001  03E3  00C4               	movwf	??___ftadd
  8002  03E4  0844               	movf	??___ftadd,w
  8003  03E5  07CA               	addwf	___ftadd@exp1,f
  8004  03E6                     l5278:	
  8005  03E6  084A               	movf	___ftadd@exp1,w
  8006  03E7  0649               	xorwf	___ftadd@exp2,w
  8007  03E8  1903               	btfsc	3,2
  8008  03E9  2C10               	goto	l2971
  8009  03EA  2BDC               	goto	l5276
  8010  03EB                     l5280:	
  8011  03EB  084A               	movf	___ftadd@exp1,w
  8012  03EC  0249               	subwf	___ftadd@exp2,w
  8013  03ED  1803               	skipnc
  8014  03EE  2C10               	goto	l2971
  8015  03EF                     l5282:	
  8016  03EF  3001               	movlw	1
  8017  03F0                     u3515:	
  8018  03F0  35BE               	lslf	___ftadd@f1,f
  8019  03F1  0DBF               	rlf	___ftadd@f1+1,f
  8020  03F2  0DC0               	rlf	___ftadd@f1+2,f
  8021  03F3  0B89               	decfsz	9,f
  8022  03F4  2BF0               	goto	u3515
  8023  03F5  3001               	movlw	1
  8024  03F6  02CA               	subwf	___ftadd@exp1,f
  8025  03F7  0849               	movf	___ftadd@exp2,w
  8026  03F8  064A               	xorwf	___ftadd@exp1,w
  8027  03F9  1903               	skipnz
  8028  03FA  2C0C               	goto	l5290
  8029  03FB  3001               	movlw	1
  8030  03FC  02C8               	subwf	___ftadd@sign,f
  8031  03FD  0848               	movf	___ftadd@sign,w
  8032  03FE  3907               	andlw	7
  8033  03FF  1903               	btfsc	3,2
  8034  0400  2C0C               	goto	l5290
  8035  0401  2BEF               	goto	l5282
  8036  0402                     l5288:	
  8037  0402  3001               	movlw	1
  8038  0403                     u3545:	
  8039  0403  36C3               	lsrf	___ftadd@f2+2,f
  8040  0404  0CC2               	rrf	___ftadd@f2+1,f
  8041  0405  0CC1               	rrf	___ftadd@f2,f
  8042  0406  0B89               	decfsz	9,f
  8043  0407  2C03               	goto	u3545
  8044  0408  3001               	movlw	1
  8045  0409  00C4               	movwf	??___ftadd
  8046  040A  0844               	movf	??___ftadd,w
  8047  040B  07C9               	addwf	___ftadd@exp2,f
  8048  040C                     l5290:	
  8049  040C  084A               	movf	___ftadd@exp1,w
  8050  040D  0649               	xorwf	___ftadd@exp2,w
  8051  040E  1D03               	skipz
  8052  040F  2C02               	goto	l5288
  8053  0410                     l2971:	
  8054  0410  1FC8               	btfss	___ftadd@sign,7
  8055  0411  2C22               	goto	l5294
  8056  0412  30FF               	movlw	255
  8057  0413  06BE               	xorwf	___ftadd@f1,f
  8058  0414  30FF               	movlw	255
  8059  0415  06BF               	xorwf	___ftadd@f1+1,f
  8060  0416  30FF               	movlw	255
  8061  0417  06C0               	xorwf	___ftadd@f1+2,f
  8062  0418  3001               	movlw	1
  8063  0419  07BE               	addwf	___ftadd@f1,f
  8064  041A  3000               	movlw	0
  8065  041B  1803               	skipnc
  8066  041C  3001               	movlw	1
  8067  041D  07BF               	addwf	___ftadd@f1+1,f
  8068  041E  3000               	movlw	0
  8069  041F  1803               	skipnc
  8070  0420  3001               	movlw	1
  8071  0421  07C0               	addwf	___ftadd@f1+2,f
  8072  0422                     l5294:	
  8073  0422  1F48               	btfss	___ftadd@sign,6
  8074  0423  2C34               	goto	l5298
  8075  0424  30FF               	movlw	255
  8076  0425  06C1               	xorwf	___ftadd@f2,f
  8077  0426  30FF               	movlw	255
  8078  0427  06C2               	xorwf	___ftadd@f2+1,f
  8079  0428  30FF               	movlw	255
  8080  0429  06C3               	xorwf	___ftadd@f2+2,f
  8081  042A  3001               	movlw	1
  8082  042B  07C1               	addwf	___ftadd@f2,f
  8083  042C  3000               	movlw	0
  8084  042D  1803               	skipnc
  8085  042E  3001               	movlw	1
  8086  042F  07C2               	addwf	___ftadd@f2+1,f
  8087  0430  3000               	movlw	0
  8088  0431  1803               	skipnc
  8089  0432  3001               	movlw	1
  8090  0433  07C3               	addwf	___ftadd@f2+2,f
  8091  0434                     l5298:	
  8092  0434  01C8               	clrf	___ftadd@sign
  8093  0435  083E               	movf	___ftadd@f1,w
  8094  0436  07C1               	addwf	___ftadd@f2,f
  8095  0437  083F               	movf	___ftadd@f1+1,w
  8096  0438  3DC2               	addwfc	___ftadd@f2+1,f
  8097  0439  0840               	movf	___ftadd@f1+2,w
  8098  043A  3DC3               	addwfc	___ftadd@f2+2,f
  8099  043B  1FC3               	btfss	___ftadd@f2+2,7
  8100  043C  2C4F               	goto	l5308
  8101  043D  30FF               	movlw	255
  8102  043E  06C1               	xorwf	___ftadd@f2,f
  8103  043F  30FF               	movlw	255
  8104  0440  06C2               	xorwf	___ftadd@f2+1,f
  8105  0441  30FF               	movlw	255
  8106  0442  06C3               	xorwf	___ftadd@f2+2,f
  8107  0443  3001               	movlw	1
  8108  0444  07C1               	addwf	___ftadd@f2,f
  8109  0445  3000               	movlw	0
  8110  0446  1803               	skipnc
  8111  0447  3001               	movlw	1
  8112  0448  07C2               	addwf	___ftadd@f2+1,f
  8113  0449  3000               	movlw	0
  8114  044A  1803               	skipnc
  8115  044B  3001               	movlw	1
  8116  044C  07C3               	addwf	___ftadd@f2+2,f
  8117  044D  01C8               	clrf	___ftadd@sign
  8118  044E  0AC8               	incf	___ftadd@sign,f
  8119  044F                     l5308:	
  8120  044F  0841               	movf	___ftadd@f2,w
  8121  0450  00A0               	movwf	___ftpack@arg
  8122  0451  0842               	movf	___ftadd@f2+1,w
  8123  0452  00A1               	movwf	___ftpack@arg+1
  8124  0453  0843               	movf	___ftadd@f2+2,w
  8125  0454  00A2               	movwf	___ftpack@arg+2
  8126  0455  084A               	movf	___ftadd@exp1,w
  8127  0456  00C4               	movwf	??___ftadd
  8128  0457  0844               	movf	??___ftadd,w
  8129  0458  00A3               	movwf	___ftpack@exp
  8130  0459  0848               	movf	___ftadd@sign,w
  8131  045A  00C5               	movwf	??___ftadd+1
  8132  045B  0845               	movf	??___ftadd+1,w
  8133  045C  00A4               	movwf	___ftpack@sign
  8134  045D  3189  212B         	fcall	___ftpack
  8135  045F  0020               	movlb	0	; select bank0
  8136  0460  0820               	movf	?___ftpack,w
  8137  0461  00BE               	movwf	?___ftadd
  8138  0462  0821               	movf	?___ftpack+1,w
  8139  0463  00BF               	movwf	?___ftadd+1
  8140  0464  0822               	movf	?___ftpack+2,w
  8141  0465  00C0               	movwf	?___ftadd+2
  8142  0466  0008               	return
  8143  0467                     __end_of___ftadd:	
  8144                           
  8145                           	psect	text32
  8146  1322                     __ptext32:	
  8147 ;; *************** function _RF_RxDisable *****************
  8148 ;; Defined at:
  8149 ;;		line 194 in file "../src/RF_Control_B1.c"
  8150 ;; Parameters:    Size  Location     Type
  8151 ;;  rf              1    wreg     unsigned char 
  8152 ;; Auto vars:     Size  Location     Type
  8153 ;;  rf              1    4[BANK0 ] unsigned char 
  8154 ;; Return value:  Size  Location     Type
  8155 ;;		None               void
  8156 ;; Registers used:
  8157 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8158 ;; Tracked objects:
  8159 ;;		On entry : 0/0
  8160 ;;		On exit  : 0/0
  8161 ;;		Unchanged: 0/0
  8162 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8163 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8164 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8165 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8166 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8167 ;;Total ram usage:        1 bytes
  8168 ;; Hardware stack levels used:    1
  8169 ;; Hardware stack levels required when called:    7
  8170 ;; This function calls:
  8171 ;;		_CC2500_WriteCommand
  8172 ;;		_RfPointSelect
  8173 ;;		_setINT_GO
  8174 ;; This function is called by:
  8175 ;;		_setRF_Main
  8176 ;; This function uses a non-reentrant model
  8177 ;;
  8178                           
  8179                           
  8180                           ;psect for function _RF_RxDisable
  8181  1322                     _RF_RxDisable:	
  8182                           
  8183                           ;incstack = 0
  8184                           ; Regs used in _RF_RxDisable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8185                           ;RF_RxDisable@rf stored from wreg
  8186  1322  0020               	movlb	0	; select bank0
  8187  1323  00A4               	movwf	RF_RxDisable@rf
  8188                           
  8189                           ;RF_Control_B1.c: 195: RfPointSelect(rf);
  8190  1324  0824               	movf	RF_RxDisable@rf,w
  8191  1325  319E  267E  3193   	fcall	_RfPointSelect
  8192                           
  8193                           ;RF_Control_B1.c: 197: if (RF->ReceiveGO == 1 || RF->RxStatus == 1) {
  8194  1328  0021               	movlb	1	; select bank1
  8195  1329  083E               	movf	_RF^(0+128),w
  8196  132A  0086               	movwf	6
  8197  132B  0187               	clrf	7
  8198  132C  1881               	btfsc	1,1
  8199  132D  2B33               	goto	l6160
  8200  132E  083E               	movf	_RF^(0+128),w
  8201  132F  0086               	movwf	6
  8202  1330  0187               	clrf	7
  8203  1331  1D81               	btfss	1,3
  8204  1332  0008               	return
  8205  1333                     l6160:	
  8206                           
  8207                           ;RF_Control_B1.c: 198: if (RF->ReceiveGO == 1) {
  8208  1333  083E               	movf	_RF^(0+128),w
  8209  1334  0086               	movwf	6
  8210  1335  0187               	clrf	7
  8211  1336  1C81               	btfss	1,1
  8212  1337  2B3C               	goto	l6164
  8213                           
  8214                           ;RF_Control_B1.c: 199: CC2500_WriteCommand(0x3A);
  8215  1338  303A               	movlw	58
  8216  1339  319F  271D  3193   	fcall	_CC2500_WriteCommand
  8217  133C                     l6164:	
  8218                           
  8219                           ;RF_Control_B1.c: 200: }
  8220                           ;RF_Control_B1.c: 201: RF->RxStatus = 0;
  8221  133C  0021               	movlb	1	; select bank1
  8222  133D  083E               	movf	_RF^(0+128),w
  8223  133E  0086               	movwf	6
  8224  133F  0187               	clrf	7
  8225  1340  1181               	bcf	1,3
  8226                           
  8227                           ;RF_Control_B1.c: 202: RF->ReceiveGO = 0;
  8228  1341  083E               	movf	_RF^(0+128),w
  8229  1342  0086               	movwf	6
  8230  1343  0187               	clrf	7
  8231  1344  1081               	bcf	1,1
  8232                           
  8233                           ;RF_Control_B1.c: 203: CC2500_WriteCommand(0x36);
  8234  1345  3036               	movlw	54
  8235  1346  319F  271D  3193   	fcall	_CC2500_WriteCommand
  8236                           
  8237                           ;RF_Control_B1.c: 204: setINT_GO(0);
  8238  1349  3000               	movlw	0
  8239  134A  319E  2632         	fcall	_setINT_GO
  8240  134C  0008               	return
  8241  134D                     __end_of_RF_RxDisable:	
  8242                           
  8243                           	psect	text33
  8244  1E32                     __ptext33:	
  8245 ;; *************** function _setINT_GO *****************
  8246 ;; Defined at:
  8247 ;;		line 260 in file "../src/MCU_B1.c"
  8248 ;; Parameters:    Size  Location     Type
  8249 ;;  command         1    wreg     unsigned char 
  8250 ;; Auto vars:     Size  Location     Type
  8251 ;;  command         1    0[BANK0 ] unsigned char 
  8252 ;; Return value:  Size  Location     Type
  8253 ;;		None               void
  8254 ;; Registers used:
  8255 ;;		wreg
  8256 ;; Tracked objects:
  8257 ;;		On entry : 0/0
  8258 ;;		On exit  : 0/0
  8259 ;;		Unchanged: 0/0
  8260 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8261 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8262 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8263 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8264 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8265 ;;Total ram usage:        1 bytes
  8266 ;; Hardware stack levels used:    1
  8267 ;; Hardware stack levels required when called:    5
  8268 ;; This function calls:
  8269 ;;		Nothing
  8270 ;; This function is called by:
  8271 ;;		_setRF_Main
  8272 ;;		_setRF_Enable
  8273 ;;		_RF_RxDisable
  8274 ;; This function uses a non-reentrant model
  8275 ;;
  8276                           
  8277                           
  8278                           ;psect for function _setINT_GO
  8279  1E32                     _setINT_GO:	
  8280                           
  8281                           ;incstack = 0
  8282                           ; Regs used in _setINT_GO: [wreg]
  8283                           ;setINT_GO@command stored from wreg
  8284  1E32  0020               	movlb	0	; select bank0
  8285  1E33  00A0               	movwf	setINT_GO@command
  8286                           
  8287                           ;MCU_B1.c: 261: INTF = 0;
  8288  1E34  108B               	bcf	11,1	;volatile
  8289                           
  8290                           ;MCU_B1.c: 262: INTE = command;
  8291  1E35  1C20               	btfss	setINT_GO@command,0
  8292  1E36  2E39               	goto	u4550
  8293  1E37  160B               	bsf	11,4	;volatile
  8294  1E38  0008               	return
  8295  1E39                     u4550:	
  8296  1E39  120B               	bcf	11,4	;volatile
  8297  1E3A  0008               	return
  8298  1E3B                     __end_of_setINT_GO:	
  8299                           
  8300                           	psect	text34
  8301  155C                     __ptext34:	
  8302 ;; *************** function _CC2500_TxData *****************
  8303 ;; Defined at:
  8304 ;;		line 32 in file "../src/CC2500_B1.c"
  8305 ;; Parameters:    Size  Location     Type
  8306 ;;		None
  8307 ;; Auto vars:     Size  Location     Type
  8308 ;;  loop_e          1    5[BANK0 ] unsigned char 
  8309 ;; Return value:  Size  Location     Type
  8310 ;;		None               void
  8311 ;; Registers used:
  8312 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8313 ;; Tracked objects:
  8314 ;;		On entry : 0/0
  8315 ;;		On exit  : 0/0
  8316 ;;		Unchanged: 0/0
  8317 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8318 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8319 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8320 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8321 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8322 ;;Total ram usage:        2 bytes
  8323 ;; Hardware stack levels used:    1
  8324 ;; Hardware stack levels required when called:    7
  8325 ;; This function calls:
  8326 ;;		_CC2500_WriteByte
  8327 ;;		_CC2500_WriteCommand
  8328 ;; This function is called by:
  8329 ;;		_setRF_Main
  8330 ;; This function uses a non-reentrant model
  8331 ;;
  8332                           
  8333                           
  8334                           ;psect for function _CC2500_TxData
  8335  155C                     _CC2500_TxData:	
  8336                           
  8337                           ;CC2500_B1.c: 33: unsigned char loop_e;
  8338                           ;CC2500_B1.c: 35: RC4 = 0;
  8339                           
  8340                           ;incstack = 0
  8341                           ; Regs used in _CC2500_TxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8342  155C  0020               	movlb	0	; select bank0
  8343  155D  120E               	bcf	14,4	;volatile
  8344                           
  8345                           ;CC2500_B1.c: 36: SPI0Buffer = 0x3F + 0x40;
  8346  155E  307F               	movlw	127
  8347  155F  00A4               	movwf	??_CC2500_TxData
  8348  1560  0824               	movf	??_CC2500_TxData,w
  8349  1561  0021               	movlb	1	; select bank1
  8350  1562  00C2               	movwf	_SPI0Buffer^(0+128)
  8351  1563                     l272:	
  8352                           ;CC2500_B1.c: 37: while (RC2 == 1);
  8353                           
  8354  1563  0020               	movlb	0	; select bank0
  8355  1564  190E               	btfsc	14,2	;volatile
  8356  1565  2D63               	goto	l272
  8357                           
  8358                           ;CC2500_B1.c: 38: CC2500_WriteByte();
  8359  1566  3190  20FA  3195   	fcall	_CC2500_WriteByte
  8360                           
  8361                           ;CC2500_B1.c: 39: SPI0Buffer = Tx_Length;
  8362  1569  0021               	movlb	1	; select bank1
  8363  156A  0843               	movf	_Tx_Length^(0+128),w
  8364  156B  0020               	movlb	0	; select bank0
  8365  156C  00A4               	movwf	??_CC2500_TxData
  8366  156D  0824               	movf	??_CC2500_TxData,w
  8367  156E  0021               	movlb	1	; select bank1
  8368  156F  00C2               	movwf	_SPI0Buffer^(0+128)
  8369                           
  8370                           ;CC2500_B1.c: 40: CC2500_WriteByte();
  8371  1570  3190  20FA  3195   	fcall	_CC2500_WriteByte
  8372                           
  8373                           ;CC2500_B1.c: 41: for (loop_e = 0; loop_e < Tx_Length; loop_e++) {
  8374  1573  0020               	movlb	0	; select bank0
  8375  1574  01A5               	clrf	CC2500_TxData@loop_e
  8376  1575                     l5968:	
  8377  1575  0021               	movlb	1	; select bank1
  8378  1576  0843               	movf	_Tx_Length^(0+128),w
  8379  1577  0020               	movlb	0	; select bank0
  8380  1578  0225               	subwf	CC2500_TxData@loop_e,w
  8381  1579  1803               	btfsc	3,0
  8382  157A  2D8D               	goto	l277
  8383                           
  8384                           ;CC2500_B1.c: 42: SPI0Buffer = RF_Data[loop_e];
  8385  157B  0825               	movf	CC2500_TxData@loop_e,w
  8386  157C  3EA0               	addlw	_RF_Data& (0+255)
  8387  157D  0086               	movwf	6
  8388  157E  0187               	clrf	7
  8389  157F  0801               	movf	1,w
  8390  1580  00A4               	movwf	??_CC2500_TxData
  8391  1581  0824               	movf	??_CC2500_TxData,w
  8392  1582  0021               	movlb	1	; select bank1
  8393  1583  00C2               	movwf	_SPI0Buffer^(0+128)
  8394                           
  8395                           ;CC2500_B1.c: 43: CC2500_WriteByte();
  8396  1584  3190  20FA  3195   	fcall	_CC2500_WriteByte
  8397  1587  3001               	movlw	1
  8398  1588  0020               	movlb	0	; select bank0
  8399  1589  00A4               	movwf	??_CC2500_TxData
  8400  158A  0824               	movf	??_CC2500_TxData,w
  8401  158B  07A5               	addwf	CC2500_TxData@loop_e,f
  8402  158C  2D75               	goto	l5968
  8403  158D                     l277:	
  8404                           
  8405                           ;CC2500_B1.c: 44: }
  8406                           ;CC2500_B1.c: 45: RC4 = 1;
  8407  158D  160E               	bsf	14,4	;volatile
  8408                           
  8409                           ;CC2500_B1.c: 46: CC2500_WriteCommand(0x35);
  8410  158E  3035               	movlw	53
  8411  158F  319F  271D  3195   	fcall	_CC2500_WriteCommand
  8412  1592                     l278:	
  8413                           ;CC2500_B1.c: 47: while (RB0 == 0);
  8414                           
  8415  1592  0020               	movlb	0	; select bank0
  8416  1593  1C0D               	btfss	13,0	;volatile
  8417  1594  2D92               	goto	l278
  8418  1595                     l281:	
  8419                           ;CC2500_B1.c: 48: while (RB0 == 1);
  8420                           
  8421  1595  180D               	btfsc	13,0	;volatile
  8422  1596  2D95               	goto	l281
  8423                           
  8424                           ;CC2500_B1.c: 49: CC2500_WriteCommand(0x36);
  8425  1597  3036               	movlw	54
  8426  1598  319F  271D  3195   	fcall	_CC2500_WriteCommand
  8427                           
  8428                           ;CC2500_B1.c: 50: CC2500_WriteCommand(0x3B);
  8429  159B  303B               	movlw	59
  8430  159C  319F  271D         	fcall	_CC2500_WriteCommand
  8431                           
  8432                           ;CC2500_B1.c: 51: Transceive_OK = 1;
  8433  159E  14FC               	bsf	_Transceive_OK/(0+8),_Transceive_OK& (0+7)
  8434  159F  0008               	return
  8435  15A0                     __end_of_CC2500_TxData:	
  8436                           
  8437                           	psect	text35
  8438  08CD                     __ptext35:	
  8439 ;; *************** function _CC2500_RxData *****************
  8440 ;; Defined at:
  8441 ;;		line 57 in file "../src/CC2500_B1.c"
  8442 ;; Parameters:    Size  Location     Type
  8443 ;;		None
  8444 ;; Auto vars:     Size  Location     Type
  8445 ;;  loop_f          1    5[BANK0 ] unsigned char 
  8446 ;; Return value:  Size  Location     Type
  8447 ;;		None               void
  8448 ;; Registers used:
  8449 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8450 ;; Tracked objects:
  8451 ;;		On entry : 0/0
  8452 ;;		On exit  : 0/0
  8453 ;;		Unchanged: 0/0
  8454 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8455 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8456 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8457 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8458 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8459 ;;Total ram usage:        2 bytes
  8460 ;; Hardware stack levels used:    1
  8461 ;; Hardware stack levels required when called:    7
  8462 ;; This function calls:
  8463 ;;		_CC2500_ReadByte
  8464 ;;		_CC2500_ReadStatus
  8465 ;;		_CC2500_WriteByte
  8466 ;;		_CC2500_WriteCommand
  8467 ;; This function is called by:
  8468 ;;		_setRF_Main
  8469 ;; This function uses a non-reentrant model
  8470 ;;
  8471                           
  8472                           
  8473                           ;psect for function _CC2500_RxData
  8474  08CD                     _CC2500_RxData:	
  8475                           
  8476                           ;CC2500_B1.c: 58: unsigned char loop_f;
  8477                           ;CC2500_B1.c: 62: if (RB0 == 1)
  8478                           
  8479                           ;incstack = 0
  8480                           ; Regs used in _CC2500_RxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8481  08CD  0020               	movlb	0	; select bank0
  8482  08CE  180D               	btfsc	13,0	;volatile
  8483  08CF                     l288:	
  8484                           ;CC2500_B1.c: 63: {
  8485                           ;CC2500_B1.c: 64: while (RB0 == 1);
  8486                           
  8487  08CF  180D               	btfsc	13,0	;volatile
  8488  08D0  28CF               	goto	l288
  8489                           
  8490                           ;CC2500_B1.c: 65: }
  8491                           ;CC2500_B1.c: 66: CC2500_ReadStatus(0x3B);
  8492  08D1  303B               	movlw	59
  8493  08D2  3191  2179  3188   	fcall	_CC2500_ReadStatus
  8494                           
  8495                           ;CC2500_B1.c: 67: if (s_data != 0)
  8496  08D5  0021               	movlb	1	; select bank1
  8497  08D6  0846               	movf	_s_data^(0+128),w
  8498  08D7  1903               	btfsc	3,2
  8499  08D8  2923               	goto	l6014
  8500                           
  8501                           ;CC2500_B1.c: 69: {
  8502                           ;CC2500_B1.c: 70: RC4 = 0;
  8503  08D9  0020               	movlb	0	; select bank0
  8504  08DA  120E               	bcf	14,4	;volatile
  8505                           
  8506                           ;CC2500_B1.c: 71: SPI0Buffer = 0x3F + 0xC0;
  8507  08DB  30FF               	movlw	255
  8508  08DC  00A4               	movwf	??_CC2500_RxData
  8509  08DD  0824               	movf	??_CC2500_RxData,w
  8510  08DE  0021               	movlb	1	; select bank1
  8511  08DF  00C2               	movwf	_SPI0Buffer^(0+128)
  8512  08E0                     l292:	
  8513                           ;CC2500_B1.c: 72: while (RC2 == 1);
  8514                           
  8515  08E0  0020               	movlb	0	; select bank0
  8516  08E1  190E               	btfsc	14,2	;volatile
  8517  08E2  28E0               	goto	l292
  8518                           
  8519                           ;CC2500_B1.c: 73: CC2500_WriteByte();
  8520  08E3  3190  20FA  3188   	fcall	_CC2500_WriteByte
  8521                           
  8522                           ;CC2500_B1.c: 75: CC2500_ReadByte();
  8523  08E6  3191  21CC  3188   	fcall	_CC2500_ReadByte
  8524                           
  8525                           ;CC2500_B1.c: 76: Rx_Length = SPI0Buffer;
  8526  08E9  0021               	movlb	1	; select bank1
  8527  08EA  0842               	movf	_SPI0Buffer^(0+128),w
  8528  08EB  0020               	movlb	0	; select bank0
  8529  08EC  00A4               	movwf	??_CC2500_RxData
  8530  08ED  0824               	movf	??_CC2500_RxData,w
  8531  08EE  0021               	movlb	1	; select bank1
  8532  08EF  00C1               	movwf	_Rx_Length^(0+128)
  8533                           
  8534                           ;CC2500_B1.c: 77: for (loop_f = 0; loop_f < Rx_Length; loop_f++) {
  8535  08F0  0020               	movlb	0	; select bank0
  8536  08F1  01A5               	clrf	CC2500_RxData@loop_f
  8537  08F2                     l6000:	
  8538  08F2  0021               	movlb	1	; select bank1
  8539  08F3  0841               	movf	_Rx_Length^(0+128),w
  8540  08F4  0020               	movlb	0	; select bank0
  8541  08F5  0225               	subwf	CC2500_RxData@loop_f,w
  8542  08F6  1803               	btfsc	3,0
  8543  08F7  290A               	goto	l6002
  8544                           
  8545                           ;CC2500_B1.c: 78: CC2500_ReadByte();
  8546  08F8  3191  21CC  3188   	fcall	_CC2500_ReadByte
  8547                           
  8548                           ;CC2500_B1.c: 79: RF_Data[loop_f] = SPI0Buffer;
  8549  08FB  0021               	movlb	1	; select bank1
  8550  08FC  0842               	movf	_SPI0Buffer^(0+128),w
  8551  08FD  0020               	movlb	0	; select bank0
  8552  08FE  00A4               	movwf	??_CC2500_RxData
  8553  08FF  0825               	movf	CC2500_RxData@loop_f,w
  8554  0900  3EA0               	addlw	_RF_Data& (0+255)
  8555  0901  0086               	movwf	6
  8556  0902  0187               	clrf	7
  8557  0903  0824               	movf	??_CC2500_RxData,w
  8558  0904  0081               	movwf	1
  8559  0905  3001               	movlw	1
  8560  0906  00A4               	movwf	??_CC2500_RxData
  8561  0907  0824               	movf	??_CC2500_RxData,w
  8562  0908  07A5               	addwf	CC2500_RxData@loop_f,f
  8563  0909  28F2               	goto	l6000
  8564  090A                     l6002:	
  8565                           
  8566                           ;CC2500_B1.c: 80: }
  8567                           ;CC2500_B1.c: 81: CC2500_ReadByte();
  8568  090A  3191  21CC  3188   	fcall	_CC2500_ReadByte
  8569                           
  8570                           ;CC2500_B1.c: 82: RSSI = SPI0Buffer;
  8571  090D  0021               	movlb	1	; select bank1
  8572  090E  0842               	movf	_SPI0Buffer^(0+128),w
  8573  090F  0020               	movlb	0	; select bank0
  8574  0910  00A4               	movwf	??_CC2500_RxData
  8575  0911  0824               	movf	??_CC2500_RxData,w
  8576  0912  0021               	movlb	1	; select bank1
  8577  0913  00C0               	movwf	_RSSI^(0+128)
  8578                           
  8579                           ;CC2500_B1.c: 83: CC2500_ReadByte();
  8580  0914  3191  21CC  3188   	fcall	_CC2500_ReadByte
  8581                           
  8582                           ;CC2500_B1.c: 84: CRC = SPI0Buffer;
  8583  0917  0021               	movlb	1	; select bank1
  8584  0918  0842               	movf	_SPI0Buffer^(0+128),w
  8585  0919  0020               	movlb	0	; select bank0
  8586  091A  00A4               	movwf	??_CC2500_RxData
  8587  091B  0824               	movf	??_CC2500_RxData,w
  8588  091C  0021               	movlb	1	; select bank1
  8589  091D  00B7               	movwf	_CRC^(0+128)
  8590                           
  8591                           ;CC2500_B1.c: 85: RC4 = 1;
  8592  091E  0020               	movlb	0	; select bank0
  8593  091F  160E               	bsf	14,4	;volatile
  8594                           
  8595                           ;CC2500_B1.c: 86: if (CRC & 0x80)
  8596  0920  0021               	movlb	1	; select bank1
  8597  0921  1BB7               	btfsc	_CRC^(0+128),7
  8598                           
  8599                           ;CC2500_B1.c: 87: Receive_OK = 1;
  8600  0922  147C               	bsf	_Receive_OK/(0+8),_Receive_OK& (0+7)
  8601  0923                     l6014:	
  8602                           
  8603                           ;CC2500_B1.c: 88: }
  8604                           ;CC2500_B1.c: 89: CC2500_WriteCommand(0x36);
  8605  0923  3036               	movlw	54
  8606  0924  319F  271D  3188   	fcall	_CC2500_WriteCommand
  8607                           
  8608                           ;CC2500_B1.c: 90: CC2500_WriteCommand(0x3A);
  8609  0927  303A               	movlw	58
  8610  0928  319F  271D         	fcall	_CC2500_WriteCommand
  8611  092A  0008               	return
  8612  092B                     __end_of_CC2500_RxData:	
  8613                           
  8614                           	psect	text36
  8615  1179                     __ptext36:	
  8616 ;; *************** function _CC2500_ReadStatus *****************
  8617 ;; Defined at:
  8618 ;;		line 262 in file "../src/CC2500_B1.c"
  8619 ;; Parameters:    Size  Location     Type
  8620 ;;  status_addr     1    wreg     unsigned char 
  8621 ;; Auto vars:     Size  Location     Type
  8622 ;;  status_addr     1    3[BANK0 ] unsigned char 
  8623 ;; Return value:  Size  Location     Type
  8624 ;;		None               void
  8625 ;; Registers used:
  8626 ;;		wreg, status,2, status,0, pclath, cstack
  8627 ;; Tracked objects:
  8628 ;;		On entry : 0/0
  8629 ;;		On exit  : 0/0
  8630 ;;		Unchanged: 0/0
  8631 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8632 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8633 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8634 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8635 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8636 ;;Total ram usage:        2 bytes
  8637 ;; Hardware stack levels used:    1
  8638 ;; Hardware stack levels required when called:    6
  8639 ;; This function calls:
  8640 ;;		_CC2500_ReadByte
  8641 ;;		_CC2500_WriteByte
  8642 ;; This function is called by:
  8643 ;;		_CC2500_RxData
  8644 ;; This function uses a non-reentrant model
  8645 ;;
  8646                           
  8647                           
  8648                           ;psect for function _CC2500_ReadStatus
  8649  1179                     _CC2500_ReadStatus:	
  8650                           
  8651                           ;incstack = 0
  8652                           ; Regs used in _CC2500_ReadStatus: [wreg+status,2+status,0+pclath+cstack]
  8653                           ;CC2500_ReadStatus@status_addr stored from wreg
  8654  1179  0020               	movlb	0	; select bank0
  8655  117A  00A3               	movwf	CC2500_ReadStatus@status_addr
  8656                           
  8657                           ;CC2500_B1.c: 263: RC4 = 0;
  8658  117B  120E               	bcf	14,4	;volatile
  8659                           
  8660                           ;CC2500_B1.c: 264: SPI0Buffer = status_addr + 0xC0;
  8661  117C  0823               	movf	CC2500_ReadStatus@status_addr,w
  8662  117D  3EC0               	addlw	192
  8663  117E  00A2               	movwf	??_CC2500_ReadStatus
  8664  117F  0822               	movf	??_CC2500_ReadStatus,w
  8665  1180  0021               	movlb	1	; select bank1
  8666  1181  00C2               	movwf	_SPI0Buffer^(0+128)
  8667  1182                     l368:	
  8668                           ;CC2500_B1.c: 266: while (RC2 == 1);
  8669                           
  8670  1182  0020               	movlb	0	; select bank0
  8671  1183  190E               	btfsc	14,2	;volatile
  8672  1184  2982               	goto	l368
  8673                           
  8674                           ;CC2500_B1.c: 268: CC2500_WriteByte();
  8675  1185  3190  20FA  3191   	fcall	_CC2500_WriteByte
  8676                           
  8677                           ;CC2500_B1.c: 269: CC2500_ReadByte();
  8678  1188  3191  21CC         	fcall	_CC2500_ReadByte
  8679                           
  8680                           ;CC2500_B1.c: 270: RC4 = 1;
  8681  118A  0020               	movlb	0	; select bank0
  8682  118B  160E               	bsf	14,4	;volatile
  8683                           
  8684                           ;CC2500_B1.c: 272: s_data = SPI0Buffer;
  8685  118C  0021               	movlb	1	; select bank1
  8686  118D  0842               	movf	_SPI0Buffer^(0+128),w
  8687  118E  0020               	movlb	0	; select bank0
  8688  118F  00A2               	movwf	??_CC2500_ReadStatus
  8689  1190  0822               	movf	??_CC2500_ReadStatus,w
  8690  1191  0021               	movlb	1	; select bank1
  8691  1192  00C6               	movwf	_s_data^(0+128)
  8692  1193  0008               	return
  8693  1194                     __end_of_CC2500_ReadStatus:	
  8694                           
  8695                           	psect	text37
  8696  11CC                     __ptext37:	
  8697 ;; *************** function _CC2500_ReadByte *****************
  8698 ;; Defined at:
  8699 ;;		line 206 in file "../src/CC2500_B1.c"
  8700 ;; Parameters:    Size  Location     Type
  8701 ;;		None
  8702 ;; Auto vars:     Size  Location     Type
  8703 ;;  loop_b          1    1[BANK0 ] unsigned char 
  8704 ;; Return value:  Size  Location     Type
  8705 ;;		None               void
  8706 ;; Registers used:
  8707 ;;		wreg, status,2, status,0
  8708 ;; Tracked objects:
  8709 ;;		On entry : 0/0
  8710 ;;		On exit  : 0/0
  8711 ;;		Unchanged: 0/0
  8712 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8713 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8714 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8715 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8716 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8717 ;;Total ram usage:        2 bytes
  8718 ;; Hardware stack levels used:    1
  8719 ;; Hardware stack levels required when called:    5
  8720 ;; This function calls:
  8721 ;;		Nothing
  8722 ;; This function is called by:
  8723 ;;		_CC2500_RxData
  8724 ;;		_CC2500_ReadStatus
  8725 ;;		_CC2500_ReadREG
  8726 ;; This function uses a non-reentrant model
  8727 ;;
  8728                           
  8729                           
  8730                           ;psect for function _CC2500_ReadByte
  8731  11CC                     _CC2500_ReadByte:	
  8732                           
  8733                           ;CC2500_B1.c: 207: unsigned char loop_b;
  8734                           ;CC2500_B1.c: 208: for (loop_b = 0; loop_b < 8; loop_b++) {
  8735                           
  8736                           ;incstack = 0
  8737                           ; Regs used in _CC2500_ReadByte: [wreg+status,2+status,0]
  8738  11CC  0020               	movlb	0	; select bank0
  8739  11CD  01A1               	clrf	CC2500_ReadByte@loop_b
  8740  11CE                     L11:	
  8741  11CE  3008               	movlw	8
  8742  11CF  0221               	subwf	CC2500_ReadByte@loop_b,w
  8743  11D0  1803               	btfsc	3,0
  8744  11D1  0008               	return
  8745                           
  8746                           ;CC2500_B1.c: 209: RC1 = 1;
  8747  11D2  148E               	bsf	14,1	;volatile
  8748                           
  8749                           ;CC2500_B1.c: 210: SPI0Buffer <<= 1;
  8750  11D3  1003               	clrc
  8751  11D4  0021               	movlb	1	; select bank1
  8752  11D5  0DC2               	rlf	_SPI0Buffer^(0+128),f
  8753                           
  8754                           ;CC2500_B1.c: 211: if (RC2 == 1)
  8755  11D6  0020               	movlb	0	; select bank0
  8756  11D7  1D0E               	btfss	14,2	;volatile
  8757  11D8  29DC               	goto	l5766
  8758                           
  8759                           ;CC2500_B1.c: 212: SPI0Buffer |= 0x01;
  8760  11D9  0021               	movlb	1	; select bank1
  8761  11DA  1442               	bsf	_SPI0Buffer^(0+128),0
  8762  11DB  29E2               	goto	l5768
  8763  11DC                     l5766:	
  8764                           
  8765                           ;CC2500_B1.c: 213: else
  8766                           ;CC2500_B1.c: 214: SPI0Buffer &= 0xFE;
  8767  11DC  30FE               	movlw	254
  8768  11DD  0020               	movlb	0	; select bank0
  8769  11DE  00A0               	movwf	??_CC2500_ReadByte
  8770  11DF  0820               	movf	??_CC2500_ReadByte,w
  8771  11E0  0021               	movlb	1	; select bank1
  8772  11E1  05C2               	andwf	_SPI0Buffer^(0+128),f
  8773  11E2                     l5768:	
  8774                           
  8775                           ;CC2500_B1.c: 215: RC1 = 0;
  8776  11E2  0020               	movlb	0	; select bank0
  8777  11E3  108E               	bcf	14,1	;volatile
  8778  11E4  3001               	movlw	1
  8779  11E5  00A0               	movwf	??_CC2500_ReadByte
  8780  11E6  0820               	movf	??_CC2500_ReadByte,w
  8781  11E7  07A1               	addwf	CC2500_ReadByte@loop_b,f
  8782  11E8  29CE               	goto	L11
  8783  11E9                     __end_of_CC2500_ReadByte:	
  8784                           
  8785                           	psect	text38
  8786  1DDB                     __ptext38:	
  8787 ;; *************** function _RF_Initialization *****************
  8788 ;; Defined at:
  8789 ;;		line 16 in file "../src/RF_Control_B1.c"
  8790 ;; Parameters:    Size  Location     Type
  8791 ;;		None
  8792 ;; Auto vars:     Size  Location     Type
  8793 ;;		None
  8794 ;; Return value:  Size  Location     Type
  8795 ;;		None               void
  8796 ;; Registers used:
  8797 ;;		wreg, status,2, status,0, pclath, cstack
  8798 ;; Tracked objects:
  8799 ;;		On entry : 0/0
  8800 ;;		On exit  : 0/0
  8801 ;;		Unchanged: 0/0
  8802 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8803 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8804 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8805 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8806 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8807 ;;Total ram usage:        0 bytes
  8808 ;; Hardware stack levels used:    1
  8809 ;; Hardware stack levels required when called:    6
  8810 ;; This function calls:
  8811 ;;		_setRF_Initialization
  8812 ;; This function is called by:
  8813 ;;		_main
  8814 ;; This function uses a non-reentrant model
  8815 ;;
  8816                           
  8817                           
  8818                           ;psect for function _RF_Initialization
  8819  1DDB                     _RF_Initialization:	
  8820                           
  8821                           ;RF_Control_B1.c: 18: setRF_Initialization(1);
  8822                           
  8823                           ;incstack = 0
  8824                           ; Regs used in _RF_Initialization: [wreg+status,2+status,0+pclath+cstack]
  8825  1DDB  3001               	movlw	1
  8826  1DDC  319E  2602         	fcall	_setRF_Initialization
  8827  1DDE  0008               	return
  8828  1DDF                     __end_of_RF_Initialization:	
  8829                           
  8830                           	psect	text39
  8831  1E02                     __ptext39:	
  8832 ;; *************** function _setRF_Initialization *****************
  8833 ;; Defined at:
  8834 ;;		line 49 in file "../src/RF_Control_B1.c"
  8835 ;; Parameters:    Size  Location     Type
  8836 ;;  rf              1    wreg     unsigned char 
  8837 ;; Auto vars:     Size  Location     Type
  8838 ;;  rf              1    0[COMMON] unsigned char 
  8839 ;; Return value:  Size  Location     Type
  8840 ;;		None               void
  8841 ;; Registers used:
  8842 ;;		wreg
  8843 ;; Tracked objects:
  8844 ;;		On entry : 0/0
  8845 ;;		On exit  : 0/0
  8846 ;;		Unchanged: 0/0
  8847 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8848 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8849 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8850 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8851 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8852 ;;Total ram usage:        1 bytes
  8853 ;; Hardware stack levels used:    1
  8854 ;; Hardware stack levels required when called:    5
  8855 ;; This function calls:
  8856 ;;		Nothing
  8857 ;; This function is called by:
  8858 ;;		_RF_Initialization
  8859 ;; This function uses a non-reentrant model
  8860 ;;
  8861                           
  8862                           
  8863                           ;psect for function _setRF_Initialization
  8864  1E02                     _setRF_Initialization:	
  8865                           
  8866                           ;RF_Control_B1.c: 52: Tx_Length = 21;
  8867                           
  8868                           ;incstack = 0
  8869                           ; Regs used in _setRF_Initialization: [wreg]
  8870  1E02  3015               	movlw	21
  8871  1E03  0020               	movlb	0	; select bank0
  8872  1E04  00A0               	movwf	??_setRF_Initialization
  8873  1E05  0820               	movf	??_setRF_Initialization,w
  8874  1E06  0021               	movlb	1	; select bank1
  8875  1E07  00C3               	movwf	_Tx_Length^(0+128)
  8876  1E08  0008               	return
  8877  1E09                     __end_of_setRF_Initialization:	
  8878                           
  8879                           	psect	text40
  8880  115E                     __ptext40:	
  8881 ;; *************** function _Mcu_Initialization *****************
  8882 ;; Defined at:
  8883 ;;		line 30 in file "../src/MCU_B1.c"
  8884 ;; Parameters:    Size  Location     Type
  8885 ;;		None
  8886 ;; Auto vars:     Size  Location     Type
  8887 ;;		None
  8888 ;; Return value:  Size  Location     Type
  8889 ;;		None               void
  8890 ;; Registers used:
  8891 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8892 ;; Tracked objects:
  8893 ;;		On entry : 0/0
  8894 ;;		On exit  : 0/0
  8895 ;;		Unchanged: 0/0
  8896 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8897 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8898 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8899 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8900 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8901 ;;Total ram usage:        1 bytes
  8902 ;; Hardware stack levels used:    1
  8903 ;; Hardware stack levels required when called:    6
  8904 ;; This function calls:
  8905 ;;		_ADC_Set
  8906 ;;		_Fosc_Set
  8907 ;;		_INT_Set
  8908 ;;		_IOC_Set
  8909 ;;		_IO_Set
  8910 ;;		_TMR0_Set
  8911 ;;		_WDT_Set
  8912 ;; This function is called by:
  8913 ;;		_main
  8914 ;; This function uses a non-reentrant model
  8915 ;;
  8916                           
  8917                           
  8918                           ;psect for function _Mcu_Initialization
  8919  115E                     _Mcu_Initialization:	
  8920                           
  8921                           ;MCU_B1.c: 32: Fosc_Set();
  8922                           
  8923                           ;incstack = 0
  8924                           ; Regs used in _Mcu_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8925  115E  319D  25D7  3191   	fcall	_Fosc_Set
  8926                           
  8927                           ;MCU_B1.c: 34: IO_Set();
  8928  1161  3191  2145  3191   	fcall	_IO_Set
  8929                           
  8930                           ;MCU_B1.c: 36: TMR0_Set();
  8931  1164  319E  26D5  3191   	fcall	_TMR0_Set
  8932                           
  8933                           ;MCU_B1.c: 38: ;;
  8934                           ;MCU_B1.c: 40: ADC_Set();
  8935  1167  319D  25FB  3191   	fcall	_ADC_Set
  8936                           
  8937                           ;MCU_B1.c: 44: INT_Set();
  8938  116A  319D  25E8  3191   	fcall	_INT_Set
  8939                           
  8940                           ;MCU_B1.c: 46: IOC_Set();
  8941  116D  319E  26C8  3191   	fcall	_IOC_Set
  8942                           
  8943                           ;MCU_B1.c: 48: ;;
  8944                           ;MCU_B1.c: 50: ;;
  8945                           ;MCU_B1.c: 52: Memory=&VarMemory;
  8946  1170  3020               	movlw	_VarMemory& (0+255)
  8947  1171  0020               	movlb	0	; select bank0
  8948  1172  00A1               	movwf	??_Mcu_Initialization
  8949  1173  0821               	movf	??_Mcu_Initialization,w
  8950  1174  0021               	movlb	1	; select bank1
  8951  1175  00EC               	movwf	_Memory^(0+128)
  8952                           
  8953                           ;MCU_B1.c: 54: WDT_Set();
  8954  1176  3190  20E2         	fcall	_WDT_Set
  8955  1178  0008               	return
  8956  1179                     __end_of_Mcu_Initialization:	
  8957                           
  8958                           	psect	text41
  8959  10E2                     __ptext41:	
  8960 ;; *************** function _WDT_Set *****************
  8961 ;; Defined at:
  8962 ;;		line 901 in file "../src/MCU_B1.c"
  8963 ;; Parameters:    Size  Location     Type
  8964 ;;		None
  8965 ;; Auto vars:     Size  Location     Type
  8966 ;;		None
  8967 ;; Return value:  Size  Location     Type
  8968 ;;		None               void
  8969 ;; Registers used:
  8970 ;;		wreg, fsr1l, fsr1h
  8971 ;; Tracked objects:
  8972 ;;		On entry : 0/0
  8973 ;;		On exit  : 0/0
  8974 ;;		Unchanged: 0/0
  8975 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8976 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8977 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8978 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8979 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8980 ;;Total ram usage:        1 bytes
  8981 ;; Hardware stack levels used:    1
  8982 ;; Hardware stack levels required when called:    5
  8983 ;; This function calls:
  8984 ;;		Nothing
  8985 ;; This function is called by:
  8986 ;;		_Mcu_Initialization
  8987 ;; This function uses a non-reentrant model
  8988 ;;
  8989                           
  8990                           
  8991                           ;psect for function _WDT_Set
  8992  10E2                     _WDT_Set:	
  8993                           
  8994                           ;MCU_B1.c: 902: WDTCON = 0b00010111;;
  8995                           
  8996                           ;incstack = 0
  8997                           ; Regs used in _WDT_Set: [wregfsr1]
  8998  10E2  3017               	movlw	23
  8999  10E3  0021               	movlb	1	; select bank1
  9000  10E4  0097               	movwf	23	;volatile
  9001                           
  9002                           ;MCU_B1.c: 903: WDT = &_WDT;
  9003  10E5  30E5               	movlw	__WDT& (0+255)
  9004  10E6  0020               	movlb	0	; select bank0
  9005  10E7  00A0               	movwf	??_WDT_Set
  9006  10E8  0820               	movf	??_WDT_Set,w
  9007  10E9  0021               	movlb	1	; select bank1
  9008  10EA  00EA               	movwf	_WDT^(0+128)
  9009                           
  9010                           ;MCU_B1.c: 904: WDT->Enable = 1;
  9011  10EB  086A               	movf	_WDT^(0+128),w
  9012  10EC  0086               	movwf	6
  9013  10ED  0187               	clrf	7
  9014  10EE  1401               	bsf	1,0
  9015                           
  9016                           ;MCU_B1.c: 905: WDT->Count = 10;
  9017  10EF  300A               	movlw	10
  9018  10F0  0020               	movlb	0	; select bank0
  9019  10F1  00A0               	movwf	??_WDT_Set
  9020  10F2  0021               	movlb	1	; select bank1
  9021  10F3  0A6A               	incf	_WDT^(0+128),w
  9022  10F4  0086               	movwf	6
  9023  10F5  0187               	clrf	7
  9024  10F6  0020               	movlb	0	; select bank0
  9025  10F7  0820               	movf	??_WDT_Set,w
  9026  10F8  0081               	movwf	1
  9027  10F9  0008               	return
  9028  10FA                     __end_of_WDT_Set:	
  9029                           
  9030                           	psect	text42
  9031  1ED5                     __ptext42:	
  9032 ;; *************** function _TMR0_Set *****************
  9033 ;; Defined at:
  9034 ;;		line 128 in file "../src/MCU_B1.c"
  9035 ;; Parameters:    Size  Location     Type
  9036 ;;		None
  9037 ;; Auto vars:     Size  Location     Type
  9038 ;;		None
  9039 ;; Return value:  Size  Location     Type
  9040 ;;		None               void
  9041 ;; Registers used:
  9042 ;;		wreg, status,2
  9043 ;; Tracked objects:
  9044 ;;		On entry : 0/0
  9045 ;;		On exit  : 0/0
  9046 ;;		Unchanged: 0/0
  9047 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9048 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9049 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9050 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9051 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9052 ;;Total ram usage:        1 bytes
  9053 ;; Hardware stack levels used:    1
  9054 ;; Hardware stack levels required when called:    5
  9055 ;; This function calls:
  9056 ;;		Nothing
  9057 ;; This function is called by:
  9058 ;;		_Mcu_Initialization
  9059 ;; This function uses a non-reentrant model
  9060 ;;
  9061                           
  9062                           
  9063                           ;psect for function _TMR0_Set
  9064  1ED5                     _TMR0_Set:	
  9065                           
  9066                           ;MCU_B1.c: 129: Timer0 = &VarTimer0;
  9067                           
  9068                           ;incstack = 0
  9069                           ; Regs used in _TMR0_Set: [wreg+status,2]
  9070  1ED5  305C               	movlw	_VarTimer0& (0+255)
  9071  1ED6  0020               	movlb	0	; select bank0
  9072  1ED7  00A0               	movwf	??_TMR0_Set
  9073  1ED8  0820               	movf	??_TMR0_Set,w
  9074  1ED9  0021               	movlb	1	; select bank1
  9075  1EDA  00E9               	movwf	_Timer0^(0+128)
  9076                           
  9077                           ;MCU_B1.c: 130: OPTION_REG = 0x00;
  9078  1EDB  0195               	clrf	21	;volatile
  9079                           
  9080                           ;MCU_B1.c: 131: TMR0 = (256-190);
  9081  1EDC  3042               	movlw	66
  9082  1EDD  0020               	movlb	0	; select bank0
  9083  1EDE  0095               	movwf	21	;volatile
  9084                           
  9085                           ;MCU_B1.c: 132: TMR0IE = 1;
  9086  1EDF  168B               	bsf	11,5	;volatile
  9087                           
  9088                           ;MCU_B1.c: 133: GIE = 1;
  9089  1EE0  178B               	bsf	11,7	;volatile
  9090  1EE1  0008               	return
  9091  1EE2                     __end_of_TMR0_Set:	
  9092                           
  9093                           	psect	text43
  9094  1145                     __ptext43:	
  9095 ;; *************** function _IO_Set *****************
  9096 ;; Defined at:
  9097 ;;		line 62 in file "../src/MCU_B1.c"
  9098 ;; Parameters:    Size  Location     Type
  9099 ;;		None
  9100 ;; Auto vars:     Size  Location     Type
  9101 ;;		None
  9102 ;; Return value:  Size  Location     Type
  9103 ;;		None               void
  9104 ;; Registers used:
  9105 ;;		wreg, status,2
  9106 ;; Tracked objects:
  9107 ;;		On entry : 0/0
  9108 ;;		On exit  : 0/0
  9109 ;;		Unchanged: 0/0
  9110 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9111 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9112 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9113 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9114 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9115 ;;Total ram usage:        0 bytes
  9116 ;; Hardware stack levels used:    1
  9117 ;; Hardware stack levels required when called:    5
  9118 ;; This function calls:
  9119 ;;		Nothing
  9120 ;; This function is called by:
  9121 ;;		_Mcu_Initialization
  9122 ;; This function uses a non-reentrant model
  9123 ;;
  9124                           
  9125                           
  9126                           ;psect for function _IO_Set
  9127  1145                     _IO_Set:	
  9128                           
  9129                           ;MCU_B1.c: 90: TRISA = 0b01110111;;
  9130                           
  9131                           ;incstack = 0
  9132                           ; Regs used in _IO_Set: [wreg+status,2]
  9133  1145  3077               	movlw	119
  9134  1146  0021               	movlb	1	; select bank1
  9135  1147  008C               	movwf	12	;volatile
  9136                           
  9137                           ;MCU_B1.c: 91: TRISB = 0b00000111;;
  9138  1148  3007               	movlw	7
  9139  1149  008D               	movwf	13	;volatile
  9140                           
  9141                           ;MCU_B1.c: 92: TRISC = 0b00001100;;
  9142  114A  300C               	movlw	12
  9143  114B  008E               	movwf	14	;volatile
  9144                           
  9145                           ;MCU_B1.c: 93: LATA = 0b00000000;;
  9146  114C  0022               	movlb	2	; select bank2
  9147  114D  018C               	clrf	12	;volatile
  9148                           
  9149                           ;MCU_B1.c: 94: LATB = 0b00000010;;
  9150  114E  3002               	movlw	2
  9151  114F  008D               	movwf	13	;volatile
  9152                           
  9153                           ;MCU_B1.c: 95: LATC = 0b00000000;;
  9154  1150  018E               	clrf	14	;volatile
  9155                           
  9156                           ;MCU_B1.c: 96: ANSELA = 0b00100010;;
  9157  1151  3022               	movlw	34
  9158  1152  0023               	movlb	3	; select bank3
  9159  1153  008C               	movwf	12	;volatile
  9160                           
  9161                           ;MCU_B1.c: 97: ANSELB = 0b00000000;;
  9162  1154  018D               	clrf	13	;volatile
  9163                           
  9164                           ;MCU_B1.c: 98: ANSELC = 0b00000000;;
  9165  1155  018E               	clrf	14	;volatile
  9166                           
  9167                           ;MCU_B1.c: 99: PORTA = 0b01110111;;
  9168  1156  3077               	movlw	119
  9169  1157  0020               	movlb	0	; select bank0
  9170  1158  008C               	movwf	12	;volatile
  9171                           
  9172                           ;MCU_B1.c: 100: PORTB = 0b00000111;;
  9173  1159  3007               	movlw	7
  9174  115A  008D               	movwf	13	;volatile
  9175                           
  9176                           ;MCU_B1.c: 101: PORTC = 0b00001100;;
  9177  115B  300C               	movlw	12
  9178  115C  008E               	movwf	14	;volatile
  9179  115D  0008               	return
  9180  115E                     __end_of_IO_Set:	
  9181                           
  9182                           	psect	text44
  9183  1EC8                     __ptext44:	
  9184 ;; *************** function _IOC_Set *****************
  9185 ;; Defined at:
  9186 ;;		line 270 in file "../src/MCU_B1.c"
  9187 ;; Parameters:    Size  Location     Type
  9188 ;;		None
  9189 ;; Auto vars:     Size  Location     Type
  9190 ;;		None
  9191 ;; Return value:  Size  Location     Type
  9192 ;;		None               void
  9193 ;; Registers used:
  9194 ;;		wreg, status,2
  9195 ;; Tracked objects:
  9196 ;;		On entry : 0/0
  9197 ;;		On exit  : 0/0
  9198 ;;		Unchanged: 0/0
  9199 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9200 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9201 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9202 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9203 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9204 ;;Total ram usage:        0 bytes
  9205 ;; Hardware stack levels used:    1
  9206 ;; Hardware stack levels required when called:    5
  9207 ;; This function calls:
  9208 ;;		Nothing
  9209 ;; This function is called by:
  9210 ;;		_Mcu_Initialization
  9211 ;; This function uses a non-reentrant model
  9212 ;;
  9213                           
  9214                           
  9215                           ;psect for function _IOC_Set
  9216  1EC8                     _IOC_Set:	
  9217                           
  9218                           ;MCU_B1.c: 271: WPUB2 = 0;
  9219                           
  9220                           ;incstack = 0
  9221                           ; Regs used in _IOC_Set: [wreg+status,2]
  9222  1EC8  0024               	movlb	4	; select bank4
  9223  1EC9  110D               	bcf	13,2	;volatile
  9224                           
  9225                           ;MCU_B1.c: 273: IOCBP = 0b00000100;
  9226  1ECA  3004               	movlw	4
  9227  1ECB  0027               	movlb	7	; select bank7
  9228  1ECC  0094               	movwf	20	;volatile
  9229                           
  9230                           ;MCU_B1.c: 274: IOCBN = 0b00000100;
  9231  1ECD  3004               	movlw	4
  9232  1ECE  0095               	movwf	21	;volatile
  9233                           
  9234                           ;MCU_B1.c: 289: IOCBF = 0b00000000;
  9235  1ECF  0196               	clrf	22	;volatile
  9236                           
  9237                           ;MCU_B1.c: 291: IOCIE = 1;
  9238  1ED0  158B               	bsf	11,3	;volatile
  9239                           
  9240                           ;MCU_B1.c: 292: IOCIF = 0;
  9241  1ED1  100B               	bcf	11,0	;volatile
  9242                           
  9243                           ;MCU_B1.c: 293: PEIE = 1;
  9244  1ED2  170B               	bsf	11,6	;volatile
  9245                           
  9246                           ;MCU_B1.c: 294: GIE = 1;
  9247  1ED3  178B               	bsf	11,7	;volatile
  9248  1ED4  0008               	return
  9249  1ED5                     __end_of_IOC_Set:	
  9250                           
  9251                           	psect	text45
  9252  1DE8                     __ptext45:	
  9253 ;; *************** function _INT_Set *****************
  9254 ;; Defined at:
  9255 ;;		line 242 in file "../src/MCU_B1.c"
  9256 ;; Parameters:    Size  Location     Type
  9257 ;;		None
  9258 ;; Auto vars:     Size  Location     Type
  9259 ;;		None
  9260 ;; Return value:  Size  Location     Type
  9261 ;;		None               void
  9262 ;; Registers used:
  9263 ;;		None
  9264 ;; Tracked objects:
  9265 ;;		On entry : 0/0
  9266 ;;		On exit  : 0/0
  9267 ;;		Unchanged: 0/0
  9268 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9269 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9270 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9271 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9272 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9273 ;;Total ram usage:        0 bytes
  9274 ;; Hardware stack levels used:    1
  9275 ;; Hardware stack levels required when called:    5
  9276 ;; This function calls:
  9277 ;;		Nothing
  9278 ;; This function is called by:
  9279 ;;		_Mcu_Initialization
  9280 ;; This function uses a non-reentrant model
  9281 ;;
  9282                           
  9283                           
  9284                           ;psect for function _INT_Set
  9285  1DE8                     _INT_Set:	
  9286                           
  9287                           ;MCU_B1.c: 243: WPUB0 = 0;
  9288                           
  9289                           ;incstack = 0
  9290                           ; Regs used in _INT_Set: []
  9291  1DE8  0024               	movlb	4	; select bank4
  9292  1DE9  100D               	bcf	13,0	;volatile
  9293                           
  9294                           ;MCU_B1.c: 244: INTE = 1;
  9295  1DEA  160B               	bsf	11,4	;volatile
  9296                           
  9297                           ;MCU_B1.c: 245: PEIE = 1;
  9298  1DEB  170B               	bsf	11,6	;volatile
  9299                           
  9300                           ;MCU_B1.c: 246: GIE = 1;
  9301  1DEC  178B               	bsf	11,7	;volatile
  9302  1DED  0008               	return
  9303  1DEE                     __end_of_INT_Set:	
  9304                           
  9305                           	psect	text46
  9306  1DD7                     __ptext46:	
  9307 ;; *************** function _Fosc_Set *****************
  9308 ;; Defined at:
  9309 ;;		line 58 in file "../src/MCU_B1.c"
  9310 ;; Parameters:    Size  Location     Type
  9311 ;;		None
  9312 ;; Auto vars:     Size  Location     Type
  9313 ;;		None
  9314 ;; Return value:  Size  Location     Type
  9315 ;;		None               void
  9316 ;; Registers used:
  9317 ;;		wreg
  9318 ;; Tracked objects:
  9319 ;;		On entry : 0/0
  9320 ;;		On exit  : 0/0
  9321 ;;		Unchanged: 0/0
  9322 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9323 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9324 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9325 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9326 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9327 ;;Total ram usage:        0 bytes
  9328 ;; Hardware stack levels used:    1
  9329 ;; Hardware stack levels required when called:    5
  9330 ;; This function calls:
  9331 ;;		Nothing
  9332 ;; This function is called by:
  9333 ;;		_Mcu_Initialization
  9334 ;; This function uses a non-reentrant model
  9335 ;;
  9336                           
  9337                           
  9338                           ;psect for function _Fosc_Set
  9339  1DD7                     _Fosc_Set:	
  9340                           
  9341                           ;MCU_B1.c: 59: OSCCON = 0x78;
  9342                           
  9343                           ;incstack = 0
  9344                           ; Regs used in _Fosc_Set: [wreg]
  9345  1DD7  3078               	movlw	120
  9346  1DD8  0021               	movlb	1	; select bank1
  9347  1DD9  0099               	movwf	25	;volatile
  9348  1DDA  0008               	return
  9349  1DDB                     __end_of_Fosc_Set:	
  9350                           
  9351                           	psect	text47
  9352  1DFB                     __ptext47:	
  9353 ;; *************** function _ADC_Set *****************
  9354 ;; Defined at:
  9355 ;;		line 316 in file "../src/MCU_B1.c"
  9356 ;; Parameters:    Size  Location     Type
  9357 ;;		None
  9358 ;; Auto vars:     Size  Location     Type
  9359 ;;		None
  9360 ;; Return value:  Size  Location     Type
  9361 ;;		None               void
  9362 ;; Registers used:
  9363 ;;		wreg
  9364 ;; Tracked objects:
  9365 ;;		On entry : 0/0
  9366 ;;		On exit  : 0/0
  9367 ;;		Unchanged: 0/0
  9368 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9369 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9370 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9371 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9372 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9373 ;;Total ram usage:        0 bytes
  9374 ;; Hardware stack levels used:    1
  9375 ;; Hardware stack levels required when called:    5
  9376 ;; This function calls:
  9377 ;;		Nothing
  9378 ;; This function is called by:
  9379 ;;		_Mcu_Initialization
  9380 ;; This function uses a non-reentrant model
  9381 ;;
  9382                           
  9383                           
  9384                           ;psect for function _ADC_Set
  9385  1DFB                     _ADC_Set:	
  9386                           
  9387                           ;MCU_B1.c: 317: ADCON1 = 0xf2;
  9388                           
  9389                           ;incstack = 0
  9390                           ; Regs used in _ADC_Set: [wreg]
  9391  1DFB  30F2               	movlw	242
  9392  1DFC  0021               	movlb	1	; select bank1
  9393  1DFD  009E               	movwf	30	;volatile
  9394                           
  9395                           ;MCU_B1.c: 318: FVRCON = 0xc0;
  9396  1DFE  30C0               	movlw	192
  9397  1DFF  0022               	movlb	2	; select bank2
  9398  1E00  0097               	movwf	23	;volatile
  9399  1E01  0008               	return
  9400  1E02                     __end_of_ADC_Set:	
  9401                           
  9402                           	psect	text48
  9403  1EA2                     __ptext48:	
  9404 ;; *************** function _LED_Main *****************
  9405 ;; Defined at:
  9406 ;;		line 51 in file "../src/LED_B1.c"
  9407 ;; Parameters:    Size  Location     Type
  9408 ;;		None
  9409 ;; Auto vars:     Size  Location     Type
  9410 ;;		None
  9411 ;; Return value:  Size  Location     Type
  9412 ;;		None               void
  9413 ;; Registers used:
  9414 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9415 ;; Tracked objects:
  9416 ;;		On entry : 0/0
  9417 ;;		On exit  : 0/0
  9418 ;;		Unchanged: 0/0
  9419 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9420 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9421 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9422 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9423 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9424 ;;Total ram usage:        0 bytes
  9425 ;; Hardware stack levels used:    1
  9426 ;; Hardware stack levels required when called:    7
  9427 ;; This function calls:
  9428 ;;		_setLED_Main
  9429 ;; This function is called by:
  9430 ;;		_main
  9431 ;; This function uses a non-reentrant model
  9432 ;;
  9433                           
  9434                           
  9435                           ;psect for function _LED_Main
  9436  1EA2                     _LED_Main:	
  9437                           
  9438                           ;LED_B1.c: 54: setLED_Main(1);
  9439                           
  9440                           ;incstack = 0
  9441                           ; Regs used in _LED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9442  1EA2  3001               	movlw	1
  9443  1EA3  3194  24DC  319E   	fcall	_setLED_Main
  9444                           
  9445                           ;LED_B1.c: 57: setLED_Main(2);
  9446  1EA6  3002               	movlw	2
  9447  1EA7  3194  24DC  319E   	fcall	_setLED_Main
  9448                           
  9449                           ;LED_B1.c: 63: setLED_Main(99);
  9450  1EAA  3063               	movlw	99
  9451  1EAB  3194  24DC         	fcall	_setLED_Main
  9452  1EAD  0008               	return
  9453  1EAE                     __end_of_LED_Main:	
  9454                           
  9455                           	psect	text49
  9456  14DC                     __ptext49:	
  9457 ;; *************** function _setLED_Main *****************
  9458 ;; Defined at:
  9459 ;;		line 215 in file "../src/LED_B1.c"
  9460 ;; Parameters:    Size  Location     Type
  9461 ;;  led             1    wreg     unsigned char 
  9462 ;; Auto vars:     Size  Location     Type
  9463 ;;  led             1    4[BANK0 ] unsigned char 
  9464 ;; Return value:  Size  Location     Type
  9465 ;;		None               void
  9466 ;; Registers used:
  9467 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9468 ;; Tracked objects:
  9469 ;;		On entry : 0/0
  9470 ;;		On exit  : 0/0
  9471 ;;		Unchanged: 0/0
  9472 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9473 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9474 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9475 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9476 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9477 ;;Total ram usage:        3 bytes
  9478 ;; Hardware stack levels used:    1
  9479 ;; Hardware stack levels required when called:    6
  9480 ;; This function calls:
  9481 ;;		_LedPointSelect
  9482 ;; This function is called by:
  9483 ;;		_LED_Main
  9484 ;; This function uses a non-reentrant model
  9485 ;;
  9486                           
  9487                           
  9488                           ;psect for function _setLED_Main
  9489  14DC                     _setLED_Main:	
  9490                           
  9491                           ;incstack = 0
  9492                           ; Regs used in _setLED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9493                           ;setLED_Main@led stored from wreg
  9494  14DC  0020               	movlb	0	; select bank0
  9495  14DD  00A4               	movwf	setLED_Main@led
  9496                           
  9497                           ;LED_B1.c: 217: LedPointSelect(led);
  9498  14DE  0824               	movf	setLED_Main@led,w
  9499  14DF  3192  2269  3194   	fcall	_LedPointSelect
  9500                           
  9501                           ;LED_B1.c: 218: if(LED->GO)
  9502  14E2  0021               	movlb	1	; select bank1
  9503  14E3  083D               	movf	_LED^(0+128),w
  9504  14E4  0086               	movwf	6
  9505  14E5  0187               	clrf	7
  9506  14E6  1C81               	btfss	1,1
  9507  14E7  0008               	return
  9508                           
  9509                           ;LED_B1.c: 219: {
  9510                           ;LED_B1.c: 220: LED->Time++;
  9511  14E8  0A3D               	incf	_LED^(0+128),w
  9512  14E9  0086               	movwf	6
  9513  14EA  0187               	clrf	7
  9514  14EB  3001               	movlw	1
  9515  14EC  0781               	addwf	1,f
  9516  14ED  3141               	addfsr 1,1
  9517  14EE  1803               	skipnc
  9518  14EF  0A81               	incf	1,f
  9519                           
  9520                           ;LED_B1.c: 221: if(LED->Time >= 500/10)
  9521  14F0  0A3D               	incf	_LED^(0+128),w
  9522  14F1  0086               	movwf	6
  9523  14F2  0187               	clrf	7
  9524  14F3  3F40               	moviw [0]fsr1
  9525  14F4  0020               	movlb	0	; select bank0
  9526  14F5  00A2               	movwf	??_setLED_Main
  9527  14F6  3F41               	moviw [1]fsr1
  9528  14F7  00A3               	movwf	??_setLED_Main+1
  9529  14F8  3000               	movlw	0
  9530  14F9  0223               	subwf	??_setLED_Main+1,w
  9531  14FA  3032               	movlw	50
  9532  14FB  1903               	skipnz
  9533  14FC  0222               	subwf	??_setLED_Main,w
  9534  14FD  1C03               	skipc
  9535  14FE  0008               	return
  9536                           
  9537                           ;LED_B1.c: 222: {
  9538                           ;LED_B1.c: 223: LED->Time=0;
  9539  14FF  0021               	movlb	1	; select bank1
  9540  1500  0A3D               	incf	_LED^(0+128),w
  9541  1501  0086               	movwf	6
  9542  1502  0187               	clrf	7
  9543  1503  3000               	movlw	0
  9544  1504  3FC0               	movwi [0]fsr1
  9545  1505  3FC1               	movwi [1]fsr1
  9546                           
  9547                           ;LED_B1.c: 225: if(led == 1)
  9548  1506  0020               	movlb	0	; select bank0
  9549  1507  0824               	movf	setLED_Main@led,w
  9550  1508  3A01               	xorlw	1
  9551  1509  1D03               	skipz
  9552  150A  2D0E               	goto	l6580
  9553                           
  9554                           ;LED_B1.c: 226: {
  9555                           ;LED_B1.c: 227: RA3=~RA3;
  9556  150B  3008               	movlw	8
  9557  150C  068C               	xorwf	12,f
  9558                           
  9559                           ;LED_B1.c: 228: }
  9560  150D  0008               	return
  9561  150E                     l6580:	
  9562                           
  9563                           ;LED_B1.c: 231: else if(led == 2)
  9564  150E  0824               	movf	setLED_Main@led,w
  9565  150F  3A02               	xorlw	2
  9566  1510  1D03               	skipz
  9567  1511  2D15               	goto	l6584
  9568                           
  9569                           ;LED_B1.c: 232: {
  9570                           ;LED_B1.c: 233: RC7=~RC7;
  9571  1512  3080               	movlw	128
  9572  1513  068E               	xorwf	14,f
  9573                           
  9574                           ;LED_B1.c: 234: }
  9575  1514  0008               	return
  9576  1515                     l6584:	
  9577                           
  9578                           ;LED_B1.c: 243: else if(led == 99)
  9579  1515  0824               	movf	setLED_Main@led,w
  9580  1516  3A63               	xorlw	99
  9581  1517  1D03               	skipz
  9582  1518  0008               	return
  9583                           
  9584                           ;LED_B1.c: 244: {
  9585                           ;LED_B1.c: 245: RB5=~RB5;
  9586  1519  3020               	movlw	32
  9587  151A  068D               	xorwf	13,f
  9588  151B  0008               	return
  9589  151C                     __end_of_setLED_Main:	
  9590                           
  9591                           	psect	text50
  9592  1E96                     __ptext50:	
  9593 ;; *************** function _LED_Initialization *****************
  9594 ;; Defined at:
  9595 ;;		line 35 in file "../src/LED_B1.c"
  9596 ;; Parameters:    Size  Location     Type
  9597 ;;		None
  9598 ;; Auto vars:     Size  Location     Type
  9599 ;;		None
  9600 ;; Return value:  Size  Location     Type
  9601 ;;		None               void
  9602 ;; Registers used:
  9603 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9604 ;; Tracked objects:
  9605 ;;		On entry : 0/0
  9606 ;;		On exit  : 0/0
  9607 ;;		Unchanged: 0/0
  9608 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9609 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9610 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9611 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9612 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9613 ;;Total ram usage:        0 bytes
  9614 ;; Hardware stack levels used:    1
  9615 ;; Hardware stack levels required when called:    8
  9616 ;; This function calls:
  9617 ;;		_setLED_Initialization
  9618 ;; This function is called by:
  9619 ;;		_main
  9620 ;; This function uses a non-reentrant model
  9621 ;;
  9622                           
  9623                           
  9624                           ;psect for function _LED_Initialization
  9625  1E96                     _LED_Initialization:	
  9626                           
  9627                           ;LED_B1.c: 38: setLED_Initialization(1);
  9628                           
  9629                           ;incstack = 0
  9630                           ; Regs used in _LED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9631  1E96  3001               	movlw	1
  9632  1E97  319F  27A0  319E   	fcall	_setLED_Initialization
  9633                           
  9634                           ;LED_B1.c: 41: setLED_Initialization(2);
  9635  1E9A  3002               	movlw	2
  9636  1E9B  319F  27A0  319E   	fcall	_setLED_Initialization
  9637                           
  9638                           ;LED_B1.c: 47: setLED_Initialization(99);
  9639  1E9E  3063               	movlw	99
  9640  1E9F  319F  27A0         	fcall	_setLED_Initialization
  9641  1EA1  0008               	return
  9642  1EA2                     __end_of_LED_Initialization:	
  9643                           
  9644                           	psect	text51
  9645  1FA0                     __ptext51:	
  9646 ;; *************** function _setLED_Initialization *****************
  9647 ;; Defined at:
  9648 ;;		line 67 in file "../src/LED_B1.c"
  9649 ;; Parameters:    Size  Location     Type
  9650 ;;  led             1    wreg     unsigned char 
  9651 ;; Auto vars:     Size  Location     Type
  9652 ;;  led             1    4[BANK0 ] unsigned char 
  9653 ;; Return value:  Size  Location     Type
  9654 ;;		None               void
  9655 ;; Registers used:
  9656 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9657 ;; Tracked objects:
  9658 ;;		On entry : 0/0
  9659 ;;		On exit  : 0/0
  9660 ;;		Unchanged: 0/0
  9661 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9662 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9663 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9664 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9665 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9666 ;;Total ram usage:        1 bytes
  9667 ;; Hardware stack levels used:    1
  9668 ;; Hardware stack levels required when called:    7
  9669 ;; This function calls:
  9670 ;;		_LedPointSelect
  9671 ;;		_setLED
  9672 ;; This function is called by:
  9673 ;;		_LED_Initialization
  9674 ;; This function uses a non-reentrant model
  9675 ;;
  9676                           
  9677                           
  9678                           ;psect for function _setLED_Initialization
  9679  1FA0                     _setLED_Initialization:	
  9680                           
  9681                           ;incstack = 0
  9682                           ; Regs used in _setLED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  9683                           ;setLED_Initialization@led stored from wreg
  9684  1FA0  0020               	movlb	0	; select bank0
  9685  1FA1  00A4               	movwf	setLED_Initialization@led
  9686                           
  9687                           ;LED_B1.c: 69: LedPointSelect(led);
  9688  1FA2  0824               	movf	setLED_Initialization@led,w
  9689  1FA3  3192  2269  319F   	fcall	_LedPointSelect
  9690                           
  9691                           ;LED_B1.c: 70: LED->Enable=1;
  9692  1FA6  0021               	movlb	1	; select bank1
  9693  1FA7  083D               	movf	_LED^(0+128),w
  9694  1FA8  0086               	movwf	6
  9695  1FA9  0187               	clrf	7
  9696  1FAA  1401               	bsf	1,0
  9697                           
  9698                           ;LED_B1.c: 71: setLED(led,0);
  9699  1FAB  0020               	movlb	0	; select bank0
  9700  1FAC  01A2               	clrf	setLED@command
  9701  1FAD  0824               	movf	setLED_Initialization@led,w
  9702  1FAE  3188  206F         	fcall	_setLED
  9703  1FB0  0008               	return
  9704  1FB1                     __end_of_setLED_Initialization:	
  9705                           
  9706                           	psect	text52
  9707  15A0                     __ptext52:	
  9708 ;; *************** function _Flash_Memory_Main *****************
  9709 ;; Defined at:
  9710 ;;		line 795 in file "../src/MCU_B1.c"
  9711 ;; Parameters:    Size  Location     Type
  9712 ;;		None
  9713 ;; Auto vars:     Size  Location     Type
  9714 ;;		None
  9715 ;; Return value:  Size  Location     Type
  9716 ;;		None               void
  9717 ;; Registers used:
  9718 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9719 ;; Tracked objects:
  9720 ;;		On entry : 0/0
  9721 ;;		On exit  : 0/0
  9722 ;;		Unchanged: 0/0
  9723 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9724 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9725 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9726 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9727 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9728 ;;Total ram usage:        0 bytes
  9729 ;; Hardware stack levels used:    1
  9730 ;; Hardware stack levels required when called:    8
  9731 ;; This function calls:
  9732 ;;		_Flash_Memory_Modify
  9733 ;; This function is called by:
  9734 ;;		_main
  9735 ;; This function uses a non-reentrant model
  9736 ;;
  9737                           
  9738                           
  9739                           ;psect for function _Flash_Memory_Main
  9740  15A0                     _Flash_Memory_Main:	
  9741                           
  9742                           ;MCU_B1.c: 796: if (Memory->GO) {
  9743                           
  9744                           ;incstack = 0
  9745                           ; Regs used in _Flash_Memory_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9746  15A0  0021               	movlb	1	; select bank1
  9747  15A1  086C               	movf	_Memory^(0+128),w
  9748  15A2  3E24               	addlw	36
  9749  15A3  0086               	movwf	6
  9750  15A4  3002               	movlw	2	; select bank4/5
  9751  15A5  0087               	movwf	7
  9752  15A6  1C81               	btfss	1,1
  9753  15A7  0008               	return
  9754                           
  9755                           ;MCU_B1.c: 797: if (Memory->Modify) {
  9756  15A8  086C               	movf	_Memory^(0+128),w
  9757  15A9  3E24               	addlw	36
  9758  15AA  0086               	movwf	6
  9759  15AB  3002               	movlw	2	; select bank4/5
  9760  15AC  0087               	movwf	7
  9761  15AD  1C01               	btfss	1,0
  9762  15AE  2DDD               	goto	l7052
  9763                           
  9764                           ;MCU_B1.c: 798: Memory->Time++;
  9765  15AF  086C               	movf	_Memory^(0+128),w
  9766  15B0  3E22               	addlw	34
  9767  15B1  0086               	movwf	6
  9768  15B2  3002               	movlw	2	; select bank4/5
  9769  15B3  0087               	movwf	7
  9770  15B4  3001               	movlw	1
  9771  15B5  0781               	addwf	1,f
  9772  15B6  3141               	addfsr 1,1
  9773  15B7  1803               	skipnc
  9774  15B8  0A81               	incf	1,f
  9775                           
  9776                           ;MCU_B1.c: 799: if (Memory->Time == 25)
  9777  15B9  086C               	movf	_Memory^(0+128),w
  9778  15BA  3E22               	addlw	34
  9779  15BB  0086               	movwf	6
  9780  15BC  3002               	movlw	2	; select bank4/5
  9781  15BD  0087               	movwf	7
  9782  15BE  3F40               	moviw [0]fsr1
  9783  15BF  3A19               	xorlw	25
  9784  15C0  1D03               	skipz
  9785  15C1  2DC4               	goto	u6255
  9786  15C2  3F41               	moviw [1]fsr1
  9787  15C3  3A00               	xorlw	0
  9788  15C4                     u6255:	
  9789  15C4  1D03               	skipz
  9790  15C5  0008               	return
  9791                           
  9792                           ;MCU_B1.c: 800: {
  9793                           ;MCU_B1.c: 801: Memory->Time = 0;
  9794  15C6  086C               	movf	_Memory^(0+128),w
  9795  15C7  3E22               	addlw	34
  9796  15C8  0086               	movwf	6
  9797  15C9  3002               	movlw	2	; select bank4/5
  9798  15CA  0087               	movwf	7
  9799  15CB  3000               	movlw	0
  9800  15CC  3FC0               	movwi [0]fsr1
  9801  15CD  3FC1               	movwi [1]fsr1
  9802                           
  9803                           ;MCU_B1.c: 802: Memory->Modify = 0;
  9804  15CE  086C               	movf	_Memory^(0+128),w
  9805  15CF  3E24               	addlw	36
  9806  15D0  0086               	movwf	6
  9807  15D1  3002               	movlw	2	; select bank4/5
  9808  15D2  0087               	movwf	7
  9809  15D3  1001               	bcf	1,0
  9810                           
  9811                           ;MCU_B1.c: 803: Memory->GO = 0;
  9812  15D4  086C               	movf	_Memory^(0+128),w
  9813  15D5  3E24               	addlw	36
  9814  15D6  0086               	movwf	6
  9815  15D7  3002               	movlw	2	; select bank4/5
  9816  15D8  0087               	movwf	7
  9817  15D9  1081               	bcf	1,1
  9818                           
  9819                           ;MCU_B1.c: 804: Flash_Memory_Modify();
  9820  15DA  3189  21F8         	fcall	_Flash_Memory_Modify
  9821                           
  9822                           ;MCU_B1.c: 806: }
  9823                           ;MCU_B1.c: 807: } else {
  9824  15DC  0008               	return
  9825  15DD                     l7052:	
  9826                           
  9827                           ;MCU_B1.c: 808: Memory->GO = 0;
  9828  15DD  0021               	movlb	1	; select bank1
  9829  15DE  086C               	movf	_Memory^(0+128),w
  9830  15DF  3E24               	addlw	36
  9831  15E0  0086               	movwf	6
  9832  15E1  3002               	movlw	2	; select bank4/5
  9833  15E2  0087               	movwf	7
  9834  15E3  1081               	bcf	1,1
  9835  15E4  0008               	return
  9836  15E5                     __end_of_Flash_Memory_Main:	
  9837                           
  9838                           	psect	text53
  9839  09F8                     __ptext53:	
  9840 ;; *************** function _Flash_Memory_Modify *****************
  9841 ;; Defined at:
  9842 ;;		line 865 in file "../src/MCU_B1.c"
  9843 ;; Parameters:    Size  Location     Type
  9844 ;;		None
  9845 ;; Auto vars:     Size  Location     Type
  9846 ;;  i               1    6[BANK0 ] unsigned char 
  9847 ;; Return value:  Size  Location     Type
  9848 ;;		None               void
  9849 ;; Registers used:
  9850 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9851 ;; Tracked objects:
  9852 ;;		On entry : 0/0
  9853 ;;		On exit  : 0/0
  9854 ;;		Unchanged: 0/0
  9855 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9856 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9857 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9858 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9859 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9860 ;;Total ram usage:        3 bytes
  9861 ;; Hardware stack levels used:    1
  9862 ;; Hardware stack levels required when called:    7
  9863 ;; This function calls:
  9864 ;;		_Flash_Memory_Erasing
  9865 ;;		_Flash_Memory_Read
  9866 ;;		_Flash_Memory_Write
  9867 ;; This function is called by:
  9868 ;;		_Flash_Memory_Main
  9869 ;; This function uses a non-reentrant model
  9870 ;;
  9871                           
  9872                           
  9873                           ;psect for function _Flash_Memory_Modify
  9874  09F8                     _Flash_Memory_Modify:	
  9875                           
  9876                           ;MCU_B1.c: 866: char i;
  9877                           ;MCU_B1.c: 867: for (i = 0; i < 32; i++) {
  9878                           
  9879                           ;incstack = 0
  9880                           ; Regs used in _Flash_Memory_Modify: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9881  09F8  0020               	movlb	0	; select bank0
  9882  09F9  01A6               	clrf	Flash_Memory_Modify@i
  9883  09FA  3020               	movlw	32
  9884  09FB  0226               	subwf	Flash_Memory_Modify@i,w
  9885  09FC  1803               	btfsc	3,0
  9886  09FD  2A17               	goto	l6666
  9887  09FE                     l6660:	
  9888                           
  9889                           ;MCU_B1.c: 868: Memory->Data[i] = Flash_Memory_Read(i);
  9890  09FE  0826               	movf	Flash_Memory_Modify@i,w
  9891  09FF  3191  212C  3189   	fcall	_Flash_Memory_Read
  9892  0A02  0020               	movlb	0	; select bank0
  9893  0A03  00A4               	movwf	??_Flash_Memory_Modify
  9894  0A04  0826               	movf	Flash_Memory_Modify@i,w
  9895  0A05  0021               	movlb	1	; select bank1
  9896  0A06  076C               	addwf	_Memory^(0+128),w
  9897  0A07  0020               	movlb	0	; select bank0
  9898  0A08  00A5               	movwf	??_Flash_Memory_Modify+1
  9899  0A09  0825               	movf	??_Flash_Memory_Modify+1,w
  9900  0A0A  0086               	movwf	6
  9901  0A0B  3002               	movlw	2	; select bank4/5
  9902  0A0C  0087               	movwf	7
  9903  0A0D  0824               	movf	??_Flash_Memory_Modify,w
  9904  0A0E  0081               	movwf	1
  9905  0A0F  3001               	movlw	1
  9906  0A10  00A4               	movwf	??_Flash_Memory_Modify
  9907  0A11  0824               	movf	??_Flash_Memory_Modify,w
  9908  0A12  07A6               	addwf	Flash_Memory_Modify@i,f
  9909  0A13  3020               	movlw	32
  9910  0A14  0226               	subwf	Flash_Memory_Modify@i,w
  9911  0A15  1C03               	skipc
  9912  0A16  29FE               	goto	l6660
  9913  0A17                     l6666:	
  9914                           
  9915                           ;MCU_B1.c: 869: }
  9916                           ;MCU_B1.c: 870: Memory->Data[0]=product->Data[12];
  9917  0A17  087D               	movf	_product,w
  9918  0A18  3E0C               	addlw	12
  9919  0A19  0086               	movwf	6
  9920  0A1A  3001               	movlw	1	; select bank2/3
  9921  0A1B  0087               	movwf	7
  9922  0A1C  0801               	movf	1,w
  9923  0A1D  00A4               	movwf	??_Flash_Memory_Modify
  9924  0A1E  0021               	movlb	1	; select bank1
  9925  0A1F  086C               	movf	_Memory^(0+128),w
  9926  0A20  0086               	movwf	6
  9927  0A21  3002               	movlw	2	; select bank4/5
  9928  0A22  0087               	movwf	7
  9929  0A23  0020               	movlb	0	; select bank0
  9930  0A24  0824               	movf	??_Flash_Memory_Modify,w
  9931  0A25  0081               	movwf	1
  9932                           
  9933                           ;MCU_B1.c: 871: Memory->Data[1]=product->Data[13];
  9934  0A26  087D               	movf	_product,w
  9935  0A27  3E0D               	addlw	13
  9936  0A28  0086               	movwf	6
  9937  0A29  3001               	movlw	1	; select bank2/3
  9938  0A2A  0087               	movwf	7
  9939  0A2B  0801               	movf	1,w
  9940  0A2C  00A4               	movwf	??_Flash_Memory_Modify
  9941  0A2D  0021               	movlb	1	; select bank1
  9942  0A2E  0A6C               	incf	_Memory^(0+128),w
  9943  0A2F  0086               	movwf	6
  9944  0A30  3002               	movlw	2	; select bank4/5
  9945  0A31  0087               	movwf	7
  9946  0A32  0020               	movlb	0	; select bank0
  9947  0A33  0824               	movf	??_Flash_Memory_Modify,w
  9948  0A34  0081               	movwf	1
  9949                           
  9950                           ;MCU_B1.c: 872: Memory->Data[2]=product->Data[14];
  9951  0A35  087D               	movf	_product,w
  9952  0A36  3E0E               	addlw	14
  9953  0A37  0086               	movwf	6
  9954  0A38  3001               	movlw	1	; select bank2/3
  9955  0A39  0087               	movwf	7
  9956  0A3A  0801               	movf	1,w
  9957  0A3B  00A4               	movwf	??_Flash_Memory_Modify
  9958  0A3C  0021               	movlb	1	; select bank1
  9959  0A3D  086C               	movf	_Memory^(0+128),w
  9960  0A3E  3E02               	addlw	2
  9961  0A3F  0086               	movwf	6
  9962  0A40  3002               	movlw	2	; select bank4/5
  9963  0A41  0087               	movwf	7
  9964  0A42  0020               	movlb	0	; select bank0
  9965  0A43  0824               	movf	??_Flash_Memory_Modify,w
  9966  0A44  0081               	movwf	1
  9967                           
  9968                           ;MCU_B1.c: 878: if (Memory->LoopSave) {
  9969  0A45  0021               	movlb	1	; select bank1
  9970  0A46  086C               	movf	_Memory^(0+128),w
  9971  0A47  3E24               	addlw	36
  9972  0A48  0086               	movwf	6
  9973  0A49  3002               	movlw	2	; select bank4/5
  9974  0A4A  0087               	movwf	7
  9975  0A4B  1D01               	btfss	1,2
  9976  0A4C  2A5D               	goto	l6670
  9977                           
  9978                           ;MCU_B1.c: 879: Memory->LoopSave = 0;
  9979  0A4D  086C               	movf	_Memory^(0+128),w
  9980  0A4E  3E24               	addlw	36
  9981  0A4F  0086               	movwf	6
  9982  0A50  3002               	movlw	2	; select bank4/5
  9983  0A51  0087               	movwf	7
  9984  0A52  1101               	bcf	1,2
  9985                           
  9986                           ;MCU_B1.c: 880: myMain->FirstOpen = 0;
  9987  0A53  086B               	movf	_myMain^(0+128),w
  9988  0A54  0086               	movwf	6
  9989  0A55  3001               	movlw	1	; select bank2/3
  9990  0A56  0087               	movwf	7
  9991  0A57  1281               	bcf	1,5
  9992                           
  9993                           ;MCU_B1.c: 881: myMain->First = 0;
  9994  0A58  086B               	movf	_myMain^(0+128),w
  9995  0A59  0086               	movwf	6
  9996  0A5A  3001               	movlw	1	; select bank2/3
  9997  0A5B  0087               	movwf	7
  9998  0A5C  1381               	bcf	1,7
  9999  0A5D                     l6670:	
 10000                           
 10001                           ;MCU_B1.c: 883: }
 10002                           ;MCU_B1.c: 884: GIE = 0;
 10003  0A5D  138B               	bcf	11,7	;volatile
 10004                           
 10005                           ;MCU_B1.c: 885: Flash_Memory_Erasing();
 10006  0A5E  319E  268A  3189   	fcall	_Flash_Memory_Erasing
 10007                           
 10008                           ;MCU_B1.c: 886: Flash_Memory_Write();
 10009  0A61  3194  2403         	fcall	_Flash_Memory_Write
 10010                           
 10011                           ;MCU_B1.c: 887: GIE = 1;
 10012  0A63  178B               	bsf	11,7	;volatile
 10013  0A64  0008               	return
 10014  0A65                     __end_of_Flash_Memory_Modify:	
 10015                           
 10016                           	psect	text54
 10017  1E8A                     __ptext54:	
 10018 ;; *************** function _Flash_Memory_Erasing *****************
 10019 ;; Defined at:
 10020 ;;		line 854 in file "../src/MCU_B1.c"
 10021 ;; Parameters:    Size  Location     Type
 10022 ;;		None
 10023 ;; Auto vars:     Size  Location     Type
 10024 ;;		None
 10025 ;; Return value:  Size  Location     Type
 10026 ;;		None               void
 10027 ;; Registers used:
 10028 ;;		wreg, status,2, status,0, pclath, cstack
 10029 ;; Tracked objects:
 10030 ;;		On entry : 0/0
 10031 ;;		On exit  : 0/0
 10032 ;;		Unchanged: 0/0
 10033 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10034 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10035 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10036 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10037 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10038 ;;Total ram usage:        0 bytes
 10039 ;; Hardware stack levels used:    1
 10040 ;; Hardware stack levels required when called:    6
 10041 ;; This function calls:
 10042 ;;		_Flash_Memory_Unlock
 10043 ;; This function is called by:
 10044 ;;		_Flash_Memory_Modify
 10045 ;; This function uses a non-reentrant model
 10046 ;;
 10047                           
 10048                           
 10049                           ;psect for function _Flash_Memory_Erasing
 10050  1E8A                     _Flash_Memory_Erasing:	
 10051                           
 10052                           ;MCU_B1.c: 855: CFGS = 0;
 10053                           
 10054                           ;incstack = 0
 10055                           ; Regs used in _Flash_Memory_Erasing: [wreg+status,2+status,0+pclath+cstack]
 10056  1E8A  0023               	movlb	3	; select bank3
 10057  1E8B  1315               	bcf	21,6	;volatile
 10058                           
 10059                           ;MCU_B1.c: 856: PMADRH = 0x30;
 10060  1E8C  3030               	movlw	48
 10061  1E8D  0092               	movwf	18	;volatile
 10062                           
 10063                           ;MCU_B1.c: 857: PMADRL = 0x00;
 10064  1E8E  0191               	clrf	17	;volatile
 10065                           
 10066                           ;MCU_B1.c: 858: FREE = 1;
 10067  1E8F  1615               	bsf	21,4	;volatile
 10068                           
 10069                           ;MCU_B1.c: 859: WREN = 1;
 10070  1E90  1515               	bsf	21,2	;volatile
 10071                           
 10072                           ;MCU_B1.c: 860: Flash_Memory_Unlock();
 10073  1E91  319E  2629         	fcall	_Flash_Memory_Unlock
 10074                           
 10075                           ;MCU_B1.c: 861: WREN = 0;
 10076  1E93  0023               	movlb	3	; select bank3
 10077  1E94  1115               	bcf	21,2	;volatile
 10078  1E95  0008               	return
 10079  1E96                     __end_of_Flash_Memory_Erasing:	
 10080                           
 10081                           	psect	text55
 10082  0467                     __ptext55:	
 10083 ;; *************** function _Flash_Memory_Initialization *****************
 10084 ;; Defined at:
 10085 ;;		line 754 in file "../src/MCU_B1.c"
 10086 ;; Parameters:    Size  Location     Type
 10087 ;;		None
 10088 ;; Auto vars:     Size  Location     Type
 10089 ;;  i               1   62[BANK0 ] unsigned char 
 10090 ;; Return value:  Size  Location     Type
 10091 ;;		None               void
 10092 ;; Registers used:
 10093 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10094 ;; Tracked objects:
 10095 ;;		On entry : 0/0
 10096 ;;		On exit  : 0/0
 10097 ;;		Unchanged: 0/0
 10098 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10099 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10100 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10101 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10102 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10103 ;;Total ram usage:        2 bytes
 10104 ;; Hardware stack levels used:    1
 10105 ;; Hardware stack levels required when called:    8
 10106 ;; This function calls:
 10107 ;;		_Flash_Memory_Read
 10108 ;;		_Flash_Memory_Write
 10109 ;;		_setPercentValue
 10110 ;; This function is called by:
 10111 ;;		_main
 10112 ;; This function uses a non-reentrant model
 10113 ;;
 10114                           
 10115                           
 10116                           ;psect for function _Flash_Memory_Initialization
 10117  0467                     _Flash_Memory_Initialization:	
 10118                           
 10119                           ;MCU_B1.c: 755: char i;
 10120                           ;MCU_B1.c: 756: if (Flash_Memory_Read(31) == 0xaa) {
 10121                           
 10122                           ;incstack = 0
 10123                           ; Regs used in _Flash_Memory_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 10124  0467  301F               	movlw	31
 10125  0468  3191  212C  3184   	fcall	_Flash_Memory_Read
 10126  046B  3AAA               	xorlw	170
 10127  046C  1D03               	skipz
 10128  046D  2CDF               	goto	l7008
 10129                           
 10130                           ;MCU_B1.c: 757: product->Data[12] = Flash_Memory_Read(0);
 10131  046E  3000               	movlw	0
 10132  046F  3191  212C  3184   	fcall	_Flash_Memory_Read
 10133  0472  0020               	movlb	0	; select bank0
 10134  0473  00DD               	movwf	??_Flash_Memory_Initialization
 10135  0474  087D               	movf	_product,w
 10136  0475  3E0C               	addlw	12
 10137  0476  0086               	movwf	6
 10138  0477  3001               	movlw	1	; select bank2/3
 10139  0478  0087               	movwf	7
 10140  0479  085D               	movf	??_Flash_Memory_Initialization,w
 10141  047A  0081               	movwf	1
 10142                           
 10143                           ;MCU_B1.c: 758: product->Data[13] = Flash_Memory_Read(1);
 10144  047B  3001               	movlw	1
 10145  047C  3191  212C  3184   	fcall	_Flash_Memory_Read
 10146  047F  0020               	movlb	0	; select bank0
 10147  0480  00DD               	movwf	??_Flash_Memory_Initialization
 10148  0481  087D               	movf	_product,w
 10149  0482  3E0D               	addlw	13
 10150  0483  0086               	movwf	6
 10151  0484  3001               	movlw	1	; select bank2/3
 10152  0485  0087               	movwf	7
 10153  0486  085D               	movf	??_Flash_Memory_Initialization,w
 10154  0487  0081               	movwf	1
 10155                           
 10156                           ;MCU_B1.c: 759: product->Data[14] = Flash_Memory_Read(2);
 10157  0488  3002               	movlw	2
 10158  0489  3191  212C  3184   	fcall	_Flash_Memory_Read
 10159  048C  0020               	movlb	0	; select bank0
 10160  048D  00DD               	movwf	??_Flash_Memory_Initialization
 10161  048E  087D               	movf	_product,w
 10162  048F  3E0E               	addlw	14
 10163  0490  0086               	movwf	6
 10164  0491  3001               	movlw	1	; select bank2/3
 10165  0492  0087               	movwf	7
 10166  0493  085D               	movf	??_Flash_Memory_Initialization,w
 10167  0494  0081               	movwf	1
 10168                           
 10169                           ;MCU_B1.c: 765: i = setPercentValue(((char)((100-70)*0.8)));
 10170  0495  3018               	movlw	24
 10171  0496  3196  262A  3184   	fcall	_setPercentValue
 10172  0499  0020               	movlb	0	; select bank0
 10173  049A  00DD               	movwf	??_Flash_Memory_Initialization
 10174  049B  085D               	movf	??_Flash_Memory_Initialization,w
 10175  049C  00DE               	movwf	Flash_Memory_Initialization@i
 10176                           
 10177                           ;MCU_B1.c: 766: product->Data[21] = i;
 10178  049D  085E               	movf	Flash_Memory_Initialization@i,w
 10179  049E  00DD               	movwf	??_Flash_Memory_Initialization
 10180  049F  087D               	movf	_product,w
 10181  04A0  3E15               	addlw	21
 10182  04A1  0086               	movwf	6
 10183  04A2  3001               	movlw	1	; select bank2/3
 10184  04A3  0087               	movwf	7
 10185  04A4  085D               	movf	??_Flash_Memory_Initialization,w
 10186  04A5  0081               	movwf	1
 10187                           
 10188                           ;MCU_B1.c: 767: product->Data[22] = i;
 10189  04A6  085E               	movf	Flash_Memory_Initialization@i,w
 10190  04A7  00DD               	movwf	??_Flash_Memory_Initialization
 10191  04A8  087D               	movf	_product,w
 10192  04A9  3E16               	addlw	22
 10193  04AA  0086               	movwf	6
 10194  04AB  3001               	movlw	1	; select bank2/3
 10195  04AC  0087               	movwf	7
 10196  04AD  085D               	movf	??_Flash_Memory_Initialization,w
 10197  04AE  0081               	movwf	1
 10198                           
 10199                           ;MCU_B1.c: 768: product->Data[23] = i;
 10200  04AF  085E               	movf	Flash_Memory_Initialization@i,w
 10201  04B0  00DD               	movwf	??_Flash_Memory_Initialization
 10202  04B1  087D               	movf	_product,w
 10203  04B2  3E17               	addlw	23
 10204  04B3  0086               	movwf	6
 10205  04B4  3001               	movlw	1	; select bank2/3
 10206  04B5  0087               	movwf	7
 10207  04B6  085D               	movf	??_Flash_Memory_Initialization,w
 10208  04B7  0081               	movwf	1
 10209                           
 10210                           ;MCU_B1.c: 770: if (product->Data[12] == 0xff && product->Data[13] == 0xff && product->D
      +                          ata[14] == 0xff) {
 10211  04B8  087D               	movf	_product,w
 10212  04B9  3E0C               	addlw	12
 10213  04BA  0086               	movwf	6
 10214  04BB  3001               	movlw	1	; select bank2/3
 10215  04BC  0087               	movwf	7
 10216  04BD  0801               	movf	1,w
 10217  04BE  3AFF               	xorlw	255
 10218  04BF  1D03               	skipz
 10219  04C0  0008               	return
 10220  04C1  087D               	movf	_product,w
 10221  04C2  3E0D               	addlw	13
 10222  04C3  0086               	movwf	6
 10223  04C4  3001               	movlw	1	; select bank2/3
 10224  04C5  0087               	movwf	7
 10225  04C6  0801               	movf	1,w
 10226  04C7  3AFF               	xorlw	255
 10227  04C8  1D03               	skipz
 10228  04C9  0008               	return
 10229  04CA  087D               	movf	_product,w
 10230  04CB  3E0E               	addlw	14
 10231  04CC  0086               	movwf	6
 10232  04CD  3001               	movlw	1	; select bank2/3
 10233  04CE  0087               	movwf	7
 10234  04CF  0801               	movf	1,w
 10235  04D0  3AFF               	xorlw	255
 10236  04D1  1D03               	skipz
 10237  04D2  0008               	return
 10238                           
 10239                           ;MCU_B1.c: 771: myMain->FirstOpen = 1;
 10240  04D3  0021               	movlb	1	; select bank1
 10241  04D4  086B               	movf	_myMain^(0+128),w
 10242  04D5  0086               	movwf	6
 10243  04D6  3001               	movlw	1	; select bank2/3
 10244  04D7  0087               	movwf	7
 10245  04D8  1681               	bsf	1,5
 10246                           
 10247                           ;MCU_B1.c: 772: myMain->First = 1;
 10248  04D9  086B               	movf	_myMain^(0+128),w
 10249  04DA  0086               	movwf	6
 10250  04DB  3001               	movlw	1	; select bank2/3
 10251  04DC  0087               	movwf	7
 10252  04DD  1781               	bsf	1,7
 10253                           
 10254                           ;MCU_B1.c: 773: }
 10255                           ;MCU_B1.c: 774: } else {
 10256  04DE  0008               	return
 10257  04DF                     l7008:	
 10258                           
 10259                           ;MCU_B1.c: 775: i = setPercentValue(((char)((100-70)*0.8)));
 10260  04DF  3018               	movlw	24
 10261  04E0  3196  262A  3184   	fcall	_setPercentValue
 10262  04E3  0020               	movlb	0	; select bank0
 10263  04E4  00DD               	movwf	??_Flash_Memory_Initialization
 10264  04E5  085D               	movf	??_Flash_Memory_Initialization,w
 10265  04E6  00DE               	movwf	Flash_Memory_Initialization@i
 10266                           
 10267                           ;MCU_B1.c: 776: Memory->Data[0]=0xff;
 10268  04E7  30FF               	movlw	255
 10269  04E8  00DD               	movwf	??_Flash_Memory_Initialization
 10270  04E9  0021               	movlb	1	; select bank1
 10271  04EA  086C               	movf	_Memory^(0+128),w
 10272  04EB  0086               	movwf	6
 10273  04EC  3002               	movlw	2	; select bank4/5
 10274  04ED  0087               	movwf	7
 10275  04EE  0020               	movlb	0	; select bank0
 10276  04EF  085D               	movf	??_Flash_Memory_Initialization,w
 10277  04F0  0081               	movwf	1
 10278                           
 10279                           ;MCU_B1.c: 777: Memory->Data[1]=0xff;
 10280  04F1  30FF               	movlw	255
 10281  04F2  00DD               	movwf	??_Flash_Memory_Initialization
 10282  04F3  0021               	movlb	1	; select bank1
 10283  04F4  0A6C               	incf	_Memory^(0+128),w
 10284  04F5  0086               	movwf	6
 10285  04F6  3002               	movlw	2	; select bank4/5
 10286  04F7  0087               	movwf	7
 10287  04F8  0020               	movlb	0	; select bank0
 10288  04F9  085D               	movf	??_Flash_Memory_Initialization,w
 10289  04FA  0081               	movwf	1
 10290                           
 10291                           ;MCU_B1.c: 778: Memory->Data[2]=0xff;
 10292  04FB  30FF               	movlw	255
 10293  04FC  00DD               	movwf	??_Flash_Memory_Initialization
 10294  04FD  0021               	movlb	1	; select bank1
 10295  04FE  086C               	movf	_Memory^(0+128),w
 10296  04FF  3E02               	addlw	2
 10297  0500  0086               	movwf	6
 10298  0501  3002               	movlw	2	; select bank4/5
 10299  0502  0087               	movwf	7
 10300  0503  0020               	movlb	0	; select bank0
 10301  0504  085D               	movf	??_Flash_Memory_Initialization,w
 10302  0505  0081               	movwf	1
 10303                           
 10304                           ;MCU_B1.c: 779: Memory->Data[3]=0xff;
 10305  0506  30FF               	movlw	255
 10306  0507  00DD               	movwf	??_Flash_Memory_Initialization
 10307  0508  0021               	movlb	1	; select bank1
 10308  0509  086C               	movf	_Memory^(0+128),w
 10309  050A  3E03               	addlw	3
 10310  050B  0086               	movwf	6
 10311  050C  3002               	movlw	2	; select bank4/5
 10312  050D  0087               	movwf	7
 10313  050E  0020               	movlb	0	; select bank0
 10314  050F  085D               	movf	??_Flash_Memory_Initialization,w
 10315  0510  0081               	movwf	1
 10316                           
 10317                           ;MCU_B1.c: 780: Memory->Data[4]=0xff;
 10318  0511  30FF               	movlw	255
 10319  0512  00DD               	movwf	??_Flash_Memory_Initialization
 10320  0513  0021               	movlb	1	; select bank1
 10321  0514  086C               	movf	_Memory^(0+128),w
 10322  0515  3E04               	addlw	4
 10323  0516  0086               	movwf	6
 10324  0517  3002               	movlw	2	; select bank4/5
 10325  0518  0087               	movwf	7
 10326  0519  0020               	movlb	0	; select bank0
 10327  051A  085D               	movf	??_Flash_Memory_Initialization,w
 10328  051B  0081               	movwf	1
 10329                           
 10330                           ;MCU_B1.c: 781: Memory->Data[5]=0xff;
 10331  051C  30FF               	movlw	255
 10332  051D  00DD               	movwf	??_Flash_Memory_Initialization
 10333  051E  0021               	movlb	1	; select bank1
 10334  051F  086C               	movf	_Memory^(0+128),w
 10335  0520  3E05               	addlw	5
 10336  0521  0086               	movwf	6
 10337  0522  3002               	movlw	2	; select bank4/5
 10338  0523  0087               	movwf	7
 10339  0524  0020               	movlb	0	; select bank0
 10340  0525  085D               	movf	??_Flash_Memory_Initialization,w
 10341  0526  0081               	movwf	1
 10342                           
 10343                           ;MCU_B1.c: 782: Memory->Data[31]=0xaa;
 10344  0527  30AA               	movlw	170
 10345  0528  00DD               	movwf	??_Flash_Memory_Initialization
 10346  0529  0021               	movlb	1	; select bank1
 10347  052A  086C               	movf	_Memory^(0+128),w
 10348  052B  3E1F               	addlw	31
 10349  052C  0086               	movwf	6
 10350  052D  3002               	movlw	2	; select bank4/5
 10351  052E  0087               	movwf	7
 10352  052F  0020               	movlb	0	; select bank0
 10353  0530  085D               	movf	??_Flash_Memory_Initialization,w
 10354  0531  0081               	movwf	1
 10355                           
 10356                           ;MCU_B1.c: 783: product->Data[21] = i;
 10357  0532  085E               	movf	Flash_Memory_Initialization@i,w
 10358  0533  00DD               	movwf	??_Flash_Memory_Initialization
 10359  0534  087D               	movf	_product,w
 10360  0535  3E15               	addlw	21
 10361  0536  0086               	movwf	6
 10362  0537  3001               	movlw	1	; select bank2/3
 10363  0538  0087               	movwf	7
 10364  0539  085D               	movf	??_Flash_Memory_Initialization,w
 10365  053A  0081               	movwf	1
 10366                           
 10367                           ;MCU_B1.c: 784: product->Data[22] = i;
 10368  053B  085E               	movf	Flash_Memory_Initialization@i,w
 10369  053C  00DD               	movwf	??_Flash_Memory_Initialization
 10370  053D  087D               	movf	_product,w
 10371  053E  3E16               	addlw	22
 10372  053F  0086               	movwf	6
 10373  0540  3001               	movlw	1	; select bank2/3
 10374  0541  0087               	movwf	7
 10375  0542  085D               	movf	??_Flash_Memory_Initialization,w
 10376  0543  0081               	movwf	1
 10377                           
 10378                           ;MCU_B1.c: 785: product->Data[23] = i;
 10379  0544  085E               	movf	Flash_Memory_Initialization@i,w
 10380  0545  00DD               	movwf	??_Flash_Memory_Initialization
 10381  0546  087D               	movf	_product,w
 10382  0547  3E17               	addlw	23
 10383  0548  0086               	movwf	6
 10384  0549  3001               	movlw	1	; select bank2/3
 10385  054A  0087               	movwf	7
 10386  054B  085D               	movf	??_Flash_Memory_Initialization,w
 10387  054C  0081               	movwf	1
 10388                           
 10389                           ;MCU_B1.c: 786: GIE = 0;
 10390  054D  138B               	bcf	11,7	;volatile
 10391                           
 10392                           ;MCU_B1.c: 787: Flash_Memory_Write();
 10393  054E  3194  2403         	fcall	_Flash_Memory_Write
 10394                           
 10395                           ;MCU_B1.c: 788: GIE = 1;
 10396  0550  178B               	bsf	11,7	;volatile
 10397                           
 10398                           ;MCU_B1.c: 789: myMain->FirstOpen = 1;
 10399  0551  0021               	movlb	1	; select bank1
 10400  0552  086B               	movf	_myMain^(0+128),w
 10401  0553  0086               	movwf	6
 10402  0554  3001               	movlw	1	; select bank2/3
 10403  0555  0087               	movwf	7
 10404  0556  1681               	bsf	1,5
 10405                           
 10406                           ;MCU_B1.c: 790: myMain->First = 1;
 10407  0557  086B               	movf	_myMain^(0+128),w
 10408  0558  0086               	movwf	6
 10409  0559  3001               	movlw	1	; select bank2/3
 10410  055A  0087               	movwf	7
 10411  055B  1781               	bsf	1,7
 10412  055C  0008               	return
 10413  055D                     __end_of_Flash_Memory_Initialization:	
 10414                           
 10415                           	psect	text56
 10416  1403                     __ptext56:	
 10417 ;; *************** function _Flash_Memory_Write *****************
 10418 ;; Defined at:
 10419 ;;		line 835 in file "../src/MCU_B1.c"
 10420 ;; Parameters:    Size  Location     Type
 10421 ;;		None
 10422 ;; Auto vars:     Size  Location     Type
 10423 ;;  i               1    1[BANK0 ] unsigned char 
 10424 ;; Return value:  Size  Location     Type
 10425 ;;		None               void
 10426 ;; Registers used:
 10427 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10428 ;; Tracked objects:
 10429 ;;		On entry : 0/0
 10430 ;;		On exit  : 0/0
 10431 ;;		Unchanged: 0/0
 10432 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10433 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10434 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10435 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10436 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10437 ;;Total ram usage:        2 bytes
 10438 ;; Hardware stack levels used:    1
 10439 ;; Hardware stack levels required when called:    6
 10440 ;; This function calls:
 10441 ;;		_Flash_Memory_Unlock
 10442 ;; This function is called by:
 10443 ;;		_Flash_Memory_Initialization
 10444 ;;		_Flash_Memory_Modify
 10445 ;; This function uses a non-reentrant model
 10446 ;;
 10447                           
 10448                           
 10449                           ;psect for function _Flash_Memory_Write
 10450  1403                     _Flash_Memory_Write:	
 10451                           
 10452                           ;MCU_B1.c: 836: char i;
 10453                           ;MCU_B1.c: 837: CFGS = 0;
 10454                           
 10455                           ;incstack = 0
 10456                           ; Regs used in _Flash_Memory_Write: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10457  1403  0023               	movlb	3	; select bank3
 10458  1404  1315               	bcf	21,6	;volatile
 10459                           
 10460                           ;MCU_B1.c: 838: PMADRH = 0x30;
 10461  1405  3030               	movlw	48
 10462  1406  0092               	movwf	18	;volatile
 10463                           
 10464                           ;MCU_B1.c: 839: PMDATH = 0;
 10465  1407  0194               	clrf	20	;volatile
 10466                           
 10467                           ;MCU_B1.c: 840: FREE = 0;
 10468  1408  1215               	bcf	21,4	;volatile
 10469                           
 10470                           ;MCU_B1.c: 841: LWLO = 1;
 10471  1409  1695               	bsf	21,5	;volatile
 10472                           
 10473                           ;MCU_B1.c: 842: WREN = 1;
 10474  140A  1515               	bsf	21,2	;volatile
 10475                           
 10476                           ;MCU_B1.c: 843: for (i = 0; i < 32; i++) {
 10477  140B  0020               	movlb	0	; select bank0
 10478  140C  01A1               	clrf	Flash_Memory_Write@i
 10479  140D  3020               	movlw	32
 10480  140E  0221               	subwf	Flash_Memory_Write@i,w
 10481  140F  1803               	btfsc	3,0
 10482  1410  2C2D               	goto	l1407
 10483  1411                     l6122:	
 10484                           
 10485                           ;MCU_B1.c: 844: PMADRL = i;
 10486  1411  0821               	movf	Flash_Memory_Write@i,w
 10487  1412  0023               	movlb	3	; select bank3
 10488  1413  0091               	movwf	17	;volatile
 10489                           
 10490                           ;MCU_B1.c: 845: PMDATL = Memory->Data[i];
 10491  1414  0020               	movlb	0	; select bank0
 10492  1415  0821               	movf	Flash_Memory_Write@i,w
 10493  1416  0021               	movlb	1	; select bank1
 10494  1417  076C               	addwf	_Memory^(0+128),w
 10495  1418  0020               	movlb	0	; select bank0
 10496  1419  00A0               	movwf	??_Flash_Memory_Write
 10497  141A  0820               	movf	??_Flash_Memory_Write,w
 10498  141B  0086               	movwf	6
 10499  141C  3002               	movlw	2	; select bank4/5
 10500  141D  0087               	movwf	7
 10501  141E  0801               	movf	1,w
 10502  141F  0023               	movlb	3	; select bank3
 10503  1420  0093               	movwf	19	;volatile
 10504                           
 10505                           ;MCU_B1.c: 846: Flash_Memory_Unlock();
 10506  1421  319E  2629  3194   	fcall	_Flash_Memory_Unlock
 10507  1424  3001               	movlw	1
 10508  1425  0020               	movlb	0	; select bank0
 10509  1426  00A0               	movwf	??_Flash_Memory_Write
 10510  1427  0820               	movf	??_Flash_Memory_Write,w
 10511  1428  07A1               	addwf	Flash_Memory_Write@i,f
 10512  1429  3020               	movlw	32
 10513  142A  0221               	subwf	Flash_Memory_Write@i,w
 10514  142B  1C03               	skipc
 10515  142C  2C11               	goto	l6122
 10516  142D                     l1407:	
 10517                           
 10518                           ;MCU_B1.c: 847: }
 10519                           ;MCU_B1.c: 848: LWLO = 0;
 10520  142D  0023               	movlb	3	; select bank3
 10521  142E  1295               	bcf	21,5	;volatile
 10522                           
 10523                           ;MCU_B1.c: 849: Flash_Memory_Unlock();
 10524  142F  319E  2629         	fcall	_Flash_Memory_Unlock
 10525                           
 10526                           ;MCU_B1.c: 850: WREN = 0;
 10527  1431  0023               	movlb	3	; select bank3
 10528  1432  1115               	bcf	21,2	;volatile
 10529  1433  0008               	return
 10530  1434                     __end_of_Flash_Memory_Write:	
 10531                           
 10532                           	psect	text57
 10533  1E29                     __ptext57:	
 10534 ;; *************** function _Flash_Memory_Unlock *****************
 10535 ;; Defined at:
 10536 ;;		line 814 in file "../src/MCU_B1.c"
 10537 ;; Parameters:    Size  Location     Type
 10538 ;;		None
 10539 ;; Auto vars:     Size  Location     Type
 10540 ;;		None
 10541 ;; Return value:  Size  Location     Type
 10542 ;;		None               void
 10543 ;; Registers used:
 10544 ;;		wreg
 10545 ;; Tracked objects:
 10546 ;;		On entry : 0/0
 10547 ;;		On exit  : 0/0
 10548 ;;		Unchanged: 0/0
 10549 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10550 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10551 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10552 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10553 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10554 ;;Total ram usage:        0 bytes
 10555 ;; Hardware stack levels used:    1
 10556 ;; Hardware stack levels required when called:    5
 10557 ;; This function calls:
 10558 ;;		Nothing
 10559 ;; This function is called by:
 10560 ;;		_Flash_Memory_Write
 10561 ;;		_Flash_Memory_Erasing
 10562 ;; This function uses a non-reentrant model
 10563 ;;
 10564                           
 10565                           
 10566                           ;psect for function _Flash_Memory_Unlock
 10567  1E29                     _Flash_Memory_Unlock:	
 10568                           
 10569                           ;MCU_B1.c: 815: PMCON2 = 0x55;
 10570                           
 10571                           ;incstack = 0
 10572                           ; Regs used in _Flash_Memory_Unlock: [wreg]
 10573  1E29  3055               	movlw	85
 10574  1E2A  0023               	movlb	3	; select bank3
 10575  1E2B  0096               	movwf	22	;volatile
 10576                           
 10577                           ;MCU_B1.c: 816: PMCON2 = 0xaa;
 10578  1E2C  30AA               	movlw	170
 10579  1E2D  0096               	movwf	22	;volatile
 10580                           
 10581                           ;MCU_B1.c: 817: WR = 1;
 10582  1E2E  1495               	bsf	21,1	;volatile
 10583                           
 10584                           ;MCU_B1.c: 818: __nop();
 10585  1E2F  0000               	nop
 10586                           
 10587                           ;MCU_B1.c: 819: __nop();
 10588  1E30  0000               	nop
 10589  1E31  0008               	return
 10590  1E32                     __end_of_Flash_Memory_Unlock:	
 10591                           
 10592                           	psect	text58
 10593  112C                     __ptext58:	
 10594 ;; *************** function _Flash_Memory_Read *****************
 10595 ;; Defined at:
 10596 ;;		line 823 in file "../src/MCU_B1.c"
 10597 ;; Parameters:    Size  Location     Type
 10598 ;;  address         1    wreg     unsigned char 
 10599 ;; Auto vars:     Size  Location     Type
 10600 ;;  address         1    2[BANK0 ] unsigned char 
 10601 ;;  ret             1    3[BANK0 ] unsigned char 
 10602 ;;  i               1    1[BANK0 ] unsigned char 
 10603 ;; Return value:  Size  Location     Type
 10604 ;;                  1    wreg      unsigned char 
 10605 ;; Registers used:
 10606 ;;		wreg, status,2
 10607 ;; Tracked objects:
 10608 ;;		On entry : 0/0
 10609 ;;		On exit  : 0/0
 10610 ;;		Unchanged: 0/0
 10611 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10612 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10613 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10614 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10615 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10616 ;;Total ram usage:        4 bytes
 10617 ;; Hardware stack levels used:    1
 10618 ;; Hardware stack levels required when called:    5
 10619 ;; This function calls:
 10620 ;;		Nothing
 10621 ;; This function is called by:
 10622 ;;		_Flash_Memory_Initialization
 10623 ;;		_Flash_Memory_Modify
 10624 ;; This function uses a non-reentrant model
 10625 ;;
 10626                           
 10627                           
 10628                           ;psect for function _Flash_Memory_Read
 10629  112C                     _Flash_Memory_Read:	
 10630                           
 10631                           ;incstack = 0
 10632                           ; Regs used in _Flash_Memory_Read: [wreg+status,2]
 10633                           ;Flash_Memory_Read@address stored from wreg
 10634  112C  0020               	movlb	0	; select bank0
 10635  112D  00A2               	movwf	Flash_Memory_Read@address
 10636                           
 10637                           ;MCU_B1.c: 824: char i, ret = 0;
 10638  112E  01A3               	clrf	Flash_Memory_Read@ret
 10639                           
 10640                           ;MCU_B1.c: 825: PMADRH = 0x30;
 10641  112F  3030               	movlw	48
 10642  1130  0023               	movlb	3	; select bank3
 10643  1131  0092               	movwf	18	;volatile
 10644                           
 10645                           ;MCU_B1.c: 826: PMADRL = address;
 10646  1132  0020               	movlb	0	; select bank0
 10647  1133  0822               	movf	Flash_Memory_Read@address,w
 10648  1134  0023               	movlb	3	; select bank3
 10649  1135  0091               	movwf	17	;volatile
 10650                           
 10651                           ;MCU_B1.c: 827: CFGS = 0;
 10652  1136  1315               	bcf	21,6	;volatile
 10653                           
 10654                           ;MCU_B1.c: 828: RD = 1;
 10655  1137  1415               	bsf	21,0	;volatile
 10656                           
 10657                           ;MCU_B1.c: 829: i = PMDATH;
 10658  1138  0814               	movf	20,w	;volatile
 10659  1139  0020               	movlb	0	; select bank0
 10660  113A  00A0               	movwf	??_Flash_Memory_Read
 10661  113B  0820               	movf	??_Flash_Memory_Read,w
 10662  113C  00A1               	movwf	Flash_Memory_Read@i
 10663                           
 10664                           ;MCU_B1.c: 830: ret = PMDATL;
 10665  113D  0023               	movlb	3	; select bank3
 10666  113E  0813               	movf	19,w	;volatile
 10667  113F  0020               	movlb	0	; select bank0
 10668  1140  00A0               	movwf	??_Flash_Memory_Read
 10669  1141  0820               	movf	??_Flash_Memory_Read,w
 10670  1142  00A3               	movwf	Flash_Memory_Read@ret
 10671                           
 10672                           ;MCU_B1.c: 831: return ret;
 10673  1143  0823               	movf	Flash_Memory_Read@ret,w
 10674  1144  0008               	return
 10675  1145                     __end_of_Flash_Memory_Read:	
 10676                           
 10677                           	psect	text59
 10678  1E67                     __ptext59:	
 10679 ;; *************** function _DimmerLights_Main *****************
 10680 ;; Defined at:
 10681 ;;		line 428 in file "../src/Dimmer_B1.c"
 10682 ;; Parameters:    Size  Location     Type
 10683 ;;		None
 10684 ;; Auto vars:     Size  Location     Type
 10685 ;;		None
 10686 ;; Return value:  Size  Location     Type
 10687 ;;		None               void
 10688 ;; Registers used:
 10689 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10690 ;; Tracked objects:
 10691 ;;		On entry : 0/0
 10692 ;;		On exit  : 0/0
 10693 ;;		Unchanged: 0/0
 10694 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10695 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10696 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10697 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10698 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10699 ;;Total ram usage:        0 bytes
 10700 ;; Hardware stack levels used:    1
 10701 ;; Hardware stack levels required when called:   11
 10702 ;; This function calls:
 10703 ;;		_DimmerLights_Close
 10704 ;;		_setDimmerLights_Main
 10705 ;; This function is called by:
 10706 ;;		_main
 10707 ;; This function uses a non-reentrant model
 10708 ;;
 10709                           
 10710                           
 10711                           ;psect for function _DimmerLights_Main
 10712  1E67                     _DimmerLights_Main:	
 10713                           
 10714                           ;Dimmer_B1.c: 431: setDimmerLights_Main(1);
 10715                           
 10716                           ;incstack = 0
 10717                           ; Regs used in _DimmerLights_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10718  1E67  3001               	movlw	1
 10719  1E68  318C  24AC  319E   	fcall	_setDimmerLights_Main
 10720                           
 10721                           ;Dimmer_B1.c: 435: setDimmerLights_Main(2);
 10722  1E6B  3002               	movlw	2
 10723  1E6C  318C  24AC  319E   	fcall	_setDimmerLights_Main
 10724                           
 10725                           ;Dimmer_B1.c: 442: DimmerLights_Close();
 10726  1E6F  319F  27EC         	fcall	_DimmerLights_Close
 10727  1E71  0008               	return
 10728  1E72                     __end_of_DimmerLights_Main:	
 10729                           
 10730                           	psect	text60
 10731  0CAC                     __ptext60:	
 10732 ;; *************** function _setDimmerLights_Main *****************
 10733 ;; Defined at:
 10734 ;;		line 446 in file "../src/Dimmer_B1.c"
 10735 ;; Parameters:    Size  Location     Type
 10736 ;;  lights          1    wreg     unsigned char 
 10737 ;; Auto vars:     Size  Location     Type
 10738 ;;  lights          1   70[BANK0 ] unsigned char 
 10739 ;;  clear           1   69[BANK0 ] unsigned char 
 10740 ;; Return value:  Size  Location     Type
 10741 ;;		None               void
 10742 ;; Registers used:
 10743 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10744 ;; Tracked objects:
 10745 ;;		On entry : 0/0
 10746 ;;		On exit  : 0/0
 10747 ;;		Unchanged: 0/0
 10748 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10749 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10750 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10751 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10752 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10753 ;;Total ram usage:        2 bytes
 10754 ;; Hardware stack levels used:    1
 10755 ;; Hardware stack levels required when called:   10
 10756 ;; This function calls:
 10757 ;;		_DimmerLightsPointSelect
 10758 ;;		_setBuz
 10759 ;;		_setDimmerLights
 10760 ;;		_setDimmerLights_Adj
 10761 ;; This function is called by:
 10762 ;;		_DimmerLights_Main
 10763 ;; This function uses a non-reentrant model
 10764 ;;
 10765                           
 10766                           
 10767                           ;psect for function _setDimmerLights_Main
 10768  0CAC                     _setDimmerLights_Main:	
 10769                           
 10770                           ;incstack = 0
 10771                           ; Regs used in _setDimmerLights_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10772                           ;setDimmerLights_Main@lights stored from wreg
 10773  0CAC  0020               	movlb	0	; select bank0
 10774  0CAD  00E6               	movwf	setDimmerLights_Main@lights
 10775                           
 10776                           ;Dimmer_B1.c: 447: char clear = 1;
 10777  0CAE  01E5               	clrf	setDimmerLights_Main@clear
 10778  0CAF  0AE5               	incf	setDimmerLights_Main@clear,f
 10779                           
 10780                           ;Dimmer_B1.c: 448: DimmerLightsPointSelect(lights);
 10781  0CB0  0866               	movf	setDimmerLights_Main@lights,w
 10782  0CB1  319F  27B1  318C   	fcall	_DimmerLightsPointSelect
 10783                           
 10784                           ;Dimmer_B1.c: 461: if (lights == 1) {
 10785  0CB4  0020               	movlb	0	; select bank0
 10786  0CB5  0866               	movf	setDimmerLights_Main@lights,w
 10787  0CB6  3A01               	xorlw	1
 10788  0CB7  1D03               	skipz
 10789  0CB8  2CC0               	goto	l6528
 10790                           
 10791                           ;Dimmer_B1.c: 462: clear = (DimmerLights2.Clear == 0) ? 0 : 1;
 10792  0CB9  3000               	movlw	0
 10793  0CBA  0022               	movlb	2	; select bank2
 10794  0CBB  1938               	btfsc	(_DimmerLights2^(0+256)+9),2
 10795  0CBC  3001               	movlw	1
 10796  0CBD  0020               	movlb	0	; select bank0
 10797  0CBE  00E5               	movwf	setDimmerLights_Main@clear
 10798                           
 10799                           ;Dimmer_B1.c: 463: } else if (lights == 2) {
 10800  0CBF  2CCA               	goto	l6532
 10801  0CC0                     l6528:	
 10802  0CC0  0866               	movf	setDimmerLights_Main@lights,w
 10803  0CC1  3A02               	xorlw	2
 10804  0CC2  1D03               	skipz
 10805  0CC3  2CCA               	goto	l6532
 10806                           
 10807                           ;Dimmer_B1.c: 464: clear = (DimmerLights1.Clear == 0) ? 0 : 1;
 10808  0CC4  3000               	movlw	0
 10809  0CC5  0022               	movlb	2	; select bank2
 10810  0CC6  1929               	btfsc	(_DimmerLights1^(0+256)+9),2
 10811  0CC7  3001               	movlw	1
 10812  0CC8  0020               	movlb	0	; select bank0
 10813  0CC9  00E5               	movwf	setDimmerLights_Main@clear
 10814  0CCA                     l6532:	
 10815                           
 10816                           ;Dimmer_B1.c: 465: }
 10817                           ;Dimmer_B1.c: 468: if (DimmerLights->Trigger == 1) {
 10818  0CCA  0879               	movf	_DimmerLights,w
 10819  0CCB  3E08               	addlw	8
 10820  0CCC  0086               	movwf	6
 10821  0CCD  3001               	movlw	1	; select bank2/3
 10822  0CCE  0087               	movwf	7
 10823  0CCF  1D01               	btfss	1,2
 10824  0CD0  2CF4               	goto	l6546
 10825                           
 10826                           ;Dimmer_B1.c: 469: if (clear == 1) {
 10827  0CD1  0865               	movf	setDimmerLights_Main@clear,w
 10828  0CD2  3A01               	xorlw	1
 10829  0CD3  1D03               	skipz
 10830  0CD4  0008               	return
 10831                           
 10832                           ;Dimmer_B1.c: 470: if (DimmerLights->Switch == 1) {
 10833  0CD5  0879               	movf	_DimmerLights,w
 10834  0CD6  3E08               	addlw	8
 10835  0CD7  0086               	movwf	6
 10836  0CD8  3001               	movlw	1	; select bank2/3
 10837  0CD9  0087               	movwf	7
 10838  0CDA  1C81               	btfss	1,1
 10839  0CDB  2CE8               	goto	l6542
 10840                           
 10841                           ;Dimmer_B1.c: 471: DimmerLights->Trigger = 0;
 10842  0CDC  0879               	movf	_DimmerLights,w
 10843  0CDD  3E08               	addlw	8
 10844  0CDE  0086               	movwf	6
 10845  0CDF  3001               	movlw	1	; select bank2/3
 10846  0CE0  0087               	movwf	7
 10847  0CE1  1101               	bcf	1,2
 10848                           
 10849                           ;Dimmer_B1.c: 472: setDimmerLights(lights, 1);
 10850  0CE2  01A4               	clrf	setDimmerLights@status
 10851  0CE3  0AA4               	incf	setDimmerLights@status,f
 10852  0CE4  0866               	movf	setDimmerLights_Main@lights,w
 10853  0CE5  318D  2527         	fcall	_setDimmerLights
 10854                           
 10855                           ;Dimmer_B1.c: 473: } else {
 10856  0CE7  0008               	return
 10857  0CE8                     l6542:	
 10858                           
 10859                           ;Dimmer_B1.c: 474: DimmerLights->Trigger = 0;
 10860  0CE8  0879               	movf	_DimmerLights,w
 10861  0CE9  3E08               	addlw	8
 10862  0CEA  0086               	movwf	6
 10863  0CEB  3001               	movlw	1	; select bank2/3
 10864  0CEC  0087               	movwf	7
 10865  0CED  1101               	bcf	1,2
 10866                           
 10867                           ;Dimmer_B1.c: 475: setDimmerLights(lights, 0);
 10868  0CEE  0020               	movlb	0	; select bank0
 10869  0CEF  01A4               	clrf	setDimmerLights@status
 10870  0CF0  0866               	movf	setDimmerLights_Main@lights,w
 10871  0CF1  318D  2527         	fcall	_setDimmerLights
 10872                           
 10873                           ;Dimmer_B1.c: 476: }
 10874                           ;Dimmer_B1.c: 480: }
 10875                           ;Dimmer_B1.c: 481: } else {
 10876  0CF3  0008               	return
 10877  0CF4                     l6546:	
 10878                           
 10879                           ;Dimmer_B1.c: 482: if (DimmerLights->TriggerAdj == 1) {
 10880  0CF4  0879               	movf	_DimmerLights,w
 10881  0CF5  3E08               	addlw	8
 10882  0CF6  0086               	movwf	6
 10883  0CF7  3001               	movlw	1	; select bank2/3
 10884  0CF8  0087               	movwf	7
 10885  0CF9  1E01               	btfss	1,4
 10886  0CFA  0008               	return
 10887                           
 10888                           ;Dimmer_B1.c: 483: if (clear == 1) {
 10889  0CFB  0020               	movlb	0	; select bank0
 10890  0CFC  0865               	movf	setDimmerLights_Main@clear,w
 10891  0CFD  3A01               	xorlw	1
 10892  0CFE  1D03               	skipz
 10893  0CFF  0008               	return
 10894                           
 10895                           ;Dimmer_B1.c: 484: DimmerLightsPointSelect(lights);
 10896  0D00  0866               	movf	setDimmerLights_Main@lights,w
 10897  0D01  319F  27B1  318C   	fcall	_DimmerLightsPointSelect
 10898                           
 10899                           ;Dimmer_B1.c: 485: DimmerLights->TriggerAdj = 0;
 10900  0D04  0879               	movf	_DimmerLights,w
 10901  0D05  3E08               	addlw	8
 10902  0D06  0086               	movwf	6
 10903  0D07  3001               	movlw	1	; select bank2/3
 10904  0D08  0087               	movwf	7
 10905  0D09  1201               	bcf	1,4
 10906                           
 10907                           ;Dimmer_B1.c: 486: if (DimmerLights->AdjGo == 1) {
 10908  0D0A  0879               	movf	_DimmerLights,w
 10909  0D0B  3E08               	addlw	8
 10910  0D0C  0086               	movwf	6
 10911  0D0D  3001               	movlw	1	; select bank2/3
 10912  0D0E  0087               	movwf	7
 10913  0D0F  1D81               	btfss	1,3
 10914  0D10  2D21               	goto	l6558
 10915                           
 10916                           ;Dimmer_B1.c: 487: setDimmerLights_Adj(lights, 1);
 10917  0D11  0020               	movlb	0	; select bank0
 10918  0D12  01E2               	clrf	setDimmerLights_Adj@status
 10919  0D13  0AE2               	incf	setDimmerLights_Adj@status,f
 10920  0D14  0866               	movf	setDimmerLights_Main@lights,w
 10921  0D15  3194  249E  318C   	fcall	_setDimmerLights_Adj
 10922                           
 10923                           ;Dimmer_B1.c: 488: setBuz(1, 100);
 10924  0D18  3064               	movlw	100
 10925  0D19  0020               	movlb	0	; select bank0
 10926  0D1A  00A9               	movwf	setBuz@time
 10927  0D1B  3000               	movlw	0
 10928  0D1C  00AA               	movwf	setBuz@time+1
 10929  0D1D  3001               	movlw	1
 10930  0D1E  318B  23BC         	fcall	_setBuz
 10931                           
 10932                           ;Dimmer_B1.c: 489: } else {
 10933  0D20  0008               	return
 10934  0D21                     l6558:	
 10935                           
 10936                           ;Dimmer_B1.c: 490: setDimmerLights_Adj(lights, 0);
 10937  0D21  0020               	movlb	0	; select bank0
 10938  0D22  01E2               	clrf	setDimmerLights_Adj@status
 10939  0D23  0866               	movf	setDimmerLights_Main@lights,w
 10940  0D24  3194  249E         	fcall	_setDimmerLights_Adj
 10941  0D26  0008               	return
 10942  0D27                     __end_of_setDimmerLights_Main:	
 10943                           
 10944                           	psect	text61
 10945  149E                     __ptext61:	
 10946 ;; *************** function _setDimmerLights_Adj *****************
 10947 ;; Defined at:
 10948 ;;		line 672 in file "../src/Dimmer_B1.c"
 10949 ;; Parameters:    Size  Location     Type
 10950 ;;  lights          1    wreg     unsigned char 
 10951 ;;  status          1   66[BANK0 ] unsigned char 
 10952 ;; Auto vars:     Size  Location     Type
 10953 ;;  lights          1   68[BANK0 ] unsigned char 
 10954 ;; Return value:  Size  Location     Type
 10955 ;;		None               void
 10956 ;; Registers used:
 10957 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10958 ;; Tracked objects:
 10959 ;;		On entry : 0/0
 10960 ;;		On exit  : 0/0
 10961 ;;		Unchanged: 0/0
 10962 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10963 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10964 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10965 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10966 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10967 ;;Total ram usage:        3 bytes
 10968 ;; Hardware stack levels used:    1
 10969 ;; Hardware stack levels required when called:    9
 10970 ;; This function calls:
 10971 ;;		_DimmerLightsPointSelect
 10972 ;;		_setRF_DimmerLights
 10973 ;;		_setTxData
 10974 ;; This function is called by:
 10975 ;;		_setDimmerLights_Main
 10976 ;; This function uses a non-reentrant model
 10977 ;;
 10978                           
 10979                           
 10980                           ;psect for function _setDimmerLights_Adj
 10981  149E                     _setDimmerLights_Adj:	
 10982                           
 10983                           ;incstack = 0
 10984                           ; Regs used in _setDimmerLights_Adj: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10985                           ;setDimmerLights_Adj@lights stored from wreg
 10986  149E  0020               	movlb	0	; select bank0
 10987  149F  00E4               	movwf	setDimmerLights_Adj@lights
 10988                           
 10989                           ;Dimmer_B1.c: 673: DimmerLightsPointSelect(lights);
 10990  14A0  0864               	movf	setDimmerLights_Adj@lights,w
 10991  14A1  319F  27B1  3194   	fcall	_DimmerLightsPointSelect
 10992                           
 10993                           ;Dimmer_B1.c: 674: if (status == 1) {
 10994  14A4  0020               	movlb	0	; select bank0
 10995  14A5  0862               	movf	setDimmerLights_Adj@status,w
 10996  14A6  3A01               	xorlw	1
 10997  14A7  1D03               	skipz
 10998  14A8  2CB4               	goto	l6080
 10999                           
 11000                           ;Dimmer_B1.c: 675: DimmerLights->AdjFlag = 1;
 11001  14A9  0879               	movf	_DimmerLights,w
 11002  14AA  0086               	movwf	6
 11003  14AB  3001               	movlw	1	; select bank2/3
 11004  14AC  0087               	movwf	7
 11005  14AD  1581               	bsf	1,3
 11006                           
 11007                           ;Dimmer_B1.c: 676: DimmerLights->Signal = 1;
 11008  14AE  0879               	movf	_DimmerLights,w
 11009  14AF  0086               	movwf	6
 11010  14B0  3001               	movlw	1	; select bank2/3
 11011  14B1  0087               	movwf	7
 11012  14B2  1481               	bsf	1,1
 11013                           
 11014                           ;Dimmer_B1.c: 677: } else {
 11015  14B3  0008               	return
 11016  14B4                     l6080:	
 11017                           
 11018                           ;Dimmer_B1.c: 678: if (DimmerLights->AdjFlag) {
 11019  14B4  0879               	movf	_DimmerLights,w
 11020  14B5  0086               	movwf	6
 11021  14B6  3001               	movlw	1	; select bank2/3
 11022  14B7  0087               	movwf	7
 11023  14B8  1D81               	btfss	1,3
 11024  14B9  0008               	return
 11025                           
 11026                           ;Dimmer_B1.c: 680: DimmerLights->Signal = 0;
 11027  14BA  0879               	movf	_DimmerLights,w
 11028  14BB  0086               	movwf	6
 11029  14BC  3001               	movlw	1	; select bank2/3
 11030  14BD  0087               	movwf	7
 11031  14BE  1081               	bcf	1,1
 11032                           
 11033                           ;Dimmer_B1.c: 681: DimmerLights->AdjFlag = 0;
 11034  14BF  0879               	movf	_DimmerLights,w
 11035  14C0  0086               	movwf	6
 11036  14C1  3001               	movlw	1	; select bank2/3
 11037  14C2  0087               	movwf	7
 11038  14C3  1181               	bcf	1,3
 11039                           
 11040                           ;Dimmer_B1.c: 682: ;;
 11041                           ;Dimmer_B1.c: 683: DimmerLights->MaxmumValue = DimmerLights->DimmingValue;
 11042  14C4  0879               	movf	_DimmerLights,w
 11043  14C5  3E04               	addlw	4
 11044  14C6  0086               	movwf	6
 11045  14C7  3001               	movlw	1	; select bank2/3
 11046  14C8  0087               	movwf	7
 11047  14C9  0801               	movf	1,w
 11048  14CA  00E3               	movwf	??_setDimmerLights_Adj
 11049  14CB  0879               	movf	_DimmerLights,w
 11050  14CC  3E05               	addlw	5
 11051  14CD  0086               	movwf	6
 11052  14CE  3001               	movlw	1	; select bank2/3
 11053  14CF  0087               	movwf	7
 11054  14D0  0863               	movf	??_setDimmerLights_Adj,w
 11055  14D1  0081               	movwf	1
 11056                           
 11057                           ;Dimmer_B1.c: 691: setRF_DimmerLights(lights, 1);
 11058  14D2  01DD               	clrf	setRF_DimmerLights@on
 11059  14D3  0ADD               	incf	setRF_DimmerLights@on,f
 11060  14D4  0864               	movf	setDimmerLights_Adj@lights,w
 11061  14D5  3189  218C  3194   	fcall	_setRF_DimmerLights
 11062                           
 11063                           ;Dimmer_B1.c: 692: setTxData(1);
 11064  14D8  3001               	movlw	1
 11065  14D9  318E  26BD         	fcall	_setTxData
 11066  14DB  0008               	return
 11067  14DC                     __end_of_setDimmerLights_Adj:	
 11068                           
 11069                           	psect	text62
 11070  0D27                     __ptext62:	
 11071 ;; *************** function _setDimmerLights *****************
 11072 ;; Defined at:
 11073 ;;		line 618 in file "../src/Dimmer_B1.c"
 11074 ;; Parameters:    Size  Location     Type
 11075 ;;  lights          1    wreg     unsigned char 
 11076 ;;  status          1    4[BANK0 ] unsigned char 
 11077 ;; Auto vars:     Size  Location     Type
 11078 ;;  lights          1    6[BANK0 ] unsigned char 
 11079 ;; Return value:  Size  Location     Type
 11080 ;;		None               void
 11081 ;; Registers used:
 11082 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11083 ;; Tracked objects:
 11084 ;;		On entry : 0/0
 11085 ;;		On exit  : 0/0
 11086 ;;		Unchanged: 0/0
 11087 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11088 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11089 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11090 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11091 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11092 ;;Total ram usage:        3 bytes
 11093 ;; Hardware stack levels used:    1
 11094 ;; Hardware stack levels required when called:    7
 11095 ;; This function calls:
 11096 ;;		_DimmerLightsPointSelect
 11097 ;;		_setLED
 11098 ;;		_setMemory_GO
 11099 ;; This function is called by:
 11100 ;;		_setDimmerLights_Main
 11101 ;;		_setControl_Lights_Table
 11102 ;; This function uses a non-reentrant model
 11103 ;;
 11104                           
 11105                           
 11106                           ;psect for function _setDimmerLights
 11107  0D27                     _setDimmerLights:	
 11108                           
 11109                           ;incstack = 0
 11110                           ; Regs used in _setDimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11111                           ;setDimmerLights@lights stored from wreg
 11112  0D27  0020               	movlb	0	; select bank0
 11113  0D28  00A6               	movwf	setDimmerLights@lights
 11114                           
 11115                           ;Dimmer_B1.c: 619: DimmerLightsPointSelect(lights);
 11116  0D29  0826               	movf	setDimmerLights@lights,w
 11117  0D2A  319F  27B1  318D   	fcall	_DimmerLightsPointSelect
 11118                           
 11119                           ;Dimmer_B1.c: 620: Dimmer->Load = lights;
 11120  0D2D  0020               	movlb	0	; select bank0
 11121  0D2E  0826               	movf	setDimmerLights@lights,w
 11122  0D2F  00A5               	movwf	??_setDimmerLights
 11123  0D30  0021               	movlb	1	; select bank1
 11124  0D31  0A39               	incf	_Dimmer^(0+128),w
 11125  0D32  0086               	movwf	6
 11126  0D33  0187               	clrf	7
 11127  0D34  0020               	movlb	0	; select bank0
 11128  0D35  0825               	movf	??_setDimmerLights,w
 11129  0D36  0081               	movwf	1
 11130                           
 11131                           ;Dimmer_B1.c: 621: if (status) {
 11132  0D37  0824               	movf	setDimmerLights@status,w
 11133  0D38  1903               	btfsc	3,2
 11134  0D39  2D7A               	goto	l5800
 11135                           
 11136                           ;Dimmer_B1.c: 622: DimmerLights->Status = 1;
 11137  0D3A  0879               	movf	_DimmerLights,w
 11138  0D3B  0086               	movwf	6
 11139  0D3C  3001               	movlw	1	; select bank2/3
 11140  0D3D  0087               	movwf	7
 11141  0D3E  1681               	bsf	1,5
 11142                           
 11143                           ;Dimmer_B1.c: 623: setLED(lights, 0);
 11144  0D3F  01A2               	clrf	setLED@command
 11145  0D40  0826               	movf	setDimmerLights@lights,w
 11146  0D41  3188  206F  318D   	fcall	_setLED
 11147                           
 11148                           ;Dimmer_B1.c: 625: ;;
 11149                           ;Dimmer_B1.c: 627: DimmerLights->Signal = 1;
 11150  0D44  0879               	movf	_DimmerLights,w
 11151  0D45  0086               	movwf	6
 11152  0D46  3001               	movlw	1	; select bank2/3
 11153  0D47  0087               	movwf	7
 11154  0D48  1481               	bsf	1,1
 11155                           
 11156                           ;Dimmer_B1.c: 628: DimmerLights->DimmingTimeValue = 6;
 11157  0D49  3006               	movlw	6
 11158  0D4A  0020               	movlb	0	; select bank0
 11159  0D4B  00A5               	movwf	??_setDimmerLights
 11160  0D4C  0879               	movf	_DimmerLights,w
 11161  0D4D  3E02               	addlw	2
 11162  0D4E  0086               	movwf	6
 11163  0D4F  3001               	movlw	1	; select bank2/3
 11164  0D50  0087               	movwf	7
 11165  0D51  0825               	movf	??_setDimmerLights,w
 11166  0D52  0081               	movwf	1
 11167                           
 11168                           ;Dimmer_B1.c: 630: if (!DimmerLights->StatusFlag) {
 11169  0D53  0879               	movf	_DimmerLights,w
 11170  0D54  0086               	movwf	6
 11171  0D55  3001               	movlw	1	; select bank2/3
 11172  0D56  0087               	movwf	7
 11173  0D57  1B01               	btfsc	1,6
 11174  0D58  0008               	return
 11175                           
 11176                           ;Dimmer_B1.c: 631: DimmerLights->StatusFlag = 1;
 11177  0D59  0879               	movf	_DimmerLights,w
 11178  0D5A  0086               	movwf	6
 11179  0D5B  3001               	movlw	1	; select bank2/3
 11180  0D5C  0087               	movwf	7
 11181  0D5D  1701               	bsf	1,6
 11182                           
 11183                           ;Dimmer_B1.c: 632: ;;
 11184                           ;Dimmer_B1.c: 633: setMemory_GO(0);
 11185  0D5E  3000               	movlw	0
 11186  0D5F  3192  2208         	fcall	_setMemory_GO
 11187                           
 11188                           ;Dimmer_B1.c: 636: DimmerLights->DimmingValue = DimmerLights->MaxmumValue;
 11189  0D61  0879               	movf	_DimmerLights,w
 11190  0D62  3E05               	addlw	5
 11191  0D63  0086               	movwf	6
 11192  0D64  3001               	movlw	1	; select bank2/3
 11193  0D65  0087               	movwf	7
 11194  0D66  0801               	movf	1,w
 11195  0D67  0020               	movlb	0	; select bank0
 11196  0D68  00A5               	movwf	??_setDimmerLights
 11197  0D69  0879               	movf	_DimmerLights,w
 11198  0D6A  3E04               	addlw	4
 11199  0D6B  0086               	movwf	6
 11200  0D6C  3001               	movlw	1	; select bank2/3
 11201  0D6D  0087               	movwf	7
 11202  0D6E  0825               	movf	??_setDimmerLights,w
 11203  0D6F  0081               	movwf	1
 11204                           
 11205                           ;Dimmer_B1.c: 640: DimmerLights->DimmingValue = ((char)((100-70)*0.8));
 11206  0D70  3018               	movlw	24
 11207  0D71  00A5               	movwf	??_setDimmerLights
 11208  0D72  0879               	movf	_DimmerLights,w
 11209  0D73  3E04               	addlw	4
 11210  0D74  0086               	movwf	6
 11211  0D75  3001               	movlw	1	; select bank2/3
 11212  0D76  0087               	movwf	7
 11213  0D77  0825               	movf	??_setDimmerLights,w
 11214  0D78  0081               	movwf	1
 11215                           
 11216                           ;Dimmer_B1.c: 642: }
 11217                           ;Dimmer_B1.c: 643: } else {
 11218  0D79  0008               	return
 11219  0D7A                     l5800:	
 11220                           
 11221                           ;Dimmer_B1.c: 645: DimmerLights->Status = 0;
 11222  0D7A  0879               	movf	_DimmerLights,w
 11223  0D7B  0086               	movwf	6
 11224  0D7C  3001               	movlw	1	; select bank2/3
 11225  0D7D  0087               	movwf	7
 11226  0D7E  1281               	bcf	1,5
 11227                           
 11228                           ;Dimmer_B1.c: 647: DimmerLights->DimmingValue = DimmerLights->MinimumValue;
 11229  0D7F  0879               	movf	_DimmerLights,w
 11230  0D80  3E06               	addlw	6
 11231  0D81  0086               	movwf	6
 11232  0D82  3001               	movlw	1	; select bank2/3
 11233  0D83  0087               	movwf	7
 11234  0D84  0801               	movf	1,w
 11235  0D85  00A5               	movwf	??_setDimmerLights
 11236  0D86  0879               	movf	_DimmerLights,w
 11237  0D87  3E04               	addlw	4
 11238  0D88  0086               	movwf	6
 11239  0D89  3001               	movlw	1	; select bank2/3
 11240  0D8A  0087               	movwf	7
 11241  0D8B  0825               	movf	??_setDimmerLights,w
 11242  0D8C  0081               	movwf	1
 11243                           
 11244                           ;Dimmer_B1.c: 654: DimmerLights->Signal = 1;
 11245  0D8D  0879               	movf	_DimmerLights,w
 11246  0D8E  0086               	movwf	6
 11247  0D8F  3001               	movlw	1	; select bank2/3
 11248  0D90  0087               	movwf	7
 11249  0D91  1481               	bsf	1,1
 11250                           
 11251                           ;Dimmer_B1.c: 655: DimmerLights->AdjFlag = 0;
 11252  0D92  0879               	movf	_DimmerLights,w
 11253  0D93  0086               	movwf	6
 11254  0D94  3001               	movlw	1	; select bank2/3
 11255  0D95  0087               	movwf	7
 11256  0D96  1181               	bcf	1,3
 11257                           
 11258                           ;Dimmer_B1.c: 656: DimmerLights->AdjStatus = 0;
 11259  0D97  0879               	movf	_DimmerLights,w
 11260  0D98  0086               	movwf	6
 11261  0D99  3001               	movlw	1	; select bank2/3
 11262  0D9A  0087               	movwf	7
 11263  0D9B  1201               	bcf	1,4
 11264                           
 11265                           ;Dimmer_B1.c: 657: DimmerLights->DimmingTimeValue = 6;
 11266  0D9C  3006               	movlw	6
 11267  0D9D  00A5               	movwf	??_setDimmerLights
 11268  0D9E  0879               	movf	_DimmerLights,w
 11269  0D9F  3E02               	addlw	2
 11270  0DA0  0086               	movwf	6
 11271  0DA1  3001               	movlw	1	; select bank2/3
 11272  0DA2  0087               	movwf	7
 11273  0DA3  0825               	movf	??_setDimmerLights,w
 11274  0DA4  0081               	movwf	1
 11275  0DA5  0008               	return
 11276  0DA6                     __end_of_setDimmerLights:	
 11277                           
 11278                           	psect	text63
 11279  086F                     __ptext63:	
 11280 ;; *************** function _setLED *****************
 11281 ;; Defined at:
 11282 ;;		line 74 in file "../src/LED_B1.c"
 11283 ;; Parameters:    Size  Location     Type
 11284 ;;  led             1    wreg     unsigned char 
 11285 ;;  command         1    2[BANK0 ] unsigned char 
 11286 ;; Auto vars:     Size  Location     Type
 11287 ;;  led             1    3[BANK0 ] unsigned char 
 11288 ;; Return value:  Size  Location     Type
 11289 ;;		None               void
 11290 ;; Registers used:
 11291 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11292 ;; Tracked objects:
 11293 ;;		On entry : 0/0
 11294 ;;		On exit  : 0/0
 11295 ;;		Unchanged: 0/0
 11296 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11297 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11298 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11299 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11300 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11301 ;;Total ram usage:        2 bytes
 11302 ;; Hardware stack levels used:    1
 11303 ;; Hardware stack levels required when called:    6
 11304 ;; This function calls:
 11305 ;;		_LedPointSelect
 11306 ;; This function is called by:
 11307 ;;		_setDimmerLights
 11308 ;;		_setLED_Initialization
 11309 ;;		_setSw_Initialization
 11310 ;;		_setDimmerLights_ERROR
 11311 ;; This function uses a non-reentrant model
 11312 ;;
 11313                           
 11314                           
 11315                           ;psect for function _setLED
 11316  086F                     _setLED:	
 11317                           
 11318                           ;incstack = 0
 11319                           ; Regs used in _setLED: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11320                           ;setLED@led stored from wreg
 11321  086F  0020               	movlb	0	; select bank0
 11322  0870  00A3               	movwf	setLED@led
 11323                           
 11324                           ;LED_B1.c: 76: LedPointSelect(led);
 11325  0871  0823               	movf	setLED@led,w
 11326  0872  3192  2269  3188   	fcall	_LedPointSelect
 11327                           
 11328                           ;LED_B1.c: 77: if(command == 0)
 11329  0875  0020               	movlb	0	; select bank0
 11330  0876  08A2               	movf	setLED@command,f
 11331  0877  1D03               	skipz
 11332  0878  288B               	goto	l5686
 11333                           
 11334                           ;LED_B1.c: 78: {
 11335                           ;LED_B1.c: 80: if(led == 1)
 11336  0879  0823               	movf	setLED@led,w
 11337  087A  3A01               	xorlw	1
 11338  087B  1D03               	skipz
 11339  087C  287F               	goto	l5678
 11340                           
 11341                           ;LED_B1.c: 81: {
 11342                           ;LED_B1.c: 85: RA3=1;
 11343  087D  158C               	bsf	12,3	;volatile
 11344                           
 11345                           ;LED_B1.c: 87: }
 11346  087E  0008               	return
 11347  087F                     l5678:	
 11348                           
 11349                           ;LED_B1.c: 90: else if(led == 2)
 11350  087F  0823               	movf	setLED@led,w
 11351  0880  3A02               	xorlw	2
 11352  0881  1D03               	skipz
 11353  0882  2885               	goto	l5682
 11354                           
 11355                           ;LED_B1.c: 91: {
 11356                           ;LED_B1.c: 95: RC7=1;
 11357  0883  178E               	bsf	14,7	;volatile
 11358                           
 11359                           ;LED_B1.c: 97: }
 11360  0884  0008               	return
 11361  0885                     l5682:	
 11362                           
 11363                           ;LED_B1.c: 110: else if(led == 99)
 11364  0885  0823               	movf	setLED@led,w
 11365  0886  3A63               	xorlw	99
 11366  0887  1D03               	skipz
 11367  0888  0008               	return
 11368                           
 11369                           ;LED_B1.c: 111: {
 11370                           ;LED_B1.c: 115: RB5=1;
 11371  0889  168D               	bsf	13,5	;volatile
 11372                           
 11373                           ;LED_B1.c: 117: }
 11374                           ;LED_B1.c: 119: }
 11375  088A  0008               	return
 11376  088B                     l5686:	
 11377                           
 11378                           ;LED_B1.c: 120: else if(command == 1)
 11379  088B  0822               	movf	setLED@command,w
 11380  088C  3A01               	xorlw	1
 11381  088D  1D03               	skipz
 11382  088E  28A1               	goto	l5700
 11383                           
 11384                           ;LED_B1.c: 121: {
 11385                           ;LED_B1.c: 123: if(led == 1)
 11386  088F  0823               	movf	setLED@led,w
 11387  0890  3A01               	xorlw	1
 11388  0891  1D03               	skipz
 11389  0892  2895               	goto	l5692
 11390                           
 11391                           ;LED_B1.c: 124: {
 11392                           ;LED_B1.c: 128: RA3=0;
 11393  0893  118C               	bcf	12,3	;volatile
 11394                           
 11395                           ;LED_B1.c: 130: }
 11396  0894  0008               	return
 11397  0895                     l5692:	
 11398                           
 11399                           ;LED_B1.c: 133: else if(led == 2)
 11400  0895  0823               	movf	setLED@led,w
 11401  0896  3A02               	xorlw	2
 11402  0897  1D03               	skipz
 11403  0898  289B               	goto	l5696
 11404                           
 11405                           ;LED_B1.c: 134: {
 11406                           ;LED_B1.c: 138: RC7=0;
 11407  0899  138E               	bcf	14,7	;volatile
 11408                           
 11409                           ;LED_B1.c: 140: }
 11410  089A  0008               	return
 11411  089B                     l5696:	
 11412                           
 11413                           ;LED_B1.c: 153: else if(led == 99)
 11414  089B  0823               	movf	setLED@led,w
 11415  089C  3A63               	xorlw	99
 11416  089D  1D03               	skipz
 11417  089E  0008               	return
 11418                           
 11419                           ;LED_B1.c: 154: {
 11420                           ;LED_B1.c: 158: RB5=0;
 11421  089F  128D               	bcf	13,5	;volatile
 11422                           
 11423                           ;LED_B1.c: 160: }
 11424                           ;LED_B1.c: 162: }
 11425  08A0  0008               	return
 11426  08A1                     l5700:	
 11427                           
 11428                           ;LED_B1.c: 163: else if(command == 10)
 11429  08A1  0822               	movf	setLED@command,w
 11430  08A2  3A0A               	xorlw	10
 11431  08A3  1D03               	skipz
 11432  08A4  28C3               	goto	l5716
 11433                           
 11434                           ;LED_B1.c: 164: {
 11435                           ;LED_B1.c: 165: LED->GO=0;
 11436  08A5  0021               	movlb	1	; select bank1
 11437  08A6  083D               	movf	_LED^(0+128),w
 11438  08A7  0086               	movwf	6
 11439  08A8  0187               	clrf	7
 11440  08A9  1081               	bcf	1,1
 11441                           
 11442                           ;LED_B1.c: 166: LED->Time=0;
 11443  08AA  0A3D               	incf	_LED^(0+128),w
 11444  08AB  0086               	movwf	6
 11445  08AC  0187               	clrf	7
 11446  08AD  3000               	movlw	0
 11447  08AE  3FC0               	movwi [0]fsr1
 11448  08AF  3FC1               	movwi [1]fsr1
 11449                           
 11450                           ;LED_B1.c: 168: if(led == 1)
 11451  08B0  0020               	movlb	0	; select bank0
 11452  08B1  0823               	movf	setLED@led,w
 11453  08B2  3A01               	xorlw	1
 11454  08B3  1D03               	skipz
 11455  08B4  28B7               	goto	l5708
 11456                           
 11457                           ;LED_B1.c: 169: {
 11458                           ;LED_B1.c: 173: RA3=1;
 11459  08B5  158C               	bsf	12,3	;volatile
 11460                           
 11461                           ;LED_B1.c: 175: }
 11462  08B6  0008               	return
 11463  08B7                     l5708:	
 11464                           
 11465                           ;LED_B1.c: 178: else if(led == 2)
 11466  08B7  0823               	movf	setLED@led,w
 11467  08B8  3A02               	xorlw	2
 11468  08B9  1D03               	skipz
 11469  08BA  28BD               	goto	l5712
 11470                           
 11471                           ;LED_B1.c: 179: {
 11472                           ;LED_B1.c: 183: RC7=1;
 11473  08BB  178E               	bsf	14,7	;volatile
 11474                           
 11475                           ;LED_B1.c: 185: }
 11476  08BC  0008               	return
 11477  08BD                     l5712:	
 11478                           
 11479                           ;LED_B1.c: 198: else if(led == 99)
 11480  08BD  0823               	movf	setLED@led,w
 11481  08BE  3A63               	xorlw	99
 11482  08BF  1D03               	skipz
 11483  08C0  0008               	return
 11484                           
 11485                           ;LED_B1.c: 199: {
 11486                           ;LED_B1.c: 203: RB5=1;
 11487  08C1  168D               	bsf	13,5	;volatile
 11488                           
 11489                           ;LED_B1.c: 205: }
 11490                           ;LED_B1.c: 207: }
 11491  08C2  0008               	return
 11492  08C3                     l5716:	
 11493                           
 11494                           ;LED_B1.c: 208: else if(command == 11)
 11495  08C3  0822               	movf	setLED@command,w
 11496  08C4  3A0B               	xorlw	11
 11497  08C5  1D03               	skipz
 11498  08C6  0008               	return
 11499                           
 11500                           ;LED_B1.c: 209: {
 11501                           ;LED_B1.c: 210: LED->GO=1;
 11502  08C7  0021               	movlb	1	; select bank1
 11503  08C8  083D               	movf	_LED^(0+128),w
 11504  08C9  0086               	movwf	6
 11505  08CA  0187               	clrf	7
 11506  08CB  1481               	bsf	1,1
 11507  08CC  0008               	return
 11508  08CD                     __end_of_setLED:	
 11509                           
 11510                           	psect	text64
 11511  1269                     __ptext64:	
 11512 ;; *************** function _LedPointSelect *****************
 11513 ;; Defined at:
 11514 ;;		line 7 in file "../src/LED_B1.c"
 11515 ;; Parameters:    Size  Location     Type
 11516 ;;  led             1    wreg     unsigned char 
 11517 ;; Auto vars:     Size  Location     Type
 11518 ;;  led             1    1[BANK0 ] unsigned char 
 11519 ;; Return value:  Size  Location     Type
 11520 ;;		None               void
 11521 ;; Registers used:
 11522 ;;		wreg
 11523 ;; Tracked objects:
 11524 ;;		On entry : 0/0
 11525 ;;		On exit  : 0/0
 11526 ;;		Unchanged: 0/0
 11527 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11528 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11529 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11530 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11531 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11532 ;;Total ram usage:        2 bytes
 11533 ;; Hardware stack levels used:    1
 11534 ;; Hardware stack levels required when called:    5
 11535 ;; This function calls:
 11536 ;;		Nothing
 11537 ;; This function is called by:
 11538 ;;		_setLED_Initialization
 11539 ;;		_setLED
 11540 ;;		_setLED_Main
 11541 ;; This function uses a non-reentrant model
 11542 ;;
 11543                           
 11544                           
 11545                           ;psect for function _LedPointSelect
 11546  1269                     _LedPointSelect:	
 11547                           
 11548                           ;incstack = 0
 11549                           ; Regs used in _LedPointSelect: [wreg]
 11550                           ;LedPointSelect@led stored from wreg
 11551  1269  0020               	movlb	0	; select bank0
 11552  126A  00A1               	movwf	LedPointSelect@led
 11553                           
 11554                           ;LED_B1.c: 10: if(led == 1)
 11555  126B  0821               	movf	LedPointSelect@led,w
 11556  126C  3A01               	xorlw	1
 11557  126D  1D03               	skipz
 11558  126E  2A75               	goto	l5512
 11559                           
 11560                           ;LED_B1.c: 11: {
 11561                           ;LED_B1.c: 12: LED=&VarLED1;
 11562  126F  30DA               	movlw	_VarLED1& (0+255)
 11563  1270  00A0               	movwf	??_LedPointSelect
 11564  1271  0820               	movf	??_LedPointSelect,w
 11565  1272  0021               	movlb	1	; select bank1
 11566  1273  00BD               	movwf	_LED^(0+128)
 11567                           
 11568                           ;LED_B1.c: 13: }
 11569  1274  0008               	return
 11570  1275                     l5512:	
 11571                           
 11572                           ;LED_B1.c: 16: else if(led == 2)
 11573  1275  0020               	movlb	0	; select bank0
 11574  1276  0821               	movf	LedPointSelect@led,w
 11575  1277  3A02               	xorlw	2
 11576  1278  1D03               	skipz
 11577  1279  2A80               	goto	l5516
 11578                           
 11579                           ;LED_B1.c: 17: {
 11580                           ;LED_B1.c: 18: LED=&VarLED2;
 11581  127A  30DE               	movlw	_VarLED2& (0+255)
 11582  127B  00A0               	movwf	??_LedPointSelect
 11583  127C  0820               	movf	??_LedPointSelect,w
 11584  127D  0021               	movlb	1	; select bank1
 11585  127E  00BD               	movwf	_LED^(0+128)
 11586                           
 11587                           ;LED_B1.c: 19: }
 11588  127F  0008               	return
 11589  1280                     l5516:	
 11590                           
 11591                           ;LED_B1.c: 28: else if(led == 99)
 11592  1280  0020               	movlb	0	; select bank0
 11593  1281  0821               	movf	LedPointSelect@led,w
 11594  1282  3A63               	xorlw	99
 11595  1283  1D03               	skipz
 11596  1284  0008               	return
 11597                           
 11598                           ;LED_B1.c: 29: {
 11599                           ;LED_B1.c: 30: LED=&VarErrLED;
 11600  1285  30D6               	movlw	_VarErrLED& (0+255)
 11601  1286  00A0               	movwf	??_LedPointSelect
 11602  1287  0820               	movf	??_LedPointSelect,w
 11603  1288  0021               	movlb	1	; select bank1
 11604  1289  00BD               	movwf	_LED^(0+128)
 11605  128A  0008               	return
 11606  128B                     __end_of_LedPointSelect:	
 11607                           
 11608                           	psect	text65
 11609  1FEC                     __ptext65:	
 11610 ;; *************** function _DimmerLights_Close *****************
 11611 ;; Defined at:
 11612 ;;		line 416 in file "../src/Dimmer_B1.c"
 11613 ;; Parameters:    Size  Location     Type
 11614 ;;		None
 11615 ;; Auto vars:     Size  Location     Type
 11616 ;;		None
 11617 ;; Return value:  Size  Location     Type
 11618 ;;		None               void
 11619 ;; Registers used:
 11620 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11621 ;; Tracked objects:
 11622 ;;		On entry : 0/0
 11623 ;;		On exit  : 0/0
 11624 ;;		Unchanged: 0/0
 11625 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11626 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11627 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11628 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11629 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11630 ;;Total ram usage:        0 bytes
 11631 ;; Hardware stack levels used:    1
 11632 ;; Hardware stack levels required when called:    6
 11633 ;; This function calls:
 11634 ;;		_getDimmerLights_StatusFlag
 11635 ;;		_setMemory_GO
 11636 ;; This function is called by:
 11637 ;;		_DimmerLights_Main
 11638 ;; This function uses a non-reentrant model
 11639 ;;
 11640                           
 11641                           
 11642                           ;psect for function _DimmerLights_Close
 11643  1FEC                     _DimmerLights_Close:	
 11644                           
 11645                           ;Dimmer_B1.c: 417: if (Dimmer->Detect) {
 11646                           
 11647                           ;incstack = 0
 11648                           ; Regs used in _DimmerLights_Close: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11649  1FEC  0021               	movlb	1	; select bank1
 11650  1FED  0839               	movf	_Dimmer^(0+128),w
 11651  1FEE  0086               	movwf	6
 11652  1FEF  0187               	clrf	7
 11653  1FF0  1C01               	btfss	1,0
 11654  1FF1  0008               	return
 11655                           
 11656                           ;Dimmer_B1.c: 418: Dimmer->Detect = 0;
 11657  1FF2  0839               	movf	_Dimmer^(0+128),w
 11658  1FF3  0086               	movwf	6
 11659  1FF4  0187               	clrf	7
 11660  1FF5  1001               	bcf	1,0
 11661                           
 11662                           ;Dimmer_B1.c: 419: if (!getDimmerLights_StatusFlag()) {
 11663  1FF6  319F  278F  319F   	fcall	_getDimmerLights_StatusFlag
 11664  1FF9  3800               	iorlw	0
 11665  1FFA  1D03               	skipz
 11666  1FFB  0008               	return
 11667                           
 11668                           ;Dimmer_B1.c: 421: ;;
 11669                           ;Dimmer_B1.c: 422: setMemory_GO(1);
 11670  1FFC  3001               	movlw	1
 11671  1FFD  3192  2208         	fcall	_setMemory_GO
 11672  1FFF  0008               	return
 11673  2000                     __end_of_DimmerLights_Close:	
 11674                           
 11675                           	psect	text66
 11676  1208                     __ptext66:	
 11677 ;; *************** function _setMemory_GO *****************
 11678 ;; Defined at:
 11679 ;;		line 892 in file "../src/MCU_B1.c"
 11680 ;; Parameters:    Size  Location     Type
 11681 ;;  command         1    wreg     unsigned char 
 11682 ;; Auto vars:     Size  Location     Type
 11683 ;;  command         1    2[BANK0 ] unsigned char 
 11684 ;; Return value:  Size  Location     Type
 11685 ;;		None               void
 11686 ;; Registers used:
 11687 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11688 ;; Tracked objects:
 11689 ;;		On entry : 0/0
 11690 ;;		On exit  : 0/0
 11691 ;;		Unchanged: 0/0
 11692 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11693 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11694 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11695 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11696 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11697 ;;Total ram usage:        3 bytes
 11698 ;; Hardware stack levels used:    1
 11699 ;; Hardware stack levels required when called:    5
 11700 ;; This function calls:
 11701 ;;		Nothing
 11702 ;; This function is called by:
 11703 ;;		_DimmerLights_Close
 11704 ;;		_setDimmerLights
 11705 ;; This function uses a non-reentrant model
 11706 ;;
 11707                           
 11708                           
 11709                           ;psect for function _setMemory_GO
 11710  1208                     _setMemory_GO:	
 11711                           
 11712                           ;incstack = 0
 11713                           ; Regs used in _setMemory_GO: [wreg+fsr1l+fsr1h+status,2+status,0]
 11714                           ;setMemory_GO@command stored from wreg
 11715  1208  0020               	movlb	0	; select bank0
 11716  1209  00A2               	movwf	setMemory_GO@command
 11717                           
 11718                           ;MCU_B1.c: 893: Memory->GO = command;
 11719  120A  0021               	movlb	1	; select bank1
 11720  120B  086C               	movf	_Memory^(0+128),w
 11721  120C  3E24               	addlw	36
 11722  120D  0086               	movwf	6
 11723  120E  3002               	movlw	2	; select bank4/5
 11724  120F  0087               	movwf	7
 11725  1210  0020               	movlb	0	; select bank0
 11726  1211  0822               	movf	setMemory_GO@command,w
 11727  1212  1081               	bcf	1,1
 11728  1213  1D03               	skipz
 11729  1214  1481               	bsf	1,1
 11730                           
 11731                           ;MCU_B1.c: 894: if (command == 0) {
 11732  1215  08A2               	movf	setMemory_GO@command,f
 11733  1216  1D03               	skipz
 11734  1217  0008               	return
 11735                           
 11736                           ;MCU_B1.c: 895: Memory->Time = command;
 11737  1218  0822               	movf	setMemory_GO@command,w
 11738  1219  00A0               	movwf	??_setMemory_GO
 11739  121A  01A1               	clrf	??_setMemory_GO+1
 11740  121B  0021               	movlb	1	; select bank1
 11741  121C  086C               	movf	_Memory^(0+128),w
 11742  121D  3E22               	addlw	34
 11743  121E  0086               	movwf	6
 11744  121F  3002               	movlw	2	; select bank4/5
 11745  1220  0087               	movwf	7
 11746  1221  0020               	movlb	0	; select bank0
 11747  1222  0820               	movf	??_setMemory_GO,w
 11748  1223  3FC0               	movwi [0]fsr1
 11749  1224  0821               	movf	??_setMemory_GO+1,w
 11750  1225  3FC1               	movwi [1]fsr1
 11751  1226  0008               	return
 11752  1227                     __end_of_setMemory_GO:	
 11753                           
 11754                           	psect	text67
 11755  1F8F                     __ptext67:	
 11756 ;; *************** function _getDimmerLights_StatusFlag *****************
 11757 ;; Defined at:
 11758 ;;		line 498 in file "../src/Dimmer_B1.c"
 11759 ;; Parameters:    Size  Location     Type
 11760 ;;		None
 11761 ;; Auto vars:     Size  Location     Type
 11762 ;;  Status          1    1[BANK0 ] unsigned char 
 11763 ;; Return value:  Size  Location     Type
 11764 ;;                  1    wreg      unsigned char 
 11765 ;; Registers used:
 11766 ;;		wreg, status,2
 11767 ;; Tracked objects:
 11768 ;;		On entry : 0/0
 11769 ;;		On exit  : 0/0
 11770 ;;		Unchanged: 0/0
 11771 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11772 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11773 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11774 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11775 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11776 ;;Total ram usage:        3 bytes
 11777 ;; Hardware stack levels used:    1
 11778 ;; Hardware stack levels required when called:    5
 11779 ;; This function calls:
 11780 ;;		Nothing
 11781 ;; This function is called by:
 11782 ;;		_DimmerLights_Close
 11783 ;;		_DimmerLights_Exceptions
 11784 ;; This function uses a non-reentrant model
 11785 ;;
 11786                           
 11787                           
 11788                           ;psect for function _getDimmerLights_StatusFlag
 11789  1F8F                     _getDimmerLights_StatusFlag:	
 11790                           
 11791                           ;Dimmer_B1.c: 499: char Status = 0;
 11792                           
 11793                           ;incstack = 0
 11794                           ; Regs used in _getDimmerLights_StatusFlag: [wreg+status,2]
 11795  1F8F  0020               	movlb	0	; select bank0
 11796  1F90  01A1               	clrf	getDimmerLights_StatusFlag@Status
 11797                           
 11798                           ;Dimmer_B1.c: 506: Status = (DimmerLights1.StatusFlag == 1 || DimmerLights2.StatusFlag =
      +                          = 1) ? 1 : 0;
 11799  1F91  01A2               	clrf	_getDimmerLights_StatusFlag$1916
 11800  1F92  0AA2               	incf	_getDimmerLights_StatusFlag$1916,f
 11801  1F93  0022               	movlb	2	; select bank2
 11802  1F94  1F20               	btfss	_DimmerLights1^(0+256),6
 11803  1F95  1B2F               	btfsc	_DimmerLights2^(0+256),6
 11804  1F96  2F99               	goto	l6068
 11805  1F97  0020               	movlb	0	; select bank0
 11806  1F98  01A2               	clrf	_getDimmerLights_StatusFlag$1916
 11807  1F99                     l6068:	
 11808  1F99  0020               	movlb	0	; select bank0
 11809  1F9A  0822               	movf	_getDimmerLights_StatusFlag$1916,w
 11810  1F9B  00A0               	movwf	??_getDimmerLights_StatusFlag
 11811  1F9C  0820               	movf	??_getDimmerLights_StatusFlag,w
 11812  1F9D  00A1               	movwf	getDimmerLights_StatusFlag@Status
 11813                           
 11814                           ;Dimmer_B1.c: 513: return Status;
 11815  1F9E  0821               	movf	getDimmerLights_StatusFlag@Status,w
 11816  1F9F  0008               	return
 11817  1FA0                     __end_of_getDimmerLights_StatusFlag:	
 11818                           
 11819                           	psect	text68
 11820  10CB                     __ptext68:	
 11821 ;; *************** function _DimmerLights_Initialization *****************
 11822 ;; Defined at:
 11823 ;;		line 354 in file "../src/Dimmer_B1.c"
 11824 ;; Parameters:    Size  Location     Type
 11825 ;;		None
 11826 ;; Auto vars:     Size  Location     Type
 11827 ;;		None
 11828 ;; Return value:  Size  Location     Type
 11829 ;;		None               void
 11830 ;; Registers used:
 11831 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11832 ;; Tracked objects:
 11833 ;;		On entry : 0/0
 11834 ;;		On exit  : 0/0
 11835 ;;		Unchanged: 0/0
 11836 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11837 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11838 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11839 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11840 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11841 ;;Total ram usage:        1 bytes
 11842 ;; Hardware stack levels used:    1
 11843 ;; Hardware stack levels required when called:    7
 11844 ;; This function calls:
 11845 ;;		_Dimmer_Initialization
 11846 ;;		_setDimmerLights_Initialization
 11847 ;; This function is called by:
 11848 ;;		_main
 11849 ;; This function uses a non-reentrant model
 11850 ;;
 11851                           
 11852                           
 11853                           ;psect for function _DimmerLights_Initialization
 11854  10CB                     _DimmerLights_Initialization:	
 11855                           
 11856                           ;Dimmer_B1.c: 357: DimmerLights11 = &DimmerLights1;
 11857                           
 11858                           ;incstack = 0
 11859                           ; Regs used in _DimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 11860  10CB  3020               	movlw	_DimmerLights1& (0+255)
 11861  10CC  0020               	movlb	0	; select bank0
 11862  10CD  00A4               	movwf	??_DimmerLights_Initialization
 11863  10CE  0824               	movf	??_DimmerLights_Initialization,w
 11864  10CF  0021               	movlb	1	; select bank1
 11865  10D0  00BA               	movwf	_DimmerLights11^(0+128)
 11866                           
 11867                           ;Dimmer_B1.c: 358: setDimmerLights_Initialization(1);
 11868  10D1  3001               	movlw	1
 11869  10D2  3193  2379  3190   	fcall	_setDimmerLights_Initialization
 11870                           
 11871                           ;Dimmer_B1.c: 362: DimmerLights22 = &DimmerLights2;
 11872  10D5  302F               	movlw	_DimmerLights2& (0+255)
 11873  10D6  0020               	movlb	0	; select bank0
 11874  10D7  00A4               	movwf	??_DimmerLights_Initialization
 11875  10D8  0824               	movf	??_DimmerLights_Initialization,w
 11876  10D9  0021               	movlb	1	; select bank1
 11877  10DA  00BB               	movwf	_DimmerLights22^(0+128)
 11878                           
 11879                           ;Dimmer_B1.c: 363: setDimmerLights_Initialization(2);
 11880  10DB  3002               	movlw	2
 11881  10DC  3193  2379  3190   	fcall	_setDimmerLights_Initialization
 11882                           
 11883                           ;Dimmer_B1.c: 372: Dimmer_Initialization();
 11884  10DF  319D  25F4         	fcall	_Dimmer_Initialization
 11885  10E1  0008               	return
 11886  10E2                     __end_of_DimmerLights_Initialization:	
 11887                           
 11888                           	psect	text69
 11889  1379                     __ptext69:	
 11890 ;; *************** function _setDimmerLights_Initialization *****************
 11891 ;; Defined at:
 11892 ;;		line 377 in file "../src/Dimmer_B1.c"
 11893 ;; Parameters:    Size  Location     Type
 11894 ;;  lights          1    wreg     unsigned char 
 11895 ;; Auto vars:     Size  Location     Type
 11896 ;;  lights          1    3[BANK0 ] unsigned char 
 11897 ;; Return value:  Size  Location     Type
 11898 ;;		None               void
 11899 ;; Registers used:
 11900 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11901 ;; Tracked objects:
 11902 ;;		On entry : 0/0
 11903 ;;		On exit  : 0/0
 11904 ;;		Unchanged: 0/0
 11905 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11906 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11907 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11908 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11909 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11910 ;;Total ram usage:        2 bytes
 11911 ;; Hardware stack levels used:    1
 11912 ;; Hardware stack levels required when called:    6
 11913 ;; This function calls:
 11914 ;;		_DimmerLightsPointSelect
 11915 ;; This function is called by:
 11916 ;;		_DimmerLights_Initialization
 11917 ;; This function uses a non-reentrant model
 11918 ;;
 11919                           
 11920                           
 11921                           ;psect for function _setDimmerLights_Initialization
 11922  1379                     _setDimmerLights_Initialization:	
 11923                           
 11924                           ;incstack = 0
 11925                           ; Regs used in _setDimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pcla
      +                          th+cstack]
 11926                           ;setDimmerLights_Initialization@lights stored from wreg
 11927  1379  0020               	movlb	0	; select bank0
 11928  137A  00A3               	movwf	setDimmerLights_Initialization@lights
 11929                           
 11930                           ;Dimmer_B1.c: 379: DimmerLightsPointSelect(lights);
 11931  137B  0823               	movf	setDimmerLights_Initialization@lights,w
 11932  137C  319F  27B1         	fcall	_DimmerLightsPointSelect
 11933                           
 11934                           ;Dimmer_B1.c: 380: DimmerLights->Clear = 1;
 11935  137E  0879               	movf	_DimmerLights,w
 11936  137F  3E09               	addlw	9
 11937  1380  0086               	movwf	6
 11938  1381  3001               	movlw	1	; select bank2/3
 11939  1382  0087               	movwf	7
 11940  1383  1501               	bsf	1,2
 11941                           
 11942                           ;Dimmer_B1.c: 386: DimmerLights->MaxmumValue = ((char)((100-70)*0.8));
 11943  1384  3018               	movlw	24
 11944  1385  0020               	movlb	0	; select bank0
 11945  1386  00A2               	movwf	??_setDimmerLights_Initialization
 11946  1387  0879               	movf	_DimmerLights,w
 11947  1388  3E05               	addlw	5
 11948  1389  0086               	movwf	6
 11949  138A  3001               	movlw	1	; select bank2/3
 11950  138B  0087               	movwf	7
 11951  138C  0822               	movf	??_setDimmerLights_Initialization,w
 11952  138D  0081               	movwf	1
 11953                           
 11954                           ;Dimmer_B1.c: 387: DimmerLights->MinimumValue = ((char)((100-20)*0.8));
 11955  138E  3040               	movlw	64
 11956  138F  00A2               	movwf	??_setDimmerLights_Initialization
 11957  1390  0879               	movf	_DimmerLights,w
 11958  1391  3E06               	addlw	6
 11959  1392  0086               	movwf	6
 11960  1393  3001               	movlw	1	; select bank2/3
 11961  1394  0087               	movwf	7
 11962  1395  0822               	movf	??_setDimmerLights_Initialization,w
 11963  1396  0081               	movwf	1
 11964                           
 11965                           ;Dimmer_B1.c: 397: DimmerLights->DimmingValue = DimmerLights->MinimumValue;
 11966  1397  0879               	movf	_DimmerLights,w
 11967  1398  3E06               	addlw	6
 11968  1399  0086               	movwf	6
 11969  139A  3001               	movlw	1	; select bank2/3
 11970  139B  0087               	movwf	7
 11971  139C  0801               	movf	1,w
 11972  139D  00A2               	movwf	??_setDimmerLights_Initialization
 11973  139E  0879               	movf	_DimmerLights,w
 11974  139F  3E04               	addlw	4
 11975  13A0  0086               	movwf	6
 11976  13A1  3001               	movlw	1	; select bank2/3
 11977  13A2  0087               	movwf	7
 11978  13A3  0822               	movf	??_setDimmerLights_Initialization,w
 11979  13A4  0081               	movwf	1
 11980  13A5  0008               	return
 11981  13A6                     __end_of_setDimmerLights_Initialization:	
 11982                           
 11983                           	psect	text70
 11984  1DF4                     __ptext70:	
 11985 ;; *************** function _Dimmer_Initialization *****************
 11986 ;; Defined at:
 11987 ;;		line 812 in file "../src/Dimmer_B1.c"
 11988 ;; Parameters:    Size  Location     Type
 11989 ;;		None
 11990 ;; Auto vars:     Size  Location     Type
 11991 ;;		None
 11992 ;; Return value:  Size  Location     Type
 11993 ;;		None               void
 11994 ;; Registers used:
 11995 ;;		wreg
 11996 ;; Tracked objects:
 11997 ;;		On entry : 0/0
 11998 ;;		On exit  : 0/0
 11999 ;;		Unchanged: 0/0
 12000 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12001 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12002 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12003 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12004 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12005 ;;Total ram usage:        1 bytes
 12006 ;; Hardware stack levels used:    1
 12007 ;; Hardware stack levels required when called:    5
 12008 ;; This function calls:
 12009 ;;		Nothing
 12010 ;; This function is called by:
 12011 ;;		_DimmerLights_Initialization
 12012 ;; This function uses a non-reentrant model
 12013 ;;
 12014                           
 12015                           
 12016                           ;psect for function _Dimmer_Initialization
 12017  1DF4                     _Dimmer_Initialization:	
 12018                           
 12019                           ;Dimmer_B1.c: 814: Dimmer = &Dimmer1;
 12020                           
 12021                           ;incstack = 0
 12022                           ; Regs used in _Dimmer_Initialization: [wreg]
 12023  1DF4  30E2               	movlw	_Dimmer1& (0+255)
 12024  1DF5  0020               	movlb	0	; select bank0
 12025  1DF6  00A0               	movwf	??_Dimmer_Initialization
 12026  1DF7  0820               	movf	??_Dimmer_Initialization,w
 12027  1DF8  0021               	movlb	1	; select bank1
 12028  1DF9  00B9               	movwf	_Dimmer^(0+128)
 12029  1DFA  0008               	return
 12030  1DFB                     __end_of_Dimmer_Initialization:	
 12031                           
 12032                           	psect	text71
 12033  1E11                     __ptext71:	
 12034 ;; *************** function _DelayOff_Main *****************
 12035 ;; Defined at:
 12036 ;;		line 41 in file "../src/DelayOff_B1.c"
 12037 ;; Parameters:    Size  Location     Type
 12038 ;;		None
 12039 ;; Auto vars:     Size  Location     Type
 12040 ;;		None
 12041 ;; Return value:  Size  Location     Type
 12042 ;;		None               void
 12043 ;; Registers used:
 12044 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12045 ;; Tracked objects:
 12046 ;;		On entry : 0/0
 12047 ;;		On exit  : 0/0
 12048 ;;		Unchanged: 0/0
 12049 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12050 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12051 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12052 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12053 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12054 ;;Total ram usage:        0 bytes
 12055 ;; Hardware stack levels used:    1
 12056 ;; Hardware stack levels required when called:   10
 12057 ;; This function calls:
 12058 ;;		_DlyOff_Main
 12059 ;; This function is called by:
 12060 ;;		_main
 12061 ;; This function uses a non-reentrant model
 12062 ;;
 12063                           
 12064                           
 12065                           ;psect for function _DelayOff_Main
 12066  1E11                     _DelayOff_Main:	
 12067                           
 12068                           ;DelayOff_B1.c: 43: DlyOff_Main(1);
 12069                           
 12070                           ;incstack = 0
 12071                           ; Regs used in _DelayOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12072  1E11  3001               	movlw	1
 12073  1E12  318C  2433  319E   	fcall	_DlyOff_Main
 12074                           
 12075                           ;DelayOff_B1.c: 47: DlyOff_Main(2);
 12076  1E15  3002               	movlw	2
 12077  1E16  318C  2433         	fcall	_DlyOff_Main
 12078  1E18  0008               	return
 12079  1E19                     __end_of_DelayOff_Main:	
 12080                           
 12081                           	psect	text72
 12082  0C33                     __ptext72:	
 12083 ;; *************** function _DlyOff_Main *****************
 12084 ;; Defined at:
 12085 ;;		line 62 in file "../src/DelayOff_B1.c"
 12086 ;; Parameters:    Size  Location     Type
 12087 ;;  sw              1    wreg     unsigned char 
 12088 ;; Auto vars:     Size  Location     Type
 12089 ;;  sw              1   68[BANK0 ] unsigned char 
 12090 ;; Return value:  Size  Location     Type
 12091 ;;		None               void
 12092 ;; Registers used:
 12093 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12094 ;; Tracked objects:
 12095 ;;		On entry : 0/0
 12096 ;;		On exit  : 0/0
 12097 ;;		Unchanged: 0/0
 12098 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12099 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12100 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12101 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12102 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12103 ;;Total ram usage:        3 bytes
 12104 ;; Hardware stack levels used:    1
 12105 ;; Hardware stack levels required when called:    9
 12106 ;; This function calls:
 12107 ;;		_DelayOffPointSelect
 12108 ;;		_setBuz
 12109 ;;		_setDimmerLights_Switch
 12110 ;;		_setDimmerLights_Trigger
 12111 ;;		_setRFSW_Status
 12112 ;;		_setRF_DimmerLights
 12113 ;;		_setSw_Status
 12114 ;;		_setTxData
 12115 ;; This function is called by:
 12116 ;;		_DelayOff_Main
 12117 ;; This function uses a non-reentrant model
 12118 ;;
 12119                           
 12120                           
 12121                           ;psect for function _DlyOff_Main
 12122  0C33                     _DlyOff_Main:	
 12123                           
 12124                           ;incstack = 0
 12125                           ; Regs used in _DlyOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12126                           ;DlyOff_Main@sw stored from wreg
 12127  0C33  0020               	movlb	0	; select bank0
 12128  0C34  00E4               	movwf	DlyOff_Main@sw
 12129                           
 12130                           ;DelayOff_B1.c: 63: DelayOffPointSelect(sw);
 12131  0C35  0864               	movf	DlyOff_Main@sw,w
 12132  0C36  3190  20B4  318C   	fcall	_DelayOffPointSelect
 12133                           
 12134                           ;DelayOff_B1.c: 64: if (DelayOff->GO) {
 12135  0C39  0021               	movlb	1	; select bank1
 12136  0C3A  0838               	movf	_DelayOff^(0+128),w
 12137  0C3B  0086               	movwf	6
 12138  0C3C  0187               	clrf	7
 12139  0C3D  1C81               	btfss	1,1
 12140  0C3E  0008               	return
 12141                           
 12142                           ;DelayOff_B1.c: 65: DelayOff->SecondTime++;
 12143  0C3F  0838               	movf	_DelayOff^(0+128),w
 12144  0C40  3E02               	addlw	2
 12145  0C41  0086               	movwf	6
 12146  0C42  0187               	clrf	7
 12147  0C43  3001               	movlw	1
 12148  0C44  0781               	addwf	1,f
 12149  0C45  3141               	addfsr 1,1
 12150  0C46  1803               	skipnc
 12151  0C47  0A81               	incf	1,f
 12152                           
 12153                           ;DelayOff_B1.c: 66: if (DelayOff->SecondTime >= 5650) {
 12154  0C48  0838               	movf	_DelayOff^(0+128),w
 12155  0C49  3E02               	addlw	2
 12156  0C4A  0086               	movwf	6
 12157  0C4B  0187               	clrf	7
 12158  0C4C  3F40               	moviw [0]fsr1
 12159  0C4D  0020               	movlb	0	; select bank0
 12160  0C4E  00E2               	movwf	??_DlyOff_Main
 12161  0C4F  3F41               	moviw [1]fsr1
 12162  0C50  00E3               	movwf	??_DlyOff_Main+1
 12163  0C51  3016               	movlw	22
 12164  0C52  0263               	subwf	??_DlyOff_Main+1,w
 12165  0C53  3012               	movlw	18
 12166  0C54  1903               	skipnz
 12167  0C55  0262               	subwf	??_DlyOff_Main,w
 12168  0C56  1C03               	skipc
 12169  0C57  0008               	return
 12170                           
 12171                           ;DelayOff_B1.c: 67: DelayOff->SecondTime = 0;
 12172  0C58  0021               	movlb	1	; select bank1
 12173  0C59  0838               	movf	_DelayOff^(0+128),w
 12174  0C5A  3E02               	addlw	2
 12175  0C5B  0086               	movwf	6
 12176  0C5C  0187               	clrf	7
 12177  0C5D  3000               	movlw	0
 12178  0C5E  3FC0               	movwi [0]fsr1
 12179  0C5F  3FC1               	movwi [1]fsr1
 12180                           
 12181                           ;DelayOff_B1.c: 68: DelayOff->MinuteTime++;
 12182  0C60  3001               	movlw	1
 12183  0C61  0020               	movlb	0	; select bank0
 12184  0C62  00E2               	movwf	??_DlyOff_Main
 12185  0C63  0021               	movlb	1	; select bank1
 12186  0C64  0838               	movf	_DelayOff^(0+128),w
 12187  0C65  3E04               	addlw	4
 12188  0C66  0086               	movwf	6
 12189  0C67  0187               	clrf	7
 12190  0C68  0020               	movlb	0	; select bank0
 12191  0C69  0862               	movf	??_DlyOff_Main,w
 12192  0C6A  0781               	addwf	1,f
 12193                           
 12194                           ;DelayOff_B1.c: 69: if (DelayOff->MinuteTime >= DelayOff->Value) {
 12195  0C6B  0021               	movlb	1	; select bank1
 12196  0C6C  0838               	movf	_DelayOff^(0+128),w
 12197  0C6D  3E04               	addlw	4
 12198  0C6E  0086               	movwf	6
 12199  0C6F  0187               	clrf	7
 12200  0C70  0A38               	incf	_DelayOff^(0+128),w
 12201  0C71  0084               	movwf	4
 12202  0C72  0185               	clrf	5
 12203  0C73  0800               	movf	0,w
 12204  0C74  0201               	subwf	1,w
 12205  0C75  1C03               	skipc
 12206  0C76  0008               	return
 12207                           
 12208                           ;DelayOff_B1.c: 70: DelayOff->MinuteTime = 0;
 12209  0C77  0838               	movf	_DelayOff^(0+128),w
 12210  0C78  3E04               	addlw	4
 12211  0C79  0086               	movwf	6
 12212  0C7A  0187               	clrf	7
 12213  0C7B  0181               	clrf	1
 12214                           
 12215                           ;DelayOff_B1.c: 71: DelayOff->GO = 0;
 12216  0C7C  0838               	movf	_DelayOff^(0+128),w
 12217  0C7D  0086               	movwf	6
 12218  0C7E  0187               	clrf	7
 12219  0C7F  1081               	bcf	1,1
 12220                           
 12221                           ;DelayOff_B1.c: 72: setSw_Status(sw, 0);
 12222  0C80  0020               	movlb	0	; select bank0
 12223  0C81  01A2               	clrf	setSw_Status@command
 12224  0C82  0864               	movf	DlyOff_Main@sw,w
 12225  0C83  319E  26FE  318C   	fcall	_setSw_Status
 12226                           
 12227                           ;DelayOff_B1.c: 73: setRFSW_Status(sw, 0);
 12228  0C86  0020               	movlb	0	; select bank0
 12229  0C87  01A2               	clrf	setRFSW_Status@command
 12230  0C88  0864               	movf	DlyOff_Main@sw,w
 12231  0C89  319E  26EF  318C   	fcall	_setRFSW_Status
 12232                           
 12233                           ;DelayOff_B1.c: 74: setRF_DimmerLights(sw, 0);
 12234  0C8C  0020               	movlb	0	; select bank0
 12235  0C8D  01DD               	clrf	setRF_DimmerLights@on
 12236  0C8E  0864               	movf	DlyOff_Main@sw,w
 12237  0C8F  3189  218C  318C   	fcall	_setRF_DimmerLights
 12238                           
 12239                           ;DelayOff_B1.c: 75: setDimmerLights_Trigger(sw, 1);
 12240  0C92  0020               	movlb	0	; select bank0
 12241  0C93  01A2               	clrf	setDimmerLights_Trigger@command
 12242  0C94  0AA2               	incf	setDimmerLights_Trigger@command,f
 12243  0C95  0864               	movf	DlyOff_Main@sw,w
 12244  0C96  319F  273D  318C   	fcall	_setDimmerLights_Trigger
 12245                           
 12246                           ;DelayOff_B1.c: 76: setDimmerLights_Switch(sw, 0);
 12247  0C99  0020               	movlb	0	; select bank0
 12248  0C9A  01A2               	clrf	setDimmerLights_Switch@command
 12249  0C9B  0864               	movf	DlyOff_Main@sw,w
 12250  0C9C  319F  272D  318C   	fcall	_setDimmerLights_Switch
 12251                           
 12252                           ;DelayOff_B1.c: 77: setTxData(1);
 12253  0C9F  3001               	movlw	1
 12254  0CA0  318E  26BD  318C   	fcall	_setTxData
 12255                           
 12256                           ;DelayOff_B1.c: 78: setBuz(1, 100);
 12257  0CA3  3064               	movlw	100
 12258  0CA4  0020               	movlb	0	; select bank0
 12259  0CA5  00A9               	movwf	setBuz@time
 12260  0CA6  3000               	movlw	0
 12261  0CA7  00AA               	movwf	setBuz@time+1
 12262  0CA8  3001               	movlw	1
 12263  0CA9  318B  23BC         	fcall	_setBuz
 12264  0CAB  0008               	return
 12265  0CAC                     __end_of_DlyOff_Main:	
 12266                           
 12267                           	psect	text73
 12268  0EBD                     __ptext73:	
 12269 ;; *************** function _setTxData *****************
 12270 ;; Defined at:
 12271 ;;		line 140 in file "../src/RF_Control_B1.c"
 12272 ;; Parameters:    Size  Location     Type
 12273 ;;  rf              1    wreg     unsigned char 
 12274 ;; Auto vars:     Size  Location     Type
 12275 ;;  rf              1    3[BANK0 ] unsigned char 
 12276 ;;  i               1    0        unsigned char 
 12277 ;; Return value:  Size  Location     Type
 12278 ;;		None               void
 12279 ;; Registers used:
 12280 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12281 ;; Tracked objects:
 12282 ;;		On entry : 0/0
 12283 ;;		On exit  : 0/0
 12284 ;;		Unchanged: 0/0
 12285 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12286 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12287 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12288 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12289 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12290 ;;Total ram usage:        2 bytes
 12291 ;; Hardware stack levels used:    1
 12292 ;; Hardware stack levels required when called:    6
 12293 ;; This function calls:
 12294 ;;		_RfPointSelect
 12295 ;; This function is called by:
 12296 ;;		_DlyOff_Main
 12297 ;;		_setDimmerLights_Adj
 12298 ;;		_setControl_Lights_Table
 12299 ;;		_setRFSW_Control
 12300 ;;		_setRFSW_AdjControl
 12301 ;;		_Sw_DimmerOnFunc
 12302 ;;		_Sw_DimmerOffFunc
 12303 ;; This function uses a non-reentrant model
 12304 ;;
 12305                           
 12306                           
 12307                           ;psect for function _setTxData
 12308  0EBD                     _setTxData:	
 12309                           
 12310                           ;incstack = 0
 12311                           ; Regs used in _setTxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12312                           ;setTxData@rf stored from wreg
 12313  0EBD  0020               	movlb	0	; select bank0
 12314  0EBE  00A3               	movwf	setTxData@rf
 12315                           
 12316                           ;RF_Control_B1.c: 141: char i;
 12317                           ;RF_Control_B1.c: 142: RfPointSelect(rf);
 12318  0EBF  0823               	movf	setTxData@rf,w
 12319  0EC0  319E  267E  318E   	fcall	_RfPointSelect
 12320                           
 12321                           ;RF_Control_B1.c: 143: if (RF->Enable == 1) {
 12322  0EC3  0021               	movlb	1	; select bank1
 12323  0EC4  083E               	movf	_RF^(0+128),w
 12324  0EC5  0086               	movwf	6
 12325  0EC6  0187               	clrf	7
 12326  0EC7  1C01               	btfss	1,0
 12327  0EC8  0008               	return
 12328                           
 12329                           ;RF_Control_B1.c: 145: RF->TransceiveGO = 1;
 12330  0EC9  083E               	movf	_RF^(0+128),w
 12331  0ECA  0086               	movwf	6
 12332  0ECB  0187               	clrf	7
 12333  0ECC  1501               	bsf	1,2
 12334                           
 12335                           ;RF_Control_B1.c: 155: RF_Data[0] = 0x63;
 12336  0ECD  3063               	movlw	99
 12337  0ECE  0020               	movlb	0	; select bank0
 12338  0ECF  00A2               	movwf	??_setTxData
 12339  0ED0  0822               	movf	??_setTxData,w
 12340  0ED1  0021               	movlb	1	; select bank1
 12341  0ED2  00A0               	movwf	_RF_Data^(0+128)
 12342                           
 12343                           ;RF_Control_B1.c: 156: RF_Data[1] = 0x02;
 12344  0ED3  3002               	movlw	2
 12345  0ED4  0020               	movlb	0	; select bank0
 12346  0ED5  00A2               	movwf	??_setTxData
 12347  0ED6  0822               	movf	??_setTxData,w
 12348  0ED7  0021               	movlb	1	; select bank1
 12349  0ED8  00A1               	movwf	(_RF_Data^(0+128)+1)
 12350                           
 12351                           ;RF_Control_B1.c: 157: RF_Data[2] = product->Data[2];
 12352  0ED9  087D               	movf	_product,w
 12353  0EDA  0086               	movwf	6
 12354  0EDB  3001               	movlw	1	; select bank2/3
 12355  0EDC  0087               	movwf	7
 12356  0EDD  3001               	movlw	1	; select bank2/3
 12357  0EDE  3F42               	moviw [2]fsr1
 12358  0EDF  00A2               	movwf	(_RF_Data^(0+128)+2)
 12359                           
 12360                           ;RF_Control_B1.c: 158: RF_Data[3] = product->Data[3];
 12361  0EE0  087D               	movf	_product,w
 12362  0EE1  0086               	movwf	6
 12363  0EE2  3001               	movlw	1	; select bank2/3
 12364  0EE3  0087               	movwf	7
 12365  0EE4  3001               	movlw	1	; select bank2/3
 12366  0EE5  3F43               	moviw [3]fsr1
 12367  0EE6  00A3               	movwf	(_RF_Data^(0+128)+3)
 12368                           
 12369                           ;RF_Control_B1.c: 159: RF_Data[4] = product->Data[4];
 12370  0EE7  087D               	movf	_product,w
 12371  0EE8  0086               	movwf	6
 12372  0EE9  3001               	movlw	1	; select bank2/3
 12373  0EEA  0087               	movwf	7
 12374  0EEB  3001               	movlw	1	; select bank2/3
 12375  0EEC  3F44               	moviw [4]fsr1
 12376  0EED  00A4               	movwf	(_RF_Data^(0+128)+4)
 12377                           
 12378                           ;RF_Control_B1.c: 160: RF_Data[5] = product->Data[5];
 12379  0EEE  087D               	movf	_product,w
 12380  0EEF  0086               	movwf	6
 12381  0EF0  3001               	movlw	1	; select bank2/3
 12382  0EF1  0087               	movwf	7
 12383  0EF2  3001               	movlw	1	; select bank2/3
 12384  0EF3  3F45               	moviw [5]fsr1
 12385  0EF4  00A5               	movwf	(_RF_Data^(0+128)+5)
 12386                           
 12387                           ;RF_Control_B1.c: 161: RF_Data[6] = product->Data[6];
 12388  0EF5  087D               	movf	_product,w
 12389  0EF6  0086               	movwf	6
 12390  0EF7  3001               	movlw	1	; select bank2/3
 12391  0EF8  0087               	movwf	7
 12392  0EF9  3001               	movlw	1	; select bank2/3
 12393  0EFA  3F46               	moviw [6]fsr1
 12394  0EFB  00A6               	movwf	(_RF_Data^(0+128)+6)
 12395                           
 12396                           ;RF_Control_B1.c: 162: RF_Data[7] = product->Data[7];
 12397  0EFC  087D               	movf	_product,w
 12398  0EFD  0086               	movwf	6
 12399  0EFE  3001               	movlw	1	; select bank2/3
 12400  0EFF  0087               	movwf	7
 12401  0F00  3001               	movlw	1	; select bank2/3
 12402  0F01  3F47               	moviw [7]fsr1
 12403  0F02  00A7               	movwf	(_RF_Data^(0+128)+7)
 12404                           
 12405                           ;RF_Control_B1.c: 163: RF_Data[8] = product->Data[8];
 12406  0F03  087D               	movf	_product,w
 12407  0F04  0086               	movwf	6
 12408  0F05  3001               	movlw	1	; select bank2/3
 12409  0F06  0087               	movwf	7
 12410  0F07  3001               	movlw	1	; select bank2/3
 12411  0F08  3F48               	moviw [8]fsr1
 12412  0F09  00A8               	movwf	(_RF_Data^(0+128)+8)
 12413                           
 12414                           ;RF_Control_B1.c: 164: RF_Data[9] = product->Data[9];
 12415  0F0A  087D               	movf	_product,w
 12416  0F0B  0086               	movwf	6
 12417  0F0C  3001               	movlw	1	; select bank2/3
 12418  0F0D  0087               	movwf	7
 12419  0F0E  3001               	movlw	1	; select bank2/3
 12420  0F0F  3F49               	moviw [9]fsr1
 12421  0F10  00A9               	movwf	(_RF_Data^(0+128)+9)
 12422                           
 12423                           ;RF_Control_B1.c: 165: RF_Data[10] = product->Data[10];
 12424  0F11  087D               	movf	_product,w
 12425  0F12  0086               	movwf	6
 12426  0F13  3001               	movlw	1	; select bank2/3
 12427  0F14  0087               	movwf	7
 12428  0F15  3001               	movlw	1	; select bank2/3
 12429  0F16  3F4A               	moviw [10]fsr1
 12430  0F17  00AA               	movwf	(_RF_Data^(0+128)+10)
 12431                           
 12432                           ;RF_Control_B1.c: 166: RF_Data[11] = product->Data[11];
 12433  0F18  087D               	movf	_product,w
 12434  0F19  0086               	movwf	6
 12435  0F1A  3001               	movlw	1	; select bank2/3
 12436  0F1B  0087               	movwf	7
 12437  0F1C  3001               	movlw	1	; select bank2/3
 12438  0F1D  3F4B               	moviw [11]fsr1
 12439  0F1E  00AB               	movwf	(_RF_Data^(0+128)+11)
 12440                           
 12441                           ;RF_Control_B1.c: 167: RF_Data[12] = product->Data[12];
 12442  0F1F  087D               	movf	_product,w
 12443  0F20  0086               	movwf	6
 12444  0F21  3001               	movlw	1	; select bank2/3
 12445  0F22  0087               	movwf	7
 12446  0F23  3001               	movlw	1	; select bank2/3
 12447  0F24  3F4C               	moviw [12]fsr1
 12448  0F25  00AC               	movwf	(_RF_Data^(0+128)+12)
 12449                           
 12450                           ;RF_Control_B1.c: 168: RF_Data[13] = product->Data[13];
 12451  0F26  087D               	movf	_product,w
 12452  0F27  0086               	movwf	6
 12453  0F28  3001               	movlw	1	; select bank2/3
 12454  0F29  0087               	movwf	7
 12455  0F2A  3001               	movlw	1	; select bank2/3
 12456  0F2B  3F4D               	moviw [13]fsr1
 12457  0F2C  00AD               	movwf	(_RF_Data^(0+128)+13)
 12458                           
 12459                           ;RF_Control_B1.c: 169: RF_Data[14] = product->Data[14];
 12460  0F2D  087D               	movf	_product,w
 12461  0F2E  0086               	movwf	6
 12462  0F2F  3001               	movlw	1	; select bank2/3
 12463  0F30  0087               	movwf	7
 12464  0F31  3001               	movlw	1	; select bank2/3
 12465  0F32  3F4E               	moviw [14]fsr1
 12466  0F33  00AE               	movwf	(_RF_Data^(0+128)+14)
 12467                           
 12468                           ;RF_Control_B1.c: 170: RF_Data[15] = product->Data[15];
 12469  0F34  087D               	movf	_product,w
 12470  0F35  0086               	movwf	6
 12471  0F36  3001               	movlw	1	; select bank2/3
 12472  0F37  0087               	movwf	7
 12473  0F38  3001               	movlw	1	; select bank2/3
 12474  0F39  3F4F               	moviw [15]fsr1
 12475  0F3A  00AF               	movwf	(_RF_Data^(0+128)+15)
 12476                           
 12477                           ;RF_Control_B1.c: 171: RF_Data[16] = product->Data[16];
 12478  0F3B  087D               	movf	_product,w
 12479  0F3C  0086               	movwf	6
 12480  0F3D  3001               	movlw	1	; select bank2/3
 12481  0F3E  0087               	movwf	7
 12482  0F3F  3001               	movlw	1	; select bank2/3
 12483  0F40  3F50               	moviw [16]fsr1
 12484  0F41  00B0               	movwf	(_RF_Data^(0+128)+16)
 12485                           
 12486                           ;RF_Control_B1.c: 172: RF_Data[17] = product->Data[17];
 12487  0F42  087D               	movf	_product,w
 12488  0F43  0086               	movwf	6
 12489  0F44  3001               	movlw	1	; select bank2/3
 12490  0F45  0087               	movwf	7
 12491  0F46  3001               	movlw	1	; select bank2/3
 12492  0F47  3F51               	moviw [17]fsr1
 12493  0F48  00B1               	movwf	(_RF_Data^(0+128)+17)
 12494                           
 12495                           ;RF_Control_B1.c: 173: RF_Data[18] = product->Data[18];
 12496  0F49  087D               	movf	_product,w
 12497  0F4A  0086               	movwf	6
 12498  0F4B  3001               	movlw	1	; select bank2/3
 12499  0F4C  0087               	movwf	7
 12500  0F4D  3001               	movlw	1	; select bank2/3
 12501  0F4E  3F52               	moviw [18]fsr1
 12502  0F4F  00B2               	movwf	(_RF_Data^(0+128)+18)
 12503                           
 12504                           ;RF_Control_B1.c: 174: RF_Data[19] = product->Data[19];
 12505  0F50  087D               	movf	_product,w
 12506  0F51  0086               	movwf	6
 12507  0F52  3001               	movlw	1	; select bank2/3
 12508  0F53  0087               	movwf	7
 12509  0F54  3001               	movlw	1	; select bank2/3
 12510  0F55  3F53               	moviw [19]fsr1
 12511  0F56  00B3               	movwf	(_RF_Data^(0+128)+19)
 12512                           
 12513                           ;RF_Control_B1.c: 175: RF_Data[20] = 210;
 12514  0F57  30D2               	movlw	210
 12515  0F58  0020               	movlb	0	; select bank0
 12516  0F59  00A2               	movwf	??_setTxData
 12517  0F5A  0822               	movf	??_setTxData,w
 12518  0F5B  0021               	movlb	1	; select bank1
 12519  0F5C  00B4               	movwf	(_RF_Data^(0+128)+20)
 12520  0F5D  0008               	return
 12521  0F5E                     __end_of_setTxData:	
 12522                           
 12523                           	psect	text74
 12524  1E7E                     __ptext74:	
 12525 ;; *************** function _RfPointSelect *****************
 12526 ;; Defined at:
 12527 ;;		line 7 in file "../src/RF_Control_B1.c"
 12528 ;; Parameters:    Size  Location     Type
 12529 ;;  rf              1    wreg     unsigned char 
 12530 ;; Auto vars:     Size  Location     Type
 12531 ;;  rf              1    1[BANK0 ] unsigned char 
 12532 ;; Return value:  Size  Location     Type
 12533 ;;		None               void
 12534 ;; Registers used:
 12535 ;;		wreg
 12536 ;; Tracked objects:
 12537 ;;		On entry : 0/0
 12538 ;;		On exit  : 0/0
 12539 ;;		Unchanged: 0/0
 12540 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12541 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12542 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12543 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12544 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12545 ;;Total ram usage:        2 bytes
 12546 ;; Hardware stack levels used:    1
 12547 ;; Hardware stack levels required when called:    5
 12548 ;; This function calls:
 12549 ;;		Nothing
 12550 ;; This function is called by:
 12551 ;;		_setRF_Learn
 12552 ;;		_setRF_Main
 12553 ;;		_setTxData
 12554 ;;		_setRF_Enable
 12555 ;;		_RF_RxDisable
 12556 ;;		_getRxData
 12557 ;;		_setLog_Code
 12558 ;;		_setControl_Lights_Table
 12559 ;; This function uses a non-reentrant model
 12560 ;;
 12561                           
 12562                           
 12563                           ;psect for function _RfPointSelect
 12564  1E7E                     _RfPointSelect:	
 12565                           
 12566                           ;incstack = 0
 12567                           ; Regs used in _RfPointSelect: [wreg]
 12568                           ;RfPointSelect@rf stored from wreg
 12569  1E7E  0020               	movlb	0	; select bank0
 12570  1E7F  00A1               	movwf	RfPointSelect@rf
 12571                           
 12572                           ;RF_Control_B1.c: 9: if (rf == 1) {
 12573  1E80  0821               	movf	RfPointSelect@rf,w
 12574  1E81  3A01               	xorlw	1
 12575  1E82  1D03               	skipz
 12576  1E83  0008               	return
 12577                           
 12578                           ;RF_Control_B1.c: 10: RF = &RF1;
 12579  1E84  30D1               	movlw	_RF1& (0+255)
 12580  1E85  00A0               	movwf	??_RfPointSelect
 12581  1E86  0820               	movf	??_RfPointSelect,w
 12582  1E87  0021               	movlb	1	; select bank1
 12583  1E88  00BE               	movwf	_RF^(0+128)
 12584  1E89  0008               	return
 12585  1E8A                     __end_of_RfPointSelect:	
 12586                           
 12587                           	psect	text75
 12588  1EFE                     __ptext75:	
 12589 ;; *************** function _setSw_Status *****************
 12590 ;; Defined at:
 12591 ;;		line 105 in file "../src/Switch_B1.c"
 12592 ;; Parameters:    Size  Location     Type
 12593 ;;  sw              1    wreg     unsigned char 
 12594 ;;  command         1    2[BANK0 ] unsigned char 
 12595 ;; Auto vars:     Size  Location     Type
 12596 ;;  sw              1    3[BANK0 ] unsigned char 
 12597 ;; Return value:  Size  Location     Type
 12598 ;;		None               void
 12599 ;; Registers used:
 12600 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12601 ;; Tracked objects:
 12602 ;;		On entry : 0/0
 12603 ;;		On exit  : 0/0
 12604 ;;		Unchanged: 0/0
 12605 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12606 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12607 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12608 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12609 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12610 ;;Total ram usage:        2 bytes
 12611 ;; Hardware stack levels used:    1
 12612 ;; Hardware stack levels required when called:    6
 12613 ;; This function calls:
 12614 ;;		_SwPointSelect
 12615 ;; This function is called by:
 12616 ;;		_DlyOff_Main
 12617 ;;		_setControl_Lights_Table
 12618 ;;		_setRFSW_Control
 12619 ;;		_setDimmerLights_ERROR
 12620 ;; This function uses a non-reentrant model
 12621 ;;
 12622                           
 12623                           
 12624                           ;psect for function _setSw_Status
 12625  1EFE                     _setSw_Status:	
 12626                           
 12627                           ;incstack = 0
 12628                           ; Regs used in _setSw_Status: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12629                           ;setSw_Status@sw stored from wreg
 12630  1EFE  0020               	movlb	0	; select bank0
 12631  1EFF  00A3               	movwf	setSw_Status@sw
 12632                           
 12633                           ;Switch_B1.c: 106: SwPointSelect(sw);
 12634  1F00  0823               	movf	setSw_Status@sw,w
 12635  1F01  319F  27D8         	fcall	_SwPointSelect
 12636                           
 12637                           ;Switch_B1.c: 107: Sw->Status = command;
 12638  1F03  087B               	movf	_Sw,w
 12639  1F04  0086               	movwf	6
 12640  1F05  3001               	movlw	1	; select bank2/3
 12641  1F06  0087               	movwf	7
 12642  1F07  0020               	movlb	0	; select bank0
 12643  1F08  0822               	movf	setSw_Status@command,w
 12644  1F09  1301               	bcf	1,6
 12645  1F0A  1D03               	skipz
 12646  1F0B  1701               	bsf	1,6
 12647  1F0C  0008               	return
 12648  1F0D                     __end_of_setSw_Status:	
 12649                           
 12650                           	psect	text76
 12651  1FD8                     __ptext76:	
 12652 ;; *************** function _SwPointSelect *****************
 12653 ;; Defined at:
 12654 ;;		line 17 in file "../src/Switch_B1.c"
 12655 ;; Parameters:    Size  Location     Type
 12656 ;;  sw              1    wreg     unsigned char 
 12657 ;; Auto vars:     Size  Location     Type
 12658 ;;  sw              1    1[BANK0 ] unsigned char 
 12659 ;; Return value:  Size  Location     Type
 12660 ;;		None               void
 12661 ;; Registers used:
 12662 ;;		wreg
 12663 ;; Tracked objects:
 12664 ;;		On entry : 0/0
 12665 ;;		On exit  : 0/0
 12666 ;;		Unchanged: 0/0
 12667 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12668 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12669 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12670 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12671 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12672 ;;Total ram usage:        2 bytes
 12673 ;; Hardware stack levels used:    1
 12674 ;; Hardware stack levels required when called:    5
 12675 ;; This function calls:
 12676 ;;		Nothing
 12677 ;; This function is called by:
 12678 ;;		_setSw_Enable
 12679 ;;		_setSw_Status
 12680 ;;		_setSw_Main
 12681 ;;		_Sw_Detect
 12682 ;; This function uses a non-reentrant model
 12683 ;;
 12684                           
 12685                           
 12686                           ;psect for function _SwPointSelect
 12687  1FD8                     _SwPointSelect:	
 12688                           
 12689                           ;incstack = 0
 12690                           ; Regs used in _SwPointSelect: [wreg]
 12691                           ;SwPointSelect@sw stored from wreg
 12692  1FD8  0020               	movlb	0	; select bank0
 12693  1FD9  00A1               	movwf	SwPointSelect@sw
 12694                           
 12695                           ;Switch_B1.c: 20: if (sw == 1) {
 12696  1FDA  0821               	movf	SwPointSelect@sw,w
 12697  1FDB  3A01               	xorlw	1
 12698  1FDC  1D03               	skipz
 12699  1FDD  2FE3               	goto	l5528
 12700                           
 12701                           ;Switch_B1.c: 21: Sw = &Sw1;
 12702  1FDE  304A               	movlw	_Sw1& (0+255)
 12703  1FDF  00A0               	movwf	??_SwPointSelect
 12704  1FE0  0820               	movf	??_SwPointSelect,w
 12705  1FE1  00FB               	movwf	_Sw
 12706                           
 12707                           ;Switch_B1.c: 22: }
 12708  1FE2  0008               	return
 12709  1FE3                     l5528:	
 12710                           
 12711                           ;Switch_B1.c: 25: else if (sw == 2) {
 12712  1FE3  0821               	movf	SwPointSelect@sw,w
 12713  1FE4  3A02               	xorlw	2
 12714  1FE5  1D03               	skipz
 12715  1FE6  0008               	return
 12716                           
 12717                           ;Switch_B1.c: 26: Sw = &Sw2;
 12718  1FE7  3053               	movlw	_Sw2& (0+255)
 12719  1FE8  00A0               	movwf	??_SwPointSelect
 12720  1FE9  0820               	movf	??_SwPointSelect,w
 12721  1FEA  00FB               	movwf	_Sw
 12722  1FEB  0008               	return
 12723  1FEC                     __end_of_SwPointSelect:	
 12724                           
 12725                           	psect	text77
 12726  098C                     __ptext77:	
 12727 ;; *************** function _setRF_DimmerLights *****************
 12728 ;; Defined at:
 12729 ;;		line 405 in file "../src/RF_Control_B1.c"
 12730 ;; Parameters:    Size  Location     Type
 12731 ;;  lights          1    wreg     unsigned char 
 12732 ;;  on              1   61[BANK0 ] unsigned char 
 12733 ;; Auto vars:     Size  Location     Type
 12734 ;;  lights          1   65[BANK0 ] unsigned char 
 12735 ;;  status          1   64[BANK0 ] unsigned char 
 12736 ;; Return value:  Size  Location     Type
 12737 ;;		None               void
 12738 ;; Registers used:
 12739 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12740 ;; Tracked objects:
 12741 ;;		On entry : 0/0
 12742 ;;		On exit  : 0/0
 12743 ;;		Unchanged: 0/0
 12744 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12745 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12746 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12747 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12748 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12749 ;;Total ram usage:        5 bytes
 12750 ;; Hardware stack levels used:    1
 12751 ;; Hardware stack levels required when called:    8
 12752 ;; This function calls:
 12753 ;;		_setPercentValue
 12754 ;; This function is called by:
 12755 ;;		_DlyOff_Main
 12756 ;;		_setDimmerLights_Adj
 12757 ;;		_setRFSW_Control
 12758 ;;		_Sw_DimmerOnFunc
 12759 ;;		_Sw_DimmerOffFunc
 12760 ;; This function uses a non-reentrant model
 12761 ;;
 12762                           
 12763                           
 12764                           ;psect for function _setRF_DimmerLights
 12765  098C                     _setRF_DimmerLights:	
 12766                           
 12767                           ;incstack = 0
 12768                           ; Regs used in _setRF_DimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12769                           ;setRF_DimmerLights@lights stored from wreg
 12770  098C  0020               	movlb	0	; select bank0
 12771  098D  00E1               	movwf	setRF_DimmerLights@lights
 12772                           
 12773                           ;RF_Control_B1.c: 406: char status;
 12774                           ;RF_Control_B1.c: 407: status = 1;
 12775  098E  01E0               	clrf	setRF_DimmerLights@status
 12776  098F  0AE0               	incf	setRF_DimmerLights@status,f
 12777                           
 12778                           ;RF_Control_B1.c: 408: status <<= (lights - 1);
 12779  0990  0861               	movf	setRF_DimmerLights@lights,w
 12780  0991  3EFF               	addlw	-1
 12781  0992  0A89               	incf	9,f
 12782  0993  2996               	goto	u4130
 12783  0994                     u4135:	
 12784  0994  1003               	clrc
 12785  0995  0DE0               	rlf	setRF_DimmerLights@status,f
 12786  0996                     u4130:	
 12787  0996  3EFF               	addlw	-1
 12788  0997  1D03               	skipz
 12789  0998  2994               	goto	u4135
 12790                           
 12791                           ;RF_Control_B1.c: 409: product->Data[11]=lights;
 12792  0999  0861               	movf	setRF_DimmerLights@lights,w
 12793  099A  00DE               	movwf	??_setRF_DimmerLights
 12794  099B  087D               	movf	_product,w
 12795  099C  3E0B               	addlw	11
 12796  099D  0086               	movwf	6
 12797  099E  3001               	movlw	1	; select bank2/3
 12798  099F  0087               	movwf	7
 12799  09A0  085E               	movf	??_setRF_DimmerLights,w
 12800  09A1  0081               	movwf	1
 12801                           
 12802                           ;RF_Control_B1.c: 412: product->Data[(20 + lights)]=setPercentValue(((char)((100-70)*0.8
      +                          )));
 12803  09A2  3018               	movlw	24
 12804  09A3  3196  262A  3189   	fcall	_setPercentValue
 12805  09A6  0020               	movlb	0	; select bank0
 12806  09A7  00DE               	movwf	??_setRF_DimmerLights
 12807  09A8  0861               	movf	setRF_DimmerLights@lights,w
 12808  09A9  3E14               	addlw	20
 12809  09AA  077D               	addwf	_product,w
 12810  09AB  00DF               	movwf	??_setRF_DimmerLights+1
 12811  09AC  085F               	movf	??_setRF_DimmerLights+1,w
 12812  09AD  0086               	movwf	6
 12813  09AE  3001               	movlw	1	; select bank2/3
 12814  09AF  0087               	movwf	7
 12815  09B0  085E               	movf	??_setRF_DimmerLights,w
 12816  09B1  0081               	movwf	1
 12817                           
 12818                           ;RF_Control_B1.c: 415: product->Data[9]=product->Data[20 + lights];
 12819  09B2  0861               	movf	setRF_DimmerLights@lights,w
 12820  09B3  3E14               	addlw	20
 12821  09B4  077D               	addwf	_product,w
 12822  09B5  00DE               	movwf	??_setRF_DimmerLights
 12823  09B6  085E               	movf	??_setRF_DimmerLights,w
 12824  09B7  0086               	movwf	6
 12825  09B8  3001               	movlw	1	; select bank2/3
 12826  09B9  0087               	movwf	7
 12827  09BA  0801               	movf	1,w
 12828  09BB  00DF               	movwf	??_setRF_DimmerLights+1
 12829  09BC  087D               	movf	_product,w
 12830  09BD  3E09               	addlw	9
 12831  09BE  0086               	movwf	6
 12832  09BF  3001               	movlw	1	; select bank2/3
 12833  09C0  0087               	movwf	7
 12834  09C1  085F               	movf	??_setRF_DimmerLights+1,w
 12835  09C2  0081               	movwf	1
 12836                           
 12837                           ;RF_Control_B1.c: 416: product->Data[17]=product->Data[26 + lights];
 12838  09C3  0861               	movf	setRF_DimmerLights@lights,w
 12839  09C4  3E1A               	addlw	26
 12840  09C5  077D               	addwf	_product,w
 12841  09C6  00DE               	movwf	??_setRF_DimmerLights
 12842  09C7  085E               	movf	??_setRF_DimmerLights,w
 12843  09C8  0086               	movwf	6
 12844  09C9  3001               	movlw	1	; select bank2/3
 12845  09CA  0087               	movwf	7
 12846  09CB  0801               	movf	1,w
 12847  09CC  00DF               	movwf	??_setRF_DimmerLights+1
 12848  09CD  087D               	movf	_product,w
 12849  09CE  3E11               	addlw	17
 12850  09CF  0086               	movwf	6
 12851  09D0  3001               	movlw	1	; select bank2/3
 12852  09D1  0087               	movwf	7
 12853  09D2  085F               	movf	??_setRF_DimmerLights+1,w
 12854  09D3  0081               	movwf	1
 12855                           
 12856                           ;RF_Control_B1.c: 417: if (on == 1) {
 12857  09D4  085D               	movf	setRF_DimmerLights@on,w
 12858  09D5  3A01               	xorlw	1
 12859  09D6  1D03               	skipz
 12860  09D7  29E8               	goto	l5614
 12861                           
 12862                           ;RF_Control_B1.c: 418: product->Data[15]=(product->Data[15] | status);
 12863  09D8  087D               	movf	_product,w
 12864  09D9  3E0F               	addlw	15
 12865  09DA  0086               	movwf	6
 12866  09DB  3001               	movlw	1	; select bank2/3
 12867  09DC  0087               	movwf	7
 12868  09DD  0801               	movf	1,w
 12869  09DE  0460               	iorwf	setRF_DimmerLights@status,w
 12870  09DF  00DE               	movwf	??_setRF_DimmerLights
 12871  09E0  087D               	movf	_product,w
 12872  09E1  3E0F               	addlw	15
 12873  09E2  0086               	movwf	6
 12874  09E3  3001               	movlw	1	; select bank2/3
 12875  09E4  0087               	movwf	7
 12876  09E5  085E               	movf	??_setRF_DimmerLights,w
 12877  09E6  0081               	movwf	1
 12878                           
 12879                           ;RF_Control_B1.c: 419: } else {
 12880  09E7  0008               	return
 12881  09E8                     l5614:	
 12882                           
 12883                           ;RF_Control_B1.c: 420: product->Data[15]=(product->Data[15]&(~status));
 12884  09E8  087D               	movf	_product,w
 12885  09E9  3E0F               	addlw	15
 12886  09EA  0086               	movwf	6
 12887  09EB  3001               	movlw	1	; select bank2/3
 12888  09EC  0087               	movwf	7
 12889  09ED  0960               	comf	setRF_DimmerLights@status,w
 12890  09EE  0501               	andwf	1,w
 12891  09EF  00DE               	movwf	??_setRF_DimmerLights
 12892  09F0  087D               	movf	_product,w
 12893  09F1  3E0F               	addlw	15
 12894  09F2  0086               	movwf	6
 12895  09F3  3001               	movlw	1	; select bank2/3
 12896  09F4  0087               	movwf	7
 12897  09F5  085E               	movf	??_setRF_DimmerLights,w
 12898  09F6  0081               	movwf	1
 12899  09F7  0008               	return
 12900  09F8                     __end_of_setRF_DimmerLights:	
 12901                           
 12902                           	psect	text78
 12903  162A                     __ptext78:	
 12904 ;; *************** function _setPercentValue *****************
 12905 ;; Defined at:
 12906 ;;		line 794 in file "../src/Dimmer_B1.c"
 12907 ;; Parameters:    Size  Location     Type
 12908 ;;  value           1    wreg     unsigned char 
 12909 ;; Auto vars:     Size  Location     Type
 12910 ;;  value           1   57[BANK0 ] unsigned char 
 12911 ;;  i               3   58[BANK0 ] float 
 12912 ;; Return value:  Size  Location     Type
 12913 ;;                  1    wreg      unsigned char 
 12914 ;; Registers used:
 12915 ;;		wreg, status,2, status,0, pclath, cstack
 12916 ;; Tracked objects:
 12917 ;;		On entry : 0/0
 12918 ;;		On exit  : 0/0
 12919 ;;		Unchanged: 0/0
 12920 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12921 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12922 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12923 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12924 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12925 ;;Total ram usage:        4 bytes
 12926 ;; Hardware stack levels used:    1
 12927 ;; Hardware stack levels required when called:    7
 12928 ;; This function calls:
 12929 ;;		___awtoft
 12930 ;;		___ftdiv
 12931 ;;		___fttol
 12932 ;; This function is called by:
 12933 ;;		_Flash_Memory_Initialization
 12934 ;;		_setRF_DimmerLights
 12935 ;; This function uses a non-reentrant model
 12936 ;;
 12937                           
 12938                           
 12939                           ;psect for function _setPercentValue
 12940  162A                     _setPercentValue:	
 12941                           
 12942                           ;incstack = 0
 12943                           ; Regs used in _setPercentValue: [wreg+status,2+status,0+pclath+cstack]
 12944                           ;setPercentValue@value stored from wreg
 12945  162A  0020               	movlb	0	; select bank0
 12946  162B  00D9               	movwf	setPercentValue@value
 12947                           
 12948                           ;Dimmer_B1.c: 796: float i = ((char)((100-20)*0.8)) - ((char)((100-70)*0.8));
 12949  162C  3000               	movlw	0
 12950  162D  00DA               	movwf	setPercentValue@i
 12951  162E  3020               	movlw	32
 12952  162F  00DB               	movwf	setPercentValue@i+1
 12953  1630  3042               	movlw	66
 12954  1631  00DC               	movwf	setPercentValue@i+2
 12955                           
 12956                           ;Dimmer_B1.c: 797: i /= 100;
 12957  1632  3000               	movlw	0
 12958  1633  00AE               	movwf	___ftdiv@f2
 12959  1634  30C8               	movlw	200
 12960  1635  00AF               	movwf	___ftdiv@f2+1
 12961  1636  3042               	movlw	66
 12962  1637  00B0               	movwf	___ftdiv@f2+2
 12963  1638  085A               	movf	setPercentValue@i,w
 12964  1639  00B1               	movwf	___ftdiv@f1
 12965  163A  085B               	movf	setPercentValue@i+1,w
 12966  163B  00B2               	movwf	___ftdiv@f1+1
 12967  163C  085C               	movf	setPercentValue@i+2,w
 12968  163D  00B3               	movwf	___ftdiv@f1+2
 12969  163E  3186  26BF  3196   	fcall	___ftdiv
 12970  1641  0020               	movlb	0	; select bank0
 12971  1642  082E               	movf	?___ftdiv,w
 12972  1643  00DA               	movwf	setPercentValue@i
 12973  1644  082F               	movf	?___ftdiv+1,w
 12974  1645  00DB               	movwf	setPercentValue@i+1
 12975  1646  0830               	movf	?___ftdiv+2,w
 12976  1647  00DC               	movwf	setPercentValue@i+2
 12977                           
 12978                           ;Dimmer_B1.c: 798: return (100 - (char) ((value - ((char)((100-70)*0.8))) / i));
 12979  1648  0859               	movf	setPercentValue@value,w
 12980  1649  3EE8               	addlw	232
 12981  164A  00A8               	movwf	___awtoft@c
 12982  164B  30FF               	movlw	255
 12983  164C  1803               	skipnc
 12984  164D  3000               	movlw	0
 12985  164E  00A9               	movwf	___awtoft@c+1
 12986  164F  3192  2247  3196   	fcall	___awtoft
 12987  1652  0020               	movlb	0	; select bank0
 12988  1653  0828               	movf	?___awtoft,w
 12989  1654  00B1               	movwf	___ftdiv@f1
 12990  1655  0829               	movf	?___awtoft+1,w
 12991  1656  00B2               	movwf	___ftdiv@f1+1
 12992  1657  082A               	movf	?___awtoft+2,w
 12993  1658  00B3               	movwf	___ftdiv@f1+2
 12994  1659  085A               	movf	setPercentValue@i,w
 12995  165A  00AE               	movwf	___ftdiv@f2
 12996  165B  085B               	movf	setPercentValue@i+1,w
 12997  165C  00AF               	movwf	___ftdiv@f2+1
 12998  165D  085C               	movf	setPercentValue@i+2,w
 12999  165E  00B0               	movwf	___ftdiv@f2+2
 13000  165F  3186  26BF  3196   	fcall	___ftdiv
 13001  1662  0020               	movlb	0	; select bank0
 13002  1663  082E               	movf	?___ftdiv,w
 13003  1664  00CB               	movwf	___fttol@f1
 13004  1665  082F               	movf	?___ftdiv+1,w
 13005  1666  00CC               	movwf	___fttol@f1+1
 13006  1667  0830               	movf	?___ftdiv+2,w
 13007  1668  00CD               	movwf	___fttol@f1+2
 13008  1669  318D  25A6         	fcall	___fttol
 13009  166B  0020               	movlb	0	; select bank0
 13010  166C  034B               	decf	?___fttol,w
 13011  166D  3AFF               	xorlw	255
 13012  166E  3E64               	addlw	100
 13013  166F  0008               	return
 13014  1670                     __end_of_setPercentValue:	
 13015                           
 13016                           	psect	text79
 13017  0DA6                     __ptext79:	
 13018 ;; *************** function ___fttol *****************
 13019 ;; Defined at:
 13020 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\fttol.c"
 13021 ;; Parameters:    Size  Location     Type
 13022 ;;  f1              3   43[BANK0 ] float 
 13023 ;; Auto vars:     Size  Location     Type
 13024 ;;  lval            4   52[BANK0 ] unsigned long 
 13025 ;;  exp1            1   56[BANK0 ] unsigned char 
 13026 ;;  sign1           1   51[BANK0 ] unsigned char 
 13027 ;; Return value:  Size  Location     Type
 13028 ;;                  4   43[BANK0 ] long 
 13029 ;; Registers used:
 13030 ;;		wreg, status,2, status,0
 13031 ;; Tracked objects:
 13032 ;;		On entry : 0/0
 13033 ;;		On exit  : 0/0
 13034 ;;		Unchanged: 0/0
 13035 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13036 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13037 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13038 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13039 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13040 ;;Total ram usage:       14 bytes
 13041 ;; Hardware stack levels used:    1
 13042 ;; Hardware stack levels required when called:    5
 13043 ;; This function calls:
 13044 ;;		Nothing
 13045 ;; This function is called by:
 13046 ;;		_getPercentValue
 13047 ;;		_setPercentValue
 13048 ;; This function uses a non-reentrant model
 13049 ;;
 13050                           
 13051                           
 13052                           ;psect for function ___fttol
 13053  0DA6                     ___fttol:	
 13054                           
 13055                           ;incstack = 0
 13056                           ; Regs used in ___fttol: [wreg+status,2+status,0]
 13057  0DA6  0020               	movlb	0	; select bank0
 13058  0DA7  084B               	movf	___fttol@f1,w
 13059  0DA8  00CF               	movwf	??___fttol
 13060  0DA9  084C               	movf	___fttol@f1+1,w
 13061  0DAA  00D0               	movwf	??___fttol+1
 13062  0DAB  084D               	movf	___fttol@f1+2,w
 13063  0DAC  00D1               	movwf	??___fttol+2
 13064  0DAD  1003               	clrc
 13065  0DAE  0D50               	rlf	??___fttol+1,w
 13066  0DAF  0D51               	rlf	??___fttol+2,w
 13067  0DB0  00D2               	movwf	??___fttol+3
 13068  0DB1  0852               	movf	??___fttol+3,w
 13069  0DB2  00D8               	movwf	___fttol@exp1
 13070  0DB3  08D8               	movf	___fttol@exp1,f
 13071  0DB4  1D03               	skipz
 13072  0DB5  2DBF               	goto	l5410
 13073  0DB6  3000               	movlw	0
 13074  0DB7  00CE               	movwf	?___fttol+3
 13075  0DB8  3000               	movlw	0
 13076  0DB9  00CD               	movwf	?___fttol+2
 13077  0DBA  3000               	movlw	0
 13078  0DBB  00CC               	movwf	?___fttol+1
 13079  0DBC  3000               	movlw	0
 13080  0DBD  00CB               	movwf	?___fttol
 13081  0DBE  0008               	return
 13082  0DBF                     l5410:	
 13083  0DBF  084B               	movf	___fttol@f1,w
 13084  0DC0  00CF               	movwf	??___fttol
 13085  0DC1  084C               	movf	___fttol@f1+1,w
 13086  0DC2  00D0               	movwf	??___fttol+1
 13087  0DC3  084D               	movf	___fttol@f1+2,w
 13088  0DC4  00D1               	movwf	??___fttol+2
 13089  0DC5  3017               	movlw	23
 13090  0DC6                     u3805:	
 13091  0DC6  36D1               	lsrf	??___fttol+2,f
 13092  0DC7  0CD0               	rrf	??___fttol+1,f
 13093  0DC8  0CCF               	rrf	??___fttol,f
 13094  0DC9  0B89               	decfsz	9,f
 13095  0DCA  2DC6               	goto	u3805
 13096  0DCB  084F               	movf	??___fttol,w
 13097  0DCC  00D2               	movwf	??___fttol+3
 13098  0DCD  0852               	movf	??___fttol+3,w
 13099  0DCE  00D3               	movwf	___fttol@sign1
 13100  0DCF  17CC               	bsf	___fttol@f1+1,7
 13101  0DD0  30FF               	movlw	255
 13102  0DD1  05CB               	andwf	___fttol@f1,f
 13103  0DD2  30FF               	movlw	255
 13104  0DD3  05CC               	andwf	___fttol@f1+1,f
 13105  0DD4  3000               	movlw	0
 13106  0DD5  05CD               	andwf	___fttol@f1+2,f
 13107  0DD6  084B               	movf	___fttol@f1,w
 13108  0DD7  00D4               	movwf	___fttol@lval
 13109  0DD8  084C               	movf	___fttol@f1+1,w
 13110  0DD9  00D5               	movwf	___fttol@lval+1
 13111  0DDA  084D               	movf	___fttol@f1+2,w
 13112  0DDB  00D6               	movwf	___fttol@lval+2
 13113  0DDC  01D7               	clrf	___fttol@lval+3
 13114  0DDD  308E               	movlw	142
 13115  0DDE  02D8               	subwf	___fttol@exp1,f
 13116  0DDF  1FD8               	btfss	___fttol@exp1,7
 13117  0DE0  2DFD               	goto	l5430
 13118  0DE1  0858               	movf	___fttol@exp1,w
 13119  0DE2  3A80               	xorlw	128
 13120  0DE3  3E8F               	addlw	143
 13121  0DE4  1803               	skipnc
 13122  0DE5  2DEF               	goto	l5428
 13123  0DE6  3000               	movlw	0
 13124  0DE7  00CE               	movwf	?___fttol+3
 13125  0DE8  3000               	movlw	0
 13126  0DE9  00CD               	movwf	?___fttol+2
 13127  0DEA  3000               	movlw	0
 13128  0DEB  00CC               	movwf	?___fttol+1
 13129  0DEC  3000               	movlw	0
 13130  0DED  00CB               	movwf	?___fttol
 13131  0DEE  0008               	return
 13132  0DEF                     l5428:	
 13133  0DEF  3001               	movlw	1
 13134  0DF0                     u3835:	
 13135  0DF0  36D7               	lsrf	___fttol@lval+3,f
 13136  0DF1  0CD6               	rrf	___fttol@lval+2,f
 13137  0DF2  0CD5               	rrf	___fttol@lval+1,f
 13138  0DF3  0CD4               	rrf	___fttol@lval,f
 13139  0DF4  0B89               	decfsz	9,f
 13140  0DF5  2DF0               	goto	u3835
 13141  0DF6  3001               	movlw	1
 13142  0DF7  00CF               	movwf	??___fttol
 13143  0DF8  084F               	movf	??___fttol,w
 13144  0DF9  07D8               	addwf	___fttol@exp1,f
 13145  0DFA  1903               	btfsc	3,2
 13146  0DFB  2E16               	goto	l5440
 13147  0DFC  2DEF               	goto	l5428
 13148  0DFD                     l5430:	
 13149  0DFD  3018               	movlw	24
 13150  0DFE  0258               	subwf	___fttol@exp1,w
 13151  0DFF  1C03               	skipc
 13152  0E00  2E13               	goto	l5438
 13153  0E01  3000               	movlw	0
 13154  0E02  00CE               	movwf	?___fttol+3
 13155  0E03  3000               	movlw	0
 13156  0E04  00CD               	movwf	?___fttol+2
 13157  0E05  3000               	movlw	0
 13158  0E06  00CC               	movwf	?___fttol+1
 13159  0E07  3000               	movlw	0
 13160  0E08  00CB               	movwf	?___fttol
 13161  0E09  0008               	return
 13162  0E0A                     l5436:	
 13163  0E0A  3001               	movlw	1
 13164  0E0B                     u3865:	
 13165  0E0B  35D4               	lslf	___fttol@lval,f
 13166  0E0C  0DD5               	rlf	___fttol@lval+1,f
 13167  0E0D  0DD6               	rlf	___fttol@lval+2,f
 13168  0E0E  0DD7               	rlf	___fttol@lval+3,f
 13169  0E0F  0B89               	decfsz	9,f
 13170  0E10  2E0B               	goto	u3865
 13171  0E11  3001               	movlw	1
 13172  0E12  02D8               	subwf	___fttol@exp1,f
 13173  0E13                     l5438:	
 13174  0E13  08D8               	movf	___fttol@exp1,f
 13175  0E14  1D03               	skipz
 13176  0E15  2E0A               	goto	l5436
 13177  0E16                     l5440:	
 13178  0E16  0853               	movf	___fttol@sign1,w
 13179  0E17  1903               	btfsc	3,2
 13180  0E18  2E24               	goto	l5444
 13181  0E19  09D4               	comf	___fttol@lval,f
 13182  0E1A  09D5               	comf	___fttol@lval+1,f
 13183  0E1B  09D6               	comf	___fttol@lval+2,f
 13184  0E1C  09D7               	comf	___fttol@lval+3,f
 13185  0E1D  0AD4               	incf	___fttol@lval,f
 13186  0E1E  1903               	skipnz
 13187  0E1F  0AD5               	incf	___fttol@lval+1,f
 13188  0E20  1903               	skipnz
 13189  0E21  0AD6               	incf	___fttol@lval+2,f
 13190  0E22  1903               	skipnz
 13191  0E23  0AD7               	incf	___fttol@lval+3,f
 13192  0E24                     l5444:	
 13193  0E24  0857               	movf	___fttol@lval+3,w
 13194  0E25  00CE               	movwf	?___fttol+3
 13195  0E26  0856               	movf	___fttol@lval+2,w
 13196  0E27  00CD               	movwf	?___fttol+2
 13197  0E28  0855               	movf	___fttol@lval+1,w
 13198  0E29  00CC               	movwf	?___fttol+1
 13199  0E2A  0854               	movf	___fttol@lval,w
 13200  0E2B  00CB               	movwf	?___fttol
 13201  0E2C  0008               	return
 13202  0E2D                     __end_of___fttol:	
 13203                           
 13204                           	psect	text80
 13205  06BF                     __ptext80:	
 13206 ;; *************** function ___ftdiv *****************
 13207 ;; Defined at:
 13208 ;;		line 49 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\pic\ftdiv.c"
 13209 ;; Parameters:    Size  Location     Type
 13210 ;;  f2              3   14[BANK0 ] float 
 13211 ;;  f1              3   17[BANK0 ] float 
 13212 ;; Auto vars:     Size  Location     Type
 13213 ;;  f3              3   25[BANK0 ] float 
 13214 ;;  sign            1   29[BANK0 ] unsigned char 
 13215 ;;  exp             1   28[BANK0 ] unsigned char 
 13216 ;;  cntr            1   24[BANK0 ] unsigned char 
 13217 ;; Return value:  Size  Location     Type
 13218 ;;                  3   14[BANK0 ] float 
 13219 ;; Registers used:
 13220 ;;		wreg, status,2, status,0, pclath, cstack
 13221 ;; Tracked objects:
 13222 ;;		On entry : 0/0
 13223 ;;		On exit  : 0/0
 13224 ;;		Unchanged: 0/0
 13225 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13226 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13227 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13228 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13229 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13230 ;;Total ram usage:       16 bytes
 13231 ;; Hardware stack levels used:    1
 13232 ;; Hardware stack levels required when called:    6
 13233 ;; This function calls:
 13234 ;;		___ftpack
 13235 ;; This function is called by:
 13236 ;;		_getPercentValue
 13237 ;;		_setPercentValue
 13238 ;; This function uses a non-reentrant model
 13239 ;;
 13240                           
 13241                           
 13242                           ;psect for function ___ftdiv
 13243  06BF                     ___ftdiv:	
 13244                           
 13245                           ;incstack = 0
 13246                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
 13247  06BF  0020               	movlb	0	; select bank0
 13248  06C0  0831               	movf	___ftdiv@f1,w
 13249  06C1  00B4               	movwf	??___ftdiv
 13250  06C2  0832               	movf	___ftdiv@f1+1,w
 13251  06C3  00B5               	movwf	??___ftdiv+1
 13252  06C4  0833               	movf	___ftdiv@f1+2,w
 13253  06C5  00B6               	movwf	??___ftdiv+2
 13254  06C6  1003               	clrc
 13255  06C7  0D35               	rlf	??___ftdiv+1,w
 13256  06C8  0D36               	rlf	??___ftdiv+2,w
 13257  06C9  00B7               	movwf	??___ftdiv+3
 13258  06CA  0837               	movf	??___ftdiv+3,w
 13259  06CB  00BC               	movwf	___ftdiv@exp
 13260  06CC  08BC               	movf	___ftdiv@exp,f
 13261  06CD  1D03               	skipz
 13262  06CE  2ED6               	goto	l5318
 13263  06CF  3000               	movlw	0
 13264  06D0  00AE               	movwf	?___ftdiv
 13265  06D1  3000               	movlw	0
 13266  06D2  00AF               	movwf	?___ftdiv+1
 13267  06D3  3000               	movlw	0
 13268  06D4  00B0               	movwf	?___ftdiv+2
 13269  06D5  0008               	return
 13270  06D6                     l5318:	
 13271  06D6  082E               	movf	___ftdiv@f2,w
 13272  06D7  00B4               	movwf	??___ftdiv
 13273  06D8  082F               	movf	___ftdiv@f2+1,w
 13274  06D9  00B5               	movwf	??___ftdiv+1
 13275  06DA  0830               	movf	___ftdiv@f2+2,w
 13276  06DB  00B6               	movwf	??___ftdiv+2
 13277  06DC  1003               	clrc
 13278  06DD  0D35               	rlf	??___ftdiv+1,w
 13279  06DE  0D36               	rlf	??___ftdiv+2,w
 13280  06DF  00B7               	movwf	??___ftdiv+3
 13281  06E0  0837               	movf	??___ftdiv+3,w
 13282  06E1  00BD               	movwf	___ftdiv@sign
 13283  06E2  08BD               	movf	___ftdiv@sign,f
 13284  06E3  1D03               	skipz
 13285  06E4  2EEC               	goto	l5324
 13286  06E5  3000               	movlw	0
 13287  06E6  00AE               	movwf	?___ftdiv
 13288  06E7  3000               	movlw	0
 13289  06E8  00AF               	movwf	?___ftdiv+1
 13290  06E9  3000               	movlw	0
 13291  06EA  00B0               	movwf	?___ftdiv+2
 13292  06EB  0008               	return
 13293  06EC                     l5324:	
 13294  06EC  3000               	movlw	0
 13295  06ED  00B9               	movwf	___ftdiv@f3
 13296  06EE  3000               	movlw	0
 13297  06EF  00BA               	movwf	___ftdiv@f3+1
 13298  06F0  3000               	movlw	0
 13299  06F1  00BB               	movwf	___ftdiv@f3+2
 13300  06F2  3089               	movlw	137
 13301  06F3  073D               	addwf	___ftdiv@sign,w
 13302  06F4  00B4               	movwf	??___ftdiv
 13303  06F5  0834               	movf	??___ftdiv,w
 13304  06F6  02BC               	subwf	___ftdiv@exp,f
 13305  06F7  0831               	movf	___ftdiv@f1,w
 13306  06F8  00B4               	movwf	??___ftdiv
 13307  06F9  0832               	movf	___ftdiv@f1+1,w
 13308  06FA  00B5               	movwf	??___ftdiv+1
 13309  06FB  0833               	movf	___ftdiv@f1+2,w
 13310  06FC  00B6               	movwf	??___ftdiv+2
 13311  06FD  3010               	movlw	16
 13312  06FE                     u3615:	
 13313  06FE  36B6               	lsrf	??___ftdiv+2,f
 13314  06FF  0CB5               	rrf	??___ftdiv+1,f
 13315  0700  0CB4               	rrf	??___ftdiv,f
 13316  0701  0B89               	decfsz	9,f
 13317  0702  2EFE               	goto	u3615
 13318  0703  0834               	movf	??___ftdiv,w
 13319  0704  00B7               	movwf	??___ftdiv+3
 13320  0705  0837               	movf	??___ftdiv+3,w
 13321  0706  00BD               	movwf	___ftdiv@sign
 13322  0707  082E               	movf	___ftdiv@f2,w
 13323  0708  00B4               	movwf	??___ftdiv
 13324  0709  082F               	movf	___ftdiv@f2+1,w
 13325  070A  00B5               	movwf	??___ftdiv+1
 13326  070B  0830               	movf	___ftdiv@f2+2,w
 13327  070C  00B6               	movwf	??___ftdiv+2
 13328  070D  3010               	movlw	16
 13329  070E                     u3625:	
 13330  070E  36B6               	lsrf	??___ftdiv+2,f
 13331  070F  0CB5               	rrf	??___ftdiv+1,f
 13332  0710  0CB4               	rrf	??___ftdiv,f
 13333  0711  0B89               	decfsz	9,f
 13334  0712  2F0E               	goto	u3625
 13335  0713  0834               	movf	??___ftdiv,w
 13336  0714  00B7               	movwf	??___ftdiv+3
 13337  0715  0837               	movf	??___ftdiv+3,w
 13338  0716  06BD               	xorwf	___ftdiv@sign,f
 13339  0717  3080               	movlw	128
 13340  0718  00B4               	movwf	??___ftdiv
 13341  0719  0834               	movf	??___ftdiv,w
 13342  071A  05BD               	andwf	___ftdiv@sign,f
 13343  071B  17B2               	bsf	___ftdiv@f1+1,7
 13344  071C  30FF               	movlw	255
 13345  071D  05B1               	andwf	___ftdiv@f1,f
 13346  071E  30FF               	movlw	255
 13347  071F  05B2               	andwf	___ftdiv@f1+1,f
 13348  0720  3000               	movlw	0
 13349  0721  05B3               	andwf	___ftdiv@f1+2,f
 13350  0722  17AF               	bsf	___ftdiv@f2+1,7
 13351  0723  30FF               	movlw	255
 13352  0724  05AE               	andwf	___ftdiv@f2,f
 13353  0725  30FF               	movlw	255
 13354  0726  05AF               	andwf	___ftdiv@f2+1,f
 13355  0727  3000               	movlw	0
 13356  0728  05B0               	andwf	___ftdiv@f2+2,f
 13357  0729  3018               	movlw	24
 13358  072A  00B4               	movwf	??___ftdiv
 13359  072B  0834               	movf	??___ftdiv,w
 13360  072C  00B8               	movwf	___ftdiv@cntr
 13361  072D                     l5338:	
 13362  072D  3001               	movlw	1
 13363  072E                     u3635:	
 13364  072E  35B9               	lslf	___ftdiv@f3,f
 13365  072F  0DBA               	rlf	___ftdiv@f3+1,f
 13366  0730  0DBB               	rlf	___ftdiv@f3+2,f
 13367  0731  0B89               	decfsz	9,f
 13368  0732  2F2E               	goto	u3635
 13369  0733  0830               	movf	___ftdiv@f2+2,w
 13370  0734  0233               	subwf	___ftdiv@f1+2,w
 13371  0735  1D03               	skipz
 13372  0736  2F3D               	goto	u3645
 13373  0737  082F               	movf	___ftdiv@f2+1,w
 13374  0738  0232               	subwf	___ftdiv@f1+1,w
 13375  0739  1D03               	skipz
 13376  073A  2F3D               	goto	u3645
 13377  073B  082E               	movf	___ftdiv@f2,w
 13378  073C  0231               	subwf	___ftdiv@f1,w
 13379  073D                     u3645:	
 13380  073D  1C03               	skipc
 13381  073E  2F46               	goto	l5346
 13382  073F  082E               	movf	___ftdiv@f2,w
 13383  0740  02B1               	subwf	___ftdiv@f1,f
 13384  0741  082F               	movf	___ftdiv@f2+1,w
 13385  0742  3BB2               	subwfb	___ftdiv@f1+1,f
 13386  0743  0830               	movf	___ftdiv@f2+2,w
 13387  0744  3BB3               	subwfb	___ftdiv@f1+2,f
 13388  0745  1439               	bsf	___ftdiv@f3,0
 13389  0746                     l5346:	
 13390  0746  3001               	movlw	1
 13391  0747                     u3655:	
 13392  0747  35B1               	lslf	___ftdiv@f1,f
 13393  0748  0DB2               	rlf	___ftdiv@f1+1,f
 13394  0749  0DB3               	rlf	___ftdiv@f1+2,f
 13395  074A  0B89               	decfsz	9,f
 13396  074B  2F47               	goto	u3655
 13397  074C  3001               	movlw	1
 13398  074D  02B8               	subwf	___ftdiv@cntr,f
 13399  074E  1D03               	btfss	3,2
 13400  074F  2F2D               	goto	l5338
 13401  0750  0839               	movf	___ftdiv@f3,w
 13402  0751  00A0               	movwf	___ftpack@arg
 13403  0752  083A               	movf	___ftdiv@f3+1,w
 13404  0753  00A1               	movwf	___ftpack@arg+1
 13405  0754  083B               	movf	___ftdiv@f3+2,w
 13406  0755  00A2               	movwf	___ftpack@arg+2
 13407  0756  083C               	movf	___ftdiv@exp,w
 13408  0757  00B4               	movwf	??___ftdiv
 13409  0758  0834               	movf	??___ftdiv,w
 13410  0759  00A3               	movwf	___ftpack@exp
 13411  075A  083D               	movf	___ftdiv@sign,w
 13412  075B  00B5               	movwf	??___ftdiv+1
 13413  075C  0835               	movf	??___ftdiv+1,w
 13414  075D  00A4               	movwf	___ftpack@sign
 13415  075E  3189  212B         	fcall	___ftpack
 13416  0760  0020               	movlb	0	; select bank0
 13417  0761  0820               	movf	?___ftpack,w
 13418  0762  00AE               	movwf	?___ftdiv
 13419  0763  0821               	movf	?___ftpack+1,w
 13420  0764  00AF               	movwf	?___ftdiv+1
 13421  0765  0822               	movf	?___ftpack+2,w
 13422  0766  00B0               	movwf	?___ftdiv+2
 13423  0767  0008               	return
 13424  0768                     __end_of___ftdiv:	
 13425                           
 13426                           	psect	text81
 13427  1247                     __ptext81:	
 13428 ;; *************** function ___awtoft *****************
 13429 ;; Defined at:
 13430 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awtoft.c"
 13431 ;; Parameters:    Size  Location     Type
 13432 ;;  c               2    8[BANK0 ] int 
 13433 ;; Auto vars:     Size  Location     Type
 13434 ;;  sign            1   13[BANK0 ] unsigned char 
 13435 ;; Return value:  Size  Location     Type
 13436 ;;                  3    8[BANK0 ] float 
 13437 ;; Registers used:
 13438 ;;		wreg, status,2, status,0, pclath, cstack
 13439 ;; Tracked objects:
 13440 ;;		On entry : 0/0
 13441 ;;		On exit  : 0/0
 13442 ;;		Unchanged: 0/0
 13443 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13444 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13445 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13446 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13447 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13448 ;;Total ram usage:        6 bytes
 13449 ;; Hardware stack levels used:    1
 13450 ;; Hardware stack levels required when called:    6
 13451 ;; This function calls:
 13452 ;;		___ftpack
 13453 ;; This function is called by:
 13454 ;;		_getPercentValue
 13455 ;;		_setPercentValue
 13456 ;; This function uses a non-reentrant model
 13457 ;;
 13458                           
 13459                           
 13460                           ;psect for function ___awtoft
 13461  1247                     ___awtoft:	
 13462                           
 13463                           ;incstack = 0
 13464                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
 13465  1247  0020               	movlb	0	; select bank0
 13466  1248  01AD               	clrf	___awtoft@sign
 13467  1249  1FA9               	btfss	___awtoft@c+1,7
 13468  124A  2A52               	goto	l5236
 13469  124B  09A8               	comf	___awtoft@c,f
 13470  124C  09A9               	comf	___awtoft@c+1,f
 13471  124D  0AA8               	incf	___awtoft@c,f
 13472  124E  1903               	skipnz
 13473  124F  0AA9               	incf	___awtoft@c+1,f
 13474  1250  01AD               	clrf	___awtoft@sign
 13475  1251  0AAD               	incf	___awtoft@sign,f
 13476  1252                     l5236:	
 13477  1252  0828               	movf	___awtoft@c,w
 13478  1253  00A0               	movwf	___ftpack@arg
 13479  1254  0829               	movf	___awtoft@c+1,w
 13480  1255  00A1               	movwf	___ftpack@arg+1
 13481  1256  01A2               	clrf	___ftpack@arg+2
 13482  1257  308E               	movlw	142
 13483  1258  00AB               	movwf	??___awtoft
 13484  1259  082B               	movf	??___awtoft,w
 13485  125A  00A3               	movwf	___ftpack@exp
 13486  125B  082D               	movf	___awtoft@sign,w
 13487  125C  00AC               	movwf	??___awtoft+1
 13488  125D  082C               	movf	??___awtoft+1,w
 13489  125E  00A4               	movwf	___ftpack@sign
 13490  125F  3189  212B         	fcall	___ftpack
 13491  1261  0020               	movlb	0	; select bank0
 13492  1262  0820               	movf	?___ftpack,w
 13493  1263  00A8               	movwf	?___awtoft
 13494  1264  0821               	movf	?___ftpack+1,w
 13495  1265  00A9               	movwf	?___awtoft+1
 13496  1266  0822               	movf	?___ftpack+2,w
 13497  1267  00AA               	movwf	?___awtoft+2
 13498  1268  0008               	return
 13499  1269                     __end_of___awtoft:	
 13500                           
 13501                           	psect	text82
 13502  092B                     __ptext82:	
 13503 ;; *************** function ___ftpack *****************
 13504 ;; Defined at:
 13505 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\float.c"
 13506 ;; Parameters:    Size  Location     Type
 13507 ;;  arg             3    0[BANK0 ] unsigned um
 13508 ;;  exp             1    3[BANK0 ] unsigned char 
 13509 ;;  sign            1    4[BANK0 ] unsigned char 
 13510 ;; Auto vars:     Size  Location     Type
 13511 ;;		None
 13512 ;; Return value:  Size  Location     Type
 13513 ;;                  3    0[BANK0 ] float 
 13514 ;; Registers used:
 13515 ;;		wreg, status,2, status,0
 13516 ;; Tracked objects:
 13517 ;;		On entry : 0/0
 13518 ;;		On exit  : 0/0
 13519 ;;		Unchanged: 0/0
 13520 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13521 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13522 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13523 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13524 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13525 ;;Total ram usage:        8 bytes
 13526 ;; Hardware stack levels used:    1
 13527 ;; Hardware stack levels required when called:    5
 13528 ;; This function calls:
 13529 ;;		Nothing
 13530 ;; This function is called by:
 13531 ;;		___awtoft
 13532 ;;		___ftadd
 13533 ;;		___ftdiv
 13534 ;;		___ftmul
 13535 ;; This function uses a non-reentrant model
 13536 ;;
 13537                           
 13538                           
 13539                           ;psect for function ___ftpack
 13540  092B                     ___ftpack:	
 13541                           
 13542                           ;incstack = 0
 13543                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 13544  092B  0020               	movlb	0	; select bank0
 13545  092C  0823               	movf	___ftpack@exp,w
 13546  092D  1903               	btfsc	3,2
 13547  092E  2934               	goto	l5202
 13548  092F  0822               	movf	___ftpack@arg+2,w
 13549  0930  0421               	iorwf	___ftpack@arg+1,w
 13550  0931  0420               	iorwf	___ftpack@arg,w
 13551  0932  1D03               	skipz
 13552  0933  2945               	goto	l5208
 13553  0934                     l5202:	
 13554  0934  3000               	movlw	0
 13555  0935  00A0               	movwf	?___ftpack
 13556  0936  3000               	movlw	0
 13557  0937  00A1               	movwf	?___ftpack+1
 13558  0938  3000               	movlw	0
 13559  0939  00A2               	movwf	?___ftpack+2
 13560  093A  0008               	return
 13561  093B                     l5206:	
 13562  093B  3001               	movlw	1
 13563  093C  00A5               	movwf	??___ftpack
 13564  093D  0825               	movf	??___ftpack,w
 13565  093E  07A3               	addwf	___ftpack@exp,f
 13566  093F  3001               	movlw	1
 13567  0940                     u3265:	
 13568  0940  36A2               	lsrf	___ftpack@arg+2,f
 13569  0941  0CA1               	rrf	___ftpack@arg+1,f
 13570  0942  0CA0               	rrf	___ftpack@arg,f
 13571  0943  0B89               	decfsz	9,f
 13572  0944  2940               	goto	u3265
 13573  0945                     l5208:	
 13574  0945  30FE               	movlw	254
 13575  0946  0522               	andwf	___ftpack@arg+2,w
 13576  0947  1903               	btfsc	3,2
 13577  0948  295E               	goto	l2942
 13578  0949  293B               	goto	l5206
 13579  094A                     l5210:	
 13580  094A  3001               	movlw	1
 13581  094B  00A5               	movwf	??___ftpack
 13582  094C  0825               	movf	??___ftpack,w
 13583  094D  07A3               	addwf	___ftpack@exp,f
 13584  094E  3001               	movlw	1
 13585  094F  07A0               	addwf	___ftpack@arg,f
 13586  0950  3000               	movlw	0
 13587  0951  1803               	skipnc
 13588  0952  3001               	movlw	1
 13589  0953  07A1               	addwf	___ftpack@arg+1,f
 13590  0954  3000               	movlw	0
 13591  0955  1803               	skipnc
 13592  0956  3001               	movlw	1
 13593  0957  07A2               	addwf	___ftpack@arg+2,f
 13594  0958  3001               	movlw	1
 13595  0959                     u3285:	
 13596  0959  36A2               	lsrf	___ftpack@arg+2,f
 13597  095A  0CA1               	rrf	___ftpack@arg+1,f
 13598  095B  0CA0               	rrf	___ftpack@arg,f
 13599  095C  0B89               	decfsz	9,f
 13600  095D  2959               	goto	u3285
 13601  095E                     l2942:	
 13602  095E  30FF               	movlw	255
 13603  095F  0522               	andwf	___ftpack@arg+2,w
 13604  0960  1903               	btfsc	3,2
 13605  0961  296B               	goto	l5218
 13606  0962  294A               	goto	l5210
 13607  0963                     l5216:	
 13608  0963  3001               	movlw	1
 13609  0964  02A3               	subwf	___ftpack@exp,f
 13610  0965  3001               	movlw	1
 13611  0966                     u3305:	
 13612  0966  35A0               	lslf	___ftpack@arg,f
 13613  0967  0DA1               	rlf	___ftpack@arg+1,f
 13614  0968  0DA2               	rlf	___ftpack@arg+2,f
 13615  0969  0B89               	decfsz	9,f
 13616  096A  2966               	goto	u3305
 13617  096B                     l5218:	
 13618  096B  1FA1               	btfss	___ftpack@arg+1,7
 13619  096C  2963               	goto	l5216
 13620  096D  1823               	btfsc	___ftpack@exp,0
 13621  096E  2975               	goto	l2948
 13622  096F  30FF               	movlw	255
 13623  0970  05A0               	andwf	___ftpack@arg,f
 13624  0971  307F               	movlw	127
 13625  0972  05A1               	andwf	___ftpack@arg+1,f
 13626  0973  30FF               	movlw	255
 13627  0974  05A2               	andwf	___ftpack@arg+2,f
 13628  0975                     l2948:	
 13629  0975  1003               	clrc
 13630  0976  0CA3               	rrf	___ftpack@exp,f
 13631  0977  0823               	movf	___ftpack@exp,w
 13632  0978  00A5               	movwf	??___ftpack
 13633  0979  01A6               	clrf	??___ftpack+1
 13634  097A  01A7               	clrf	??___ftpack+2
 13635  097B  3010               	movlw	16
 13636  097C                     u3335:	
 13637  097C  35A5               	lslf	??___ftpack,f
 13638  097D  0DA6               	rlf	??___ftpack+1,f
 13639  097E  0DA7               	rlf	??___ftpack+2,f
 13640  097F  0B89               	decfsz	9,f
 13641  0980  297C               	goto	u3335
 13642  0981  0825               	movf	??___ftpack,w
 13643  0982  04A0               	iorwf	___ftpack@arg,f
 13644  0983  0826               	movf	??___ftpack+1,w
 13645  0984  04A1               	iorwf	___ftpack@arg+1,f
 13646  0985  0827               	movf	??___ftpack+2,w
 13647  0986  04A2               	iorwf	___ftpack@arg+2,f
 13648  0987  0824               	movf	___ftpack@sign,w
 13649  0988  1903               	btfsc	3,2
 13650  0989  0008               	return
 13651  098A  17A2               	bsf	___ftpack@arg+2,7
 13652  098B  0008               	return
 13653  098C                     __end_of___ftpack:	
 13654                           
 13655                           	psect	text83
 13656  1EEF                     __ptext83:	
 13657 ;; *************** function _setRFSW_Status *****************
 13658 ;; Defined at:
 13659 ;;		line 387 in file "../src/RF_Control_B1.c"
 13660 ;; Parameters:    Size  Location     Type
 13661 ;;  sw              1    wreg     unsigned char 
 13662 ;;  command         1    2[BANK0 ] unsigned char 
 13663 ;; Auto vars:     Size  Location     Type
 13664 ;;  sw              1    3[BANK0 ] unsigned char 
 13665 ;; Return value:  Size  Location     Type
 13666 ;;		None               void
 13667 ;; Registers used:
 13668 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13669 ;; Tracked objects:
 13670 ;;		On entry : 0/0
 13671 ;;		On exit  : 0/0
 13672 ;;		Unchanged: 0/0
 13673 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13674 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13675 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13676 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13677 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13678 ;;Total ram usage:        2 bytes
 13679 ;; Hardware stack levels used:    1
 13680 ;; Hardware stack levels required when called:    6
 13681 ;; This function calls:
 13682 ;;		_RfSWPointSelect
 13683 ;; This function is called by:
 13684 ;;		_DlyOff_Main
 13685 ;;		_setControl_Lights_Table
 13686 ;;		_Sw_DimmerOnFunc
 13687 ;;		_Sw_DimmerAdjFunc
 13688 ;;		_setDimmerLights_ERROR
 13689 ;; This function uses a non-reentrant model
 13690 ;;
 13691                           
 13692                           
 13693                           ;psect for function _setRFSW_Status
 13694  1EEF                     _setRFSW_Status:	
 13695                           
 13696                           ;incstack = 0
 13697                           ; Regs used in _setRFSW_Status: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13698                           ;setRFSW_Status@sw stored from wreg
 13699  1EEF  0020               	movlb	0	; select bank0
 13700  1EF0  00A3               	movwf	setRFSW_Status@sw
 13701                           
 13702                           ;RF_Control_B1.c: 388: RfSWPointSelect(sw);
 13703  1EF1  0823               	movf	setRFSW_Status@sw,w
 13704  1EF2  3190  209E         	fcall	_RfSWPointSelect
 13705                           
 13706                           ;RF_Control_B1.c: 389: RFSW->Status = command;
 13707  1EF4  0021               	movlb	1	; select bank1
 13708  1EF5  083F               	movf	_RFSW^(0+128),w
 13709  1EF6  0086               	movwf	6
 13710  1EF7  0187               	clrf	7
 13711  1EF8  0020               	movlb	0	; select bank0
 13712  1EF9  0822               	movf	setRFSW_Status@command,w
 13713  1EFA  1001               	bcf	1,0
 13714  1EFB  1D03               	skipz
 13715  1EFC  1401               	bsf	1,0
 13716  1EFD  0008               	return
 13717  1EFE                     __end_of_setRFSW_Status:	
 13718                           
 13719                           	psect	text84
 13720  109E                     __ptext84:	
 13721 ;; *************** function _RfSWPointSelect *****************
 13722 ;; Defined at:
 13723 ;;		line 322 in file "../src/RF_Control_B1.c"
 13724 ;; Parameters:    Size  Location     Type
 13725 ;;  sw              1    wreg     unsigned char 
 13726 ;; Auto vars:     Size  Location     Type
 13727 ;;  sw              1    1[BANK0 ] unsigned char 
 13728 ;; Return value:  Size  Location     Type
 13729 ;;		None               void
 13730 ;; Registers used:
 13731 ;;		wreg
 13732 ;; Tracked objects:
 13733 ;;		On entry : 0/0
 13734 ;;		On exit  : 0/0
 13735 ;;		Unchanged: 0/0
 13736 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13737 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13738 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13739 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13740 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13741 ;;Total ram usage:        2 bytes
 13742 ;; Hardware stack levels used:    1
 13743 ;; Hardware stack levels required when called:    5
 13744 ;; This function calls:
 13745 ;;		Nothing
 13746 ;; This function is called by:
 13747 ;;		_setRFSW_Control
 13748 ;;		_setRFSW_AdjControl
 13749 ;;		_setRFSW_Status
 13750 ;; This function uses a non-reentrant model
 13751 ;;
 13752                           
 13753                           
 13754                           ;psect for function _RfSWPointSelect
 13755  109E                     _RfSWPointSelect:	
 13756                           
 13757                           ;incstack = 0
 13758                           ; Regs used in _RfSWPointSelect: [wreg]
 13759                           ;RfSWPointSelect@sw stored from wreg
 13760  109E  0020               	movlb	0	; select bank0
 13761  109F  00A1               	movwf	RfSWPointSelect@sw
 13762                           
 13763                           ;RF_Control_B1.c: 324: if (sw == 1) {
 13764  10A0  0821               	movf	RfSWPointSelect@sw,w
 13765  10A1  3A01               	xorlw	1
 13766  10A2  1D03               	skipz
 13767  10A3  28A9               	goto	l2230
 13768                           
 13769                           ;RF_Control_B1.c: 325: RFSW = &RFSW1;
 13770  10A4  30E7               	movlw	_RFSW1& (0+255)
 13771  10A5  00A0               	movwf	??_RfSWPointSelect
 13772  10A6  0820               	movf	??_RfSWPointSelect,w
 13773  10A7  0021               	movlb	1	; select bank1
 13774  10A8  00BF               	movwf	_RFSW^(0+128)
 13775  10A9                     l2230:	
 13776                           
 13777                           ;RF_Control_B1.c: 326: }
 13778                           ;RF_Control_B1.c: 329: if (sw == 2) {
 13779  10A9  0020               	movlb	0	; select bank0
 13780  10AA  0821               	movf	RfSWPointSelect@sw,w
 13781  10AB  3A02               	xorlw	2
 13782  10AC  1D03               	skipz
 13783  10AD  0008               	return
 13784                           
 13785                           ;RF_Control_B1.c: 330: RFSW = &RFSW2;
 13786  10AE  30E8               	movlw	_RFSW2& (0+255)
 13787  10AF  00A0               	movwf	??_RfSWPointSelect
 13788  10B0  0820               	movf	??_RfSWPointSelect,w
 13789  10B1  0021               	movlb	1	; select bank1
 13790  10B2  00BF               	movwf	_RFSW^(0+128)
 13791  10B3  0008               	return
 13792  10B4                     __end_of_RfSWPointSelect:	
 13793                           
 13794                           	psect	text85
 13795  1F3D                     __ptext85:	
 13796 ;; *************** function _setDimmerLights_Trigger *****************
 13797 ;; Defined at:
 13798 ;;		line 731 in file "../src/Dimmer_B1.c"
 13799 ;; Parameters:    Size  Location     Type
 13800 ;;  lights          1    wreg     unsigned char 
 13801 ;;  command         1    2[BANK0 ] unsigned char 
 13802 ;; Auto vars:     Size  Location     Type
 13803 ;;  lights          1    3[BANK0 ] unsigned char 
 13804 ;; Return value:  Size  Location     Type
 13805 ;;		None               void
 13806 ;; Registers used:
 13807 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13808 ;; Tracked objects:
 13809 ;;		On entry : 0/0
 13810 ;;		On exit  : 0/0
 13811 ;;		Unchanged: 0/0
 13812 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13813 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13814 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13815 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13816 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13817 ;;Total ram usage:        2 bytes
 13818 ;; Hardware stack levels used:    1
 13819 ;; Hardware stack levels required when called:    6
 13820 ;; This function calls:
 13821 ;;		_DimmerLightsPointSelect
 13822 ;; This function is called by:
 13823 ;;		_DlyOff_Main
 13824 ;;		_setRFSW_Control
 13825 ;;		_Sw_DimmerOnFunc
 13826 ;;		_Sw_DimmerOffFunc
 13827 ;; This function uses a non-reentrant model
 13828 ;;
 13829                           
 13830                           
 13831                           ;psect for function _setDimmerLights_Trigger
 13832  1F3D                     _setDimmerLights_Trigger:	
 13833                           
 13834                           ;incstack = 0
 13835                           ; Regs used in _setDimmerLights_Trigger: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 13836                           ;setDimmerLights_Trigger@lights stored from wreg
 13837  1F3D  0020               	movlb	0	; select bank0
 13838  1F3E  00A3               	movwf	setDimmerLights_Trigger@lights
 13839                           
 13840                           ;Dimmer_B1.c: 733: DimmerLightsPointSelect(lights);
 13841  1F3F  0823               	movf	setDimmerLights_Trigger@lights,w
 13842  1F40  319F  27B1         	fcall	_DimmerLightsPointSelect
 13843                           
 13844                           ;Dimmer_B1.c: 734: DimmerLights->Trigger = command;
 13845  1F42  0879               	movf	_DimmerLights,w
 13846  1F43  3E08               	addlw	8
 13847  1F44  0086               	movwf	6
 13848  1F45  3001               	movlw	1	; select bank2/3
 13849  1F46  0087               	movwf	7
 13850  1F47  0020               	movlb	0	; select bank0
 13851  1F48  0822               	movf	setDimmerLights_Trigger@command,w
 13852  1F49  1101               	bcf	1,2
 13853  1F4A  1D03               	skipz
 13854  1F4B  1501               	bsf	1,2
 13855  1F4C  0008               	return
 13856  1F4D                     __end_of_setDimmerLights_Trigger:	
 13857                           
 13858                           	psect	text86
 13859  1F2D                     __ptext86:	
 13860 ;; *************** function _setDimmerLights_Switch *****************
 13861 ;; Defined at:
 13862 ;;		line 719 in file "../src/Dimmer_B1.c"
 13863 ;; Parameters:    Size  Location     Type
 13864 ;;  lights          1    wreg     unsigned char 
 13865 ;;  command         1    2[BANK0 ] unsigned char 
 13866 ;; Auto vars:     Size  Location     Type
 13867 ;;  lights          1    3[BANK0 ] unsigned char 
 13868 ;; Return value:  Size  Location     Type
 13869 ;;		None               void
 13870 ;; Registers used:
 13871 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13872 ;; Tracked objects:
 13873 ;;		On entry : 0/0
 13874 ;;		On exit  : 0/0
 13875 ;;		Unchanged: 0/0
 13876 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13877 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13878 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13879 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13880 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13881 ;;Total ram usage:        2 bytes
 13882 ;; Hardware stack levels used:    1
 13883 ;; Hardware stack levels required when called:    6
 13884 ;; This function calls:
 13885 ;;		_DimmerLightsPointSelect
 13886 ;; This function is called by:
 13887 ;;		_DlyOff_Main
 13888 ;;		_setRFSW_Control
 13889 ;;		_Sw_DimmerOnFunc
 13890 ;;		_Sw_DimmerOffFunc
 13891 ;; This function uses a non-reentrant model
 13892 ;;
 13893                           
 13894                           
 13895                           ;psect for function _setDimmerLights_Switch
 13896  1F2D                     _setDimmerLights_Switch:	
 13897                           
 13898                           ;incstack = 0
 13899                           ; Regs used in _setDimmerLights_Switch: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
 13900                           ;setDimmerLights_Switch@lights stored from wreg
 13901  1F2D  0020               	movlb	0	; select bank0
 13902  1F2E  00A3               	movwf	setDimmerLights_Switch@lights
 13903                           
 13904                           ;Dimmer_B1.c: 721: DimmerLightsPointSelect(lights);
 13905  1F2F  0823               	movf	setDimmerLights_Switch@lights,w
 13906  1F30  319F  27B1         	fcall	_DimmerLightsPointSelect
 13907                           
 13908                           ;Dimmer_B1.c: 722: DimmerLights->Switch = command;
 13909  1F32  0879               	movf	_DimmerLights,w
 13910  1F33  3E08               	addlw	8
 13911  1F34  0086               	movwf	6
 13912  1F35  3001               	movlw	1	; select bank2/3
 13913  1F36  0087               	movwf	7
 13914  1F37  0020               	movlb	0	; select bank0
 13915  1F38  0822               	movf	setDimmerLights_Switch@command,w
 13916  1F39  1081               	bcf	1,1
 13917  1F3A  1D03               	skipz
 13918  1F3B  1481               	bsf	1,1
 13919  1F3C  0008               	return
 13920  1F3D                     __end_of_setDimmerLights_Switch:	
 13921                           
 13922                           	psect	text87
 13923  1FB1                     __ptext87:	
 13924 ;; *************** function _DimmerLightsPointSelect *****************
 13925 ;; Defined at:
 13926 ;;		line 323 in file "../src/Dimmer_B1.c"
 13927 ;; Parameters:    Size  Location     Type
 13928 ;;  lights          1    wreg     unsigned char 
 13929 ;; Auto vars:     Size  Location     Type
 13930 ;;  lights          1    1[BANK0 ] unsigned char 
 13931 ;; Return value:  Size  Location     Type
 13932 ;;		None               void
 13933 ;; Registers used:
 13934 ;;		wreg
 13935 ;; Tracked objects:
 13936 ;;		On entry : 0/0
 13937 ;;		On exit  : 0/0
 13938 ;;		Unchanged: 0/0
 13939 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13940 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13941 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13942 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13943 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13944 ;;Total ram usage:        2 bytes
 13945 ;; Hardware stack levels used:    1
 13946 ;; Hardware stack levels required when called:    5
 13947 ;; This function calls:
 13948 ;;		Nothing
 13949 ;; This function is called by:
 13950 ;;		_setDimmerLights_Initialization
 13951 ;;		_setDimmerLights_Main
 13952 ;;		_setDimmerLights
 13953 ;;		_setDimmerLights_Adj
 13954 ;;		_setDimmerLights_AdjRF
 13955 ;;		_setDimmerLights_Switch
 13956 ;;		_setDimmerLights_AdjGo
 13957 ;;		_setDimmerLights_Trigger
 13958 ;;		_setDimmerLights_TriggerAdj
 13959 ;;		_setDimmerLights_ERROR
 13960 ;;		_setDimmerLights_TriggerERROR
 13961 ;;		_setDimmerLights_GO
 13962 ;;		_setDimmerLights_MaxmumValue
 13963 ;;		_setDimmerLights_Clear
 13964 ;; This function uses a non-reentrant model
 13965 ;;
 13966                           
 13967                           
 13968                           ;psect for function _DimmerLightsPointSelect
 13969  1FB1                     _DimmerLightsPointSelect:	
 13970                           
 13971                           ;incstack = 0
 13972                           ; Regs used in _DimmerLightsPointSelect: [wreg]
 13973                           ;DimmerLightsPointSelect@lights stored from wreg
 13974  1FB1  0020               	movlb	0	; select bank0
 13975  1FB2  00A1               	movwf	DimmerLightsPointSelect@lights
 13976                           
 13977                           ;Dimmer_B1.c: 325: if (lights == 1) {
 13978  1FB3  0821               	movf	DimmerLightsPointSelect@lights,w
 13979  1FB4  3A01               	xorlw	1
 13980  1FB5  1D03               	skipz
 13981  1FB6  2FBB               	goto	l835
 13982                           
 13983                           ;Dimmer_B1.c: 326: DimmerLights = &DimmerLights1;
 13984  1FB7  3020               	movlw	_DimmerLights1& (0+255)
 13985  1FB8  00A0               	movwf	??_DimmerLightsPointSelect
 13986  1FB9  0820               	movf	??_DimmerLightsPointSelect,w
 13987  1FBA  00F9               	movwf	_DimmerLights
 13988  1FBB                     l835:	
 13989                           
 13990                           ;Dimmer_B1.c: 327: }
 13991                           ;Dimmer_B1.c: 334: if (lights == 2) {
 13992  1FBB  0821               	movf	DimmerLightsPointSelect@lights,w
 13993  1FBC  3A02               	xorlw	2
 13994  1FBD  1D03               	skipz
 13995  1FBE  0008               	return
 13996                           
 13997                           ;Dimmer_B1.c: 335: DimmerLights = &DimmerLights2;
 13998  1FBF  302F               	movlw	_DimmerLights2& (0+255)
 13999  1FC0  00A0               	movwf	??_DimmerLightsPointSelect
 14000  1FC1  0820               	movf	??_DimmerLightsPointSelect,w
 14001  1FC2  00F9               	movwf	_DimmerLights
 14002  1FC3  0008               	return
 14003  1FC4                     __end_of_DimmerLightsPointSelect:	
 14004                           
 14005                           	psect	text88
 14006  0BBC                     __ptext88:	
 14007 ;; *************** function _setBuz *****************
 14008 ;; Defined at:
 14009 ;;		line 30 in file "../src/Buzzer_B1.c"
 14010 ;; Parameters:    Size  Location     Type
 14011 ;;  count           1    wreg     unsigned char 
 14012 ;;  time            2    9[BANK0 ] int 
 14013 ;; Auto vars:     Size  Location     Type
 14014 ;;  count           1   12[BANK0 ] unsigned char 
 14015 ;; Return value:  Size  Location     Type
 14016 ;;		None               void
 14017 ;; Registers used:
 14018 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14019 ;; Tracked objects:
 14020 ;;		On entry : 0/0
 14021 ;;		On exit  : 0/0
 14022 ;;		Unchanged: 0/0
 14023 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14024 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14025 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14026 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14027 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14028 ;;Total ram usage:        4 bytes
 14029 ;; Hardware stack levels used:    1
 14030 ;; Hardware stack levels required when called:    6
 14031 ;; This function calls:
 14032 ;;		___awdiv
 14033 ;; This function is called by:
 14034 ;;		_DlyOff_Main
 14035 ;;		_setDimmerLights_Main
 14036 ;;		_my_Main
 14037 ;;		_setLog_Code
 14038 ;;		_setControl_Lights_Table
 14039 ;;		_setRFSW_Control
 14040 ;;		_setSw_Main
 14041 ;;		_Sw_DimmerOnFunc
 14042 ;;		_DimmerLights_Exceptions
 14043 ;; This function uses a non-reentrant model
 14044 ;;
 14045                           
 14046                           
 14047                           ;psect for function _setBuz
 14048  0BBC                     _setBuz:	
 14049                           
 14050                           ;incstack = 0
 14051                           ; Regs used in _setBuz: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14052                           ;setBuz@count stored from wreg
 14053  0BBC  0020               	movlb	0	; select bank0
 14054  0BBD  00AC               	movwf	setBuz@count
 14055                           
 14056                           ;Buzzer_B1.c: 31: time /=10;
 14057  0BBE  300A               	movlw	10
 14058  0BBF  00A0               	movwf	___awdiv@divisor
 14059  0BC0  3000               	movlw	0
 14060  0BC1  00A1               	movwf	___awdiv@divisor+1
 14061  0BC2  082A               	movf	setBuz@time+1,w
 14062  0BC3  01A3               	clrf	___awdiv@dividend+1
 14063  0BC4  07A3               	addwf	___awdiv@dividend+1,f
 14064  0BC5  0829               	movf	setBuz@time,w
 14065  0BC6  01A2               	clrf	___awdiv@dividend
 14066  0BC7  07A2               	addwf	___awdiv@dividend,f
 14067  0BC8  3197  2751  318B   	fcall	___awdiv
 14068  0BCB  0020               	movlb	0	; select bank0
 14069  0BCC  0821               	movf	?___awdiv+1,w
 14070  0BCD  01AA               	clrf	setBuz@time+1
 14071  0BCE  07AA               	addwf	setBuz@time+1,f
 14072  0BCF  0820               	movf	?___awdiv,w
 14073  0BD0  01A9               	clrf	setBuz@time
 14074  0BD1  07A9               	addwf	setBuz@time,f
 14075                           
 14076                           ;Buzzer_B1.c: 32: if (Buz->Enable) {
 14077  0BD2  0878               	movf	_Buz,w
 14078  0BD3  0086               	movwf	6
 14079  0BD4  3001               	movlw	1	; select bank2/3
 14080  0BD5  0087               	movwf	7
 14081  0BD6  1C01               	btfss	1,0
 14082  0BD7  0008               	return
 14083                           
 14084                           ;Buzzer_B1.c: 33: if (!Buz->GO) {
 14085  0BD8  0878               	movf	_Buz,w
 14086  0BD9  0086               	movwf	6
 14087  0BDA  3001               	movlw	1	; select bank2/3
 14088  0BDB  0087               	movwf	7
 14089  0BDC  1881               	btfsc	1,1
 14090  0BDD  2BF7               	goto	l5586
 14091                           
 14092                           ;Buzzer_B1.c: 34: Buz->GO = 1;
 14093  0BDE  0878               	movf	_Buz,w
 14094  0BDF  0086               	movwf	6
 14095  0BE0  3001               	movlw	1	; select bank2/3
 14096  0BE1  0087               	movwf	7
 14097  0BE2  1481               	bsf	1,1
 14098                           
 14099                           ;Buzzer_B1.c: 35: Buz->Count = count;
 14100  0BE3  082C               	movf	setBuz@count,w
 14101  0BE4  00AB               	movwf	??_setBuz
 14102  0BE5  0878               	movf	_Buz,w
 14103  0BE6  3E03               	addlw	3
 14104  0BE7  0086               	movwf	6
 14105  0BE8  3001               	movlw	1	; select bank2/3
 14106  0BE9  0087               	movwf	7
 14107  0BEA  082B               	movf	??_setBuz,w
 14108  0BEB  0081               	movwf	1
 14109                           
 14110                           ;Buzzer_B1.c: 36: Buz->TimeValue = time;
 14111  0BEC  0878               	movf	_Buz,w
 14112  0BED  3E06               	addlw	6
 14113  0BEE  0086               	movwf	6
 14114  0BEF  3001               	movlw	1	; select bank2/3
 14115  0BF0  0087               	movwf	7
 14116  0BF1  0829               	movf	setBuz@time,w
 14117  0BF2  3FC0               	movwi [0]fsr1
 14118  0BF3  082A               	movf	setBuz@time+1,w
 14119  0BF4  3FC1               	movwi [1]fsr1
 14120                           
 14121                           ;Buzzer_B1.c: 37: RB3 = 1;
 14122  0BF5  158D               	bsf	13,3	;volatile
 14123                           
 14124                           ;Buzzer_B1.c: 38: } else {
 14125  0BF6  0008               	return
 14126  0BF7                     l5586:	
 14127                           
 14128                           ;Buzzer_B1.c: 39: if (!Buz->BufferStatus1) {
 14129  0BF7  0878               	movf	_Buz,w
 14130  0BF8  0086               	movwf	6
 14131  0BF9  3001               	movlw	1	; select bank2/3
 14132  0BFA  0087               	movwf	7
 14133  0BFB  1981               	btfsc	1,3
 14134  0BFC  2C15               	goto	l5590
 14135                           
 14136                           ;Buzzer_B1.c: 40: Buz->BufferStatus1 = 1;
 14137  0BFD  0878               	movf	_Buz,w
 14138  0BFE  0086               	movwf	6
 14139  0BFF  3001               	movlw	1	; select bank2/3
 14140  0C00  0087               	movwf	7
 14141  0C01  1581               	bsf	1,3
 14142                           
 14143                           ;Buzzer_B1.c: 41: Buz->CountBuffer1 = count;
 14144  0C02  082C               	movf	setBuz@count,w
 14145  0C03  00AB               	movwf	??_setBuz
 14146  0C04  0878               	movf	_Buz,w
 14147  0C05  3E04               	addlw	4
 14148  0C06  0086               	movwf	6
 14149  0C07  3001               	movlw	1	; select bank2/3
 14150  0C08  0087               	movwf	7
 14151  0C09  082B               	movf	??_setBuz,w
 14152  0C0A  0081               	movwf	1
 14153                           
 14154                           ;Buzzer_B1.c: 42: Buz->TimeValueBuffer1 = time;
 14155  0C0B  0878               	movf	_Buz,w
 14156  0C0C  3E08               	addlw	8
 14157  0C0D  0086               	movwf	6
 14158  0C0E  3001               	movlw	1	; select bank2/3
 14159  0C0F  0087               	movwf	7
 14160  0C10  0829               	movf	setBuz@time,w
 14161  0C11  3FC0               	movwi [0]fsr1
 14162  0C12  082A               	movf	setBuz@time+1,w
 14163  0C13  3FC1               	movwi [1]fsr1
 14164                           
 14165                           ;Buzzer_B1.c: 43: } else if (!Buz->BufferStatus2) {
 14166  0C14  0008               	return
 14167  0C15                     l5590:	
 14168  0C15  0878               	movf	_Buz,w
 14169  0C16  0086               	movwf	6
 14170  0C17  3001               	movlw	1	; select bank2/3
 14171  0C18  0087               	movwf	7
 14172  0C19  1A01               	btfsc	1,4
 14173  0C1A  0008               	return
 14174                           
 14175                           ;Buzzer_B1.c: 44: Buz->BufferStatus2 = 1;
 14176  0C1B  0878               	movf	_Buz,w
 14177  0C1C  0086               	movwf	6
 14178  0C1D  3001               	movlw	1	; select bank2/3
 14179  0C1E  0087               	movwf	7
 14180  0C1F  1601               	bsf	1,4
 14181                           
 14182                           ;Buzzer_B1.c: 45: Buz->CountBuffer2 = count;
 14183  0C20  082C               	movf	setBuz@count,w
 14184  0C21  00AB               	movwf	??_setBuz
 14185  0C22  0878               	movf	_Buz,w
 14186  0C23  3E05               	addlw	5
 14187  0C24  0086               	movwf	6
 14188  0C25  3001               	movlw	1	; select bank2/3
 14189  0C26  0087               	movwf	7
 14190  0C27  082B               	movf	??_setBuz,w
 14191  0C28  0081               	movwf	1
 14192                           
 14193                           ;Buzzer_B1.c: 46: Buz->TimeValueBuffer2 = time;
 14194  0C29  0878               	movf	_Buz,w
 14195  0C2A  3E0A               	addlw	10
 14196  0C2B  0086               	movwf	6
 14197  0C2C  3001               	movlw	1	; select bank2/3
 14198  0C2D  0087               	movwf	7
 14199  0C2E  0829               	movf	setBuz@time,w
 14200  0C2F  3FC0               	movwi [0]fsr1
 14201  0C30  082A               	movf	setBuz@time+1,w
 14202  0C31  3FC1               	movwi [1]fsr1
 14203  0C32  0008               	return
 14204  0C33                     __end_of_setBuz:	
 14205                           
 14206                           	psect	text89
 14207  1751                     __ptext89:	
 14208 ;; *************** function ___awdiv *****************
 14209 ;; Defined at:
 14210 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awdiv.c"
 14211 ;; Parameters:    Size  Location     Type
 14212 ;;  divisor         2    0[BANK0 ] int 
 14213 ;;  dividend        2    2[BANK0 ] int 
 14214 ;; Auto vars:     Size  Location     Type
 14215 ;;  quotient        2    7[BANK0 ] int 
 14216 ;;  sign            1    6[BANK0 ] unsigned char 
 14217 ;;  counter         1    5[BANK0 ] unsigned char 
 14218 ;; Return value:  Size  Location     Type
 14219 ;;                  2    0[BANK0 ] int 
 14220 ;; Registers used:
 14221 ;;		wreg, status,2, status,0
 14222 ;; Tracked objects:
 14223 ;;		On entry : 0/0
 14224 ;;		On exit  : 0/0
 14225 ;;		Unchanged: 0/0
 14226 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14227 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14228 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14229 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14230 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14231 ;;Total ram usage:        9 bytes
 14232 ;; Hardware stack levels used:    1
 14233 ;; Hardware stack levels required when called:    5
 14234 ;; This function calls:
 14235 ;;		Nothing
 14236 ;; This function is called by:
 14237 ;;		_setBuz
 14238 ;; This function uses a non-reentrant model
 14239 ;;
 14240                           
 14241                           
 14242                           ;psect for function ___awdiv
 14243  1751                     ___awdiv:	
 14244                           
 14245                           ;incstack = 0
 14246                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 14247  1751  0020               	movlb	0	; select bank0
 14248  1752  01A6               	clrf	___awdiv@sign
 14249  1753  1FA1               	btfss	___awdiv@divisor+1,7
 14250  1754  2F5C               	goto	l5540
 14251  1755  09A0               	comf	___awdiv@divisor,f
 14252  1756  09A1               	comf	___awdiv@divisor+1,f
 14253  1757  0AA0               	incf	___awdiv@divisor,f
 14254  1758  1903               	skipnz
 14255  1759  0AA1               	incf	___awdiv@divisor+1,f
 14256  175A  01A6               	clrf	___awdiv@sign
 14257  175B  0AA6               	incf	___awdiv@sign,f
 14258  175C                     l5540:	
 14259  175C  1FA3               	btfss	___awdiv@dividend+1,7
 14260  175D  2F67               	goto	l5546
 14261  175E  09A2               	comf	___awdiv@dividend,f
 14262  175F  09A3               	comf	___awdiv@dividend+1,f
 14263  1760  0AA2               	incf	___awdiv@dividend,f
 14264  1761  1903               	skipnz
 14265  1762  0AA3               	incf	___awdiv@dividend+1,f
 14266  1763  3001               	movlw	1
 14267  1764  00A4               	movwf	??___awdiv
 14268  1765  0824               	movf	??___awdiv,w
 14269  1766  06A6               	xorwf	___awdiv@sign,f
 14270  1767                     l5546:	
 14271  1767  01A7               	clrf	___awdiv@quotient
 14272  1768  01A8               	clrf	___awdiv@quotient+1
 14273  1769  0821               	movf	___awdiv@divisor+1,w
 14274  176A  0420               	iorwf	___awdiv@divisor,w
 14275  176B  1903               	skipnz
 14276  176C  2F96               	goto	l5568
 14277  176D  01A5               	clrf	___awdiv@counter
 14278  176E  0AA5               	incf	___awdiv@counter,f
 14279  176F                     l5556:	
 14280  176F  1BA1               	btfsc	___awdiv@divisor+1,7
 14281  1770  2F7B               	goto	l5558
 14282  1771  3001               	movlw	1
 14283  1772                     u4025:	
 14284  1772  35A0               	lslf	___awdiv@divisor,f
 14285  1773  0DA1               	rlf	___awdiv@divisor+1,f
 14286  1774  0B89               	decfsz	9,f
 14287  1775  2F72               	goto	u4025
 14288  1776  3001               	movlw	1
 14289  1777  00A4               	movwf	??___awdiv
 14290  1778  0824               	movf	??___awdiv,w
 14291  1779  07A5               	addwf	___awdiv@counter,f
 14292  177A  2F6F               	goto	l5556
 14293  177B                     l5558:	
 14294  177B  3001               	movlw	1
 14295  177C                     u4045:	
 14296  177C  35A7               	lslf	___awdiv@quotient,f
 14297  177D  0DA8               	rlf	___awdiv@quotient+1,f
 14298  177E  0B89               	decfsz	9,f
 14299  177F  2F7C               	goto	u4045
 14300  1780  0821               	movf	___awdiv@divisor+1,w
 14301  1781  0223               	subwf	___awdiv@dividend+1,w
 14302  1782  1D03               	skipz
 14303  1783  2F86               	goto	u4055
 14304  1784  0820               	movf	___awdiv@divisor,w
 14305  1785  0222               	subwf	___awdiv@dividend,w
 14306  1786                     u4055:	
 14307  1786  1C03               	skipc
 14308  1787  2F8D               	goto	l5564
 14309  1788  0820               	movf	___awdiv@divisor,w
 14310  1789  02A2               	subwf	___awdiv@dividend,f
 14311  178A  0821               	movf	___awdiv@divisor+1,w
 14312  178B  3BA3               	subwfb	___awdiv@dividend+1,f
 14313  178C  1427               	bsf	___awdiv@quotient,0
 14314  178D                     l5564:	
 14315  178D  3001               	movlw	1
 14316  178E                     u4065:	
 14317  178E  36A1               	lsrf	___awdiv@divisor+1,f
 14318  178F  0CA0               	rrf	___awdiv@divisor,f
 14319  1790  0B89               	decfsz	9,f
 14320  1791  2F8E               	goto	u4065
 14321  1792  3001               	movlw	1
 14322  1793  02A5               	subwf	___awdiv@counter,f
 14323  1794  1D03               	btfss	3,2
 14324  1795  2F7B               	goto	l5558
 14325  1796                     l5568:	
 14326  1796  0826               	movf	___awdiv@sign,w
 14327  1797  1903               	btfsc	3,2
 14328  1798  2F9E               	goto	l5572
 14329  1799  09A7               	comf	___awdiv@quotient,f
 14330  179A  09A8               	comf	___awdiv@quotient+1,f
 14331  179B  0AA7               	incf	___awdiv@quotient,f
 14332  179C  1903               	skipnz
 14333  179D  0AA8               	incf	___awdiv@quotient+1,f
 14334  179E                     l5572:	
 14335  179E  0828               	movf	___awdiv@quotient+1,w
 14336  179F  01A1               	clrf	?___awdiv+1
 14337  17A0  07A1               	addwf	?___awdiv+1,f
 14338  17A1  0827               	movf	___awdiv@quotient,w
 14339  17A2  01A0               	clrf	?___awdiv
 14340  17A3  07A0               	addwf	?___awdiv,f
 14341  17A4  0008               	return
 14342  17A5                     __end_of___awdiv:	
 14343                           
 14344                           	psect	text90
 14345  1E09                     __ptext90:	
 14346 ;; *************** function _DelayOff_Initialization *****************
 14347 ;; Defined at:
 14348 ;;		line 26 in file "../src/DelayOff_B1.c"
 14349 ;; Parameters:    Size  Location     Type
 14350 ;;		None
 14351 ;; Auto vars:     Size  Location     Type
 14352 ;;		None
 14353 ;; Return value:  Size  Location     Type
 14354 ;;		None               void
 14355 ;; Registers used:
 14356 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14357 ;; Tracked objects:
 14358 ;;		On entry : 0/0
 14359 ;;		On exit  : 0/0
 14360 ;;		Unchanged: 0/0
 14361 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14362 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14363 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14364 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14365 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14366 ;;Total ram usage:        0 bytes
 14367 ;; Hardware stack levels used:    1
 14368 ;; Hardware stack levels required when called:    7
 14369 ;; This function calls:
 14370 ;;		_DlyOff_Initialization
 14371 ;; This function is called by:
 14372 ;;		_main
 14373 ;; This function uses a non-reentrant model
 14374 ;;
 14375                           
 14376                           
 14377                           ;psect for function _DelayOff_Initialization
 14378  1E09                     _DelayOff_Initialization:	
 14379                           
 14380                           ;DelayOff_B1.c: 28: DlyOff_Initialization(1);
 14381                           
 14382                           ;incstack = 0
 14383                           ; Regs used in _DelayOff_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 14384  1E09  3001               	movlw	1
 14385  1E0A  319E  265C  319E   	fcall	_DlyOff_Initialization
 14386                           
 14387                           ;DelayOff_B1.c: 32: DlyOff_Initialization(2);
 14388  1E0D  3002               	movlw	2
 14389  1E0E  319E  265C         	fcall	_DlyOff_Initialization
 14390  1E10  0008               	return
 14391  1E11                     __end_of_DelayOff_Initialization:	
 14392                           
 14393                           	psect	text91
 14394  1E5C                     __ptext91:	
 14395 ;; *************** function _DlyOff_Initialization *****************
 14396 ;; Defined at:
 14397 ;;		line 56 in file "../src/DelayOff_B1.c"
 14398 ;; Parameters:    Size  Location     Type
 14399 ;;  sw              1    wreg     unsigned char 
 14400 ;; Auto vars:     Size  Location     Type
 14401 ;;  sw              1    2[BANK0 ] unsigned char 
 14402 ;; Return value:  Size  Location     Type
 14403 ;;		None               void
 14404 ;; Registers used:
 14405 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14406 ;; Tracked objects:
 14407 ;;		On entry : 0/0
 14408 ;;		On exit  : 0/0
 14409 ;;		Unchanged: 0/0
 14410 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14411 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14412 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14413 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14414 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14415 ;;Total ram usage:        1 bytes
 14416 ;; Hardware stack levels used:    1
 14417 ;; Hardware stack levels required when called:    6
 14418 ;; This function calls:
 14419 ;;		_DelayOffPointSelect
 14420 ;; This function is called by:
 14421 ;;		_DelayOff_Initialization
 14422 ;; This function uses a non-reentrant model
 14423 ;;
 14424                           
 14425                           
 14426                           ;psect for function _DlyOff_Initialization
 14427  1E5C                     _DlyOff_Initialization:	
 14428                           
 14429                           ;incstack = 0
 14430                           ; Regs used in _DlyOff_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 14431                           ;DlyOff_Initialization@sw stored from wreg
 14432  1E5C  0020               	movlb	0	; select bank0
 14433  1E5D  00A2               	movwf	DlyOff_Initialization@sw
 14434                           
 14435                           ;DelayOff_B1.c: 57: DelayOffPointSelect(sw);
 14436  1E5E  0822               	movf	DlyOff_Initialization@sw,w
 14437  1E5F  3190  20B4         	fcall	_DelayOffPointSelect
 14438                           
 14439                           ;DelayOff_B1.c: 58: DelayOff->Enable = 1;
 14440  1E61  0021               	movlb	1	; select bank1
 14441  1E62  0838               	movf	_DelayOff^(0+128),w
 14442  1E63  0086               	movwf	6
 14443  1E64  0187               	clrf	7
 14444  1E65  1401               	bsf	1,0
 14445  1E66  0008               	return
 14446  1E67                     __end_of_DlyOff_Initialization:	
 14447                           
 14448                           	psect	text92
 14449  10B4                     __ptext92:	
 14450 ;; *************** function _DelayOffPointSelect *****************
 14451 ;; Defined at:
 14452 ;;		line 7 in file "../src/DelayOff_B1.c"
 14453 ;; Parameters:    Size  Location     Type
 14454 ;;  sw              1    wreg     unsigned char 
 14455 ;; Auto vars:     Size  Location     Type
 14456 ;;  sw              1    1[BANK0 ] unsigned char 
 14457 ;; Return value:  Size  Location     Type
 14458 ;;		None               void
 14459 ;; Registers used:
 14460 ;;		wreg
 14461 ;; Tracked objects:
 14462 ;;		On entry : 0/0
 14463 ;;		On exit  : 0/0
 14464 ;;		Unchanged: 0/0
 14465 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14466 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14467 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14468 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14469 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14470 ;;Total ram usage:        2 bytes
 14471 ;; Hardware stack levels used:    1
 14472 ;; Hardware stack levels required when called:    5
 14473 ;; This function calls:
 14474 ;;		Nothing
 14475 ;; This function is called by:
 14476 ;;		_DlyOff_Initialization
 14477 ;;		_DlyOff_Main
 14478 ;;		_setDelayOff_GO
 14479 ;; This function uses a non-reentrant model
 14480 ;;
 14481                           
 14482                           
 14483                           ;psect for function _DelayOffPointSelect
 14484  10B4                     _DelayOffPointSelect:	
 14485                           
 14486                           ;incstack = 0
 14487                           ; Regs used in _DelayOffPointSelect: [wreg]
 14488                           ;DelayOffPointSelect@sw stored from wreg
 14489  10B4  0020               	movlb	0	; select bank0
 14490  10B5  00A1               	movwf	DelayOffPointSelect@sw
 14491                           
 14492                           ;DelayOff_B1.c: 9: if (sw == 1) {
 14493  10B6  0821               	movf	DelayOffPointSelect@sw,w
 14494  10B7  3A01               	xorlw	1
 14495  10B8  1D03               	skipz
 14496  10B9  28C0               	goto	l5466
 14497                           
 14498                           ;DelayOff_B1.c: 10: DelayOff = &DlySw1;
 14499  10BA  30C7               	movlw	_DlySw1& (0+255)
 14500  10BB  00A0               	movwf	??_DelayOffPointSelect
 14501  10BC  0820               	movf	??_DelayOffPointSelect,w
 14502  10BD  0021               	movlb	1	; select bank1
 14503  10BE  00B8               	movwf	_DelayOff^(0+128)
 14504                           
 14505                           ;DelayOff_B1.c: 11: }
 14506  10BF  0008               	return
 14507  10C0                     l5466:	
 14508                           
 14509                           ;DelayOff_B1.c: 14: else if (sw == 2) {
 14510  10C0  0020               	movlb	0	; select bank0
 14511  10C1  0821               	movf	DelayOffPointSelect@sw,w
 14512  10C2  3A02               	xorlw	2
 14513  10C3  1D03               	skipz
 14514  10C4  0008               	return
 14515                           
 14516                           ;DelayOff_B1.c: 15: DelayOff = &DlySw2;
 14517  10C5  30CC               	movlw	_DlySw2& (0+255)
 14518  10C6  00A0               	movwf	??_DelayOffPointSelect
 14519  10C7  0820               	movf	??_DelayOffPointSelect,w
 14520  10C8  0021               	movlb	1	; select bank1
 14521  10C9  00B8               	movwf	_DelayOff^(0+128)
 14522  10CA  0008               	return
 14523  10CB                     __end_of_DelayOffPointSelect:	
 14524                           
 14525                           	psect	text93
 14526  1089                     __ptext93:	
 14527 ;; *************** function _CC2500_PowerOnInitial *****************
 14528 ;; Defined at:
 14529 ;;		line 96 in file "../src/CC2500_B1.c"
 14530 ;; Parameters:    Size  Location     Type
 14531 ;;		None
 14532 ;; Auto vars:     Size  Location     Type
 14533 ;;		None
 14534 ;; Return value:  Size  Location     Type
 14535 ;;		None               void
 14536 ;; Registers used:
 14537 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 14538 ;; Tracked objects:
 14539 ;;		On entry : 0/0
 14540 ;;		On exit  : 0/0
 14541 ;;		Unchanged: 0/0
 14542 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14543 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14544 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14545 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14546 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14547 ;;Total ram usage:        0 bytes
 14548 ;; Hardware stack levels used:    1
 14549 ;; Hardware stack levels required when called:    8
 14550 ;; This function calls:
 14551 ;;		_CC2500_ClearRXFIFO
 14552 ;;		_CC2500_ClearTXFIFO
 14553 ;;		_CC2500_FrequencyCabr
 14554 ;;		_CC2500_InitPATable
 14555 ;;		_CC2500_InitSetREG
 14556 ;;		_CC2500_PowerRST
 14557 ;;		_CC2500_SIDLEMode
 14558 ;; This function is called by:
 14559 ;;		_main
 14560 ;; This function uses a non-reentrant model
 14561 ;;
 14562                           
 14563                           
 14564                           ;psect for function _CC2500_PowerOnInitial
 14565  1089                     _CC2500_PowerOnInitial:	
 14566                           
 14567                           ;CC2500_B1.c: 97: CC2500_PowerRST();
 14568                           
 14569                           ;incstack = 0
 14570                           ; Regs used in _CC2500_PowerOnInitial: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 14571  1089  3193  23D3  3190   	fcall	_CC2500_PowerRST
 14572                           
 14573                           ;CC2500_B1.c: 98: CC2500_InitSetREG();
 14574  108C  3192  22F8  3190   	fcall	_CC2500_InitSetREG
 14575                           
 14576                           ;CC2500_B1.c: 99: CC2500_InitPATable();
 14577  108F  3191  21E9  3190   	fcall	_CC2500_InitPATable
 14578                           
 14579                           ;CC2500_B1.c: 100: CC2500_ClearTXFIFO();
 14580  1092  319D  25CF  3190   	fcall	_CC2500_ClearTXFIFO
 14581                           
 14582                           ;CC2500_B1.c: 101: CC2500_ClearRXFIFO();
 14583  1095  319D  25CB  3190   	fcall	_CC2500_ClearRXFIFO
 14584                           
 14585                           ;CC2500_B1.c: 102: CC2500_FrequencyCabr();
 14586  1098  319E  2672  3190   	fcall	_CC2500_FrequencyCabr
 14587                           
 14588                           ;CC2500_B1.c: 103: CC2500_SIDLEMode();
 14589  109B  319D  25D3         	fcall	_CC2500_SIDLEMode
 14590  109D  0008               	return
 14591  109E                     __end_of_CC2500_PowerOnInitial:	
 14592                           
 14593                           	psect	text94
 14594  1DD3                     __ptext94:	
 14595 ;; *************** function _CC2500_SIDLEMode *****************
 14596 ;; Defined at:
 14597 ;;		line 180 in file "../src/CC2500_B1.c"
 14598 ;; Parameters:    Size  Location     Type
 14599 ;;		None
 14600 ;; Auto vars:     Size  Location     Type
 14601 ;;		None
 14602 ;; Return value:  Size  Location     Type
 14603 ;;		None               void
 14604 ;; Registers used:
 14605 ;;		wreg, status,2, status,0, pclath, cstack
 14606 ;; Tracked objects:
 14607 ;;		On entry : 0/0
 14608 ;;		On exit  : 0/0
 14609 ;;		Unchanged: 0/0
 14610 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14611 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14612 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14613 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14614 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14615 ;;Total ram usage:        0 bytes
 14616 ;; Hardware stack levels used:    1
 14617 ;; Hardware stack levels required when called:    7
 14618 ;; This function calls:
 14619 ;;		_CC2500_WriteCommand
 14620 ;; This function is called by:
 14621 ;;		_CC2500_PowerOnInitial
 14622 ;; This function uses a non-reentrant model
 14623 ;;
 14624                           
 14625                           
 14626                           ;psect for function _CC2500_SIDLEMode
 14627  1DD3                     _CC2500_SIDLEMode:	
 14628                           
 14629                           ;CC2500_B1.c: 181: CC2500_WriteCommand(0x36);
 14630                           
 14631                           ;incstack = 0
 14632                           ; Regs used in _CC2500_SIDLEMode: [wreg+status,2+status,0+pclath+cstack]
 14633  1DD3  3036               	movlw	54
 14634  1DD4  319F  271D         	fcall	_CC2500_WriteCommand
 14635  1DD6  0008               	return
 14636  1DD7                     __end_of_CC2500_SIDLEMode:	
 14637                           
 14638                           	psect	text95
 14639  13D3                     __ptext95:	
 14640 ;; *************** function _CC2500_PowerRST *****************
 14641 ;; Defined at:
 14642 ;;		line 109 in file "../src/CC2500_B1.c"
 14643 ;; Parameters:    Size  Location     Type
 14644 ;;		None
 14645 ;; Auto vars:     Size  Location     Type
 14646 ;;		None
 14647 ;; Return value:  Size  Location     Type
 14648 ;;		None               void
 14649 ;; Registers used:
 14650 ;;		wreg, status,2, status,0, pclath, cstack
 14651 ;; Tracked objects:
 14652 ;;		On entry : 0/0
 14653 ;;		On exit  : 0/0
 14654 ;;		Unchanged: 0/0
 14655 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14656 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14657 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14658 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14659 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14660 ;;Total ram usage:        1 bytes
 14661 ;; Hardware stack levels used:    1
 14662 ;; Hardware stack levels required when called:    6
 14663 ;; This function calls:
 14664 ;;		_CC2500_WriteByte
 14665 ;;		_DelayTime_1us
 14666 ;; This function is called by:
 14667 ;;		_CC2500_PowerOnInitial
 14668 ;; This function uses a non-reentrant model
 14669 ;;
 14670                           
 14671                           
 14672                           ;psect for function _CC2500_PowerRST
 14673  13D3                     _CC2500_PowerRST:	
 14674                           
 14675                           ;CC2500_B1.c: 110: RC1 = 0;
 14676                           
 14677                           ;incstack = 0
 14678                           ; Regs used in _CC2500_PowerRST: [wreg+status,2+status,0+pclath+cstack]
 14679  13D3  0020               	movlb	0	; select bank0
 14680  13D4  108E               	bcf	14,1	;volatile
 14681                           
 14682                           ;CC2500_B1.c: 111: RC0 = 0;
 14683  13D5  100E               	bcf	14,0	;volatile
 14684                           
 14685                           ;CC2500_B1.c: 112: RC4 = 1;
 14686  13D6  160E               	bsf	14,4	;volatile
 14687                           
 14688                           ;CC2500_B1.c: 113: DelayTime_1us(10);
 14689  13D7  300A               	movlw	10
 14690  13D8  00A0               	movwf	DelayTime_1us@count
 14691  13D9  3000               	movlw	0
 14692  13DA  00A1               	movwf	DelayTime_1us@count+1
 14693  13DB  3192  22D2  3193   	fcall	_DelayTime_1us
 14694                           
 14695                           ;CC2500_B1.c: 114: RC4 = 0;
 14696  13DE  0020               	movlb	0	; select bank0
 14697  13DF  120E               	bcf	14,4	;volatile
 14698                           
 14699                           ;CC2500_B1.c: 115: DelayTime_1us(10);
 14700  13E0  300A               	movlw	10
 14701  13E1  00A0               	movwf	DelayTime_1us@count
 14702  13E2  3000               	movlw	0
 14703  13E3  00A1               	movwf	DelayTime_1us@count+1
 14704  13E4  3192  22D2  3193   	fcall	_DelayTime_1us
 14705                           
 14706                           ;CC2500_B1.c: 116: RC4 = 1;
 14707  13E7  0020               	movlb	0	; select bank0
 14708  13E8  160E               	bsf	14,4	;volatile
 14709                           
 14710                           ;CC2500_B1.c: 117: DelayTime_1us(40);
 14711  13E9  3028               	movlw	40
 14712  13EA  00A0               	movwf	DelayTime_1us@count
 14713  13EB  3000               	movlw	0
 14714  13EC  00A1               	movwf	DelayTime_1us@count+1
 14715  13ED  3192  22D2  3193   	fcall	_DelayTime_1us
 14716                           
 14717                           ;CC2500_B1.c: 118: RC4 = 0;
 14718  13F0  0020               	movlb	0	; select bank0
 14719  13F1  120E               	bcf	14,4	;volatile
 14720                           
 14721                           ;CC2500_B1.c: 119: SPI0Buffer = 0x30;
 14722  13F2  3030               	movlw	48
 14723  13F3  00A6               	movwf	??_CC2500_PowerRST
 14724  13F4  0826               	movf	??_CC2500_PowerRST,w
 14725  13F5  0021               	movlb	1	; select bank1
 14726  13F6  00C2               	movwf	_SPI0Buffer^(0+128)
 14727  13F7                     l305:	
 14728                           ;CC2500_B1.c: 120: while (RC2 == 1);
 14729                           
 14730  13F7  0020               	movlb	0	; select bank0
 14731  13F8  190E               	btfsc	14,2	;volatile
 14732  13F9  2BF7               	goto	l305
 14733                           
 14734                           ;CC2500_B1.c: 121: CC2500_WriteByte();
 14735  13FA  3190  20FA  3193   	fcall	_CC2500_WriteByte
 14736  13FD                     l308:	
 14737                           ;CC2500_B1.c: 122: while (RC2 == 1);
 14738                           
 14739  13FD  0020               	movlb	0	; select bank0
 14740  13FE  190E               	btfsc	14,2	;volatile
 14741  13FF  2BFD               	goto	l308
 14742                           
 14743                           ;CC2500_B1.c: 123: RC0 = 0;
 14744  1400  100E               	bcf	14,0	;volatile
 14745                           
 14746                           ;CC2500_B1.c: 124: RC4 = 1;
 14747  1401  160E               	bsf	14,4	;volatile
 14748  1402  0008               	return
 14749  1403                     __end_of_CC2500_PowerRST:	
 14750                           
 14751                           	psect	text96
 14752  12F8                     __ptext96:	
 14753 ;; *************** function _CC2500_InitSetREG *****************
 14754 ;; Defined at:
 14755 ;;		line 130 in file "../src/CC2500_B1.c"
 14756 ;; Parameters:    Size  Location     Type
 14757 ;;		None
 14758 ;; Auto vars:     Size  Location     Type
 14759 ;;  loop_c          1    8[BANK0 ] unsigned char 
 14760 ;;  temp2           1    7[BANK0 ] unsigned char 
 14761 ;;  temp1           1    6[BANK0 ] unsigned char 
 14762 ;; Return value:  Size  Location     Type
 14763 ;;		None               void
 14764 ;; Registers used:
 14765 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 14766 ;; Tracked objects:
 14767 ;;		On entry : 0/0
 14768 ;;		On exit  : 0/0
 14769 ;;		Unchanged: 0/0
 14770 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14771 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14772 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14773 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14774 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14775 ;;Total ram usage:        4 bytes
 14776 ;; Hardware stack levels used:    1
 14777 ;; Hardware stack levels required when called:    7
 14778 ;; This function calls:
 14779 ;;		_CC2500_WriteREG
 14780 ;; This function is called by:
 14781 ;;		_CC2500_PowerOnInitial
 14782 ;; This function uses a non-reentrant model
 14783 ;;
 14784                           
 14785                           
 14786                           ;psect for function _CC2500_InitSetREG
 14787  12F8                     _CC2500_InitSetREG:	
 14788                           
 14789                           ;CC2500_B1.c: 131: unsigned char loop_c;
 14790                           ;CC2500_B1.c: 132: unsigned char temp1, temp2;
 14791                           ;CC2500_B1.c: 134: for (loop_c = 0; loop_c < 47; loop_c++) {
 14792                           
 14793                           ;incstack = 0
 14794                           ; Regs used in _CC2500_InitSetREG: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 14795  12F8  0020               	movlb	0	; select bank0
 14796  12F9  01A8               	clrf	CC2500_InitSetREG@loop_c
 14797  12FA                     L12:	
 14798  12FA  302F               	movlw	47
 14799  12FB  0228               	subwf	CC2500_InitSetREG@loop_c,w
 14800  12FC  1803               	btfsc	3,0
 14801  12FD  0008               	return
 14802                           
 14803                           ;CC2500_B1.c: 135: temp1 = CC2500_registers_address[loop_c];
 14804  12FE  0828               	movf	CC2500_InitSetREG@loop_c,w
 14805  12FF  3E00               	addlw	low (_CC2500_registers_address| (0+32768))
 14806  1300  0084               	movwf	4
 14807  1301  3090               	movlw	high (_CC2500_registers_address| (0+32768))
 14808  1302  1803               	skipnc
 14809  1303  3E01               	addlw	1
 14810  1304  0085               	movwf	5
 14811  1305  0800               	movf	0,w	;code access
 14812  1306  00A5               	movwf	??_CC2500_InitSetREG
 14813  1307  0825               	movf	??_CC2500_InitSetREG,w
 14814  1308  00A6               	movwf	CC2500_InitSetREG@temp1
 14815                           
 14816                           ;CC2500_B1.c: 136: temp2 = CC2500_rfSettings[loop_c];
 14817  1309  0828               	movf	CC2500_InitSetREG@loop_c,w
 14818  130A  3E2F               	addlw	low (_CC2500_rfSettings| (0+32768))
 14819  130B  0084               	movwf	4
 14820  130C  3090               	movlw	high (_CC2500_rfSettings| (0+32768))
 14821  130D  1803               	skipnc
 14822  130E  3E01               	addlw	1
 14823  130F  0085               	movwf	5
 14824  1310  0800               	movf	0,w	;code access
 14825  1311  00A5               	movwf	??_CC2500_InitSetREG
 14826  1312  0825               	movf	??_CC2500_InitSetREG,w
 14827  1313  00A7               	movwf	CC2500_InitSetREG@temp2
 14828                           
 14829                           ;CC2500_B1.c: 138: CC2500_WriteREG(temp1, temp2);
 14830  1314  0827               	movf	CC2500_InitSetREG@temp2,w
 14831  1315  00A5               	movwf	??_CC2500_InitSetREG
 14832  1316  0825               	movf	??_CC2500_InitSetREG,w
 14833  1317  00A2               	movwf	CC2500_WriteREG@value
 14834  1318  0826               	movf	CC2500_InitSetREG@temp1,w
 14835  1319  3191  2113  3192   	fcall	_CC2500_WriteREG
 14836  131C  3001               	movlw	1
 14837  131D  0020               	movlb	0	; select bank0
 14838  131E  00A5               	movwf	??_CC2500_InitSetREG
 14839  131F  0825               	movf	??_CC2500_InitSetREG,w
 14840  1320  07A8               	addwf	CC2500_InitSetREG@loop_c,f
 14841  1321  2AFA               	goto	L12
 14842  1322                     __end_of_CC2500_InitSetREG:	
 14843                           
 14844                           	psect	text97
 14845  11E9                     __ptext97:	
 14846 ;; *************** function _CC2500_InitPATable *****************
 14847 ;; Defined at:
 14848 ;;		line 145 in file "../src/CC2500_B1.c"
 14849 ;; Parameters:    Size  Location     Type
 14850 ;;		None
 14851 ;; Auto vars:     Size  Location     Type
 14852 ;;  loop_d          1    7[BANK0 ] unsigned char 
 14853 ;;  temp            1    6[BANK0 ] unsigned char 
 14854 ;; Return value:  Size  Location     Type
 14855 ;;		None               void
 14856 ;; Registers used:
 14857 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 14858 ;; Tracked objects:
 14859 ;;		On entry : 0/0
 14860 ;;		On exit  : 0/0
 14861 ;;		Unchanged: 0/0
 14862 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14863 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14864 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14865 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14866 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14867 ;;Total ram usage:        3 bytes
 14868 ;; Hardware stack levels used:    1
 14869 ;; Hardware stack levels required when called:    7
 14870 ;; This function calls:
 14871 ;;		_CC2500_WriteREG
 14872 ;; This function is called by:
 14873 ;;		_CC2500_PowerOnInitial
 14874 ;; This function uses a non-reentrant model
 14875 ;;
 14876                           
 14877                           
 14878                           ;psect for function _CC2500_InitPATable
 14879  11E9                     _CC2500_InitPATable:	
 14880                           
 14881                           ;CC2500_B1.c: 146: unsigned char loop_d;
 14882                           ;CC2500_B1.c: 147: unsigned char temp;
 14883                           ;CC2500_B1.c: 149: for (loop_d = 0; loop_d < 8; loop_d++) {
 14884                           
 14885                           ;incstack = 0
 14886                           ; Regs used in _CC2500_InitPATable: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 14887  11E9  0020               	movlb	0	; select bank0
 14888  11EA  01A7               	clrf	CC2500_InitPATable@loop_d
 14889  11EB                     L13:	
 14890  11EB  3008               	movlw	8
 14891  11EC  0227               	subwf	CC2500_InitPATable@loop_d,w
 14892  11ED  1803               	btfsc	3,0
 14893  11EE  0008               	return
 14894                           
 14895                           ;CC2500_B1.c: 150: temp = CC2500_patable_vaule[loop_d];
 14896  11EF  0827               	movf	CC2500_InitPATable@loop_d,w
 14897  11F0  3E5E               	addlw	low (_CC2500_patable_vaule| (0+32768))
 14898  11F1  0084               	movwf	4
 14899  11F2  3090               	movlw	high (_CC2500_patable_vaule| (0+32768))
 14900  11F3  1803               	skipnc
 14901  11F4  3E01               	addlw	1
 14902  11F5  0085               	movwf	5
 14903  11F6  0800               	movf	0,w	;code access
 14904  11F7  00A5               	movwf	??_CC2500_InitPATable
 14905  11F8  0825               	movf	??_CC2500_InitPATable,w
 14906  11F9  00A6               	movwf	CC2500_InitPATable@temp
 14907                           
 14908                           ;CC2500_B1.c: 151: CC2500_WriteREG(0x3E, temp);
 14909  11FA  0826               	movf	CC2500_InitPATable@temp,w
 14910  11FB  00A5               	movwf	??_CC2500_InitPATable
 14911  11FC  0825               	movf	??_CC2500_InitPATable,w
 14912  11FD  00A2               	movwf	CC2500_WriteREG@value
 14913  11FE  303E               	movlw	62
 14914  11FF  3191  2113  3191   	fcall	_CC2500_WriteREG
 14915  1202  3001               	movlw	1
 14916  1203  0020               	movlb	0	; select bank0
 14917  1204  00A5               	movwf	??_CC2500_InitPATable
 14918  1205  0825               	movf	??_CC2500_InitPATable,w
 14919  1206  07A7               	addwf	CC2500_InitPATable@loop_d,f
 14920  1207  29EB               	goto	L13
 14921  1208                     __end_of_CC2500_InitPATable:	
 14922                           
 14923                           	psect	text98
 14924  1113                     __ptext98:	
 14925 ;; *************** function _CC2500_WriteREG *****************
 14926 ;; Defined at:
 14927 ;;		line 222 in file "../src/CC2500_B1.c"
 14928 ;; Parameters:    Size  Location     Type
 14929 ;;  w_addr          1    wreg     unsigned char 
 14930 ;;  value           1    2[BANK0 ] unsigned char 
 14931 ;; Auto vars:     Size  Location     Type
 14932 ;;  w_addr          1    4[BANK0 ] unsigned char 
 14933 ;; Return value:  Size  Location     Type
 14934 ;;		None               void
 14935 ;; Registers used:
 14936 ;;		wreg, status,2, status,0, pclath, cstack
 14937 ;; Tracked objects:
 14938 ;;		On entry : 0/0
 14939 ;;		On exit  : 0/0
 14940 ;;		Unchanged: 0/0
 14941 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14942 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14943 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14944 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14945 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14946 ;;Total ram usage:        3 bytes
 14947 ;; Hardware stack levels used:    1
 14948 ;; Hardware stack levels required when called:    6
 14949 ;; This function calls:
 14950 ;;		_CC2500_WriteByte
 14951 ;; This function is called by:
 14952 ;;		_CC2500_InitSetREG
 14953 ;;		_CC2500_InitPATable
 14954 ;; This function uses a non-reentrant model
 14955 ;;
 14956                           
 14957                           
 14958                           ;psect for function _CC2500_WriteREG
 14959  1113                     _CC2500_WriteREG:	
 14960                           
 14961                           ;incstack = 0
 14962                           ; Regs used in _CC2500_WriteREG: [wreg+status,2+status,0+pclath+cstack]
 14963                           ;CC2500_WriteREG@w_addr stored from wreg
 14964  1113  0020               	movlb	0	; select bank0
 14965  1114  00A4               	movwf	CC2500_WriteREG@w_addr
 14966                           
 14967                           ;CC2500_B1.c: 223: RC4 = 0;
 14968  1115  120E               	bcf	14,4	;volatile
 14969                           
 14970                           ;CC2500_B1.c: 224: SPI0Buffer = w_addr;
 14971  1116  0824               	movf	CC2500_WriteREG@w_addr,w
 14972  1117  00A3               	movwf	??_CC2500_WriteREG
 14973  1118  0823               	movf	??_CC2500_WriteREG,w
 14974  1119  0021               	movlb	1	; select bank1
 14975  111A  00C2               	movwf	_SPI0Buffer^(0+128)
 14976  111B                     l350:	
 14977                           ;CC2500_B1.c: 225: while (RC2 == 1);
 14978                           
 14979  111B  0020               	movlb	0	; select bank0
 14980  111C  190E               	btfsc	14,2	;volatile
 14981  111D  291B               	goto	l350
 14982                           
 14983                           ;CC2500_B1.c: 226: CC2500_WriteByte();
 14984  111E  3190  20FA  3191   	fcall	_CC2500_WriteByte
 14985                           
 14986                           ;CC2500_B1.c: 227: SPI0Buffer = value;
 14987  1121  0020               	movlb	0	; select bank0
 14988  1122  0822               	movf	CC2500_WriteREG@value,w
 14989  1123  00A3               	movwf	??_CC2500_WriteREG
 14990  1124  0823               	movf	??_CC2500_WriteREG,w
 14991  1125  0021               	movlb	1	; select bank1
 14992  1126  00C2               	movwf	_SPI0Buffer^(0+128)
 14993                           
 14994                           ;CC2500_B1.c: 228: CC2500_WriteByte();
 14995  1127  3190  20FA         	fcall	_CC2500_WriteByte
 14996                           
 14997                           ;CC2500_B1.c: 229: RC4 = 1;
 14998  1129  0020               	movlb	0	; select bank0
 14999  112A  160E               	bsf	14,4	;volatile
 15000  112B  0008               	return
 15001  112C                     __end_of_CC2500_WriteREG:	
 15002                           
 15003                           	psect	text99
 15004  1E72                     __ptext99:	
 15005 ;; *************** function _CC2500_FrequencyCabr *****************
 15006 ;; Defined at:
 15007 ;;		line 172 in file "../src/CC2500_B1.c"
 15008 ;; Parameters:    Size  Location     Type
 15009 ;;		None
 15010 ;; Auto vars:     Size  Location     Type
 15011 ;;		None
 15012 ;; Return value:  Size  Location     Type
 15013 ;;		None               void
 15014 ;; Registers used:
 15015 ;;		wreg, status,2, status,0, pclath, cstack
 15016 ;; Tracked objects:
 15017 ;;		On entry : 0/0
 15018 ;;		On exit  : 0/0
 15019 ;;		Unchanged: 0/0
 15020 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15021 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15022 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15023 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15024 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15025 ;;Total ram usage:        0 bytes
 15026 ;; Hardware stack levels used:    1
 15027 ;; Hardware stack levels required when called:    7
 15028 ;; This function calls:
 15029 ;;		_CC2500_WriteCommand
 15030 ;;		_DelayTime_1us
 15031 ;; This function is called by:
 15032 ;;		_CC2500_PowerOnInitial
 15033 ;; This function uses a non-reentrant model
 15034 ;;
 15035                           
 15036                           
 15037                           ;psect for function _CC2500_FrequencyCabr
 15038  1E72                     _CC2500_FrequencyCabr:	
 15039                           
 15040                           ;CC2500_B1.c: 173: CC2500_WriteCommand(0x33);
 15041                           
 15042                           ;incstack = 0
 15043                           ; Regs used in _CC2500_FrequencyCabr: [wreg+status,2+status,0+pclath+cstack]
 15044  1E72  3033               	movlw	51
 15045  1E73  319F  271D  319E   	fcall	_CC2500_WriteCommand
 15046                           
 15047                           ;CC2500_B1.c: 174: DelayTime_1us(1000);
 15048  1E76  30E8               	movlw	232
 15049  1E77  0020               	movlb	0	; select bank0
 15050  1E78  00A0               	movwf	DelayTime_1us@count
 15051  1E79  3003               	movlw	3
 15052  1E7A  00A1               	movwf	DelayTime_1us@count+1
 15053  1E7B  3192  22D2         	fcall	_DelayTime_1us
 15054  1E7D  0008               	return
 15055  1E7E                     __end_of_CC2500_FrequencyCabr:	
 15056                           
 15057                           	psect	text100
 15058  12D2                     __ptext100:	
 15059 ;; *************** function _DelayTime_1us *****************
 15060 ;; Defined at:
 15061 ;;		line 278 in file "../src/CC2500_B1.c"
 15062 ;; Parameters:    Size  Location     Type
 15063 ;;  count           2    0[BANK0 ] int 
 15064 ;; Auto vars:     Size  Location     Type
 15065 ;;  j               2    4[BANK0 ] unsigned int 
 15066 ;;  i               2    2[BANK0 ] unsigned int 
 15067 ;; Return value:  Size  Location     Type
 15068 ;;		None               void
 15069 ;; Registers used:
 15070 ;;		wreg, status,2
 15071 ;; Tracked objects:
 15072 ;;		On entry : 0/0
 15073 ;;		On exit  : 0/0
 15074 ;;		Unchanged: 0/0
 15075 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15076 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15077 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15078 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15079 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15080 ;;Total ram usage:        6 bytes
 15081 ;; Hardware stack levels used:    1
 15082 ;; Hardware stack levels required when called:    5
 15083 ;; This function calls:
 15084 ;;		Nothing
 15085 ;; This function is called by:
 15086 ;;		_CC2500_PowerRST
 15087 ;;		_CC2500_FrequencyCabr
 15088 ;; This function uses a non-reentrant model
 15089 ;;
 15090                           
 15091                           
 15092                           ;psect for function _DelayTime_1us
 15093  12D2                     _DelayTime_1us:	
 15094                           
 15095                           ;CC2500_B1.c: 279: unsigned int i, j;
 15096                           ;CC2500_B1.c: 280: for (i = 1; i < count; i++)
 15097                           
 15098                           ;incstack = 0
 15099                           ; Regs used in _DelayTime_1us: [wreg+status,2]
 15100  12D2  3001               	movlw	1
 15101  12D3  0020               	movlb	0	; select bank0
 15102  12D4  00A2               	movwf	DelayTime_1us@i
 15103  12D5  3000               	movlw	0
 15104  12D6  00A3               	movwf	DelayTime_1us@i+1
 15105  12D7                     l374:	
 15106  12D7  0821               	movf	DelayTime_1us@count+1,w
 15107  12D8  0223               	subwf	DelayTime_1us@i+1,w
 15108  12D9  1D03               	skipz
 15109  12DA  2ADD               	goto	u4765
 15110  12DB  0820               	movf	DelayTime_1us@count,w
 15111  12DC  0222               	subwf	DelayTime_1us@i,w
 15112  12DD                     u4765:	
 15113  12DD  1803               	btfsc	3,0
 15114  12DE  0008               	return
 15115                           
 15116                           ;CC2500_B1.c: 281: for (j = 0; j <= 1; j++);
 15117  12DF  01A4               	clrf	DelayTime_1us@j
 15118  12E0  01A5               	clrf	DelayTime_1us@j+1
 15119  12E1  3000               	movlw	0
 15120  12E2  0225               	subwf	DelayTime_1us@j+1,w
 15121  12E3  3002               	movlw	2
 15122  12E4  1903               	skipnz
 15123  12E5  0224               	subwf	DelayTime_1us@j,w
 15124  12E6  1803               	btfsc	3,0
 15125  12E7  2AF3               	goto	l6026
 15126  12E8                     l6024:	
 15127  12E8  3001               	movlw	1
 15128  12E9  07A4               	addwf	DelayTime_1us@j,f
 15129  12EA  3000               	movlw	0
 15130  12EB  3DA5               	addwfc	DelayTime_1us@j+1,f
 15131  12EC  3000               	movlw	0
 15132  12ED  0225               	subwf	DelayTime_1us@j+1,w
 15133  12EE  3002               	movlw	2
 15134  12EF  1903               	skipnz
 15135  12F0  0224               	subwf	DelayTime_1us@j,w
 15136  12F1  1C03               	skipc
 15137  12F2  2AE8               	goto	l6024
 15138  12F3                     l6026:	
 15139  12F3  3001               	movlw	1
 15140  12F4  07A2               	addwf	DelayTime_1us@i,f
 15141  12F5  3000               	movlw	0
 15142  12F6  3DA3               	addwfc	DelayTime_1us@i+1,f
 15143  12F7  2AD7               	goto	l374
 15144  12F8                     __end_of_DelayTime_1us:	
 15145                           
 15146                           	psect	text101
 15147  1DCF                     __ptext101:	
 15148 ;; *************** function _CC2500_ClearTXFIFO *****************
 15149 ;; Defined at:
 15150 ;;		line 158 in file "../src/CC2500_B1.c"
 15151 ;; Parameters:    Size  Location     Type
 15152 ;;		None
 15153 ;; Auto vars:     Size  Location     Type
 15154 ;;		None
 15155 ;; Return value:  Size  Location     Type
 15156 ;;		None               void
 15157 ;; Registers used:
 15158 ;;		wreg, status,2, status,0, pclath, cstack
 15159 ;; Tracked objects:
 15160 ;;		On entry : 0/0
 15161 ;;		On exit  : 0/0
 15162 ;;		Unchanged: 0/0
 15163 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15164 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15165 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15166 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15167 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15168 ;;Total ram usage:        0 bytes
 15169 ;; Hardware stack levels used:    1
 15170 ;; Hardware stack levels required when called:    7
 15171 ;; This function calls:
 15172 ;;		_CC2500_WriteCommand
 15173 ;; This function is called by:
 15174 ;;		_CC2500_PowerOnInitial
 15175 ;; This function uses a non-reentrant model
 15176 ;;
 15177                           
 15178                           
 15179                           ;psect for function _CC2500_ClearTXFIFO
 15180  1DCF                     _CC2500_ClearTXFIFO:	
 15181                           
 15182                           ;CC2500_B1.c: 159: CC2500_WriteCommand(0x3B);
 15183                           
 15184                           ;incstack = 0
 15185                           ; Regs used in _CC2500_ClearTXFIFO: [wreg+status,2+status,0+pclath+cstack]
 15186  1DCF  303B               	movlw	59
 15187  1DD0  319F  271D         	fcall	_CC2500_WriteCommand
 15188  1DD2  0008               	return
 15189  1DD3                     __end_of_CC2500_ClearTXFIFO:	
 15190                           
 15191                           	psect	text102
 15192  1DCB                     __ptext102:	
 15193 ;; *************** function _CC2500_ClearRXFIFO *****************
 15194 ;; Defined at:
 15195 ;;		line 165 in file "../src/CC2500_B1.c"
 15196 ;; Parameters:    Size  Location     Type
 15197 ;;		None
 15198 ;; Auto vars:     Size  Location     Type
 15199 ;;		None
 15200 ;; Return value:  Size  Location     Type
 15201 ;;		None               void
 15202 ;; Registers used:
 15203 ;;		wreg, status,2, status,0, pclath, cstack
 15204 ;; Tracked objects:
 15205 ;;		On entry : 0/0
 15206 ;;		On exit  : 0/0
 15207 ;;		Unchanged: 0/0
 15208 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15209 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15210 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15211 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15212 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15213 ;;Total ram usage:        0 bytes
 15214 ;; Hardware stack levels used:    1
 15215 ;; Hardware stack levels required when called:    7
 15216 ;; This function calls:
 15217 ;;		_CC2500_WriteCommand
 15218 ;; This function is called by:
 15219 ;;		_CC2500_PowerOnInitial
 15220 ;; This function uses a non-reentrant model
 15221 ;;
 15222                           
 15223                           
 15224                           ;psect for function _CC2500_ClearRXFIFO
 15225  1DCB                     _CC2500_ClearRXFIFO:	
 15226                           
 15227                           ;CC2500_B1.c: 166: CC2500_WriteCommand(0x3A);
 15228                           
 15229                           ;incstack = 0
 15230                           ; Regs used in _CC2500_ClearRXFIFO: [wreg+status,2+status,0+pclath+cstack]
 15231  1DCB  303A               	movlw	58
 15232  1DCC  319F  271D         	fcall	_CC2500_WriteCommand
 15233  1DCE  0008               	return
 15234  1DCF                     __end_of_CC2500_ClearRXFIFO:	
 15235                           
 15236                           	psect	text103
 15237  1F1D                     __ptext103:	
 15238 ;; *************** function _CC2500_WriteCommand *****************
 15239 ;; Defined at:
 15240 ;;		line 248 in file "../src/CC2500_B1.c"
 15241 ;; Parameters:    Size  Location     Type
 15242 ;;  command         1    wreg     unsigned char 
 15243 ;; Auto vars:     Size  Location     Type
 15244 ;;  command         1    3[BANK0 ] unsigned char 
 15245 ;; Return value:  Size  Location     Type
 15246 ;;		None               void
 15247 ;; Registers used:
 15248 ;;		wreg, status,2, status,0, pclath, cstack
 15249 ;; Tracked objects:
 15250 ;;		On entry : 0/0
 15251 ;;		On exit  : 0/0
 15252 ;;		Unchanged: 0/0
 15253 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15254 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15255 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15256 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15257 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15258 ;;Total ram usage:        2 bytes
 15259 ;; Hardware stack levels used:    1
 15260 ;; Hardware stack levels required when called:    6
 15261 ;; This function calls:
 15262 ;;		_CC2500_WriteByte
 15263 ;; This function is called by:
 15264 ;;		_CC2500_TxData
 15265 ;;		_CC2500_RxData
 15266 ;;		_CC2500_ClearTXFIFO
 15267 ;;		_CC2500_ClearRXFIFO
 15268 ;;		_CC2500_FrequencyCabr
 15269 ;;		_CC2500_SIDLEMode
 15270 ;;		_setRF_Main
 15271 ;;		_RF_RxDisable
 15272 ;; This function uses a non-reentrant model
 15273 ;;
 15274                           
 15275                           
 15276                           ;psect for function _CC2500_WriteCommand
 15277  1F1D                     _CC2500_WriteCommand:	
 15278                           
 15279                           ;incstack = 0
 15280                           ; Regs used in _CC2500_WriteCommand: [wreg+status,2+status,0+pclath+cstack]
 15281                           ;CC2500_WriteCommand@command stored from wreg
 15282  1F1D  0020               	movlb	0	; select bank0
 15283  1F1E  00A3               	movwf	CC2500_WriteCommand@command
 15284                           
 15285                           ;CC2500_B1.c: 249: RC4 = 0;
 15286  1F1F  120E               	bcf	14,4	;volatile
 15287                           
 15288                           ;CC2500_B1.c: 250: SPI0Buffer = command;
 15289  1F20  0823               	movf	CC2500_WriteCommand@command,w
 15290  1F21  00A2               	movwf	??_CC2500_WriteCommand
 15291  1F22  0822               	movf	??_CC2500_WriteCommand,w
 15292  1F23  0021               	movlb	1	; select bank1
 15293  1F24  00C2               	movwf	_SPI0Buffer^(0+128)
 15294  1F25                     l362:	
 15295                           ;CC2500_B1.c: 252: while (RC2 == 1);
 15296                           
 15297  1F25  0020               	movlb	0	; select bank0
 15298  1F26  190E               	btfsc	14,2	;volatile
 15299  1F27  2F25               	goto	l362
 15300                           
 15301                           ;CC2500_B1.c: 254: CC2500_WriteByte();
 15302  1F28  3190  20FA         	fcall	_CC2500_WriteByte
 15303                           
 15304                           ;CC2500_B1.c: 255: RC4 = 1;
 15305  1F2A  0020               	movlb	0	; select bank0
 15306  1F2B  160E               	bsf	14,4	;volatile
 15307  1F2C  0008               	return
 15308  1F2D                     __end_of_CC2500_WriteCommand:	
 15309                           
 15310                           	psect	text104
 15311  10FA                     __ptext104:	
 15312 ;; *************** function _CC2500_WriteByte *****************
 15313 ;; Defined at:
 15314 ;;		line 190 in file "../src/CC2500_B1.c"
 15315 ;; Parameters:    Size  Location     Type
 15316 ;;		None
 15317 ;; Auto vars:     Size  Location     Type
 15318 ;;  loop_a          1    1[BANK0 ] unsigned char 
 15319 ;; Return value:  Size  Location     Type
 15320 ;;		None               void
 15321 ;; Registers used:
 15322 ;;		wreg, status,2, status,0
 15323 ;; Tracked objects:
 15324 ;;		On entry : 0/0
 15325 ;;		On exit  : 0/0
 15326 ;;		Unchanged: 0/0
 15327 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15328 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15329 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15330 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15331 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15332 ;;Total ram usage:        2 bytes
 15333 ;; Hardware stack levels used:    1
 15334 ;; Hardware stack levels required when called:    5
 15335 ;; This function calls:
 15336 ;;		Nothing
 15337 ;; This function is called by:
 15338 ;;		_CC2500_TxData
 15339 ;;		_CC2500_RxData
 15340 ;;		_CC2500_PowerRST
 15341 ;;		_CC2500_WriteREG
 15342 ;;		_CC2500_WriteCommand
 15343 ;;		_CC2500_ReadStatus
 15344 ;;		_CC2500_ReadREG
 15345 ;; This function uses a non-reentrant model
 15346 ;;
 15347                           
 15348                           
 15349                           ;psect for function _CC2500_WriteByte
 15350  10FA                     _CC2500_WriteByte:	
 15351                           
 15352                           ;CC2500_B1.c: 191: unsigned char loop_a;
 15353                           ;CC2500_B1.c: 192: for (loop_a = 0; loop_a < 8; loop_a++) {
 15354                           
 15355                           ;incstack = 0
 15356                           ; Regs used in _CC2500_WriteByte: [wreg+status,2+status,0]
 15357  10FA  0020               	movlb	0	; select bank0
 15358  10FB  01A1               	clrf	CC2500_WriteByte@loop_a
 15359  10FC                     L14:	
 15360  10FC  3008               	movlw	8
 15361  10FD  0221               	subwf	CC2500_WriteByte@loop_a,w
 15362  10FE  1803               	btfsc	3,0
 15363  10FF  0008               	return
 15364                           
 15365                           ;CC2500_B1.c: 193: if (SPI0Buffer & 0x80)
 15366  1100  0021               	movlb	1	; select bank1
 15367  1101  1FC2               	btfss	_SPI0Buffer^(0+128),7
 15368  1102  2906               	goto	l338
 15369                           
 15370                           ;CC2500_B1.c: 194: RC0 = 1;
 15371  1103  0020               	movlb	0	; select bank0
 15372  1104  140E               	bsf	14,0	;volatile
 15373  1105  2908               	goto	l339
 15374  1106                     l338:	
 15375                           
 15376                           ;CC2500_B1.c: 195: else
 15377                           ;CC2500_B1.c: 196: RC0 = 0;
 15378  1106  0020               	movlb	0	; select bank0
 15379  1107  100E               	bcf	14,0	;volatile
 15380  1108                     l339:	
 15381                           
 15382                           ;CC2500_B1.c: 197: RC1 = 1;
 15383  1108  148E               	bsf	14,1	;volatile
 15384                           
 15385                           ;CC2500_B1.c: 198: SPI0Buffer <<= 1;
 15386  1109  1003               	clrc
 15387  110A  0021               	movlb	1	; select bank1
 15388  110B  0DC2               	rlf	_SPI0Buffer^(0+128),f
 15389                           
 15390                           ;CC2500_B1.c: 199: RC1 = 0;
 15391  110C  0020               	movlb	0	; select bank0
 15392  110D  108E               	bcf	14,1	;volatile
 15393  110E  3001               	movlw	1
 15394  110F  00A0               	movwf	??_CC2500_WriteByte
 15395  1110  0820               	movf	??_CC2500_WriteByte,w
 15396  1111  07A1               	addwf	CC2500_WriteByte@loop_a,f
 15397  1112  28FC               	goto	L14
 15398  1113                     __end_of_CC2500_WriteByte:	
 15399                           
 15400                           	psect	text105
 15401  0F5E                     __ptext105:	
 15402 ;; *************** function _Buzzer_Main *****************
 15403 ;; Defined at:
 15404 ;;		line 53 in file "../src/Buzzer_B1.c"
 15405 ;; Parameters:    Size  Location     Type
 15406 ;;		None
 15407 ;; Auto vars:     Size  Location     Type
 15408 ;;		None
 15409 ;; Return value:  Size  Location     Type
 15410 ;;		None               void
 15411 ;; Registers used:
 15412 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
 15413 ;; Tracked objects:
 15414 ;;		On entry : 0/0
 15415 ;;		On exit  : 0/0
 15416 ;;		Unchanged: 0/0
 15417 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15418 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15419 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15420 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15421 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15422 ;;Total ram usage:        4 bytes
 15423 ;; Hardware stack levels used:    1
 15424 ;; Hardware stack levels required when called:    5
 15425 ;; This function calls:
 15426 ;;		Nothing
 15427 ;; This function is called by:
 15428 ;;		_main
 15429 ;; This function uses a non-reentrant model
 15430 ;;
 15431                           
 15432                           
 15433                           ;psect for function _Buzzer_Main
 15434  0F5E                     _Buzzer_Main:	
 15435                           
 15436                           ;Buzzer_B1.c: 54: Buz->Switch = (RB3) ? 1 : 0;
 15437                           
 15438                           ;incstack = 0
 15439                           ; Regs used in _Buzzer_Main: [wreg-fsr1h+status,2+status,0]
 15440  0F5E  0878               	movf	_Buz,w
 15441  0F5F  0086               	movwf	6
 15442  0F60  3001               	movlw	1	; select bank2/3
 15443  0F61  0087               	movwf	7
 15444  0F62  1281               	bcf	1,5
 15445  0F63  0020               	movlb	0	; select bank0
 15446  0F64  198D               	btfsc	13,3	;volatile
 15447  0F65  1681               	bsf	1,5
 15448                           
 15449                           ;Buzzer_B1.c: 56: if (Buz->Counter >= Buz->TimeValue) {
 15450  0F66  0878               	movf	_Buz,w
 15451  0F67  3E06               	addlw	6
 15452  0F68  0086               	movwf	6
 15453  0F69  3001               	movlw	1	; select bank2/3
 15454  0F6A  0087               	movwf	7
 15455  0F6B  3F40               	moviw [0]fsr1
 15456  0F6C  0020               	movlb	0	; select bank0
 15457  0F6D  00A0               	movwf	??_Buzzer_Main
 15458  0F6E  3F41               	moviw [1]fsr1
 15459  0F6F  00A1               	movwf	??_Buzzer_Main+1
 15460  0F70  0A78               	incf	_Buz,w
 15461  0F71  0086               	movwf	6
 15462  0F72  3001               	movlw	1	; select bank2/3
 15463  0F73  0087               	movwf	7
 15464  0F74  3F40               	moviw [0]fsr1
 15465  0F75  00A2               	movwf	??_Buzzer_Main+2
 15466  0F76  3F41               	moviw [1]fsr1
 15467  0F77  00A3               	movwf	??_Buzzer_Main+3
 15468  0F78  0821               	movf	??_Buzzer_Main+1,w
 15469  0F79  0223               	subwf	??_Buzzer_Main+3,w
 15470  0F7A  1D03               	skipz
 15471  0F7B  2F7E               	goto	u6065
 15472  0F7C  0820               	movf	??_Buzzer_Main,w
 15473  0F7D  0222               	subwf	??_Buzzer_Main+2,w
 15474  0F7E                     u6065:	
 15475  0F7E  1C03               	skipc
 15476  0F7F  0008               	return
 15477                           
 15478                           ;Buzzer_B1.c: 57: Buz->Counter = 0;
 15479  0F80  0A78               	incf	_Buz,w
 15480  0F81  0086               	movwf	6
 15481  0F82  3001               	movlw	1	; select bank2/3
 15482  0F83  0087               	movwf	7
 15483  0F84  3000               	movlw	0
 15484  0F85  3FC0               	movwi [0]fsr1
 15485  0F86  3FC1               	movwi [1]fsr1
 15486                           
 15487                           ;Buzzer_B1.c: 58: if (!Buz->Switch) {
 15488  0F87  0878               	movf	_Buz,w
 15489  0F88  0086               	movwf	6
 15490  0F89  3001               	movlw	1	; select bank2/3
 15491  0F8A  0087               	movwf	7
 15492  0F8B  1A81               	btfsc	1,5
 15493  0F8C  2FF2               	goto	l6910
 15494                           
 15495                           ;Buzzer_B1.c: 59: if (Buz->Count == 0) {
 15496  0F8D  0878               	movf	_Buz,w
 15497  0F8E  3E03               	addlw	3
 15498  0F8F  0086               	movwf	6
 15499  0F90  3001               	movlw	1	; select bank2/3
 15500  0F91  0087               	movwf	7
 15501  0F92  0881               	movf	1,f
 15502  0F93  1D03               	skipz
 15503  0F94  2FEB               	goto	l6906
 15504                           
 15505                           ;Buzzer_B1.c: 60: if (Buz->BufferStatus1) {
 15506  0F95  0878               	movf	_Buz,w
 15507  0F96  0086               	movwf	6
 15508  0F97  3001               	movlw	1	; select bank2/3
 15509  0F98  0087               	movwf	7
 15510  0F99  1D81               	btfss	1,3
 15511  0F9A  2FBD               	goto	l6898
 15512                           
 15513                           ;Buzzer_B1.c: 61: Buz->BufferStatus1 = 0;
 15514  0F9B  0878               	movf	_Buz,w
 15515  0F9C  0086               	movwf	6
 15516  0F9D  3001               	movlw	1	; select bank2/3
 15517  0F9E  0087               	movwf	7
 15518  0F9F  1181               	bcf	1,3
 15519                           
 15520                           ;Buzzer_B1.c: 62: Buz->Count = Buz->CountBuffer1;
 15521  0FA0  0878               	movf	_Buz,w
 15522  0FA1  3E04               	addlw	4
 15523  0FA2  0086               	movwf	6
 15524  0FA3  3001               	movlw	1	; select bank2/3
 15525  0FA4  0087               	movwf	7
 15526  0FA5  0801               	movf	1,w
 15527  0FA6  00A0               	movwf	??_Buzzer_Main
 15528  0FA7  0878               	movf	_Buz,w
 15529  0FA8  3E03               	addlw	3
 15530  0FA9  0086               	movwf	6
 15531  0FAA  3001               	movlw	1	; select bank2/3
 15532  0FAB  0087               	movwf	7
 15533  0FAC  0820               	movf	??_Buzzer_Main,w
 15534  0FAD  0081               	movwf	1
 15535                           
 15536                           ;Buzzer_B1.c: 63: Buz->TimeValue = Buz->TimeValueBuffer1;
 15537  0FAE  0878               	movf	_Buz,w
 15538  0FAF  3E08               	addlw	8
 15539  0FB0  0086               	movwf	6
 15540  0FB1  3001               	movlw	1	; select bank2/3
 15541  0FB2  0087               	movwf	7
 15542  0FB3  0878               	movf	_Buz,w
 15543  0FB4  3E06               	addlw	6
 15544  0FB5  0084               	movwf	4
 15545  0FB6  3001               	movlw	1	; select bank2/3
 15546  0FB7  0085               	movwf	5
 15547  0FB8  3F40               	moviw [0]fsr1
 15548  0FB9  3F80               	movwi [0]fsr0
 15549  0FBA  3F41               	moviw [1]fsr1
 15550  0FBB  3F81               	movwi [1]fsr0
 15551                           
 15552                           ;Buzzer_B1.c: 64: } else if (Buz->BufferStatus2) {
 15553  0FBC  0008               	return
 15554  0FBD                     l6898:	
 15555  0FBD  0878               	movf	_Buz,w
 15556  0FBE  0086               	movwf	6
 15557  0FBF  3001               	movlw	1	; select bank2/3
 15558  0FC0  0087               	movwf	7
 15559  0FC1  1E01               	btfss	1,4
 15560  0FC2  2FE5               	goto	l6904
 15561                           
 15562                           ;Buzzer_B1.c: 65: Buz->BufferStatus2 = 0;
 15563  0FC3  0878               	movf	_Buz,w
 15564  0FC4  0086               	movwf	6
 15565  0FC5  3001               	movlw	1	; select bank2/3
 15566  0FC6  0087               	movwf	7
 15567  0FC7  1201               	bcf	1,4
 15568                           
 15569                           ;Buzzer_B1.c: 66: Buz->Count = Buz->CountBuffer2;
 15570  0FC8  0878               	movf	_Buz,w
 15571  0FC9  3E05               	addlw	5
 15572  0FCA  0086               	movwf	6
 15573  0FCB  3001               	movlw	1	; select bank2/3
 15574  0FCC  0087               	movwf	7
 15575  0FCD  0801               	movf	1,w
 15576  0FCE  00A0               	movwf	??_Buzzer_Main
 15577  0FCF  0878               	movf	_Buz,w
 15578  0FD0  3E03               	addlw	3
 15579  0FD1  0086               	movwf	6
 15580  0FD2  3001               	movlw	1	; select bank2/3
 15581  0FD3  0087               	movwf	7
 15582  0FD4  0820               	movf	??_Buzzer_Main,w
 15583  0FD5  0081               	movwf	1
 15584                           
 15585                           ;Buzzer_B1.c: 67: Buz->TimeValue = Buz->TimeValueBuffer2;
 15586  0FD6  0878               	movf	_Buz,w
 15587  0FD7  3E0A               	addlw	10
 15588  0FD8  0086               	movwf	6
 15589  0FD9  3001               	movlw	1	; select bank2/3
 15590  0FDA  0087               	movwf	7
 15591  0FDB  0878               	movf	_Buz,w
 15592  0FDC  3E06               	addlw	6
 15593  0FDD  0084               	movwf	4
 15594  0FDE  3001               	movlw	1	; select bank2/3
 15595  0FDF  0085               	movwf	5
 15596  0FE0  3F40               	moviw [0]fsr1
 15597  0FE1  3F80               	movwi [0]fsr0
 15598  0FE2  3F41               	moviw [1]fsr1
 15599  0FE3  3F81               	movwi [1]fsr0
 15600                           
 15601                           ;Buzzer_B1.c: 68: } else {
 15602  0FE4  0008               	return
 15603  0FE5                     l6904:	
 15604                           
 15605                           ;Buzzer_B1.c: 69: Buz->GO = 0;
 15606  0FE5  0878               	movf	_Buz,w
 15607  0FE6  0086               	movwf	6
 15608  0FE7  3001               	movlw	1	; select bank2/3
 15609  0FE8  0087               	movwf	7
 15610  0FE9  1081               	bcf	1,1
 15611                           
 15612                           ;Buzzer_B1.c: 70: }
 15613                           ;Buzzer_B1.c: 71: } else {
 15614  0FEA  0008               	return
 15615  0FEB                     l6906:	
 15616                           
 15617                           ;Buzzer_B1.c: 72: Buz->Switch = 1;
 15618  0FEB  0878               	movf	_Buz,w
 15619  0FEC  0086               	movwf	6
 15620  0FED  3001               	movlw	1	; select bank2/3
 15621  0FEE  0087               	movwf	7
 15622  0FEF  1681               	bsf	1,5
 15623                           
 15624                           ;Buzzer_B1.c: 74: RB3 = 1;
 15625  0FF0  158D               	bsf	13,3	;volatile
 15626                           
 15627                           ;Buzzer_B1.c: 75: }
 15628                           ;Buzzer_B1.c: 76: } else {
 15629  0FF1  0008               	return
 15630  0FF2                     l6910:	
 15631                           
 15632                           ;Buzzer_B1.c: 77: Buz->Switch = 0;
 15633  0FF2  0878               	movf	_Buz,w
 15634  0FF3  0086               	movwf	6
 15635  0FF4  3001               	movlw	1	; select bank2/3
 15636  0FF5  0087               	movwf	7
 15637  0FF6  1281               	bcf	1,5
 15638                           
 15639                           ;Buzzer_B1.c: 79: RB3 = 0;
 15640  0FF7  118D               	bcf	13,3	;volatile
 15641                           
 15642                           ;Buzzer_B1.c: 81: Buz->Count--;
 15643  0FF8  0878               	movf	_Buz,w
 15644  0FF9  3E03               	addlw	3
 15645  0FFA  0086               	movwf	6
 15646  0FFB  3001               	movlw	1	; select bank2/3
 15647  0FFC  0087               	movwf	7
 15648  0FFD  3001               	movlw	1
 15649  0FFE  0281               	subwf	1,f
 15650  0FFF  0008               	return
 15651  1000                     __end_of_Buzzer_Main:	
 15652                           
 15653                           	psect	text106
 15654  1E51                     __ptext106:	
 15655 ;; *************** function _Buzzer_Initialization *****************
 15656 ;; Defined at:
 15657 ;;		line 11 in file "../src/Buzzer_B1.c"
 15658 ;; Parameters:    Size  Location     Type
 15659 ;;		None
 15660 ;; Auto vars:     Size  Location     Type
 15661 ;;		None
 15662 ;; Return value:  Size  Location     Type
 15663 ;;		None               void
 15664 ;; Registers used:
 15665 ;;		wreg, fsr1l, fsr1h
 15666 ;; Tracked objects:
 15667 ;;		On entry : 0/0
 15668 ;;		On exit  : 0/0
 15669 ;;		Unchanged: 0/0
 15670 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15671 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15672 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15673 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15674 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15675 ;;Total ram usage:        1 bytes
 15676 ;; Hardware stack levels used:    1
 15677 ;; Hardware stack levels required when called:    5
 15678 ;; This function calls:
 15679 ;;		Nothing
 15680 ;; This function is called by:
 15681 ;;		_main
 15682 ;; This function uses a non-reentrant model
 15683 ;;
 15684                           
 15685                           
 15686                           ;psect for function _Buzzer_Initialization
 15687  1E51                     _Buzzer_Initialization:	
 15688                           
 15689                           ;Buzzer_B1.c: 12: Buz = &Buz1;
 15690                           
 15691                           ;incstack = 0
 15692                           ; Regs used in _Buzzer_Initialization: [wregfsr1]
 15693  1E51  303E               	movlw	_Buz1& (0+255)
 15694  1E52  0020               	movlb	0	; select bank0
 15695  1E53  00A0               	movwf	??_Buzzer_Initialization
 15696  1E54  0820               	movf	??_Buzzer_Initialization,w
 15697  1E55  00F8               	movwf	_Buz
 15698                           
 15699                           ;Buzzer_B1.c: 13: Buz->Enable = 1;
 15700  1E56  0878               	movf	_Buz,w
 15701  1E57  0086               	movwf	6
 15702  1E58  3001               	movlw	1	; select bank2/3
 15703  1E59  0087               	movwf	7
 15704  1E5A  1401               	bsf	1,0
 15705  1E5B  0008               	return
 15706  1E5C                     __end_of_Buzzer_Initialization:	
 15707                           
 15708                           	psect	intentry
 15709  0004                     __pintentry:	
 15710 ;; *************** function _ISR *****************
 15711 ;; Defined at:
 15712 ;;		line 109 in file "../src/MCU_B1.c"
 15713 ;; Parameters:    Size  Location     Type
 15714 ;;		None
 15715 ;; Auto vars:     Size  Location     Type
 15716 ;;		None
 15717 ;; Return value:  Size  Location     Type
 15718 ;;		None               void
 15719 ;; Registers used:
 15720 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15721 ;; Tracked objects:
 15722 ;;		On entry : 0/0
 15723 ;;		On exit  : 0/0
 15724 ;;		Unchanged: 0/0
 15725 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15726 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15727 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15728 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15729 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15730 ;;Total ram usage:        1 bytes
 15731 ;; Hardware stack levels used:    1
 15732 ;; Hardware stack levels required when called:    4
 15733 ;; This function calls:
 15734 ;;		_INT_ISR
 15735 ;;		_IOC_ISR
 15736 ;;		_TMR0_ISR
 15737 ;; This function is called by:
 15738 ;;		Interrupt level 1
 15739 ;; This function uses a non-reentrant model
 15740 ;;
 15741                           
 15742  0004                     _ISR:	
 15743                           
 15744                           ;incstack = 0
 15745                           ; Regs used in _ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15746  0004  147E               	bsf	126,0	;set compiler interrupt flag
 15747  0005  3180               	pagesel	$
 15748  0006  0020               	movlb	0	; select bank0
 15749  0007  087F               	movf	127,w
 15750  0008  00F7               	movwf	??_ISR
 15751                           
 15752                           ;MCU_B1.c: 111: IOC_ISR();
 15753  0009  319F  277E  3180   	fcall	_IOC_ISR
 15754                           
 15755                           ;MCU_B1.c: 113: TMR0_ISR();
 15756  000C  3194  2434  3180   	fcall	_TMR0_ISR
 15757                           
 15758                           ;MCU_B1.c: 115: ;;
 15759                           ;MCU_B1.c: 119: INT_ISR();
 15760  000F  319F  276D         	fcall	_INT_ISR
 15761  0011  0877               	movf	??_ISR,w
 15762  0012  0020               	movlb	0	; select bank0
 15763  0013  00FF               	movwf	127
 15764  0014  107E               	bcf	126,0	;clear compiler interrupt flag
 15765  0015  0009               	retfie
 15766  0016                     __end_of_ISR:	
 15767                           
 15768                           	psect	text108
 15769  1434                     __ptext108:	
 15770 ;; *************** function _TMR0_ISR *****************
 15771 ;; Defined at:
 15772 ;;		line 137 in file "../src/MCU_B1.c"
 15773 ;; Parameters:    Size  Location     Type
 15774 ;;		None
 15775 ;; Auto vars:     Size  Location     Type
 15776 ;;		None
 15777 ;; Return value:  Size  Location     Type
 15778 ;;		None               void
 15779 ;; Registers used:
 15780 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15781 ;; Tracked objects:
 15782 ;;		On entry : 0/0
 15783 ;;		On exit  : 0/0
 15784 ;;		Unchanged: 0/0
 15785 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15786 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15787 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15788 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15789 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15790 ;;Total ram usage:        0 bytes
 15791 ;; Hardware stack levels used:    1
 15792 ;; Hardware stack levels required when called:    2
 15793 ;; This function calls:
 15794 ;;		_Buz_Counter
 15795 ;;		_setDimmerLights_IntrControl
 15796 ;; This function is called by:
 15797 ;;		_ISR
 15798 ;; This function uses a non-reentrant model
 15799 ;;
 15800                           
 15801                           
 15802                           ;psect for function _TMR0_ISR
 15803  1434                     _TMR0_ISR:	
 15804                           
 15805                           ;MCU_B1.c: 138: if (TMR0IE == 1 && TMR0IF == 1) {
 15806                           
 15807                           ;incstack = 0
 15808                           ; Regs used in _TMR0_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15809  1434  1E8B               	btfss	11,5	;volatile
 15810  1435  0008               	return
 15811  1436  1D0B               	btfss	11,2	;volatile
 15812  1437  0008               	return
 15813                           
 15814                           ;MCU_B1.c: 139: TMR0 = (256-190);
 15815  1438  3042               	movlw	66
 15816  1439  0020               	movlb	0	; select bank0
 15817  143A  0095               	movwf	21	;volatile
 15818                           
 15819                           ;MCU_B1.c: 140: TMR0IF = 0;
 15820  143B  110B               	bcf	11,2	;volatile
 15821                           
 15822                           ;MCU_B1.c: 145: setDimmerLights_IntrControl(1);
 15823  143C  3001               	movlw	1
 15824  143D  3180  204C  3194   	fcall	_setDimmerLights_IntrControl
 15825                           
 15826                           ;MCU_B1.c: 150: setDimmerLights_IntrControl(2);
 15827  1440  3002               	movlw	2
 15828  1441  3180  204C  3194   	fcall	_setDimmerLights_IntrControl
 15829                           
 15830                           ;MCU_B1.c: 161: Timer0->Count++;
 15831  1444  0021               	movlb	1	; select bank1
 15832  1445  0A69               	incf	_Timer0^(0+128),w
 15833  1446  0086               	movwf	6
 15834  1447  3001               	movlw	1	; select bank2/3
 15835  1448  0087               	movwf	7
 15836  1449  3001               	movlw	1
 15837  144A  0781               	addwf	1,f
 15838  144B  3141               	addfsr 1,1
 15839  144C  1803               	skipnc
 15840  144D  0A81               	incf	1,f
 15841                           
 15842                           ;MCU_B1.c: 162: if (Timer0->Count == 100) {
 15843  144E  0A69               	incf	_Timer0^(0+128),w
 15844  144F  0086               	movwf	6
 15845  1450  3001               	movlw	1	; select bank2/3
 15846  1451  0087               	movwf	7
 15847  1452  3F40               	moviw [0]fsr1
 15848  1453  3A64               	xorlw	100
 15849  1454  1D03               	skipz
 15850  1455  2C58               	goto	u616_25
 15851  1456  3F41               	moviw [1]fsr1
 15852  1457  3A00               	xorlw	0
 15853  1458                     u616_25:	
 15854  1458  1D03               	skipz
 15855  1459  0008               	return
 15856                           
 15857                           ;MCU_B1.c: 163: Timer0->Count = 0;
 15858  145A  0A69               	incf	_Timer0^(0+128),w
 15859  145B  0086               	movwf	6
 15860  145C  3001               	movlw	1	; select bank2/3
 15861  145D  0087               	movwf	7
 15862  145E  3000               	movlw	0
 15863  145F  3FC0               	movwi [0]fsr1
 15864  1460  3FC1               	movwi [1]fsr1
 15865                           
 15866                           ;MCU_B1.c: 164: myMain->T0_Timerout = 1;
 15867  1461  086B               	movf	_myMain^(0+128),w
 15868  1462  0086               	movwf	6
 15869  1463  3001               	movlw	1	; select bank2/3
 15870  1464  0087               	movwf	7
 15871  1465  1481               	bsf	1,1
 15872                           
 15873                           ;MCU_B1.c: 167: Buz_Counter();
 15874  1466  319F  270D         	fcall	_Buz_Counter
 15875  1468  0008               	return
 15876  1469                     __end_of_TMR0_ISR:	
 15877                           
 15878                           	psect	text109
 15879  004C                     __ptext109:	
 15880 ;; *************** function _setDimmerLights_IntrControl *****************
 15881 ;; Defined at:
 15882 ;;		line 90 in file "../src/Dimmer_B1.c"
 15883 ;; Parameters:    Size  Location     Type
 15884 ;;  lights          1    wreg     unsigned char 
 15885 ;; Auto vars:     Size  Location     Type
 15886 ;;  lights          1    6[COMMON] unsigned char 
 15887 ;; Return value:  Size  Location     Type
 15888 ;;		None               void
 15889 ;; Registers used:
 15890 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15891 ;; Tracked objects:
 15892 ;;		On entry : 0/0
 15893 ;;		On exit  : 0/0
 15894 ;;		Unchanged: 0/0
 15895 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15896 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15897 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15898 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15899 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15900 ;;Total ram usage:        5 bytes
 15901 ;; Hardware stack levels used:    1
 15902 ;; Hardware stack levels required when called:    1
 15903 ;; This function calls:
 15904 ;;		_DimmerIntrPointSelect
 15905 ;; This function is called by:
 15906 ;;		_TMR0_ISR
 15907 ;; This function uses a non-reentrant model
 15908 ;;
 15909                           
 15910                           
 15911                           ;psect for function _setDimmerLights_IntrControl
 15912  004C                     _setDimmerLights_IntrControl:	
 15913                           
 15914                           ;incstack = 0
 15915                           ; Regs used in _setDimmerLights_IntrControl: [wreg-fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 15916                           ;setDimmerLights_IntrControl@lights stored from wreg
 15917  004C  00F6               	movwf	setDimmerLights_IntrControl@lights
 15918                           
 15919                           ;Dimmer_B1.c: 92: DimmerIntrPointSelect(lights);
 15920  004D  0876               	movf	setDimmerLights_IntrControl@lights,w
 15921  004E  3188  2000  3180   	fcall	_DimmerIntrPointSelect
 15922                           
 15923                           ;Dimmer_B1.c: 93: if (DimmerLightsIntr->GO == 1) {
 15924  0051  087A               	movf	_DimmerLightsIntr,w
 15925  0052  0086               	movwf	6
 15926  0053  3001               	movlw	1	; select bank2/3
 15927  0054  0087               	movwf	7
 15928  0055  1C01               	btfss	1,0
 15929  0056  28B1               	goto	i1l6406
 15930                           
 15931                           ;Dimmer_B1.c: 94: DimmerLightsIntr->Count++;
 15932  0057  3001               	movlw	1
 15933  0058  00F2               	movwf	??_setDimmerLights_IntrControl
 15934  0059  087A               	movf	_DimmerLightsIntr,w
 15935  005A  3E03               	addlw	3
 15936  005B  0086               	movwf	6
 15937  005C  3001               	movlw	1	; select bank2/3
 15938  005D  0087               	movwf	7
 15939  005E  0872               	movf	??_setDimmerLights_IntrControl,w
 15940  005F  0781               	addwf	1,f
 15941                           
 15942                           ;Dimmer_B1.c: 95: if (DimmerLightsIntr->Count >= (DimmerLightsIntr->DimmingValue - Dimme
      +                          r->Correction)) {
 15943  0060  0021               	movlb	1	; select bank1
 15944  0061  0839               	movf	_Dimmer^(0+128),w
 15945  0062  3E02               	addlw	2
 15946  0063  0086               	movwf	6
 15947  0064  0187               	clrf	7
 15948  0065  0801               	movf	1,w
 15949  0066  00F2               	movwf	??_setDimmerLights_IntrControl
 15950  0067  01F3               	clrf	??_setDimmerLights_IntrControl+1
 15951  0068  09F2               	comf	??_setDimmerLights_IntrControl,f
 15952  0069  09F3               	comf	??_setDimmerLights_IntrControl+1,f
 15953  006A  0AF2               	incf	??_setDimmerLights_IntrControl,f
 15954  006B  1903               	skipnz
 15955  006C  0AF3               	incf	??_setDimmerLights_IntrControl+1,f
 15956  006D  087A               	movf	_DimmerLightsIntr,w
 15957  006E  3E04               	addlw	4
 15958  006F  0086               	movwf	6
 15959  0070  3001               	movlw	1	; select bank2/3
 15960  0071  0087               	movwf	7
 15961  0072  0801               	movf	1,w
 15962  0073  0772               	addwf	??_setDimmerLights_IntrControl,w
 15963  0074  00F4               	movwf	??_setDimmerLights_IntrControl+2
 15964  0075  0873               	movf	??_setDimmerLights_IntrControl+1,w
 15965  0076  1803               	skipnc
 15966  0077  0A73               	incf	??_setDimmerLights_IntrControl+1,w
 15967  0078  00F5               	movwf	??_setDimmerLights_IntrControl+3
 15968  0079  087A               	movf	_DimmerLightsIntr,w
 15969  007A  3E03               	addlw	3
 15970  007B  0086               	movwf	6
 15971  007C  3001               	movlw	1	; select bank2/3
 15972  007D  0087               	movwf	7
 15973  007E  0875               	movf	??_setDimmerLights_IntrControl+3,w
 15974  007F  3A80               	xorlw	128
 15975  0080  3C80               	sublw	128
 15976  0081  1D03               	skipz
 15977  0082  2885               	goto	u526_25
 15978  0083  0874               	movf	??_setDimmerLights_IntrControl+2,w
 15979  0084  0201               	subwf	1,w
 15980  0085                     u526_25:	
 15981  0085  1C03               	skipc
 15982  0086  29BA               	goto	i1l6468
 15983                           
 15984                           ;Dimmer_B1.c: 96: DimmerLightsIntr->Count = 0;
 15985  0087  087A               	movf	_DimmerLightsIntr,w
 15986  0088  3E03               	addlw	3
 15987  0089  0086               	movwf	6
 15988  008A  3001               	movlw	1	; select bank2/3
 15989  008B  0087               	movwf	7
 15990  008C  0181               	clrf	1
 15991                           
 15992                           ;Dimmer_B1.c: 97: DimmerLightsIntr->GO = 0;
 15993  008D  087A               	movf	_DimmerLightsIntr,w
 15994  008E  0086               	movwf	6
 15995  008F  3001               	movlw	1	; select bank2/3
 15996  0090  0087               	movwf	7
 15997  0091  1001               	bcf	1,0
 15998                           
 15999                           ;Dimmer_B1.c: 99: if (DimmerLightsIntr->StatusFlag == 1) {
 16000  0092  087A               	movf	_DimmerLightsIntr,w
 16001  0093  0086               	movwf	6
 16002  0094  3001               	movlw	1	; select bank2/3
 16003  0095  0087               	movwf	7
 16004  0096  1F01               	btfss	1,6
 16005  0097  29BA               	goto	i1l6468
 16006                           
 16007                           ;Dimmer_B1.c: 100: DimmerLightsIntr->Flag = 1;
 16008  0098  087A               	movf	_DimmerLightsIntr,w
 16009  0099  3E08               	addlw	8
 16010  009A  0086               	movwf	6
 16011  009B  3001               	movlw	1	; select bank2/3
 16012  009C  0087               	movwf	7
 16013  009D  1401               	bsf	1,0
 16014                           
 16015                           ;Dimmer_B1.c: 101: DimmerLightsIntr->Triac = 1;
 16016  009E  087A               	movf	_DimmerLightsIntr,w
 16017  009F  3E08               	addlw	8
 16018  00A0  0086               	movwf	6
 16019  00A1  3001               	movlw	1	; select bank2/3
 16020  00A2  0087               	movwf	7
 16021  00A3  1681               	bsf	1,5
 16022                           
 16023                           ;Dimmer_B1.c: 103: if (lights == 1) {
 16024  00A4  0876               	movf	setDimmerLights_IntrControl@lights,w
 16025  00A5  3A01               	xorlw	1
 16026  00A6  1D03               	skipz
 16027  00A7  28AA               	goto	i1l6402
 16028                           
 16029                           ;Dimmer_B1.c: 104: RA7 = 1;
 16030  00A8  0020               	movlb	0	; select bank0
 16031  00A9  178C               	bsf	12,7	;volatile
 16032  00AA                     i1l6402:	
 16033                           ;Dimmer_B1.c: 105: ;;
 16034                           
 16035                           
 16036                           ;Dimmer_B1.c: 106: }
 16037                           ;Dimmer_B1.c: 109: if (lights == 2) {
 16038  00AA  0876               	movf	setDimmerLights_IntrControl@lights,w
 16039  00AB  3A02               	xorlw	2
 16040  00AC  1D03               	skipz
 16041  00AD  29BA               	goto	i1l6468
 16042                           
 16043                           ;Dimmer_B1.c: 110: RB4 = 1;
 16044  00AE  0020               	movlb	0	; select bank0
 16045  00AF  160D               	bsf	13,4	;volatile
 16046                           
 16047                           ;Dimmer_B1.c: 111: }
 16048                           ;Dimmer_B1.c: 118: }
 16049                           ;Dimmer_B1.c: 119: }
 16050                           ;Dimmer_B1.c: 120: } else {
 16051  00B0  29BA               	goto	i1l6468
 16052  00B1                     i1l6406:	
 16053                           
 16054                           ;Dimmer_B1.c: 121: if (DimmerLightsIntr->Flag == 1) {
 16055  00B1  087A               	movf	_DimmerLightsIntr,w
 16056  00B2  3E08               	addlw	8
 16057  00B3  0086               	movwf	6
 16058  00B4  3001               	movlw	1	; select bank2/3
 16059  00B5  0087               	movwf	7
 16060  00B6  1C01               	btfss	1,0
 16061  00B7  29BA               	goto	i1l6468
 16062                           
 16063                           ;Dimmer_B1.c: 122: DimmerLightsIntr->Flag = 0;
 16064  00B8  087A               	movf	_DimmerLightsIntr,w
 16065  00B9  3E08               	addlw	8
 16066  00BA  0086               	movwf	6
 16067  00BB  3001               	movlw	1	; select bank2/3
 16068  00BC  0087               	movwf	7
 16069  00BD  1001               	bcf	1,0
 16070                           
 16071                           ;Dimmer_B1.c: 123: if (DimmerLightsIntr->Signal == 1) {
 16072  00BE  087A               	movf	_DimmerLightsIntr,w
 16073  00BF  0086               	movwf	6
 16074  00C0  3001               	movlw	1	; select bank2/3
 16075  00C1  0087               	movwf	7
 16076  00C2  1C81               	btfss	1,1
 16077  00C3  29BA               	goto	i1l6468
 16078                           
 16079                           ;Dimmer_B1.c: 124: DimmerLightsIntr->DimmingTime++;
 16080  00C4  3001               	movlw	1
 16081  00C5  00F2               	movwf	??_setDimmerLights_IntrControl
 16082  00C6  0A7A               	incf	_DimmerLightsIntr,w
 16083  00C7  0086               	movwf	6
 16084  00C8  3001               	movlw	1	; select bank2/3
 16085  00C9  0087               	movwf	7
 16086  00CA  0872               	movf	??_setDimmerLights_IntrControl,w
 16087  00CB  0781               	addwf	1,f
 16088                           
 16089                           ;Dimmer_B1.c: 125: if (DimmerLightsIntr->DimmingTime >= DimmerLightsIntr->DimmingTimeVal
      +                          ue) {
 16090  00CC  0A7A               	incf	_DimmerLightsIntr,w
 16091  00CD  0086               	movwf	6
 16092  00CE  3001               	movlw	1	; select bank2/3
 16093  00CF  0087               	movwf	7
 16094  00D0  087A               	movf	_DimmerLightsIntr,w
 16095  00D1  3E02               	addlw	2
 16096  00D2  0084               	movwf	4
 16097  00D3  3001               	movlw	1	; select bank2/3
 16098  00D4  0085               	movwf	5
 16099  00D5  0800               	movf	0,w
 16100  00D6  0201               	subwf	1,w
 16101  00D7  1C03               	skipc
 16102  00D8  29BA               	goto	i1l6468
 16103                           
 16104                           ;Dimmer_B1.c: 126: DimmerLightsIntr->DimmingTime = 0;
 16105  00D9  0A7A               	incf	_DimmerLightsIntr,w
 16106  00DA  0086               	movwf	6
 16107  00DB  3001               	movlw	1	; select bank2/3
 16108  00DC  0087               	movwf	7
 16109  00DD  0181               	clrf	1
 16110                           
 16111                           ;Dimmer_B1.c: 127: if (DimmerLightsIntr->AdjFlag == 1) {
 16112  00DE  087A               	movf	_DimmerLightsIntr,w
 16113  00DF  0086               	movwf	6
 16114  00E0  3001               	movlw	1	; select bank2/3
 16115  00E1  0087               	movwf	7
 16116  00E2  1D81               	btfss	1,3
 16117  00E3  291A               	goto	i1l6432
 16118                           
 16119                           ;Dimmer_B1.c: 128: if (DimmerLightsIntr->AdjStatus == 0) {
 16120  00E4  087A               	movf	_DimmerLightsIntr,w
 16121  00E5  0086               	movwf	6
 16122  00E6  3001               	movlw	1	; select bank2/3
 16123  00E7  0087               	movwf	7
 16124  00E8  1A01               	btfsc	1,4
 16125  00E9  2901               	goto	i1l6426
 16126                           
 16127                           ;Dimmer_B1.c: 129: if (DimmerLightsIntr->DimmingValue > ((char)((100-70)*0.8))) {
 16128  00EA  087A               	movf	_DimmerLightsIntr,w
 16129  00EB  3E04               	addlw	4
 16130  00EC  0086               	movwf	6
 16131  00ED  3001               	movlw	1	; select bank2/3
 16132  00EE  0087               	movwf	7
 16133  00EF  3019               	movlw	25
 16134  00F0  0201               	subwf	1,w
 16135  00F1  1C03               	skipc
 16136  00F2  28FB               	goto	i1l6424
 16137                           
 16138                           ;Dimmer_B1.c: 130: DimmerLightsIntr->DimmingValue--;
 16139  00F3  087A               	movf	_DimmerLightsIntr,w
 16140  00F4  3E04               	addlw	4
 16141  00F5  0086               	movwf	6
 16142  00F6  3001               	movlw	1	; select bank2/3
 16143  00F7  0087               	movwf	7
 16144  00F8  3001               	movlw	1
 16145  00F9  0281               	subwf	1,f
 16146                           
 16147                           ;Dimmer_B1.c: 131: } else {
 16148  00FA  29BA               	goto	i1l6468
 16149  00FB                     i1l6424:	
 16150                           
 16151                           ;Dimmer_B1.c: 132: DimmerLightsIntr->AdjStatus = 1;
 16152  00FB  087A               	movf	_DimmerLightsIntr,w
 16153  00FC  0086               	movwf	6
 16154  00FD  3001               	movlw	1	; select bank2/3
 16155  00FE  0087               	movwf	7
 16156  00FF  1601               	bsf	1,4
 16157                           
 16158                           ;Dimmer_B1.c: 133: }
 16159                           ;Dimmer_B1.c: 134: } else {
 16160  0100  29BA               	goto	i1l6468
 16161  0101                     i1l6426:	
 16162                           
 16163                           ;Dimmer_B1.c: 135: if (DimmerLightsIntr->DimmingValue < ((char)((100-20)*0.8))) {
 16164  0101  087A               	movf	_DimmerLightsIntr,w
 16165  0102  3E04               	addlw	4
 16166  0103  0086               	movwf	6
 16167  0104  3001               	movlw	1	; select bank2/3
 16168  0105  0087               	movwf	7
 16169  0106  3040               	movlw	64
 16170  0107  0201               	subwf	1,w
 16171  0108  1803               	skipnc
 16172  0109  2914               	goto	i1l6430
 16173                           
 16174                           ;Dimmer_B1.c: 136: DimmerLightsIntr->DimmingValue++;
 16175  010A  3001               	movlw	1
 16176  010B  00F2               	movwf	??_setDimmerLights_IntrControl
 16177  010C  087A               	movf	_DimmerLightsIntr,w
 16178  010D  3E04               	addlw	4
 16179  010E  0086               	movwf	6
 16180  010F  3001               	movlw	1	; select bank2/3
 16181  0110  0087               	movwf	7
 16182  0111  0872               	movf	??_setDimmerLights_IntrControl,w
 16183  0112  0781               	addwf	1,f
 16184                           
 16185                           ;Dimmer_B1.c: 137: } else {
 16186  0113  29BA               	goto	i1l6468
 16187  0114                     i1l6430:	
 16188                           
 16189                           ;Dimmer_B1.c: 138: DimmerLightsIntr->AdjStatus = 0;
 16190  0114  087A               	movf	_DimmerLightsIntr,w
 16191  0115  0086               	movwf	6
 16192  0116  3001               	movlw	1	; select bank2/3
 16193  0117  0087               	movwf	7
 16194  0118  1201               	bcf	1,4
 16195                           
 16196                           ;Dimmer_B1.c: 139: }
 16197                           ;Dimmer_B1.c: 140: }
 16198                           ;Dimmer_B1.c: 141: } else if (DimmerLightsIntr->AdjRF == 1) {
 16199  0119  29BA               	goto	i1l6468
 16200  011A                     i1l6432:	
 16201  011A  087A               	movf	_DimmerLightsIntr,w
 16202  011B  0086               	movwf	6
 16203  011C  3001               	movlw	1	; select bank2/3
 16204  011D  0087               	movwf	7
 16205  011E  1D01               	btfss	1,2
 16206  011F  2961               	goto	i1l6446
 16207                           
 16208                           ;Dimmer_B1.c: 142: if (DimmerLightsIntr->DimmingValue > DimmerLightsIntr->MaxmumValue) {
 16209  0120  087A               	movf	_DimmerLightsIntr,w
 16210  0121  3E05               	addlw	5
 16211  0122  0086               	movwf	6
 16212  0123  3001               	movlw	1	; select bank2/3
 16213  0124  0087               	movwf	7
 16214  0125  087A               	movf	_DimmerLightsIntr,w
 16215  0126  3E04               	addlw	4
 16216  0127  0084               	movwf	4
 16217  0128  3001               	movlw	1	; select bank2/3
 16218  0129  0085               	movwf	5
 16219  012A  0800               	movf	0,w
 16220  012B  0201               	subwf	1,w
 16221  012C  1803               	skipnc
 16222  012D  2936               	goto	i1l6438
 16223                           
 16224                           ;Dimmer_B1.c: 143: DimmerLightsIntr->DimmingValue--;
 16225  012E  087A               	movf	_DimmerLightsIntr,w
 16226  012F  3E04               	addlw	4
 16227  0130  0086               	movwf	6
 16228  0131  3001               	movlw	1	; select bank2/3
 16229  0132  0087               	movwf	7
 16230  0133  3001               	movlw	1
 16231  0134  0281               	subwf	1,f
 16232                           
 16233                           ;Dimmer_B1.c: 144: } else if (DimmerLightsIntr->DimmingValue < DimmerLightsIntr->MaxmumV
      +                          alue) {
 16234  0135  294D               	goto	i1l6442
 16235  0136                     i1l6438:	
 16236  0136  087A               	movf	_DimmerLightsIntr,w
 16237  0137  3E04               	addlw	4
 16238  0138  0086               	movwf	6
 16239  0139  3001               	movlw	1	; select bank2/3
 16240  013A  0087               	movwf	7
 16241  013B  087A               	movf	_DimmerLightsIntr,w
 16242  013C  3E05               	addlw	5
 16243  013D  0084               	movwf	4
 16244  013E  3001               	movlw	1	; select bank2/3
 16245  013F  0085               	movwf	5
 16246  0140  0800               	movf	0,w
 16247  0141  0201               	subwf	1,w
 16248  0142  1803               	skipnc
 16249  0143  294D               	goto	i1l6442
 16250                           
 16251                           ;Dimmer_B1.c: 145: DimmerLightsIntr->DimmingValue++;
 16252  0144  3001               	movlw	1
 16253  0145  00F2               	movwf	??_setDimmerLights_IntrControl
 16254  0146  087A               	movf	_DimmerLightsIntr,w
 16255  0147  3E04               	addlw	4
 16256  0148  0086               	movwf	6
 16257  0149  3001               	movlw	1	; select bank2/3
 16258  014A  0087               	movwf	7
 16259  014B  0872               	movf	??_setDimmerLights_IntrControl,w
 16260  014C  0781               	addwf	1,f
 16261  014D                     i1l6442:	
 16262                           
 16263                           ;Dimmer_B1.c: 146: }
 16264                           ;Dimmer_B1.c: 147: if (DimmerLightsIntr->DimmingValue == DimmerLightsIntr->MaxmumValue) 
      +                          {
 16265  014D  087A               	movf	_DimmerLightsIntr,w
 16266  014E  3E05               	addlw	5
 16267  014F  0086               	movwf	6
 16268  0150  3001               	movlw	1	; select bank2/3
 16269  0151  0087               	movwf	7
 16270  0152  087A               	movf	_DimmerLightsIntr,w
 16271  0153  3E04               	addlw	4
 16272  0154  0084               	movwf	4
 16273  0155  3001               	movlw	1	; select bank2/3
 16274  0156  0085               	movwf	5
 16275  0157  0800               	movf	0,w
 16276  0158  0601               	xorwf	1,w
 16277  0159  1D03               	skipz
 16278  015A  29BA               	goto	i1l6468
 16279                           
 16280                           ;Dimmer_B1.c: 148: DimmerLightsIntr->AdjRF = 0;
 16281  015B  087A               	movf	_DimmerLightsIntr,w
 16282  015C  0086               	movwf	6
 16283  015D  3001               	movlw	1	; select bank2/3
 16284  015E  0087               	movwf	7
 16285  015F  1101               	bcf	1,2
 16286  0160  297C               	goto	i1l6452
 16287  0161                     i1l6446:	
 16288                           ;Dimmer_B1.c: 150: }
 16289                           ;Dimmer_B1.c: 151: } else {
 16290                           
 16291                           ;Dimmer_B1.c: 149: DimmerLightsIntr->Signal = 0;
 16292                           
 16293                           
 16294                           ;Dimmer_B1.c: 152: if (DimmerLightsIntr->Status == 1) {
 16295  0161  087A               	movf	_DimmerLightsIntr,w
 16296  0162  0086               	movwf	6
 16297  0163  3001               	movlw	1	; select bank2/3
 16298  0164  0087               	movwf	7
 16299  0165  1E81               	btfss	1,5
 16300  0166  2982               	goto	i1l6454
 16301                           
 16302                           ;Dimmer_B1.c: 153: DimmerLightsIntr->DimmingValue--;
 16303  0167  087A               	movf	_DimmerLightsIntr,w
 16304  0168  3E04               	addlw	4
 16305  0169  0086               	movwf	6
 16306  016A  3001               	movlw	1	; select bank2/3
 16307  016B  0087               	movwf	7
 16308  016C  3001               	movlw	1
 16309  016D  0281               	subwf	1,f
 16310                           
 16311                           ;Dimmer_B1.c: 154: if (DimmerLightsIntr->DimmingValue <= DimmerLightsIntr->MaxmumValue) 
      +                          {
 16312  016E  087A               	movf	_DimmerLightsIntr,w
 16313  016F  3E05               	addlw	5
 16314  0170  0086               	movwf	6
 16315  0171  3001               	movlw	1	; select bank2/3
 16316  0172  0087               	movwf	7
 16317  0173  087A               	movf	_DimmerLightsIntr,w
 16318  0174  3E04               	addlw	4
 16319  0175  0084               	movwf	4
 16320  0176  3001               	movlw	1	; select bank2/3
 16321  0177  0085               	movwf	5
 16322  0178  0800               	movf	0,w
 16323  0179  0201               	subwf	1,w
 16324  017A  1C03               	skipc
 16325  017B  29BA               	goto	i1l6468
 16326  017C                     i1l6452:	
 16327                           
 16328                           ;Dimmer_B1.c: 155: DimmerLightsIntr->Signal = 0;
 16329  017C  087A               	movf	_DimmerLightsIntr,w
 16330  017D  0086               	movwf	6
 16331  017E  3001               	movlw	1	; select bank2/3
 16332  017F  0087               	movwf	7
 16333  0180  1081               	bcf	1,1
 16334                           
 16335                           ;Dimmer_B1.c: 156: }
 16336                           ;Dimmer_B1.c: 157: } else {
 16337  0181  29BA               	goto	i1l6468
 16338  0182                     i1l6454:	
 16339                           
 16340                           ;Dimmer_B1.c: 158: DimmerLightsIntr->DimmingValue++;
 16341  0182  3001               	movlw	1
 16342  0183  00F2               	movwf	??_setDimmerLights_IntrControl
 16343  0184  087A               	movf	_DimmerLightsIntr,w
 16344  0185  3E04               	addlw	4
 16345  0186  0086               	movwf	6
 16346  0187  3001               	movlw	1	; select bank2/3
 16347  0188  0087               	movwf	7
 16348  0189  0872               	movf	??_setDimmerLights_IntrControl,w
 16349  018A  0781               	addwf	1,f
 16350                           
 16351                           ;Dimmer_B1.c: 159: if (DimmerLightsIntr->DimmingValue >= DimmerLightsIntr->MinimumValue)
      +                           {
 16352  018B  087A               	movf	_DimmerLightsIntr,w
 16353  018C  3E04               	addlw	4
 16354  018D  0086               	movwf	6
 16355  018E  3001               	movlw	1	; select bank2/3
 16356  018F  0087               	movwf	7
 16357  0190  087A               	movf	_DimmerLightsIntr,w
 16358  0191  3E06               	addlw	6
 16359  0192  0084               	movwf	4
 16360  0193  3001               	movlw	1	; select bank2/3
 16361  0194  0085               	movwf	5
 16362  0195  0800               	movf	0,w
 16363  0196  0201               	subwf	1,w
 16364  0197  1C03               	skipc
 16365  0198  29BA               	goto	i1l6468
 16366                           
 16367                           ;Dimmer_B1.c: 160: DimmerLightsIntr->Signal = 0;
 16368  0199  087A               	movf	_DimmerLightsIntr,w
 16369  019A  0086               	movwf	6
 16370  019B  3001               	movlw	1	; select bank2/3
 16371  019C  0087               	movwf	7
 16372  019D  1081               	bcf	1,1
 16373                           
 16374                           ;Dimmer_B1.c: 161: DimmerLightsIntr->StatusFlag = 0;
 16375  019E  087A               	movf	_DimmerLightsIntr,w
 16376  019F  0086               	movwf	6
 16377  01A0  3001               	movlw	1	; select bank2/3
 16378  01A1  0087               	movwf	7
 16379  01A2  1301               	bcf	1,6
 16380                           
 16381                           ;Dimmer_B1.c: 162: DimmerLightsIntr->Clear = 1;
 16382  01A3  087A               	movf	_DimmerLightsIntr,w
 16383  01A4  3E09               	addlw	9
 16384  01A5  0086               	movwf	6
 16385  01A6  3001               	movlw	1	; select bank2/3
 16386  01A7  0087               	movwf	7
 16387  01A8  1501               	bsf	1,2
 16388                           
 16389                           ;Dimmer_B1.c: 163: Dimmer->Detect = 1;
 16390  01A9  0021               	movlb	1	; select bank1
 16391  01AA  0839               	movf	_Dimmer^(0+128),w
 16392  01AB  0086               	movwf	6
 16393  01AC  0187               	clrf	7
 16394  01AD  1401               	bsf	1,0
 16395                           
 16396                           ;Dimmer_B1.c: 165: if (lights == 1) {
 16397  01AE  0876               	movf	setDimmerLights_IntrControl@lights,w
 16398  01AF  3A01               	xorlw	1
 16399  01B0  1D03               	skipz
 16400  01B1  29B4               	goto	i1l6464
 16401                           
 16402                           ;Dimmer_B1.c: 166: RA3 = 0;
 16403  01B2  0020               	movlb	0	; select bank0
 16404  01B3  118C               	bcf	12,3	;volatile
 16405  01B4                     i1l6464:	
 16406                           
 16407                           ;Dimmer_B1.c: 168: }
 16408                           ;Dimmer_B1.c: 171: if (lights == 2) {
 16409  01B4  0876               	movf	setDimmerLights_IntrControl@lights,w
 16410  01B5  3A02               	xorlw	2
 16411  01B6  1D03               	skipz
 16412  01B7  29BA               	goto	i1l6468
 16413                           
 16414                           ;Dimmer_B1.c: 172: RC7 = 0;
 16415  01B8  0020               	movlb	0	; select bank0
 16416  01B9  138E               	bcf	14,7	;volatile
 16417  01BA                     i1l6468:	
 16418                           ;Dimmer_B1.c: 173: }
 16419                           ;Dimmer_B1.c: 180: ;;
 16420                           
 16421                           
 16422                           ;Dimmer_B1.c: 181: }
 16423                           ;Dimmer_B1.c: 182: }
 16424                           ;Dimmer_B1.c: 183: }
 16425                           ;Dimmer_B1.c: 184: }
 16426                           ;Dimmer_B1.c: 185: }
 16427                           ;Dimmer_B1.c: 186: }
 16428                           ;Dimmer_B1.c: 187: }
 16429                           ;Dimmer_B1.c: 188: if (DimmerLightsIntr->Triac == 1) {
 16430  01BA  087A               	movf	_DimmerLightsIntr,w
 16431  01BB  3E08               	addlw	8
 16432  01BC  0086               	movwf	6
 16433  01BD  3001               	movlw	1	; select bank2/3
 16434  01BE  0087               	movwf	7
 16435  01BF  1E81               	btfss	1,5
 16436  01C0  29EB               	goto	i1l6486
 16437                           
 16438                           ;Dimmer_B1.c: 189: DimmerLightsIntr->TriacTime++;
 16439  01C1  3001               	movlw	1
 16440  01C2  00F2               	movwf	??_setDimmerLights_IntrControl
 16441  01C3  087A               	movf	_DimmerLightsIntr,w
 16442  01C4  3E07               	addlw	7
 16443  01C5  0086               	movwf	6
 16444  01C6  3001               	movlw	1	; select bank2/3
 16445  01C7  0087               	movwf	7
 16446  01C8  0872               	movf	??_setDimmerLights_IntrControl,w
 16447  01C9  0781               	addwf	1,f
 16448                           
 16449                           ;Dimmer_B1.c: 190: if (DimmerLightsIntr->TriacTime >= 5) {
 16450  01CA  087A               	movf	_DimmerLightsIntr,w
 16451  01CB  3E07               	addlw	7
 16452  01CC  0086               	movwf	6
 16453  01CD  3001               	movlw	1	; select bank2/3
 16454  01CE  0087               	movwf	7
 16455  01CF  3005               	movlw	5
 16456  01D0  0201               	subwf	1,w
 16457  01D1  1C03               	skipc
 16458  01D2  29EB               	goto	i1l6486
 16459                           
 16460                           ;Dimmer_B1.c: 191: DimmerLightsIntr->TriacTime = 0;
 16461  01D3  087A               	movf	_DimmerLightsIntr,w
 16462  01D4  3E07               	addlw	7
 16463  01D5  0086               	movwf	6
 16464  01D6  3001               	movlw	1	; select bank2/3
 16465  01D7  0087               	movwf	7
 16466  01D8  0181               	clrf	1
 16467                           
 16468                           ;Dimmer_B1.c: 192: DimmerLightsIntr->Triac = 0;
 16469  01D9  087A               	movf	_DimmerLightsIntr,w
 16470  01DA  3E08               	addlw	8
 16471  01DB  0086               	movwf	6
 16472  01DC  3001               	movlw	1	; select bank2/3
 16473  01DD  0087               	movwf	7
 16474  01DE  1281               	bcf	1,5
 16475                           
 16476                           ;Dimmer_B1.c: 195: if (lights == 1) {
 16477  01DF  0876               	movf	setDimmerLights_IntrControl@lights,w
 16478  01E0  3A01               	xorlw	1
 16479  01E1  1D03               	skipz
 16480  01E2  29E5               	goto	i1l6482
 16481                           
 16482                           ;Dimmer_B1.c: 196: RA7 = 0;
 16483  01E3  0020               	movlb	0	; select bank0
 16484  01E4  138C               	bcf	12,7	;volatile
 16485  01E5                     i1l6482:	
 16486                           ;Dimmer_B1.c: 197: ;;
 16487                           
 16488                           
 16489                           ;Dimmer_B1.c: 198: }
 16490                           ;Dimmer_B1.c: 201: if (lights == 2) {
 16491  01E5  0876               	movf	setDimmerLights_IntrControl@lights,w
 16492  01E6  3A02               	xorlw	2
 16493  01E7  1D03               	skipz
 16494  01E8  29EB               	goto	i1l6486
 16495                           
 16496                           ;Dimmer_B1.c: 202: RB4 = 0;
 16497  01E9  0020               	movlb	0	; select bank0
 16498  01EA  120D               	bcf	13,4	;volatile
 16499  01EB                     i1l6486:	
 16500                           
 16501                           ;Dimmer_B1.c: 203: }
 16502                           ;Dimmer_B1.c: 210: }
 16503                           ;Dimmer_B1.c: 211: }
 16504                           ;Dimmer_B1.c: 212: if (DimmerLightsIntr->TriacFlag == 1) {
 16505  01EB  087A               	movf	_DimmerLightsIntr,w
 16506  01EC  3E09               	addlw	9
 16507  01ED  0086               	movwf	6
 16508  01EE  3001               	movlw	1	; select bank2/3
 16509  01EF  0087               	movwf	7
 16510  01F0  1E81               	btfss	1,5
 16511  01F1  0008               	return
 16512                           
 16513                           ;Dimmer_B1.c: 213: DimmerLightsIntr->TriacCount++;
 16514  01F2  3001               	movlw	1
 16515  01F3  00F2               	movwf	??_setDimmerLights_IntrControl
 16516  01F4  087A               	movf	_DimmerLightsIntr,w
 16517  01F5  3E0A               	addlw	10
 16518  01F6  0086               	movwf	6
 16519  01F7  3001               	movlw	1	; select bank2/3
 16520  01F8  0087               	movwf	7
 16521  01F9  0872               	movf	??_setDimmerLights_IntrControl,w
 16522  01FA  0781               	addwf	1,f
 16523                           
 16524                           ;Dimmer_B1.c: 214: if (DimmerLightsIntr->TriacCount == 70) {
 16525  01FB  087A               	movf	_DimmerLightsIntr,w
 16526  01FC  3E0A               	addlw	10
 16527  01FD  0086               	movwf	6
 16528  01FE  3001               	movlw	1	; select bank2/3
 16529  01FF  0087               	movwf	7
 16530  0200  0801               	movf	1,w
 16531  0201  3A46               	xorlw	70
 16532  0202  1D03               	skipz
 16533  0203  0008               	return
 16534                           
 16535                           ;Dimmer_B1.c: 215: DimmerLightsIntr->TriacCount = 0;
 16536  0204  087A               	movf	_DimmerLightsIntr,w
 16537  0205  3E0A               	addlw	10
 16538  0206  0086               	movwf	6
 16539  0207  3001               	movlw	1	; select bank2/3
 16540  0208  0087               	movwf	7
 16541  0209  0181               	clrf	1
 16542                           
 16543                           ;Dimmer_B1.c: 216: DimmerLightsIntr->TriacFlag = 0;
 16544  020A  087A               	movf	_DimmerLightsIntr,w
 16545  020B  3E09               	addlw	9
 16546  020C  0086               	movwf	6
 16547  020D  3001               	movlw	1	; select bank2/3
 16548  020E  0087               	movwf	7
 16549  020F  1281               	bcf	1,5
 16550                           
 16551                           ;Dimmer_B1.c: 217: if (lights == 1) {
 16552  0210  0876               	movf	setDimmerLights_IntrControl@lights,w
 16553  0211  3A01               	xorlw	1
 16554  0212  1D03               	skipz
 16555  0213  0008               	return
 16556                           
 16557                           ;Dimmer_B1.c: 218: RB5 = 0;
 16558  0214  0020               	movlb	0	; select bank0
 16559  0215  128D               	bcf	13,5	;volatile
 16560  0216  0008               	return
 16561  0217                     __end_of_setDimmerLights_IntrControl:	
 16562                           
 16563                           	psect	text110
 16564  0800                     __ptext110:	
 16565 ;; *************** function _DimmerIntrPointSelect *****************
 16566 ;; Defined at:
 16567 ;;		line 68 in file "../src/Dimmer_B1.c"
 16568 ;; Parameters:    Size  Location     Type
 16569 ;;  lights          1    wreg     unsigned char 
 16570 ;; Auto vars:     Size  Location     Type
 16571 ;;  lights          1    1[COMMON] unsigned char 
 16572 ;; Return value:  Size  Location     Type
 16573 ;;		None               void
 16574 ;; Registers used:
 16575 ;;		wreg
 16576 ;; Tracked objects:
 16577 ;;		On entry : 0/0
 16578 ;;		On exit  : 0/0
 16579 ;;		Unchanged: 0/0
 16580 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16581 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16582 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16583 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16584 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16585 ;;Total ram usage:        2 bytes
 16586 ;; Hardware stack levels used:    1
 16587 ;; This function calls:
 16588 ;;		Nothing
 16589 ;; This function is called by:
 16590 ;;		_setDimmerLights_IntrControl
 16591 ;; This function uses a non-reentrant model
 16592 ;;
 16593                           
 16594                           
 16595                           ;psect for function _DimmerIntrPointSelect
 16596  0800                     _DimmerIntrPointSelect:	
 16597                           
 16598                           ;incstack = 0
 16599                           ; Regs used in _DimmerIntrPointSelect: [wreg]
 16600                           ;DimmerIntrPointSelect@lights stored from wreg
 16601  0800  00F1               	movwf	DimmerIntrPointSelect@lights
 16602                           
 16603                           ;Dimmer_B1.c: 70: if (lights == 1) {
 16604  0801  0871               	movf	DimmerIntrPointSelect@lights,w
 16605  0802  3A01               	xorlw	1
 16606  0803  1D03               	skipz
 16607  0804  2809               	goto	i1l791
 16608                           
 16609                           ;Dimmer_B1.c: 71: DimmerLightsIntr = &DimmerLights1;
 16610  0805  3020               	movlw	_DimmerLights1& (0+255)
 16611  0806  00F0               	movwf	??_DimmerIntrPointSelect
 16612  0807  0870               	movf	??_DimmerIntrPointSelect,w
 16613  0808  00FA               	movwf	_DimmerLightsIntr
 16614  0809                     i1l791:	
 16615                           
 16616                           ;Dimmer_B1.c: 72: }
 16617                           ;Dimmer_B1.c: 75: if (lights == 2) {
 16618  0809  0871               	movf	DimmerIntrPointSelect@lights,w
 16619  080A  3A02               	xorlw	2
 16620  080B  1D03               	skipz
 16621  080C  0008               	return
 16622                           
 16623                           ;Dimmer_B1.c: 76: DimmerLightsIntr = &DimmerLights2;
 16624  080D  302F               	movlw	_DimmerLights2& (0+255)
 16625  080E  00F0               	movwf	??_DimmerIntrPointSelect
 16626  080F  0870               	movf	??_DimmerIntrPointSelect,w
 16627  0810  00FA               	movwf	_DimmerLightsIntr
 16628  0811  0008               	return
 16629  0812                     __end_of_DimmerIntrPointSelect:	
 16630                           
 16631                           	psect	text111
 16632  1F0D                     __ptext111:	
 16633 ;; *************** function _Buz_Counter *****************
 16634 ;; Defined at:
 16635 ;;		line 23 in file "../src/Buzzer_B1.c"
 16636 ;; Parameters:    Size  Location     Type
 16637 ;;		None
 16638 ;; Auto vars:     Size  Location     Type
 16639 ;;		None
 16640 ;; Return value:  Size  Location     Type
 16641 ;;		None               void
 16642 ;; Registers used:
 16643 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 16644 ;; Tracked objects:
 16645 ;;		On entry : 0/0
 16646 ;;		On exit  : 0/0
 16647 ;;		Unchanged: 0/0
 16648 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16649 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16650 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16651 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16652 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16653 ;;Total ram usage:        0 bytes
 16654 ;; Hardware stack levels used:    1
 16655 ;; This function calls:
 16656 ;;		Nothing
 16657 ;; This function is called by:
 16658 ;;		_TMR0_ISR
 16659 ;; This function uses a non-reentrant model
 16660 ;;
 16661                           
 16662                           
 16663                           ;psect for function _Buz_Counter
 16664  1F0D                     _Buz_Counter:	
 16665                           
 16666                           ;Buzzer_B1.c: 24: if (Buz->GO == 1) {
 16667                           
 16668                           ;incstack = 0
 16669                           ; Regs used in _Buz_Counter: [wreg+fsr1l+fsr1h+status,2+status,0]
 16670  1F0D  0878               	movf	_Buz,w
 16671  1F0E  0086               	movwf	6
 16672  1F0F  3001               	movlw	1	; select bank2/3
 16673  1F10  0087               	movwf	7
 16674  1F11  1C81               	btfss	1,1
 16675  1F12  0008               	return
 16676                           
 16677                           ;Buzzer_B1.c: 25: Buz->Counter++;
 16678  1F13  0A78               	incf	_Buz,w
 16679  1F14  0086               	movwf	6
 16680  1F15  3001               	movlw	1	; select bank2/3
 16681  1F16  0087               	movwf	7
 16682  1F17  3001               	movlw	1
 16683  1F18  0781               	addwf	1,f
 16684  1F19  3141               	addfsr 1,1
 16685  1F1A  1803               	skipnc
 16686  1F1B  0A81               	incf	1,f
 16687  1F1C  0008               	return
 16688  1F1D                     __end_of_Buz_Counter:	
 16689                           
 16690                           	psect	text112
 16691  1F7E                     __ptext112:	
 16692 ;; *************** function _IOC_ISR *****************
 16693 ;; Defined at:
 16694 ;;		line 298 in file "../src/MCU_B1.c"
 16695 ;; Parameters:    Size  Location     Type
 16696 ;;		None
 16697 ;; Auto vars:     Size  Location     Type
 16698 ;;		None
 16699 ;; Return value:  Size  Location     Type
 16700 ;;		None               void
 16701 ;; Registers used:
 16702 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16703 ;; Tracked objects:
 16704 ;;		On entry : 0/0
 16705 ;;		On exit  : 0/0
 16706 ;;		Unchanged: 0/0
 16707 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16708 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16709 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16710 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16711 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16712 ;;Total ram usage:        0 bytes
 16713 ;; Hardware stack levels used:    1
 16714 ;; Hardware stack levels required when called:    3
 16715 ;; This function calls:
 16716 ;;		_setDimmerReClock
 16717 ;; This function is called by:
 16718 ;;		_ISR
 16719 ;; This function uses a non-reentrant model
 16720 ;;
 16721                           
 16722                           
 16723                           ;psect for function _IOC_ISR
 16724  1F7E                     _IOC_ISR:	
 16725                           
 16726                           ;MCU_B1.c: 299: if (IOCIE == 1 && IOCBF2 == 1) {
 16727                           
 16728                           ;incstack = 0
 16729                           ; Regs used in _IOC_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16730  1F7E  1D8B               	btfss	11,3	;volatile
 16731  1F7F  0008               	return
 16732  1F80  0027               	movlb	7	; select bank7
 16733  1F81  1D16               	btfss	22,2	;volatile
 16734  1F82  0008               	return
 16735                           
 16736                           ;MCU_B1.c: 300: IOCBF2 = 0;
 16737  1F83  1116               	bcf	22,2	;volatile
 16738                           
 16739                           ;MCU_B1.c: 301: IOCIF = 0;
 16740  1F84  100B               	bcf	11,0	;volatile
 16741                           
 16742                           ;MCU_B1.c: 302: if (myMain->PowerON == 1) {
 16743  1F85  0021               	movlb	1	; select bank1
 16744  1F86  086B               	movf	_myMain^(0+128),w
 16745  1F87  0086               	movwf	6
 16746  1F88  3001               	movlw	1	; select bank2/3
 16747  1F89  0087               	movwf	7
 16748  1F8A  1C01               	btfss	1,0
 16749  1F8B  0008               	return
 16750                           
 16751                           ;MCU_B1.c: 304: setDimmerReClock();
 16752  1F8C  319E  2646         	fcall	_setDimmerReClock
 16753  1F8E  0008               	return
 16754  1F8F                     __end_of_IOC_ISR:	
 16755                           
 16756                           	psect	text113
 16757  1E46                     __ptext113:	
 16758 ;; *************** function _setDimmerReClock *****************
 16759 ;; Defined at:
 16760 ;;		line 175 in file "../src/MCU_B1.c"
 16761 ;; Parameters:    Size  Location     Type
 16762 ;;		None
 16763 ;; Auto vars:     Size  Location     Type
 16764 ;;		None
 16765 ;; Return value:  Size  Location     Type
 16766 ;;		None               void
 16767 ;; Registers used:
 16768 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16769 ;; Tracked objects:
 16770 ;;		On entry : 0/0
 16771 ;;		On exit  : 0/0
 16772 ;;		Unchanged: 0/0
 16773 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16774 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16775 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16776 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16777 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16778 ;;Total ram usage:        0 bytes
 16779 ;; Hardware stack levels used:    1
 16780 ;; Hardware stack levels required when called:    2
 16781 ;; This function calls:
 16782 ;;		_setDimmerLights_IntrIOC_GO
 16783 ;; This function is called by:
 16784 ;;		_IOC_ISR
 16785 ;; This function uses a non-reentrant model
 16786 ;;
 16787                           
 16788                           
 16789                           ;psect for function _setDimmerReClock
 16790  1E46                     _setDimmerReClock:	
 16791                           
 16792                           ;MCU_B1.c: 180: setDimmerLights_IntrIOC_GO(1);
 16793                           
 16794                           ;incstack = 0
 16795                           ; Regs used in _setDimmerReClock: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16796  1E46  3001               	movlw	1
 16797  1E47  3192  22AD  319E   	fcall	_setDimmerLights_IntrIOC_GO
 16798                           
 16799                           ;MCU_B1.c: 184: setDimmerLights_IntrIOC_GO(2);
 16800  1E4A  3002               	movlw	2
 16801  1E4B  3192  22AD         	fcall	_setDimmerLights_IntrIOC_GO
 16802                           
 16803                           ;MCU_B1.c: 191: TMR0 = 255;
 16804  1E4D  30FF               	movlw	255
 16805  1E4E  0020               	movlb	0	; select bank0
 16806  1E4F  0095               	movwf	21	;volatile
 16807  1E50  0008               	return
 16808  1E51                     __end_of_setDimmerReClock:	
 16809                           
 16810                           	psect	text114
 16811  12AD                     __ptext114:	
 16812 ;; *************** function _setDimmerLights_IntrIOC_GO *****************
 16813 ;; Defined at:
 16814 ;;		line 28 in file "../src/Dimmer_B1.c"
 16815 ;; Parameters:    Size  Location     Type
 16816 ;;  lights          1    wreg     unsigned char 
 16817 ;; Auto vars:     Size  Location     Type
 16818 ;;  lights          1    2[COMMON] unsigned char 
 16819 ;; Return value:  Size  Location     Type
 16820 ;;		None               void
 16821 ;; Registers used:
 16822 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16823 ;; Tracked objects:
 16824 ;;		On entry : 0/0
 16825 ;;		On exit  : 0/0
 16826 ;;		Unchanged: 0/0
 16827 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16828 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16829 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16830 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16831 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16832 ;;Total ram usage:        1 bytes
 16833 ;; Hardware stack levels used:    1
 16834 ;; Hardware stack levels required when called:    1
 16835 ;; This function calls:
 16836 ;;		_DimmerIntrIOCPointSelect
 16837 ;; This function is called by:
 16838 ;;		_setDimmerReClock
 16839 ;; This function uses a non-reentrant model
 16840 ;;
 16841                           
 16842                           
 16843                           ;psect for function _setDimmerLights_IntrIOC_GO
 16844  12AD                     _setDimmerLights_IntrIOC_GO:	
 16845                           
 16846                           ;incstack = 0
 16847                           ; Regs used in _setDimmerLights_IntrIOC_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 16848                           ;setDimmerLights_IntrIOC_GO@lights stored from wreg
 16849  12AD  00F2               	movwf	setDimmerLights_IntrIOC_GO@lights
 16850                           
 16851                           ;Dimmer_B1.c: 30: DimmerIntrIOCPointSelect(lights);
 16852  12AE  0872               	movf	setDimmerLights_IntrIOC_GO@lights,w
 16853  12AF  319F  27C4  3192   	fcall	_DimmerIntrIOCPointSelect
 16854                           
 16855                           ;Dimmer_B1.c: 32: if (DimmerLightsIntrIOC->GO == 0 && DimmerLightsIntrIOC->TriacFlag == 
      +                          0) {
 16856  12B2  0021               	movlb	1	; select bank1
 16857  12B3  083C               	movf	_DimmerLightsIntrIOC^(0+128),w
 16858  12B4  0086               	movwf	6
 16859  12B5  3001               	movlw	1	; select bank2/3
 16860  12B6  0087               	movwf	7
 16861  12B7  1801               	btfsc	1,0
 16862  12B8  0008               	return
 16863  12B9  083C               	movf	_DimmerLightsIntrIOC^(0+128),w
 16864  12BA  3E09               	addlw	9
 16865  12BB  0086               	movwf	6
 16866  12BC  3001               	movlw	1	; select bank2/3
 16867  12BD  0087               	movwf	7
 16868  12BE  1A81               	btfsc	1,5
 16869  12BF  0008               	return
 16870                           
 16871                           ;Dimmer_B1.c: 33: DimmerLightsIntrIOC->GO = 1;
 16872  12C0  083C               	movf	_DimmerLightsIntrIOC^(0+128),w
 16873  12C1  0086               	movwf	6
 16874  12C2  3001               	movlw	1	; select bank2/3
 16875  12C3  0087               	movwf	7
 16876  12C4  1401               	bsf	1,0
 16877                           
 16878                           ;Dimmer_B1.c: 34: DimmerLightsIntrIOC->TriacFlag = 1;
 16879  12C5  083C               	movf	_DimmerLightsIntrIOC^(0+128),w
 16880  12C6  3E09               	addlw	9
 16881  12C7  0086               	movwf	6
 16882  12C8  3001               	movlw	1	; select bank2/3
 16883  12C9  0087               	movwf	7
 16884  12CA  1681               	bsf	1,5
 16885                           
 16886                           ;Dimmer_B1.c: 35: if (lights == 1) {
 16887  12CB  0872               	movf	setDimmerLights_IntrIOC_GO@lights,w
 16888  12CC  3A01               	xorlw	1
 16889  12CD  1D03               	skipz
 16890  12CE  0008               	return
 16891                           
 16892                           ;Dimmer_B1.c: 36: RB5 = 1;
 16893  12CF  0020               	movlb	0	; select bank0
 16894  12D0  168D               	bsf	13,5	;volatile
 16895  12D1  0008               	return
 16896  12D2                     __end_of_setDimmerLights_IntrIOC_GO:	
 16897                           
 16898                           	psect	text115
 16899  1FC4                     __ptext115:	
 16900 ;; *************** function _DimmerIntrIOCPointSelect *****************
 16901 ;; Defined at:
 16902 ;;		line 8 in file "../src/Dimmer_B1.c"
 16903 ;; Parameters:    Size  Location     Type
 16904 ;;  lights          1    wreg     unsigned char 
 16905 ;; Auto vars:     Size  Location     Type
 16906 ;;  lights          1    1[COMMON] unsigned char 
 16907 ;; Return value:  Size  Location     Type
 16908 ;;		None               void
 16909 ;; Registers used:
 16910 ;;		wreg
 16911 ;; Tracked objects:
 16912 ;;		On entry : 0/0
 16913 ;;		On exit  : 0/0
 16914 ;;		Unchanged: 0/0
 16915 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16916 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16917 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16918 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16919 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16920 ;;Total ram usage:        2 bytes
 16921 ;; Hardware stack levels used:    1
 16922 ;; This function calls:
 16923 ;;		Nothing
 16924 ;; This function is called by:
 16925 ;;		_setDimmerLights_IntrIOC_GO
 16926 ;; This function uses a non-reentrant model
 16927 ;;
 16928                           
 16929                           
 16930                           ;psect for function _DimmerIntrIOCPointSelect
 16931  1FC4                     _DimmerIntrIOCPointSelect:	
 16932                           
 16933                           ;incstack = 0
 16934                           ; Regs used in _DimmerIntrIOCPointSelect: [wreg]
 16935                           ;DimmerIntrIOCPointSelect@lights stored from wreg
 16936  1FC4  00F1               	movwf	DimmerIntrIOCPointSelect@lights
 16937                           
 16938                           ;Dimmer_B1.c: 10: if (lights == 1) {
 16939  1FC5  0871               	movf	DimmerIntrIOCPointSelect@lights,w
 16940  1FC6  3A01               	xorlw	1
 16941  1FC7  1D03               	skipz
 16942  1FC8  2FCE               	goto	i1l781
 16943                           
 16944                           ;Dimmer_B1.c: 11: DimmerLightsIntrIOC = &DimmerLights1;
 16945  1FC9  3020               	movlw	_DimmerLights1& (0+255)
 16946  1FCA  00F0               	movwf	??_DimmerIntrIOCPointSelect
 16947  1FCB  0870               	movf	??_DimmerIntrIOCPointSelect,w
 16948  1FCC  0021               	movlb	1	; select bank1
 16949  1FCD  00BC               	movwf	_DimmerLightsIntrIOC^(0+128)
 16950  1FCE                     i1l781:	
 16951                           
 16952                           ;Dimmer_B1.c: 12: }
 16953                           ;Dimmer_B1.c: 15: if (lights == 2) {
 16954  1FCE  0871               	movf	DimmerIntrIOCPointSelect@lights,w
 16955  1FCF  3A02               	xorlw	2
 16956  1FD0  1D03               	skipz
 16957  1FD1  0008               	return
 16958                           
 16959                           ;Dimmer_B1.c: 16: DimmerLightsIntrIOC = &DimmerLights2;
 16960  1FD2  302F               	movlw	_DimmerLights2& (0+255)
 16961  1FD3  00F0               	movwf	??_DimmerIntrIOCPointSelect
 16962  1FD4  0870               	movf	??_DimmerIntrIOCPointSelect,w
 16963  1FD5  0021               	movlb	1	; select bank1
 16964  1FD6  00BC               	movwf	_DimmerLightsIntrIOC^(0+128)
 16965  1FD7  0008               	return
 16966  1FD8                     __end_of_DimmerIntrIOCPointSelect:	
 16967                           
 16968                           	psect	text116
 16969  1F6D                     __ptext116:	
 16970 ;; *************** function _INT_ISR *****************
 16971 ;; Defined at:
 16972 ;;		line 250 in file "../src/MCU_B1.c"
 16973 ;; Parameters:    Size  Location     Type
 16974 ;;		None
 16975 ;; Auto vars:     Size  Location     Type
 16976 ;;		None
 16977 ;; Return value:  Size  Location     Type
 16978 ;;		None               void
 16979 ;; Registers used:
 16980 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16981 ;; Tracked objects:
 16982 ;;		On entry : 0/0
 16983 ;;		On exit  : 0/0
 16984 ;;		Unchanged: 0/0
 16985 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16986 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16987 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16988 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16989 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16990 ;;Total ram usage:        0 bytes
 16991 ;; Hardware stack levels used:    1
 16992 ;; Hardware stack levels required when called:    2
 16993 ;; This function calls:
 16994 ;;		_setRF_ReceiveGO
 16995 ;;		_setRF_RxStatus
 16996 ;; This function is called by:
 16997 ;;		_ISR
 16998 ;; This function uses a non-reentrant model
 16999 ;;
 17000                           
 17001                           
 17002                           ;psect for function _INT_ISR
 17003  1F6D                     _INT_ISR:	
 17004                           
 17005                           ;MCU_B1.c: 251: if (INTE == 1 && INTF == 1) {
 17006                           
 17007                           ;incstack = 0
 17008                           ; Regs used in _INT_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17009  1F6D  1E0B               	btfss	11,4	;volatile
 17010  1F6E  0008               	return
 17011  1F6F  1C8B               	btfss	11,1	;volatile
 17012  1F70  0008               	return
 17013                           
 17014                           ;MCU_B1.c: 252: INTF = 0;
 17015  1F71  108B               	bcf	11,1	;volatile
 17016                           
 17017                           ;MCU_B1.c: 253: INTE = 0;
 17018  1F72  120B               	bcf	11,4	;volatile
 17019                           
 17020                           ;MCU_B1.c: 254: setRF_ReceiveGO(1, 1);
 17021  1F73  01F2               	clrf	setRF_ReceiveGO@command
 17022  1F74  0AF2               	incf	setRF_ReceiveGO@command,f
 17023  1F75  3001               	movlw	1
 17024  1F76  319E  26AE  319F   	fcall	_setRF_ReceiveGO
 17025                           
 17026                           ;MCU_B1.c: 255: setRF_RxStatus(1, 0);
 17027  1F79  01F2               	clrf	setRF_RxStatus@command
 17028  1F7A  3001               	movlw	1
 17029  1F7B  319E  26BB         	fcall	_setRF_RxStatus
 17030  1F7D  0008               	return
 17031  1F7E                     __end_of_INT_ISR:	
 17032                           
 17033                           	psect	text117
 17034  1EBB                     __ptext117:	
 17035 ;; *************** function _setRF_RxStatus *****************
 17036 ;; Defined at:
 17037 ;;		line 42 in file "../src/RF_Control_B1.c"
 17038 ;; Parameters:    Size  Location     Type
 17039 ;;  rf              1    wreg     unsigned char 
 17040 ;;  command         1    2[COMMON] unsigned char 
 17041 ;; Auto vars:     Size  Location     Type
 17042 ;;  rf              1    3[COMMON] unsigned char 
 17043 ;; Return value:  Size  Location     Type
 17044 ;;		None               void
 17045 ;; Registers used:
 17046 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17047 ;; Tracked objects:
 17048 ;;		On entry : 0/0
 17049 ;;		On exit  : 0/0
 17050 ;;		Unchanged: 0/0
 17051 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17052 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17053 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17054 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17055 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17056 ;;Total ram usage:        2 bytes
 17057 ;; Hardware stack levels used:    1
 17058 ;; Hardware stack levels required when called:    1
 17059 ;; This function calls:
 17060 ;;		i1_RfPointSelect
 17061 ;; This function is called by:
 17062 ;;		_INT_ISR
 17063 ;; This function uses a non-reentrant model
 17064 ;;
 17065                           
 17066                           
 17067                           ;psect for function _setRF_RxStatus
 17068  1EBB                     _setRF_RxStatus:	
 17069                           
 17070                           ;incstack = 0
 17071                           ; Regs used in _setRF_RxStatus: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17072                           ;setRF_RxStatus@rf stored from wreg
 17073  1EBB  00F3               	movwf	setRF_RxStatus@rf
 17074                           
 17075                           ;RF_Control_B1.c: 43: RfPointSelect(rf);
 17076  1EBC  0873               	movf	setRF_RxStatus@rf,w
 17077  1EBD  319E  263B         	fcall	i1_RfPointSelect
 17078                           
 17079                           ;RF_Control_B1.c: 44: RF->RxStatus = command;
 17080  1EBF  0021               	movlb	1	; select bank1
 17081  1EC0  083E               	movf	_RF^(0+128),w
 17082  1EC1  0086               	movwf	6
 17083  1EC2  0187               	clrf	7
 17084  1EC3  0872               	movf	setRF_RxStatus@command,w
 17085  1EC4  1181               	bcf	1,3
 17086  1EC5  1D03               	skipz
 17087  1EC6  1581               	bsf	1,3
 17088  1EC7  0008               	return
 17089  1EC8                     __end_of_setRF_RxStatus:	
 17090                           
 17091                           	psect	text118
 17092  1EAE                     __ptext118:	
 17093 ;; *************** function _setRF_ReceiveGO *****************
 17094 ;; Defined at:
 17095 ;;		line 36 in file "../src/RF_Control_B1.c"
 17096 ;; Parameters:    Size  Location     Type
 17097 ;;  rf              1    wreg     unsigned char 
 17098 ;;  command         1    2[COMMON] unsigned char 
 17099 ;; Auto vars:     Size  Location     Type
 17100 ;;  rf              1    3[COMMON] unsigned char 
 17101 ;; Return value:  Size  Location     Type
 17102 ;;		None               void
 17103 ;; Registers used:
 17104 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17105 ;; Tracked objects:
 17106 ;;		On entry : 0/0
 17107 ;;		On exit  : 0/0
 17108 ;;		Unchanged: 0/0
 17109 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17110 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17111 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17112 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17113 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17114 ;;Total ram usage:        2 bytes
 17115 ;; Hardware stack levels used:    1
 17116 ;; Hardware stack levels required when called:    1
 17117 ;; This function calls:
 17118 ;;		i1_RfPointSelect
 17119 ;; This function is called by:
 17120 ;;		_INT_ISR
 17121 ;; This function uses a non-reentrant model
 17122 ;;
 17123                           
 17124                           
 17125                           ;psect for function _setRF_ReceiveGO
 17126  1EAE                     _setRF_ReceiveGO:	
 17127                           
 17128                           ;incstack = 0
 17129                           ; Regs used in _setRF_ReceiveGO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17130                           ;setRF_ReceiveGO@rf stored from wreg
 17131  1EAE  00F3               	movwf	setRF_ReceiveGO@rf
 17132                           
 17133                           ;RF_Control_B1.c: 37: RfPointSelect(rf);
 17134  1EAF  0873               	movf	setRF_ReceiveGO@rf,w
 17135  1EB0  319E  263B         	fcall	i1_RfPointSelect
 17136                           
 17137                           ;RF_Control_B1.c: 38: RF->ReceiveGO = command;
 17138  1EB2  0021               	movlb	1	; select bank1
 17139  1EB3  083E               	movf	_RF^(0+128),w
 17140  1EB4  0086               	movwf	6
 17141  1EB5  0187               	clrf	7
 17142  1EB6  0872               	movf	setRF_ReceiveGO@command,w
 17143  1EB7  1081               	bcf	1,1
 17144  1EB8  1D03               	skipz
 17145  1EB9  1481               	bsf	1,1
 17146  1EBA  0008               	return
 17147  1EBB                     __end_of_setRF_ReceiveGO:	
 17148                           
 17149                           	psect	text119
 17150  1E3B                     __ptext119:	
 17151 ;; *************** function i1_RfPointSelect *****************
 17152 ;; Defined at:
 17153 ;;		line 7 in file "../src/RF_Control_B1.c"
 17154 ;; Parameters:    Size  Location     Type
 17155 ;;  rf              1    wreg     unsigned char 
 17156 ;; Auto vars:     Size  Location     Type
 17157 ;;  rf              1    1[COMMON] unsigned char 
 17158 ;; Return value:  Size  Location     Type
 17159 ;;		None               void
 17160 ;; Registers used:
 17161 ;;		wreg
 17162 ;; Tracked objects:
 17163 ;;		On entry : 0/0
 17164 ;;		On exit  : 0/0
 17165 ;;		Unchanged: 0/0
 17166 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17167 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17168 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17169 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17170 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17171 ;;Total ram usage:        2 bytes
 17172 ;; Hardware stack levels used:    1
 17173 ;; This function calls:
 17174 ;;		Nothing
 17175 ;; This function is called by:
 17176 ;;		_setRF_ReceiveGO
 17177 ;;		_setRF_RxStatus
 17178 ;; This function uses a non-reentrant model
 17179 ;;
 17180                           
 17181                           
 17182                           ;psect for function i1_RfPointSelect
 17183  1E3B                     i1_RfPointSelect:	
 17184                           
 17185                           ;incstack = 0
 17186                           ; Regs used in i1_RfPointSelect: [wreg]
 17187                           ;i1RfPointSelect@rf stored from wreg
 17188  1E3B  00F1               	movwf	i1RfPointSelect@rf
 17189                           
 17190                           ;RF_Control_B1.c: 9: if (rf == 1) {
 17191  1E3C  0871               	movf	i1RfPointSelect@rf,w
 17192  1E3D  3A01               	xorlw	1
 17193  1E3E  1D03               	skipz
 17194  1E3F  0008               	return
 17195                           
 17196                           ;RF_Control_B1.c: 10: RF = &RF1;
 17197  1E40  30D1               	movlw	_RF1& (0+255)
 17198  1E41  00F0               	movwf	??i1_RfPointSelect
 17199  1E42  0870               	movf	??i1_RfPointSelect,w
 17200  1E43  0021               	movlb	1	; select bank1
 17201  1E44  00BE               	movwf	_RF^(0+128)
 17202  1E45  0008               	return
 17203  1E46                     __end_ofi1_RfPointSelect:	
 17204  007E                     btemp	set	126	;btemp
 17205  007E                     pic14e$flags	set	126
 17206  007E                     wtemp	set	126
 17207  007E                     wtemp0	set	126
 17208  0080                     wtemp1	set	128
 17209  0082                     wtemp2	set	130
 17210  0084                     wtemp3	set	132
 17211  0086                     wtemp4	set	134
 17212  0088                     wtemp5	set	136
 17213  007F                     wtemp6	set	127
 17214  007E                     ttemp	set	126
 17215  007E                     ttemp0	set	126
 17216  0081                     ttemp1	set	129
 17217  0084                     ttemp2	set	132
 17218  0087                     ttemp3	set	135
 17219  007F                     ttemp4	set	127
 17220  007E                     ltemp	set	126
 17221  007E                     ltemp0	set	126
 17222  0082                     ltemp1	set	130
 17223  0086                     ltemp2	set	134
 17224  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    102
    Data        32
    BSS         198
    Persistent  5
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      8      14
    BANK0            80     80      80
    BANK1            80      0      77
    BANK2            80      0      68
    BANK3            80      0      48
    BANK4            80      0      37
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    Sw	PTR struct Switch size(1) Largest target is 9
		 -> NULL(NULL[0]), Sw2(BANK2[9]), Sw1(BANK2[9]), 

    RFSW	PTR struct RFSW size(1) Largest target is 1
		 -> NULL(NULL[0]), RFSW2(BANK1[1]), RFSW1(BANK1[1]), 

    RF	PTR struct RF size(1) Largest target is 5
		 -> NULL(NULL[0]), RF1(BANK1[5]), 

    WDT	PTR struct WDT size(1) Largest target is 2
		 -> NULL(NULL[0]), _WDT(BANK1[2]), 

    Timer0	PTR struct Timer0 size(1) Largest target is 8
		 -> NULL(NULL[0]), VarTimer0(BANK2[8]), 

    Memory	PTR struct FlashMemory size(1) Largest target is 37
		 -> NULL(NULL[0]), VarMemory(BANK4[37]), 

    LED	PTR struct LED size(1) Largest target is 4
		 -> NULL(NULL[0]), VarErrLED(BANK1[4]), VarLED2(BANK1[4]), VarLED1(BANK1[4]), 

    myMain	PTR struct myMain size(1) Largest target is 16
		 -> NULL(NULL[0]), _myMain(BANK3[16]), 

    DimmerLights22	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights2(BANK2[15]), 

    DimmerLights11	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights1(BANK2[15]), 

    DimmerLights	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights2(BANK2[15]), DimmerLights1(BANK2[15]), 

    Dimmer	PTR struct Dimmer size(1) Largest target is 3
		 -> NULL(NULL[0]), Dimmer1(BANK1[3]), 

    DimmerLightsIntr	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights2(BANK2[15]), DimmerLights1(BANK2[15]), 

    DimmerLightsIntrIOC	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights2(BANK2[15]), DimmerLights1(BANK2[15]), 

    product	PTR struct Product size(1) Largest target is 32
		 -> NULL(NULL[0]), _product(BANK3[32]), 

    DelayOff	PTR struct DelayOff size(1) Largest target is 5
		 -> NULL(NULL[0]), DlySw2(BANK1[5]), DlySw1(BANK1[5]), 

    Buz	PTR struct Buzzer size(1) Largest target is 12
		 -> NULL(NULL[0]), Buz1(BANK2[12]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _TMR0_ISR->_setDimmerLights_IntrControl
    _setDimmerLights_IntrControl->_DimmerIntrPointSelect
    _setDimmerReClock->_setDimmerLights_IntrIOC_GO
    _setDimmerLights_IntrIOC_GO->_DimmerIntrIOCPointSelect
    _INT_ISR->_setRF_ReceiveGO
    _INT_ISR->_setRF_RxStatus
    _setRF_RxStatus->i1_RfPointSelect
    _setRF_ReceiveGO->i1_RfPointSelect

Critical Paths under _main in BANK0

    _my_Main->_setBuz
    _setSw_Enable->_SwPointSelect
    _setRF_Enable->_RfPointSelect
    _Switch_Main->_setSw_Main
    _setSw_Main->_Sw_DimmerOffFunc
    _setRF_Learn->_RfPointSelect
    _Sw_DimmerOnFunc->_setRF_DimmerLights
    _Sw_DimmerOffFunc->_setRF_DimmerLights
    _Sw_DimmerAdjFunc->_setDimmerLights_AdjGo
    _Sw_DimmerAdjFunc->_setDimmerLights_TriggerAdj
    _Sw_DimmerAdjFunc->_setRFSW_Status
    _setDimmerLights_TriggerAdj->_DimmerLightsPointSelect
    _setDimmerLights_AdjGo->_DimmerLightsPointSelect
    _Switch_Initialization->_setSw_Initialization
    _setSw_Initialization->_setLED
    _RF_Main->_setRF_Main
    _setRF_Main->_getRxData
    _getRxData->_setControl_Lights_Table
    _setLog_Code->_setBuz
    _setControl_Lights_Table->_setRFSW_AdjControl
    _setRFSW_Control->_setRF_DimmerLights
    _setDelayOff_GO->_DelayTimejudge
    _setRFSW_AdjControl->_setRF_DimmerValue
    _setRF_DimmerValue->_setDimmerLights_AdjRF
    _setDimmerLights_AdjRF->_getPercentValue
    _getPercentValue->___fttol
    ___ftmul->___awtoft
    ___ftadd->___ftmul
    _RF_RxDisable->_CC2500_WriteCommand
    _CC2500_TxData->_CC2500_WriteCommand
    _CC2500_RxData->_CC2500_ReadStatus
    _CC2500_RxData->_CC2500_WriteCommand
    _CC2500_ReadStatus->_CC2500_ReadByte
    _CC2500_ReadStatus->_CC2500_WriteByte
    _RF_Initialization->_setRF_Initialization
    _Mcu_Initialization->_TMR0_Set
    _Mcu_Initialization->_WDT_Set
    _LED_Main->_setLED_Main
    _setLED_Main->_LedPointSelect
    _LED_Initialization->_setLED_Initialization
    _setLED_Initialization->_setLED
    _Flash_Memory_Main->_Flash_Memory_Modify
    _Flash_Memory_Modify->_Flash_Memory_Read
    _Flash_Memory_Initialization->_setPercentValue
    _DimmerLights_Main->_setDimmerLights_Main
    _setDimmerLights_Main->_setDimmerLights_Adj
    _setDimmerLights_Adj->_setRF_DimmerLights
    _setDimmerLights->_setLED
    _setLED->_LedPointSelect
    _DimmerLights_Close->_getDimmerLights_StatusFlag
    _DimmerLights_Close->_setMemory_GO
    _DimmerLights_Initialization->_setDimmerLights_Initialization
    _setDimmerLights_Initialization->_DimmerLightsPointSelect
    _DelayOff_Main->_DlyOff_Main
    _DlyOff_Main->_setRF_DimmerLights
    _setTxData->_RfPointSelect
    _setSw_Status->_SwPointSelect
    _setRF_DimmerLights->_setPercentValue
    _setPercentValue->___fttol
    ___fttol->___ftadd
    ___ftdiv->___awtoft
    ___awtoft->___ftpack
    _setRFSW_Status->_RfSWPointSelect
    _setDimmerLights_Trigger->_DimmerLightsPointSelect
    _setDimmerLights_Switch->_DimmerLightsPointSelect
    _setBuz->___awdiv
    _DelayOff_Initialization->_DlyOff_Initialization
    _DlyOff_Initialization->_DelayOffPointSelect
    _CC2500_PowerOnInitial->_CC2500_InitSetREG
    _CC2500_SIDLEMode->_CC2500_WriteCommand
    _CC2500_PowerRST->_DelayTime_1us
    _CC2500_InitSetREG->_CC2500_WriteREG
    _CC2500_InitPATable->_CC2500_WriteREG
    _CC2500_WriteREG->_CC2500_WriteByte
    _CC2500_FrequencyCabr->_DelayTime_1us
    _CC2500_ClearTXFIFO->_CC2500_WriteCommand
    _CC2500_ClearRXFIFO->_CC2500_WriteCommand
    _CC2500_WriteCommand->_CC2500_WriteByte

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     0      4   76107
                                             76 BANK0      4     0      4
              _Buzzer_Initialization
                        _Buzzer_Main
              _CC2500_PowerOnInitial
            _DelayOff_Initialization
                      _DelayOff_Main
        _DimmerLights_Initialization
                  _DimmerLights_Main
        _Flash_Memory_Initialization
                  _Flash_Memory_Main
                 _LED_Initialization
                           _LED_Main
                 _Mcu_Initialization
                  _RF_Initialization
                            _RF_Main
              _Switch_Initialization
                        _Switch_Main
                           _WDT_Main
              _myMain_Initialization
                            _my_Main
 ---------------------------------------------------------------------------------
 (1) _my_Main                                              0     0      0    1463
                             _setBuz
                       _setRF_Enable
                       _setSw_Enable
 ---------------------------------------------------------------------------------
 (2) _setSw_Enable                                         1     1      0      88
                                              2 BANK0      1     1      0
                      _SwPointSelect
 ---------------------------------------------------------------------------------
 (2) _setRF_Enable                                         2     1      1     152
                                              2 BANK0      2     1      1
                      _RfPointSelect
                          _setINT_GO
 ---------------------------------------------------------------------------------
 (1) _myMain_Initialization                                1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _WDT_Main                                             1     1      0       0
                                              0 BANK0      1     1      0
                       _WDT_Clearing
 ---------------------------------------------------------------------------------
 (2) _WDT_Clearing                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Switch_Main                                          0     0      0   20179
                         _setSw_Main
 ---------------------------------------------------------------------------------
 (2) _setSw_Main                                           5     5      0   20179
                                             69 BANK0      5     5      0
                      _SwPointSelect
                   _Sw_DimmerAdjFunc
                   _Sw_DimmerOffFunc
                    _Sw_DimmerOnFunc
                             _setBuz
                        _setRF_Learn
 ---------------------------------------------------------------------------------
 (3) _setRF_Learn                                          2     1      1     258
                                              2 BANK0      2     1      1
                      _RfPointSelect
 ---------------------------------------------------------------------------------
 (3) _Sw_DimmerOnFunc                                      2     2      0    8915
                                             66 BANK0      2     2      0
                             _setBuz
             _setDimmerLights_Switch
            _setDimmerLights_Trigger
                     _setRFSW_Status
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _Sw_DimmerOffFunc                                     3     3      0    8456
                                             66 BANK0      3     3      0
                     _setDelayOff_GO
              _setDimmerLights_AdjGo
             _setDimmerLights_Switch
            _setDimmerLights_Trigger
         _setDimmerLights_TriggerAdj
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _Sw_DimmerAdjFunc                                     2     2      0    1103
                                              4 BANK0      2     2      0
              _setDimmerLights_AdjGo
         _setDimmerLights_TriggerAdj
                     _setRFSW_Status
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_TriggerAdj                           2     1      1     216
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_AdjGo                                2     1      1     216
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (1) _Switch_Initialization                                0     0      0     652
                         _TouchPower
               _setSw_Initialization
 ---------------------------------------------------------------------------------
 (2) _setSw_Initialization                                 1     1      0     652
                                              4 BANK0      1     1      0
                             _setLED
 ---------------------------------------------------------------------------------
 (2) _TouchPower                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _RF_Main                                              0     0      0   26714
                         _setRF_Main
 ---------------------------------------------------------------------------------
 (2) _setRF_Main                                           3     3      0   26714
                                             73 BANK0      3     3      0
                      _CC2500_RxData
                      _CC2500_TxData
                _CC2500_WriteCommand
                       _RF_RxDisable
                      _RfPointSelect
                          _getRxData
                          _setINT_GO
 ---------------------------------------------------------------------------------
 (3) _getRxData                                            2     2      0   25942
                                             72 BANK0      1     1      0
                      _RfPointSelect
            _setControl_Lights_Table
                        _setLog_Code
 ---------------------------------------------------------------------------------
 (4) _setLog_Code                                          2     2      0    1267
                                             13 BANK0      2     2      0
                      _RfPointSelect
                             _setBuz
 ---------------------------------------------------------------------------------
 (4) _setControl_Lights_Table                              1     1      0   24631
                                             71 BANK0      1     1      0
                      _RfPointSelect
                             _setBuz
                    _setDimmerLights
                 _setRFSW_AdjControl
                    _setRFSW_Control
                     _setRFSW_Status
                       _setSw_Status
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setRFSW_Control                                      2     2      0    9873
                                             66 BANK0      2     2      0
                    _RfSWPointSelect
                             _setBuz
                     _setDelayOff_GO
             _setDimmerLights_Switch
            _setDimmerLights_Trigger
                 _setRF_DimmerLights
                       _setSw_Status
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setDelayOff_GO                                       5     3      2     871
                                              3 BANK0      5     3      2
                _DelayOffPointSelect
                     _DelayTimejudge
 ---------------------------------------------------------------------------------
 (5) _DelayTimejudge                                       3     3      0      51
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (5) _setRFSW_AdjControl                                   3     3      0   11355
                                             68 BANK0      3     3      0
                    _RfSWPointSelect
                  _setRF_DimmerValue
                          _setTxData
 ---------------------------------------------------------------------------------
 (6) _setRF_DimmerValue                                    3     3      0   11179
                                             65 BANK0      3     3      0
              _setDimmerLights_AdjRF
 ---------------------------------------------------------------------------------
 (7) _setDimmerLights_AdjRF                                2     2      0   11113
                                             63 BANK0      2     2      0
            _DimmerLightsPointSelect
                    _getPercentValue
 ---------------------------------------------------------------------------------
 (8) _getPercentValue                                      6     6      0   11047
                                             57 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___fttol
 ---------------------------------------------------------------------------------
 (9) ___ftmul                                             16    10      6    2502
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (9) ___ftadd                                             13     7      6    3118
                                             30 BANK0     13     7      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) _RF_RxDisable                                         1     1      0     134
                                              4 BANK0      1     1      0
                _CC2500_WriteCommand
                      _RfPointSelect
                          _setINT_GO
 ---------------------------------------------------------------------------------
 (3) _setINT_GO                                            1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _CC2500_TxData                                        2     2      0     160
                                              4 BANK0      2     2      0
                   _CC2500_WriteByte
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (3) _CC2500_RxData                                        2     2      0     320
                                              4 BANK0      2     2      0
                    _CC2500_ReadByte
                  _CC2500_ReadStatus
                   _CC2500_WriteByte
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (4) _CC2500_ReadStatus                                    2     2      0     114
                                              2 BANK0      2     2      0
                    _CC2500_ReadByte
                   _CC2500_WriteByte
 ---------------------------------------------------------------------------------
 (5) _CC2500_ReadByte                                      2     2      0      46
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _RF_Initialization                                    0     0      0       0
               _setRF_Initialization
 ---------------------------------------------------------------------------------
 (2) _setRF_Initialization                                 2     2      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Mcu_Initialization                                   1     1      0       0
                                              1 BANK0      1     1      0
                            _ADC_Set
                           _Fosc_Set
                            _INT_Set
                            _IOC_Set
                             _IO_Set
                           _TMR0_Set
                            _WDT_Set
 ---------------------------------------------------------------------------------
 (2) _WDT_Set                                              1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _TMR0_Set                                             1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _IO_Set                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IOC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INT_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Fosc_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _LED_Main                                             0     0      0     154
                        _setLED_Main
 ---------------------------------------------------------------------------------
 (2) _setLED_Main                                          3     3      0     154
                                              2 BANK0      3     3      0
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (1) _LED_Initialization                                   0     0      0     740
              _setLED_Initialization
 ---------------------------------------------------------------------------------
 (2) _setLED_Initialization                                1     1      0     740
                                              4 BANK0      1     1      0
                     _LedPointSelect
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Main                                    0     0      0     227
                _Flash_Memory_Modify
 ---------------------------------------------------------------------------------
 (2) _Flash_Memory_Modify                                  3     3      0     227
                                              4 BANK0      3     3      0
               _Flash_Memory_Erasing
                  _Flash_Memory_Read
                 _Flash_Memory_Write
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Erasing                                 0     0      0       0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Initialization                          2     2      0    5698
                                             61 BANK0      2     2      0
                  _Flash_Memory_Read
                 _Flash_Memory_Write
                    _setPercentValue
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Write                                   2     2      0      90
                                              0 BANK0      2     2      0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (4) _Flash_Memory_Unlock                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Read                                    4     4      0      47
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Main                                    0     0      0    9087
                 _DimmerLights_Close
               _setDimmerLights_Main
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Main                                 2     2      0    8973
                                             69 BANK0      2     2      0
            _DimmerLightsPointSelect
                             _setBuz
                    _setDimmerLights
                _setDimmerLights_Adj
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_Adj                                  3     2      1    6399
                                             66 BANK0      3     2      1
            _DimmerLightsPointSelect
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setDimmerLights                                      3     2      1    1084
                                              4 BANK0      3     2      1
            _DimmerLightsPointSelect
                             _setLED
                       _setMemory_GO
 ---------------------------------------------------------------------------------
 (3) _setLED                                               2     1      1     630
                                              2 BANK0      2     1      1
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (4) _LedPointSelect                                       2     2      0      66
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _DimmerLights_Close                                   0     0      0     114
         _getDimmerLights_StatusFlag
                       _setMemory_GO
 ---------------------------------------------------------------------------------
 (6) _setMemory_GO                                         3     3      0      66
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _getDimmerLights_StatusFlag                           3     3      0      48
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Initialization                          1     1      0      66
                                              4 BANK0      1     1      0
              _Dimmer_Initialization
     _setDimmerLights_Initialization
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Initialization                       2     2      0      66
                                              2 BANK0      2     2      0
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (2) _Dimmer_Initialization                                1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Main                                        0     0      0    9384
                        _DlyOff_Main
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Main                                          3     3      0    9384
                                             66 BANK0      3     3      0
                _DelayOffPointSelect
                             _setBuz
             _setDimmerLights_Switch
            _setDimmerLights_Trigger
                     _setRFSW_Status
                 _setRF_DimmerLights
                       _setSw_Status
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setTxData                                            3     3      0      44
                                              2 BANK0      2     2      0
                      _RfPointSelect
 ---------------------------------------------------------------------------------
 (3) _RfPointSelect                                        2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (5) _setSw_Status                                         2     1      1     472
                                              2 BANK0      2     1      1
                      _SwPointSelect
 ---------------------------------------------------------------------------------
 (3) _SwPointSelect                                        2     2      0      44
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setRF_DimmerLights                                   5     4      1    6117
                                             61 BANK0      5     4      1
                    _setPercentValue
 ---------------------------------------------------------------------------------
 (5) _setPercentValue                                      4     4      0    5427
                                             57 BANK0      4     4      0
                           ___awtoft
                            ___ftdiv
                            ___fttol
 ---------------------------------------------------------------------------------
 (6) ___fttol                                             14    10      4     380
                                             43 BANK0     14    10      4
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (6) ___ftdiv                                             16    10      6    2712
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (6) ___awtoft                                             6     3      3    2267
                                              8 BANK0      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) ___ftpack                                             8     3      5    2048
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (4) _setRFSW_Status                                       2     1      1     536
                                              2 BANK0      2     1      1
                    _RfSWPointSelect
 ---------------------------------------------------------------------------------
 (5) _RfSWPointSelect                                      2     2      0      44
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_Trigger                              2     1      1     408
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_Switch                               2     1      1     408
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (5) _DimmerLightsPointSelect                              2     2      0      44
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _setBuz                                               4     2      2    1223
                                              9 BANK0      4     2      2
                            ___awdiv
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4     428
                                              0 BANK0      9     5      4
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Initialization                              0     0      0      66
              _DlyOff_Initialization
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Initialization                                1     1      0      66
                                              2 BANK0      1     1      0
                _DelayOffPointSelect
 ---------------------------------------------------------------------------------
 (5) _DelayOffPointSelect                                  2     2      0      44
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _CC2500_PowerOnInitial                                0     0      0    1677
                 _CC2500_ClearRXFIFO
                 _CC2500_ClearTXFIFO
               _CC2500_FrequencyCabr
                 _CC2500_InitPATable
                  _CC2500_InitSetREG
                    _CC2500_PowerRST
                   _CC2500_SIDLEMode
 ---------------------------------------------------------------------------------
 (2) _CC2500_SIDLEMode                                     0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (2) _CC2500_PowerRST                                      1     1      0     394
                                              6 BANK0      1     1      0
                   _CC2500_WriteByte
                      _DelayTime_1us
 ---------------------------------------------------------------------------------
 (2) _CC2500_InitSetREG                                    4     4      0     354
                                              5 BANK0      4     4      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (2) _CC2500_InitPATable                                   3     3      0     309
                                              5 BANK0      3     3      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (3) _CC2500_WriteREG                                      3     2      1     218
                                              2 BANK0      3     2      1
                   _CC2500_WriteByte
 ---------------------------------------------------------------------------------
 (2) _CC2500_FrequencyCabr                                 0     0      0     416
                _CC2500_WriteCommand
                      _DelayTime_1us
 ---------------------------------------------------------------------------------
 (3) _DelayTime_1us                                        6     4      2     348
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (2) _CC2500_ClearTXFIFO                                   0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (2) _CC2500_ClearRXFIFO                                   0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (4) _CC2500_WriteCommand                                  2     2      0      68
                                              2 BANK0      2     2      0
                   _CC2500_WriteByte
 ---------------------------------------------------------------------------------
 (5) _CC2500_WriteByte                                     2     2      0      46
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Main                                          4     4      0       0
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Initialization                                1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _ISR                                                 1     1      0     568
                                              7 COMMON     1     1      0
                            _INT_ISR
                            _IOC_ISR
                           _TMR0_ISR
 ---------------------------------------------------------------------------------
 (12) _TMR0_ISR                                            0     0      0     220
                        _Buz_Counter
        _setDimmerLights_IntrControl
 ---------------------------------------------------------------------------------
 (13) _setDimmerLights_IntrControl                         5     5      0     220
                                              2 COMMON     5     5      0
              _DimmerIntrPointSelect
 ---------------------------------------------------------------------------------
 (14) _DimmerIntrPointSelect                               2     2      0      44
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (13) _Buz_Counter                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _IOC_ISR                                             0     0      0      88
                   _setDimmerReClock
 ---------------------------------------------------------------------------------
 (13) _setDimmerReClock                                    0     0      0      88
         _setDimmerLights_IntrIOC_GO
 ---------------------------------------------------------------------------------
 (14) _setDimmerLights_IntrIOC_GO                          1     1      0      88
                                              2 COMMON     1     1      0
           _DimmerIntrIOCPointSelect
 ---------------------------------------------------------------------------------
 (15) _DimmerIntrIOCPointSelect                            2     2      0      44
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (12) _INT_ISR                                             0     0      0     260
                    _setRF_ReceiveGO
                     _setRF_RxStatus
 ---------------------------------------------------------------------------------
 (13) _setRF_RxStatus                                      2     1      1     130
                                              2 COMMON     2     1      1
                    i1_RfPointSelect
 ---------------------------------------------------------------------------------
 (13) _setRF_ReceiveGO                                     2     1      1     130
                                              2 COMMON     2     1      1
                    i1_RfPointSelect
 ---------------------------------------------------------------------------------
 (14) i1_RfPointSelect                                     2     2      0      22
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 15
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Buzzer_Initialization
   _Buzzer_Main
   _CC2500_PowerOnInitial
     _CC2500_ClearRXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
     _CC2500_ClearTXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
     _CC2500_FrequencyCabr
       _CC2500_WriteCommand
         _CC2500_WriteByte
       _DelayTime_1us
     _CC2500_InitPATable
       _CC2500_WriteREG
         _CC2500_WriteByte
     _CC2500_InitSetREG
       _CC2500_WriteREG
         _CC2500_WriteByte
     _CC2500_PowerRST
       _CC2500_WriteByte
       _DelayTime_1us
     _CC2500_SIDLEMode
       _CC2500_WriteCommand
         _CC2500_WriteByte
   _DelayOff_Initialization
     _DlyOff_Initialization
       _DelayOffPointSelect
   _DelayOff_Main
     _DlyOff_Main
       _DelayOffPointSelect
       _setBuz
         ___awdiv
       _setDimmerLights_Switch
         _DimmerLightsPointSelect
       _setDimmerLights_Trigger
         _DimmerLightsPointSelect
       _setRFSW_Status
         _RfSWPointSelect
       _setRF_DimmerLights
         _setPercentValue
           ___awtoft
             ___ftpack
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
       _setSw_Status
         _SwPointSelect
       _setTxData
         _RfPointSelect
   _DimmerLights_Initialization
     _Dimmer_Initialization
     _setDimmerLights_Initialization
       _DimmerLightsPointSelect
   _DimmerLights_Main
     _DimmerLights_Close
       _getDimmerLights_StatusFlag
       _setMemory_GO
     _setDimmerLights_Main
       _DimmerLightsPointSelect
       _setBuz
         ___awdiv
       _setDimmerLights
         _DimmerLightsPointSelect
         _setLED
           _LedPointSelect
         _setMemory_GO
       _setDimmerLights_Adj
         _DimmerLightsPointSelect
         _setRF_DimmerLights
           _setPercentValue
             ___awtoft
               ___ftpack
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setTxData
           _RfPointSelect
   _Flash_Memory_Initialization
     _Flash_Memory_Read
     _Flash_Memory_Write
       _Flash_Memory_Unlock
     _setPercentValue
       ___awtoft
         ___ftpack
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
   _Flash_Memory_Main
     _Flash_Memory_Modify
       _Flash_Memory_Erasing
         _Flash_Memory_Unlock
       _Flash_Memory_Read
       _Flash_Memory_Write
         _Flash_Memory_Unlock
   _LED_Initialization
     _setLED_Initialization
       _LedPointSelect
       _setLED
         _LedPointSelect
   _LED_Main
     _setLED_Main
       _LedPointSelect
   _Mcu_Initialization
     _ADC_Set
     _Fosc_Set
     _INT_Set
     _IOC_Set
     _IO_Set
     _TMR0_Set
     _WDT_Set
   _RF_Initialization
     _setRF_Initialization
   _RF_Main
     _setRF_Main
       _CC2500_RxData
         _CC2500_ReadByte
         _CC2500_ReadStatus
           _CC2500_ReadByte
           _CC2500_WriteByte
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
       _CC2500_TxData
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
       _CC2500_WriteCommand
         _CC2500_WriteByte
       _RF_RxDisable
         _CC2500_WriteCommand
           _CC2500_WriteByte
         _RfPointSelect
         _setINT_GO
       _RfPointSelect
       _getRxData
         _RfPointSelect
         _setControl_Lights_Table
           _RfPointSelect
           _setBuz
             ___awdiv
           _setDimmerLights
             _DimmerLightsPointSelect
             _setLED
               _LedPointSelect
             _setMemory_GO
           _setRFSW_AdjControl
             _RfSWPointSelect
             _setRF_DimmerValue
               _setDimmerLights_AdjRF
                 _DimmerLightsPointSelect
                 _getPercentValue
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
             _setTxData
               _RfPointSelect
           _setRFSW_Control
             _RfSWPointSelect
             _setBuz
               ___awdiv
             _setDelayOff_GO
               _DelayOffPointSelect
               _DelayTimejudge
             _setDimmerLights_Switch
               _DimmerLightsPointSelect
             _setDimmerLights_Trigger
               _DimmerLightsPointSelect
             _setRF_DimmerLights
               _setPercentValue
                 ___awtoft
                   ___ftpack
                 ___ftdiv
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
             _setSw_Status
               _SwPointSelect
             _setTxData
               _RfPointSelect
           _setRFSW_Status
             _RfSWPointSelect
           _setSw_Status
             _SwPointSelect
           _setTxData
             _RfPointSelect
         _setLog_Code
           _RfPointSelect
           _setBuz
             ___awdiv
       _setINT_GO
   _Switch_Initialization
     _TouchPower
     _setSw_Initialization
       _setLED
         _LedPointSelect
   _Switch_Main
     _setSw_Main
       _SwPointSelect
       _Sw_DimmerAdjFunc
         _setDimmerLights_AdjGo
           _DimmerLightsPointSelect
         _setDimmerLights_TriggerAdj
           _DimmerLightsPointSelect
         _setRFSW_Status
           _RfSWPointSelect
       _Sw_DimmerOffFunc
         _setDelayOff_GO
           _DelayOffPointSelect
           _DelayTimejudge
         _setDimmerLights_AdjGo
           _DimmerLightsPointSelect
         _setDimmerLights_Switch
           _DimmerLightsPointSelect
         _setDimmerLights_Trigger
           _DimmerLightsPointSelect
         _setDimmerLights_TriggerAdj
           _DimmerLightsPointSelect
         _setRF_DimmerLights
           _setPercentValue
             ___awtoft
               ___ftpack
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setTxData
           _RfPointSelect
       _Sw_DimmerOnFunc
         _setBuz
           ___awdiv
         _setDimmerLights_Switch
           _DimmerLightsPointSelect
         _setDimmerLights_Trigger
           _DimmerLightsPointSelect
         _setRFSW_Status
           _RfSWPointSelect
         _setRF_DimmerLights
           _setPercentValue
             ___awtoft
               ___ftpack
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setTxData
           _RfPointSelect
       _setBuz
         ___awdiv
       _setRF_Learn
         _RfPointSelect
   _WDT_Main
     _WDT_Clearing
   _myMain_Initialization
   _my_Main
     _setBuz
       ___awdiv
     _setRF_Enable
       _RfPointSelect
       _setINT_GO
     _setSw_Enable
       _SwPointSelect

 _ISR (ROOT)
   _INT_ISR
     _setRF_ReceiveGO
       i1_RfPointSelect
     _setRF_RxStatus
       i1_RfPointSelect
   _IOC_ISR
     _setDimmerReClock
       _setDimmerLights_IntrIOC_GO
         _DimmerIntrIOCPointSelect
   _TMR0_ISR
     _Buz_Counter
     _setDimmerLights_IntrControl
       _DimmerIntrPointSelect

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       1       1        7.1%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      8       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     50      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      0      4D       7       96.3%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      44       9       85.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      30      11       60.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0      25      13       46.3%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     144      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     144      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.32 build 58300 
Symbol Table                                                                                   Mon Oct 13 17:03:33 2014

                   __size_of_Switch_Main 0008                    ?_Flash_Memory_Erasing 0070  
                           _WDT_Clearing 0002             ??_setDimmerLights_TriggerAdj 0023  
                                     _RD 0CA8                                       _RF 00BE  
                __end_of_CC2500_WriteREG 112C                                       _WR 0CA9  
                           ___awdiv@sign 0026                                       _Sw 007B  
     __end_of_getDimmerLights_StatusFlag 1FA0               _getDimmerLights_StatusFlag 1F8F  
                 __end_of_setDelayOff_GO 086F                             ___ftadd@exp1 004A  
                           ___ftadd@exp2 0049                setDimmerLights_Adj@lights 0064  
                   _setDimmerLights_Main 0CAC                             ___ftadd@sign 0048  
                                    l305 13F7                                      l308 13FD  
                                    l350 111B                                      l272 1563  
                                    l281 1595                                      l338 1106  
                                    l362 1F25                                      l339 1108  
                                    l292 08E0                                      l277 158D  
                                    l374 12D7                                      l278 1592  
                                    l368 1182                                      l288 08CF  
                                    l835 1FBB                                      _GIE 005F  
                                    _CRC 00B7                                      _RA0 0060  
                                    _RB0 0068     __size_of_DimmerLights_Initialization 0017  
                                    _RB1 0069                                      _RA3 0063  
                                    _RC0 0070                                      _RA4 0064  
                                    _LED 00BD                                      _RC1 0071  
                                    _RB3 006B                                      _RC2 0072  
                                    _RB4 006C                                      _RA6 0066  
                                    _RB5 006D                                      _RA7 0067  
                                    _RC4 0074                                      _RC5 0075  
                                    _RC7 0077                                      _RF1 00D1  
                                    _ISR 0004                                      _WDT 00EA  
                                    _Sw1 014A                                      _Sw2 0153  
                                    _Buz 0078                setDimmerLights_Adj@status 0062  
               __end_of_CC2500_WriteByte 1113                            ??_Buz_Counter 0070  
                  _Buzzer_Initialization 1E51                          __end_of_ADC_Set 1E02  
                        ?_DelayTimejudge 0070                                      wreg 0009  
   setDimmerLights_Initialization@lights 0023                          _setDimmerLights 0D27  
                  _setDimmerLights_AdjRF 128B                    _setDimmerLights_AdjGo 1F4D  
                                   ?_ISR 0070                             ___ftdiv@cntr 0038  
                        __end_of_IOC_ISR 1F8F                             ___ftdiv@sign 003D  
                                   l2212 16B0                                     l2230 10A9  
                                   l1407 142D                 ?_DimmerLightsPointSelect 0070  
                                   l2244 1546                          __end_of_IOC_Set 1ED5  
                                   l6000 08F2                                     l5210 094A  
                                   l5202 0934                                     l6002 090A  
                                   l5206 093B                                     l6014 0923  
                                   l6024 12E8                                     l5216 0963  
                                   l5208 0945                                     l6026 12F3  
                                   l5218 096B                                     l5410 0DBF  
                                   l6122 1411                                     l5236 1252  
                                   l5324 06EC                                     l5308 044F  
                                   l5252 03A0                                     l2942 095E  
                                   l5318 06D6                                     l5430 0DFD  
                                   l5270 03C9                                     l2598 1DE3  
                                   l6214 0AE1                                     l5440 0E16  
                                   l5512 1275                                     l6080 14B4  
                                   l7008 04DF                                     l6160 1333  
                                   l5280 03EB                                     l5248 0399  
                                   l5360 0574                                     l5346 0746  
                                   l5338 072D                                     l5290 040C  
                                   l5282 03EF                                     l5258 03AF  
                                   l6218 0AF3                                     l2971 0410  
                                   l5540 175C                                     l2948 0975  
                                   l5444 0E24                                     l5436 0E0A  
                                   l5428 0DEF                                     l6068 1F99  
                                   l5516 1280                                     l5700 08A1  
                                   l7052 15DD                                     l6164 133C  
                                   l5276 03DC                                     l6252 1602  
                                   l5438 0E13                                     l5614 09E8  
                                   l5294 0422                                     l5278 03E6  
                                   l5390 05E1                                     l5382 05CD  
                                   l5366 058A                                     l6190 16E4  
                                   l6238 0B35                                     l5528 1FE3  
                                   l5712 08BD                                     l5800 0D7A  
                                   l5288 0402                                     l5480 135C  
                                   l5472 1354                                     l6248 15F0  
                                   l5466 10C0                                     l5546 1767  
                                   l5298 0434                                     l5394 05E9  
                                   l5378 05C5                                     l5730 1476  
                                   l5482 135E                                     l5474 1356  
                                   l5650 0842                                     l5810 0E4A  
                                   l6178 16CE                                     l6282 0AB1  
                                   l7090 0B8A                                     l5572 179E  
                                   l5564 178D                                     l5556 176F  
                                   l5708 08B7                                     l5716 08C3  
                                   l6532 0CCA                                     l5476 1358  
                                   l5660 0861                                     l5820 0E6E  
                                   l5558 177B                                     l5590 0C15  
                                   l6542 0CE8                                     l5478 135A  
                                   l5486 1363                                     l5654 0848  
                                   l5568 1796                                     l6528 0CC0  
                                   l5488 1377                                     l5656 0855  
                                   l5586 0BF7                                     l5682 0885  
                                   l6546 0CF4                                     l5850 1534  
                                   l5826 0E84                                     l6722 062D  
                                   l7098 0BB6                                     l5692 0895  
                                   l6660 09FE                                     l6580 150E  
                                   l6732 0649                                     l7196 1722  
                                   l6910 0FF2                                     l5678 087F  
                                   l5686 088B                                     l6558 0D21  
                                   l6670 0A5D                                     l5766 11DC  
                                   l5942 07E8                                     l5934 07D6  
                                   l6822 0273                                     l6806 023E  
                                   l6904 0FE5                                     l5696 089B  
                                   l6584 1515                                     l5768 11E2  
                                   l5928 07BB                                     l6744 0672  
                                   l6832 02A5                                     l6808 0246  
                                   l6906 0FEB                                     l6666 0A17  
                                   l5946 07F1                                     l5938 07DF  
                                   l6774 06B2                                     l6758 068F  
                                   l6846 02E9                                     l5968 1575  
                                   l6768 06A5                                     l6856 031C  
                                   l6796 022E                    _myMain_Initialization 1075  
                                   l6798 0234                                     l6898 0FBD  
                                   _CFGS 0CAE                                     _FREE 0CAC  
                                   _LATA 010C                                     _LATB 010D  
                        __end_of_INT_ISR 1F7E                                     _LATC 010E  
                                   u4025 1772                                     u3305 0966  
                                   u4130 0996                                     u4045 177C  
                                   u4055 1786                                     u3335 097C  
                                   u4135 0994                                     u4065 178E  
                                   u3265 0940                                     u3515 03F0  
                                   u3285 0959                                     u3615 06FE  
                                   u3455 03CA                                     u3625 070E  
                                   u3545 0403                                     u3705 05A6  
                                   u3635 072E                                     _PEIE 005E  
                                   u3645 073D                                     u3805 0DC6  
                                   u3485 03DD                                     u3725 05CE  
                                   _INTE 005C                                     u4550 1E39  
                                   _INTF 0059                                     u3655 0747  
                                   u3735 05D4                                     u6065 0F7E  
                                   u6305 0BA0                                     u3835 0DF0  
                                   u3765 05EA                                     u6255 15C4  
                                   u3775 05F0                                     u3695 0596  
                                   u3865 0E0B                                     u4765 12DD  
                                   u6295 0B62                                     _LWLO 0CAD  
                                   _RFSW 00BF                                     _TMR0 0015  
                        __end_of_INT_Set 1DEE                                     _RSSI 00C0  
                                   _WREN 0CAA                                     _Buz1 013E  
                                   __WDT 00E5                                     _main 1704  
                           ___ftpack@arg 0020                      __end_of_DlyOff_Main 0CAC  
                        __end_of_RF_Main 1DE3                             ___ftpack@exp 0023  
                                   fsr0h 0005                                     fsr1h 0007  
                                   fsr0l 0004                                     indf0 0000  
                                   indf1 0001                                     fsr1l 0006  
    __size_of_setDimmerLights_TriggerAdj 0010                                     btemp 007E  
                        __end_of_WDT_Set 10FA                                     ltemp 007E  
          __size_of_setRF_Initialization 0007                         _setDimmerReClock 1E46  
                                   start 0016                                     ttemp 007E  
                                   wtemp 007E                      DelayTimejudge@value 0021  
                          _RfPointSelect 1E7E               __end_of_setRFSW_AdjControl 155C  
                           ___ftmul@cntr 003C                             ___ftmul@sign 003D  
                                  ??_ISR 0077                             ___fttol@exp1 0058  
                           ___fttol@lval 0054           __size_of_DimmerIntrPointSelect 0012  
                       __end_of_LED_Main 1EAE            __end_of_DimmerIntrPointSelect 0812  
                  ?_setDimmerLights_Main 0070                          ?_setDelayOff_GO 0023  
                                  ?_main 006C                setControl_Lights_Table@rf 0067  
                        __end_of___awdiv 17A5                          __end_of___ftadd 0467  
                        __end_of___ftdiv 0768                          __end_of___ftmul 0611  
                        ___awdiv@divisor 0020                          __end_of___fttol 0E2D  
           setDimmerLights_AdjGo@command 0022                                    _IOCBF 0396  
                                  _IOCBN 0395                                    _IOCBP 0394  
                                  _IOCIE 005B                                    _IOCIF 0058  
                                  i1l781 1FCE                                    i1l791 0809  
                 _setDimmerLights_Switch 1F2D                          ___awdiv@counter 0025  
          __size_of_CC2500_FrequencyCabr 000C                                    _RFSW1 00E7  
                                  _RFSW2 00E8                                    _PORTA 000C  
                                  _PORTB 000D                                    _PORTC 000E  
                           ?_setLED_Main 0070                       setRF_Learn@command 0022  
                                  _TRISA 008C                                    _TRISB 008D  
                                  _TRISC 008E                                    _WPUB0 1068  
                                  _WPUB1 1069                                    _WPUB2 106A  
                          setRF_Learn@rf 0023                            __CFG_WRT$HALF 0000  
     __end_of_setDimmerLights_IntrIOC_GO 12D2               _setDimmerLights_IntrIOC_GO 12AD  
                       __end_of_TMR0_ISR 1469             __size_of_CC2500_WriteCommand 0010  
                       __end_of_TMR0_Set 1EE2                            ___awtoft@sign 002D  
            DimmerIntrPointSelect@lights 0071                            ___ftpack@sign 0024  
                        __end_of_my_Main 0BBC              __size_of_CC2500_ClearRXFIFO 0004  
                          ??_Buzzer_Main 0020                         __end_of_WDT_Main 11B0  
            __size_of_CC2500_ClearTXFIFO 0004                      CC2500_RxData@loop_f 0025  
                         __pbitbssCOMMON 03E0                      setMemory_GO@command 0022  
                         __CFG_BOREN$OFF 0000                      __end_of_Buz_Counter 1F1D  
                     Flash_Memory_Read@i 0021                         ?_CC2500_ReadByte 0070  
                                  ltemp0 007E                                    ltemp1 0082  
                                  ltemp2 0086                                    ltemp3 0080  
         __size_of_setLED_Initialization 0011            __end_of_setLED_Initialization 1FB1  
                                  ttemp0 007E                                    ttemp1 0081  
                                  ttemp2 0084                                    ttemp3 0087  
                                  ttemp4 007F                             ?_setRF_Learn 0022  
                                  status 0003                                    wtemp0 007E  
                                  wtemp1 0080                                    wtemp2 0082  
                                  wtemp3 0084                                    wtemp4 0086  
                                  wtemp5 0088                                    wtemp6 007F  
                     _setRF_DimmerLights 098C              __size_of_Flash_Memory_Write 0031  
                      ?_CC2500_SIDLEMode 0070               __size_of_RF_Initialization 0004  
                         ?_RfPointSelect 0070                           setSw_Status@sw 0023  
       __size_of_DelayOff_Initialization 0008                setDimmerLights_Main@clear 0065  
                 ??_Flash_Memory_Erasing 0020                          _getPercentValue 17A5  
                     ??_CC2500_SIDLEMode 0024                          __initialization 0018  
                       ?_CC2500_PowerRST 0070                        ??_Sw_DimmerOnFunc 0062  
                      ??_setPercentValue 0059                             __end_of_main 1751  
                    ?_setRF_DimmerLights 005D                         __end_of_Fosc_Set 1DDB  
                       ?_CC2500_WriteREG 0022                                ??_ADC_Set 0020  
                __end_of_setDimmerLights 0DA6                     _setSw_Initialization 1E19  
                                 ??_main 0070                            ___fttol@sign1 0053  
                           ?_setLog_Code 0070                  _setControl_Lights_Table 0768  
                 ?_Buzzer_Initialization 0070        __size_of_DimmerIntrIOCPointSelect 0014  
                ??_DlyOff_Initialization 0022                               _Receive_OK 03E0  
              ?_DimmerIntrIOCPointSelect 0070                                ??_IOC_ISR 0073  
                              ??_IOC_Set 0020          __end_of_DimmerLightsPointSelect 1FC4  
                 ?_setDimmerLights_AdjRF 0070                                ??_INT_ISR 0074  
                 ?_setDimmerLights_AdjGo 0022                 __size_of_setRFSW_Control 0090  
                       ??_setRFSW_Status 0023                                ??_INT_Set 0020  
                ??_Switch_Initialization 0025                        i1RfPointSelect@rf 0071  
                   ??_setRF_DimmerLights 005E                              _DlyOff_Main 0C33  
                 ?_myMain_Initialization 0070                                   _ADCON0 009D  
                                 _ADCON1 009E                                ??_RF_Main 006C  
                                 _ADRESH 009C                                   _ADRESL 009B  
                       ___awdiv@dividend 0022                                ??_WDT_Set 0020  
                         setRF_Enable@rf 0023                         __end_of___awtoft 1269  
                                 _ANSELA 018C                                   _ANSELB 018D  
                                 _ANSELC 018E                         __end_of___ftpack 098C  
                                 _IOCBF2 1CB2                  _setDimmerLights_Trigger 1F3D  
                                 i1l6402 00AA                                   i1l6430 0114  
                                 i1l6406 00B1                                   i1l6424 00FB  
                                 i1l6432 011A                                   i1l6442 014D  
                                 i1l6426 0101                                   i1l6452 017C  
                                 i1l6454 0182                                   i1l6438 0136  
                                 i1l6446 0161                                   i1l6464 01B4  
                                 i1l6482 01E5                                   i1l6468 01BA  
                                 i1l6486 01EB                                   _FVRCON 0117  
                                 _PMADRH 0192                                   _PMADRL 0191  
                                 _PMDATH 0194                                   _PMDATL 0193  
                                 _PMCON2 0196                                   u526_25 0085  
                                 u616_25 1458                                   _OSCCON 0099  
                                 _TMR0IE 005D                                   _TMR0IF 005A  
                                 _IO_Set 1145                                   _WDTCON 0097  
                     DelayTime_1us@count 0020                    _Dimmer_Initialization 1DF4  
         __size_of_CC2500_PowerOnInitial 0015            __end_of_CC2500_PowerOnInitial 109E  
                                 _Dimmer 00B9                                   _DlySw1 00C7  
                                 _DlySw2 00CC               __end_of_Mcu_Initialization 1179  
                    __end_of_Buzzer_Main 1000                                   _Memory 00EC  
                                 _Timer0 00E9       __end_of_setDimmerLights_TriggerAdj 1F6D  
             _setDimmerLights_TriggerAdj 1F5D            setDimmerLights_Switch@command 0022  
                              ??___awdiv 0024                                ??___ftadd 0044  
           __size_of_DelayOffPointSelect 0017                                ??___ftdiv 0034  
                  setDimmerLights@lights 0026                                ??___ftmul 0034  
                              ??___fttol 004F             ?_Flash_Memory_Initialization 0070  
                        i1_RfPointSelect 1E3B              setDimmerLights_AdjRF@lights 0060  
                 ??_setDimmerLights_Main 0065                                   _r_data 00C5  
                                 _s_data 00C6                                   _setLED 086F  
                                 _myMain 00EB                         _DimmerLightsIntr 007A  
                  ?_setSw_Initialization 0070                    setDimmerLights@status 0024  
                       ___awdiv@quotient 0027                                   _setBuz 0BBC  
       ??_setDimmerLights_Initialization 0022          ?_setDimmerLights_Initialization 0070  
                  ___ftmul@f3_as_product 0039             ??_getDimmerLights_StatusFlag 0020  
                              ??_my_Main 002D      __end_of_setDimmerLights_IntrControl 0217  
            _setDimmerLights_IntrControl 004C                 Flash_Memory_Read@address 0022  
                            _Buz_Counter 1F0D                        RfSWPointSelect@sw 0021  
                       ??_setRF_RxStatus 0073                    __end_of_SwPointSelect 1FEC  
                          ?_setRF_Enable 0022                          _RfSWPointSelect 109E  
           __size_of_Flash_Memory_Modify 006D        setDimmerLights_IntrControl@lights 0076  
            __size_of_DimmerLights_Close 0014                  __size_of_LedPointSelect 0022  
                    Flash_Memory_Write@i 0021             __size_of_Flash_Memory_Unlock 0009  
                             _TouchPower 1DE3                        ?_Sw_DimmerAdjFunc 0070  
            __size_of_CC2500_InitPATable 001F                      CC2500_TxData@loop_e 0025  
                __end_of_getPercentValue 1800         __end_of_CC2500_registers_address 102F  
                __end_of__initialization 0048                          ??_RfPointSelect 0020  
            setDimmerLights_AdjGo@lights 0023                                ?_LED_Main 0070  
                             ___ftadd@f1 003E                               ___ftadd@f2 0041  
                     ??_Sw_DimmerAdjFunc 0024                      setSw_Enable@command 0022  
                             ___ftdiv@f1 0031                               ___ftdiv@f2 002E  
                             ___ftdiv@f3 0039                        ?_Sw_DimmerOffFunc 0070  
                             ___awtoft@c 0028             ?_DimmerLights_Initialization 0070  
                             ___ftmul@f1 002E                               ___ftmul@f2 0031  
                             ___fttol@f1 004B                           __pcstackCOMMON 0070  
         DimmerIntrIOCPointSelect@lights 0071                       ??_Sw_DimmerOffFunc 0062  
                           __pidataBANK3 1227                                ?_TMR0_ISR 0070  
                              ?_TMR0_Set 0070             __size_of_setDimmerLights_Adj 003E  
                     _LED_Initialization 1E96                ??_setControl_Lights_Table 0067  
                       ??_DelayTimejudge 0020              ?_getDimmerLights_StatusFlag 0070  
          ??_Flash_Memory_Initialization 005D                 __size_of_setRF_ReceiveGO 000D  
                       ?_setDimmerLights 0024                                ?_WDT_Main 0070  
               __end_of_setDimmerReClock 1E51                       __size_of_getRxData 004D  
                    ?_LED_Initialization 0070                        ?_CC2500_WriteByte 0070  
                         ??_setRF_Enable 0023                           _DimmerLights11 00BA  
                         _DimmerLights22 00BB                     __size_of_setLED_Main 0040  
              ??_setDimmerLights_Trigger 0023                       ??_CC2500_WriteByte 0020  
           setDimmerLights_Switch@lights 0023                               __pbssBANK1 00A0  
                             __pbssBANK2 0120                               __pbssBANK3 01C0  
                             __pbssBANK4 0220                                ?_Fosc_Set 0070  
                            _Buzzer_Main 0F5E                        ??_setRFSW_Control 0062  
                 ?_Dimmer_Initialization 0070                                  ?_IO_Set 0070  
                             ??_LED_Main 0025                            ?_setMemory_GO 0070  
                        __CFG_VCAPEN$OFF 0000                  _DelayOff_Initialization 1E09  
                             __pnvCOMMON 007D                            ??_Switch_Main 006A  
                         DelayTime_1us@i 0022                           DelayTime_1us@j 0024  
                   ??_LED_Initialization 0025                             _DimmerLights 0079  
                      LedPointSelect@led 0021                  __end_ofi1_RfPointSelect 1E46  
                     __size_of_setINT_GO 0009                   __size_of_DelayOff_Main 0008  
                   __size_of_setRF_Learn 000F                              setBuz@count 002C  
                             __pmaintext 1704                      _CC2500_WriteCommand 1F1D  
       __size_of_DimmerLightsPointSelect 0013                         ??_setDelayOff_GO 0025  
          ??_DimmerLights_Initialization 0024                               ??_TMR0_ISR 0077  
                             ??_TMR0_Set 0020                               __pintentry 0004  
                 ??_setSw_Initialization 0024                            ?_setSw_Enable 0070  
                     __size_of_setTxData 00A1                  ?_setDimmerLights_Switch 0022  
                   Sw_DimmerAdjFunc@Idle 0024                                  ?_setLED 0022  
                 __size_of_DelayTime_1us 0026                                  _ADC_Set 1DFB  
                                ?_setBuz 0029                                ?___awtoft 0028  
                              ?___ftpack 0020                               ??_WDT_Main 0020  
           __end_of_setRF_Initialization 1E09                            ?_setSw_Status 0022  
                     _setRFSW_AdjControl 151C                  __end_of_RfSWPointSelect 10B4  
                      Sw_DimmerOnFunc@sw 0063                                  _IOC_ISR 1F7E  
                                _IOC_Set 1EC8                     __size_of_setLog_Code 0047  
                                _INT_ISR 1F6D                                  _INT_Set 1DE8  
                   ?_CC2500_WriteCommand 0070                        _Flash_Memory_Main 15A0  
                      _Flash_Memory_Read 112C              ?_setDimmerLights_IntrIOC_GO 0070  
                 __size_of_CC2500_RxData 005E                   __size_of_CC2500_TxData 0044  
                    ?_setRFSW_AdjControl 0070                              setTxData@rf 0023  
                                _RF_Data 00A0                                  _RF_Main 1DDF  
                     ?_Flash_Memory_Main 0070                       ?_Flash_Memory_Read 0070  
                                _WDT_Set 10E2          __end_of_setControl_Lights_Table 07FA  
                             ??_Fosc_Set 0020                              ?_TouchPower 0070  
                        _Sw_DimmerOnFunc 0AD6                          _setPercentValue 162A  
                          setLog_Code@rf 002E                           ??_setMemory_GO 0020  
                       ?_getPercentValue 0070                                  _Dimmer1 00E2  
           __end_of_CC2500_FrequencyCabr 1E7E                          __size_of_IO_Set 0019  
                    ??_Flash_Memory_Main 0027                      ??_Flash_Memory_Read 0020  
                                _VarLED1 00DA                                  _VarLED2 00DE  
                      __end_of_getRxData 1704                 _CC2500_registers_address 1000  
       __end_of_DimmerIntrIOCPointSelect 1FD8                           RF_RxDisable@rf 0024  
        __end_of_setDimmerLights_Trigger 1F4D                     ??_setRFSW_AdjControl 0064  
         __end_of_setDimmerLights_Switch 1F3D                                  ___awdiv 1751  
                                ___ftadd 0371                           ??_setSw_Enable 0022  
                                ___ftdiv 06BF                                  ___ftmul 055D  
                                ___fttol 0DA6                      __end_of_Switch_Main 1E29  
                ??_Buzzer_Initialization 0020                                  __myMain 01C0  
                             ??___awtoft 002B                               ??___ftpack 0025  
                        __size_of_setLED 005E                     setRFSW_AdjControl@sw 0066  
                        __size_of_setBuz 0077                           ??_setSw_Status 0023  
                                __ptext1 0B48                                  __ptext2 11B0  
                                __ptext3 13A6                                  __ptext4 1075  
                                __ptext5 1194                                  __ptext6 0002  
                                __ptext7 1E21                                  __ptext8 0217  
                                __ptext9 1066                  ??_setDimmerLights_AdjRF 005F  
                ??_setDimmerLights_AdjGo 0023                __size_of_CC2500_SIDLEMode 0004  
                    Sw_DimmerOnFunc@Idle 0062                    _DimmerIntrPointSelect 0800  
                           __size_of_ISR 0012                __end_of_Flash_Memory_Main 15E5  
              __end_of_Flash_Memory_Read 1145                               _setRF_Main 0611  
                ??_myMain_Initialization 0020                            _DelayOff_Main 1E11  
                      _DimmerLights_Main 1E67                                  _my_Main 0B48  
                      __end_of_setINT_GO 1E3B           __size_of_DlyOff_Initialization 000B  
                  ??_CC2500_WriteCommand 0022            __end_of_DlyOff_Initialization 1E67  
                      ??_setRF_ReceiveGO 0073               __end_of_CC2500_ClearRXFIFO 1DCF  
             __end_of_CC2500_ClearTXFIFO 1DD3            DimmerLightsPointSelect@lights 0021  
                           ?_DlyOff_Main 0070                       ?_DimmerLights_Main 0070  
                                _product 007D                           _LedPointSelect 1269  
                    _DelayOffPointSelect 10B4                                  clrloop0 07FB  
         __size_of_Switch_Initialization 000D            __end_of_Switch_Initialization 1EEF  
                   end_of_initialization 0048                ??_DelayOff_Initialization 0023  
                      _CC2500_InitSetREG 12F8                            _DelayTime_1us 12D2  
                      __end_of_setTxData 0F5E               __end_of_Flash_Memory_Write 1434  
                                init_ram 1DEE                       ?_CC2500_InitSetREG 0070  
                    ??_DimmerLights_Main 0067                     Flash_Memory_Read@ret 0023  
                                initloop 1DEF                               _setSw_Main 0217  
                  CC2500_ReadByte@loop_b 0021                        _CC2500_ReadStatus 1179  
                   Flash_Memory_Modify@i 0026                    _setLED_Initialization 1FA0  
                       ?i1_RfPointSelect 0070                       ?_CC2500_ReadStatus 0070  
                       setRFSW_Status@sw 0023                 __size_of_CC2500_ReadByte 001D  
                          _CC2500_RxData 08CD                            _CC2500_TxData 155C  
                    ??_CC2500_InitSetREG 0025                     __end_of_setRF_Enable 13D3  
            ?_setDimmerLights_TriggerAdj 0022            __size_of_Flash_Memory_Erasing 000C  
                   ?_DelayOffPointSelect 0070                      _Flash_Memory_Modify 09F8  
                           __pstringtext 1000                      _Flash_Memory_Unlock 1E29  
                    ??_CC2500_ReadStatus 0022                   setRF_Initialization@rf 0070  
       getDimmerLights_StatusFlag@Status 0021                  CC2500_InitSetREG@loop_c 0028  
                    __size_of_TouchPower 0005                 setLED_Initialization@led 0024  
                 setSw_Initialization@sw 0024                __end_of_DimmerLights_Main 1E72  
                     _Mcu_Initialization 115E                 __size_of_CC2500_PowerRST 0030  
                         ?_DelayOff_Main 0070                         ?_RfSWPointSelect 0070  
                        _setSw_Main$5080 0068                          _setSw_Main$5079 0067  
                       __CFG_FOSC$INTOSC 0000                             ?_Buz_Counter 0070  
                 __end_of_LedPointSelect 128B                  __end_of_Sw_DimmerOnFunc 0B48  
                __end_of_setPercentValue 1670                 __size_of_CC2500_WriteREG 0019  
              __end_of_CC2500_InitSetREG 1322                      ?_Mcu_Initialization 0070  
                   ?_Flash_Memory_Modify 0070              __size_of_setRF_DimmerLights 006C  
                         ?_DelayTime_1us 0020                      _setDimmerLights_Adj 149E  
                   ?_Flash_Memory_Unlock 0070                __end_of_CC2500_ReadStatus 1194  
                          ?_RF_RxDisable 0070                              ___ftdiv@exp 003C  
                         __end_of_IO_Set 115E                     _setRF_Initialization 1E02  
                            _Switch_Main 1E21                        __size_of_LED_Main 000C  
                         ?_CC2500_RxData 0070                           ?_CC2500_TxData 0070  
                _DimmerLightsPointSelect 1FB1                              ___ftmul@exp 0038  
                  _CC2500_PowerOnInitial 1089                     ??_Mcu_Initialization 0021  
                  ??_DelayOffPointSelect 0020                            ?_WDT_Clearing 0070  
                   ?_setDimmerLights_Adj 0062                __size_of_Sw_DimmerAdjFunc 0045  
                   setRF_DimmerLights@on 005D                 _DimmerIntrIOCPointSelect 1FC4  
                           setRF_Main@rf 006A                        __size_of_TMR0_ISR 0035  
                 ?_DimmerIntrPointSelect 0070                        __size_of_TMR0_Set 000D  
                   __end_of_setMemory_GO 1227            __size_of_setDimmerLights_Main 007B  
                         __end_of_setLED 08CD                           __end_of_setBuz 0C33  
        _getDimmerLights_StatusFlag$1916 0022                     _CC2500_FrequencyCabr 1E72  
              __size_of_Sw_DimmerOffFunc 0071               __size_of_Flash_Memory_Main 0045  
             __size_of_Flash_Memory_Read 0019                              ?_setRF_Main 0070  
                        _setRFSW_Control 0E2D                        __size_of_WDT_Main 001C  
                      ?_setDimmerReClock 0070                      start_initialization 0018  
                      _setRF_DimmerValue 1469                          ?_LedPointSelect 0070  
             __end_of_DimmerLights_Close 2000                              __end_of_ISR 0016  
                  ??_Flash_Memory_Modify 0024                       ??_setDimmerReClock 0073  
                     ?_setRF_DimmerValue 0070               __end_of_CC2500_InitPATable 1208  
                  ??_Flash_Memory_Unlock 0020                  ??_Dimmer_Initialization 0020  
                         ??_RF_RxDisable 0024                     __end_of_setSw_Enable 11CC  
                        RfPointSelect@rf 0021                             ?_Buzzer_Main 0070  
                               ??_IO_Set 0020                                _VarErrLED 00D6  
                            ?_setSw_Main 0070                      ??_setRF_DimmerValue 0061  
                 ?_setLED_Initialization 0070                     __end_of_setSw_Status 1F0D  
                     Sw_DimmerAdjFunc@sw 0025                    ?_setRF_Initialization 0070  
                      __size_of_Fosc_Set 0004                                _VarMemory 0220  
                __size_of_setRFSW_Status 000F                    __end_of_RfPointSelect 1E8A  
              __size_of_CC2500_WriteByte 0019                                _VarTimer0 015C  
                         ??_WDT_Clearing 0020                                _Rx_Length 00C1  
                setRF_DimmerValue@lights 0063                    ??_setDimmerLights_Adj 0063  
                 __size_of_SwPointSelect 0014                                _Tx_Length 00C3  
                            __pdataBANK3 01A0                                 ??_setLED 0023  
                               ?_ADC_Set 0070                                 ??_setBuz 002B  
                        ??_DelayOff_Main 0065                        ??_CC2500_ReadByte 0020  
                       _CC2500_SIDLEMode 1DD3               __size_of_DimmerLights_Main 000B  
              __end_of_setRF_DimmerValue 149E                    ?_CC2500_FrequencyCabr 0070  
                       setINT_GO@command 0020                            ??_setLED_Main 0022  
                      __size_of___awtoft 0022                        __size_of___ftpack 0061  
                               ?_IOC_ISR 0070                          _setRF_Main$4260 006B  
                            __pbssCOMMON 0078                                 ?_IOC_Set 0070  
                              ___latbits 0003                                 ?_INT_ISR 0070  
                    setRF_Enable@command 0022                         ?_Sw_DimmerOnFunc 0070  
                          __pcstackBANK0 0020                                 ?_INT_Set 0070  
                       ?_setPercentValue 0070                          ??_DelayTime_1us 0022  
             __size_of_CC2500_InitSetREG 002A                 __size_of_setDimmerLights 007F  
                          DlyOff_Main@sw 0064                        ??_CC2500_PowerRST 0026  
                               ?_RF_Main 0070                                 ?_WDT_Set 0070  
                           ??_TouchPower 0020                     __size_of_DlyOff_Main 0079  
             __size_of_CC2500_ReadStatus 001B                            ??_setRF_Learn 0023  
                      ??_CC2500_WriteREG 0023                            _DimmerLights1 0120  
                          _DimmerLights2 012F                    CC2500_WriteREG@w_addr 0024  
                  setDelayOff_GO@command 0023                ??_DimmerLightsPointSelect 0020  
                  __size_of_setRF_Enable 002D                          ??_CC2500_RxData 0024  
                __size_of_setRF_RxStatus 000D                          ??_CC2500_TxData 0024  
                              __pnvBANK1 00E9              __size_of_LED_Initialization 000C  
                 ?_CC2500_PowerOnInitial 0070                      __size_of_setRF_Main 00AE  
                  DelayOffPointSelect@sw 0021                               setBuz@time 0029  
                    setDelayOff_GO@value 0024                 ?_setControl_Lights_Table 0070  
    __end_of_Flash_Memory_Initialization 055D              _Flash_Memory_Initialization 0467  
                               ?___awdiv 0020                                __ptext100 12D2  
                              __ptext101 1DCF                                __ptext110 0800  
                              __ptext102 1DCB                                __ptext111 1F0D  
                              __ptext103 1F1D                                __ptext112 1F7E  
                              __ptext104 10FA                                __ptext113 1E46  
                              __ptext105 0F5E                                __ptext114 12AD  
                              __ptext106 1E51                                __ptext115 1FC4  
                              __ptext116 1F6D                                __ptext108 1434  
                              __ptext117 1EBB                                __ptext109 004C  
                               ?___ftadd 003E                                __ptext118 1EAE  
                              __ptext119 1E3B                                _getRxData 16B7  
                               ?___ftdiv 002E                                 ?___ftmul 002E  
                               ?___fttol 004B                  __end_of_setRFSW_Control 0EBD  
                        _setRF_ReceiveGO 1EAE            __size_of_setSw_Initialization 0008  
         __size_of_Buzzer_Initialization 000B            __end_of_Buzzer_Initialization 1E5C  
                       getPercentValue@i 005C                         setPercentValue@i 005A  
                          ??_setLog_Code 002D                       __end_of_TouchPower 1DE8  
               ?_setDimmerLights_Trigger 0022                          DelayTimejudge@i 0022  
                    __size_of_setSw_Main 015A             CC2500_ReadStatus@status_addr 0023  
         __size_of_setDimmerLights_AdjRF 0022           __size_of_setDimmerLights_AdjGo 0010  
          __end_of_setDimmerLights_AdjRF 12AD            __end_of_setDimmerLights_AdjGo 1F5D  
                 CC2500_WriteByte@loop_a 0021                                 ?_my_Main 0070  
                              _r_address 00C4           __size_of_myMain_Initialization 0014  
           __end_of_CC2500_patable_vaule 1066            __end_of_myMain_Initialization 1089  
                           _setRF_Enable 13A6                  __size_of_DelayTimejudge 002C  
                          _SwPointSelect 1FD8                     __size_of_Buz_Counter 0010  
                     Sw_DimmerOffFunc@sw 0064                                _setINT_GO 1E32  
                    __end_of_setLED_Main 151C                      _DimmerLightsIntrIOC 00BC  
                 ??_setRF_Initialization 0020                        _CC2500_rfSettings 102F  
                               _LED_Main 1EA2                          SwPointSelect@sw 0021  
                              clear_ram0 07FA                 CC2500_InitPATable@loop_d 0027  
                              _setTxData 0EBD      __end_of_DimmerLights_Initialization 10E2  
            _DimmerLights_Initialization 10CB                       _CC2500_ClearRXFIFO 1DCB  
                     _CC2500_ClearTXFIFO 1DCF           setDimmerLights_Trigger@command 0022  
               setRF_DimmerLights@lights 0061                                 _GO_nDONE 04E9  
                    __end_of_setRF_Learn 1075                 __size_of_getPercentValue 005B  
               setRF_DimmerLights@status 0060                   setRF_ReceiveGO@command 0072  
            __size_of_setRFSW_AdjControl 0040                    __size_of_setMemory_GO 001F  
                     _Flash_Memory_Write 1403                               ?_getRxData 0070  
                               _TMR0_ISR 1434                   CC2500_InitSetREG@temp1 0026  
                 CC2500_InitSetREG@temp2 0027                        setRF_ReceiveGO@rf 0073  
                               _TMR0_Set 1ED5                         _Sw_DimmerAdjFunc 15E5  
                    ?_CC2500_ClearRXFIFO 0070                      ?_CC2500_ClearTXFIFO 0070  
      setDimmerLights_TriggerAdj@command 0022                                 _RF_Count 00B5  
                   __end_of_RF_RxDisable 134D              __end_of_CC2500_WriteCommand 1F2D  
                 ??_CC2500_FrequencyCabr 0026                                 _WDT_Main 1194  
                DlyOff_Initialization@sw 0022                         __size_of_ADC_Set 0007  
             __size_of_setRF_DimmerValue 0035                      ?_Flash_Memory_Write 0070  
                       _Sw_DimmerOffFunc 0A65                  __size_of_setDelayOff_GO 005D  
                  __size_of_setSw_Enable 001C                                 _DelayOff 00B8  
                           setSw_Main@sw 0069         setDimmerLights_IntrIOC_GO@lights 0072  
                       __size_of_IOC_ISR 0011             ?_setDimmerLights_IntrControl 0070  
                       __size_of_IOC_Set 000D             __end_of_Flash_Memory_Erasing 1E96  
                         ?_SwPointSelect 0070                         __size_of_INT_ISR 0011  
                         setLED_Main@led 0024                     __end_of_WDT_Clearing 0004  
                       __size_of_INT_Set 0006                      __end_of_setLog_Code 16B7  
                  _DlyOff_Initialization 1E5C                    __size_of_setSw_Status 000F  
                             ?_setINT_GO 0070                     ??_CC2500_ClearRXFIFO 0024  
                   ??_CC2500_ClearTXFIFO 0024                __end_of_CC2500_rfSettings 105E  
                       __size_of_RF_Main 0004                                 _Fosc_Set 1DD7  
                       __size_of_WDT_Set 0018                    _Switch_Initialization 1EE2  
                   ??_Flash_Memory_Write 0020                        ??_setDimmerLights 0025  
                         _setRFSW_Status 1EEF                             _setMemory_GO 1208  
                   __size_of_Buzzer_Main 00A2                               ?_setTxData 0070  
                           ?_Switch_Main 0070               ??_DimmerIntrIOCPointSelect 0070  
                       _CC2500_WriteByte 10FA             Flash_Memory_Initialization@i 005E  
                __end_of_setRF_ReceiveGO 1EBB                        setRFSW_Control@sw 0063  
                              setLED@led 0023                  ??_DimmerIntrPointSelect 0070  
                       __size_of___awdiv 0054                         __size_of___ftadd 00F6  
                       ?_setRFSW_Control 0070                         __size_of___ftdiv 00A9  
                           _setSw_Enable 11B0                         __size_of___ftmul 00B4  
                       __size_of___fttol 0087                 __size_ofi1_RfPointSelect 000B  
                               ___awtoft 1247                         ??_LedPointSelect 0020  
                               ___ftpack 092B                             _setSw_Status 1EFE  
                           ??_setRF_Main 0069                     CC2500_WriteREG@value 0022  
                            _setLED_Main 14DC                    setRFSW_Status@command 0022  
             __end_of_setRF_DimmerLights 09F8                 ?_DelayOff_Initialization 0070  
                       setDelayOff_GO@sw 0027                         __size_of_my_Main 0074  
                               __ptext10 0AD6                                 __ptext11 0A65  
                               __ptext20 16B7                                 __ptext12 15E5  
                               __ptext21 1670                                 __ptext13 1F5D  
                               __ptext30 055D                                 __ptext22 0768  
                               __ptext14 1F4D                                 __ptext31 0371  
                               __ptext23 0E2D                                 __ptext15 1EE2  
                               __ptext40 115E                                 __ptext32 1322  
                               __ptext24 0812                                 __ptext16 1E19  
                               __ptext41 10E2                                 __ptext33 1E32  
                               __ptext25 134D                                 __ptext17 1DE3  
                               __ptext50 1E96                                 __ptext42 1ED5  
                               __ptext34 155C                                 __ptext26 151C  
                               __ptext18 1DDF                                 __ptext51 1FA0  
                               __ptext43 1145                                 __ptext35 08CD  
                               __ptext27 1469                                 __ptext19 0611  
                               __ptext60 0CAC                                 __ptext52 15A0  
                               __ptext44 1EC8                                 __ptext36 1179  
                               __ptext28 128B                                 __ptext61 149E  
                               __ptext53 09F8                                 __ptext45 1DE8  
                               __ptext37 11CC                                 __ptext29 17A5  
                               __ptext70 1DF4                                 __ptext62 0D27  
                               __ptext54 1E8A                                 __ptext46 1DD7  
                               __ptext38 1DDB                                 __ptext71 1E11  
                               __ptext63 086F                                 __ptext55 0467  
                               __ptext47 1DFB                                 __ptext39 1E02  
                               __ptext80 06BF                                 __ptext72 0C33  
                               __ptext64 1269                                 __ptext56 1403  
                               __ptext48 1EA2                                 __ptext81 1247  
                               __ptext73 0EBD                                 __ptext65 1FEC  
                               __ptext57 1E29                                 __ptext49 14DC  
                               __ptext90 1E09                                 __ptext82 092B  
                               __ptext74 1E7E                                 __ptext66 1208  
                               __ptext58 112C                                 __ptext91 1E5C  
                               __ptext83 1EEF                                 __ptext75 1EFE  
                               __ptext67 1F8F                                 __ptext59 1E67  
                               __ptext92 10B4                                 __ptext84 109E  
                               __ptext76 1FD8                                 __ptext68 10CB  
                               __ptext93 1089                                 __ptext85 1F3D  
                               __ptext77 098C                                 __ptext69 1379  
                               __ptext94 1DD3                                 __ptext86 1F2D  
                               __ptext78 162A                                 __ptext95 13D3  
                               __ptext87 1FB1                                 __ptext79 0DA6  
                               __ptext96 12F8                                 __ptext88 0BBC  
                               __ptext97 11E9                                 __ptext89 1751  
                               __ptext98 1113                                 __ptext99 1E72  
                               __product 01A0            ??_setDimmerLights_IntrControl 0072  
                ??_setLED_Initialization 0024                 __size_of_RfSWPointSelect 0016  
         __size_of_Dimmer_Initialization 0007                   __end_of_setRFSW_Status 1EFE  
          __end_of_Dimmer_Initialization 1DFB             __end_of_setDimmerLights_Main 0D27  
                           ??_setSw_Main 0065                            setLED@command 0022  
                          __size_of_main 004D                              _setRF_Learn 1066  
               __end_of_CC2500_SIDLEMode 1DD7                           _setRF_RxStatus 1EBB  
             setDimmerLights_Main@lights 0066              __end_of_DelayOffPointSelect 10CB  
             CC2500_WriteCommand@command 0023                       _DimmerLights_Close 1FEC  
               ??_setDimmerLights_Switch 0023                __size_of_setDimmerReClock 000B  
                        _CC2500_ReadByte 11CC                       _CC2500_InitPATable 11E9  
    __size_of_getDimmerLights_StatusFlag 0011            setDimmerLights_Trigger@lights 0023  
                     __end_of_setRF_Main 06BF              __size_of_Mcu_Initialization 001B  
                   _CC2500_patable_vaule 105E                              ??_getRxData 0068  
                    ?_DimmerLights_Close 0070         setDimmerLights_TriggerAdj@lights 0023  
                               main@argc 006C                                 main@argv 006E  
                    ?_CC2500_InitPATable 0070                          _CC2500_PowerRST 13D3  
            __end_of_Flash_Memory_Modify 0A65                        ??_getPercentValue 0059  
                            _setLog_Code 1670                    setRF_RxStatus@command 0072  
            __end_of_Flash_Memory_Unlock 1E32                          ??_SwPointSelect 0020  
                        _CC2500_WriteREG 1113                       __end_of_setSw_Main 0371  
                          _Transceive_OK 03E1                   ?_DlyOff_Initialization 0070  
                         _DelayTimejudge 134D                              pic14e$flags 007E  
                   ??_DimmerLights_Close 0023             ??_setDimmerLights_IntrIOC_GO 0072  
                            ??_setINT_GO 0020                                 intlevel1 0000  
                   ??_CC2500_InitPATable 0025                   ?_Switch_Initialization 0070  
                 __end_of_setRF_RxStatus 1EC8                          ?_setRFSW_Status 0022  
                ??_CC2500_PowerOnInitial 0029   __end_of_setDimmerLights_Initialization 13A6  
__size_of_setDimmerLights_Initialization 002D           _setDimmerLights_Initialization 1379  
            __end_of_setDimmerLights_Adj 14DC                              ??_setTxData 0022  
                       ?_setRF_ReceiveGO 0072                   CC2500_InitPATable@temp 0026  
                  __size_of_RF_RxDisable 002B                        _RF_Initialization 1DDB  
   __size_of_setDimmerLights_IntrControl 01CB                     _Flash_Memory_Erasing 1E8A  
                     ?_RF_Initialization 0070                               _SPI0Buffer 00C2  
        __end_of_DelayOff_Initialization 1E11      __size_of_setDimmerLights_IntrIOC_GO 0025  
                             _OPTION_REG 0095                    __size_of_WDT_Clearing 0002  
                  __end_of_DelayOff_Main 1E19                      ??_RF_Initialization 0021  
                            getRxData@rf 0068                           _setDelayOff_GO 0812  
       __size_of_setControl_Lights_Table 0092                   __end_of_DelayTimejudge 1379  
                 __size_of_RfPointSelect 000C                        ??i1_RfPointSelect 0070  
   __size_of_Flash_Memory_Initialization 00F6                            ??_DlyOff_Main 0062  
                  __end_of_DelayTime_1us 12F8                 __end_of_Sw_DimmerAdjFunc 162A  
                __end_of_CC2500_ReadByte 11E9             __end_of_setSw_Initialization 1E21  
                        ?_setRF_RxStatus 0072                     getPercentValue@value 005B  
                           _RF_RxDisable 1322               __end_of_LED_Initialization 1EA2  
       __size_of_setDimmerLights_Trigger 0010                 __size_of_Sw_DimmerOnFunc 0072  
               __size_of_setPercentValue 0046                     setPercentValue@value 0059  
              __end_of_RF_Initialization 1DDF                 __end_of_Sw_DimmerOffFunc 0AD6  
        __size_of_setDimmerLights_Switch 0010                        ??_RfSWPointSelect 0020  
                       setRF_RxStatus@rf 0073                    __end_of_CC2500_RxData 092B  
                  __end_of_CC2500_TxData 15A0                      setSw_Status@command 0022  
                __end_of_CC2500_PowerRST 1403  
