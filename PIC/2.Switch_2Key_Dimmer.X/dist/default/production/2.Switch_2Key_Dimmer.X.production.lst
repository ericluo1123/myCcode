

Microchip Technology PIC LITE Macro Assembler V1.32 build 58300 
                                                                                               Thu Oct 09 11:04:54 2014

Microchip Technology Omniscient Code Generator (Lite mode) build 58300
     1                           	processor	16F1518
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK3,global,class=CODE,delta=2
     5                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     6                           	psect	nvCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1
     8                           	psect	cinit,global,class=CODE,merge=1,delta=2
     9                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
    10                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    13                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    14                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1
    15                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    16                           	psect	clrtext,global,class=CODE,delta=2
    17                           	psect	inittext,global,class=CODE,delta=2
    18                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    19                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    20                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    21                           	psect	text1,local,class=CODE,merge=1,delta=2
    22                           	psect	text2,local,class=CODE,merge=1,delta=2
    23                           	psect	text3,local,class=CODE,merge=1,delta=2
    24                           	psect	text4,local,class=CODE,merge=1,delta=2
    25                           	psect	text5,local,class=CODE,merge=1,delta=2
    26                           	psect	text6,local,class=CODE,merge=1,delta=2
    27                           	psect	text7,local,class=CODE,merge=1,delta=2
    28                           	psect	text8,local,class=CODE,merge=1,delta=2
    29                           	psect	text9,local,class=CODE,merge=1,delta=2
    30                           	psect	text10,local,class=CODE,merge=1,delta=2
    31                           	psect	text11,local,class=CODE,merge=1,delta=2
    32                           	psect	text12,local,class=CODE,merge=1,delta=2
    33                           	psect	text13,local,class=CODE,merge=1,delta=2
    34                           	psect	text14,local,class=CODE,merge=1,delta=2
    35                           	psect	text15,local,class=CODE,merge=1,delta=2
    36                           	psect	text16,local,class=CODE,merge=1,delta=2
    37                           	psect	text17,local,class=CODE,merge=1,delta=2
    38                           	psect	text18,local,class=CODE,merge=1,delta=2
    39                           	psect	text19,local,class=CODE,merge=1,delta=2
    40                           	psect	text20,local,class=CODE,merge=1,delta=2
    41                           	psect	text21,local,class=CODE,merge=1,delta=2
    42                           	psect	text22,local,class=CODE,merge=1,delta=2
    43                           	psect	text23,local,class=CODE,merge=1,delta=2
    44                           	psect	text24,local,class=CODE,merge=1,delta=2
    45                           	psect	text25,local,class=CODE,merge=1,delta=2
    46                           	psect	text26,local,class=CODE,merge=1,delta=2
    47                           	psect	text27,local,class=CODE,merge=1,delta=2
    48                           	psect	text28,local,class=CODE,merge=1,delta=2
    49                           	psect	text29,local,class=CODE,merge=1,delta=2
    50                           	psect	text30,local,class=CODE,merge=1,delta=2
    51                           	psect	text31,local,class=CODE,merge=1,delta=2
    52                           	psect	text32,local,class=CODE,merge=1,delta=2
    53                           	psect	text33,local,class=CODE,merge=1,delta=2
    54                           	psect	text34,local,class=CODE,merge=1,delta=2
    55                           	psect	text35,local,class=CODE,merge=1,delta=2
    56                           	psect	text36,local,class=CODE,merge=1,delta=2
    57                           	psect	text37,local,class=CODE,merge=1,delta=2
    58                           	psect	text38,local,class=CODE,merge=1,delta=2
    59                           	psect	text39,local,class=CODE,merge=1,delta=2
    60                           	psect	text40,local,class=CODE,merge=1,delta=2
    61                           	psect	text41,local,class=CODE,merge=1,delta=2
    62                           	psect	text42,local,class=CODE,merge=1,delta=2
    63                           	psect	text43,local,class=CODE,merge=1,delta=2
    64                           	psect	text44,local,class=CODE,merge=1,delta=2
    65                           	psect	text45,local,class=CODE,merge=1,delta=2
    66                           	psect	text46,local,class=CODE,merge=1,delta=2
    67                           	psect	text47,local,class=CODE,merge=1,delta=2
    68                           	psect	text48,local,class=CODE,merge=1,delta=2
    69                           	psect	text49,local,class=CODE,merge=1,delta=2
    70                           	psect	text50,local,class=CODE,merge=1,delta=2
    71                           	psect	text51,local,class=CODE,merge=1,delta=2
    72                           	psect	text52,local,class=CODE,merge=1,delta=2
    73                           	psect	text53,local,class=CODE,merge=1,delta=2
    74                           	psect	text54,local,class=CODE,merge=1,delta=2
    75                           	psect	text55,local,class=CODE,merge=1,delta=2
    76                           	psect	text56,local,class=CODE,merge=1,delta=2
    77                           	psect	text57,local,class=CODE,merge=1,delta=2
    78                           	psect	text58,local,class=CODE,merge=1,delta=2
    79                           	psect	text59,local,class=CODE,merge=1,delta=2
    80                           	psect	text60,local,class=CODE,merge=1,delta=2
    81                           	psect	text61,local,class=CODE,merge=1,delta=2
    82                           	psect	text62,local,class=CODE,merge=1,delta=2
    83                           	psect	text63,local,class=CODE,merge=1,delta=2
    84                           	psect	text64,local,class=CODE,merge=1,delta=2
    85                           	psect	text65,local,class=CODE,merge=1,delta=2
    86                           	psect	text66,local,class=CODE,merge=1,delta=2
    87                           	psect	text67,local,class=CODE,merge=1,delta=2
    88                           	psect	text68,local,class=CODE,merge=1,delta=2
    89                           	psect	text69,local,class=CODE,merge=1,delta=2
    90                           	psect	text70,local,class=CODE,merge=1,inline,delta=2
    91                           	psect	text71,local,class=CODE,merge=1,delta=2
    92                           	psect	text72,local,class=CODE,merge=1,delta=2
    93                           	psect	text73,local,class=CODE,merge=1,delta=2
    94                           	psect	text74,local,class=CODE,merge=1,delta=2
    95                           	psect	text75,local,class=CODE,merge=1,delta=2
    96                           	psect	text76,local,class=CODE,merge=1,delta=2
    97                           	psect	text77,local,class=CODE,merge=1,delta=2
    98                           	psect	text78,local,class=CODE,merge=1,delta=2
    99                           	psect	text79,local,class=CODE,merge=1,delta=2
   100                           	psect	text80,local,class=CODE,merge=1,delta=2
   101                           	psect	text81,local,class=CODE,merge=1,delta=2
   102                           	psect	text82,local,class=CODE,merge=1,delta=2
   103                           	psect	text83,local,class=CODE,merge=1,delta=2
   104                           	psect	text84,local,class=CODE,merge=1,delta=2
   105                           	psect	text85,local,class=CODE,merge=1,delta=2
   106                           	psect	text86,local,class=CODE,merge=1,delta=2
   107                           	psect	text87,local,class=CODE,merge=1,delta=2
   108                           	psect	text88,local,class=CODE,merge=1,delta=2
   109                           	psect	text89,local,class=CODE,merge=1,delta=2
   110                           	psect	text90,local,class=CODE,merge=1,delta=2
   111                           	psect	text91,local,class=CODE,merge=1,delta=2
   112                           	psect	text92,local,class=CODE,merge=1,delta=2
   113                           	psect	text93,local,class=CODE,merge=1,delta=2
   114                           	psect	text94,local,class=CODE,merge=1,delta=2
   115                           	psect	text95,local,class=CODE,merge=1,delta=2
   116                           	psect	text96,local,class=CODE,merge=1,delta=2
   117                           	psect	text97,local,class=CODE,merge=1,delta=2
   118                           	psect	text98,local,class=CODE,merge=1,delta=2
   119                           	psect	text99,local,class=CODE,merge=1,delta=2
   120                           	psect	text100,local,class=CODE,merge=1,delta=2
   121                           	psect	text101,local,class=CODE,merge=1,delta=2
   122                           	psect	text102,local,class=CODE,merge=1,delta=2
   123                           	psect	text103,local,class=CODE,merge=1,delta=2
   124                           	psect	text104,local,class=CODE,merge=1,delta=2
   125                           	psect	text105,local,class=CODE,merge=1,delta=2
   126                           	psect	text106,local,class=CODE,merge=1,delta=2
   127                           	psect	intentry,global,class=CODE,delta=2
   128                           	psect	text108,local,class=CODE,merge=1,delta=2
   129                           	psect	text109,local,class=CODE,merge=1,inline,delta=2
   130                           	psect	text110,local,class=CODE,merge=1,inline,delta=2
   131                           	psect	text111,local,class=CODE,merge=1,delta=2
   132                           	psect	text112,local,class=CODE,merge=1,inline,delta=2
   133                           	psect	text113,local,class=CODE,merge=1,inline,delta=2
   134                           	psect	text114,local,class=CODE,merge=1,inline,delta=2
   135                           	psect	text115,local,class=CODE,merge=1,delta=2
   136                           	psect	text116,local,class=CODE,merge=1,delta=2
   137                           	psect	text117,local,class=CODE,merge=1,delta=2
   138                           	psect	text118,local,class=CODE,merge=1,delta=2
   139                           	dabs	1,0x7E,2
   140  0000                     	;# 
   141  0001                     	;# 
   142  0002                     	;# 
   143  0003                     	;# 
   144  0004                     	;# 
   145  0005                     	;# 
   146  0006                     	;# 
   147  0007                     	;# 
   148  0008                     	;# 
   149  0009                     	;# 
   150  000A                     	;# 
   151  000B                     	;# 
   152  000C                     	;# 
   153  000D                     	;# 
   154  000E                     	;# 
   155  0010                     	;# 
   156  0011                     	;# 
   157  0012                     	;# 
   158  0015                     	;# 
   159  0016                     	;# 
   160  0016                     	;# 
   161  0017                     	;# 
   162  0018                     	;# 
   163  0019                     	;# 
   164  001A                     	;# 
   165  001B                     	;# 
   166  001C                     	;# 
   167  008C                     	;# 
   168  008D                     	;# 
   169  008E                     	;# 
   170  0090                     	;# 
   171  0091                     	;# 
   172  0092                     	;# 
   173  0095                     	;# 
   174  0096                     	;# 
   175  0097                     	;# 
   176  0099                     	;# 
   177  009A                     	;# 
   178  009B                     	;# 
   179  009B                     	;# 
   180  009C                     	;# 
   181  009D                     	;# 
   182  009E                     	;# 
   183  010C                     	;# 
   184  010D                     	;# 
   185  010E                     	;# 
   186  0116                     	;# 
   187  0117                     	;# 
   188  011D                     	;# 
   189  018C                     	;# 
   190  018D                     	;# 
   191  018E                     	;# 
   192  0191                     	;# 
   193  0191                     	;# 
   194  0192                     	;# 
   195  0193                     	;# 
   196  0193                     	;# 
   197  0194                     	;# 
   198  0195                     	;# 
   199  0196                     	;# 
   200  0197                     	;# 
   201  0199                     	;# 
   202  019A                     	;# 
   203  019B                     	;# 
   204  019B                     	;# 
   205  019B                     	;# 
   206  019B                     	;# 
   207  019C                     	;# 
   208  019C                     	;# 
   209  019D                     	;# 
   210  019E                     	;# 
   211  019F                     	;# 
   212  020D                     	;# 
   213  0210                     	;# 
   214  0211                     	;# 
   215  0211                     	;# 
   216  0212                     	;# 
   217  0212                     	;# 
   218  0213                     	;# 
   219  0213                     	;# 
   220  0214                     	;# 
   221  0214                     	;# 
   222  0215                     	;# 
   223  0215                     	;# 
   224  0215                     	;# 
   225  0216                     	;# 
   226  0216                     	;# 
   227  0217                     	;# 
   228  0217                     	;# 
   229  0291                     	;# 
   230  0291                     	;# 
   231  0292                     	;# 
   232  0293                     	;# 
   233  0298                     	;# 
   234  0298                     	;# 
   235  0299                     	;# 
   236  029A                     	;# 
   237  0394                     	;# 
   238  0395                     	;# 
   239  0396                     	;# 
   240  0FE4                     	;# 
   241  0FE5                     	;# 
   242  0FE6                     	;# 
   243  0FE7                     	;# 
   244  0FE8                     	;# 
   245  0FE9                     	;# 
   246  0FEA                     	;# 
   247  0FEB                     	;# 
   248  0FED                     	;# 
   249  0FEE                     	;# 
   250  0FEF                     	;# 
   251  0000                     	;# 
   252  0001                     	;# 
   253  0002                     	;# 
   254  0003                     	;# 
   255  0004                     	;# 
   256  0005                     	;# 
   257  0006                     	;# 
   258  0007                     	;# 
   259  0008                     	;# 
   260  0009                     	;# 
   261  000A                     	;# 
   262  000B                     	;# 
   263  000C                     	;# 
   264  000D                     	;# 
   265  000E                     	;# 
   266  0010                     	;# 
   267  0011                     	;# 
   268  0012                     	;# 
   269  0015                     	;# 
   270  0016                     	;# 
   271  0016                     	;# 
   272  0017                     	;# 
   273  0018                     	;# 
   274  0019                     	;# 
   275  001A                     	;# 
   276  001B                     	;# 
   277  001C                     	;# 
   278  008C                     	;# 
   279  008D                     	;# 
   280  008E                     	;# 
   281  0090                     	;# 
   282  0091                     	;# 
   283  0092                     	;# 
   284  0095                     	;# 
   285  0096                     	;# 
   286  0097                     	;# 
   287  0099                     	;# 
   288  009A                     	;# 
   289  009B                     	;# 
   290  009B                     	;# 
   291  009C                     	;# 
   292  009D                     	;# 
   293  009E                     	;# 
   294  010C                     	;# 
   295  010D                     	;# 
   296  010E                     	;# 
   297  0116                     	;# 
   298  0117                     	;# 
   299  011D                     	;# 
   300  018C                     	;# 
   301  018D                     	;# 
   302  018E                     	;# 
   303  0191                     	;# 
   304  0191                     	;# 
   305  0192                     	;# 
   306  0193                     	;# 
   307  0193                     	;# 
   308  0194                     	;# 
   309  0195                     	;# 
   310  0196                     	;# 
   311  0197                     	;# 
   312  0199                     	;# 
   313  019A                     	;# 
   314  019B                     	;# 
   315  019B                     	;# 
   316  019B                     	;# 
   317  019B                     	;# 
   318  019C                     	;# 
   319  019C                     	;# 
   320  019D                     	;# 
   321  019E                     	;# 
   322  019F                     	;# 
   323  020D                     	;# 
   324  0210                     	;# 
   325  0211                     	;# 
   326  0211                     	;# 
   327  0212                     	;# 
   328  0212                     	;# 
   329  0213                     	;# 
   330  0213                     	;# 
   331  0214                     	;# 
   332  0214                     	;# 
   333  0215                     	;# 
   334  0215                     	;# 
   335  0215                     	;# 
   336  0216                     	;# 
   337  0216                     	;# 
   338  0217                     	;# 
   339  0217                     	;# 
   340  0291                     	;# 
   341  0291                     	;# 
   342  0292                     	;# 
   343  0293                     	;# 
   344  0298                     	;# 
   345  0298                     	;# 
   346  0299                     	;# 
   347  029A                     	;# 
   348  0394                     	;# 
   349  0395                     	;# 
   350  0396                     	;# 
   351  0FE4                     	;# 
   352  0FE5                     	;# 
   353  0FE6                     	;# 
   354  0FE7                     	;# 
   355  0FE8                     	;# 
   356  0FE9                     	;# 
   357  0FEA                     	;# 
   358  0FEB                     	;# 
   359  0FED                     	;# 
   360  0FEE                     	;# 
   361  0FEF                     	;# 
   362  0000                     	;# 
   363  0001                     	;# 
   364  0002                     	;# 
   365  0003                     	;# 
   366  0004                     	;# 
   367  0005                     	;# 
   368  0006                     	;# 
   369  0007                     	;# 
   370  0008                     	;# 
   371  0009                     	;# 
   372  000A                     	;# 
   373  000B                     	;# 
   374  000C                     	;# 
   375  000D                     	;# 
   376  000E                     	;# 
   377  0010                     	;# 
   378  0011                     	;# 
   379  0012                     	;# 
   380  0015                     	;# 
   381  0016                     	;# 
   382  0016                     	;# 
   383  0017                     	;# 
   384  0018                     	;# 
   385  0019                     	;# 
   386  001A                     	;# 
   387  001B                     	;# 
   388  001C                     	;# 
   389  008C                     	;# 
   390  008D                     	;# 
   391  008E                     	;# 
   392  0090                     	;# 
   393  0091                     	;# 
   394  0092                     	;# 
   395  0095                     	;# 
   396  0096                     	;# 
   397  0097                     	;# 
   398  0099                     	;# 
   399  009A                     	;# 
   400  009B                     	;# 
   401  009B                     	;# 
   402  009C                     	;# 
   403  009D                     	;# 
   404  009E                     	;# 
   405  010C                     	;# 
   406  010D                     	;# 
   407  010E                     	;# 
   408  0116                     	;# 
   409  0117                     	;# 
   410  011D                     	;# 
   411  018C                     	;# 
   412  018D                     	;# 
   413  018E                     	;# 
   414  0191                     	;# 
   415  0191                     	;# 
   416  0192                     	;# 
   417  0193                     	;# 
   418  0193                     	;# 
   419  0194                     	;# 
   420  0195                     	;# 
   421  0196                     	;# 
   422  0197                     	;# 
   423  0199                     	;# 
   424  019A                     	;# 
   425  019B                     	;# 
   426  019B                     	;# 
   427  019B                     	;# 
   428  019B                     	;# 
   429  019C                     	;# 
   430  019C                     	;# 
   431  019D                     	;# 
   432  019E                     	;# 
   433  019F                     	;# 
   434  020D                     	;# 
   435  0210                     	;# 
   436  0211                     	;# 
   437  0211                     	;# 
   438  0212                     	;# 
   439  0212                     	;# 
   440  0213                     	;# 
   441  0213                     	;# 
   442  0214                     	;# 
   443  0214                     	;# 
   444  0215                     	;# 
   445  0215                     	;# 
   446  0215                     	;# 
   447  0216                     	;# 
   448  0216                     	;# 
   449  0217                     	;# 
   450  0217                     	;# 
   451  0291                     	;# 
   452  0291                     	;# 
   453  0292                     	;# 
   454  0293                     	;# 
   455  0298                     	;# 
   456  0298                     	;# 
   457  0299                     	;# 
   458  029A                     	;# 
   459  0394                     	;# 
   460  0395                     	;# 
   461  0396                     	;# 
   462  0FE4                     	;# 
   463  0FE5                     	;# 
   464  0FE6                     	;# 
   465  0FE7                     	;# 
   466  0FE8                     	;# 
   467  0FE9                     	;# 
   468  0FEA                     	;# 
   469  0FEB                     	;# 
   470  0FED                     	;# 
   471  0FEE                     	;# 
   472  0FEF                     	;# 
   473  0000                     	;# 
   474  0001                     	;# 
   475  0002                     	;# 
   476  0003                     	;# 
   477  0004                     	;# 
   478  0005                     	;# 
   479  0006                     	;# 
   480  0007                     	;# 
   481  0008                     	;# 
   482  0009                     	;# 
   483  000A                     	;# 
   484  000B                     	;# 
   485  000C                     	;# 
   486  000D                     	;# 
   487  000E                     	;# 
   488  0010                     	;# 
   489  0011                     	;# 
   490  0012                     	;# 
   491  0015                     	;# 
   492  0016                     	;# 
   493  0016                     	;# 
   494  0017                     	;# 
   495  0018                     	;# 
   496  0019                     	;# 
   497  001A                     	;# 
   498  001B                     	;# 
   499  001C                     	;# 
   500  008C                     	;# 
   501  008D                     	;# 
   502  008E                     	;# 
   503  0090                     	;# 
   504  0091                     	;# 
   505  0092                     	;# 
   506  0095                     	;# 
   507  0096                     	;# 
   508  0097                     	;# 
   509  0099                     	;# 
   510  009A                     	;# 
   511  009B                     	;# 
   512  009B                     	;# 
   513  009C                     	;# 
   514  009D                     	;# 
   515  009E                     	;# 
   516  010C                     	;# 
   517  010D                     	;# 
   518  010E                     	;# 
   519  0116                     	;# 
   520  0117                     	;# 
   521  011D                     	;# 
   522  018C                     	;# 
   523  018D                     	;# 
   524  018E                     	;# 
   525  0191                     	;# 
   526  0191                     	;# 
   527  0192                     	;# 
   528  0193                     	;# 
   529  0193                     	;# 
   530  0194                     	;# 
   531  0195                     	;# 
   532  0196                     	;# 
   533  0197                     	;# 
   534  0199                     	;# 
   535  019A                     	;# 
   536  019B                     	;# 
   537  019B                     	;# 
   538  019B                     	;# 
   539  019B                     	;# 
   540  019C                     	;# 
   541  019C                     	;# 
   542  019D                     	;# 
   543  019E                     	;# 
   544  019F                     	;# 
   545  020D                     	;# 
   546  0210                     	;# 
   547  0211                     	;# 
   548  0211                     	;# 
   549  0212                     	;# 
   550  0212                     	;# 
   551  0213                     	;# 
   552  0213                     	;# 
   553  0214                     	;# 
   554  0214                     	;# 
   555  0215                     	;# 
   556  0215                     	;# 
   557  0215                     	;# 
   558  0216                     	;# 
   559  0216                     	;# 
   560  0217                     	;# 
   561  0217                     	;# 
   562  0291                     	;# 
   563  0291                     	;# 
   564  0292                     	;# 
   565  0293                     	;# 
   566  0298                     	;# 
   567  0298                     	;# 
   568  0299                     	;# 
   569  029A                     	;# 
   570  0394                     	;# 
   571  0395                     	;# 
   572  0396                     	;# 
   573  0FE4                     	;# 
   574  0FE5                     	;# 
   575  0FE6                     	;# 
   576  0FE7                     	;# 
   577  0FE8                     	;# 
   578  0FE9                     	;# 
   579  0FEA                     	;# 
   580  0FEB                     	;# 
   581  0FED                     	;# 
   582  0FEE                     	;# 
   583  0FEF                     	;# 
   584  0000                     	;# 
   585  0001                     	;# 
   586  0002                     	;# 
   587  0003                     	;# 
   588  0004                     	;# 
   589  0005                     	;# 
   590  0006                     	;# 
   591  0007                     	;# 
   592  0008                     	;# 
   593  0009                     	;# 
   594  000A                     	;# 
   595  000B                     	;# 
   596  000C                     	;# 
   597  000D                     	;# 
   598  000E                     	;# 
   599  0010                     	;# 
   600  0011                     	;# 
   601  0012                     	;# 
   602  0015                     	;# 
   603  0016                     	;# 
   604  0016                     	;# 
   605  0017                     	;# 
   606  0018                     	;# 
   607  0019                     	;# 
   608  001A                     	;# 
   609  001B                     	;# 
   610  001C                     	;# 
   611  008C                     	;# 
   612  008D                     	;# 
   613  008E                     	;# 
   614  0090                     	;# 
   615  0091                     	;# 
   616  0092                     	;# 
   617  0095                     	;# 
   618  0096                     	;# 
   619  0097                     	;# 
   620  0099                     	;# 
   621  009A                     	;# 
   622  009B                     	;# 
   623  009B                     	;# 
   624  009C                     	;# 
   625  009D                     	;# 
   626  009E                     	;# 
   627  010C                     	;# 
   628  010D                     	;# 
   629  010E                     	;# 
   630  0116                     	;# 
   631  0117                     	;# 
   632  011D                     	;# 
   633  018C                     	;# 
   634  018D                     	;# 
   635  018E                     	;# 
   636  0191                     	;# 
   637  0191                     	;# 
   638  0192                     	;# 
   639  0193                     	;# 
   640  0193                     	;# 
   641  0194                     	;# 
   642  0195                     	;# 
   643  0196                     	;# 
   644  0197                     	;# 
   645  0199                     	;# 
   646  019A                     	;# 
   647  019B                     	;# 
   648  019B                     	;# 
   649  019B                     	;# 
   650  019B                     	;# 
   651  019C                     	;# 
   652  019C                     	;# 
   653  019D                     	;# 
   654  019E                     	;# 
   655  019F                     	;# 
   656  020D                     	;# 
   657  0210                     	;# 
   658  0211                     	;# 
   659  0211                     	;# 
   660  0212                     	;# 
   661  0212                     	;# 
   662  0213                     	;# 
   663  0213                     	;# 
   664  0214                     	;# 
   665  0214                     	;# 
   666  0215                     	;# 
   667  0215                     	;# 
   668  0215                     	;# 
   669  0216                     	;# 
   670  0216                     	;# 
   671  0217                     	;# 
   672  0217                     	;# 
   673  0291                     	;# 
   674  0291                     	;# 
   675  0292                     	;# 
   676  0293                     	;# 
   677  0298                     	;# 
   678  0298                     	;# 
   679  0299                     	;# 
   680  029A                     	;# 
   681  0394                     	;# 
   682  0395                     	;# 
   683  0396                     	;# 
   684  0FE4                     	;# 
   685  0FE5                     	;# 
   686  0FE6                     	;# 
   687  0FE7                     	;# 
   688  0FE8                     	;# 
   689  0FE9                     	;# 
   690  0FEA                     	;# 
   691  0FEB                     	;# 
   692  0FED                     	;# 
   693  0FEE                     	;# 
   694  0FEF                     	;# 
   695  0000                     	;# 
   696  0001                     	;# 
   697  0002                     	;# 
   698  0003                     	;# 
   699  0004                     	;# 
   700  0005                     	;# 
   701  0006                     	;# 
   702  0007                     	;# 
   703  0008                     	;# 
   704  0009                     	;# 
   705  000A                     	;# 
   706  000B                     	;# 
   707  000C                     	;# 
   708  000D                     	;# 
   709  000E                     	;# 
   710  0010                     	;# 
   711  0011                     	;# 
   712  0012                     	;# 
   713  0015                     	;# 
   714  0016                     	;# 
   715  0016                     	;# 
   716  0017                     	;# 
   717  0018                     	;# 
   718  0019                     	;# 
   719  001A                     	;# 
   720  001B                     	;# 
   721  001C                     	;# 
   722  008C                     	;# 
   723  008D                     	;# 
   724  008E                     	;# 
   725  0090                     	;# 
   726  0091                     	;# 
   727  0092                     	;# 
   728  0095                     	;# 
   729  0096                     	;# 
   730  0097                     	;# 
   731  0099                     	;# 
   732  009A                     	;# 
   733  009B                     	;# 
   734  009B                     	;# 
   735  009C                     	;# 
   736  009D                     	;# 
   737  009E                     	;# 
   738  010C                     	;# 
   739  010D                     	;# 
   740  010E                     	;# 
   741  0116                     	;# 
   742  0117                     	;# 
   743  011D                     	;# 
   744  018C                     	;# 
   745  018D                     	;# 
   746  018E                     	;# 
   747  0191                     	;# 
   748  0191                     	;# 
   749  0192                     	;# 
   750  0193                     	;# 
   751  0193                     	;# 
   752  0194                     	;# 
   753  0195                     	;# 
   754  0196                     	;# 
   755  0197                     	;# 
   756  0199                     	;# 
   757  019A                     	;# 
   758  019B                     	;# 
   759  019B                     	;# 
   760  019B                     	;# 
   761  019B                     	;# 
   762  019C                     	;# 
   763  019C                     	;# 
   764  019D                     	;# 
   765  019E                     	;# 
   766  019F                     	;# 
   767  020D                     	;# 
   768  0210                     	;# 
   769  0211                     	;# 
   770  0211                     	;# 
   771  0212                     	;# 
   772  0212                     	;# 
   773  0213                     	;# 
   774  0213                     	;# 
   775  0214                     	;# 
   776  0214                     	;# 
   777  0215                     	;# 
   778  0215                     	;# 
   779  0215                     	;# 
   780  0216                     	;# 
   781  0216                     	;# 
   782  0217                     	;# 
   783  0217                     	;# 
   784  0291                     	;# 
   785  0291                     	;# 
   786  0292                     	;# 
   787  0293                     	;# 
   788  0298                     	;# 
   789  0298                     	;# 
   790  0299                     	;# 
   791  029A                     	;# 
   792  0394                     	;# 
   793  0395                     	;# 
   794  0396                     	;# 
   795  0FE4                     	;# 
   796  0FE5                     	;# 
   797  0FE6                     	;# 
   798  0FE7                     	;# 
   799  0FE8                     	;# 
   800  0FE9                     	;# 
   801  0FEA                     	;# 
   802  0FEB                     	;# 
   803  0FED                     	;# 
   804  0FEE                     	;# 
   805  0FEF                     	;# 
   806  0000                     	;# 
   807  0001                     	;# 
   808  0002                     	;# 
   809  0003                     	;# 
   810  0004                     	;# 
   811  0005                     	;# 
   812  0006                     	;# 
   813  0007                     	;# 
   814  0008                     	;# 
   815  0009                     	;# 
   816  000A                     	;# 
   817  000B                     	;# 
   818  000C                     	;# 
   819  000D                     	;# 
   820  000E                     	;# 
   821  0010                     	;# 
   822  0011                     	;# 
   823  0012                     	;# 
   824  0015                     	;# 
   825  0016                     	;# 
   826  0016                     	;# 
   827  0017                     	;# 
   828  0018                     	;# 
   829  0019                     	;# 
   830  001A                     	;# 
   831  001B                     	;# 
   832  001C                     	;# 
   833  008C                     	;# 
   834  008D                     	;# 
   835  008E                     	;# 
   836  0090                     	;# 
   837  0091                     	;# 
   838  0092                     	;# 
   839  0095                     	;# 
   840  0096                     	;# 
   841  0097                     	;# 
   842  0099                     	;# 
   843  009A                     	;# 
   844  009B                     	;# 
   845  009B                     	;# 
   846  009C                     	;# 
   847  009D                     	;# 
   848  009E                     	;# 
   849  010C                     	;# 
   850  010D                     	;# 
   851  010E                     	;# 
   852  0116                     	;# 
   853  0117                     	;# 
   854  011D                     	;# 
   855  018C                     	;# 
   856  018D                     	;# 
   857  018E                     	;# 
   858  0191                     	;# 
   859  0191                     	;# 
   860  0192                     	;# 
   861  0193                     	;# 
   862  0193                     	;# 
   863  0194                     	;# 
   864  0195                     	;# 
   865  0196                     	;# 
   866  0197                     	;# 
   867  0199                     	;# 
   868  019A                     	;# 
   869  019B                     	;# 
   870  019B                     	;# 
   871  019B                     	;# 
   872  019B                     	;# 
   873  019C                     	;# 
   874  019C                     	;# 
   875  019D                     	;# 
   876  019E                     	;# 
   877  019F                     	;# 
   878  020D                     	;# 
   879  0210                     	;# 
   880  0211                     	;# 
   881  0211                     	;# 
   882  0212                     	;# 
   883  0212                     	;# 
   884  0213                     	;# 
   885  0213                     	;# 
   886  0214                     	;# 
   887  0214                     	;# 
   888  0215                     	;# 
   889  0215                     	;# 
   890  0215                     	;# 
   891  0216                     	;# 
   892  0216                     	;# 
   893  0217                     	;# 
   894  0217                     	;# 
   895  0291                     	;# 
   896  0291                     	;# 
   897  0292                     	;# 
   898  0293                     	;# 
   899  0298                     	;# 
   900  0298                     	;# 
   901  0299                     	;# 
   902  029A                     	;# 
   903  0394                     	;# 
   904  0395                     	;# 
   905  0396                     	;# 
   906  0FE4                     	;# 
   907  0FE5                     	;# 
   908  0FE6                     	;# 
   909  0FE7                     	;# 
   910  0FE8                     	;# 
   911  0FE9                     	;# 
   912  0FEA                     	;# 
   913  0FEB                     	;# 
   914  0FED                     	;# 
   915  0FEE                     	;# 
   916  0FEF                     	;# 
   917  0000                     	;# 
   918  0001                     	;# 
   919  0002                     	;# 
   920  0003                     	;# 
   921  0004                     	;# 
   922  0005                     	;# 
   923  0006                     	;# 
   924  0007                     	;# 
   925  0008                     	;# 
   926  0009                     	;# 
   927  000A                     	;# 
   928  000B                     	;# 
   929  000C                     	;# 
   930  000D                     	;# 
   931  000E                     	;# 
   932  0010                     	;# 
   933  0011                     	;# 
   934  0012                     	;# 
   935  0015                     	;# 
   936  0016                     	;# 
   937  0016                     	;# 
   938  0017                     	;# 
   939  0018                     	;# 
   940  0019                     	;# 
   941  001A                     	;# 
   942  001B                     	;# 
   943  001C                     	;# 
   944  008C                     	;# 
   945  008D                     	;# 
   946  008E                     	;# 
   947  0090                     	;# 
   948  0091                     	;# 
   949  0092                     	;# 
   950  0095                     	;# 
   951  0096                     	;# 
   952  0097                     	;# 
   953  0099                     	;# 
   954  009A                     	;# 
   955  009B                     	;# 
   956  009B                     	;# 
   957  009C                     	;# 
   958  009D                     	;# 
   959  009E                     	;# 
   960  010C                     	;# 
   961  010D                     	;# 
   962  010E                     	;# 
   963  0116                     	;# 
   964  0117                     	;# 
   965  011D                     	;# 
   966  018C                     	;# 
   967  018D                     	;# 
   968  018E                     	;# 
   969  0191                     	;# 
   970  0191                     	;# 
   971  0192                     	;# 
   972  0193                     	;# 
   973  0193                     	;# 
   974  0194                     	;# 
   975  0195                     	;# 
   976  0196                     	;# 
   977  0197                     	;# 
   978  0199                     	;# 
   979  019A                     	;# 
   980  019B                     	;# 
   981  019B                     	;# 
   982  019B                     	;# 
   983  019B                     	;# 
   984  019C                     	;# 
   985  019C                     	;# 
   986  019D                     	;# 
   987  019E                     	;# 
   988  019F                     	;# 
   989  020D                     	;# 
   990  0210                     	;# 
   991  0211                     	;# 
   992  0211                     	;# 
   993  0212                     	;# 
   994  0212                     	;# 
   995  0213                     	;# 
   996  0213                     	;# 
   997  0214                     	;# 
   998  0214                     	;# 
   999  0215                     	;# 
  1000  0215                     	;# 
  1001  0215                     	;# 
  1002  0216                     	;# 
  1003  0216                     	;# 
  1004  0217                     	;# 
  1005  0217                     	;# 
  1006  0291                     	;# 
  1007  0291                     	;# 
  1008  0292                     	;# 
  1009  0293                     	;# 
  1010  0298                     	;# 
  1011  0298                     	;# 
  1012  0299                     	;# 
  1013  029A                     	;# 
  1014  0394                     	;# 
  1015  0395                     	;# 
  1016  0396                     	;# 
  1017  0FE4                     	;# 
  1018  0FE5                     	;# 
  1019  0FE6                     	;# 
  1020  0FE7                     	;# 
  1021  0FE8                     	;# 
  1022  0FE9                     	;# 
  1023  0FEA                     	;# 
  1024  0FEB                     	;# 
  1025  0FED                     	;# 
  1026  0FEE                     	;# 
  1027  0FEF                     	;# 
  1028  0000                     	;# 
  1029  0001                     	;# 
  1030  0002                     	;# 
  1031  0003                     	;# 
  1032  0004                     	;# 
  1033  0005                     	;# 
  1034  0006                     	;# 
  1035  0007                     	;# 
  1036  0008                     	;# 
  1037  0009                     	;# 
  1038  000A                     	;# 
  1039  000B                     	;# 
  1040  000C                     	;# 
  1041  000D                     	;# 
  1042  000E                     	;# 
  1043  0010                     	;# 
  1044  0011                     	;# 
  1045  0012                     	;# 
  1046  0015                     	;# 
  1047  0016                     	;# 
  1048  0016                     	;# 
  1049  0017                     	;# 
  1050  0018                     	;# 
  1051  0019                     	;# 
  1052  001A                     	;# 
  1053  001B                     	;# 
  1054  001C                     	;# 
  1055  008C                     	;# 
  1056  008D                     	;# 
  1057  008E                     	;# 
  1058  0090                     	;# 
  1059  0091                     	;# 
  1060  0092                     	;# 
  1061  0095                     	;# 
  1062  0096                     	;# 
  1063  0097                     	;# 
  1064  0099                     	;# 
  1065  009A                     	;# 
  1066  009B                     	;# 
  1067  009B                     	;# 
  1068  009C                     	;# 
  1069  009D                     	;# 
  1070  009E                     	;# 
  1071  010C                     	;# 
  1072  010D                     	;# 
  1073  010E                     	;# 
  1074  0116                     	;# 
  1075  0117                     	;# 
  1076  011D                     	;# 
  1077  018C                     	;# 
  1078  018D                     	;# 
  1079  018E                     	;# 
  1080  0191                     	;# 
  1081  0191                     	;# 
  1082  0192                     	;# 
  1083  0193                     	;# 
  1084  0193                     	;# 
  1085  0194                     	;# 
  1086  0195                     	;# 
  1087  0196                     	;# 
  1088  0197                     	;# 
  1089  0199                     	;# 
  1090  019A                     	;# 
  1091  019B                     	;# 
  1092  019B                     	;# 
  1093  019B                     	;# 
  1094  019B                     	;# 
  1095  019C                     	;# 
  1096  019C                     	;# 
  1097  019D                     	;# 
  1098  019E                     	;# 
  1099  019F                     	;# 
  1100  020D                     	;# 
  1101  0210                     	;# 
  1102  0211                     	;# 
  1103  0211                     	;# 
  1104  0212                     	;# 
  1105  0212                     	;# 
  1106  0213                     	;# 
  1107  0213                     	;# 
  1108  0214                     	;# 
  1109  0214                     	;# 
  1110  0215                     	;# 
  1111  0215                     	;# 
  1112  0215                     	;# 
  1113  0216                     	;# 
  1114  0216                     	;# 
  1115  0217                     	;# 
  1116  0217                     	;# 
  1117  0291                     	;# 
  1118  0291                     	;# 
  1119  0292                     	;# 
  1120  0293                     	;# 
  1121  0298                     	;# 
  1122  0298                     	;# 
  1123  0299                     	;# 
  1124  029A                     	;# 
  1125  0394                     	;# 
  1126  0395                     	;# 
  1127  0396                     	;# 
  1128  0FE4                     	;# 
  1129  0FE5                     	;# 
  1130  0FE6                     	;# 
  1131  0FE7                     	;# 
  1132  0FE8                     	;# 
  1133  0FE9                     	;# 
  1134  0FEA                     	;# 
  1135  0FEB                     	;# 
  1136  0FED                     	;# 
  1137  0FEE                     	;# 
  1138  0FEF                     	;# 
  1139  0000                     	;# 
  1140  0001                     	;# 
  1141  0002                     	;# 
  1142  0003                     	;# 
  1143  0004                     	;# 
  1144  0005                     	;# 
  1145  0006                     	;# 
  1146  0007                     	;# 
  1147  0008                     	;# 
  1148  0009                     	;# 
  1149  000A                     	;# 
  1150  000B                     	;# 
  1151  000C                     	;# 
  1152  000D                     	;# 
  1153  000E                     	;# 
  1154  0010                     	;# 
  1155  0011                     	;# 
  1156  0012                     	;# 
  1157  0015                     	;# 
  1158  0016                     	;# 
  1159  0016                     	;# 
  1160  0017                     	;# 
  1161  0018                     	;# 
  1162  0019                     	;# 
  1163  001A                     	;# 
  1164  001B                     	;# 
  1165  001C                     	;# 
  1166  008C                     	;# 
  1167  008D                     	;# 
  1168  008E                     	;# 
  1169  0090                     	;# 
  1170  0091                     	;# 
  1171  0092                     	;# 
  1172  0095                     	;# 
  1173  0096                     	;# 
  1174  0097                     	;# 
  1175  0099                     	;# 
  1176  009A                     	;# 
  1177  009B                     	;# 
  1178  009B                     	;# 
  1179  009C                     	;# 
  1180  009D                     	;# 
  1181  009E                     	;# 
  1182  010C                     	;# 
  1183  010D                     	;# 
  1184  010E                     	;# 
  1185  0116                     	;# 
  1186  0117                     	;# 
  1187  011D                     	;# 
  1188  018C                     	;# 
  1189  018D                     	;# 
  1190  018E                     	;# 
  1191  0191                     	;# 
  1192  0191                     	;# 
  1193  0192                     	;# 
  1194  0193                     	;# 
  1195  0193                     	;# 
  1196  0194                     	;# 
  1197  0195                     	;# 
  1198  0196                     	;# 
  1199  0197                     	;# 
  1200  0199                     	;# 
  1201  019A                     	;# 
  1202  019B                     	;# 
  1203  019B                     	;# 
  1204  019B                     	;# 
  1205  019B                     	;# 
  1206  019C                     	;# 
  1207  019C                     	;# 
  1208  019D                     	;# 
  1209  019E                     	;# 
  1210  019F                     	;# 
  1211  020D                     	;# 
  1212  0210                     	;# 
  1213  0211                     	;# 
  1214  0211                     	;# 
  1215  0212                     	;# 
  1216  0212                     	;# 
  1217  0213                     	;# 
  1218  0213                     	;# 
  1219  0214                     	;# 
  1220  0214                     	;# 
  1221  0215                     	;# 
  1222  0215                     	;# 
  1223  0215                     	;# 
  1224  0216                     	;# 
  1225  0216                     	;# 
  1226  0217                     	;# 
  1227  0217                     	;# 
  1228  0291                     	;# 
  1229  0291                     	;# 
  1230  0292                     	;# 
  1231  0293                     	;# 
  1232  0298                     	;# 
  1233  0298                     	;# 
  1234  0299                     	;# 
  1235  029A                     	;# 
  1236  0394                     	;# 
  1237  0395                     	;# 
  1238  0396                     	;# 
  1239  0FE4                     	;# 
  1240  0FE5                     	;# 
  1241  0FE6                     	;# 
  1242  0FE7                     	;# 
  1243  0FE8                     	;# 
  1244  0FE9                     	;# 
  1245  0FEA                     	;# 
  1246  0FEB                     	;# 
  1247  0FED                     	;# 
  1248  0FEE                     	;# 
  1249  0FEF                     	;# 
  1250  0000                     	;# 
  1251  0001                     	;# 
  1252  0002                     	;# 
  1253  0003                     	;# 
  1254  0004                     	;# 
  1255  0005                     	;# 
  1256  0006                     	;# 
  1257  0007                     	;# 
  1258  0008                     	;# 
  1259  0009                     	;# 
  1260  000A                     	;# 
  1261  000B                     	;# 
  1262  000C                     	;# 
  1263  000D                     	;# 
  1264  000E                     	;# 
  1265  0010                     	;# 
  1266  0011                     	;# 
  1267  0012                     	;# 
  1268  0015                     	;# 
  1269  0016                     	;# 
  1270  0016                     	;# 
  1271  0017                     	;# 
  1272  0018                     	;# 
  1273  0019                     	;# 
  1274  001A                     	;# 
  1275  001B                     	;# 
  1276  001C                     	;# 
  1277  008C                     	;# 
  1278  008D                     	;# 
  1279  008E                     	;# 
  1280  0090                     	;# 
  1281  0091                     	;# 
  1282  0092                     	;# 
  1283  0095                     	;# 
  1284  0096                     	;# 
  1285  0097                     	;# 
  1286  0099                     	;# 
  1287  009A                     	;# 
  1288  009B                     	;# 
  1289  009B                     	;# 
  1290  009C                     	;# 
  1291  009D                     	;# 
  1292  009E                     	;# 
  1293  010C                     	;# 
  1294  010D                     	;# 
  1295  010E                     	;# 
  1296  0116                     	;# 
  1297  0117                     	;# 
  1298  011D                     	;# 
  1299  018C                     	;# 
  1300  018D                     	;# 
  1301  018E                     	;# 
  1302  0191                     	;# 
  1303  0191                     	;# 
  1304  0192                     	;# 
  1305  0193                     	;# 
  1306  0193                     	;# 
  1307  0194                     	;# 
  1308  0195                     	;# 
  1309  0196                     	;# 
  1310  0197                     	;# 
  1311  0199                     	;# 
  1312  019A                     	;# 
  1313  019B                     	;# 
  1314  019B                     	;# 
  1315  019B                     	;# 
  1316  019B                     	;# 
  1317  019C                     	;# 
  1318  019C                     	;# 
  1319  019D                     	;# 
  1320  019E                     	;# 
  1321  019F                     	;# 
  1322  020D                     	;# 
  1323  0210                     	;# 
  1324  0211                     	;# 
  1325  0211                     	;# 
  1326  0212                     	;# 
  1327  0212                     	;# 
  1328  0213                     	;# 
  1329  0213                     	;# 
  1330  0214                     	;# 
  1331  0214                     	;# 
  1332  0215                     	;# 
  1333  0215                     	;# 
  1334  0215                     	;# 
  1335  0216                     	;# 
  1336  0216                     	;# 
  1337  0217                     	;# 
  1338  0217                     	;# 
  1339  0291                     	;# 
  1340  0291                     	;# 
  1341  0292                     	;# 
  1342  0293                     	;# 
  1343  0298                     	;# 
  1344  0298                     	;# 
  1345  0299                     	;# 
  1346  029A                     	;# 
  1347  0394                     	;# 
  1348  0395                     	;# 
  1349  0396                     	;# 
  1350  0FE4                     	;# 
  1351  0FE5                     	;# 
  1352  0FE6                     	;# 
  1353  0FE7                     	;# 
  1354  0FE8                     	;# 
  1355  0FE9                     	;# 
  1356  0FEA                     	;# 
  1357  0FEB                     	;# 
  1358  0FED                     	;# 
  1359  0FEE                     	;# 
  1360  0FEF                     	;# 
  1361  0000                     	;# 
  1362  0001                     	;# 
  1363  0002                     	;# 
  1364  0003                     	;# 
  1365  0004                     	;# 
  1366  0005                     	;# 
  1367  0006                     	;# 
  1368  0007                     	;# 
  1369  0008                     	;# 
  1370  0009                     	;# 
  1371  000A                     	;# 
  1372  000B                     	;# 
  1373  000C                     	;# 
  1374  000D                     	;# 
  1375  000E                     	;# 
  1376  0010                     	;# 
  1377  0011                     	;# 
  1378  0012                     	;# 
  1379  0015                     	;# 
  1380  0016                     	;# 
  1381  0016                     	;# 
  1382  0017                     	;# 
  1383  0018                     	;# 
  1384  0019                     	;# 
  1385  001A                     	;# 
  1386  001B                     	;# 
  1387  001C                     	;# 
  1388  008C                     	;# 
  1389  008D                     	;# 
  1390  008E                     	;# 
  1391  0090                     	;# 
  1392  0091                     	;# 
  1393  0092                     	;# 
  1394  0095                     	;# 
  1395  0096                     	;# 
  1396  0097                     	;# 
  1397  0099                     	;# 
  1398  009A                     	;# 
  1399  009B                     	;# 
  1400  009B                     	;# 
  1401  009C                     	;# 
  1402  009D                     	;# 
  1403  009E                     	;# 
  1404  010C                     	;# 
  1405  010D                     	;# 
  1406  010E                     	;# 
  1407  0116                     	;# 
  1408  0117                     	;# 
  1409  011D                     	;# 
  1410  018C                     	;# 
  1411  018D                     	;# 
  1412  018E                     	;# 
  1413  0191                     	;# 
  1414  0191                     	;# 
  1415  0192                     	;# 
  1416  0193                     	;# 
  1417  0193                     	;# 
  1418  0194                     	;# 
  1419  0195                     	;# 
  1420  0196                     	;# 
  1421  0197                     	;# 
  1422  0199                     	;# 
  1423  019A                     	;# 
  1424  019B                     	;# 
  1425  019B                     	;# 
  1426  019B                     	;# 
  1427  019B                     	;# 
  1428  019C                     	;# 
  1429  019C                     	;# 
  1430  019D                     	;# 
  1431  019E                     	;# 
  1432  019F                     	;# 
  1433  020D                     	;# 
  1434  0210                     	;# 
  1435  0211                     	;# 
  1436  0211                     	;# 
  1437  0212                     	;# 
  1438  0212                     	;# 
  1439  0213                     	;# 
  1440  0213                     	;# 
  1441  0214                     	;# 
  1442  0214                     	;# 
  1443  0215                     	;# 
  1444  0215                     	;# 
  1445  0215                     	;# 
  1446  0216                     	;# 
  1447  0216                     	;# 
  1448  0217                     	;# 
  1449  0217                     	;# 
  1450  0291                     	;# 
  1451  0291                     	;# 
  1452  0292                     	;# 
  1453  0293                     	;# 
  1454  0298                     	;# 
  1455  0298                     	;# 
  1456  0299                     	;# 
  1457  029A                     	;# 
  1458  0394                     	;# 
  1459  0395                     	;# 
  1460  0396                     	;# 
  1461  0FE4                     	;# 
  1462  0FE5                     	;# 
  1463  0FE6                     	;# 
  1464  0FE7                     	;# 
  1465  0FE8                     	;# 
  1466  0FE9                     	;# 
  1467  0FEA                     	;# 
  1468  0FEB                     	;# 
  1469  0FED                     	;# 
  1470  0FEE                     	;# 
  1471  0FEF                     	;# 
  1472  0000                     	;# 
  1473  0001                     	;# 
  1474  0002                     	;# 
  1475  0003                     	;# 
  1476  0004                     	;# 
  1477  0005                     	;# 
  1478  0006                     	;# 
  1479  0007                     	;# 
  1480  0008                     	;# 
  1481  0009                     	;# 
  1482  000A                     	;# 
  1483  000B                     	;# 
  1484  000C                     	;# 
  1485  000D                     	;# 
  1486  000E                     	;# 
  1487  0010                     	;# 
  1488  0011                     	;# 
  1489  0012                     	;# 
  1490  0015                     	;# 
  1491  0016                     	;# 
  1492  0016                     	;# 
  1493  0017                     	;# 
  1494  0018                     	;# 
  1495  0019                     	;# 
  1496  001A                     	;# 
  1497  001B                     	;# 
  1498  001C                     	;# 
  1499  008C                     	;# 
  1500  008D                     	;# 
  1501  008E                     	;# 
  1502  0090                     	;# 
  1503  0091                     	;# 
  1504  0092                     	;# 
  1505  0095                     	;# 
  1506  0096                     	;# 
  1507  0097                     	;# 
  1508  0099                     	;# 
  1509  009A                     	;# 
  1510  009B                     	;# 
  1511  009B                     	;# 
  1512  009C                     	;# 
  1513  009D                     	;# 
  1514  009E                     	;# 
  1515  010C                     	;# 
  1516  010D                     	;# 
  1517  010E                     	;# 
  1518  0116                     	;# 
  1519  0117                     	;# 
  1520  011D                     	;# 
  1521  018C                     	;# 
  1522  018D                     	;# 
  1523  018E                     	;# 
  1524  0191                     	;# 
  1525  0191                     	;# 
  1526  0192                     	;# 
  1527  0193                     	;# 
  1528  0193                     	;# 
  1529  0194                     	;# 
  1530  0195                     	;# 
  1531  0196                     	;# 
  1532  0197                     	;# 
  1533  0199                     	;# 
  1534  019A                     	;# 
  1535  019B                     	;# 
  1536  019B                     	;# 
  1537  019B                     	;# 
  1538  019B                     	;# 
  1539  019C                     	;# 
  1540  019C                     	;# 
  1541  019D                     	;# 
  1542  019E                     	;# 
  1543  019F                     	;# 
  1544  020D                     	;# 
  1545  0210                     	;# 
  1546  0211                     	;# 
  1547  0211                     	;# 
  1548  0212                     	;# 
  1549  0212                     	;# 
  1550  0213                     	;# 
  1551  0213                     	;# 
  1552  0214                     	;# 
  1553  0214                     	;# 
  1554  0215                     	;# 
  1555  0215                     	;# 
  1556  0215                     	;# 
  1557  0216                     	;# 
  1558  0216                     	;# 
  1559  0217                     	;# 
  1560  0217                     	;# 
  1561  0291                     	;# 
  1562  0291                     	;# 
  1563  0292                     	;# 
  1564  0293                     	;# 
  1565  0298                     	;# 
  1566  0298                     	;# 
  1567  0299                     	;# 
  1568  029A                     	;# 
  1569  0394                     	;# 
  1570  0395                     	;# 
  1571  0396                     	;# 
  1572  0FE4                     	;# 
  1573  0FE5                     	;# 
  1574  0FE6                     	;# 
  1575  0FE7                     	;# 
  1576  0FE8                     	;# 
  1577  0FE9                     	;# 
  1578  0FEA                     	;# 
  1579  0FEB                     	;# 
  1580  0FED                     	;# 
  1581  0FEE                     	;# 
  1582  0FEF                     	;# 
  1583  0000                     	;# 
  1584  0001                     	;# 
  1585  0002                     	;# 
  1586  0003                     	;# 
  1587  0004                     	;# 
  1588  0005                     	;# 
  1589  0006                     	;# 
  1590  0007                     	;# 
  1591  0008                     	;# 
  1592  0009                     	;# 
  1593  000A                     	;# 
  1594  000B                     	;# 
  1595  000C                     	;# 
  1596  000D                     	;# 
  1597  000E                     	;# 
  1598  0010                     	;# 
  1599  0011                     	;# 
  1600  0012                     	;# 
  1601  0015                     	;# 
  1602  0016                     	;# 
  1603  0016                     	;# 
  1604  0017                     	;# 
  1605  0018                     	;# 
  1606  0019                     	;# 
  1607  001A                     	;# 
  1608  001B                     	;# 
  1609  001C                     	;# 
  1610  008C                     	;# 
  1611  008D                     	;# 
  1612  008E                     	;# 
  1613  0090                     	;# 
  1614  0091                     	;# 
  1615  0092                     	;# 
  1616  0095                     	;# 
  1617  0096                     	;# 
  1618  0097                     	;# 
  1619  0099                     	;# 
  1620  009A                     	;# 
  1621  009B                     	;# 
  1622  009B                     	;# 
  1623  009C                     	;# 
  1624  009D                     	;# 
  1625  009E                     	;# 
  1626  010C                     	;# 
  1627  010D                     	;# 
  1628  010E                     	;# 
  1629  0116                     	;# 
  1630  0117                     	;# 
  1631  011D                     	;# 
  1632  018C                     	;# 
  1633  018D                     	;# 
  1634  018E                     	;# 
  1635  0191                     	;# 
  1636  0191                     	;# 
  1637  0192                     	;# 
  1638  0193                     	;# 
  1639  0193                     	;# 
  1640  0194                     	;# 
  1641  0195                     	;# 
  1642  0196                     	;# 
  1643  0197                     	;# 
  1644  0199                     	;# 
  1645  019A                     	;# 
  1646  019B                     	;# 
  1647  019B                     	;# 
  1648  019B                     	;# 
  1649  019B                     	;# 
  1650  019C                     	;# 
  1651  019C                     	;# 
  1652  019D                     	;# 
  1653  019E                     	;# 
  1654  019F                     	;# 
  1655  020D                     	;# 
  1656  0210                     	;# 
  1657  0211                     	;# 
  1658  0211                     	;# 
  1659  0212                     	;# 
  1660  0212                     	;# 
  1661  0213                     	;# 
  1662  0213                     	;# 
  1663  0214                     	;# 
  1664  0214                     	;# 
  1665  0215                     	;# 
  1666  0215                     	;# 
  1667  0215                     	;# 
  1668  0216                     	;# 
  1669  0216                     	;# 
  1670  0217                     	;# 
  1671  0217                     	;# 
  1672  0291                     	;# 
  1673  0291                     	;# 
  1674  0292                     	;# 
  1675  0293                     	;# 
  1676  0298                     	;# 
  1677  0298                     	;# 
  1678  0299                     	;# 
  1679  029A                     	;# 
  1680  0394                     	;# 
  1681  0395                     	;# 
  1682  0396                     	;# 
  1683  0FE4                     	;# 
  1684  0FE5                     	;# 
  1685  0FE6                     	;# 
  1686  0FE7                     	;# 
  1687  0FE8                     	;# 
  1688  0FE9                     	;# 
  1689  0FEA                     	;# 
  1690  0FEB                     	;# 
  1691  0FED                     	;# 
  1692  0FEE                     	;# 
  1693  0FEF                     	;# 
  1694  0000                     	;# 
  1695  0001                     	;# 
  1696  0002                     	;# 
  1697  0003                     	;# 
  1698  0004                     	;# 
  1699  0005                     	;# 
  1700  0006                     	;# 
  1701  0007                     	;# 
  1702  0008                     	;# 
  1703  0009                     	;# 
  1704  000A                     	;# 
  1705  000B                     	;# 
  1706  000C                     	;# 
  1707  000D                     	;# 
  1708  000E                     	;# 
  1709  0010                     	;# 
  1710  0011                     	;# 
  1711  0012                     	;# 
  1712  0015                     	;# 
  1713  0016                     	;# 
  1714  0016                     	;# 
  1715  0017                     	;# 
  1716  0018                     	;# 
  1717  0019                     	;# 
  1718  001A                     	;# 
  1719  001B                     	;# 
  1720  001C                     	;# 
  1721  008C                     	;# 
  1722  008D                     	;# 
  1723  008E                     	;# 
  1724  0090                     	;# 
  1725  0091                     	;# 
  1726  0092                     	;# 
  1727  0095                     	;# 
  1728  0096                     	;# 
  1729  0097                     	;# 
  1730  0099                     	;# 
  1731  009A                     	;# 
  1732  009B                     	;# 
  1733  009B                     	;# 
  1734  009C                     	;# 
  1735  009D                     	;# 
  1736  009E                     	;# 
  1737  010C                     	;# 
  1738  010D                     	;# 
  1739  010E                     	;# 
  1740  0116                     	;# 
  1741  0117                     	;# 
  1742  011D                     	;# 
  1743  018C                     	;# 
  1744  018D                     	;# 
  1745  018E                     	;# 
  1746  0191                     	;# 
  1747  0191                     	;# 
  1748  0192                     	;# 
  1749  0193                     	;# 
  1750  0193                     	;# 
  1751  0194                     	;# 
  1752  0195                     	;# 
  1753  0196                     	;# 
  1754  0197                     	;# 
  1755  0199                     	;# 
  1756  019A                     	;# 
  1757  019B                     	;# 
  1758  019B                     	;# 
  1759  019B                     	;# 
  1760  019B                     	;# 
  1761  019C                     	;# 
  1762  019C                     	;# 
  1763  019D                     	;# 
  1764  019E                     	;# 
  1765  019F                     	;# 
  1766  020D                     	;# 
  1767  0210                     	;# 
  1768  0211                     	;# 
  1769  0211                     	;# 
  1770  0212                     	;# 
  1771  0212                     	;# 
  1772  0213                     	;# 
  1773  0213                     	;# 
  1774  0214                     	;# 
  1775  0214                     	;# 
  1776  0215                     	;# 
  1777  0215                     	;# 
  1778  0215                     	;# 
  1779  0216                     	;# 
  1780  0216                     	;# 
  1781  0217                     	;# 
  1782  0217                     	;# 
  1783  0291                     	;# 
  1784  0291                     	;# 
  1785  0292                     	;# 
  1786  0293                     	;# 
  1787  0298                     	;# 
  1788  0298                     	;# 
  1789  0299                     	;# 
  1790  029A                     	;# 
  1791  0394                     	;# 
  1792  0395                     	;# 
  1793  0396                     	;# 
  1794  0FE4                     	;# 
  1795  0FE5                     	;# 
  1796  0FE6                     	;# 
  1797  0FE7                     	;# 
  1798  0FE8                     	;# 
  1799  0FE9                     	;# 
  1800  0FEA                     	;# 
  1801  0FEB                     	;# 
  1802  0FED                     	;# 
  1803  0FEE                     	;# 
  1804  0FEF                     	;# 
  1805  0000                     	;# 
  1806  0001                     	;# 
  1807  0002                     	;# 
  1808  0003                     	;# 
  1809  0004                     	;# 
  1810  0005                     	;# 
  1811  0006                     	;# 
  1812  0007                     	;# 
  1813  0008                     	;# 
  1814  0009                     	;# 
  1815  000A                     	;# 
  1816  000B                     	;# 
  1817  000C                     	;# 
  1818  000D                     	;# 
  1819  000E                     	;# 
  1820  0010                     	;# 
  1821  0011                     	;# 
  1822  0012                     	;# 
  1823  0015                     	;# 
  1824  0016                     	;# 
  1825  0016                     	;# 
  1826  0017                     	;# 
  1827  0018                     	;# 
  1828  0019                     	;# 
  1829  001A                     	;# 
  1830  001B                     	;# 
  1831  001C                     	;# 
  1832  008C                     	;# 
  1833  008D                     	;# 
  1834  008E                     	;# 
  1835  0090                     	;# 
  1836  0091                     	;# 
  1837  0092                     	;# 
  1838  0095                     	;# 
  1839  0096                     	;# 
  1840  0097                     	;# 
  1841  0099                     	;# 
  1842  009A                     	;# 
  1843  009B                     	;# 
  1844  009B                     	;# 
  1845  009C                     	;# 
  1846  009D                     	;# 
  1847  009E                     	;# 
  1848  010C                     	;# 
  1849  010D                     	;# 
  1850  010E                     	;# 
  1851  0116                     	;# 
  1852  0117                     	;# 
  1853  011D                     	;# 
  1854  018C                     	;# 
  1855  018D                     	;# 
  1856  018E                     	;# 
  1857  0191                     	;# 
  1858  0191                     	;# 
  1859  0192                     	;# 
  1860  0193                     	;# 
  1861  0193                     	;# 
  1862  0194                     	;# 
  1863  0195                     	;# 
  1864  0196                     	;# 
  1865  0197                     	;# 
  1866  0199                     	;# 
  1867  019A                     	;# 
  1868  019B                     	;# 
  1869  019B                     	;# 
  1870  019B                     	;# 
  1871  019B                     	;# 
  1872  019C                     	;# 
  1873  019C                     	;# 
  1874  019D                     	;# 
  1875  019E                     	;# 
  1876  019F                     	;# 
  1877  020D                     	;# 
  1878  0210                     	;# 
  1879  0211                     	;# 
  1880  0211                     	;# 
  1881  0212                     	;# 
  1882  0212                     	;# 
  1883  0213                     	;# 
  1884  0213                     	;# 
  1885  0214                     	;# 
  1886  0214                     	;# 
  1887  0215                     	;# 
  1888  0215                     	;# 
  1889  0215                     	;# 
  1890  0216                     	;# 
  1891  0216                     	;# 
  1892  0217                     	;# 
  1893  0217                     	;# 
  1894  0291                     	;# 
  1895  0291                     	;# 
  1896  0292                     	;# 
  1897  0293                     	;# 
  1898  0298                     	;# 
  1899  0298                     	;# 
  1900  0299                     	;# 
  1901  029A                     	;# 
  1902  0394                     	;# 
  1903  0395                     	;# 
  1904  0396                     	;# 
  1905  0FE4                     	;# 
  1906  0FE5                     	;# 
  1907  0FE6                     	;# 
  1908  0FE7                     	;# 
  1909  0FE8                     	;# 
  1910  0FE9                     	;# 
  1911  0FEA                     	;# 
  1912  0FEB                     	;# 
  1913  0FED                     	;# 
  1914  0FEE                     	;# 
  1915  0FEF                     	;# 
  1916  0000                     	;# 
  1917  0001                     	;# 
  1918  0002                     	;# 
  1919  0003                     	;# 
  1920  0004                     	;# 
  1921  0005                     	;# 
  1922  0006                     	;# 
  1923  0007                     	;# 
  1924  0008                     	;# 
  1925  0009                     	;# 
  1926  000A                     	;# 
  1927  000B                     	;# 
  1928  000C                     	;# 
  1929  000D                     	;# 
  1930  000E                     	;# 
  1931  0010                     	;# 
  1932  0011                     	;# 
  1933  0012                     	;# 
  1934  0015                     	;# 
  1935  0016                     	;# 
  1936  0016                     	;# 
  1937  0017                     	;# 
  1938  0018                     	;# 
  1939  0019                     	;# 
  1940  001A                     	;# 
  1941  001B                     	;# 
  1942  001C                     	;# 
  1943  008C                     	;# 
  1944  008D                     	;# 
  1945  008E                     	;# 
  1946  0090                     	;# 
  1947  0091                     	;# 
  1948  0092                     	;# 
  1949  0095                     	;# 
  1950  0096                     	;# 
  1951  0097                     	;# 
  1952  0099                     	;# 
  1953  009A                     	;# 
  1954  009B                     	;# 
  1955  009B                     	;# 
  1956  009C                     	;# 
  1957  009D                     	;# 
  1958  009E                     	;# 
  1959  010C                     	;# 
  1960  010D                     	;# 
  1961  010E                     	;# 
  1962  0116                     	;# 
  1963  0117                     	;# 
  1964  011D                     	;# 
  1965  018C                     	;# 
  1966  018D                     	;# 
  1967  018E                     	;# 
  1968  0191                     	;# 
  1969  0191                     	;# 
  1970  0192                     	;# 
  1971  0193                     	;# 
  1972  0193                     	;# 
  1973  0194                     	;# 
  1974  0195                     	;# 
  1975  0196                     	;# 
  1976  0197                     	;# 
  1977  0199                     	;# 
  1978  019A                     	;# 
  1979  019B                     	;# 
  1980  019B                     	;# 
  1981  019B                     	;# 
  1982  019B                     	;# 
  1983  019C                     	;# 
  1984  019C                     	;# 
  1985  019D                     	;# 
  1986  019E                     	;# 
  1987  019F                     	;# 
  1988  020D                     	;# 
  1989  0210                     	;# 
  1990  0211                     	;# 
  1991  0211                     	;# 
  1992  0212                     	;# 
  1993  0212                     	;# 
  1994  0213                     	;# 
  1995  0213                     	;# 
  1996  0214                     	;# 
  1997  0214                     	;# 
  1998  0215                     	;# 
  1999  0215                     	;# 
  2000  0215                     	;# 
  2001  0216                     	;# 
  2002  0216                     	;# 
  2003  0217                     	;# 
  2004  0217                     	;# 
  2005  0291                     	;# 
  2006  0291                     	;# 
  2007  0292                     	;# 
  2008  0293                     	;# 
  2009  0298                     	;# 
  2010  0298                     	;# 
  2011  0299                     	;# 
  2012  029A                     	;# 
  2013  0394                     	;# 
  2014  0395                     	;# 
  2015  0396                     	;# 
  2016  0FE4                     	;# 
  2017  0FE5                     	;# 
  2018  0FE6                     	;# 
  2019  0FE7                     	;# 
  2020  0FE8                     	;# 
  2021  0FE9                     	;# 
  2022  0FEA                     	;# 
  2023  0FEB                     	;# 
  2024  0FED                     	;# 
  2025  0FEE                     	;# 
  2026  0FEF                     	;# 
  2027                           
  2028                           	psect	idataBANK3
  2029  1283                     __pidataBANK3:	
  2030                           
  2031                           ;initializer for __product
  2032  1283  3463               	retlw	99
  2033  1284  3402               	retlw	2
  2034  1285  3400               	retlw	0
  2035  1286  3400               	retlw	0
  2036  1287  3400               	retlw	0
  2037  1288  3400               	retlw	0
  2038  1289  3400               	retlw	0
  2039  128A  3400               	retlw	0
  2040  128B  3400               	retlw	0
  2041  128C  3400               	retlw	0
  2042  128D  3400               	retlw	0
  2043  128E  3400               	retlw	0
  2044  128F  34FF               	retlw	255
  2045  1290  34FF               	retlw	255
  2046  1291  34FF               	retlw	255
  2047  1292  3400               	retlw	0
  2048  1293  3400               	retlw	0
  2049  1294  3400               	retlw	0
  2050  1295  3400               	retlw	0
  2051  1296  3400               	retlw	0
  2052  1297  3400               	retlw	0
  2053  1298  3400               	retlw	0
  2054  1299  3400               	retlw	0
  2055  129A  3400               	retlw	0
  2056  129B  3400               	retlw	0
  2057  129C  3400               	retlw	0
  2058  129D  3400               	retlw	0
  2059  129E  3400               	retlw	0
  2060  129F  3400               	retlw	0
  2061  12A0  3400               	retlw	0
  2062  12A1  3400               	retlw	0
  2063  12A2  3400               	retlw	0
  2064                           
  2065                           	psect	stringtext
  2066  1000                     __pstringtext:	
  2067  1000                     _CC2500_registers_address:	
  2068  1000  3403               	retlw	3
  2069  1001  3416               	retlw	22
  2070  1002  3417               	retlw	23
  2071  1003  341E               	retlw	30
  2072  1004  341F               	retlw	31
  2073  1005  3420               	retlw	32
  2074  1006  342A               	retlw	42
  2075  1007  342B               	retlw	43
  2076  1008  340B               	retlw	11
  2077  1009  340C               	retlw	12
  2078  100A  340D               	retlw	13
  2079  100B  340E               	retlw	14
  2080  100C  340F               	retlw	15
  2081  100D  3410               	retlw	16
  2082  100E  3411               	retlw	17
  2083  100F  3412               	retlw	18
  2084  1010  3413               	retlw	19
  2085  1011  3414               	retlw	20
  2086  1012  340A               	retlw	10
  2087  1013  3415               	retlw	21
  2088  1014  3421               	retlw	33
  2089  1015  3422               	retlw	34
  2090  1016  3418               	retlw	24
  2091  1017  3419               	retlw	25
  2092  1018  341A               	retlw	26
  2093  1019  341B               	retlw	27
  2094  101A  341C               	retlw	28
  2095  101B  341D               	retlw	29
  2096  101C  3423               	retlw	35
  2097  101D  3424               	retlw	36
  2098  101E  3425               	retlw	37
  2099  101F  3426               	retlw	38
  2100  1020  3429               	retlw	41
  2101  1021  342C               	retlw	44
  2102  1022  342D               	retlw	45
  2103  1023  342E               	retlw	46
  2104  1024  3400               	retlw	0
  2105  1025  3401               	retlw	1
  2106  1026  3402               	retlw	2
  2107  1027  3407               	retlw	7
  2108  1028  3408               	retlw	8
  2109  1029  3409               	retlw	9
  2110  102A  3406               	retlw	6
  2111  102B  3404               	retlw	4
  2112  102C  3405               	retlw	5
  2113  102D  3427               	retlw	39
  2114  102E  3428               	retlw	40
  2115  102F                     __end_of_CC2500_registers_address:	
  2116  102F                     _CC2500_rfSettings:	
  2117  102F  3407               	retlw	7
  2118  1030  3407               	retlw	7
  2119  1031  3430               	retlw	48
  2120  1032  3487               	retlw	135
  2121  1033  346B               	retlw	107
  2122  1034  34F8               	retlw	248
  2123  1035  347F               	retlw	127
  2124  1036  343F               	retlw	63
  2125  1037  3409               	retlw	9
  2126  1038  3400               	retlw	0
  2127  1039  345C               	retlw	92
  2128  103A  34A7               	retlw	167
  2129  103B  3462               	retlw	98
  2130  103C  3486               	retlw	134
  2131  103D  3483               	retlw	131
  2132  103E  3403               	retlw	3
  2133  103F  3422               	retlw	34
  2134  1040  34F8               	retlw	248
  2135  1041  3400               	retlw	0
  2136  1042  3444               	retlw	68
  2137  1043  34B6               	retlw	182
  2138  1044  3410               	retlw	16
  2139  1045  3418               	retlw	24
  2140  1046  341D               	retlw	29
  2141  1047  341C               	retlw	28
  2142  1048  34C7               	retlw	199
  2143  1049  3400               	retlw	0
  2144  104A  34B2               	retlw	178
  2145  104B  34EA               	retlw	234
  2146  104C  340A               	retlw	10
  2147  104D  3400               	retlw	0
  2148  104E  3411               	retlw	17
  2149  104F  3459               	retlw	89
  2150  1050  3488               	retlw	136
  2151  1051  3431               	retlw	49
  2152  1052  340B               	retlw	11
  2153  1053  342F               	retlw	47
  2154  1054  342E               	retlw	46
  2155  1055  3406               	retlw	6
  2156  1056  3404               	retlw	4
  2157  1057  3405               	retlw	5
  2158  1058  3400               	retlw	0
  2159  1059  3430               	retlw	48
  2160  105A  34D3               	retlw	211
  2161  105B  3491               	retlw	145
  2162  105C  3441               	retlw	65
  2163  105D  3400               	retlw	0
  2164  105E                     __end_of_CC2500_rfSettings:	
  2165  105E                     _CC2500_patable_vaule:	
  2166  105E  34FE               	retlw	254
  2167  105F  34FE               	retlw	254
  2168  1060  34FE               	retlw	254
  2169  1061  34FE               	retlw	254
  2170  1062  34FE               	retlw	254
  2171  1063  34FE               	retlw	254
  2172  1064  34FE               	retlw	254
  2173  1065  34FE               	retlw	254
  2174  1066                     __end_of_CC2500_patable_vaule:	
  2175                           
  2176                           	psect	nvCOMMON
  2177  007D                     __pnvCOMMON:	
  2178  007D                     _product:	
  2179  007D                     	ds	1
  2180                           
  2181                           	psect	nvBANK1
  2182  00E8                     __pnvBANK1:	
  2183  00E8                     _Timer0:	
  2184  00E8                     	ds	1
  2185  00E9                     _WDT:	
  2186  00E9                     	ds	1
  2187  00EA                     _myMain:	
  2188  00EA                     	ds	1
  2189  00EB                     _Memory:	
  2190  00EB                     	ds	1
  2191  000C                     _PORTA	set	12
  2192  000D                     _PORTB	set	13
  2193  000E                     _PORTC	set	14
  2194  0015                     _TMR0	set	21
  2195  005F                     _GIE	set	95
  2196  005C                     _INTE	set	92
  2197  0059                     _INTF	set	89
  2198  005B                     _IOCIE	set	91
  2199  0058                     _IOCIF	set	88
  2200  005E                     _PEIE	set	94
  2201  0060                     _RA0	set	96
  2202  0063                     _RA3	set	99
  2203  0064                     _RA4	set	100
  2204  0066                     _RA6	set	102
  2205  0067                     _RA7	set	103
  2206  0068                     _RB0	set	104
  2207  0069                     _RB1	set	105
  2208  006B                     _RB3	set	107
  2209  006C                     _RB4	set	108
  2210  006D                     _RB5	set	109
  2211  0070                     _RC0	set	112
  2212  0071                     _RC1	set	113
  2213  0072                     _RC2	set	114
  2214  0074                     _RC4	set	116
  2215  0075                     _RC5	set	117
  2216  0077                     _RC7	set	119
  2217  005D                     _TMR0IE	set	93
  2218  005A                     _TMR0IF	set	90
  2219  009D                     _ADCON0	set	157
  2220  009E                     _ADCON1	set	158
  2221  009C                     _ADRESH	set	156
  2222  009B                     _ADRESL	set	155
  2223  0095                     _OPTION_REG	set	149
  2224  0099                     _OSCCON	set	153
  2225  008C                     _TRISA	set	140
  2226  008D                     _TRISB	set	141
  2227  008E                     _TRISC	set	142
  2228  0097                     _WDTCON	set	151
  2229  04E9                     _GO_nDONE	set	1257
  2230  0117                     _FVRCON	set	279
  2231  010C                     _LATA	set	268
  2232  010D                     _LATB	set	269
  2233  010E                     _LATC	set	270
  2234  018C                     _ANSELA	set	396
  2235  018D                     _ANSELB	set	397
  2236  018E                     _ANSELC	set	398
  2237  0192                     _PMADRH	set	402
  2238  0191                     _PMADRL	set	401
  2239  0196                     _PMCON2	set	406
  2240  0194                     _PMDATH	set	404
  2241  0193                     _PMDATL	set	403
  2242  0CAE                     _CFGS	set	3246
  2243  0CAC                     _FREE	set	3244
  2244  0CAD                     _LWLO	set	3245
  2245  0CA8                     _RD	set	3240
  2246  0CA9                     _WR	set	3241
  2247  0CAA                     _WREN	set	3242
  2248  1068                     _WPUB0	set	4200
  2249  1069                     _WPUB1	set	4201
  2250  106A                     _WPUB2	set	4202
  2251  0396                     _IOCBF	set	918
  2252  0395                     _IOCBN	set	917
  2253  0394                     _IOCBP	set	916
  2254  1CB2                     _IOCBF2	set	7346
  2255                           
  2256                           ; #config settings
  2257  0000                     
  2258                           	psect	cinit
  2259  0018                     start_initialization:	
  2260  0018                     __initialization:	
  2261                           
  2262                           ; Clear objects allocated to BITCOMMON
  2263  0018  01FC               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
  2264                           
  2265                           ; Clear objects allocated to COMMON
  2266  0019  01F8               	clrf	__pbssCOMMON& (0+127)
  2267  001A  01F9               	clrf	(__pbssCOMMON+1)& (0+127)
  2268  001B  01FA               	clrf	(__pbssCOMMON+2)& (0+127)
  2269  001C  01FB               	clrf	(__pbssCOMMON+3)& (0+127)
  2270                           
  2271                           ; Clear objects allocated to BANK1
  2272  001D  30A0               	movlw	low __pbssBANK1
  2273  001E  0084               	movwf	4
  2274  001F  3000               	movlw	high __pbssBANK1
  2275  0020  0085               	movwf	5
  2276  0021  3048               	movlw	72
  2277  0022  319E  264F  3180   	fcall	clear_ram0
  2278                           
  2279                           ; Clear objects allocated to BANK2
  2280  0025  3020               	movlw	low __pbssBANK2
  2281  0026  0084               	movwf	4
  2282  0027  3001               	movlw	high __pbssBANK2
  2283  0028  0085               	movwf	5
  2284  0029  3042               	movlw	66
  2285  002A  319E  264F  3180   	fcall	clear_ram0
  2286                           
  2287                           ; Clear objects allocated to BANK3
  2288  002D  30C0               	movlw	low __pbssBANK3
  2289  002E  0084               	movwf	4
  2290  002F  3001               	movlw	high __pbssBANK3
  2291  0030  0085               	movwf	5
  2292  0031  3010               	movlw	16
  2293  0032  319E  264F  3180   	fcall	clear_ram0
  2294                           
  2295                           ; Clear objects allocated to BANK4
  2296  0035  3020               	movlw	low __pbssBANK4
  2297  0036  0084               	movwf	4
  2298  0037  3002               	movlw	high __pbssBANK4
  2299  0038  0085               	movwf	5
  2300  0039  3025               	movlw	37
  2301  003A  319E  264F  3180   	fcall	clear_ram0
  2302                           
  2303                           ; Initialize objects allocated to BANK3
  2304  003D  3083               	movlw	low __pidataBANK3
  2305  003E  0084               	movwf	4
  2306  003F  3092               	movlw	(high __pidataBANK3)| (0+128)
  2307  0040  0085               	movwf	5
  2308  0041  30A0               	movlw	low __pdataBANK3
  2309  0042  0086               	movwf	6
  2310  0043  3001               	movlw	high __pdataBANK3
  2311  0044  0087               	movwf	7
  2312  0045  3020               	movlw	32
  2313  0046  319E  2649         	fcall	init_ram
  2314  0048                     end_of_initialization:	
  2315                           ;End of C runtime variable initialization code
  2316                           
  2317  0048                     __end_of__initialization:	
  2318  0048  107E               	bcf	pic14e$flags,0	;clear compiler interrupt flag
  2319  0049  0020               	movlb	0
  2320  004A  3197  2F51         	ljmp	_main	;jump to C main() function
  2321                           
  2322                           	psect	bitbssCOMMON
  2323  03E0                     __pbitbssCOMMON:	
  2324  03E0                     _Receive_OK:	
  2325  03E0                     	ds	1
  2326  03E1                     _Transceive_OK:	
  2327  03E1                     	ds	1
  2328                           
  2329                           	psect	bssCOMMON
  2330  0078                     __pbssCOMMON:	
  2331  0078                     _Buz:	
  2332  0078                     	ds	1
  2333  0079                     _DimmerLights:	
  2334  0079                     	ds	1
  2335  007A                     _DimmerLightsIntr:	
  2336  007A                     	ds	1
  2337  007B                     _Sw:	
  2338  007B                     	ds	1
  2339                           
  2340                           	psect	bssBANK1
  2341  00A0                     __pbssBANK1:	
  2342  00A0                     _RF_Data:	
  2343  00A0                     	ds	21
  2344  00B5                     _RF_Count:	
  2345  00B5                     	ds	2
  2346  00B7                     _CRC:	
  2347  00B7                     	ds	1
  2348  00B8                     _DelayOff:	
  2349  00B8                     	ds	1
  2350  00B9                     _Dimmer:	
  2351  00B9                     	ds	1
  2352  00BA                     _DimmerLights11:	
  2353  00BA                     	ds	1
  2354  00BB                     _DimmerLights22:	
  2355  00BB                     	ds	1
  2356  00BC                     _LED:	
  2357  00BC                     	ds	1
  2358  00BD                     _RF:	
  2359  00BD                     	ds	1
  2360  00BE                     _RFSW:	
  2361  00BE                     	ds	1
  2362  00BF                     _RSSI:	
  2363  00BF                     	ds	1
  2364  00C0                     _Rx_Length:	
  2365  00C0                     	ds	1
  2366  00C1                     _SPI0Buffer:	
  2367  00C1                     	ds	1
  2368  00C2                     _Tx_Length:	
  2369  00C2                     	ds	1
  2370  00C3                     _r_address:	
  2371  00C3                     	ds	1
  2372  00C4                     _r_data:	
  2373  00C4                     	ds	1
  2374  00C5                     _s_data:	
  2375  00C5                     	ds	1
  2376  00C6                     _DlySw1:	
  2377  00C6                     	ds	5
  2378  00CB                     _DlySw2:	
  2379  00CB                     	ds	5
  2380  00D0                     _RF1:	
  2381  00D0                     	ds	5
  2382  00D5                     _VarErrLED:	
  2383  00D5                     	ds	4
  2384  00D9                     _VarLED1:	
  2385  00D9                     	ds	4
  2386  00DD                     _VarLED2:	
  2387  00DD                     	ds	4
  2388  00E1                     _Dimmer1:	
  2389  00E1                     	ds	3
  2390  00E4                     __WDT:	
  2391  00E4                     	ds	2
  2392  00E6                     _RFSW1:	
  2393  00E6                     	ds	1
  2394  00E7                     _RFSW2:	
  2395  00E7                     	ds	1
  2396                           
  2397                           	psect	bssBANK2
  2398  0120                     __pbssBANK2:	
  2399  0120                     _DimmerLights1:	
  2400  0120                     	ds	14
  2401  012E                     _DimmerLights2:	
  2402  012E                     	ds	14
  2403  013C                     _Buz1:	
  2404  013C                     	ds	12
  2405  0148                     _Sw1:	
  2406  0148                     	ds	9
  2407  0151                     _Sw2:	
  2408  0151                     	ds	9
  2409  015A                     _VarTimer0:	
  2410  015A                     	ds	8
  2411                           
  2412                           	psect	bssBANK3
  2413  01C0                     __pbssBANK3:	
  2414  01C0                     __myMain:	
  2415  01C0                     	ds	16
  2416                           
  2417                           	psect	dataBANK3
  2418  01A0                     __pdataBANK3:	
  2419  01A0                     __product:	
  2420  01A0                     	ds	32
  2421                           
  2422                           	psect	bssBANK4
  2423  0220                     __pbssBANK4:	
  2424  0220                     _VarMemory:	
  2425  0220                     	ds	37
  2426                           
  2427                           	psect	clrtext
  2428  1E4F                     clear_ram0:	
  2429                           ;	Called with FSR0 containing the base address, and
  2430                           ;	WREG with the size to clear
  2431                           
  2432  1E4F  0064               	clrwdt	;clear the watchdog before getting into this loop
  2433  1E50                     clrloop0:	
  2434  1E50  0180               	clrf	0	;clear RAM location pointed to by FSR
  2435  1E51  3101               	addfsr 0,1
  2436  1E52  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2437  1E53  2E50               	goto	clrloop0	;have we reached the end yet?
  2438  1E54  3400               	retlw	0	;all done for this memory range, return
  2439                           
  2440                           	psect	inittext
  2441  1E49                     init_ram:	
  2442  1E49  00FE               	movwf	126
  2443  1E4A                     initloop:	
  2444  1E4A  0012               	moviw fsr0++
  2445  1E4B  001E               	movwi fsr1++
  2446  1E4C  0BFE               	decfsz	126,f
  2447  1E4D  2E4A               	goto	initloop
  2448  1E4E  3400               	retlw	0
  2449                           
  2450                           	psect	cstackCOMMON
  2451  0070                     __pcstackCOMMON:	
  2452  0070                     ?_CC2500_WriteByte:	
  2453  0070                     ?_CC2500_WriteCommand:	
  2454                           ; 0 bytes @ 0x0
  2455                           
  2456  0070                     ?_CC2500_ReadStatus:	
  2457                           ; 0 bytes @ 0x0
  2458                           
  2459  0070                     ?_CC2500_ReadByte:	
  2460                           ; 0 bytes @ 0x0
  2461                           
  2462  0070                     ?_CC2500_PowerRST:	
  2463                           ; 0 bytes @ 0x0
  2464                           
  2465  0070                     ?_CC2500_InitSetREG:	
  2466                           ; 0 bytes @ 0x0
  2467                           
  2468  0070                     ?_CC2500_InitPATable:	
  2469                           ; 0 bytes @ 0x0
  2470                           
  2471  0070                     ?_CC2500_ClearTXFIFO:	
  2472                           ; 0 bytes @ 0x0
  2473                           
  2474  0070                     ?_CC2500_ClearRXFIFO:	
  2475                           ; 0 bytes @ 0x0
  2476                           
  2477  0070                     ?_CC2500_FrequencyCabr:	
  2478                           ; 0 bytes @ 0x0
  2479                           
  2480  0070                     ?_CC2500_SIDLEMode:	
  2481                           ; 0 bytes @ 0x0
  2482                           
  2483  0070                     ?_DlyOff_Initialization:	
  2484                           ; 0 bytes @ 0x0
  2485                           
  2486  0070                     ?_DlyOff_Main:	
  2487                           ; 0 bytes @ 0x0
  2488                           
  2489  0070                     ?_setTxData:	
  2490                           ; 0 bytes @ 0x0
  2491                           
  2492  0070                     ?_setDimmerLights_Initialization:	
  2493                           ; 0 bytes @ 0x0
  2494                           
  2495  0070                     ?_Dimmer_Initialization:	
  2496                           ; 0 bytes @ 0x0
  2497                           
  2498  0070                     ?_setMemory_GO:	
  2499                           ; 0 bytes @ 0x0
  2500                           
  2501  0070                     ?_setDimmerLights_Main:	
  2502                           ; 0 bytes @ 0x0
  2503                           
  2504  0070                     ?_setLED_Initialization:	
  2505                           ; 0 bytes @ 0x0
  2506                           
  2507  0070                     ?_setLED_Main:	
  2508                           ; 0 bytes @ 0x0
  2509                           
  2510  0070                     ?_Fosc_Set:	
  2511                           ; 0 bytes @ 0x0
  2512                           
  2513  0070                     ?_IO_Set:	
  2514                           ; 0 bytes @ 0x0
  2515                           
  2516  0070                     ?_TMR0_Set:	
  2517                           ; 0 bytes @ 0x0
  2518                           
  2519  0070                     ?_ADC_Set:	
  2520                           ; 0 bytes @ 0x0
  2521                           
  2522  0070                     ?_INT_Set:	
  2523                           ; 0 bytes @ 0x0
  2524                           
  2525  0070                     ?_IOC_Set:	
  2526                           ; 0 bytes @ 0x0
  2527                           
  2528  0070                     ?_WDT_Set:	
  2529                           ; 0 bytes @ 0x0
  2530                           
  2531  0070                     ?_IOC_ISR:	
  2532                           ; 0 bytes @ 0x0
  2533                           
  2534  0070                     ?_TMR0_ISR:	
  2535                           ; 0 bytes @ 0x0
  2536                           
  2537  0070                     ?_INT_ISR:	
  2538                           ; 0 bytes @ 0x0
  2539                           
  2540  0070                     ?_Flash_Memory_Write:	
  2541                           ; 0 bytes @ 0x0
  2542                           
  2543  0070                     ?_Flash_Memory_Modify:	
  2544                           ; 0 bytes @ 0x0
  2545                           
  2546  0070                     ?_WDT_Clearing:	
  2547                           ; 0 bytes @ 0x0
  2548                           
  2549  0070                     ?_myMain_Initialization:	
  2550                           ; 0 bytes @ 0x0
  2551                           
  2552  0070                     ?_Switch_Initialization:	
  2553                           ; 0 bytes @ 0x0
  2554                           
  2555  0070                     ?_RF_Initialization:	
  2556                           ; 0 bytes @ 0x0
  2557                           
  2558  0070                     ?_my_Main:	
  2559                           ; 0 bytes @ 0x0
  2560                           
  2561  0070                     ?_Switch_Main:	
  2562                           ; 0 bytes @ 0x0
  2563                           
  2564  0070                     ?_RF_Main:	
  2565                           ; 0 bytes @ 0x0
  2566                           
  2567  0070                     ?_setSw_Enable:	
  2568                           ; 0 bytes @ 0x0
  2569                           
  2570  0070                     ?_setRF_Initialization:	
  2571                           ; 0 bytes @ 0x0
  2572                           
  2573  0070                     ?_setRF_Main:	
  2574                           ; 0 bytes @ 0x0
  2575                           
  2576  0070                     ?_RF_RxDisable:	
  2577                           ; 0 bytes @ 0x0
  2578                           
  2579  0070                     ?_getRxData:	
  2580                           ; 0 bytes @ 0x0
  2581                           
  2582  0070                     ?_setLog_Code:	
  2583                           ; 0 bytes @ 0x0
  2584                           
  2585  0070                     ?_setControl_Lights_Table:	
  2586                           ; 0 bytes @ 0x0
  2587                           
  2588  0070                     ?_setRFSW_Control:	
  2589                           ; 0 bytes @ 0x0
  2590                           
  2591  0070                     ?_setRFSW_AdjControl:	
  2592                           ; 0 bytes @ 0x0
  2593                           
  2594  0070                     ?_setRF_DimmerValue:	
  2595                           ; 0 bytes @ 0x0
  2596                           
  2597  0070                     ?_setSw_Initialization:	
  2598                           ; 0 bytes @ 0x0
  2599                           
  2600  0070                     ?_setSw_Main:	
  2601                           ; 0 bytes @ 0x0
  2602                           
  2603  0070                     ?_Sw_DimmerOnFunc:	
  2604                           ; 0 bytes @ 0x0
  2605                           
  2606  0070                     ?_Sw_DimmerAdjFunc:	
  2607                           ; 0 bytes @ 0x0
  2608                           
  2609  0070                     ?_Sw_DimmerOffFunc:	
  2610                           ; 0 bytes @ 0x0
  2611                           
  2612  0070                     ?_Buzzer_Initialization:	
  2613                           ; 0 bytes @ 0x0
  2614                           
  2615  0070                     ?_Buz_Counter:	
  2616                           ; 0 bytes @ 0x0
  2617                           
  2618  0070                     ??_Buz_Counter:	
  2619                           ; 0 bytes @ 0x0
  2620                           
  2621  0070                     ?_Buzzer_Main:	
  2622                           ; 0 bytes @ 0x0
  2623                           
  2624  0070                     ?_CC2500_TxData:	
  2625                           ; 0 bytes @ 0x0
  2626                           
  2627  0070                     ?_CC2500_RxData:	
  2628                           ; 0 bytes @ 0x0
  2629                           
  2630  0070                     ?_CC2500_PowerOnInitial:	
  2631                           ; 0 bytes @ 0x0
  2632                           
  2633  0070                     ?_DelayOffPointSelect:	
  2634                           ; 0 bytes @ 0x0
  2635                           
  2636  0070                     ?_DelayOff_Initialization:	
  2637                           ; 0 bytes @ 0x0
  2638                           
  2639  0070                     ?_DelayOff_Main:	
  2640                           ; 0 bytes @ 0x0
  2641                           
  2642  0070                     ?_DimmerIntrPointSelect:	
  2643                           ; 0 bytes @ 0x0
  2644                           
  2645  0070                     ??_DimmerIntrPointSelect:	
  2646                           ; 0 bytes @ 0x0
  2647                           
  2648  0070                     ?_setDimmerLights_IntrControl:	
  2649                           ; 0 bytes @ 0x0
  2650                           
  2651  0070                     ?_setDimmerLights_IntrGO:	
  2652                           ; 0 bytes @ 0x0
  2653                           
  2654  0070                     ?_DimmerLightsPointSelect:	
  2655                           ; 0 bytes @ 0x0
  2656                           
  2657  0070                     ?_DimmerLights_Initialization:	
  2658                           ; 0 bytes @ 0x0
  2659                           
  2660  0070                     ?_DimmerLights_Close:	
  2661                           ; 0 bytes @ 0x0
  2662                           
  2663  0070                     ?_DimmerLights_Main:	
  2664                           ; 0 bytes @ 0x0
  2665                           
  2666  0070                     ?_setDimmerLights_AdjRF:	
  2667                           ; 0 bytes @ 0x0
  2668                           
  2669  0070                     ?_LedPointSelect:	
  2670                           ; 0 bytes @ 0x0
  2671                           
  2672  0070                     ?_LED_Initialization:	
  2673                           ; 0 bytes @ 0x0
  2674                           
  2675  0070                     ?_LED_Main:	
  2676                           ; 0 bytes @ 0x0
  2677                           
  2678  0070                     ?_Mcu_Initialization:	
  2679                           ; 0 bytes @ 0x0
  2680                           
  2681  0070                     ?_ISR:	
  2682                           ; 0 bytes @ 0x0
  2683                           
  2684  0070                     ?_setDimmerReClock:	
  2685                           ; 0 bytes @ 0x0
  2686                           
  2687  0070                     ?_setINT_GO:	
  2688                           ; 0 bytes @ 0x0
  2689                           
  2690  0070                     ?_Flash_Memory_Initialization:	
  2691                           ; 0 bytes @ 0x0
  2692                           
  2693  0070                     ?_Flash_Memory_Main:	
  2694                           ; 0 bytes @ 0x0
  2695                           
  2696  0070                     ?_Flash_Memory_Unlock:	
  2697                           ; 0 bytes @ 0x0
  2698                           
  2699  0070                     ?_Flash_Memory_Erasing:	
  2700                           ; 0 bytes @ 0x0
  2701                           
  2702  0070                     ?_WDT_Main:	
  2703                           ; 0 bytes @ 0x0
  2704                           
  2705  0070                     ?_RfPointSelect:	
  2706                           ; 0 bytes @ 0x0
  2707                           
  2708  0070                     ?_RfSWPointSelect:	
  2709                           ; 0 bytes @ 0x0
  2710                           
  2711  0070                     ?_TouchPower:	
  2712                           ; 0 bytes @ 0x0
  2713                           
  2714  0070                     ?_SwPointSelect:	
  2715                           ; 0 bytes @ 0x0
  2716                           
  2717  0070                     ?i1_RfPointSelect:	
  2718                           ; 0 bytes @ 0x0
  2719                           
  2720  0070                     ??i1_RfPointSelect:	
  2721                           ; 0 bytes @ 0x0
  2722                           
  2723  0070                     ?_DelayTimejudge:	
  2724                           ; 0 bytes @ 0x0
  2725                           
  2726  0070                     ?_getDimmerLights_StatusFlag:	
  2727                           ; 1 bytes @ 0x0
  2728                           
  2729  0070                     ?_getPercentValue:	
  2730                           ; 1 bytes @ 0x0
  2731                           
  2732  0070                     ?_Flash_Memory_Read:	
  2733                           ; 1 bytes @ 0x0
  2734                           
  2735  0070                     ?_setPercentValue:	
  2736                           ; 1 bytes @ 0x0
  2737                           
  2738  0070                     setRF_Initialization@rf:	
  2739                           ; 1 bytes @ 0x0
  2740                           
  2741                           
  2742                           ; 1 bytes @ 0x0
  2743  0070                     	ds	1
  2744  0071                     DimmerIntrPointSelect@lights:	
  2745  0071                     i1RfPointSelect@rf:	
  2746                           ; 1 bytes @ 0x1
  2747                           
  2748                           
  2749                           ; 1 bytes @ 0x1
  2750  0071                     	ds	1
  2751  0072                     ?_setRF_ReceiveGO:	
  2752  0072                     ?_setRF_RxStatus:	
  2753                           ; 0 bytes @ 0x2
  2754                           
  2755  0072                     ??_setDimmerLights_IntrControl:	
  2756                           ; 0 bytes @ 0x2
  2757                           
  2758  0072                     ??_setDimmerLights_IntrGO:	
  2759                           ; 0 bytes @ 0x2
  2760                           
  2761  0072                     setDimmerLights_IntrGO@lights:	
  2762                           ; 0 bytes @ 0x2
  2763                           
  2764  0072                     setRF_ReceiveGO@command:	
  2765                           ; 1 bytes @ 0x2
  2766                           
  2767  0072                     setRF_RxStatus@command:	
  2768                           ; 1 bytes @ 0x2
  2769                           
  2770                           
  2771                           ; 1 bytes @ 0x2
  2772  0072                     	ds	1
  2773  0073                     ??_IOC_ISR:	
  2774  0073                     ??_setRF_ReceiveGO:	
  2775                           ; 0 bytes @ 0x3
  2776                           
  2777  0073                     ??_setRF_RxStatus:	
  2778                           ; 0 bytes @ 0x3
  2779                           
  2780  0073                     ??_setDimmerReClock:	
  2781                           ; 0 bytes @ 0x3
  2782                           
  2783  0073                     setRF_ReceiveGO@rf:	
  2784                           ; 0 bytes @ 0x3
  2785                           
  2786  0073                     setRF_RxStatus@rf:	
  2787                           ; 1 bytes @ 0x3
  2788                           
  2789                           
  2790                           ; 1 bytes @ 0x3
  2791  0073                     	ds	1
  2792  0074                     ??_INT_ISR:	
  2793                           
  2794                           ; 0 bytes @ 0x4
  2795  0074                     	ds	2
  2796  0076                     setDimmerLights_IntrControl@lights:	
  2797                           
  2798                           ; 1 bytes @ 0x6
  2799  0076                     	ds	1
  2800  0077                     ??_TMR0_ISR:	
  2801  0077                     ??_ISR:	
  2802                           ; 0 bytes @ 0x7
  2803                           
  2804                           
  2805                           ; 0 bytes @ 0x7
  2806  0077                     	ds	1
  2807                           
  2808                           	psect	cstackBANK0
  2809  0020                     __pcstackBANK0:	
  2810  0020                     ??_CC2500_WriteByte:	
  2811  0020                     ??_CC2500_ReadByte:	
  2812                           ; 0 bytes @ 0x0
  2813                           
  2814  0020                     ?_DelayTime_1us:	
  2815                           ; 0 bytes @ 0x0
  2816                           
  2817  0020                     ??_DelayTimejudge:	
  2818                           ; 0 bytes @ 0x0
  2819                           
  2820  0020                     ??_Dimmer_Initialization:	
  2821                           ; 0 bytes @ 0x0
  2822                           
  2823  0020                     ??_getDimmerLights_StatusFlag:	
  2824                           ; 0 bytes @ 0x0
  2825                           
  2826  0020                     ??_setMemory_GO:	
  2827                           ; 0 bytes @ 0x0
  2828                           
  2829  0020                     ??_Fosc_Set:	
  2830                           ; 0 bytes @ 0x0
  2831                           
  2832  0020                     ??_IO_Set:	
  2833                           ; 0 bytes @ 0x0
  2834                           
  2835  0020                     ??_TMR0_Set:	
  2836                           ; 0 bytes @ 0x0
  2837                           
  2838  0020                     ??_ADC_Set:	
  2839                           ; 0 bytes @ 0x0
  2840                           
  2841  0020                     ??_INT_Set:	
  2842                           ; 0 bytes @ 0x0
  2843                           
  2844  0020                     ??_IOC_Set:	
  2845                           ; 0 bytes @ 0x0
  2846                           
  2847  0020                     ??_WDT_Set:	
  2848                           ; 0 bytes @ 0x0
  2849                           
  2850  0020                     ??_Flash_Memory_Read:	
  2851                           ; 0 bytes @ 0x0
  2852                           
  2853  0020                     ??_Flash_Memory_Write:	
  2854                           ; 0 bytes @ 0x0
  2855                           
  2856  0020                     ??_WDT_Clearing:	
  2857                           ; 0 bytes @ 0x0
  2858                           
  2859  0020                     ??_myMain_Initialization:	
  2860                           ; 0 bytes @ 0x0
  2861                           
  2862  0020                     ??_setRF_Initialization:	
  2863                           ; 0 bytes @ 0x0
  2864                           
  2865  0020                     ??_Buzzer_Initialization:	
  2866                           ; 0 bytes @ 0x0
  2867                           
  2868  0020                     ??_Buzzer_Main:	
  2869                           ; 0 bytes @ 0x0
  2870                           
  2871  0020                     ??_DelayOffPointSelect:	
  2872                           ; 0 bytes @ 0x0
  2873                           
  2874  0020                     ??_DimmerLightsPointSelect:	
  2875                           ; 0 bytes @ 0x0
  2876                           
  2877  0020                     ??_LedPointSelect:	
  2878                           ; 0 bytes @ 0x0
  2879                           
  2880  0020                     ??_setINT_GO:	
  2881                           ; 0 bytes @ 0x0
  2882                           
  2883  0020                     ??_Flash_Memory_Unlock:	
  2884                           ; 0 bytes @ 0x0
  2885                           
  2886  0020                     ??_Flash_Memory_Erasing:	
  2887                           ; 0 bytes @ 0x0
  2888                           
  2889  0020                     ??_WDT_Main:	
  2890                           ; 0 bytes @ 0x0
  2891                           
  2892  0020                     ??_RfPointSelect:	
  2893                           ; 0 bytes @ 0x0
  2894                           
  2895  0020                     ??_RfSWPointSelect:	
  2896                           ; 0 bytes @ 0x0
  2897                           
  2898  0020                     ??_TouchPower:	
  2899                           ; 0 bytes @ 0x0
  2900                           
  2901  0020                     ??_SwPointSelect:	
  2902                           ; 0 bytes @ 0x0
  2903                           
  2904  0020                     ?___awdiv:	
  2905                           ; 0 bytes @ 0x0
  2906                           
  2907  0020                     ?___ftpack:	
  2908                           ; 2 bytes @ 0x0
  2909                           
  2910  0020                     setINT_GO@command:	
  2911                           ; 3 bytes @ 0x0
  2912                           
  2913  0020                     DelayTime_1us@count:	
  2914                           ; 1 bytes @ 0x0
  2915                           
  2916  0020                     ___awdiv@divisor:	
  2917                           ; 2 bytes @ 0x0
  2918                           
  2919  0020                     ___ftpack@arg:	
  2920                           ; 2 bytes @ 0x0
  2921                           
  2922                           
  2923                           ; 3 bytes @ 0x0
  2924  0020                     	ds	1
  2925  0021                     ??_RF_Initialization:	
  2926  0021                     ??_Mcu_Initialization:	
  2927                           ; 0 bytes @ 0x1
  2928                           
  2929  0021                     CC2500_WriteByte@loop_a:	
  2930                           ; 0 bytes @ 0x1
  2931                           
  2932  0021                     CC2500_ReadByte@loop_b:	
  2933                           ; 1 bytes @ 0x1
  2934                           
  2935  0021                     DelayOffPointSelect@sw:	
  2936                           ; 1 bytes @ 0x1
  2937                           
  2938  0021                     DelayTimejudge@value:	
  2939                           ; 1 bytes @ 0x1
  2940                           
  2941  0021                     DimmerLightsPointSelect@lights:	
  2942                           ; 1 bytes @ 0x1
  2943                           
  2944  0021                     getDimmerLights_StatusFlag@Status:	
  2945                           ; 1 bytes @ 0x1
  2946                           
  2947  0021                     LedPointSelect@led:	
  2948                           ; 1 bytes @ 0x1
  2949                           
  2950  0021                     Flash_Memory_Read@i:	
  2951                           ; 1 bytes @ 0x1
  2952                           
  2953  0021                     Flash_Memory_Write@i:	
  2954                           ; 1 bytes @ 0x1
  2955                           
  2956  0021                     RfPointSelect@rf:	
  2957                           ; 1 bytes @ 0x1
  2958                           
  2959  0021                     RfSWPointSelect@sw:	
  2960                           ; 1 bytes @ 0x1
  2961                           
  2962  0021                     SwPointSelect@sw:	
  2963                           ; 1 bytes @ 0x1
  2964                           
  2965                           
  2966                           ; 1 bytes @ 0x1
  2967  0021                     	ds	1
  2968  0022                     ??_CC2500_WriteCommand:	
  2969  0022                     ??_CC2500_ReadStatus:	
  2970                           ; 0 bytes @ 0x2
  2971                           
  2972  0022                     ??_DelayTime_1us:	
  2973                           ; 0 bytes @ 0x2
  2974                           
  2975  0022                     ?_CC2500_WriteREG:	
  2976                           ; 0 bytes @ 0x2
  2977                           
  2978  0022                     ??_DlyOff_Initialization:	
  2979                           ; 0 bytes @ 0x2
  2980                           
  2981  0022                     ?_setSw_Status:	
  2982                           ; 0 bytes @ 0x2
  2983                           
  2984  0022                     ?_setRFSW_Status:	
  2985                           ; 0 bytes @ 0x2
  2986                           
  2987  0022                     ?_setDimmerLights_Trigger:	
  2988                           ; 0 bytes @ 0x2
  2989                           
  2990  0022                     ?_setDimmerLights_Switch:	
  2991                           ; 0 bytes @ 0x2
  2992                           
  2993  0022                     ??_setTxData:	
  2994                           ; 0 bytes @ 0x2
  2995                           
  2996  0022                     ??_setDimmerLights_Initialization:	
  2997                           ; 0 bytes @ 0x2
  2998                           
  2999  0022                     ?_setLED:	
  3000                           ; 0 bytes @ 0x2
  3001                           
  3002  0022                     ??_setLED_Main:	
  3003                           ; 0 bytes @ 0x2
  3004                           
  3005  0022                     ??_setSw_Enable:	
  3006                           ; 0 bytes @ 0x2
  3007                           
  3008  0022                     ?_setRF_Enable:	
  3009                           ; 0 bytes @ 0x2
  3010                           
  3011  0022                     ?_setDimmerLights_AdjGo:	
  3012                           ; 0 bytes @ 0x2
  3013                           
  3014  0022                     ?_setDimmerLights_TriggerAdj:	
  3015                           ; 0 bytes @ 0x2
  3016                           
  3017  0022                     ?_setRF_Learn:	
  3018                           ; 0 bytes @ 0x2
  3019                           
  3020  0022                     CC2500_WriteREG@value:	
  3021                           ; 0 bytes @ 0x2
  3022                           
  3023  0022                     DlyOff_Initialization@sw:	
  3024                           ; 1 bytes @ 0x2
  3025                           
  3026  0022                     DelayTimejudge@i:	
  3027                           ; 1 bytes @ 0x2
  3028                           
  3029  0022                     _getDimmerLights_StatusFlag$1857:	
  3030                           ; 1 bytes @ 0x2
  3031                           
  3032  0022                     setDimmerLights_Switch@command:	
  3033                           ; 1 bytes @ 0x2
  3034                           
  3035  0022                     setDimmerLights_AdjGo@command:	
  3036                           ; 1 bytes @ 0x2
  3037                           
  3038  0022                     setDimmerLights_Trigger@command:	
  3039                           ; 1 bytes @ 0x2
  3040                           
  3041  0022                     setDimmerLights_TriggerAdj@command:	
  3042                           ; 1 bytes @ 0x2
  3043                           
  3044  0022                     setLED@command:	
  3045                           ; 1 bytes @ 0x2
  3046                           
  3047  0022                     Flash_Memory_Read@address:	
  3048                           ; 1 bytes @ 0x2
  3049                           
  3050  0022                     setMemory_GO@command:	
  3051                           ; 1 bytes @ 0x2
  3052                           
  3053  0022                     setRF_Learn@command:	
  3054                           ; 1 bytes @ 0x2
  3055                           
  3056  0022                     setRF_Enable@command:	
  3057                           ; 1 bytes @ 0x2
  3058                           
  3059  0022                     setRFSW_Status@command:	
  3060                           ; 1 bytes @ 0x2
  3061                           
  3062  0022                     setSw_Enable@command:	
  3063                           ; 1 bytes @ 0x2
  3064                           
  3065  0022                     setSw_Status@command:	
  3066                           ; 1 bytes @ 0x2
  3067                           
  3068  0022                     DelayTime_1us@i:	
  3069                           ; 1 bytes @ 0x2
  3070                           
  3071  0022                     ___awdiv@dividend:	
  3072                           ; 2 bytes @ 0x2
  3073                           
  3074                           
  3075                           ; 2 bytes @ 0x2
  3076  0022                     	ds	1
  3077  0023                     ??_CC2500_WriteREG:	
  3078  0023                     ??_setSw_Status:	
  3079                           ; 0 bytes @ 0x3
  3080                           
  3081  0023                     ??_setRFSW_Status:	
  3082                           ; 0 bytes @ 0x3
  3083                           
  3084  0023                     ??_setDimmerLights_Trigger:	
  3085                           ; 0 bytes @ 0x3
  3086                           
  3087  0023                     ??_setDimmerLights_Switch:	
  3088                           ; 0 bytes @ 0x3
  3089                           
  3090  0023                     ??_setLED:	
  3091                           ; 0 bytes @ 0x3
  3092                           
  3093  0023                     ??_setRF_Enable:	
  3094                           ; 0 bytes @ 0x3
  3095                           
  3096  0023                     ??_DelayOff_Initialization:	
  3097                           ; 0 bytes @ 0x3
  3098                           
  3099  0023                     ?_setDelayOff_GO:	
  3100                           ; 0 bytes @ 0x3
  3101                           
  3102  0023                     ??_DimmerLights_Close:	
  3103                           ; 0 bytes @ 0x3
  3104                           
  3105  0023                     ??_setDimmerLights_AdjGo:	
  3106                           ; 0 bytes @ 0x3
  3107                           
  3108  0023                     ??_setDimmerLights_TriggerAdj:	
  3109                           ; 0 bytes @ 0x3
  3110                           
  3111  0023                     ??_setRF_Learn:	
  3112                           ; 0 bytes @ 0x3
  3113                           
  3114  0023                     CC2500_WriteCommand@command:	
  3115                           ; 0 bytes @ 0x3
  3116                           
  3117  0023                     CC2500_ReadStatus@status_addr:	
  3118                           ; 1 bytes @ 0x3
  3119                           
  3120  0023                     setDelayOff_GO@command:	
  3121                           ; 1 bytes @ 0x3
  3122                           
  3123  0023                     setDimmerLights_Initialization@lights:	
  3124                           ; 1 bytes @ 0x3
  3125                           
  3126  0023                     setDimmerLights_Switch@lights:	
  3127                           ; 1 bytes @ 0x3
  3128                           
  3129  0023                     setDimmerLights_AdjGo@lights:	
  3130                           ; 1 bytes @ 0x3
  3131                           
  3132  0023                     setDimmerLights_Trigger@lights:	
  3133                           ; 1 bytes @ 0x3
  3134                           
  3135  0023                     setDimmerLights_TriggerAdj@lights:	
  3136                           ; 1 bytes @ 0x3
  3137                           
  3138  0023                     setLED@led:	
  3139                           ; 1 bytes @ 0x3
  3140                           
  3141  0023                     Flash_Memory_Read@ret:	
  3142                           ; 1 bytes @ 0x3
  3143                           
  3144  0023                     setRF_Learn@rf:	
  3145                           ; 1 bytes @ 0x3
  3146                           
  3147  0023                     setTxData@rf:	
  3148                           ; 1 bytes @ 0x3
  3149                           
  3150  0023                     setRF_Enable@rf:	
  3151                           ; 1 bytes @ 0x3
  3152                           
  3153  0023                     setRFSW_Status@sw:	
  3154                           ; 1 bytes @ 0x3
  3155                           
  3156  0023                     setSw_Status@sw:	
  3157                           ; 1 bytes @ 0x3
  3158                           
  3159  0023                     ___ftpack@exp:	
  3160                           ; 1 bytes @ 0x3
  3161                           
  3162                           
  3163                           ; 1 bytes @ 0x3
  3164  0023                     	ds	1
  3165  0024                     ??_CC2500_ClearTXFIFO:	
  3166  0024                     ??_CC2500_ClearRXFIFO:	
  3167                           ; 0 bytes @ 0x4
  3168                           
  3169  0024                     ??_CC2500_SIDLEMode:	
  3170                           ; 0 bytes @ 0x4
  3171                           
  3172  0024                     ?_setDimmerLights:	
  3173                           ; 0 bytes @ 0x4
  3174                           
  3175  0024                     ??_setLED_Initialization:	
  3176                           ; 0 bytes @ 0x4
  3177                           
  3178  0024                     ??_Flash_Memory_Modify:	
  3179                           ; 0 bytes @ 0x4
  3180                           
  3181  0024                     ??_RF_RxDisable:	
  3182                           ; 0 bytes @ 0x4
  3183                           
  3184  0024                     ??_setSw_Initialization:	
  3185                           ; 0 bytes @ 0x4
  3186                           
  3187  0024                     ??_Sw_DimmerAdjFunc:	
  3188                           ; 0 bytes @ 0x4
  3189                           
  3190  0024                     ??_CC2500_TxData:	
  3191                           ; 0 bytes @ 0x4
  3192                           
  3193  0024                     ??_CC2500_RxData:	
  3194                           ; 0 bytes @ 0x4
  3195                           
  3196  0024                     ??_DimmerLights_Initialization:	
  3197                           ; 0 bytes @ 0x4
  3198                           
  3199  0024                     ??___awdiv:	
  3200                           ; 0 bytes @ 0x4
  3201                           
  3202  0024                     CC2500_WriteREG@w_addr:	
  3203                           ; 0 bytes @ 0x4
  3204                           
  3205  0024                     setDelayOff_GO@value:	
  3206                           ; 1 bytes @ 0x4
  3207                           
  3208  0024                     setDimmerLights@status:	
  3209                           ; 1 bytes @ 0x4
  3210                           
  3211  0024                     setLED_Initialization@led:	
  3212                           ; 1 bytes @ 0x4
  3213                           
  3214  0024                     setLED_Main@led:	
  3215                           ; 1 bytes @ 0x4
  3216                           
  3217  0024                     RF_RxDisable@rf:	
  3218                           ; 1 bytes @ 0x4
  3219                           
  3220  0024                     setSw_Initialization@sw:	
  3221                           ; 1 bytes @ 0x4
  3222                           
  3223  0024                     Sw_DimmerAdjFunc@Idle:	
  3224                           ; 1 bytes @ 0x4
  3225                           
  3226  0024                     ___ftpack@sign:	
  3227                           ; 1 bytes @ 0x4
  3228                           
  3229  0024                     DelayTime_1us@j:	
  3230                           ; 1 bytes @ 0x4
  3231                           
  3232                           
  3233                           ; 2 bytes @ 0x4
  3234  0024                     	ds	1
  3235  0025                     ??_CC2500_InitSetREG:	
  3236  0025                     ??_CC2500_InitPATable:	
  3237                           ; 0 bytes @ 0x5
  3238                           
  3239  0025                     ??_setDimmerLights:	
  3240                           ; 0 bytes @ 0x5
  3241                           
  3242  0025                     ??_Switch_Initialization:	
  3243                           ; 0 bytes @ 0x5
  3244                           
  3245  0025                     ??___ftpack:	
  3246                           ; 0 bytes @ 0x5
  3247                           
  3248  0025                     ??_setDelayOff_GO:	
  3249                           ; 0 bytes @ 0x5
  3250                           
  3251  0025                     ??_LED_Initialization:	
  3252                           ; 0 bytes @ 0x5
  3253                           
  3254  0025                     ??_LED_Main:	
  3255                           ; 0 bytes @ 0x5
  3256                           
  3257  0025                     CC2500_TxData@loop_e:	
  3258                           ; 0 bytes @ 0x5
  3259                           
  3260  0025                     CC2500_RxData@loop_f:	
  3261                           ; 1 bytes @ 0x5
  3262                           
  3263  0025                     Sw_DimmerAdjFunc@sw:	
  3264                           ; 1 bytes @ 0x5
  3265                           
  3266  0025                     ___awdiv@counter:	
  3267                           ; 1 bytes @ 0x5
  3268                           
  3269                           
  3270                           ; 1 bytes @ 0x5
  3271  0025                     	ds	1
  3272  0026                     ??_CC2500_PowerRST:	
  3273  0026                     ??_CC2500_FrequencyCabr:	
  3274                           ; 0 bytes @ 0x6
  3275                           
  3276  0026                     CC2500_InitSetREG@temp1:	
  3277                           ; 0 bytes @ 0x6
  3278                           
  3279  0026                     CC2500_InitPATable@temp:	
  3280                           ; 1 bytes @ 0x6
  3281                           
  3282  0026                     setDimmerLights@lights:	
  3283                           ; 1 bytes @ 0x6
  3284                           
  3285  0026                     Flash_Memory_Modify@i:	
  3286                           ; 1 bytes @ 0x6
  3287                           
  3288  0026                     ___awdiv@sign:	
  3289                           ; 1 bytes @ 0x6
  3290                           
  3291                           
  3292                           ; 1 bytes @ 0x6
  3293  0026                     	ds	1
  3294  0027                     ??_Flash_Memory_Main:	
  3295  0027                     CC2500_InitSetREG@temp2:	
  3296                           ; 0 bytes @ 0x7
  3297                           
  3298  0027                     CC2500_InitPATable@loop_d:	
  3299                           ; 1 bytes @ 0x7
  3300                           
  3301  0027                     setDelayOff_GO@sw:	
  3302                           ; 1 bytes @ 0x7
  3303                           
  3304  0027                     ___awdiv@quotient:	
  3305                           ; 1 bytes @ 0x7
  3306                           
  3307                           
  3308                           ; 2 bytes @ 0x7
  3309  0027                     	ds	1
  3310  0028                     ?___awtoft:	
  3311  0028                     CC2500_InitSetREG@loop_c:	
  3312                           ; 3 bytes @ 0x8
  3313                           
  3314  0028                     ___awtoft@c:	
  3315                           ; 1 bytes @ 0x8
  3316                           
  3317                           
  3318                           ; 2 bytes @ 0x8
  3319  0028                     	ds	1
  3320  0029                     ?_setBuz:	
  3321  0029                     ??_CC2500_PowerOnInitial:	
  3322                           ; 0 bytes @ 0x9
  3323                           
  3324  0029                     setBuz@time:	
  3325                           ; 0 bytes @ 0x9
  3326                           
  3327                           
  3328                           ; 2 bytes @ 0x9
  3329  0029                     	ds	2
  3330  002B                     ??_setBuz:	
  3331  002B                     ??___awtoft:	
  3332                           ; 0 bytes @ 0xB
  3333                           
  3334                           
  3335                           ; 0 bytes @ 0xB
  3336  002B                     	ds	1
  3337  002C                     setBuz@count:	
  3338                           
  3339                           ; 1 bytes @ 0xC
  3340  002C                     	ds	1
  3341  002D                     ??_my_Main:	
  3342  002D                     ??_setLog_Code:	
  3343                           ; 0 bytes @ 0xD
  3344                           
  3345  002D                     ___awtoft@sign:	
  3346                           ; 0 bytes @ 0xD
  3347                           
  3348                           
  3349                           ; 1 bytes @ 0xD
  3350  002D                     	ds	1
  3351  002E                     ?___ftdiv:	
  3352  002E                     ?___ftmul:	
  3353                           ; 3 bytes @ 0xE
  3354                           
  3355  002E                     setLog_Code@rf:	
  3356                           ; 3 bytes @ 0xE
  3357                           
  3358  002E                     ___ftdiv@f2:	
  3359                           ; 1 bytes @ 0xE
  3360                           
  3361  002E                     ___ftmul@f1:	
  3362                           ; 3 bytes @ 0xE
  3363                           
  3364                           
  3365                           ; 3 bytes @ 0xE
  3366  002E                     	ds	3
  3367  0031                     ___ftdiv@f1:	
  3368  0031                     ___ftmul@f2:	
  3369                           ; 3 bytes @ 0x11
  3370                           
  3371                           
  3372                           ; 3 bytes @ 0x11
  3373  0031                     	ds	3
  3374  0034                     ??___ftdiv:	
  3375  0034                     ??___ftmul:	
  3376                           ; 0 bytes @ 0x14
  3377                           
  3378                           
  3379                           ; 0 bytes @ 0x14
  3380  0034                     	ds	4
  3381  0038                     ___ftdiv@cntr:	
  3382  0038                     ___ftmul@exp:	
  3383                           ; 1 bytes @ 0x18
  3384                           
  3385                           
  3386                           ; 1 bytes @ 0x18
  3387  0038                     	ds	1
  3388  0039                     ___ftdiv@f3:	
  3389  0039                     ___ftmul@f3_as_product:	
  3390                           ; 3 bytes @ 0x19
  3391                           
  3392                           
  3393                           ; 3 bytes @ 0x19
  3394  0039                     	ds	3
  3395  003C                     ___ftdiv@exp:	
  3396  003C                     ___ftmul@cntr:	
  3397                           ; 1 bytes @ 0x1C
  3398                           
  3399                           
  3400                           ; 1 bytes @ 0x1C
  3401  003C                     	ds	1
  3402  003D                     ___ftdiv@sign:	
  3403  003D                     ___ftmul@sign:	
  3404                           ; 1 bytes @ 0x1D
  3405                           
  3406                           
  3407                           ; 1 bytes @ 0x1D
  3408  003D                     	ds	1
  3409  003E                     ?___ftadd:	
  3410  003E                     ___ftadd@f1:	
  3411                           ; 3 bytes @ 0x1E
  3412                           
  3413                           
  3414                           ; 3 bytes @ 0x1E
  3415  003E                     	ds	3
  3416  0041                     ___ftadd@f2:	
  3417                           
  3418                           ; 3 bytes @ 0x21
  3419  0041                     	ds	3
  3420  0044                     ??___ftadd:	
  3421                           
  3422                           ; 0 bytes @ 0x24
  3423  0044                     	ds	4
  3424  0048                     ___ftadd@sign:	
  3425                           
  3426                           ; 1 bytes @ 0x28
  3427  0048                     	ds	1
  3428  0049                     ___ftadd@exp2:	
  3429                           
  3430                           ; 1 bytes @ 0x29
  3431  0049                     	ds	1
  3432  004A                     ___ftadd@exp1:	
  3433                           
  3434                           ; 1 bytes @ 0x2A
  3435  004A                     	ds	1
  3436  004B                     ?___fttol:	
  3437  004B                     ___fttol@f1:	
  3438                           ; 4 bytes @ 0x2B
  3439                           
  3440                           
  3441                           ; 3 bytes @ 0x2B
  3442  004B                     	ds	4
  3443  004F                     ??___fttol:	
  3444                           
  3445                           ; 0 bytes @ 0x2F
  3446  004F                     	ds	4
  3447  0053                     ___fttol@sign1:	
  3448                           
  3449                           ; 1 bytes @ 0x33
  3450  0053                     	ds	1
  3451  0054                     ___fttol@lval:	
  3452                           
  3453                           ; 4 bytes @ 0x34
  3454  0054                     	ds	4
  3455  0058                     ___fttol@exp1:	
  3456                           
  3457                           ; 1 bytes @ 0x38
  3458  0058                     	ds	1
  3459  0059                     ??_getPercentValue:	
  3460  0059                     ??_setPercentValue:	
  3461                           ; 0 bytes @ 0x39
  3462                           
  3463  0059                     setPercentValue@value:	
  3464                           ; 0 bytes @ 0x39
  3465                           
  3466                           
  3467                           ; 1 bytes @ 0x39
  3468  0059                     	ds	1
  3469  005A                     setPercentValue@i:	
  3470                           
  3471                           ; 3 bytes @ 0x3A
  3472  005A                     	ds	1
  3473  005B                     getPercentValue@value:	
  3474                           
  3475                           ; 1 bytes @ 0x3B
  3476  005B                     	ds	1
  3477  005C                     getPercentValue@i:	
  3478                           
  3479                           ; 3 bytes @ 0x3C
  3480  005C                     	ds	1
  3481  005D                     ?_setRF_DimmerLights:	
  3482  005D                     ??_Flash_Memory_Initialization:	
  3483                           ; 0 bytes @ 0x3D
  3484                           
  3485  005D                     setRF_DimmerLights@on:	
  3486                           ; 0 bytes @ 0x3D
  3487                           
  3488                           
  3489                           ; 1 bytes @ 0x3D
  3490  005D                     	ds	1
  3491  005E                     ??_setRF_DimmerLights:	
  3492  005E                     Flash_Memory_Initialization@i:	
  3493                           ; 0 bytes @ 0x3E
  3494                           
  3495                           
  3496                           ; 1 bytes @ 0x3E
  3497  005E                     	ds	1
  3498  005F                     ??_setDimmerLights_AdjRF:	
  3499                           
  3500                           ; 0 bytes @ 0x3F
  3501  005F                     	ds	1
  3502  0060                     setDimmerLights_AdjRF@lights:	
  3503  0060                     setRF_DimmerLights@status:	
  3504                           ; 1 bytes @ 0x40
  3505                           
  3506                           
  3507                           ; 1 bytes @ 0x40
  3508  0060                     	ds	1
  3509  0061                     ??_setRF_DimmerValue:	
  3510  0061                     setRF_DimmerLights@lights:	
  3511                           ; 0 bytes @ 0x41
  3512                           
  3513                           
  3514                           ; 1 bytes @ 0x41
  3515  0061                     	ds	1
  3516  0062                     ??_DlyOff_Main:	
  3517  0062                     ?_setDimmerLights_Adj:	
  3518                           ; 0 bytes @ 0x42
  3519                           
  3520  0062                     ??_setRFSW_Control:	
  3521                           ; 0 bytes @ 0x42
  3522                           
  3523  0062                     ??_Sw_DimmerOnFunc:	
  3524                           ; 0 bytes @ 0x42
  3525                           
  3526  0062                     ??_Sw_DimmerOffFunc:	
  3527                           ; 0 bytes @ 0x42
  3528                           
  3529  0062                     setDimmerLights_Adj@status:	
  3530                           ; 0 bytes @ 0x42
  3531                           
  3532  0062                     Sw_DimmerOnFunc@Idle:	
  3533                           ; 1 bytes @ 0x42
  3534                           
  3535                           
  3536                           ; 1 bytes @ 0x42
  3537  0062                     	ds	1
  3538  0063                     ??_setDimmerLights_Adj:	
  3539  0063                     setRFSW_Control@sw:	
  3540                           ; 0 bytes @ 0x43
  3541                           
  3542  0063                     setRF_DimmerValue@lights:	
  3543                           ; 1 bytes @ 0x43
  3544                           
  3545  0063                     Sw_DimmerOnFunc@sw:	
  3546                           ; 1 bytes @ 0x43
  3547                           
  3548                           
  3549                           ; 1 bytes @ 0x43
  3550  0063                     	ds	1
  3551  0064                     ??_setRFSW_AdjControl:	
  3552  0064                     DlyOff_Main@sw:	
  3553                           ; 0 bytes @ 0x44
  3554                           
  3555  0064                     setDimmerLights_Adj@lights:	
  3556                           ; 1 bytes @ 0x44
  3557                           
  3558  0064                     Sw_DimmerOffFunc@sw:	
  3559                           ; 1 bytes @ 0x44
  3560                           
  3561                           
  3562                           ; 1 bytes @ 0x44
  3563  0064                     	ds	1
  3564  0065                     ??_setDimmerLights_Main:	
  3565  0065                     ??_setSw_Main:	
  3566                           ; 0 bytes @ 0x45
  3567                           
  3568  0065                     ??_DelayOff_Main:	
  3569                           ; 0 bytes @ 0x45
  3570                           
  3571  0065                     setDimmerLights_Main@clear:	
  3572                           ; 0 bytes @ 0x45
  3573                           
  3574                           
  3575                           ; 1 bytes @ 0x45
  3576  0065                     	ds	1
  3577  0066                     setDimmerLights_Main@lights:	
  3578  0066                     setRFSW_AdjControl@sw:	
  3579                           ; 1 bytes @ 0x46
  3580                           
  3581                           
  3582                           ; 1 bytes @ 0x46
  3583  0066                     	ds	1
  3584  0067                     ??_setControl_Lights_Table:	
  3585  0067                     ??_DimmerLights_Main:	
  3586                           ; 0 bytes @ 0x47
  3587                           
  3588  0067                     setControl_Lights_Table@rf:	
  3589                           ; 0 bytes @ 0x47
  3590                           
  3591  0067                     _setSw_Main$4998:	
  3592                           ; 1 bytes @ 0x47
  3593                           
  3594                           
  3595                           ; 1 bytes @ 0x47
  3596  0067                     	ds	1
  3597  0068                     ??_getRxData:	
  3598  0068                     getRxData@rf:	
  3599                           ; 0 bytes @ 0x48
  3600                           
  3601  0068                     _setSw_Main$4999:	
  3602                           ; 1 bytes @ 0x48
  3603                           
  3604                           
  3605                           ; 1 bytes @ 0x48
  3606  0068                     	ds	1
  3607  0069                     ??_setRF_Main:	
  3608  0069                     setSw_Main@sw:	
  3609                           ; 0 bytes @ 0x49
  3610                           
  3611                           
  3612                           ; 1 bytes @ 0x49
  3613  0069                     	ds	1
  3614  006A                     ??_Switch_Main:	
  3615  006A                     setRF_Main@rf:	
  3616                           ; 0 bytes @ 0x4A
  3617                           
  3618                           
  3619                           ; 1 bytes @ 0x4A
  3620  006A                     	ds	1
  3621  006B                     _setRF_Main$4185:	
  3622                           
  3623                           ; 1 bytes @ 0x4B
  3624  006B                     	ds	1
  3625  006C                     ??_RF_Main:	
  3626  006C                     ?_main:	
  3627                           ; 0 bytes @ 0x4C
  3628                           
  3629  006C                     main@argc:	
  3630                           ; 2 bytes @ 0x4C
  3631                           
  3632                           
  3633                           ; 2 bytes @ 0x4C
  3634  006C                     	ds	2
  3635  006E                     main@argv:	
  3636                           
  3637                           ; 2 bytes @ 0x4E
  3638  006E                     	ds	2
  3639  0070                     ??_main:	
  3640                           
  3641                           	psect	maintext
  3642  1751                     __pmaintext:	
  3643                           ; 0 bytes @ 0x50
  3644 ;;
  3645 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  3646 ;;
  3647 ;; *************** function _main *****************
  3648 ;; Defined at:
  3649 ;;		line 7 in file "../src/Main_B1.c"
  3650 ;; Parameters:    Size  Location     Type
  3651 ;;  argc            2   76[BANK0 ] int 
  3652 ;;  argv            2   78[BANK0 ] PTR PTR unsigned char 
  3653 ;; Auto vars:     Size  Location     Type
  3654 ;;		None
  3655 ;; Return value:  Size  Location     Type
  3656 ;;                  2   76[BANK0 ] int 
  3657 ;; Registers used:
  3658 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3659 ;; Tracked objects:
  3660 ;;		On entry : 17F/0
  3661 ;;		On exit  : 0/0
  3662 ;;		Unchanged: 0/0
  3663 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3664 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3665 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3666 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3667 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3668 ;;Total ram usage:        4 bytes
  3669 ;; Hardware stack levels required when called:   15
  3670 ;; This function calls:
  3671 ;;		_Buzzer_Initialization
  3672 ;;		_Buzzer_Main
  3673 ;;		_CC2500_PowerOnInitial
  3674 ;;		_DelayOff_Initialization
  3675 ;;		_DelayOff_Main
  3676 ;;		_DimmerLights_Initialization
  3677 ;;		_DimmerLights_Main
  3678 ;;		_Flash_Memory_Initialization
  3679 ;;		_Flash_Memory_Main
  3680 ;;		_LED_Initialization
  3681 ;;		_LED_Main
  3682 ;;		_Mcu_Initialization
  3683 ;;		_RF_Initialization
  3684 ;;		_RF_Main
  3685 ;;		_Switch_Initialization
  3686 ;;		_Switch_Main
  3687 ;;		_WDT_Main
  3688 ;;		_myMain_Initialization
  3689 ;;		_my_Main
  3690 ;; This function is called by:
  3691 ;;		Startup code after reset
  3692 ;; This function uses a non-reentrant model
  3693 ;;
  3694                           
  3695                           
  3696                           ;psect for function _main
  3697  1751                     _main:	
  3698                           
  3699                           ;Main_B1.c: 9: myMain_Initialization();
  3700                           
  3701                           ;incstack = 0
  3702                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3703  1751  3190  20D4  3197   	fcall	_myMain_Initialization
  3704                           
  3705                           ;Main_B1.c: 10: Mcu_Initialization();
  3706  1754  3191  21D7  3197   	fcall	_Mcu_Initialization
  3707                           
  3708                           ;Main_B1.c: 11: Flash_Memory_Initialization();
  3709  1757  3184  241E  3197   	fcall	_Flash_Memory_Initialization
  3710                           
  3711                           ;Main_B1.c: 12: LED_Initialization();
  3712  175A  319E  26F7  3197   	fcall	_LED_Initialization
  3713                           
  3714                           ;Main_B1.c: 13: Buzzer_Initialization();
  3715  175D  319E  26B2  3197   	fcall	_Buzzer_Initialization
  3716                           
  3717                           ;Main_B1.c: 15: ;;
  3718                           ;Main_B1.c: 16: ;;
  3719                           ;Main_B1.c: 17: ;;
  3720                           ;Main_B1.c: 18: ;;
  3721                           ;Main_B1.c: 19: DelayOff_Initialization();
  3722  1760  319E  266A  3197   	fcall	_DelayOff_Initialization
  3723                           
  3724                           ;Main_B1.c: 21: DimmerLights_Initialization();
  3725  1763  3191  212A  3197   	fcall	_DimmerLights_Initialization
  3726                           
  3727                           ;Main_B1.c: 22: ;;
  3728                           ;Main_B1.c: 23: ;;
  3729                           ;Main_B1.c: 24: ;;
  3730                           ;Main_B1.c: 26: Switch_Initialization();
  3731  1766  319F  2743  3197   	fcall	_Switch_Initialization
  3732                           
  3733                           ;Main_B1.c: 27: RF_Initialization();
  3734  1769  319E  2636  3197   	fcall	_RF_Initialization
  3735                           
  3736                           ;Main_B1.c: 28: CC2500_PowerOnInitial();
  3737  176C  3190  20E8  3197   	fcall	_CC2500_PowerOnInitial
  3738  176F                     l7092:	
  3739                           ;Main_B1.c: 29: ;;
  3740                           ;Main_B1.c: 32: while (1) {
  3741                           
  3742                           
  3743                           ;Main_B1.c: 33: if (myMain->PowerON) {
  3744  176F  0021               	movlb	1	; select bank1
  3745  1770  086A               	movf	_myMain^(0+128),w
  3746  1771  0086               	movwf	6
  3747  1772  3001               	movlw	1	; select bank2/3
  3748  1773  0087               	movwf	7
  3749  1774  1C01               	btfss	1,0
  3750  1775  2F79               	goto	l7096
  3751                           
  3752                           ;Main_B1.c: 35: ;;
  3753                           ;Main_B1.c: 39: ;;
  3754                           ;Main_B1.c: 43: ;;
  3755                           ;Main_B1.c: 47: ;;
  3756                           ;Main_B1.c: 59: Buzzer_Main();
  3757  1776  3187  271F  3197   	fcall	_Buzzer_Main
  3758  1779                     l7096:	
  3759                           
  3760                           ;Main_B1.c: 61: }
  3761                           ;Main_B1.c: 64: if (myMain->T0_Timerout) {
  3762  1779  0021               	movlb	1	; select bank1
  3763  177A  086A               	movf	_myMain^(0+128),w
  3764  177B  0086               	movwf	6
  3765  177C  3001               	movlw	1	; select bank2/3
  3766  177D  0087               	movwf	7
  3767  177E  1C81               	btfss	1,1
  3768  177F  2F6F               	goto	l7092
  3769                           
  3770                           ;Main_B1.c: 65: myMain->T0_Timerout = 0;
  3771  1780  086A               	movf	_myMain^(0+128),w
  3772  1781  0086               	movwf	6
  3773  1782  3001               	movlw	1	; select bank2/3
  3774  1783  0087               	movwf	7
  3775  1784  1081               	bcf	1,1
  3776                           
  3777                           ;Main_B1.c: 66: my_Main();
  3778  1785  318B  2353  3197   	fcall	_my_Main
  3779                           
  3780                           ;Main_B1.c: 67: WDT_Main();
  3781  1788  3192  220D  3197   	fcall	_WDT_Main
  3782                           
  3783                           ;Main_B1.c: 68: ;;
  3784                           ;Main_B1.c: 69: ;;
  3785                           ;Main_B1.c: 70: if (myMain->PowerON) {
  3786  178B  0021               	movlb	1	; select bank1
  3787  178C  086A               	movf	_myMain^(0+128),w
  3788  178D  0086               	movwf	6
  3789  178E  3001               	movlw	1	; select bank2/3
  3790  178F  0087               	movwf	7
  3791  1790  1C01               	btfss	1,0
  3792  1791  2F6F               	goto	l7092
  3793                           
  3794                           ;Main_B1.c: 71: Flash_Memory_Main();
  3795  1792  3195  2599  3197   	fcall	_Flash_Memory_Main
  3796                           
  3797                           ;Main_B1.c: 73: LED_Main();
  3798  1795  319F  2703  3197   	fcall	_LED_Main
  3799                           
  3800                           ;Main_B1.c: 75: ;;
  3801                           ;Main_B1.c: 76: ;;
  3802                           ;Main_B1.c: 77: ;;
  3803                           ;Main_B1.c: 78: ;;
  3804                           ;Main_B1.c: 80: ;;
  3805                           ;Main_B1.c: 81: DimmerLights_Main();
  3806  1798  319E  26C8  3197   	fcall	_DimmerLights_Main
  3807                           
  3808                           ;Main_B1.c: 82: Switch_Main();
  3809  179B  319E  2682  3197   	fcall	_Switch_Main
  3810                           
  3811                           ;Main_B1.c: 83: ;;
  3812                           ;Main_B1.c: 84: ;;
  3813                           ;Main_B1.c: 86: RF_Main();
  3814  179E  319E  263A  3197   	fcall	_RF_Main
  3815                           
  3816                           ;Main_B1.c: 87: DelayOff_Main();
  3817  17A1  319E  2672  3197   	fcall	_DelayOff_Main
  3818                           
  3819                           ;Main_B1.c: 88: ;;
  3820  17A4  2F6F               	goto	l7092
  3821  17A5                     __end_of_main:	
  3822                           
  3823                           	psect	text1
  3824  0B53                     __ptext1:	
  3825 ;; *************** function _my_Main *****************
  3826 ;; Defined at:
  3827 ;;		line 125 in file "../src/Main_B1.c"
  3828 ;; Parameters:    Size  Location     Type
  3829 ;;		None
  3830 ;; Auto vars:     Size  Location     Type
  3831 ;;		None
  3832 ;; Return value:  Size  Location     Type
  3833 ;;		None               void
  3834 ;; Registers used:
  3835 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3836 ;; Tracked objects:
  3837 ;;		On entry : 0/0
  3838 ;;		On exit  : 0/0
  3839 ;;		Unchanged: 0/0
  3840 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3841 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3842 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3843 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3844 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3845 ;;Total ram usage:        0 bytes
  3846 ;; Hardware stack levels used:    1
  3847 ;; Hardware stack levels required when called:    7
  3848 ;; This function calls:
  3849 ;;		_setBuz
  3850 ;;		_setRF_Enable
  3851 ;;		_setSw_Enable
  3852 ;; This function is called by:
  3853 ;;		_main
  3854 ;; This function uses a non-reentrant model
  3855 ;;
  3856                           
  3857                           
  3858                           ;psect for function _my_Main
  3859  0B53                     _my_Main:	
  3860                           
  3861                           ;Main_B1.c: 127: if (myMain->PowerON == 0) {
  3862                           
  3863                           ;incstack = 0
  3864                           ; Regs used in _my_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3865  0B53  0021               	movlb	1	; select bank1
  3866  0B54  086A               	movf	_myMain^(0+128),w
  3867  0B55  0086               	movwf	6
  3868  0B56  3001               	movlw	1	; select bank2/3
  3869  0B57  0087               	movwf	7
  3870  0B58  1801               	btfsc	1,0
  3871  0B59  2B95               	goto	l6988
  3872                           
  3873                           ;Main_B1.c: 128: myMain->PowerCount++;
  3874  0B5A  0A6A               	incf	_myMain^(0+128),w
  3875  0B5B  0086               	movwf	6
  3876  0B5C  3001               	movlw	1	; select bank2/3
  3877  0B5D  0087               	movwf	7
  3878  0B5E  3001               	movlw	1
  3879  0B5F  0781               	addwf	1,f
  3880  0B60  3141               	addfsr 1,1
  3881  0B61  1803               	skipnc
  3882  0B62  0A81               	incf	1,f
  3883                           
  3884                           ;Main_B1.c: 129: if (myMain->PowerCount == 150)
  3885  0B63  0A6A               	incf	_myMain^(0+128),w
  3886  0B64  0086               	movwf	6
  3887  0B65  3001               	movlw	1	; select bank2/3
  3888  0B66  0087               	movwf	7
  3889  0B67  3F40               	moviw [0]fsr1
  3890  0B68  3A96               	xorlw	150
  3891  0B69  1D03               	skipz
  3892  0B6A  2B6D               	goto	u6145
  3893  0B6B  3F41               	moviw [1]fsr1
  3894  0B6C  3A00               	xorlw	0
  3895  0B6D                     u6145:	
  3896  0B6D  1D03               	skipz
  3897  0B6E  0008               	return
  3898                           
  3899                           ;Main_B1.c: 130: {
  3900                           ;Main_B1.c: 131: myMain->PowerCount = 0;
  3901  0B6F  0A6A               	incf	_myMain^(0+128),w
  3902  0B70  0086               	movwf	6
  3903  0B71  3001               	movlw	1	; select bank2/3
  3904  0B72  0087               	movwf	7
  3905  0B73  3000               	movlw	0
  3906  0B74  3FC0               	movwi [0]fsr1
  3907  0B75  3FC1               	movwi [1]fsr1
  3908                           
  3909                           ;Main_B1.c: 132: myMain->PowerON = 1;
  3910  0B76  086A               	movf	_myMain^(0+128),w
  3911  0B77  0086               	movwf	6
  3912  0B78  3001               	movlw	1	; select bank2/3
  3913  0B79  0087               	movwf	7
  3914  0B7A  1401               	bsf	1,0
  3915                           
  3916                           ;Main_B1.c: 135: ;;
  3917                           ;Main_B1.c: 139: ;;
  3918                           ;Main_B1.c: 145: setBuz(3, 50);
  3919  0B7B  3032               	movlw	50
  3920  0B7C  0020               	movlb	0	; select bank0
  3921  0B7D  00A9               	movwf	setBuz@time
  3922  0B7E  3000               	movlw	0
  3923  0B7F  00AA               	movwf	setBuz@time+1
  3924  0B80  3003               	movlw	3
  3925  0B81  318B  23C7  318B   	fcall	_setBuz
  3926                           
  3927                           ;Main_B1.c: 146: myMain->SelfTest = 1;
  3928  0B84  0021               	movlb	1	; select bank1
  3929  0B85  086A               	movf	_myMain^(0+128),w
  3930  0B86  0086               	movwf	6
  3931  0B87  3001               	movlw	1	; select bank2/3
  3932  0B88  0087               	movwf	7
  3933  0B89  1701               	bsf	1,6
  3934                           
  3935                           ;Main_B1.c: 148: setSw_Enable(1);
  3936  0B8A  3001               	movlw	1
  3937  0B8B  3192  2229  318B   	fcall	_setSw_Enable
  3938                           
  3939                           ;Main_B1.c: 151: setRF_Enable(1, 1);
  3940  0B8E  0020               	movlb	0	; select bank0
  3941  0B8F  01A2               	clrf	setRF_Enable@command
  3942  0B90  0AA2               	incf	setRF_Enable@command,f
  3943  0B91  3001               	movlw	1
  3944  0B92  3193  23DD         	fcall	_setRF_Enable
  3945                           
  3946                           ;Main_B1.c: 155: }
  3947                           ;Main_B1.c: 156: } else {
  3948  0B94  0008               	return
  3949  0B95                     l6988:	
  3950                           
  3951                           ;Main_B1.c: 164: myMain->Count1++;
  3952  0B95  0021               	movlb	1	; select bank1
  3953  0B96  086A               	movf	_myMain^(0+128),w
  3954  0B97  3E05               	addlw	5
  3955  0B98  0086               	movwf	6
  3956  0B99  3001               	movlw	1	; select bank2/3
  3957  0B9A  0087               	movwf	7
  3958  0B9B  3001               	movlw	1
  3959  0B9C  0781               	addwf	1,f
  3960  0B9D  3141               	addfsr 1,1
  3961  0B9E  1803               	skipnc
  3962  0B9F  0A81               	incf	1,f
  3963                           
  3964                           ;Main_B1.c: 165: if (myMain->Count1 == 100)
  3965  0BA0  086A               	movf	_myMain^(0+128),w
  3966  0BA1  3E05               	addlw	5
  3967  0BA2  0086               	movwf	6
  3968  0BA3  3001               	movlw	1	; select bank2/3
  3969  0BA4  0087               	movwf	7
  3970  0BA5  3F40               	moviw [0]fsr1
  3971  0BA6  3A64               	xorlw	100
  3972  0BA7  1D03               	skipz
  3973  0BA8  2BAB               	goto	u6155
  3974  0BA9  3F41               	moviw [1]fsr1
  3975  0BAA  3A00               	xorlw	0
  3976  0BAB                     u6155:	
  3977  0BAB  1D03               	skipz
  3978  0BAC  0008               	return
  3979                           
  3980                           ;Main_B1.c: 166: {
  3981                           ;Main_B1.c: 167: myMain->Count1 = 0;
  3982  0BAD  086A               	movf	_myMain^(0+128),w
  3983  0BAE  3E05               	addlw	5
  3984  0BAF  0086               	movwf	6
  3985  0BB0  3001               	movlw	1	; select bank2/3
  3986  0BB1  0087               	movwf	7
  3987  0BB2  3000               	movlw	0
  3988  0BB3  3FC0               	movwi [0]fsr1
  3989  0BB4  3FC1               	movwi [1]fsr1
  3990                           
  3991                           ;Main_B1.c: 180: if (myMain->Flag) {
  3992  0BB5  086A               	movf	_myMain^(0+128),w
  3993  0BB6  0086               	movwf	6
  3994  0BB7  3001               	movlw	1	; select bank2/3
  3995  0BB8  0087               	movwf	7
  3996  0BB9  1D81               	btfss	1,3
  3997  0BBA  2BC1               	goto	l6996
  3998                           
  3999                           ;Main_B1.c: 181: myMain->Flag = 0;
  4000  0BBB  086A               	movf	_myMain^(0+128),w
  4001  0BBC  0086               	movwf	6
  4002  0BBD  3001               	movlw	1	; select bank2/3
  4003  0BBE  0087               	movwf	7
  4004  0BBF  1181               	bcf	1,3
  4005                           
  4006                           ;Main_B1.c: 190: } else {
  4007  0BC0  0008               	return
  4008  0BC1                     l6996:	
  4009                           
  4010                           ;Main_B1.c: 191: myMain->Flag = 1;
  4011  0BC1  086A               	movf	_myMain^(0+128),w
  4012  0BC2  0086               	movwf	6
  4013  0BC3  3001               	movlw	1	; select bank2/3
  4014  0BC4  0087               	movwf	7
  4015  0BC5  1581               	bsf	1,3
  4016  0BC6  0008               	return
  4017  0BC7                     __end_of_my_Main:	
  4018                           
  4019                           	psect	text2
  4020  1229                     __ptext2:	
  4021 ;; *************** function _setSw_Enable *****************
  4022 ;; Defined at:
  4023 ;;		line 85 in file "../src/Switch_B1.c"
  4024 ;; Parameters:    Size  Location     Type
  4025 ;;  command         1    wreg     unsigned char 
  4026 ;; Auto vars:     Size  Location     Type
  4027 ;;  command         1    2[BANK0 ] unsigned char 
  4028 ;; Return value:  Size  Location     Type
  4029 ;;		None               void
  4030 ;; Registers used:
  4031 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4032 ;; Tracked objects:
  4033 ;;		On entry : 0/0
  4034 ;;		On exit  : 0/0
  4035 ;;		Unchanged: 0/0
  4036 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4037 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4038 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4039 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4040 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4041 ;;Total ram usage:        1 bytes
  4042 ;; Hardware stack levels used:    1
  4043 ;; Hardware stack levels required when called:    6
  4044 ;; This function calls:
  4045 ;;		_SwPointSelect
  4046 ;; This function is called by:
  4047 ;;		_my_Main
  4048 ;; This function uses a non-reentrant model
  4049 ;;
  4050                           
  4051                           
  4052                           ;psect for function _setSw_Enable
  4053  1229                     _setSw_Enable:	
  4054                           
  4055                           ;incstack = 0
  4056                           ; Regs used in _setSw_Enable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4057                           ;setSw_Enable@command stored from wreg
  4058  1229  0020               	movlb	0	; select bank0
  4059  122A  00A2               	movwf	setSw_Enable@command
  4060                           
  4061                           ;Switch_B1.c: 88: SwPointSelect(1);
  4062  122B  3001               	movlw	1
  4063  122C  3190  20AC  3192   	fcall	_SwPointSelect
  4064                           
  4065                           ;Switch_B1.c: 89: Sw->Enable = command;
  4066  122F  087B               	movf	_Sw,w
  4067  1230  0086               	movwf	6
  4068  1231  3001               	movlw	1	; select bank2/3
  4069  1232  0087               	movwf	7
  4070  1233  0020               	movlb	0	; select bank0
  4071  1234  0822               	movf	setSw_Enable@command,w
  4072  1235  1001               	bcf	1,0
  4073  1236  1D03               	skipz
  4074  1237  1401               	bsf	1,0
  4075                           
  4076                           ;Switch_B1.c: 93: SwPointSelect(2);
  4077  1238  3002               	movlw	2
  4078  1239  3190  20AC         	fcall	_SwPointSelect
  4079                           
  4080                           ;Switch_B1.c: 94: Sw->Enable = command;
  4081  123B  087B               	movf	_Sw,w
  4082  123C  0086               	movwf	6
  4083  123D  3001               	movlw	1	; select bank2/3
  4084  123E  0087               	movwf	7
  4085  123F  0020               	movlb	0	; select bank0
  4086  1240  0822               	movf	setSw_Enable@command,w
  4087  1241  1001               	bcf	1,0
  4088  1242  1D03               	skipz
  4089  1243  1401               	bsf	1,0
  4090  1244  0008               	return
  4091  1245                     __end_of_setSw_Enable:	
  4092                           
  4093                           	psect	text3
  4094  13DD                     __ptext3:	
  4095 ;; *************** function _setRF_Enable *****************
  4096 ;; Defined at:
  4097 ;;		line 181 in file "../src/RF_Control_B1.c"
  4098 ;; Parameters:    Size  Location     Type
  4099 ;;  rf              1    wreg     unsigned char 
  4100 ;;  command         1    2[BANK0 ] unsigned char 
  4101 ;; Auto vars:     Size  Location     Type
  4102 ;;  rf              1    3[BANK0 ] unsigned char 
  4103 ;; Return value:  Size  Location     Type
  4104 ;;		None               void
  4105 ;; Registers used:
  4106 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4107 ;; Tracked objects:
  4108 ;;		On entry : 0/0
  4109 ;;		On exit  : 0/0
  4110 ;;		Unchanged: 0/0
  4111 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4112 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4113 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4114 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4115 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4116 ;;Total ram usage:        2 bytes
  4117 ;; Hardware stack levels used:    1
  4118 ;; Hardware stack levels required when called:    6
  4119 ;; This function calls:
  4120 ;;		_RfPointSelect
  4121 ;;		_setINT_GO
  4122 ;; This function is called by:
  4123 ;;		_my_Main
  4124 ;; This function uses a non-reentrant model
  4125 ;;
  4126                           
  4127                           
  4128                           ;psect for function _setRF_Enable
  4129  13DD                     _setRF_Enable:	
  4130                           
  4131                           ;incstack = 0
  4132                           ; Regs used in _setRF_Enable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4133                           ;setRF_Enable@rf stored from wreg
  4134  13DD  0020               	movlb	0	; select bank0
  4135  13DE  00A3               	movwf	setRF_Enable@rf
  4136                           
  4137                           ;RF_Control_B1.c: 182: RfPointSelect(rf);
  4138  13DF  0823               	movf	setRF_Enable@rf,w
  4139  13E0  319E  26DF  3193   	fcall	_RfPointSelect
  4140                           
  4141                           ;RF_Control_B1.c: 183: RF->Enable = command;
  4142  13E3  0021               	movlb	1	; select bank1
  4143  13E4  083D               	movf	_RF^(0+128),w
  4144  13E5  0086               	movwf	6
  4145  13E6  0187               	clrf	7
  4146  13E7  0020               	movlb	0	; select bank0
  4147  13E8  0822               	movf	setRF_Enable@command,w
  4148  13E9  1001               	bcf	1,0
  4149  13EA  1D03               	skipz
  4150  13EB  1401               	bsf	1,0
  4151                           
  4152                           ;RF_Control_B1.c: 184: RF->Learn = 0;
  4153  13EC  0021               	movlb	1	; select bank1
  4154  13ED  083D               	movf	_RF^(0+128),w
  4155  13EE  0086               	movwf	6
  4156  13EF  0187               	clrf	7
  4157  13F0  1301               	bcf	1,6
  4158                           
  4159                           ;RF_Control_B1.c: 185: RF->TransceiveGO = 0;
  4160  13F1  083D               	movf	_RF^(0+128),w
  4161  13F2  0086               	movwf	6
  4162  13F3  0187               	clrf	7
  4163  13F4  1101               	bcf	1,2
  4164                           
  4165                           ;RF_Control_B1.c: 186: RF->RxStatus = 0;
  4166  13F5  083D               	movf	_RF^(0+128),w
  4167  13F6  0086               	movwf	6
  4168  13F7  0187               	clrf	7
  4169  13F8  1181               	bcf	1,3
  4170                           
  4171                           ;RF_Control_B1.c: 187: RF->ReceiveGO = 0;
  4172  13F9  083D               	movf	_RF^(0+128),w
  4173  13FA  0086               	movwf	6
  4174  13FB  0187               	clrf	7
  4175  13FC  1081               	bcf	1,1
  4176                           
  4177                           ;RF_Control_B1.c: 188: RF->DebounceTime = 0;
  4178  13FD  083D               	movf	_RF^(0+128),w
  4179  13FE  3E04               	addlw	4
  4180  13FF  0086               	movwf	6
  4181  1400  0187               	clrf	7
  4182  1401  0181               	clrf	1
  4183                           
  4184                           ;RF_Control_B1.c: 189: RF->Debounce = 0;
  4185  1402  083D               	movf	_RF^(0+128),w
  4186  1403  0086               	movwf	6
  4187  1404  0187               	clrf	7
  4188  1405  1281               	bcf	1,5
  4189                           
  4190                           ;RF_Control_B1.c: 190: setINT_GO(0);
  4191  1406  3000               	movlw	0
  4192  1407  319E  2693         	fcall	_setINT_GO
  4193  1409  0008               	return
  4194  140A                     __end_of_setRF_Enable:	
  4195                           
  4196                           	psect	text4
  4197  10D4                     __ptext4:	
  4198 ;; *************** function _myMain_Initialization *****************
  4199 ;; Defined at:
  4200 ;;		line 113 in file "../src/Main_B1.c"
  4201 ;; Parameters:    Size  Location     Type
  4202 ;;		None
  4203 ;; Auto vars:     Size  Location     Type
  4204 ;;		None
  4205 ;; Return value:  Size  Location     Type
  4206 ;;		None               void
  4207 ;; Registers used:
  4208 ;;		wreg, fsr1l, fsr1h
  4209 ;; Tracked objects:
  4210 ;;		On entry : 0/0
  4211 ;;		On exit  : 0/0
  4212 ;;		Unchanged: 0/0
  4213 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4214 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4215 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4216 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4217 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4218 ;;Total ram usage:        1 bytes
  4219 ;; Hardware stack levels used:    1
  4220 ;; Hardware stack levels required when called:    5
  4221 ;; This function calls:
  4222 ;;		Nothing
  4223 ;; This function is called by:
  4224 ;;		_main
  4225 ;; This function uses a non-reentrant model
  4226 ;;
  4227                           
  4228                           
  4229                           ;psect for function _myMain_Initialization
  4230  10D4                     _myMain_Initialization:	
  4231                           
  4232                           ;Main_B1.c: 115: product = &_product;
  4233                           
  4234                           ;incstack = 0
  4235                           ; Regs used in _myMain_Initialization: [wregfsr1]
  4236  10D4  30A0               	movlw	__product& (0+255)
  4237  10D5  0020               	movlb	0	; select bank0
  4238  10D6  00A0               	movwf	??_myMain_Initialization
  4239  10D7  0820               	movf	??_myMain_Initialization,w
  4240  10D8  00FD               	movwf	_product
  4241                           
  4242                           ;Main_B1.c: 116: product->Data[20] = 210;
  4243  10D9  30D2               	movlw	210
  4244  10DA  00A0               	movwf	??_myMain_Initialization
  4245  10DB  087D               	movf	_product,w
  4246  10DC  3E14               	addlw	20
  4247  10DD  0086               	movwf	6
  4248  10DE  3001               	movlw	1	; select bank2/3
  4249  10DF  0087               	movwf	7
  4250  10E0  0820               	movf	??_myMain_Initialization,w
  4251  10E1  0081               	movwf	1
  4252                           
  4253                           ;Main_B1.c: 119: myMain = &_myMain;
  4254  10E2  30C0               	movlw	__myMain& (0+255)
  4255  10E3  00A0               	movwf	??_myMain_Initialization
  4256  10E4  0820               	movf	??_myMain_Initialization,w
  4257  10E5  0021               	movlb	1	; select bank1
  4258  10E6  00EA               	movwf	_myMain^(0+128)
  4259  10E7  0008               	return
  4260  10E8                     __end_of_myMain_Initialization:	
  4261                           
  4262                           	psect	text5
  4263  120D                     __ptext5:	
  4264 ;; *************** function _WDT_Main *****************
  4265 ;; Defined at:
  4266 ;;		line 907 in file "../src/MCU_B1.c"
  4267 ;; Parameters:    Size  Location     Type
  4268 ;;		None
  4269 ;; Auto vars:     Size  Location     Type
  4270 ;;		None
  4271 ;; Return value:  Size  Location     Type
  4272 ;;		None               void
  4273 ;; Registers used:
  4274 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4275 ;; Tracked objects:
  4276 ;;		On entry : 0/0
  4277 ;;		On exit  : 0/0
  4278 ;;		Unchanged: 0/0
  4279 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4280 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4281 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4282 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4283 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4284 ;;Total ram usage:        1 bytes
  4285 ;; Hardware stack levels used:    1
  4286 ;; Hardware stack levels required when called:    6
  4287 ;; This function calls:
  4288 ;;		_WDT_Clearing
  4289 ;; This function is called by:
  4290 ;;		_main
  4291 ;; This function uses a non-reentrant model
  4292 ;;
  4293                           
  4294                           
  4295                           ;psect for function _WDT_Main
  4296  120D                     _WDT_Main:	
  4297                           
  4298                           ;MCU_B1.c: 908: if (WDT->Enable) {
  4299                           
  4300                           ;incstack = 0
  4301                           ; Regs used in _WDT_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4302  120D  0021               	movlb	1	; select bank1
  4303  120E  0869               	movf	_WDT^(0+128),w
  4304  120F  0086               	movwf	6
  4305  1210  0187               	clrf	7
  4306  1211  1C01               	btfss	1,0
  4307  1212  0008               	return
  4308                           
  4309                           ;MCU_B1.c: 909: if (WDT->Count-- > 0) {
  4310  1213  0A69               	incf	_WDT^(0+128),w
  4311  1214  0086               	movwf	6
  4312  1215  0187               	clrf	7
  4313  1216  3001               	movlw	1
  4314  1217  0281               	subwf	1,f
  4315  1218  0801               	movf	1,w
  4316  1219  3AFF               	xorlw	255
  4317  121A  1903               	skipnz
  4318  121B  0008               	return
  4319                           
  4320                           ;MCU_B1.c: 910: WDT->Count = 10;
  4321  121C  300A               	movlw	10
  4322  121D  0020               	movlb	0	; select bank0
  4323  121E  00A0               	movwf	??_WDT_Main
  4324  121F  0021               	movlb	1	; select bank1
  4325  1220  0A69               	incf	_WDT^(0+128),w
  4326  1221  0086               	movwf	6
  4327  1222  0187               	clrf	7
  4328  1223  0020               	movlb	0	; select bank0
  4329  1224  0820               	movf	??_WDT_Main,w
  4330  1225  0081               	movwf	1
  4331                           
  4332                           ;MCU_B1.c: 911: WDT_Clearing();
  4333  1226  3180  2002         	fcall	_WDT_Clearing
  4334  1228  0008               	return
  4335  1229                     __end_of_WDT_Main:	
  4336                           
  4337                           	psect	text6
  4338  0002                     __ptext6:	
  4339 ;; *************** function _WDT_Clearing *****************
  4340 ;; Defined at:
  4341 ;;		line 917 in file "../src/MCU_B1.c"
  4342 ;; Parameters:    Size  Location     Type
  4343 ;;		None
  4344 ;; Auto vars:     Size  Location     Type
  4345 ;;		None
  4346 ;; Return value:  Size  Location     Type
  4347 ;;		None               void
  4348 ;; Registers used:
  4349 ;;		None
  4350 ;; Tracked objects:
  4351 ;;		On entry : 0/0
  4352 ;;		On exit  : 0/0
  4353 ;;		Unchanged: 0/0
  4354 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4355 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4356 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4357 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4358 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4359 ;;Total ram usage:        0 bytes
  4360 ;; Hardware stack levels used:    1
  4361 ;; Hardware stack levels required when called:    5
  4362 ;; This function calls:
  4363 ;;		Nothing
  4364 ;; This function is called by:
  4365 ;;		_WDT_Main
  4366 ;; This function uses a non-reentrant model
  4367 ;;
  4368                           
  4369                           
  4370                           ;psect for function _WDT_Clearing
  4371  0002                     _WDT_Clearing:	
  4372                           
  4373                           ;incstack = 0
  4374                           ; Regs used in _WDT_Clearing: []
  4375  0002  0064               	clrwdt	;# 
  4376  0003  0008               	return
  4377  0004                     __end_of_WDT_Clearing:	
  4378                           
  4379                           	psect	text7
  4380  1E82                     __ptext7:	
  4381 ;; *************** function _Switch_Main *****************
  4382 ;; Defined at:
  4383 ;;		line 61 in file "../src/Switch_B1.c"
  4384 ;; Parameters:    Size  Location     Type
  4385 ;;		None
  4386 ;; Auto vars:     Size  Location     Type
  4387 ;;		None
  4388 ;; Return value:  Size  Location     Type
  4389 ;;		None               void
  4390 ;; Registers used:
  4391 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4392 ;; Tracked objects:
  4393 ;;		On entry : 0/0
  4394 ;;		On exit  : 0/0
  4395 ;;		Unchanged: 0/0
  4396 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4397 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4398 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4399 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4400 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4401 ;;Total ram usage:        0 bytes
  4402 ;; Hardware stack levels used:    1
  4403 ;; Hardware stack levels required when called:   11
  4404 ;; This function calls:
  4405 ;;		_setSw_Main
  4406 ;; This function is called by:
  4407 ;;		_main
  4408 ;; This function uses a non-reentrant model
  4409 ;;
  4410                           
  4411                           
  4412                           ;psect for function _Switch_Main
  4413  1E82                     _Switch_Main:	
  4414                           
  4415                           ;Switch_B1.c: 63: setSw_Main(1);
  4416                           
  4417                           ;incstack = 0
  4418                           ; Regs used in _Switch_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4419  1E82  3001               	movlw	1
  4420  1E83  3181  21CE  319E   	fcall	_setSw_Main
  4421                           
  4422                           ;Switch_B1.c: 67: setSw_Main(2);
  4423  1E86  3002               	movlw	2
  4424  1E87  3181  21CE         	fcall	_setSw_Main
  4425  1E89  0008               	return
  4426  1E8A                     __end_of_Switch_Main:	
  4427                           
  4428                           	psect	text8
  4429  01CE                     __ptext8:	
  4430 ;; *************** function _setSw_Main *****************
  4431 ;; Defined at:
  4432 ;;		line 111 in file "../src/Switch_B1.c"
  4433 ;; Parameters:    Size  Location     Type
  4434 ;;  sw              1    wreg     unsigned char 
  4435 ;; Auto vars:     Size  Location     Type
  4436 ;;  sw              1   73[BANK0 ] unsigned char 
  4437 ;; Return value:  Size  Location     Type
  4438 ;;		None               void
  4439 ;; Registers used:
  4440 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4441 ;; Tracked objects:
  4442 ;;		On entry : 0/0
  4443 ;;		On exit  : 0/0
  4444 ;;		Unchanged: 0/0
  4445 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4446 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4447 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4448 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4449 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4450 ;;Total ram usage:        5 bytes
  4451 ;; Hardware stack levels used:    1
  4452 ;; Hardware stack levels required when called:   10
  4453 ;; This function calls:
  4454 ;;		_SwPointSelect
  4455 ;;		_Sw_DimmerAdjFunc
  4456 ;;		_Sw_DimmerOffFunc
  4457 ;;		_Sw_DimmerOnFunc
  4458 ;;		_setBuz
  4459 ;;		_setRF_Learn
  4460 ;; This function is called by:
  4461 ;;		_Switch_Main
  4462 ;; This function uses a non-reentrant model
  4463 ;;
  4464                           
  4465                           
  4466                           ;psect for function _setSw_Main
  4467  01CE                     _setSw_Main:	
  4468                           
  4469                           ;incstack = 0
  4470                           ; Regs used in _setSw_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4471                           ;setSw_Main@sw stored from wreg
  4472  01CE  0020               	movlb	0	; select bank0
  4473  01CF  00E9               	movwf	setSw_Main@sw
  4474                           
  4475                           ;Switch_B1.c: 112: if (Sw->Enable) {
  4476  01D0  087B               	movf	_Sw,w
  4477  01D1  0086               	movwf	6
  4478  01D2  3001               	movlw	1	; select bank2/3
  4479  01D3  0087               	movwf	7
  4480  01D4  1C01               	btfss	1,0
  4481  01D5  0008               	return
  4482                           
  4483                           ;Switch_B1.c: 113: SwPointSelect(sw);
  4484  01D6  0869               	movf	setSw_Main@sw,w
  4485  01D7  3190  20AC  3181   	fcall	_SwPointSelect
  4486                           
  4487                           ;Switch_B1.c: 125: if (sw == 1) {
  4488  01DA  0020               	movlb	0	; select bank0
  4489  01DB  0869               	movf	setSw_Main@sw,w
  4490  01DC  3A01               	xorlw	1
  4491  01DD  1D03               	skipz
  4492  01DE  29EB               	goto	l6696
  4493                           
  4494                           ;Switch_B1.c: 126: Sw->Touch = (RA6 || RA4) ? 1 : 0;
  4495  01DF  01E7               	clrf	_setSw_Main$4998
  4496  01E0  0AE7               	incf	_setSw_Main$4998,f
  4497  01E1  1F0C               	btfss	12,6	;volatile
  4498  01E2  1A0C               	btfsc	12,4	;volatile
  4499  01E3  29E5               	goto	l6694
  4500  01E4  01E7               	clrf	_setSw_Main$4998
  4501  01E5                     l6694:	
  4502  01E5  087B               	movf	_Sw,w
  4503  01E6  0086               	movwf	6
  4504  01E7  3001               	movlw	1	; select bank2/3
  4505  01E8  0087               	movwf	7
  4506  01E9  0867               	movf	_setSw_Main$4998,w
  4507  01EA  29FA               	goto	L1
  4508  01EB                     l6696:	
  4509                           ;Switch_B1.c: 127: } else if (sw == 2) {
  4510                           
  4511  01EB  0869               	movf	setSw_Main@sw,w
  4512  01EC  3A02               	xorlw	2
  4513  01ED  1D03               	skipz
  4514  01EE  29FD               	goto	l6706
  4515                           
  4516                           ;Switch_B1.c: 128: Sw->Touch = (RA0 || RB1) ? 1 : 0;
  4517  01EF  01E8               	clrf	_setSw_Main$4999
  4518  01F0  0AE8               	incf	_setSw_Main$4999,f
  4519  01F1  1C0C               	btfss	12,0	;volatile
  4520  01F2  188D               	btfsc	13,1	;volatile
  4521  01F3  29F5               	goto	l6704
  4522  01F4  01E8               	clrf	_setSw_Main$4999
  4523  01F5                     l6704:	
  4524  01F5  087B               	movf	_Sw,w
  4525  01F6  0086               	movwf	6
  4526  01F7  3001               	movlw	1	; select bank2/3
  4527  01F8  0087               	movwf	7
  4528  01F9  0868               	movf	_setSw_Main$4999,w
  4529  01FA                     L1:	
  4530  01FA  1081               	bcf	1,1
  4531  01FB  1D03               	skipz
  4532  01FC  1481               	bsf	1,1
  4533  01FD                     l6706:	
  4534                           
  4535                           ;Switch_B1.c: 129: }
  4536                           ;Switch_B1.c: 137: if (Sw->Touch) {
  4537  01FD  087B               	movf	_Sw,w
  4538  01FE  0086               	movwf	6
  4539  01FF  3001               	movlw	1	; select bank2/3
  4540  0200  0087               	movwf	7
  4541  0201  1C81               	btfss	1,1
  4542  0202  2AD3               	goto	l6754
  4543                           
  4544                           ;Switch_B1.c: 138: if (!Sw->Debounce) {
  4545  0203  087B               	movf	_Sw,w
  4546  0204  0086               	movwf	6
  4547  0205  3001               	movlw	1	; select bank2/3
  4548  0206  0087               	movwf	7
  4549  0207  1901               	btfsc	1,2
  4550  0208  2A2A               	goto	l6720
  4551                           
  4552                           ;Switch_B1.c: 139: Sw->DebounceTime++;
  4553  0209  3001               	movlw	1
  4554  020A  00E5               	movwf	??_setSw_Main
  4555  020B  087B               	movf	_Sw,w
  4556  020C  3E02               	addlw	2
  4557  020D  0086               	movwf	6
  4558  020E  3001               	movlw	1	; select bank2/3
  4559  020F  0087               	movwf	7
  4560  0210  0865               	movf	??_setSw_Main,w
  4561  0211  0781               	addwf	1,f
  4562                           
  4563                           ;Switch_B1.c: 140: if (Sw->DebounceTime >= 5) {
  4564  0212  087B               	movf	_Sw,w
  4565  0213  3E02               	addlw	2
  4566  0214  0086               	movwf	6
  4567  0215  3001               	movlw	1	; select bank2/3
  4568  0216  0087               	movwf	7
  4569  0217  3005               	movlw	5
  4570  0218  0201               	subwf	1,w
  4571  0219  1C03               	skipc
  4572  021A  0008               	return
  4573                           
  4574                           ;Switch_B1.c: 141: Sw->DebounceTime = 0;
  4575  021B  087B               	movf	_Sw,w
  4576  021C  3E02               	addlw	2
  4577  021D  0086               	movwf	6
  4578  021E  3001               	movlw	1	; select bank2/3
  4579  021F  0087               	movwf	7
  4580  0220  0181               	clrf	1
  4581                           
  4582                           ;Switch_B1.c: 142: Sw->Debounce = 1;
  4583  0221  087B               	movf	_Sw,w
  4584  0222  0086               	movwf	6
  4585  0223  3001               	movlw	1	; select bank2/3
  4586  0224  0087               	movwf	7
  4587  0225  1501               	bsf	1,2
  4588                           
  4589                           ;Switch_B1.c: 145: Sw_DimmerOnFunc(sw);
  4590  0226  0869               	movf	setSw_Main@sw,w
  4591  0227  318A  22E1         	fcall	_Sw_DimmerOnFunc
  4592                           
  4593                           ;Switch_B1.c: 148: }
  4594                           ;Switch_B1.c: 149: } else {
  4595  0229  0008               	return
  4596  022A                     l6720:	
  4597                           
  4598                           ;Switch_B1.c: 150: if (!Sw->Hold1) {
  4599  022A  087B               	movf	_Sw,w
  4600  022B  0086               	movwf	6
  4601  022C  3001               	movlw	1	; select bank2/3
  4602  022D  0087               	movwf	7
  4603  022E  1981               	btfsc	1,3
  4604  022F  2A5C               	goto	l6730
  4605                           
  4606                           ;Switch_B1.c: 151: Sw->Hold1Time++;
  4607  0230  087B               	movf	_Sw,w
  4608  0231  3E03               	addlw	3
  4609  0232  0086               	movwf	6
  4610  0233  3001               	movlw	1	; select bank2/3
  4611  0234  0087               	movwf	7
  4612  0235  3001               	movlw	1
  4613  0236  0781               	addwf	1,f
  4614  0237  3141               	addfsr 1,1
  4615  0238  1803               	skipnc
  4616  0239  0A81               	incf	1,f
  4617                           
  4618                           ;Switch_B1.c: 152: if (Sw->Hold1Time >= 150) {
  4619  023A  087B               	movf	_Sw,w
  4620  023B  3E03               	addlw	3
  4621  023C  0086               	movwf	6
  4622  023D  3001               	movlw	1	; select bank2/3
  4623  023E  0087               	movwf	7
  4624  023F  3F40               	moviw [0]fsr1
  4625  0240  0020               	movlb	0	; select bank0
  4626  0241  00E5               	movwf	??_setSw_Main
  4627  0242  3F41               	moviw [1]fsr1
  4628  0243  00E6               	movwf	??_setSw_Main+1
  4629  0244  3000               	movlw	0
  4630  0245  0266               	subwf	??_setSw_Main+1,w
  4631  0246  3096               	movlw	150
  4632  0247  1903               	skipnz
  4633  0248  0265               	subwf	??_setSw_Main,w
  4634  0249  1C03               	skipc
  4635  024A  0008               	return
  4636                           
  4637                           ;Switch_B1.c: 153: Sw->Hold1Time = 0;
  4638  024B  087B               	movf	_Sw,w
  4639  024C  3E03               	addlw	3
  4640  024D  0086               	movwf	6
  4641  024E  3001               	movlw	1	; select bank2/3
  4642  024F  0087               	movwf	7
  4643  0250  3000               	movlw	0
  4644  0251  3FC0               	movwi [0]fsr1
  4645  0252  3FC1               	movwi [1]fsr1
  4646                           
  4647                           ;Switch_B1.c: 154: Sw->Hold1 = 1;
  4648  0253  087B               	movf	_Sw,w
  4649  0254  0086               	movwf	6
  4650  0255  3001               	movlw	1	; select bank2/3
  4651  0256  0087               	movwf	7
  4652  0257  1581               	bsf	1,3
  4653                           
  4654                           ;Switch_B1.c: 157: Sw_DimmerAdjFunc(sw);
  4655  0258  0869               	movf	setSw_Main@sw,w
  4656  0259  3195  25DE         	fcall	_Sw_DimmerAdjFunc
  4657                           
  4658                           ;Switch_B1.c: 160: }
  4659                           ;Switch_B1.c: 161: } else {
  4660  025B  0008               	return
  4661  025C                     l6730:	
  4662                           
  4663                           ;Switch_B1.c: 162: if (!Sw->Hold2) {
  4664  025C  087B               	movf	_Sw,w
  4665  025D  0086               	movwf	6
  4666  025E  3001               	movlw	1	; select bank2/3
  4667  025F  0087               	movwf	7
  4668  0260  1A01               	btfsc	1,4
  4669  0261  2AA0               	goto	l6744
  4670                           
  4671                           ;Switch_B1.c: 163: Sw->Hold2Time++;
  4672  0262  087B               	movf	_Sw,w
  4673  0263  3E05               	addlw	5
  4674  0264  0086               	movwf	6
  4675  0265  3001               	movlw	1	; select bank2/3
  4676  0266  0087               	movwf	7
  4677  0267  3001               	movlw	1
  4678  0268  0781               	addwf	1,f
  4679  0269  3141               	addfsr 1,1
  4680  026A  1803               	skipnc
  4681  026B  0A81               	incf	1,f
  4682                           
  4683                           ;Switch_B1.c: 164: if (Sw->Hold2Time >= 150) {
  4684  026C  087B               	movf	_Sw,w
  4685  026D  3E05               	addlw	5
  4686  026E  0086               	movwf	6
  4687  026F  3001               	movlw	1	; select bank2/3
  4688  0270  0087               	movwf	7
  4689  0271  3F40               	moviw [0]fsr1
  4690  0272  0020               	movlb	0	; select bank0
  4691  0273  00E5               	movwf	??_setSw_Main
  4692  0274  3F41               	moviw [1]fsr1
  4693  0275  00E6               	movwf	??_setSw_Main+1
  4694  0276  3000               	movlw	0
  4695  0277  0266               	subwf	??_setSw_Main+1,w
  4696  0278  3096               	movlw	150
  4697  0279  1903               	skipnz
  4698  027A  0265               	subwf	??_setSw_Main,w
  4699  027B  1C03               	skipc
  4700  027C  0008               	return
  4701                           
  4702                           ;Switch_B1.c: 165: Sw->Hold2Time = 0;
  4703  027D  087B               	movf	_Sw,w
  4704  027E  3E05               	addlw	5
  4705  027F  0086               	movwf	6
  4706  0280  3001               	movlw	1	; select bank2/3
  4707  0281  0087               	movwf	7
  4708  0282  3000               	movlw	0
  4709  0283  3FC0               	movwi [0]fsr1
  4710  0284  3FC1               	movwi [1]fsr1
  4711                           
  4712                           ;Switch_B1.c: 166: Sw->Hold2 = 1;
  4713  0285  087B               	movf	_Sw,w
  4714  0286  0086               	movwf	6
  4715  0287  3001               	movlw	1	; select bank2/3
  4716  0288  0087               	movwf	7
  4717  0289  1601               	bsf	1,4
  4718                           
  4719                           ;Switch_B1.c: 170: setRF_Learn(1, 1);
  4720  028A  01A2               	clrf	setRF_Learn@command
  4721  028B  0AA2               	incf	setRF_Learn@command,f
  4722  028C  3001               	movlw	1
  4723  028D  319F  276E  3181   	fcall	_setRF_Learn
  4724                           
  4725                           ;Switch_B1.c: 172: if (myMain->First) {
  4726  0290  0021               	movlb	1	; select bank1
  4727  0291  086A               	movf	_myMain^(0+128),w
  4728  0292  0086               	movwf	6
  4729  0293  3001               	movlw	1	; select bank2/3
  4730  0294  0087               	movwf	7
  4731  0295  1F81               	btfss	1,7
  4732  0296  0008               	return
  4733                           
  4734                           ;Switch_B1.c: 173: setBuz(2, 100);
  4735  0297  3064               	movlw	100
  4736  0298  0020               	movlb	0	; select bank0
  4737  0299  00A9               	movwf	setBuz@time
  4738  029A  3000               	movlw	0
  4739  029B  00AA               	movwf	setBuz@time+1
  4740  029C  3002               	movlw	2
  4741  029D  318B  23C7         	fcall	_setBuz
  4742                           
  4743                           ;Switch_B1.c: 174: }
  4744                           ;Switch_B1.c: 176: }
  4745                           ;Switch_B1.c: 177: } else {
  4746  029F  0008               	return
  4747  02A0                     l6744:	
  4748                           
  4749                           ;Switch_B1.c: 178: if (!Sw->Hold3) {
  4750  02A0  087B               	movf	_Sw,w
  4751  02A1  0086               	movwf	6
  4752  02A2  3001               	movlw	1	; select bank2/3
  4753  02A3  0087               	movwf	7
  4754  02A4  1A81               	btfsc	1,5
  4755  02A5  0008               	return
  4756                           
  4757                           ;Switch_B1.c: 179: Sw->Hold3Time++;
  4758  02A6  087B               	movf	_Sw,w
  4759  02A7  3E07               	addlw	7
  4760  02A8  0086               	movwf	6
  4761  02A9  3001               	movlw	1	; select bank2/3
  4762  02AA  0087               	movwf	7
  4763  02AB  3001               	movlw	1
  4764  02AC  0781               	addwf	1,f
  4765  02AD  3141               	addfsr 1,1
  4766  02AE  1803               	skipnc
  4767  02AF  0A81               	incf	1,f
  4768                           
  4769                           ;Switch_B1.c: 180: if (Sw->Hold3Time >= 300)
  4770  02B0  087B               	movf	_Sw,w
  4771  02B1  3E07               	addlw	7
  4772  02B2  0086               	movwf	6
  4773  02B3  3001               	movlw	1	; select bank2/3
  4774  02B4  0087               	movwf	7
  4775  02B5  3F40               	moviw [0]fsr1
  4776  02B6  0020               	movlb	0	; select bank0
  4777  02B7  00E5               	movwf	??_setSw_Main
  4778  02B8  3F41               	moviw [1]fsr1
  4779  02B9  00E6               	movwf	??_setSw_Main+1
  4780  02BA  3001               	movlw	1
  4781  02BB  0266               	subwf	??_setSw_Main+1,w
  4782  02BC  302C               	movlw	44
  4783  02BD  1903               	skipnz
  4784  02BE  0265               	subwf	??_setSw_Main,w
  4785  02BF  1C03               	skipc
  4786  02C0  0008               	return
  4787                           
  4788                           ;Switch_B1.c: 181: {
  4789                           ;Switch_B1.c: 182: Sw->Hold3Time = 0;
  4790  02C1  087B               	movf	_Sw,w
  4791  02C2  3E07               	addlw	7
  4792  02C3  0086               	movwf	6
  4793  02C4  3001               	movlw	1	; select bank2/3
  4794  02C5  0087               	movwf	7
  4795  02C6  3000               	movlw	0
  4796  02C7  3FC0               	movwi [0]fsr1
  4797  02C8  3FC1               	movwi [1]fsr1
  4798                           
  4799                           ;Switch_B1.c: 183: Sw->Hold3 = 1;
  4800  02C9  087B               	movf	_Sw,w
  4801  02CA  0086               	movwf	6
  4802  02CB  3001               	movlw	1	; select bank2/3
  4803  02CC  0087               	movwf	7
  4804  02CD  1681               	bsf	1,5
  4805                           
  4806                           ;Switch_B1.c: 186: setRF_Learn(1, 0);
  4807  02CE  01A2               	clrf	setRF_Learn@command
  4808  02CF  3001               	movlw	1
  4809  02D0  319F  276E         	fcall	_setRF_Learn
  4810                           
  4811                           ;Switch_B1.c: 189: }
  4812                           ;Switch_B1.c: 190: }
  4813                           ;Switch_B1.c: 191: }
  4814                           ;Switch_B1.c: 192: }
  4815                           ;Switch_B1.c: 193: }
  4816                           ;Switch_B1.c: 194: } else {
  4817  02D2  0008               	return
  4818  02D3                     l6754:	
  4819                           
  4820                           ;Switch_B1.c: 195: if (Sw->Debounce) {
  4821  02D3  087B               	movf	_Sw,w
  4822  02D4  0086               	movwf	6
  4823  02D5  3001               	movlw	1	; select bank2/3
  4824  02D6  0087               	movwf	7
  4825  02D7  1D01               	btfss	1,2
  4826  02D8  0008               	return
  4827                           
  4828                           ;Switch_B1.c: 196: Sw->DebounceTime++;
  4829  02D9  3001               	movlw	1
  4830  02DA  0020               	movlb	0	; select bank0
  4831  02DB  00E5               	movwf	??_setSw_Main
  4832  02DC  087B               	movf	_Sw,w
  4833  02DD  3E02               	addlw	2
  4834  02DE  0086               	movwf	6
  4835  02DF  3001               	movlw	1	; select bank2/3
  4836  02E0  0087               	movwf	7
  4837  02E1  0865               	movf	??_setSw_Main,w
  4838  02E2  0781               	addwf	1,f
  4839                           
  4840                           ;Switch_B1.c: 197: if (Sw->DebounceTime >= 5) {
  4841  02E3  087B               	movf	_Sw,w
  4842  02E4  3E02               	addlw	2
  4843  02E5  0086               	movwf	6
  4844  02E6  3001               	movlw	1	; select bank2/3
  4845  02E7  0087               	movwf	7
  4846  02E8  3005               	movlw	5
  4847  02E9  0201               	subwf	1,w
  4848  02EA  1C03               	skipc
  4849  02EB  0008               	return
  4850                           
  4851                           ;Switch_B1.c: 198: Sw->DebounceTime = 0;
  4852  02EC  087B               	movf	_Sw,w
  4853  02ED  3E02               	addlw	2
  4854  02EE  0086               	movwf	6
  4855  02EF  3001               	movlw	1	; select bank2/3
  4856  02F0  0087               	movwf	7
  4857  02F1  0181               	clrf	1
  4858                           
  4859                           ;Switch_B1.c: 199: Sw->Debounce = 0;
  4860  02F2  087B               	movf	_Sw,w
  4861  02F3  0086               	movwf	6
  4862  02F4  3001               	movlw	1	; select bank2/3
  4863  02F5  0087               	movwf	7
  4864  02F6  1101               	bcf	1,2
  4865                           
  4866                           ;Switch_B1.c: 200: Sw->Hold1Time = 0;
  4867  02F7  087B               	movf	_Sw,w
  4868  02F8  3E03               	addlw	3
  4869  02F9  0086               	movwf	6
  4870  02FA  3001               	movlw	1	; select bank2/3
  4871  02FB  0087               	movwf	7
  4872  02FC  3000               	movlw	0
  4873  02FD  3FC0               	movwi [0]fsr1
  4874  02FE  3FC1               	movwi [1]fsr1
  4875                           
  4876                           ;Switch_B1.c: 201: Sw->Hold1 = 0;
  4877  02FF  087B               	movf	_Sw,w
  4878  0300  0086               	movwf	6
  4879  0301  3001               	movlw	1	; select bank2/3
  4880  0302  0087               	movwf	7
  4881  0303  1181               	bcf	1,3
  4882                           
  4883                           ;Switch_B1.c: 202: Sw->Hold2Time = 0;
  4884  0304  087B               	movf	_Sw,w
  4885  0305  3E05               	addlw	5
  4886  0306  0086               	movwf	6
  4887  0307  3001               	movlw	1	; select bank2/3
  4888  0308  0087               	movwf	7
  4889  0309  3000               	movlw	0
  4890  030A  3FC0               	movwi [0]fsr1
  4891  030B  3FC1               	movwi [1]fsr1
  4892                           
  4893                           ;Switch_B1.c: 203: Sw->Hold2 = 0;
  4894  030C  087B               	movf	_Sw,w
  4895  030D  0086               	movwf	6
  4896  030E  3001               	movlw	1	; select bank2/3
  4897  030F  0087               	movwf	7
  4898  0310  1201               	bcf	1,4
  4899                           
  4900                           ;Switch_B1.c: 204: Sw->Hold3Time = 0;
  4901  0311  087B               	movf	_Sw,w
  4902  0312  3E07               	addlw	7
  4903  0313  0086               	movwf	6
  4904  0314  3001               	movlw	1	; select bank2/3
  4905  0315  0087               	movwf	7
  4906  0316  3000               	movlw	0
  4907  0317  3FC0               	movwi [0]fsr1
  4908  0318  3FC1               	movwi [1]fsr1
  4909                           
  4910                           ;Switch_B1.c: 205: Sw->Hold3 = 0;
  4911  0319  087B               	movf	_Sw,w
  4912  031A  0086               	movwf	6
  4913  031B  3001               	movlw	1	; select bank2/3
  4914  031C  0087               	movwf	7
  4915  031D  1281               	bcf	1,5
  4916                           
  4917                           ;Switch_B1.c: 208: Sw_DimmerOffFunc(sw);
  4918  031E  0869               	movf	setSw_Main@sw,w
  4919  031F  318A  2270  3181   	fcall	_Sw_DimmerOffFunc
  4920                           
  4921                           ;Switch_B1.c: 213: setRF_Learn(1, 0);
  4922  0322  0020               	movlb	0	; select bank0
  4923  0323  01A2               	clrf	setRF_Learn@command
  4924  0324  3001               	movlw	1
  4925  0325  319F  276E         	fcall	_setRF_Learn
  4926  0327  0008               	return
  4927  0328                     __end_of_setSw_Main:	
  4928                           
  4929                           	psect	text9
  4930  1F6E                     __ptext9:	
  4931 ;; *************** function _setRF_Learn *****************
  4932 ;; Defined at:
  4933 ;;		line 30 in file "../src/RF_Control_B1.c"
  4934 ;; Parameters:    Size  Location     Type
  4935 ;;  rf              1    wreg     unsigned char 
  4936 ;;  command         1    2[BANK0 ] unsigned char 
  4937 ;; Auto vars:     Size  Location     Type
  4938 ;;  rf              1    3[BANK0 ] unsigned char 
  4939 ;; Return value:  Size  Location     Type
  4940 ;;		None               void
  4941 ;; Registers used:
  4942 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4943 ;; Tracked objects:
  4944 ;;		On entry : 0/0
  4945 ;;		On exit  : 0/0
  4946 ;;		Unchanged: 0/0
  4947 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4948 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4949 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4950 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4951 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4952 ;;Total ram usage:        2 bytes
  4953 ;; Hardware stack levels used:    1
  4954 ;; Hardware stack levels required when called:    6
  4955 ;; This function calls:
  4956 ;;		_RfPointSelect
  4957 ;; This function is called by:
  4958 ;;		_setSw_Main
  4959 ;; This function uses a non-reentrant model
  4960 ;;
  4961                           
  4962                           
  4963                           ;psect for function _setRF_Learn
  4964  1F6E                     _setRF_Learn:	
  4965                           
  4966                           ;incstack = 0
  4967                           ; Regs used in _setRF_Learn: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4968                           ;setRF_Learn@rf stored from wreg
  4969  1F6E  0020               	movlb	0	; select bank0
  4970  1F6F  00A3               	movwf	setRF_Learn@rf
  4971                           
  4972                           ;RF_Control_B1.c: 31: RfPointSelect(rf);
  4973  1F70  0823               	movf	setRF_Learn@rf,w
  4974  1F71  319E  26DF         	fcall	_RfPointSelect
  4975                           
  4976                           ;RF_Control_B1.c: 32: RF->Learn = command;
  4977  1F73  0021               	movlb	1	; select bank1
  4978  1F74  083D               	movf	_RF^(0+128),w
  4979  1F75  0086               	movwf	6
  4980  1F76  0187               	clrf	7
  4981  1F77  0020               	movlb	0	; select bank0
  4982  1F78  0822               	movf	setRF_Learn@command,w
  4983  1F79  1301               	bcf	1,6
  4984  1F7A  1D03               	skipz
  4985  1F7B  1701               	bsf	1,6
  4986  1F7C  0008               	return
  4987  1F7D                     __end_of_setRF_Learn:	
  4988                           
  4989                           	psect	text10
  4990  0AE1                     __ptext10:	
  4991 ;; *************** function _Sw_DimmerOnFunc *****************
  4992 ;; Defined at:
  4993 ;;		line 222 in file "../src/Switch_B1.c"
  4994 ;; Parameters:    Size  Location     Type
  4995 ;;  sw              1    wreg     unsigned char 
  4996 ;; Auto vars:     Size  Location     Type
  4997 ;;  sw              1   67[BANK0 ] unsigned char 
  4998 ;;  Idle            1   66[BANK0 ] unsigned char 
  4999 ;; Return value:  Size  Location     Type
  5000 ;;		None               void
  5001 ;; Registers used:
  5002 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5003 ;; Tracked objects:
  5004 ;;		On entry : 0/0
  5005 ;;		On exit  : 0/0
  5006 ;;		Unchanged: 0/0
  5007 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5008 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5009 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5010 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5011 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5012 ;;Total ram usage:        2 bytes
  5013 ;; Hardware stack levels used:    1
  5014 ;; Hardware stack levels required when called:    9
  5015 ;; This function calls:
  5016 ;;		_setBuz
  5017 ;;		_setDimmerLights_Switch
  5018 ;;		_setDimmerLights_Trigger
  5019 ;;		_setRFSW_Status
  5020 ;;		_setRF_DimmerLights
  5021 ;;		_setTxData
  5022 ;; This function is called by:
  5023 ;;		_setSw_Main
  5024 ;; This function uses a non-reentrant model
  5025 ;;
  5026                           
  5027                           
  5028                           ;psect for function _Sw_DimmerOnFunc
  5029  0AE1                     _Sw_DimmerOnFunc:	
  5030                           
  5031                           ;incstack = 0
  5032                           ; Regs used in _Sw_DimmerOnFunc: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5033                           ;Sw_DimmerOnFunc@sw stored from wreg
  5034  0AE1  0020               	movlb	0	; select bank0
  5035  0AE2  00E3               	movwf	Sw_DimmerOnFunc@sw
  5036                           
  5037                           ;Switch_B1.c: 223: char Idle = 1;
  5038  0AE3  01E2               	clrf	Sw_DimmerOnFunc@Idle
  5039  0AE4  0AE2               	incf	Sw_DimmerOnFunc@Idle,f
  5040                           
  5041                           ;Switch_B1.c: 236: if (sw == 1) {
  5042  0AE5  0863               	movf	Sw_DimmerOnFunc@sw,w
  5043  0AE6  3A01               	xorlw	1
  5044  0AE7  1D03               	skipz
  5045  0AE8  2AEC               	goto	l6130
  5046                           
  5047                           ;Switch_B1.c: 237: Idle = (DimmerLights22->AdjGo) ? 0 : 1;
  5048  0AE9  0021               	movlb	1	; select bank1
  5049  0AEA  083B               	movf	_DimmerLights22^(0+128),w
  5050  0AEB  2AF2               	goto	L2
  5051  0AEC                     l6130:	
  5052                           ;Switch_B1.c: 238: } else if (sw == 2) {
  5053                           
  5054  0AEC  0863               	movf	Sw_DimmerOnFunc@sw,w
  5055  0AED  3A02               	xorlw	2
  5056  0AEE  1D03               	skipz
  5057  0AEF  2AFE               	goto	l6134
  5058                           
  5059                           ;Switch_B1.c: 239: Idle = (DimmerLights11->AdjGo) ? 0 : 1;
  5060  0AF0  0021               	movlb	1	; select bank1
  5061  0AF1  083A               	movf	_DimmerLights11^(0+128),w
  5062  0AF2                     L2:	
  5063  0AF2  3E08               	addlw	8
  5064  0AF3  0086               	movwf	6
  5065  0AF4  3001               	movlw	1	; select bank2/3
  5066  0AF5  0087               	movwf	7
  5067  0AF6  1003               	clrc
  5068  0AF7  1D81               	btfss	1,3
  5069  0AF8  1403               	setc
  5070  0AF9  3000               	movlw	0
  5071  0AFA  1803               	btfsc	3,0
  5072  0AFB  3001               	movlw	1
  5073  0AFC  0020               	movlb	0	; select bank0
  5074  0AFD  00E2               	movwf	Sw_DimmerOnFunc@Idle
  5075  0AFE                     l6134:	
  5076                           
  5077                           ;Switch_B1.c: 240: }
  5078                           ;Switch_B1.c: 243: if (Idle) {
  5079  0AFE  0862               	movf	Sw_DimmerOnFunc@Idle,w
  5080  0AFF  1903               	btfsc	3,2
  5081  0B00  0008               	return
  5082                           
  5083                           ;Switch_B1.c: 244: Sw->Flag = 1;
  5084  0B01  087B               	movf	_Sw,w
  5085  0B02  0086               	movwf	6
  5086  0B03  3001               	movlw	1	; select bank2/3
  5087  0B04  0087               	movwf	7
  5088  0B05  1781               	bsf	1,7
  5089                           
  5090                           ;Switch_B1.c: 245: setBuz(1, 100);
  5091  0B06  3064               	movlw	100
  5092  0B07  00A9               	movwf	setBuz@time
  5093  0B08  3000               	movlw	0
  5094  0B09  00AA               	movwf	setBuz@time+1
  5095  0B0A  3001               	movlw	1
  5096  0B0B  318B  23C7  318A   	fcall	_setBuz
  5097                           
  5098                           ;Switch_B1.c: 246: if (!Sw->Status) {
  5099  0B0E  087B               	movf	_Sw,w
  5100  0B0F  0086               	movwf	6
  5101  0B10  3001               	movlw	1	; select bank2/3
  5102  0B11  0087               	movwf	7
  5103  0B12  1B01               	btfsc	1,6
  5104  0B13  2B40               	goto	l6154
  5105                           
  5106                           ;Switch_B1.c: 247: Sw->Status = 1;
  5107  0B14  087B               	movf	_Sw,w
  5108  0B15  0086               	movwf	6
  5109  0B16  3001               	movlw	1	; select bank2/3
  5110  0B17  0087               	movwf	7
  5111  0B18  1701               	bsf	1,6
  5112                           
  5113                           ;Switch_B1.c: 248: setRFSW_Status(sw, 1);
  5114  0B19  0020               	movlb	0	; select bank0
  5115  0B1A  01A2               	clrf	setRFSW_Status@command
  5116  0B1B  0AA2               	incf	setRFSW_Status@command,f
  5117  0B1C  0863               	movf	Sw_DimmerOnFunc@sw,w
  5118  0B1D  319F  2750  318A   	fcall	_setRFSW_Status
  5119                           
  5120                           ;Switch_B1.c: 250: setDimmerLights_Trigger(sw, 1);
  5121  0B20  0020               	movlb	0	; select bank0
  5122  0B21  01A2               	clrf	setDimmerLights_Trigger@command
  5123  0B22  0AA2               	incf	setDimmerLights_Trigger@command,f
  5124  0B23  0863               	movf	Sw_DimmerOnFunc@sw,w
  5125  0B24  319F  27AD  318A   	fcall	_setDimmerLights_Trigger
  5126                           
  5127                           ;Switch_B1.c: 251: setDimmerLights_Switch(sw, 1);
  5128  0B27  0020               	movlb	0	; select bank0
  5129  0B28  01A2               	clrf	setDimmerLights_Switch@command
  5130  0B29  0AA2               	incf	setDimmerLights_Switch@command,f
  5131  0B2A  0863               	movf	Sw_DimmerOnFunc@sw,w
  5132  0B2B  319F  279D  318A   	fcall	_setDimmerLights_Switch
  5133                           
  5134                           ;Switch_B1.c: 253: setRF_DimmerLights(sw, Sw->Status);
  5135  0B2E  087B               	movf	_Sw,w
  5136  0B2F  0086               	movwf	6
  5137  0B30  3001               	movlw	1	; select bank2/3
  5138  0B31  0087               	movwf	7
  5139  0B32  3000               	movlw	0
  5140  0B33  1B01               	btfsc	1,6
  5141  0B34  3001               	movlw	1
  5142  0B35  0020               	movlb	0	; select bank0
  5143  0B36  00DD               	movwf	setRF_DimmerLights@on
  5144  0B37  0863               	movf	Sw_DimmerOnFunc@sw,w
  5145  0B38  3189  2197  318A   	fcall	_setRF_DimmerLights
  5146                           
  5147                           ;Switch_B1.c: 254: setTxData(1);
  5148  0B3B  3001               	movlw	1
  5149  0B3C  318F  275F         	fcall	_setTxData
  5150                           
  5151                           ;Switch_B1.c: 256: } else {
  5152  0B3E  0020               	movlb	0	; select bank0
  5153  0B3F  0008               	return
  5154  0B40                     l6154:	
  5155                           
  5156                           ;Switch_B1.c: 257: Sw->Status = 0;
  5157  0B40  087B               	movf	_Sw,w
  5158  0B41  0086               	movwf	6
  5159  0B42  3001               	movlw	1	; select bank2/3
  5160  0B43  0087               	movwf	7
  5161  0B44  1301               	bcf	1,6
  5162                           
  5163                           ;Switch_B1.c: 258: setRFSW_Status(sw, Sw->Status);
  5164  0B45  087B               	movf	_Sw,w
  5165  0B46  0086               	movwf	6
  5166  0B47  3001               	movlw	1	; select bank2/3
  5167  0B48  0087               	movwf	7
  5168  0B49  3000               	movlw	0
  5169  0B4A  1B01               	btfsc	1,6
  5170  0B4B  3001               	movlw	1
  5171  0B4C  0020               	movlb	0	; select bank0
  5172  0B4D  00A2               	movwf	setRFSW_Status@command
  5173  0B4E  0863               	movf	Sw_DimmerOnFunc@sw,w
  5174  0B4F  319F  2750         	fcall	_setRFSW_Status
  5175  0B51  0020               	movlb	0	; select bank0
  5176  0B52  0008               	return
  5177  0B53                     __end_of_Sw_DimmerOnFunc:	
  5178                           
  5179                           	psect	text11
  5180  0A70                     __ptext11:	
  5181 ;; *************** function _Sw_DimmerOffFunc *****************
  5182 ;; Defined at:
  5183 ;;		line 264 in file "../src/Switch_B1.c"
  5184 ;; Parameters:    Size  Location     Type
  5185 ;;  sw              1    wreg     unsigned char 
  5186 ;; Auto vars:     Size  Location     Type
  5187 ;;  sw              1   68[BANK0 ] unsigned char 
  5188 ;; Return value:  Size  Location     Type
  5189 ;;		None               void
  5190 ;; Registers used:
  5191 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5192 ;; Tracked objects:
  5193 ;;		On entry : 0/0
  5194 ;;		On exit  : 0/0
  5195 ;;		Unchanged: 0/0
  5196 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5197 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5198 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5199 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5200 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5201 ;;Total ram usage:        3 bytes
  5202 ;; Hardware stack levels used:    1
  5203 ;; Hardware stack levels required when called:    9
  5204 ;; This function calls:
  5205 ;;		_setDelayOff_GO
  5206 ;;		_setDimmerLights_AdjGo
  5207 ;;		_setDimmerLights_Switch
  5208 ;;		_setDimmerLights_Trigger
  5209 ;;		_setDimmerLights_TriggerAdj
  5210 ;;		_setRF_DimmerLights
  5211 ;;		_setTxData
  5212 ;; This function is called by:
  5213 ;;		_setSw_Main
  5214 ;; This function uses a non-reentrant model
  5215 ;;
  5216                           
  5217                           
  5218                           ;psect for function _Sw_DimmerOffFunc
  5219  0A70                     _Sw_DimmerOffFunc:	
  5220                           
  5221                           ;incstack = 0
  5222                           ; Regs used in _Sw_DimmerOffFunc: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5223                           ;Sw_DimmerOffFunc@sw stored from wreg
  5224  0A70  0020               	movlb	0	; select bank0
  5225  0A71  00E4               	movwf	Sw_DimmerOffFunc@sw
  5226                           
  5227                           ;Switch_B1.c: 265: if (Sw->Flag) {
  5228  0A72  087B               	movf	_Sw,w
  5229  0A73  0086               	movwf	6
  5230  0A74  3001               	movlw	1	; select bank2/3
  5231  0A75  0087               	movwf	7
  5232  0A76  1F81               	btfss	1,7
  5233  0A77  0008               	return
  5234                           
  5235                           ;Switch_B1.c: 266: Sw->Flag = 0;
  5236  0A78  087B               	movf	_Sw,w
  5237  0A79  0086               	movwf	6
  5238  0A7A  3001               	movlw	1	; select bank2/3
  5239  0A7B  0087               	movwf	7
  5240  0A7C  1381               	bcf	1,7
  5241                           
  5242                           ;Switch_B1.c: 267: if (Sw->Status) {
  5243  0A7D  087B               	movf	_Sw,w
  5244  0A7E  0086               	movwf	6
  5245  0A7F  3001               	movlw	1	; select bank2/3
  5246  0A80  0087               	movwf	7
  5247  0A81  1F01               	btfss	1,6
  5248  0A82  2ABC               	goto	l6198
  5249                           
  5250                           ;Switch_B1.c: 268: if (Sw->Adj) {
  5251  0A83  0A7B               	incf	_Sw,w
  5252  0A84  0086               	movwf	6
  5253  0A85  3001               	movlw	1	; select bank2/3
  5254  0A86  0087               	movwf	7
  5255  0A87  1C01               	btfss	1,0
  5256  0A88  0008               	return
  5257                           
  5258                           ;Switch_B1.c: 269: Sw->Adj = 0;
  5259  0A89  0A7B               	incf	_Sw,w
  5260  0A8A  0086               	movwf	6
  5261  0A8B  3001               	movlw	1	; select bank2/3
  5262  0A8C  0087               	movwf	7
  5263  0A8D  1001               	bcf	1,0
  5264                           
  5265                           ;Switch_B1.c: 270: setDimmerLights_TriggerAdj(sw, 1);
  5266  0A8E  01A2               	clrf	setDimmerLights_TriggerAdj@command
  5267  0A8F  0AA2               	incf	setDimmerLights_TriggerAdj@command,f
  5268  0A90  0864               	movf	Sw_DimmerOffFunc@sw,w
  5269  0A91  3190  2066  318A   	fcall	_setDimmerLights_TriggerAdj
  5270                           
  5271                           ;Switch_B1.c: 271: setDimmerLights_AdjGo(sw, 0);
  5272  0A94  0020               	movlb	0	; select bank0
  5273  0A95  01A2               	clrf	setDimmerLights_AdjGo@command
  5274  0A96  0864               	movf	Sw_DimmerOffFunc@sw,w
  5275  0A97  319F  27BD  318A   	fcall	_setDimmerLights_AdjGo
  5276                           
  5277                           ;Switch_B1.c: 273: product->Data[17]=product->Data[26 + sw];
  5278  0A9A  0020               	movlb	0	; select bank0
  5279  0A9B  0864               	movf	Sw_DimmerOffFunc@sw,w
  5280  0A9C  3E1A               	addlw	26
  5281  0A9D  077D               	addwf	_product,w
  5282  0A9E  00E2               	movwf	??_Sw_DimmerOffFunc
  5283  0A9F  0862               	movf	??_Sw_DimmerOffFunc,w
  5284  0AA0  0086               	movwf	6
  5285  0AA1  3001               	movlw	1	; select bank2/3
  5286  0AA2  0087               	movwf	7
  5287  0AA3  0801               	movf	1,w
  5288  0AA4  00E3               	movwf	??_Sw_DimmerOffFunc+1
  5289  0AA5  087D               	movf	_product,w
  5290  0AA6  3E11               	addlw	17
  5291  0AA7  0086               	movwf	6
  5292  0AA8  3001               	movlw	1	; select bank2/3
  5293  0AA9  0087               	movwf	7
  5294  0AAA  0863               	movf	??_Sw_DimmerOffFunc+1,w
  5295  0AAB  0081               	movwf	1
  5296                           
  5297                           ;Switch_B1.c: 274: setRF_DimmerLights(sw, Sw->Status);
  5298  0AAC  087B               	movf	_Sw,w
  5299  0AAD  0086               	movwf	6
  5300  0AAE  3001               	movlw	1	; select bank2/3
  5301  0AAF  0087               	movwf	7
  5302  0AB0  3000               	movlw	0
  5303  0AB1  1B01               	btfsc	1,6
  5304  0AB2  3001               	movlw	1
  5305  0AB3  00DD               	movwf	setRF_DimmerLights@on
  5306  0AB4  0864               	movf	Sw_DimmerOffFunc@sw,w
  5307  0AB5  3189  2197  318A   	fcall	_setRF_DimmerLights
  5308                           
  5309                           ;Switch_B1.c: 275: setTxData(1);
  5310  0AB8  3001               	movlw	1
  5311  0AB9  318F  275F         	fcall	_setTxData
  5312                           
  5313                           ;Switch_B1.c: 277: }
  5314                           ;Switch_B1.c: 278: } else {
  5315  0ABB  0008               	return
  5316  0ABC                     l6198:	
  5317                           
  5318                           ;Switch_B1.c: 279: setDimmerLights_Trigger(sw, 1);
  5319  0ABC  0020               	movlb	0	; select bank0
  5320  0ABD  01A2               	clrf	setDimmerLights_Trigger@command
  5321  0ABE  0AA2               	incf	setDimmerLights_Trigger@command,f
  5322  0ABF  0864               	movf	Sw_DimmerOffFunc@sw,w
  5323  0AC0  319F  27AD  318A   	fcall	_setDimmerLights_Trigger
  5324                           
  5325                           ;Switch_B1.c: 280: setDimmerLights_Switch(sw, 0);
  5326  0AC3  0020               	movlb	0	; select bank0
  5327  0AC4  01A2               	clrf	setDimmerLights_Switch@command
  5328  0AC5  0864               	movf	Sw_DimmerOffFunc@sw,w
  5329  0AC6  319F  279D  318A   	fcall	_setDimmerLights_Switch
  5330                           
  5331                           ;Switch_B1.c: 282: setDelayOff_GO(sw, 0, 0);
  5332  0AC9  0020               	movlb	0	; select bank0
  5333  0ACA  01A3               	clrf	setDelayOff_GO@command
  5334  0ACB  01A4               	clrf	setDelayOff_GO@value
  5335  0ACC  0864               	movf	Sw_DimmerOffFunc@sw,w
  5336  0ACD  3188  201D  318A   	fcall	_setDelayOff_GO
  5337                           
  5338                           ;Switch_B1.c: 283: setRF_DimmerLights(sw, Sw->Status);
  5339  0AD0  087B               	movf	_Sw,w
  5340  0AD1  0086               	movwf	6
  5341  0AD2  3001               	movlw	1	; select bank2/3
  5342  0AD3  0087               	movwf	7
  5343  0AD4  3000               	movlw	0
  5344  0AD5  1B01               	btfsc	1,6
  5345  0AD6  3001               	movlw	1
  5346  0AD7  0020               	movlb	0	; select bank0
  5347  0AD8  00DD               	movwf	setRF_DimmerLights@on
  5348  0AD9  0864               	movf	Sw_DimmerOffFunc@sw,w
  5349  0ADA  3189  2197  318A   	fcall	_setRF_DimmerLights
  5350                           
  5351                           ;Switch_B1.c: 284: setTxData(1);
  5352  0ADD  3001               	movlw	1
  5353  0ADE  318F  275F         	fcall	_setTxData
  5354  0AE0  0008               	return
  5355  0AE1                     __end_of_Sw_DimmerOffFunc:	
  5356                           
  5357                           	psect	text12
  5358  15DE                     __ptext12:	
  5359 ;; *************** function _Sw_DimmerAdjFunc *****************
  5360 ;; Defined at:
  5361 ;;		line 291 in file "../src/Switch_B1.c"
  5362 ;; Parameters:    Size  Location     Type
  5363 ;;  sw              1    wreg     unsigned char 
  5364 ;; Auto vars:     Size  Location     Type
  5365 ;;  sw              1    5[BANK0 ] unsigned char 
  5366 ;;  Idle            1    4[BANK0 ] unsigned char 
  5367 ;; Return value:  Size  Location     Type
  5368 ;;		None               void
  5369 ;; Registers used:
  5370 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5371 ;; Tracked objects:
  5372 ;;		On entry : 0/0
  5373 ;;		On exit  : 0/0
  5374 ;;		Unchanged: 0/0
  5375 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5376 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5377 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5378 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5379 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5380 ;;Total ram usage:        2 bytes
  5381 ;; Hardware stack levels used:    1
  5382 ;; Hardware stack levels required when called:    7
  5383 ;; This function calls:
  5384 ;;		_setDimmerLights_AdjGo
  5385 ;;		_setDimmerLights_TriggerAdj
  5386 ;;		_setRFSW_Status
  5387 ;; This function is called by:
  5388 ;;		_setSw_Main
  5389 ;; This function uses a non-reentrant model
  5390 ;;
  5391                           
  5392                           
  5393                           ;psect for function _Sw_DimmerAdjFunc
  5394  15DE                     _Sw_DimmerAdjFunc:	
  5395                           
  5396                           ;incstack = 0
  5397                           ; Regs used in _Sw_DimmerAdjFunc: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5398                           ;Sw_DimmerAdjFunc@sw stored from wreg
  5399  15DE  0020               	movlb	0	; select bank0
  5400  15DF  00A5               	movwf	Sw_DimmerAdjFunc@sw
  5401                           
  5402                           ;Switch_B1.c: 292: char Idle = 1;
  5403  15E0  01A4               	clrf	Sw_DimmerAdjFunc@Idle
  5404  15E1  0AA4               	incf	Sw_DimmerAdjFunc@Idle,f
  5405                           
  5406                           ;Switch_B1.c: 305: if (sw == 1) {
  5407  15E2  0825               	movf	Sw_DimmerAdjFunc@sw,w
  5408  15E3  3A01               	xorlw	1
  5409  15E4  1D03               	skipz
  5410  15E5  2DE9               	goto	l6164
  5411                           
  5412                           ;Switch_B1.c: 306: Idle = (DimmerLights22->AdjGo) ? 0 : 1;
  5413  15E6  0021               	movlb	1	; select bank1
  5414  15E7  083B               	movf	_DimmerLights22^(0+128),w
  5415  15E8  2DEF               	goto	L3
  5416  15E9                     l6164:	
  5417                           ;Switch_B1.c: 307: } else if (sw == 2) {
  5418                           
  5419  15E9  0825               	movf	Sw_DimmerAdjFunc@sw,w
  5420  15EA  3A02               	xorlw	2
  5421  15EB  1D03               	skipz
  5422  15EC  2DFB               	goto	l6168
  5423                           
  5424                           ;Switch_B1.c: 308: Idle = (DimmerLights11->AdjGo) ? 0 : 1;
  5425  15ED  0021               	movlb	1	; select bank1
  5426  15EE  083A               	movf	_DimmerLights11^(0+128),w
  5427  15EF                     L3:	
  5428  15EF  3E08               	addlw	8
  5429  15F0  0086               	movwf	6
  5430  15F1  3001               	movlw	1	; select bank2/3
  5431  15F2  0087               	movwf	7
  5432  15F3  1003               	clrc
  5433  15F4  1D81               	btfss	1,3
  5434  15F5  1403               	setc
  5435  15F6  3000               	movlw	0
  5436  15F7  1803               	btfsc	3,0
  5437  15F8  3001               	movlw	1
  5438  15F9  0020               	movlb	0	; select bank0
  5439  15FA  00A4               	movwf	Sw_DimmerAdjFunc@Idle
  5440  15FB                     l6168:	
  5441                           
  5442                           ;Switch_B1.c: 309: }
  5443                           ;Switch_B1.c: 312: if (Idle) {
  5444  15FB  0824               	movf	Sw_DimmerAdjFunc@Idle,w
  5445  15FC  1903               	btfsc	3,2
  5446  15FD  0008               	return
  5447                           
  5448                           ;Switch_B1.c: 313: if (Sw->Flag) {
  5449  15FE  087B               	movf	_Sw,w
  5450  15FF  0086               	movwf	6
  5451  1600  3001               	movlw	1	; select bank2/3
  5452  1601  0087               	movwf	7
  5453  1602  1F81               	btfss	1,7
  5454  1603  0008               	return
  5455                           
  5456                           ;Switch_B1.c: 314: Sw->Adj = 1;
  5457  1604  0A7B               	incf	_Sw,w
  5458  1605  0086               	movwf	6
  5459  1606  3001               	movlw	1	; select bank2/3
  5460  1607  0087               	movwf	7
  5461  1608  1401               	bsf	1,0
  5462                           
  5463                           ;Switch_B1.c: 315: Sw->Status = 1;
  5464  1609  087B               	movf	_Sw,w
  5465  160A  0086               	movwf	6
  5466  160B  3001               	movlw	1	; select bank2/3
  5467  160C  0087               	movwf	7
  5468  160D  1701               	bsf	1,6
  5469                           
  5470                           ;Switch_B1.c: 316: setRFSW_Status(sw, 1);
  5471  160E  01A2               	clrf	setRFSW_Status@command
  5472  160F  0AA2               	incf	setRFSW_Status@command,f
  5473  1610  0825               	movf	Sw_DimmerAdjFunc@sw,w
  5474  1611  319F  2750  3195   	fcall	_setRFSW_Status
  5475                           
  5476                           ;Switch_B1.c: 318: setDimmerLights_TriggerAdj(sw, 1);
  5477  1614  0020               	movlb	0	; select bank0
  5478  1615  01A2               	clrf	setDimmerLights_TriggerAdj@command
  5479  1616  0AA2               	incf	setDimmerLights_TriggerAdj@command,f
  5480  1617  0825               	movf	Sw_DimmerAdjFunc@sw,w
  5481  1618  3190  2066  3195   	fcall	_setDimmerLights_TriggerAdj
  5482                           
  5483                           ;Switch_B1.c: 319: setDimmerLights_AdjGo(sw, 1);
  5484  161B  0020               	movlb	0	; select bank0
  5485  161C  01A2               	clrf	setDimmerLights_AdjGo@command
  5486  161D  0AA2               	incf	setDimmerLights_AdjGo@command,f
  5487  161E  0825               	movf	Sw_DimmerAdjFunc@sw,w
  5488  161F  319F  27BD         	fcall	_setDimmerLights_AdjGo
  5489  1621  0020               	movlb	0	; select bank0
  5490  1622  0008               	return
  5491  1623                     __end_of_Sw_DimmerAdjFunc:	
  5492                           
  5493                           	psect	text13
  5494  1066                     __ptext13:	
  5495 ;; *************** function _setDimmerLights_TriggerAdj *****************
  5496 ;; Defined at:
  5497 ;;		line 688 in file "../src/Dimmer_B1.c"
  5498 ;; Parameters:    Size  Location     Type
  5499 ;;  lights          1    wreg     unsigned char 
  5500 ;;  command         1    2[BANK0 ] unsigned char 
  5501 ;; Auto vars:     Size  Location     Type
  5502 ;;  lights          1    3[BANK0 ] unsigned char 
  5503 ;; Return value:  Size  Location     Type
  5504 ;;		None               void
  5505 ;; Registers used:
  5506 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5507 ;; Tracked objects:
  5508 ;;		On entry : 0/0
  5509 ;;		On exit  : 0/0
  5510 ;;		Unchanged: 0/0
  5511 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5512 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5513 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5514 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5515 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5516 ;;Total ram usage:        2 bytes
  5517 ;; Hardware stack levels used:    1
  5518 ;; Hardware stack levels required when called:    6
  5519 ;; This function calls:
  5520 ;;		_DimmerLightsPointSelect
  5521 ;; This function is called by:
  5522 ;;		_Sw_DimmerOffFunc
  5523 ;;		_Sw_DimmerAdjFunc
  5524 ;; This function uses a non-reentrant model
  5525 ;;
  5526                           
  5527                           
  5528                           ;psect for function _setDimmerLights_TriggerAdj
  5529  1066                     _setDimmerLights_TriggerAdj:	
  5530                           
  5531                           ;incstack = 0
  5532                           ; Regs used in _setDimmerLights_TriggerAdj: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  5533                           ;setDimmerLights_TriggerAdj@lights stored from wreg
  5534  1066  0020               	movlb	0	; select bank0
  5535  1067  00A3               	movwf	setDimmerLights_TriggerAdj@lights
  5536                           
  5537                           ;Dimmer_B1.c: 689: DimmerLightsPointSelect(lights);
  5538  1068  0823               	movf	setDimmerLights_TriggerAdj@lights,w
  5539  1069  3190  2099         	fcall	_DimmerLightsPointSelect
  5540                           
  5541                           ;Dimmer_B1.c: 690: DimmerLights->TriggerAdj = command;
  5542  106B  0879               	movf	_DimmerLights,w
  5543  106C  3E08               	addlw	8
  5544  106D  0086               	movwf	6
  5545  106E  3001               	movlw	1	; select bank2/3
  5546  106F  0087               	movwf	7
  5547  1070  0020               	movlb	0	; select bank0
  5548  1071  0822               	movf	setDimmerLights_TriggerAdj@command,w
  5549  1072  1201               	bcf	1,4
  5550  1073  1D03               	skipz
  5551  1074  1601               	bsf	1,4
  5552  1075  0008               	return
  5553  1076                     __end_of_setDimmerLights_TriggerAdj:	
  5554                           
  5555                           	psect	text14
  5556  1FBD                     __ptext14:	
  5557 ;; *************** function _setDimmerLights_AdjGo *****************
  5558 ;; Defined at:
  5559 ;;		line 678 in file "../src/Dimmer_B1.c"
  5560 ;; Parameters:    Size  Location     Type
  5561 ;;  lights          1    wreg     unsigned char 
  5562 ;;  command         1    2[BANK0 ] unsigned char 
  5563 ;; Auto vars:     Size  Location     Type
  5564 ;;  lights          1    3[BANK0 ] unsigned char 
  5565 ;; Return value:  Size  Location     Type
  5566 ;;		None               void
  5567 ;; Registers used:
  5568 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5569 ;; Tracked objects:
  5570 ;;		On entry : 0/0
  5571 ;;		On exit  : 0/0
  5572 ;;		Unchanged: 0/0
  5573 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5574 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5575 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5576 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5577 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5578 ;;Total ram usage:        2 bytes
  5579 ;; Hardware stack levels used:    1
  5580 ;; Hardware stack levels required when called:    6
  5581 ;; This function calls:
  5582 ;;		_DimmerLightsPointSelect
  5583 ;; This function is called by:
  5584 ;;		_Sw_DimmerOffFunc
  5585 ;;		_Sw_DimmerAdjFunc
  5586 ;; This function uses a non-reentrant model
  5587 ;;
  5588                           
  5589                           
  5590                           ;psect for function _setDimmerLights_AdjGo
  5591  1FBD                     _setDimmerLights_AdjGo:	
  5592                           
  5593                           ;incstack = 0
  5594                           ; Regs used in _setDimmerLights_AdjGo: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  5595                           ;setDimmerLights_AdjGo@lights stored from wreg
  5596  1FBD  0020               	movlb	0	; select bank0
  5597  1FBE  00A3               	movwf	setDimmerLights_AdjGo@lights
  5598                           
  5599                           ;Dimmer_B1.c: 679: DimmerLightsPointSelect(lights);
  5600  1FBF  0823               	movf	setDimmerLights_AdjGo@lights,w
  5601  1FC0  3190  2099         	fcall	_DimmerLightsPointSelect
  5602                           
  5603                           ;Dimmer_B1.c: 680: DimmerLights->AdjGo = command;
  5604  1FC2  0879               	movf	_DimmerLights,w
  5605  1FC3  3E08               	addlw	8
  5606  1FC4  0086               	movwf	6
  5607  1FC5  3001               	movlw	1	; select bank2/3
  5608  1FC6  0087               	movwf	7
  5609  1FC7  0020               	movlb	0	; select bank0
  5610  1FC8  0822               	movf	setDimmerLights_AdjGo@command,w
  5611  1FC9  1181               	bcf	1,3
  5612  1FCA  1D03               	skipz
  5613  1FCB  1581               	bsf	1,3
  5614  1FCC  0008               	return
  5615  1FCD                     __end_of_setDimmerLights_AdjGo:	
  5616                           
  5617                           	psect	text15
  5618  1F43                     __ptext15:	
  5619 ;; *************** function _Switch_Initialization *****************
  5620 ;; Defined at:
  5621 ;;		line 37 in file "../src/Switch_B1.c"
  5622 ;; Parameters:    Size  Location     Type
  5623 ;;		None
  5624 ;; Auto vars:     Size  Location     Type
  5625 ;;		None
  5626 ;; Return value:  Size  Location     Type
  5627 ;;		None               void
  5628 ;; Registers used:
  5629 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5630 ;; Tracked objects:
  5631 ;;		On entry : 0/0
  5632 ;;		On exit  : 0/0
  5633 ;;		Unchanged: 0/0
  5634 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5635 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5636 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5637 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5638 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5639 ;;Total ram usage:        0 bytes
  5640 ;; Hardware stack levels used:    1
  5641 ;; Hardware stack levels required when called:    8
  5642 ;; This function calls:
  5643 ;;		_TouchPower
  5644 ;;		_setSw_Initialization
  5645 ;; This function is called by:
  5646 ;;		_main
  5647 ;; This function uses a non-reentrant model
  5648 ;;
  5649                           
  5650                           
  5651                           ;psect for function _Switch_Initialization
  5652  1F43                     _Switch_Initialization:	
  5653                           
  5654                           ;Switch_B1.c: 38: TouchPower();
  5655                           
  5656                           ;incstack = 0
  5657                           ; Regs used in _Switch_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  5658  1F43  319E  263E  319F   	fcall	_TouchPower
  5659                           
  5660                           ;Switch_B1.c: 40: WPUB1 = 0;
  5661  1F46  0024               	movlb	4	; select bank4
  5662  1F47  108D               	bcf	13,1	;volatile
  5663                           
  5664                           ;Switch_B1.c: 49: setSw_Initialization(1);
  5665  1F48  3001               	movlw	1
  5666  1F49  319E  267A  319F   	fcall	_setSw_Initialization
  5667                           
  5668                           ;Switch_B1.c: 52: setSw_Initialization(2);
  5669  1F4C  3002               	movlw	2
  5670  1F4D  319E  267A         	fcall	_setSw_Initialization
  5671  1F4F  0008               	return
  5672  1F50                     __end_of_Switch_Initialization:	
  5673                           
  5674                           	psect	text16
  5675  1E7A                     __ptext16:	
  5676 ;; *************** function _setSw_Initialization *****************
  5677 ;; Defined at:
  5678 ;;		line 77 in file "../src/Switch_B1.c"
  5679 ;; Parameters:    Size  Location     Type
  5680 ;;  sw              1    wreg     unsigned char 
  5681 ;; Auto vars:     Size  Location     Type
  5682 ;;  sw              1    4[BANK0 ] unsigned char 
  5683 ;; Return value:  Size  Location     Type
  5684 ;;		None               void
  5685 ;; Registers used:
  5686 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5687 ;; Tracked objects:
  5688 ;;		On entry : 0/0
  5689 ;;		On exit  : 0/0
  5690 ;;		Unchanged: 0/0
  5691 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5692 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5693 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5694 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5695 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5696 ;;Total ram usage:        1 bytes
  5697 ;; Hardware stack levels used:    1
  5698 ;; Hardware stack levels required when called:    7
  5699 ;; This function calls:
  5700 ;;		_setLED
  5701 ;; This function is called by:
  5702 ;;		_Switch_Initialization
  5703 ;; This function uses a non-reentrant model
  5704 ;;
  5705                           
  5706                           
  5707                           ;psect for function _setSw_Initialization
  5708  1E7A                     _setSw_Initialization:	
  5709                           
  5710                           ;incstack = 0
  5711                           ; Regs used in _setSw_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5712                           ;setSw_Initialization@sw stored from wreg
  5713  1E7A  0020               	movlb	0	; select bank0
  5714  1E7B  00A4               	movwf	setSw_Initialization@sw
  5715                           
  5716                           ;Switch_B1.c: 78: setLED(sw, 1);
  5717  1E7C  01A2               	clrf	setLED@command
  5718  1E7D  0AA2               	incf	setLED@command,f
  5719  1E7E  0824               	movf	setSw_Initialization@sw,w
  5720  1E7F  3188  207A         	fcall	_setLED
  5721  1E81  0008               	return
  5722  1E82                     __end_of_setSw_Initialization:	
  5723                           
  5724                           	psect	text17
  5725  1E3E                     __ptext17:	
  5726 ;; *************** function _TouchPower *****************
  5727 ;; Defined at:
  5728 ;;		line 10 in file "../src/Switch_B1.c"
  5729 ;; Parameters:    Size  Location     Type
  5730 ;;		None
  5731 ;; Auto vars:     Size  Location     Type
  5732 ;;		None
  5733 ;; Return value:  Size  Location     Type
  5734 ;;		None               void
  5735 ;; Registers used:
  5736 ;;		None
  5737 ;; Tracked objects:
  5738 ;;		On entry : 0/0
  5739 ;;		On exit  : 0/0
  5740 ;;		Unchanged: 0/0
  5741 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5742 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5743 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5744 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5745 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5746 ;;Total ram usage:        0 bytes
  5747 ;; Hardware stack levels used:    1
  5748 ;; Hardware stack levels required when called:    5
  5749 ;; This function calls:
  5750 ;;		Nothing
  5751 ;; This function is called by:
  5752 ;;		_Switch_Initialization
  5753 ;; This function uses a non-reentrant model
  5754 ;;
  5755                           
  5756                           
  5757                           ;psect for function _TouchPower
  5758  1E3E                     _TouchPower:	
  5759  1E3E                     l2554:	
  5760                           ;Switch_B1.c: 11: while (!RC5)
  5761                           
  5762                           ;incstack = 0
  5763                           ; Regs used in _TouchPower: []
  5764                           
  5765  1E3E  0020               	movlb	0	; select bank0
  5766  1E3F  1A8E               	btfsc	14,5	;volatile
  5767  1E40  0008               	return
  5768                           
  5769                           ;Switch_B1.c: 12: RC5 = 1;
  5770  1E41  168E               	bsf	14,5	;volatile
  5771  1E42  2E3E               	goto	l2554
  5772  1E43                     __end_of_TouchPower:	
  5773                           
  5774                           	psect	text18
  5775  1E3A                     __ptext18:	
  5776 ;; *************** function _RF_Main *****************
  5777 ;; Defined at:
  5778 ;;		line 23 in file "../src/RF_Control_B1.c"
  5779 ;; Parameters:    Size  Location     Type
  5780 ;;		None
  5781 ;; Auto vars:     Size  Location     Type
  5782 ;;		None
  5783 ;; Return value:  Size  Location     Type
  5784 ;;		None               void
  5785 ;; Registers used:
  5786 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5787 ;; Tracked objects:
  5788 ;;		On entry : 0/0
  5789 ;;		On exit  : 0/0
  5790 ;;		Unchanged: 0/0
  5791 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5792 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5793 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5794 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5795 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5796 ;;Total ram usage:        0 bytes
  5797 ;; Hardware stack levels used:    1
  5798 ;; Hardware stack levels required when called:   14
  5799 ;; This function calls:
  5800 ;;		_setRF_Main
  5801 ;; This function is called by:
  5802 ;;		_main
  5803 ;; This function uses a non-reentrant model
  5804 ;;
  5805                           
  5806                           
  5807                           ;psect for function _RF_Main
  5808  1E3A                     _RF_Main:	
  5809                           
  5810                           ;RF_Control_B1.c: 25: setRF_Main(1);
  5811                           
  5812                           ;incstack = 0
  5813                           ; Regs used in _RF_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5814  1E3A  3001               	movlw	1
  5815  1E3B  3185  25C8         	fcall	_setRF_Main
  5816  1E3D  0008               	return
  5817  1E3E                     __end_of_RF_Main:	
  5818                           
  5819                           	psect	text19
  5820  05C8                     __ptext19:	
  5821 ;; *************** function _setRF_Main *****************
  5822 ;; Defined at:
  5823 ;;		line 57 in file "../src/RF_Control_B1.c"
  5824 ;; Parameters:    Size  Location     Type
  5825 ;;  rf              1    wreg     unsigned char 
  5826 ;; Auto vars:     Size  Location     Type
  5827 ;;  rf              1   74[BANK0 ] unsigned char 
  5828 ;; Return value:  Size  Location     Type
  5829 ;;		None               void
  5830 ;; Registers used:
  5831 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5832 ;; Tracked objects:
  5833 ;;		On entry : 0/0
  5834 ;;		On exit  : 0/0
  5835 ;;		Unchanged: 0/0
  5836 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5837 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5838 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5839 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5840 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5841 ;;Total ram usage:        3 bytes
  5842 ;; Hardware stack levels used:    1
  5843 ;; Hardware stack levels required when called:   13
  5844 ;; This function calls:
  5845 ;;		_CC2500_RxData
  5846 ;;		_CC2500_TxData
  5847 ;;		_CC2500_WriteCommand
  5848 ;;		_RF_RxDisable
  5849 ;;		_RfPointSelect
  5850 ;;		_getRxData
  5851 ;;		_setINT_GO
  5852 ;; This function is called by:
  5853 ;;		_RF_Main
  5854 ;; This function uses a non-reentrant model
  5855 ;;
  5856                           
  5857                           
  5858                           ;psect for function _setRF_Main
  5859  05C8                     _setRF_Main:	
  5860                           
  5861                           ;incstack = 0
  5862                           ; Regs used in _setRF_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5863                           ;setRF_Main@rf stored from wreg
  5864  05C8  0020               	movlb	0	; select bank0
  5865  05C9  00EA               	movwf	setRF_Main@rf
  5866                           
  5867                           ;RF_Control_B1.c: 58: RfPointSelect(rf);
  5868  05CA  086A               	movf	setRF_Main@rf,w
  5869  05CB  319E  26DF  3185   	fcall	_RfPointSelect
  5870                           
  5871                           ;RF_Control_B1.c: 59: if (RF->Enable == 1) {
  5872  05CE  0021               	movlb	1	; select bank1
  5873  05CF  083D               	movf	_RF^(0+128),w
  5874  05D0  0086               	movwf	6
  5875  05D1  0187               	clrf	7
  5876  05D2  1C01               	btfss	1,0
  5877  05D3  0008               	return
  5878                           
  5879                           ;RF_Control_B1.c: 62: if (Buz->GO == 0) {
  5880  05D4  0878               	movf	_Buz,w
  5881  05D5  0086               	movwf	6
  5882  05D6  3001               	movlw	1	; select bank2/3
  5883  05D7  0087               	movwf	7
  5884  05D8  1881               	btfsc	1,1
  5885  05D9  0008               	return
  5886                           
  5887                           ;RF_Control_B1.c: 68: RF->Key = (RA6 == 1 || RA4 == 1 || RA0 == 1 || RB1 == 1) ? 1 : 0;
  5888  05DA  0020               	movlb	0	; select bank0
  5889  05DB  01EB               	clrf	_setRF_Main$4185
  5890  05DC  0AEB               	incf	_setRF_Main$4185,f
  5891  05DD  1F0C               	btfss	12,6	;volatile
  5892  05DE  1A0C               	btfsc	12,4	;volatile
  5893  05DF  2DE4               	goto	l6620
  5894  05E0  1C0C               	btfss	12,0	;volatile
  5895  05E1  188D               	btfsc	13,1	;volatile
  5896  05E2  2DE4               	goto	l6620
  5897  05E3  01EB               	clrf	_setRF_Main$4185
  5898  05E4                     l6620:	
  5899  05E4  0021               	movlb	1	; select bank1
  5900  05E5  083D               	movf	_RF^(0+128),w
  5901  05E6  0086               	movwf	6
  5902  05E7  0187               	clrf	7
  5903  05E8  0020               	movlb	0	; select bank0
  5904  05E9  086B               	movf	_setRF_Main$4185,w
  5905  05EA  1381               	bcf	1,7
  5906  05EB  1D03               	skipz
  5907  05EC  1781               	bsf	1,7
  5908                           
  5909                           ;RF_Control_B1.c: 74: if (RF->Key == 1 && RF->Learn == 0) {
  5910  05ED  0021               	movlb	1	; select bank1
  5911  05EE  083D               	movf	_RF^(0+128),w
  5912  05EF  0086               	movwf	6
  5913  05F0  0187               	clrf	7
  5914  05F1  1F81               	btfss	1,7
  5915  05F2  2E00               	goto	l6630
  5916  05F3  083D               	movf	_RF^(0+128),w
  5917  05F4  0086               	movwf	6
  5918  05F5  0187               	clrf	7
  5919  05F6  1B01               	btfsc	1,6
  5920  05F7  2E00               	goto	l6630
  5921                           
  5922                           ;RF_Control_B1.c: 75: RF->Run = 1;
  5923  05F8  0A3D               	incf	_RF^(0+128),w
  5924  05F9  0086               	movwf	6
  5925  05FA  0187               	clrf	7
  5926  05FB  1481               	bsf	1,1
  5927                           
  5928                           ;RF_Control_B1.c: 76: RF_RxDisable(1);
  5929  05FC  3001               	movlw	1
  5930  05FD  3193  2359         	fcall	_RF_RxDisable
  5931                           
  5932                           ;RF_Control_B1.c: 77: } else {
  5933  05FF  0008               	return
  5934  0600                     l6630:	
  5935                           
  5936                           ;RF_Control_B1.c: 78: if (RF->Run == 1 && RF->Learn == 0) {
  5937  0600  0021               	movlb	1	; select bank1
  5938  0601  0A3D               	incf	_RF^(0+128),w
  5939  0602  0086               	movwf	6
  5940  0603  0187               	clrf	7
  5941  0604  1C81               	btfss	1,1
  5942  0605  2E29               	goto	l6642
  5943  0606  083D               	movf	_RF^(0+128),w
  5944  0607  0086               	movwf	6
  5945  0608  0187               	clrf	7
  5946  0609  1B01               	btfsc	1,6
  5947  060A  2E29               	goto	l6642
  5948                           
  5949                           ;RF_Control_B1.c: 79: RF->Count++;
  5950  060B  3001               	movlw	1
  5951  060C  0020               	movlb	0	; select bank0
  5952  060D  00E9               	movwf	??_setRF_Main
  5953  060E  0021               	movlb	1	; select bank1
  5954  060F  083D               	movf	_RF^(0+128),w
  5955  0610  3E03               	addlw	3
  5956  0611  0086               	movwf	6
  5957  0612  0187               	clrf	7
  5958  0613  0020               	movlb	0	; select bank0
  5959  0614  0869               	movf	??_setRF_Main,w
  5960  0615  0781               	addwf	1,f
  5961                           
  5962                           ;RF_Control_B1.c: 80: if (RF->Count == 25) {
  5963  0616  0021               	movlb	1	; select bank1
  5964  0617  083D               	movf	_RF^(0+128),w
  5965  0618  3E03               	addlw	3
  5966  0619  0086               	movwf	6
  5967  061A  0187               	clrf	7
  5968  061B  0801               	movf	1,w
  5969  061C  3A19               	xorlw	25
  5970  061D  1D03               	skipz
  5971  061E  0008               	return
  5972                           
  5973                           ;RF_Control_B1.c: 81: RF->Count = 0;
  5974  061F  083D               	movf	_RF^(0+128),w
  5975  0620  3E03               	addlw	3
  5976  0621  0086               	movwf	6
  5977  0622  0187               	clrf	7
  5978  0623  0181               	clrf	1
  5979                           
  5980                           ;RF_Control_B1.c: 82: RF->Run = 0;
  5981  0624  0A3D               	incf	_RF^(0+128),w
  5982  0625  0086               	movwf	6
  5983  0626  0187               	clrf	7
  5984  0627  1081               	bcf	1,1
  5985                           
  5986                           ;RF_Control_B1.c: 83: }
  5987                           ;RF_Control_B1.c: 84: } else {
  5988  0628  0008               	return
  5989  0629                     l6642:	
  5990                           
  5991                           ;RF_Control_B1.c: 85: RF->Count = 0;
  5992  0629  083D               	movf	_RF^(0+128),w
  5993  062A  3E03               	addlw	3
  5994  062B  0086               	movwf	6
  5995  062C  0187               	clrf	7
  5996  062D  0181               	clrf	1
  5997                           
  5998                           ;RF_Control_B1.c: 86: RF->Run = 0;
  5999  062E  0A3D               	incf	_RF^(0+128),w
  6000  062F  0086               	movwf	6
  6001  0630  0187               	clrf	7
  6002  0631  1081               	bcf	1,1
  6003                           
  6004                           ;RF_Control_B1.c: 88: if (RF->ReceiveGO == 1) {
  6005  0632  083D               	movf	_RF^(0+128),w
  6006  0633  0086               	movwf	6
  6007  0634  0187               	clrf	7
  6008  0635  1C81               	btfss	1,1
  6009  0636  2E46               	goto	l6656
  6010                           
  6011                           ;RF_Control_B1.c: 89: RF->ReceiveGO = 0;
  6012  0637  083D               	movf	_RF^(0+128),w
  6013  0638  0086               	movwf	6
  6014  0639  0187               	clrf	7
  6015  063A  1081               	bcf	1,1
  6016                           
  6017                           ;RF_Control_B1.c: 90: RF_RxDisable(1);
  6018  063B  3001               	movlw	1
  6019  063C  3193  2359  3185   	fcall	_RF_RxDisable
  6020                           
  6021                           ;RF_Control_B1.c: 91: CC2500_RxData();
  6022  063F  3188  20D8  3185   	fcall	_CC2500_RxData
  6023                           
  6024                           ;RF_Control_B1.c: 99: getRxData(1);
  6025  0642  3001               	movlw	1
  6026  0643  3196  26B0         	fcall	_getRxData
  6027                           
  6028                           ;RF_Control_B1.c: 102: } else {
  6029  0645  0008               	return
  6030  0646                     l6656:	
  6031                           
  6032                           ;RF_Control_B1.c: 103: if (RF->Learn == 0) {
  6033  0646  0021               	movlb	1	; select bank1
  6034  0647  083D               	movf	_RF^(0+128),w
  6035  0648  0086               	movwf	6
  6036  0649  0187               	clrf	7
  6037  064A  1B01               	btfsc	1,6
  6038  064B  2E69               	goto	l6672
  6039                           
  6040                           ;RF_Control_B1.c: 104: if (RF->TransceiveGO == 1) {
  6041  064C  083D               	movf	_RF^(0+128),w
  6042  064D  0086               	movwf	6
  6043  064E  0187               	clrf	7
  6044  064F  1D01               	btfss	1,2
  6045  0650  2E5C               	goto	l6666
  6046                           
  6047                           ;RF_Control_B1.c: 105: RF->TransceiveGO = 0;
  6048  0651  083D               	movf	_RF^(0+128),w
  6049  0652  0086               	movwf	6
  6050  0653  0187               	clrf	7
  6051  0654  1101               	bcf	1,2
  6052                           
  6053                           ;RF_Control_B1.c: 106: RF_RxDisable(1);
  6054  0655  3001               	movlw	1
  6055  0656  3193  2359  3185   	fcall	_RF_RxDisable
  6056                           
  6057                           ;RF_Control_B1.c: 107: CC2500_TxData();
  6058  0659  3195  2555         	fcall	_CC2500_TxData
  6059                           
  6060                           ;RF_Control_B1.c: 109: } else {
  6061  065B  0008               	return
  6062  065C                     l6666:	
  6063                           
  6064                           ;RF_Control_B1.c: 111: RF->RxStatus = 1;
  6065  065C  0021               	movlb	1	; select bank1
  6066  065D  083D               	movf	_RF^(0+128),w
  6067  065E  0086               	movwf	6
  6068  065F  0187               	clrf	7
  6069  0660  1581               	bsf	1,3
  6070                           
  6071                           ;RF_Control_B1.c: 112: CC2500_WriteCommand(0x34);
  6072  0661  3034               	movlw	52
  6073  0662  319F  278D  3185   	fcall	_CC2500_WriteCommand
  6074                           
  6075                           ;RF_Control_B1.c: 113: setINT_GO(1);
  6076  0665  3001               	movlw	1
  6077  0666  319E  2693         	fcall	_setINT_GO
  6078                           
  6079                           ;RF_Control_B1.c: 115: }
  6080                           ;RF_Control_B1.c: 116: } else {
  6081  0668  0008               	return
  6082  0669                     l6672:	
  6083                           
  6084                           ;RF_Control_B1.c: 118: RF->RxStatus = 1;
  6085  0669  0021               	movlb	1	; select bank1
  6086  066A  083D               	movf	_RF^(0+128),w
  6087  066B  0086               	movwf	6
  6088  066C  0187               	clrf	7
  6089  066D  1581               	bsf	1,3
  6090                           
  6091                           ;RF_Control_B1.c: 119: CC2500_WriteCommand(0x34);
  6092  066E  3034               	movlw	52
  6093  066F  319F  278D  3185   	fcall	_CC2500_WriteCommand
  6094                           
  6095                           ;RF_Control_B1.c: 120: setINT_GO(1);
  6096  0672  3001               	movlw	1
  6097  0673  319E  2693         	fcall	_setINT_GO
  6098  0675  0008               	return
  6099  0676                     __end_of_setRF_Main:	
  6100                           
  6101                           	psect	text20
  6102  16B0                     __ptext20:	
  6103 ;; *************** function _getRxData *****************
  6104 ;; Defined at:
  6105 ;;		line 209 in file "../src/RF_Control_B1.c"
  6106 ;; Parameters:    Size  Location     Type
  6107 ;;  rf              1    wreg     unsigned char 
  6108 ;; Auto vars:     Size  Location     Type
  6109 ;;  rf              1   72[BANK0 ] unsigned char 
  6110 ;;  i               1    0        unsigned char 
  6111 ;; Return value:  Size  Location     Type
  6112 ;;		None               void
  6113 ;; Registers used:
  6114 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6115 ;; Tracked objects:
  6116 ;;		On entry : 0/0
  6117 ;;		On exit  : 0/0
  6118 ;;		Unchanged: 0/0
  6119 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6120 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6121 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6122 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6123 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6124 ;;Total ram usage:        1 bytes
  6125 ;; Hardware stack levels used:    1
  6126 ;; Hardware stack levels required when called:   12
  6127 ;; This function calls:
  6128 ;;		_RfPointSelect
  6129 ;;		_setControl_Lights_Table
  6130 ;;		_setLog_Code
  6131 ;; This function is called by:
  6132 ;;		_setRF_Main
  6133 ;; This function uses a non-reentrant model
  6134 ;;
  6135                           
  6136                           
  6137                           ;psect for function _getRxData
  6138  16B0                     _getRxData:	
  6139                           
  6140                           ;incstack = 0
  6141                           ; Regs used in _getRxData: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6142                           ;getRxData@rf stored from wreg
  6143  16B0  0020               	movlb	0	; select bank0
  6144  16B1  00E8               	movwf	getRxData@rf
  6145                           
  6146                           ;RF_Control_B1.c: 210: unsigned char i;
  6147                           ;RF_Control_B1.c: 211: RfPointSelect(rf);
  6148  16B2  0868               	movf	getRxData@rf,w
  6149  16B3  319E  26DF  3196   	fcall	_RfPointSelect
  6150                           
  6151                           ;RF_Control_B1.c: 212: if (RF->Learn) {
  6152  16B6  0021               	movlb	1	; select bank1
  6153  16B7  083D               	movf	_RF^(0+128),w
  6154  16B8  0086               	movwf	6
  6155  16B9  0187               	clrf	7
  6156  16BA  1F01               	btfss	1,6
  6157  16BB  2EC7               	goto	l6094
  6158                           
  6159                           ;RF_Control_B1.c: 213: if (RF_Data[0] == 0x0 && RF_Data[1] == 0x64)
  6160  16BC  08A0               	movf	_RF_Data^(0+128),f
  6161  16BD  1D03               	skipz
  6162  16BE  0008               	return
  6163  16BF  0821               	movf	(_RF_Data^(0+128)+1),w
  6164  16C0  3A64               	xorlw	100
  6165  16C1  1D03               	skipz
  6166  16C2  0008               	return
  6167                           
  6168                           ;RF_Control_B1.c: 214: {
  6169                           ;RF_Control_B1.c: 215: setLog_Code(1);
  6170  16C3  3001               	movlw	1
  6171  16C4  3196  2669         	fcall	_setLog_Code
  6172                           
  6173                           ;RF_Control_B1.c: 216: }
  6174                           ;RF_Control_B1.c: 217: } else {
  6175  16C6  0008               	return
  6176  16C7                     l6094:	
  6177                           
  6178                           ;RF_Control_B1.c: 218: if (RF_Data[0] == 0x00 && RF_Data[1] == 0x02)
  6179  16C7  0021               	movlb	1	; select bank1
  6180  16C8  08A0               	movf	_RF_Data^(0+128),f
  6181  16C9  1D03               	skipz
  6182  16CA  0008               	return
  6183  16CB  0821               	movf	(_RF_Data^(0+128)+1),w
  6184  16CC  3A02               	xorlw	2
  6185  16CD  1D03               	skipz
  6186  16CE  0008               	return
  6187                           
  6188                           ;RF_Control_B1.c: 219: {
  6189                           ;RF_Control_B1.c: 220: if (RF_Data[12] == 0xff && RF_Data[13] == 0xff && RF_Data[14] == 
      +                          0xff) {
  6190  16CF  082C               	movf	(_RF_Data^(0+128)+12),w
  6191  16D0  3AFF               	xorlw	255
  6192  16D1  1D03               	skipz
  6193  16D2  2EDD               	goto	l6106
  6194  16D3  082D               	movf	(_RF_Data^(0+128)+13),w
  6195  16D4  3AFF               	xorlw	255
  6196  16D5  1D03               	skipz
  6197  16D6  2EDD               	goto	l6106
  6198  16D7  082E               	movf	(_RF_Data^(0+128)+14),w
  6199  16D8  3AFF               	xorlw	255
  6200  16D9  1D03               	skipz
  6201  16DA  2EDD               	goto	l6106
  6202                           
  6203                           ;RF_Control_B1.c: 221: __nop();
  6204  16DB  0000               	nop
  6205                           
  6206                           ;RF_Control_B1.c: 222: } else {
  6207  16DC  0008               	return
  6208  16DD                     l6106:	
  6209                           
  6210                           ;RF_Control_B1.c: 223: if (RF_Data[12] == product->Data[12] && RF_Data[13] == product->D
      +                          ata[13] && RF_Data[14] == product->Data[14]) {
  6211  16DD  087D               	movf	_product,w
  6212  16DE  3E0C               	addlw	12
  6213  16DF  0086               	movwf	6
  6214  16E0  3001               	movlw	1	; select bank2/3
  6215  16E1  0087               	movwf	7
  6216  16E2  0021               	movlb	1	; select bank1
  6217  16E3  082C               	movf	(_RF_Data^(0+128)+12),w
  6218  16E4  0601               	xorwf	1,w
  6219  16E5  1D03               	skipz
  6220  16E6  0008               	return
  6221  16E7  087D               	movf	_product,w
  6222  16E8  3E0D               	addlw	13
  6223  16E9  0086               	movwf	6
  6224  16EA  3001               	movlw	1	; select bank2/3
  6225  16EB  0087               	movwf	7
  6226  16EC  082D               	movf	(_RF_Data^(0+128)+13),w
  6227  16ED  0601               	xorwf	1,w
  6228  16EE  1D03               	skipz
  6229  16EF  0008               	return
  6230  16F0  087D               	movf	_product,w
  6231  16F1  3E0E               	addlw	14
  6232  16F2  0086               	movwf	6
  6233  16F3  3001               	movlw	1	; select bank2/3
  6234  16F4  0087               	movwf	7
  6235  16F5  082E               	movf	(_RF_Data^(0+128)+14),w
  6236  16F6  0601               	xorwf	1,w
  6237  16F7  1D03               	skipz
  6238  16F8  0008               	return
  6239                           
  6240                           ;RF_Control_B1.c: 224: setControl_Lights_Table(1);
  6241  16F9  3001               	movlw	1
  6242  16FA  318E  26CD         	fcall	_setControl_Lights_Table
  6243                           
  6244                           ;RF_Control_B1.c: 231: {
  6245                           ;RF_Control_B1.c: 232: ;
  6246                           
  6247                           ;RF_Control_B1.c: 228: {
  6248                           ;RF_Control_B1.c: 229: ;
  6249                           ;RF_Control_B1.c: 230: } else if (RF_Data[0] == 0x0 && RF_Data[1] == 0x65)
  6250                           
  6251                           ;RF_Control_B1.c: 225: }
  6252                           ;RF_Control_B1.c: 226: }
  6253                           ;RF_Control_B1.c: 227: } else if (RF_Data[0] == 0xff && RF_Data[1] == 0x02)
  6254  16FC  0008               	return
  6255  16FD                     __end_of_getRxData:	
  6256                           
  6257                           	psect	text21
  6258  1669                     __ptext21:	
  6259 ;; *************** function _setLog_Code *****************
  6260 ;; Defined at:
  6261 ;;		line 242 in file "../src/RF_Control_B1.c"
  6262 ;; Parameters:    Size  Location     Type
  6263 ;;  rf              1    wreg     unsigned char 
  6264 ;; Auto vars:     Size  Location     Type
  6265 ;;  rf              1   14[BANK0 ] unsigned char 
  6266 ;; Return value:  Size  Location     Type
  6267 ;;		None               void
  6268 ;; Registers used:
  6269 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6270 ;; Tracked objects:
  6271 ;;		On entry : 0/0
  6272 ;;		On exit  : 0/0
  6273 ;;		Unchanged: 0/0
  6274 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6275 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6276 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6277 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6278 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6279 ;;Total ram usage:        2 bytes
  6280 ;; Hardware stack levels used:    1
  6281 ;; Hardware stack levels required when called:    7
  6282 ;; This function calls:
  6283 ;;		_RfPointSelect
  6284 ;;		_setBuz
  6285 ;; This function is called by:
  6286 ;;		_getRxData
  6287 ;; This function uses a non-reentrant model
  6288 ;;
  6289                           
  6290                           
  6291                           ;psect for function _setLog_Code
  6292  1669                     _setLog_Code:	
  6293                           
  6294                           ;incstack = 0
  6295                           ; Regs used in _setLog_Code: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6296                           ;setLog_Code@rf stored from wreg
  6297  1669  0020               	movlb	0	; select bank0
  6298  166A  00AE               	movwf	setLog_Code@rf
  6299                           
  6300                           ;RF_Control_B1.c: 243: RfPointSelect(rf);
  6301  166B  082E               	movf	setLog_Code@rf,w
  6302  166C  319E  26DF  3196   	fcall	_RfPointSelect
  6303                           
  6304                           ;RF_Control_B1.c: 244: product->Data[12]=RF_Data[12];
  6305  166F  0021               	movlb	1	; select bank1
  6306  1670  082C               	movf	(_RF_Data^(0+128)+12),w
  6307  1671  0020               	movlb	0	; select bank0
  6308  1672  00AD               	movwf	??_setLog_Code
  6309  1673  087D               	movf	_product,w
  6310  1674  3E0C               	addlw	12
  6311  1675  0086               	movwf	6
  6312  1676  3001               	movlw	1	; select bank2/3
  6313  1677  0087               	movwf	7
  6314  1678  082D               	movf	??_setLog_Code,w
  6315  1679  0081               	movwf	1
  6316                           
  6317                           ;RF_Control_B1.c: 245: product->Data[13]=RF_Data[13];
  6318  167A  0021               	movlb	1	; select bank1
  6319  167B  082D               	movf	(_RF_Data^(0+128)+13),w
  6320  167C  0020               	movlb	0	; select bank0
  6321  167D  00AD               	movwf	??_setLog_Code
  6322  167E  087D               	movf	_product,w
  6323  167F  3E0D               	addlw	13
  6324  1680  0086               	movwf	6
  6325  1681  3001               	movlw	1	; select bank2/3
  6326  1682  0087               	movwf	7
  6327  1683  082D               	movf	??_setLog_Code,w
  6328  1684  0081               	movwf	1
  6329                           
  6330                           ;RF_Control_B1.c: 246: product->Data[14]=RF_Data[14];
  6331  1685  0021               	movlb	1	; select bank1
  6332  1686  082E               	movf	(_RF_Data^(0+128)+14),w
  6333  1687  0020               	movlb	0	; select bank0
  6334  1688  00AD               	movwf	??_setLog_Code
  6335  1689  087D               	movf	_product,w
  6336  168A  3E0E               	addlw	14
  6337  168B  0086               	movwf	6
  6338  168C  3001               	movlw	1	; select bank2/3
  6339  168D  0087               	movwf	7
  6340  168E  082D               	movf	??_setLog_Code,w
  6341  168F  0081               	movwf	1
  6342                           
  6343                           ;RF_Control_B1.c: 247: setBuz(1, 100);
  6344  1690  3064               	movlw	100
  6345  1691  00A9               	movwf	setBuz@time
  6346  1692  3000               	movlw	0
  6347  1693  00AA               	movwf	setBuz@time+1
  6348  1694  3001               	movlw	1
  6349  1695  318B  23C7  3196   	fcall	_setBuz
  6350                           
  6351                           ;RF_Control_B1.c: 248: RF->Learn = 0;
  6352  1698  0021               	movlb	1	; select bank1
  6353  1699  083D               	movf	_RF^(0+128),w
  6354  169A  0086               	movwf	6
  6355  169B  0187               	clrf	7
  6356  169C  1301               	bcf	1,6
  6357                           
  6358                           ;RF_Control_B1.c: 249: if (myMain->First) {
  6359  169D  086A               	movf	_myMain^(0+128),w
  6360  169E  0086               	movwf	6
  6361  169F  3001               	movlw	1	; select bank2/3
  6362  16A0  0087               	movwf	7
  6363  16A1  1F81               	btfss	1,7
  6364  16A2  2EA9               	goto	l2174
  6365                           
  6366                           ;RF_Control_B1.c: 250: Memory->LoopSave=1;
  6367  16A3  086B               	movf	_Memory^(0+128),w
  6368  16A4  3E24               	addlw	36
  6369  16A5  0086               	movwf	6
  6370  16A6  3002               	movlw	2	; select bank4/5
  6371  16A7  0087               	movwf	7
  6372  16A8  1501               	bsf	1,2
  6373  16A9                     l2174:	
  6374                           
  6375                           ;RF_Control_B1.c: 251: }
  6376                           ;RF_Control_B1.c: 252: Memory->Modify=1;
  6377  16A9  086B               	movf	_Memory^(0+128),w
  6378  16AA  3E24               	addlw	36
  6379  16AB  0086               	movwf	6
  6380  16AC  3002               	movlw	2	; select bank4/5
  6381  16AD  0087               	movwf	7
  6382  16AE  1401               	bsf	1,0
  6383  16AF  0008               	return
  6384  16B0                     __end_of_setLog_Code:	
  6385                           
  6386                           	psect	text22
  6387  0ECD                     __ptext22:	
  6388 ;; *************** function _setControl_Lights_Table *****************
  6389 ;; Defined at:
  6390 ;;		line 256 in file "../src/RF_Control_B1.c"
  6391 ;; Parameters:    Size  Location     Type
  6392 ;;  rf              1    wreg     unsigned char 
  6393 ;; Auto vars:     Size  Location     Type
  6394 ;;  rf              1   71[BANK0 ] unsigned char 
  6395 ;; Return value:  Size  Location     Type
  6396 ;;		None               void
  6397 ;; Registers used:
  6398 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6399 ;; Tracked objects:
  6400 ;;		On entry : 0/0
  6401 ;;		On exit  : 0/0
  6402 ;;		Unchanged: 0/0
  6403 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6404 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6405 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6406 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6407 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6408 ;;Total ram usage:        1 bytes
  6409 ;; Hardware stack levels used:    1
  6410 ;; Hardware stack levels required when called:   11
  6411 ;; This function calls:
  6412 ;;		_RfPointSelect
  6413 ;;		_setBuz
  6414 ;;		_setDimmerLights
  6415 ;;		_setRFSW_AdjControl
  6416 ;;		_setRFSW_Control
  6417 ;;		_setRFSW_Status
  6418 ;;		_setSw_Status
  6419 ;;		_setTxData
  6420 ;; This function is called by:
  6421 ;;		_getRxData
  6422 ;; This function uses a non-reentrant model
  6423 ;;
  6424                           
  6425                           
  6426                           ;psect for function _setControl_Lights_Table
  6427  0ECD                     _setControl_Lights_Table:	
  6428                           
  6429                           ;incstack = 0
  6430                           ; Regs used in _setControl_Lights_Table: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6431                           ;setControl_Lights_Table@rf stored from wreg
  6432  0ECD  0020               	movlb	0	; select bank0
  6433  0ECE  00E7               	movwf	setControl_Lights_Table@rf
  6434                           
  6435                           ;RF_Control_B1.c: 257: RfPointSelect(rf);
  6436  0ECF  0867               	movf	setControl_Lights_Table@rf,w
  6437  0ED0  319E  26DF  318E   	fcall	_RfPointSelect
  6438                           
  6439                           ;RF_Control_B1.c: 258: if (RF_Data[15] == 0x00) {
  6440  0ED3  0021               	movlb	1	; select bank1
  6441  0ED4  08AF               	movf	(_RF_Data^(0+128)+15),f
  6442  0ED5  1D03               	skipz
  6443  0ED6  2F20               	goto	l5856
  6444                           
  6445                           ;RF_Control_B1.c: 260: setDimmerLights(1, 0);
  6446  0ED7  0020               	movlb	0	; select bank0
  6447  0ED8  01A4               	clrf	setDimmerLights@status
  6448  0ED9  3001               	movlw	1
  6449  0EDA  318C  24B7  318E   	fcall	_setDimmerLights
  6450                           
  6451                           ;RF_Control_B1.c: 261: setRFSW_Status(1, 0);
  6452  0EDD  0020               	movlb	0	; select bank0
  6453  0EDE  01A2               	clrf	setRFSW_Status@command
  6454  0EDF  3001               	movlw	1
  6455  0EE0  319F  2750  318E   	fcall	_setRFSW_Status
  6456                           
  6457                           ;RF_Control_B1.c: 262: setSw_Status(1, 0);
  6458  0EE3  0020               	movlb	0	; select bank0
  6459  0EE4  01A2               	clrf	setSw_Status@command
  6460  0EE5  3001               	movlw	1
  6461  0EE6  319F  275F  318E   	fcall	_setSw_Status
  6462                           
  6463                           ;RF_Control_B1.c: 265: setDimmerLights(2, 0);
  6464  0EE9  0020               	movlb	0	; select bank0
  6465  0EEA  01A4               	clrf	setDimmerLights@status
  6466  0EEB  3002               	movlw	2
  6467  0EEC  318C  24B7  318E   	fcall	_setDimmerLights
  6468                           
  6469                           ;RF_Control_B1.c: 266: setRFSW_Status(2, 0);
  6470  0EEF  0020               	movlb	0	; select bank0
  6471  0EF0  01A2               	clrf	setRFSW_Status@command
  6472  0EF1  3002               	movlw	2
  6473  0EF2  319F  2750  318E   	fcall	_setRFSW_Status
  6474                           
  6475                           ;RF_Control_B1.c: 267: setSw_Status(2, 0);
  6476  0EF5  0020               	movlb	0	; select bank0
  6477  0EF6  01A2               	clrf	setSw_Status@command
  6478  0EF7  3002               	movlw	2
  6479  0EF8  319F  275F  318E   	fcall	_setSw_Status
  6480                           
  6481                           ;RF_Control_B1.c: 275: product->Data[9]=0;
  6482  0EFB  087D               	movf	_product,w
  6483  0EFC  3E09               	addlw	9
  6484  0EFD  0086               	movwf	6
  6485  0EFE  3001               	movlw	1	; select bank2/3
  6486  0EFF  0087               	movwf	7
  6487  0F00  0181               	clrf	1
  6488                           
  6489                           ;RF_Control_B1.c: 276: product->Data[11]=0;
  6490  0F01  087D               	movf	_product,w
  6491  0F02  3E0B               	addlw	11
  6492  0F03  0086               	movwf	6
  6493  0F04  3001               	movlw	1	; select bank2/3
  6494  0F05  0087               	movwf	7
  6495  0F06  0181               	clrf	1
  6496                           
  6497                           ;RF_Control_B1.c: 277: product->Data[15]=0;
  6498  0F07  087D               	movf	_product,w
  6499  0F08  3E0F               	addlw	15
  6500  0F09  0086               	movwf	6
  6501  0F0A  3001               	movlw	1	; select bank2/3
  6502  0F0B  0087               	movwf	7
  6503  0F0C  0181               	clrf	1
  6504                           
  6505                           ;RF_Control_B1.c: 278: product->Data[17]=0;
  6506  0F0D  087D               	movf	_product,w
  6507  0F0E  3E11               	addlw	17
  6508  0F0F  0086               	movwf	6
  6509  0F10  3001               	movlw	1	; select bank2/3
  6510  0F11  0087               	movwf	7
  6511  0F12  0181               	clrf	1
  6512                           
  6513                           ;RF_Control_B1.c: 279: setBuz(1, 100);
  6514  0F13  3064               	movlw	100
  6515  0F14  0020               	movlb	0	; select bank0
  6516  0F15  00A9               	movwf	setBuz@time
  6517  0F16  3000               	movlw	0
  6518  0F17  00AA               	movwf	setBuz@time+1
  6519  0F18  3001               	movlw	1
  6520  0F19  318B  23C7  318E   	fcall	_setBuz
  6521                           
  6522                           ;RF_Control_B1.c: 280: setTxData(1);
  6523  0F1C  3001               	movlw	1
  6524  0F1D  318F  275F         	fcall	_setTxData
  6525                           
  6526                           ;RF_Control_B1.c: 281: } else if (RF_Data[15] == 0x20) {
  6527  0F1F  0008               	return
  6528  0F20                     l5856:	
  6529  0F20  0021               	movlb	1	; select bank1
  6530  0F21  082F               	movf	(_RF_Data^(0+128)+15),w
  6531  0F22  3A20               	xorlw	32
  6532  0F23  1D03               	skipz
  6533  0F24  2F3B               	goto	l5862
  6534                           
  6535                           ;RF_Control_B1.c: 282: product->Data[9]=0;
  6536  0F25  087D               	movf	_product,w
  6537  0F26  3E09               	addlw	9
  6538  0F27  0086               	movwf	6
  6539  0F28  3001               	movlw	1	; select bank2/3
  6540  0F29  0087               	movwf	7
  6541  0F2A  0181               	clrf	1
  6542                           
  6543                           ;RF_Control_B1.c: 283: product->Data[11]=0;
  6544  0F2B  087D               	movf	_product,w
  6545  0F2C  3E0B               	addlw	11
  6546  0F2D  0086               	movwf	6
  6547  0F2E  3001               	movlw	1	; select bank2/3
  6548  0F2F  0087               	movwf	7
  6549  0F30  0181               	clrf	1
  6550                           
  6551                           ;RF_Control_B1.c: 284: product->Data[17]=0;
  6552  0F31  087D               	movf	_product,w
  6553  0F32  3E11               	addlw	17
  6554  0F33  0086               	movwf	6
  6555  0F34  3001               	movlw	1	; select bank2/3
  6556  0F35  0087               	movwf	7
  6557  0F36  0181               	clrf	1
  6558                           
  6559                           ;RF_Control_B1.c: 285: setTxData(1);
  6560  0F37  3001               	movlw	1
  6561  0F38  318F  275F         	fcall	_setTxData
  6562                           
  6563                           ;RF_Control_B1.c: 286: }
  6564  0F3A  0008               	return
  6565  0F3B                     l5862:	
  6566                           
  6567                           ;RF_Control_B1.c: 288: else if (RF_Data[15] == 0x01) {
  6568  0F3B  0021               	movlb	1	; select bank1
  6569  0F3C  082F               	movf	(_RF_Data^(0+128)+15),w
  6570  0F3D  3A01               	xorlw	1
  6571  0F3E  1D03               	skipz
  6572  0F3F  2F44               	goto	l5866
  6573                           
  6574                           ;RF_Control_B1.c: 289: setRFSW_Control(1);
  6575  0F40  3001               	movlw	1
  6576  0F41  318E  263D         	fcall	_setRFSW_Control
  6577                           
  6578                           ;RF_Control_B1.c: 290: }
  6579  0F43  0008               	return
  6580  0F44                     l5866:	
  6581                           
  6582                           ;RF_Control_B1.c: 292: else if (RF_Data[15] == 0x11) {
  6583  0F44  0021               	movlb	1	; select bank1
  6584  0F45  082F               	movf	(_RF_Data^(0+128)+15),w
  6585  0F46  3A11               	xorlw	17
  6586  0F47  1D03               	skipz
  6587  0F48  2F4D               	goto	l5870
  6588                           
  6589                           ;RF_Control_B1.c: 293: setRFSW_AdjControl(1);
  6590  0F49  3001               	movlw	1
  6591  0F4A  3195  2515         	fcall	_setRFSW_AdjControl
  6592                           
  6593                           ;RF_Control_B1.c: 294: }
  6594  0F4C  0008               	return
  6595  0F4D                     l5870:	
  6596                           
  6597                           ;RF_Control_B1.c: 299: else if (RF_Data[15] == 0x02) {
  6598  0F4D  0021               	movlb	1	; select bank1
  6599  0F4E  082F               	movf	(_RF_Data^(0+128)+15),w
  6600  0F4F  3A02               	xorlw	2
  6601  0F50  1D03               	skipz
  6602  0F51  2F56               	goto	l5874
  6603                           
  6604                           ;RF_Control_B1.c: 300: setRFSW_Control(2);
  6605  0F52  3002               	movlw	2
  6606  0F53  318E  263D         	fcall	_setRFSW_Control
  6607                           
  6608                           ;RF_Control_B1.c: 301: }
  6609  0F55  0008               	return
  6610  0F56                     l5874:	
  6611                           
  6612                           ;RF_Control_B1.c: 303: else if (RF_Data[15] == 0x21) {
  6613  0F56  0021               	movlb	1	; select bank1
  6614  0F57  082F               	movf	(_RF_Data^(0+128)+15),w
  6615  0F58  3A21               	xorlw	33
  6616  0F59  1D03               	skipz
  6617  0F5A  0008               	return
  6618                           
  6619                           ;RF_Control_B1.c: 304: setRFSW_AdjControl(2);
  6620  0F5B  3002               	movlw	2
  6621  0F5C  3195  2515         	fcall	_setRFSW_AdjControl
  6622  0F5E  0008               	return
  6623  0F5F                     __end_of_setControl_Lights_Table:	
  6624                           
  6625                           	psect	text23
  6626  0E3D                     __ptext23:	
  6627 ;; *************** function _setRFSW_Control *****************
  6628 ;; Defined at:
  6629 ;;		line 341 in file "../src/RF_Control_B1.c"
  6630 ;; Parameters:    Size  Location     Type
  6631 ;;  sw              1    wreg     unsigned char 
  6632 ;; Auto vars:     Size  Location     Type
  6633 ;;  sw              1   67[BANK0 ] unsigned char 
  6634 ;; Return value:  Size  Location     Type
  6635 ;;		None               void
  6636 ;; Registers used:
  6637 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6638 ;; Tracked objects:
  6639 ;;		On entry : 0/0
  6640 ;;		On exit  : 0/0
  6641 ;;		Unchanged: 0/0
  6642 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6643 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6644 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6645 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6646 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6647 ;;Total ram usage:        2 bytes
  6648 ;; Hardware stack levels used:    1
  6649 ;; Hardware stack levels required when called:    9
  6650 ;; This function calls:
  6651 ;;		_RfSWPointSelect
  6652 ;;		_setBuz
  6653 ;;		_setDelayOff_GO
  6654 ;;		_setDimmerLights_Switch
  6655 ;;		_setDimmerLights_Trigger
  6656 ;;		_setRF_DimmerLights
  6657 ;;		_setSw_Status
  6658 ;;		_setTxData
  6659 ;; This function is called by:
  6660 ;;		_setControl_Lights_Table
  6661 ;; This function uses a non-reentrant model
  6662 ;;
  6663                           
  6664                           
  6665                           ;psect for function _setRFSW_Control
  6666  0E3D                     _setRFSW_Control:	
  6667                           
  6668                           ;incstack = 0
  6669                           ; Regs used in _setRFSW_Control: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6670                           ;setRFSW_Control@sw stored from wreg
  6671  0E3D  0020               	movlb	0	; select bank0
  6672  0E3E  00E3               	movwf	setRFSW_Control@sw
  6673                           
  6674                           ;RF_Control_B1.c: 342: RfSWPointSelect(sw);
  6675  0E3F  0863               	movf	setRFSW_Control@sw,w
  6676  0E40  3190  20FD  318E   	fcall	_RfSWPointSelect
  6677                           
  6678                           ;RF_Control_B1.c: 343: if (!RFSW->Status) {
  6679  0E43  0021               	movlb	1	; select bank1
  6680  0E44  083E               	movf	_RFSW^(0+128),w
  6681  0E45  0086               	movwf	6
  6682  0E46  0187               	clrf	7
  6683  0E47  1801               	btfsc	1,0
  6684  0E48  2E7E               	goto	l5748
  6685                           
  6686                           ;RF_Control_B1.c: 344: if (RF_Data[16] == 0x80) {
  6687  0E49  0830               	movf	(_RF_Data^(0+128)+16),w
  6688  0E4A  3A80               	xorlw	128
  6689  0E4B  1D03               	skipz
  6690  0E4C  2E5A               	goto	l5738
  6691                           
  6692                           ;RF_Control_B1.c: 345: setDelayOff_GO(sw, 1, RF_Data[17]);
  6693  0E4D  0020               	movlb	0	; select bank0
  6694  0E4E  01A3               	clrf	setDelayOff_GO@command
  6695  0E4F  0AA3               	incf	setDelayOff_GO@command,f
  6696  0E50  0021               	movlb	1	; select bank1
  6697  0E51  0831               	movf	(_RF_Data^(0+128)+17),w
  6698  0E52  0020               	movlb	0	; select bank0
  6699  0E53  00E2               	movwf	??_setRFSW_Control
  6700  0E54  0862               	movf	??_setRFSW_Control,w
  6701  0E55  00A4               	movwf	setDelayOff_GO@value
  6702  0E56  0863               	movf	setRFSW_Control@sw,w
  6703  0E57  3188  201D  318E   	fcall	_setDelayOff_GO
  6704  0E5A                     l5738:	
  6705                           
  6706                           ;RF_Control_B1.c: 346: }
  6707                           ;RF_Control_B1.c: 347: RFSW->Status = 1;
  6708  0E5A  0021               	movlb	1	; select bank1
  6709  0E5B  083E               	movf	_RFSW^(0+128),w
  6710  0E5C  0086               	movwf	6
  6711  0E5D  0187               	clrf	7
  6712  0E5E  1401               	bsf	1,0
  6713                           
  6714                           ;RF_Control_B1.c: 348: setSw_Status(sw, 1);
  6715  0E5F  0020               	movlb	0	; select bank0
  6716  0E60  01A2               	clrf	setSw_Status@command
  6717  0E61  0AA2               	incf	setSw_Status@command,f
  6718  0E62  0863               	movf	setRFSW_Control@sw,w
  6719  0E63  319F  275F  318E   	fcall	_setSw_Status
  6720                           
  6721                           ;RF_Control_B1.c: 350: setDimmerLights_Trigger(sw, 1);
  6722  0E66  0020               	movlb	0	; select bank0
  6723  0E67  01A2               	clrf	setDimmerLights_Trigger@command
  6724  0E68  0AA2               	incf	setDimmerLights_Trigger@command,f
  6725  0E69  0863               	movf	setRFSW_Control@sw,w
  6726  0E6A  319F  27AD  318E   	fcall	_setDimmerLights_Trigger
  6727                           
  6728                           ;RF_Control_B1.c: 351: setDimmerLights_Switch(sw, 1);
  6729  0E6D  0020               	movlb	0	; select bank0
  6730  0E6E  01A2               	clrf	setDimmerLights_Switch@command
  6731  0E6F  0AA2               	incf	setDimmerLights_Switch@command,f
  6732  0E70  0863               	movf	setRFSW_Control@sw,w
  6733  0E71  319F  279D  318E   	fcall	_setDimmerLights_Switch
  6734                           
  6735                           ;RF_Control_B1.c: 353: setRF_DimmerLights(sw, RFSW->Status);
  6736  0E74  0021               	movlb	1	; select bank1
  6737  0E75  083E               	movf	_RFSW^(0+128),w
  6738  0E76  0086               	movwf	6
  6739  0E77  0187               	clrf	7
  6740  0E78  3000               	movlw	0
  6741  0E79  1801               	btfsc	1,0
  6742  0E7A  3001               	movlw	1
  6743  0E7B  0020               	movlb	0	; select bank0
  6744  0E7C  00DD               	movwf	setRF_DimmerLights@on
  6745  0E7D  2EBC               	goto	L4
  6746  0E7E                     l5748:	
  6747                           ;RF_Control_B1.c: 354: } else {
  6748                           
  6749                           
  6750                           ;RF_Control_B1.c: 355: if (RF_Data[16] == 0x80) {
  6751  0E7E  0021               	movlb	1	; select bank1
  6752  0E7F  0830               	movf	(_RF_Data^(0+128)+16),w
  6753  0E80  3A80               	xorlw	128
  6754  0E81  1D03               	skipz
  6755  0E82  2E94               	goto	l5754
  6756                           
  6757                           ;RF_Control_B1.c: 356: setDelayOff_GO(sw, 1, RF_Data[17]);
  6758  0E83  0020               	movlb	0	; select bank0
  6759  0E84  01A3               	clrf	setDelayOff_GO@command
  6760  0E85  0AA3               	incf	setDelayOff_GO@command,f
  6761  0E86  0021               	movlb	1	; select bank1
  6762  0E87  0831               	movf	(_RF_Data^(0+128)+17),w
  6763  0E88  0020               	movlb	0	; select bank0
  6764  0E89  00E2               	movwf	??_setRFSW_Control
  6765  0E8A  0862               	movf	??_setRFSW_Control,w
  6766  0E8B  00A4               	movwf	setDelayOff_GO@value
  6767  0E8C  0863               	movf	setRFSW_Control@sw,w
  6768  0E8D  3188  201D  318E   	fcall	_setDelayOff_GO
  6769                           
  6770                           ;RF_Control_B1.c: 357: setRF_DimmerLights(sw, 1);
  6771  0E90  0020               	movlb	0	; select bank0
  6772  0E91  01DD               	clrf	setRF_DimmerLights@on
  6773  0E92  0ADD               	incf	setRF_DimmerLights@on,f
  6774  0E93  2EBC               	goto	L4
  6775  0E94                     l5754:	
  6776                           ;RF_Control_B1.c: 358: } else {
  6777                           
  6778                           
  6779                           ;RF_Control_B1.c: 359: RFSW->Status = 0;
  6780  0E94  0021               	movlb	1	; select bank1
  6781  0E95  083E               	movf	_RFSW^(0+128),w
  6782  0E96  0086               	movwf	6
  6783  0E97  0187               	clrf	7
  6784  0E98  1001               	bcf	1,0
  6785                           
  6786                           ;RF_Control_B1.c: 360: setSw_Status(sw, 0);
  6787  0E99  0020               	movlb	0	; select bank0
  6788  0E9A  01A2               	clrf	setSw_Status@command
  6789  0E9B  0863               	movf	setRFSW_Control@sw,w
  6790  0E9C  319F  275F  318E   	fcall	_setSw_Status
  6791                           
  6792                           ;RF_Control_B1.c: 362: setDimmerLights_Trigger(sw, 1);
  6793  0E9F  0020               	movlb	0	; select bank0
  6794  0EA0  01A2               	clrf	setDimmerLights_Trigger@command
  6795  0EA1  0AA2               	incf	setDimmerLights_Trigger@command,f
  6796  0EA2  0863               	movf	setRFSW_Control@sw,w
  6797  0EA3  319F  27AD  318E   	fcall	_setDimmerLights_Trigger
  6798                           
  6799                           ;RF_Control_B1.c: 363: setDimmerLights_Switch(sw, RFSW->Status);
  6800  0EA6  0021               	movlb	1	; select bank1
  6801  0EA7  083E               	movf	_RFSW^(0+128),w
  6802  0EA8  0086               	movwf	6
  6803  0EA9  0187               	clrf	7
  6804  0EAA  3000               	movlw	0
  6805  0EAB  1801               	btfsc	1,0
  6806  0EAC  3001               	movlw	1
  6807  0EAD  0020               	movlb	0	; select bank0
  6808  0EAE  00A2               	movwf	setDimmerLights_Switch@command
  6809  0EAF  0863               	movf	setRFSW_Control@sw,w
  6810  0EB0  319F  279D  318E   	fcall	_setDimmerLights_Switch
  6811                           
  6812                           ;RF_Control_B1.c: 365: setDelayOff_GO(sw, 0, 0);
  6813  0EB3  0020               	movlb	0	; select bank0
  6814  0EB4  01A3               	clrf	setDelayOff_GO@command
  6815  0EB5  01A4               	clrf	setDelayOff_GO@value
  6816  0EB6  0863               	movf	setRFSW_Control@sw,w
  6817  0EB7  3188  201D  318E   	fcall	_setDelayOff_GO
  6818                           
  6819                           ;RF_Control_B1.c: 366: setRF_DimmerLights(sw, 0);
  6820  0EBA  0020               	movlb	0	; select bank0
  6821  0EBB  01DD               	clrf	setRF_DimmerLights@on
  6822  0EBC                     L4:	
  6823  0EBC  0863               	movf	setRFSW_Control@sw,w
  6824  0EBD  3189  2197  318E   	fcall	_setRF_DimmerLights
  6825                           
  6826                           ;RF_Control_B1.c: 367: }
  6827                           ;RF_Control_B1.c: 368: }
  6828                           ;RF_Control_B1.c: 369: setBuz(1, 100);
  6829  0EC0  3064               	movlw	100
  6830  0EC1  0020               	movlb	0	; select bank0
  6831  0EC2  00A9               	movwf	setBuz@time
  6832  0EC3  3000               	movlw	0
  6833  0EC4  00AA               	movwf	setBuz@time+1
  6834  0EC5  3001               	movlw	1
  6835  0EC6  318B  23C7  318E   	fcall	_setBuz
  6836                           
  6837                           ;RF_Control_B1.c: 370: setTxData(1);
  6838  0EC9  3001               	movlw	1
  6839  0ECA  318F  275F         	fcall	_setTxData
  6840  0ECC  0008               	return
  6841  0ECD                     __end_of_setRFSW_Control:	
  6842                           
  6843                           	psect	text24
  6844  081D                     __ptext24:	
  6845 ;; *************** function _setDelayOff_GO *****************
  6846 ;; Defined at:
  6847 ;;		line 85 in file "../src/DelayOff_B1.c"
  6848 ;; Parameters:    Size  Location     Type
  6849 ;;  sw              1    wreg     unsigned char 
  6850 ;;  command         1    3[BANK0 ] unsigned char 
  6851 ;;  value           1    4[BANK0 ] unsigned char 
  6852 ;; Auto vars:     Size  Location     Type
  6853 ;;  sw              1    7[BANK0 ] unsigned char 
  6854 ;; Return value:  Size  Location     Type
  6855 ;;		None               void
  6856 ;; Registers used:
  6857 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6858 ;; Tracked objects:
  6859 ;;		On entry : 0/0
  6860 ;;		On exit  : 0/0
  6861 ;;		Unchanged: 0/0
  6862 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6863 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6864 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6865 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6866 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6867 ;;Total ram usage:        5 bytes
  6868 ;; Hardware stack levels used:    1
  6869 ;; Hardware stack levels required when called:    6
  6870 ;; This function calls:
  6871 ;;		_DelayOffPointSelect
  6872 ;;		_DelayTimejudge
  6873 ;; This function is called by:
  6874 ;;		_setRFSW_Control
  6875 ;;		_Sw_DimmerOffFunc
  6876 ;; This function uses a non-reentrant model
  6877 ;;
  6878                           
  6879                           
  6880                           ;psect for function _setDelayOff_GO
  6881  081D                     _setDelayOff_GO:	
  6882                           
  6883                           ;incstack = 0
  6884                           ; Regs used in _setDelayOff_GO: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6885                           ;setDelayOff_GO@sw stored from wreg
  6886  081D  0020               	movlb	0	; select bank0
  6887  081E  00A7               	movwf	setDelayOff_GO@sw
  6888                           
  6889                           ;DelayOff_B1.c: 86: DelayOffPointSelect(sw);
  6890  081F  0827               	movf	setDelayOff_GO@sw,w
  6891  0820  3191  2113  3188   	fcall	_DelayOffPointSelect
  6892                           
  6893                           ;DelayOff_B1.c: 87: if (DelayOff->Enable) {
  6894  0823  0021               	movlb	1	; select bank1
  6895  0824  0838               	movf	_DelayOff^(0+128),w
  6896  0825  0086               	movwf	6
  6897  0826  0187               	clrf	7
  6898  0827  1C01               	btfss	1,0
  6899  0828  0008               	return
  6900                           
  6901                           ;DelayOff_B1.c: 88: DelayOff->GO = command;
  6902  0829  0838               	movf	_DelayOff^(0+128),w
  6903  082A  0086               	movwf	6
  6904  082B  0187               	clrf	7
  6905  082C  0020               	movlb	0	; select bank0
  6906  082D  0823               	movf	setDelayOff_GO@command,w
  6907  082E  1081               	bcf	1,1
  6908  082F  1D03               	skipz
  6909  0830  1481               	bsf	1,1
  6910                           
  6911                           ;DelayOff_B1.c: 89: if (command == 1) {
  6912  0831  0823               	movf	setDelayOff_GO@command,w
  6913  0832  3A01               	xorlw	1
  6914  0833  1D03               	skipz
  6915  0834  2860               	goto	l5584
  6916                           
  6917                           ;DelayOff_B1.c: 90: DelayOff->Value = DelayTimejudge(value);
  6918  0835  0824               	movf	setDelayOff_GO@value,w
  6919  0836  3193  2384  3188   	fcall	_DelayTimejudge
  6920  0839  0020               	movlb	0	; select bank0
  6921  083A  00A5               	movwf	??_setDelayOff_GO
  6922  083B  0021               	movlb	1	; select bank1
  6923  083C  0A38               	incf	_DelayOff^(0+128),w
  6924  083D  0086               	movwf	6
  6925  083E  0187               	clrf	7
  6926  083F  0020               	movlb	0	; select bank0
  6927  0840  0825               	movf	??_setDelayOff_GO,w
  6928  0841  0081               	movwf	1
  6929                           
  6930                           ;DelayOff_B1.c: 91: if (((value % 16) == 5 || !(value % 16)) && value <= 0x25) {
  6931  0842  300F               	movlw	15
  6932  0843  0524               	andwf	setDelayOff_GO@value,w
  6933  0844  00A5               	movwf	??_setDelayOff_GO
  6934  0845  0825               	movf	??_setDelayOff_GO,w
  6935  0846  3A05               	xorlw	5
  6936  0847  1903               	skipnz
  6937  0848  284D               	goto	l5578
  6938  0849  0824               	movf	setDelayOff_GO@value,w
  6939  084A  390F               	andlw	15
  6940  084B  1D03               	btfss	3,2
  6941  084C  2853               	goto	l5582
  6942  084D                     l5578:	
  6943  084D  3026               	movlw	38
  6944  084E  0224               	subwf	setDelayOff_GO@value,w
  6945  084F  1803               	skipnc
  6946  0850  2853               	goto	l5582
  6947                           
  6948                           ;DelayOff_B1.c: 92: product->Data[26 + sw]=value;
  6949  0851  0824               	movf	setDelayOff_GO@value,w
  6950  0852  2854               	goto	L5
  6951  0853                     l5582:	
  6952                           ;DelayOff_B1.c: 93: } else {
  6953                           
  6954                           
  6955                           ;DelayOff_B1.c: 94: product->Data[26 + sw]=0x05;
  6956  0853  3005               	movlw	5
  6957  0854                     L5:	
  6958  0854  00A5               	movwf	??_setDelayOff_GO
  6959  0855  0827               	movf	setDelayOff_GO@sw,w
  6960  0856  3E1A               	addlw	26
  6961  0857  077D               	addwf	_product,w
  6962  0858  00A6               	movwf	??_setDelayOff_GO+1
  6963  0859  0826               	movf	??_setDelayOff_GO+1,w
  6964  085A  0086               	movwf	6
  6965  085B  3001               	movlw	1	; select bank2/3
  6966  085C  0087               	movwf	7
  6967  085D  0825               	movf	??_setDelayOff_GO,w
  6968  085E  0081               	movwf	1
  6969                           
  6970                           ;DelayOff_B1.c: 95: }
  6971                           ;DelayOff_B1.c: 96: } else if (command == 0) {
  6972  085F  286C               	goto	l5588
  6973  0860                     l5584:	
  6974  0860  08A3               	movf	setDelayOff_GO@command,f
  6975  0861  1D03               	skipz
  6976  0862  286C               	goto	l5588
  6977                           
  6978                           ;DelayOff_B1.c: 97: product->Data[sw + 26]=0;
  6979  0863  0827               	movf	setDelayOff_GO@sw,w
  6980  0864  3E1A               	addlw	26
  6981  0865  077D               	addwf	_product,w
  6982  0866  00A5               	movwf	??_setDelayOff_GO
  6983  0867  0825               	movf	??_setDelayOff_GO,w
  6984  0868  0086               	movwf	6
  6985  0869  3001               	movlw	1	; select bank2/3
  6986  086A  0087               	movwf	7
  6987  086B  0181               	clrf	1
  6988  086C                     l5588:	
  6989                           
  6990                           ;DelayOff_B1.c: 98: }
  6991                           ;DelayOff_B1.c: 99: DelayOff->SecondTime = 0;
  6992  086C  0021               	movlb	1	; select bank1
  6993  086D  0838               	movf	_DelayOff^(0+128),w
  6994  086E  3E02               	addlw	2
  6995  086F  0086               	movwf	6
  6996  0870  0187               	clrf	7
  6997  0871  3000               	movlw	0
  6998  0872  3FC0               	movwi [0]fsr1
  6999  0873  3FC1               	movwi [1]fsr1
  7000                           
  7001                           ;DelayOff_B1.c: 100: DelayOff->MinuteTime = 0;
  7002  0874  0838               	movf	_DelayOff^(0+128),w
  7003  0875  3E04               	addlw	4
  7004  0876  0086               	movwf	6
  7005  0877  0187               	clrf	7
  7006  0878  0181               	clrf	1
  7007  0879  0008               	return
  7008  087A                     __end_of_setDelayOff_GO:	
  7009                           
  7010                           	psect	text25
  7011  1384                     __ptext25:	
  7012 ;; *************** function _DelayTimejudge *****************
  7013 ;; Defined at:
  7014 ;;		line 105 in file "../src/DelayOff_B1.c"
  7015 ;; Parameters:    Size  Location     Type
  7016 ;;  value           1    wreg     unsigned char 
  7017 ;; Auto vars:     Size  Location     Type
  7018 ;;  value           1    1[BANK0 ] unsigned char 
  7019 ;;  i               1    2[BANK0 ] unsigned char 
  7020 ;; Return value:  Size  Location     Type
  7021 ;;                  1    wreg      unsigned char 
  7022 ;; Registers used:
  7023 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  7024 ;; Tracked objects:
  7025 ;;		On entry : 0/0
  7026 ;;		On exit  : 0/0
  7027 ;;		Unchanged: 0/0
  7028 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7029 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7030 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7031 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7032 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7033 ;;Total ram usage:        3 bytes
  7034 ;; Hardware stack levels used:    1
  7035 ;; Hardware stack levels required when called:    5
  7036 ;; This function calls:
  7037 ;;		Nothing
  7038 ;; This function is called by:
  7039 ;;		_setDelayOff_GO
  7040 ;; This function uses a non-reentrant model
  7041 ;;
  7042                           
  7043                           
  7044                           ;psect for function _DelayTimejudge
  7045  1384                     _DelayTimejudge:	
  7046                           
  7047                           ;incstack = 0
  7048                           ; Regs used in _DelayTimejudge: [wreg-fsr0h+status,2+status,0]
  7049                           ;DelayTimejudge@value stored from wreg
  7050  1384  0020               	movlb	0	; select bank0
  7051  1385  00A1               	movwf	DelayTimejudge@value
  7052                           
  7053                           ;DelayOff_B1.c: 106: char i = 5;
  7054  1386  3005               	movlw	5
  7055  1387  00A0               	movwf	??_DelayTimejudge
  7056  1388  0820               	movf	??_DelayTimejudge,w
  7057  1389  00A2               	movwf	DelayTimejudge@i
  7058                           
  7059                           ;DelayOff_B1.c: 107: switch (value) {
  7060  138A  2B9A               	goto	l5414
  7061  138B                     l5400:	
  7062                           ;DelayOff_B1.c: 108: case 0x05:
  7063                           
  7064                           
  7065                           ;DelayOff_B1.c: 109: i = 5;
  7066  138B  3005               	movlw	5
  7067  138C  2B96               	goto	L10
  7068  138D                     l5402:	
  7069                           ;DelayOff_B1.c: 111: case 0x10:
  7070                           
  7071                           ;DelayOff_B1.c: 110: break;
  7072                           
  7073                           
  7074                           ;DelayOff_B1.c: 112: i = 10;
  7075  138D  300A               	movlw	10
  7076  138E  2B96               	goto	L10
  7077  138F                     l5404:	
  7078                           ;DelayOff_B1.c: 114: case 0x15:
  7079                           
  7080                           ;DelayOff_B1.c: 113: break;
  7081                           
  7082                           
  7083                           ;DelayOff_B1.c: 115: i = 15;
  7084  138F  300F               	movlw	15
  7085  1390  2B96               	goto	L10
  7086  1391                     l5406:	
  7087                           ;DelayOff_B1.c: 117: case 0x20:
  7088                           
  7089                           ;DelayOff_B1.c: 116: break;
  7090                           
  7091                           
  7092                           ;DelayOff_B1.c: 118: i = 20;
  7093  1391  3014               	movlw	20
  7094  1392  2B96               	goto	L10
  7095  1393                     l5408:	
  7096                           ;DelayOff_B1.c: 120: case 0x25:
  7097                           
  7098                           ;DelayOff_B1.c: 119: break;
  7099                           
  7100                           
  7101                           ;DelayOff_B1.c: 121: i = 25;
  7102  1393  3019               	movlw	25
  7103  1394  2B96               	goto	L10
  7104  1395                     l5410:	
  7105                           ;DelayOff_B1.c: 123: case 0x30:
  7106                           
  7107                           ;DelayOff_B1.c: 122: break;
  7108                           
  7109                           
  7110                           ;DelayOff_B1.c: 124: i = 30;
  7111  1395  301E               	movlw	30
  7112  1396                     L10:	
  7113  1396  00A0               	movwf	??_DelayTimejudge
  7114  1397  0820               	movf	??_DelayTimejudge,w
  7115  1398  00A2               	movwf	DelayTimejudge@i
  7116                           
  7117                           ;DelayOff_B1.c: 126: }
  7118                           
  7119                           ;DelayOff_B1.c: 125: break;
  7120  1399  2BAE               	goto	l5416
  7121  139A                     l5414:	
  7122  139A  0821               	movf	DelayTimejudge@value,w
  7123                           
  7124                           ; Switch size 1, requested type "space"
  7125                           ; Number of cases is 6, Range of values is 5 to 48
  7126                           ; switch strategies available:
  7127                           ; Name         Instructions Cycles
  7128                           ; simple_byte           19    10 (average)
  7129                           ; direct_byte           97     9 (fixed)
  7130                           ; jumptable            263     9 (fixed)
  7131                           ;	Chosen strategy is simple_byte
  7132  139B  3A05               	xorlw	5	; case 5
  7133  139C  1903               	skipnz
  7134  139D  2B8B               	goto	l5400
  7135  139E  3A15               	xorlw	21	; case 16
  7136  139F  1903               	skipnz
  7137  13A0  2B8D               	goto	l5402
  7138  13A1  3A05               	xorlw	5	; case 21
  7139  13A2  1903               	skipnz
  7140  13A3  2B8F               	goto	l5404
  7141  13A4  3A35               	xorlw	53	; case 32
  7142  13A5  1903               	skipnz
  7143  13A6  2B91               	goto	l5406
  7144  13A7  3A05               	xorlw	5	; case 37
  7145  13A8  1903               	skipnz
  7146  13A9  2B93               	goto	l5408
  7147  13AA  3A15               	xorlw	21	; case 48
  7148  13AB  1903               	skipnz
  7149  13AC  2B95               	goto	l5410
  7150  13AD  2BAE               	goto	l5416
  7151  13AE                     l5416:	
  7152                           
  7153                           ;DelayOff_B1.c: 127: return i;
  7154  13AE  0822               	movf	DelayTimejudge@i,w
  7155  13AF  0008               	return
  7156  13B0                     __end_of_DelayTimejudge:	
  7157                           
  7158                           	psect	text26
  7159  1515                     __ptext26:	
  7160 ;; *************** function _setRFSW_AdjControl *****************
  7161 ;; Defined at:
  7162 ;;		line 374 in file "../src/RF_Control_B1.c"
  7163 ;; Parameters:    Size  Location     Type
  7164 ;;  sw              1    wreg     unsigned char 
  7165 ;; Auto vars:     Size  Location     Type
  7166 ;;  sw              1   70[BANK0 ] unsigned char 
  7167 ;; Return value:  Size  Location     Type
  7168 ;;		None               void
  7169 ;; Registers used:
  7170 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7171 ;; Tracked objects:
  7172 ;;		On entry : 0/0
  7173 ;;		On exit  : 0/0
  7174 ;;		Unchanged: 0/0
  7175 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7176 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7177 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7178 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7179 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7180 ;;Total ram usage:        3 bytes
  7181 ;; Hardware stack levels used:    1
  7182 ;; Hardware stack levels required when called:   10
  7183 ;; This function calls:
  7184 ;;		_RfSWPointSelect
  7185 ;;		_setRF_DimmerValue
  7186 ;;		_setTxData
  7187 ;; This function is called by:
  7188 ;;		_setControl_Lights_Table
  7189 ;; This function uses a non-reentrant model
  7190 ;;
  7191                           
  7192                           
  7193                           ;psect for function _setRFSW_AdjControl
  7194  1515                     _setRFSW_AdjControl:	
  7195                           
  7196                           ;incstack = 0
  7197                           ; Regs used in _setRFSW_AdjControl: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7198                           ;setRFSW_AdjControl@sw stored from wreg
  7199  1515  0020               	movlb	0	; select bank0
  7200  1516  00E6               	movwf	setRFSW_AdjControl@sw
  7201                           
  7202                           ;RF_Control_B1.c: 375: RfSWPointSelect(sw);
  7203  1517  0866               	movf	setRFSW_AdjControl@sw,w
  7204  1518  3190  20FD  3195   	fcall	_RfSWPointSelect
  7205                           
  7206                           ;RF_Control_B1.c: 376: if (RFSW->Status == 1) {
  7207  151B  0021               	movlb	1	; select bank1
  7208  151C  083E               	movf	_RFSW^(0+128),w
  7209  151D  0086               	movwf	6
  7210  151E  0187               	clrf	7
  7211  151F  1C01               	btfss	1,0
  7212  1520  2D2D               	goto	l5778
  7213                           
  7214                           ;RF_Control_B1.c: 377: Memory->Modify=1;
  7215  1521  086B               	movf	_Memory^(0+128),w
  7216  1522  3E24               	addlw	36
  7217  1523  0086               	movwf	6
  7218  1524  3002               	movlw	2	; select bank4/5
  7219  1525  0087               	movwf	7
  7220  1526  1401               	bsf	1,0
  7221                           
  7222                           ;RF_Control_B1.c: 378: setRF_DimmerValue(sw);
  7223  1527  0020               	movlb	0	; select bank0
  7224  1528  0866               	movf	setRFSW_AdjControl@sw,w
  7225  1529  3194  24A0  3195   	fcall	_setRF_DimmerValue
  7226                           
  7227                           ;RF_Control_B1.c: 379: } else {
  7228  152C  2D3F               	goto	l2206
  7229  152D                     l5778:	
  7230                           
  7231                           ;RF_Control_B1.c: 380: product->Data[9]=product->Data[20 + sw];
  7232  152D  0020               	movlb	0	; select bank0
  7233  152E  0866               	movf	setRFSW_AdjControl@sw,w
  7234  152F  3E14               	addlw	20
  7235  1530  077D               	addwf	_product,w
  7236  1531  00E4               	movwf	??_setRFSW_AdjControl
  7237  1532  0864               	movf	??_setRFSW_AdjControl,w
  7238  1533  0086               	movwf	6
  7239  1534  3001               	movlw	1	; select bank2/3
  7240  1535  0087               	movwf	7
  7241  1536  0801               	movf	1,w
  7242  1537  00E5               	movwf	??_setRFSW_AdjControl+1
  7243  1538  087D               	movf	_product,w
  7244  1539  3E09               	addlw	9
  7245  153A  0086               	movwf	6
  7246  153B  3001               	movlw	1	; select bank2/3
  7247  153C  0087               	movwf	7
  7248  153D  0865               	movf	??_setRFSW_AdjControl+1,w
  7249  153E  0081               	movwf	1
  7250  153F                     l2206:	
  7251                           
  7252                           ;RF_Control_B1.c: 381: }
  7253                           ;RF_Control_B1.c: 382: product->Data[17]=product->Data[26 + sw];
  7254  153F  0020               	movlb	0	; select bank0
  7255  1540  0866               	movf	setRFSW_AdjControl@sw,w
  7256  1541  3E1A               	addlw	26
  7257  1542  077D               	addwf	_product,w
  7258  1543  00E4               	movwf	??_setRFSW_AdjControl
  7259  1544  0864               	movf	??_setRFSW_AdjControl,w
  7260  1545  0086               	movwf	6
  7261  1546  3001               	movlw	1	; select bank2/3
  7262  1547  0087               	movwf	7
  7263  1548  0801               	movf	1,w
  7264  1549  00E5               	movwf	??_setRFSW_AdjControl+1
  7265  154A  087D               	movf	_product,w
  7266  154B  3E11               	addlw	17
  7267  154C  0086               	movwf	6
  7268  154D  3001               	movlw	1	; select bank2/3
  7269  154E  0087               	movwf	7
  7270  154F  0865               	movf	??_setRFSW_AdjControl+1,w
  7271  1550  0081               	movwf	1
  7272                           
  7273                           ;RF_Control_B1.c: 383: setTxData(1);
  7274  1551  3001               	movlw	1
  7275  1552  318F  275F         	fcall	_setTxData
  7276  1554  0008               	return
  7277  1555                     __end_of_setRFSW_AdjControl:	
  7278                           
  7279                           	psect	text27
  7280  14A0                     __ptext27:	
  7281 ;; *************** function _setRF_DimmerValue *****************
  7282 ;; Defined at:
  7283 ;;		line 394 in file "../src/RF_Control_B1.c"
  7284 ;; Parameters:    Size  Location     Type
  7285 ;;  lights          1    wreg     unsigned char 
  7286 ;; Auto vars:     Size  Location     Type
  7287 ;;  lights          1   67[BANK0 ] unsigned char 
  7288 ;; Return value:  Size  Location     Type
  7289 ;;		None               void
  7290 ;; Registers used:
  7291 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7292 ;; Tracked objects:
  7293 ;;		On entry : 0/0
  7294 ;;		On exit  : 0/0
  7295 ;;		Unchanged: 0/0
  7296 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7297 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7298 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7299 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7300 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7301 ;;Total ram usage:        3 bytes
  7302 ;; Hardware stack levels used:    1
  7303 ;; Hardware stack levels required when called:    9
  7304 ;; This function calls:
  7305 ;;		_setDimmerLights_AdjRF
  7306 ;; This function is called by:
  7307 ;;		_setRFSW_AdjControl
  7308 ;; This function uses a non-reentrant model
  7309 ;;
  7310                           
  7311                           
  7312                           ;psect for function _setRF_DimmerValue
  7313  14A0                     _setRF_DimmerValue:	
  7314                           
  7315                           ;incstack = 0
  7316                           ; Regs used in _setRF_DimmerValue: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7317                           ;setRF_DimmerValue@lights stored from wreg
  7318  14A0  0020               	movlb	0	; select bank0
  7319  14A1  00E3               	movwf	setRF_DimmerValue@lights
  7320                           
  7321                           ;RF_Control_B1.c: 395: if (RF_Data[9] > 0x64) {
  7322  14A2  3065               	movlw	101
  7323  14A3  0021               	movlb	1	; select bank1
  7324  14A4  0229               	subwf	(_RF_Data^(0+128)+9),w
  7325  14A5  1C03               	skipc
  7326  14A6  2CAD               	goto	l5658
  7327                           
  7328                           ;RF_Control_B1.c: 396: RF_Data[9] = 0x64;
  7329  14A7  3064               	movlw	100
  7330  14A8  0020               	movlb	0	; select bank0
  7331  14A9  00E1               	movwf	??_setRF_DimmerValue
  7332  14AA  0861               	movf	??_setRF_DimmerValue,w
  7333  14AB  0021               	movlb	1	; select bank1
  7334  14AC  00A9               	movwf	(_RF_Data^(0+128)+9)
  7335  14AD                     l5658:	
  7336                           
  7337                           ;RF_Control_B1.c: 397: }
  7338                           ;RF_Control_B1.c: 398: product->Data[9]=RF_Data[9];
  7339  14AD  0829               	movf	(_RF_Data^(0+128)+9),w
  7340  14AE  0020               	movlb	0	; select bank0
  7341  14AF  00E1               	movwf	??_setRF_DimmerValue
  7342  14B0  087D               	movf	_product,w
  7343  14B1  3E09               	addlw	9
  7344  14B2  0086               	movwf	6
  7345  14B3  3001               	movlw	1	; select bank2/3
  7346  14B4  0087               	movwf	7
  7347  14B5  0861               	movf	??_setRF_DimmerValue,w
  7348  14B6  0081               	movwf	1
  7349                           
  7350                           ;RF_Control_B1.c: 399: product->Data[11]=lights;
  7351  14B7  0863               	movf	setRF_DimmerValue@lights,w
  7352  14B8  00E1               	movwf	??_setRF_DimmerValue
  7353  14B9  087D               	movf	_product,w
  7354  14BA  3E0B               	addlw	11
  7355  14BB  0086               	movwf	6
  7356  14BC  3001               	movlw	1	; select bank2/3
  7357  14BD  0087               	movwf	7
  7358  14BE  0861               	movf	??_setRF_DimmerValue,w
  7359  14BF  0081               	movwf	1
  7360                           
  7361                           ;RF_Control_B1.c: 400: product->Data[(20 + lights)]=product->Data[9];
  7362  14C0  087D               	movf	_product,w
  7363  14C1  3E09               	addlw	9
  7364  14C2  0086               	movwf	6
  7365  14C3  3001               	movlw	1	; select bank2/3
  7366  14C4  0087               	movwf	7
  7367  14C5  0801               	movf	1,w
  7368  14C6  00E1               	movwf	??_setRF_DimmerValue
  7369  14C7  0863               	movf	setRF_DimmerValue@lights,w
  7370  14C8  3E14               	addlw	20
  7371  14C9  077D               	addwf	_product,w
  7372  14CA  00E2               	movwf	??_setRF_DimmerValue+1
  7373  14CB  0862               	movf	??_setRF_DimmerValue+1,w
  7374  14CC  0086               	movwf	6
  7375  14CD  3001               	movlw	1	; select bank2/3
  7376  14CE  0087               	movwf	7
  7377  14CF  0861               	movf	??_setRF_DimmerValue,w
  7378  14D0  0081               	movwf	1
  7379                           
  7380                           ;RF_Control_B1.c: 401: setDimmerLights_AdjRF(lights);
  7381  14D1  0863               	movf	setRF_DimmerValue@lights,w
  7382  14D2  3192  22E7         	fcall	_setDimmerLights_AdjRF
  7383  14D4  0008               	return
  7384  14D5                     __end_of_setRF_DimmerValue:	
  7385                           
  7386                           	psect	text28
  7387  12E7                     __ptext28:	
  7388 ;; *************** function _setDimmerLights_AdjRF *****************
  7389 ;; Defined at:
  7390 ;;		line 661 in file "../src/Dimmer_B1.c"
  7391 ;; Parameters:    Size  Location     Type
  7392 ;;  lights          1    wreg     unsigned char 
  7393 ;; Auto vars:     Size  Location     Type
  7394 ;;  lights          1   64[BANK0 ] unsigned char 
  7395 ;; Return value:  Size  Location     Type
  7396 ;;		None               void
  7397 ;; Registers used:
  7398 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7399 ;; Tracked objects:
  7400 ;;		On entry : 0/0
  7401 ;;		On exit  : 0/0
  7402 ;;		Unchanged: 0/0
  7403 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7404 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7405 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7406 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7407 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7408 ;;Total ram usage:        2 bytes
  7409 ;; Hardware stack levels used:    1
  7410 ;; Hardware stack levels required when called:    8
  7411 ;; This function calls:
  7412 ;;		_DimmerLightsPointSelect
  7413 ;;		_getPercentValue
  7414 ;; This function is called by:
  7415 ;;		_setRF_DimmerValue
  7416 ;; This function uses a non-reentrant model
  7417 ;;
  7418                           
  7419                           
  7420                           ;psect for function _setDimmerLights_AdjRF
  7421  12E7                     _setDimmerLights_AdjRF:	
  7422                           
  7423                           ;incstack = 0
  7424                           ; Regs used in _setDimmerLights_AdjRF: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  7425                           ;setDimmerLights_AdjRF@lights stored from wreg
  7426  12E7  0020               	movlb	0	; select bank0
  7427  12E8  00E0               	movwf	setDimmerLights_AdjRF@lights
  7428                           
  7429                           ;Dimmer_B1.c: 662: DimmerLightsPointSelect(lights);
  7430  12E9  0860               	movf	setDimmerLights_AdjRF@lights,w
  7431  12EA  3190  2099  3192   	fcall	_DimmerLightsPointSelect
  7432                           
  7433                           ;Dimmer_B1.c: 663: DimmerLights->AdjRF = 1;
  7434  12ED  0879               	movf	_DimmerLights,w
  7435  12EE  0086               	movwf	6
  7436  12EF  3001               	movlw	1	; select bank2/3
  7437  12F0  0087               	movwf	7
  7438  12F1  1501               	bsf	1,2
  7439                           
  7440                           ;Dimmer_B1.c: 664: DimmerLights->Signal = 1;
  7441  12F2  0879               	movf	_DimmerLights,w
  7442  12F3  0086               	movwf	6
  7443  12F4  3001               	movlw	1	; select bank2/3
  7444  12F5  0087               	movwf	7
  7445  12F6  1481               	bsf	1,1
  7446                           
  7447                           ;Dimmer_B1.c: 665: DimmerLights->MaxmumValue = getPercentValue(product->Data[9]);
  7448  12F7  087D               	movf	_product,w
  7449  12F8  3E09               	addlw	9
  7450  12F9  0086               	movwf	6
  7451  12FA  3001               	movlw	1	; select bank2/3
  7452  12FB  0087               	movwf	7
  7453  12FC  0801               	movf	1,w
  7454  12FD  3197  27A5         	fcall	_getPercentValue
  7455  12FF  0020               	movlb	0	; select bank0
  7456  1300  00DF               	movwf	??_setDimmerLights_AdjRF
  7457  1301  0879               	movf	_DimmerLights,w
  7458  1302  3E05               	addlw	5
  7459  1303  0086               	movwf	6
  7460  1304  3001               	movlw	1	; select bank2/3
  7461  1305  0087               	movwf	7
  7462  1306  085F               	movf	??_setDimmerLights_AdjRF,w
  7463  1307  0081               	movwf	1
  7464  1308  0008               	return
  7465  1309                     __end_of_setDimmerLights_AdjRF:	
  7466                           
  7467                           	psect	text29
  7468  17A5                     __ptext29:	
  7469 ;; *************** function _getPercentValue *****************
  7470 ;; Defined at:
  7471 ;;		line 727 in file "../src/Dimmer_B1.c"
  7472 ;; Parameters:    Size  Location     Type
  7473 ;;  value           1    wreg     unsigned char 
  7474 ;; Auto vars:     Size  Location     Type
  7475 ;;  value           1   59[BANK0 ] unsigned char 
  7476 ;;  i               3   60[BANK0 ] float 
  7477 ;; Return value:  Size  Location     Type
  7478 ;;                  1    wreg      unsigned char 
  7479 ;; Registers used:
  7480 ;;		wreg, status,2, status,0, pclath, cstack
  7481 ;; Tracked objects:
  7482 ;;		On entry : 0/0
  7483 ;;		On exit  : 0/0
  7484 ;;		Unchanged: 0/0
  7485 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7486 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7487 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7488 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7489 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7490 ;;Total ram usage:        6 bytes
  7491 ;; Hardware stack levels used:    1
  7492 ;; Hardware stack levels required when called:    7
  7493 ;; This function calls:
  7494 ;;		___awtoft
  7495 ;;		___ftadd
  7496 ;;		___ftdiv
  7497 ;;		___ftmul
  7498 ;;		___fttol
  7499 ;; This function is called by:
  7500 ;;		_setDimmerLights_AdjRF
  7501 ;; This function uses a non-reentrant model
  7502 ;;
  7503                           
  7504                           
  7505                           ;psect for function _getPercentValue
  7506  17A5                     _getPercentValue:	
  7507                           
  7508                           ;incstack = 0
  7509                           ; Regs used in _getPercentValue: [wreg+status,2+status,0+pclath+cstack]
  7510                           ;getPercentValue@value stored from wreg
  7511  17A5  0020               	movlb	0	; select bank0
  7512  17A6  00DB               	movwf	getPercentValue@value
  7513                           
  7514                           ;Dimmer_B1.c: 729: float i = ((char)((100-20)*1.5)) - ((char)((100-55)*1.5));
  7515  17A7  3000               	movlw	0
  7516  17A8  00DC               	movwf	getPercentValue@i
  7517  17A9  3054               	movlw	84
  7518  17AA  00DD               	movwf	getPercentValue@i+1
  7519  17AB  3042               	movlw	66
  7520  17AC  00DE               	movwf	getPercentValue@i+2
  7521                           
  7522                           ;Dimmer_B1.c: 730: i /= 100;
  7523  17AD  3000               	movlw	0
  7524  17AE  00AE               	movwf	___ftdiv@f2
  7525  17AF  30C8               	movlw	200
  7526  17B0  00AF               	movwf	___ftdiv@f2+1
  7527  17B1  3042               	movlw	66
  7528  17B2  00B0               	movwf	___ftdiv@f2+2
  7529  17B3  085C               	movf	getPercentValue@i,w
  7530  17B4  00B1               	movwf	___ftdiv@f1
  7531  17B5  085D               	movf	getPercentValue@i+1,w
  7532  17B6  00B2               	movwf	___ftdiv@f1+1
  7533  17B7  085E               	movf	getPercentValue@i+2,w
  7534  17B8  00B3               	movwf	___ftdiv@f1+2
  7535  17B9  3186  2676  3197   	fcall	___ftdiv
  7536  17BC  0020               	movlb	0	; select bank0
  7537  17BD  082E               	movf	?___ftdiv,w
  7538  17BE  00DC               	movwf	getPercentValue@i
  7539  17BF  082F               	movf	?___ftdiv+1,w
  7540  17C0  00DD               	movwf	getPercentValue@i+1
  7541  17C1  0830               	movf	?___ftdiv+2,w
  7542  17C2  00DE               	movwf	getPercentValue@i+2
  7543                           
  7544                           ;Dimmer_B1.c: 731: return (char) (((100 - value) * i) + ((char)((100-55)*1.5)));
  7545  17C3  085B               	movf	getPercentValue@value,w
  7546  17C4  00D9               	movwf	??_getPercentValue
  7547  17C5  01DA               	clrf	??_getPercentValue+1
  7548  17C6  09D9               	comf	??_getPercentValue,f
  7549  17C7  09DA               	comf	??_getPercentValue+1,f
  7550  17C8  0AD9               	incf	??_getPercentValue,f
  7551  17C9  1903               	skipnz
  7552  17CA  0ADA               	incf	??_getPercentValue+1,f
  7553  17CB  0859               	movf	??_getPercentValue,w
  7554  17CC  3E64               	addlw	100
  7555  17CD  00A8               	movwf	___awtoft@c
  7556  17CE  3000               	movlw	0
  7557  17CF  3D5A               	addwfc	??_getPercentValue+1,w
  7558  17D0  00A9               	movwf	___awtoft@c+1
  7559  17D1  3192  22A3  3197   	fcall	___awtoft
  7560  17D4  0020               	movlb	0	; select bank0
  7561  17D5  0828               	movf	?___awtoft,w
  7562  17D6  00B1               	movwf	___ftmul@f2
  7563  17D7  0829               	movf	?___awtoft+1,w
  7564  17D8  00B2               	movwf	___ftmul@f2+1
  7565  17D9  082A               	movf	?___awtoft+2,w
  7566  17DA  00B3               	movwf	___ftmul@f2+2
  7567  17DB  085C               	movf	getPercentValue@i,w
  7568  17DC  00AE               	movwf	___ftmul@f1
  7569  17DD  085D               	movf	getPercentValue@i+1,w
  7570  17DE  00AF               	movwf	___ftmul@f1+1
  7571  17DF  085E               	movf	getPercentValue@i+2,w
  7572  17E0  00B0               	movwf	___ftmul@f1+2
  7573  17E1  3185  2514  3197   	fcall	___ftmul
  7574  17E4  0020               	movlb	0	; select bank0
  7575  17E5  082E               	movf	?___ftmul,w
  7576  17E6  00C1               	movwf	___ftadd@f2
  7577  17E7  082F               	movf	?___ftmul+1,w
  7578  17E8  00C2               	movwf	___ftadd@f2+1
  7579  17E9  0830               	movf	?___ftmul+2,w
  7580  17EA  00C3               	movwf	___ftadd@f2+2
  7581  17EB  3000               	movlw	0
  7582  17EC  00BE               	movwf	___ftadd@f1
  7583  17ED  3086               	movlw	134
  7584  17EE  00BF               	movwf	___ftadd@f1+1
  7585  17EF  3042               	movlw	66
  7586  17F0  00C0               	movwf	___ftadd@f1+2
  7587  17F1  3183  2328  3197   	fcall	___ftadd
  7588  17F4  0020               	movlb	0	; select bank0
  7589  17F5  083E               	movf	?___ftadd,w
  7590  17F6  00CB               	movwf	___fttol@f1
  7591  17F7  083F               	movf	?___ftadd+1,w
  7592  17F8  00CC               	movwf	___fttol@f1+1
  7593  17F9  0840               	movf	?___ftadd+2,w
  7594  17FA  00CD               	movwf	___fttol@f1+2
  7595  17FB  318D  25B6         	fcall	___fttol
  7596  17FD  0020               	movlb	0	; select bank0
  7597  17FE  084B               	movf	?___fttol,w
  7598  17FF  0008               	return
  7599  1800                     __end_of_getPercentValue:	
  7600                           
  7601                           	psect	text30
  7602  0514                     __ptext30:	
  7603 ;; *************** function ___ftmul *****************
  7604 ;; Defined at:
  7605 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftmul.c"
  7606 ;; Parameters:    Size  Location     Type
  7607 ;;  f1              3   14[BANK0 ] float 
  7608 ;;  f2              3   17[BANK0 ] float 
  7609 ;; Auto vars:     Size  Location     Type
  7610 ;;  f3_as_produc    3   25[BANK0 ] unsigned um
  7611 ;;  sign            1   29[BANK0 ] unsigned char 
  7612 ;;  cntr            1   28[BANK0 ] unsigned char 
  7613 ;;  exp             1   24[BANK0 ] unsigned char 
  7614 ;; Return value:  Size  Location     Type
  7615 ;;                  3   14[BANK0 ] float 
  7616 ;; Registers used:
  7617 ;;		wreg, status,2, status,0, pclath, cstack
  7618 ;; Tracked objects:
  7619 ;;		On entry : 0/0
  7620 ;;		On exit  : 0/0
  7621 ;;		Unchanged: 0/0
  7622 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7623 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7624 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7625 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7626 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7627 ;;Total ram usage:       16 bytes
  7628 ;; Hardware stack levels used:    1
  7629 ;; Hardware stack levels required when called:    6
  7630 ;; This function calls:
  7631 ;;		___ftpack
  7632 ;; This function is called by:
  7633 ;;		_getPercentValue
  7634 ;; This function uses a non-reentrant model
  7635 ;;
  7636                           
  7637                           
  7638                           ;psect for function ___ftmul
  7639  0514                     ___ftmul:	
  7640                           
  7641                           ;incstack = 0
  7642                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  7643  0514  0020               	movlb	0	; select bank0
  7644  0515  082E               	movf	___ftmul@f1,w
  7645  0516  00B4               	movwf	??___ftmul
  7646  0517  082F               	movf	___ftmul@f1+1,w
  7647  0518  00B5               	movwf	??___ftmul+1
  7648  0519  0830               	movf	___ftmul@f1+2,w
  7649  051A  00B6               	movwf	??___ftmul+2
  7650  051B  1003               	clrc
  7651  051C  0D35               	rlf	??___ftmul+1,w
  7652  051D  0D36               	rlf	??___ftmul+2,w
  7653  051E  00B7               	movwf	??___ftmul+3
  7654  051F  0837               	movf	??___ftmul+3,w
  7655  0520  00B8               	movwf	___ftmul@exp
  7656  0521  08B8               	movf	___ftmul@exp,f
  7657  0522  1D03               	skipz
  7658  0523  2D2B               	goto	l5288
  7659  0524  3000               	movlw	0
  7660  0525  00AE               	movwf	?___ftmul
  7661  0526  3000               	movlw	0
  7662  0527  00AF               	movwf	?___ftmul+1
  7663  0528  3000               	movlw	0
  7664  0529  00B0               	movwf	?___ftmul+2
  7665  052A  0008               	return
  7666  052B                     l5288:	
  7667  052B  0831               	movf	___ftmul@f2,w
  7668  052C  00B4               	movwf	??___ftmul
  7669  052D  0832               	movf	___ftmul@f2+1,w
  7670  052E  00B5               	movwf	??___ftmul+1
  7671  052F  0833               	movf	___ftmul@f2+2,w
  7672  0530  00B6               	movwf	??___ftmul+2
  7673  0531  1003               	clrc
  7674  0532  0D35               	rlf	??___ftmul+1,w
  7675  0533  0D36               	rlf	??___ftmul+2,w
  7676  0534  00B7               	movwf	??___ftmul+3
  7677  0535  0837               	movf	??___ftmul+3,w
  7678  0536  00BD               	movwf	___ftmul@sign
  7679  0537  08BD               	movf	___ftmul@sign,f
  7680  0538  1D03               	skipz
  7681  0539  2D41               	goto	l5294
  7682  053A  3000               	movlw	0
  7683  053B  00AE               	movwf	?___ftmul
  7684  053C  3000               	movlw	0
  7685  053D  00AF               	movwf	?___ftmul+1
  7686  053E  3000               	movlw	0
  7687  053F  00B0               	movwf	?___ftmul+2
  7688  0540  0008               	return
  7689  0541                     l5294:	
  7690  0541  083D               	movf	___ftmul@sign,w
  7691  0542  3E7B               	addlw	123
  7692  0543  00B4               	movwf	??___ftmul
  7693  0544  0834               	movf	??___ftmul,w
  7694  0545  07B8               	addwf	___ftmul@exp,f
  7695  0546  082E               	movf	___ftmul@f1,w
  7696  0547  00B4               	movwf	??___ftmul
  7697  0548  082F               	movf	___ftmul@f1+1,w
  7698  0549  00B5               	movwf	??___ftmul+1
  7699  054A  0830               	movf	___ftmul@f1+2,w
  7700  054B  00B6               	movwf	??___ftmul+2
  7701  054C  3010               	movlw	16
  7702  054D                     u3625:	
  7703  054D  36B6               	lsrf	??___ftmul+2,f
  7704  054E  0CB5               	rrf	??___ftmul+1,f
  7705  054F  0CB4               	rrf	??___ftmul,f
  7706  0550  0B89               	decfsz	9,f
  7707  0551  2D4D               	goto	u3625
  7708  0552  0834               	movf	??___ftmul,w
  7709  0553  00B7               	movwf	??___ftmul+3
  7710  0554  0837               	movf	??___ftmul+3,w
  7711  0555  00BD               	movwf	___ftmul@sign
  7712  0556  0831               	movf	___ftmul@f2,w
  7713  0557  00B4               	movwf	??___ftmul
  7714  0558  0832               	movf	___ftmul@f2+1,w
  7715  0559  00B5               	movwf	??___ftmul+1
  7716  055A  0833               	movf	___ftmul@f2+2,w
  7717  055B  00B6               	movwf	??___ftmul+2
  7718  055C  3010               	movlw	16
  7719  055D                     u3635:	
  7720  055D  36B6               	lsrf	??___ftmul+2,f
  7721  055E  0CB5               	rrf	??___ftmul+1,f
  7722  055F  0CB4               	rrf	??___ftmul,f
  7723  0560  0B89               	decfsz	9,f
  7724  0561  2D5D               	goto	u3635
  7725  0562  0834               	movf	??___ftmul,w
  7726  0563  00B7               	movwf	??___ftmul+3
  7727  0564  0837               	movf	??___ftmul+3,w
  7728  0565  06BD               	xorwf	___ftmul@sign,f
  7729  0566  3080               	movlw	128
  7730  0567  00B4               	movwf	??___ftmul
  7731  0568  0834               	movf	??___ftmul,w
  7732  0569  05BD               	andwf	___ftmul@sign,f
  7733  056A  17AF               	bsf	___ftmul@f1+1,7
  7734  056B  17B2               	bsf	___ftmul@f2+1,7
  7735  056C  30FF               	movlw	255
  7736  056D  05B1               	andwf	___ftmul@f2,f
  7737  056E  30FF               	movlw	255
  7738  056F  05B2               	andwf	___ftmul@f2+1,f
  7739  0570  3000               	movlw	0
  7740  0571  05B3               	andwf	___ftmul@f2+2,f
  7741  0572  3000               	movlw	0
  7742  0573  00B9               	movwf	___ftmul@f3_as_product
  7743  0574  3000               	movlw	0
  7744  0575  00BA               	movwf	___ftmul@f3_as_product+1
  7745  0576  3000               	movlw	0
  7746  0577  00BB               	movwf	___ftmul@f3_as_product+2
  7747  0578  3007               	movlw	7
  7748  0579  00B4               	movwf	??___ftmul
  7749  057A  0834               	movf	??___ftmul,w
  7750  057B  00BC               	movwf	___ftmul@cntr
  7751  057C                     l5306:	
  7752  057C  1C2E               	btfss	___ftmul@f1,0
  7753  057D  2D84               	goto	l5310
  7754  057E  0831               	movf	___ftmul@f2,w
  7755  057F  07B9               	addwf	___ftmul@f3_as_product,f
  7756  0580  0832               	movf	___ftmul@f2+1,w
  7757  0581  3DBA               	addwfc	___ftmul@f3_as_product+1,f
  7758  0582  0833               	movf	___ftmul@f2+2,w
  7759  0583  3DBB               	addwfc	___ftmul@f3_as_product+2,f
  7760  0584                     l5310:	
  7761  0584  3001               	movlw	1
  7762  0585                     u3655:	
  7763  0585  36B0               	lsrf	___ftmul@f1+2,f
  7764  0586  0CAF               	rrf	___ftmul@f1+1,f
  7765  0587  0CAE               	rrf	___ftmul@f1,f
  7766  0588  0B89               	decfsz	9,f
  7767  0589  2D85               	goto	u3655
  7768  058A  3001               	movlw	1
  7769  058B                     u3665:	
  7770  058B  35B1               	lslf	___ftmul@f2,f
  7771  058C  0DB2               	rlf	___ftmul@f2+1,f
  7772  058D  0DB3               	rlf	___ftmul@f2+2,f
  7773  058E  0B89               	decfsz	9,f
  7774  058F  2D8B               	goto	u3665
  7775  0590  3001               	movlw	1
  7776  0591  02BC               	subwf	___ftmul@cntr,f
  7777  0592  1D03               	btfss	3,2
  7778  0593  2D7C               	goto	l5306
  7779  0594  3009               	movlw	9
  7780  0595  00B4               	movwf	??___ftmul
  7781  0596  0834               	movf	??___ftmul,w
  7782  0597  00BC               	movwf	___ftmul@cntr
  7783  0598                     l5318:	
  7784  0598  1C2E               	btfss	___ftmul@f1,0
  7785  0599  2DA0               	goto	l5322
  7786  059A  0831               	movf	___ftmul@f2,w
  7787  059B  07B9               	addwf	___ftmul@f3_as_product,f
  7788  059C  0832               	movf	___ftmul@f2+1,w
  7789  059D  3DBA               	addwfc	___ftmul@f3_as_product+1,f
  7790  059E  0833               	movf	___ftmul@f2+2,w
  7791  059F  3DBB               	addwfc	___ftmul@f3_as_product+2,f
  7792  05A0                     l5322:	
  7793  05A0  3001               	movlw	1
  7794  05A1                     u3695:	
  7795  05A1  36B0               	lsrf	___ftmul@f1+2,f
  7796  05A2  0CAF               	rrf	___ftmul@f1+1,f
  7797  05A3  0CAE               	rrf	___ftmul@f1,f
  7798  05A4  0B89               	decfsz	9,f
  7799  05A5  2DA1               	goto	u3695
  7800  05A6  3001               	movlw	1
  7801  05A7                     u3705:	
  7802  05A7  36BB               	lsrf	___ftmul@f3_as_product+2,f
  7803  05A8  0CBA               	rrf	___ftmul@f3_as_product+1,f
  7804  05A9  0CB9               	rrf	___ftmul@f3_as_product,f
  7805  05AA  0B89               	decfsz	9,f
  7806  05AB  2DA7               	goto	u3705
  7807  05AC  3001               	movlw	1
  7808  05AD  02BC               	subwf	___ftmul@cntr,f
  7809  05AE  1D03               	btfss	3,2
  7810  05AF  2D98               	goto	l5318
  7811  05B0  0839               	movf	___ftmul@f3_as_product,w
  7812  05B1  00A0               	movwf	___ftpack@arg
  7813  05B2  083A               	movf	___ftmul@f3_as_product+1,w
  7814  05B3  00A1               	movwf	___ftpack@arg+1
  7815  05B4  083B               	movf	___ftmul@f3_as_product+2,w
  7816  05B5  00A2               	movwf	___ftpack@arg+2
  7817  05B6  0838               	movf	___ftmul@exp,w
  7818  05B7  00B4               	movwf	??___ftmul
  7819  05B8  0834               	movf	??___ftmul,w
  7820  05B9  00A3               	movwf	___ftpack@exp
  7821  05BA  083D               	movf	___ftmul@sign,w
  7822  05BB  00B5               	movwf	??___ftmul+1
  7823  05BC  0835               	movf	??___ftmul+1,w
  7824  05BD  00A4               	movwf	___ftpack@sign
  7825  05BE  3189  2136         	fcall	___ftpack
  7826  05C0  0020               	movlb	0	; select bank0
  7827  05C1  0820               	movf	?___ftpack,w
  7828  05C2  00AE               	movwf	?___ftmul
  7829  05C3  0821               	movf	?___ftpack+1,w
  7830  05C4  00AF               	movwf	?___ftmul+1
  7831  05C5  0822               	movf	?___ftpack+2,w
  7832  05C6  00B0               	movwf	?___ftmul+2
  7833  05C7  0008               	return
  7834  05C8                     __end_of___ftmul:	
  7835                           
  7836                           	psect	text31
  7837  0328                     __ptext31:	
  7838 ;; *************** function ___ftadd *****************
  7839 ;; Defined at:
  7840 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftadd.c"
  7841 ;; Parameters:    Size  Location     Type
  7842 ;;  f1              3   30[BANK0 ] float 
  7843 ;;  f2              3   33[BANK0 ] float 
  7844 ;; Auto vars:     Size  Location     Type
  7845 ;;  exp1            1   42[BANK0 ] unsigned char 
  7846 ;;  exp2            1   41[BANK0 ] unsigned char 
  7847 ;;  sign            1   40[BANK0 ] unsigned char 
  7848 ;; Return value:  Size  Location     Type
  7849 ;;                  3   30[BANK0 ] float 
  7850 ;; Registers used:
  7851 ;;		wreg, status,2, status,0, pclath, cstack
  7852 ;; Tracked objects:
  7853 ;;		On entry : 0/0
  7854 ;;		On exit  : 0/0
  7855 ;;		Unchanged: 0/0
  7856 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7857 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7858 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7859 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7860 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7861 ;;Total ram usage:       13 bytes
  7862 ;; Hardware stack levels used:    1
  7863 ;; Hardware stack levels required when called:    6
  7864 ;; This function calls:
  7865 ;;		___ftpack
  7866 ;; This function is called by:
  7867 ;;		_getPercentValue
  7868 ;; This function uses a non-reentrant model
  7869 ;;
  7870                           
  7871                           
  7872                           ;psect for function ___ftadd
  7873  0328                     ___ftadd:	
  7874                           
  7875                           ;incstack = 0
  7876                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
  7877  0328  0020               	movlb	0	; select bank0
  7878  0329  083E               	movf	___ftadd@f1,w
  7879  032A  00C4               	movwf	??___ftadd
  7880  032B  083F               	movf	___ftadd@f1+1,w
  7881  032C  00C5               	movwf	??___ftadd+1
  7882  032D  0840               	movf	___ftadd@f1+2,w
  7883  032E  00C6               	movwf	??___ftadd+2
  7884  032F  1003               	clrc
  7885  0330  0D45               	rlf	??___ftadd+1,w
  7886  0331  0D46               	rlf	??___ftadd+2,w
  7887  0332  00C7               	movwf	??___ftadd+3
  7888  0333  0847               	movf	??___ftadd+3,w
  7889  0334  00CA               	movwf	___ftadd@exp1
  7890  0335  0841               	movf	___ftadd@f2,w
  7891  0336  00C4               	movwf	??___ftadd
  7892  0337  0842               	movf	___ftadd@f2+1,w
  7893  0338  00C5               	movwf	??___ftadd+1
  7894  0339  0843               	movf	___ftadd@f2+2,w
  7895  033A  00C6               	movwf	??___ftadd+2
  7896  033B  1003               	clrc
  7897  033C  0D45               	rlf	??___ftadd+1,w
  7898  033D  0D46               	rlf	??___ftadd+2,w
  7899  033E  00C7               	movwf	??___ftadd+3
  7900  033F  0847               	movf	??___ftadd+3,w
  7901  0340  00C9               	movwf	___ftadd@exp2
  7902  0341  084A               	movf	___ftadd@exp1,w
  7903  0342  1903               	btfsc	3,2
  7904  0343  2B50               	goto	l5176
  7905  0344  0849               	movf	___ftadd@exp2,w
  7906  0345  024A               	subwf	___ftadd@exp1,w
  7907  0346  1803               	skipnc
  7908  0347  2B57               	goto	l5180
  7909  0348  034A               	decf	___ftadd@exp1,w
  7910  0349  3AFF               	xorlw	255
  7911  034A  0749               	addwf	___ftadd@exp2,w
  7912  034B  00C4               	movwf	??___ftadd
  7913  034C  3019               	movlw	25
  7914  034D  0244               	subwf	??___ftadd,w
  7915  034E  1C03               	skipc
  7916  034F  2B57               	goto	l5180
  7917  0350                     l5176:	
  7918  0350  0841               	movf	___ftadd@f2,w
  7919  0351  00BE               	movwf	?___ftadd
  7920  0352  0842               	movf	___ftadd@f2+1,w
  7921  0353  00BF               	movwf	?___ftadd+1
  7922  0354  0843               	movf	___ftadd@f2+2,w
  7923  0355  00C0               	movwf	?___ftadd+2
  7924  0356  0008               	return
  7925  0357                     l5180:	
  7926  0357  0849               	movf	___ftadd@exp2,w
  7927  0358  1903               	btfsc	3,2
  7928  0359  0008               	return
  7929  035A  084A               	movf	___ftadd@exp1,w
  7930  035B  0249               	subwf	___ftadd@exp2,w
  7931  035C  1803               	skipnc
  7932  035D  2B66               	goto	l5186
  7933  035E  0349               	decf	___ftadd@exp2,w
  7934  035F  3AFF               	xorlw	255
  7935  0360  074A               	addwf	___ftadd@exp1,w
  7936  0361  00C4               	movwf	??___ftadd
  7937  0362  3019               	movlw	25
  7938  0363  0244               	subwf	??___ftadd,w
  7939  0364  1803               	btfsc	3,0
  7940  0365  0008               	return
  7941  0366                     l5186:	
  7942  0366  3006               	movlw	6
  7943  0367  00C4               	movwf	??___ftadd
  7944  0368  0844               	movf	??___ftadd,w
  7945  0369  00C8               	movwf	___ftadd@sign
  7946  036A  1BC0               	btfsc	___ftadd@f1+2,7
  7947  036B  17C8               	bsf	___ftadd@sign,7
  7948  036C  1BC3               	btfsc	___ftadd@f2+2,7
  7949  036D  1748               	bsf	___ftadd@sign,6
  7950  036E  17BF               	bsf	___ftadd@f1+1,7
  7951  036F  30FF               	movlw	255
  7952  0370  05BE               	andwf	___ftadd@f1,f
  7953  0371  30FF               	movlw	255
  7954  0372  05BF               	andwf	___ftadd@f1+1,f
  7955  0373  3000               	movlw	0
  7956  0374  05C0               	andwf	___ftadd@f1+2,f
  7957  0375  17C2               	bsf	___ftadd@f2+1,7
  7958  0376  30FF               	movlw	255
  7959  0377  05C1               	andwf	___ftadd@f2,f
  7960  0378  30FF               	movlw	255
  7961  0379  05C2               	andwf	___ftadd@f2+1,f
  7962  037A  3000               	movlw	0
  7963  037B  05C3               	andwf	___ftadd@f2+2,f
  7964  037C  0849               	movf	___ftadd@exp2,w
  7965  037D  024A               	subwf	___ftadd@exp1,w
  7966  037E  1803               	skipnc
  7967  037F  2BA2               	goto	l5208
  7968  0380                     l5198:	
  7969  0380  3001               	movlw	1
  7970  0381                     u3385:	
  7971  0381  35C1               	lslf	___ftadd@f2,f
  7972  0382  0DC2               	rlf	___ftadd@f2+1,f
  7973  0383  0DC3               	rlf	___ftadd@f2+2,f
  7974  0384  0B89               	decfsz	9,f
  7975  0385  2B81               	goto	u3385
  7976  0386  3001               	movlw	1
  7977  0387  02C9               	subwf	___ftadd@exp2,f
  7978  0388  0849               	movf	___ftadd@exp2,w
  7979  0389  064A               	xorwf	___ftadd@exp1,w
  7980  038A  1903               	skipnz
  7981  038B  2B9D               	goto	l5206
  7982  038C  3001               	movlw	1
  7983  038D  02C8               	subwf	___ftadd@sign,f
  7984  038E  0848               	movf	___ftadd@sign,w
  7985  038F  3907               	andlw	7
  7986  0390  1903               	btfsc	3,2
  7987  0391  2B9D               	goto	l5206
  7988  0392  2B80               	goto	l5198
  7989  0393                     l5204:	
  7990  0393  3001               	movlw	1
  7991  0394                     u3415:	
  7992  0394  36C0               	lsrf	___ftadd@f1+2,f
  7993  0395  0CBF               	rrf	___ftadd@f1+1,f
  7994  0396  0CBE               	rrf	___ftadd@f1,f
  7995  0397  0B89               	decfsz	9,f
  7996  0398  2B94               	goto	u3415
  7997  0399  3001               	movlw	1
  7998  039A  00C4               	movwf	??___ftadd
  7999  039B  0844               	movf	??___ftadd,w
  8000  039C  07CA               	addwf	___ftadd@exp1,f
  8001  039D                     l5206:	
  8002  039D  084A               	movf	___ftadd@exp1,w
  8003  039E  0649               	xorwf	___ftadd@exp2,w
  8004  039F  1903               	btfsc	3,2
  8005  03A0  2BC7               	goto	l2925
  8006  03A1  2B93               	goto	l5204
  8007  03A2                     l5208:	
  8008  03A2  084A               	movf	___ftadd@exp1,w
  8009  03A3  0249               	subwf	___ftadd@exp2,w
  8010  03A4  1803               	skipnc
  8011  03A5  2BC7               	goto	l2925
  8012  03A6                     l5210:	
  8013  03A6  3001               	movlw	1
  8014  03A7                     u3445:	
  8015  03A7  35BE               	lslf	___ftadd@f1,f
  8016  03A8  0DBF               	rlf	___ftadd@f1+1,f
  8017  03A9  0DC0               	rlf	___ftadd@f1+2,f
  8018  03AA  0B89               	decfsz	9,f
  8019  03AB  2BA7               	goto	u3445
  8020  03AC  3001               	movlw	1
  8021  03AD  02CA               	subwf	___ftadd@exp1,f
  8022  03AE  0849               	movf	___ftadd@exp2,w
  8023  03AF  064A               	xorwf	___ftadd@exp1,w
  8024  03B0  1903               	skipnz
  8025  03B1  2BC3               	goto	l5218
  8026  03B2  3001               	movlw	1
  8027  03B3  02C8               	subwf	___ftadd@sign,f
  8028  03B4  0848               	movf	___ftadd@sign,w
  8029  03B5  3907               	andlw	7
  8030  03B6  1903               	btfsc	3,2
  8031  03B7  2BC3               	goto	l5218
  8032  03B8  2BA6               	goto	l5210
  8033  03B9                     l5216:	
  8034  03B9  3001               	movlw	1
  8035  03BA                     u3475:	
  8036  03BA  36C3               	lsrf	___ftadd@f2+2,f
  8037  03BB  0CC2               	rrf	___ftadd@f2+1,f
  8038  03BC  0CC1               	rrf	___ftadd@f2,f
  8039  03BD  0B89               	decfsz	9,f
  8040  03BE  2BBA               	goto	u3475
  8041  03BF  3001               	movlw	1
  8042  03C0  00C4               	movwf	??___ftadd
  8043  03C1  0844               	movf	??___ftadd,w
  8044  03C2  07C9               	addwf	___ftadd@exp2,f
  8045  03C3                     l5218:	
  8046  03C3  084A               	movf	___ftadd@exp1,w
  8047  03C4  0649               	xorwf	___ftadd@exp2,w
  8048  03C5  1D03               	skipz
  8049  03C6  2BB9               	goto	l5216
  8050  03C7                     l2925:	
  8051  03C7  1FC8               	btfss	___ftadd@sign,7
  8052  03C8  2BD9               	goto	l5222
  8053  03C9  30FF               	movlw	255
  8054  03CA  06BE               	xorwf	___ftadd@f1,f
  8055  03CB  30FF               	movlw	255
  8056  03CC  06BF               	xorwf	___ftadd@f1+1,f
  8057  03CD  30FF               	movlw	255
  8058  03CE  06C0               	xorwf	___ftadd@f1+2,f
  8059  03CF  3001               	movlw	1
  8060  03D0  07BE               	addwf	___ftadd@f1,f
  8061  03D1  3000               	movlw	0
  8062  03D2  1803               	skipnc
  8063  03D3  3001               	movlw	1
  8064  03D4  07BF               	addwf	___ftadd@f1+1,f
  8065  03D5  3000               	movlw	0
  8066  03D6  1803               	skipnc
  8067  03D7  3001               	movlw	1
  8068  03D8  07C0               	addwf	___ftadd@f1+2,f
  8069  03D9                     l5222:	
  8070  03D9  1F48               	btfss	___ftadd@sign,6
  8071  03DA  2BEB               	goto	l5226
  8072  03DB  30FF               	movlw	255
  8073  03DC  06C1               	xorwf	___ftadd@f2,f
  8074  03DD  30FF               	movlw	255
  8075  03DE  06C2               	xorwf	___ftadd@f2+1,f
  8076  03DF  30FF               	movlw	255
  8077  03E0  06C3               	xorwf	___ftadd@f2+2,f
  8078  03E1  3001               	movlw	1
  8079  03E2  07C1               	addwf	___ftadd@f2,f
  8080  03E3  3000               	movlw	0
  8081  03E4  1803               	skipnc
  8082  03E5  3001               	movlw	1
  8083  03E6  07C2               	addwf	___ftadd@f2+1,f
  8084  03E7  3000               	movlw	0
  8085  03E8  1803               	skipnc
  8086  03E9  3001               	movlw	1
  8087  03EA  07C3               	addwf	___ftadd@f2+2,f
  8088  03EB                     l5226:	
  8089  03EB  01C8               	clrf	___ftadd@sign
  8090  03EC  083E               	movf	___ftadd@f1,w
  8091  03ED  07C1               	addwf	___ftadd@f2,f
  8092  03EE  083F               	movf	___ftadd@f1+1,w
  8093  03EF  3DC2               	addwfc	___ftadd@f2+1,f
  8094  03F0  0840               	movf	___ftadd@f1+2,w
  8095  03F1  3DC3               	addwfc	___ftadd@f2+2,f
  8096  03F2  1FC3               	btfss	___ftadd@f2+2,7
  8097  03F3  2C06               	goto	l5236
  8098  03F4  30FF               	movlw	255
  8099  03F5  06C1               	xorwf	___ftadd@f2,f
  8100  03F6  30FF               	movlw	255
  8101  03F7  06C2               	xorwf	___ftadd@f2+1,f
  8102  03F8  30FF               	movlw	255
  8103  03F9  06C3               	xorwf	___ftadd@f2+2,f
  8104  03FA  3001               	movlw	1
  8105  03FB  07C1               	addwf	___ftadd@f2,f
  8106  03FC  3000               	movlw	0
  8107  03FD  1803               	skipnc
  8108  03FE  3001               	movlw	1
  8109  03FF  07C2               	addwf	___ftadd@f2+1,f
  8110  0400  3000               	movlw	0
  8111  0401  1803               	skipnc
  8112  0402  3001               	movlw	1
  8113  0403  07C3               	addwf	___ftadd@f2+2,f
  8114  0404  01C8               	clrf	___ftadd@sign
  8115  0405  0AC8               	incf	___ftadd@sign,f
  8116  0406                     l5236:	
  8117  0406  0841               	movf	___ftadd@f2,w
  8118  0407  00A0               	movwf	___ftpack@arg
  8119  0408  0842               	movf	___ftadd@f2+1,w
  8120  0409  00A1               	movwf	___ftpack@arg+1
  8121  040A  0843               	movf	___ftadd@f2+2,w
  8122  040B  00A2               	movwf	___ftpack@arg+2
  8123  040C  084A               	movf	___ftadd@exp1,w
  8124  040D  00C4               	movwf	??___ftadd
  8125  040E  0844               	movf	??___ftadd,w
  8126  040F  00A3               	movwf	___ftpack@exp
  8127  0410  0848               	movf	___ftadd@sign,w
  8128  0411  00C5               	movwf	??___ftadd+1
  8129  0412  0845               	movf	??___ftadd+1,w
  8130  0413  00A4               	movwf	___ftpack@sign
  8131  0414  3189  2136         	fcall	___ftpack
  8132  0416  0020               	movlb	0	; select bank0
  8133  0417  0820               	movf	?___ftpack,w
  8134  0418  00BE               	movwf	?___ftadd
  8135  0419  0821               	movf	?___ftpack+1,w
  8136  041A  00BF               	movwf	?___ftadd+1
  8137  041B  0822               	movf	?___ftpack+2,w
  8138  041C  00C0               	movwf	?___ftadd+2
  8139  041D  0008               	return
  8140  041E                     __end_of___ftadd:	
  8141                           
  8142                           	psect	text32
  8143  1359                     __ptext32:	
  8144 ;; *************** function _RF_RxDisable *****************
  8145 ;; Defined at:
  8146 ;;		line 194 in file "../src/RF_Control_B1.c"
  8147 ;; Parameters:    Size  Location     Type
  8148 ;;  rf              1    wreg     unsigned char 
  8149 ;; Auto vars:     Size  Location     Type
  8150 ;;  rf              1    4[BANK0 ] unsigned char 
  8151 ;; Return value:  Size  Location     Type
  8152 ;;		None               void
  8153 ;; Registers used:
  8154 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8155 ;; Tracked objects:
  8156 ;;		On entry : 0/0
  8157 ;;		On exit  : 0/0
  8158 ;;		Unchanged: 0/0
  8159 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8160 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8161 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8162 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8163 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8164 ;;Total ram usage:        1 bytes
  8165 ;; Hardware stack levels used:    1
  8166 ;; Hardware stack levels required when called:    7
  8167 ;; This function calls:
  8168 ;;		_CC2500_WriteCommand
  8169 ;;		_RfPointSelect
  8170 ;;		_setINT_GO
  8171 ;; This function is called by:
  8172 ;;		_setRF_Main
  8173 ;; This function uses a non-reentrant model
  8174 ;;
  8175                           
  8176                           
  8177                           ;psect for function _RF_RxDisable
  8178  1359                     _RF_RxDisable:	
  8179                           
  8180                           ;incstack = 0
  8181                           ; Regs used in _RF_RxDisable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8182                           ;RF_RxDisable@rf stored from wreg
  8183  1359  0020               	movlb	0	; select bank0
  8184  135A  00A4               	movwf	RF_RxDisable@rf
  8185                           
  8186                           ;RF_Control_B1.c: 195: RfPointSelect(rf);
  8187  135B  0824               	movf	RF_RxDisable@rf,w
  8188  135C  319E  26DF  3193   	fcall	_RfPointSelect
  8189                           
  8190                           ;RF_Control_B1.c: 197: if (RF->ReceiveGO == 1 || RF->RxStatus == 1) {
  8191  135F  0021               	movlb	1	; select bank1
  8192  1360  083D               	movf	_RF^(0+128),w
  8193  1361  0086               	movwf	6
  8194  1362  0187               	clrf	7
  8195  1363  1881               	btfsc	1,1
  8196  1364  2B6A               	goto	l6076
  8197  1365  083D               	movf	_RF^(0+128),w
  8198  1366  0086               	movwf	6
  8199  1367  0187               	clrf	7
  8200  1368  1D81               	btfss	1,3
  8201  1369  0008               	return
  8202  136A                     l6076:	
  8203                           
  8204                           ;RF_Control_B1.c: 198: if (RF->ReceiveGO == 1) {
  8205  136A  083D               	movf	_RF^(0+128),w
  8206  136B  0086               	movwf	6
  8207  136C  0187               	clrf	7
  8208  136D  1C81               	btfss	1,1
  8209  136E  2B73               	goto	l6080
  8210                           
  8211                           ;RF_Control_B1.c: 199: CC2500_WriteCommand(0x3A);
  8212  136F  303A               	movlw	58
  8213  1370  319F  278D  3193   	fcall	_CC2500_WriteCommand
  8214  1373                     l6080:	
  8215                           
  8216                           ;RF_Control_B1.c: 200: }
  8217                           ;RF_Control_B1.c: 201: RF->RxStatus = 0;
  8218  1373  0021               	movlb	1	; select bank1
  8219  1374  083D               	movf	_RF^(0+128),w
  8220  1375  0086               	movwf	6
  8221  1376  0187               	clrf	7
  8222  1377  1181               	bcf	1,3
  8223                           
  8224                           ;RF_Control_B1.c: 202: RF->ReceiveGO = 0;
  8225  1378  083D               	movf	_RF^(0+128),w
  8226  1379  0086               	movwf	6
  8227  137A  0187               	clrf	7
  8228  137B  1081               	bcf	1,1
  8229                           
  8230                           ;RF_Control_B1.c: 203: CC2500_WriteCommand(0x36);
  8231  137C  3036               	movlw	54
  8232  137D  319F  278D  3193   	fcall	_CC2500_WriteCommand
  8233                           
  8234                           ;RF_Control_B1.c: 204: setINT_GO(0);
  8235  1380  3000               	movlw	0
  8236  1381  319E  2693         	fcall	_setINT_GO
  8237  1383  0008               	return
  8238  1384                     __end_of_RF_RxDisable:	
  8239                           
  8240                           	psect	text33
  8241  1E93                     __ptext33:	
  8242 ;; *************** function _setINT_GO *****************
  8243 ;; Defined at:
  8244 ;;		line 258 in file "../src/MCU_B1.c"
  8245 ;; Parameters:    Size  Location     Type
  8246 ;;  command         1    wreg     unsigned char 
  8247 ;; Auto vars:     Size  Location     Type
  8248 ;;  command         1    0[BANK0 ] unsigned char 
  8249 ;; Return value:  Size  Location     Type
  8250 ;;		None               void
  8251 ;; Registers used:
  8252 ;;		wreg
  8253 ;; Tracked objects:
  8254 ;;		On entry : 0/0
  8255 ;;		On exit  : 0/0
  8256 ;;		Unchanged: 0/0
  8257 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8258 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8259 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8260 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8261 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8262 ;;Total ram usage:        1 bytes
  8263 ;; Hardware stack levels used:    1
  8264 ;; Hardware stack levels required when called:    5
  8265 ;; This function calls:
  8266 ;;		Nothing
  8267 ;; This function is called by:
  8268 ;;		_setRF_Main
  8269 ;;		_setRF_Enable
  8270 ;;		_RF_RxDisable
  8271 ;; This function uses a non-reentrant model
  8272 ;;
  8273                           
  8274                           
  8275                           ;psect for function _setINT_GO
  8276  1E93                     _setINT_GO:	
  8277                           
  8278                           ;incstack = 0
  8279                           ; Regs used in _setINT_GO: [wreg]
  8280                           ;setINT_GO@command stored from wreg
  8281  1E93  0020               	movlb	0	; select bank0
  8282  1E94  00A0               	movwf	setINT_GO@command
  8283                           
  8284                           ;MCU_B1.c: 259: INTF = 0;
  8285  1E95  108B               	bcf	11,1	;volatile
  8286                           
  8287                           ;MCU_B1.c: 260: INTE = command;
  8288  1E96  1C20               	btfss	setINT_GO@command,0
  8289  1E97  2E9A               	goto	u4480
  8290  1E98  160B               	bsf	11,4	;volatile
  8291  1E99  0008               	return
  8292  1E9A                     u4480:	
  8293  1E9A  120B               	bcf	11,4	;volatile
  8294  1E9B  0008               	return
  8295  1E9C                     __end_of_setINT_GO:	
  8296                           
  8297                           	psect	text34
  8298  1555                     __ptext34:	
  8299 ;; *************** function _CC2500_TxData *****************
  8300 ;; Defined at:
  8301 ;;		line 32 in file "../src/CC2500_B1.c"
  8302 ;; Parameters:    Size  Location     Type
  8303 ;;		None
  8304 ;; Auto vars:     Size  Location     Type
  8305 ;;  loop_e          1    5[BANK0 ] unsigned char 
  8306 ;; Return value:  Size  Location     Type
  8307 ;;		None               void
  8308 ;; Registers used:
  8309 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8310 ;; Tracked objects:
  8311 ;;		On entry : 0/0
  8312 ;;		On exit  : 0/0
  8313 ;;		Unchanged: 0/0
  8314 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8315 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8316 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8317 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8318 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8319 ;;Total ram usage:        2 bytes
  8320 ;; Hardware stack levels used:    1
  8321 ;; Hardware stack levels required when called:    7
  8322 ;; This function calls:
  8323 ;;		_CC2500_WriteByte
  8324 ;;		_CC2500_WriteCommand
  8325 ;; This function is called by:
  8326 ;;		_setRF_Main
  8327 ;; This function uses a non-reentrant model
  8328 ;;
  8329                           
  8330                           
  8331                           ;psect for function _CC2500_TxData
  8332  1555                     _CC2500_TxData:	
  8333                           
  8334                           ;CC2500_B1.c: 33: unsigned char loop_e;
  8335                           ;CC2500_B1.c: 35: RC4 = 0;
  8336                           
  8337                           ;incstack = 0
  8338                           ; Regs used in _CC2500_TxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8339  1555  0020               	movlb	0	; select bank0
  8340  1556  120E               	bcf	14,4	;volatile
  8341                           
  8342                           ;CC2500_B1.c: 36: SPI0Buffer = 0x3F + 0x40;
  8343  1557  307F               	movlw	127
  8344  1558  00A4               	movwf	??_CC2500_TxData
  8345  1559  0824               	movf	??_CC2500_TxData,w
  8346  155A  0021               	movlb	1	; select bank1
  8347  155B  00C1               	movwf	_SPI0Buffer^(0+128)
  8348  155C                     l268:	
  8349                           ;CC2500_B1.c: 37: while (RC2 == 1);
  8350                           
  8351  155C  0020               	movlb	0	; select bank0
  8352  155D  190E               	btfsc	14,2	;volatile
  8353  155E  2D5C               	goto	l268
  8354                           
  8355                           ;CC2500_B1.c: 38: CC2500_WriteByte();
  8356  155F  3191  2159  3195   	fcall	_CC2500_WriteByte
  8357                           
  8358                           ;CC2500_B1.c: 39: SPI0Buffer = Tx_Length;
  8359  1562  0021               	movlb	1	; select bank1
  8360  1563  0842               	movf	_Tx_Length^(0+128),w
  8361  1564  0020               	movlb	0	; select bank0
  8362  1565  00A4               	movwf	??_CC2500_TxData
  8363  1566  0824               	movf	??_CC2500_TxData,w
  8364  1567  0021               	movlb	1	; select bank1
  8365  1568  00C1               	movwf	_SPI0Buffer^(0+128)
  8366                           
  8367                           ;CC2500_B1.c: 40: CC2500_WriteByte();
  8368  1569  3191  2159  3195   	fcall	_CC2500_WriteByte
  8369                           
  8370                           ;CC2500_B1.c: 41: for (loop_e = 0; loop_e < Tx_Length; loop_e++) {
  8371  156C  0020               	movlb	0	; select bank0
  8372  156D  01A5               	clrf	CC2500_TxData@loop_e
  8373  156E                     l5896:	
  8374  156E  0021               	movlb	1	; select bank1
  8375  156F  0842               	movf	_Tx_Length^(0+128),w
  8376  1570  0020               	movlb	0	; select bank0
  8377  1571  0225               	subwf	CC2500_TxData@loop_e,w
  8378  1572  1803               	btfsc	3,0
  8379  1573  2D86               	goto	l273
  8380                           
  8381                           ;CC2500_B1.c: 42: SPI0Buffer = RF_Data[loop_e];
  8382  1574  0825               	movf	CC2500_TxData@loop_e,w
  8383  1575  3EA0               	addlw	_RF_Data& (0+255)
  8384  1576  0086               	movwf	6
  8385  1577  0187               	clrf	7
  8386  1578  0801               	movf	1,w
  8387  1579  00A4               	movwf	??_CC2500_TxData
  8388  157A  0824               	movf	??_CC2500_TxData,w
  8389  157B  0021               	movlb	1	; select bank1
  8390  157C  00C1               	movwf	_SPI0Buffer^(0+128)
  8391                           
  8392                           ;CC2500_B1.c: 43: CC2500_WriteByte();
  8393  157D  3191  2159  3195   	fcall	_CC2500_WriteByte
  8394  1580  3001               	movlw	1
  8395  1581  0020               	movlb	0	; select bank0
  8396  1582  00A4               	movwf	??_CC2500_TxData
  8397  1583  0824               	movf	??_CC2500_TxData,w
  8398  1584  07A5               	addwf	CC2500_TxData@loop_e,f
  8399  1585  2D6E               	goto	l5896
  8400  1586                     l273:	
  8401                           
  8402                           ;CC2500_B1.c: 44: }
  8403                           ;CC2500_B1.c: 45: RC4 = 1;
  8404  1586  160E               	bsf	14,4	;volatile
  8405                           
  8406                           ;CC2500_B1.c: 46: CC2500_WriteCommand(0x35);
  8407  1587  3035               	movlw	53
  8408  1588  319F  278D  3195   	fcall	_CC2500_WriteCommand
  8409  158B                     l274:	
  8410                           ;CC2500_B1.c: 47: while (RB0 == 0);
  8411                           
  8412  158B  0020               	movlb	0	; select bank0
  8413  158C  1C0D               	btfss	13,0	;volatile
  8414  158D  2D8B               	goto	l274
  8415  158E                     l277:	
  8416                           ;CC2500_B1.c: 48: while (RB0 == 1);
  8417                           
  8418  158E  180D               	btfsc	13,0	;volatile
  8419  158F  2D8E               	goto	l277
  8420                           
  8421                           ;CC2500_B1.c: 49: CC2500_WriteCommand(0x36);
  8422  1590  3036               	movlw	54
  8423  1591  319F  278D  3195   	fcall	_CC2500_WriteCommand
  8424                           
  8425                           ;CC2500_B1.c: 50: CC2500_WriteCommand(0x3B);
  8426  1594  303B               	movlw	59
  8427  1595  319F  278D         	fcall	_CC2500_WriteCommand
  8428                           
  8429                           ;CC2500_B1.c: 51: Transceive_OK = 1;
  8430  1597  14FC               	bsf	_Transceive_OK/(0+8),_Transceive_OK& (0+7)
  8431  1598  0008               	return
  8432  1599                     __end_of_CC2500_TxData:	
  8433                           
  8434                           	psect	text35
  8435  08D8                     __ptext35:	
  8436 ;; *************** function _CC2500_RxData *****************
  8437 ;; Defined at:
  8438 ;;		line 57 in file "../src/CC2500_B1.c"
  8439 ;; Parameters:    Size  Location     Type
  8440 ;;		None
  8441 ;; Auto vars:     Size  Location     Type
  8442 ;;  loop_f          1    5[BANK0 ] unsigned char 
  8443 ;; Return value:  Size  Location     Type
  8444 ;;		None               void
  8445 ;; Registers used:
  8446 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8447 ;; Tracked objects:
  8448 ;;		On entry : 0/0
  8449 ;;		On exit  : 0/0
  8450 ;;		Unchanged: 0/0
  8451 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8452 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8453 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8454 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8455 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8456 ;;Total ram usage:        2 bytes
  8457 ;; Hardware stack levels used:    1
  8458 ;; Hardware stack levels required when called:    7
  8459 ;; This function calls:
  8460 ;;		_CC2500_ReadByte
  8461 ;;		_CC2500_ReadStatus
  8462 ;;		_CC2500_WriteByte
  8463 ;;		_CC2500_WriteCommand
  8464 ;; This function is called by:
  8465 ;;		_setRF_Main
  8466 ;; This function uses a non-reentrant model
  8467 ;;
  8468                           
  8469                           
  8470                           ;psect for function _CC2500_RxData
  8471  08D8                     _CC2500_RxData:	
  8472                           
  8473                           ;CC2500_B1.c: 58: unsigned char loop_f;
  8474                           ;CC2500_B1.c: 62: if (RB0 == 1)
  8475                           
  8476                           ;incstack = 0
  8477                           ; Regs used in _CC2500_RxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8478  08D8  0020               	movlb	0	; select bank0
  8479  08D9  180D               	btfsc	13,0	;volatile
  8480  08DA                     l284:	
  8481                           ;CC2500_B1.c: 63: {
  8482                           ;CC2500_B1.c: 64: while (RB0 == 1);
  8483                           
  8484  08DA  180D               	btfsc	13,0	;volatile
  8485  08DB  28DA               	goto	l284
  8486                           
  8487                           ;CC2500_B1.c: 65: }
  8488                           ;CC2500_B1.c: 66: CC2500_ReadStatus(0x3B);
  8489  08DC  303B               	movlw	59
  8490  08DD  3191  21F2  3188   	fcall	_CC2500_ReadStatus
  8491                           
  8492                           ;CC2500_B1.c: 67: if (s_data != 0)
  8493  08E0  0021               	movlb	1	; select bank1
  8494  08E1  0845               	movf	_s_data^(0+128),w
  8495  08E2  1903               	btfsc	3,2
  8496  08E3  292E               	goto	l5942
  8497                           
  8498                           ;CC2500_B1.c: 69: {
  8499                           ;CC2500_B1.c: 70: RC4 = 0;
  8500  08E4  0020               	movlb	0	; select bank0
  8501  08E5  120E               	bcf	14,4	;volatile
  8502                           
  8503                           ;CC2500_B1.c: 71: SPI0Buffer = 0x3F + 0xC0;
  8504  08E6  30FF               	movlw	255
  8505  08E7  00A4               	movwf	??_CC2500_RxData
  8506  08E8  0824               	movf	??_CC2500_RxData,w
  8507  08E9  0021               	movlb	1	; select bank1
  8508  08EA  00C1               	movwf	_SPI0Buffer^(0+128)
  8509  08EB                     l288:	
  8510                           ;CC2500_B1.c: 72: while (RC2 == 1);
  8511                           
  8512  08EB  0020               	movlb	0	; select bank0
  8513  08EC  190E               	btfsc	14,2	;volatile
  8514  08ED  28EB               	goto	l288
  8515                           
  8516                           ;CC2500_B1.c: 73: CC2500_WriteByte();
  8517  08EE  3191  2159  3188   	fcall	_CC2500_WriteByte
  8518                           
  8519                           ;CC2500_B1.c: 75: CC2500_ReadByte();
  8520  08F1  3188  2000  3188   	fcall	_CC2500_ReadByte
  8521                           
  8522                           ;CC2500_B1.c: 76: Rx_Length = SPI0Buffer;
  8523  08F4  0021               	movlb	1	; select bank1
  8524  08F5  0841               	movf	_SPI0Buffer^(0+128),w
  8525  08F6  0020               	movlb	0	; select bank0
  8526  08F7  00A4               	movwf	??_CC2500_RxData
  8527  08F8  0824               	movf	??_CC2500_RxData,w
  8528  08F9  0021               	movlb	1	; select bank1
  8529  08FA  00C0               	movwf	_Rx_Length^(0+128)
  8530                           
  8531                           ;CC2500_B1.c: 77: for (loop_f = 0; loop_f < Rx_Length; loop_f++) {
  8532  08FB  0020               	movlb	0	; select bank0
  8533  08FC  01A5               	clrf	CC2500_RxData@loop_f
  8534  08FD                     l5928:	
  8535  08FD  0021               	movlb	1	; select bank1
  8536  08FE  0840               	movf	_Rx_Length^(0+128),w
  8537  08FF  0020               	movlb	0	; select bank0
  8538  0900  0225               	subwf	CC2500_RxData@loop_f,w
  8539  0901  1803               	btfsc	3,0
  8540  0902  2915               	goto	l5930
  8541                           
  8542                           ;CC2500_B1.c: 78: CC2500_ReadByte();
  8543  0903  3188  2000  3188   	fcall	_CC2500_ReadByte
  8544                           
  8545                           ;CC2500_B1.c: 79: RF_Data[loop_f] = SPI0Buffer;
  8546  0906  0021               	movlb	1	; select bank1
  8547  0907  0841               	movf	_SPI0Buffer^(0+128),w
  8548  0908  0020               	movlb	0	; select bank0
  8549  0909  00A4               	movwf	??_CC2500_RxData
  8550  090A  0825               	movf	CC2500_RxData@loop_f,w
  8551  090B  3EA0               	addlw	_RF_Data& (0+255)
  8552  090C  0086               	movwf	6
  8553  090D  0187               	clrf	7
  8554  090E  0824               	movf	??_CC2500_RxData,w
  8555  090F  0081               	movwf	1
  8556  0910  3001               	movlw	1
  8557  0911  00A4               	movwf	??_CC2500_RxData
  8558  0912  0824               	movf	??_CC2500_RxData,w
  8559  0913  07A5               	addwf	CC2500_RxData@loop_f,f
  8560  0914  28FD               	goto	l5928
  8561  0915                     l5930:	
  8562                           
  8563                           ;CC2500_B1.c: 80: }
  8564                           ;CC2500_B1.c: 81: CC2500_ReadByte();
  8565  0915  3188  2000  3188   	fcall	_CC2500_ReadByte
  8566                           
  8567                           ;CC2500_B1.c: 82: RSSI = SPI0Buffer;
  8568  0918  0021               	movlb	1	; select bank1
  8569  0919  0841               	movf	_SPI0Buffer^(0+128),w
  8570  091A  0020               	movlb	0	; select bank0
  8571  091B  00A4               	movwf	??_CC2500_RxData
  8572  091C  0824               	movf	??_CC2500_RxData,w
  8573  091D  0021               	movlb	1	; select bank1
  8574  091E  00BF               	movwf	_RSSI^(0+128)
  8575                           
  8576                           ;CC2500_B1.c: 83: CC2500_ReadByte();
  8577  091F  3188  2000  3188   	fcall	_CC2500_ReadByte
  8578                           
  8579                           ;CC2500_B1.c: 84: CRC = SPI0Buffer;
  8580  0922  0021               	movlb	1	; select bank1
  8581  0923  0841               	movf	_SPI0Buffer^(0+128),w
  8582  0924  0020               	movlb	0	; select bank0
  8583  0925  00A4               	movwf	??_CC2500_RxData
  8584  0926  0824               	movf	??_CC2500_RxData,w
  8585  0927  0021               	movlb	1	; select bank1
  8586  0928  00B7               	movwf	_CRC^(0+128)
  8587                           
  8588                           ;CC2500_B1.c: 85: RC4 = 1;
  8589  0929  0020               	movlb	0	; select bank0
  8590  092A  160E               	bsf	14,4	;volatile
  8591                           
  8592                           ;CC2500_B1.c: 86: if (CRC & 0x80)
  8593  092B  0021               	movlb	1	; select bank1
  8594  092C  1BB7               	btfsc	_CRC^(0+128),7
  8595                           
  8596                           ;CC2500_B1.c: 87: Receive_OK = 1;
  8597  092D  147C               	bsf	_Receive_OK/(0+8),_Receive_OK& (0+7)
  8598  092E                     l5942:	
  8599                           
  8600                           ;CC2500_B1.c: 88: }
  8601                           ;CC2500_B1.c: 89: CC2500_WriteCommand(0x36);
  8602  092E  3036               	movlw	54
  8603  092F  319F  278D  3188   	fcall	_CC2500_WriteCommand
  8604                           
  8605                           ;CC2500_B1.c: 90: CC2500_WriteCommand(0x3A);
  8606  0932  303A               	movlw	58
  8607  0933  319F  278D         	fcall	_CC2500_WriteCommand
  8608  0935  0008               	return
  8609  0936                     __end_of_CC2500_RxData:	
  8610                           
  8611                           	psect	text36
  8612  11F2                     __ptext36:	
  8613 ;; *************** function _CC2500_ReadStatus *****************
  8614 ;; Defined at:
  8615 ;;		line 262 in file "../src/CC2500_B1.c"
  8616 ;; Parameters:    Size  Location     Type
  8617 ;;  status_addr     1    wreg     unsigned char 
  8618 ;; Auto vars:     Size  Location     Type
  8619 ;;  status_addr     1    3[BANK0 ] unsigned char 
  8620 ;; Return value:  Size  Location     Type
  8621 ;;		None               void
  8622 ;; Registers used:
  8623 ;;		wreg, status,2, status,0, pclath, cstack
  8624 ;; Tracked objects:
  8625 ;;		On entry : 0/0
  8626 ;;		On exit  : 0/0
  8627 ;;		Unchanged: 0/0
  8628 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8629 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8630 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8631 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8632 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8633 ;;Total ram usage:        2 bytes
  8634 ;; Hardware stack levels used:    1
  8635 ;; Hardware stack levels required when called:    6
  8636 ;; This function calls:
  8637 ;;		_CC2500_ReadByte
  8638 ;;		_CC2500_WriteByte
  8639 ;; This function is called by:
  8640 ;;		_CC2500_RxData
  8641 ;; This function uses a non-reentrant model
  8642 ;;
  8643                           
  8644                           
  8645                           ;psect for function _CC2500_ReadStatus
  8646  11F2                     _CC2500_ReadStatus:	
  8647                           
  8648                           ;incstack = 0
  8649                           ; Regs used in _CC2500_ReadStatus: [wreg+status,2+status,0+pclath+cstack]
  8650                           ;CC2500_ReadStatus@status_addr stored from wreg
  8651  11F2  0020               	movlb	0	; select bank0
  8652  11F3  00A3               	movwf	CC2500_ReadStatus@status_addr
  8653                           
  8654                           ;CC2500_B1.c: 263: RC4 = 0;
  8655  11F4  120E               	bcf	14,4	;volatile
  8656                           
  8657                           ;CC2500_B1.c: 264: SPI0Buffer = status_addr + 0xC0;
  8658  11F5  0823               	movf	CC2500_ReadStatus@status_addr,w
  8659  11F6  3EC0               	addlw	192
  8660  11F7  00A2               	movwf	??_CC2500_ReadStatus
  8661  11F8  0822               	movf	??_CC2500_ReadStatus,w
  8662  11F9  0021               	movlb	1	; select bank1
  8663  11FA  00C1               	movwf	_SPI0Buffer^(0+128)
  8664  11FB                     l364:	
  8665                           ;CC2500_B1.c: 266: while (RC2 == 1);
  8666                           
  8667  11FB  0020               	movlb	0	; select bank0
  8668  11FC  190E               	btfsc	14,2	;volatile
  8669  11FD  29FB               	goto	l364
  8670                           
  8671                           ;CC2500_B1.c: 268: CC2500_WriteByte();
  8672  11FE  3191  2159  3191   	fcall	_CC2500_WriteByte
  8673                           
  8674                           ;CC2500_B1.c: 269: CC2500_ReadByte();
  8675  1201  3188  2000         	fcall	_CC2500_ReadByte
  8676                           
  8677                           ;CC2500_B1.c: 270: RC4 = 1;
  8678  1203  0020               	movlb	0	; select bank0
  8679  1204  160E               	bsf	14,4	;volatile
  8680                           
  8681                           ;CC2500_B1.c: 272: s_data = SPI0Buffer;
  8682  1205  0021               	movlb	1	; select bank1
  8683  1206  0841               	movf	_SPI0Buffer^(0+128),w
  8684  1207  0020               	movlb	0	; select bank0
  8685  1208  00A2               	movwf	??_CC2500_ReadStatus
  8686  1209  0822               	movf	??_CC2500_ReadStatus,w
  8687  120A  0021               	movlb	1	; select bank1
  8688  120B  00C5               	movwf	_s_data^(0+128)
  8689  120C  0008               	return
  8690  120D                     __end_of_CC2500_ReadStatus:	
  8691                           
  8692                           	psect	text37
  8693  0800                     __ptext37:	
  8694 ;; *************** function _CC2500_ReadByte *****************
  8695 ;; Defined at:
  8696 ;;		line 206 in file "../src/CC2500_B1.c"
  8697 ;; Parameters:    Size  Location     Type
  8698 ;;		None
  8699 ;; Auto vars:     Size  Location     Type
  8700 ;;  loop_b          1    1[BANK0 ] unsigned char 
  8701 ;; Return value:  Size  Location     Type
  8702 ;;		None               void
  8703 ;; Registers used:
  8704 ;;		wreg, status,2, status,0
  8705 ;; Tracked objects:
  8706 ;;		On entry : 0/0
  8707 ;;		On exit  : 0/0
  8708 ;;		Unchanged: 0/0
  8709 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8710 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8711 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8712 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8713 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8714 ;;Total ram usage:        2 bytes
  8715 ;; Hardware stack levels used:    1
  8716 ;; Hardware stack levels required when called:    5
  8717 ;; This function calls:
  8718 ;;		Nothing
  8719 ;; This function is called by:
  8720 ;;		_CC2500_RxData
  8721 ;;		_CC2500_ReadStatus
  8722 ;;		_CC2500_ReadREG
  8723 ;; This function uses a non-reentrant model
  8724 ;;
  8725                           
  8726                           
  8727                           ;psect for function _CC2500_ReadByte
  8728  0800                     _CC2500_ReadByte:	
  8729                           
  8730                           ;CC2500_B1.c: 207: unsigned char loop_b;
  8731                           ;CC2500_B1.c: 208: for (loop_b = 0; loop_b < 8; loop_b++) {
  8732                           
  8733                           ;incstack = 0
  8734                           ; Regs used in _CC2500_ReadByte: [wreg+status,2+status,0]
  8735  0800  0020               	movlb	0	; select bank0
  8736  0801  01A1               	clrf	CC2500_ReadByte@loop_b
  8737  0802                     L11:	
  8738  0802  3008               	movlw	8
  8739  0803  0221               	subwf	CC2500_ReadByte@loop_b,w
  8740  0804  1803               	btfsc	3,0
  8741  0805  0008               	return
  8742                           
  8743                           ;CC2500_B1.c: 209: RC1 = 1;
  8744  0806  148E               	bsf	14,1	;volatile
  8745                           
  8746                           ;CC2500_B1.c: 210: SPI0Buffer <<= 1;
  8747  0807  1003               	clrc
  8748  0808  0021               	movlb	1	; select bank1
  8749  0809  0DC1               	rlf	_SPI0Buffer^(0+128),f
  8750                           
  8751                           ;CC2500_B1.c: 211: if (RC2 == 1)
  8752  080A  0020               	movlb	0	; select bank0
  8753  080B  1D0E               	btfss	14,2	;volatile
  8754  080C  2810               	goto	l5694
  8755                           
  8756                           ;CC2500_B1.c: 212: SPI0Buffer |= 0x01;
  8757  080D  0021               	movlb	1	; select bank1
  8758  080E  1441               	bsf	_SPI0Buffer^(0+128),0
  8759  080F  2816               	goto	l5696
  8760  0810                     l5694:	
  8761                           
  8762                           ;CC2500_B1.c: 213: else
  8763                           ;CC2500_B1.c: 214: SPI0Buffer &= 0xFE;
  8764  0810  30FE               	movlw	254
  8765  0811  0020               	movlb	0	; select bank0
  8766  0812  00A0               	movwf	??_CC2500_ReadByte
  8767  0813  0820               	movf	??_CC2500_ReadByte,w
  8768  0814  0021               	movlb	1	; select bank1
  8769  0815  05C1               	andwf	_SPI0Buffer^(0+128),f
  8770  0816                     l5696:	
  8771                           
  8772                           ;CC2500_B1.c: 215: RC1 = 0;
  8773  0816  0020               	movlb	0	; select bank0
  8774  0817  108E               	bcf	14,1	;volatile
  8775  0818  3001               	movlw	1
  8776  0819  00A0               	movwf	??_CC2500_ReadByte
  8777  081A  0820               	movf	??_CC2500_ReadByte,w
  8778  081B  07A1               	addwf	CC2500_ReadByte@loop_b,f
  8779  081C  2802               	goto	L11
  8780  081D                     __end_of_CC2500_ReadByte:	
  8781                           
  8782                           	psect	text38
  8783  1E36                     __ptext38:	
  8784 ;; *************** function _RF_Initialization *****************
  8785 ;; Defined at:
  8786 ;;		line 16 in file "../src/RF_Control_B1.c"
  8787 ;; Parameters:    Size  Location     Type
  8788 ;;		None
  8789 ;; Auto vars:     Size  Location     Type
  8790 ;;		None
  8791 ;; Return value:  Size  Location     Type
  8792 ;;		None               void
  8793 ;; Registers used:
  8794 ;;		wreg, status,2, status,0, pclath, cstack
  8795 ;; Tracked objects:
  8796 ;;		On entry : 0/0
  8797 ;;		On exit  : 0/0
  8798 ;;		Unchanged: 0/0
  8799 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8800 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8801 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8802 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8803 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8804 ;;Total ram usage:        0 bytes
  8805 ;; Hardware stack levels used:    1
  8806 ;; Hardware stack levels required when called:    6
  8807 ;; This function calls:
  8808 ;;		_setRF_Initialization
  8809 ;; This function is called by:
  8810 ;;		_main
  8811 ;; This function uses a non-reentrant model
  8812 ;;
  8813                           
  8814                           
  8815                           ;psect for function _RF_Initialization
  8816  1E36                     _RF_Initialization:	
  8817                           
  8818                           ;RF_Control_B1.c: 18: setRF_Initialization(1);
  8819                           
  8820                           ;incstack = 0
  8821                           ; Regs used in _RF_Initialization: [wreg+status,2+status,0+pclath+cstack]
  8822  1E36  3001               	movlw	1
  8823  1E37  319E  2663         	fcall	_setRF_Initialization
  8824  1E39  0008               	return
  8825  1E3A                     __end_of_RF_Initialization:	
  8826                           
  8827                           	psect	text39
  8828  1E63                     __ptext39:	
  8829 ;; *************** function _setRF_Initialization *****************
  8830 ;; Defined at:
  8831 ;;		line 49 in file "../src/RF_Control_B1.c"
  8832 ;; Parameters:    Size  Location     Type
  8833 ;;  rf              1    wreg     unsigned char 
  8834 ;; Auto vars:     Size  Location     Type
  8835 ;;  rf              1    0[COMMON] unsigned char 
  8836 ;; Return value:  Size  Location     Type
  8837 ;;		None               void
  8838 ;; Registers used:
  8839 ;;		wreg
  8840 ;; Tracked objects:
  8841 ;;		On entry : 0/0
  8842 ;;		On exit  : 0/0
  8843 ;;		Unchanged: 0/0
  8844 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8845 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8846 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8847 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8848 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8849 ;;Total ram usage:        1 bytes
  8850 ;; Hardware stack levels used:    1
  8851 ;; Hardware stack levels required when called:    5
  8852 ;; This function calls:
  8853 ;;		Nothing
  8854 ;; This function is called by:
  8855 ;;		_RF_Initialization
  8856 ;; This function uses a non-reentrant model
  8857 ;;
  8858                           
  8859                           
  8860                           ;psect for function _setRF_Initialization
  8861  1E63                     _setRF_Initialization:	
  8862                           
  8863                           ;RF_Control_B1.c: 52: Tx_Length = 21;
  8864                           
  8865                           ;incstack = 0
  8866                           ; Regs used in _setRF_Initialization: [wreg]
  8867  1E63  3015               	movlw	21
  8868  1E64  0020               	movlb	0	; select bank0
  8869  1E65  00A0               	movwf	??_setRF_Initialization
  8870  1E66  0820               	movf	??_setRF_Initialization,w
  8871  1E67  0021               	movlb	1	; select bank1
  8872  1E68  00C2               	movwf	_Tx_Length^(0+128)
  8873  1E69  0008               	return
  8874  1E6A                     __end_of_setRF_Initialization:	
  8875                           
  8876                           	psect	text40
  8877  11D7                     __ptext40:	
  8878 ;; *************** function _Mcu_Initialization *****************
  8879 ;; Defined at:
  8880 ;;		line 30 in file "../src/MCU_B1.c"
  8881 ;; Parameters:    Size  Location     Type
  8882 ;;		None
  8883 ;; Auto vars:     Size  Location     Type
  8884 ;;		None
  8885 ;; Return value:  Size  Location     Type
  8886 ;;		None               void
  8887 ;; Registers used:
  8888 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8889 ;; Tracked objects:
  8890 ;;		On entry : 0/0
  8891 ;;		On exit  : 0/0
  8892 ;;		Unchanged: 0/0
  8893 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8894 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8895 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8896 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8897 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8898 ;;Total ram usage:        1 bytes
  8899 ;; Hardware stack levels used:    1
  8900 ;; Hardware stack levels required when called:    6
  8901 ;; This function calls:
  8902 ;;		_ADC_Set
  8903 ;;		_Fosc_Set
  8904 ;;		_INT_Set
  8905 ;;		_IOC_Set
  8906 ;;		_IO_Set
  8907 ;;		_TMR0_Set
  8908 ;;		_WDT_Set
  8909 ;; This function is called by:
  8910 ;;		_main
  8911 ;; This function uses a non-reentrant model
  8912 ;;
  8913                           
  8914                           
  8915                           ;psect for function _Mcu_Initialization
  8916  11D7                     _Mcu_Initialization:	
  8917                           
  8918                           ;MCU_B1.c: 32: Fosc_Set();
  8919                           
  8920                           ;incstack = 0
  8921                           ; Regs used in _Mcu_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8922  11D7  319E  2632  3191   	fcall	_Fosc_Set
  8923                           
  8924                           ;MCU_B1.c: 34: IO_Set();
  8925  11DA  3191  21A4  3191   	fcall	_IO_Set
  8926                           
  8927                           ;MCU_B1.c: 36: TMR0_Set();
  8928  11DD  319F  2736  3191   	fcall	_TMR0_Set
  8929                           
  8930                           ;MCU_B1.c: 38: ;;
  8931                           ;MCU_B1.c: 40: ADC_Set();
  8932  11E0  319E  265C  3191   	fcall	_ADC_Set
  8933                           
  8934                           ;MCU_B1.c: 44: INT_Set();
  8935  11E3  319E  2643  3191   	fcall	_INT_Set
  8936                           
  8937                           ;MCU_B1.c: 46: IOC_Set();
  8938  11E6  319F  2729  3191   	fcall	_IOC_Set
  8939                           
  8940                           ;MCU_B1.c: 48: ;;
  8941                           ;MCU_B1.c: 50: ;;
  8942                           ;MCU_B1.c: 52: Memory=&VarMemory;
  8943  11E9  3020               	movlw	_VarMemory& (0+255)
  8944  11EA  0020               	movlb	0	; select bank0
  8945  11EB  00A1               	movwf	??_Mcu_Initialization
  8946  11EC  0821               	movf	??_Mcu_Initialization,w
  8947  11ED  0021               	movlb	1	; select bank1
  8948  11EE  00EB               	movwf	_Memory^(0+128)
  8949                           
  8950                           ;MCU_B1.c: 54: WDT_Set();
  8951  11EF  3191  2141         	fcall	_WDT_Set
  8952  11F1  0008               	return
  8953  11F2                     __end_of_Mcu_Initialization:	
  8954                           
  8955                           	psect	text41
  8956  1141                     __ptext41:	
  8957 ;; *************** function _WDT_Set *****************
  8958 ;; Defined at:
  8959 ;;		line 899 in file "../src/MCU_B1.c"
  8960 ;; Parameters:    Size  Location     Type
  8961 ;;		None
  8962 ;; Auto vars:     Size  Location     Type
  8963 ;;		None
  8964 ;; Return value:  Size  Location     Type
  8965 ;;		None               void
  8966 ;; Registers used:
  8967 ;;		wreg, fsr1l, fsr1h
  8968 ;; Tracked objects:
  8969 ;;		On entry : 0/0
  8970 ;;		On exit  : 0/0
  8971 ;;		Unchanged: 0/0
  8972 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8973 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8974 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8975 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8976 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8977 ;;Total ram usage:        1 bytes
  8978 ;; Hardware stack levels used:    1
  8979 ;; Hardware stack levels required when called:    5
  8980 ;; This function calls:
  8981 ;;		Nothing
  8982 ;; This function is called by:
  8983 ;;		_Mcu_Initialization
  8984 ;; This function uses a non-reentrant model
  8985 ;;
  8986                           
  8987                           
  8988                           ;psect for function _WDT_Set
  8989  1141                     _WDT_Set:	
  8990                           
  8991                           ;MCU_B1.c: 900: WDTCON = 0b00010111;;
  8992                           
  8993                           ;incstack = 0
  8994                           ; Regs used in _WDT_Set: [wregfsr1]
  8995  1141  3017               	movlw	23
  8996  1142  0021               	movlb	1	; select bank1
  8997  1143  0097               	movwf	23	;volatile
  8998                           
  8999                           ;MCU_B1.c: 901: WDT = &_WDT;
  9000  1144  30E4               	movlw	__WDT& (0+255)
  9001  1145  0020               	movlb	0	; select bank0
  9002  1146  00A0               	movwf	??_WDT_Set
  9003  1147  0820               	movf	??_WDT_Set,w
  9004  1148  0021               	movlb	1	; select bank1
  9005  1149  00E9               	movwf	_WDT^(0+128)
  9006                           
  9007                           ;MCU_B1.c: 902: WDT->Enable = 1;
  9008  114A  0869               	movf	_WDT^(0+128),w
  9009  114B  0086               	movwf	6
  9010  114C  0187               	clrf	7
  9011  114D  1401               	bsf	1,0
  9012                           
  9013                           ;MCU_B1.c: 903: WDT->Count = 10;
  9014  114E  300A               	movlw	10
  9015  114F  0020               	movlb	0	; select bank0
  9016  1150  00A0               	movwf	??_WDT_Set
  9017  1151  0021               	movlb	1	; select bank1
  9018  1152  0A69               	incf	_WDT^(0+128),w
  9019  1153  0086               	movwf	6
  9020  1154  0187               	clrf	7
  9021  1155  0020               	movlb	0	; select bank0
  9022  1156  0820               	movf	??_WDT_Set,w
  9023  1157  0081               	movwf	1
  9024  1158  0008               	return
  9025  1159                     __end_of_WDT_Set:	
  9026                           
  9027                           	psect	text42
  9028  1F36                     __ptext42:	
  9029 ;; *************** function _TMR0_Set *****************
  9030 ;; Defined at:
  9031 ;;		line 128 in file "../src/MCU_B1.c"
  9032 ;; Parameters:    Size  Location     Type
  9033 ;;		None
  9034 ;; Auto vars:     Size  Location     Type
  9035 ;;		None
  9036 ;; Return value:  Size  Location     Type
  9037 ;;		None               void
  9038 ;; Registers used:
  9039 ;;		wreg, status,2
  9040 ;; Tracked objects:
  9041 ;;		On entry : 0/0
  9042 ;;		On exit  : 0/0
  9043 ;;		Unchanged: 0/0
  9044 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9045 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9046 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9047 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9048 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9049 ;;Total ram usage:        1 bytes
  9050 ;; Hardware stack levels used:    1
  9051 ;; Hardware stack levels required when called:    5
  9052 ;; This function calls:
  9053 ;;		Nothing
  9054 ;; This function is called by:
  9055 ;;		_Mcu_Initialization
  9056 ;; This function uses a non-reentrant model
  9057 ;;
  9058                           
  9059                           
  9060                           ;psect for function _TMR0_Set
  9061  1F36                     _TMR0_Set:	
  9062                           
  9063                           ;MCU_B1.c: 129: Timer0 = &VarTimer0;
  9064                           
  9065                           ;incstack = 0
  9066                           ; Regs used in _TMR0_Set: [wreg+status,2]
  9067  1F36  305A               	movlw	_VarTimer0& (0+255)
  9068  1F37  0020               	movlb	0	; select bank0
  9069  1F38  00A0               	movwf	??_TMR0_Set
  9070  1F39  0820               	movf	??_TMR0_Set,w
  9071  1F3A  0021               	movlb	1	; select bank1
  9072  1F3B  00E8               	movwf	_Timer0^(0+128)
  9073                           
  9074                           ;MCU_B1.c: 130: OPTION_REG = 0x00;
  9075  1F3C  0195               	clrf	21	;volatile
  9076                           
  9077                           ;MCU_B1.c: 131: TMR0 = (256-90);
  9078  1F3D  30A6               	movlw	166
  9079  1F3E  0020               	movlb	0	; select bank0
  9080  1F3F  0095               	movwf	21	;volatile
  9081                           
  9082                           ;MCU_B1.c: 132: TMR0IE = 1;
  9083  1F40  168B               	bsf	11,5	;volatile
  9084                           
  9085                           ;MCU_B1.c: 133: GIE = 1;
  9086  1F41  178B               	bsf	11,7	;volatile
  9087  1F42  0008               	return
  9088  1F43                     __end_of_TMR0_Set:	
  9089                           
  9090                           	psect	text43
  9091  11A4                     __ptext43:	
  9092 ;; *************** function _IO_Set *****************
  9093 ;; Defined at:
  9094 ;;		line 62 in file "../src/MCU_B1.c"
  9095 ;; Parameters:    Size  Location     Type
  9096 ;;		None
  9097 ;; Auto vars:     Size  Location     Type
  9098 ;;		None
  9099 ;; Return value:  Size  Location     Type
  9100 ;;		None               void
  9101 ;; Registers used:
  9102 ;;		wreg, status,2
  9103 ;; Tracked objects:
  9104 ;;		On entry : 0/0
  9105 ;;		On exit  : 0/0
  9106 ;;		Unchanged: 0/0
  9107 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9108 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9109 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9110 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9111 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9112 ;;Total ram usage:        0 bytes
  9113 ;; Hardware stack levels used:    1
  9114 ;; Hardware stack levels required when called:    5
  9115 ;; This function calls:
  9116 ;;		Nothing
  9117 ;; This function is called by:
  9118 ;;		_Mcu_Initialization
  9119 ;; This function uses a non-reentrant model
  9120 ;;
  9121                           
  9122                           
  9123                           ;psect for function _IO_Set
  9124  11A4                     _IO_Set:	
  9125                           
  9126                           ;MCU_B1.c: 90: TRISA = 0b01110111;;
  9127                           
  9128                           ;incstack = 0
  9129                           ; Regs used in _IO_Set: [wreg+status,2]
  9130  11A4  3077               	movlw	119
  9131  11A5  0021               	movlb	1	; select bank1
  9132  11A6  008C               	movwf	12	;volatile
  9133                           
  9134                           ;MCU_B1.c: 91: TRISB = 0b00000111;;
  9135  11A7  3007               	movlw	7
  9136  11A8  008D               	movwf	13	;volatile
  9137                           
  9138                           ;MCU_B1.c: 92: TRISC = 0b00001100;;
  9139  11A9  300C               	movlw	12
  9140  11AA  008E               	movwf	14	;volatile
  9141                           
  9142                           ;MCU_B1.c: 93: LATA = 0b00000000;;
  9143  11AB  0022               	movlb	2	; select bank2
  9144  11AC  018C               	clrf	12	;volatile
  9145                           
  9146                           ;MCU_B1.c: 94: LATB = 0b00000010;;
  9147  11AD  3002               	movlw	2
  9148  11AE  008D               	movwf	13	;volatile
  9149                           
  9150                           ;MCU_B1.c: 95: LATC = 0b00000000;;
  9151  11AF  018E               	clrf	14	;volatile
  9152                           
  9153                           ;MCU_B1.c: 96: ANSELA = 0b00100010;;
  9154  11B0  3022               	movlw	34
  9155  11B1  0023               	movlb	3	; select bank3
  9156  11B2  008C               	movwf	12	;volatile
  9157                           
  9158                           ;MCU_B1.c: 97: ANSELB = 0b00000000;;
  9159  11B3  018D               	clrf	13	;volatile
  9160                           
  9161                           ;MCU_B1.c: 98: ANSELC = 0b00000000;;
  9162  11B4  018E               	clrf	14	;volatile
  9163                           
  9164                           ;MCU_B1.c: 99: PORTA = 0b01110111;;
  9165  11B5  3077               	movlw	119
  9166  11B6  0020               	movlb	0	; select bank0
  9167  11B7  008C               	movwf	12	;volatile
  9168                           
  9169                           ;MCU_B1.c: 100: PORTB = 0b00000111;;
  9170  11B8  3007               	movlw	7
  9171  11B9  008D               	movwf	13	;volatile
  9172                           
  9173                           ;MCU_B1.c: 101: PORTC = 0b00001100;;
  9174  11BA  300C               	movlw	12
  9175  11BB  008E               	movwf	14	;volatile
  9176  11BC  0008               	return
  9177  11BD                     __end_of_IO_Set:	
  9178                           
  9179                           	psect	text44
  9180  1F29                     __ptext44:	
  9181 ;; *************** function _IOC_Set *****************
  9182 ;; Defined at:
  9183 ;;		line 268 in file "../src/MCU_B1.c"
  9184 ;; Parameters:    Size  Location     Type
  9185 ;;		None
  9186 ;; Auto vars:     Size  Location     Type
  9187 ;;		None
  9188 ;; Return value:  Size  Location     Type
  9189 ;;		None               void
  9190 ;; Registers used:
  9191 ;;		wreg, status,2
  9192 ;; Tracked objects:
  9193 ;;		On entry : 0/0
  9194 ;;		On exit  : 0/0
  9195 ;;		Unchanged: 0/0
  9196 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9197 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9198 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9199 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9200 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9201 ;;Total ram usage:        0 bytes
  9202 ;; Hardware stack levels used:    1
  9203 ;; Hardware stack levels required when called:    5
  9204 ;; This function calls:
  9205 ;;		Nothing
  9206 ;; This function is called by:
  9207 ;;		_Mcu_Initialization
  9208 ;; This function uses a non-reentrant model
  9209 ;;
  9210                           
  9211                           
  9212                           ;psect for function _IOC_Set
  9213  1F29                     _IOC_Set:	
  9214                           
  9215                           ;MCU_B1.c: 269: WPUB2 = 0;
  9216                           
  9217                           ;incstack = 0
  9218                           ; Regs used in _IOC_Set: [wreg+status,2]
  9219  1F29  0024               	movlb	4	; select bank4
  9220  1F2A  110D               	bcf	13,2	;volatile
  9221                           
  9222                           ;MCU_B1.c: 271: IOCBP = 0b00000100;
  9223  1F2B  3004               	movlw	4
  9224  1F2C  0027               	movlb	7	; select bank7
  9225  1F2D  0094               	movwf	20	;volatile
  9226                           
  9227                           ;MCU_B1.c: 272: IOCBN = 0b00000100;
  9228  1F2E  3004               	movlw	4
  9229  1F2F  0095               	movwf	21	;volatile
  9230                           
  9231                           ;MCU_B1.c: 287: IOCBF = 0b00000000;
  9232  1F30  0196               	clrf	22	;volatile
  9233                           
  9234                           ;MCU_B1.c: 289: IOCIE = 1;
  9235  1F31  158B               	bsf	11,3	;volatile
  9236                           
  9237                           ;MCU_B1.c: 290: IOCIF = 0;
  9238  1F32  100B               	bcf	11,0	;volatile
  9239                           
  9240                           ;MCU_B1.c: 291: PEIE = 1;
  9241  1F33  170B               	bsf	11,6	;volatile
  9242                           
  9243                           ;MCU_B1.c: 292: GIE = 1;
  9244  1F34  178B               	bsf	11,7	;volatile
  9245  1F35  0008               	return
  9246  1F36                     __end_of_IOC_Set:	
  9247                           
  9248                           	psect	text45
  9249  1E43                     __ptext45:	
  9250 ;; *************** function _INT_Set *****************
  9251 ;; Defined at:
  9252 ;;		line 240 in file "../src/MCU_B1.c"
  9253 ;; Parameters:    Size  Location     Type
  9254 ;;		None
  9255 ;; Auto vars:     Size  Location     Type
  9256 ;;		None
  9257 ;; Return value:  Size  Location     Type
  9258 ;;		None               void
  9259 ;; Registers used:
  9260 ;;		None
  9261 ;; Tracked objects:
  9262 ;;		On entry : 0/0
  9263 ;;		On exit  : 0/0
  9264 ;;		Unchanged: 0/0
  9265 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9266 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9267 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9268 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9269 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9270 ;;Total ram usage:        0 bytes
  9271 ;; Hardware stack levels used:    1
  9272 ;; Hardware stack levels required when called:    5
  9273 ;; This function calls:
  9274 ;;		Nothing
  9275 ;; This function is called by:
  9276 ;;		_Mcu_Initialization
  9277 ;; This function uses a non-reentrant model
  9278 ;;
  9279                           
  9280                           
  9281                           ;psect for function _INT_Set
  9282  1E43                     _INT_Set:	
  9283                           
  9284                           ;MCU_B1.c: 241: WPUB0 = 0;
  9285                           
  9286                           ;incstack = 0
  9287                           ; Regs used in _INT_Set: []
  9288  1E43  0024               	movlb	4	; select bank4
  9289  1E44  100D               	bcf	13,0	;volatile
  9290                           
  9291                           ;MCU_B1.c: 242: INTE = 1;
  9292  1E45  160B               	bsf	11,4	;volatile
  9293                           
  9294                           ;MCU_B1.c: 243: PEIE = 1;
  9295  1E46  170B               	bsf	11,6	;volatile
  9296                           
  9297                           ;MCU_B1.c: 244: GIE = 1;
  9298  1E47  178B               	bsf	11,7	;volatile
  9299  1E48  0008               	return
  9300  1E49                     __end_of_INT_Set:	
  9301                           
  9302                           	psect	text46
  9303  1E32                     __ptext46:	
  9304 ;; *************** function _Fosc_Set *****************
  9305 ;; Defined at:
  9306 ;;		line 58 in file "../src/MCU_B1.c"
  9307 ;; Parameters:    Size  Location     Type
  9308 ;;		None
  9309 ;; Auto vars:     Size  Location     Type
  9310 ;;		None
  9311 ;; Return value:  Size  Location     Type
  9312 ;;		None               void
  9313 ;; Registers used:
  9314 ;;		wreg
  9315 ;; Tracked objects:
  9316 ;;		On entry : 0/0
  9317 ;;		On exit  : 0/0
  9318 ;;		Unchanged: 0/0
  9319 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9320 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9321 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9322 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9323 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9324 ;;Total ram usage:        0 bytes
  9325 ;; Hardware stack levels used:    1
  9326 ;; Hardware stack levels required when called:    5
  9327 ;; This function calls:
  9328 ;;		Nothing
  9329 ;; This function is called by:
  9330 ;;		_Mcu_Initialization
  9331 ;; This function uses a non-reentrant model
  9332 ;;
  9333                           
  9334                           
  9335                           ;psect for function _Fosc_Set
  9336  1E32                     _Fosc_Set:	
  9337                           
  9338                           ;MCU_B1.c: 59: OSCCON = 0x78;
  9339                           
  9340                           ;incstack = 0
  9341                           ; Regs used in _Fosc_Set: [wreg]
  9342  1E32  3078               	movlw	120
  9343  1E33  0021               	movlb	1	; select bank1
  9344  1E34  0099               	movwf	25	;volatile
  9345  1E35  0008               	return
  9346  1E36                     __end_of_Fosc_Set:	
  9347                           
  9348                           	psect	text47
  9349  1E5C                     __ptext47:	
  9350 ;; *************** function _ADC_Set *****************
  9351 ;; Defined at:
  9352 ;;		line 314 in file "../src/MCU_B1.c"
  9353 ;; Parameters:    Size  Location     Type
  9354 ;;		None
  9355 ;; Auto vars:     Size  Location     Type
  9356 ;;		None
  9357 ;; Return value:  Size  Location     Type
  9358 ;;		None               void
  9359 ;; Registers used:
  9360 ;;		wreg
  9361 ;; Tracked objects:
  9362 ;;		On entry : 0/0
  9363 ;;		On exit  : 0/0
  9364 ;;		Unchanged: 0/0
  9365 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9366 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9367 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9368 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9369 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9370 ;;Total ram usage:        0 bytes
  9371 ;; Hardware stack levels used:    1
  9372 ;; Hardware stack levels required when called:    5
  9373 ;; This function calls:
  9374 ;;		Nothing
  9375 ;; This function is called by:
  9376 ;;		_Mcu_Initialization
  9377 ;; This function uses a non-reentrant model
  9378 ;;
  9379                           
  9380                           
  9381                           ;psect for function _ADC_Set
  9382  1E5C                     _ADC_Set:	
  9383                           
  9384                           ;MCU_B1.c: 315: ADCON1 = 0xf2;
  9385                           
  9386                           ;incstack = 0
  9387                           ; Regs used in _ADC_Set: [wreg]
  9388  1E5C  30F2               	movlw	242
  9389  1E5D  0021               	movlb	1	; select bank1
  9390  1E5E  009E               	movwf	30	;volatile
  9391                           
  9392                           ;MCU_B1.c: 316: FVRCON = 0xc0;
  9393  1E5F  30C0               	movlw	192
  9394  1E60  0022               	movlb	2	; select bank2
  9395  1E61  0097               	movwf	23	;volatile
  9396  1E62  0008               	return
  9397  1E63                     __end_of_ADC_Set:	
  9398                           
  9399                           	psect	text48
  9400  1F03                     __ptext48:	
  9401 ;; *************** function _LED_Main *****************
  9402 ;; Defined at:
  9403 ;;		line 51 in file "../src/LED_B1.c"
  9404 ;; Parameters:    Size  Location     Type
  9405 ;;		None
  9406 ;; Auto vars:     Size  Location     Type
  9407 ;;		None
  9408 ;; Return value:  Size  Location     Type
  9409 ;;		None               void
  9410 ;; Registers used:
  9411 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9412 ;; Tracked objects:
  9413 ;;		On entry : 0/0
  9414 ;;		On exit  : 0/0
  9415 ;;		Unchanged: 0/0
  9416 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9417 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9418 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9419 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9420 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9421 ;;Total ram usage:        0 bytes
  9422 ;; Hardware stack levels used:    1
  9423 ;; Hardware stack levels required when called:    7
  9424 ;; This function calls:
  9425 ;;		_setLED_Main
  9426 ;; This function is called by:
  9427 ;;		_main
  9428 ;; This function uses a non-reentrant model
  9429 ;;
  9430                           
  9431                           
  9432                           ;psect for function _LED_Main
  9433  1F03                     _LED_Main:	
  9434                           
  9435                           ;LED_B1.c: 54: setLED_Main(1);
  9436                           
  9437                           ;incstack = 0
  9438                           ; Regs used in _LED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9439  1F03  3001               	movlw	1
  9440  1F04  3194  24D5  319F   	fcall	_setLED_Main
  9441                           
  9442                           ;LED_B1.c: 57: setLED_Main(2);
  9443  1F07  3002               	movlw	2
  9444  1F08  3194  24D5  319F   	fcall	_setLED_Main
  9445                           
  9446                           ;LED_B1.c: 63: setLED_Main(99);
  9447  1F0B  3063               	movlw	99
  9448  1F0C  3194  24D5         	fcall	_setLED_Main
  9449  1F0E  0008               	return
  9450  1F0F                     __end_of_LED_Main:	
  9451                           
  9452                           	psect	text49
  9453  14D5                     __ptext49:	
  9454 ;; *************** function _setLED_Main *****************
  9455 ;; Defined at:
  9456 ;;		line 215 in file "../src/LED_B1.c"
  9457 ;; Parameters:    Size  Location     Type
  9458 ;;  led             1    wreg     unsigned char 
  9459 ;; Auto vars:     Size  Location     Type
  9460 ;;  led             1    4[BANK0 ] unsigned char 
  9461 ;; Return value:  Size  Location     Type
  9462 ;;		None               void
  9463 ;; Registers used:
  9464 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9465 ;; Tracked objects:
  9466 ;;		On entry : 0/0
  9467 ;;		On exit  : 0/0
  9468 ;;		Unchanged: 0/0
  9469 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9470 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9471 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9472 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9473 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9474 ;;Total ram usage:        3 bytes
  9475 ;; Hardware stack levels used:    1
  9476 ;; Hardware stack levels required when called:    6
  9477 ;; This function calls:
  9478 ;;		_LedPointSelect
  9479 ;; This function is called by:
  9480 ;;		_LED_Main
  9481 ;; This function uses a non-reentrant model
  9482 ;;
  9483                           
  9484                           
  9485                           ;psect for function _setLED_Main
  9486  14D5                     _setLED_Main:	
  9487                           
  9488                           ;incstack = 0
  9489                           ; Regs used in _setLED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9490                           ;setLED_Main@led stored from wreg
  9491  14D5  0020               	movlb	0	; select bank0
  9492  14D6  00A4               	movwf	setLED_Main@led
  9493                           
  9494                           ;LED_B1.c: 217: LedPointSelect(led);
  9495  14D7  0824               	movf	setLED_Main@led,w
  9496  14D8  3192  22C5  3194   	fcall	_LedPointSelect
  9497                           
  9498                           ;LED_B1.c: 218: if(LED->GO)
  9499  14DB  0021               	movlb	1	; select bank1
  9500  14DC  083C               	movf	_LED^(0+128),w
  9501  14DD  0086               	movwf	6
  9502  14DE  0187               	clrf	7
  9503  14DF  1C81               	btfss	1,1
  9504  14E0  0008               	return
  9505                           
  9506                           ;LED_B1.c: 219: {
  9507                           ;LED_B1.c: 220: LED->Time++;
  9508  14E1  0A3C               	incf	_LED^(0+128),w
  9509  14E2  0086               	movwf	6
  9510  14E3  0187               	clrf	7
  9511  14E4  3001               	movlw	1
  9512  14E5  0781               	addwf	1,f
  9513  14E6  3141               	addfsr 1,1
  9514  14E7  1803               	skipnc
  9515  14E8  0A81               	incf	1,f
  9516                           
  9517                           ;LED_B1.c: 221: if(LED->Time >= 500/10)
  9518  14E9  0A3C               	incf	_LED^(0+128),w
  9519  14EA  0086               	movwf	6
  9520  14EB  0187               	clrf	7
  9521  14EC  3F40               	moviw [0]fsr1
  9522  14ED  0020               	movlb	0	; select bank0
  9523  14EE  00A2               	movwf	??_setLED_Main
  9524  14EF  3F41               	moviw [1]fsr1
  9525  14F0  00A3               	movwf	??_setLED_Main+1
  9526  14F1  3000               	movlw	0
  9527  14F2  0223               	subwf	??_setLED_Main+1,w
  9528  14F3  3032               	movlw	50
  9529  14F4  1903               	skipnz
  9530  14F5  0222               	subwf	??_setLED_Main,w
  9531  14F6  1C03               	skipc
  9532  14F7  0008               	return
  9533                           
  9534                           ;LED_B1.c: 222: {
  9535                           ;LED_B1.c: 223: LED->Time=0;
  9536  14F8  0021               	movlb	1	; select bank1
  9537  14F9  0A3C               	incf	_LED^(0+128),w
  9538  14FA  0086               	movwf	6
  9539  14FB  0187               	clrf	7
  9540  14FC  3000               	movlw	0
  9541  14FD  3FC0               	movwi [0]fsr1
  9542  14FE  3FC1               	movwi [1]fsr1
  9543                           
  9544                           ;LED_B1.c: 225: if(led == 1)
  9545  14FF  0020               	movlb	0	; select bank0
  9546  1500  0824               	movf	setLED_Main@led,w
  9547  1501  3A01               	xorlw	1
  9548  1502  1D03               	skipz
  9549  1503  2D07               	goto	l6476
  9550                           
  9551                           ;LED_B1.c: 226: {
  9552                           ;LED_B1.c: 227: RA3=~RA3;
  9553  1504  3008               	movlw	8
  9554  1505  068C               	xorwf	12,f
  9555                           
  9556                           ;LED_B1.c: 228: }
  9557  1506  0008               	return
  9558  1507                     l6476:	
  9559                           
  9560                           ;LED_B1.c: 231: else if(led == 2)
  9561  1507  0824               	movf	setLED_Main@led,w
  9562  1508  3A02               	xorlw	2
  9563  1509  1D03               	skipz
  9564  150A  2D0E               	goto	l6480
  9565                           
  9566                           ;LED_B1.c: 232: {
  9567                           ;LED_B1.c: 233: RC7=~RC7;
  9568  150B  3080               	movlw	128
  9569  150C  068E               	xorwf	14,f
  9570                           
  9571                           ;LED_B1.c: 234: }
  9572  150D  0008               	return
  9573  150E                     l6480:	
  9574                           
  9575                           ;LED_B1.c: 243: else if(led == 99)
  9576  150E  0824               	movf	setLED_Main@led,w
  9577  150F  3A63               	xorlw	99
  9578  1510  1D03               	skipz
  9579  1511  0008               	return
  9580                           
  9581                           ;LED_B1.c: 244: {
  9582                           ;LED_B1.c: 245: RB5=~RB5;
  9583  1512  3020               	movlw	32
  9584  1513  068D               	xorwf	13,f
  9585  1514  0008               	return
  9586  1515                     __end_of_setLED_Main:	
  9587                           
  9588                           	psect	text50
  9589  1EF7                     __ptext50:	
  9590 ;; *************** function _LED_Initialization *****************
  9591 ;; Defined at:
  9592 ;;		line 35 in file "../src/LED_B1.c"
  9593 ;; Parameters:    Size  Location     Type
  9594 ;;		None
  9595 ;; Auto vars:     Size  Location     Type
  9596 ;;		None
  9597 ;; Return value:  Size  Location     Type
  9598 ;;		None               void
  9599 ;; Registers used:
  9600 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9601 ;; Tracked objects:
  9602 ;;		On entry : 0/0
  9603 ;;		On exit  : 0/0
  9604 ;;		Unchanged: 0/0
  9605 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9606 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9607 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9608 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9609 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9610 ;;Total ram usage:        0 bytes
  9611 ;; Hardware stack levels used:    1
  9612 ;; Hardware stack levels required when called:    8
  9613 ;; This function calls:
  9614 ;;		_setLED_Initialization
  9615 ;; This function is called by:
  9616 ;;		_main
  9617 ;; This function uses a non-reentrant model
  9618 ;;
  9619                           
  9620                           
  9621                           ;psect for function _LED_Initialization
  9622  1EF7                     _LED_Initialization:	
  9623                           
  9624                           ;LED_B1.c: 38: setLED_Initialization(1);
  9625                           
  9626                           ;incstack = 0
  9627                           ; Regs used in _LED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9628  1EF7  3001               	movlw	1
  9629  1EF8  3190  2076  319E   	fcall	_setLED_Initialization
  9630                           
  9631                           ;LED_B1.c: 41: setLED_Initialization(2);
  9632  1EFB  3002               	movlw	2
  9633  1EFC  3190  2076  319E   	fcall	_setLED_Initialization
  9634                           
  9635                           ;LED_B1.c: 47: setLED_Initialization(99);
  9636  1EFF  3063               	movlw	99
  9637  1F00  3190  2076         	fcall	_setLED_Initialization
  9638  1F02  0008               	return
  9639  1F03                     __end_of_LED_Initialization:	
  9640                           
  9641                           	psect	text51
  9642  1076                     __ptext51:	
  9643 ;; *************** function _setLED_Initialization *****************
  9644 ;; Defined at:
  9645 ;;		line 67 in file "../src/LED_B1.c"
  9646 ;; Parameters:    Size  Location     Type
  9647 ;;  led             1    wreg     unsigned char 
  9648 ;; Auto vars:     Size  Location     Type
  9649 ;;  led             1    4[BANK0 ] unsigned char 
  9650 ;; Return value:  Size  Location     Type
  9651 ;;		None               void
  9652 ;; Registers used:
  9653 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9654 ;; Tracked objects:
  9655 ;;		On entry : 0/0
  9656 ;;		On exit  : 0/0
  9657 ;;		Unchanged: 0/0
  9658 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9659 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9660 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9661 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9662 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9663 ;;Total ram usage:        1 bytes
  9664 ;; Hardware stack levels used:    1
  9665 ;; Hardware stack levels required when called:    7
  9666 ;; This function calls:
  9667 ;;		_LedPointSelect
  9668 ;;		_setLED
  9669 ;; This function is called by:
  9670 ;;		_LED_Initialization
  9671 ;; This function uses a non-reentrant model
  9672 ;;
  9673                           
  9674                           
  9675                           ;psect for function _setLED_Initialization
  9676  1076                     _setLED_Initialization:	
  9677                           
  9678                           ;incstack = 0
  9679                           ; Regs used in _setLED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  9680                           ;setLED_Initialization@led stored from wreg
  9681  1076  0020               	movlb	0	; select bank0
  9682  1077  00A4               	movwf	setLED_Initialization@led
  9683                           
  9684                           ;LED_B1.c: 69: LedPointSelect(led);
  9685  1078  0824               	movf	setLED_Initialization@led,w
  9686  1079  3192  22C5  3190   	fcall	_LedPointSelect
  9687                           
  9688                           ;LED_B1.c: 70: LED->Enable=1;
  9689  107C  0021               	movlb	1	; select bank1
  9690  107D  083C               	movf	_LED^(0+128),w
  9691  107E  0086               	movwf	6
  9692  107F  0187               	clrf	7
  9693  1080  1401               	bsf	1,0
  9694                           
  9695                           ;LED_B1.c: 71: setLED(led,0);
  9696  1081  0020               	movlb	0	; select bank0
  9697  1082  01A2               	clrf	setLED@command
  9698  1083  0824               	movf	setLED_Initialization@led,w
  9699  1084  3188  207A         	fcall	_setLED
  9700  1086  0008               	return
  9701  1087                     __end_of_setLED_Initialization:	
  9702                           
  9703                           	psect	text52
  9704  1599                     __ptext52:	
  9705 ;; *************** function _Flash_Memory_Main *****************
  9706 ;; Defined at:
  9707 ;;		line 793 in file "../src/MCU_B1.c"
  9708 ;; Parameters:    Size  Location     Type
  9709 ;;		None
  9710 ;; Auto vars:     Size  Location     Type
  9711 ;;		None
  9712 ;; Return value:  Size  Location     Type
  9713 ;;		None               void
  9714 ;; Registers used:
  9715 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9716 ;; Tracked objects:
  9717 ;;		On entry : 0/0
  9718 ;;		On exit  : 0/0
  9719 ;;		Unchanged: 0/0
  9720 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9721 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9722 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9723 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9724 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9725 ;;Total ram usage:        0 bytes
  9726 ;; Hardware stack levels used:    1
  9727 ;; Hardware stack levels required when called:    8
  9728 ;; This function calls:
  9729 ;;		_Flash_Memory_Modify
  9730 ;; This function is called by:
  9731 ;;		_main
  9732 ;; This function uses a non-reentrant model
  9733 ;;
  9734                           
  9735                           
  9736                           ;psect for function _Flash_Memory_Main
  9737  1599                     _Flash_Memory_Main:	
  9738                           
  9739                           ;MCU_B1.c: 794: if (Memory->GO) {
  9740                           
  9741                           ;incstack = 0
  9742                           ; Regs used in _Flash_Memory_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9743  1599  0021               	movlb	1	; select bank1
  9744  159A  086B               	movf	_Memory^(0+128),w
  9745  159B  3E24               	addlw	36
  9746  159C  0086               	movwf	6
  9747  159D  3002               	movlw	2	; select bank4/5
  9748  159E  0087               	movwf	7
  9749  159F  1C81               	btfss	1,1
  9750  15A0  0008               	return
  9751                           
  9752                           ;MCU_B1.c: 795: if (Memory->Modify) {
  9753  15A1  086B               	movf	_Memory^(0+128),w
  9754  15A2  3E24               	addlw	36
  9755  15A3  0086               	movwf	6
  9756  15A4  3002               	movlw	2	; select bank4/5
  9757  15A5  0087               	movwf	7
  9758  15A6  1C01               	btfss	1,0
  9759  15A7  2DD6               	goto	l6950
  9760                           
  9761                           ;MCU_B1.c: 796: Memory->Time++;
  9762  15A8  086B               	movf	_Memory^(0+128),w
  9763  15A9  3E22               	addlw	34
  9764  15AA  0086               	movwf	6
  9765  15AB  3002               	movlw	2	; select bank4/5
  9766  15AC  0087               	movwf	7
  9767  15AD  3001               	movlw	1
  9768  15AE  0781               	addwf	1,f
  9769  15AF  3141               	addfsr 1,1
  9770  15B0  1803               	skipnc
  9771  15B1  0A81               	incf	1,f
  9772                           
  9773                           ;MCU_B1.c: 797: if (Memory->Time == 25)
  9774  15B2  086B               	movf	_Memory^(0+128),w
  9775  15B3  3E22               	addlw	34
  9776  15B4  0086               	movwf	6
  9777  15B5  3002               	movlw	2	; select bank4/5
  9778  15B6  0087               	movwf	7
  9779  15B7  3F40               	moviw [0]fsr1
  9780  15B8  3A19               	xorlw	25
  9781  15B9  1D03               	skipz
  9782  15BA  2DBD               	goto	u6105
  9783  15BB  3F41               	moviw [1]fsr1
  9784  15BC  3A00               	xorlw	0
  9785  15BD                     u6105:	
  9786  15BD  1D03               	skipz
  9787  15BE  0008               	return
  9788                           
  9789                           ;MCU_B1.c: 798: {
  9790                           ;MCU_B1.c: 799: Memory->Time = 0;
  9791  15BF  086B               	movf	_Memory^(0+128),w
  9792  15C0  3E22               	addlw	34
  9793  15C1  0086               	movwf	6
  9794  15C2  3002               	movlw	2	; select bank4/5
  9795  15C3  0087               	movwf	7
  9796  15C4  3000               	movlw	0
  9797  15C5  3FC0               	movwi [0]fsr1
  9798  15C6  3FC1               	movwi [1]fsr1
  9799                           
  9800                           ;MCU_B1.c: 800: Memory->Modify = 0;
  9801  15C7  086B               	movf	_Memory^(0+128),w
  9802  15C8  3E24               	addlw	36
  9803  15C9  0086               	movwf	6
  9804  15CA  3002               	movlw	2	; select bank4/5
  9805  15CB  0087               	movwf	7
  9806  15CC  1001               	bcf	1,0
  9807                           
  9808                           ;MCU_B1.c: 801: Memory->GO = 0;
  9809  15CD  086B               	movf	_Memory^(0+128),w
  9810  15CE  3E24               	addlw	36
  9811  15CF  0086               	movwf	6
  9812  15D0  3002               	movlw	2	; select bank4/5
  9813  15D1  0087               	movwf	7
  9814  15D2  1081               	bcf	1,1
  9815                           
  9816                           ;MCU_B1.c: 802: Flash_Memory_Modify();
  9817  15D3  318A  2203         	fcall	_Flash_Memory_Modify
  9818                           
  9819                           ;MCU_B1.c: 804: }
  9820                           ;MCU_B1.c: 805: } else {
  9821  15D5  0008               	return
  9822  15D6                     l6950:	
  9823                           
  9824                           ;MCU_B1.c: 806: Memory->GO = 0;
  9825  15D6  0021               	movlb	1	; select bank1
  9826  15D7  086B               	movf	_Memory^(0+128),w
  9827  15D8  3E24               	addlw	36
  9828  15D9  0086               	movwf	6
  9829  15DA  3002               	movlw	2	; select bank4/5
  9830  15DB  0087               	movwf	7
  9831  15DC  1081               	bcf	1,1
  9832  15DD  0008               	return
  9833  15DE                     __end_of_Flash_Memory_Main:	
  9834                           
  9835                           	psect	text53
  9836  0A03                     __ptext53:	
  9837 ;; *************** function _Flash_Memory_Modify *****************
  9838 ;; Defined at:
  9839 ;;		line 863 in file "../src/MCU_B1.c"
  9840 ;; Parameters:    Size  Location     Type
  9841 ;;		None
  9842 ;; Auto vars:     Size  Location     Type
  9843 ;;  i               1    6[BANK0 ] unsigned char 
  9844 ;; Return value:  Size  Location     Type
  9845 ;;		None               void
  9846 ;; Registers used:
  9847 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9848 ;; Tracked objects:
  9849 ;;		On entry : 0/0
  9850 ;;		On exit  : 0/0
  9851 ;;		Unchanged: 0/0
  9852 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9853 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9854 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9855 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9856 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9857 ;;Total ram usage:        3 bytes
  9858 ;; Hardware stack levels used:    1
  9859 ;; Hardware stack levels required when called:    7
  9860 ;; This function calls:
  9861 ;;		_Flash_Memory_Erasing
  9862 ;;		_Flash_Memory_Read
  9863 ;;		_Flash_Memory_Write
  9864 ;; This function is called by:
  9865 ;;		_Flash_Memory_Main
  9866 ;; This function uses a non-reentrant model
  9867 ;;
  9868                           
  9869                           
  9870                           ;psect for function _Flash_Memory_Modify
  9871  0A03                     _Flash_Memory_Modify:	
  9872                           
  9873                           ;MCU_B1.c: 864: char i;
  9874                           ;MCU_B1.c: 865: for (i = 0; i < 32; i++) {
  9875                           
  9876                           ;incstack = 0
  9877                           ; Regs used in _Flash_Memory_Modify: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9878  0A03  0020               	movlb	0	; select bank0
  9879  0A04  01A6               	clrf	Flash_Memory_Modify@i
  9880  0A05  3020               	movlw	32
  9881  0A06  0226               	subwf	Flash_Memory_Modify@i,w
  9882  0A07  1803               	btfsc	3,0
  9883  0A08  2A22               	goto	l6564
  9884  0A09                     l6558:	
  9885                           
  9886                           ;MCU_B1.c: 866: Memory->Data[i] = Flash_Memory_Read(i);
  9887  0A09  0826               	movf	Flash_Memory_Modify@i,w
  9888  0A0A  3191  218B  318A   	fcall	_Flash_Memory_Read
  9889  0A0D  0020               	movlb	0	; select bank0
  9890  0A0E  00A4               	movwf	??_Flash_Memory_Modify
  9891  0A0F  0826               	movf	Flash_Memory_Modify@i,w
  9892  0A10  0021               	movlb	1	; select bank1
  9893  0A11  076B               	addwf	_Memory^(0+128),w
  9894  0A12  0020               	movlb	0	; select bank0
  9895  0A13  00A5               	movwf	??_Flash_Memory_Modify+1
  9896  0A14  0825               	movf	??_Flash_Memory_Modify+1,w
  9897  0A15  0086               	movwf	6
  9898  0A16  3002               	movlw	2	; select bank4/5
  9899  0A17  0087               	movwf	7
  9900  0A18  0824               	movf	??_Flash_Memory_Modify,w
  9901  0A19  0081               	movwf	1
  9902  0A1A  3001               	movlw	1
  9903  0A1B  00A4               	movwf	??_Flash_Memory_Modify
  9904  0A1C  0824               	movf	??_Flash_Memory_Modify,w
  9905  0A1D  07A6               	addwf	Flash_Memory_Modify@i,f
  9906  0A1E  3020               	movlw	32
  9907  0A1F  0226               	subwf	Flash_Memory_Modify@i,w
  9908  0A20  1C03               	skipc
  9909  0A21  2A09               	goto	l6558
  9910  0A22                     l6564:	
  9911                           
  9912                           ;MCU_B1.c: 867: }
  9913                           ;MCU_B1.c: 868: Memory->Data[0]=product->Data[12];
  9914  0A22  087D               	movf	_product,w
  9915  0A23  3E0C               	addlw	12
  9916  0A24  0086               	movwf	6
  9917  0A25  3001               	movlw	1	; select bank2/3
  9918  0A26  0087               	movwf	7
  9919  0A27  0801               	movf	1,w
  9920  0A28  00A4               	movwf	??_Flash_Memory_Modify
  9921  0A29  0021               	movlb	1	; select bank1
  9922  0A2A  086B               	movf	_Memory^(0+128),w
  9923  0A2B  0086               	movwf	6
  9924  0A2C  3002               	movlw	2	; select bank4/5
  9925  0A2D  0087               	movwf	7
  9926  0A2E  0020               	movlb	0	; select bank0
  9927  0A2F  0824               	movf	??_Flash_Memory_Modify,w
  9928  0A30  0081               	movwf	1
  9929                           
  9930                           ;MCU_B1.c: 869: Memory->Data[1]=product->Data[13];
  9931  0A31  087D               	movf	_product,w
  9932  0A32  3E0D               	addlw	13
  9933  0A33  0086               	movwf	6
  9934  0A34  3001               	movlw	1	; select bank2/3
  9935  0A35  0087               	movwf	7
  9936  0A36  0801               	movf	1,w
  9937  0A37  00A4               	movwf	??_Flash_Memory_Modify
  9938  0A38  0021               	movlb	1	; select bank1
  9939  0A39  0A6B               	incf	_Memory^(0+128),w
  9940  0A3A  0086               	movwf	6
  9941  0A3B  3002               	movlw	2	; select bank4/5
  9942  0A3C  0087               	movwf	7
  9943  0A3D  0020               	movlb	0	; select bank0
  9944  0A3E  0824               	movf	??_Flash_Memory_Modify,w
  9945  0A3F  0081               	movwf	1
  9946                           
  9947                           ;MCU_B1.c: 870: Memory->Data[2]=product->Data[14];
  9948  0A40  087D               	movf	_product,w
  9949  0A41  3E0E               	addlw	14
  9950  0A42  0086               	movwf	6
  9951  0A43  3001               	movlw	1	; select bank2/3
  9952  0A44  0087               	movwf	7
  9953  0A45  0801               	movf	1,w
  9954  0A46  00A4               	movwf	??_Flash_Memory_Modify
  9955  0A47  0021               	movlb	1	; select bank1
  9956  0A48  086B               	movf	_Memory^(0+128),w
  9957  0A49  3E02               	addlw	2
  9958  0A4A  0086               	movwf	6
  9959  0A4B  3002               	movlw	2	; select bank4/5
  9960  0A4C  0087               	movwf	7
  9961  0A4D  0020               	movlb	0	; select bank0
  9962  0A4E  0824               	movf	??_Flash_Memory_Modify,w
  9963  0A4F  0081               	movwf	1
  9964                           
  9965                           ;MCU_B1.c: 876: if (Memory->LoopSave) {
  9966  0A50  0021               	movlb	1	; select bank1
  9967  0A51  086B               	movf	_Memory^(0+128),w
  9968  0A52  3E24               	addlw	36
  9969  0A53  0086               	movwf	6
  9970  0A54  3002               	movlw	2	; select bank4/5
  9971  0A55  0087               	movwf	7
  9972  0A56  1D01               	btfss	1,2
  9973  0A57  2A68               	goto	l6568
  9974                           
  9975                           ;MCU_B1.c: 877: Memory->LoopSave = 0;
  9976  0A58  086B               	movf	_Memory^(0+128),w
  9977  0A59  3E24               	addlw	36
  9978  0A5A  0086               	movwf	6
  9979  0A5B  3002               	movlw	2	; select bank4/5
  9980  0A5C  0087               	movwf	7
  9981  0A5D  1101               	bcf	1,2
  9982                           
  9983                           ;MCU_B1.c: 878: myMain->FirstOpen = 0;
  9984  0A5E  086A               	movf	_myMain^(0+128),w
  9985  0A5F  0086               	movwf	6
  9986  0A60  3001               	movlw	1	; select bank2/3
  9987  0A61  0087               	movwf	7
  9988  0A62  1281               	bcf	1,5
  9989                           
  9990                           ;MCU_B1.c: 879: myMain->First = 0;
  9991  0A63  086A               	movf	_myMain^(0+128),w
  9992  0A64  0086               	movwf	6
  9993  0A65  3001               	movlw	1	; select bank2/3
  9994  0A66  0087               	movwf	7
  9995  0A67  1381               	bcf	1,7
  9996  0A68                     l6568:	
  9997                           
  9998                           ;MCU_B1.c: 881: }
  9999                           ;MCU_B1.c: 882: GIE = 0;
 10000  0A68  138B               	bcf	11,7	;volatile
 10001                           
 10002                           ;MCU_B1.c: 883: Flash_Memory_Erasing();
 10003  0A69  319E  26EB  318A   	fcall	_Flash_Memory_Erasing
 10004                           
 10005                           ;MCU_B1.c: 884: Flash_Memory_Write();
 10006  0A6C  3194  243A         	fcall	_Flash_Memory_Write
 10007                           
 10008                           ;MCU_B1.c: 885: GIE = 1;
 10009  0A6E  178B               	bsf	11,7	;volatile
 10010  0A6F  0008               	return
 10011  0A70                     __end_of_Flash_Memory_Modify:	
 10012                           
 10013                           	psect	text54
 10014  1EEB                     __ptext54:	
 10015 ;; *************** function _Flash_Memory_Erasing *****************
 10016 ;; Defined at:
 10017 ;;		line 852 in file "../src/MCU_B1.c"
 10018 ;; Parameters:    Size  Location     Type
 10019 ;;		None
 10020 ;; Auto vars:     Size  Location     Type
 10021 ;;		None
 10022 ;; Return value:  Size  Location     Type
 10023 ;;		None               void
 10024 ;; Registers used:
 10025 ;;		wreg, status,2, status,0, pclath, cstack
 10026 ;; Tracked objects:
 10027 ;;		On entry : 0/0
 10028 ;;		On exit  : 0/0
 10029 ;;		Unchanged: 0/0
 10030 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10031 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10032 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10033 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10034 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10035 ;;Total ram usage:        0 bytes
 10036 ;; Hardware stack levels used:    1
 10037 ;; Hardware stack levels required when called:    6
 10038 ;; This function calls:
 10039 ;;		_Flash_Memory_Unlock
 10040 ;; This function is called by:
 10041 ;;		_Flash_Memory_Modify
 10042 ;; This function uses a non-reentrant model
 10043 ;;
 10044                           
 10045                           
 10046                           ;psect for function _Flash_Memory_Erasing
 10047  1EEB                     _Flash_Memory_Erasing:	
 10048                           
 10049                           ;MCU_B1.c: 853: CFGS = 0;
 10050                           
 10051                           ;incstack = 0
 10052                           ; Regs used in _Flash_Memory_Erasing: [wreg+status,2+status,0+pclath+cstack]
 10053  1EEB  0023               	movlb	3	; select bank3
 10054  1EEC  1315               	bcf	21,6	;volatile
 10055                           
 10056                           ;MCU_B1.c: 854: PMADRH = 0x30;
 10057  1EED  3030               	movlw	48
 10058  1EEE  0092               	movwf	18	;volatile
 10059                           
 10060                           ;MCU_B1.c: 855: PMADRL = 0x00;
 10061  1EEF  0191               	clrf	17	;volatile
 10062                           
 10063                           ;MCU_B1.c: 856: FREE = 1;
 10064  1EF0  1615               	bsf	21,4	;volatile
 10065                           
 10066                           ;MCU_B1.c: 857: WREN = 1;
 10067  1EF1  1515               	bsf	21,2	;volatile
 10068                           
 10069                           ;MCU_B1.c: 858: Flash_Memory_Unlock();
 10070  1EF2  319E  268A         	fcall	_Flash_Memory_Unlock
 10071                           
 10072                           ;MCU_B1.c: 859: WREN = 0;
 10073  1EF4  0023               	movlb	3	; select bank3
 10074  1EF5  1115               	bcf	21,2	;volatile
 10075  1EF6  0008               	return
 10076  1EF7                     __end_of_Flash_Memory_Erasing:	
 10077                           
 10078                           	psect	text55
 10079  041E                     __ptext55:	
 10080 ;; *************** function _Flash_Memory_Initialization *****************
 10081 ;; Defined at:
 10082 ;;		line 752 in file "../src/MCU_B1.c"
 10083 ;; Parameters:    Size  Location     Type
 10084 ;;		None
 10085 ;; Auto vars:     Size  Location     Type
 10086 ;;  i               1   62[BANK0 ] unsigned char 
 10087 ;; Return value:  Size  Location     Type
 10088 ;;		None               void
 10089 ;; Registers used:
 10090 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10091 ;; Tracked objects:
 10092 ;;		On entry : 0/0
 10093 ;;		On exit  : 0/0
 10094 ;;		Unchanged: 0/0
 10095 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10096 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10097 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10098 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10099 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10100 ;;Total ram usage:        2 bytes
 10101 ;; Hardware stack levels used:    1
 10102 ;; Hardware stack levels required when called:    8
 10103 ;; This function calls:
 10104 ;;		_Flash_Memory_Read
 10105 ;;		_Flash_Memory_Write
 10106 ;;		_setPercentValue
 10107 ;; This function is called by:
 10108 ;;		_main
 10109 ;; This function uses a non-reentrant model
 10110 ;;
 10111                           
 10112                           
 10113                           ;psect for function _Flash_Memory_Initialization
 10114  041E                     _Flash_Memory_Initialization:	
 10115                           
 10116                           ;MCU_B1.c: 753: char i;
 10117                           ;MCU_B1.c: 754: if (Flash_Memory_Read(31) == 0xaa) {
 10118                           
 10119                           ;incstack = 0
 10120                           ; Regs used in _Flash_Memory_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 10121  041E  301F               	movlw	31
 10122  041F  3191  218B  3184   	fcall	_Flash_Memory_Read
 10123  0422  3AAA               	xorlw	170
 10124  0423  1D03               	skipz
 10125  0424  2C96               	goto	l6906
 10126                           
 10127                           ;MCU_B1.c: 755: product->Data[12] = Flash_Memory_Read(0);
 10128  0425  3000               	movlw	0
 10129  0426  3191  218B  3184   	fcall	_Flash_Memory_Read
 10130  0429  0020               	movlb	0	; select bank0
 10131  042A  00DD               	movwf	??_Flash_Memory_Initialization
 10132  042B  087D               	movf	_product,w
 10133  042C  3E0C               	addlw	12
 10134  042D  0086               	movwf	6
 10135  042E  3001               	movlw	1	; select bank2/3
 10136  042F  0087               	movwf	7
 10137  0430  085D               	movf	??_Flash_Memory_Initialization,w
 10138  0431  0081               	movwf	1
 10139                           
 10140                           ;MCU_B1.c: 756: product->Data[13] = Flash_Memory_Read(1);
 10141  0432  3001               	movlw	1
 10142  0433  3191  218B  3184   	fcall	_Flash_Memory_Read
 10143  0436  0020               	movlb	0	; select bank0
 10144  0437  00DD               	movwf	??_Flash_Memory_Initialization
 10145  0438  087D               	movf	_product,w
 10146  0439  3E0D               	addlw	13
 10147  043A  0086               	movwf	6
 10148  043B  3001               	movlw	1	; select bank2/3
 10149  043C  0087               	movwf	7
 10150  043D  085D               	movf	??_Flash_Memory_Initialization,w
 10151  043E  0081               	movwf	1
 10152                           
 10153                           ;MCU_B1.c: 757: product->Data[14] = Flash_Memory_Read(2);
 10154  043F  3002               	movlw	2
 10155  0440  3191  218B  3184   	fcall	_Flash_Memory_Read
 10156  0443  0020               	movlb	0	; select bank0
 10157  0444  00DD               	movwf	??_Flash_Memory_Initialization
 10158  0445  087D               	movf	_product,w
 10159  0446  3E0E               	addlw	14
 10160  0447  0086               	movwf	6
 10161  0448  3001               	movlw	1	; select bank2/3
 10162  0449  0087               	movwf	7
 10163  044A  085D               	movf	??_Flash_Memory_Initialization,w
 10164  044B  0081               	movwf	1
 10165                           
 10166                           ;MCU_B1.c: 763: i = setPercentValue(((char)((100-55)*1.5)));
 10167  044C  3043               	movlw	67
 10168  044D  3196  2623  3184   	fcall	_setPercentValue
 10169  0450  0020               	movlb	0	; select bank0
 10170  0451  00DD               	movwf	??_Flash_Memory_Initialization
 10171  0452  085D               	movf	??_Flash_Memory_Initialization,w
 10172  0453  00DE               	movwf	Flash_Memory_Initialization@i
 10173                           
 10174                           ;MCU_B1.c: 764: product->Data[21] = i;
 10175  0454  085E               	movf	Flash_Memory_Initialization@i,w
 10176  0455  00DD               	movwf	??_Flash_Memory_Initialization
 10177  0456  087D               	movf	_product,w
 10178  0457  3E15               	addlw	21
 10179  0458  0086               	movwf	6
 10180  0459  3001               	movlw	1	; select bank2/3
 10181  045A  0087               	movwf	7
 10182  045B  085D               	movf	??_Flash_Memory_Initialization,w
 10183  045C  0081               	movwf	1
 10184                           
 10185                           ;MCU_B1.c: 765: product->Data[22] = i;
 10186  045D  085E               	movf	Flash_Memory_Initialization@i,w
 10187  045E  00DD               	movwf	??_Flash_Memory_Initialization
 10188  045F  087D               	movf	_product,w
 10189  0460  3E16               	addlw	22
 10190  0461  0086               	movwf	6
 10191  0462  3001               	movlw	1	; select bank2/3
 10192  0463  0087               	movwf	7
 10193  0464  085D               	movf	??_Flash_Memory_Initialization,w
 10194  0465  0081               	movwf	1
 10195                           
 10196                           ;MCU_B1.c: 766: product->Data[23] = i;
 10197  0466  085E               	movf	Flash_Memory_Initialization@i,w
 10198  0467  00DD               	movwf	??_Flash_Memory_Initialization
 10199  0468  087D               	movf	_product,w
 10200  0469  3E17               	addlw	23
 10201  046A  0086               	movwf	6
 10202  046B  3001               	movlw	1	; select bank2/3
 10203  046C  0087               	movwf	7
 10204  046D  085D               	movf	??_Flash_Memory_Initialization,w
 10205  046E  0081               	movwf	1
 10206                           
 10207                           ;MCU_B1.c: 768: if (product->Data[12] == 0xff && product->Data[13] == 0xff && product->D
      +                          ata[14] == 0xff) {
 10208  046F  087D               	movf	_product,w
 10209  0470  3E0C               	addlw	12
 10210  0471  0086               	movwf	6
 10211  0472  3001               	movlw	1	; select bank2/3
 10212  0473  0087               	movwf	7
 10213  0474  0801               	movf	1,w
 10214  0475  3AFF               	xorlw	255
 10215  0476  1D03               	skipz
 10216  0477  0008               	return
 10217  0478  087D               	movf	_product,w
 10218  0479  3E0D               	addlw	13
 10219  047A  0086               	movwf	6
 10220  047B  3001               	movlw	1	; select bank2/3
 10221  047C  0087               	movwf	7
 10222  047D  0801               	movf	1,w
 10223  047E  3AFF               	xorlw	255
 10224  047F  1D03               	skipz
 10225  0480  0008               	return
 10226  0481  087D               	movf	_product,w
 10227  0482  3E0E               	addlw	14
 10228  0483  0086               	movwf	6
 10229  0484  3001               	movlw	1	; select bank2/3
 10230  0485  0087               	movwf	7
 10231  0486  0801               	movf	1,w
 10232  0487  3AFF               	xorlw	255
 10233  0488  1D03               	skipz
 10234  0489  0008               	return
 10235                           
 10236                           ;MCU_B1.c: 769: myMain->FirstOpen = 1;
 10237  048A  0021               	movlb	1	; select bank1
 10238  048B  086A               	movf	_myMain^(0+128),w
 10239  048C  0086               	movwf	6
 10240  048D  3001               	movlw	1	; select bank2/3
 10241  048E  0087               	movwf	7
 10242  048F  1681               	bsf	1,5
 10243                           
 10244                           ;MCU_B1.c: 770: myMain->First = 1;
 10245  0490  086A               	movf	_myMain^(0+128),w
 10246  0491  0086               	movwf	6
 10247  0492  3001               	movlw	1	; select bank2/3
 10248  0493  0087               	movwf	7
 10249  0494  1781               	bsf	1,7
 10250                           
 10251                           ;MCU_B1.c: 771: }
 10252                           ;MCU_B1.c: 772: } else {
 10253  0495  0008               	return
 10254  0496                     l6906:	
 10255                           
 10256                           ;MCU_B1.c: 773: i = setPercentValue(((char)((100-55)*1.5)));
 10257  0496  3043               	movlw	67
 10258  0497  3196  2623  3184   	fcall	_setPercentValue
 10259  049A  0020               	movlb	0	; select bank0
 10260  049B  00DD               	movwf	??_Flash_Memory_Initialization
 10261  049C  085D               	movf	??_Flash_Memory_Initialization,w
 10262  049D  00DE               	movwf	Flash_Memory_Initialization@i
 10263                           
 10264                           ;MCU_B1.c: 774: Memory->Data[0]=0xff;
 10265  049E  30FF               	movlw	255
 10266  049F  00DD               	movwf	??_Flash_Memory_Initialization
 10267  04A0  0021               	movlb	1	; select bank1
 10268  04A1  086B               	movf	_Memory^(0+128),w
 10269  04A2  0086               	movwf	6
 10270  04A3  3002               	movlw	2	; select bank4/5
 10271  04A4  0087               	movwf	7
 10272  04A5  0020               	movlb	0	; select bank0
 10273  04A6  085D               	movf	??_Flash_Memory_Initialization,w
 10274  04A7  0081               	movwf	1
 10275                           
 10276                           ;MCU_B1.c: 775: Memory->Data[1]=0xff;
 10277  04A8  30FF               	movlw	255
 10278  04A9  00DD               	movwf	??_Flash_Memory_Initialization
 10279  04AA  0021               	movlb	1	; select bank1
 10280  04AB  0A6B               	incf	_Memory^(0+128),w
 10281  04AC  0086               	movwf	6
 10282  04AD  3002               	movlw	2	; select bank4/5
 10283  04AE  0087               	movwf	7
 10284  04AF  0020               	movlb	0	; select bank0
 10285  04B0  085D               	movf	??_Flash_Memory_Initialization,w
 10286  04B1  0081               	movwf	1
 10287                           
 10288                           ;MCU_B1.c: 776: Memory->Data[2]=0xff;
 10289  04B2  30FF               	movlw	255
 10290  04B3  00DD               	movwf	??_Flash_Memory_Initialization
 10291  04B4  0021               	movlb	1	; select bank1
 10292  04B5  086B               	movf	_Memory^(0+128),w
 10293  04B6  3E02               	addlw	2
 10294  04B7  0086               	movwf	6
 10295  04B8  3002               	movlw	2	; select bank4/5
 10296  04B9  0087               	movwf	7
 10297  04BA  0020               	movlb	0	; select bank0
 10298  04BB  085D               	movf	??_Flash_Memory_Initialization,w
 10299  04BC  0081               	movwf	1
 10300                           
 10301                           ;MCU_B1.c: 777: Memory->Data[3]=0xff;
 10302  04BD  30FF               	movlw	255
 10303  04BE  00DD               	movwf	??_Flash_Memory_Initialization
 10304  04BF  0021               	movlb	1	; select bank1
 10305  04C0  086B               	movf	_Memory^(0+128),w
 10306  04C1  3E03               	addlw	3
 10307  04C2  0086               	movwf	6
 10308  04C3  3002               	movlw	2	; select bank4/5
 10309  04C4  0087               	movwf	7
 10310  04C5  0020               	movlb	0	; select bank0
 10311  04C6  085D               	movf	??_Flash_Memory_Initialization,w
 10312  04C7  0081               	movwf	1
 10313                           
 10314                           ;MCU_B1.c: 778: Memory->Data[4]=0xff;
 10315  04C8  30FF               	movlw	255
 10316  04C9  00DD               	movwf	??_Flash_Memory_Initialization
 10317  04CA  0021               	movlb	1	; select bank1
 10318  04CB  086B               	movf	_Memory^(0+128),w
 10319  04CC  3E04               	addlw	4
 10320  04CD  0086               	movwf	6
 10321  04CE  3002               	movlw	2	; select bank4/5
 10322  04CF  0087               	movwf	7
 10323  04D0  0020               	movlb	0	; select bank0
 10324  04D1  085D               	movf	??_Flash_Memory_Initialization,w
 10325  04D2  0081               	movwf	1
 10326                           
 10327                           ;MCU_B1.c: 779: Memory->Data[5]=0xff;
 10328  04D3  30FF               	movlw	255
 10329  04D4  00DD               	movwf	??_Flash_Memory_Initialization
 10330  04D5  0021               	movlb	1	; select bank1
 10331  04D6  086B               	movf	_Memory^(0+128),w
 10332  04D7  3E05               	addlw	5
 10333  04D8  0086               	movwf	6
 10334  04D9  3002               	movlw	2	; select bank4/5
 10335  04DA  0087               	movwf	7
 10336  04DB  0020               	movlb	0	; select bank0
 10337  04DC  085D               	movf	??_Flash_Memory_Initialization,w
 10338  04DD  0081               	movwf	1
 10339                           
 10340                           ;MCU_B1.c: 780: Memory->Data[31]=0xaa;
 10341  04DE  30AA               	movlw	170
 10342  04DF  00DD               	movwf	??_Flash_Memory_Initialization
 10343  04E0  0021               	movlb	1	; select bank1
 10344  04E1  086B               	movf	_Memory^(0+128),w
 10345  04E2  3E1F               	addlw	31
 10346  04E3  0086               	movwf	6
 10347  04E4  3002               	movlw	2	; select bank4/5
 10348  04E5  0087               	movwf	7
 10349  04E6  0020               	movlb	0	; select bank0
 10350  04E7  085D               	movf	??_Flash_Memory_Initialization,w
 10351  04E8  0081               	movwf	1
 10352                           
 10353                           ;MCU_B1.c: 781: product->Data[21] = i;
 10354  04E9  085E               	movf	Flash_Memory_Initialization@i,w
 10355  04EA  00DD               	movwf	??_Flash_Memory_Initialization
 10356  04EB  087D               	movf	_product,w
 10357  04EC  3E15               	addlw	21
 10358  04ED  0086               	movwf	6
 10359  04EE  3001               	movlw	1	; select bank2/3
 10360  04EF  0087               	movwf	7
 10361  04F0  085D               	movf	??_Flash_Memory_Initialization,w
 10362  04F1  0081               	movwf	1
 10363                           
 10364                           ;MCU_B1.c: 782: product->Data[22] = i;
 10365  04F2  085E               	movf	Flash_Memory_Initialization@i,w
 10366  04F3  00DD               	movwf	??_Flash_Memory_Initialization
 10367  04F4  087D               	movf	_product,w
 10368  04F5  3E16               	addlw	22
 10369  04F6  0086               	movwf	6
 10370  04F7  3001               	movlw	1	; select bank2/3
 10371  04F8  0087               	movwf	7
 10372  04F9  085D               	movf	??_Flash_Memory_Initialization,w
 10373  04FA  0081               	movwf	1
 10374                           
 10375                           ;MCU_B1.c: 783: product->Data[23] = i;
 10376  04FB  085E               	movf	Flash_Memory_Initialization@i,w
 10377  04FC  00DD               	movwf	??_Flash_Memory_Initialization
 10378  04FD  087D               	movf	_product,w
 10379  04FE  3E17               	addlw	23
 10380  04FF  0086               	movwf	6
 10381  0500  3001               	movlw	1	; select bank2/3
 10382  0501  0087               	movwf	7
 10383  0502  085D               	movf	??_Flash_Memory_Initialization,w
 10384  0503  0081               	movwf	1
 10385                           
 10386                           ;MCU_B1.c: 784: GIE = 0;
 10387  0504  138B               	bcf	11,7	;volatile
 10388                           
 10389                           ;MCU_B1.c: 785: Flash_Memory_Write();
 10390  0505  3194  243A         	fcall	_Flash_Memory_Write
 10391                           
 10392                           ;MCU_B1.c: 786: GIE = 1;
 10393  0507  178B               	bsf	11,7	;volatile
 10394                           
 10395                           ;MCU_B1.c: 787: myMain->FirstOpen = 1;
 10396  0508  0021               	movlb	1	; select bank1
 10397  0509  086A               	movf	_myMain^(0+128),w
 10398  050A  0086               	movwf	6
 10399  050B  3001               	movlw	1	; select bank2/3
 10400  050C  0087               	movwf	7
 10401  050D  1681               	bsf	1,5
 10402                           
 10403                           ;MCU_B1.c: 788: myMain->First = 1;
 10404  050E  086A               	movf	_myMain^(0+128),w
 10405  050F  0086               	movwf	6
 10406  0510  3001               	movlw	1	; select bank2/3
 10407  0511  0087               	movwf	7
 10408  0512  1781               	bsf	1,7
 10409  0513  0008               	return
 10410  0514                     __end_of_Flash_Memory_Initialization:	
 10411                           
 10412                           	psect	text56
 10413  143A                     __ptext56:	
 10414 ;; *************** function _Flash_Memory_Write *****************
 10415 ;; Defined at:
 10416 ;;		line 833 in file "../src/MCU_B1.c"
 10417 ;; Parameters:    Size  Location     Type
 10418 ;;		None
 10419 ;; Auto vars:     Size  Location     Type
 10420 ;;  i               1    1[BANK0 ] unsigned char 
 10421 ;; Return value:  Size  Location     Type
 10422 ;;		None               void
 10423 ;; Registers used:
 10424 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10425 ;; Tracked objects:
 10426 ;;		On entry : 0/0
 10427 ;;		On exit  : 0/0
 10428 ;;		Unchanged: 0/0
 10429 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10430 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10431 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10432 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10433 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10434 ;;Total ram usage:        2 bytes
 10435 ;; Hardware stack levels used:    1
 10436 ;; Hardware stack levels required when called:    6
 10437 ;; This function calls:
 10438 ;;		_Flash_Memory_Unlock
 10439 ;; This function is called by:
 10440 ;;		_Flash_Memory_Initialization
 10441 ;;		_Flash_Memory_Modify
 10442 ;; This function uses a non-reentrant model
 10443 ;;
 10444                           
 10445                           
 10446                           ;psect for function _Flash_Memory_Write
 10447  143A                     _Flash_Memory_Write:	
 10448                           
 10449                           ;MCU_B1.c: 834: char i;
 10450                           ;MCU_B1.c: 835: CFGS = 0;
 10451                           
 10452                           ;incstack = 0
 10453                           ; Regs used in _Flash_Memory_Write: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10454  143A  0023               	movlb	3	; select bank3
 10455  143B  1315               	bcf	21,6	;volatile
 10456                           
 10457                           ;MCU_B1.c: 836: PMADRH = 0x30;
 10458  143C  3030               	movlw	48
 10459  143D  0092               	movwf	18	;volatile
 10460                           
 10461                           ;MCU_B1.c: 837: PMDATH = 0;
 10462  143E  0194               	clrf	20	;volatile
 10463                           
 10464                           ;MCU_B1.c: 838: FREE = 0;
 10465  143F  1215               	bcf	21,4	;volatile
 10466                           
 10467                           ;MCU_B1.c: 839: LWLO = 1;
 10468  1440  1695               	bsf	21,5	;volatile
 10469                           
 10470                           ;MCU_B1.c: 840: WREN = 1;
 10471  1441  1515               	bsf	21,2	;volatile
 10472                           
 10473                           ;MCU_B1.c: 841: for (i = 0; i < 32; i++) {
 10474  1442  0020               	movlb	0	; select bank0
 10475  1443  01A1               	clrf	Flash_Memory_Write@i
 10476  1444  3020               	movlw	32
 10477  1445  0221               	subwf	Flash_Memory_Write@i,w
 10478  1446  1803               	btfsc	3,0
 10479  1447  2C64               	goto	l1381
 10480  1448                     l6038:	
 10481                           
 10482                           ;MCU_B1.c: 842: PMADRL = i;
 10483  1448  0821               	movf	Flash_Memory_Write@i,w
 10484  1449  0023               	movlb	3	; select bank3
 10485  144A  0091               	movwf	17	;volatile
 10486                           
 10487                           ;MCU_B1.c: 843: PMDATL = Memory->Data[i];
 10488  144B  0020               	movlb	0	; select bank0
 10489  144C  0821               	movf	Flash_Memory_Write@i,w
 10490  144D  0021               	movlb	1	; select bank1
 10491  144E  076B               	addwf	_Memory^(0+128),w
 10492  144F  0020               	movlb	0	; select bank0
 10493  1450  00A0               	movwf	??_Flash_Memory_Write
 10494  1451  0820               	movf	??_Flash_Memory_Write,w
 10495  1452  0086               	movwf	6
 10496  1453  3002               	movlw	2	; select bank4/5
 10497  1454  0087               	movwf	7
 10498  1455  0801               	movf	1,w
 10499  1456  0023               	movlb	3	; select bank3
 10500  1457  0093               	movwf	19	;volatile
 10501                           
 10502                           ;MCU_B1.c: 844: Flash_Memory_Unlock();
 10503  1458  319E  268A  3194   	fcall	_Flash_Memory_Unlock
 10504  145B  3001               	movlw	1
 10505  145C  0020               	movlb	0	; select bank0
 10506  145D  00A0               	movwf	??_Flash_Memory_Write
 10507  145E  0820               	movf	??_Flash_Memory_Write,w
 10508  145F  07A1               	addwf	Flash_Memory_Write@i,f
 10509  1460  3020               	movlw	32
 10510  1461  0221               	subwf	Flash_Memory_Write@i,w
 10511  1462  1C03               	skipc
 10512  1463  2C48               	goto	l6038
 10513  1464                     l1381:	
 10514                           
 10515                           ;MCU_B1.c: 845: }
 10516                           ;MCU_B1.c: 846: LWLO = 0;
 10517  1464  0023               	movlb	3	; select bank3
 10518  1465  1295               	bcf	21,5	;volatile
 10519                           
 10520                           ;MCU_B1.c: 847: Flash_Memory_Unlock();
 10521  1466  319E  268A         	fcall	_Flash_Memory_Unlock
 10522                           
 10523                           ;MCU_B1.c: 848: WREN = 0;
 10524  1468  0023               	movlb	3	; select bank3
 10525  1469  1115               	bcf	21,2	;volatile
 10526  146A  0008               	return
 10527  146B                     __end_of_Flash_Memory_Write:	
 10528                           
 10529                           	psect	text57
 10530  1E8A                     __ptext57:	
 10531 ;; *************** function _Flash_Memory_Unlock *****************
 10532 ;; Defined at:
 10533 ;;		line 812 in file "../src/MCU_B1.c"
 10534 ;; Parameters:    Size  Location     Type
 10535 ;;		None
 10536 ;; Auto vars:     Size  Location     Type
 10537 ;;		None
 10538 ;; Return value:  Size  Location     Type
 10539 ;;		None               void
 10540 ;; Registers used:
 10541 ;;		wreg
 10542 ;; Tracked objects:
 10543 ;;		On entry : 0/0
 10544 ;;		On exit  : 0/0
 10545 ;;		Unchanged: 0/0
 10546 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10547 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10548 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10549 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10550 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10551 ;;Total ram usage:        0 bytes
 10552 ;; Hardware stack levels used:    1
 10553 ;; Hardware stack levels required when called:    5
 10554 ;; This function calls:
 10555 ;;		Nothing
 10556 ;; This function is called by:
 10557 ;;		_Flash_Memory_Write
 10558 ;;		_Flash_Memory_Erasing
 10559 ;; This function uses a non-reentrant model
 10560 ;;
 10561                           
 10562                           
 10563                           ;psect for function _Flash_Memory_Unlock
 10564  1E8A                     _Flash_Memory_Unlock:	
 10565                           
 10566                           ;MCU_B1.c: 813: PMCON2 = 0x55;
 10567                           
 10568                           ;incstack = 0
 10569                           ; Regs used in _Flash_Memory_Unlock: [wreg]
 10570  1E8A  3055               	movlw	85
 10571  1E8B  0023               	movlb	3	; select bank3
 10572  1E8C  0096               	movwf	22	;volatile
 10573                           
 10574                           ;MCU_B1.c: 814: PMCON2 = 0xaa;
 10575  1E8D  30AA               	movlw	170
 10576  1E8E  0096               	movwf	22	;volatile
 10577                           
 10578                           ;MCU_B1.c: 815: WR = 1;
 10579  1E8F  1495               	bsf	21,1	;volatile
 10580                           
 10581                           ;MCU_B1.c: 816: __nop();
 10582  1E90  0000               	nop
 10583                           
 10584                           ;MCU_B1.c: 817: __nop();
 10585  1E91  0000               	nop
 10586  1E92  0008               	return
 10587  1E93                     __end_of_Flash_Memory_Unlock:	
 10588                           
 10589                           	psect	text58
 10590  118B                     __ptext58:	
 10591 ;; *************** function _Flash_Memory_Read *****************
 10592 ;; Defined at:
 10593 ;;		line 821 in file "../src/MCU_B1.c"
 10594 ;; Parameters:    Size  Location     Type
 10595 ;;  address         1    wreg     unsigned char 
 10596 ;; Auto vars:     Size  Location     Type
 10597 ;;  address         1    2[BANK0 ] unsigned char 
 10598 ;;  ret             1    3[BANK0 ] unsigned char 
 10599 ;;  i               1    1[BANK0 ] unsigned char 
 10600 ;; Return value:  Size  Location     Type
 10601 ;;                  1    wreg      unsigned char 
 10602 ;; Registers used:
 10603 ;;		wreg, status,2
 10604 ;; Tracked objects:
 10605 ;;		On entry : 0/0
 10606 ;;		On exit  : 0/0
 10607 ;;		Unchanged: 0/0
 10608 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10609 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10610 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10611 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10612 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10613 ;;Total ram usage:        4 bytes
 10614 ;; Hardware stack levels used:    1
 10615 ;; Hardware stack levels required when called:    5
 10616 ;; This function calls:
 10617 ;;		Nothing
 10618 ;; This function is called by:
 10619 ;;		_Flash_Memory_Initialization
 10620 ;;		_Flash_Memory_Modify
 10621 ;; This function uses a non-reentrant model
 10622 ;;
 10623                           
 10624                           
 10625                           ;psect for function _Flash_Memory_Read
 10626  118B                     _Flash_Memory_Read:	
 10627                           
 10628                           ;incstack = 0
 10629                           ; Regs used in _Flash_Memory_Read: [wreg+status,2]
 10630                           ;Flash_Memory_Read@address stored from wreg
 10631  118B  0020               	movlb	0	; select bank0
 10632  118C  00A2               	movwf	Flash_Memory_Read@address
 10633                           
 10634                           ;MCU_B1.c: 822: char i, ret = 0;
 10635  118D  01A3               	clrf	Flash_Memory_Read@ret
 10636                           
 10637                           ;MCU_B1.c: 823: PMADRH = 0x30;
 10638  118E  3030               	movlw	48
 10639  118F  0023               	movlb	3	; select bank3
 10640  1190  0092               	movwf	18	;volatile
 10641                           
 10642                           ;MCU_B1.c: 824: PMADRL = address;
 10643  1191  0020               	movlb	0	; select bank0
 10644  1192  0822               	movf	Flash_Memory_Read@address,w
 10645  1193  0023               	movlb	3	; select bank3
 10646  1194  0091               	movwf	17	;volatile
 10647                           
 10648                           ;MCU_B1.c: 825: CFGS = 0;
 10649  1195  1315               	bcf	21,6	;volatile
 10650                           
 10651                           ;MCU_B1.c: 826: RD = 1;
 10652  1196  1415               	bsf	21,0	;volatile
 10653                           
 10654                           ;MCU_B1.c: 827: i = PMDATH;
 10655  1197  0814               	movf	20,w	;volatile
 10656  1198  0020               	movlb	0	; select bank0
 10657  1199  00A0               	movwf	??_Flash_Memory_Read
 10658  119A  0820               	movf	??_Flash_Memory_Read,w
 10659  119B  00A1               	movwf	Flash_Memory_Read@i
 10660                           
 10661                           ;MCU_B1.c: 828: ret = PMDATL;
 10662  119C  0023               	movlb	3	; select bank3
 10663  119D  0813               	movf	19,w	;volatile
 10664  119E  0020               	movlb	0	; select bank0
 10665  119F  00A0               	movwf	??_Flash_Memory_Read
 10666  11A0  0820               	movf	??_Flash_Memory_Read,w
 10667  11A1  00A3               	movwf	Flash_Memory_Read@ret
 10668                           
 10669                           ;MCU_B1.c: 829: return ret;
 10670  11A2  0823               	movf	Flash_Memory_Read@ret,w
 10671  11A3  0008               	return
 10672  11A4                     __end_of_Flash_Memory_Read:	
 10673                           
 10674                           	psect	text59
 10675  1EC8                     __ptext59:	
 10676 ;; *************** function _DimmerLights_Main *****************
 10677 ;; Defined at:
 10678 ;;		line 386 in file "../src/Dimmer_B1.c"
 10679 ;; Parameters:    Size  Location     Type
 10680 ;;		None
 10681 ;; Auto vars:     Size  Location     Type
 10682 ;;		None
 10683 ;; Return value:  Size  Location     Type
 10684 ;;		None               void
 10685 ;; Registers used:
 10686 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10687 ;; Tracked objects:
 10688 ;;		On entry : 0/0
 10689 ;;		On exit  : 0/0
 10690 ;;		Unchanged: 0/0
 10691 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10692 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10693 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10694 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10695 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10696 ;;Total ram usage:        0 bytes
 10697 ;; Hardware stack levels used:    1
 10698 ;; Hardware stack levels required when called:   11
 10699 ;; This function calls:
 10700 ;;		_DimmerLights_Close
 10701 ;;		_setDimmerLights_Main
 10702 ;; This function is called by:
 10703 ;;		_main
 10704 ;; This function uses a non-reentrant model
 10705 ;;
 10706                           
 10707                           
 10708                           ;psect for function _DimmerLights_Main
 10709  1EC8                     _DimmerLights_Main:	
 10710                           
 10711                           ;Dimmer_B1.c: 388: setDimmerLights_Main(1);
 10712                           
 10713                           ;incstack = 0
 10714                           ; Regs used in _DimmerLights_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10715  1EC8  3001               	movlw	1
 10716  1EC9  318D  2536  319E   	fcall	_setDimmerLights_Main
 10717                           
 10718                           ;Dimmer_B1.c: 392: setDimmerLights_Main(2);
 10719  1ECC  3002               	movlw	2
 10720  1ECD  318D  2536  319E   	fcall	_setDimmerLights_Main
 10721                           
 10722                           ;Dimmer_B1.c: 399: DimmerLights_Close();
 10723  1ED0  3190  20C0         	fcall	_DimmerLights_Close
 10724  1ED2  0008               	return
 10725  1ED3                     __end_of_DimmerLights_Main:	
 10726                           
 10727                           	psect	text60
 10728  0D36                     __ptext60:	
 10729 ;; *************** function _setDimmerLights_Main *****************
 10730 ;; Defined at:
 10731 ;;		line 403 in file "../src/Dimmer_B1.c"
 10732 ;; Parameters:    Size  Location     Type
 10733 ;;  lights          1    wreg     unsigned char 
 10734 ;; Auto vars:     Size  Location     Type
 10735 ;;  lights          1   70[BANK0 ] unsigned char 
 10736 ;;  clear           1   69[BANK0 ] unsigned char 
 10737 ;; Return value:  Size  Location     Type
 10738 ;;		None               void
 10739 ;; Registers used:
 10740 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10741 ;; Tracked objects:
 10742 ;;		On entry : 0/0
 10743 ;;		On exit  : 0/0
 10744 ;;		Unchanged: 0/0
 10745 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10746 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10747 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10748 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10749 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10750 ;;Total ram usage:        2 bytes
 10751 ;; Hardware stack levels used:    1
 10752 ;; Hardware stack levels required when called:   10
 10753 ;; This function calls:
 10754 ;;		_DimmerLightsPointSelect
 10755 ;;		_setBuz
 10756 ;;		_setDimmerLights
 10757 ;;		_setDimmerLights_Adj
 10758 ;; This function is called by:
 10759 ;;		_DimmerLights_Main
 10760 ;; This function uses a non-reentrant model
 10761 ;;
 10762                           
 10763                           
 10764                           ;psect for function _setDimmerLights_Main
 10765  0D36                     _setDimmerLights_Main:	
 10766                           
 10767                           ;incstack = 0
 10768                           ; Regs used in _setDimmerLights_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10769                           ;setDimmerLights_Main@lights stored from wreg
 10770  0D36  0020               	movlb	0	; select bank0
 10771  0D37  00E6               	movwf	setDimmerLights_Main@lights
 10772                           
 10773                           ;Dimmer_B1.c: 404: char clear = 1;
 10774  0D38  01E5               	clrf	setDimmerLights_Main@clear
 10775  0D39  0AE5               	incf	setDimmerLights_Main@clear,f
 10776                           
 10777                           ;Dimmer_B1.c: 405: DimmerLightsPointSelect(lights);
 10778  0D3A  0866               	movf	setDimmerLights_Main@lights,w
 10779  0D3B  3190  2099  318D   	fcall	_DimmerLightsPointSelect
 10780                           
 10781                           ;Dimmer_B1.c: 418: if (lights == 1) {
 10782  0D3E  0020               	movlb	0	; select bank0
 10783  0D3F  0866               	movf	setDimmerLights_Main@lights,w
 10784  0D40  3A01               	xorlw	1
 10785  0D41  1D03               	skipz
 10786  0D42  2D46               	goto	l6424
 10787                           
 10788                           ;Dimmer_B1.c: 419: clear = (!DimmerLights22->Clear) ? 0 : 1;
 10789  0D43  0021               	movlb	1	; select bank1
 10790  0D44  083B               	movf	_DimmerLights22^(0+128),w
 10791  0D45  2D4C               	goto	L12
 10792  0D46                     l6424:	
 10793                           ;Dimmer_B1.c: 420: } else if (lights == 2) {
 10794                           
 10795  0D46  0866               	movf	setDimmerLights_Main@lights,w
 10796  0D47  3A02               	xorlw	2
 10797  0D48  1D03               	skipz
 10798  0D49  2D55               	goto	l6428
 10799                           
 10800                           ;Dimmer_B1.c: 421: clear = (!DimmerLights11->Clear) ? 0 : 1;
 10801  0D4A  0021               	movlb	1	; select bank1
 10802  0D4B  083A               	movf	_DimmerLights11^(0+128),w
 10803  0D4C                     L12:	
 10804  0D4C  3E09               	addlw	9
 10805  0D4D  0086               	movwf	6
 10806  0D4E  3001               	movlw	1	; select bank2/3
 10807  0D4F  0087               	movwf	7
 10808  0D50  3000               	movlw	0
 10809  0D51  1901               	btfsc	1,2
 10810  0D52  3001               	movlw	1
 10811  0D53  0020               	movlb	0	; select bank0
 10812  0D54  00E5               	movwf	setDimmerLights_Main@clear
 10813  0D55                     l6428:	
 10814                           
 10815                           ;Dimmer_B1.c: 422: }
 10816                           ;Dimmer_B1.c: 425: if (DimmerLights->Trigger) {
 10817  0D55  0879               	movf	_DimmerLights,w
 10818  0D56  3E08               	addlw	8
 10819  0D57  0086               	movwf	6
 10820  0D58  3001               	movlw	1	; select bank2/3
 10821  0D59  0087               	movwf	7
 10822  0D5A  1D01               	btfss	1,2
 10823  0D5B  2D80               	goto	l6442
 10824                           
 10825                           ;Dimmer_B1.c: 426: if (clear) {
 10826  0D5C  0865               	movf	setDimmerLights_Main@clear,w
 10827  0D5D  1903               	btfsc	3,2
 10828  0D5E  0008               	return
 10829                           
 10830                           ;Dimmer_B1.c: 427: if (DimmerLights->Switch) {
 10831  0D5F  0879               	movf	_DimmerLights,w
 10832  0D60  3E08               	addlw	8
 10833  0D61  0086               	movwf	6
 10834  0D62  3001               	movlw	1	; select bank2/3
 10835  0D63  0087               	movwf	7
 10836  0D64  1C81               	btfss	1,1
 10837  0D65  2D73               	goto	l6438
 10838                           
 10839                           ;Dimmer_B1.c: 428: DimmerLights->Trigger = 0;
 10840  0D66  0879               	movf	_DimmerLights,w
 10841  0D67  3E08               	addlw	8
 10842  0D68  0086               	movwf	6
 10843  0D69  3001               	movlw	1	; select bank2/3
 10844  0D6A  0087               	movwf	7
 10845  0D6B  1101               	bcf	1,2
 10846                           
 10847                           ;Dimmer_B1.c: 429: setDimmerLights(lights, 1);
 10848  0D6C  01A4               	clrf	setDimmerLights@status
 10849  0D6D  0AA4               	incf	setDimmerLights@status,f
 10850  0D6E  0866               	movf	setDimmerLights_Main@lights,w
 10851  0D6F  318C  24B7         	fcall	_setDimmerLights
 10852                           
 10853                           ;Dimmer_B1.c: 434: } else {
 10854  0D71  0020               	movlb	0	; select bank0
 10855  0D72  0008               	return
 10856  0D73                     l6438:	
 10857                           
 10858                           ;Dimmer_B1.c: 435: DimmerLights->Trigger = 0;
 10859  0D73  0879               	movf	_DimmerLights,w
 10860  0D74  3E08               	addlw	8
 10861  0D75  0086               	movwf	6
 10862  0D76  3001               	movlw	1	; select bank2/3
 10863  0D77  0087               	movwf	7
 10864  0D78  1101               	bcf	1,2
 10865                           
 10866                           ;Dimmer_B1.c: 436: setDimmerLights(lights, 0);
 10867  0D79  0020               	movlb	0	; select bank0
 10868  0D7A  01A4               	clrf	setDimmerLights@status
 10869  0D7B  0866               	movf	setDimmerLights_Main@lights,w
 10870  0D7C  318C  24B7         	fcall	_setDimmerLights
 10871  0D7E  0020               	movlb	0	; select bank0
 10872  0D7F  0008               	return
 10873  0D80                     l6442:	
 10874                           ;Dimmer_B1.c: 441: }
 10875                           ;Dimmer_B1.c: 442: }
 10876                           ;Dimmer_B1.c: 443: } else {
 10877                           
 10878                           
 10879                           ;Dimmer_B1.c: 444: if (DimmerLights->TriggerAdj) {
 10880  0D80  0879               	movf	_DimmerLights,w
 10881  0D81  3E08               	addlw	8
 10882  0D82  0086               	movwf	6
 10883  0D83  3001               	movlw	1	; select bank2/3
 10884  0D84  0087               	movwf	7
 10885  0D85  1A01               	btfsc	1,4
 10886  0D86  2D89               	goto	l6444
 10887  0D87  0020               	movlb	0	; select bank0
 10888  0D88  0008               	return
 10889  0D89                     l6444:	
 10890                           
 10891                           ;Dimmer_B1.c: 445: if (clear) {
 10892  0D89  0020               	movlb	0	; select bank0
 10893  0D8A  0865               	movf	setDimmerLights_Main@clear,w
 10894  0D8B  1903               	btfsc	3,2
 10895  0D8C  0008               	return
 10896                           
 10897                           ;Dimmer_B1.c: 446: DimmerLightsPointSelect(lights);
 10898  0D8D  0866               	movf	setDimmerLights_Main@lights,w
 10899  0D8E  3190  2099  318D   	fcall	_DimmerLightsPointSelect
 10900                           
 10901                           ;Dimmer_B1.c: 447: DimmerLights->TriggerAdj = 0;
 10902  0D91  0879               	movf	_DimmerLights,w
 10903  0D92  3E08               	addlw	8
 10904  0D93  0086               	movwf	6
 10905  0D94  3001               	movlw	1	; select bank2/3
 10906  0D95  0087               	movwf	7
 10907  0D96  1201               	bcf	1,4
 10908                           
 10909                           ;Dimmer_B1.c: 448: if (DimmerLights->AdjGo) {
 10910  0D97  0879               	movf	_DimmerLights,w
 10911  0D98  3E08               	addlw	8
 10912  0D99  0086               	movwf	6
 10913  0D9A  3001               	movlw	1	; select bank2/3
 10914  0D9B  0087               	movwf	7
 10915  0D9C  1D81               	btfss	1,3
 10916  0D9D  2DAF               	goto	l6454
 10917                           
 10918                           ;Dimmer_B1.c: 449: setDimmerLights_Adj(lights, 1);
 10919  0D9E  0020               	movlb	0	; select bank0
 10920  0D9F  01E2               	clrf	setDimmerLights_Adj@status
 10921  0DA0  0AE2               	incf	setDimmerLights_Adj@status,f
 10922  0DA1  0866               	movf	setDimmerLights_Main@lights,w
 10923  0DA2  3187  27C1  318D   	fcall	_setDimmerLights_Adj
 10924                           
 10925                           ;Dimmer_B1.c: 450: setBuz(1, 100);
 10926  0DA5  3064               	movlw	100
 10927  0DA6  0020               	movlb	0	; select bank0
 10928  0DA7  00A9               	movwf	setBuz@time
 10929  0DA8  3000               	movlw	0
 10930  0DA9  00AA               	movwf	setBuz@time+1
 10931  0DAA  3001               	movlw	1
 10932  0DAB  318B  23C7         	fcall	_setBuz
 10933                           
 10934                           ;Dimmer_B1.c: 451: } else {
 10935  0DAD  0020               	movlb	0	; select bank0
 10936  0DAE  0008               	return
 10937  0DAF                     l6454:	
 10938                           
 10939                           ;Dimmer_B1.c: 452: setDimmerLights_Adj(lights, 0);
 10940  0DAF  0020               	movlb	0	; select bank0
 10941  0DB0  01E2               	clrf	setDimmerLights_Adj@status
 10942  0DB1  0866               	movf	setDimmerLights_Main@lights,w
 10943  0DB2  3187  27C1         	fcall	_setDimmerLights_Adj
 10944  0DB4  0020               	movlb	0	; select bank0
 10945  0DB5  0008               	return
 10946  0DB6                     __end_of_setDimmerLights_Main:	
 10947                           
 10948                           	psect	text61
 10949  07C1                     __ptext61:	
 10950 ;; *************** function _setDimmerLights_Adj *****************
 10951 ;; Defined at:
 10952 ;;		line 630 in file "../src/Dimmer_B1.c"
 10953 ;; Parameters:    Size  Location     Type
 10954 ;;  lights          1    wreg     unsigned char 
 10955 ;;  status          1   66[BANK0 ] unsigned char 
 10956 ;; Auto vars:     Size  Location     Type
 10957 ;;  lights          1   68[BANK0 ] unsigned char 
 10958 ;; Return value:  Size  Location     Type
 10959 ;;		None               void
 10960 ;; Registers used:
 10961 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10962 ;; Tracked objects:
 10963 ;;		On entry : 0/0
 10964 ;;		On exit  : 0/0
 10965 ;;		Unchanged: 0/0
 10966 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10967 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10968 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10969 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10970 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10971 ;;Total ram usage:        3 bytes
 10972 ;; Hardware stack levels used:    1
 10973 ;; Hardware stack levels required when called:    9
 10974 ;; This function calls:
 10975 ;;		_DimmerLightsPointSelect
 10976 ;;		_setRF_DimmerLights
 10977 ;;		_setTxData
 10978 ;; This function is called by:
 10979 ;;		_setDimmerLights_Main
 10980 ;; This function uses a non-reentrant model
 10981 ;;
 10982                           
 10983                           
 10984                           ;psect for function _setDimmerLights_Adj
 10985  07C1                     _setDimmerLights_Adj:	
 10986                           
 10987                           ;incstack = 0
 10988                           ; Regs used in _setDimmerLights_Adj: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10989                           ;setDimmerLights_Adj@lights stored from wreg
 10990  07C1  0020               	movlb	0	; select bank0
 10991  07C2  00E4               	movwf	setDimmerLights_Adj@lights
 10992                           
 10993                           ;Dimmer_B1.c: 631: DimmerLightsPointSelect(lights);
 10994  07C3  0864               	movf	setDimmerLights_Adj@lights,w
 10995  07C4  3190  2099  3187   	fcall	_DimmerLightsPointSelect
 10996                           
 10997                           ;Dimmer_B1.c: 632: if (status == 1) {
 10998  07C7  0020               	movlb	0	; select bank0
 10999  07C8  0862               	movf	setDimmerLights_Adj@status,w
 11000  07C9  3A01               	xorlw	1
 11001  07CA  1D03               	skipz
 11002  07CB  2FD7               	goto	l5996
 11003                           
 11004                           ;Dimmer_B1.c: 633: DimmerLights->AdjFlag = 1;
 11005  07CC  0879               	movf	_DimmerLights,w
 11006  07CD  0086               	movwf	6
 11007  07CE  3001               	movlw	1	; select bank2/3
 11008  07CF  0087               	movwf	7
 11009  07D0  1581               	bsf	1,3
 11010                           
 11011                           ;Dimmer_B1.c: 634: DimmerLights->Signal = 1;
 11012  07D1  0879               	movf	_DimmerLights,w
 11013  07D2  0086               	movwf	6
 11014  07D3  3001               	movlw	1	; select bank2/3
 11015  07D4  0087               	movwf	7
 11016  07D5  1481               	bsf	1,1
 11017                           
 11018                           ;Dimmer_B1.c: 635: } else {
 11019  07D6  0008               	return
 11020  07D7                     l5996:	
 11021                           
 11022                           ;Dimmer_B1.c: 636: if (DimmerLights->AdjFlag) {
 11023  07D7  0879               	movf	_DimmerLights,w
 11024  07D8  0086               	movwf	6
 11025  07D9  3001               	movlw	1	; select bank2/3
 11026  07DA  0087               	movwf	7
 11027  07DB  1D81               	btfss	1,3
 11028  07DC  0008               	return
 11029                           
 11030                           ;Dimmer_B1.c: 637: DimmerLights->Signal = 0;
 11031  07DD  0879               	movf	_DimmerLights,w
 11032  07DE  0086               	movwf	6
 11033  07DF  3001               	movlw	1	; select bank2/3
 11034  07E0  0087               	movwf	7
 11035  07E1  1081               	bcf	1,1
 11036                           
 11037                           ;Dimmer_B1.c: 638: DimmerLights->AdjFlag = 0;
 11038  07E2  0879               	movf	_DimmerLights,w
 11039  07E3  0086               	movwf	6
 11040  07E4  3001               	movlw	1	; select bank2/3
 11041  07E5  0087               	movwf	7
 11042  07E6  1181               	bcf	1,3
 11043                           
 11044                           ;Dimmer_B1.c: 639: ;;
 11045                           ;Dimmer_B1.c: 640: DimmerLights->MaxmumValue = DimmerLights->DimmingValue;
 11046  07E7  0879               	movf	_DimmerLights,w
 11047  07E8  3E04               	addlw	4
 11048  07E9  0086               	movwf	6
 11049  07EA  3001               	movlw	1	; select bank2/3
 11050  07EB  0087               	movwf	7
 11051  07EC  0801               	movf	1,w
 11052  07ED  00E3               	movwf	??_setDimmerLights_Adj
 11053  07EE  0879               	movf	_DimmerLights,w
 11054  07EF  3E05               	addlw	5
 11055  07F0  0086               	movwf	6
 11056  07F1  3001               	movlw	1	; select bank2/3
 11057  07F2  0087               	movwf	7
 11058  07F3  0863               	movf	??_setDimmerLights_Adj,w
 11059  07F4  0081               	movwf	1
 11060                           
 11061                           ;Dimmer_B1.c: 648: setRF_DimmerLights(lights, 1);
 11062  07F5  01DD               	clrf	setRF_DimmerLights@on
 11063  07F6  0ADD               	incf	setRF_DimmerLights@on,f
 11064  07F7  0864               	movf	setDimmerLights_Adj@lights,w
 11065  07F8  3189  2197  3187   	fcall	_setRF_DimmerLights
 11066                           
 11067                           ;Dimmer_B1.c: 649: setTxData(1);
 11068  07FB  3001               	movlw	1
 11069  07FC  318F  275F         	fcall	_setTxData
 11070  07FE  0008               	return
 11071  07FF                     __end_of_setDimmerLights_Adj:	
 11072                           
 11073                           	psect	text62
 11074  0CB7                     __ptext62:	
 11075 ;; *************** function _setDimmerLights *****************
 11076 ;; Defined at:
 11077 ;;		line 577 in file "../src/Dimmer_B1.c"
 11078 ;; Parameters:    Size  Location     Type
 11079 ;;  lights          1    wreg     unsigned char 
 11080 ;;  status          1    4[BANK0 ] unsigned char 
 11081 ;; Auto vars:     Size  Location     Type
 11082 ;;  lights          1    6[BANK0 ] unsigned char 
 11083 ;; Return value:  Size  Location     Type
 11084 ;;		None               void
 11085 ;; Registers used:
 11086 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11087 ;; Tracked objects:
 11088 ;;		On entry : 0/0
 11089 ;;		On exit  : 0/0
 11090 ;;		Unchanged: 0/0
 11091 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11092 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11093 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11094 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11095 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11096 ;;Total ram usage:        3 bytes
 11097 ;; Hardware stack levels used:    1
 11098 ;; Hardware stack levels required when called:    7
 11099 ;; This function calls:
 11100 ;;		_DimmerLightsPointSelect
 11101 ;;		_setLED
 11102 ;;		_setMemory_GO
 11103 ;; This function is called by:
 11104 ;;		_setDimmerLights_Main
 11105 ;;		_setControl_Lights_Table
 11106 ;; This function uses a non-reentrant model
 11107 ;;
 11108                           
 11109                           
 11110                           ;psect for function _setDimmerLights
 11111  0CB7                     _setDimmerLights:	
 11112                           
 11113                           ;incstack = 0
 11114                           ; Regs used in _setDimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11115                           ;setDimmerLights@lights stored from wreg
 11116  0CB7  0020               	movlb	0	; select bank0
 11117  0CB8  00A6               	movwf	setDimmerLights@lights
 11118                           
 11119                           ;Dimmer_B1.c: 578: DimmerLightsPointSelect(lights);
 11120  0CB9  0826               	movf	setDimmerLights@lights,w
 11121  0CBA  3190  2099  318C   	fcall	_DimmerLightsPointSelect
 11122                           
 11123                           ;Dimmer_B1.c: 579: Dimmer->Load = lights;
 11124  0CBD  0020               	movlb	0	; select bank0
 11125  0CBE  0826               	movf	setDimmerLights@lights,w
 11126  0CBF  00A5               	movwf	??_setDimmerLights
 11127  0CC0  0021               	movlb	1	; select bank1
 11128  0CC1  0A39               	incf	_Dimmer^(0+128),w
 11129  0CC2  0086               	movwf	6
 11130  0CC3  0187               	clrf	7
 11131  0CC4  0020               	movlb	0	; select bank0
 11132  0CC5  0825               	movf	??_setDimmerLights,w
 11133  0CC6  0081               	movwf	1
 11134                           
 11135                           ;Dimmer_B1.c: 580: if (status) {
 11136  0CC7  0824               	movf	setDimmerLights@status,w
 11137  0CC8  1903               	btfsc	3,2
 11138  0CC9  2D0A               	goto	l5728
 11139                           
 11140                           ;Dimmer_B1.c: 581: DimmerLights->Status = 1;
 11141  0CCA  0879               	movf	_DimmerLights,w
 11142  0CCB  0086               	movwf	6
 11143  0CCC  3001               	movlw	1	; select bank2/3
 11144  0CCD  0087               	movwf	7
 11145  0CCE  1681               	bsf	1,5
 11146                           
 11147                           ;Dimmer_B1.c: 582: setLED(lights, 0);
 11148  0CCF  01A2               	clrf	setLED@command
 11149  0CD0  0826               	movf	setDimmerLights@lights,w
 11150  0CD1  3188  207A  318C   	fcall	_setLED
 11151                           
 11152                           ;Dimmer_B1.c: 584: ;;
 11153                           ;Dimmer_B1.c: 586: DimmerLights->Signal = 1;
 11154  0CD4  0879               	movf	_DimmerLights,w
 11155  0CD5  0086               	movwf	6
 11156  0CD6  3001               	movlw	1	; select bank2/3
 11157  0CD7  0087               	movwf	7
 11158  0CD8  1481               	bsf	1,1
 11159                           
 11160                           ;Dimmer_B1.c: 587: DimmerLights->DimmingTimeValue = 3;
 11161  0CD9  3003               	movlw	3
 11162  0CDA  0020               	movlb	0	; select bank0
 11163  0CDB  00A5               	movwf	??_setDimmerLights
 11164  0CDC  0879               	movf	_DimmerLights,w
 11165  0CDD  3E02               	addlw	2
 11166  0CDE  0086               	movwf	6
 11167  0CDF  3001               	movlw	1	; select bank2/3
 11168  0CE0  0087               	movwf	7
 11169  0CE1  0825               	movf	??_setDimmerLights,w
 11170  0CE2  0081               	movwf	1
 11171                           
 11172                           ;Dimmer_B1.c: 589: if (!DimmerLights->StatusFlag) {
 11173  0CE3  0879               	movf	_DimmerLights,w
 11174  0CE4  0086               	movwf	6
 11175  0CE5  3001               	movlw	1	; select bank2/3
 11176  0CE6  0087               	movwf	7
 11177  0CE7  1B01               	btfsc	1,6
 11178  0CE8  0008               	return
 11179                           
 11180                           ;Dimmer_B1.c: 590: DimmerLights->StatusFlag = 1;
 11181  0CE9  0879               	movf	_DimmerLights,w
 11182  0CEA  0086               	movwf	6
 11183  0CEB  3001               	movlw	1	; select bank2/3
 11184  0CEC  0087               	movwf	7
 11185  0CED  1701               	bsf	1,6
 11186                           
 11187                           ;Dimmer_B1.c: 591: ;;
 11188                           ;Dimmer_B1.c: 592: setMemory_GO(0);
 11189  0CEE  3000               	movlw	0
 11190  0CEF  3192  2264         	fcall	_setMemory_GO
 11191                           
 11192                           ;Dimmer_B1.c: 595: DimmerLights->DimmingValue = DimmerLights->MaxmumValue;
 11193  0CF1  0879               	movf	_DimmerLights,w
 11194  0CF2  3E05               	addlw	5
 11195  0CF3  0086               	movwf	6
 11196  0CF4  3001               	movlw	1	; select bank2/3
 11197  0CF5  0087               	movwf	7
 11198  0CF6  0801               	movf	1,w
 11199  0CF7  0020               	movlb	0	; select bank0
 11200  0CF8  00A5               	movwf	??_setDimmerLights
 11201  0CF9  0879               	movf	_DimmerLights,w
 11202  0CFA  3E04               	addlw	4
 11203  0CFB  0086               	movwf	6
 11204  0CFC  3001               	movlw	1	; select bank2/3
 11205  0CFD  0087               	movwf	7
 11206  0CFE  0825               	movf	??_setDimmerLights,w
 11207  0CFF  0081               	movwf	1
 11208                           
 11209                           ;Dimmer_B1.c: 599: DimmerLights->DimmingValue = ((char)((100-55)*1.5));
 11210  0D00  3043               	movlw	67
 11211  0D01  00A5               	movwf	??_setDimmerLights
 11212  0D02  0879               	movf	_DimmerLights,w
 11213  0D03  3E04               	addlw	4
 11214  0D04  0086               	movwf	6
 11215  0D05  3001               	movlw	1	; select bank2/3
 11216  0D06  0087               	movwf	7
 11217  0D07  0825               	movf	??_setDimmerLights,w
 11218  0D08  0081               	movwf	1
 11219                           
 11220                           ;Dimmer_B1.c: 601: }
 11221                           ;Dimmer_B1.c: 602: } else {
 11222  0D09  0008               	return
 11223  0D0A                     l5728:	
 11224                           
 11225                           ;Dimmer_B1.c: 603: DimmerLights->Status = 0;
 11226  0D0A  0879               	movf	_DimmerLights,w
 11227  0D0B  0086               	movwf	6
 11228  0D0C  3001               	movlw	1	; select bank2/3
 11229  0D0D  0087               	movwf	7
 11230  0D0E  1281               	bcf	1,5
 11231                           
 11232                           ;Dimmer_B1.c: 605: DimmerLights->DimmingValue = DimmerLights->MinimumValue;
 11233  0D0F  0879               	movf	_DimmerLights,w
 11234  0D10  3E06               	addlw	6
 11235  0D11  0086               	movwf	6
 11236  0D12  3001               	movlw	1	; select bank2/3
 11237  0D13  0087               	movwf	7
 11238  0D14  0801               	movf	1,w
 11239  0D15  00A5               	movwf	??_setDimmerLights
 11240  0D16  0879               	movf	_DimmerLights,w
 11241  0D17  3E04               	addlw	4
 11242  0D18  0086               	movwf	6
 11243  0D19  3001               	movlw	1	; select bank2/3
 11244  0D1A  0087               	movwf	7
 11245  0D1B  0825               	movf	??_setDimmerLights,w
 11246  0D1C  0081               	movwf	1
 11247                           
 11248                           ;Dimmer_B1.c: 612: DimmerLights->Signal = 1;
 11249  0D1D  0879               	movf	_DimmerLights,w
 11250  0D1E  0086               	movwf	6
 11251  0D1F  3001               	movlw	1	; select bank2/3
 11252  0D20  0087               	movwf	7
 11253  0D21  1481               	bsf	1,1
 11254                           
 11255                           ;Dimmer_B1.c: 613: DimmerLights->AdjFlag = 0;
 11256  0D22  0879               	movf	_DimmerLights,w
 11257  0D23  0086               	movwf	6
 11258  0D24  3001               	movlw	1	; select bank2/3
 11259  0D25  0087               	movwf	7
 11260  0D26  1181               	bcf	1,3
 11261                           
 11262                           ;Dimmer_B1.c: 614: DimmerLights->AdjStatus = 0;
 11263  0D27  0879               	movf	_DimmerLights,w
 11264  0D28  0086               	movwf	6
 11265  0D29  3001               	movlw	1	; select bank2/3
 11266  0D2A  0087               	movwf	7
 11267  0D2B  1201               	bcf	1,4
 11268                           
 11269                           ;Dimmer_B1.c: 615: DimmerLights->DimmingTimeValue = 3;
 11270  0D2C  3003               	movlw	3
 11271  0D2D  00A5               	movwf	??_setDimmerLights
 11272  0D2E  0879               	movf	_DimmerLights,w
 11273  0D2F  3E02               	addlw	2
 11274  0D30  0086               	movwf	6
 11275  0D31  3001               	movlw	1	; select bank2/3
 11276  0D32  0087               	movwf	7
 11277  0D33  0825               	movf	??_setDimmerLights,w
 11278  0D34  0081               	movwf	1
 11279  0D35  0008               	return
 11280  0D36                     __end_of_setDimmerLights:	
 11281                           
 11282                           	psect	text63
 11283  087A                     __ptext63:	
 11284 ;; *************** function _setLED *****************
 11285 ;; Defined at:
 11286 ;;		line 74 in file "../src/LED_B1.c"
 11287 ;; Parameters:    Size  Location     Type
 11288 ;;  led             1    wreg     unsigned char 
 11289 ;;  command         1    2[BANK0 ] unsigned char 
 11290 ;; Auto vars:     Size  Location     Type
 11291 ;;  led             1    3[BANK0 ] unsigned char 
 11292 ;; Return value:  Size  Location     Type
 11293 ;;		None               void
 11294 ;; Registers used:
 11295 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11296 ;; Tracked objects:
 11297 ;;		On entry : 0/0
 11298 ;;		On exit  : 0/0
 11299 ;;		Unchanged: 0/0
 11300 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11301 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11302 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11303 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11304 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11305 ;;Total ram usage:        2 bytes
 11306 ;; Hardware stack levels used:    1
 11307 ;; Hardware stack levels required when called:    6
 11308 ;; This function calls:
 11309 ;;		_LedPointSelect
 11310 ;; This function is called by:
 11311 ;;		_setDimmerLights
 11312 ;;		_setLED_Initialization
 11313 ;;		_setSw_Initialization
 11314 ;;		_setDimmerLights_ERROR
 11315 ;; This function uses a non-reentrant model
 11316 ;;
 11317                           
 11318                           
 11319                           ;psect for function _setLED
 11320  087A                     _setLED:	
 11321                           
 11322                           ;incstack = 0
 11323                           ; Regs used in _setLED: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11324                           ;setLED@led stored from wreg
 11325  087A  0020               	movlb	0	; select bank0
 11326  087B  00A3               	movwf	setLED@led
 11327                           
 11328                           ;LED_B1.c: 76: LedPointSelect(led);
 11329  087C  0823               	movf	setLED@led,w
 11330  087D  3192  22C5  3188   	fcall	_LedPointSelect
 11331                           
 11332                           ;LED_B1.c: 77: if(command == 0)
 11333  0880  0020               	movlb	0	; select bank0
 11334  0881  08A2               	movf	setLED@command,f
 11335  0882  1D03               	skipz
 11336  0883  2896               	goto	l5614
 11337                           
 11338                           ;LED_B1.c: 78: {
 11339                           ;LED_B1.c: 80: if(led == 1)
 11340  0884  0823               	movf	setLED@led,w
 11341  0885  3A01               	xorlw	1
 11342  0886  1D03               	skipz
 11343  0887  288A               	goto	l5606
 11344                           
 11345                           ;LED_B1.c: 81: {
 11346                           ;LED_B1.c: 85: RA3=1;
 11347  0888  158C               	bsf	12,3	;volatile
 11348                           
 11349                           ;LED_B1.c: 87: }
 11350  0889  0008               	return
 11351  088A                     l5606:	
 11352                           
 11353                           ;LED_B1.c: 90: else if(led == 2)
 11354  088A  0823               	movf	setLED@led,w
 11355  088B  3A02               	xorlw	2
 11356  088C  1D03               	skipz
 11357  088D  2890               	goto	l5610
 11358                           
 11359                           ;LED_B1.c: 91: {
 11360                           ;LED_B1.c: 95: RC7=1;
 11361  088E  178E               	bsf	14,7	;volatile
 11362                           
 11363                           ;LED_B1.c: 97: }
 11364  088F  0008               	return
 11365  0890                     l5610:	
 11366                           
 11367                           ;LED_B1.c: 110: else if(led == 99)
 11368  0890  0823               	movf	setLED@led,w
 11369  0891  3A63               	xorlw	99
 11370  0892  1D03               	skipz
 11371  0893  0008               	return
 11372                           
 11373                           ;LED_B1.c: 111: {
 11374                           ;LED_B1.c: 115: RB5=1;
 11375  0894  168D               	bsf	13,5	;volatile
 11376                           
 11377                           ;LED_B1.c: 117: }
 11378                           ;LED_B1.c: 119: }
 11379  0895  0008               	return
 11380  0896                     l5614:	
 11381                           
 11382                           ;LED_B1.c: 120: else if(command == 1)
 11383  0896  0822               	movf	setLED@command,w
 11384  0897  3A01               	xorlw	1
 11385  0898  1D03               	skipz
 11386  0899  28AC               	goto	l5628
 11387                           
 11388                           ;LED_B1.c: 121: {
 11389                           ;LED_B1.c: 123: if(led == 1)
 11390  089A  0823               	movf	setLED@led,w
 11391  089B  3A01               	xorlw	1
 11392  089C  1D03               	skipz
 11393  089D  28A0               	goto	l5620
 11394                           
 11395                           ;LED_B1.c: 124: {
 11396                           ;LED_B1.c: 128: RA3=0;
 11397  089E  118C               	bcf	12,3	;volatile
 11398                           
 11399                           ;LED_B1.c: 130: }
 11400  089F  0008               	return
 11401  08A0                     l5620:	
 11402                           
 11403                           ;LED_B1.c: 133: else if(led == 2)
 11404  08A0  0823               	movf	setLED@led,w
 11405  08A1  3A02               	xorlw	2
 11406  08A2  1D03               	skipz
 11407  08A3  28A6               	goto	l5624
 11408                           
 11409                           ;LED_B1.c: 134: {
 11410                           ;LED_B1.c: 138: RC7=0;
 11411  08A4  138E               	bcf	14,7	;volatile
 11412                           
 11413                           ;LED_B1.c: 140: }
 11414  08A5  0008               	return
 11415  08A6                     l5624:	
 11416                           
 11417                           ;LED_B1.c: 153: else if(led == 99)
 11418  08A6  0823               	movf	setLED@led,w
 11419  08A7  3A63               	xorlw	99
 11420  08A8  1D03               	skipz
 11421  08A9  0008               	return
 11422                           
 11423                           ;LED_B1.c: 154: {
 11424                           ;LED_B1.c: 158: RB5=0;
 11425  08AA  128D               	bcf	13,5	;volatile
 11426                           
 11427                           ;LED_B1.c: 160: }
 11428                           ;LED_B1.c: 162: }
 11429  08AB  0008               	return
 11430  08AC                     l5628:	
 11431                           
 11432                           ;LED_B1.c: 163: else if(command == 10)
 11433  08AC  0822               	movf	setLED@command,w
 11434  08AD  3A0A               	xorlw	10
 11435  08AE  1D03               	skipz
 11436  08AF  28CE               	goto	l5644
 11437                           
 11438                           ;LED_B1.c: 164: {
 11439                           ;LED_B1.c: 165: LED->GO=0;
 11440  08B0  0021               	movlb	1	; select bank1
 11441  08B1  083C               	movf	_LED^(0+128),w
 11442  08B2  0086               	movwf	6
 11443  08B3  0187               	clrf	7
 11444  08B4  1081               	bcf	1,1
 11445                           
 11446                           ;LED_B1.c: 166: LED->Time=0;
 11447  08B5  0A3C               	incf	_LED^(0+128),w
 11448  08B6  0086               	movwf	6
 11449  08B7  0187               	clrf	7
 11450  08B8  3000               	movlw	0
 11451  08B9  3FC0               	movwi [0]fsr1
 11452  08BA  3FC1               	movwi [1]fsr1
 11453                           
 11454                           ;LED_B1.c: 168: if(led == 1)
 11455  08BB  0020               	movlb	0	; select bank0
 11456  08BC  0823               	movf	setLED@led,w
 11457  08BD  3A01               	xorlw	1
 11458  08BE  1D03               	skipz
 11459  08BF  28C2               	goto	l5636
 11460                           
 11461                           ;LED_B1.c: 169: {
 11462                           ;LED_B1.c: 173: RA3=1;
 11463  08C0  158C               	bsf	12,3	;volatile
 11464                           
 11465                           ;LED_B1.c: 175: }
 11466  08C1  0008               	return
 11467  08C2                     l5636:	
 11468                           
 11469                           ;LED_B1.c: 178: else if(led == 2)
 11470  08C2  0823               	movf	setLED@led,w
 11471  08C3  3A02               	xorlw	2
 11472  08C4  1D03               	skipz
 11473  08C5  28C8               	goto	l5640
 11474                           
 11475                           ;LED_B1.c: 179: {
 11476                           ;LED_B1.c: 183: RC7=1;
 11477  08C6  178E               	bsf	14,7	;volatile
 11478                           
 11479                           ;LED_B1.c: 185: }
 11480  08C7  0008               	return
 11481  08C8                     l5640:	
 11482                           
 11483                           ;LED_B1.c: 198: else if(led == 99)
 11484  08C8  0823               	movf	setLED@led,w
 11485  08C9  3A63               	xorlw	99
 11486  08CA  1D03               	skipz
 11487  08CB  0008               	return
 11488                           
 11489                           ;LED_B1.c: 199: {
 11490                           ;LED_B1.c: 203: RB5=1;
 11491  08CC  168D               	bsf	13,5	;volatile
 11492                           
 11493                           ;LED_B1.c: 205: }
 11494                           ;LED_B1.c: 207: }
 11495  08CD  0008               	return
 11496  08CE                     l5644:	
 11497                           
 11498                           ;LED_B1.c: 208: else if(command == 11)
 11499  08CE  0822               	movf	setLED@command,w
 11500  08CF  3A0B               	xorlw	11
 11501  08D0  1D03               	skipz
 11502  08D1  0008               	return
 11503                           
 11504                           ;LED_B1.c: 209: {
 11505                           ;LED_B1.c: 210: LED->GO=1;
 11506  08D2  0021               	movlb	1	; select bank1
 11507  08D3  083C               	movf	_LED^(0+128),w
 11508  08D4  0086               	movwf	6
 11509  08D5  0187               	clrf	7
 11510  08D6  1481               	bsf	1,1
 11511  08D7  0008               	return
 11512  08D8                     __end_of_setLED:	
 11513                           
 11514                           	psect	text64
 11515  12C5                     __ptext64:	
 11516 ;; *************** function _LedPointSelect *****************
 11517 ;; Defined at:
 11518 ;;		line 7 in file "../src/LED_B1.c"
 11519 ;; Parameters:    Size  Location     Type
 11520 ;;  led             1    wreg     unsigned char 
 11521 ;; Auto vars:     Size  Location     Type
 11522 ;;  led             1    1[BANK0 ] unsigned char 
 11523 ;; Return value:  Size  Location     Type
 11524 ;;		None               void
 11525 ;; Registers used:
 11526 ;;		wreg
 11527 ;; Tracked objects:
 11528 ;;		On entry : 0/0
 11529 ;;		On exit  : 0/0
 11530 ;;		Unchanged: 0/0
 11531 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11532 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11533 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11534 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11535 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11536 ;;Total ram usage:        2 bytes
 11537 ;; Hardware stack levels used:    1
 11538 ;; Hardware stack levels required when called:    5
 11539 ;; This function calls:
 11540 ;;		Nothing
 11541 ;; This function is called by:
 11542 ;;		_setLED_Initialization
 11543 ;;		_setLED
 11544 ;;		_setLED_Main
 11545 ;; This function uses a non-reentrant model
 11546 ;;
 11547                           
 11548                           
 11549                           ;psect for function _LedPointSelect
 11550  12C5                     _LedPointSelect:	
 11551                           
 11552                           ;incstack = 0
 11553                           ; Regs used in _LedPointSelect: [wreg]
 11554                           ;LedPointSelect@led stored from wreg
 11555  12C5  0020               	movlb	0	; select bank0
 11556  12C6  00A1               	movwf	LedPointSelect@led
 11557                           
 11558                           ;LED_B1.c: 10: if(led == 1)
 11559  12C7  0821               	movf	LedPointSelect@led,w
 11560  12C8  3A01               	xorlw	1
 11561  12C9  1D03               	skipz
 11562  12CA  2AD1               	goto	l5440
 11563                           
 11564                           ;LED_B1.c: 11: {
 11565                           ;LED_B1.c: 12: LED=&VarLED1;
 11566  12CB  30D9               	movlw	_VarLED1& (0+255)
 11567  12CC  00A0               	movwf	??_LedPointSelect
 11568  12CD  0820               	movf	??_LedPointSelect,w
 11569  12CE  0021               	movlb	1	; select bank1
 11570  12CF  00BC               	movwf	_LED^(0+128)
 11571                           
 11572                           ;LED_B1.c: 13: }
 11573  12D0  0008               	return
 11574  12D1                     l5440:	
 11575                           
 11576                           ;LED_B1.c: 16: else if(led == 2)
 11577  12D1  0020               	movlb	0	; select bank0
 11578  12D2  0821               	movf	LedPointSelect@led,w
 11579  12D3  3A02               	xorlw	2
 11580  12D4  1D03               	skipz
 11581  12D5  2ADC               	goto	l5444
 11582                           
 11583                           ;LED_B1.c: 17: {
 11584                           ;LED_B1.c: 18: LED=&VarLED2;
 11585  12D6  30DD               	movlw	_VarLED2& (0+255)
 11586  12D7  00A0               	movwf	??_LedPointSelect
 11587  12D8  0820               	movf	??_LedPointSelect,w
 11588  12D9  0021               	movlb	1	; select bank1
 11589  12DA  00BC               	movwf	_LED^(0+128)
 11590                           
 11591                           ;LED_B1.c: 19: }
 11592  12DB  0008               	return
 11593  12DC                     l5444:	
 11594                           
 11595                           ;LED_B1.c: 28: else if(led == 99)
 11596  12DC  0020               	movlb	0	; select bank0
 11597  12DD  0821               	movf	LedPointSelect@led,w
 11598  12DE  3A63               	xorlw	99
 11599  12DF  1D03               	skipz
 11600  12E0  0008               	return
 11601                           
 11602                           ;LED_B1.c: 29: {
 11603                           ;LED_B1.c: 30: LED=&VarErrLED;
 11604  12E1  30D5               	movlw	_VarErrLED& (0+255)
 11605  12E2  00A0               	movwf	??_LedPointSelect
 11606  12E3  0820               	movf	??_LedPointSelect,w
 11607  12E4  0021               	movlb	1	; select bank1
 11608  12E5  00BC               	movwf	_LED^(0+128)
 11609  12E6  0008               	return
 11610  12E7                     __end_of_LedPointSelect:	
 11611                           
 11612                           	psect	text65
 11613  10C0                     __ptext65:	
 11614 ;; *************** function _DimmerLights_Close *****************
 11615 ;; Defined at:
 11616 ;;		line 375 in file "../src/Dimmer_B1.c"
 11617 ;; Parameters:    Size  Location     Type
 11618 ;;		None
 11619 ;; Auto vars:     Size  Location     Type
 11620 ;;		None
 11621 ;; Return value:  Size  Location     Type
 11622 ;;		None               void
 11623 ;; Registers used:
 11624 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11625 ;; Tracked objects:
 11626 ;;		On entry : 0/0
 11627 ;;		On exit  : 0/0
 11628 ;;		Unchanged: 0/0
 11629 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11630 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11631 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11632 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11633 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11634 ;;Total ram usage:        0 bytes
 11635 ;; Hardware stack levels used:    1
 11636 ;; Hardware stack levels required when called:    6
 11637 ;; This function calls:
 11638 ;;		_getDimmerLights_StatusFlag
 11639 ;;		_setMemory_GO
 11640 ;; This function is called by:
 11641 ;;		_DimmerLights_Main
 11642 ;; This function uses a non-reentrant model
 11643 ;;
 11644                           
 11645                           
 11646                           ;psect for function _DimmerLights_Close
 11647  10C0                     _DimmerLights_Close:	
 11648                           
 11649                           ;Dimmer_B1.c: 376: if (Dimmer->Detect) {
 11650                           
 11651                           ;incstack = 0
 11652                           ; Regs used in _DimmerLights_Close: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11653  10C0  0021               	movlb	1	; select bank1
 11654  10C1  0839               	movf	_Dimmer^(0+128),w
 11655  10C2  0086               	movwf	6
 11656  10C3  0187               	clrf	7
 11657  10C4  1C01               	btfss	1,0
 11658  10C5  0008               	return
 11659                           
 11660                           ;Dimmer_B1.c: 377: Dimmer->Detect = 0;
 11661  10C6  0839               	movf	_Dimmer^(0+128),w
 11662  10C7  0086               	movwf	6
 11663  10C8  0187               	clrf	7
 11664  10C9  1001               	bcf	1,0
 11665                           
 11666                           ;Dimmer_B1.c: 378: if (!getDimmerLights_StatusFlag()) {
 11667  10CA  3191  21BD  3190   	fcall	_getDimmerLights_StatusFlag
 11668  10CD  3800               	iorlw	0
 11669  10CE  1D03               	skipz
 11670  10CF  0008               	return
 11671                           
 11672                           ;Dimmer_B1.c: 379: ;;
 11673                           ;Dimmer_B1.c: 380: setMemory_GO(1);
 11674  10D0  3001               	movlw	1
 11675  10D1  3192  2264         	fcall	_setMemory_GO
 11676  10D3  0008               	return
 11677  10D4                     __end_of_DimmerLights_Close:	
 11678                           
 11679                           	psect	text66
 11680  1264                     __ptext66:	
 11681 ;; *************** function _setMemory_GO *****************
 11682 ;; Defined at:
 11683 ;;		line 890 in file "../src/MCU_B1.c"
 11684 ;; Parameters:    Size  Location     Type
 11685 ;;  command         1    wreg     unsigned char 
 11686 ;; Auto vars:     Size  Location     Type
 11687 ;;  command         1    2[BANK0 ] unsigned char 
 11688 ;; Return value:  Size  Location     Type
 11689 ;;		None               void
 11690 ;; Registers used:
 11691 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11692 ;; Tracked objects:
 11693 ;;		On entry : 0/0
 11694 ;;		On exit  : 0/0
 11695 ;;		Unchanged: 0/0
 11696 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11697 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11698 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11699 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11700 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11701 ;;Total ram usage:        3 bytes
 11702 ;; Hardware stack levels used:    1
 11703 ;; Hardware stack levels required when called:    5
 11704 ;; This function calls:
 11705 ;;		Nothing
 11706 ;; This function is called by:
 11707 ;;		_DimmerLights_Close
 11708 ;;		_setDimmerLights
 11709 ;; This function uses a non-reentrant model
 11710 ;;
 11711                           
 11712                           
 11713                           ;psect for function _setMemory_GO
 11714  1264                     _setMemory_GO:	
 11715                           
 11716                           ;incstack = 0
 11717                           ; Regs used in _setMemory_GO: [wreg+fsr1l+fsr1h+status,2+status,0]
 11718                           ;setMemory_GO@command stored from wreg
 11719  1264  0020               	movlb	0	; select bank0
 11720  1265  00A2               	movwf	setMemory_GO@command
 11721                           
 11722                           ;MCU_B1.c: 891: Memory->GO = command;
 11723  1266  0021               	movlb	1	; select bank1
 11724  1267  086B               	movf	_Memory^(0+128),w
 11725  1268  3E24               	addlw	36
 11726  1269  0086               	movwf	6
 11727  126A  3002               	movlw	2	; select bank4/5
 11728  126B  0087               	movwf	7
 11729  126C  0020               	movlb	0	; select bank0
 11730  126D  0822               	movf	setMemory_GO@command,w
 11731  126E  1081               	bcf	1,1
 11732  126F  1D03               	skipz
 11733  1270  1481               	bsf	1,1
 11734                           
 11735                           ;MCU_B1.c: 892: if (command == 0) {
 11736  1271  08A2               	movf	setMemory_GO@command,f
 11737  1272  1D03               	skipz
 11738  1273  0008               	return
 11739                           
 11740                           ;MCU_B1.c: 893: Memory->Time = command;
 11741  1274  0822               	movf	setMemory_GO@command,w
 11742  1275  00A0               	movwf	??_setMemory_GO
 11743  1276  01A1               	clrf	??_setMemory_GO+1
 11744  1277  0021               	movlb	1	; select bank1
 11745  1278  086B               	movf	_Memory^(0+128),w
 11746  1279  3E22               	addlw	34
 11747  127A  0086               	movwf	6
 11748  127B  3002               	movlw	2	; select bank4/5
 11749  127C  0087               	movwf	7
 11750  127D  0020               	movlb	0	; select bank0
 11751  127E  0820               	movf	??_setMemory_GO,w
 11752  127F  3FC0               	movwi [0]fsr1
 11753  1280  0821               	movf	??_setMemory_GO+1,w
 11754  1281  3FC1               	movwi [1]fsr1
 11755  1282  0008               	return
 11756  1283                     __end_of_setMemory_GO:	
 11757                           
 11758                           	psect	text67
 11759  11BD                     __ptext67:	
 11760 ;; *************** function _getDimmerLights_StatusFlag *****************
 11761 ;; Defined at:
 11762 ;;		line 460 in file "../src/Dimmer_B1.c"
 11763 ;; Parameters:    Size  Location     Type
 11764 ;;		None
 11765 ;; Auto vars:     Size  Location     Type
 11766 ;;  Status          1    1[BANK0 ] unsigned char 
 11767 ;; Return value:  Size  Location     Type
 11768 ;;                  1    wreg      unsigned char 
 11769 ;; Registers used:
 11770 ;;		wreg, fsr1l, fsr1h, status,2
 11771 ;; Tracked objects:
 11772 ;;		On entry : 0/0
 11773 ;;		On exit  : 0/0
 11774 ;;		Unchanged: 0/0
 11775 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11776 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11777 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11778 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11779 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11780 ;;Total ram usage:        3 bytes
 11781 ;; Hardware stack levels used:    1
 11782 ;; Hardware stack levels required when called:    5
 11783 ;; This function calls:
 11784 ;;		Nothing
 11785 ;; This function is called by:
 11786 ;;		_DimmerLights_Close
 11787 ;;		_DimmerLights_Exceptions
 11788 ;; This function uses a non-reentrant model
 11789 ;;
 11790                           
 11791                           
 11792                           ;psect for function _getDimmerLights_StatusFlag
 11793  11BD                     _getDimmerLights_StatusFlag:	
 11794                           
 11795                           ;Dimmer_B1.c: 461: char Status = 0;
 11796                           
 11797                           ;incstack = 0
 11798                           ; Regs used in _getDimmerLights_StatusFlag: [wreg+fsr1l+fsr1h+status,2]
 11799  11BD  0020               	movlb	0	; select bank0
 11800  11BE  01A1               	clrf	getDimmerLights_StatusFlag@Status
 11801                           
 11802                           ;Dimmer_B1.c: 468: Status = (DimmerLights11->StatusFlag || DimmerLights22->StatusFlag) ?
      +                           1 : 0;
 11803  11BF  01A2               	clrf	_getDimmerLights_StatusFlag$1857
 11804  11C0  0AA2               	incf	_getDimmerLights_StatusFlag$1857,f
 11805  11C1  0021               	movlb	1	; select bank1
 11806  11C2  083A               	movf	_DimmerLights11^(0+128),w
 11807  11C3  0086               	movwf	6
 11808  11C4  3001               	movlw	1	; select bank2/3
 11809  11C5  0087               	movwf	7
 11810  11C6  1B01               	btfsc	1,6
 11811  11C7  29D0               	goto	l5984
 11812  11C8  083B               	movf	_DimmerLights22^(0+128),w
 11813  11C9  0086               	movwf	6
 11814  11CA  3001               	movlw	1	; select bank2/3
 11815  11CB  0087               	movwf	7
 11816  11CC  1B01               	btfsc	1,6
 11817  11CD  29D0               	goto	l5984
 11818  11CE  0020               	movlb	0	; select bank0
 11819  11CF  01A2               	clrf	_getDimmerLights_StatusFlag$1857
 11820  11D0                     l5984:	
 11821  11D0  0020               	movlb	0	; select bank0
 11822  11D1  0822               	movf	_getDimmerLights_StatusFlag$1857,w
 11823  11D2  00A0               	movwf	??_getDimmerLights_StatusFlag
 11824  11D3  0820               	movf	??_getDimmerLights_StatusFlag,w
 11825  11D4  00A1               	movwf	getDimmerLights_StatusFlag@Status
 11826                           
 11827                           ;Dimmer_B1.c: 475: return Status;
 11828  11D5  0821               	movf	getDimmerLights_StatusFlag@Status,w
 11829  11D6  0008               	return
 11830  11D7                     __end_of_getDimmerLights_StatusFlag:	
 11831                           
 11832                           	psect	text68
 11833  112A                     __ptext68:	
 11834 ;; *************** function _DimmerLights_Initialization *****************
 11835 ;; Defined at:
 11836 ;;		line 315 in file "../src/Dimmer_B1.c"
 11837 ;; Parameters:    Size  Location     Type
 11838 ;;		None
 11839 ;; Auto vars:     Size  Location     Type
 11840 ;;		None
 11841 ;; Return value:  Size  Location     Type
 11842 ;;		None               void
 11843 ;; Registers used:
 11844 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11845 ;; Tracked objects:
 11846 ;;		On entry : 0/0
 11847 ;;		On exit  : 0/0
 11848 ;;		Unchanged: 0/0
 11849 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11850 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11851 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11852 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11853 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11854 ;;Total ram usage:        1 bytes
 11855 ;; Hardware stack levels used:    1
 11856 ;; Hardware stack levels required when called:    7
 11857 ;; This function calls:
 11858 ;;		_Dimmer_Initialization
 11859 ;;		_setDimmerLights_Initialization
 11860 ;; This function is called by:
 11861 ;;		_main
 11862 ;; This function uses a non-reentrant model
 11863 ;;
 11864                           
 11865                           
 11866                           ;psect for function _DimmerLights_Initialization
 11867  112A                     _DimmerLights_Initialization:	
 11868                           
 11869                           ;Dimmer_B1.c: 317: DimmerLights11 = &DimmerLights1;
 11870                           
 11871                           ;incstack = 0
 11872                           ; Regs used in _DimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 11873  112A  3020               	movlw	_DimmerLights1& (0+255)
 11874  112B  0020               	movlb	0	; select bank0
 11875  112C  00A4               	movwf	??_DimmerLights_Initialization
 11876  112D  0824               	movf	??_DimmerLights_Initialization,w
 11877  112E  0021               	movlb	1	; select bank1
 11878  112F  00BA               	movwf	_DimmerLights11^(0+128)
 11879                           
 11880                           ;Dimmer_B1.c: 318: setDimmerLights_Initialization(1);
 11881  1130  3001               	movlw	1
 11882  1131  3193  23B0  3191   	fcall	_setDimmerLights_Initialization
 11883                           
 11884                           ;Dimmer_B1.c: 322: DimmerLights22 = &DimmerLights2;
 11885  1134  302E               	movlw	_DimmerLights2& (0+255)
 11886  1135  0020               	movlb	0	; select bank0
 11887  1136  00A4               	movwf	??_DimmerLights_Initialization
 11888  1137  0824               	movf	??_DimmerLights_Initialization,w
 11889  1138  0021               	movlb	1	; select bank1
 11890  1139  00BB               	movwf	_DimmerLights22^(0+128)
 11891                           
 11892                           ;Dimmer_B1.c: 323: setDimmerLights_Initialization(2);
 11893  113A  3002               	movlw	2
 11894  113B  3193  23B0  3191   	fcall	_setDimmerLights_Initialization
 11895                           
 11896                           ;Dimmer_B1.c: 332: Dimmer_Initialization();
 11897  113E  319E  2655         	fcall	_Dimmer_Initialization
 11898  1140  0008               	return
 11899  1141                     __end_of_DimmerLights_Initialization:	
 11900                           
 11901                           	psect	text69
 11902  13B0                     __ptext69:	
 11903 ;; *************** function _setDimmerLights_Initialization *****************
 11904 ;; Defined at:
 11905 ;;		line 337 in file "../src/Dimmer_B1.c"
 11906 ;; Parameters:    Size  Location     Type
 11907 ;;  lights          1    wreg     unsigned char 
 11908 ;; Auto vars:     Size  Location     Type
 11909 ;;  lights          1    3[BANK0 ] unsigned char 
 11910 ;; Return value:  Size  Location     Type
 11911 ;;		None               void
 11912 ;; Registers used:
 11913 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11914 ;; Tracked objects:
 11915 ;;		On entry : 0/0
 11916 ;;		On exit  : 0/0
 11917 ;;		Unchanged: 0/0
 11918 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11919 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11920 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11921 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11922 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11923 ;;Total ram usage:        2 bytes
 11924 ;; Hardware stack levels used:    1
 11925 ;; Hardware stack levels required when called:    6
 11926 ;; This function calls:
 11927 ;;		_DimmerLightsPointSelect
 11928 ;; This function is called by:
 11929 ;;		_DimmerLights_Initialization
 11930 ;; This function uses a non-reentrant model
 11931 ;;
 11932                           
 11933                           
 11934                           ;psect for function _setDimmerLights_Initialization
 11935  13B0                     _setDimmerLights_Initialization:	
 11936                           
 11937                           ;incstack = 0
 11938                           ; Regs used in _setDimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pcla
      +                          th+cstack]
 11939                           ;setDimmerLights_Initialization@lights stored from wreg
 11940  13B0  0020               	movlb	0	; select bank0
 11941  13B1  00A3               	movwf	setDimmerLights_Initialization@lights
 11942                           
 11943                           ;Dimmer_B1.c: 338: DimmerLightsPointSelect(lights);
 11944  13B2  0823               	movf	setDimmerLights_Initialization@lights,w
 11945  13B3  3190  2099         	fcall	_DimmerLightsPointSelect
 11946                           
 11947                           ;Dimmer_B1.c: 339: DimmerLights->Clear = 1;
 11948  13B5  0879               	movf	_DimmerLights,w
 11949  13B6  3E09               	addlw	9
 11950  13B7  0086               	movwf	6
 11951  13B8  3001               	movlw	1	; select bank2/3
 11952  13B9  0087               	movwf	7
 11953  13BA  1501               	bsf	1,2
 11954                           
 11955                           ;Dimmer_B1.c: 345: DimmerLights->MaxmumValue = ((char)((100-55)*1.5));
 11956  13BB  3043               	movlw	67
 11957  13BC  0020               	movlb	0	; select bank0
 11958  13BD  00A2               	movwf	??_setDimmerLights_Initialization
 11959  13BE  0879               	movf	_DimmerLights,w
 11960  13BF  3E05               	addlw	5
 11961  13C0  0086               	movwf	6
 11962  13C1  3001               	movlw	1	; select bank2/3
 11963  13C2  0087               	movwf	7
 11964  13C3  0822               	movf	??_setDimmerLights_Initialization,w
 11965  13C4  0081               	movwf	1
 11966                           
 11967                           ;Dimmer_B1.c: 346: DimmerLights->MinimumValue = ((char)((100-20)*1.5));
 11968  13C5  3078               	movlw	120
 11969  13C6  00A2               	movwf	??_setDimmerLights_Initialization
 11970  13C7  0879               	movf	_DimmerLights,w
 11971  13C8  3E06               	addlw	6
 11972  13C9  0086               	movwf	6
 11973  13CA  3001               	movlw	1	; select bank2/3
 11974  13CB  0087               	movwf	7
 11975  13CC  0822               	movf	??_setDimmerLights_Initialization,w
 11976  13CD  0081               	movwf	1
 11977                           
 11978                           ;Dimmer_B1.c: 356: DimmerLights->DimmingValue = DimmerLights->MinimumValue;
 11979  13CE  0879               	movf	_DimmerLights,w
 11980  13CF  3E06               	addlw	6
 11981  13D0  0086               	movwf	6
 11982  13D1  3001               	movlw	1	; select bank2/3
 11983  13D2  0087               	movwf	7
 11984  13D3  0801               	movf	1,w
 11985  13D4  00A2               	movwf	??_setDimmerLights_Initialization
 11986  13D5  0879               	movf	_DimmerLights,w
 11987  13D6  3E04               	addlw	4
 11988  13D7  0086               	movwf	6
 11989  13D8  3001               	movlw	1	; select bank2/3
 11990  13D9  0087               	movwf	7
 11991  13DA  0822               	movf	??_setDimmerLights_Initialization,w
 11992  13DB  0081               	movwf	1
 11993  13DC  0008               	return
 11994  13DD                     __end_of_setDimmerLights_Initialization:	
 11995                           
 11996                           	psect	text70
 11997  1E55                     __ptext70:	
 11998 ;; *************** function _Dimmer_Initialization *****************
 11999 ;; Defined at:
 12000 ;;		line 759 in file "../src/Dimmer_B1.c"
 12001 ;; Parameters:    Size  Location     Type
 12002 ;;		None
 12003 ;; Auto vars:     Size  Location     Type
 12004 ;;		None
 12005 ;; Return value:  Size  Location     Type
 12006 ;;		None               void
 12007 ;; Registers used:
 12008 ;;		wreg
 12009 ;; Tracked objects:
 12010 ;;		On entry : 0/0
 12011 ;;		On exit  : 0/0
 12012 ;;		Unchanged: 0/0
 12013 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12014 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12015 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12016 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12017 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12018 ;;Total ram usage:        1 bytes
 12019 ;; Hardware stack levels used:    1
 12020 ;; Hardware stack levels required when called:    5
 12021 ;; This function calls:
 12022 ;;		Nothing
 12023 ;; This function is called by:
 12024 ;;		_DimmerLights_Initialization
 12025 ;; This function uses a non-reentrant model
 12026 ;;
 12027                           
 12028                           
 12029                           ;psect for function _Dimmer_Initialization
 12030  1E55                     _Dimmer_Initialization:	
 12031                           
 12032                           ;Dimmer_B1.c: 760: Dimmer = &Dimmer1;
 12033                           
 12034                           ;incstack = 0
 12035                           ; Regs used in _Dimmer_Initialization: [wreg]
 12036  1E55  30E1               	movlw	_Dimmer1& (0+255)
 12037  1E56  0020               	movlb	0	; select bank0
 12038  1E57  00A0               	movwf	??_Dimmer_Initialization
 12039  1E58  0820               	movf	??_Dimmer_Initialization,w
 12040  1E59  0021               	movlb	1	; select bank1
 12041  1E5A  00B9               	movwf	_Dimmer^(0+128)
 12042  1E5B  0008               	return
 12043  1E5C                     __end_of_Dimmer_Initialization:	
 12044                           
 12045                           	psect	text71
 12046  1E72                     __ptext71:	
 12047 ;; *************** function _DelayOff_Main *****************
 12048 ;; Defined at:
 12049 ;;		line 41 in file "../src/DelayOff_B1.c"
 12050 ;; Parameters:    Size  Location     Type
 12051 ;;		None
 12052 ;; Auto vars:     Size  Location     Type
 12053 ;;		None
 12054 ;; Return value:  Size  Location     Type
 12055 ;;		None               void
 12056 ;; Registers used:
 12057 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12058 ;; Tracked objects:
 12059 ;;		On entry : 0/0
 12060 ;;		On exit  : 0/0
 12061 ;;		Unchanged: 0/0
 12062 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12063 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12064 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12065 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12066 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12067 ;;Total ram usage:        0 bytes
 12068 ;; Hardware stack levels used:    1
 12069 ;; Hardware stack levels required when called:   10
 12070 ;; This function calls:
 12071 ;;		_DlyOff_Main
 12072 ;; This function is called by:
 12073 ;;		_main
 12074 ;; This function uses a non-reentrant model
 12075 ;;
 12076                           
 12077                           
 12078                           ;psect for function _DelayOff_Main
 12079  1E72                     _DelayOff_Main:	
 12080                           
 12081                           ;DelayOff_B1.c: 43: DlyOff_Main(1);
 12082                           
 12083                           ;incstack = 0
 12084                           ; Regs used in _DelayOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12085  1E72  3001               	movlw	1
 12086  1E73  318C  243E  319E   	fcall	_DlyOff_Main
 12087                           
 12088                           ;DelayOff_B1.c: 47: DlyOff_Main(2);
 12089  1E76  3002               	movlw	2
 12090  1E77  318C  243E         	fcall	_DlyOff_Main
 12091  1E79  0008               	return
 12092  1E7A                     __end_of_DelayOff_Main:	
 12093                           
 12094                           	psect	text72
 12095  0C3E                     __ptext72:	
 12096 ;; *************** function _DlyOff_Main *****************
 12097 ;; Defined at:
 12098 ;;		line 62 in file "../src/DelayOff_B1.c"
 12099 ;; Parameters:    Size  Location     Type
 12100 ;;  sw              1    wreg     unsigned char 
 12101 ;; Auto vars:     Size  Location     Type
 12102 ;;  sw              1   68[BANK0 ] unsigned char 
 12103 ;; Return value:  Size  Location     Type
 12104 ;;		None               void
 12105 ;; Registers used:
 12106 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12107 ;; Tracked objects:
 12108 ;;		On entry : 0/0
 12109 ;;		On exit  : 0/0
 12110 ;;		Unchanged: 0/0
 12111 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12112 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12113 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12114 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12115 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12116 ;;Total ram usage:        3 bytes
 12117 ;; Hardware stack levels used:    1
 12118 ;; Hardware stack levels required when called:    9
 12119 ;; This function calls:
 12120 ;;		_DelayOffPointSelect
 12121 ;;		_setBuz
 12122 ;;		_setDimmerLights_Switch
 12123 ;;		_setDimmerLights_Trigger
 12124 ;;		_setRFSW_Status
 12125 ;;		_setRF_DimmerLights
 12126 ;;		_setSw_Status
 12127 ;;		_setTxData
 12128 ;; This function is called by:
 12129 ;;		_DelayOff_Main
 12130 ;; This function uses a non-reentrant model
 12131 ;;
 12132                           
 12133                           
 12134                           ;psect for function _DlyOff_Main
 12135  0C3E                     _DlyOff_Main:	
 12136                           
 12137                           ;incstack = 0
 12138                           ; Regs used in _DlyOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12139                           ;DlyOff_Main@sw stored from wreg
 12140  0C3E  0020               	movlb	0	; select bank0
 12141  0C3F  00E4               	movwf	DlyOff_Main@sw
 12142                           
 12143                           ;DelayOff_B1.c: 63: DelayOffPointSelect(sw);
 12144  0C40  0864               	movf	DlyOff_Main@sw,w
 12145  0C41  3191  2113  318C   	fcall	_DelayOffPointSelect
 12146                           
 12147                           ;DelayOff_B1.c: 64: if (DelayOff->GO) {
 12148  0C44  0021               	movlb	1	; select bank1
 12149  0C45  0838               	movf	_DelayOff^(0+128),w
 12150  0C46  0086               	movwf	6
 12151  0C47  0187               	clrf	7
 12152  0C48  1C81               	btfss	1,1
 12153  0C49  0008               	return
 12154                           
 12155                           ;DelayOff_B1.c: 65: DelayOff->SecondTime++;
 12156  0C4A  0838               	movf	_DelayOff^(0+128),w
 12157  0C4B  3E02               	addlw	2
 12158  0C4C  0086               	movwf	6
 12159  0C4D  0187               	clrf	7
 12160  0C4E  3001               	movlw	1
 12161  0C4F  0781               	addwf	1,f
 12162  0C50  3141               	addfsr 1,1
 12163  0C51  1803               	skipnc
 12164  0C52  0A81               	incf	1,f
 12165                           
 12166                           ;DelayOff_B1.c: 66: if (DelayOff->SecondTime >= 5650) {
 12167  0C53  0838               	movf	_DelayOff^(0+128),w
 12168  0C54  3E02               	addlw	2
 12169  0C55  0086               	movwf	6
 12170  0C56  0187               	clrf	7
 12171  0C57  3F40               	moviw [0]fsr1
 12172  0C58  0020               	movlb	0	; select bank0
 12173  0C59  00E2               	movwf	??_DlyOff_Main
 12174  0C5A  3F41               	moviw [1]fsr1
 12175  0C5B  00E3               	movwf	??_DlyOff_Main+1
 12176  0C5C  3016               	movlw	22
 12177  0C5D  0263               	subwf	??_DlyOff_Main+1,w
 12178  0C5E  3012               	movlw	18
 12179  0C5F  1903               	skipnz
 12180  0C60  0262               	subwf	??_DlyOff_Main,w
 12181  0C61  1C03               	skipc
 12182  0C62  0008               	return
 12183                           
 12184                           ;DelayOff_B1.c: 67: DelayOff->SecondTime = 0;
 12185  0C63  0021               	movlb	1	; select bank1
 12186  0C64  0838               	movf	_DelayOff^(0+128),w
 12187  0C65  3E02               	addlw	2
 12188  0C66  0086               	movwf	6
 12189  0C67  0187               	clrf	7
 12190  0C68  3000               	movlw	0
 12191  0C69  3FC0               	movwi [0]fsr1
 12192  0C6A  3FC1               	movwi [1]fsr1
 12193                           
 12194                           ;DelayOff_B1.c: 68: DelayOff->MinuteTime++;
 12195  0C6B  3001               	movlw	1
 12196  0C6C  0020               	movlb	0	; select bank0
 12197  0C6D  00E2               	movwf	??_DlyOff_Main
 12198  0C6E  0021               	movlb	1	; select bank1
 12199  0C6F  0838               	movf	_DelayOff^(0+128),w
 12200  0C70  3E04               	addlw	4
 12201  0C71  0086               	movwf	6
 12202  0C72  0187               	clrf	7
 12203  0C73  0020               	movlb	0	; select bank0
 12204  0C74  0862               	movf	??_DlyOff_Main,w
 12205  0C75  0781               	addwf	1,f
 12206                           
 12207                           ;DelayOff_B1.c: 69: if (DelayOff->MinuteTime >= DelayOff->Value) {
 12208  0C76  0021               	movlb	1	; select bank1
 12209  0C77  0838               	movf	_DelayOff^(0+128),w
 12210  0C78  3E04               	addlw	4
 12211  0C79  0086               	movwf	6
 12212  0C7A  0187               	clrf	7
 12213  0C7B  0A38               	incf	_DelayOff^(0+128),w
 12214  0C7C  0084               	movwf	4
 12215  0C7D  0185               	clrf	5
 12216  0C7E  0800               	movf	0,w
 12217  0C7F  0201               	subwf	1,w
 12218  0C80  1C03               	skipc
 12219  0C81  0008               	return
 12220                           
 12221                           ;DelayOff_B1.c: 70: DelayOff->MinuteTime = 0;
 12222  0C82  0838               	movf	_DelayOff^(0+128),w
 12223  0C83  3E04               	addlw	4
 12224  0C84  0086               	movwf	6
 12225  0C85  0187               	clrf	7
 12226  0C86  0181               	clrf	1
 12227                           
 12228                           ;DelayOff_B1.c: 71: DelayOff->GO = 0;
 12229  0C87  0838               	movf	_DelayOff^(0+128),w
 12230  0C88  0086               	movwf	6
 12231  0C89  0187               	clrf	7
 12232  0C8A  1081               	bcf	1,1
 12233                           
 12234                           ;DelayOff_B1.c: 72: setSw_Status(sw, 0);
 12235  0C8B  0020               	movlb	0	; select bank0
 12236  0C8C  01A2               	clrf	setSw_Status@command
 12237  0C8D  0864               	movf	DlyOff_Main@sw,w
 12238  0C8E  319F  275F  318C   	fcall	_setSw_Status
 12239                           
 12240                           ;DelayOff_B1.c: 73: setRFSW_Status(sw, 0);
 12241  0C91  0020               	movlb	0	; select bank0
 12242  0C92  01A2               	clrf	setRFSW_Status@command
 12243  0C93  0864               	movf	DlyOff_Main@sw,w
 12244  0C94  319F  2750  318C   	fcall	_setRFSW_Status
 12245                           
 12246                           ;DelayOff_B1.c: 74: setRF_DimmerLights(sw, 0);
 12247  0C97  0020               	movlb	0	; select bank0
 12248  0C98  01DD               	clrf	setRF_DimmerLights@on
 12249  0C99  0864               	movf	DlyOff_Main@sw,w
 12250  0C9A  3189  2197  318C   	fcall	_setRF_DimmerLights
 12251                           
 12252                           ;DelayOff_B1.c: 75: setDimmerLights_Trigger(sw, 1);
 12253  0C9D  0020               	movlb	0	; select bank0
 12254  0C9E  01A2               	clrf	setDimmerLights_Trigger@command
 12255  0C9F  0AA2               	incf	setDimmerLights_Trigger@command,f
 12256  0CA0  0864               	movf	DlyOff_Main@sw,w
 12257  0CA1  319F  27AD  318C   	fcall	_setDimmerLights_Trigger
 12258                           
 12259                           ;DelayOff_B1.c: 76: setDimmerLights_Switch(sw, 0);
 12260  0CA4  0020               	movlb	0	; select bank0
 12261  0CA5  01A2               	clrf	setDimmerLights_Switch@command
 12262  0CA6  0864               	movf	DlyOff_Main@sw,w
 12263  0CA7  319F  279D  318C   	fcall	_setDimmerLights_Switch
 12264                           
 12265                           ;DelayOff_B1.c: 77: setTxData(1);
 12266  0CAA  3001               	movlw	1
 12267  0CAB  318F  275F  318C   	fcall	_setTxData
 12268                           
 12269                           ;DelayOff_B1.c: 78: setBuz(1, 100);
 12270  0CAE  3064               	movlw	100
 12271  0CAF  0020               	movlb	0	; select bank0
 12272  0CB0  00A9               	movwf	setBuz@time
 12273  0CB1  3000               	movlw	0
 12274  0CB2  00AA               	movwf	setBuz@time+1
 12275  0CB3  3001               	movlw	1
 12276  0CB4  318B  23C7         	fcall	_setBuz
 12277  0CB6  0008               	return
 12278  0CB7                     __end_of_DlyOff_Main:	
 12279                           
 12280                           	psect	text73
 12281  0F5F                     __ptext73:	
 12282 ;; *************** function _setTxData *****************
 12283 ;; Defined at:
 12284 ;;		line 140 in file "../src/RF_Control_B1.c"
 12285 ;; Parameters:    Size  Location     Type
 12286 ;;  rf              1    wreg     unsigned char 
 12287 ;; Auto vars:     Size  Location     Type
 12288 ;;  rf              1    3[BANK0 ] unsigned char 
 12289 ;;  i               1    0        unsigned char 
 12290 ;; Return value:  Size  Location     Type
 12291 ;;		None               void
 12292 ;; Registers used:
 12293 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12294 ;; Tracked objects:
 12295 ;;		On entry : 0/0
 12296 ;;		On exit  : 0/0
 12297 ;;		Unchanged: 0/0
 12298 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12299 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12300 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12301 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12302 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12303 ;;Total ram usage:        2 bytes
 12304 ;; Hardware stack levels used:    1
 12305 ;; Hardware stack levels required when called:    6
 12306 ;; This function calls:
 12307 ;;		_RfPointSelect
 12308 ;; This function is called by:
 12309 ;;		_DlyOff_Main
 12310 ;;		_setDimmerLights_Adj
 12311 ;;		_setControl_Lights_Table
 12312 ;;		_setRFSW_Control
 12313 ;;		_setRFSW_AdjControl
 12314 ;;		_Sw_DimmerOnFunc
 12315 ;;		_Sw_DimmerOffFunc
 12316 ;; This function uses a non-reentrant model
 12317 ;;
 12318                           
 12319                           
 12320                           ;psect for function _setTxData
 12321  0F5F                     _setTxData:	
 12322                           
 12323                           ;incstack = 0
 12324                           ; Regs used in _setTxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12325                           ;setTxData@rf stored from wreg
 12326  0F5F  0020               	movlb	0	; select bank0
 12327  0F60  00A3               	movwf	setTxData@rf
 12328                           
 12329                           ;RF_Control_B1.c: 141: char i;
 12330                           ;RF_Control_B1.c: 142: RfPointSelect(rf);
 12331  0F61  0823               	movf	setTxData@rf,w
 12332  0F62  319E  26DF  318F   	fcall	_RfPointSelect
 12333                           
 12334                           ;RF_Control_B1.c: 143: if (RF->Enable == 1) {
 12335  0F65  0021               	movlb	1	; select bank1
 12336  0F66  083D               	movf	_RF^(0+128),w
 12337  0F67  0086               	movwf	6
 12338  0F68  0187               	clrf	7
 12339  0F69  1C01               	btfss	1,0
 12340  0F6A  0008               	return
 12341                           
 12342                           ;RF_Control_B1.c: 145: RF->TransceiveGO = 1;
 12343  0F6B  083D               	movf	_RF^(0+128),w
 12344  0F6C  0086               	movwf	6
 12345  0F6D  0187               	clrf	7
 12346  0F6E  1501               	bsf	1,2
 12347                           
 12348                           ;RF_Control_B1.c: 155: RF_Data[0] = 0x63;
 12349  0F6F  3063               	movlw	99
 12350  0F70  0020               	movlb	0	; select bank0
 12351  0F71  00A2               	movwf	??_setTxData
 12352  0F72  0822               	movf	??_setTxData,w
 12353  0F73  0021               	movlb	1	; select bank1
 12354  0F74  00A0               	movwf	_RF_Data^(0+128)
 12355                           
 12356                           ;RF_Control_B1.c: 156: RF_Data[1] = 0x02;
 12357  0F75  3002               	movlw	2
 12358  0F76  0020               	movlb	0	; select bank0
 12359  0F77  00A2               	movwf	??_setTxData
 12360  0F78  0822               	movf	??_setTxData,w
 12361  0F79  0021               	movlb	1	; select bank1
 12362  0F7A  00A1               	movwf	(_RF_Data^(0+128)+1)
 12363                           
 12364                           ;RF_Control_B1.c: 157: RF_Data[2] = product->Data[2];
 12365  0F7B  087D               	movf	_product,w
 12366  0F7C  0086               	movwf	6
 12367  0F7D  3001               	movlw	1	; select bank2/3
 12368  0F7E  0087               	movwf	7
 12369  0F7F  3001               	movlw	1	; select bank2/3
 12370  0F80  3F42               	moviw [2]fsr1
 12371  0F81  00A2               	movwf	(_RF_Data^(0+128)+2)
 12372                           
 12373                           ;RF_Control_B1.c: 158: RF_Data[3] = product->Data[3];
 12374  0F82  087D               	movf	_product,w
 12375  0F83  0086               	movwf	6
 12376  0F84  3001               	movlw	1	; select bank2/3
 12377  0F85  0087               	movwf	7
 12378  0F86  3001               	movlw	1	; select bank2/3
 12379  0F87  3F43               	moviw [3]fsr1
 12380  0F88  00A3               	movwf	(_RF_Data^(0+128)+3)
 12381                           
 12382                           ;RF_Control_B1.c: 159: RF_Data[4] = product->Data[4];
 12383  0F89  087D               	movf	_product,w
 12384  0F8A  0086               	movwf	6
 12385  0F8B  3001               	movlw	1	; select bank2/3
 12386  0F8C  0087               	movwf	7
 12387  0F8D  3001               	movlw	1	; select bank2/3
 12388  0F8E  3F44               	moviw [4]fsr1
 12389  0F8F  00A4               	movwf	(_RF_Data^(0+128)+4)
 12390                           
 12391                           ;RF_Control_B1.c: 160: RF_Data[5] = product->Data[5];
 12392  0F90  087D               	movf	_product,w
 12393  0F91  0086               	movwf	6
 12394  0F92  3001               	movlw	1	; select bank2/3
 12395  0F93  0087               	movwf	7
 12396  0F94  3001               	movlw	1	; select bank2/3
 12397  0F95  3F45               	moviw [5]fsr1
 12398  0F96  00A5               	movwf	(_RF_Data^(0+128)+5)
 12399                           
 12400                           ;RF_Control_B1.c: 161: RF_Data[6] = product->Data[6];
 12401  0F97  087D               	movf	_product,w
 12402  0F98  0086               	movwf	6
 12403  0F99  3001               	movlw	1	; select bank2/3
 12404  0F9A  0087               	movwf	7
 12405  0F9B  3001               	movlw	1	; select bank2/3
 12406  0F9C  3F46               	moviw [6]fsr1
 12407  0F9D  00A6               	movwf	(_RF_Data^(0+128)+6)
 12408                           
 12409                           ;RF_Control_B1.c: 162: RF_Data[7] = product->Data[7];
 12410  0F9E  087D               	movf	_product,w
 12411  0F9F  0086               	movwf	6
 12412  0FA0  3001               	movlw	1	; select bank2/3
 12413  0FA1  0087               	movwf	7
 12414  0FA2  3001               	movlw	1	; select bank2/3
 12415  0FA3  3F47               	moviw [7]fsr1
 12416  0FA4  00A7               	movwf	(_RF_Data^(0+128)+7)
 12417                           
 12418                           ;RF_Control_B1.c: 163: RF_Data[8] = product->Data[8];
 12419  0FA5  087D               	movf	_product,w
 12420  0FA6  0086               	movwf	6
 12421  0FA7  3001               	movlw	1	; select bank2/3
 12422  0FA8  0087               	movwf	7
 12423  0FA9  3001               	movlw	1	; select bank2/3
 12424  0FAA  3F48               	moviw [8]fsr1
 12425  0FAB  00A8               	movwf	(_RF_Data^(0+128)+8)
 12426                           
 12427                           ;RF_Control_B1.c: 164: RF_Data[9] = product->Data[9];
 12428  0FAC  087D               	movf	_product,w
 12429  0FAD  0086               	movwf	6
 12430  0FAE  3001               	movlw	1	; select bank2/3
 12431  0FAF  0087               	movwf	7
 12432  0FB0  3001               	movlw	1	; select bank2/3
 12433  0FB1  3F49               	moviw [9]fsr1
 12434  0FB2  00A9               	movwf	(_RF_Data^(0+128)+9)
 12435                           
 12436                           ;RF_Control_B1.c: 165: RF_Data[10] = product->Data[10];
 12437  0FB3  087D               	movf	_product,w
 12438  0FB4  0086               	movwf	6
 12439  0FB5  3001               	movlw	1	; select bank2/3
 12440  0FB6  0087               	movwf	7
 12441  0FB7  3001               	movlw	1	; select bank2/3
 12442  0FB8  3F4A               	moviw [10]fsr1
 12443  0FB9  00AA               	movwf	(_RF_Data^(0+128)+10)
 12444                           
 12445                           ;RF_Control_B1.c: 166: RF_Data[11] = product->Data[11];
 12446  0FBA  087D               	movf	_product,w
 12447  0FBB  0086               	movwf	6
 12448  0FBC  3001               	movlw	1	; select bank2/3
 12449  0FBD  0087               	movwf	7
 12450  0FBE  3001               	movlw	1	; select bank2/3
 12451  0FBF  3F4B               	moviw [11]fsr1
 12452  0FC0  00AB               	movwf	(_RF_Data^(0+128)+11)
 12453                           
 12454                           ;RF_Control_B1.c: 167: RF_Data[12] = product->Data[12];
 12455  0FC1  087D               	movf	_product,w
 12456  0FC2  0086               	movwf	6
 12457  0FC3  3001               	movlw	1	; select bank2/3
 12458  0FC4  0087               	movwf	7
 12459  0FC5  3001               	movlw	1	; select bank2/3
 12460  0FC6  3F4C               	moviw [12]fsr1
 12461  0FC7  00AC               	movwf	(_RF_Data^(0+128)+12)
 12462                           
 12463                           ;RF_Control_B1.c: 168: RF_Data[13] = product->Data[13];
 12464  0FC8  087D               	movf	_product,w
 12465  0FC9  0086               	movwf	6
 12466  0FCA  3001               	movlw	1	; select bank2/3
 12467  0FCB  0087               	movwf	7
 12468  0FCC  3001               	movlw	1	; select bank2/3
 12469  0FCD  3F4D               	moviw [13]fsr1
 12470  0FCE  00AD               	movwf	(_RF_Data^(0+128)+13)
 12471                           
 12472                           ;RF_Control_B1.c: 169: RF_Data[14] = product->Data[14];
 12473  0FCF  087D               	movf	_product,w
 12474  0FD0  0086               	movwf	6
 12475  0FD1  3001               	movlw	1	; select bank2/3
 12476  0FD2  0087               	movwf	7
 12477  0FD3  3001               	movlw	1	; select bank2/3
 12478  0FD4  3F4E               	moviw [14]fsr1
 12479  0FD5  00AE               	movwf	(_RF_Data^(0+128)+14)
 12480                           
 12481                           ;RF_Control_B1.c: 170: RF_Data[15] = product->Data[15];
 12482  0FD6  087D               	movf	_product,w
 12483  0FD7  0086               	movwf	6
 12484  0FD8  3001               	movlw	1	; select bank2/3
 12485  0FD9  0087               	movwf	7
 12486  0FDA  3001               	movlw	1	; select bank2/3
 12487  0FDB  3F4F               	moviw [15]fsr1
 12488  0FDC  00AF               	movwf	(_RF_Data^(0+128)+15)
 12489                           
 12490                           ;RF_Control_B1.c: 171: RF_Data[16] = product->Data[16];
 12491  0FDD  087D               	movf	_product,w
 12492  0FDE  0086               	movwf	6
 12493  0FDF  3001               	movlw	1	; select bank2/3
 12494  0FE0  0087               	movwf	7
 12495  0FE1  3001               	movlw	1	; select bank2/3
 12496  0FE2  3F50               	moviw [16]fsr1
 12497  0FE3  00B0               	movwf	(_RF_Data^(0+128)+16)
 12498                           
 12499                           ;RF_Control_B1.c: 172: RF_Data[17] = product->Data[17];
 12500  0FE4  087D               	movf	_product,w
 12501  0FE5  0086               	movwf	6
 12502  0FE6  3001               	movlw	1	; select bank2/3
 12503  0FE7  0087               	movwf	7
 12504  0FE8  3001               	movlw	1	; select bank2/3
 12505  0FE9  3F51               	moviw [17]fsr1
 12506  0FEA  00B1               	movwf	(_RF_Data^(0+128)+17)
 12507                           
 12508                           ;RF_Control_B1.c: 173: RF_Data[18] = product->Data[18];
 12509  0FEB  087D               	movf	_product,w
 12510  0FEC  0086               	movwf	6
 12511  0FED  3001               	movlw	1	; select bank2/3
 12512  0FEE  0087               	movwf	7
 12513  0FEF  3001               	movlw	1	; select bank2/3
 12514  0FF0  3F52               	moviw [18]fsr1
 12515  0FF1  00B2               	movwf	(_RF_Data^(0+128)+18)
 12516                           
 12517                           ;RF_Control_B1.c: 174: RF_Data[19] = product->Data[19];
 12518  0FF2  087D               	movf	_product,w
 12519  0FF3  0086               	movwf	6
 12520  0FF4  3001               	movlw	1	; select bank2/3
 12521  0FF5  0087               	movwf	7
 12522  0FF6  3001               	movlw	1	; select bank2/3
 12523  0FF7  3F53               	moviw [19]fsr1
 12524  0FF8  00B3               	movwf	(_RF_Data^(0+128)+19)
 12525                           
 12526                           ;RF_Control_B1.c: 175: RF_Data[20] = 210;
 12527  0FF9  30D2               	movlw	210
 12528  0FFA  0020               	movlb	0	; select bank0
 12529  0FFB  00A2               	movwf	??_setTxData
 12530  0FFC  0822               	movf	??_setTxData,w
 12531  0FFD  0021               	movlb	1	; select bank1
 12532  0FFE  00B4               	movwf	(_RF_Data^(0+128)+20)
 12533  0FFF  0008               	return
 12534  1000                     __end_of_setTxData:	
 12535                           
 12536                           	psect	text74
 12537  1EDF                     __ptext74:	
 12538 ;; *************** function _RfPointSelect *****************
 12539 ;; Defined at:
 12540 ;;		line 7 in file "../src/RF_Control_B1.c"
 12541 ;; Parameters:    Size  Location     Type
 12542 ;;  rf              1    wreg     unsigned char 
 12543 ;; Auto vars:     Size  Location     Type
 12544 ;;  rf              1    1[BANK0 ] unsigned char 
 12545 ;; Return value:  Size  Location     Type
 12546 ;;		None               void
 12547 ;; Registers used:
 12548 ;;		wreg
 12549 ;; Tracked objects:
 12550 ;;		On entry : 0/0
 12551 ;;		On exit  : 0/0
 12552 ;;		Unchanged: 0/0
 12553 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12554 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12555 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12556 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12557 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12558 ;;Total ram usage:        2 bytes
 12559 ;; Hardware stack levels used:    1
 12560 ;; Hardware stack levels required when called:    5
 12561 ;; This function calls:
 12562 ;;		Nothing
 12563 ;; This function is called by:
 12564 ;;		_setRF_Learn
 12565 ;;		_setRF_Main
 12566 ;;		_setTxData
 12567 ;;		_setRF_Enable
 12568 ;;		_RF_RxDisable
 12569 ;;		_getRxData
 12570 ;;		_setLog_Code
 12571 ;;		_setControl_Lights_Table
 12572 ;; This function uses a non-reentrant model
 12573 ;;
 12574                           
 12575                           
 12576                           ;psect for function _RfPointSelect
 12577  1EDF                     _RfPointSelect:	
 12578                           
 12579                           ;incstack = 0
 12580                           ; Regs used in _RfPointSelect: [wreg]
 12581                           ;RfPointSelect@rf stored from wreg
 12582  1EDF  0020               	movlb	0	; select bank0
 12583  1EE0  00A1               	movwf	RfPointSelect@rf
 12584                           
 12585                           ;RF_Control_B1.c: 9: if (rf == 1) {
 12586  1EE1  0821               	movf	RfPointSelect@rf,w
 12587  1EE2  3A01               	xorlw	1
 12588  1EE3  1D03               	skipz
 12589  1EE4  0008               	return
 12590                           
 12591                           ;RF_Control_B1.c: 10: RF = &RF1;
 12592  1EE5  30D0               	movlw	_RF1& (0+255)
 12593  1EE6  00A0               	movwf	??_RfPointSelect
 12594  1EE7  0820               	movf	??_RfPointSelect,w
 12595  1EE8  0021               	movlb	1	; select bank1
 12596  1EE9  00BD               	movwf	_RF^(0+128)
 12597  1EEA  0008               	return
 12598  1EEB                     __end_of_RfPointSelect:	
 12599                           
 12600                           	psect	text75
 12601  1F5F                     __ptext75:	
 12602 ;; *************** function _setSw_Status *****************
 12603 ;; Defined at:
 12604 ;;		line 105 in file "../src/Switch_B1.c"
 12605 ;; Parameters:    Size  Location     Type
 12606 ;;  sw              1    wreg     unsigned char 
 12607 ;;  command         1    2[BANK0 ] unsigned char 
 12608 ;; Auto vars:     Size  Location     Type
 12609 ;;  sw              1    3[BANK0 ] unsigned char 
 12610 ;; Return value:  Size  Location     Type
 12611 ;;		None               void
 12612 ;; Registers used:
 12613 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12614 ;; Tracked objects:
 12615 ;;		On entry : 0/0
 12616 ;;		On exit  : 0/0
 12617 ;;		Unchanged: 0/0
 12618 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12619 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12620 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12621 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12622 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12623 ;;Total ram usage:        2 bytes
 12624 ;; Hardware stack levels used:    1
 12625 ;; Hardware stack levels required when called:    6
 12626 ;; This function calls:
 12627 ;;		_SwPointSelect
 12628 ;; This function is called by:
 12629 ;;		_DlyOff_Main
 12630 ;;		_setControl_Lights_Table
 12631 ;;		_setRFSW_Control
 12632 ;;		_setDimmerLights_ERROR
 12633 ;; This function uses a non-reentrant model
 12634 ;;
 12635                           
 12636                           
 12637                           ;psect for function _setSw_Status
 12638  1F5F                     _setSw_Status:	
 12639                           
 12640                           ;incstack = 0
 12641                           ; Regs used in _setSw_Status: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12642                           ;setSw_Status@sw stored from wreg
 12643  1F5F  0020               	movlb	0	; select bank0
 12644  1F60  00A3               	movwf	setSw_Status@sw
 12645                           
 12646                           ;Switch_B1.c: 106: SwPointSelect(sw);
 12647  1F61  0823               	movf	setSw_Status@sw,w
 12648  1F62  3190  20AC         	fcall	_SwPointSelect
 12649                           
 12650                           ;Switch_B1.c: 107: Sw->Status = command;
 12651  1F64  087B               	movf	_Sw,w
 12652  1F65  0086               	movwf	6
 12653  1F66  3001               	movlw	1	; select bank2/3
 12654  1F67  0087               	movwf	7
 12655  1F68  0020               	movlb	0	; select bank0
 12656  1F69  0822               	movf	setSw_Status@command,w
 12657  1F6A  1301               	bcf	1,6
 12658  1F6B  1D03               	skipz
 12659  1F6C  1701               	bsf	1,6
 12660  1F6D  0008               	return
 12661  1F6E                     __end_of_setSw_Status:	
 12662                           
 12663                           	psect	text76
 12664  10AC                     __ptext76:	
 12665 ;; *************** function _SwPointSelect *****************
 12666 ;; Defined at:
 12667 ;;		line 17 in file "../src/Switch_B1.c"
 12668 ;; Parameters:    Size  Location     Type
 12669 ;;  sw              1    wreg     unsigned char 
 12670 ;; Auto vars:     Size  Location     Type
 12671 ;;  sw              1    1[BANK0 ] unsigned char 
 12672 ;; Return value:  Size  Location     Type
 12673 ;;		None               void
 12674 ;; Registers used:
 12675 ;;		wreg
 12676 ;; Tracked objects:
 12677 ;;		On entry : 0/0
 12678 ;;		On exit  : 0/0
 12679 ;;		Unchanged: 0/0
 12680 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12681 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12682 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12683 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12684 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12685 ;;Total ram usage:        2 bytes
 12686 ;; Hardware stack levels used:    1
 12687 ;; Hardware stack levels required when called:    5
 12688 ;; This function calls:
 12689 ;;		Nothing
 12690 ;; This function is called by:
 12691 ;;		_setSw_Enable
 12692 ;;		_setSw_Status
 12693 ;;		_setSw_Main
 12694 ;;		_Sw_Detect
 12695 ;; This function uses a non-reentrant model
 12696 ;;
 12697                           
 12698                           
 12699                           ;psect for function _SwPointSelect
 12700  10AC                     _SwPointSelect:	
 12701                           
 12702                           ;incstack = 0
 12703                           ; Regs used in _SwPointSelect: [wreg]
 12704                           ;SwPointSelect@sw stored from wreg
 12705  10AC  0020               	movlb	0	; select bank0
 12706  10AD  00A1               	movwf	SwPointSelect@sw
 12707                           
 12708                           ;Switch_B1.c: 20: if (sw == 1) {
 12709  10AE  0821               	movf	SwPointSelect@sw,w
 12710  10AF  3A01               	xorlw	1
 12711  10B0  1D03               	skipz
 12712  10B1  28B7               	goto	l5456
 12713                           
 12714                           ;Switch_B1.c: 21: Sw = &Sw1;
 12715  10B2  3048               	movlw	_Sw1& (0+255)
 12716  10B3  00A0               	movwf	??_SwPointSelect
 12717  10B4  0820               	movf	??_SwPointSelect,w
 12718  10B5  00FB               	movwf	_Sw
 12719                           
 12720                           ;Switch_B1.c: 22: }
 12721  10B6  0008               	return
 12722  10B7                     l5456:	
 12723                           
 12724                           ;Switch_B1.c: 25: else if (sw == 2) {
 12725  10B7  0821               	movf	SwPointSelect@sw,w
 12726  10B8  3A02               	xorlw	2
 12727  10B9  1D03               	skipz
 12728  10BA  0008               	return
 12729                           
 12730                           ;Switch_B1.c: 26: Sw = &Sw2;
 12731  10BB  3051               	movlw	_Sw2& (0+255)
 12732  10BC  00A0               	movwf	??_SwPointSelect
 12733  10BD  0820               	movf	??_SwPointSelect,w
 12734  10BE  00FB               	movwf	_Sw
 12735  10BF  0008               	return
 12736  10C0                     __end_of_SwPointSelect:	
 12737                           
 12738                           	psect	text77
 12739  0997                     __ptext77:	
 12740 ;; *************** function _setRF_DimmerLights *****************
 12741 ;; Defined at:
 12742 ;;		line 405 in file "../src/RF_Control_B1.c"
 12743 ;; Parameters:    Size  Location     Type
 12744 ;;  lights          1    wreg     unsigned char 
 12745 ;;  on              1   61[BANK0 ] unsigned char 
 12746 ;; Auto vars:     Size  Location     Type
 12747 ;;  lights          1   65[BANK0 ] unsigned char 
 12748 ;;  status          1   64[BANK0 ] unsigned char 
 12749 ;; Return value:  Size  Location     Type
 12750 ;;		None               void
 12751 ;; Registers used:
 12752 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12753 ;; Tracked objects:
 12754 ;;		On entry : 0/0
 12755 ;;		On exit  : 0/0
 12756 ;;		Unchanged: 0/0
 12757 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12758 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12759 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12760 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12761 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12762 ;;Total ram usage:        5 bytes
 12763 ;; Hardware stack levels used:    1
 12764 ;; Hardware stack levels required when called:    8
 12765 ;; This function calls:
 12766 ;;		_setPercentValue
 12767 ;; This function is called by:
 12768 ;;		_DlyOff_Main
 12769 ;;		_setDimmerLights_Adj
 12770 ;;		_setRFSW_Control
 12771 ;;		_Sw_DimmerOnFunc
 12772 ;;		_Sw_DimmerOffFunc
 12773 ;; This function uses a non-reentrant model
 12774 ;;
 12775                           
 12776                           
 12777                           ;psect for function _setRF_DimmerLights
 12778  0997                     _setRF_DimmerLights:	
 12779                           
 12780                           ;incstack = 0
 12781                           ; Regs used in _setRF_DimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12782                           ;setRF_DimmerLights@lights stored from wreg
 12783  0997  0020               	movlb	0	; select bank0
 12784  0998  00E1               	movwf	setRF_DimmerLights@lights
 12785                           
 12786                           ;RF_Control_B1.c: 406: char status;
 12787                           ;RF_Control_B1.c: 407: status = 1;
 12788  0999  01E0               	clrf	setRF_DimmerLights@status
 12789  099A  0AE0               	incf	setRF_DimmerLights@status,f
 12790                           
 12791                           ;RF_Control_B1.c: 408: status <<= (lights - 1);
 12792  099B  0861               	movf	setRF_DimmerLights@lights,w
 12793  099C  3EFF               	addlw	-1
 12794  099D  0A89               	incf	9,f
 12795  099E  29A1               	goto	u4060
 12796  099F                     u4065:	
 12797  099F  1003               	clrc
 12798  09A0  0DE0               	rlf	setRF_DimmerLights@status,f
 12799  09A1                     u4060:	
 12800  09A1  3EFF               	addlw	-1
 12801  09A2  1D03               	skipz
 12802  09A3  299F               	goto	u4065
 12803                           
 12804                           ;RF_Control_B1.c: 409: product->Data[11]=lights;
 12805  09A4  0861               	movf	setRF_DimmerLights@lights,w
 12806  09A5  00DE               	movwf	??_setRF_DimmerLights
 12807  09A6  087D               	movf	_product,w
 12808  09A7  3E0B               	addlw	11
 12809  09A8  0086               	movwf	6
 12810  09A9  3001               	movlw	1	; select bank2/3
 12811  09AA  0087               	movwf	7
 12812  09AB  085E               	movf	??_setRF_DimmerLights,w
 12813  09AC  0081               	movwf	1
 12814                           
 12815                           ;RF_Control_B1.c: 412: product->Data[(20 + lights)]=setPercentValue(((char)((100-55)*1.5
      +                          )));
 12816  09AD  3043               	movlw	67
 12817  09AE  3196  2623  3189   	fcall	_setPercentValue
 12818  09B1  0020               	movlb	0	; select bank0
 12819  09B2  00DE               	movwf	??_setRF_DimmerLights
 12820  09B3  0861               	movf	setRF_DimmerLights@lights,w
 12821  09B4  3E14               	addlw	20
 12822  09B5  077D               	addwf	_product,w
 12823  09B6  00DF               	movwf	??_setRF_DimmerLights+1
 12824  09B7  085F               	movf	??_setRF_DimmerLights+1,w
 12825  09B8  0086               	movwf	6
 12826  09B9  3001               	movlw	1	; select bank2/3
 12827  09BA  0087               	movwf	7
 12828  09BB  085E               	movf	??_setRF_DimmerLights,w
 12829  09BC  0081               	movwf	1
 12830                           
 12831                           ;RF_Control_B1.c: 415: product->Data[9]=product->Data[20 + lights];
 12832  09BD  0861               	movf	setRF_DimmerLights@lights,w
 12833  09BE  3E14               	addlw	20
 12834  09BF  077D               	addwf	_product,w
 12835  09C0  00DE               	movwf	??_setRF_DimmerLights
 12836  09C1  085E               	movf	??_setRF_DimmerLights,w
 12837  09C2  0086               	movwf	6
 12838  09C3  3001               	movlw	1	; select bank2/3
 12839  09C4  0087               	movwf	7
 12840  09C5  0801               	movf	1,w
 12841  09C6  00DF               	movwf	??_setRF_DimmerLights+1
 12842  09C7  087D               	movf	_product,w
 12843  09C8  3E09               	addlw	9
 12844  09C9  0086               	movwf	6
 12845  09CA  3001               	movlw	1	; select bank2/3
 12846  09CB  0087               	movwf	7
 12847  09CC  085F               	movf	??_setRF_DimmerLights+1,w
 12848  09CD  0081               	movwf	1
 12849                           
 12850                           ;RF_Control_B1.c: 416: product->Data[17]=product->Data[26 + lights];
 12851  09CE  0861               	movf	setRF_DimmerLights@lights,w
 12852  09CF  3E1A               	addlw	26
 12853  09D0  077D               	addwf	_product,w
 12854  09D1  00DE               	movwf	??_setRF_DimmerLights
 12855  09D2  085E               	movf	??_setRF_DimmerLights,w
 12856  09D3  0086               	movwf	6
 12857  09D4  3001               	movlw	1	; select bank2/3
 12858  09D5  0087               	movwf	7
 12859  09D6  0801               	movf	1,w
 12860  09D7  00DF               	movwf	??_setRF_DimmerLights+1
 12861  09D8  087D               	movf	_product,w
 12862  09D9  3E11               	addlw	17
 12863  09DA  0086               	movwf	6
 12864  09DB  3001               	movlw	1	; select bank2/3
 12865  09DC  0087               	movwf	7
 12866  09DD  085F               	movf	??_setRF_DimmerLights+1,w
 12867  09DE  0081               	movwf	1
 12868                           
 12869                           ;RF_Control_B1.c: 417: if (on == 1) {
 12870  09DF  085D               	movf	setRF_DimmerLights@on,w
 12871  09E0  3A01               	xorlw	1
 12872  09E1  1D03               	skipz
 12873  09E2  29F3               	goto	l5542
 12874                           
 12875                           ;RF_Control_B1.c: 418: product->Data[15]=(product->Data[15] | status);
 12876  09E3  087D               	movf	_product,w
 12877  09E4  3E0F               	addlw	15
 12878  09E5  0086               	movwf	6
 12879  09E6  3001               	movlw	1	; select bank2/3
 12880  09E7  0087               	movwf	7
 12881  09E8  0801               	movf	1,w
 12882  09E9  0460               	iorwf	setRF_DimmerLights@status,w
 12883  09EA  00DE               	movwf	??_setRF_DimmerLights
 12884  09EB  087D               	movf	_product,w
 12885  09EC  3E0F               	addlw	15
 12886  09ED  0086               	movwf	6
 12887  09EE  3001               	movlw	1	; select bank2/3
 12888  09EF  0087               	movwf	7
 12889  09F0  085E               	movf	??_setRF_DimmerLights,w
 12890  09F1  0081               	movwf	1
 12891                           
 12892                           ;RF_Control_B1.c: 419: } else {
 12893  09F2  0008               	return
 12894  09F3                     l5542:	
 12895                           
 12896                           ;RF_Control_B1.c: 420: product->Data[15]=(product->Data[15]&(~status));
 12897  09F3  087D               	movf	_product,w
 12898  09F4  3E0F               	addlw	15
 12899  09F5  0086               	movwf	6
 12900  09F6  3001               	movlw	1	; select bank2/3
 12901  09F7  0087               	movwf	7
 12902  09F8  0960               	comf	setRF_DimmerLights@status,w
 12903  09F9  0501               	andwf	1,w
 12904  09FA  00DE               	movwf	??_setRF_DimmerLights
 12905  09FB  087D               	movf	_product,w
 12906  09FC  3E0F               	addlw	15
 12907  09FD  0086               	movwf	6
 12908  09FE  3001               	movlw	1	; select bank2/3
 12909  09FF  0087               	movwf	7
 12910  0A00  085E               	movf	??_setRF_DimmerLights,w
 12911  0A01  0081               	movwf	1
 12912  0A02  0008               	return
 12913  0A03                     __end_of_setRF_DimmerLights:	
 12914                           
 12915                           	psect	text78
 12916  1623                     __ptext78:	
 12917 ;; *************** function _setPercentValue *****************
 12918 ;; Defined at:
 12919 ;;		line 742 in file "../src/Dimmer_B1.c"
 12920 ;; Parameters:    Size  Location     Type
 12921 ;;  value           1    wreg     unsigned char 
 12922 ;; Auto vars:     Size  Location     Type
 12923 ;;  value           1   57[BANK0 ] unsigned char 
 12924 ;;  i               3   58[BANK0 ] float 
 12925 ;; Return value:  Size  Location     Type
 12926 ;;                  1    wreg      unsigned char 
 12927 ;; Registers used:
 12928 ;;		wreg, status,2, status,0, pclath, cstack
 12929 ;; Tracked objects:
 12930 ;;		On entry : 0/0
 12931 ;;		On exit  : 0/0
 12932 ;;		Unchanged: 0/0
 12933 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12934 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12935 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12936 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12937 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12938 ;;Total ram usage:        4 bytes
 12939 ;; Hardware stack levels used:    1
 12940 ;; Hardware stack levels required when called:    7
 12941 ;; This function calls:
 12942 ;;		___awtoft
 12943 ;;		___ftdiv
 12944 ;;		___fttol
 12945 ;; This function is called by:
 12946 ;;		_Flash_Memory_Initialization
 12947 ;;		_setRF_DimmerLights
 12948 ;; This function uses a non-reentrant model
 12949 ;;
 12950                           
 12951                           
 12952                           ;psect for function _setPercentValue
 12953  1623                     _setPercentValue:	
 12954                           
 12955                           ;incstack = 0
 12956                           ; Regs used in _setPercentValue: [wreg+status,2+status,0+pclath+cstack]
 12957                           ;setPercentValue@value stored from wreg
 12958  1623  0020               	movlb	0	; select bank0
 12959  1624  00D9               	movwf	setPercentValue@value
 12960                           
 12961                           ;Dimmer_B1.c: 744: float i = ((char)((100-20)*1.5)) - ((char)((100-55)*1.5));
 12962  1625  3000               	movlw	0
 12963  1626  00DA               	movwf	setPercentValue@i
 12964  1627  3054               	movlw	84
 12965  1628  00DB               	movwf	setPercentValue@i+1
 12966  1629  3042               	movlw	66
 12967  162A  00DC               	movwf	setPercentValue@i+2
 12968                           
 12969                           ;Dimmer_B1.c: 745: i /= 100;
 12970  162B  3000               	movlw	0
 12971  162C  00AE               	movwf	___ftdiv@f2
 12972  162D  30C8               	movlw	200
 12973  162E  00AF               	movwf	___ftdiv@f2+1
 12974  162F  3042               	movlw	66
 12975  1630  00B0               	movwf	___ftdiv@f2+2
 12976  1631  085A               	movf	setPercentValue@i,w
 12977  1632  00B1               	movwf	___ftdiv@f1
 12978  1633  085B               	movf	setPercentValue@i+1,w
 12979  1634  00B2               	movwf	___ftdiv@f1+1
 12980  1635  085C               	movf	setPercentValue@i+2,w
 12981  1636  00B3               	movwf	___ftdiv@f1+2
 12982  1637  3186  2676  3196   	fcall	___ftdiv
 12983  163A  0020               	movlb	0	; select bank0
 12984  163B  082E               	movf	?___ftdiv,w
 12985  163C  00DA               	movwf	setPercentValue@i
 12986  163D  082F               	movf	?___ftdiv+1,w
 12987  163E  00DB               	movwf	setPercentValue@i+1
 12988  163F  0830               	movf	?___ftdiv+2,w
 12989  1640  00DC               	movwf	setPercentValue@i+2
 12990                           
 12991                           ;Dimmer_B1.c: 746: return (100 - (char) ((value - ((char)((100-55)*1.5))) / i));
 12992  1641  0859               	movf	setPercentValue@value,w
 12993  1642  3EBD               	addlw	189
 12994  1643  00A8               	movwf	___awtoft@c
 12995  1644  30FF               	movlw	255
 12996  1645  1803               	skipnc
 12997  1646  3000               	movlw	0
 12998  1647  00A9               	movwf	___awtoft@c+1
 12999  1648  3192  22A3  3196   	fcall	___awtoft
 13000  164B  0020               	movlb	0	; select bank0
 13001  164C  0828               	movf	?___awtoft,w
 13002  164D  00B1               	movwf	___ftdiv@f1
 13003  164E  0829               	movf	?___awtoft+1,w
 13004  164F  00B2               	movwf	___ftdiv@f1+1
 13005  1650  082A               	movf	?___awtoft+2,w
 13006  1651  00B3               	movwf	___ftdiv@f1+2
 13007  1652  085A               	movf	setPercentValue@i,w
 13008  1653  00AE               	movwf	___ftdiv@f2
 13009  1654  085B               	movf	setPercentValue@i+1,w
 13010  1655  00AF               	movwf	___ftdiv@f2+1
 13011  1656  085C               	movf	setPercentValue@i+2,w
 13012  1657  00B0               	movwf	___ftdiv@f2+2
 13013  1658  3186  2676  3196   	fcall	___ftdiv
 13014  165B  0020               	movlb	0	; select bank0
 13015  165C  082E               	movf	?___ftdiv,w
 13016  165D  00CB               	movwf	___fttol@f1
 13017  165E  082F               	movf	?___ftdiv+1,w
 13018  165F  00CC               	movwf	___fttol@f1+1
 13019  1660  0830               	movf	?___ftdiv+2,w
 13020  1661  00CD               	movwf	___fttol@f1+2
 13021  1662  318D  25B6         	fcall	___fttol
 13022  1664  0020               	movlb	0	; select bank0
 13023  1665  034B               	decf	?___fttol,w
 13024  1666  3AFF               	xorlw	255
 13025  1667  3E64               	addlw	100
 13026  1668  0008               	return
 13027  1669                     __end_of_setPercentValue:	
 13028                           
 13029                           	psect	text79
 13030  0DB6                     __ptext79:	
 13031 ;; *************** function ___fttol *****************
 13032 ;; Defined at:
 13033 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\fttol.c"
 13034 ;; Parameters:    Size  Location     Type
 13035 ;;  f1              3   43[BANK0 ] float 
 13036 ;; Auto vars:     Size  Location     Type
 13037 ;;  lval            4   52[BANK0 ] unsigned long 
 13038 ;;  exp1            1   56[BANK0 ] unsigned char 
 13039 ;;  sign1           1   51[BANK0 ] unsigned char 
 13040 ;; Return value:  Size  Location     Type
 13041 ;;                  4   43[BANK0 ] long 
 13042 ;; Registers used:
 13043 ;;		wreg, status,2, status,0
 13044 ;; Tracked objects:
 13045 ;;		On entry : 0/0
 13046 ;;		On exit  : 0/0
 13047 ;;		Unchanged: 0/0
 13048 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13049 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13050 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13051 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13052 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13053 ;;Total ram usage:       14 bytes
 13054 ;; Hardware stack levels used:    1
 13055 ;; Hardware stack levels required when called:    5
 13056 ;; This function calls:
 13057 ;;		Nothing
 13058 ;; This function is called by:
 13059 ;;		_getPercentValue
 13060 ;;		_setPercentValue
 13061 ;; This function uses a non-reentrant model
 13062 ;;
 13063                           
 13064                           
 13065                           ;psect for function ___fttol
 13066  0DB6                     ___fttol:	
 13067                           
 13068                           ;incstack = 0
 13069                           ; Regs used in ___fttol: [wreg+status,2+status,0]
 13070  0DB6  0020               	movlb	0	; select bank0
 13071  0DB7  084B               	movf	___fttol@f1,w
 13072  0DB8  00CF               	movwf	??___fttol
 13073  0DB9  084C               	movf	___fttol@f1+1,w
 13074  0DBA  00D0               	movwf	??___fttol+1
 13075  0DBB  084D               	movf	___fttol@f1+2,w
 13076  0DBC  00D1               	movwf	??___fttol+2
 13077  0DBD  1003               	clrc
 13078  0DBE  0D50               	rlf	??___fttol+1,w
 13079  0DBF  0D51               	rlf	??___fttol+2,w
 13080  0DC0  00D2               	movwf	??___fttol+3
 13081  0DC1  0852               	movf	??___fttol+3,w
 13082  0DC2  00D8               	movwf	___fttol@exp1
 13083  0DC3  08D8               	movf	___fttol@exp1,f
 13084  0DC4  1D03               	skipz
 13085  0DC5  2DCF               	goto	l5338
 13086  0DC6  3000               	movlw	0
 13087  0DC7  00CE               	movwf	?___fttol+3
 13088  0DC8  3000               	movlw	0
 13089  0DC9  00CD               	movwf	?___fttol+2
 13090  0DCA  3000               	movlw	0
 13091  0DCB  00CC               	movwf	?___fttol+1
 13092  0DCC  3000               	movlw	0
 13093  0DCD  00CB               	movwf	?___fttol
 13094  0DCE  0008               	return
 13095  0DCF                     l5338:	
 13096  0DCF  084B               	movf	___fttol@f1,w
 13097  0DD0  00CF               	movwf	??___fttol
 13098  0DD1  084C               	movf	___fttol@f1+1,w
 13099  0DD2  00D0               	movwf	??___fttol+1
 13100  0DD3  084D               	movf	___fttol@f1+2,w
 13101  0DD4  00D1               	movwf	??___fttol+2
 13102  0DD5  3017               	movlw	23
 13103  0DD6                     u3735:	
 13104  0DD6  36D1               	lsrf	??___fttol+2,f
 13105  0DD7  0CD0               	rrf	??___fttol+1,f
 13106  0DD8  0CCF               	rrf	??___fttol,f
 13107  0DD9  0B89               	decfsz	9,f
 13108  0DDA  2DD6               	goto	u3735
 13109  0DDB  084F               	movf	??___fttol,w
 13110  0DDC  00D2               	movwf	??___fttol+3
 13111  0DDD  0852               	movf	??___fttol+3,w
 13112  0DDE  00D3               	movwf	___fttol@sign1
 13113  0DDF  17CC               	bsf	___fttol@f1+1,7
 13114  0DE0  30FF               	movlw	255
 13115  0DE1  05CB               	andwf	___fttol@f1,f
 13116  0DE2  30FF               	movlw	255
 13117  0DE3  05CC               	andwf	___fttol@f1+1,f
 13118  0DE4  3000               	movlw	0
 13119  0DE5  05CD               	andwf	___fttol@f1+2,f
 13120  0DE6  084B               	movf	___fttol@f1,w
 13121  0DE7  00D4               	movwf	___fttol@lval
 13122  0DE8  084C               	movf	___fttol@f1+1,w
 13123  0DE9  00D5               	movwf	___fttol@lval+1
 13124  0DEA  084D               	movf	___fttol@f1+2,w
 13125  0DEB  00D6               	movwf	___fttol@lval+2
 13126  0DEC  01D7               	clrf	___fttol@lval+3
 13127  0DED  308E               	movlw	142
 13128  0DEE  02D8               	subwf	___fttol@exp1,f
 13129  0DEF  1FD8               	btfss	___fttol@exp1,7
 13130  0DF0  2E0D               	goto	l5358
 13131  0DF1  0858               	movf	___fttol@exp1,w
 13132  0DF2  3A80               	xorlw	128
 13133  0DF3  3E8F               	addlw	143
 13134  0DF4  1803               	skipnc
 13135  0DF5  2DFF               	goto	l5356
 13136  0DF6  3000               	movlw	0
 13137  0DF7  00CE               	movwf	?___fttol+3
 13138  0DF8  3000               	movlw	0
 13139  0DF9  00CD               	movwf	?___fttol+2
 13140  0DFA  3000               	movlw	0
 13141  0DFB  00CC               	movwf	?___fttol+1
 13142  0DFC  3000               	movlw	0
 13143  0DFD  00CB               	movwf	?___fttol
 13144  0DFE  0008               	return
 13145  0DFF                     l5356:	
 13146  0DFF  3001               	movlw	1
 13147  0E00                     u3765:	
 13148  0E00  36D7               	lsrf	___fttol@lval+3,f
 13149  0E01  0CD6               	rrf	___fttol@lval+2,f
 13150  0E02  0CD5               	rrf	___fttol@lval+1,f
 13151  0E03  0CD4               	rrf	___fttol@lval,f
 13152  0E04  0B89               	decfsz	9,f
 13153  0E05  2E00               	goto	u3765
 13154  0E06  3001               	movlw	1
 13155  0E07  00CF               	movwf	??___fttol
 13156  0E08  084F               	movf	??___fttol,w
 13157  0E09  07D8               	addwf	___fttol@exp1,f
 13158  0E0A  1903               	btfsc	3,2
 13159  0E0B  2E26               	goto	l5368
 13160  0E0C  2DFF               	goto	l5356
 13161  0E0D                     l5358:	
 13162  0E0D  3018               	movlw	24
 13163  0E0E  0258               	subwf	___fttol@exp1,w
 13164  0E0F  1C03               	skipc
 13165  0E10  2E23               	goto	l5366
 13166  0E11  3000               	movlw	0
 13167  0E12  00CE               	movwf	?___fttol+3
 13168  0E13  3000               	movlw	0
 13169  0E14  00CD               	movwf	?___fttol+2
 13170  0E15  3000               	movlw	0
 13171  0E16  00CC               	movwf	?___fttol+1
 13172  0E17  3000               	movlw	0
 13173  0E18  00CB               	movwf	?___fttol
 13174  0E19  0008               	return
 13175  0E1A                     l5364:	
 13176  0E1A  3001               	movlw	1
 13177  0E1B                     u3795:	
 13178  0E1B  35D4               	lslf	___fttol@lval,f
 13179  0E1C  0DD5               	rlf	___fttol@lval+1,f
 13180  0E1D  0DD6               	rlf	___fttol@lval+2,f
 13181  0E1E  0DD7               	rlf	___fttol@lval+3,f
 13182  0E1F  0B89               	decfsz	9,f
 13183  0E20  2E1B               	goto	u3795
 13184  0E21  3001               	movlw	1
 13185  0E22  02D8               	subwf	___fttol@exp1,f
 13186  0E23                     l5366:	
 13187  0E23  08D8               	movf	___fttol@exp1,f
 13188  0E24  1D03               	skipz
 13189  0E25  2E1A               	goto	l5364
 13190  0E26                     l5368:	
 13191  0E26  0853               	movf	___fttol@sign1,w
 13192  0E27  1903               	btfsc	3,2
 13193  0E28  2E34               	goto	l5372
 13194  0E29  09D4               	comf	___fttol@lval,f
 13195  0E2A  09D5               	comf	___fttol@lval+1,f
 13196  0E2B  09D6               	comf	___fttol@lval+2,f
 13197  0E2C  09D7               	comf	___fttol@lval+3,f
 13198  0E2D  0AD4               	incf	___fttol@lval,f
 13199  0E2E  1903               	skipnz
 13200  0E2F  0AD5               	incf	___fttol@lval+1,f
 13201  0E30  1903               	skipnz
 13202  0E31  0AD6               	incf	___fttol@lval+2,f
 13203  0E32  1903               	skipnz
 13204  0E33  0AD7               	incf	___fttol@lval+3,f
 13205  0E34                     l5372:	
 13206  0E34  0857               	movf	___fttol@lval+3,w
 13207  0E35  00CE               	movwf	?___fttol+3
 13208  0E36  0856               	movf	___fttol@lval+2,w
 13209  0E37  00CD               	movwf	?___fttol+2
 13210  0E38  0855               	movf	___fttol@lval+1,w
 13211  0E39  00CC               	movwf	?___fttol+1
 13212  0E3A  0854               	movf	___fttol@lval,w
 13213  0E3B  00CB               	movwf	?___fttol
 13214  0E3C  0008               	return
 13215  0E3D                     __end_of___fttol:	
 13216                           
 13217                           	psect	text80
 13218  0676                     __ptext80:	
 13219 ;; *************** function ___ftdiv *****************
 13220 ;; Defined at:
 13221 ;;		line 49 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\pic\ftdiv.c"
 13222 ;; Parameters:    Size  Location     Type
 13223 ;;  f2              3   14[BANK0 ] float 
 13224 ;;  f1              3   17[BANK0 ] float 
 13225 ;; Auto vars:     Size  Location     Type
 13226 ;;  f3              3   25[BANK0 ] float 
 13227 ;;  sign            1   29[BANK0 ] unsigned char 
 13228 ;;  exp             1   28[BANK0 ] unsigned char 
 13229 ;;  cntr            1   24[BANK0 ] unsigned char 
 13230 ;; Return value:  Size  Location     Type
 13231 ;;                  3   14[BANK0 ] float 
 13232 ;; Registers used:
 13233 ;;		wreg, status,2, status,0, pclath, cstack
 13234 ;; Tracked objects:
 13235 ;;		On entry : 0/0
 13236 ;;		On exit  : 0/0
 13237 ;;		Unchanged: 0/0
 13238 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13239 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13240 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13241 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13242 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13243 ;;Total ram usage:       16 bytes
 13244 ;; Hardware stack levels used:    1
 13245 ;; Hardware stack levels required when called:    6
 13246 ;; This function calls:
 13247 ;;		___ftpack
 13248 ;; This function is called by:
 13249 ;;		_getPercentValue
 13250 ;;		_setPercentValue
 13251 ;; This function uses a non-reentrant model
 13252 ;;
 13253                           
 13254                           
 13255                           ;psect for function ___ftdiv
 13256  0676                     ___ftdiv:	
 13257                           
 13258                           ;incstack = 0
 13259                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
 13260  0676  0020               	movlb	0	; select bank0
 13261  0677  0831               	movf	___ftdiv@f1,w
 13262  0678  00B4               	movwf	??___ftdiv
 13263  0679  0832               	movf	___ftdiv@f1+1,w
 13264  067A  00B5               	movwf	??___ftdiv+1
 13265  067B  0833               	movf	___ftdiv@f1+2,w
 13266  067C  00B6               	movwf	??___ftdiv+2
 13267  067D  1003               	clrc
 13268  067E  0D35               	rlf	??___ftdiv+1,w
 13269  067F  0D36               	rlf	??___ftdiv+2,w
 13270  0680  00B7               	movwf	??___ftdiv+3
 13271  0681  0837               	movf	??___ftdiv+3,w
 13272  0682  00BC               	movwf	___ftdiv@exp
 13273  0683  08BC               	movf	___ftdiv@exp,f
 13274  0684  1D03               	skipz
 13275  0685  2E8D               	goto	l5246
 13276  0686  3000               	movlw	0
 13277  0687  00AE               	movwf	?___ftdiv
 13278  0688  3000               	movlw	0
 13279  0689  00AF               	movwf	?___ftdiv+1
 13280  068A  3000               	movlw	0
 13281  068B  00B0               	movwf	?___ftdiv+2
 13282  068C  0008               	return
 13283  068D                     l5246:	
 13284  068D  082E               	movf	___ftdiv@f2,w
 13285  068E  00B4               	movwf	??___ftdiv
 13286  068F  082F               	movf	___ftdiv@f2+1,w
 13287  0690  00B5               	movwf	??___ftdiv+1
 13288  0691  0830               	movf	___ftdiv@f2+2,w
 13289  0692  00B6               	movwf	??___ftdiv+2
 13290  0693  1003               	clrc
 13291  0694  0D35               	rlf	??___ftdiv+1,w
 13292  0695  0D36               	rlf	??___ftdiv+2,w
 13293  0696  00B7               	movwf	??___ftdiv+3
 13294  0697  0837               	movf	??___ftdiv+3,w
 13295  0698  00BD               	movwf	___ftdiv@sign
 13296  0699  08BD               	movf	___ftdiv@sign,f
 13297  069A  1D03               	skipz
 13298  069B  2EA3               	goto	l5252
 13299  069C  3000               	movlw	0
 13300  069D  00AE               	movwf	?___ftdiv
 13301  069E  3000               	movlw	0
 13302  069F  00AF               	movwf	?___ftdiv+1
 13303  06A0  3000               	movlw	0
 13304  06A1  00B0               	movwf	?___ftdiv+2
 13305  06A2  0008               	return
 13306  06A3                     l5252:	
 13307  06A3  3000               	movlw	0
 13308  06A4  00B9               	movwf	___ftdiv@f3
 13309  06A5  3000               	movlw	0
 13310  06A6  00BA               	movwf	___ftdiv@f3+1
 13311  06A7  3000               	movlw	0
 13312  06A8  00BB               	movwf	___ftdiv@f3+2
 13313  06A9  3089               	movlw	137
 13314  06AA  073D               	addwf	___ftdiv@sign,w
 13315  06AB  00B4               	movwf	??___ftdiv
 13316  06AC  0834               	movf	??___ftdiv,w
 13317  06AD  02BC               	subwf	___ftdiv@exp,f
 13318  06AE  0831               	movf	___ftdiv@f1,w
 13319  06AF  00B4               	movwf	??___ftdiv
 13320  06B0  0832               	movf	___ftdiv@f1+1,w
 13321  06B1  00B5               	movwf	??___ftdiv+1
 13322  06B2  0833               	movf	___ftdiv@f1+2,w
 13323  06B3  00B6               	movwf	??___ftdiv+2
 13324  06B4  3010               	movlw	16
 13325  06B5                     u3545:	
 13326  06B5  36B6               	lsrf	??___ftdiv+2,f
 13327  06B6  0CB5               	rrf	??___ftdiv+1,f
 13328  06B7  0CB4               	rrf	??___ftdiv,f
 13329  06B8  0B89               	decfsz	9,f
 13330  06B9  2EB5               	goto	u3545
 13331  06BA  0834               	movf	??___ftdiv,w
 13332  06BB  00B7               	movwf	??___ftdiv+3
 13333  06BC  0837               	movf	??___ftdiv+3,w
 13334  06BD  00BD               	movwf	___ftdiv@sign
 13335  06BE  082E               	movf	___ftdiv@f2,w
 13336  06BF  00B4               	movwf	??___ftdiv
 13337  06C0  082F               	movf	___ftdiv@f2+1,w
 13338  06C1  00B5               	movwf	??___ftdiv+1
 13339  06C2  0830               	movf	___ftdiv@f2+2,w
 13340  06C3  00B6               	movwf	??___ftdiv+2
 13341  06C4  3010               	movlw	16
 13342  06C5                     u3555:	
 13343  06C5  36B6               	lsrf	??___ftdiv+2,f
 13344  06C6  0CB5               	rrf	??___ftdiv+1,f
 13345  06C7  0CB4               	rrf	??___ftdiv,f
 13346  06C8  0B89               	decfsz	9,f
 13347  06C9  2EC5               	goto	u3555
 13348  06CA  0834               	movf	??___ftdiv,w
 13349  06CB  00B7               	movwf	??___ftdiv+3
 13350  06CC  0837               	movf	??___ftdiv+3,w
 13351  06CD  06BD               	xorwf	___ftdiv@sign,f
 13352  06CE  3080               	movlw	128
 13353  06CF  00B4               	movwf	??___ftdiv
 13354  06D0  0834               	movf	??___ftdiv,w
 13355  06D1  05BD               	andwf	___ftdiv@sign,f
 13356  06D2  17B2               	bsf	___ftdiv@f1+1,7
 13357  06D3  30FF               	movlw	255
 13358  06D4  05B1               	andwf	___ftdiv@f1,f
 13359  06D5  30FF               	movlw	255
 13360  06D6  05B2               	andwf	___ftdiv@f1+1,f
 13361  06D7  3000               	movlw	0
 13362  06D8  05B3               	andwf	___ftdiv@f1+2,f
 13363  06D9  17AF               	bsf	___ftdiv@f2+1,7
 13364  06DA  30FF               	movlw	255
 13365  06DB  05AE               	andwf	___ftdiv@f2,f
 13366  06DC  30FF               	movlw	255
 13367  06DD  05AF               	andwf	___ftdiv@f2+1,f
 13368  06DE  3000               	movlw	0
 13369  06DF  05B0               	andwf	___ftdiv@f2+2,f
 13370  06E0  3018               	movlw	24
 13371  06E1  00B4               	movwf	??___ftdiv
 13372  06E2  0834               	movf	??___ftdiv,w
 13373  06E3  00B8               	movwf	___ftdiv@cntr
 13374  06E4                     l5266:	
 13375  06E4  3001               	movlw	1
 13376  06E5                     u3565:	
 13377  06E5  35B9               	lslf	___ftdiv@f3,f
 13378  06E6  0DBA               	rlf	___ftdiv@f3+1,f
 13379  06E7  0DBB               	rlf	___ftdiv@f3+2,f
 13380  06E8  0B89               	decfsz	9,f
 13381  06E9  2EE5               	goto	u3565
 13382  06EA  0830               	movf	___ftdiv@f2+2,w
 13383  06EB  0233               	subwf	___ftdiv@f1+2,w
 13384  06EC  1D03               	skipz
 13385  06ED  2EF4               	goto	u3575
 13386  06EE  082F               	movf	___ftdiv@f2+1,w
 13387  06EF  0232               	subwf	___ftdiv@f1+1,w
 13388  06F0  1D03               	skipz
 13389  06F1  2EF4               	goto	u3575
 13390  06F2  082E               	movf	___ftdiv@f2,w
 13391  06F3  0231               	subwf	___ftdiv@f1,w
 13392  06F4                     u3575:	
 13393  06F4  1C03               	skipc
 13394  06F5  2EFD               	goto	l5274
 13395  06F6  082E               	movf	___ftdiv@f2,w
 13396  06F7  02B1               	subwf	___ftdiv@f1,f
 13397  06F8  082F               	movf	___ftdiv@f2+1,w
 13398  06F9  3BB2               	subwfb	___ftdiv@f1+1,f
 13399  06FA  0830               	movf	___ftdiv@f2+2,w
 13400  06FB  3BB3               	subwfb	___ftdiv@f1+2,f
 13401  06FC  1439               	bsf	___ftdiv@f3,0
 13402  06FD                     l5274:	
 13403  06FD  3001               	movlw	1
 13404  06FE                     u3585:	
 13405  06FE  35B1               	lslf	___ftdiv@f1,f
 13406  06FF  0DB2               	rlf	___ftdiv@f1+1,f
 13407  0700  0DB3               	rlf	___ftdiv@f1+2,f
 13408  0701  0B89               	decfsz	9,f
 13409  0702  2EFE               	goto	u3585
 13410  0703  3001               	movlw	1
 13411  0704  02B8               	subwf	___ftdiv@cntr,f
 13412  0705  1D03               	btfss	3,2
 13413  0706  2EE4               	goto	l5266
 13414  0707  0839               	movf	___ftdiv@f3,w
 13415  0708  00A0               	movwf	___ftpack@arg
 13416  0709  083A               	movf	___ftdiv@f3+1,w
 13417  070A  00A1               	movwf	___ftpack@arg+1
 13418  070B  083B               	movf	___ftdiv@f3+2,w
 13419  070C  00A2               	movwf	___ftpack@arg+2
 13420  070D  083C               	movf	___ftdiv@exp,w
 13421  070E  00B4               	movwf	??___ftdiv
 13422  070F  0834               	movf	??___ftdiv,w
 13423  0710  00A3               	movwf	___ftpack@exp
 13424  0711  083D               	movf	___ftdiv@sign,w
 13425  0712  00B5               	movwf	??___ftdiv+1
 13426  0713  0835               	movf	??___ftdiv+1,w
 13427  0714  00A4               	movwf	___ftpack@sign
 13428  0715  3189  2136         	fcall	___ftpack
 13429  0717  0020               	movlb	0	; select bank0
 13430  0718  0820               	movf	?___ftpack,w
 13431  0719  00AE               	movwf	?___ftdiv
 13432  071A  0821               	movf	?___ftpack+1,w
 13433  071B  00AF               	movwf	?___ftdiv+1
 13434  071C  0822               	movf	?___ftpack+2,w
 13435  071D  00B0               	movwf	?___ftdiv+2
 13436  071E  0008               	return
 13437  071F                     __end_of___ftdiv:	
 13438                           
 13439                           	psect	text81
 13440  12A3                     __ptext81:	
 13441 ;; *************** function ___awtoft *****************
 13442 ;; Defined at:
 13443 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awtoft.c"
 13444 ;; Parameters:    Size  Location     Type
 13445 ;;  c               2    8[BANK0 ] int 
 13446 ;; Auto vars:     Size  Location     Type
 13447 ;;  sign            1   13[BANK0 ] unsigned char 
 13448 ;; Return value:  Size  Location     Type
 13449 ;;                  3    8[BANK0 ] float 
 13450 ;; Registers used:
 13451 ;;		wreg, status,2, status,0, pclath, cstack
 13452 ;; Tracked objects:
 13453 ;;		On entry : 0/0
 13454 ;;		On exit  : 0/0
 13455 ;;		Unchanged: 0/0
 13456 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13457 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13458 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13459 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13460 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13461 ;;Total ram usage:        6 bytes
 13462 ;; Hardware stack levels used:    1
 13463 ;; Hardware stack levels required when called:    6
 13464 ;; This function calls:
 13465 ;;		___ftpack
 13466 ;; This function is called by:
 13467 ;;		_getPercentValue
 13468 ;;		_setPercentValue
 13469 ;; This function uses a non-reentrant model
 13470 ;;
 13471                           
 13472                           
 13473                           ;psect for function ___awtoft
 13474  12A3                     ___awtoft:	
 13475                           
 13476                           ;incstack = 0
 13477                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
 13478  12A3  0020               	movlb	0	; select bank0
 13479  12A4  01AD               	clrf	___awtoft@sign
 13480  12A5  1FA9               	btfss	___awtoft@c+1,7
 13481  12A6  2AAE               	goto	l5164
 13482  12A7  09A8               	comf	___awtoft@c,f
 13483  12A8  09A9               	comf	___awtoft@c+1,f
 13484  12A9  0AA8               	incf	___awtoft@c,f
 13485  12AA  1903               	skipnz
 13486  12AB  0AA9               	incf	___awtoft@c+1,f
 13487  12AC  01AD               	clrf	___awtoft@sign
 13488  12AD  0AAD               	incf	___awtoft@sign,f
 13489  12AE                     l5164:	
 13490  12AE  0828               	movf	___awtoft@c,w
 13491  12AF  00A0               	movwf	___ftpack@arg
 13492  12B0  0829               	movf	___awtoft@c+1,w
 13493  12B1  00A1               	movwf	___ftpack@arg+1
 13494  12B2  01A2               	clrf	___ftpack@arg+2
 13495  12B3  308E               	movlw	142
 13496  12B4  00AB               	movwf	??___awtoft
 13497  12B5  082B               	movf	??___awtoft,w
 13498  12B6  00A3               	movwf	___ftpack@exp
 13499  12B7  082D               	movf	___awtoft@sign,w
 13500  12B8  00AC               	movwf	??___awtoft+1
 13501  12B9  082C               	movf	??___awtoft+1,w
 13502  12BA  00A4               	movwf	___ftpack@sign
 13503  12BB  3189  2136         	fcall	___ftpack
 13504  12BD  0020               	movlb	0	; select bank0
 13505  12BE  0820               	movf	?___ftpack,w
 13506  12BF  00A8               	movwf	?___awtoft
 13507  12C0  0821               	movf	?___ftpack+1,w
 13508  12C1  00A9               	movwf	?___awtoft+1
 13509  12C2  0822               	movf	?___ftpack+2,w
 13510  12C3  00AA               	movwf	?___awtoft+2
 13511  12C4  0008               	return
 13512  12C5                     __end_of___awtoft:	
 13513                           
 13514                           	psect	text82
 13515  0936                     __ptext82:	
 13516 ;; *************** function ___ftpack *****************
 13517 ;; Defined at:
 13518 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\float.c"
 13519 ;; Parameters:    Size  Location     Type
 13520 ;;  arg             3    0[BANK0 ] unsigned um
 13521 ;;  exp             1    3[BANK0 ] unsigned char 
 13522 ;;  sign            1    4[BANK0 ] unsigned char 
 13523 ;; Auto vars:     Size  Location     Type
 13524 ;;		None
 13525 ;; Return value:  Size  Location     Type
 13526 ;;                  3    0[BANK0 ] float 
 13527 ;; Registers used:
 13528 ;;		wreg, status,2, status,0
 13529 ;; Tracked objects:
 13530 ;;		On entry : 0/0
 13531 ;;		On exit  : 0/0
 13532 ;;		Unchanged: 0/0
 13533 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13534 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13535 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13536 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13537 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13538 ;;Total ram usage:        8 bytes
 13539 ;; Hardware stack levels used:    1
 13540 ;; Hardware stack levels required when called:    5
 13541 ;; This function calls:
 13542 ;;		Nothing
 13543 ;; This function is called by:
 13544 ;;		___awtoft
 13545 ;;		___ftadd
 13546 ;;		___ftdiv
 13547 ;;		___ftmul
 13548 ;; This function uses a non-reentrant model
 13549 ;;
 13550                           
 13551                           
 13552                           ;psect for function ___ftpack
 13553  0936                     ___ftpack:	
 13554                           
 13555                           ;incstack = 0
 13556                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 13557  0936  0020               	movlb	0	; select bank0
 13558  0937  0823               	movf	___ftpack@exp,w
 13559  0938  1903               	btfsc	3,2
 13560  0939  293F               	goto	l5130
 13561  093A  0822               	movf	___ftpack@arg+2,w
 13562  093B  0421               	iorwf	___ftpack@arg+1,w
 13563  093C  0420               	iorwf	___ftpack@arg,w
 13564  093D  1D03               	skipz
 13565  093E  2950               	goto	l5136
 13566  093F                     l5130:	
 13567  093F  3000               	movlw	0
 13568  0940  00A0               	movwf	?___ftpack
 13569  0941  3000               	movlw	0
 13570  0942  00A1               	movwf	?___ftpack+1
 13571  0943  3000               	movlw	0
 13572  0944  00A2               	movwf	?___ftpack+2
 13573  0945  0008               	return
 13574  0946                     l5134:	
 13575  0946  3001               	movlw	1
 13576  0947  00A5               	movwf	??___ftpack
 13577  0948  0825               	movf	??___ftpack,w
 13578  0949  07A3               	addwf	___ftpack@exp,f
 13579  094A  3001               	movlw	1
 13580  094B                     u3195:	
 13581  094B  36A2               	lsrf	___ftpack@arg+2,f
 13582  094C  0CA1               	rrf	___ftpack@arg+1,f
 13583  094D  0CA0               	rrf	___ftpack@arg,f
 13584  094E  0B89               	decfsz	9,f
 13585  094F  294B               	goto	u3195
 13586  0950                     l5136:	
 13587  0950  30FE               	movlw	254
 13588  0951  0522               	andwf	___ftpack@arg+2,w
 13589  0952  1903               	btfsc	3,2
 13590  0953  2969               	goto	l2896
 13591  0954  2946               	goto	l5134
 13592  0955                     l5138:	
 13593  0955  3001               	movlw	1
 13594  0956  00A5               	movwf	??___ftpack
 13595  0957  0825               	movf	??___ftpack,w
 13596  0958  07A3               	addwf	___ftpack@exp,f
 13597  0959  3001               	movlw	1
 13598  095A  07A0               	addwf	___ftpack@arg,f
 13599  095B  3000               	movlw	0
 13600  095C  1803               	skipnc
 13601  095D  3001               	movlw	1
 13602  095E  07A1               	addwf	___ftpack@arg+1,f
 13603  095F  3000               	movlw	0
 13604  0960  1803               	skipnc
 13605  0961  3001               	movlw	1
 13606  0962  07A2               	addwf	___ftpack@arg+2,f
 13607  0963  3001               	movlw	1
 13608  0964                     u3215:	
 13609  0964  36A2               	lsrf	___ftpack@arg+2,f
 13610  0965  0CA1               	rrf	___ftpack@arg+1,f
 13611  0966  0CA0               	rrf	___ftpack@arg,f
 13612  0967  0B89               	decfsz	9,f
 13613  0968  2964               	goto	u3215
 13614  0969                     l2896:	
 13615  0969  30FF               	movlw	255
 13616  096A  0522               	andwf	___ftpack@arg+2,w
 13617  096B  1903               	btfsc	3,2
 13618  096C  2976               	goto	l5146
 13619  096D  2955               	goto	l5138
 13620  096E                     l5144:	
 13621  096E  3001               	movlw	1
 13622  096F  02A3               	subwf	___ftpack@exp,f
 13623  0970  3001               	movlw	1
 13624  0971                     u3235:	
 13625  0971  35A0               	lslf	___ftpack@arg,f
 13626  0972  0DA1               	rlf	___ftpack@arg+1,f
 13627  0973  0DA2               	rlf	___ftpack@arg+2,f
 13628  0974  0B89               	decfsz	9,f
 13629  0975  2971               	goto	u3235
 13630  0976                     l5146:	
 13631  0976  1FA1               	btfss	___ftpack@arg+1,7
 13632  0977  296E               	goto	l5144
 13633  0978  1823               	btfsc	___ftpack@exp,0
 13634  0979  2980               	goto	l2902
 13635  097A  30FF               	movlw	255
 13636  097B  05A0               	andwf	___ftpack@arg,f
 13637  097C  307F               	movlw	127
 13638  097D  05A1               	andwf	___ftpack@arg+1,f
 13639  097E  30FF               	movlw	255
 13640  097F  05A2               	andwf	___ftpack@arg+2,f
 13641  0980                     l2902:	
 13642  0980  1003               	clrc
 13643  0981  0CA3               	rrf	___ftpack@exp,f
 13644  0982  0823               	movf	___ftpack@exp,w
 13645  0983  00A5               	movwf	??___ftpack
 13646  0984  01A6               	clrf	??___ftpack+1
 13647  0985  01A7               	clrf	??___ftpack+2
 13648  0986  3010               	movlw	16
 13649  0987                     u3265:	
 13650  0987  35A5               	lslf	??___ftpack,f
 13651  0988  0DA6               	rlf	??___ftpack+1,f
 13652  0989  0DA7               	rlf	??___ftpack+2,f
 13653  098A  0B89               	decfsz	9,f
 13654  098B  2987               	goto	u3265
 13655  098C  0825               	movf	??___ftpack,w
 13656  098D  04A0               	iorwf	___ftpack@arg,f
 13657  098E  0826               	movf	??___ftpack+1,w
 13658  098F  04A1               	iorwf	___ftpack@arg+1,f
 13659  0990  0827               	movf	??___ftpack+2,w
 13660  0991  04A2               	iorwf	___ftpack@arg+2,f
 13661  0992  0824               	movf	___ftpack@sign,w
 13662  0993  1903               	btfsc	3,2
 13663  0994  0008               	return
 13664  0995  17A2               	bsf	___ftpack@arg+2,7
 13665  0996  0008               	return
 13666  0997                     __end_of___ftpack:	
 13667                           
 13668                           	psect	text83
 13669  1F50                     __ptext83:	
 13670 ;; *************** function _setRFSW_Status *****************
 13671 ;; Defined at:
 13672 ;;		line 387 in file "../src/RF_Control_B1.c"
 13673 ;; Parameters:    Size  Location     Type
 13674 ;;  sw              1    wreg     unsigned char 
 13675 ;;  command         1    2[BANK0 ] unsigned char 
 13676 ;; Auto vars:     Size  Location     Type
 13677 ;;  sw              1    3[BANK0 ] unsigned char 
 13678 ;; Return value:  Size  Location     Type
 13679 ;;		None               void
 13680 ;; Registers used:
 13681 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13682 ;; Tracked objects:
 13683 ;;		On entry : 0/0
 13684 ;;		On exit  : 0/0
 13685 ;;		Unchanged: 0/0
 13686 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13687 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13688 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13689 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13690 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13691 ;;Total ram usage:        2 bytes
 13692 ;; Hardware stack levels used:    1
 13693 ;; Hardware stack levels required when called:    6
 13694 ;; This function calls:
 13695 ;;		_RfSWPointSelect
 13696 ;; This function is called by:
 13697 ;;		_DlyOff_Main
 13698 ;;		_setControl_Lights_Table
 13699 ;;		_Sw_DimmerOnFunc
 13700 ;;		_Sw_DimmerAdjFunc
 13701 ;;		_setDimmerLights_ERROR
 13702 ;; This function uses a non-reentrant model
 13703 ;;
 13704                           
 13705                           
 13706                           ;psect for function _setRFSW_Status
 13707  1F50                     _setRFSW_Status:	
 13708                           
 13709                           ;incstack = 0
 13710                           ; Regs used in _setRFSW_Status: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13711                           ;setRFSW_Status@sw stored from wreg
 13712  1F50  0020               	movlb	0	; select bank0
 13713  1F51  00A3               	movwf	setRFSW_Status@sw
 13714                           
 13715                           ;RF_Control_B1.c: 388: RfSWPointSelect(sw);
 13716  1F52  0823               	movf	setRFSW_Status@sw,w
 13717  1F53  3190  20FD         	fcall	_RfSWPointSelect
 13718                           
 13719                           ;RF_Control_B1.c: 389: RFSW->Status = command;
 13720  1F55  0021               	movlb	1	; select bank1
 13721  1F56  083E               	movf	_RFSW^(0+128),w
 13722  1F57  0086               	movwf	6
 13723  1F58  0187               	clrf	7
 13724  1F59  0020               	movlb	0	; select bank0
 13725  1F5A  0822               	movf	setRFSW_Status@command,w
 13726  1F5B  1001               	bcf	1,0
 13727  1F5C  1D03               	skipz
 13728  1F5D  1401               	bsf	1,0
 13729  1F5E  0008               	return
 13730  1F5F                     __end_of_setRFSW_Status:	
 13731                           
 13732                           	psect	text84
 13733  10FD                     __ptext84:	
 13734 ;; *************** function _RfSWPointSelect *****************
 13735 ;; Defined at:
 13736 ;;		line 322 in file "../src/RF_Control_B1.c"
 13737 ;; Parameters:    Size  Location     Type
 13738 ;;  sw              1    wreg     unsigned char 
 13739 ;; Auto vars:     Size  Location     Type
 13740 ;;  sw              1    1[BANK0 ] unsigned char 
 13741 ;; Return value:  Size  Location     Type
 13742 ;;		None               void
 13743 ;; Registers used:
 13744 ;;		wreg
 13745 ;; Tracked objects:
 13746 ;;		On entry : 0/0
 13747 ;;		On exit  : 0/0
 13748 ;;		Unchanged: 0/0
 13749 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13750 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13751 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13752 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13753 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13754 ;;Total ram usage:        2 bytes
 13755 ;; Hardware stack levels used:    1
 13756 ;; Hardware stack levels required when called:    5
 13757 ;; This function calls:
 13758 ;;		Nothing
 13759 ;; This function is called by:
 13760 ;;		_setRFSW_Control
 13761 ;;		_setRFSW_AdjControl
 13762 ;;		_setRFSW_Status
 13763 ;; This function uses a non-reentrant model
 13764 ;;
 13765                           
 13766                           
 13767                           ;psect for function _RfSWPointSelect
 13768  10FD                     _RfSWPointSelect:	
 13769                           
 13770                           ;incstack = 0
 13771                           ; Regs used in _RfSWPointSelect: [wreg]
 13772                           ;RfSWPointSelect@sw stored from wreg
 13773  10FD  0020               	movlb	0	; select bank0
 13774  10FE  00A1               	movwf	RfSWPointSelect@sw
 13775                           
 13776                           ;RF_Control_B1.c: 324: if (sw == 1) {
 13777  10FF  0821               	movf	RfSWPointSelect@sw,w
 13778  1100  3A01               	xorlw	1
 13779  1101  1D03               	skipz
 13780  1102  2908               	goto	l2192
 13781                           
 13782                           ;RF_Control_B1.c: 325: RFSW = &RFSW1;
 13783  1103  30E6               	movlw	_RFSW1& (0+255)
 13784  1104  00A0               	movwf	??_RfSWPointSelect
 13785  1105  0820               	movf	??_RfSWPointSelect,w
 13786  1106  0021               	movlb	1	; select bank1
 13787  1107  00BE               	movwf	_RFSW^(0+128)
 13788  1108                     l2192:	
 13789                           
 13790                           ;RF_Control_B1.c: 326: }
 13791                           ;RF_Control_B1.c: 329: if (sw == 2) {
 13792  1108  0020               	movlb	0	; select bank0
 13793  1109  0821               	movf	RfSWPointSelect@sw,w
 13794  110A  3A02               	xorlw	2
 13795  110B  1D03               	skipz
 13796  110C  0008               	return
 13797                           
 13798                           ;RF_Control_B1.c: 330: RFSW = &RFSW2;
 13799  110D  30E7               	movlw	_RFSW2& (0+255)
 13800  110E  00A0               	movwf	??_RfSWPointSelect
 13801  110F  0820               	movf	??_RfSWPointSelect,w
 13802  1110  0021               	movlb	1	; select bank1
 13803  1111  00BE               	movwf	_RFSW^(0+128)
 13804  1112  0008               	return
 13805  1113                     __end_of_RfSWPointSelect:	
 13806                           
 13807                           	psect	text85
 13808  1FAD                     __ptext85:	
 13809 ;; *************** function _setDimmerLights_Trigger *****************
 13810 ;; Defined at:
 13811 ;;		line 683 in file "../src/Dimmer_B1.c"
 13812 ;; Parameters:    Size  Location     Type
 13813 ;;  lights          1    wreg     unsigned char 
 13814 ;;  command         1    2[BANK0 ] unsigned char 
 13815 ;; Auto vars:     Size  Location     Type
 13816 ;;  lights          1    3[BANK0 ] unsigned char 
 13817 ;; Return value:  Size  Location     Type
 13818 ;;		None               void
 13819 ;; Registers used:
 13820 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13821 ;; Tracked objects:
 13822 ;;		On entry : 0/0
 13823 ;;		On exit  : 0/0
 13824 ;;		Unchanged: 0/0
 13825 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13826 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13827 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13828 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13829 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13830 ;;Total ram usage:        2 bytes
 13831 ;; Hardware stack levels used:    1
 13832 ;; Hardware stack levels required when called:    6
 13833 ;; This function calls:
 13834 ;;		_DimmerLightsPointSelect
 13835 ;; This function is called by:
 13836 ;;		_DlyOff_Main
 13837 ;;		_setRFSW_Control
 13838 ;;		_Sw_DimmerOnFunc
 13839 ;;		_Sw_DimmerOffFunc
 13840 ;; This function uses a non-reentrant model
 13841 ;;
 13842                           
 13843                           
 13844                           ;psect for function _setDimmerLights_Trigger
 13845  1FAD                     _setDimmerLights_Trigger:	
 13846                           
 13847                           ;incstack = 0
 13848                           ; Regs used in _setDimmerLights_Trigger: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 13849                           ;setDimmerLights_Trigger@lights stored from wreg
 13850  1FAD  0020               	movlb	0	; select bank0
 13851  1FAE  00A3               	movwf	setDimmerLights_Trigger@lights
 13852                           
 13853                           ;Dimmer_B1.c: 684: DimmerLightsPointSelect(lights);
 13854  1FAF  0823               	movf	setDimmerLights_Trigger@lights,w
 13855  1FB0  3190  2099         	fcall	_DimmerLightsPointSelect
 13856                           
 13857                           ;Dimmer_B1.c: 685: DimmerLights->Trigger = command;
 13858  1FB2  0879               	movf	_DimmerLights,w
 13859  1FB3  3E08               	addlw	8
 13860  1FB4  0086               	movwf	6
 13861  1FB5  3001               	movlw	1	; select bank2/3
 13862  1FB6  0087               	movwf	7
 13863  1FB7  0020               	movlb	0	; select bank0
 13864  1FB8  0822               	movf	setDimmerLights_Trigger@command,w
 13865  1FB9  1101               	bcf	1,2
 13866  1FBA  1D03               	skipz
 13867  1FBB  1501               	bsf	1,2
 13868  1FBC  0008               	return
 13869  1FBD                     __end_of_setDimmerLights_Trigger:	
 13870                           
 13871                           	psect	text86
 13872  1F9D                     __ptext86:	
 13873 ;; *************** function _setDimmerLights_Switch *****************
 13874 ;; Defined at:
 13875 ;;		line 673 in file "../src/Dimmer_B1.c"
 13876 ;; Parameters:    Size  Location     Type
 13877 ;;  lights          1    wreg     unsigned char 
 13878 ;;  command         1    2[BANK0 ] unsigned char 
 13879 ;; Auto vars:     Size  Location     Type
 13880 ;;  lights          1    3[BANK0 ] unsigned char 
 13881 ;; Return value:  Size  Location     Type
 13882 ;;		None               void
 13883 ;; Registers used:
 13884 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13885 ;; Tracked objects:
 13886 ;;		On entry : 0/0
 13887 ;;		On exit  : 0/0
 13888 ;;		Unchanged: 0/0
 13889 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13890 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13891 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13892 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13893 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13894 ;;Total ram usage:        2 bytes
 13895 ;; Hardware stack levels used:    1
 13896 ;; Hardware stack levels required when called:    6
 13897 ;; This function calls:
 13898 ;;		_DimmerLightsPointSelect
 13899 ;; This function is called by:
 13900 ;;		_DlyOff_Main
 13901 ;;		_setRFSW_Control
 13902 ;;		_Sw_DimmerOnFunc
 13903 ;;		_Sw_DimmerOffFunc
 13904 ;; This function uses a non-reentrant model
 13905 ;;
 13906                           
 13907                           
 13908                           ;psect for function _setDimmerLights_Switch
 13909  1F9D                     _setDimmerLights_Switch:	
 13910                           
 13911                           ;incstack = 0
 13912                           ; Regs used in _setDimmerLights_Switch: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
 13913                           ;setDimmerLights_Switch@lights stored from wreg
 13914  1F9D  0020               	movlb	0	; select bank0
 13915  1F9E  00A3               	movwf	setDimmerLights_Switch@lights
 13916                           
 13917                           ;Dimmer_B1.c: 674: DimmerLightsPointSelect(lights);
 13918  1F9F  0823               	movf	setDimmerLights_Switch@lights,w
 13919  1FA0  3190  2099         	fcall	_DimmerLightsPointSelect
 13920                           
 13921                           ;Dimmer_B1.c: 675: DimmerLights->Switch = command;
 13922  1FA2  0879               	movf	_DimmerLights,w
 13923  1FA3  3E08               	addlw	8
 13924  1FA4  0086               	movwf	6
 13925  1FA5  3001               	movlw	1	; select bank2/3
 13926  1FA6  0087               	movwf	7
 13927  1FA7  0020               	movlb	0	; select bank0
 13928  1FA8  0822               	movf	setDimmerLights_Switch@command,w
 13929  1FA9  1081               	bcf	1,1
 13930  1FAA  1D03               	skipz
 13931  1FAB  1481               	bsf	1,1
 13932  1FAC  0008               	return
 13933  1FAD                     __end_of_setDimmerLights_Switch:	
 13934                           
 13935                           	psect	text87
 13936  1099                     __ptext87:	
 13937 ;; *************** function _DimmerLightsPointSelect *****************
 13938 ;; Defined at:
 13939 ;;		line 285 in file "../src/Dimmer_B1.c"
 13940 ;; Parameters:    Size  Location     Type
 13941 ;;  lights          1    wreg     unsigned char 
 13942 ;; Auto vars:     Size  Location     Type
 13943 ;;  lights          1    1[BANK0 ] unsigned char 
 13944 ;; Return value:  Size  Location     Type
 13945 ;;		None               void
 13946 ;; Registers used:
 13947 ;;		wreg
 13948 ;; Tracked objects:
 13949 ;;		On entry : 0/0
 13950 ;;		On exit  : 0/0
 13951 ;;		Unchanged: 0/0
 13952 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13953 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13954 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13955 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13956 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13957 ;;Total ram usage:        2 bytes
 13958 ;; Hardware stack levels used:    1
 13959 ;; Hardware stack levels required when called:    5
 13960 ;; This function calls:
 13961 ;;		Nothing
 13962 ;; This function is called by:
 13963 ;;		_setDimmerLights_Initialization
 13964 ;;		_setDimmerLights_Main
 13965 ;;		_setDimmerLights
 13966 ;;		_setDimmerLights_Adj
 13967 ;;		_setDimmerLights_AdjRF
 13968 ;;		_setDimmerLights_Switch
 13969 ;;		_setDimmerLights_AdjGo
 13970 ;;		_setDimmerLights_Trigger
 13971 ;;		_setDimmerLights_TriggerAdj
 13972 ;;		_setDimmerLights_ERROR
 13973 ;;		_setDimmerLights_TriggerERROR
 13974 ;;		_setDimmerLights_GO
 13975 ;;		_setDimmerLights_MaxmumValue
 13976 ;;		_setDimmerLights_Clear
 13977 ;; This function uses a non-reentrant model
 13978 ;;
 13979                           
 13980                           
 13981                           ;psect for function _DimmerLightsPointSelect
 13982  1099                     _DimmerLightsPointSelect:	
 13983                           
 13984                           ;incstack = 0
 13985                           ; Regs used in _DimmerLightsPointSelect: [wreg]
 13986                           ;DimmerLightsPointSelect@lights stored from wreg
 13987  1099  0020               	movlb	0	; select bank0
 13988  109A  00A1               	movwf	DimmerLightsPointSelect@lights
 13989                           
 13990                           ;Dimmer_B1.c: 287: if (lights == 1) {
 13991  109B  0821               	movf	DimmerLightsPointSelect@lights,w
 13992  109C  3A01               	xorlw	1
 13993  109D  1D03               	skipz
 13994  109E  28A3               	goto	l813
 13995                           
 13996                           ;Dimmer_B1.c: 288: DimmerLights = &DimmerLights1;
 13997  109F  3020               	movlw	_DimmerLights1& (0+255)
 13998  10A0  00A0               	movwf	??_DimmerLightsPointSelect
 13999  10A1  0820               	movf	??_DimmerLightsPointSelect,w
 14000  10A2  00F9               	movwf	_DimmerLights
 14001  10A3                     l813:	
 14002                           
 14003                           ;Dimmer_B1.c: 289: }
 14004                           ;Dimmer_B1.c: 296: if (lights == 2) {
 14005  10A3  0821               	movf	DimmerLightsPointSelect@lights,w
 14006  10A4  3A02               	xorlw	2
 14007  10A5  1D03               	skipz
 14008  10A6  0008               	return
 14009                           
 14010                           ;Dimmer_B1.c: 297: DimmerLights = &DimmerLights2;
 14011  10A7  302E               	movlw	_DimmerLights2& (0+255)
 14012  10A8  00A0               	movwf	??_DimmerLightsPointSelect
 14013  10A9  0820               	movf	??_DimmerLightsPointSelect,w
 14014  10AA  00F9               	movwf	_DimmerLights
 14015  10AB  0008               	return
 14016  10AC                     __end_of_DimmerLightsPointSelect:	
 14017                           
 14018                           	psect	text88
 14019  0BC7                     __ptext88:	
 14020 ;; *************** function _setBuz *****************
 14021 ;; Defined at:
 14022 ;;		line 30 in file "../src/Buzzer_B1.c"
 14023 ;; Parameters:    Size  Location     Type
 14024 ;;  count           1    wreg     unsigned char 
 14025 ;;  time            2    9[BANK0 ] int 
 14026 ;; Auto vars:     Size  Location     Type
 14027 ;;  count           1   12[BANK0 ] unsigned char 
 14028 ;; Return value:  Size  Location     Type
 14029 ;;		None               void
 14030 ;; Registers used:
 14031 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14032 ;; Tracked objects:
 14033 ;;		On entry : 0/0
 14034 ;;		On exit  : 0/0
 14035 ;;		Unchanged: 0/0
 14036 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14037 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14038 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14039 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14040 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14041 ;;Total ram usage:        4 bytes
 14042 ;; Hardware stack levels used:    1
 14043 ;; Hardware stack levels required when called:    6
 14044 ;; This function calls:
 14045 ;;		___awdiv
 14046 ;; This function is called by:
 14047 ;;		_DlyOff_Main
 14048 ;;		_setDimmerLights_Main
 14049 ;;		_my_Main
 14050 ;;		_setLog_Code
 14051 ;;		_setControl_Lights_Table
 14052 ;;		_setRFSW_Control
 14053 ;;		_setSw_Main
 14054 ;;		_Sw_DimmerOnFunc
 14055 ;;		_DimmerLights_Exceptions
 14056 ;; This function uses a non-reentrant model
 14057 ;;
 14058                           
 14059                           
 14060                           ;psect for function _setBuz
 14061  0BC7                     _setBuz:	
 14062                           
 14063                           ;incstack = 0
 14064                           ; Regs used in _setBuz: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14065                           ;setBuz@count stored from wreg
 14066  0BC7  0020               	movlb	0	; select bank0
 14067  0BC8  00AC               	movwf	setBuz@count
 14068                           
 14069                           ;Buzzer_B1.c: 31: time /=10;
 14070  0BC9  300A               	movlw	10
 14071  0BCA  00A0               	movwf	___awdiv@divisor
 14072  0BCB  3000               	movlw	0
 14073  0BCC  00A1               	movwf	___awdiv@divisor+1
 14074  0BCD  082A               	movf	setBuz@time+1,w
 14075  0BCE  01A3               	clrf	___awdiv@dividend+1
 14076  0BCF  07A3               	addwf	___awdiv@dividend+1,f
 14077  0BD0  0829               	movf	setBuz@time,w
 14078  0BD1  01A2               	clrf	___awdiv@dividend
 14079  0BD2  07A2               	addwf	___awdiv@dividend,f
 14080  0BD3  3196  26FD  318B   	fcall	___awdiv
 14081  0BD6  0020               	movlb	0	; select bank0
 14082  0BD7  0821               	movf	?___awdiv+1,w
 14083  0BD8  01AA               	clrf	setBuz@time+1
 14084  0BD9  07AA               	addwf	setBuz@time+1,f
 14085  0BDA  0820               	movf	?___awdiv,w
 14086  0BDB  01A9               	clrf	setBuz@time
 14087  0BDC  07A9               	addwf	setBuz@time,f
 14088                           
 14089                           ;Buzzer_B1.c: 32: if (Buz->Enable) {
 14090  0BDD  0878               	movf	_Buz,w
 14091  0BDE  0086               	movwf	6
 14092  0BDF  3001               	movlw	1	; select bank2/3
 14093  0BE0  0087               	movwf	7
 14094  0BE1  1C01               	btfss	1,0
 14095  0BE2  0008               	return
 14096                           
 14097                           ;Buzzer_B1.c: 33: if (!Buz->GO) {
 14098  0BE3  0878               	movf	_Buz,w
 14099  0BE4  0086               	movwf	6
 14100  0BE5  3001               	movlw	1	; select bank2/3
 14101  0BE6  0087               	movwf	7
 14102  0BE7  1881               	btfsc	1,1
 14103  0BE8  2C02               	goto	l5514
 14104                           
 14105                           ;Buzzer_B1.c: 34: Buz->GO = 1;
 14106  0BE9  0878               	movf	_Buz,w
 14107  0BEA  0086               	movwf	6
 14108  0BEB  3001               	movlw	1	; select bank2/3
 14109  0BEC  0087               	movwf	7
 14110  0BED  1481               	bsf	1,1
 14111                           
 14112                           ;Buzzer_B1.c: 35: Buz->Count = count;
 14113  0BEE  082C               	movf	setBuz@count,w
 14114  0BEF  00AB               	movwf	??_setBuz
 14115  0BF0  0878               	movf	_Buz,w
 14116  0BF1  3E03               	addlw	3
 14117  0BF2  0086               	movwf	6
 14118  0BF3  3001               	movlw	1	; select bank2/3
 14119  0BF4  0087               	movwf	7
 14120  0BF5  082B               	movf	??_setBuz,w
 14121  0BF6  0081               	movwf	1
 14122                           
 14123                           ;Buzzer_B1.c: 36: Buz->TimeValue = time;
 14124  0BF7  0878               	movf	_Buz,w
 14125  0BF8  3E06               	addlw	6
 14126  0BF9  0086               	movwf	6
 14127  0BFA  3001               	movlw	1	; select bank2/3
 14128  0BFB  0087               	movwf	7
 14129  0BFC  0829               	movf	setBuz@time,w
 14130  0BFD  3FC0               	movwi [0]fsr1
 14131  0BFE  082A               	movf	setBuz@time+1,w
 14132  0BFF  3FC1               	movwi [1]fsr1
 14133                           
 14134                           ;Buzzer_B1.c: 37: RB3 = 1;
 14135  0C00  158D               	bsf	13,3	;volatile
 14136                           
 14137                           ;Buzzer_B1.c: 38: } else {
 14138  0C01  0008               	return
 14139  0C02                     l5514:	
 14140                           
 14141                           ;Buzzer_B1.c: 39: if (!Buz->BufferStatus1) {
 14142  0C02  0878               	movf	_Buz,w
 14143  0C03  0086               	movwf	6
 14144  0C04  3001               	movlw	1	; select bank2/3
 14145  0C05  0087               	movwf	7
 14146  0C06  1981               	btfsc	1,3
 14147  0C07  2C20               	goto	l5518
 14148                           
 14149                           ;Buzzer_B1.c: 40: Buz->BufferStatus1 = 1;
 14150  0C08  0878               	movf	_Buz,w
 14151  0C09  0086               	movwf	6
 14152  0C0A  3001               	movlw	1	; select bank2/3
 14153  0C0B  0087               	movwf	7
 14154  0C0C  1581               	bsf	1,3
 14155                           
 14156                           ;Buzzer_B1.c: 41: Buz->CountBuffer1 = count;
 14157  0C0D  082C               	movf	setBuz@count,w
 14158  0C0E  00AB               	movwf	??_setBuz
 14159  0C0F  0878               	movf	_Buz,w
 14160  0C10  3E04               	addlw	4
 14161  0C11  0086               	movwf	6
 14162  0C12  3001               	movlw	1	; select bank2/3
 14163  0C13  0087               	movwf	7
 14164  0C14  082B               	movf	??_setBuz,w
 14165  0C15  0081               	movwf	1
 14166                           
 14167                           ;Buzzer_B1.c: 42: Buz->TimeValueBuffer1 = time;
 14168  0C16  0878               	movf	_Buz,w
 14169  0C17  3E08               	addlw	8
 14170  0C18  0086               	movwf	6
 14171  0C19  3001               	movlw	1	; select bank2/3
 14172  0C1A  0087               	movwf	7
 14173  0C1B  0829               	movf	setBuz@time,w
 14174  0C1C  3FC0               	movwi [0]fsr1
 14175  0C1D  082A               	movf	setBuz@time+1,w
 14176  0C1E  3FC1               	movwi [1]fsr1
 14177                           
 14178                           ;Buzzer_B1.c: 43: } else if (!Buz->BufferStatus2) {
 14179  0C1F  0008               	return
 14180  0C20                     l5518:	
 14181  0C20  0878               	movf	_Buz,w
 14182  0C21  0086               	movwf	6
 14183  0C22  3001               	movlw	1	; select bank2/3
 14184  0C23  0087               	movwf	7
 14185  0C24  1A01               	btfsc	1,4
 14186  0C25  0008               	return
 14187                           
 14188                           ;Buzzer_B1.c: 44: Buz->BufferStatus2 = 1;
 14189  0C26  0878               	movf	_Buz,w
 14190  0C27  0086               	movwf	6
 14191  0C28  3001               	movlw	1	; select bank2/3
 14192  0C29  0087               	movwf	7
 14193  0C2A  1601               	bsf	1,4
 14194                           
 14195                           ;Buzzer_B1.c: 45: Buz->CountBuffer2 = count;
 14196  0C2B  082C               	movf	setBuz@count,w
 14197  0C2C  00AB               	movwf	??_setBuz
 14198  0C2D  0878               	movf	_Buz,w
 14199  0C2E  3E05               	addlw	5
 14200  0C2F  0086               	movwf	6
 14201  0C30  3001               	movlw	1	; select bank2/3
 14202  0C31  0087               	movwf	7
 14203  0C32  082B               	movf	??_setBuz,w
 14204  0C33  0081               	movwf	1
 14205                           
 14206                           ;Buzzer_B1.c: 46: Buz->TimeValueBuffer2 = time;
 14207  0C34  0878               	movf	_Buz,w
 14208  0C35  3E0A               	addlw	10
 14209  0C36  0086               	movwf	6
 14210  0C37  3001               	movlw	1	; select bank2/3
 14211  0C38  0087               	movwf	7
 14212  0C39  0829               	movf	setBuz@time,w
 14213  0C3A  3FC0               	movwi [0]fsr1
 14214  0C3B  082A               	movf	setBuz@time+1,w
 14215  0C3C  3FC1               	movwi [1]fsr1
 14216  0C3D  0008               	return
 14217  0C3E                     __end_of_setBuz:	
 14218                           
 14219                           	psect	text89
 14220  16FD                     __ptext89:	
 14221 ;; *************** function ___awdiv *****************
 14222 ;; Defined at:
 14223 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awdiv.c"
 14224 ;; Parameters:    Size  Location     Type
 14225 ;;  divisor         2    0[BANK0 ] int 
 14226 ;;  dividend        2    2[BANK0 ] int 
 14227 ;; Auto vars:     Size  Location     Type
 14228 ;;  quotient        2    7[BANK0 ] int 
 14229 ;;  sign            1    6[BANK0 ] unsigned char 
 14230 ;;  counter         1    5[BANK0 ] unsigned char 
 14231 ;; Return value:  Size  Location     Type
 14232 ;;                  2    0[BANK0 ] int 
 14233 ;; Registers used:
 14234 ;;		wreg, status,2, status,0
 14235 ;; Tracked objects:
 14236 ;;		On entry : 0/0
 14237 ;;		On exit  : 0/0
 14238 ;;		Unchanged: 0/0
 14239 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14240 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14241 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14242 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14243 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14244 ;;Total ram usage:        9 bytes
 14245 ;; Hardware stack levels used:    1
 14246 ;; Hardware stack levels required when called:    5
 14247 ;; This function calls:
 14248 ;;		Nothing
 14249 ;; This function is called by:
 14250 ;;		_setBuz
 14251 ;; This function uses a non-reentrant model
 14252 ;;
 14253                           
 14254                           
 14255                           ;psect for function ___awdiv
 14256  16FD                     ___awdiv:	
 14257                           
 14258                           ;incstack = 0
 14259                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 14260  16FD  0020               	movlb	0	; select bank0
 14261  16FE  01A6               	clrf	___awdiv@sign
 14262  16FF  1FA1               	btfss	___awdiv@divisor+1,7
 14263  1700  2F08               	goto	l5468
 14264  1701  09A0               	comf	___awdiv@divisor,f
 14265  1702  09A1               	comf	___awdiv@divisor+1,f
 14266  1703  0AA0               	incf	___awdiv@divisor,f
 14267  1704  1903               	skipnz
 14268  1705  0AA1               	incf	___awdiv@divisor+1,f
 14269  1706  01A6               	clrf	___awdiv@sign
 14270  1707  0AA6               	incf	___awdiv@sign,f
 14271  1708                     l5468:	
 14272  1708  1FA3               	btfss	___awdiv@dividend+1,7
 14273  1709  2F13               	goto	l5474
 14274  170A  09A2               	comf	___awdiv@dividend,f
 14275  170B  09A3               	comf	___awdiv@dividend+1,f
 14276  170C  0AA2               	incf	___awdiv@dividend,f
 14277  170D  1903               	skipnz
 14278  170E  0AA3               	incf	___awdiv@dividend+1,f
 14279  170F  3001               	movlw	1
 14280  1710  00A4               	movwf	??___awdiv
 14281  1711  0824               	movf	??___awdiv,w
 14282  1712  06A6               	xorwf	___awdiv@sign,f
 14283  1713                     l5474:	
 14284  1713  01A7               	clrf	___awdiv@quotient
 14285  1714  01A8               	clrf	___awdiv@quotient+1
 14286  1715  0821               	movf	___awdiv@divisor+1,w
 14287  1716  0420               	iorwf	___awdiv@divisor,w
 14288  1717  1903               	skipnz
 14289  1718  2F42               	goto	l5496
 14290  1719  01A5               	clrf	___awdiv@counter
 14291  171A  0AA5               	incf	___awdiv@counter,f
 14292  171B                     l5484:	
 14293  171B  1BA1               	btfsc	___awdiv@divisor+1,7
 14294  171C  2F27               	goto	l5486
 14295  171D  3001               	movlw	1
 14296  171E                     u3955:	
 14297  171E  35A0               	lslf	___awdiv@divisor,f
 14298  171F  0DA1               	rlf	___awdiv@divisor+1,f
 14299  1720  0B89               	decfsz	9,f
 14300  1721  2F1E               	goto	u3955
 14301  1722  3001               	movlw	1
 14302  1723  00A4               	movwf	??___awdiv
 14303  1724  0824               	movf	??___awdiv,w
 14304  1725  07A5               	addwf	___awdiv@counter,f
 14305  1726  2F1B               	goto	l5484
 14306  1727                     l5486:	
 14307  1727  3001               	movlw	1
 14308  1728                     u3975:	
 14309  1728  35A7               	lslf	___awdiv@quotient,f
 14310  1729  0DA8               	rlf	___awdiv@quotient+1,f
 14311  172A  0B89               	decfsz	9,f
 14312  172B  2F28               	goto	u3975
 14313  172C  0821               	movf	___awdiv@divisor+1,w
 14314  172D  0223               	subwf	___awdiv@dividend+1,w
 14315  172E  1D03               	skipz
 14316  172F  2F32               	goto	u3985
 14317  1730  0820               	movf	___awdiv@divisor,w
 14318  1731  0222               	subwf	___awdiv@dividend,w
 14319  1732                     u3985:	
 14320  1732  1C03               	skipc
 14321  1733  2F39               	goto	l5492
 14322  1734  0820               	movf	___awdiv@divisor,w
 14323  1735  02A2               	subwf	___awdiv@dividend,f
 14324  1736  0821               	movf	___awdiv@divisor+1,w
 14325  1737  3BA3               	subwfb	___awdiv@dividend+1,f
 14326  1738  1427               	bsf	___awdiv@quotient,0
 14327  1739                     l5492:	
 14328  1739  3001               	movlw	1
 14329  173A                     u3995:	
 14330  173A  36A1               	lsrf	___awdiv@divisor+1,f
 14331  173B  0CA0               	rrf	___awdiv@divisor,f
 14332  173C  0B89               	decfsz	9,f
 14333  173D  2F3A               	goto	u3995
 14334  173E  3001               	movlw	1
 14335  173F  02A5               	subwf	___awdiv@counter,f
 14336  1740  1D03               	btfss	3,2
 14337  1741  2F27               	goto	l5486
 14338  1742                     l5496:	
 14339  1742  0826               	movf	___awdiv@sign,w
 14340  1743  1903               	btfsc	3,2
 14341  1744  2F4A               	goto	l5500
 14342  1745  09A7               	comf	___awdiv@quotient,f
 14343  1746  09A8               	comf	___awdiv@quotient+1,f
 14344  1747  0AA7               	incf	___awdiv@quotient,f
 14345  1748  1903               	skipnz
 14346  1749  0AA8               	incf	___awdiv@quotient+1,f
 14347  174A                     l5500:	
 14348  174A  0828               	movf	___awdiv@quotient+1,w
 14349  174B  01A1               	clrf	?___awdiv+1
 14350  174C  07A1               	addwf	?___awdiv+1,f
 14351  174D  0827               	movf	___awdiv@quotient,w
 14352  174E  01A0               	clrf	?___awdiv
 14353  174F  07A0               	addwf	?___awdiv,f
 14354  1750  0008               	return
 14355  1751                     __end_of___awdiv:	
 14356                           
 14357                           	psect	text90
 14358  1E6A                     __ptext90:	
 14359 ;; *************** function _DelayOff_Initialization *****************
 14360 ;; Defined at:
 14361 ;;		line 26 in file "../src/DelayOff_B1.c"
 14362 ;; Parameters:    Size  Location     Type
 14363 ;;		None
 14364 ;; Auto vars:     Size  Location     Type
 14365 ;;		None
 14366 ;; Return value:  Size  Location     Type
 14367 ;;		None               void
 14368 ;; Registers used:
 14369 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14370 ;; Tracked objects:
 14371 ;;		On entry : 0/0
 14372 ;;		On exit  : 0/0
 14373 ;;		Unchanged: 0/0
 14374 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14375 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14376 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14377 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14378 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14379 ;;Total ram usage:        0 bytes
 14380 ;; Hardware stack levels used:    1
 14381 ;; Hardware stack levels required when called:    7
 14382 ;; This function calls:
 14383 ;;		_DlyOff_Initialization
 14384 ;; This function is called by:
 14385 ;;		_main
 14386 ;; This function uses a non-reentrant model
 14387 ;;
 14388                           
 14389                           
 14390                           ;psect for function _DelayOff_Initialization
 14391  1E6A                     _DelayOff_Initialization:	
 14392                           
 14393                           ;DelayOff_B1.c: 28: DlyOff_Initialization(1);
 14394                           
 14395                           ;incstack = 0
 14396                           ; Regs used in _DelayOff_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 14397  1E6A  3001               	movlw	1
 14398  1E6B  319E  26BD  319E   	fcall	_DlyOff_Initialization
 14399                           
 14400                           ;DelayOff_B1.c: 32: DlyOff_Initialization(2);
 14401  1E6E  3002               	movlw	2
 14402  1E6F  319E  26BD         	fcall	_DlyOff_Initialization
 14403  1E71  0008               	return
 14404  1E72                     __end_of_DelayOff_Initialization:	
 14405                           
 14406                           	psect	text91
 14407  1EBD                     __ptext91:	
 14408 ;; *************** function _DlyOff_Initialization *****************
 14409 ;; Defined at:
 14410 ;;		line 56 in file "../src/DelayOff_B1.c"
 14411 ;; Parameters:    Size  Location     Type
 14412 ;;  sw              1    wreg     unsigned char 
 14413 ;; Auto vars:     Size  Location     Type
 14414 ;;  sw              1    2[BANK0 ] unsigned char 
 14415 ;; Return value:  Size  Location     Type
 14416 ;;		None               void
 14417 ;; Registers used:
 14418 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14419 ;; Tracked objects:
 14420 ;;		On entry : 0/0
 14421 ;;		On exit  : 0/0
 14422 ;;		Unchanged: 0/0
 14423 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14424 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14425 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14426 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14427 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14428 ;;Total ram usage:        1 bytes
 14429 ;; Hardware stack levels used:    1
 14430 ;; Hardware stack levels required when called:    6
 14431 ;; This function calls:
 14432 ;;		_DelayOffPointSelect
 14433 ;; This function is called by:
 14434 ;;		_DelayOff_Initialization
 14435 ;; This function uses a non-reentrant model
 14436 ;;
 14437                           
 14438                           
 14439                           ;psect for function _DlyOff_Initialization
 14440  1EBD                     _DlyOff_Initialization:	
 14441                           
 14442                           ;incstack = 0
 14443                           ; Regs used in _DlyOff_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 14444                           ;DlyOff_Initialization@sw stored from wreg
 14445  1EBD  0020               	movlb	0	; select bank0
 14446  1EBE  00A2               	movwf	DlyOff_Initialization@sw
 14447                           
 14448                           ;DelayOff_B1.c: 57: DelayOffPointSelect(sw);
 14449  1EBF  0822               	movf	DlyOff_Initialization@sw,w
 14450  1EC0  3191  2113         	fcall	_DelayOffPointSelect
 14451                           
 14452                           ;DelayOff_B1.c: 58: DelayOff->Enable = 1;
 14453  1EC2  0021               	movlb	1	; select bank1
 14454  1EC3  0838               	movf	_DelayOff^(0+128),w
 14455  1EC4  0086               	movwf	6
 14456  1EC5  0187               	clrf	7
 14457  1EC6  1401               	bsf	1,0
 14458  1EC7  0008               	return
 14459  1EC8                     __end_of_DlyOff_Initialization:	
 14460                           
 14461                           	psect	text92
 14462  1113                     __ptext92:	
 14463 ;; *************** function _DelayOffPointSelect *****************
 14464 ;; Defined at:
 14465 ;;		line 7 in file "../src/DelayOff_B1.c"
 14466 ;; Parameters:    Size  Location     Type
 14467 ;;  sw              1    wreg     unsigned char 
 14468 ;; Auto vars:     Size  Location     Type
 14469 ;;  sw              1    1[BANK0 ] unsigned char 
 14470 ;; Return value:  Size  Location     Type
 14471 ;;		None               void
 14472 ;; Registers used:
 14473 ;;		wreg
 14474 ;; Tracked objects:
 14475 ;;		On entry : 0/0
 14476 ;;		On exit  : 0/0
 14477 ;;		Unchanged: 0/0
 14478 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14479 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14480 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14481 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14482 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14483 ;;Total ram usage:        2 bytes
 14484 ;; Hardware stack levels used:    1
 14485 ;; Hardware stack levels required when called:    5
 14486 ;; This function calls:
 14487 ;;		Nothing
 14488 ;; This function is called by:
 14489 ;;		_DlyOff_Initialization
 14490 ;;		_DlyOff_Main
 14491 ;;		_setDelayOff_GO
 14492 ;; This function uses a non-reentrant model
 14493 ;;
 14494                           
 14495                           
 14496                           ;psect for function _DelayOffPointSelect
 14497  1113                     _DelayOffPointSelect:	
 14498                           
 14499                           ;incstack = 0
 14500                           ; Regs used in _DelayOffPointSelect: [wreg]
 14501                           ;DelayOffPointSelect@sw stored from wreg
 14502  1113  0020               	movlb	0	; select bank0
 14503  1114  00A1               	movwf	DelayOffPointSelect@sw
 14504                           
 14505                           ;DelayOff_B1.c: 9: if (sw == 1) {
 14506  1115  0821               	movf	DelayOffPointSelect@sw,w
 14507  1116  3A01               	xorlw	1
 14508  1117  1D03               	skipz
 14509  1118  291F               	goto	l5394
 14510                           
 14511                           ;DelayOff_B1.c: 10: DelayOff = &DlySw1;
 14512  1119  30C6               	movlw	_DlySw1& (0+255)
 14513  111A  00A0               	movwf	??_DelayOffPointSelect
 14514  111B  0820               	movf	??_DelayOffPointSelect,w
 14515  111C  0021               	movlb	1	; select bank1
 14516  111D  00B8               	movwf	_DelayOff^(0+128)
 14517                           
 14518                           ;DelayOff_B1.c: 11: }
 14519  111E  0008               	return
 14520  111F                     l5394:	
 14521                           
 14522                           ;DelayOff_B1.c: 14: else if (sw == 2) {
 14523  111F  0020               	movlb	0	; select bank0
 14524  1120  0821               	movf	DelayOffPointSelect@sw,w
 14525  1121  3A02               	xorlw	2
 14526  1122  1D03               	skipz
 14527  1123  0008               	return
 14528                           
 14529                           ;DelayOff_B1.c: 15: DelayOff = &DlySw2;
 14530  1124  30CB               	movlw	_DlySw2& (0+255)
 14531  1125  00A0               	movwf	??_DelayOffPointSelect
 14532  1126  0820               	movf	??_DelayOffPointSelect,w
 14533  1127  0021               	movlb	1	; select bank1
 14534  1128  00B8               	movwf	_DelayOff^(0+128)
 14535  1129  0008               	return
 14536  112A                     __end_of_DelayOffPointSelect:	
 14537                           
 14538                           	psect	text93
 14539  10E8                     __ptext93:	
 14540 ;; *************** function _CC2500_PowerOnInitial *****************
 14541 ;; Defined at:
 14542 ;;		line 96 in file "../src/CC2500_B1.c"
 14543 ;; Parameters:    Size  Location     Type
 14544 ;;		None
 14545 ;; Auto vars:     Size  Location     Type
 14546 ;;		None
 14547 ;; Return value:  Size  Location     Type
 14548 ;;		None               void
 14549 ;; Registers used:
 14550 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 14551 ;; Tracked objects:
 14552 ;;		On entry : 0/0
 14553 ;;		On exit  : 0/0
 14554 ;;		Unchanged: 0/0
 14555 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14556 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14557 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14558 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14559 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14560 ;;Total ram usage:        0 bytes
 14561 ;; Hardware stack levels used:    1
 14562 ;; Hardware stack levels required when called:    8
 14563 ;; This function calls:
 14564 ;;		_CC2500_ClearRXFIFO
 14565 ;;		_CC2500_ClearTXFIFO
 14566 ;;		_CC2500_FrequencyCabr
 14567 ;;		_CC2500_InitPATable
 14568 ;;		_CC2500_InitSetREG
 14569 ;;		_CC2500_PowerRST
 14570 ;;		_CC2500_SIDLEMode
 14571 ;; This function is called by:
 14572 ;;		_main
 14573 ;; This function uses a non-reentrant model
 14574 ;;
 14575                           
 14576                           
 14577                           ;psect for function _CC2500_PowerOnInitial
 14578  10E8                     _CC2500_PowerOnInitial:	
 14579                           
 14580                           ;CC2500_B1.c: 97: CC2500_PowerRST();
 14581                           
 14582                           ;incstack = 0
 14583                           ; Regs used in _CC2500_PowerOnInitial: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 14584  10E8  3194  240A  3190   	fcall	_CC2500_PowerRST
 14585                           
 14586                           ;CC2500_B1.c: 98: CC2500_InitSetREG();
 14587  10EB  3193  232F  3190   	fcall	_CC2500_InitSetREG
 14588                           
 14589                           ;CC2500_B1.c: 99: CC2500_InitPATable();
 14590  10EE  3192  2245  3190   	fcall	_CC2500_InitPATable
 14591                           
 14592                           ;CC2500_B1.c: 100: CC2500_ClearTXFIFO();
 14593  10F1  319E  262A  3190   	fcall	_CC2500_ClearTXFIFO
 14594                           
 14595                           ;CC2500_B1.c: 101: CC2500_ClearRXFIFO();
 14596  10F4  319E  2626  3190   	fcall	_CC2500_ClearRXFIFO
 14597                           
 14598                           ;CC2500_B1.c: 102: CC2500_FrequencyCabr();
 14599  10F7  319E  26D3  3190   	fcall	_CC2500_FrequencyCabr
 14600                           
 14601                           ;CC2500_B1.c: 103: CC2500_SIDLEMode();
 14602  10FA  319E  262E         	fcall	_CC2500_SIDLEMode
 14603  10FC  0008               	return
 14604  10FD                     __end_of_CC2500_PowerOnInitial:	
 14605                           
 14606                           	psect	text94
 14607  1E2E                     __ptext94:	
 14608 ;; *************** function _CC2500_SIDLEMode *****************
 14609 ;; Defined at:
 14610 ;;		line 180 in file "../src/CC2500_B1.c"
 14611 ;; Parameters:    Size  Location     Type
 14612 ;;		None
 14613 ;; Auto vars:     Size  Location     Type
 14614 ;;		None
 14615 ;; Return value:  Size  Location     Type
 14616 ;;		None               void
 14617 ;; Registers used:
 14618 ;;		wreg, status,2, status,0, pclath, cstack
 14619 ;; Tracked objects:
 14620 ;;		On entry : 0/0
 14621 ;;		On exit  : 0/0
 14622 ;;		Unchanged: 0/0
 14623 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14624 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14625 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14626 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14627 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14628 ;;Total ram usage:        0 bytes
 14629 ;; Hardware stack levels used:    1
 14630 ;; Hardware stack levels required when called:    7
 14631 ;; This function calls:
 14632 ;;		_CC2500_WriteCommand
 14633 ;; This function is called by:
 14634 ;;		_CC2500_PowerOnInitial
 14635 ;; This function uses a non-reentrant model
 14636 ;;
 14637                           
 14638                           
 14639                           ;psect for function _CC2500_SIDLEMode
 14640  1E2E                     _CC2500_SIDLEMode:	
 14641                           
 14642                           ;CC2500_B1.c: 181: CC2500_WriteCommand(0x36);
 14643                           
 14644                           ;incstack = 0
 14645                           ; Regs used in _CC2500_SIDLEMode: [wreg+status,2+status,0+pclath+cstack]
 14646  1E2E  3036               	movlw	54
 14647  1E2F  319F  278D         	fcall	_CC2500_WriteCommand
 14648  1E31  0008               	return
 14649  1E32                     __end_of_CC2500_SIDLEMode:	
 14650                           
 14651                           	psect	text95
 14652  140A                     __ptext95:	
 14653 ;; *************** function _CC2500_PowerRST *****************
 14654 ;; Defined at:
 14655 ;;		line 109 in file "../src/CC2500_B1.c"
 14656 ;; Parameters:    Size  Location     Type
 14657 ;;		None
 14658 ;; Auto vars:     Size  Location     Type
 14659 ;;		None
 14660 ;; Return value:  Size  Location     Type
 14661 ;;		None               void
 14662 ;; Registers used:
 14663 ;;		wreg, status,2, status,0, pclath, cstack
 14664 ;; Tracked objects:
 14665 ;;		On entry : 0/0
 14666 ;;		On exit  : 0/0
 14667 ;;		Unchanged: 0/0
 14668 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14669 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14670 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14671 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14672 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14673 ;;Total ram usage:        1 bytes
 14674 ;; Hardware stack levels used:    1
 14675 ;; Hardware stack levels required when called:    6
 14676 ;; This function calls:
 14677 ;;		_CC2500_WriteByte
 14678 ;;		_DelayTime_1us
 14679 ;; This function is called by:
 14680 ;;		_CC2500_PowerOnInitial
 14681 ;; This function uses a non-reentrant model
 14682 ;;
 14683                           
 14684                           
 14685                           ;psect for function _CC2500_PowerRST
 14686  140A                     _CC2500_PowerRST:	
 14687                           
 14688                           ;CC2500_B1.c: 110: RC1 = 0;
 14689                           
 14690                           ;incstack = 0
 14691                           ; Regs used in _CC2500_PowerRST: [wreg+status,2+status,0+pclath+cstack]
 14692  140A  0020               	movlb	0	; select bank0
 14693  140B  108E               	bcf	14,1	;volatile
 14694                           
 14695                           ;CC2500_B1.c: 111: RC0 = 0;
 14696  140C  100E               	bcf	14,0	;volatile
 14697                           
 14698                           ;CC2500_B1.c: 112: RC4 = 1;
 14699  140D  160E               	bsf	14,4	;volatile
 14700                           
 14701                           ;CC2500_B1.c: 113: DelayTime_1us(10);
 14702  140E  300A               	movlw	10
 14703  140F  00A0               	movwf	DelayTime_1us@count
 14704  1410  3000               	movlw	0
 14705  1411  00A1               	movwf	DelayTime_1us@count+1
 14706  1412  3193  2309  3194   	fcall	_DelayTime_1us
 14707                           
 14708                           ;CC2500_B1.c: 114: RC4 = 0;
 14709  1415  0020               	movlb	0	; select bank0
 14710  1416  120E               	bcf	14,4	;volatile
 14711                           
 14712                           ;CC2500_B1.c: 115: DelayTime_1us(10);
 14713  1417  300A               	movlw	10
 14714  1418  00A0               	movwf	DelayTime_1us@count
 14715  1419  3000               	movlw	0
 14716  141A  00A1               	movwf	DelayTime_1us@count+1
 14717  141B  3193  2309  3194   	fcall	_DelayTime_1us
 14718                           
 14719                           ;CC2500_B1.c: 116: RC4 = 1;
 14720  141E  0020               	movlb	0	; select bank0
 14721  141F  160E               	bsf	14,4	;volatile
 14722                           
 14723                           ;CC2500_B1.c: 117: DelayTime_1us(40);
 14724  1420  3028               	movlw	40
 14725  1421  00A0               	movwf	DelayTime_1us@count
 14726  1422  3000               	movlw	0
 14727  1423  00A1               	movwf	DelayTime_1us@count+1
 14728  1424  3193  2309  3194   	fcall	_DelayTime_1us
 14729                           
 14730                           ;CC2500_B1.c: 118: RC4 = 0;
 14731  1427  0020               	movlb	0	; select bank0
 14732  1428  120E               	bcf	14,4	;volatile
 14733                           
 14734                           ;CC2500_B1.c: 119: SPI0Buffer = 0x30;
 14735  1429  3030               	movlw	48
 14736  142A  00A6               	movwf	??_CC2500_PowerRST
 14737  142B  0826               	movf	??_CC2500_PowerRST,w
 14738  142C  0021               	movlb	1	; select bank1
 14739  142D  00C1               	movwf	_SPI0Buffer^(0+128)
 14740  142E                     l301:	
 14741                           ;CC2500_B1.c: 120: while (RC2 == 1);
 14742                           
 14743  142E  0020               	movlb	0	; select bank0
 14744  142F  190E               	btfsc	14,2	;volatile
 14745  1430  2C2E               	goto	l301
 14746                           
 14747                           ;CC2500_B1.c: 121: CC2500_WriteByte();
 14748  1431  3191  2159  3194   	fcall	_CC2500_WriteByte
 14749  1434                     l304:	
 14750                           ;CC2500_B1.c: 122: while (RC2 == 1);
 14751                           
 14752  1434  0020               	movlb	0	; select bank0
 14753  1435  190E               	btfsc	14,2	;volatile
 14754  1436  2C34               	goto	l304
 14755                           
 14756                           ;CC2500_B1.c: 123: RC0 = 0;
 14757  1437  100E               	bcf	14,0	;volatile
 14758                           
 14759                           ;CC2500_B1.c: 124: RC4 = 1;
 14760  1438  160E               	bsf	14,4	;volatile
 14761  1439  0008               	return
 14762  143A                     __end_of_CC2500_PowerRST:	
 14763                           
 14764                           	psect	text96
 14765  132F                     __ptext96:	
 14766 ;; *************** function _CC2500_InitSetREG *****************
 14767 ;; Defined at:
 14768 ;;		line 130 in file "../src/CC2500_B1.c"
 14769 ;; Parameters:    Size  Location     Type
 14770 ;;		None
 14771 ;; Auto vars:     Size  Location     Type
 14772 ;;  loop_c          1    8[BANK0 ] unsigned char 
 14773 ;;  temp2           1    7[BANK0 ] unsigned char 
 14774 ;;  temp1           1    6[BANK0 ] unsigned char 
 14775 ;; Return value:  Size  Location     Type
 14776 ;;		None               void
 14777 ;; Registers used:
 14778 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 14779 ;; Tracked objects:
 14780 ;;		On entry : 0/0
 14781 ;;		On exit  : 0/0
 14782 ;;		Unchanged: 0/0
 14783 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14784 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14785 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14786 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14787 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14788 ;;Total ram usage:        4 bytes
 14789 ;; Hardware stack levels used:    1
 14790 ;; Hardware stack levels required when called:    7
 14791 ;; This function calls:
 14792 ;;		_CC2500_WriteREG
 14793 ;; This function is called by:
 14794 ;;		_CC2500_PowerOnInitial
 14795 ;; This function uses a non-reentrant model
 14796 ;;
 14797                           
 14798                           
 14799                           ;psect for function _CC2500_InitSetREG
 14800  132F                     _CC2500_InitSetREG:	
 14801                           
 14802                           ;CC2500_B1.c: 131: unsigned char loop_c;
 14803                           ;CC2500_B1.c: 132: unsigned char temp1, temp2;
 14804                           ;CC2500_B1.c: 134: for (loop_c = 0; loop_c < 47; loop_c++) {
 14805                           
 14806                           ;incstack = 0
 14807                           ; Regs used in _CC2500_InitSetREG: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 14808  132F  0020               	movlb	0	; select bank0
 14809  1330  01A8               	clrf	CC2500_InitSetREG@loop_c
 14810  1331                     L13:	
 14811  1331  302F               	movlw	47
 14812  1332  0228               	subwf	CC2500_InitSetREG@loop_c,w
 14813  1333  1803               	btfsc	3,0
 14814  1334  0008               	return
 14815                           
 14816                           ;CC2500_B1.c: 135: temp1 = CC2500_registers_address[loop_c];
 14817  1335  0828               	movf	CC2500_InitSetREG@loop_c,w
 14818  1336  3E00               	addlw	low (_CC2500_registers_address| (0+32768))
 14819  1337  0084               	movwf	4
 14820  1338  3090               	movlw	high (_CC2500_registers_address| (0+32768))
 14821  1339  1803               	skipnc
 14822  133A  3E01               	addlw	1
 14823  133B  0085               	movwf	5
 14824  133C  0800               	movf	0,w	;code access
 14825  133D  00A5               	movwf	??_CC2500_InitSetREG
 14826  133E  0825               	movf	??_CC2500_InitSetREG,w
 14827  133F  00A6               	movwf	CC2500_InitSetREG@temp1
 14828                           
 14829                           ;CC2500_B1.c: 136: temp2 = CC2500_rfSettings[loop_c];
 14830  1340  0828               	movf	CC2500_InitSetREG@loop_c,w
 14831  1341  3E2F               	addlw	low (_CC2500_rfSettings| (0+32768))
 14832  1342  0084               	movwf	4
 14833  1343  3090               	movlw	high (_CC2500_rfSettings| (0+32768))
 14834  1344  1803               	skipnc
 14835  1345  3E01               	addlw	1
 14836  1346  0085               	movwf	5
 14837  1347  0800               	movf	0,w	;code access
 14838  1348  00A5               	movwf	??_CC2500_InitSetREG
 14839  1349  0825               	movf	??_CC2500_InitSetREG,w
 14840  134A  00A7               	movwf	CC2500_InitSetREG@temp2
 14841                           
 14842                           ;CC2500_B1.c: 138: CC2500_WriteREG(temp1, temp2);
 14843  134B  0827               	movf	CC2500_InitSetREG@temp2,w
 14844  134C  00A5               	movwf	??_CC2500_InitSetREG
 14845  134D  0825               	movf	??_CC2500_InitSetREG,w
 14846  134E  00A2               	movwf	CC2500_WriteREG@value
 14847  134F  0826               	movf	CC2500_InitSetREG@temp1,w
 14848  1350  3191  2172  3193   	fcall	_CC2500_WriteREG
 14849  1353  3001               	movlw	1
 14850  1354  0020               	movlb	0	; select bank0
 14851  1355  00A5               	movwf	??_CC2500_InitSetREG
 14852  1356  0825               	movf	??_CC2500_InitSetREG,w
 14853  1357  07A8               	addwf	CC2500_InitSetREG@loop_c,f
 14854  1358  2B31               	goto	L13
 14855  1359                     __end_of_CC2500_InitSetREG:	
 14856                           
 14857                           	psect	text97
 14858  1245                     __ptext97:	
 14859 ;; *************** function _CC2500_InitPATable *****************
 14860 ;; Defined at:
 14861 ;;		line 145 in file "../src/CC2500_B1.c"
 14862 ;; Parameters:    Size  Location     Type
 14863 ;;		None
 14864 ;; Auto vars:     Size  Location     Type
 14865 ;;  loop_d          1    7[BANK0 ] unsigned char 
 14866 ;;  temp            1    6[BANK0 ] unsigned char 
 14867 ;; Return value:  Size  Location     Type
 14868 ;;		None               void
 14869 ;; Registers used:
 14870 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 14871 ;; Tracked objects:
 14872 ;;		On entry : 0/0
 14873 ;;		On exit  : 0/0
 14874 ;;		Unchanged: 0/0
 14875 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14876 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14877 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14878 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14879 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14880 ;;Total ram usage:        3 bytes
 14881 ;; Hardware stack levels used:    1
 14882 ;; Hardware stack levels required when called:    7
 14883 ;; This function calls:
 14884 ;;		_CC2500_WriteREG
 14885 ;; This function is called by:
 14886 ;;		_CC2500_PowerOnInitial
 14887 ;; This function uses a non-reentrant model
 14888 ;;
 14889                           
 14890                           
 14891                           ;psect for function _CC2500_InitPATable
 14892  1245                     _CC2500_InitPATable:	
 14893                           
 14894                           ;CC2500_B1.c: 146: unsigned char loop_d;
 14895                           ;CC2500_B1.c: 147: unsigned char temp;
 14896                           ;CC2500_B1.c: 149: for (loop_d = 0; loop_d < 8; loop_d++) {
 14897                           
 14898                           ;incstack = 0
 14899                           ; Regs used in _CC2500_InitPATable: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 14900  1245  0020               	movlb	0	; select bank0
 14901  1246  01A7               	clrf	CC2500_InitPATable@loop_d
 14902  1247                     L14:	
 14903  1247  3008               	movlw	8
 14904  1248  0227               	subwf	CC2500_InitPATable@loop_d,w
 14905  1249  1803               	btfsc	3,0
 14906  124A  0008               	return
 14907                           
 14908                           ;CC2500_B1.c: 150: temp = CC2500_patable_vaule[loop_d];
 14909  124B  0827               	movf	CC2500_InitPATable@loop_d,w
 14910  124C  3E5E               	addlw	low (_CC2500_patable_vaule| (0+32768))
 14911  124D  0084               	movwf	4
 14912  124E  3090               	movlw	high (_CC2500_patable_vaule| (0+32768))
 14913  124F  1803               	skipnc
 14914  1250  3E01               	addlw	1
 14915  1251  0085               	movwf	5
 14916  1252  0800               	movf	0,w	;code access
 14917  1253  00A5               	movwf	??_CC2500_InitPATable
 14918  1254  0825               	movf	??_CC2500_InitPATable,w
 14919  1255  00A6               	movwf	CC2500_InitPATable@temp
 14920                           
 14921                           ;CC2500_B1.c: 151: CC2500_WriteREG(0x3E, temp);
 14922  1256  0826               	movf	CC2500_InitPATable@temp,w
 14923  1257  00A5               	movwf	??_CC2500_InitPATable
 14924  1258  0825               	movf	??_CC2500_InitPATable,w
 14925  1259  00A2               	movwf	CC2500_WriteREG@value
 14926  125A  303E               	movlw	62
 14927  125B  3191  2172  3192   	fcall	_CC2500_WriteREG
 14928  125E  3001               	movlw	1
 14929  125F  0020               	movlb	0	; select bank0
 14930  1260  00A5               	movwf	??_CC2500_InitPATable
 14931  1261  0825               	movf	??_CC2500_InitPATable,w
 14932  1262  07A7               	addwf	CC2500_InitPATable@loop_d,f
 14933  1263  2A47               	goto	L14
 14934  1264                     __end_of_CC2500_InitPATable:	
 14935                           
 14936                           	psect	text98
 14937  1172                     __ptext98:	
 14938 ;; *************** function _CC2500_WriteREG *****************
 14939 ;; Defined at:
 14940 ;;		line 222 in file "../src/CC2500_B1.c"
 14941 ;; Parameters:    Size  Location     Type
 14942 ;;  w_addr          1    wreg     unsigned char 
 14943 ;;  value           1    2[BANK0 ] unsigned char 
 14944 ;; Auto vars:     Size  Location     Type
 14945 ;;  w_addr          1    4[BANK0 ] unsigned char 
 14946 ;; Return value:  Size  Location     Type
 14947 ;;		None               void
 14948 ;; Registers used:
 14949 ;;		wreg, status,2, status,0, pclath, cstack
 14950 ;; Tracked objects:
 14951 ;;		On entry : 0/0
 14952 ;;		On exit  : 0/0
 14953 ;;		Unchanged: 0/0
 14954 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14955 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14956 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14957 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14958 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14959 ;;Total ram usage:        3 bytes
 14960 ;; Hardware stack levels used:    1
 14961 ;; Hardware stack levels required when called:    6
 14962 ;; This function calls:
 14963 ;;		_CC2500_WriteByte
 14964 ;; This function is called by:
 14965 ;;		_CC2500_InitSetREG
 14966 ;;		_CC2500_InitPATable
 14967 ;; This function uses a non-reentrant model
 14968 ;;
 14969                           
 14970                           
 14971                           ;psect for function _CC2500_WriteREG
 14972  1172                     _CC2500_WriteREG:	
 14973                           
 14974                           ;incstack = 0
 14975                           ; Regs used in _CC2500_WriteREG: [wreg+status,2+status,0+pclath+cstack]
 14976                           ;CC2500_WriteREG@w_addr stored from wreg
 14977  1172  0020               	movlb	0	; select bank0
 14978  1173  00A4               	movwf	CC2500_WriteREG@w_addr
 14979                           
 14980                           ;CC2500_B1.c: 223: RC4 = 0;
 14981  1174  120E               	bcf	14,4	;volatile
 14982                           
 14983                           ;CC2500_B1.c: 224: SPI0Buffer = w_addr;
 14984  1175  0824               	movf	CC2500_WriteREG@w_addr,w
 14985  1176  00A3               	movwf	??_CC2500_WriteREG
 14986  1177  0823               	movf	??_CC2500_WriteREG,w
 14987  1178  0021               	movlb	1	; select bank1
 14988  1179  00C1               	movwf	_SPI0Buffer^(0+128)
 14989  117A                     l346:	
 14990                           ;CC2500_B1.c: 225: while (RC2 == 1);
 14991                           
 14992  117A  0020               	movlb	0	; select bank0
 14993  117B  190E               	btfsc	14,2	;volatile
 14994  117C  297A               	goto	l346
 14995                           
 14996                           ;CC2500_B1.c: 226: CC2500_WriteByte();
 14997  117D  3191  2159  3191   	fcall	_CC2500_WriteByte
 14998                           
 14999                           ;CC2500_B1.c: 227: SPI0Buffer = value;
 15000  1180  0020               	movlb	0	; select bank0
 15001  1181  0822               	movf	CC2500_WriteREG@value,w
 15002  1182  00A3               	movwf	??_CC2500_WriteREG
 15003  1183  0823               	movf	??_CC2500_WriteREG,w
 15004  1184  0021               	movlb	1	; select bank1
 15005  1185  00C1               	movwf	_SPI0Buffer^(0+128)
 15006                           
 15007                           ;CC2500_B1.c: 228: CC2500_WriteByte();
 15008  1186  3191  2159         	fcall	_CC2500_WriteByte
 15009                           
 15010                           ;CC2500_B1.c: 229: RC4 = 1;
 15011  1188  0020               	movlb	0	; select bank0
 15012  1189  160E               	bsf	14,4	;volatile
 15013  118A  0008               	return
 15014  118B                     __end_of_CC2500_WriteREG:	
 15015                           
 15016                           	psect	text99
 15017  1ED3                     __ptext99:	
 15018 ;; *************** function _CC2500_FrequencyCabr *****************
 15019 ;; Defined at:
 15020 ;;		line 172 in file "../src/CC2500_B1.c"
 15021 ;; Parameters:    Size  Location     Type
 15022 ;;		None
 15023 ;; Auto vars:     Size  Location     Type
 15024 ;;		None
 15025 ;; Return value:  Size  Location     Type
 15026 ;;		None               void
 15027 ;; Registers used:
 15028 ;;		wreg, status,2, status,0, pclath, cstack
 15029 ;; Tracked objects:
 15030 ;;		On entry : 0/0
 15031 ;;		On exit  : 0/0
 15032 ;;		Unchanged: 0/0
 15033 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15034 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15035 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15036 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15037 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15038 ;;Total ram usage:        0 bytes
 15039 ;; Hardware stack levels used:    1
 15040 ;; Hardware stack levels required when called:    7
 15041 ;; This function calls:
 15042 ;;		_CC2500_WriteCommand
 15043 ;;		_DelayTime_1us
 15044 ;; This function is called by:
 15045 ;;		_CC2500_PowerOnInitial
 15046 ;; This function uses a non-reentrant model
 15047 ;;
 15048                           
 15049                           
 15050                           ;psect for function _CC2500_FrequencyCabr
 15051  1ED3                     _CC2500_FrequencyCabr:	
 15052                           
 15053                           ;CC2500_B1.c: 173: CC2500_WriteCommand(0x33);
 15054                           
 15055                           ;incstack = 0
 15056                           ; Regs used in _CC2500_FrequencyCabr: [wreg+status,2+status,0+pclath+cstack]
 15057  1ED3  3033               	movlw	51
 15058  1ED4  319F  278D  319E   	fcall	_CC2500_WriteCommand
 15059                           
 15060                           ;CC2500_B1.c: 174: DelayTime_1us(1000);
 15061  1ED7  30E8               	movlw	232
 15062  1ED8  0020               	movlb	0	; select bank0
 15063  1ED9  00A0               	movwf	DelayTime_1us@count
 15064  1EDA  3003               	movlw	3
 15065  1EDB  00A1               	movwf	DelayTime_1us@count+1
 15066  1EDC  3193  2309         	fcall	_DelayTime_1us
 15067  1EDE  0008               	return
 15068  1EDF                     __end_of_CC2500_FrequencyCabr:	
 15069                           
 15070                           	psect	text100
 15071  1309                     __ptext100:	
 15072 ;; *************** function _DelayTime_1us *****************
 15073 ;; Defined at:
 15074 ;;		line 278 in file "../src/CC2500_B1.c"
 15075 ;; Parameters:    Size  Location     Type
 15076 ;;  count           2    0[BANK0 ] int 
 15077 ;; Auto vars:     Size  Location     Type
 15078 ;;  j               2    4[BANK0 ] unsigned int 
 15079 ;;  i               2    2[BANK0 ] unsigned int 
 15080 ;; Return value:  Size  Location     Type
 15081 ;;		None               void
 15082 ;; Registers used:
 15083 ;;		wreg, status,2
 15084 ;; Tracked objects:
 15085 ;;		On entry : 0/0
 15086 ;;		On exit  : 0/0
 15087 ;;		Unchanged: 0/0
 15088 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15089 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15090 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15091 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15092 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15093 ;;Total ram usage:        6 bytes
 15094 ;; Hardware stack levels used:    1
 15095 ;; Hardware stack levels required when called:    5
 15096 ;; This function calls:
 15097 ;;		Nothing
 15098 ;; This function is called by:
 15099 ;;		_CC2500_PowerRST
 15100 ;;		_CC2500_FrequencyCabr
 15101 ;; This function uses a non-reentrant model
 15102 ;;
 15103                           
 15104                           
 15105                           ;psect for function _DelayTime_1us
 15106  1309                     _DelayTime_1us:	
 15107                           
 15108                           ;CC2500_B1.c: 279: unsigned int i, j;
 15109                           ;CC2500_B1.c: 280: for (i = 1; i < count; i++)
 15110                           
 15111                           ;incstack = 0
 15112                           ; Regs used in _DelayTime_1us: [wreg+status,2]
 15113  1309  3001               	movlw	1
 15114  130A  0020               	movlb	0	; select bank0
 15115  130B  00A2               	movwf	DelayTime_1us@i
 15116  130C  3000               	movlw	0
 15117  130D  00A3               	movwf	DelayTime_1us@i+1
 15118  130E                     l370:	
 15119  130E  0821               	movf	DelayTime_1us@count+1,w
 15120  130F  0223               	subwf	DelayTime_1us@i+1,w
 15121  1310  1D03               	skipz
 15122  1311  2B14               	goto	u4695
 15123  1312  0820               	movf	DelayTime_1us@count,w
 15124  1313  0222               	subwf	DelayTime_1us@i,w
 15125  1314                     u4695:	
 15126  1314  1803               	btfsc	3,0
 15127  1315  0008               	return
 15128                           
 15129                           ;CC2500_B1.c: 281: for (j = 0; j <= 1; j++);
 15130  1316  01A4               	clrf	DelayTime_1us@j
 15131  1317  01A5               	clrf	DelayTime_1us@j+1
 15132  1318  3000               	movlw	0
 15133  1319  0225               	subwf	DelayTime_1us@j+1,w
 15134  131A  3002               	movlw	2
 15135  131B  1903               	skipnz
 15136  131C  0224               	subwf	DelayTime_1us@j,w
 15137  131D  1803               	btfsc	3,0
 15138  131E  2B2A               	goto	l5954
 15139  131F                     l5952:	
 15140  131F  3001               	movlw	1
 15141  1320  07A4               	addwf	DelayTime_1us@j,f
 15142  1321  3000               	movlw	0
 15143  1322  3DA5               	addwfc	DelayTime_1us@j+1,f
 15144  1323  3000               	movlw	0
 15145  1324  0225               	subwf	DelayTime_1us@j+1,w
 15146  1325  3002               	movlw	2
 15147  1326  1903               	skipnz
 15148  1327  0224               	subwf	DelayTime_1us@j,w
 15149  1328  1C03               	skipc
 15150  1329  2B1F               	goto	l5952
 15151  132A                     l5954:	
 15152  132A  3001               	movlw	1
 15153  132B  07A2               	addwf	DelayTime_1us@i,f
 15154  132C  3000               	movlw	0
 15155  132D  3DA3               	addwfc	DelayTime_1us@i+1,f
 15156  132E  2B0E               	goto	l370
 15157  132F                     __end_of_DelayTime_1us:	
 15158                           
 15159                           	psect	text101
 15160  1E2A                     __ptext101:	
 15161 ;; *************** function _CC2500_ClearTXFIFO *****************
 15162 ;; Defined at:
 15163 ;;		line 158 in file "../src/CC2500_B1.c"
 15164 ;; Parameters:    Size  Location     Type
 15165 ;;		None
 15166 ;; Auto vars:     Size  Location     Type
 15167 ;;		None
 15168 ;; Return value:  Size  Location     Type
 15169 ;;		None               void
 15170 ;; Registers used:
 15171 ;;		wreg, status,2, status,0, pclath, cstack
 15172 ;; Tracked objects:
 15173 ;;		On entry : 0/0
 15174 ;;		On exit  : 0/0
 15175 ;;		Unchanged: 0/0
 15176 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15177 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15178 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15179 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15180 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15181 ;;Total ram usage:        0 bytes
 15182 ;; Hardware stack levels used:    1
 15183 ;; Hardware stack levels required when called:    7
 15184 ;; This function calls:
 15185 ;;		_CC2500_WriteCommand
 15186 ;; This function is called by:
 15187 ;;		_CC2500_PowerOnInitial
 15188 ;; This function uses a non-reentrant model
 15189 ;;
 15190                           
 15191                           
 15192                           ;psect for function _CC2500_ClearTXFIFO
 15193  1E2A                     _CC2500_ClearTXFIFO:	
 15194                           
 15195                           ;CC2500_B1.c: 159: CC2500_WriteCommand(0x3B);
 15196                           
 15197                           ;incstack = 0
 15198                           ; Regs used in _CC2500_ClearTXFIFO: [wreg+status,2+status,0+pclath+cstack]
 15199  1E2A  303B               	movlw	59
 15200  1E2B  319F  278D         	fcall	_CC2500_WriteCommand
 15201  1E2D  0008               	return
 15202  1E2E                     __end_of_CC2500_ClearTXFIFO:	
 15203                           
 15204                           	psect	text102
 15205  1E26                     __ptext102:	
 15206 ;; *************** function _CC2500_ClearRXFIFO *****************
 15207 ;; Defined at:
 15208 ;;		line 165 in file "../src/CC2500_B1.c"
 15209 ;; Parameters:    Size  Location     Type
 15210 ;;		None
 15211 ;; Auto vars:     Size  Location     Type
 15212 ;;		None
 15213 ;; Return value:  Size  Location     Type
 15214 ;;		None               void
 15215 ;; Registers used:
 15216 ;;		wreg, status,2, status,0, pclath, cstack
 15217 ;; Tracked objects:
 15218 ;;		On entry : 0/0
 15219 ;;		On exit  : 0/0
 15220 ;;		Unchanged: 0/0
 15221 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15222 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15223 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15224 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15225 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15226 ;;Total ram usage:        0 bytes
 15227 ;; Hardware stack levels used:    1
 15228 ;; Hardware stack levels required when called:    7
 15229 ;; This function calls:
 15230 ;;		_CC2500_WriteCommand
 15231 ;; This function is called by:
 15232 ;;		_CC2500_PowerOnInitial
 15233 ;; This function uses a non-reentrant model
 15234 ;;
 15235                           
 15236                           
 15237                           ;psect for function _CC2500_ClearRXFIFO
 15238  1E26                     _CC2500_ClearRXFIFO:	
 15239                           
 15240                           ;CC2500_B1.c: 166: CC2500_WriteCommand(0x3A);
 15241                           
 15242                           ;incstack = 0
 15243                           ; Regs used in _CC2500_ClearRXFIFO: [wreg+status,2+status,0+pclath+cstack]
 15244  1E26  303A               	movlw	58
 15245  1E27  319F  278D         	fcall	_CC2500_WriteCommand
 15246  1E29  0008               	return
 15247  1E2A                     __end_of_CC2500_ClearRXFIFO:	
 15248                           
 15249                           	psect	text103
 15250  1F8D                     __ptext103:	
 15251 ;; *************** function _CC2500_WriteCommand *****************
 15252 ;; Defined at:
 15253 ;;		line 248 in file "../src/CC2500_B1.c"
 15254 ;; Parameters:    Size  Location     Type
 15255 ;;  command         1    wreg     unsigned char 
 15256 ;; Auto vars:     Size  Location     Type
 15257 ;;  command         1    3[BANK0 ] unsigned char 
 15258 ;; Return value:  Size  Location     Type
 15259 ;;		None               void
 15260 ;; Registers used:
 15261 ;;		wreg, status,2, status,0, pclath, cstack
 15262 ;; Tracked objects:
 15263 ;;		On entry : 0/0
 15264 ;;		On exit  : 0/0
 15265 ;;		Unchanged: 0/0
 15266 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15267 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15268 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15269 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15270 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15271 ;;Total ram usage:        2 bytes
 15272 ;; Hardware stack levels used:    1
 15273 ;; Hardware stack levels required when called:    6
 15274 ;; This function calls:
 15275 ;;		_CC2500_WriteByte
 15276 ;; This function is called by:
 15277 ;;		_CC2500_TxData
 15278 ;;		_CC2500_RxData
 15279 ;;		_CC2500_ClearTXFIFO
 15280 ;;		_CC2500_ClearRXFIFO
 15281 ;;		_CC2500_FrequencyCabr
 15282 ;;		_CC2500_SIDLEMode
 15283 ;;		_setRF_Main
 15284 ;;		_RF_RxDisable
 15285 ;; This function uses a non-reentrant model
 15286 ;;
 15287                           
 15288                           
 15289                           ;psect for function _CC2500_WriteCommand
 15290  1F8D                     _CC2500_WriteCommand:	
 15291                           
 15292                           ;incstack = 0
 15293                           ; Regs used in _CC2500_WriteCommand: [wreg+status,2+status,0+pclath+cstack]
 15294                           ;CC2500_WriteCommand@command stored from wreg
 15295  1F8D  0020               	movlb	0	; select bank0
 15296  1F8E  00A3               	movwf	CC2500_WriteCommand@command
 15297                           
 15298                           ;CC2500_B1.c: 249: RC4 = 0;
 15299  1F8F  120E               	bcf	14,4	;volatile
 15300                           
 15301                           ;CC2500_B1.c: 250: SPI0Buffer = command;
 15302  1F90  0823               	movf	CC2500_WriteCommand@command,w
 15303  1F91  00A2               	movwf	??_CC2500_WriteCommand
 15304  1F92  0822               	movf	??_CC2500_WriteCommand,w
 15305  1F93  0021               	movlb	1	; select bank1
 15306  1F94  00C1               	movwf	_SPI0Buffer^(0+128)
 15307  1F95                     l358:	
 15308                           ;CC2500_B1.c: 252: while (RC2 == 1);
 15309                           
 15310  1F95  0020               	movlb	0	; select bank0
 15311  1F96  190E               	btfsc	14,2	;volatile
 15312  1F97  2F95               	goto	l358
 15313                           
 15314                           ;CC2500_B1.c: 254: CC2500_WriteByte();
 15315  1F98  3191  2159         	fcall	_CC2500_WriteByte
 15316                           
 15317                           ;CC2500_B1.c: 255: RC4 = 1;
 15318  1F9A  0020               	movlb	0	; select bank0
 15319  1F9B  160E               	bsf	14,4	;volatile
 15320  1F9C  0008               	return
 15321  1F9D                     __end_of_CC2500_WriteCommand:	
 15322                           
 15323                           	psect	text104
 15324  1159                     __ptext104:	
 15325 ;; *************** function _CC2500_WriteByte *****************
 15326 ;; Defined at:
 15327 ;;		line 190 in file "../src/CC2500_B1.c"
 15328 ;; Parameters:    Size  Location     Type
 15329 ;;		None
 15330 ;; Auto vars:     Size  Location     Type
 15331 ;;  loop_a          1    1[BANK0 ] unsigned char 
 15332 ;; Return value:  Size  Location     Type
 15333 ;;		None               void
 15334 ;; Registers used:
 15335 ;;		wreg, status,2, status,0
 15336 ;; Tracked objects:
 15337 ;;		On entry : 0/0
 15338 ;;		On exit  : 0/0
 15339 ;;		Unchanged: 0/0
 15340 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15341 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15342 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15343 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15344 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15345 ;;Total ram usage:        2 bytes
 15346 ;; Hardware stack levels used:    1
 15347 ;; Hardware stack levels required when called:    5
 15348 ;; This function calls:
 15349 ;;		Nothing
 15350 ;; This function is called by:
 15351 ;;		_CC2500_TxData
 15352 ;;		_CC2500_RxData
 15353 ;;		_CC2500_PowerRST
 15354 ;;		_CC2500_WriteREG
 15355 ;;		_CC2500_WriteCommand
 15356 ;;		_CC2500_ReadStatus
 15357 ;;		_CC2500_ReadREG
 15358 ;; This function uses a non-reentrant model
 15359 ;;
 15360                           
 15361                           
 15362                           ;psect for function _CC2500_WriteByte
 15363  1159                     _CC2500_WriteByte:	
 15364                           
 15365                           ;CC2500_B1.c: 191: unsigned char loop_a;
 15366                           ;CC2500_B1.c: 192: for (loop_a = 0; loop_a < 8; loop_a++) {
 15367                           
 15368                           ;incstack = 0
 15369                           ; Regs used in _CC2500_WriteByte: [wreg+status,2+status,0]
 15370  1159  0020               	movlb	0	; select bank0
 15371  115A  01A1               	clrf	CC2500_WriteByte@loop_a
 15372  115B                     L15:	
 15373  115B  3008               	movlw	8
 15374  115C  0221               	subwf	CC2500_WriteByte@loop_a,w
 15375  115D  1803               	btfsc	3,0
 15376  115E  0008               	return
 15377                           
 15378                           ;CC2500_B1.c: 193: if (SPI0Buffer & 0x80)
 15379  115F  0021               	movlb	1	; select bank1
 15380  1160  1FC1               	btfss	_SPI0Buffer^(0+128),7
 15381  1161  2965               	goto	l334
 15382                           
 15383                           ;CC2500_B1.c: 194: RC0 = 1;
 15384  1162  0020               	movlb	0	; select bank0
 15385  1163  140E               	bsf	14,0	;volatile
 15386  1164  2967               	goto	l335
 15387  1165                     l334:	
 15388                           
 15389                           ;CC2500_B1.c: 195: else
 15390                           ;CC2500_B1.c: 196: RC0 = 0;
 15391  1165  0020               	movlb	0	; select bank0
 15392  1166  100E               	bcf	14,0	;volatile
 15393  1167                     l335:	
 15394                           
 15395                           ;CC2500_B1.c: 197: RC1 = 1;
 15396  1167  148E               	bsf	14,1	;volatile
 15397                           
 15398                           ;CC2500_B1.c: 198: SPI0Buffer <<= 1;
 15399  1168  1003               	clrc
 15400  1169  0021               	movlb	1	; select bank1
 15401  116A  0DC1               	rlf	_SPI0Buffer^(0+128),f
 15402                           
 15403                           ;CC2500_B1.c: 199: RC1 = 0;
 15404  116B  0020               	movlb	0	; select bank0
 15405  116C  108E               	bcf	14,1	;volatile
 15406  116D  3001               	movlw	1
 15407  116E  00A0               	movwf	??_CC2500_WriteByte
 15408  116F  0820               	movf	??_CC2500_WriteByte,w
 15409  1170  07A1               	addwf	CC2500_WriteByte@loop_a,f
 15410  1171  295B               	goto	L15
 15411  1172                     __end_of_CC2500_WriteByte:	
 15412                           
 15413                           	psect	text105
 15414  071F                     __ptext105:	
 15415 ;; *************** function _Buzzer_Main *****************
 15416 ;; Defined at:
 15417 ;;		line 53 in file "../src/Buzzer_B1.c"
 15418 ;; Parameters:    Size  Location     Type
 15419 ;;		None
 15420 ;; Auto vars:     Size  Location     Type
 15421 ;;		None
 15422 ;; Return value:  Size  Location     Type
 15423 ;;		None               void
 15424 ;; Registers used:
 15425 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
 15426 ;; Tracked objects:
 15427 ;;		On entry : 0/0
 15428 ;;		On exit  : 0/0
 15429 ;;		Unchanged: 0/0
 15430 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15431 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15432 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15433 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15434 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15435 ;;Total ram usage:        4 bytes
 15436 ;; Hardware stack levels used:    1
 15437 ;; Hardware stack levels required when called:    5
 15438 ;; This function calls:
 15439 ;;		Nothing
 15440 ;; This function is called by:
 15441 ;;		_main
 15442 ;; This function uses a non-reentrant model
 15443 ;;
 15444                           
 15445                           
 15446                           ;psect for function _Buzzer_Main
 15447  071F                     _Buzzer_Main:	
 15448                           
 15449                           ;Buzzer_B1.c: 54: Buz->Switch = (RB3) ? 1 : 0;
 15450                           
 15451                           ;incstack = 0
 15452                           ; Regs used in _Buzzer_Main: [wreg-fsr1h+status,2+status,0]
 15453  071F  0878               	movf	_Buz,w
 15454  0720  0086               	movwf	6
 15455  0721  3001               	movlw	1	; select bank2/3
 15456  0722  0087               	movwf	7
 15457  0723  1281               	bcf	1,5
 15458  0724  0020               	movlb	0	; select bank0
 15459  0725  198D               	btfsc	13,3	;volatile
 15460  0726  1681               	bsf	1,5
 15461                           
 15462                           ;Buzzer_B1.c: 56: if (Buz->Counter >= Buz->TimeValue) {
 15463  0727  0878               	movf	_Buz,w
 15464  0728  3E06               	addlw	6
 15465  0729  0086               	movwf	6
 15466  072A  3001               	movlw	1	; select bank2/3
 15467  072B  0087               	movwf	7
 15468  072C  3F40               	moviw [0]fsr1
 15469  072D  0020               	movlb	0	; select bank0
 15470  072E  00A0               	movwf	??_Buzzer_Main
 15471  072F  3F41               	moviw [1]fsr1
 15472  0730  00A1               	movwf	??_Buzzer_Main+1
 15473  0731  0A78               	incf	_Buz,w
 15474  0732  0086               	movwf	6
 15475  0733  3001               	movlw	1	; select bank2/3
 15476  0734  0087               	movwf	7
 15477  0735  3F40               	moviw [0]fsr1
 15478  0736  00A2               	movwf	??_Buzzer_Main+2
 15479  0737  3F41               	moviw [1]fsr1
 15480  0738  00A3               	movwf	??_Buzzer_Main+3
 15481  0739  0821               	movf	??_Buzzer_Main+1,w
 15482  073A  0223               	subwf	??_Buzzer_Main+3,w
 15483  073B  1D03               	skipz
 15484  073C  2F3F               	goto	u5915
 15485  073D  0820               	movf	??_Buzzer_Main,w
 15486  073E  0222               	subwf	??_Buzzer_Main+2,w
 15487  073F                     u5915:	
 15488  073F  1C03               	skipc
 15489  0740  0008               	return
 15490                           
 15491                           ;Buzzer_B1.c: 57: Buz->Counter = 0;
 15492  0741  0A78               	incf	_Buz,w
 15493  0742  0086               	movwf	6
 15494  0743  3001               	movlw	1	; select bank2/3
 15495  0744  0087               	movwf	7
 15496  0745  3000               	movlw	0
 15497  0746  3FC0               	movwi [0]fsr1
 15498  0747  3FC1               	movwi [1]fsr1
 15499                           
 15500                           ;Buzzer_B1.c: 58: if (!Buz->Switch) {
 15501  0748  0878               	movf	_Buz,w
 15502  0749  0086               	movwf	6
 15503  074A  3001               	movlw	1	; select bank2/3
 15504  074B  0087               	movwf	7
 15505  074C  1A81               	btfsc	1,5
 15506  074D  2FB3               	goto	l6808
 15507                           
 15508                           ;Buzzer_B1.c: 59: if (Buz->Count == 0) {
 15509  074E  0878               	movf	_Buz,w
 15510  074F  3E03               	addlw	3
 15511  0750  0086               	movwf	6
 15512  0751  3001               	movlw	1	; select bank2/3
 15513  0752  0087               	movwf	7
 15514  0753  0881               	movf	1,f
 15515  0754  1D03               	skipz
 15516  0755  2FAC               	goto	l6804
 15517                           
 15518                           ;Buzzer_B1.c: 60: if (Buz->BufferStatus1) {
 15519  0756  0878               	movf	_Buz,w
 15520  0757  0086               	movwf	6
 15521  0758  3001               	movlw	1	; select bank2/3
 15522  0759  0087               	movwf	7
 15523  075A  1D81               	btfss	1,3
 15524  075B  2F7E               	goto	l6796
 15525                           
 15526                           ;Buzzer_B1.c: 61: Buz->BufferStatus1 = 0;
 15527  075C  0878               	movf	_Buz,w
 15528  075D  0086               	movwf	6
 15529  075E  3001               	movlw	1	; select bank2/3
 15530  075F  0087               	movwf	7
 15531  0760  1181               	bcf	1,3
 15532                           
 15533                           ;Buzzer_B1.c: 62: Buz->Count = Buz->CountBuffer1;
 15534  0761  0878               	movf	_Buz,w
 15535  0762  3E04               	addlw	4
 15536  0763  0086               	movwf	6
 15537  0764  3001               	movlw	1	; select bank2/3
 15538  0765  0087               	movwf	7
 15539  0766  0801               	movf	1,w
 15540  0767  00A0               	movwf	??_Buzzer_Main
 15541  0768  0878               	movf	_Buz,w
 15542  0769  3E03               	addlw	3
 15543  076A  0086               	movwf	6
 15544  076B  3001               	movlw	1	; select bank2/3
 15545  076C  0087               	movwf	7
 15546  076D  0820               	movf	??_Buzzer_Main,w
 15547  076E  0081               	movwf	1
 15548                           
 15549                           ;Buzzer_B1.c: 63: Buz->TimeValue = Buz->TimeValueBuffer1;
 15550  076F  0878               	movf	_Buz,w
 15551  0770  3E08               	addlw	8
 15552  0771  0086               	movwf	6
 15553  0772  3001               	movlw	1	; select bank2/3
 15554  0773  0087               	movwf	7
 15555  0774  0878               	movf	_Buz,w
 15556  0775  3E06               	addlw	6
 15557  0776  0084               	movwf	4
 15558  0777  3001               	movlw	1	; select bank2/3
 15559  0778  0085               	movwf	5
 15560  0779  3F40               	moviw [0]fsr1
 15561  077A  3F80               	movwi [0]fsr0
 15562  077B  3F41               	moviw [1]fsr1
 15563  077C  3F81               	movwi [1]fsr0
 15564                           
 15565                           ;Buzzer_B1.c: 64: } else if (Buz->BufferStatus2) {
 15566  077D  0008               	return
 15567  077E                     l6796:	
 15568  077E  0878               	movf	_Buz,w
 15569  077F  0086               	movwf	6
 15570  0780  3001               	movlw	1	; select bank2/3
 15571  0781  0087               	movwf	7
 15572  0782  1E01               	btfss	1,4
 15573  0783  2FA6               	goto	l6802
 15574                           
 15575                           ;Buzzer_B1.c: 65: Buz->BufferStatus2 = 0;
 15576  0784  0878               	movf	_Buz,w
 15577  0785  0086               	movwf	6
 15578  0786  3001               	movlw	1	; select bank2/3
 15579  0787  0087               	movwf	7
 15580  0788  1201               	bcf	1,4
 15581                           
 15582                           ;Buzzer_B1.c: 66: Buz->Count = Buz->CountBuffer2;
 15583  0789  0878               	movf	_Buz,w
 15584  078A  3E05               	addlw	5
 15585  078B  0086               	movwf	6
 15586  078C  3001               	movlw	1	; select bank2/3
 15587  078D  0087               	movwf	7
 15588  078E  0801               	movf	1,w
 15589  078F  00A0               	movwf	??_Buzzer_Main
 15590  0790  0878               	movf	_Buz,w
 15591  0791  3E03               	addlw	3
 15592  0792  0086               	movwf	6
 15593  0793  3001               	movlw	1	; select bank2/3
 15594  0794  0087               	movwf	7
 15595  0795  0820               	movf	??_Buzzer_Main,w
 15596  0796  0081               	movwf	1
 15597                           
 15598                           ;Buzzer_B1.c: 67: Buz->TimeValue = Buz->TimeValueBuffer2;
 15599  0797  0878               	movf	_Buz,w
 15600  0798  3E0A               	addlw	10
 15601  0799  0086               	movwf	6
 15602  079A  3001               	movlw	1	; select bank2/3
 15603  079B  0087               	movwf	7
 15604  079C  0878               	movf	_Buz,w
 15605  079D  3E06               	addlw	6
 15606  079E  0084               	movwf	4
 15607  079F  3001               	movlw	1	; select bank2/3
 15608  07A0  0085               	movwf	5
 15609  07A1  3F40               	moviw [0]fsr1
 15610  07A2  3F80               	movwi [0]fsr0
 15611  07A3  3F41               	moviw [1]fsr1
 15612  07A4  3F81               	movwi [1]fsr0
 15613                           
 15614                           ;Buzzer_B1.c: 68: } else {
 15615  07A5  0008               	return
 15616  07A6                     l6802:	
 15617                           
 15618                           ;Buzzer_B1.c: 69: Buz->GO = 0;
 15619  07A6  0878               	movf	_Buz,w
 15620  07A7  0086               	movwf	6
 15621  07A8  3001               	movlw	1	; select bank2/3
 15622  07A9  0087               	movwf	7
 15623  07AA  1081               	bcf	1,1
 15624                           
 15625                           ;Buzzer_B1.c: 70: }
 15626                           ;Buzzer_B1.c: 71: } else {
 15627  07AB  0008               	return
 15628  07AC                     l6804:	
 15629                           
 15630                           ;Buzzer_B1.c: 72: Buz->Switch = 1;
 15631  07AC  0878               	movf	_Buz,w
 15632  07AD  0086               	movwf	6
 15633  07AE  3001               	movlw	1	; select bank2/3
 15634  07AF  0087               	movwf	7
 15635  07B0  1681               	bsf	1,5
 15636                           
 15637                           ;Buzzer_B1.c: 74: RB3 = 1;
 15638  07B1  158D               	bsf	13,3	;volatile
 15639                           
 15640                           ;Buzzer_B1.c: 75: }
 15641                           ;Buzzer_B1.c: 76: } else {
 15642  07B2  0008               	return
 15643  07B3                     l6808:	
 15644                           
 15645                           ;Buzzer_B1.c: 77: Buz->Switch = 0;
 15646  07B3  0878               	movf	_Buz,w
 15647  07B4  0086               	movwf	6
 15648  07B5  3001               	movlw	1	; select bank2/3
 15649  07B6  0087               	movwf	7
 15650  07B7  1281               	bcf	1,5
 15651                           
 15652                           ;Buzzer_B1.c: 79: RB3 = 0;
 15653  07B8  118D               	bcf	13,3	;volatile
 15654                           
 15655                           ;Buzzer_B1.c: 81: Buz->Count--;
 15656  07B9  0878               	movf	_Buz,w
 15657  07BA  3E03               	addlw	3
 15658  07BB  0086               	movwf	6
 15659  07BC  3001               	movlw	1	; select bank2/3
 15660  07BD  0087               	movwf	7
 15661  07BE  3001               	movlw	1
 15662  07BF  0281               	subwf	1,f
 15663  07C0  0008               	return
 15664  07C1                     __end_of_Buzzer_Main:	
 15665                           
 15666                           	psect	text106
 15667  1EB2                     __ptext106:	
 15668 ;; *************** function _Buzzer_Initialization *****************
 15669 ;; Defined at:
 15670 ;;		line 11 in file "../src/Buzzer_B1.c"
 15671 ;; Parameters:    Size  Location     Type
 15672 ;;		None
 15673 ;; Auto vars:     Size  Location     Type
 15674 ;;		None
 15675 ;; Return value:  Size  Location     Type
 15676 ;;		None               void
 15677 ;; Registers used:
 15678 ;;		wreg, fsr1l, fsr1h
 15679 ;; Tracked objects:
 15680 ;;		On entry : 0/0
 15681 ;;		On exit  : 0/0
 15682 ;;		Unchanged: 0/0
 15683 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15684 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15685 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15686 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15687 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15688 ;;Total ram usage:        1 bytes
 15689 ;; Hardware stack levels used:    1
 15690 ;; Hardware stack levels required when called:    5
 15691 ;; This function calls:
 15692 ;;		Nothing
 15693 ;; This function is called by:
 15694 ;;		_main
 15695 ;; This function uses a non-reentrant model
 15696 ;;
 15697                           
 15698                           
 15699                           ;psect for function _Buzzer_Initialization
 15700  1EB2                     _Buzzer_Initialization:	
 15701                           
 15702                           ;Buzzer_B1.c: 12: Buz = &Buz1;
 15703                           
 15704                           ;incstack = 0
 15705                           ; Regs used in _Buzzer_Initialization: [wregfsr1]
 15706  1EB2  303C               	movlw	_Buz1& (0+255)
 15707  1EB3  0020               	movlb	0	; select bank0
 15708  1EB4  00A0               	movwf	??_Buzzer_Initialization
 15709  1EB5  0820               	movf	??_Buzzer_Initialization,w
 15710  1EB6  00F8               	movwf	_Buz
 15711                           
 15712                           ;Buzzer_B1.c: 13: Buz->Enable = 1;
 15713  1EB7  0878               	movf	_Buz,w
 15714  1EB8  0086               	movwf	6
 15715  1EB9  3001               	movlw	1	; select bank2/3
 15716  1EBA  0087               	movwf	7
 15717  1EBB  1401               	bsf	1,0
 15718  1EBC  0008               	return
 15719  1EBD                     __end_of_Buzzer_Initialization:	
 15720                           
 15721                           	psect	intentry
 15722  0004                     __pintentry:	
 15723 ;; *************** function _ISR *****************
 15724 ;; Defined at:
 15725 ;;		line 109 in file "../src/MCU_B1.c"
 15726 ;; Parameters:    Size  Location     Type
 15727 ;;		None
 15728 ;; Auto vars:     Size  Location     Type
 15729 ;;		None
 15730 ;; Return value:  Size  Location     Type
 15731 ;;		None               void
 15732 ;; Registers used:
 15733 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15734 ;; Tracked objects:
 15735 ;;		On entry : 0/0
 15736 ;;		On exit  : 0/0
 15737 ;;		Unchanged: 0/0
 15738 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15739 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15740 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15741 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15742 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15743 ;;Total ram usage:        1 bytes
 15744 ;; Hardware stack levels used:    1
 15745 ;; Hardware stack levels required when called:    4
 15746 ;; This function calls:
 15747 ;;		_INT_ISR
 15748 ;;		_IOC_ISR
 15749 ;;		_TMR0_ISR
 15750 ;; This function is called by:
 15751 ;;		Interrupt level 1
 15752 ;; This function uses a non-reentrant model
 15753 ;;
 15754                           
 15755  0004                     _ISR:	
 15756                           
 15757                           ;incstack = 0
 15758                           ; Regs used in _ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15759  0004  147E               	bsf	126,0	;set compiler interrupt flag
 15760  0005  3180               	pagesel	$
 15761  0006  0020               	movlb	0	; select bank0
 15762  0007  087F               	movf	127,w
 15763  0008  00F7               	movwf	??_ISR
 15764                           
 15765                           ;MCU_B1.c: 111: IOC_ISR();
 15766  0009  319F  27EF  3180   	fcall	_IOC_ISR
 15767                           
 15768                           ;MCU_B1.c: 113: TMR0_ISR();
 15769  000C  3194  246B  3180   	fcall	_TMR0_ISR
 15770                           
 15771                           ;MCU_B1.c: 115: ;;
 15772                           ;MCU_B1.c: 119: INT_ISR();
 15773  000F  319F  27CD         	fcall	_INT_ISR
 15774  0011  0877               	movf	??_ISR,w
 15775  0012  0020               	movlb	0	; select bank0
 15776  0013  00FF               	movwf	127
 15777  0014  107E               	bcf	126,0	;clear compiler interrupt flag
 15778  0015  0009               	retfie
 15779  0016                     __end_of_ISR:	
 15780                           
 15781                           	psect	text108
 15782  146B                     __ptext108:	
 15783 ;; *************** function _TMR0_ISR *****************
 15784 ;; Defined at:
 15785 ;;		line 137 in file "../src/MCU_B1.c"
 15786 ;; Parameters:    Size  Location     Type
 15787 ;;		None
 15788 ;; Auto vars:     Size  Location     Type
 15789 ;;		None
 15790 ;; Return value:  Size  Location     Type
 15791 ;;		None               void
 15792 ;; Registers used:
 15793 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15794 ;; Tracked objects:
 15795 ;;		On entry : 0/0
 15796 ;;		On exit  : 0/0
 15797 ;;		Unchanged: 0/0
 15798 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15799 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15800 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15801 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15802 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15803 ;;Total ram usage:        0 bytes
 15804 ;; Hardware stack levels used:    1
 15805 ;; Hardware stack levels required when called:    2
 15806 ;; This function calls:
 15807 ;;		_Buz_Counter
 15808 ;;		_setDimmerLights_IntrControl
 15809 ;; This function is called by:
 15810 ;;		_ISR
 15811 ;; This function uses a non-reentrant model
 15812 ;;
 15813                           
 15814                           
 15815                           ;psect for function _TMR0_ISR
 15816  146B                     _TMR0_ISR:	
 15817                           
 15818                           ;MCU_B1.c: 138: if (TMR0IE == 1 && TMR0IF == 1) {
 15819                           
 15820                           ;incstack = 0
 15821                           ; Regs used in _TMR0_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15822  146B  1E8B               	btfss	11,5	;volatile
 15823  146C  0008               	return
 15824  146D  1D0B               	btfss	11,2	;volatile
 15825  146E  0008               	return
 15826                           
 15827                           ;MCU_B1.c: 139: TMR0 = (256-90);
 15828  146F  30A6               	movlw	166
 15829  1470  0020               	movlb	0	; select bank0
 15830  1471  0095               	movwf	21	;volatile
 15831                           
 15832                           ;MCU_B1.c: 140: TMR0IF = 0;
 15833  1472  110B               	bcf	11,2	;volatile
 15834                           
 15835                           ;MCU_B1.c: 145: setDimmerLights_IntrControl(1);
 15836  1473  3001               	movlw	1
 15837  1474  3180  204C  3194   	fcall	_setDimmerLights_IntrControl
 15838                           
 15839                           ;MCU_B1.c: 150: setDimmerLights_IntrControl(2);
 15840  1477  3002               	movlw	2
 15841  1478  3180  204C  3194   	fcall	_setDimmerLights_IntrControl
 15842                           
 15843                           ;MCU_B1.c: 161: Timer0->Count++;
 15844  147B  0021               	movlb	1	; select bank1
 15845  147C  0A68               	incf	_Timer0^(0+128),w
 15846  147D  0086               	movwf	6
 15847  147E  3001               	movlw	1	; select bank2/3
 15848  147F  0087               	movwf	7
 15849  1480  3001               	movlw	1
 15850  1481  0781               	addwf	1,f
 15851  1482  3141               	addfsr 1,1
 15852  1483  1803               	skipnc
 15853  1484  0A81               	incf	1,f
 15854                           
 15855                           ;MCU_B1.c: 162: if (Timer0->Count == 200) {
 15856  1485  0A68               	incf	_Timer0^(0+128),w
 15857  1486  0086               	movwf	6
 15858  1487  3001               	movlw	1	; select bank2/3
 15859  1488  0087               	movwf	7
 15860  1489  3F40               	moviw [0]fsr1
 15861  148A  3AC8               	xorlw	200
 15862  148B  1D03               	skipz
 15863  148C  2C8F               	goto	u601_25
 15864  148D  3F41               	moviw [1]fsr1
 15865  148E  3A00               	xorlw	0
 15866  148F                     u601_25:	
 15867  148F  1D03               	skipz
 15868  1490  0008               	return
 15869                           
 15870                           ;MCU_B1.c: 163: Timer0->Count = 0;
 15871  1491  0A68               	incf	_Timer0^(0+128),w
 15872  1492  0086               	movwf	6
 15873  1493  3001               	movlw	1	; select bank2/3
 15874  1494  0087               	movwf	7
 15875  1495  3000               	movlw	0
 15876  1496  3FC0               	movwi [0]fsr1
 15877  1497  3FC1               	movwi [1]fsr1
 15878                           
 15879                           ;MCU_B1.c: 164: myMain->T0_Timerout = 1;
 15880  1498  086A               	movf	_myMain^(0+128),w
 15881  1499  0086               	movwf	6
 15882  149A  3001               	movlw	1	; select bank2/3
 15883  149B  0087               	movwf	7
 15884  149C  1481               	bsf	1,1
 15885                           
 15886                           ;MCU_B1.c: 167: Buz_Counter();
 15887  149D  319F  277D         	fcall	_Buz_Counter
 15888  149F  0008               	return
 15889  14A0                     __end_of_TMR0_ISR:	
 15890                           
 15891                           	psect	text109
 15892  004C                     __ptext109:	
 15893 ;; *************** function _setDimmerLights_IntrControl *****************
 15894 ;; Defined at:
 15895 ;;		line 27 in file "../src/Dimmer_B1.c"
 15896 ;; Parameters:    Size  Location     Type
 15897 ;;  lights          1    wreg     unsigned char 
 15898 ;; Auto vars:     Size  Location     Type
 15899 ;;  lights          1    6[COMMON] unsigned char 
 15900 ;; Return value:  Size  Location     Type
 15901 ;;		None               void
 15902 ;; Registers used:
 15903 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15904 ;; Tracked objects:
 15905 ;;		On entry : 0/0
 15906 ;;		On exit  : 0/0
 15907 ;;		Unchanged: 0/0
 15908 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15909 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15910 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15911 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15912 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15913 ;;Total ram usage:        5 bytes
 15914 ;; Hardware stack levels used:    1
 15915 ;; Hardware stack levels required when called:    1
 15916 ;; This function calls:
 15917 ;;		_DimmerIntrPointSelect
 15918 ;; This function is called by:
 15919 ;;		_TMR0_ISR
 15920 ;; This function uses a non-reentrant model
 15921 ;;
 15922                           
 15923                           
 15924                           ;psect for function _setDimmerLights_IntrControl
 15925  004C                     _setDimmerLights_IntrControl:	
 15926                           
 15927                           ;incstack = 0
 15928                           ; Regs used in _setDimmerLights_IntrControl: [wreg-fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 15929                           ;setDimmerLights_IntrControl@lights stored from wreg
 15930  004C  00F6               	movwf	setDimmerLights_IntrControl@lights
 15931                           
 15932                           ;Dimmer_B1.c: 28: DimmerIntrPointSelect(lights);
 15933  004D  0876               	movf	setDimmerLights_IntrControl@lights,w
 15934  004E  3190  2087  3180   	fcall	_DimmerIntrPointSelect
 15935                           
 15936                           ;Dimmer_B1.c: 29: if (DimmerLightsIntr->GO == 1) {
 15937  0051  087A               	movf	_DimmerLightsIntr,w
 15938  0052  0086               	movwf	6
 15939  0053  3001               	movlw	1	; select bank2/3
 15940  0054  0087               	movwf	7
 15941  0055  1C01               	btfss	1,0
 15942  0056  28B1               	goto	i1l6324
 15943                           
 15944                           ;Dimmer_B1.c: 30: DimmerLightsIntr->Count++;
 15945  0057  3001               	movlw	1
 15946  0058  00F2               	movwf	??_setDimmerLights_IntrControl
 15947  0059  087A               	movf	_DimmerLightsIntr,w
 15948  005A  3E03               	addlw	3
 15949  005B  0086               	movwf	6
 15950  005C  3001               	movlw	1	; select bank2/3
 15951  005D  0087               	movwf	7
 15952  005E  0872               	movf	??_setDimmerLights_IntrControl,w
 15953  005F  0781               	addwf	1,f
 15954                           
 15955                           ;Dimmer_B1.c: 31: if (DimmerLightsIntr->Count >= (DimmerLightsIntr->DimmingValue - Dimme
      +                          r->Correction)) {
 15956  0060  0021               	movlb	1	; select bank1
 15957  0061  0839               	movf	_Dimmer^(0+128),w
 15958  0062  3E02               	addlw	2
 15959  0063  0086               	movwf	6
 15960  0064  0187               	clrf	7
 15961  0065  0801               	movf	1,w
 15962  0066  00F2               	movwf	??_setDimmerLights_IntrControl
 15963  0067  01F3               	clrf	??_setDimmerLights_IntrControl+1
 15964  0068  09F2               	comf	??_setDimmerLights_IntrControl,f
 15965  0069  09F3               	comf	??_setDimmerLights_IntrControl+1,f
 15966  006A  0AF2               	incf	??_setDimmerLights_IntrControl,f
 15967  006B  1903               	skipnz
 15968  006C  0AF3               	incf	??_setDimmerLights_IntrControl+1,f
 15969  006D  087A               	movf	_DimmerLightsIntr,w
 15970  006E  3E04               	addlw	4
 15971  006F  0086               	movwf	6
 15972  0070  3001               	movlw	1	; select bank2/3
 15973  0071  0087               	movwf	7
 15974  0072  0801               	movf	1,w
 15975  0073  0772               	addwf	??_setDimmerLights_IntrControl,w
 15976  0074  00F4               	movwf	??_setDimmerLights_IntrControl+2
 15977  0075  0873               	movf	??_setDimmerLights_IntrControl+1,w
 15978  0076  1803               	skipnc
 15979  0077  0A73               	incf	??_setDimmerLights_IntrControl+1,w
 15980  0078  00F5               	movwf	??_setDimmerLights_IntrControl+3
 15981  0079  087A               	movf	_DimmerLightsIntr,w
 15982  007A  3E03               	addlw	3
 15983  007B  0086               	movwf	6
 15984  007C  3001               	movlw	1	; select bank2/3
 15985  007D  0087               	movwf	7
 15986  007E  0875               	movf	??_setDimmerLights_IntrControl+3,w
 15987  007F  3A80               	xorlw	128
 15988  0080  3C80               	sublw	128
 15989  0081  1D03               	skipz
 15990  0082  2885               	goto	u515_25
 15991  0083  0874               	movf	??_setDimmerLights_IntrControl+2,w
 15992  0084  0201               	subwf	1,w
 15993  0085                     u515_25:	
 15994  0085  1C03               	skipc
 15995  0086  0008               	return
 15996                           
 15997                           ;Dimmer_B1.c: 32: DimmerLightsIntr->Count = 0;
 15998  0087  087A               	movf	_DimmerLightsIntr,w
 15999  0088  3E03               	addlw	3
 16000  0089  0086               	movwf	6
 16001  008A  3001               	movlw	1	; select bank2/3
 16002  008B  0087               	movwf	7
 16003  008C  0181               	clrf	1
 16004                           
 16005                           ;Dimmer_B1.c: 33: DimmerLightsIntr->GO = 0;
 16006  008D  087A               	movf	_DimmerLightsIntr,w
 16007  008E  0086               	movwf	6
 16008  008F  3001               	movlw	1	; select bank2/3
 16009  0090  0087               	movwf	7
 16010  0091  1001               	bcf	1,0
 16011                           
 16012                           ;Dimmer_B1.c: 34: DimmerLightsIntr->Flag = 1;
 16013  0092  087A               	movf	_DimmerLightsIntr,w
 16014  0093  3E08               	addlw	8
 16015  0094  0086               	movwf	6
 16016  0095  3001               	movlw	1	; select bank2/3
 16017  0096  0087               	movwf	7
 16018  0097  1401               	bsf	1,0
 16019                           
 16020                           ;Dimmer_B1.c: 35: DimmerLightsIntr->TriacTemp = 1;
 16021  0098  087A               	movf	_DimmerLightsIntr,w
 16022  0099  3E09               	addlw	9
 16023  009A  0086               	movwf	6
 16024  009B  3001               	movlw	1	; select bank2/3
 16025  009C  0087               	movwf	7
 16026  009D  1681               	bsf	1,5
 16027                           
 16028                           ;Dimmer_B1.c: 36: if (DimmerLightsIntr->StatusFlag == 1) {
 16029  009E  087A               	movf	_DimmerLightsIntr,w
 16030  009F  0086               	movwf	6
 16031  00A0  3001               	movlw	1	; select bank2/3
 16032  00A1  0087               	movwf	7
 16033  00A2  1F01               	btfss	1,6
 16034  00A3  0008               	return
 16035                           
 16036                           ;Dimmer_B1.c: 39: if (lights == 1) {
 16037  00A4  0876               	movf	setDimmerLights_IntrControl@lights,w
 16038  00A5  3A01               	xorlw	1
 16039  00A6  1D03               	skipz
 16040  00A7  28AA               	goto	i1l6320
 16041                           
 16042                           ;Dimmer_B1.c: 40: RA7 = 1;
 16043  00A8  0020               	movlb	0	; select bank0
 16044  00A9  178C               	bsf	12,7	;volatile
 16045  00AA                     i1l6320:	
 16046                           ;Dimmer_B1.c: 41: ;;
 16047                           
 16048                           
 16049                           ;Dimmer_B1.c: 42: }
 16050                           ;Dimmer_B1.c: 45: if (lights == 2) {
 16051  00AA  0876               	movf	setDimmerLights_IntrControl@lights,w
 16052  00AB  3A02               	xorlw	2
 16053  00AC  1D03               	skipz
 16054  00AD  0008               	return
 16055                           
 16056                           ;Dimmer_B1.c: 46: RB4 = 1;
 16057  00AE  0020               	movlb	0	; select bank0
 16058  00AF  160D               	bsf	13,4	;volatile
 16059                           
 16060                           ;Dimmer_B1.c: 47: }
 16061                           ;Dimmer_B1.c: 54: }
 16062                           ;Dimmer_B1.c: 55: }
 16063                           ;Dimmer_B1.c: 56: } else {
 16064  00B0  0008               	return
 16065  00B1                     i1l6324:	
 16066                           
 16067                           ;Dimmer_B1.c: 57: if (DimmerLightsIntr->Flag) {
 16068  00B1  087A               	movf	_DimmerLightsIntr,w
 16069  00B2  3E08               	addlw	8
 16070  00B3  0086               	movwf	6
 16071  00B4  3001               	movlw	1	; select bank2/3
 16072  00B5  0087               	movwf	7
 16073  00B6  1C01               	btfss	1,0
 16074  00B7  29BA               	goto	i1l6386
 16075                           
 16076                           ;Dimmer_B1.c: 58: DimmerLightsIntr->Flag = 0;
 16077  00B8  087A               	movf	_DimmerLightsIntr,w
 16078  00B9  3E08               	addlw	8
 16079  00BA  0086               	movwf	6
 16080  00BB  3001               	movlw	1	; select bank2/3
 16081  00BC  0087               	movwf	7
 16082  00BD  1001               	bcf	1,0
 16083                           
 16084                           ;Dimmer_B1.c: 59: if (DimmerLightsIntr->Signal) {
 16085  00BE  087A               	movf	_DimmerLightsIntr,w
 16086  00BF  0086               	movwf	6
 16087  00C0  3001               	movlw	1	; select bank2/3
 16088  00C1  0087               	movwf	7
 16089  00C2  1C81               	btfss	1,1
 16090  00C3  29BA               	goto	i1l6386
 16091                           
 16092                           ;Dimmer_B1.c: 60: DimmerLightsIntr->DimmingTime++;
 16093  00C4  3001               	movlw	1
 16094  00C5  00F2               	movwf	??_setDimmerLights_IntrControl
 16095  00C6  0A7A               	incf	_DimmerLightsIntr,w
 16096  00C7  0086               	movwf	6
 16097  00C8  3001               	movlw	1	; select bank2/3
 16098  00C9  0087               	movwf	7
 16099  00CA  0872               	movf	??_setDimmerLights_IntrControl,w
 16100  00CB  0781               	addwf	1,f
 16101                           
 16102                           ;Dimmer_B1.c: 61: if (DimmerLightsIntr->DimmingTime >= DimmerLightsIntr->DimmingTimeValu
      +                          e) {
 16103  00CC  0A7A               	incf	_DimmerLightsIntr,w
 16104  00CD  0086               	movwf	6
 16105  00CE  3001               	movlw	1	; select bank2/3
 16106  00CF  0087               	movwf	7
 16107  00D0  087A               	movf	_DimmerLightsIntr,w
 16108  00D1  3E02               	addlw	2
 16109  00D2  0084               	movwf	4
 16110  00D3  3001               	movlw	1	; select bank2/3
 16111  00D4  0085               	movwf	5
 16112  00D5  0800               	movf	0,w
 16113  00D6  0201               	subwf	1,w
 16114  00D7  1C03               	skipc
 16115  00D8  29BA               	goto	i1l6386
 16116                           
 16117                           ;Dimmer_B1.c: 62: DimmerLightsIntr->DimmingTime = 0;
 16118  00D9  0A7A               	incf	_DimmerLightsIntr,w
 16119  00DA  0086               	movwf	6
 16120  00DB  3001               	movlw	1	; select bank2/3
 16121  00DC  0087               	movwf	7
 16122  00DD  0181               	clrf	1
 16123                           
 16124                           ;Dimmer_B1.c: 63: if (DimmerLightsIntr->AdjFlag) {
 16125  00DE  087A               	movf	_DimmerLightsIntr,w
 16126  00DF  0086               	movwf	6
 16127  00E0  3001               	movlw	1	; select bank2/3
 16128  00E1  0087               	movwf	7
 16129  00E2  1D81               	btfss	1,3
 16130  00E3  291A               	goto	i1l6350
 16131                           
 16132                           ;Dimmer_B1.c: 64: if (DimmerLightsIntr->AdjStatus == 0) {
 16133  00E4  087A               	movf	_DimmerLightsIntr,w
 16134  00E5  0086               	movwf	6
 16135  00E6  3001               	movlw	1	; select bank2/3
 16136  00E7  0087               	movwf	7
 16137  00E8  1A01               	btfsc	1,4
 16138  00E9  2901               	goto	i1l6344
 16139                           
 16140                           ;Dimmer_B1.c: 65: if (DimmerLightsIntr->DimmingValue > ((char)((100-55)*1.5))) {
 16141  00EA  087A               	movf	_DimmerLightsIntr,w
 16142  00EB  3E04               	addlw	4
 16143  00EC  0086               	movwf	6
 16144  00ED  3001               	movlw	1	; select bank2/3
 16145  00EE  0087               	movwf	7
 16146  00EF  3044               	movlw	68
 16147  00F0  0201               	subwf	1,w
 16148  00F1  1C03               	skipc
 16149  00F2  28FB               	goto	i1l6342
 16150                           
 16151                           ;Dimmer_B1.c: 66: DimmerLightsIntr->DimmingValue--;
 16152  00F3  087A               	movf	_DimmerLightsIntr,w
 16153  00F4  3E04               	addlw	4
 16154  00F5  0086               	movwf	6
 16155  00F6  3001               	movlw	1	; select bank2/3
 16156  00F7  0087               	movwf	7
 16157  00F8  3001               	movlw	1
 16158  00F9  0281               	subwf	1,f
 16159                           
 16160                           ;Dimmer_B1.c: 67: } else {
 16161  00FA  29BA               	goto	i1l6386
 16162  00FB                     i1l6342:	
 16163                           
 16164                           ;Dimmer_B1.c: 68: DimmerLightsIntr->AdjStatus = 1;
 16165  00FB  087A               	movf	_DimmerLightsIntr,w
 16166  00FC  0086               	movwf	6
 16167  00FD  3001               	movlw	1	; select bank2/3
 16168  00FE  0087               	movwf	7
 16169  00FF  1601               	bsf	1,4
 16170                           
 16171                           ;Dimmer_B1.c: 69: }
 16172                           ;Dimmer_B1.c: 70: } else {
 16173  0100  29BA               	goto	i1l6386
 16174  0101                     i1l6344:	
 16175                           
 16176                           ;Dimmer_B1.c: 71: if (DimmerLightsIntr->DimmingValue < ((char)((100-20)*1.5))) {
 16177  0101  087A               	movf	_DimmerLightsIntr,w
 16178  0102  3E04               	addlw	4
 16179  0103  0086               	movwf	6
 16180  0104  3001               	movlw	1	; select bank2/3
 16181  0105  0087               	movwf	7
 16182  0106  3078               	movlw	120
 16183  0107  0201               	subwf	1,w
 16184  0108  1803               	skipnc
 16185  0109  2914               	goto	i1l6348
 16186                           
 16187                           ;Dimmer_B1.c: 72: DimmerLightsIntr->DimmingValue++;
 16188  010A  3001               	movlw	1
 16189  010B  00F2               	movwf	??_setDimmerLights_IntrControl
 16190  010C  087A               	movf	_DimmerLightsIntr,w
 16191  010D  3E04               	addlw	4
 16192  010E  0086               	movwf	6
 16193  010F  3001               	movlw	1	; select bank2/3
 16194  0110  0087               	movwf	7
 16195  0111  0872               	movf	??_setDimmerLights_IntrControl,w
 16196  0112  0781               	addwf	1,f
 16197                           
 16198                           ;Dimmer_B1.c: 73: } else {
 16199  0113  29BA               	goto	i1l6386
 16200  0114                     i1l6348:	
 16201                           
 16202                           ;Dimmer_B1.c: 74: DimmerLightsIntr->AdjStatus = 0;
 16203  0114  087A               	movf	_DimmerLightsIntr,w
 16204  0115  0086               	movwf	6
 16205  0116  3001               	movlw	1	; select bank2/3
 16206  0117  0087               	movwf	7
 16207  0118  1201               	bcf	1,4
 16208                           
 16209                           ;Dimmer_B1.c: 75: }
 16210                           ;Dimmer_B1.c: 76: }
 16211                           ;Dimmer_B1.c: 77: } else if (DimmerLightsIntr->AdjRF) {
 16212  0119  29BA               	goto	i1l6386
 16213  011A                     i1l6350:	
 16214  011A  087A               	movf	_DimmerLightsIntr,w
 16215  011B  0086               	movwf	6
 16216  011C  3001               	movlw	1	; select bank2/3
 16217  011D  0087               	movwf	7
 16218  011E  1D01               	btfss	1,2
 16219  011F  2961               	goto	i1l6364
 16220                           
 16221                           ;Dimmer_B1.c: 78: if (DimmerLightsIntr->DimmingValue > DimmerLightsIntr->MaxmumValue) {
 16222  0120  087A               	movf	_DimmerLightsIntr,w
 16223  0121  3E05               	addlw	5
 16224  0122  0086               	movwf	6
 16225  0123  3001               	movlw	1	; select bank2/3
 16226  0124  0087               	movwf	7
 16227  0125  087A               	movf	_DimmerLightsIntr,w
 16228  0126  3E04               	addlw	4
 16229  0127  0084               	movwf	4
 16230  0128  3001               	movlw	1	; select bank2/3
 16231  0129  0085               	movwf	5
 16232  012A  0800               	movf	0,w
 16233  012B  0201               	subwf	1,w
 16234  012C  1803               	skipnc
 16235  012D  2936               	goto	i1l6356
 16236                           
 16237                           ;Dimmer_B1.c: 79: DimmerLightsIntr->DimmingValue--;
 16238  012E  087A               	movf	_DimmerLightsIntr,w
 16239  012F  3E04               	addlw	4
 16240  0130  0086               	movwf	6
 16241  0131  3001               	movlw	1	; select bank2/3
 16242  0132  0087               	movwf	7
 16243  0133  3001               	movlw	1
 16244  0134  0281               	subwf	1,f
 16245                           
 16246                           ;Dimmer_B1.c: 80: } else if (DimmerLightsIntr->DimmingValue < DimmerLightsIntr->MaxmumVa
      +                          lue) {
 16247  0135  294D               	goto	i1l6360
 16248  0136                     i1l6356:	
 16249  0136  087A               	movf	_DimmerLightsIntr,w
 16250  0137  3E04               	addlw	4
 16251  0138  0086               	movwf	6
 16252  0139  3001               	movlw	1	; select bank2/3
 16253  013A  0087               	movwf	7
 16254  013B  087A               	movf	_DimmerLightsIntr,w
 16255  013C  3E05               	addlw	5
 16256  013D  0084               	movwf	4
 16257  013E  3001               	movlw	1	; select bank2/3
 16258  013F  0085               	movwf	5
 16259  0140  0800               	movf	0,w
 16260  0141  0201               	subwf	1,w
 16261  0142  1803               	skipnc
 16262  0143  294D               	goto	i1l6360
 16263                           
 16264                           ;Dimmer_B1.c: 81: DimmerLightsIntr->DimmingValue++;
 16265  0144  3001               	movlw	1
 16266  0145  00F2               	movwf	??_setDimmerLights_IntrControl
 16267  0146  087A               	movf	_DimmerLightsIntr,w
 16268  0147  3E04               	addlw	4
 16269  0148  0086               	movwf	6
 16270  0149  3001               	movlw	1	; select bank2/3
 16271  014A  0087               	movwf	7
 16272  014B  0872               	movf	??_setDimmerLights_IntrControl,w
 16273  014C  0781               	addwf	1,f
 16274  014D                     i1l6360:	
 16275                           
 16276                           ;Dimmer_B1.c: 82: }
 16277                           ;Dimmer_B1.c: 83: if (DimmerLightsIntr->DimmingValue == DimmerLightsIntr->MaxmumValue) {
 16278  014D  087A               	movf	_DimmerLightsIntr,w
 16279  014E  3E05               	addlw	5
 16280  014F  0086               	movwf	6
 16281  0150  3001               	movlw	1	; select bank2/3
 16282  0151  0087               	movwf	7
 16283  0152  087A               	movf	_DimmerLightsIntr,w
 16284  0153  3E04               	addlw	4
 16285  0154  0084               	movwf	4
 16286  0155  3001               	movlw	1	; select bank2/3
 16287  0156  0085               	movwf	5
 16288  0157  0800               	movf	0,w
 16289  0158  0601               	xorwf	1,w
 16290  0159  1D03               	skipz
 16291  015A  29BA               	goto	i1l6386
 16292                           
 16293                           ;Dimmer_B1.c: 84: DimmerLightsIntr->AdjRF = 0;
 16294  015B  087A               	movf	_DimmerLightsIntr,w
 16295  015C  0086               	movwf	6
 16296  015D  3001               	movlw	1	; select bank2/3
 16297  015E  0087               	movwf	7
 16298  015F  1101               	bcf	1,2
 16299  0160  297C               	goto	i1l6370
 16300  0161                     i1l6364:	
 16301                           ;Dimmer_B1.c: 86: }
 16302                           ;Dimmer_B1.c: 87: } else {
 16303                           
 16304                           ;Dimmer_B1.c: 85: DimmerLightsIntr->Signal = 0;
 16305                           
 16306                           
 16307                           ;Dimmer_B1.c: 88: if (DimmerLightsIntr->Status) {
 16308  0161  087A               	movf	_DimmerLightsIntr,w
 16309  0162  0086               	movwf	6
 16310  0163  3001               	movlw	1	; select bank2/3
 16311  0164  0087               	movwf	7
 16312  0165  1E81               	btfss	1,5
 16313  0166  2982               	goto	i1l6372
 16314                           
 16315                           ;Dimmer_B1.c: 89: DimmerLightsIntr->DimmingValue--;
 16316  0167  087A               	movf	_DimmerLightsIntr,w
 16317  0168  3E04               	addlw	4
 16318  0169  0086               	movwf	6
 16319  016A  3001               	movlw	1	; select bank2/3
 16320  016B  0087               	movwf	7
 16321  016C  3001               	movlw	1
 16322  016D  0281               	subwf	1,f
 16323                           
 16324                           ;Dimmer_B1.c: 90: if (DimmerLightsIntr->DimmingValue <= DimmerLightsIntr->MaxmumValue) {
 16325  016E  087A               	movf	_DimmerLightsIntr,w
 16326  016F  3E05               	addlw	5
 16327  0170  0086               	movwf	6
 16328  0171  3001               	movlw	1	; select bank2/3
 16329  0172  0087               	movwf	7
 16330  0173  087A               	movf	_DimmerLightsIntr,w
 16331  0174  3E04               	addlw	4
 16332  0175  0084               	movwf	4
 16333  0176  3001               	movlw	1	; select bank2/3
 16334  0177  0085               	movwf	5
 16335  0178  0800               	movf	0,w
 16336  0179  0201               	subwf	1,w
 16337  017A  1C03               	skipc
 16338  017B  29BA               	goto	i1l6386
 16339  017C                     i1l6370:	
 16340                           
 16341                           ;Dimmer_B1.c: 92: DimmerLightsIntr->Signal = 0;
 16342  017C  087A               	movf	_DimmerLightsIntr,w
 16343  017D  0086               	movwf	6
 16344  017E  3001               	movlw	1	; select bank2/3
 16345  017F  0087               	movwf	7
 16346  0180  1081               	bcf	1,1
 16347                           
 16348                           ;Dimmer_B1.c: 93: }
 16349                           ;Dimmer_B1.c: 94: } else {
 16350  0181  29BA               	goto	i1l6386
 16351  0182                     i1l6372:	
 16352                           
 16353                           ;Dimmer_B1.c: 95: DimmerLightsIntr->DimmingValue++;
 16354  0182  3001               	movlw	1
 16355  0183  00F2               	movwf	??_setDimmerLights_IntrControl
 16356  0184  087A               	movf	_DimmerLightsIntr,w
 16357  0185  3E04               	addlw	4
 16358  0186  0086               	movwf	6
 16359  0187  3001               	movlw	1	; select bank2/3
 16360  0188  0087               	movwf	7
 16361  0189  0872               	movf	??_setDimmerLights_IntrControl,w
 16362  018A  0781               	addwf	1,f
 16363                           
 16364                           ;Dimmer_B1.c: 96: if (DimmerLightsIntr->DimmingValue >= DimmerLightsIntr->MinimumValue) 
      +                          {
 16365  018B  087A               	movf	_DimmerLightsIntr,w
 16366  018C  3E04               	addlw	4
 16367  018D  0086               	movwf	6
 16368  018E  3001               	movlw	1	; select bank2/3
 16369  018F  0087               	movwf	7
 16370  0190  087A               	movf	_DimmerLightsIntr,w
 16371  0191  3E06               	addlw	6
 16372  0192  0084               	movwf	4
 16373  0193  3001               	movlw	1	; select bank2/3
 16374  0194  0085               	movwf	5
 16375  0195  0800               	movf	0,w
 16376  0196  0201               	subwf	1,w
 16377  0197  1C03               	skipc
 16378  0198  29BA               	goto	i1l6386
 16379                           
 16380                           ;Dimmer_B1.c: 97: DimmerLightsIntr->Signal = 0;
 16381  0199  087A               	movf	_DimmerLightsIntr,w
 16382  019A  0086               	movwf	6
 16383  019B  3001               	movlw	1	; select bank2/3
 16384  019C  0087               	movwf	7
 16385  019D  1081               	bcf	1,1
 16386                           
 16387                           ;Dimmer_B1.c: 98: DimmerLightsIntr->StatusFlag = 0;
 16388  019E  087A               	movf	_DimmerLightsIntr,w
 16389  019F  0086               	movwf	6
 16390  01A0  3001               	movlw	1	; select bank2/3
 16391  01A1  0087               	movwf	7
 16392  01A2  1301               	bcf	1,6
 16393                           
 16394                           ;Dimmer_B1.c: 99: DimmerLightsIntr->Clear = 1;
 16395  01A3  087A               	movf	_DimmerLightsIntr,w
 16396  01A4  3E09               	addlw	9
 16397  01A5  0086               	movwf	6
 16398  01A6  3001               	movlw	1	; select bank2/3
 16399  01A7  0087               	movwf	7
 16400  01A8  1501               	bsf	1,2
 16401                           
 16402                           ;Dimmer_B1.c: 100: Dimmer->Detect = 1;
 16403  01A9  0021               	movlb	1	; select bank1
 16404  01AA  0839               	movf	_Dimmer^(0+128),w
 16405  01AB  0086               	movwf	6
 16406  01AC  0187               	clrf	7
 16407  01AD  1401               	bsf	1,0
 16408                           
 16409                           ;Dimmer_B1.c: 102: if (lights == 1) {
 16410  01AE  0876               	movf	setDimmerLights_IntrControl@lights,w
 16411  01AF  3A01               	xorlw	1
 16412  01B0  1D03               	skipz
 16413  01B1  29B4               	goto	i1l6382
 16414                           
 16415                           ;Dimmer_B1.c: 103: RA3 = 0;
 16416  01B2  0020               	movlb	0	; select bank0
 16417  01B3  118C               	bcf	12,3	;volatile
 16418  01B4                     i1l6382:	
 16419                           
 16420                           ;Dimmer_B1.c: 105: }
 16421                           ;Dimmer_B1.c: 108: if (lights == 2) {
 16422  01B4  0876               	movf	setDimmerLights_IntrControl@lights,w
 16423  01B5  3A02               	xorlw	2
 16424  01B6  1D03               	skipz
 16425  01B7  29BA               	goto	i1l6386
 16426                           
 16427                           ;Dimmer_B1.c: 109: RC7 = 0;
 16428  01B8  0020               	movlb	0	; select bank0
 16429  01B9  138E               	bcf	14,7	;volatile
 16430  01BA                     i1l6386:	
 16431                           ;Dimmer_B1.c: 110: }
 16432                           ;Dimmer_B1.c: 118: ;;
 16433                           
 16434                           
 16435                           ;Dimmer_B1.c: 119: }
 16436                           ;Dimmer_B1.c: 120: }
 16437                           ;Dimmer_B1.c: 121: }
 16438                           ;Dimmer_B1.c: 122: }
 16439                           ;Dimmer_B1.c: 123: }
 16440                           ;Dimmer_B1.c: 124: }
 16441                           ;Dimmer_B1.c: 125: if (DimmerLights->TriacTemp == 1) {
 16442  01BA  0879               	movf	_DimmerLights,w
 16443  01BB  3E09               	addlw	9
 16444  01BC  0086               	movwf	6
 16445  01BD  3001               	movlw	1	; select bank2/3
 16446  01BE  0087               	movwf	7
 16447  01BF  1E81               	btfss	1,5
 16448  01C0  0008               	return
 16449                           
 16450                           ;Dimmer_B1.c: 132: if (lights == 1) {
 16451  01C1  0876               	movf	setDimmerLights_IntrControl@lights,w
 16452  01C2  3A01               	xorlw	1
 16453  01C3  1D03               	skipz
 16454  01C4  29C7               	goto	i1l6392
 16455                           
 16456                           ;Dimmer_B1.c: 133: RA7 = 0;
 16457  01C5  0020               	movlb	0	; select bank0
 16458  01C6  138C               	bcf	12,7	;volatile
 16459  01C7                     i1l6392:	
 16460                           ;Dimmer_B1.c: 134: ;;
 16461                           
 16462                           
 16463                           ;Dimmer_B1.c: 135: }
 16464                           ;Dimmer_B1.c: 138: if (lights == 2) {
 16465  01C7  0876               	movf	setDimmerLights_IntrControl@lights,w
 16466  01C8  3A02               	xorlw	2
 16467  01C9  1D03               	skipz
 16468  01CA  0008               	return
 16469                           
 16470                           ;Dimmer_B1.c: 139: RB4 = 0;
 16471  01CB  0020               	movlb	0	; select bank0
 16472  01CC  120D               	bcf	13,4	;volatile
 16473  01CD  0008               	return
 16474  01CE                     __end_of_setDimmerLights_IntrControl:	
 16475                           
 16476                           	psect	text110
 16477  1F7D                     __ptext110:	
 16478 ;; *************** function _Buz_Counter *****************
 16479 ;; Defined at:
 16480 ;;		line 23 in file "../src/Buzzer_B1.c"
 16481 ;; Parameters:    Size  Location     Type
 16482 ;;		None
 16483 ;; Auto vars:     Size  Location     Type
 16484 ;;		None
 16485 ;; Return value:  Size  Location     Type
 16486 ;;		None               void
 16487 ;; Registers used:
 16488 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 16489 ;; Tracked objects:
 16490 ;;		On entry : 0/0
 16491 ;;		On exit  : 0/0
 16492 ;;		Unchanged: 0/0
 16493 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16494 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16495 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16496 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16497 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16498 ;;Total ram usage:        0 bytes
 16499 ;; Hardware stack levels used:    1
 16500 ;; This function calls:
 16501 ;;		Nothing
 16502 ;; This function is called by:
 16503 ;;		_TMR0_ISR
 16504 ;; This function uses a non-reentrant model
 16505 ;;
 16506                           
 16507                           
 16508                           ;psect for function _Buz_Counter
 16509  1F7D                     _Buz_Counter:	
 16510                           
 16511                           ;Buzzer_B1.c: 24: if (Buz->GO == 1) {
 16512                           
 16513                           ;incstack = 0
 16514                           ; Regs used in _Buz_Counter: [wreg+fsr1l+fsr1h+status,2+status,0]
 16515  1F7D  0878               	movf	_Buz,w
 16516  1F7E  0086               	movwf	6
 16517  1F7F  3001               	movlw	1	; select bank2/3
 16518  1F80  0087               	movwf	7
 16519  1F81  1C81               	btfss	1,1
 16520  1F82  0008               	return
 16521                           
 16522                           ;Buzzer_B1.c: 25: Buz->Counter++;
 16523  1F83  0A78               	incf	_Buz,w
 16524  1F84  0086               	movwf	6
 16525  1F85  3001               	movlw	1	; select bank2/3
 16526  1F86  0087               	movwf	7
 16527  1F87  3001               	movlw	1
 16528  1F88  0781               	addwf	1,f
 16529  1F89  3141               	addfsr 1,1
 16530  1F8A  1803               	skipnc
 16531  1F8B  0A81               	incf	1,f
 16532  1F8C  0008               	return
 16533  1F8D                     __end_of_Buz_Counter:	
 16534                           
 16535                           	psect	text111
 16536  1FEF                     __ptext111:	
 16537 ;; *************** function _IOC_ISR *****************
 16538 ;; Defined at:
 16539 ;;		line 296 in file "../src/MCU_B1.c"
 16540 ;; Parameters:    Size  Location     Type
 16541 ;;		None
 16542 ;; Auto vars:     Size  Location     Type
 16543 ;;		None
 16544 ;; Return value:  Size  Location     Type
 16545 ;;		None               void
 16546 ;; Registers used:
 16547 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16548 ;; Tracked objects:
 16549 ;;		On entry : 0/0
 16550 ;;		On exit  : 0/0
 16551 ;;		Unchanged: 0/0
 16552 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16553 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16554 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16555 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16556 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16557 ;;Total ram usage:        0 bytes
 16558 ;; Hardware stack levels used:    1
 16559 ;; Hardware stack levels required when called:    3
 16560 ;; This function calls:
 16561 ;;		_setDimmerReClock
 16562 ;; This function is called by:
 16563 ;;		_ISR
 16564 ;; This function uses a non-reentrant model
 16565 ;;
 16566                           
 16567                           
 16568                           ;psect for function _IOC_ISR
 16569  1FEF                     _IOC_ISR:	
 16570                           
 16571                           ;MCU_B1.c: 297: if (IOCIE == 1 && IOCBF2 == 1) {
 16572                           
 16573                           ;incstack = 0
 16574                           ; Regs used in _IOC_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16575  1FEF  1D8B               	btfss	11,3	;volatile
 16576  1FF0  0008               	return
 16577  1FF1  0027               	movlb	7	; select bank7
 16578  1FF2  1D16               	btfss	22,2	;volatile
 16579  1FF3  0008               	return
 16580                           
 16581                           ;MCU_B1.c: 298: IOCBF2 = 0;
 16582  1FF4  1116               	bcf	22,2	;volatile
 16583                           
 16584                           ;MCU_B1.c: 299: IOCIF = 0;
 16585  1FF5  100B               	bcf	11,0	;volatile
 16586                           
 16587                           ;MCU_B1.c: 300: if (myMain->PowerON == 1) {
 16588  1FF6  0021               	movlb	1	; select bank1
 16589  1FF7  086A               	movf	_myMain^(0+128),w
 16590  1FF8  0086               	movwf	6
 16591  1FF9  3001               	movlw	1	; select bank2/3
 16592  1FFA  0087               	movwf	7
 16593  1FFB  1C01               	btfss	1,0
 16594  1FFC  0008               	return
 16595                           
 16596                           ;MCU_B1.c: 302: setDimmerReClock();
 16597  1FFD  319E  26A7         	fcall	_setDimmerReClock
 16598  1FFF  0008               	return
 16599  2000                     __end_of_IOC_ISR:	
 16600                           
 16601                           	psect	text112
 16602  1EA7                     __ptext112:	
 16603 ;; *************** function _setDimmerReClock *****************
 16604 ;; Defined at:
 16605 ;;		line 175 in file "../src/MCU_B1.c"
 16606 ;; Parameters:    Size  Location     Type
 16607 ;;		None
 16608 ;; Auto vars:     Size  Location     Type
 16609 ;;		None
 16610 ;; Return value:  Size  Location     Type
 16611 ;;		None               void
 16612 ;; Registers used:
 16613 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16614 ;; Tracked objects:
 16615 ;;		On entry : 0/0
 16616 ;;		On exit  : 0/0
 16617 ;;		Unchanged: 0/0
 16618 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16619 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16620 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16621 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16622 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16623 ;;Total ram usage:        0 bytes
 16624 ;; Hardware stack levels used:    1
 16625 ;; Hardware stack levels required when called:    2
 16626 ;; This function calls:
 16627 ;;		_setDimmerLights_IntrGO
 16628 ;; This function is called by:
 16629 ;;		_IOC_ISR
 16630 ;; This function uses a non-reentrant model
 16631 ;;
 16632                           
 16633                           
 16634                           ;psect for function _setDimmerReClock
 16635  1EA7                     _setDimmerReClock:	
 16636                           
 16637                           ;MCU_B1.c: 176: TMR0 = 255;
 16638                           
 16639                           ;incstack = 0
 16640                           ; Regs used in _setDimmerReClock: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16641  1EA7  30FF               	movlw	255
 16642  1EA8  0020               	movlb	0	; select bank0
 16643  1EA9  0095               	movwf	21	;volatile
 16644                           
 16645                           ;MCU_B1.c: 181: setDimmerLights_IntrGO(1);
 16646  1EAA  3001               	movlw	1
 16647  1EAB  319F  27DE  319E   	fcall	_setDimmerLights_IntrGO
 16648                           
 16649                           ;MCU_B1.c: 185: setDimmerLights_IntrGO(2);
 16650  1EAE  3002               	movlw	2
 16651  1EAF  319F  27DE         	fcall	_setDimmerLights_IntrGO
 16652  1EB1  0008               	return
 16653  1EB2                     __end_of_setDimmerReClock:	
 16654                           
 16655                           	psect	text113
 16656  1FDE                     __ptext113:	
 16657 ;; *************** function _setDimmerLights_IntrGO *****************
 16658 ;; Defined at:
 16659 ;;		line 251 in file "../src/Dimmer_B1.c"
 16660 ;; Parameters:    Size  Location     Type
 16661 ;;  lights          1    wreg     unsigned char 
 16662 ;; Auto vars:     Size  Location     Type
 16663 ;;  lights          1    2[COMMON] unsigned char 
 16664 ;; Return value:  Size  Location     Type
 16665 ;;		None               void
 16666 ;; Registers used:
 16667 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16668 ;; Tracked objects:
 16669 ;;		On entry : 0/0
 16670 ;;		On exit  : 0/0
 16671 ;;		Unchanged: 0/0
 16672 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16673 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16674 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16675 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16676 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16677 ;;Total ram usage:        1 bytes
 16678 ;; Hardware stack levels used:    1
 16679 ;; Hardware stack levels required when called:    1
 16680 ;; This function calls:
 16681 ;;		_DimmerIntrPointSelect
 16682 ;; This function is called by:
 16683 ;;		_setDimmerReClock
 16684 ;; This function uses a non-reentrant model
 16685 ;;
 16686                           
 16687                           
 16688                           ;psect for function _setDimmerLights_IntrGO
 16689  1FDE                     _setDimmerLights_IntrGO:	
 16690                           
 16691                           ;incstack = 0
 16692                           ; Regs used in _setDimmerLights_IntrGO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
 16693                           ;setDimmerLights_IntrGO@lights stored from wreg
 16694  1FDE  00F2               	movwf	setDimmerLights_IntrGO@lights
 16695                           
 16696                           ;Dimmer_B1.c: 253: DimmerIntrPointSelect(lights);
 16697  1FDF  0872               	movf	setDimmerLights_IntrGO@lights,w
 16698  1FE0  3190  2087  319F   	fcall	_DimmerIntrPointSelect
 16699                           
 16700                           ;Dimmer_B1.c: 255: if (DimmerLightsIntr->GO == 0) {
 16701  1FE3  087A               	movf	_DimmerLightsIntr,w
 16702  1FE4  0086               	movwf	6
 16703  1FE5  3001               	movlw	1	; select bank2/3
 16704  1FE6  0087               	movwf	7
 16705  1FE7  1801               	btfsc	1,0
 16706  1FE8  0008               	return
 16707                           
 16708                           ;Dimmer_B1.c: 256: DimmerLightsIntr->GO = 1;
 16709  1FE9  087A               	movf	_DimmerLightsIntr,w
 16710  1FEA  0086               	movwf	6
 16711  1FEB  3001               	movlw	1	; select bank2/3
 16712  1FEC  0087               	movwf	7
 16713  1FED  1401               	bsf	1,0
 16714  1FEE  0008               	return
 16715  1FEF                     __end_of_setDimmerLights_IntrGO:	
 16716                           
 16717                           	psect	text114
 16718  1087                     __ptext114:	
 16719 ;; *************** function _DimmerIntrPointSelect *****************
 16720 ;; Defined at:
 16721 ;;		line 7 in file "../src/Dimmer_B1.c"
 16722 ;; Parameters:    Size  Location     Type
 16723 ;;  lights          1    wreg     unsigned char 
 16724 ;; Auto vars:     Size  Location     Type
 16725 ;;  lights          1    1[COMMON] unsigned char 
 16726 ;; Return value:  Size  Location     Type
 16727 ;;		None               void
 16728 ;; Registers used:
 16729 ;;		wreg
 16730 ;; Tracked objects:
 16731 ;;		On entry : 0/0
 16732 ;;		On exit  : 0/0
 16733 ;;		Unchanged: 0/0
 16734 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16735 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16736 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16737 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16738 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16739 ;;Total ram usage:        2 bytes
 16740 ;; Hardware stack levels used:    1
 16741 ;; This function calls:
 16742 ;;		Nothing
 16743 ;; This function is called by:
 16744 ;;		_setDimmerLights_IntrControl
 16745 ;;		_setDimmerLights_IntrGO
 16746 ;; This function uses a non-reentrant model
 16747 ;;
 16748                           
 16749                           
 16750                           ;psect for function _DimmerIntrPointSelect
 16751  1087                     _DimmerIntrPointSelect:	
 16752                           
 16753                           ;incstack = 0
 16754                           ; Regs used in _DimmerIntrPointSelect: [wreg]
 16755                           ;DimmerIntrPointSelect@lights stored from wreg
 16756  1087  00F1               	movwf	DimmerIntrPointSelect@lights
 16757                           
 16758                           ;Dimmer_B1.c: 9: if (lights == 1) {
 16759  1088  0871               	movf	DimmerIntrPointSelect@lights,w
 16760  1089  3A01               	xorlw	1
 16761  108A  1D03               	skipz
 16762  108B  2890               	goto	i1l769
 16763                           
 16764                           ;Dimmer_B1.c: 10: DimmerLightsIntr = &DimmerLights1;
 16765  108C  3020               	movlw	_DimmerLights1& (0+255)
 16766  108D  00F0               	movwf	??_DimmerIntrPointSelect
 16767  108E  0870               	movf	??_DimmerIntrPointSelect,w
 16768  108F  00FA               	movwf	_DimmerLightsIntr
 16769  1090                     i1l769:	
 16770                           
 16771                           ;Dimmer_B1.c: 11: }
 16772                           ;Dimmer_B1.c: 14: if (lights == 2) {
 16773  1090  0871               	movf	DimmerIntrPointSelect@lights,w
 16774  1091  3A02               	xorlw	2
 16775  1092  1D03               	skipz
 16776  1093  0008               	return
 16777                           
 16778                           ;Dimmer_B1.c: 15: DimmerLightsIntr = &DimmerLights2;
 16779  1094  302E               	movlw	_DimmerLights2& (0+255)
 16780  1095  00F0               	movwf	??_DimmerIntrPointSelect
 16781  1096  0870               	movf	??_DimmerIntrPointSelect,w
 16782  1097  00FA               	movwf	_DimmerLightsIntr
 16783  1098  0008               	return
 16784  1099                     __end_of_DimmerIntrPointSelect:	
 16785                           
 16786                           	psect	text115
 16787  1FCD                     __ptext115:	
 16788 ;; *************** function _INT_ISR *****************
 16789 ;; Defined at:
 16790 ;;		line 248 in file "../src/MCU_B1.c"
 16791 ;; Parameters:    Size  Location     Type
 16792 ;;		None
 16793 ;; Auto vars:     Size  Location     Type
 16794 ;;		None
 16795 ;; Return value:  Size  Location     Type
 16796 ;;		None               void
 16797 ;; Registers used:
 16798 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16799 ;; Tracked objects:
 16800 ;;		On entry : 0/0
 16801 ;;		On exit  : 0/0
 16802 ;;		Unchanged: 0/0
 16803 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16804 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16805 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16806 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16807 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16808 ;;Total ram usage:        0 bytes
 16809 ;; Hardware stack levels used:    1
 16810 ;; Hardware stack levels required when called:    2
 16811 ;; This function calls:
 16812 ;;		_setRF_ReceiveGO
 16813 ;;		_setRF_RxStatus
 16814 ;; This function is called by:
 16815 ;;		_ISR
 16816 ;; This function uses a non-reentrant model
 16817 ;;
 16818                           
 16819                           
 16820                           ;psect for function _INT_ISR
 16821  1FCD                     _INT_ISR:	
 16822                           
 16823                           ;MCU_B1.c: 249: if (INTE && INTF) {
 16824                           
 16825                           ;incstack = 0
 16826                           ; Regs used in _INT_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16827  1FCD  1E0B               	btfss	11,4	;volatile
 16828  1FCE  0008               	return
 16829  1FCF  1C8B               	btfss	11,1	;volatile
 16830  1FD0  0008               	return
 16831                           
 16832                           ;MCU_B1.c: 250: INTF = 0;
 16833  1FD1  108B               	bcf	11,1	;volatile
 16834                           
 16835                           ;MCU_B1.c: 251: INTE = 0;
 16836  1FD2  120B               	bcf	11,4	;volatile
 16837                           
 16838                           ;MCU_B1.c: 252: setRF_ReceiveGO(1, 1);
 16839  1FD3  01F2               	clrf	setRF_ReceiveGO@command
 16840  1FD4  0AF2               	incf	setRF_ReceiveGO@command,f
 16841  1FD5  3001               	movlw	1
 16842  1FD6  319F  270F  319F   	fcall	_setRF_ReceiveGO
 16843                           
 16844                           ;MCU_B1.c: 253: setRF_RxStatus(1,0);
 16845  1FD9  01F2               	clrf	setRF_RxStatus@command
 16846  1FDA  3001               	movlw	1
 16847  1FDB  319F  271C         	fcall	_setRF_RxStatus
 16848  1FDD  0008               	return
 16849  1FDE                     __end_of_INT_ISR:	
 16850                           
 16851                           	psect	text116
 16852  1F1C                     __ptext116:	
 16853 ;; *************** function _setRF_RxStatus *****************
 16854 ;; Defined at:
 16855 ;;		line 42 in file "../src/RF_Control_B1.c"
 16856 ;; Parameters:    Size  Location     Type
 16857 ;;  rf              1    wreg     unsigned char 
 16858 ;;  command         1    2[COMMON] unsigned char 
 16859 ;; Auto vars:     Size  Location     Type
 16860 ;;  rf              1    3[COMMON] unsigned char 
 16861 ;; Return value:  Size  Location     Type
 16862 ;;		None               void
 16863 ;; Registers used:
 16864 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16865 ;; Tracked objects:
 16866 ;;		On entry : 0/0
 16867 ;;		On exit  : 0/0
 16868 ;;		Unchanged: 0/0
 16869 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16870 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16871 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16872 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16873 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16874 ;;Total ram usage:        2 bytes
 16875 ;; Hardware stack levels used:    1
 16876 ;; Hardware stack levels required when called:    1
 16877 ;; This function calls:
 16878 ;;		i1_RfPointSelect
 16879 ;; This function is called by:
 16880 ;;		_INT_ISR
 16881 ;; This function uses a non-reentrant model
 16882 ;;
 16883                           
 16884                           
 16885                           ;psect for function _setRF_RxStatus
 16886  1F1C                     _setRF_RxStatus:	
 16887                           
 16888                           ;incstack = 0
 16889                           ; Regs used in _setRF_RxStatus: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16890                           ;setRF_RxStatus@rf stored from wreg
 16891  1F1C  00F3               	movwf	setRF_RxStatus@rf
 16892                           
 16893                           ;RF_Control_B1.c: 43: RfPointSelect(rf);
 16894  1F1D  0873               	movf	setRF_RxStatus@rf,w
 16895  1F1E  319E  269C         	fcall	i1_RfPointSelect
 16896                           
 16897                           ;RF_Control_B1.c: 44: RF->RxStatus = command;
 16898  1F20  0021               	movlb	1	; select bank1
 16899  1F21  083D               	movf	_RF^(0+128),w
 16900  1F22  0086               	movwf	6
 16901  1F23  0187               	clrf	7
 16902  1F24  0872               	movf	setRF_RxStatus@command,w
 16903  1F25  1181               	bcf	1,3
 16904  1F26  1D03               	skipz
 16905  1F27  1581               	bsf	1,3
 16906  1F28  0008               	return
 16907  1F29                     __end_of_setRF_RxStatus:	
 16908                           
 16909                           	psect	text117
 16910  1F0F                     __ptext117:	
 16911 ;; *************** function _setRF_ReceiveGO *****************
 16912 ;; Defined at:
 16913 ;;		line 36 in file "../src/RF_Control_B1.c"
 16914 ;; Parameters:    Size  Location     Type
 16915 ;;  rf              1    wreg     unsigned char 
 16916 ;;  command         1    2[COMMON] unsigned char 
 16917 ;; Auto vars:     Size  Location     Type
 16918 ;;  rf              1    3[COMMON] unsigned char 
 16919 ;; Return value:  Size  Location     Type
 16920 ;;		None               void
 16921 ;; Registers used:
 16922 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16923 ;; Tracked objects:
 16924 ;;		On entry : 0/0
 16925 ;;		On exit  : 0/0
 16926 ;;		Unchanged: 0/0
 16927 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16928 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16929 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16930 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16931 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16932 ;;Total ram usage:        2 bytes
 16933 ;; Hardware stack levels used:    1
 16934 ;; Hardware stack levels required when called:    1
 16935 ;; This function calls:
 16936 ;;		i1_RfPointSelect
 16937 ;; This function is called by:
 16938 ;;		_INT_ISR
 16939 ;; This function uses a non-reentrant model
 16940 ;;
 16941                           
 16942                           
 16943                           ;psect for function _setRF_ReceiveGO
 16944  1F0F                     _setRF_ReceiveGO:	
 16945                           
 16946                           ;incstack = 0
 16947                           ; Regs used in _setRF_ReceiveGO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16948                           ;setRF_ReceiveGO@rf stored from wreg
 16949  1F0F  00F3               	movwf	setRF_ReceiveGO@rf
 16950                           
 16951                           ;RF_Control_B1.c: 37: RfPointSelect(rf);
 16952  1F10  0873               	movf	setRF_ReceiveGO@rf,w
 16953  1F11  319E  269C         	fcall	i1_RfPointSelect
 16954                           
 16955                           ;RF_Control_B1.c: 38: RF->ReceiveGO = command;
 16956  1F13  0021               	movlb	1	; select bank1
 16957  1F14  083D               	movf	_RF^(0+128),w
 16958  1F15  0086               	movwf	6
 16959  1F16  0187               	clrf	7
 16960  1F17  0872               	movf	setRF_ReceiveGO@command,w
 16961  1F18  1081               	bcf	1,1
 16962  1F19  1D03               	skipz
 16963  1F1A  1481               	bsf	1,1
 16964  1F1B  0008               	return
 16965  1F1C                     __end_of_setRF_ReceiveGO:	
 16966                           
 16967                           	psect	text118
 16968  1E9C                     __ptext118:	
 16969 ;; *************** function i1_RfPointSelect *****************
 16970 ;; Defined at:
 16971 ;;		line 7 in file "../src/RF_Control_B1.c"
 16972 ;; Parameters:    Size  Location     Type
 16973 ;;  rf              1    wreg     unsigned char 
 16974 ;; Auto vars:     Size  Location     Type
 16975 ;;  rf              1    1[COMMON] unsigned char 
 16976 ;; Return value:  Size  Location     Type
 16977 ;;		None               void
 16978 ;; Registers used:
 16979 ;;		wreg
 16980 ;; Tracked objects:
 16981 ;;		On entry : 0/0
 16982 ;;		On exit  : 0/0
 16983 ;;		Unchanged: 0/0
 16984 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16985 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16986 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16987 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16988 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16989 ;;Total ram usage:        2 bytes
 16990 ;; Hardware stack levels used:    1
 16991 ;; This function calls:
 16992 ;;		Nothing
 16993 ;; This function is called by:
 16994 ;;		_setRF_ReceiveGO
 16995 ;;		_setRF_RxStatus
 16996 ;; This function uses a non-reentrant model
 16997 ;;
 16998                           
 16999                           
 17000                           ;psect for function i1_RfPointSelect
 17001  1E9C                     i1_RfPointSelect:	
 17002                           
 17003                           ;incstack = 0
 17004                           ; Regs used in i1_RfPointSelect: [wreg]
 17005                           ;i1RfPointSelect@rf stored from wreg
 17006  1E9C  00F1               	movwf	i1RfPointSelect@rf
 17007                           
 17008                           ;RF_Control_B1.c: 9: if (rf == 1) {
 17009  1E9D  0871               	movf	i1RfPointSelect@rf,w
 17010  1E9E  3A01               	xorlw	1
 17011  1E9F  1D03               	skipz
 17012  1EA0  0008               	return
 17013                           
 17014                           ;RF_Control_B1.c: 10: RF = &RF1;
 17015  1EA1  30D0               	movlw	_RF1& (0+255)
 17016  1EA2  00F0               	movwf	??i1_RfPointSelect
 17017  1EA3  0870               	movf	??i1_RfPointSelect,w
 17018  1EA4  0021               	movlb	1	; select bank1
 17019  1EA5  00BD               	movwf	_RF^(0+128)
 17020  1EA6  0008               	return
 17021  1EA7                     __end_ofi1_RfPointSelect:	
 17022  007E                     btemp	set	126	;btemp
 17023  007E                     pic14e$flags	set	126
 17024  007E                     wtemp	set	126
 17025  007E                     wtemp0	set	126
 17026  0080                     wtemp1	set	128
 17027  0082                     wtemp2	set	130
 17028  0084                     wtemp3	set	132
 17029  0086                     wtemp4	set	134
 17030  0088                     wtemp5	set	136
 17031  007F                     wtemp6	set	127
 17032  007E                     ttemp	set	126
 17033  007E                     ttemp0	set	126
 17034  0081                     ttemp1	set	129
 17035  0084                     ttemp2	set	132
 17036  0087                     ttemp3	set	135
 17037  007F                     ttemp4	set	127
 17038  007E                     ltemp	set	126
 17039  007E                     ltemp0	set	126
 17040  0082                     ltemp1	set	130
 17041  0086                     ltemp2	set	134
 17042  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    102
    Data        32
    BSS         195
    Persistent  5
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      8      14
    BANK0            80     80      80
    BANK1            80      0      76
    BANK2            80      0      66
    BANK3            80      0      48
    BANK4            80      0      37
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    Sw	PTR struct Switch size(1) Largest target is 9
		 -> NULL(NULL[0]), Sw2(BANK2[9]), Sw1(BANK2[9]), 

    RFSW	PTR struct RFSW size(1) Largest target is 1
		 -> NULL(NULL[0]), RFSW2(BANK1[1]), RFSW1(BANK1[1]), 

    RF	PTR struct RF size(1) Largest target is 5
		 -> NULL(NULL[0]), RF1(BANK1[5]), 

    WDT	PTR struct WDT size(1) Largest target is 2
		 -> NULL(NULL[0]), _WDT(BANK1[2]), 

    Timer0	PTR struct Timer0 size(1) Largest target is 8
		 -> NULL(NULL[0]), VarTimer0(BANK2[8]), 

    Memory	PTR struct FlashMemory size(1) Largest target is 37
		 -> NULL(NULL[0]), VarMemory(BANK4[37]), 

    LED	PTR struct LED size(1) Largest target is 4
		 -> NULL(NULL[0]), VarErrLED(BANK1[4]), VarLED2(BANK1[4]), VarLED1(BANK1[4]), 

    myMain	PTR struct myMain size(1) Largest target is 16
		 -> NULL(NULL[0]), _myMain(BANK3[16]), 

    DimmerLights22	PTR struct DimmerLights size(1) Largest target is 14
		 -> NULL(NULL[0]), DimmerLights2(BANK2[14]), 

    DimmerLights11	PTR struct DimmerLights size(1) Largest target is 14
		 -> NULL(NULL[0]), DimmerLights1(BANK2[14]), 

    DimmerLights	PTR struct DimmerLights size(1) Largest target is 14
		 -> NULL(NULL[0]), DimmerLights2(BANK2[14]), DimmerLights1(BANK2[14]), 

    Dimmer	PTR struct Dimmer size(1) Largest target is 3
		 -> NULL(NULL[0]), Dimmer1(BANK1[3]), 

    DimmerLightsIntr	PTR struct DimmerLights size(1) Largest target is 14
		 -> NULL(NULL[0]), DimmerLights2(BANK2[14]), DimmerLights1(BANK2[14]), 

    product	PTR struct Product size(1) Largest target is 32
		 -> NULL(NULL[0]), _product(BANK3[32]), 

    DelayOff	PTR struct DelayOff size(1) Largest target is 5
		 -> NULL(NULL[0]), DlySw2(BANK1[5]), DlySw1(BANK1[5]), 

    Buz	PTR struct Buzzer size(1) Largest target is 12
		 -> NULL(NULL[0]), Buz1(BANK2[12]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _TMR0_ISR->_setDimmerLights_IntrControl
    _setDimmerLights_IntrControl->_DimmerIntrPointSelect
    _setDimmerReClock->_setDimmerLights_IntrGO
    _setDimmerLights_IntrGO->_DimmerIntrPointSelect
    _INT_ISR->_setRF_ReceiveGO
    _INT_ISR->_setRF_RxStatus
    _setRF_RxStatus->i1_RfPointSelect
    _setRF_ReceiveGO->i1_RfPointSelect

Critical Paths under _main in BANK0

    _my_Main->_setBuz
    _setSw_Enable->_SwPointSelect
    _setRF_Enable->_RfPointSelect
    _Switch_Main->_setSw_Main
    _setSw_Main->_Sw_DimmerOffFunc
    _setRF_Learn->_RfPointSelect
    _Sw_DimmerOnFunc->_setRF_DimmerLights
    _Sw_DimmerOffFunc->_setRF_DimmerLights
    _Sw_DimmerAdjFunc->_setDimmerLights_AdjGo
    _Sw_DimmerAdjFunc->_setDimmerLights_TriggerAdj
    _Sw_DimmerAdjFunc->_setRFSW_Status
    _setDimmerLights_TriggerAdj->_DimmerLightsPointSelect
    _setDimmerLights_AdjGo->_DimmerLightsPointSelect
    _Switch_Initialization->_setSw_Initialization
    _setSw_Initialization->_setLED
    _RF_Main->_setRF_Main
    _setRF_Main->_getRxData
    _getRxData->_setControl_Lights_Table
    _setLog_Code->_setBuz
    _setControl_Lights_Table->_setRFSW_AdjControl
    _setRFSW_Control->_setRF_DimmerLights
    _setDelayOff_GO->_DelayTimejudge
    _setRFSW_AdjControl->_setRF_DimmerValue
    _setRF_DimmerValue->_setDimmerLights_AdjRF
    _setDimmerLights_AdjRF->_getPercentValue
    _getPercentValue->___fttol
    ___ftmul->___awtoft
    ___ftadd->___ftmul
    _RF_RxDisable->_CC2500_WriteCommand
    _CC2500_TxData->_CC2500_WriteCommand
    _CC2500_RxData->_CC2500_ReadStatus
    _CC2500_RxData->_CC2500_WriteCommand
    _CC2500_ReadStatus->_CC2500_ReadByte
    _CC2500_ReadStatus->_CC2500_WriteByte
    _RF_Initialization->_setRF_Initialization
    _Mcu_Initialization->_TMR0_Set
    _Mcu_Initialization->_WDT_Set
    _LED_Main->_setLED_Main
    _setLED_Main->_LedPointSelect
    _LED_Initialization->_setLED_Initialization
    _setLED_Initialization->_setLED
    _Flash_Memory_Main->_Flash_Memory_Modify
    _Flash_Memory_Modify->_Flash_Memory_Read
    _Flash_Memory_Initialization->_setPercentValue
    _DimmerLights_Main->_setDimmerLights_Main
    _setDimmerLights_Main->_setDimmerLights_Adj
    _setDimmerLights_Adj->_setRF_DimmerLights
    _setDimmerLights->_setLED
    _setLED->_LedPointSelect
    _DimmerLights_Close->_getDimmerLights_StatusFlag
    _DimmerLights_Close->_setMemory_GO
    _DimmerLights_Initialization->_setDimmerLights_Initialization
    _setDimmerLights_Initialization->_DimmerLightsPointSelect
    _DelayOff_Main->_DlyOff_Main
    _DlyOff_Main->_setRF_DimmerLights
    _setTxData->_RfPointSelect
    _setSw_Status->_SwPointSelect
    _setRF_DimmerLights->_setPercentValue
    _setPercentValue->___fttol
    ___fttol->___ftadd
    ___ftdiv->___awtoft
    ___awtoft->___ftpack
    _setRFSW_Status->_RfSWPointSelect
    _setDimmerLights_Trigger->_DimmerLightsPointSelect
    _setDimmerLights_Switch->_DimmerLightsPointSelect
    _setBuz->___awdiv
    _DelayOff_Initialization->_DlyOff_Initialization
    _DlyOff_Initialization->_DelayOffPointSelect
    _CC2500_PowerOnInitial->_CC2500_InitSetREG
    _CC2500_SIDLEMode->_CC2500_WriteCommand
    _CC2500_PowerRST->_DelayTime_1us
    _CC2500_InitSetREG->_CC2500_WriteREG
    _CC2500_InitPATable->_CC2500_WriteREG
    _CC2500_WriteREG->_CC2500_WriteByte
    _CC2500_FrequencyCabr->_DelayTime_1us
    _CC2500_ClearTXFIFO->_CC2500_WriteCommand
    _CC2500_ClearRXFIFO->_CC2500_WriteCommand
    _CC2500_WriteCommand->_CC2500_WriteByte

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     0      4   76107
                                             76 BANK0      4     0      4
              _Buzzer_Initialization
                        _Buzzer_Main
              _CC2500_PowerOnInitial
            _DelayOff_Initialization
                      _DelayOff_Main
        _DimmerLights_Initialization
                  _DimmerLights_Main
        _Flash_Memory_Initialization
                  _Flash_Memory_Main
                 _LED_Initialization
                           _LED_Main
                 _Mcu_Initialization
                  _RF_Initialization
                            _RF_Main
              _Switch_Initialization
                        _Switch_Main
                           _WDT_Main
              _myMain_Initialization
                            _my_Main
 ---------------------------------------------------------------------------------
 (1) _my_Main                                              0     0      0    1463
                             _setBuz
                       _setRF_Enable
                       _setSw_Enable
 ---------------------------------------------------------------------------------
 (2) _setSw_Enable                                         1     1      0      88
                                              2 BANK0      1     1      0
                      _SwPointSelect
 ---------------------------------------------------------------------------------
 (2) _setRF_Enable                                         2     1      1     152
                                              2 BANK0      2     1      1
                      _RfPointSelect
                          _setINT_GO
 ---------------------------------------------------------------------------------
 (1) _myMain_Initialization                                1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _WDT_Main                                             1     1      0       0
                                              0 BANK0      1     1      0
                       _WDT_Clearing
 ---------------------------------------------------------------------------------
 (2) _WDT_Clearing                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Switch_Main                                          0     0      0   20179
                         _setSw_Main
 ---------------------------------------------------------------------------------
 (2) _setSw_Main                                           5     5      0   20179
                                             69 BANK0      5     5      0
                      _SwPointSelect
                   _Sw_DimmerAdjFunc
                   _Sw_DimmerOffFunc
                    _Sw_DimmerOnFunc
                             _setBuz
                        _setRF_Learn
 ---------------------------------------------------------------------------------
 (3) _setRF_Learn                                          2     1      1     258
                                              2 BANK0      2     1      1
                      _RfPointSelect
 ---------------------------------------------------------------------------------
 (3) _Sw_DimmerOnFunc                                      2     2      0    8915
                                             66 BANK0      2     2      0
                             _setBuz
             _setDimmerLights_Switch
            _setDimmerLights_Trigger
                     _setRFSW_Status
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _Sw_DimmerOffFunc                                     3     3      0    8456
                                             66 BANK0      3     3      0
                     _setDelayOff_GO
              _setDimmerLights_AdjGo
             _setDimmerLights_Switch
            _setDimmerLights_Trigger
         _setDimmerLights_TriggerAdj
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _Sw_DimmerAdjFunc                                     2     2      0    1103
                                              4 BANK0      2     2      0
              _setDimmerLights_AdjGo
         _setDimmerLights_TriggerAdj
                     _setRFSW_Status
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_TriggerAdj                           2     1      1     216
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_AdjGo                                2     1      1     216
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (1) _Switch_Initialization                                0     0      0     652
                         _TouchPower
               _setSw_Initialization
 ---------------------------------------------------------------------------------
 (2) _setSw_Initialization                                 1     1      0     652
                                              4 BANK0      1     1      0
                             _setLED
 ---------------------------------------------------------------------------------
 (2) _TouchPower                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _RF_Main                                              0     0      0   26714
                         _setRF_Main
 ---------------------------------------------------------------------------------
 (2) _setRF_Main                                           3     3      0   26714
                                             73 BANK0      3     3      0
                      _CC2500_RxData
                      _CC2500_TxData
                _CC2500_WriteCommand
                       _RF_RxDisable
                      _RfPointSelect
                          _getRxData
                          _setINT_GO
 ---------------------------------------------------------------------------------
 (3) _getRxData                                            2     2      0   25942
                                             72 BANK0      1     1      0
                      _RfPointSelect
            _setControl_Lights_Table
                        _setLog_Code
 ---------------------------------------------------------------------------------
 (4) _setLog_Code                                          2     2      0    1267
                                             13 BANK0      2     2      0
                      _RfPointSelect
                             _setBuz
 ---------------------------------------------------------------------------------
 (4) _setControl_Lights_Table                              1     1      0   24631
                                             71 BANK0      1     1      0
                      _RfPointSelect
                             _setBuz
                    _setDimmerLights
                 _setRFSW_AdjControl
                    _setRFSW_Control
                     _setRFSW_Status
                       _setSw_Status
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setRFSW_Control                                      2     2      0    9873
                                             66 BANK0      2     2      0
                    _RfSWPointSelect
                             _setBuz
                     _setDelayOff_GO
             _setDimmerLights_Switch
            _setDimmerLights_Trigger
                 _setRF_DimmerLights
                       _setSw_Status
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setDelayOff_GO                                       5     3      2     871
                                              3 BANK0      5     3      2
                _DelayOffPointSelect
                     _DelayTimejudge
 ---------------------------------------------------------------------------------
 (5) _DelayTimejudge                                       3     3      0      51
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (5) _setRFSW_AdjControl                                   3     3      0   11355
                                             68 BANK0      3     3      0
                    _RfSWPointSelect
                  _setRF_DimmerValue
                          _setTxData
 ---------------------------------------------------------------------------------
 (6) _setRF_DimmerValue                                    3     3      0   11179
                                             65 BANK0      3     3      0
              _setDimmerLights_AdjRF
 ---------------------------------------------------------------------------------
 (7) _setDimmerLights_AdjRF                                2     2      0   11113
                                             63 BANK0      2     2      0
            _DimmerLightsPointSelect
                    _getPercentValue
 ---------------------------------------------------------------------------------
 (8) _getPercentValue                                      6     6      0   11047
                                             57 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___fttol
 ---------------------------------------------------------------------------------
 (9) ___ftmul                                             16    10      6    2502
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (9) ___ftadd                                             13     7      6    3118
                                             30 BANK0     13     7      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) _RF_RxDisable                                         1     1      0     134
                                              4 BANK0      1     1      0
                _CC2500_WriteCommand
                      _RfPointSelect
                          _setINT_GO
 ---------------------------------------------------------------------------------
 (3) _setINT_GO                                            1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _CC2500_TxData                                        2     2      0     160
                                              4 BANK0      2     2      0
                   _CC2500_WriteByte
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (3) _CC2500_RxData                                        2     2      0     320
                                              4 BANK0      2     2      0
                    _CC2500_ReadByte
                  _CC2500_ReadStatus
                   _CC2500_WriteByte
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (4) _CC2500_ReadStatus                                    2     2      0     114
                                              2 BANK0      2     2      0
                    _CC2500_ReadByte
                   _CC2500_WriteByte
 ---------------------------------------------------------------------------------
 (5) _CC2500_ReadByte                                      2     2      0      46
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _RF_Initialization                                    0     0      0       0
               _setRF_Initialization
 ---------------------------------------------------------------------------------
 (2) _setRF_Initialization                                 2     2      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Mcu_Initialization                                   1     1      0       0
                                              1 BANK0      1     1      0
                            _ADC_Set
                           _Fosc_Set
                            _INT_Set
                            _IOC_Set
                             _IO_Set
                           _TMR0_Set
                            _WDT_Set
 ---------------------------------------------------------------------------------
 (2) _WDT_Set                                              1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _TMR0_Set                                             1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _IO_Set                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IOC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INT_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Fosc_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _LED_Main                                             0     0      0     154
                        _setLED_Main
 ---------------------------------------------------------------------------------
 (2) _setLED_Main                                          3     3      0     154
                                              2 BANK0      3     3      0
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (1) _LED_Initialization                                   0     0      0     740
              _setLED_Initialization
 ---------------------------------------------------------------------------------
 (2) _setLED_Initialization                                1     1      0     740
                                              4 BANK0      1     1      0
                     _LedPointSelect
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Main                                    0     0      0     227
                _Flash_Memory_Modify
 ---------------------------------------------------------------------------------
 (2) _Flash_Memory_Modify                                  3     3      0     227
                                              4 BANK0      3     3      0
               _Flash_Memory_Erasing
                  _Flash_Memory_Read
                 _Flash_Memory_Write
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Erasing                                 0     0      0       0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Initialization                          2     2      0    5698
                                             61 BANK0      2     2      0
                  _Flash_Memory_Read
                 _Flash_Memory_Write
                    _setPercentValue
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Write                                   2     2      0      90
                                              0 BANK0      2     2      0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (4) _Flash_Memory_Unlock                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Read                                    4     4      0      47
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Main                                    0     0      0    9087
                 _DimmerLights_Close
               _setDimmerLights_Main
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Main                                 2     2      0    8973
                                             69 BANK0      2     2      0
            _DimmerLightsPointSelect
                             _setBuz
                    _setDimmerLights
                _setDimmerLights_Adj
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_Adj                                  3     2      1    6399
                                             66 BANK0      3     2      1
            _DimmerLightsPointSelect
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setDimmerLights                                      3     2      1    1084
                                              4 BANK0      3     2      1
            _DimmerLightsPointSelect
                             _setLED
                       _setMemory_GO
 ---------------------------------------------------------------------------------
 (3) _setLED                                               2     1      1     630
                                              2 BANK0      2     1      1
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (4) _LedPointSelect                                       2     2      0      66
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _DimmerLights_Close                                   0     0      0     114
         _getDimmerLights_StatusFlag
                       _setMemory_GO
 ---------------------------------------------------------------------------------
 (6) _setMemory_GO                                         3     3      0      66
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _getDimmerLights_StatusFlag                           3     3      0      48
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Initialization                          1     1      0      66
                                              4 BANK0      1     1      0
              _Dimmer_Initialization
     _setDimmerLights_Initialization
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Initialization                       2     2      0      66
                                              2 BANK0      2     2      0
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (2) _Dimmer_Initialization                                1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Main                                        0     0      0    9384
                        _DlyOff_Main
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Main                                          3     3      0    9384
                                             66 BANK0      3     3      0
                _DelayOffPointSelect
                             _setBuz
             _setDimmerLights_Switch
            _setDimmerLights_Trigger
                     _setRFSW_Status
                 _setRF_DimmerLights
                       _setSw_Status
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setTxData                                            3     3      0      44
                                              2 BANK0      2     2      0
                      _RfPointSelect
 ---------------------------------------------------------------------------------
 (3) _RfPointSelect                                        2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (5) _setSw_Status                                         2     1      1     472
                                              2 BANK0      2     1      1
                      _SwPointSelect
 ---------------------------------------------------------------------------------
 (3) _SwPointSelect                                        2     2      0      44
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setRF_DimmerLights                                   5     4      1    6117
                                             61 BANK0      5     4      1
                    _setPercentValue
 ---------------------------------------------------------------------------------
 (5) _setPercentValue                                      4     4      0    5427
                                             57 BANK0      4     4      0
                           ___awtoft
                            ___ftdiv
                            ___fttol
 ---------------------------------------------------------------------------------
 (6) ___fttol                                             14    10      4     380
                                             43 BANK0     14    10      4
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (6) ___ftdiv                                             16    10      6    2712
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (6) ___awtoft                                             6     3      3    2267
                                              8 BANK0      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) ___ftpack                                             8     3      5    2048
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (4) _setRFSW_Status                                       2     1      1     536
                                              2 BANK0      2     1      1
                    _RfSWPointSelect
 ---------------------------------------------------------------------------------
 (5) _RfSWPointSelect                                      2     2      0      44
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_Trigger                              2     1      1     408
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_Switch                               2     1      1     408
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (5) _DimmerLightsPointSelect                              2     2      0      44
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _setBuz                                               4     2      2    1223
                                              9 BANK0      4     2      2
                            ___awdiv
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4     428
                                              0 BANK0      9     5      4
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Initialization                              0     0      0      66
              _DlyOff_Initialization
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Initialization                                1     1      0      66
                                              2 BANK0      1     1      0
                _DelayOffPointSelect
 ---------------------------------------------------------------------------------
 (5) _DelayOffPointSelect                                  2     2      0      44
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _CC2500_PowerOnInitial                                0     0      0    1677
                 _CC2500_ClearRXFIFO
                 _CC2500_ClearTXFIFO
               _CC2500_FrequencyCabr
                 _CC2500_InitPATable
                  _CC2500_InitSetREG
                    _CC2500_PowerRST
                   _CC2500_SIDLEMode
 ---------------------------------------------------------------------------------
 (2) _CC2500_SIDLEMode                                     0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (2) _CC2500_PowerRST                                      1     1      0     394
                                              6 BANK0      1     1      0
                   _CC2500_WriteByte
                      _DelayTime_1us
 ---------------------------------------------------------------------------------
 (2) _CC2500_InitSetREG                                    4     4      0     354
                                              5 BANK0      4     4      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (2) _CC2500_InitPATable                                   3     3      0     309
                                              5 BANK0      3     3      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (3) _CC2500_WriteREG                                      3     2      1     218
                                              2 BANK0      3     2      1
                   _CC2500_WriteByte
 ---------------------------------------------------------------------------------
 (2) _CC2500_FrequencyCabr                                 0     0      0     416
                _CC2500_WriteCommand
                      _DelayTime_1us
 ---------------------------------------------------------------------------------
 (3) _DelayTime_1us                                        6     4      2     348
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (2) _CC2500_ClearTXFIFO                                   0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (2) _CC2500_ClearRXFIFO                                   0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (4) _CC2500_WriteCommand                                  2     2      0      68
                                              2 BANK0      2     2      0
                   _CC2500_WriteByte
 ---------------------------------------------------------------------------------
 (5) _CC2500_WriteByte                                     2     2      0      46
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Main                                          4     4      0       0
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Initialization                                1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _ISR                                                 1     1      0     524
                                              7 COMMON     1     1      0
                            _INT_ISR
                            _IOC_ISR
                           _TMR0_ISR
 ---------------------------------------------------------------------------------
 (12) _TMR0_ISR                                            0     0      0     198
                        _Buz_Counter
        _setDimmerLights_IntrControl
 ---------------------------------------------------------------------------------
 (13) _setDimmerLights_IntrControl                         5     5      0     198
                                              2 COMMON     5     5      0
              _DimmerIntrPointSelect
 ---------------------------------------------------------------------------------
 (13) _Buz_Counter                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _IOC_ISR                                             0     0      0      66
                   _setDimmerReClock
 ---------------------------------------------------------------------------------
 (13) _setDimmerReClock                                    0     0      0      66
             _setDimmerLights_IntrGO
 ---------------------------------------------------------------------------------
 (14) _setDimmerLights_IntrGO                              1     1      0      66
                                              2 COMMON     1     1      0
              _DimmerIntrPointSelect
 ---------------------------------------------------------------------------------
 (14) _DimmerIntrPointSelect                               2     2      0      44
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (12) _INT_ISR                                             0     0      0     260
                    _setRF_ReceiveGO
                     _setRF_RxStatus
 ---------------------------------------------------------------------------------
 (13) _setRF_RxStatus                                      2     1      1     130
                                              2 COMMON     2     1      1
                    i1_RfPointSelect
 ---------------------------------------------------------------------------------
 (13) _setRF_ReceiveGO                                     2     1      1     130
                                              2 COMMON     2     1      1
                    i1_RfPointSelect
 ---------------------------------------------------------------------------------
 (14) i1_RfPointSelect                                     2     2      0      22
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 14
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Buzzer_Initialization
   _Buzzer_Main
   _CC2500_PowerOnInitial
     _CC2500_ClearRXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
     _CC2500_ClearTXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
     _CC2500_FrequencyCabr
       _CC2500_WriteCommand
         _CC2500_WriteByte
       _DelayTime_1us
     _CC2500_InitPATable
       _CC2500_WriteREG
         _CC2500_WriteByte
     _CC2500_InitSetREG
       _CC2500_WriteREG
         _CC2500_WriteByte
     _CC2500_PowerRST
       _CC2500_WriteByte
       _DelayTime_1us
     _CC2500_SIDLEMode
       _CC2500_WriteCommand
         _CC2500_WriteByte
   _DelayOff_Initialization
     _DlyOff_Initialization
       _DelayOffPointSelect
   _DelayOff_Main
     _DlyOff_Main
       _DelayOffPointSelect
       _setBuz
         ___awdiv
       _setDimmerLights_Switch
         _DimmerLightsPointSelect
       _setDimmerLights_Trigger
         _DimmerLightsPointSelect
       _setRFSW_Status
         _RfSWPointSelect
       _setRF_DimmerLights
         _setPercentValue
           ___awtoft
             ___ftpack
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
       _setSw_Status
         _SwPointSelect
       _setTxData
         _RfPointSelect
   _DimmerLights_Initialization
     _Dimmer_Initialization
     _setDimmerLights_Initialization
       _DimmerLightsPointSelect
   _DimmerLights_Main
     _DimmerLights_Close
       _getDimmerLights_StatusFlag
       _setMemory_GO
     _setDimmerLights_Main
       _DimmerLightsPointSelect
       _setBuz
         ___awdiv
       _setDimmerLights
         _DimmerLightsPointSelect
         _setLED
           _LedPointSelect
         _setMemory_GO
       _setDimmerLights_Adj
         _DimmerLightsPointSelect
         _setRF_DimmerLights
           _setPercentValue
             ___awtoft
               ___ftpack
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setTxData
           _RfPointSelect
   _Flash_Memory_Initialization
     _Flash_Memory_Read
     _Flash_Memory_Write
       _Flash_Memory_Unlock
     _setPercentValue
       ___awtoft
         ___ftpack
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
   _Flash_Memory_Main
     _Flash_Memory_Modify
       _Flash_Memory_Erasing
         _Flash_Memory_Unlock
       _Flash_Memory_Read
       _Flash_Memory_Write
         _Flash_Memory_Unlock
   _LED_Initialization
     _setLED_Initialization
       _LedPointSelect
       _setLED
         _LedPointSelect
   _LED_Main
     _setLED_Main
       _LedPointSelect
   _Mcu_Initialization
     _ADC_Set
     _Fosc_Set
     _INT_Set
     _IOC_Set
     _IO_Set
     _TMR0_Set
     _WDT_Set
   _RF_Initialization
     _setRF_Initialization
   _RF_Main
     _setRF_Main
       _CC2500_RxData
         _CC2500_ReadByte
         _CC2500_ReadStatus
           _CC2500_ReadByte
           _CC2500_WriteByte
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
       _CC2500_TxData
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
       _CC2500_WriteCommand
         _CC2500_WriteByte
       _RF_RxDisable
         _CC2500_WriteCommand
           _CC2500_WriteByte
         _RfPointSelect
         _setINT_GO
       _RfPointSelect
       _getRxData
         _RfPointSelect
         _setControl_Lights_Table
           _RfPointSelect
           _setBuz
             ___awdiv
           _setDimmerLights
             _DimmerLightsPointSelect
             _setLED
               _LedPointSelect
             _setMemory_GO
           _setRFSW_AdjControl
             _RfSWPointSelect
             _setRF_DimmerValue
               _setDimmerLights_AdjRF
                 _DimmerLightsPointSelect
                 _getPercentValue
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
             _setTxData
               _RfPointSelect
           _setRFSW_Control
             _RfSWPointSelect
             _setBuz
               ___awdiv
             _setDelayOff_GO
               _DelayOffPointSelect
               _DelayTimejudge
             _setDimmerLights_Switch
               _DimmerLightsPointSelect
             _setDimmerLights_Trigger
               _DimmerLightsPointSelect
             _setRF_DimmerLights
               _setPercentValue
                 ___awtoft
                   ___ftpack
                 ___ftdiv
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
             _setSw_Status
               _SwPointSelect
             _setTxData
               _RfPointSelect
           _setRFSW_Status
             _RfSWPointSelect
           _setSw_Status
             _SwPointSelect
           _setTxData
             _RfPointSelect
         _setLog_Code
           _RfPointSelect
           _setBuz
             ___awdiv
       _setINT_GO
   _Switch_Initialization
     _TouchPower
     _setSw_Initialization
       _setLED
         _LedPointSelect
   _Switch_Main
     _setSw_Main
       _SwPointSelect
       _Sw_DimmerAdjFunc
         _setDimmerLights_AdjGo
           _DimmerLightsPointSelect
         _setDimmerLights_TriggerAdj
           _DimmerLightsPointSelect
         _setRFSW_Status
           _RfSWPointSelect
       _Sw_DimmerOffFunc
         _setDelayOff_GO
           _DelayOffPointSelect
           _DelayTimejudge
         _setDimmerLights_AdjGo
           _DimmerLightsPointSelect
         _setDimmerLights_Switch
           _DimmerLightsPointSelect
         _setDimmerLights_Trigger
           _DimmerLightsPointSelect
         _setDimmerLights_TriggerAdj
           _DimmerLightsPointSelect
         _setRF_DimmerLights
           _setPercentValue
             ___awtoft
               ___ftpack
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setTxData
           _RfPointSelect
       _Sw_DimmerOnFunc
         _setBuz
           ___awdiv
         _setDimmerLights_Switch
           _DimmerLightsPointSelect
         _setDimmerLights_Trigger
           _DimmerLightsPointSelect
         _setRFSW_Status
           _RfSWPointSelect
         _setRF_DimmerLights
           _setPercentValue
             ___awtoft
               ___ftpack
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setTxData
           _RfPointSelect
       _setBuz
         ___awdiv
       _setRF_Learn
         _RfPointSelect
   _WDT_Main
     _WDT_Clearing
   _myMain_Initialization
   _my_Main
     _setBuz
       ___awdiv
     _setRF_Enable
       _RfPointSelect
       _setINT_GO
     _setSw_Enable
       _SwPointSelect

 _ISR (ROOT)
   _INT_ISR
     _setRF_ReceiveGO
       i1_RfPointSelect
     _setRF_RxStatus
       i1_RfPointSelect
   _IOC_ISR
     _setDimmerReClock
       _setDimmerLights_IntrGO
         _DimmerIntrPointSelect
   _TMR0_ISR
     _Buz_Counter
     _setDimmerLights_IntrControl
       _DimmerIntrPointSelect

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       1       1        7.1%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      8       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     50      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      0      4C       7       95.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      42       9       82.5%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      30      11       60.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0      25      13       46.3%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     141      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     141      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.32 build 58300 
Symbol Table                                                                                   Thu Oct 09 11:04:54 2014

                   __size_of_Switch_Main 0008                    ?_Flash_Memory_Erasing 0070  
                           _WDT_Clearing 0002             ??_setDimmerLights_TriggerAdj 0023  
                                     _RD 0CA8                                       _RF 00BD  
                __end_of_CC2500_WriteREG 118B                                       _WR 0CA9  
                           ___awdiv@sign 0026                                       _Sw 007B  
     __end_of_getDimmerLights_StatusFlag 11D7               _getDimmerLights_StatusFlag 11BD  
                 __end_of_setDelayOff_GO 087A                             ___ftadd@exp1 004A  
                           ___ftadd@exp2 0049                setDimmerLights_Adj@lights 0064  
                   _setDimmerLights_Main 0D36                             ___ftadd@sign 0048  
                                    l301 142E                                      l304 1434  
                                    l334 1165                                      l335 1167  
                                    l273 1586                                      l370 130E  
                                    l346 117A                                      l274 158B  
                                    l364 11FB                                      l284 08DA  
                                    l268 155C                                      l277 158E  
                                    l358 1F95                                      l288 08EB  
                                    l813 10A3                                      _GIE 005F  
                                    _CRC 00B7                                      _RA0 0060  
                                    _RB0 0068     __size_of_DimmerLights_Initialization 0017  
                                    _RB1 0069                                      _RA3 0063  
                                    _RC0 0070                                      _RA4 0064  
                                    _LED 00BC                                      _RC1 0071  
                                    _RB3 006B                                      _RC2 0072  
                                    _RB4 006C                                      _RA6 0066  
                                    _RB5 006D                                      _RA7 0067  
                                    _RC4 0074                                      _RC5 0075  
                                    _RC7 0077                                      _RF1 00D0  
                                    _ISR 0004                                      _WDT 00E9  
                                    _Sw1 0148                                      _Sw2 0151  
                                    _Buz 0078                setDimmerLights_Adj@status 0062  
               __end_of_CC2500_WriteByte 1172                            ??_Buz_Counter 0070  
                  _Buzzer_Initialization 1EB2                          __end_of_ADC_Set 1E63  
                        ?_DelayTimejudge 0070                                      wreg 0009  
   setDimmerLights_Initialization@lights 0023                          _setDimmerLights 0CB7  
                  _setDimmerLights_AdjRF 12E7                    _setDimmerLights_AdjGo 1FBD  
                                   ?_ISR 0070                             ___ftdiv@cntr 0038  
                        __end_of_IOC_ISR 2000                             ___ftdiv@sign 003D  
                                   l2206 153F                 ?_DimmerLightsPointSelect 0070  
                                   l1381 1464                                     l2174 16A9  
                                   l2192 1108                          __end_of_IOC_Set 1F36  
                                   l5130 093F                                     l5210 03A6  
                                   l2554 1E3E                                     l5204 0393  
                                   l2902 0980                                     l5134 0946  
                                   l5222 03D9                                     l5206 039D  
                                   l5310 0584                                     l5144 096E  
                                   l5136 0950                                     l5216 03B9  
                                   l5208 03A2                                     l5400 138B  
                                   l5146 0976                                     l5138 0955  
                                   l5226 03EB                                     l5218 03C3  
                                   l5322 05A0                                     l5306 057C  
                                   l5410 1395                                     l5402 138D  
                                   l6106 16DD                                     l6130 0AEC  
                                   l5500 174A                                     l5164 12AE  
                                   l5252 06A3                                     l5236 0406  
                                   l5180 0357                                     l5404 138F  
                                   l2925 03C7                                     l5246 068D  
                                   l6038 1448                                     l5318 0598  
                                   l5406 1391                                     l5414 139A  
                                   l6134 0AFE                                     l5440 12D1  
                                   l6080 1373                                     l5176 0350  
                                   l5408 1393                                     l5416 13AE  
                                   l5514 0C02                                     l5274 06FD  
                                   l5266 06E4                                     l5338 0DCF  
                                   l5610 0890                                     l5186 0366  
                                   l6154 0B40                                     l5372 0E34  
                                   l5364 0E1A                                     l5356 0DFF  
                                   l5444 12DC                                     l5620 08A0  
                                   l6076 136A                                     l6164 15E9  
                                   l5518 0C20                                     l5366 0E23  
                                   l5358 0E0D                                     l5542 09F3  
                                   l5606 088A                                     l5614 0896  
                                   l5198 0380                                     l5294 0541  
                                   l6094 16C7                                     l2896 0969  
                                   l5368 0E26                                     l5456 10B7  
                                   l5640 08C8                                     l5624 08A6  
                                   l6424 0D46                                     l5288 052B  
                                   l6168 15FB                                     l5394 111F  
                                   l5474 1713                                     l6442 0D80  
                                   l5492 1739                                     l5484 171B  
                                   l5468 1708                                     l5636 08C2  
                                   l5644 08CE                                     l5628 08AC  
                                   l6444 0D89                                     l6428 0D55  
                                   l6620 05E4                                     l7092 176F  
                                   l5486 1727                                     l6454 0DAF  
                                   l6438 0D73                                     l5582 0853  
                                   l6630 0600                                     l6198 0ABC  
                                   l5496 1742                                     l5728 0D0A  
                                   l6480 150E                                     l5584 0860  
                                   l6720 022A                                     l6704 01F5  
                                   l7096 1779                                     l6802 07A6  
                                   l5930 0915                                     l5658 14AD  
                                   l5578 084D                                     l5754 0E94  
                                   l5738 0E5A                                     l6642 0629  
                                   l6730 025C                                     l6706 01FD  
                                   l6804 07AC                                     l6564 0A22  
                                   l6476 1507                                     l5588 086C  
                                   l5748 0E7E                                     l6558 0A09  
                                   l5694 0810                                     l5942 092E  
                                   l5870 0F4D                                     l5862 0F3B  
                                   l6808 07B3                                     l5952 131F  
                                   l6568 0A68                                     l5696 0816  
                                   l5928 08FD                                     l5856 0F20  
                                   l6672 0669                                     l6656 0646  
                                   l6744 02A0                                     l5954 132A  
                                   l6906 0496                                     l5778 152D  
                                   l5874 0F56                                     l5866 0F44  
                                   l6666 065C                                     l6754 02D3  
                                   l6950 15D6                                     l6694 01E5  
                                   l5984 11D0                                     l5896 156E  
                                   l6696 01EB                                     l6796 077E  
                                   l5996 07D7                    _myMain_Initialization 10D4  
                                   l6996 0BC1                                     l6988 0B95  
                                   _CFGS 0CAE                                     _FREE 0CAC  
                                   _LATA 010C                                     _LATB 010D  
                        __end_of_INT_ISR 1FDE                                     _LATC 010E  
                                   u3215 0964                                     u3235 0971  
                                   u4060 09A1                                     u3415 0394  
                                   u3265 0987                                     u4065 099F  
                                   u3195 094B                                     u3445 03A7  
                                   u3545 06B5                                     u6105 15BD  
                                   u3385 0381                                     u3705 05A7  
                                   u3625 054D                                     u3555 06C5  
                                   u3475 03BA                                     u3635 055D  
                                   _PEIE 005E                                     u3565 06E5  
                                   _INTE 005C                                     _INTF 0059  
                                   u3575 06F4                                     u3735 0DD6  
                                   u3655 0585                                     u4480 1E9A  
                                   u3585 06FE                                     u3665 058B  
                                   u6145 0B6D                                     u6155 0BAB  
                                   u3765 0E00                                     u3695 05A1  
                                   u3955 171E                                     u3795 0E1B  
                                   u4695 1314                                     u3975 1728  
                                   u3985 1732                                     u5915 073F  
                                   u3995 173A                                     _LWLO 0CAD  
                                   _RFSW 00BE                                     _TMR0 0015  
                        __end_of_INT_Set 1E49                                     _RSSI 00BF  
                                   _WREN 0CAA                                     _Buz1 013C  
                                   __WDT 00E4                                     _main 1751  
                           ___ftpack@arg 0020                      __end_of_DlyOff_Main 0CB7  
                        __end_of_RF_Main 1E3E                             ___ftpack@exp 0023  
                                   fsr0h 0005                                     fsr1h 0007  
                                   fsr0l 0004                                     indf0 0000  
                                   indf1 0001                                     fsr1l 0006  
    __size_of_setDimmerLights_TriggerAdj 0010                                     btemp 007E  
                        __end_of_WDT_Set 1159                                     ltemp 007E  
          __size_of_setRF_Initialization 0007                         _setDimmerReClock 1EA7  
                                   start 0016                                     ttemp 007E  
                                   wtemp 007E                      DelayTimejudge@value 0021  
                          _RfPointSelect 1EDF               __end_of_setRFSW_AdjControl 1555  
                           ___ftmul@cntr 003C                             ___ftmul@sign 003D  
                                  ??_ISR 0077                             ___fttol@exp1 0058  
                           ___fttol@lval 0054           __size_of_DimmerIntrPointSelect 0012  
                       __end_of_LED_Main 1F0F            __end_of_DimmerIntrPointSelect 1099  
                 _setDimmerLights_IntrGO 1FDE                    ?_setDimmerLights_Main 0070  
                        ?_setDelayOff_GO 0023                                    ?_main 006C  
              setControl_Lights_Table@rf 0067                          __end_of___awdiv 1751  
                        __end_of___ftadd 041E                          __end_of___ftdiv 071F  
                        __end_of___ftmul 05C8                          ___awdiv@divisor 0020  
                        __end_of___fttol 0E3D             setDimmerLights_AdjGo@command 0022  
                                  _IOCBF 0396                                    _IOCBN 0395  
                                  _IOCBP 0394                                    _IOCIE 005B  
                                  _IOCIF 0058                                    i1l769 1090  
                 _setDimmerLights_Switch 1F9D                          ___awdiv@counter 0025  
          __size_of_CC2500_FrequencyCabr 000C                                    _RFSW1 00E6  
                                  _RFSW2 00E7                                    _PORTA 000C  
                                  _PORTB 000D                                    _PORTC 000E  
                           ?_setLED_Main 0070                       setRF_Learn@command 0022  
                                  _TRISA 008C                                    _TRISB 008D  
                                  _TRISC 008E                                    _WPUB0 1068  
                                  _WPUB1 1069                                    _WPUB2 106A  
                          setRF_Learn@rf 0023                            __CFG_WRT$HALF 0000  
                       __end_of_TMR0_ISR 14A0             __size_of_CC2500_WriteCommand 0010  
                       __end_of_TMR0_Set 1F43                            ___awtoft@sign 002D  
            DimmerIntrPointSelect@lights 0071                            ___ftpack@sign 0024  
                        __end_of_my_Main 0BC7              __size_of_CC2500_ClearRXFIFO 0004  
                          ??_Buzzer_Main 0020                         __end_of_WDT_Main 1229  
            __size_of_CC2500_ClearTXFIFO 0004                      CC2500_RxData@loop_f 0025  
                         __pbitbssCOMMON 03E0                      setMemory_GO@command 0022  
                         __CFG_BOREN$OFF 0000                      __end_of_Buz_Counter 1F8D  
                     Flash_Memory_Read@i 0021                         ?_CC2500_ReadByte 0070  
                                  ltemp0 007E                                    ltemp1 0082  
                                  ltemp2 0086                                    ltemp3 0080  
         __size_of_setLED_Initialization 0011            __end_of_setLED_Initialization 1087  
                                  ttemp0 007E                                    ttemp1 0081  
                                  ttemp2 0084                                    ttemp3 0087  
                                  ttemp4 007F                             ?_setRF_Learn 0022  
                                  status 0003                                    wtemp0 007E  
                                  wtemp1 0080                                    wtemp2 0082  
                                  wtemp3 0084                                    wtemp4 0086  
                                  wtemp5 0088                                    wtemp6 007F  
                     _setRF_DimmerLights 0997              __size_of_Flash_Memory_Write 0031  
                      ?_CC2500_SIDLEMode 0070               __size_of_RF_Initialization 0004  
                         ?_RfPointSelect 0070                           setSw_Status@sw 0023  
       __size_of_DelayOff_Initialization 0008                setDimmerLights_Main@clear 0065  
                 ??_Flash_Memory_Erasing 0020                          _getPercentValue 17A5  
                     ??_CC2500_SIDLEMode 0024                          __initialization 0018  
                       ?_CC2500_PowerRST 0070                        ??_Sw_DimmerOnFunc 0062  
                      ??_setPercentValue 0059                             __end_of_main 17A5  
                    ?_setRF_DimmerLights 005D                         __end_of_Fosc_Set 1E36  
                       ?_CC2500_WriteREG 0022                                ??_ADC_Set 0020  
                __end_of_setDimmerLights 0D36                     _setSw_Initialization 1E7A  
                                 ??_main 0070                            ___fttol@sign1 0053  
                           ?_setLog_Code 0070                  _setControl_Lights_Table 0ECD  
                 ?_Buzzer_Initialization 0070                  ??_DlyOff_Initialization 0022  
                             _Receive_OK 03E0                                ??_IOC_ISR 0073  
                              ??_IOC_Set 0020          __end_of_DimmerLightsPointSelect 10AC  
                 ?_setDimmerLights_AdjRF 0070                                ??_INT_ISR 0074  
                 ?_setDimmerLights_AdjGo 0022                 __size_of_setRFSW_Control 0090  
                       ??_setRFSW_Status 0023                                ??_INT_Set 0020  
                ??_Switch_Initialization 0025                        i1RfPointSelect@rf 0071  
                   ??_setRF_DimmerLights 005E                              _DlyOff_Main 0C3E  
                 ?_myMain_Initialization 0070                                   _ADCON0 009D  
                                 _ADCON1 009E                                ??_RF_Main 006C  
                                 _ADRESH 009C                                   _ADRESL 009B  
                       ___awdiv@dividend 0022                                ??_WDT_Set 0020  
                         setRF_Enable@rf 0023                         __end_of___awtoft 12C5  
                                 _ANSELA 018C                                   _ANSELB 018D  
                                 _ANSELC 018E                         __end_of___ftpack 0997  
                                 _IOCBF2 1CB2                  _setDimmerLights_Trigger 1FAD  
                                 i1l6320 00AA                                   i1l6324 00B1  
                                 i1l6342 00FB                                   i1l6350 011A  
                                 i1l6360 014D                                   i1l6344 0101  
                                 i1l6370 017C                                   i1l6372 0182  
                                 i1l6356 0136                                   i1l6364 0161  
                                 i1l6348 0114                                   i1l6382 01B4  
                                 i1l6392 01C7                                   i1l6386 01BA  
                                 _FVRCON 0117                                   _PMADRH 0192  
                                 _PMADRL 0191                                   u601_25 148F  
                                 _PMDATH 0194                                   _PMDATL 0193  
                                 u515_25 0085                                   _PMCON2 0196  
                                 _OSCCON 0099                                   _TMR0IE 005D  
                                 _TMR0IF 005A                                   _IO_Set 11A4  
                                 _WDTCON 0097                       DelayTime_1us@count 0020  
                  _Dimmer_Initialization 1E55           __size_of_CC2500_PowerOnInitial 0015  
          __end_of_CC2500_PowerOnInitial 10FD                                   _Dimmer 00B9  
                                 _DlySw1 00C6                                   _DlySw2 00CB  
             __end_of_Mcu_Initialization 11F2                      __end_of_Buzzer_Main 07C1  
                                 _Memory 00EB                                   _Timer0 00E8  
     __end_of_setDimmerLights_TriggerAdj 1076               _setDimmerLights_TriggerAdj 1066  
          setDimmerLights_Switch@command 0022                                ??___awdiv 0024  
                              ??___ftadd 0044             __size_of_DelayOffPointSelect 0017  
                              ??___ftdiv 0034                    setDimmerLights@lights 0026  
                              ??___ftmul 0034                                ??___fttol 004F  
           ?_Flash_Memory_Initialization 0070                          i1_RfPointSelect 1E9C  
            setDimmerLights_AdjRF@lights 0060                   ??_setDimmerLights_Main 0065  
                                 _r_data 00C4                                   _s_data 00C5  
                                 _setLED 087A                                   _myMain 00EA  
                       _DimmerLightsIntr 007A                    ?_setSw_Initialization 0070  
                  setDimmerLights@status 0024                         ___awdiv@quotient 0027  
                                 _setBuz 0BC7         ??_setDimmerLights_Initialization 0022  
        ?_setDimmerLights_Initialization 0070                    ___ftmul@f3_as_product 0039  
           ??_getDimmerLights_StatusFlag 0020                                ??_my_Main 002D  
    __end_of_setDimmerLights_IntrControl 01CE              _setDimmerLights_IntrControl 004C  
               Flash_Memory_Read@address 0022                              _Buz_Counter 1F7D  
                      RfSWPointSelect@sw 0021                         ??_setRF_RxStatus 0073  
                  __end_of_SwPointSelect 10C0                            ?_setRF_Enable 0022  
                        _RfSWPointSelect 10FD             __size_of_Flash_Memory_Modify 006D  
      setDimmerLights_IntrControl@lights 0076              __size_of_DimmerLights_Close 0014  
                __size_of_LedPointSelect 0022                      Flash_Memory_Write@i 0021  
           __size_of_Flash_Memory_Unlock 0009                               _TouchPower 1E3E  
                      ?_Sw_DimmerAdjFunc 0070              __size_of_CC2500_InitPATable 001F  
                    CC2500_TxData@loop_e 0025                  __end_of_getPercentValue 1800  
       __end_of_CC2500_registers_address 102F                  __end_of__initialization 0048  
                        ??_RfPointSelect 0020              setDimmerLights_AdjGo@lights 0023  
                              ?_LED_Main 0070                               ___ftadd@f1 003E  
                             ___ftadd@f2 0041                       ??_Sw_DimmerAdjFunc 0024  
                    setSw_Enable@command 0022                               ___ftdiv@f1 0031  
                             ___ftdiv@f2 002E                               ___ftdiv@f3 0039  
                      ?_Sw_DimmerOffFunc 0070                               ___awtoft@c 0028  
           ?_DimmerLights_Initialization 0070                               ___ftmul@f1 002E  
                             ___ftmul@f2 0031                               ___fttol@f1 004B  
                         __pcstackCOMMON 0070                       ??_Sw_DimmerOffFunc 0062  
                           __pidataBANK3 1283                                ?_TMR0_ISR 0070  
                              ?_TMR0_Set 0070             __size_of_setDimmerLights_Adj 003E  
                     _LED_Initialization 1EF7                ??_setControl_Lights_Table 0067  
                       ??_DelayTimejudge 0020              ?_getDimmerLights_StatusFlag 0070  
          ??_Flash_Memory_Initialization 005D                 __size_of_setRF_ReceiveGO 000D  
                       ?_setDimmerLights 0024                                ?_WDT_Main 0070  
               __end_of_setDimmerReClock 1EB2                       __size_of_getRxData 004D  
                    ?_LED_Initialization 0070                        ?_CC2500_WriteByte 0070  
                         ??_setRF_Enable 0023                           _DimmerLights11 00BA  
                         _DimmerLights22 00BB                     __size_of_setLED_Main 0040  
              ??_setDimmerLights_Trigger 0023                       ??_CC2500_WriteByte 0020  
           setDimmerLights_Switch@lights 0023                               __pbssBANK1 00A0  
                             __pbssBANK2 0120                               __pbssBANK3 01C0  
                             __pbssBANK4 0220                                ?_Fosc_Set 0070  
                            _Buzzer_Main 071F                        ??_setRFSW_Control 0062  
                 ?_Dimmer_Initialization 0070                                  ?_IO_Set 0070  
                             ??_LED_Main 0025                            ?_setMemory_GO 0070  
                        __CFG_VCAPEN$OFF 0000                  _DelayOff_Initialization 1E6A  
                             __pnvCOMMON 007D                            ??_Switch_Main 006A  
                         DelayTime_1us@i 0022                           DelayTime_1us@j 0024  
                   ??_LED_Initialization 0025             setDimmerLights_IntrGO@lights 0072  
                           _DimmerLights 0079                        LedPointSelect@led 0021  
                __end_ofi1_RfPointSelect 1EA7                       __size_of_setINT_GO 0009  
                 __size_of_DelayOff_Main 0008                     __size_of_setRF_Learn 000F  
                            setBuz@count 002C                               __pmaintext 1751  
                    _CC2500_WriteCommand 1F8D         __size_of_DimmerLightsPointSelect 0013  
                       ??_setDelayOff_GO 0025            ??_DimmerLights_Initialization 0024  
                ?_setDimmerLights_IntrGO 0070                               ??_TMR0_ISR 0077  
                             ??_TMR0_Set 0020                               __pintentry 0004  
                 ??_setSw_Initialization 0024                            ?_setSw_Enable 0070  
                     __size_of_setTxData 00A1                  ?_setDimmerLights_Switch 0022  
                   Sw_DimmerAdjFunc@Idle 0024                                  ?_setLED 0022  
                 __size_of_DelayTime_1us 0026                                  _ADC_Set 1E5C  
                                ?_setBuz 0029                                ?___awtoft 0028  
                              ?___ftpack 0020                               ??_WDT_Main 0020  
           __end_of_setRF_Initialization 1E6A                            ?_setSw_Status 0022  
                     _setRFSW_AdjControl 1515                  __end_of_RfSWPointSelect 1113  
                      Sw_DimmerOnFunc@sw 0063                                  _IOC_ISR 1FEF  
                                _IOC_Set 1F29                     __size_of_setLog_Code 0047  
                                _INT_ISR 1FCD                                  _INT_Set 1E43  
                   ?_CC2500_WriteCommand 0070                        _Flash_Memory_Main 1599  
                      _Flash_Memory_Read 118B                   __size_of_CC2500_RxData 005E  
                 __size_of_CC2500_TxData 0044                      ?_setRFSW_AdjControl 0070  
                            setTxData@rf 0023                                  _RF_Data 00A0  
                                _RF_Main 1E3A                       ?_Flash_Memory_Main 0070  
                     ?_Flash_Memory_Read 0070                                  _WDT_Set 1141  
        __end_of_setControl_Lights_Table 0F5F                               ??_Fosc_Set 0020  
                            ?_TouchPower 0070                          _Sw_DimmerOnFunc 0AE1  
                        _setPercentValue 1623                            setLog_Code@rf 002E  
                         ??_setMemory_GO 0020                         ?_getPercentValue 0070  
                                _Dimmer1 00E1             __end_of_CC2500_FrequencyCabr 1EDF  
                        __size_of_IO_Set 0019                      ??_Flash_Memory_Main 0027  
                    ??_Flash_Memory_Read 0020                                  _VarLED1 00D9  
                                _VarLED2 00DD                        __end_of_getRxData 16FD  
               _CC2500_registers_address 1000           __end_of_setDimmerLights_IntrGO 1FEF  
                         RF_RxDisable@rf 0024          __end_of_setDimmerLights_Trigger 1FBD  
                   ??_setRFSW_AdjControl 0064           __end_of_setDimmerLights_Switch 1FAD  
                                ___awdiv 16FD                                  ___ftadd 0328  
                         ??_setSw_Enable 0022                                  ___ftdiv 0676  
                                ___ftmul 0514                                  ___fttol 0DB6  
                    __end_of_Switch_Main 1E8A                  ??_Buzzer_Initialization 0020  
                                __myMain 01C0                               ??___awtoft 002B  
                             ??___ftpack 0025                          __size_of_setLED 005E  
                   setRFSW_AdjControl@sw 0066                          __size_of_setBuz 0077  
                         ??_setSw_Status 0023                                  __ptext1 0B53  
                                __ptext2 1229                                  __ptext3 13DD  
                                __ptext4 10D4                                  __ptext5 120D  
                                __ptext6 0002                                  __ptext7 1E82  
                                __ptext8 01CE                                  __ptext9 1F6E  
                ??_setDimmerLights_AdjRF 005F                  ??_setDimmerLights_AdjGo 0023  
              __size_of_CC2500_SIDLEMode 0004                      Sw_DimmerOnFunc@Idle 0062  
                  _DimmerIntrPointSelect 1087                             __size_of_ISR 0012  
              __end_of_Flash_Memory_Main 15DE                __end_of_Flash_Memory_Read 11A4  
                             _setRF_Main 05C8                  ??_myMain_Initialization 0020  
                          _DelayOff_Main 1E72                        _DimmerLights_Main 1EC8  
                                _my_Main 0B53                        __end_of_setINT_GO 1E9C  
         __size_of_DlyOff_Initialization 000B                    ??_CC2500_WriteCommand 0022  
          __end_of_DlyOff_Initialization 1EC8                        ??_setRF_ReceiveGO 0073  
             __end_of_CC2500_ClearRXFIFO 1E2A               __end_of_CC2500_ClearTXFIFO 1E2E  
          DimmerLightsPointSelect@lights 0021                             ?_DlyOff_Main 0070  
                     ?_DimmerLights_Main 0070                                  _product 007D  
                         _LedPointSelect 12C5                      _DelayOffPointSelect 1113  
                                clrloop0 1E50           __size_of_Switch_Initialization 000D  
          __end_of_Switch_Initialization 1F50                     end_of_initialization 0048  
              ??_DelayOff_Initialization 0023                        _CC2500_InitSetREG 132F  
                          _DelayTime_1us 1309                        __end_of_setTxData 1000  
             __end_of_Flash_Memory_Write 146B                                  init_ram 1E49  
                     ?_CC2500_InitSetREG 0070                      ??_DimmerLights_Main 0067  
                   Flash_Memory_Read@ret 0023                                  initloop 1E4A  
                             _setSw_Main 01CE                    CC2500_ReadByte@loop_b 0021  
                      _CC2500_ReadStatus 11F2                     Flash_Memory_Modify@i 0026  
                  _setLED_Initialization 1076                         ?i1_RfPointSelect 0070  
                     ?_CC2500_ReadStatus 0070                         setRFSW_Status@sw 0023  
               __size_of_CC2500_ReadByte 001D                            _CC2500_RxData 08D8  
                          _CC2500_TxData 1555                      ??_CC2500_InitSetREG 0025  
                   __end_of_setRF_Enable 140A              ?_setDimmerLights_TriggerAdj 0022  
          __size_of_Flash_Memory_Erasing 000C                     ?_DelayOffPointSelect 0070  
                    _Flash_Memory_Modify 0A03                             __pstringtext 1000  
                    _Flash_Memory_Unlock 1E8A                      ??_CC2500_ReadStatus 0022  
                 setRF_Initialization@rf 0070         getDimmerLights_StatusFlag@Status 0021  
                CC2500_InitSetREG@loop_c 0028                      __size_of_TouchPower 0005  
               setLED_Initialization@led 0024                   setSw_Initialization@sw 0024  
              __end_of_DimmerLights_Main 1ED3                       _Mcu_Initialization 11D7  
               __size_of_CC2500_PowerRST 0030                           ?_DelayOff_Main 0070  
                       ?_RfSWPointSelect 0070                          _setSw_Main$4998 0067  
                        _setSw_Main$4999 0068                         __CFG_FOSC$INTOSC 0000  
                           ?_Buz_Counter 0070                   __end_of_LedPointSelect 12E7  
                __end_of_Sw_DimmerOnFunc 0B53                  __end_of_setPercentValue 1669  
               __size_of_CC2500_WriteREG 0019                __end_of_CC2500_InitSetREG 1359  
                    ?_Mcu_Initialization 0070                     ?_Flash_Memory_Modify 0070  
            __size_of_setRF_DimmerLights 006C                           ?_DelayTime_1us 0020  
                    _setDimmerLights_Adj 07C1                     ?_Flash_Memory_Unlock 0070  
              __end_of_CC2500_ReadStatus 120D                            ?_RF_RxDisable 0070  
                            ___ftdiv@exp 003C                           __end_of_IO_Set 11BD  
                   _setRF_Initialization 1E63                              _Switch_Main 1E82  
                      __size_of_LED_Main 000C                           ?_CC2500_RxData 0070  
                         ?_CC2500_TxData 0070                  _DimmerLightsPointSelect 1099  
                            ___ftmul@exp 0038                    _CC2500_PowerOnInitial 10E8  
                   ??_Mcu_Initialization 0021                    ??_DelayOffPointSelect 0020  
                          ?_WDT_Clearing 0070                     ?_setDimmerLights_Adj 0062  
              __size_of_Sw_DimmerAdjFunc 0045                     setRF_DimmerLights@on 005D  
                           setRF_Main@rf 006A                        __size_of_TMR0_ISR 0035  
                 ?_DimmerIntrPointSelect 0070                        __size_of_TMR0_Set 000D  
                   __end_of_setMemory_GO 1283            __size_of_setDimmerLights_Main 0080  
                         __end_of_setLED 08D8                           __end_of_setBuz 0C3E  
        _getDimmerLights_StatusFlag$1857 0022                     _CC2500_FrequencyCabr 1ED3  
              __size_of_Sw_DimmerOffFunc 0071               __size_of_Flash_Memory_Main 0045  
             __size_of_Flash_Memory_Read 0019                              ?_setRF_Main 0070  
                        _setRFSW_Control 0E3D                        __size_of_WDT_Main 001C  
                      ?_setDimmerReClock 0070                      start_initialization 0018  
                      _setRF_DimmerValue 14A0                          ?_LedPointSelect 0070  
             __end_of_DimmerLights_Close 10D4                              __end_of_ISR 0016  
                  ??_Flash_Memory_Modify 0024                       ??_setDimmerReClock 0073  
                     ?_setRF_DimmerValue 0070               __end_of_CC2500_InitPATable 1264  
                  ??_Flash_Memory_Unlock 0020                  ??_Dimmer_Initialization 0020  
                         ??_RF_RxDisable 0024                     __end_of_setSw_Enable 1245  
                        RfPointSelect@rf 0021                             ?_Buzzer_Main 0070  
                               ??_IO_Set 0020                                _VarErrLED 00D5  
                            ?_setSw_Main 0070                      ??_setRF_DimmerValue 0061  
                 ?_setLED_Initialization 0070                     __end_of_setSw_Status 1F6E  
                     Sw_DimmerAdjFunc@sw 0025                    ?_setRF_Initialization 0070  
                      __size_of_Fosc_Set 0004                                _VarMemory 0220  
                __size_of_setRFSW_Status 000F                    __end_of_RfPointSelect 1EEB  
              __size_of_CC2500_WriteByte 0019                                _VarTimer0 015A  
                         ??_WDT_Clearing 0020                                _Rx_Length 00C0  
                setRF_DimmerValue@lights 0063                    ??_setDimmerLights_Adj 0063  
                 __size_of_SwPointSelect 0014                                _Tx_Length 00C2  
                            __pdataBANK3 01A0                                 ??_setLED 0023  
                               ?_ADC_Set 0070                                 ??_setBuz 002B  
                        ??_DelayOff_Main 0065                        ??_CC2500_ReadByte 0020  
                       _CC2500_SIDLEMode 1E2E               __size_of_DimmerLights_Main 000B  
              __end_of_setRF_DimmerValue 14D5                    ?_CC2500_FrequencyCabr 0070  
                       setINT_GO@command 0020                            ??_setLED_Main 0022  
                      __size_of___awtoft 0022                        __size_of___ftpack 0061  
                               ?_IOC_ISR 0070                          _setRF_Main$4185 006B  
                            __pbssCOMMON 0078                                 ?_IOC_Set 0070  
                              ___latbits 0003                                 ?_INT_ISR 0070  
                    setRF_Enable@command 0022                         ?_Sw_DimmerOnFunc 0070  
                          __pcstackBANK0 0020                                 ?_INT_Set 0070  
                       ?_setPercentValue 0070                          ??_DelayTime_1us 0022  
             __size_of_CC2500_InitSetREG 002A                 __size_of_setDimmerLights 007F  
                          DlyOff_Main@sw 0064                        ??_CC2500_PowerRST 0026  
                               ?_RF_Main 0070                                 ?_WDT_Set 0070  
                           ??_TouchPower 0020                     __size_of_DlyOff_Main 0079  
             __size_of_CC2500_ReadStatus 001B                            ??_setRF_Learn 0023  
                      ??_CC2500_WriteREG 0023                            _DimmerLights1 0120  
                          _DimmerLights2 012E                    CC2500_WriteREG@w_addr 0024  
                  setDelayOff_GO@command 0023                ??_DimmerLightsPointSelect 0020  
                  __size_of_setRF_Enable 002D                          ??_CC2500_RxData 0024  
                __size_of_setRF_RxStatus 000D                          ??_CC2500_TxData 0024  
                              __pnvBANK1 00E8              __size_of_LED_Initialization 000C  
                 ?_CC2500_PowerOnInitial 0070                      __size_of_setRF_Main 00AE  
                  DelayOffPointSelect@sw 0021                               setBuz@time 0029  
                    setDelayOff_GO@value 0024                 ?_setControl_Lights_Table 0070  
    __end_of_Flash_Memory_Initialization 0514              _Flash_Memory_Initialization 041E  
                               ?___awdiv 0020                                __ptext100 1309  
                              __ptext101 1E2A                                __ptext110 1F7D  
                              __ptext102 1E26                                __ptext111 1FEF  
                              __ptext103 1F8D                                __ptext112 1EA7  
                              __ptext104 1159                                __ptext113 1FDE  
                              __ptext105 071F                                __ptext114 1087  
                              __ptext106 1EB2                                __ptext115 1FCD  
                              __ptext116 1F1C                                __ptext108 146B  
                              __ptext117 1F0F                                __ptext109 004C  
                               ?___ftadd 003E                                __ptext118 1E9C  
                              _getRxData 16B0                                 ?___ftdiv 002E  
                               ?___ftmul 002E                                 ?___fttol 004B  
                __end_of_setRFSW_Control 0ECD                          _setRF_ReceiveGO 1F0F  
          __size_of_setSw_Initialization 0008           __size_of_Buzzer_Initialization 000B  
          __end_of_Buzzer_Initialization 1EBD                         getPercentValue@i 005C  
                       setPercentValue@i 005A                            ??_setLog_Code 002D  
                     __end_of_TouchPower 1E43                 ?_setDimmerLights_Trigger 0022  
                        DelayTimejudge@i 0022                      __size_of_setSw_Main 015A  
           CC2500_ReadStatus@status_addr 0023           __size_of_setDimmerLights_AdjRF 0022  
         __size_of_setDimmerLights_AdjGo 0010            __end_of_setDimmerLights_AdjRF 1309  
          __end_of_setDimmerLights_AdjGo 1FCD                   CC2500_WriteByte@loop_a 0021  
                               ?_my_Main 0070                                _r_address 00C3  
         __size_of_myMain_Initialization 0014             __end_of_CC2500_patable_vaule 1066  
          __end_of_myMain_Initialization 10E8                             _setRF_Enable 13DD  
                __size_of_DelayTimejudge 002C                            _SwPointSelect 10AC  
                   __size_of_Buz_Counter 0010                       Sw_DimmerOffFunc@sw 0064  
                              _setINT_GO 1E93                      __end_of_setLED_Main 1515  
                 ??_setRF_Initialization 0020                        _CC2500_rfSettings 102F  
                               _LED_Main 1F03                          SwPointSelect@sw 0021  
                              clear_ram0 1E4F                 CC2500_InitPATable@loop_d 0027  
                              _setTxData 0F5F      __end_of_DimmerLights_Initialization 1141  
            _DimmerLights_Initialization 112A                       _CC2500_ClearRXFIFO 1E26  
                     _CC2500_ClearTXFIFO 1E2A           setDimmerLights_Trigger@command 0022  
               setRF_DimmerLights@lights 0061                                 _GO_nDONE 04E9  
                    __end_of_setRF_Learn 1F7D                 __size_of_getPercentValue 005B  
               setRF_DimmerLights@status 0060                   setRF_ReceiveGO@command 0072  
            __size_of_setRFSW_AdjControl 0040                    __size_of_setMemory_GO 001F  
                     _Flash_Memory_Write 143A                               ?_getRxData 0070  
                               _TMR0_ISR 146B                   CC2500_InitSetREG@temp1 0026  
                 CC2500_InitSetREG@temp2 0027                        setRF_ReceiveGO@rf 0073  
                               _TMR0_Set 1F36                         _Sw_DimmerAdjFunc 15DE  
                    ?_CC2500_ClearRXFIFO 0070                      ?_CC2500_ClearTXFIFO 0070  
      setDimmerLights_TriggerAdj@command 0022                                 _RF_Count 00B5  
                   __end_of_RF_RxDisable 1384              __end_of_CC2500_WriteCommand 1F9D  
                 ??_CC2500_FrequencyCabr 0026                                 _WDT_Main 120D  
                DlyOff_Initialization@sw 0022                         __size_of_ADC_Set 0007  
             __size_of_setRF_DimmerValue 0035                      ?_Flash_Memory_Write 0070  
                       _Sw_DimmerOffFunc 0A70                  __size_of_setDelayOff_GO 005D  
                  __size_of_setSw_Enable 001C                                 _DelayOff 00B8  
                           setSw_Main@sw 0069                         __size_of_IOC_ISR 0011  
           ?_setDimmerLights_IntrControl 0070                         __size_of_IOC_Set 000D  
           __end_of_Flash_Memory_Erasing 1EF7                           ?_SwPointSelect 0070  
                       __size_of_INT_ISR 0011                           setLED_Main@led 0024  
                   __end_of_WDT_Clearing 0004                         __size_of_INT_Set 0006  
                    __end_of_setLog_Code 16B0                    _DlyOff_Initialization 1EBD  
                  __size_of_setSw_Status 000F                               ?_setINT_GO 0070  
                   ??_CC2500_ClearRXFIFO 0024                     ??_CC2500_ClearTXFIFO 0024  
              __end_of_CC2500_rfSettings 105E                         __size_of_RF_Main 0004  
                               _Fosc_Set 1E32                         __size_of_WDT_Set 0018  
                  _Switch_Initialization 1F43                     ??_Flash_Memory_Write 0020  
                      ??_setDimmerLights 0025                           _setRFSW_Status 1F50  
                           _setMemory_GO 1264                     __size_of_Buzzer_Main 00A2  
                             ?_setTxData 0070                             ?_Switch_Main 0070  
                       _CC2500_WriteByte 1159             Flash_Memory_Initialization@i 005E  
                __end_of_setRF_ReceiveGO 1F1C                        setRFSW_Control@sw 0063  
                              setLED@led 0023                  ??_DimmerIntrPointSelect 0070  
                       __size_of___awdiv 0054                         __size_of___ftadd 00F6  
                       ?_setRFSW_Control 0070                         __size_of___ftdiv 00A9  
                           _setSw_Enable 1229                         __size_of___ftmul 00B4  
                       __size_of___fttol 0087                 __size_ofi1_RfPointSelect 000B  
                               ___awtoft 12A3                         ??_LedPointSelect 0020  
                               ___ftpack 0936                             _setSw_Status 1F5F  
                           ??_setRF_Main 0069                     CC2500_WriteREG@value 0022  
                            _setLED_Main 14D5                    setRFSW_Status@command 0022  
             __end_of_setRF_DimmerLights 0A03                 ?_DelayOff_Initialization 0070  
                       setDelayOff_GO@sw 0027                         __size_of_my_Main 0074  
                               __ptext10 0AE1                                 __ptext11 0A70  
                               __ptext20 16B0                                 __ptext12 15DE  
                               __ptext21 1669                                 __ptext13 1066  
                               __ptext30 0514                                 __ptext22 0ECD  
                               __ptext14 1FBD                                 __ptext31 0328  
                               __ptext23 0E3D                                 __ptext15 1F43  
                               __ptext40 11D7                                 __ptext32 1359  
                               __ptext24 081D                                 __ptext16 1E7A  
                               __ptext41 1141                                 __ptext33 1E93  
                               __ptext25 1384                                 __ptext17 1E3E  
                               __ptext50 1EF7                                 __ptext42 1F36  
                               __ptext34 1555                                 __ptext26 1515  
                               __ptext18 1E3A                                 __ptext51 1076  
                               __ptext43 11A4                                 __ptext35 08D8  
                               __ptext27 14A0                                 __ptext19 05C8  
                               __ptext60 0D36                                 __ptext52 1599  
                               __ptext44 1F29                                 __ptext36 11F2  
                               __ptext28 12E7                                 __ptext61 07C1  
                               __ptext53 0A03                                 __ptext45 1E43  
                               __ptext37 0800                                 __ptext29 17A5  
                               __ptext70 1E55                                 __ptext62 0CB7  
                               __ptext54 1EEB                                 __ptext46 1E32  
                               __ptext38 1E36                                 __ptext71 1E72  
                               __ptext63 087A                                 __ptext55 041E  
                               __ptext47 1E5C                                 __ptext39 1E63  
                               __ptext80 0676                                 __ptext72 0C3E  
                               __ptext64 12C5                                 __ptext56 143A  
                               __ptext48 1F03                                 __ptext81 12A3  
                               __ptext73 0F5F                                 __ptext65 10C0  
                               __ptext57 1E8A                                 __ptext49 14D5  
                               __ptext90 1E6A                                 __ptext82 0936  
                               __ptext74 1EDF                                 __ptext66 1264  
                               __ptext58 118B                                 __ptext91 1EBD  
                               __ptext83 1F50                                 __ptext75 1F5F  
                               __ptext67 11BD                                 __ptext59 1EC8  
                               __ptext92 1113                                 __ptext84 10FD  
                               __ptext76 10AC                                 __ptext68 112A  
                               __ptext93 10E8                                 __ptext85 1FAD  
                               __ptext77 0997                                 __ptext69 13B0  
                               __ptext94 1E2E                                 __ptext86 1F9D  
                               __ptext78 1623                                 __ptext95 140A  
                               __ptext87 1099                                 __ptext79 0DB6  
                               __ptext96 132F                                 __ptext88 0BC7  
                               __ptext97 1245                                 __ptext89 16FD  
                               __ptext98 1172                                 __ptext99 1ED3  
                               __product 01A0            ??_setDimmerLights_IntrControl 0072  
                ??_setLED_Initialization 0024                 __size_of_RfSWPointSelect 0016  
         __size_of_Dimmer_Initialization 0007                   __end_of_setRFSW_Status 1F5F  
          __end_of_Dimmer_Initialization 1E5C             __end_of_setDimmerLights_Main 0DB6  
               ??_setDimmerLights_IntrGO 0072                             ??_setSw_Main 0065  
                          setLED@command 0022                            __size_of_main 0054  
                            _setRF_Learn 1F6E                 __end_of_CC2500_SIDLEMode 1E32  
                         _setRF_RxStatus 1F1C               setDimmerLights_Main@lights 0066  
            __end_of_DelayOffPointSelect 112A               CC2500_WriteCommand@command 0023  
                     _DimmerLights_Close 10C0                 ??_setDimmerLights_Switch 0023  
              __size_of_setDimmerReClock 000B                          _CC2500_ReadByte 0800  
                     _CC2500_InitPATable 1245      __size_of_getDimmerLights_StatusFlag 001A  
          setDimmerLights_Trigger@lights 0023                       __end_of_setRF_Main 0676  
            __size_of_Mcu_Initialization 001B                     _CC2500_patable_vaule 105E  
                            ??_getRxData 0068                      ?_DimmerLights_Close 0070  
       setDimmerLights_TriggerAdj@lights 0023                                 main@argc 006C  
                               main@argv 006E                      ?_CC2500_InitPATable 0070  
                        _CC2500_PowerRST 140A              __end_of_Flash_Memory_Modify 0A70  
                      ??_getPercentValue 0059                              _setLog_Code 1669  
                  setRF_RxStatus@command 0072              __end_of_Flash_Memory_Unlock 1E93  
                        ??_SwPointSelect 0020                          _CC2500_WriteREG 1172  
                     __end_of_setSw_Main 0328                            _Transceive_OK 03E1  
                 ?_DlyOff_Initialization 0070                           _DelayTimejudge 1384  
                            pic14e$flags 007E                     ??_DimmerLights_Close 0023  
                            ??_setINT_GO 0020                                 intlevel1 0000  
                   ??_CC2500_InitPATable 0025                   ?_Switch_Initialization 0070  
                 __end_of_setRF_RxStatus 1F29                          ?_setRFSW_Status 0022  
                ??_CC2500_PowerOnInitial 0029   __end_of_setDimmerLights_Initialization 13DD  
__size_of_setDimmerLights_Initialization 002D           _setDimmerLights_Initialization 13B0  
            __end_of_setDimmerLights_Adj 07FF                              ??_setTxData 0022  
                       ?_setRF_ReceiveGO 0072                   CC2500_InitPATable@temp 0026  
                  __size_of_RF_RxDisable 002B                        _RF_Initialization 1E36  
   __size_of_setDimmerLights_IntrControl 0182                     _Flash_Memory_Erasing 1EEB  
                     ?_RF_Initialization 0070                               _SPI0Buffer 00C1  
        __end_of_DelayOff_Initialization 1E72                               _OPTION_REG 0095  
                  __size_of_WDT_Clearing 0002                    __end_of_DelayOff_Main 1E7A  
                    ??_RF_Initialization 0021                              getRxData@rf 0068  
                         _setDelayOff_GO 081D         __size_of_setControl_Lights_Table 0092  
                 __end_of_DelayTimejudge 13B0                   __size_of_RfPointSelect 000C  
                      ??i1_RfPointSelect 0070     __size_of_Flash_Memory_Initialization 00F6  
                          ??_DlyOff_Main 0062                    __end_of_DelayTime_1us 132F  
               __end_of_Sw_DimmerAdjFunc 1623                  __end_of_CC2500_ReadByte 081D  
           __end_of_setSw_Initialization 1E82                          ?_setRF_RxStatus 0072  
                   getPercentValue@value 005B                             _RF_RxDisable 1359  
             __end_of_LED_Initialization 1F03         __size_of_setDimmerLights_Trigger 0010  
               __size_of_Sw_DimmerOnFunc 0072          __size_of_setDimmerLights_IntrGO 0011  
               __size_of_setPercentValue 0046                     setPercentValue@value 0059  
              __end_of_RF_Initialization 1E3A                 __end_of_Sw_DimmerOffFunc 0AE1  
        __size_of_setDimmerLights_Switch 0010                        ??_RfSWPointSelect 0020  
                       setRF_RxStatus@rf 0073                    __end_of_CC2500_RxData 0936  
                  __end_of_CC2500_TxData 1599                      setSw_Status@command 0022  
                __end_of_CC2500_PowerRST 143A  
