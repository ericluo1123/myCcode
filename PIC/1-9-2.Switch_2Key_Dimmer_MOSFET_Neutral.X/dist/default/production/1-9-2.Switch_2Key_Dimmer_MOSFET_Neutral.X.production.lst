

Microchip Technology PIC LITE Macro Assembler V1.32 build 58300 
                                                                                               Wed Dec 17 13:17:07 2014

Microchip Technology Omniscient Code Generator (Lite mode) build 58300
     1                           	processor	16F1518
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK4,global,class=CODE,delta=2
     5                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     6                           	psect	nvCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
     9                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    13                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    14                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    15                           	psect	dataBANK4,global,class=BANK4,space=1,delta=1
    16                           	psect	clrtext,global,class=CODE,delta=2
    17                           	psect	inittext,global,class=CODE,delta=2
    18                           	psect	cstackBANK4,global,class=BANK4,space=1,delta=1
    19                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    20                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    21                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    22                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    23                           	psect	text1,local,class=CODE,merge=1,inline,delta=2
    24                           	psect	text2,local,class=CODE,merge=1,delta=2
    25                           	psect	text3,local,class=CODE,merge=1,inline,delta=2
    26                           	psect	text4,local,class=CODE,merge=1,inline,delta=2
    27                           	psect	text5,local,class=CODE,merge=1,inline,delta=2
    28                           	psect	text6,local,class=CODE,merge=1,delta=2
    29                           	psect	text7,local,class=CODE,merge=1,delta=2
    30                           	psect	text8,local,class=CODE,merge=1,inline,delta=2
    31                           	psect	text9,local,class=CODE,merge=1,delta=2
    32                           	psect	text10,local,class=CODE,merge=1,inline,delta=2
    33                           	psect	text11,local,class=CODE,merge=1,delta=2
    34                           	psect	text12,local,class=CODE,merge=1,inline,delta=2
    35                           	psect	text13,local,class=CODE,merge=1,delta=2
    36                           	psect	text14,local,class=CODE,merge=1,delta=2
    37                           	psect	text15,local,class=CODE,merge=1,delta=2
    38                           	psect	text16,local,class=CODE,merge=1,delta=2
    39                           	psect	text17,local,class=CODE,merge=1,delta=2
    40                           	psect	text18,local,class=CODE,merge=1,inline,delta=2
    41                           	psect	text19,local,class=CODE,merge=1,delta=2
    42                           	psect	text20,local,class=CODE,merge=1,delta=2
    43                           	psect	text21,local,class=CODE,merge=1,inline,delta=2
    44                           	psect	text22,local,class=CODE,merge=1,delta=2
    45                           	psect	text23,local,class=CODE,merge=1,delta=2
    46                           	psect	text24,local,class=CODE,merge=1,delta=2
    47                           	psect	text25,local,class=CODE,merge=1,delta=2
    48                           	psect	text26,local,class=CODE,merge=1,delta=2
    49                           	psect	text27,local,class=CODE,merge=1,delta=2
    50                           	psect	text28,local,class=CODE,merge=1,delta=2
    51                           	psect	text29,local,class=CODE,merge=1,delta=2
    52                           	psect	text30,local,class=CODE,merge=1,delta=2
    53                           	psect	text31,local,class=CODE,merge=1,delta=2
    54                           	psect	text32,local,class=CODE,merge=1,delta=2
    55                           	psect	text33,local,class=CODE,merge=1,delta=2
    56                           	psect	text34,local,class=CODE,merge=1,delta=2
    57                           	psect	text35,local,class=CODE,merge=1,delta=2
    58                           	psect	text36,local,class=CODE,merge=1,delta=2
    59                           	psect	text37,local,class=CODE,merge=1,delta=2
    60                           	psect	text38,local,class=CODE,merge=1,inline,delta=2
    61                           	psect	text39,local,class=CODE,merge=1,inline,delta=2
    62                           	psect	text40,local,class=CODE,merge=1,inline,delta=2
    63                           	psect	text41,local,class=CODE,merge=1,inline,delta=2
    64                           	psect	text42,local,class=CODE,merge=1,inline,delta=2
    65                           	psect	text43,local,class=CODE,merge=1,delta=2
    66                           	psect	text44,local,class=CODE,merge=1,delta=2
    67                           	psect	text45,local,class=CODE,merge=1,delta=2
    68                           	psect	text46,local,class=CODE,merge=1,inline,delta=2
    69                           	psect	text47,local,class=CODE,merge=1,delta=2
    70                           	psect	text48,local,class=CODE,merge=1,delta=2
    71                           	psect	text49,local,class=CODE,merge=1,delta=2
    72                           	psect	text50,local,class=CODE,merge=1,delta=2
    73                           	psect	text51,local,class=CODE,merge=1,inline,delta=2
    74                           	psect	text52,local,class=CODE,merge=1,delta=2
    75                           	psect	text53,local,class=CODE,merge=1,delta=2
    76                           	psect	text54,local,class=CODE,merge=1,delta=2
    77                           	psect	text55,local,class=CODE,merge=1,delta=2
    78                           	psect	text56,local,class=CODE,merge=1,delta=2
    79                           	psect	text57,local,class=CODE,merge=1,delta=2
    80                           	psect	text58,local,class=CODE,merge=1,inline,delta=2
    81                           	psect	text59,local,class=CODE,merge=1,delta=2
    82                           	psect	text60,local,class=CODE,merge=1,inline,delta=2
    83                           	psect	text61,local,class=CODE,merge=1,delta=2
    84                           	psect	text62,local,class=CODE,merge=1,inline,delta=2
    85                           	psect	text63,local,class=CODE,merge=1,delta=2
    86                           	psect	text64,local,class=CODE,merge=1,delta=2
    87                           	psect	text65,local,class=CODE,merge=1,delta=2
    88                           	psect	text66,local,class=CODE,merge=1,delta=2
    89                           	psect	text67,local,class=CODE,merge=1,delta=2
    90                           	psect	text68,local,class=CODE,merge=1,delta=2
    91                           	psect	text69,local,class=CODE,merge=1,delta=2
    92                           	psect	text70,local,class=CODE,merge=1,delta=2
    93                           	psect	text71,local,class=CODE,merge=1,delta=2
    94                           	psect	text72,local,class=CODE,merge=1,delta=2
    95                           	psect	text73,local,class=CODE,merge=1,delta=2
    96                           	psect	text74,local,class=CODE,merge=1,delta=2
    97                           	psect	text75,local,class=CODE,merge=1,delta=2
    98                           	psect	text76,local,class=CODE,merge=1,delta=2
    99                           	psect	text77,local,class=CODE,merge=1,delta=2
   100                           	psect	text78,local,class=CODE,merge=1,delta=2
   101                           	psect	text79,local,class=CODE,merge=1,delta=2
   102                           	psect	text80,local,class=CODE,merge=1,delta=2
   103                           	psect	text81,local,class=CODE,merge=1,delta=2
   104                           	psect	text82,local,class=CODE,merge=1,delta=2
   105                           	psect	text83,local,class=CODE,merge=1,delta=2
   106                           	psect	text84,local,class=CODE,merge=1,delta=2
   107                           	psect	text85,local,class=CODE,merge=1,delta=2
   108                           	psect	text86,local,class=CODE,merge=1,delta=2
   109                           	psect	text87,local,class=CODE,merge=1,delta=2
   110                           	psect	text88,local,class=CODE,merge=1,delta=2
   111                           	psect	text89,local,class=CODE,merge=1,delta=2
   112                           	psect	text90,local,class=CODE,merge=1,delta=2
   113                           	psect	text91,local,class=CODE,merge=1,delta=2
   114                           	psect	text92,local,class=CODE,merge=1,delta=2
   115                           	psect	text93,local,class=CODE,merge=1,delta=2
   116                           	psect	text94,local,class=CODE,merge=1,delta=2
   117                           	psect	text95,local,class=CODE,merge=1,delta=2
   118                           	psect	text96,local,class=CODE,merge=1,inline,delta=2
   119                           	psect	text97,local,class=CODE,merge=1,delta=2
   120                           	psect	text98,local,class=CODE,merge=1,delta=2
   121                           	psect	text99,local,class=CODE,merge=1,delta=2
   122                           	psect	text100,local,class=CODE,merge=1,delta=2
   123                           	psect	text101,local,class=CODE,merge=1,inline,delta=2
   124                           	psect	text102,local,class=CODE,merge=1,delta=2
   125                           	psect	text103,local,class=CODE,merge=1,delta=2
   126                           	psect	text104,local,class=CODE,merge=1,delta=2
   127                           	psect	text105,local,class=CODE,merge=1,delta=2
   128                           	psect	text106,local,class=CODE,merge=1,delta=2
   129                           	psect	text107,local,class=CODE,merge=1,delta=2
   130                           	psect	text108,local,class=CODE,merge=1,delta=2
   131                           	psect	text109,local,class=CODE,merge=1,inline,delta=2
   132                           	psect	text110,local,class=CODE,merge=1,delta=2
   133                           	psect	text111,local,class=CODE,merge=1,delta=2
   134                           	psect	text112,local,class=CODE,merge=1,delta=2
   135                           	psect	text113,local,class=CODE,merge=1,inline,delta=2
   136                           	psect	text114,local,class=CODE,merge=1,delta=2
   137                           	psect	text115,local,class=CODE,merge=1,delta=2
   138                           	psect	text116,local,class=CODE,merge=1,delta=2
   139                           	psect	text117,local,class=CODE,merge=1,inline,delta=2
   140                           	psect	text118,local,class=CODE,merge=1,delta=2
   141                           	psect	text119,local,class=CODE,merge=1,delta=2
   142                           	psect	text120,local,class=CODE,merge=1,delta=2
   143                           	psect	text121,local,class=CODE,merge=1,delta=2
   144                           	psect	text122,local,class=CODE,merge=1,inline,delta=2
   145                           	psect	text123,local,class=CODE,merge=1,inline,delta=2
   146                           	psect	text124,local,class=CODE,merge=1,inline,delta=2
   147                           	psect	text125,local,class=CODE,merge=1,inline,delta=2
   148                           	psect	text126,local,class=CODE,merge=1,inline,delta=2
   149                           	psect	text127,local,class=CODE,merge=1,inline,delta=2
   150                           	psect	intentry,global,class=CODE,delta=2
   151                           	psect	text129,local,class=CODE,merge=1,inline,delta=2
   152                           	psect	text130,local,class=CODE,merge=1,inline,delta=2
   153                           	psect	text131,local,class=CODE,merge=1,inline,delta=2
   154                           	psect	text132,local,class=CODE,merge=1,inline,delta=2
   155                           	psect	text133,local,class=CODE,merge=1,inline,delta=2
   156                           	psect	text134,local,class=CODE,merge=1,inline,delta=2
   157                           	psect	text135,local,class=CODE,merge=1,inline,delta=2
   158                           	dabs	1,0x7E,2
   159  0000                     	;# 
   160  0001                     	;# 
   161  0002                     	;# 
   162  0003                     	;# 
   163  0004                     	;# 
   164  0005                     	;# 
   165  0006                     	;# 
   166  0007                     	;# 
   167  0008                     	;# 
   168  0009                     	;# 
   169  000A                     	;# 
   170  000B                     	;# 
   171  000C                     	;# 
   172  000D                     	;# 
   173  000E                     	;# 
   174  0010                     	;# 
   175  0011                     	;# 
   176  0012                     	;# 
   177  0015                     	;# 
   178  0016                     	;# 
   179  0016                     	;# 
   180  0017                     	;# 
   181  0018                     	;# 
   182  0019                     	;# 
   183  001A                     	;# 
   184  001B                     	;# 
   185  001C                     	;# 
   186  008C                     	;# 
   187  008D                     	;# 
   188  008E                     	;# 
   189  0090                     	;# 
   190  0091                     	;# 
   191  0092                     	;# 
   192  0095                     	;# 
   193  0096                     	;# 
   194  0097                     	;# 
   195  0099                     	;# 
   196  009A                     	;# 
   197  009B                     	;# 
   198  009B                     	;# 
   199  009C                     	;# 
   200  009D                     	;# 
   201  009E                     	;# 
   202  010C                     	;# 
   203  010D                     	;# 
   204  010E                     	;# 
   205  0116                     	;# 
   206  0117                     	;# 
   207  011D                     	;# 
   208  018C                     	;# 
   209  018D                     	;# 
   210  018E                     	;# 
   211  0191                     	;# 
   212  0191                     	;# 
   213  0192                     	;# 
   214  0193                     	;# 
   215  0193                     	;# 
   216  0194                     	;# 
   217  0195                     	;# 
   218  0196                     	;# 
   219  0197                     	;# 
   220  0199                     	;# 
   221  019A                     	;# 
   222  019B                     	;# 
   223  019B                     	;# 
   224  019B                     	;# 
   225  019B                     	;# 
   226  019C                     	;# 
   227  019C                     	;# 
   228  019D                     	;# 
   229  019E                     	;# 
   230  019F                     	;# 
   231  020D                     	;# 
   232  0210                     	;# 
   233  0211                     	;# 
   234  0211                     	;# 
   235  0212                     	;# 
   236  0212                     	;# 
   237  0213                     	;# 
   238  0213                     	;# 
   239  0214                     	;# 
   240  0214                     	;# 
   241  0215                     	;# 
   242  0215                     	;# 
   243  0215                     	;# 
   244  0216                     	;# 
   245  0216                     	;# 
   246  0217                     	;# 
   247  0217                     	;# 
   248  0291                     	;# 
   249  0291                     	;# 
   250  0292                     	;# 
   251  0293                     	;# 
   252  0298                     	;# 
   253  0298                     	;# 
   254  0299                     	;# 
   255  029A                     	;# 
   256  0394                     	;# 
   257  0395                     	;# 
   258  0396                     	;# 
   259  0FE4                     	;# 
   260  0FE5                     	;# 
   261  0FE6                     	;# 
   262  0FE7                     	;# 
   263  0FE8                     	;# 
   264  0FE9                     	;# 
   265  0FEA                     	;# 
   266  0FEB                     	;# 
   267  0FED                     	;# 
   268  0FEE                     	;# 
   269  0FEF                     	;# 
   270  0000                     	;# 
   271  0001                     	;# 
   272  0002                     	;# 
   273  0003                     	;# 
   274  0004                     	;# 
   275  0005                     	;# 
   276  0006                     	;# 
   277  0007                     	;# 
   278  0008                     	;# 
   279  0009                     	;# 
   280  000A                     	;# 
   281  000B                     	;# 
   282  000C                     	;# 
   283  000D                     	;# 
   284  000E                     	;# 
   285  0010                     	;# 
   286  0011                     	;# 
   287  0012                     	;# 
   288  0015                     	;# 
   289  0016                     	;# 
   290  0016                     	;# 
   291  0017                     	;# 
   292  0018                     	;# 
   293  0019                     	;# 
   294  001A                     	;# 
   295  001B                     	;# 
   296  001C                     	;# 
   297  008C                     	;# 
   298  008D                     	;# 
   299  008E                     	;# 
   300  0090                     	;# 
   301  0091                     	;# 
   302  0092                     	;# 
   303  0095                     	;# 
   304  0096                     	;# 
   305  0097                     	;# 
   306  0099                     	;# 
   307  009A                     	;# 
   308  009B                     	;# 
   309  009B                     	;# 
   310  009C                     	;# 
   311  009D                     	;# 
   312  009E                     	;# 
   313  010C                     	;# 
   314  010D                     	;# 
   315  010E                     	;# 
   316  0116                     	;# 
   317  0117                     	;# 
   318  011D                     	;# 
   319  018C                     	;# 
   320  018D                     	;# 
   321  018E                     	;# 
   322  0191                     	;# 
   323  0191                     	;# 
   324  0192                     	;# 
   325  0193                     	;# 
   326  0193                     	;# 
   327  0194                     	;# 
   328  0195                     	;# 
   329  0196                     	;# 
   330  0197                     	;# 
   331  0199                     	;# 
   332  019A                     	;# 
   333  019B                     	;# 
   334  019B                     	;# 
   335  019B                     	;# 
   336  019B                     	;# 
   337  019C                     	;# 
   338  019C                     	;# 
   339  019D                     	;# 
   340  019E                     	;# 
   341  019F                     	;# 
   342  020D                     	;# 
   343  0210                     	;# 
   344  0211                     	;# 
   345  0211                     	;# 
   346  0212                     	;# 
   347  0212                     	;# 
   348  0213                     	;# 
   349  0213                     	;# 
   350  0214                     	;# 
   351  0214                     	;# 
   352  0215                     	;# 
   353  0215                     	;# 
   354  0215                     	;# 
   355  0216                     	;# 
   356  0216                     	;# 
   357  0217                     	;# 
   358  0217                     	;# 
   359  0291                     	;# 
   360  0291                     	;# 
   361  0292                     	;# 
   362  0293                     	;# 
   363  0298                     	;# 
   364  0298                     	;# 
   365  0299                     	;# 
   366  029A                     	;# 
   367  0394                     	;# 
   368  0395                     	;# 
   369  0396                     	;# 
   370  0FE4                     	;# 
   371  0FE5                     	;# 
   372  0FE6                     	;# 
   373  0FE7                     	;# 
   374  0FE8                     	;# 
   375  0FE9                     	;# 
   376  0FEA                     	;# 
   377  0FEB                     	;# 
   378  0FED                     	;# 
   379  0FEE                     	;# 
   380  0FEF                     	;# 
   381  0000                     	;# 
   382  0001                     	;# 
   383  0002                     	;# 
   384  0003                     	;# 
   385  0004                     	;# 
   386  0005                     	;# 
   387  0006                     	;# 
   388  0007                     	;# 
   389  0008                     	;# 
   390  0009                     	;# 
   391  000A                     	;# 
   392  000B                     	;# 
   393  000C                     	;# 
   394  000D                     	;# 
   395  000E                     	;# 
   396  0010                     	;# 
   397  0011                     	;# 
   398  0012                     	;# 
   399  0015                     	;# 
   400  0016                     	;# 
   401  0016                     	;# 
   402  0017                     	;# 
   403  0018                     	;# 
   404  0019                     	;# 
   405  001A                     	;# 
   406  001B                     	;# 
   407  001C                     	;# 
   408  008C                     	;# 
   409  008D                     	;# 
   410  008E                     	;# 
   411  0090                     	;# 
   412  0091                     	;# 
   413  0092                     	;# 
   414  0095                     	;# 
   415  0096                     	;# 
   416  0097                     	;# 
   417  0099                     	;# 
   418  009A                     	;# 
   419  009B                     	;# 
   420  009B                     	;# 
   421  009C                     	;# 
   422  009D                     	;# 
   423  009E                     	;# 
   424  010C                     	;# 
   425  010D                     	;# 
   426  010E                     	;# 
   427  0116                     	;# 
   428  0117                     	;# 
   429  011D                     	;# 
   430  018C                     	;# 
   431  018D                     	;# 
   432  018E                     	;# 
   433  0191                     	;# 
   434  0191                     	;# 
   435  0192                     	;# 
   436  0193                     	;# 
   437  0193                     	;# 
   438  0194                     	;# 
   439  0195                     	;# 
   440  0196                     	;# 
   441  0197                     	;# 
   442  0199                     	;# 
   443  019A                     	;# 
   444  019B                     	;# 
   445  019B                     	;# 
   446  019B                     	;# 
   447  019B                     	;# 
   448  019C                     	;# 
   449  019C                     	;# 
   450  019D                     	;# 
   451  019E                     	;# 
   452  019F                     	;# 
   453  020D                     	;# 
   454  0210                     	;# 
   455  0211                     	;# 
   456  0211                     	;# 
   457  0212                     	;# 
   458  0212                     	;# 
   459  0213                     	;# 
   460  0213                     	;# 
   461  0214                     	;# 
   462  0214                     	;# 
   463  0215                     	;# 
   464  0215                     	;# 
   465  0215                     	;# 
   466  0216                     	;# 
   467  0216                     	;# 
   468  0217                     	;# 
   469  0217                     	;# 
   470  0291                     	;# 
   471  0291                     	;# 
   472  0292                     	;# 
   473  0293                     	;# 
   474  0298                     	;# 
   475  0298                     	;# 
   476  0299                     	;# 
   477  029A                     	;# 
   478  0394                     	;# 
   479  0395                     	;# 
   480  0396                     	;# 
   481  0FE4                     	;# 
   482  0FE5                     	;# 
   483  0FE6                     	;# 
   484  0FE7                     	;# 
   485  0FE8                     	;# 
   486  0FE9                     	;# 
   487  0FEA                     	;# 
   488  0FEB                     	;# 
   489  0FED                     	;# 
   490  0FEE                     	;# 
   491  0FEF                     	;# 
   492  0000                     	;# 
   493  0001                     	;# 
   494  0002                     	;# 
   495  0003                     	;# 
   496  0004                     	;# 
   497  0005                     	;# 
   498  0006                     	;# 
   499  0007                     	;# 
   500  0008                     	;# 
   501  0009                     	;# 
   502  000A                     	;# 
   503  000B                     	;# 
   504  000C                     	;# 
   505  000D                     	;# 
   506  000E                     	;# 
   507  0010                     	;# 
   508  0011                     	;# 
   509  0012                     	;# 
   510  0015                     	;# 
   511  0016                     	;# 
   512  0016                     	;# 
   513  0017                     	;# 
   514  0018                     	;# 
   515  0019                     	;# 
   516  001A                     	;# 
   517  001B                     	;# 
   518  001C                     	;# 
   519  008C                     	;# 
   520  008D                     	;# 
   521  008E                     	;# 
   522  0090                     	;# 
   523  0091                     	;# 
   524  0092                     	;# 
   525  0095                     	;# 
   526  0096                     	;# 
   527  0097                     	;# 
   528  0099                     	;# 
   529  009A                     	;# 
   530  009B                     	;# 
   531  009B                     	;# 
   532  009C                     	;# 
   533  009D                     	;# 
   534  009E                     	;# 
   535  010C                     	;# 
   536  010D                     	;# 
   537  010E                     	;# 
   538  0116                     	;# 
   539  0117                     	;# 
   540  011D                     	;# 
   541  018C                     	;# 
   542  018D                     	;# 
   543  018E                     	;# 
   544  0191                     	;# 
   545  0191                     	;# 
   546  0192                     	;# 
   547  0193                     	;# 
   548  0193                     	;# 
   549  0194                     	;# 
   550  0195                     	;# 
   551  0196                     	;# 
   552  0197                     	;# 
   553  0199                     	;# 
   554  019A                     	;# 
   555  019B                     	;# 
   556  019B                     	;# 
   557  019B                     	;# 
   558  019B                     	;# 
   559  019C                     	;# 
   560  019C                     	;# 
   561  019D                     	;# 
   562  019E                     	;# 
   563  019F                     	;# 
   564  020D                     	;# 
   565  0210                     	;# 
   566  0211                     	;# 
   567  0211                     	;# 
   568  0212                     	;# 
   569  0212                     	;# 
   570  0213                     	;# 
   571  0213                     	;# 
   572  0214                     	;# 
   573  0214                     	;# 
   574  0215                     	;# 
   575  0215                     	;# 
   576  0215                     	;# 
   577  0216                     	;# 
   578  0216                     	;# 
   579  0217                     	;# 
   580  0217                     	;# 
   581  0291                     	;# 
   582  0291                     	;# 
   583  0292                     	;# 
   584  0293                     	;# 
   585  0298                     	;# 
   586  0298                     	;# 
   587  0299                     	;# 
   588  029A                     	;# 
   589  0394                     	;# 
   590  0395                     	;# 
   591  0396                     	;# 
   592  0FE4                     	;# 
   593  0FE5                     	;# 
   594  0FE6                     	;# 
   595  0FE7                     	;# 
   596  0FE8                     	;# 
   597  0FE9                     	;# 
   598  0FEA                     	;# 
   599  0FEB                     	;# 
   600  0FED                     	;# 
   601  0FEE                     	;# 
   602  0FEF                     	;# 
   603  0000                     	;# 
   604  0001                     	;# 
   605  0002                     	;# 
   606  0003                     	;# 
   607  0004                     	;# 
   608  0005                     	;# 
   609  0006                     	;# 
   610  0007                     	;# 
   611  0008                     	;# 
   612  0009                     	;# 
   613  000A                     	;# 
   614  000B                     	;# 
   615  000C                     	;# 
   616  000D                     	;# 
   617  000E                     	;# 
   618  0010                     	;# 
   619  0011                     	;# 
   620  0012                     	;# 
   621  0015                     	;# 
   622  0016                     	;# 
   623  0016                     	;# 
   624  0017                     	;# 
   625  0018                     	;# 
   626  0019                     	;# 
   627  001A                     	;# 
   628  001B                     	;# 
   629  001C                     	;# 
   630  008C                     	;# 
   631  008D                     	;# 
   632  008E                     	;# 
   633  0090                     	;# 
   634  0091                     	;# 
   635  0092                     	;# 
   636  0095                     	;# 
   637  0096                     	;# 
   638  0097                     	;# 
   639  0099                     	;# 
   640  009A                     	;# 
   641  009B                     	;# 
   642  009B                     	;# 
   643  009C                     	;# 
   644  009D                     	;# 
   645  009E                     	;# 
   646  010C                     	;# 
   647  010D                     	;# 
   648  010E                     	;# 
   649  0116                     	;# 
   650  0117                     	;# 
   651  011D                     	;# 
   652  018C                     	;# 
   653  018D                     	;# 
   654  018E                     	;# 
   655  0191                     	;# 
   656  0191                     	;# 
   657  0192                     	;# 
   658  0193                     	;# 
   659  0193                     	;# 
   660  0194                     	;# 
   661  0195                     	;# 
   662  0196                     	;# 
   663  0197                     	;# 
   664  0199                     	;# 
   665  019A                     	;# 
   666  019B                     	;# 
   667  019B                     	;# 
   668  019B                     	;# 
   669  019B                     	;# 
   670  019C                     	;# 
   671  019C                     	;# 
   672  019D                     	;# 
   673  019E                     	;# 
   674  019F                     	;# 
   675  020D                     	;# 
   676  0210                     	;# 
   677  0211                     	;# 
   678  0211                     	;# 
   679  0212                     	;# 
   680  0212                     	;# 
   681  0213                     	;# 
   682  0213                     	;# 
   683  0214                     	;# 
   684  0214                     	;# 
   685  0215                     	;# 
   686  0215                     	;# 
   687  0215                     	;# 
   688  0216                     	;# 
   689  0216                     	;# 
   690  0217                     	;# 
   691  0217                     	;# 
   692  0291                     	;# 
   693  0291                     	;# 
   694  0292                     	;# 
   695  0293                     	;# 
   696  0298                     	;# 
   697  0298                     	;# 
   698  0299                     	;# 
   699  029A                     	;# 
   700  0394                     	;# 
   701  0395                     	;# 
   702  0396                     	;# 
   703  0FE4                     	;# 
   704  0FE5                     	;# 
   705  0FE6                     	;# 
   706  0FE7                     	;# 
   707  0FE8                     	;# 
   708  0FE9                     	;# 
   709  0FEA                     	;# 
   710  0FEB                     	;# 
   711  0FED                     	;# 
   712  0FEE                     	;# 
   713  0FEF                     	;# 
   714  0000                     	;# 
   715  0001                     	;# 
   716  0002                     	;# 
   717  0003                     	;# 
   718  0004                     	;# 
   719  0005                     	;# 
   720  0006                     	;# 
   721  0007                     	;# 
   722  0008                     	;# 
   723  0009                     	;# 
   724  000A                     	;# 
   725  000B                     	;# 
   726  000C                     	;# 
   727  000D                     	;# 
   728  000E                     	;# 
   729  0010                     	;# 
   730  0011                     	;# 
   731  0012                     	;# 
   732  0015                     	;# 
   733  0016                     	;# 
   734  0016                     	;# 
   735  0017                     	;# 
   736  0018                     	;# 
   737  0019                     	;# 
   738  001A                     	;# 
   739  001B                     	;# 
   740  001C                     	;# 
   741  008C                     	;# 
   742  008D                     	;# 
   743  008E                     	;# 
   744  0090                     	;# 
   745  0091                     	;# 
   746  0092                     	;# 
   747  0095                     	;# 
   748  0096                     	;# 
   749  0097                     	;# 
   750  0099                     	;# 
   751  009A                     	;# 
   752  009B                     	;# 
   753  009B                     	;# 
   754  009C                     	;# 
   755  009D                     	;# 
   756  009E                     	;# 
   757  010C                     	;# 
   758  010D                     	;# 
   759  010E                     	;# 
   760  0116                     	;# 
   761  0117                     	;# 
   762  011D                     	;# 
   763  018C                     	;# 
   764  018D                     	;# 
   765  018E                     	;# 
   766  0191                     	;# 
   767  0191                     	;# 
   768  0192                     	;# 
   769  0193                     	;# 
   770  0193                     	;# 
   771  0194                     	;# 
   772  0195                     	;# 
   773  0196                     	;# 
   774  0197                     	;# 
   775  0199                     	;# 
   776  019A                     	;# 
   777  019B                     	;# 
   778  019B                     	;# 
   779  019B                     	;# 
   780  019B                     	;# 
   781  019C                     	;# 
   782  019C                     	;# 
   783  019D                     	;# 
   784  019E                     	;# 
   785  019F                     	;# 
   786  020D                     	;# 
   787  0210                     	;# 
   788  0211                     	;# 
   789  0211                     	;# 
   790  0212                     	;# 
   791  0212                     	;# 
   792  0213                     	;# 
   793  0213                     	;# 
   794  0214                     	;# 
   795  0214                     	;# 
   796  0215                     	;# 
   797  0215                     	;# 
   798  0215                     	;# 
   799  0216                     	;# 
   800  0216                     	;# 
   801  0217                     	;# 
   802  0217                     	;# 
   803  0291                     	;# 
   804  0291                     	;# 
   805  0292                     	;# 
   806  0293                     	;# 
   807  0298                     	;# 
   808  0298                     	;# 
   809  0299                     	;# 
   810  029A                     	;# 
   811  0394                     	;# 
   812  0395                     	;# 
   813  0396                     	;# 
   814  0FE4                     	;# 
   815  0FE5                     	;# 
   816  0FE6                     	;# 
   817  0FE7                     	;# 
   818  0FE8                     	;# 
   819  0FE9                     	;# 
   820  0FEA                     	;# 
   821  0FEB                     	;# 
   822  0FED                     	;# 
   823  0FEE                     	;# 
   824  0FEF                     	;# 
   825  0000                     	;# 
   826  0001                     	;# 
   827  0002                     	;# 
   828  0003                     	;# 
   829  0004                     	;# 
   830  0005                     	;# 
   831  0006                     	;# 
   832  0007                     	;# 
   833  0008                     	;# 
   834  0009                     	;# 
   835  000A                     	;# 
   836  000B                     	;# 
   837  000C                     	;# 
   838  000D                     	;# 
   839  000E                     	;# 
   840  0010                     	;# 
   841  0011                     	;# 
   842  0012                     	;# 
   843  0015                     	;# 
   844  0016                     	;# 
   845  0016                     	;# 
   846  0017                     	;# 
   847  0018                     	;# 
   848  0019                     	;# 
   849  001A                     	;# 
   850  001B                     	;# 
   851  001C                     	;# 
   852  008C                     	;# 
   853  008D                     	;# 
   854  008E                     	;# 
   855  0090                     	;# 
   856  0091                     	;# 
   857  0092                     	;# 
   858  0095                     	;# 
   859  0096                     	;# 
   860  0097                     	;# 
   861  0099                     	;# 
   862  009A                     	;# 
   863  009B                     	;# 
   864  009B                     	;# 
   865  009C                     	;# 
   866  009D                     	;# 
   867  009E                     	;# 
   868  010C                     	;# 
   869  010D                     	;# 
   870  010E                     	;# 
   871  0116                     	;# 
   872  0117                     	;# 
   873  011D                     	;# 
   874  018C                     	;# 
   875  018D                     	;# 
   876  018E                     	;# 
   877  0191                     	;# 
   878  0191                     	;# 
   879  0192                     	;# 
   880  0193                     	;# 
   881  0193                     	;# 
   882  0194                     	;# 
   883  0195                     	;# 
   884  0196                     	;# 
   885  0197                     	;# 
   886  0199                     	;# 
   887  019A                     	;# 
   888  019B                     	;# 
   889  019B                     	;# 
   890  019B                     	;# 
   891  019B                     	;# 
   892  019C                     	;# 
   893  019C                     	;# 
   894  019D                     	;# 
   895  019E                     	;# 
   896  019F                     	;# 
   897  020D                     	;# 
   898  0210                     	;# 
   899  0211                     	;# 
   900  0211                     	;# 
   901  0212                     	;# 
   902  0212                     	;# 
   903  0213                     	;# 
   904  0213                     	;# 
   905  0214                     	;# 
   906  0214                     	;# 
   907  0215                     	;# 
   908  0215                     	;# 
   909  0215                     	;# 
   910  0216                     	;# 
   911  0216                     	;# 
   912  0217                     	;# 
   913  0217                     	;# 
   914  0291                     	;# 
   915  0291                     	;# 
   916  0292                     	;# 
   917  0293                     	;# 
   918  0298                     	;# 
   919  0298                     	;# 
   920  0299                     	;# 
   921  029A                     	;# 
   922  0394                     	;# 
   923  0395                     	;# 
   924  0396                     	;# 
   925  0FE4                     	;# 
   926  0FE5                     	;# 
   927  0FE6                     	;# 
   928  0FE7                     	;# 
   929  0FE8                     	;# 
   930  0FE9                     	;# 
   931  0FEA                     	;# 
   932  0FEB                     	;# 
   933  0FED                     	;# 
   934  0FEE                     	;# 
   935  0FEF                     	;# 
   936  0000                     	;# 
   937  0001                     	;# 
   938  0002                     	;# 
   939  0003                     	;# 
   940  0004                     	;# 
   941  0005                     	;# 
   942  0006                     	;# 
   943  0007                     	;# 
   944  0008                     	;# 
   945  0009                     	;# 
   946  000A                     	;# 
   947  000B                     	;# 
   948  000C                     	;# 
   949  000D                     	;# 
   950  000E                     	;# 
   951  0010                     	;# 
   952  0011                     	;# 
   953  0012                     	;# 
   954  0015                     	;# 
   955  0016                     	;# 
   956  0016                     	;# 
   957  0017                     	;# 
   958  0018                     	;# 
   959  0019                     	;# 
   960  001A                     	;# 
   961  001B                     	;# 
   962  001C                     	;# 
   963  008C                     	;# 
   964  008D                     	;# 
   965  008E                     	;# 
   966  0090                     	;# 
   967  0091                     	;# 
   968  0092                     	;# 
   969  0095                     	;# 
   970  0096                     	;# 
   971  0097                     	;# 
   972  0099                     	;# 
   973  009A                     	;# 
   974  009B                     	;# 
   975  009B                     	;# 
   976  009C                     	;# 
   977  009D                     	;# 
   978  009E                     	;# 
   979  010C                     	;# 
   980  010D                     	;# 
   981  010E                     	;# 
   982  0116                     	;# 
   983  0117                     	;# 
   984  011D                     	;# 
   985  018C                     	;# 
   986  018D                     	;# 
   987  018E                     	;# 
   988  0191                     	;# 
   989  0191                     	;# 
   990  0192                     	;# 
   991  0193                     	;# 
   992  0193                     	;# 
   993  0194                     	;# 
   994  0195                     	;# 
   995  0196                     	;# 
   996  0197                     	;# 
   997  0199                     	;# 
   998  019A                     	;# 
   999  019B                     	;# 
  1000  019B                     	;# 
  1001  019B                     	;# 
  1002  019B                     	;# 
  1003  019C                     	;# 
  1004  019C                     	;# 
  1005  019D                     	;# 
  1006  019E                     	;# 
  1007  019F                     	;# 
  1008  020D                     	;# 
  1009  0210                     	;# 
  1010  0211                     	;# 
  1011  0211                     	;# 
  1012  0212                     	;# 
  1013  0212                     	;# 
  1014  0213                     	;# 
  1015  0213                     	;# 
  1016  0214                     	;# 
  1017  0214                     	;# 
  1018  0215                     	;# 
  1019  0215                     	;# 
  1020  0215                     	;# 
  1021  0216                     	;# 
  1022  0216                     	;# 
  1023  0217                     	;# 
  1024  0217                     	;# 
  1025  0291                     	;# 
  1026  0291                     	;# 
  1027  0292                     	;# 
  1028  0293                     	;# 
  1029  0298                     	;# 
  1030  0298                     	;# 
  1031  0299                     	;# 
  1032  029A                     	;# 
  1033  0394                     	;# 
  1034  0395                     	;# 
  1035  0396                     	;# 
  1036  0FE4                     	;# 
  1037  0FE5                     	;# 
  1038  0FE6                     	;# 
  1039  0FE7                     	;# 
  1040  0FE8                     	;# 
  1041  0FE9                     	;# 
  1042  0FEA                     	;# 
  1043  0FEB                     	;# 
  1044  0FED                     	;# 
  1045  0FEE                     	;# 
  1046  0FEF                     	;# 
  1047  0000                     	;# 
  1048  0001                     	;# 
  1049  0002                     	;# 
  1050  0003                     	;# 
  1051  0004                     	;# 
  1052  0005                     	;# 
  1053  0006                     	;# 
  1054  0007                     	;# 
  1055  0008                     	;# 
  1056  0009                     	;# 
  1057  000A                     	;# 
  1058  000B                     	;# 
  1059  000C                     	;# 
  1060  000D                     	;# 
  1061  000E                     	;# 
  1062  0010                     	;# 
  1063  0011                     	;# 
  1064  0012                     	;# 
  1065  0015                     	;# 
  1066  0016                     	;# 
  1067  0016                     	;# 
  1068  0017                     	;# 
  1069  0018                     	;# 
  1070  0019                     	;# 
  1071  001A                     	;# 
  1072  001B                     	;# 
  1073  001C                     	;# 
  1074  008C                     	;# 
  1075  008D                     	;# 
  1076  008E                     	;# 
  1077  0090                     	;# 
  1078  0091                     	;# 
  1079  0092                     	;# 
  1080  0095                     	;# 
  1081  0096                     	;# 
  1082  0097                     	;# 
  1083  0099                     	;# 
  1084  009A                     	;# 
  1085  009B                     	;# 
  1086  009B                     	;# 
  1087  009C                     	;# 
  1088  009D                     	;# 
  1089  009E                     	;# 
  1090  010C                     	;# 
  1091  010D                     	;# 
  1092  010E                     	;# 
  1093  0116                     	;# 
  1094  0117                     	;# 
  1095  011D                     	;# 
  1096  018C                     	;# 
  1097  018D                     	;# 
  1098  018E                     	;# 
  1099  0191                     	;# 
  1100  0191                     	;# 
  1101  0192                     	;# 
  1102  0193                     	;# 
  1103  0193                     	;# 
  1104  0194                     	;# 
  1105  0195                     	;# 
  1106  0196                     	;# 
  1107  0197                     	;# 
  1108  0199                     	;# 
  1109  019A                     	;# 
  1110  019B                     	;# 
  1111  019B                     	;# 
  1112  019B                     	;# 
  1113  019B                     	;# 
  1114  019C                     	;# 
  1115  019C                     	;# 
  1116  019D                     	;# 
  1117  019E                     	;# 
  1118  019F                     	;# 
  1119  020D                     	;# 
  1120  0210                     	;# 
  1121  0211                     	;# 
  1122  0211                     	;# 
  1123  0212                     	;# 
  1124  0212                     	;# 
  1125  0213                     	;# 
  1126  0213                     	;# 
  1127  0214                     	;# 
  1128  0214                     	;# 
  1129  0215                     	;# 
  1130  0215                     	;# 
  1131  0215                     	;# 
  1132  0216                     	;# 
  1133  0216                     	;# 
  1134  0217                     	;# 
  1135  0217                     	;# 
  1136  0291                     	;# 
  1137  0291                     	;# 
  1138  0292                     	;# 
  1139  0293                     	;# 
  1140  0298                     	;# 
  1141  0298                     	;# 
  1142  0299                     	;# 
  1143  029A                     	;# 
  1144  0394                     	;# 
  1145  0395                     	;# 
  1146  0396                     	;# 
  1147  0FE4                     	;# 
  1148  0FE5                     	;# 
  1149  0FE6                     	;# 
  1150  0FE7                     	;# 
  1151  0FE8                     	;# 
  1152  0FE9                     	;# 
  1153  0FEA                     	;# 
  1154  0FEB                     	;# 
  1155  0FED                     	;# 
  1156  0FEE                     	;# 
  1157  0FEF                     	;# 
  1158  0000                     	;# 
  1159  0001                     	;# 
  1160  0002                     	;# 
  1161  0003                     	;# 
  1162  0004                     	;# 
  1163  0005                     	;# 
  1164  0006                     	;# 
  1165  0007                     	;# 
  1166  0008                     	;# 
  1167  0009                     	;# 
  1168  000A                     	;# 
  1169  000B                     	;# 
  1170  000C                     	;# 
  1171  000D                     	;# 
  1172  000E                     	;# 
  1173  0010                     	;# 
  1174  0011                     	;# 
  1175  0012                     	;# 
  1176  0015                     	;# 
  1177  0016                     	;# 
  1178  0016                     	;# 
  1179  0017                     	;# 
  1180  0018                     	;# 
  1181  0019                     	;# 
  1182  001A                     	;# 
  1183  001B                     	;# 
  1184  001C                     	;# 
  1185  008C                     	;# 
  1186  008D                     	;# 
  1187  008E                     	;# 
  1188  0090                     	;# 
  1189  0091                     	;# 
  1190  0092                     	;# 
  1191  0095                     	;# 
  1192  0096                     	;# 
  1193  0097                     	;# 
  1194  0099                     	;# 
  1195  009A                     	;# 
  1196  009B                     	;# 
  1197  009B                     	;# 
  1198  009C                     	;# 
  1199  009D                     	;# 
  1200  009E                     	;# 
  1201  010C                     	;# 
  1202  010D                     	;# 
  1203  010E                     	;# 
  1204  0116                     	;# 
  1205  0117                     	;# 
  1206  011D                     	;# 
  1207  018C                     	;# 
  1208  018D                     	;# 
  1209  018E                     	;# 
  1210  0191                     	;# 
  1211  0191                     	;# 
  1212  0192                     	;# 
  1213  0193                     	;# 
  1214  0193                     	;# 
  1215  0194                     	;# 
  1216  0195                     	;# 
  1217  0196                     	;# 
  1218  0197                     	;# 
  1219  0199                     	;# 
  1220  019A                     	;# 
  1221  019B                     	;# 
  1222  019B                     	;# 
  1223  019B                     	;# 
  1224  019B                     	;# 
  1225  019C                     	;# 
  1226  019C                     	;# 
  1227  019D                     	;# 
  1228  019E                     	;# 
  1229  019F                     	;# 
  1230  020D                     	;# 
  1231  0210                     	;# 
  1232  0211                     	;# 
  1233  0211                     	;# 
  1234  0212                     	;# 
  1235  0212                     	;# 
  1236  0213                     	;# 
  1237  0213                     	;# 
  1238  0214                     	;# 
  1239  0214                     	;# 
  1240  0215                     	;# 
  1241  0215                     	;# 
  1242  0215                     	;# 
  1243  0216                     	;# 
  1244  0216                     	;# 
  1245  0217                     	;# 
  1246  0217                     	;# 
  1247  0291                     	;# 
  1248  0291                     	;# 
  1249  0292                     	;# 
  1250  0293                     	;# 
  1251  0298                     	;# 
  1252  0298                     	;# 
  1253  0299                     	;# 
  1254  029A                     	;# 
  1255  0394                     	;# 
  1256  0395                     	;# 
  1257  0396                     	;# 
  1258  0FE4                     	;# 
  1259  0FE5                     	;# 
  1260  0FE6                     	;# 
  1261  0FE7                     	;# 
  1262  0FE8                     	;# 
  1263  0FE9                     	;# 
  1264  0FEA                     	;# 
  1265  0FEB                     	;# 
  1266  0FED                     	;# 
  1267  0FEE                     	;# 
  1268  0FEF                     	;# 
  1269  0000                     	;# 
  1270  0001                     	;# 
  1271  0002                     	;# 
  1272  0003                     	;# 
  1273  0004                     	;# 
  1274  0005                     	;# 
  1275  0006                     	;# 
  1276  0007                     	;# 
  1277  0008                     	;# 
  1278  0009                     	;# 
  1279  000A                     	;# 
  1280  000B                     	;# 
  1281  000C                     	;# 
  1282  000D                     	;# 
  1283  000E                     	;# 
  1284  0010                     	;# 
  1285  0011                     	;# 
  1286  0012                     	;# 
  1287  0015                     	;# 
  1288  0016                     	;# 
  1289  0016                     	;# 
  1290  0017                     	;# 
  1291  0018                     	;# 
  1292  0019                     	;# 
  1293  001A                     	;# 
  1294  001B                     	;# 
  1295  001C                     	;# 
  1296  008C                     	;# 
  1297  008D                     	;# 
  1298  008E                     	;# 
  1299  0090                     	;# 
  1300  0091                     	;# 
  1301  0092                     	;# 
  1302  0095                     	;# 
  1303  0096                     	;# 
  1304  0097                     	;# 
  1305  0099                     	;# 
  1306  009A                     	;# 
  1307  009B                     	;# 
  1308  009B                     	;# 
  1309  009C                     	;# 
  1310  009D                     	;# 
  1311  009E                     	;# 
  1312  010C                     	;# 
  1313  010D                     	;# 
  1314  010E                     	;# 
  1315  0116                     	;# 
  1316  0117                     	;# 
  1317  011D                     	;# 
  1318  018C                     	;# 
  1319  018D                     	;# 
  1320  018E                     	;# 
  1321  0191                     	;# 
  1322  0191                     	;# 
  1323  0192                     	;# 
  1324  0193                     	;# 
  1325  0193                     	;# 
  1326  0194                     	;# 
  1327  0195                     	;# 
  1328  0196                     	;# 
  1329  0197                     	;# 
  1330  0199                     	;# 
  1331  019A                     	;# 
  1332  019B                     	;# 
  1333  019B                     	;# 
  1334  019B                     	;# 
  1335  019B                     	;# 
  1336  019C                     	;# 
  1337  019C                     	;# 
  1338  019D                     	;# 
  1339  019E                     	;# 
  1340  019F                     	;# 
  1341  020D                     	;# 
  1342  0210                     	;# 
  1343  0211                     	;# 
  1344  0211                     	;# 
  1345  0212                     	;# 
  1346  0212                     	;# 
  1347  0213                     	;# 
  1348  0213                     	;# 
  1349  0214                     	;# 
  1350  0214                     	;# 
  1351  0215                     	;# 
  1352  0215                     	;# 
  1353  0215                     	;# 
  1354  0216                     	;# 
  1355  0216                     	;# 
  1356  0217                     	;# 
  1357  0217                     	;# 
  1358  0291                     	;# 
  1359  0291                     	;# 
  1360  0292                     	;# 
  1361  0293                     	;# 
  1362  0298                     	;# 
  1363  0298                     	;# 
  1364  0299                     	;# 
  1365  029A                     	;# 
  1366  0394                     	;# 
  1367  0395                     	;# 
  1368  0396                     	;# 
  1369  0FE4                     	;# 
  1370  0FE5                     	;# 
  1371  0FE6                     	;# 
  1372  0FE7                     	;# 
  1373  0FE8                     	;# 
  1374  0FE9                     	;# 
  1375  0FEA                     	;# 
  1376  0FEB                     	;# 
  1377  0FED                     	;# 
  1378  0FEE                     	;# 
  1379  0FEF                     	;# 
  1380  0000                     	;# 
  1381  0001                     	;# 
  1382  0002                     	;# 
  1383  0003                     	;# 
  1384  0004                     	;# 
  1385  0005                     	;# 
  1386  0006                     	;# 
  1387  0007                     	;# 
  1388  0008                     	;# 
  1389  0009                     	;# 
  1390  000A                     	;# 
  1391  000B                     	;# 
  1392  000C                     	;# 
  1393  000D                     	;# 
  1394  000E                     	;# 
  1395  0010                     	;# 
  1396  0011                     	;# 
  1397  0012                     	;# 
  1398  0015                     	;# 
  1399  0016                     	;# 
  1400  0016                     	;# 
  1401  0017                     	;# 
  1402  0018                     	;# 
  1403  0019                     	;# 
  1404  001A                     	;# 
  1405  001B                     	;# 
  1406  001C                     	;# 
  1407  008C                     	;# 
  1408  008D                     	;# 
  1409  008E                     	;# 
  1410  0090                     	;# 
  1411  0091                     	;# 
  1412  0092                     	;# 
  1413  0095                     	;# 
  1414  0096                     	;# 
  1415  0097                     	;# 
  1416  0099                     	;# 
  1417  009A                     	;# 
  1418  009B                     	;# 
  1419  009B                     	;# 
  1420  009C                     	;# 
  1421  009D                     	;# 
  1422  009E                     	;# 
  1423  010C                     	;# 
  1424  010D                     	;# 
  1425  010E                     	;# 
  1426  0116                     	;# 
  1427  0117                     	;# 
  1428  011D                     	;# 
  1429  018C                     	;# 
  1430  018D                     	;# 
  1431  018E                     	;# 
  1432  0191                     	;# 
  1433  0191                     	;# 
  1434  0192                     	;# 
  1435  0193                     	;# 
  1436  0193                     	;# 
  1437  0194                     	;# 
  1438  0195                     	;# 
  1439  0196                     	;# 
  1440  0197                     	;# 
  1441  0199                     	;# 
  1442  019A                     	;# 
  1443  019B                     	;# 
  1444  019B                     	;# 
  1445  019B                     	;# 
  1446  019B                     	;# 
  1447  019C                     	;# 
  1448  019C                     	;# 
  1449  019D                     	;# 
  1450  019E                     	;# 
  1451  019F                     	;# 
  1452  020D                     	;# 
  1453  0210                     	;# 
  1454  0211                     	;# 
  1455  0211                     	;# 
  1456  0212                     	;# 
  1457  0212                     	;# 
  1458  0213                     	;# 
  1459  0213                     	;# 
  1460  0214                     	;# 
  1461  0214                     	;# 
  1462  0215                     	;# 
  1463  0215                     	;# 
  1464  0215                     	;# 
  1465  0216                     	;# 
  1466  0216                     	;# 
  1467  0217                     	;# 
  1468  0217                     	;# 
  1469  0291                     	;# 
  1470  0291                     	;# 
  1471  0292                     	;# 
  1472  0293                     	;# 
  1473  0298                     	;# 
  1474  0298                     	;# 
  1475  0299                     	;# 
  1476  029A                     	;# 
  1477  0394                     	;# 
  1478  0395                     	;# 
  1479  0396                     	;# 
  1480  0FE4                     	;# 
  1481  0FE5                     	;# 
  1482  0FE6                     	;# 
  1483  0FE7                     	;# 
  1484  0FE8                     	;# 
  1485  0FE9                     	;# 
  1486  0FEA                     	;# 
  1487  0FEB                     	;# 
  1488  0FED                     	;# 
  1489  0FEE                     	;# 
  1490  0FEF                     	;# 
  1491  0000                     	;# 
  1492  0001                     	;# 
  1493  0002                     	;# 
  1494  0003                     	;# 
  1495  0004                     	;# 
  1496  0005                     	;# 
  1497  0006                     	;# 
  1498  0007                     	;# 
  1499  0008                     	;# 
  1500  0009                     	;# 
  1501  000A                     	;# 
  1502  000B                     	;# 
  1503  000C                     	;# 
  1504  000D                     	;# 
  1505  000E                     	;# 
  1506  0010                     	;# 
  1507  0011                     	;# 
  1508  0012                     	;# 
  1509  0015                     	;# 
  1510  0016                     	;# 
  1511  0016                     	;# 
  1512  0017                     	;# 
  1513  0018                     	;# 
  1514  0019                     	;# 
  1515  001A                     	;# 
  1516  001B                     	;# 
  1517  001C                     	;# 
  1518  008C                     	;# 
  1519  008D                     	;# 
  1520  008E                     	;# 
  1521  0090                     	;# 
  1522  0091                     	;# 
  1523  0092                     	;# 
  1524  0095                     	;# 
  1525  0096                     	;# 
  1526  0097                     	;# 
  1527  0099                     	;# 
  1528  009A                     	;# 
  1529  009B                     	;# 
  1530  009B                     	;# 
  1531  009C                     	;# 
  1532  009D                     	;# 
  1533  009E                     	;# 
  1534  010C                     	;# 
  1535  010D                     	;# 
  1536  010E                     	;# 
  1537  0116                     	;# 
  1538  0117                     	;# 
  1539  011D                     	;# 
  1540  018C                     	;# 
  1541  018D                     	;# 
  1542  018E                     	;# 
  1543  0191                     	;# 
  1544  0191                     	;# 
  1545  0192                     	;# 
  1546  0193                     	;# 
  1547  0193                     	;# 
  1548  0194                     	;# 
  1549  0195                     	;# 
  1550  0196                     	;# 
  1551  0197                     	;# 
  1552  0199                     	;# 
  1553  019A                     	;# 
  1554  019B                     	;# 
  1555  019B                     	;# 
  1556  019B                     	;# 
  1557  019B                     	;# 
  1558  019C                     	;# 
  1559  019C                     	;# 
  1560  019D                     	;# 
  1561  019E                     	;# 
  1562  019F                     	;# 
  1563  020D                     	;# 
  1564  0210                     	;# 
  1565  0211                     	;# 
  1566  0211                     	;# 
  1567  0212                     	;# 
  1568  0212                     	;# 
  1569  0213                     	;# 
  1570  0213                     	;# 
  1571  0214                     	;# 
  1572  0214                     	;# 
  1573  0215                     	;# 
  1574  0215                     	;# 
  1575  0215                     	;# 
  1576  0216                     	;# 
  1577  0216                     	;# 
  1578  0217                     	;# 
  1579  0217                     	;# 
  1580  0291                     	;# 
  1581  0291                     	;# 
  1582  0292                     	;# 
  1583  0293                     	;# 
  1584  0298                     	;# 
  1585  0298                     	;# 
  1586  0299                     	;# 
  1587  029A                     	;# 
  1588  0394                     	;# 
  1589  0395                     	;# 
  1590  0396                     	;# 
  1591  0FE4                     	;# 
  1592  0FE5                     	;# 
  1593  0FE6                     	;# 
  1594  0FE7                     	;# 
  1595  0FE8                     	;# 
  1596  0FE9                     	;# 
  1597  0FEA                     	;# 
  1598  0FEB                     	;# 
  1599  0FED                     	;# 
  1600  0FEE                     	;# 
  1601  0FEF                     	;# 
  1602  0000                     	;# 
  1603  0001                     	;# 
  1604  0002                     	;# 
  1605  0003                     	;# 
  1606  0004                     	;# 
  1607  0005                     	;# 
  1608  0006                     	;# 
  1609  0007                     	;# 
  1610  0008                     	;# 
  1611  0009                     	;# 
  1612  000A                     	;# 
  1613  000B                     	;# 
  1614  000C                     	;# 
  1615  000D                     	;# 
  1616  000E                     	;# 
  1617  0010                     	;# 
  1618  0011                     	;# 
  1619  0012                     	;# 
  1620  0015                     	;# 
  1621  0016                     	;# 
  1622  0016                     	;# 
  1623  0017                     	;# 
  1624  0018                     	;# 
  1625  0019                     	;# 
  1626  001A                     	;# 
  1627  001B                     	;# 
  1628  001C                     	;# 
  1629  008C                     	;# 
  1630  008D                     	;# 
  1631  008E                     	;# 
  1632  0090                     	;# 
  1633  0091                     	;# 
  1634  0092                     	;# 
  1635  0095                     	;# 
  1636  0096                     	;# 
  1637  0097                     	;# 
  1638  0099                     	;# 
  1639  009A                     	;# 
  1640  009B                     	;# 
  1641  009B                     	;# 
  1642  009C                     	;# 
  1643  009D                     	;# 
  1644  009E                     	;# 
  1645  010C                     	;# 
  1646  010D                     	;# 
  1647  010E                     	;# 
  1648  0116                     	;# 
  1649  0117                     	;# 
  1650  011D                     	;# 
  1651  018C                     	;# 
  1652  018D                     	;# 
  1653  018E                     	;# 
  1654  0191                     	;# 
  1655  0191                     	;# 
  1656  0192                     	;# 
  1657  0193                     	;# 
  1658  0193                     	;# 
  1659  0194                     	;# 
  1660  0195                     	;# 
  1661  0196                     	;# 
  1662  0197                     	;# 
  1663  0199                     	;# 
  1664  019A                     	;# 
  1665  019B                     	;# 
  1666  019B                     	;# 
  1667  019B                     	;# 
  1668  019B                     	;# 
  1669  019C                     	;# 
  1670  019C                     	;# 
  1671  019D                     	;# 
  1672  019E                     	;# 
  1673  019F                     	;# 
  1674  020D                     	;# 
  1675  0210                     	;# 
  1676  0211                     	;# 
  1677  0211                     	;# 
  1678  0212                     	;# 
  1679  0212                     	;# 
  1680  0213                     	;# 
  1681  0213                     	;# 
  1682  0214                     	;# 
  1683  0214                     	;# 
  1684  0215                     	;# 
  1685  0215                     	;# 
  1686  0215                     	;# 
  1687  0216                     	;# 
  1688  0216                     	;# 
  1689  0217                     	;# 
  1690  0217                     	;# 
  1691  0291                     	;# 
  1692  0291                     	;# 
  1693  0292                     	;# 
  1694  0293                     	;# 
  1695  0298                     	;# 
  1696  0298                     	;# 
  1697  0299                     	;# 
  1698  029A                     	;# 
  1699  0394                     	;# 
  1700  0395                     	;# 
  1701  0396                     	;# 
  1702  0FE4                     	;# 
  1703  0FE5                     	;# 
  1704  0FE6                     	;# 
  1705  0FE7                     	;# 
  1706  0FE8                     	;# 
  1707  0FE9                     	;# 
  1708  0FEA                     	;# 
  1709  0FEB                     	;# 
  1710  0FED                     	;# 
  1711  0FEE                     	;# 
  1712  0FEF                     	;# 
  1713  0000                     	;# 
  1714  0001                     	;# 
  1715  0002                     	;# 
  1716  0003                     	;# 
  1717  0004                     	;# 
  1718  0005                     	;# 
  1719  0006                     	;# 
  1720  0007                     	;# 
  1721  0008                     	;# 
  1722  0009                     	;# 
  1723  000A                     	;# 
  1724  000B                     	;# 
  1725  000C                     	;# 
  1726  000D                     	;# 
  1727  000E                     	;# 
  1728  0010                     	;# 
  1729  0011                     	;# 
  1730  0012                     	;# 
  1731  0015                     	;# 
  1732  0016                     	;# 
  1733  0016                     	;# 
  1734  0017                     	;# 
  1735  0018                     	;# 
  1736  0019                     	;# 
  1737  001A                     	;# 
  1738  001B                     	;# 
  1739  001C                     	;# 
  1740  008C                     	;# 
  1741  008D                     	;# 
  1742  008E                     	;# 
  1743  0090                     	;# 
  1744  0091                     	;# 
  1745  0092                     	;# 
  1746  0095                     	;# 
  1747  0096                     	;# 
  1748  0097                     	;# 
  1749  0099                     	;# 
  1750  009A                     	;# 
  1751  009B                     	;# 
  1752  009B                     	;# 
  1753  009C                     	;# 
  1754  009D                     	;# 
  1755  009E                     	;# 
  1756  010C                     	;# 
  1757  010D                     	;# 
  1758  010E                     	;# 
  1759  0116                     	;# 
  1760  0117                     	;# 
  1761  011D                     	;# 
  1762  018C                     	;# 
  1763  018D                     	;# 
  1764  018E                     	;# 
  1765  0191                     	;# 
  1766  0191                     	;# 
  1767  0192                     	;# 
  1768  0193                     	;# 
  1769  0193                     	;# 
  1770  0194                     	;# 
  1771  0195                     	;# 
  1772  0196                     	;# 
  1773  0197                     	;# 
  1774  0199                     	;# 
  1775  019A                     	;# 
  1776  019B                     	;# 
  1777  019B                     	;# 
  1778  019B                     	;# 
  1779  019B                     	;# 
  1780  019C                     	;# 
  1781  019C                     	;# 
  1782  019D                     	;# 
  1783  019E                     	;# 
  1784  019F                     	;# 
  1785  020D                     	;# 
  1786  0210                     	;# 
  1787  0211                     	;# 
  1788  0211                     	;# 
  1789  0212                     	;# 
  1790  0212                     	;# 
  1791  0213                     	;# 
  1792  0213                     	;# 
  1793  0214                     	;# 
  1794  0214                     	;# 
  1795  0215                     	;# 
  1796  0215                     	;# 
  1797  0215                     	;# 
  1798  0216                     	;# 
  1799  0216                     	;# 
  1800  0217                     	;# 
  1801  0217                     	;# 
  1802  0291                     	;# 
  1803  0291                     	;# 
  1804  0292                     	;# 
  1805  0293                     	;# 
  1806  0298                     	;# 
  1807  0298                     	;# 
  1808  0299                     	;# 
  1809  029A                     	;# 
  1810  0394                     	;# 
  1811  0395                     	;# 
  1812  0396                     	;# 
  1813  0FE4                     	;# 
  1814  0FE5                     	;# 
  1815  0FE6                     	;# 
  1816  0FE7                     	;# 
  1817  0FE8                     	;# 
  1818  0FE9                     	;# 
  1819  0FEA                     	;# 
  1820  0FEB                     	;# 
  1821  0FED                     	;# 
  1822  0FEE                     	;# 
  1823  0FEF                     	;# 
  1824  0000                     	;# 
  1825  0001                     	;# 
  1826  0002                     	;# 
  1827  0003                     	;# 
  1828  0004                     	;# 
  1829  0005                     	;# 
  1830  0006                     	;# 
  1831  0007                     	;# 
  1832  0008                     	;# 
  1833  0009                     	;# 
  1834  000A                     	;# 
  1835  000B                     	;# 
  1836  000C                     	;# 
  1837  000D                     	;# 
  1838  000E                     	;# 
  1839  0010                     	;# 
  1840  0011                     	;# 
  1841  0012                     	;# 
  1842  0015                     	;# 
  1843  0016                     	;# 
  1844  0016                     	;# 
  1845  0017                     	;# 
  1846  0018                     	;# 
  1847  0019                     	;# 
  1848  001A                     	;# 
  1849  001B                     	;# 
  1850  001C                     	;# 
  1851  008C                     	;# 
  1852  008D                     	;# 
  1853  008E                     	;# 
  1854  0090                     	;# 
  1855  0091                     	;# 
  1856  0092                     	;# 
  1857  0095                     	;# 
  1858  0096                     	;# 
  1859  0097                     	;# 
  1860  0099                     	;# 
  1861  009A                     	;# 
  1862  009B                     	;# 
  1863  009B                     	;# 
  1864  009C                     	;# 
  1865  009D                     	;# 
  1866  009E                     	;# 
  1867  010C                     	;# 
  1868  010D                     	;# 
  1869  010E                     	;# 
  1870  0116                     	;# 
  1871  0117                     	;# 
  1872  011D                     	;# 
  1873  018C                     	;# 
  1874  018D                     	;# 
  1875  018E                     	;# 
  1876  0191                     	;# 
  1877  0191                     	;# 
  1878  0192                     	;# 
  1879  0193                     	;# 
  1880  0193                     	;# 
  1881  0194                     	;# 
  1882  0195                     	;# 
  1883  0196                     	;# 
  1884  0197                     	;# 
  1885  0199                     	;# 
  1886  019A                     	;# 
  1887  019B                     	;# 
  1888  019B                     	;# 
  1889  019B                     	;# 
  1890  019B                     	;# 
  1891  019C                     	;# 
  1892  019C                     	;# 
  1893  019D                     	;# 
  1894  019E                     	;# 
  1895  019F                     	;# 
  1896  020D                     	;# 
  1897  0210                     	;# 
  1898  0211                     	;# 
  1899  0211                     	;# 
  1900  0212                     	;# 
  1901  0212                     	;# 
  1902  0213                     	;# 
  1903  0213                     	;# 
  1904  0214                     	;# 
  1905  0214                     	;# 
  1906  0215                     	;# 
  1907  0215                     	;# 
  1908  0215                     	;# 
  1909  0216                     	;# 
  1910  0216                     	;# 
  1911  0217                     	;# 
  1912  0217                     	;# 
  1913  0291                     	;# 
  1914  0291                     	;# 
  1915  0292                     	;# 
  1916  0293                     	;# 
  1917  0298                     	;# 
  1918  0298                     	;# 
  1919  0299                     	;# 
  1920  029A                     	;# 
  1921  0394                     	;# 
  1922  0395                     	;# 
  1923  0396                     	;# 
  1924  0FE4                     	;# 
  1925  0FE5                     	;# 
  1926  0FE6                     	;# 
  1927  0FE7                     	;# 
  1928  0FE8                     	;# 
  1929  0FE9                     	;# 
  1930  0FEA                     	;# 
  1931  0FEB                     	;# 
  1932  0FED                     	;# 
  1933  0FEE                     	;# 
  1934  0FEF                     	;# 
  1935  0000                     	;# 
  1936  0001                     	;# 
  1937  0002                     	;# 
  1938  0003                     	;# 
  1939  0004                     	;# 
  1940  0005                     	;# 
  1941  0006                     	;# 
  1942  0007                     	;# 
  1943  0008                     	;# 
  1944  0009                     	;# 
  1945  000A                     	;# 
  1946  000B                     	;# 
  1947  000C                     	;# 
  1948  000D                     	;# 
  1949  000E                     	;# 
  1950  0010                     	;# 
  1951  0011                     	;# 
  1952  0012                     	;# 
  1953  0015                     	;# 
  1954  0016                     	;# 
  1955  0016                     	;# 
  1956  0017                     	;# 
  1957  0018                     	;# 
  1958  0019                     	;# 
  1959  001A                     	;# 
  1960  001B                     	;# 
  1961  001C                     	;# 
  1962  008C                     	;# 
  1963  008D                     	;# 
  1964  008E                     	;# 
  1965  0090                     	;# 
  1966  0091                     	;# 
  1967  0092                     	;# 
  1968  0095                     	;# 
  1969  0096                     	;# 
  1970  0097                     	;# 
  1971  0099                     	;# 
  1972  009A                     	;# 
  1973  009B                     	;# 
  1974  009B                     	;# 
  1975  009C                     	;# 
  1976  009D                     	;# 
  1977  009E                     	;# 
  1978  010C                     	;# 
  1979  010D                     	;# 
  1980  010E                     	;# 
  1981  0116                     	;# 
  1982  0117                     	;# 
  1983  011D                     	;# 
  1984  018C                     	;# 
  1985  018D                     	;# 
  1986  018E                     	;# 
  1987  0191                     	;# 
  1988  0191                     	;# 
  1989  0192                     	;# 
  1990  0193                     	;# 
  1991  0193                     	;# 
  1992  0194                     	;# 
  1993  0195                     	;# 
  1994  0196                     	;# 
  1995  0197                     	;# 
  1996  0199                     	;# 
  1997  019A                     	;# 
  1998  019B                     	;# 
  1999  019B                     	;# 
  2000  019B                     	;# 
  2001  019B                     	;# 
  2002  019C                     	;# 
  2003  019C                     	;# 
  2004  019D                     	;# 
  2005  019E                     	;# 
  2006  019F                     	;# 
  2007  020D                     	;# 
  2008  0210                     	;# 
  2009  0211                     	;# 
  2010  0211                     	;# 
  2011  0212                     	;# 
  2012  0212                     	;# 
  2013  0213                     	;# 
  2014  0213                     	;# 
  2015  0214                     	;# 
  2016  0214                     	;# 
  2017  0215                     	;# 
  2018  0215                     	;# 
  2019  0215                     	;# 
  2020  0216                     	;# 
  2021  0216                     	;# 
  2022  0217                     	;# 
  2023  0217                     	;# 
  2024  0291                     	;# 
  2025  0291                     	;# 
  2026  0292                     	;# 
  2027  0293                     	;# 
  2028  0298                     	;# 
  2029  0298                     	;# 
  2030  0299                     	;# 
  2031  029A                     	;# 
  2032  0394                     	;# 
  2033  0395                     	;# 
  2034  0396                     	;# 
  2035  0FE4                     	;# 
  2036  0FE5                     	;# 
  2037  0FE6                     	;# 
  2038  0FE7                     	;# 
  2039  0FE8                     	;# 
  2040  0FE9                     	;# 
  2041  0FEA                     	;# 
  2042  0FEB                     	;# 
  2043  0FED                     	;# 
  2044  0FEE                     	;# 
  2045  0FEF                     	;# 
  2046  0000                     	;# 
  2047  0001                     	;# 
  2048  0002                     	;# 
  2049  0003                     	;# 
  2050  0004                     	;# 
  2051  0005                     	;# 
  2052  0006                     	;# 
  2053  0007                     	;# 
  2054  0008                     	;# 
  2055  0009                     	;# 
  2056  000A                     	;# 
  2057  000B                     	;# 
  2058  000C                     	;# 
  2059  000D                     	;# 
  2060  000E                     	;# 
  2061  0010                     	;# 
  2062  0011                     	;# 
  2063  0012                     	;# 
  2064  0015                     	;# 
  2065  0016                     	;# 
  2066  0016                     	;# 
  2067  0017                     	;# 
  2068  0018                     	;# 
  2069  0019                     	;# 
  2070  001A                     	;# 
  2071  001B                     	;# 
  2072  001C                     	;# 
  2073  008C                     	;# 
  2074  008D                     	;# 
  2075  008E                     	;# 
  2076  0090                     	;# 
  2077  0091                     	;# 
  2078  0092                     	;# 
  2079  0095                     	;# 
  2080  0096                     	;# 
  2081  0097                     	;# 
  2082  0099                     	;# 
  2083  009A                     	;# 
  2084  009B                     	;# 
  2085  009B                     	;# 
  2086  009C                     	;# 
  2087  009D                     	;# 
  2088  009E                     	;# 
  2089  010C                     	;# 
  2090  010D                     	;# 
  2091  010E                     	;# 
  2092  0116                     	;# 
  2093  0117                     	;# 
  2094  011D                     	;# 
  2095  018C                     	;# 
  2096  018D                     	;# 
  2097  018E                     	;# 
  2098  0191                     	;# 
  2099  0191                     	;# 
  2100  0192                     	;# 
  2101  0193                     	;# 
  2102  0193                     	;# 
  2103  0194                     	;# 
  2104  0195                     	;# 
  2105  0196                     	;# 
  2106  0197                     	;# 
  2107  0199                     	;# 
  2108  019A                     	;# 
  2109  019B                     	;# 
  2110  019B                     	;# 
  2111  019B                     	;# 
  2112  019B                     	;# 
  2113  019C                     	;# 
  2114  019C                     	;# 
  2115  019D                     	;# 
  2116  019E                     	;# 
  2117  019F                     	;# 
  2118  020D                     	;# 
  2119  0210                     	;# 
  2120  0211                     	;# 
  2121  0211                     	;# 
  2122  0212                     	;# 
  2123  0212                     	;# 
  2124  0213                     	;# 
  2125  0213                     	;# 
  2126  0214                     	;# 
  2127  0214                     	;# 
  2128  0215                     	;# 
  2129  0215                     	;# 
  2130  0215                     	;# 
  2131  0216                     	;# 
  2132  0216                     	;# 
  2133  0217                     	;# 
  2134  0217                     	;# 
  2135  0291                     	;# 
  2136  0291                     	;# 
  2137  0292                     	;# 
  2138  0293                     	;# 
  2139  0298                     	;# 
  2140  0298                     	;# 
  2141  0299                     	;# 
  2142  029A                     	;# 
  2143  0394                     	;# 
  2144  0395                     	;# 
  2145  0396                     	;# 
  2146  0FE4                     	;# 
  2147  0FE5                     	;# 
  2148  0FE6                     	;# 
  2149  0FE7                     	;# 
  2150  0FE8                     	;# 
  2151  0FE9                     	;# 
  2152  0FEA                     	;# 
  2153  0FEB                     	;# 
  2154  0FED                     	;# 
  2155  0FEE                     	;# 
  2156  0FEF                     	;# 
  2157                           
  2158                           	psect	idataBANK4
  2159  1067                     __pidataBANK4:	
  2160                           
  2161                           ;initializer for __product
  2162  1067  3463               	retlw	99
  2163  1068  3402               	retlw	2
  2164  1069  3400               	retlw	0
  2165  106A  3400               	retlw	0
  2166  106B  3400               	retlw	0
  2167  106C  3400               	retlw	0
  2168  106D  3400               	retlw	0
  2169  106E  3400               	retlw	0
  2170  106F  3400               	retlw	0
  2171  1070  3400               	retlw	0
  2172  1071  3400               	retlw	0
  2173  1072  3400               	retlw	0
  2174  1073  34FF               	retlw	255
  2175  1074  34FF               	retlw	255
  2176  1075  34FF               	retlw	255
  2177  1076  3400               	retlw	0
  2178  1077  3400               	retlw	0
  2179  1078  3400               	retlw	0
  2180  1079  3400               	retlw	0
  2181  107A  3400               	retlw	0
  2182  107B  3400               	retlw	0
  2183  107C  3400               	retlw	0
  2184  107D  3400               	retlw	0
  2185  107E  3400               	retlw	0
  2186  107F  3400               	retlw	0
  2187  1080  3400               	retlw	0
  2188  1081  3400               	retlw	0
  2189  1082  3400               	retlw	0
  2190  1083  3400               	retlw	0
  2191  1084  3400               	retlw	0
  2192  1085  3400               	retlw	0
  2193  1086  3400               	retlw	0
  2194                           
  2195                           	psect	stringtext
  2196  1000                     __pstringtext:	
  2197  1000                     _CC2500_registers_address:	
  2198  1000  3403               	retlw	3
  2199  1001  3416               	retlw	22
  2200  1002  3417               	retlw	23
  2201  1003  341E               	retlw	30
  2202  1004  341F               	retlw	31
  2203  1005  3420               	retlw	32
  2204  1006  342A               	retlw	42
  2205  1007  342B               	retlw	43
  2206  1008  340B               	retlw	11
  2207  1009  340C               	retlw	12
  2208  100A  340D               	retlw	13
  2209  100B  340E               	retlw	14
  2210  100C  340F               	retlw	15
  2211  100D  3410               	retlw	16
  2212  100E  3411               	retlw	17
  2213  100F  3412               	retlw	18
  2214  1010  3413               	retlw	19
  2215  1011  3414               	retlw	20
  2216  1012  340A               	retlw	10
  2217  1013  3415               	retlw	21
  2218  1014  3421               	retlw	33
  2219  1015  3422               	retlw	34
  2220  1016  3418               	retlw	24
  2221  1017  3419               	retlw	25
  2222  1018  341A               	retlw	26
  2223  1019  341B               	retlw	27
  2224  101A  341C               	retlw	28
  2225  101B  341D               	retlw	29
  2226  101C  3423               	retlw	35
  2227  101D  3424               	retlw	36
  2228  101E  3425               	retlw	37
  2229  101F  3426               	retlw	38
  2230  1020  3429               	retlw	41
  2231  1021  342C               	retlw	44
  2232  1022  342D               	retlw	45
  2233  1023  342E               	retlw	46
  2234  1024  3400               	retlw	0
  2235  1025  3401               	retlw	1
  2236  1026  3402               	retlw	2
  2237  1027  3407               	retlw	7
  2238  1028  3408               	retlw	8
  2239  1029  3409               	retlw	9
  2240  102A  3406               	retlw	6
  2241  102B  3404               	retlw	4
  2242  102C  3405               	retlw	5
  2243  102D  3427               	retlw	39
  2244  102E  3428               	retlw	40
  2245  102F                     __end_of_CC2500_registers_address:	
  2246  102F                     _CC2500_rfSettings:	
  2247  102F  3407               	retlw	7
  2248  1030  3407               	retlw	7
  2249  1031  3430               	retlw	48
  2250  1032  3487               	retlw	135
  2251  1033  346B               	retlw	107
  2252  1034  34F8               	retlw	248
  2253  1035  347F               	retlw	127
  2254  1036  343F               	retlw	63
  2255  1037  3409               	retlw	9
  2256  1038  3400               	retlw	0
  2257  1039  345C               	retlw	92
  2258  103A  34A7               	retlw	167
  2259  103B  3462               	retlw	98
  2260  103C  3486               	retlw	134
  2261  103D  3483               	retlw	131
  2262  103E  3403               	retlw	3
  2263  103F  3422               	retlw	34
  2264  1040  34F8               	retlw	248
  2265  1041  3400               	retlw	0
  2266  1042  3444               	retlw	68
  2267  1043  34B6               	retlw	182
  2268  1044  3410               	retlw	16
  2269  1045  3418               	retlw	24
  2270  1046  341D               	retlw	29
  2271  1047  341C               	retlw	28
  2272  1048  34C7               	retlw	199
  2273  1049  3400               	retlw	0
  2274  104A  34B2               	retlw	178
  2275  104B  34EA               	retlw	234
  2276  104C  340A               	retlw	10
  2277  104D  3400               	retlw	0
  2278  104E  3411               	retlw	17
  2279  104F  3459               	retlw	89
  2280  1050  3488               	retlw	136
  2281  1051  3431               	retlw	49
  2282  1052  340B               	retlw	11
  2283  1053  342F               	retlw	47
  2284  1054  342E               	retlw	46
  2285  1055  3406               	retlw	6
  2286  1056  3404               	retlw	4
  2287  1057  3405               	retlw	5
  2288  1058  3400               	retlw	0
  2289  1059  3430               	retlw	48
  2290  105A  34D3               	retlw	211
  2291  105B  3491               	retlw	145
  2292  105C  3441               	retlw	65
  2293  105D  3400               	retlw	0
  2294  105E                     __end_of_CC2500_rfSettings:	
  2295  105E                     _CC2500_patable_vaule:	
  2296  105E  34FE               	retlw	254
  2297  105F  34FE               	retlw	254
  2298  1060  34FE               	retlw	254
  2299  1061  34FE               	retlw	254
  2300  1062  34FE               	retlw	254
  2301  1063  34FE               	retlw	254
  2302  1064  34FE               	retlw	254
  2303  1065  34FE               	retlw	254
  2304  1066                     __end_of_CC2500_patable_vaule:	
  2305                           
  2306                           	psect	nvCOMMON
  2307  0079                     __pnvCOMMON:	
  2308  0079                     _product:	
  2309  0079                     	ds	1
  2310  000C                     _PORTA	set	12
  2311  000D                     _PORTB	set	13
  2312  000E                     _PORTC	set	14
  2313  0018                     _T1CON	set	24
  2314  0017                     _TMR1H	set	23
  2315  0016                     _TMR1L	set	22
  2316  005F                     _GIE	set	95
  2317  005B                     _IOCIE	set	91
  2318  0058                     _IOCIF	set	88
  2319  005E                     _PEIE	set	94
  2320  0060                     _RA0	set	96
  2321  0063                     _RA3	set	99
  2322  0064                     _RA4	set	100
  2323  0066                     _RA6	set	102
  2324  0067                     _RA7	set	103
  2325  0068                     _RB0	set	104
  2326  0069                     _RB1	set	105
  2327  006A                     _RB2	set	106
  2328  006B                     _RB3	set	107
  2329  006C                     _RB4	set	108
  2330  006D                     _RB5	set	109
  2331  0070                     _RC0	set	112
  2332  0071                     _RC1	set	113
  2333  0072                     _RC2	set	114
  2334  0074                     _RC4	set	116
  2335  0075                     _RC5	set	117
  2336  0077                     _RC7	set	119
  2337  0088                     _TMR1IF	set	136
  2338  009D                     _ADCON0	set	157
  2339  009E                     _ADCON1	set	158
  2340  009C                     _ADRESH	set	156
  2341  009B                     _ADRESL	set	155
  2342  0099                     _OSCCON	set	153
  2343  008C                     _TRISA	set	140
  2344  008D                     _TRISB	set	141
  2345  008E                     _TRISC	set	142
  2346  0097                     _WDTCON	set	151
  2347  04E9                     _GO_nDONE	set	1257
  2348  0488                     _TMR1IE	set	1160
  2349  0117                     _FVRCON	set	279
  2350  010C                     _LATA	set	268
  2351  010D                     _LATB	set	269
  2352  010E                     _LATC	set	270
  2353  018C                     _ANSELA	set	396
  2354  018D                     _ANSELB	set	397
  2355  018E                     _ANSELC	set	398
  2356  0192                     _PMADRH	set	402
  2357  0191                     _PMADRL	set	401
  2358  0196                     _PMCON2	set	406
  2359  0194                     _PMDATH	set	404
  2360  0193                     _PMDATL	set	403
  2361  0CAE                     _CFGS	set	3246
  2362  0CAC                     _FREE	set	3244
  2363  0CAD                     _LWLO	set	3245
  2364  0CA8                     _RD	set	3240
  2365  0CA9                     _WR	set	3241
  2366  0CAA                     _WREN	set	3242
  2367  1069                     _WPUB1	set	4201
  2368  106A                     _WPUB2	set	4202
  2369  0396                     _IOCBF	set	918
  2370  0395                     _IOCBN	set	917
  2371  0394                     _IOCBP	set	916
  2372  1CB2                     _IOCBF2	set	7346
  2373                           
  2374                           ; #config settings
  2375  0000                     
  2376                           	psect	cinit
  2377  0015                     start_initialization:	
  2378  0015                     __initialization:	
  2379                           
  2380                           ; Clear objects allocated to BITCOMMON
  2381  0015  01F8               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
  2382                           
  2383                           ; Clear objects allocated to COMMON
  2384  0016  01F5               	clrf	__pbssCOMMON& (0+127)
  2385  0017  01F6               	clrf	(__pbssCOMMON+1)& (0+127)
  2386  0018  01F7               	clrf	(__pbssCOMMON+2)& (0+127)
  2387                           
  2388                           ; Clear objects allocated to BANK0
  2389  0019  01EF               	clrf	__pbssBANK0& (0+127)
  2390                           
  2391                           ; Clear objects allocated to BANK1
  2392  001A  30A0               	movlw	low __pbssBANK1
  2393  001B  0084               	movwf	4
  2394  001C  3000               	movlw	high __pbssBANK1
  2395  001D  0085               	movwf	5
  2396  001E  3048               	movlw	72
  2397  001F  319A  22F2  3180   	fcall	clear_ram0
  2398                           
  2399                           ; Clear objects allocated to BANK2
  2400  0022  3020               	movlw	low __pbssBANK2
  2401  0023  0084               	movwf	4
  2402  0024  3001               	movlw	high __pbssBANK2
  2403  0025  0085               	movwf	5
  2404  0026  304E               	movlw	78
  2405  0027  319A  22F2  3180   	fcall	clear_ram0
  2406                           
  2407                           ; Clear objects allocated to BANK3
  2408  002A  30A0               	movlw	low __pbssBANK3
  2409  002B  0084               	movwf	4
  2410  002C  3001               	movlw	high __pbssBANK3
  2411  002D  0085               	movwf	5
  2412  002E  304F               	movlw	79
  2413  002F  319A  22F2  3180   	fcall	clear_ram0
  2414                           
  2415                           ; Clear objects allocated to BANK4
  2416  0032  3020               	movlw	low __pbssBANK4
  2417  0033  0084               	movwf	4
  2418  0034  3002               	movlw	high __pbssBANK4
  2419  0035  0085               	movwf	5
  2420  0036  3025               	movlw	37
  2421  0037  319A  22F2  3180   	fcall	clear_ram0
  2422                           
  2423                           ; Initialize objects allocated to BANK4
  2424  003A  3067               	movlw	low __pidataBANK4
  2425  003B  0084               	movwf	4
  2426  003C  3090               	movlw	(high __pidataBANK4)| (0+128)
  2427  003D  0085               	movwf	5
  2428  003E  3045               	movlw	low __pdataBANK4
  2429  003F  0086               	movwf	6
  2430  0040  3002               	movlw	high __pdataBANK4
  2431  0041  0087               	movwf	7
  2432  0042  3020               	movlw	32
  2433  0043  319A  22EC         	fcall	init_ram
  2434  0045                     end_of_initialization:	
  2435                           ;End of C runtime variable initialization code
  2436                           
  2437  0045                     __end_of__initialization:	
  2438  0045  107E               	bcf	pic14e$flags,0	;clear compiler interrupt flag
  2439  0046  0020               	movlb	0
  2440  0047  3188  280F         	ljmp	_main	;jump to C main() function
  2441                           
  2442                           	psect	bitbssCOMMON
  2443  03C0                     __pbitbssCOMMON:	
  2444  03C0                     _Receive_OK:	
  2445  03C0                     	ds	1
  2446  03C1                     _Transceive_OK:	
  2447  03C1                     	ds	1
  2448                           
  2449                           	psect	bssCOMMON
  2450  0075                     __pbssCOMMON:	
  2451  0075                     _DelayOff:	
  2452  0075                     	ds	1
  2453  0076                     _DimmerLightsIntr:	
  2454  0076                     	ds	1
  2455  0077                     _Sw:	
  2456  0077                     	ds	1
  2457                           
  2458                           	psect	bssBANK0
  2459  006F                     __pbssBANK0:	
  2460  006F                     _DimmerLights:	
  2461  006F                     	ds	1
  2462                           
  2463                           	psect	bssBANK1
  2464  00A0                     __pbssBANK1:	
  2465  00A0                     _myMain:	
  2466  00A0                     	ds	14
  2467  00AE                     _Buz1:	
  2468  00AE                     	ds	12
  2469  00BA                     _RF1:	
  2470  00BA                     	ds	12
  2471  00C6                     _Dimmer:	
  2472  00C6                     	ds	3
  2473  00C9                     _CRC:	
  2474  00C9                     	ds	1
  2475  00CA                     _DimmerLights11:	
  2476  00CA                     	ds	1
  2477  00CB                     _DimmerLights22:	
  2478  00CB                     	ds	1
  2479  00CC                     _DimmerLightsIntrIOC:	
  2480  00CC                     	ds	1
  2481  00CD                     _LED:	
  2482  00CD                     	ds	1
  2483  00CE                     _RSSI:	
  2484  00CE                     	ds	1
  2485  00CF                     _Rx_Length:	
  2486  00CF                     	ds	1
  2487  00D0                     _SPI0Buffer:	
  2488  00D0                     	ds	1
  2489  00D1                     _SwDetect:	
  2490  00D1                     	ds	1
  2491  00D2                     _Tx_Length:	
  2492  00D2                     	ds	1
  2493  00D3                     _r_address:	
  2494  00D3                     	ds	1
  2495  00D4                     _r_data:	
  2496  00D4                     	ds	1
  2497  00D5                     _s_data:	
  2498  00D5                     	ds	1
  2499  00D6                     _Temp:	
  2500  00D6                     	ds	18
  2501                           
  2502                           	psect	bssBANK2
  2503  0120                     __pbssBANK2:	
  2504  0120                     _Timer1:	
  2505  0120                     	ds	3
  2506  0123                     _RF_Count:	
  2507  0123                     	ds	2
  2508  0125                     _WDT:	
  2509  0125                     	ds	2
  2510  0127                     _Load:	
  2511  0127                     	ds	46
  2512  0155                     _DimmerLights1:	
  2513  0155                     	ds	17
  2514  0166                     _VarErrLED:	
  2515  0166                     	ds	4
  2516  016A                     _VarLED1:	
  2517  016A                     	ds	4
  2518                           
  2519                           	psect	bssBANK3
  2520  01A0                     __pbssBANK3:	
  2521  01A0                     _RF_Data:	
  2522  01A0                     	ds	30
  2523  01BE                     _DimmerLights2:	
  2524  01BE                     	ds	17
  2525  01CF                     _Sw1:	
  2526  01CF                     	ds	9
  2527  01D8                     _Sw2:	
  2528  01D8                     	ds	9
  2529  01E1                     _DlySw1:	
  2530  01E1                     	ds	5
  2531  01E6                     _DlySw2:	
  2532  01E6                     	ds	5
  2533  01EB                     _VarLED2:	
  2534  01EB                     	ds	4
  2535                           
  2536                           	psect	bssBANK4
  2537  0220                     __pbssBANK4:	
  2538  0220                     _Memory:	
  2539  0220                     	ds	37
  2540                           
  2541                           	psect	dataBANK4
  2542  0245                     __pdataBANK4:	
  2543  0245                     __product:	
  2544  0245                     	ds	32
  2545                           
  2546                           	psect	clrtext
  2547  1AF2                     clear_ram0:	
  2548                           ;	Called with FSR0 containing the base address, and
  2549                           ;	WREG with the size to clear
  2550                           
  2551  1AF2  0064               	clrwdt	;clear the watchdog before getting into this loop
  2552  1AF3                     clrloop0:	
  2553  1AF3  0180               	clrf	0	;clear RAM location pointed to by FSR
  2554  1AF4  3101               	addfsr 0,1
  2555  1AF5  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2556  1AF6  2AF3               	goto	clrloop0	;have we reached the end yet?
  2557  1AF7  3400               	retlw	0	;all done for this memory range, return
  2558                           
  2559                           	psect	inittext
  2560  1AEC                     init_ram:	
  2561  1AEC  00FE               	movwf	126
  2562  1AED                     initloop:	
  2563  1AED  0012               	moviw fsr0++
  2564  1AEE  001E               	movwi fsr1++
  2565  1AEF  0BFE               	decfsz	126,f
  2566  1AF0  2AED               	goto	initloop
  2567  1AF1  3400               	retlw	0
  2568                           
  2569                           	psect	cstackBANK4
  2570  0265                     __pcstackBANK4:	
  2571  0265                     setRF_Main@loop_f:	
  2572                           
  2573                           ; 1 bytes @ 0x0
  2574  0265                     	ds	1
  2575  0266                     setRF_Main@Receive_OK:	
  2576                           
  2577                           ; 1 bytes @ 0x1
  2578  0266                     	ds	1
  2579  0267                     setRF_Main@error:	
  2580                           
  2581                           ; 1 bytes @ 0x2
  2582  0267                     	ds	1
  2583  0268                     ?_main:	
  2584  0268                     main@argc:	
  2585                           ; 2 bytes @ 0x3
  2586                           
  2587                           
  2588                           ; 2 bytes @ 0x3
  2589  0268                     	ds	2
  2590  026A                     main@argv:	
  2591                           
  2592                           ; 2 bytes @ 0x5
  2593  026A                     	ds	2
  2594                           
  2595                           	psect	cstackBANK1
  2596  00E8                     __pcstackBANK1:	
  2597  00E8                     setDimmerLights_ErrorClose@count:	
  2598  00E8                     Exception_Main@count:	
  2599                           ; 1 bytes @ 0x0
  2600                           
  2601                           
  2602                           ; 1 bytes @ 0x0
  2603  00E8                     	ds	1
  2604  00E9                     setDimmerLights_ErrorClose@lights:	
  2605  00E9                     Exception_Main@error:	
  2606                           ; 1 bytes @ 0x1
  2607                           
  2608                           
  2609                           ; 1 bytes @ 0x1
  2610  00E9                     	ds	1
  2611  00EA                     setDimmerLights_ErrorClose@i:	
  2612  00EA                     Exception_Main@i:	
  2613                           ; 2 bytes @ 0x2
  2614                           
  2615                           
  2616                           ; 2 bytes @ 0x2
  2617  00EA                     	ds	2
  2618  00EC                     getRxData@error:	
  2619  00EC                     Exception_Main@i_3621:	
  2620                           ; 1 bytes @ 0x4
  2621                           
  2622                           
  2623                           ; 2 bytes @ 0x4
  2624  00EC                     	ds	1
  2625  00ED                     ??_setRF_Main:	
  2626                           
  2627                           ; 0 bytes @ 0x5
  2628  00ED                     	ds	1
  2629  00EE                     Exception_Main@lights:	
  2630                           
  2631                           ; 1 bytes @ 0x6
  2632  00EE                     	ds	1
  2633                           
  2634                           	psect	cstackCOMMON
  2635  0070                     __pcstackCOMMON:	
  2636  0070                     ?_Timeout_Counter:	
  2637  0070                     ?_set_TimeoutCleared:	
  2638                           ; 0 bytes @ 0x0
  2639                           
  2640  0070                     ?_CC2500_WriteByte:	
  2641                           ; 0 bytes @ 0x0
  2642                           
  2643  0070                     ?_CC2500_WriteCommand:	
  2644                           ; 0 bytes @ 0x0
  2645                           
  2646  0070                     ?_CC2500_ReadStatus:	
  2647                           ; 0 bytes @ 0x0
  2648                           
  2649  0070                     ?_CC2500_ReadByte:	
  2650                           ; 0 bytes @ 0x0
  2651                           
  2652  0070                     ?_CC2500_PowerRST:	
  2653                           ; 0 bytes @ 0x0
  2654                           
  2655  0070                     ?_CC2500_InitSetREG:	
  2656                           ; 0 bytes @ 0x0
  2657                           
  2658  0070                     ?_CC2500_InitPATable:	
  2659                           ; 0 bytes @ 0x0
  2660                           
  2661  0070                     ?_CC2500_ClearTXFIFO:	
  2662                           ; 0 bytes @ 0x0
  2663                           
  2664  0070                     ?_CC2500_ClearRXFIFO:	
  2665                           ; 0 bytes @ 0x0
  2666                           
  2667  0070                     ?_CC2500_FrequencyCabr:	
  2668                           ; 0 bytes @ 0x0
  2669                           
  2670  0070                     ?_CC2500_SIDLEMode:	
  2671                           ; 0 bytes @ 0x0
  2672                           
  2673  0070                     ?_DlyOff_Initialization:	
  2674                           ; 0 bytes @ 0x0
  2675                           
  2676  0070                     ?_DlyOff_Main:	
  2677                           ; 0 bytes @ 0x0
  2678                           
  2679  0070                     ?_setDimmerLights_ErrorClose:	
  2680                           ; 0 bytes @ 0x0
  2681                           
  2682  0070                     ?_setDimmerLights_Initialization:	
  2683                           ; 0 bytes @ 0x0
  2684                           
  2685  0070                     ?_setDimmerLights_Main:	
  2686                           ; 0 bytes @ 0x0
  2687                           
  2688  0070                     ?_setDimmerLights_Line:	
  2689                           ; 0 bytes @ 0x0
  2690                           
  2691  0070                     ?_setTxData:	
  2692                           ; 0 bytes @ 0x0
  2693                           
  2694  0070                     ?_setLED_Initialization:	
  2695                           ; 0 bytes @ 0x0
  2696                           
  2697  0070                     ?_setLED_Main:	
  2698                           ; 0 bytes @ 0x0
  2699                           
  2700  0070                     ?_Fosc_Set:	
  2701                           ; 0 bytes @ 0x0
  2702                           
  2703  0070                     ?_IO_Set:	
  2704                           ; 0 bytes @ 0x0
  2705                           
  2706  0070                     ?_TMR1_Set:	
  2707                           ; 0 bytes @ 0x0
  2708                           
  2709  0070                     ?_ADC_Set:	
  2710                           ; 0 bytes @ 0x0
  2711                           
  2712  0070                     ?_IOC_Set:	
  2713                           ; 0 bytes @ 0x0
  2714                           
  2715  0070                     ?_WDT_Set:	
  2716                           ; 0 bytes @ 0x0
  2717                           
  2718  0070                     ?_IOC_ISR:	
  2719                           ; 0 bytes @ 0x0
  2720                           
  2721  0070                     ?_TMR1_ISR:	
  2722                           ; 0 bytes @ 0x0
  2723                           
  2724  0070                     ?_Flash_Memory_Write:	
  2725                           ; 0 bytes @ 0x0
  2726                           
  2727  0070                     ?_Flash_Memory_Modify:	
  2728                           ; 0 bytes @ 0x0
  2729                           
  2730  0070                     ?_WDT_Clearing:	
  2731                           ; 0 bytes @ 0x0
  2732                           
  2733  0070                     ?_myMain_Initialization:	
  2734                           ; 0 bytes @ 0x0
  2735                           
  2736  0070                     ?_Temp_Initialization:	
  2737                           ; 0 bytes @ 0x0
  2738                           
  2739  0070                     ?_Load_Initialization:	
  2740                           ; 0 bytes @ 0x0
  2741                           
  2742  0070                     ?_Switch_Initialization:	
  2743                           ; 0 bytes @ 0x0
  2744                           
  2745  0070                     ?_RF_Initialization:	
  2746                           ; 0 bytes @ 0x0
  2747                           
  2748  0070                     ?_getLoad_AD:	
  2749                           ; 0 bytes @ 0x0
  2750                           
  2751  0070                     ?_getTemp_AD:	
  2752                           ; 0 bytes @ 0x0
  2753                           
  2754  0070                     ?_my_MainTimer:	
  2755                           ; 0 bytes @ 0x0
  2756                           
  2757  0070                     ?_Temp_Main:	
  2758                           ; 0 bytes @ 0x0
  2759                           
  2760  0070                     ?_Load_Main:	
  2761                           ; 0 bytes @ 0x0
  2762                           
  2763  0070                     ?_Switch_Main:	
  2764                           ; 0 bytes @ 0x0
  2765                           
  2766  0070                     ?_RF_Main:	
  2767                           ; 0 bytes @ 0x0
  2768                           
  2769  0070                     ?_Exception_Main:	
  2770                           ; 0 bytes @ 0x0
  2771                           
  2772  0070                     ?_setLoad_AH_AL_Restore:	
  2773                           ; 0 bytes @ 0x0
  2774                           
  2775  0070                     ?_setTemp_Initialization:	
  2776                           ; 0 bytes @ 0x0
  2777                           
  2778  0070                     ?_setTemp_Main:	
  2779                           ; 0 bytes @ 0x0
  2780                           
  2781  0070                     ?_setRF_Initialization:	
  2782                           ; 0 bytes @ 0x0
  2783                           
  2784  0070                     ?_setRF_Main:	
  2785                           ; 0 bytes @ 0x0
  2786                           
  2787  0070                     ?_RF_RxDisable:	
  2788                           ; 0 bytes @ 0x0
  2789                           
  2790  0070                     ?_getRxData:	
  2791                           ; 0 bytes @ 0x0
  2792                           
  2793  0070                     ?_setLog_Code:	
  2794                           ; 0 bytes @ 0x0
  2795                           
  2796  0070                     ?_setControl_Lights_Table:	
  2797                           ; 0 bytes @ 0x0
  2798                           
  2799  0070                     ?_setRFSW_Control:	
  2800                           ; 0 bytes @ 0x0
  2801                           
  2802  0070                     ?_setRFSW_AdjControl:	
  2803                           ; 0 bytes @ 0x0
  2804                           
  2805  0070                     ?_setRF_DimmerValue:	
  2806                           ; 0 bytes @ 0x0
  2807                           
  2808  0070                     ?_setSw_Initialization:	
  2809                           ; 0 bytes @ 0x0
  2810                           
  2811  0070                     ?_setSw_Main:	
  2812                           ; 0 bytes @ 0x0
  2813                           
  2814  0070                     ?_Buzzer_Initialization:	
  2815                           ; 0 bytes @ 0x0
  2816                           
  2817  0070                     ?_Buzzer_Main:	
  2818                           ; 0 bytes @ 0x0
  2819                           
  2820  0070                     ?_CC2500_TxData:	
  2821                           ; 0 bytes @ 0x0
  2822                           
  2823  0070                     ?_CC2500_RxData:	
  2824                           ; 0 bytes @ 0x0
  2825                           
  2826  0070                     ?_CC2500_PowerOnInitial:	
  2827                           ; 0 bytes @ 0x0
  2828                           
  2829  0070                     ?_DelayOffPointSelect:	
  2830                           ; 0 bytes @ 0x0
  2831                           
  2832  0070                     ?_DelayOff_Initialization:	
  2833                           ; 0 bytes @ 0x0
  2834                           
  2835  0070                     ?_DelayOff_Main:	
  2836                           ; 0 bytes @ 0x0
  2837                           
  2838  0070                     ?_DimmerIntrIOCPointSelect:	
  2839                           ; 0 bytes @ 0x0
  2840                           
  2841  0070                     ??_DimmerIntrIOCPointSelect:	
  2842                           ; 0 bytes @ 0x0
  2843                           
  2844  0070                     ?_setDimmerLights_IntrIOC_GO:	
  2845                           ; 0 bytes @ 0x0
  2846                           
  2847  0070                     ?_DimmerIntrPointSelect:	
  2848                           ; 0 bytes @ 0x0
  2849                           
  2850  0070                     ??_DimmerIntrPointSelect:	
  2851                           ; 0 bytes @ 0x0
  2852                           
  2853  0070                     ?_setDimmerLights_IntrControl:	
  2854                           ; 0 bytes @ 0x0
  2855                           
  2856  0070                     ?_DimmerLightsPointSelect:	
  2857                           ; 0 bytes @ 0x0
  2858                           
  2859  0070                     ?_DimmerLights_Initialization:	
  2860                           ; 0 bytes @ 0x0
  2861                           
  2862  0070                     ?_setDimmerLights_SwOn:	
  2863                           ; 0 bytes @ 0x0
  2864                           
  2865  0070                     ?_setDimmerLights_SwOff:	
  2866                           ; 0 bytes @ 0x0
  2867                           
  2868  0070                     ?_setDimmerLights_AdjOn:	
  2869                           ; 0 bytes @ 0x0
  2870                           
  2871  0070                     ?_DimmerLights_Main:	
  2872                           ; 0 bytes @ 0x0
  2873                           
  2874  0070                     ?_setDimmerLights_AdjRF:	
  2875                           ; 0 bytes @ 0x0
  2876                           
  2877  0070                     ?_LedPointSelect:	
  2878                           ; 0 bytes @ 0x0
  2879                           
  2880  0070                     ?_LED_Initialization:	
  2881                           ; 0 bytes @ 0x0
  2882                           
  2883  0070                     ?_LED_Main:	
  2884                           ; 0 bytes @ 0x0
  2885                           
  2886  0070                     ?_Mcu_Initialization:	
  2887                           ; 0 bytes @ 0x0
  2888                           
  2889  0070                     ?_ISR:	
  2890                           ; 0 bytes @ 0x0
  2891                           
  2892  0070                     ?_setDimmerReClock:	
  2893                           ; 0 bytes @ 0x0
  2894                           
  2895  0070                     ?_Flash_Memory_Initialization:	
  2896                           ; 0 bytes @ 0x0
  2897                           
  2898  0070                     ?_Flash_Memory_Main:	
  2899                           ; 0 bytes @ 0x0
  2900                           
  2901  0070                     ?_Flash_Memory_Unlock:	
  2902                           ; 0 bytes @ 0x0
  2903                           
  2904  0070                     ?_Flash_Memory_Erasing:	
  2905                           ; 0 bytes @ 0x0
  2906                           
  2907  0070                     ?_setMemory_Modify:	
  2908                           ; 0 bytes @ 0x0
  2909                           
  2910  0070                     ?_setMemory_LoopSave:	
  2911                           ; 0 bytes @ 0x0
  2912                           
  2913  0070                     ?_WDT_Main:	
  2914                           ; 0 bytes @ 0x0
  2915                           
  2916  0070                     ?_setRF_Learn:	
  2917                           ; 0 bytes @ 0x0
  2918                           
  2919  0070                     ?_TouchPower:	
  2920                           ; 0 bytes @ 0x0
  2921                           
  2922  0070                     ?_SwPointSelect:	
  2923                           ; 0 bytes @ 0x0
  2924                           
  2925  0070                     ?_DelayTimejudge:	
  2926                           ; 0 bytes @ 0x0
  2927                           
  2928  0070                     ?_getDimmerLights_Allow_Condition:	
  2929                           ; 1 bytes @ 0x0
  2930                           
  2931  0070                     ?_getLoad_OK:	
  2932                           ; 1 bytes @ 0x0
  2933                           
  2934  0070                     ?_getMain_All_Error_Status:	
  2935                           ; 1 bytes @ 0x0
  2936                           
  2937  0070                     ?_getMain_LightsStatus:	
  2938                           ; 1 bytes @ 0x0
  2939                           
  2940  0070                     ?_setPercentValue:	
  2941                           ; 1 bytes @ 0x0
  2942                           
  2943  0070                     ?_getPercentValue:	
  2944                           ; 1 bytes @ 0x0
  2945                           
  2946  0070                     ?_Flash_Memory_Read:	
  2947                           ; 1 bytes @ 0x0
  2948                           
  2949  0070                     ?_getRF_KeyStatus:	
  2950                           ; 1 bytes @ 0x0
  2951                           
  2952  0070                     ?_getSw_KeyStatus:	
  2953                           ; 1 bytes @ 0x0
  2954                           
  2955  0070                     ?_getDelayOff_GO:	
  2956                           ; 1 bytes @ 0x0
  2957                           
  2958  0070                     ?_getDimmer_LoadGO:	
  2959                           ; 1 bytes @ 0x0
  2960                           
  2961  0070                     ?_getDimmerLights_Line:	
  2962                           ; 1 bytes @ 0x0
  2963                           
  2964  0070                     ?_getDimmerLights_Status:	
  2965                           ; 1 bytes @ 0x0
  2966                           
  2967  0070                     ?_getAll_DimmerLights_AdjSw:	
  2968                           ; 1 bytes @ 0x0
  2969                           
  2970  0070                     ?_getDimmer_Load_Status:	
  2971                           ; 1 bytes @ 0x0
  2972                           
  2973  0070                     ?_getMain_Lights_Count:	
  2974                           ; 1 bytes @ 0x0
  2975                           
  2976                           
  2977                           ; 1 bytes @ 0x0
  2978  0070                     	ds	1
  2979  0071                     DimmerIntrIOCPointSelect@lights:	
  2980  0071                     DimmerIntrPointSelect@lights:	
  2981                           ; 1 bytes @ 0x1
  2982                           
  2983                           
  2984                           ; 1 bytes @ 0x1
  2985  0071                     	ds	1
  2986  0072                     ??_setDimmerLights_IntrIOC_GO:	
  2987  0072                     ??_setDimmerLights_IntrControl:	
  2988                           ; 0 bytes @ 0x2
  2989                           
  2990  0072                     setDimmerLights_IntrIOC_GO@lights:	
  2991                           ; 0 bytes @ 0x2
  2992                           
  2993                           
  2994                           ; 1 bytes @ 0x2
  2995  0072                     	ds	1
  2996  0073                     ??_IOC_ISR:	
  2997  0073                     ??_setDimmerReClock:	
  2998                           ; 0 bytes @ 0x3
  2999                           
  3000  0073                     setDimmerLights_IntrControl@lights:	
  3001                           ; 0 bytes @ 0x3
  3002                           
  3003                           
  3004                           ; 1 bytes @ 0x3
  3005  0073                     	ds	1
  3006  0074                     ??_TMR1_ISR:	
  3007  0074                     ??_ISR:	
  3008                           ; 0 bytes @ 0x4
  3009                           
  3010                           
  3011                           ; 0 bytes @ 0x4
  3012  0074                     	ds	1
  3013                           
  3014                           	psect	cstackBANK0
  3015  0020                     __pcstackBANK0:	
  3016  0020                     ??_Timeout_Counter:	
  3017  0020                     ??_set_TimeoutCleared:	
  3018                           ; 0 bytes @ 0x0
  3019                           
  3020  0020                     ??_CC2500_WriteByte:	
  3021                           ; 0 bytes @ 0x0
  3022                           
  3023  0020                     ??_CC2500_ReadByte:	
  3024                           ; 0 bytes @ 0x0
  3025                           
  3026  0020                     ?_DelayTime_1us:	
  3027                           ; 0 bytes @ 0x0
  3028                           
  3029  0020                     ??_getLoad_OK:	
  3030                           ; 0 bytes @ 0x0
  3031                           
  3032  0020                     ??_getMain_All_Error_Status:	
  3033                           ; 0 bytes @ 0x0
  3034                           
  3035  0020                     ??_getMain_LightsStatus:	
  3036                           ; 0 bytes @ 0x0
  3037                           
  3038  0020                     ??_setDimmerLights_Line:	
  3039                           ; 0 bytes @ 0x0
  3040                           
  3041  0020                     ??_setTxData:	
  3042                           ; 0 bytes @ 0x0
  3043                           
  3044  0020                     ??_Fosc_Set:	
  3045                           ; 0 bytes @ 0x0
  3046                           
  3047  0020                     ??_IO_Set:	
  3048                           ; 0 bytes @ 0x0
  3049                           
  3050  0020                     ??_TMR1_Set:	
  3051                           ; 0 bytes @ 0x0
  3052                           
  3053  0020                     ??_ADC_Set:	
  3054                           ; 0 bytes @ 0x0
  3055                           
  3056  0020                     ??_IOC_Set:	
  3057                           ; 0 bytes @ 0x0
  3058                           
  3059  0020                     ??_WDT_Set:	
  3060                           ; 0 bytes @ 0x0
  3061                           
  3062  0020                     ??_Flash_Memory_Read:	
  3063                           ; 0 bytes @ 0x0
  3064                           
  3065  0020                     ?_setMemory_Data:	
  3066                           ; 0 bytes @ 0x0
  3067                           
  3068  0020                     ??_Flash_Memory_Write:	
  3069                           ; 0 bytes @ 0x0
  3070                           
  3071  0020                     ??_WDT_Clearing:	
  3072                           ; 0 bytes @ 0x0
  3073                           
  3074  0020                     ??_myMain_Initialization:	
  3075                           ; 0 bytes @ 0x0
  3076                           
  3077  0020                     ??_Temp_Initialization:	
  3078                           ; 0 bytes @ 0x0
  3079                           
  3080  0020                     ??_setLoad_AH_AL_Restore:	
  3081                           ; 0 bytes @ 0x0
  3082                           
  3083  0020                     ??_setTemp_Initialization:	
  3084                           ; 0 bytes @ 0x0
  3085                           
  3086  0020                     ??_setRF_Initialization:	
  3087                           ; 0 bytes @ 0x0
  3088                           
  3089  0020                     ??_getRF_KeyStatus:	
  3090                           ; 0 bytes @ 0x0
  3091                           
  3092  0020                     ??_getSw_KeyStatus:	
  3093                           ; 0 bytes @ 0x0
  3094                           
  3095  0020                     ??_Buzzer_Initialization:	
  3096                           ; 0 bytes @ 0x0
  3097                           
  3098  0020                     ??_Buzzer_Main:	
  3099                           ; 0 bytes @ 0x0
  3100                           
  3101  0020                     ??_DelayOffPointSelect:	
  3102                           ; 0 bytes @ 0x0
  3103                           
  3104  0020                     ??_DimmerLightsPointSelect:	
  3105                           ; 0 bytes @ 0x0
  3106                           
  3107  0020                     ??_getDimmer_LoadGO:	
  3108                           ; 0 bytes @ 0x0
  3109                           
  3110  0020                     ??_getDimmerLights_Line:	
  3111                           ; 0 bytes @ 0x0
  3112                           
  3113  0020                     ??_getDimmer_Load_Status:	
  3114                           ; 0 bytes @ 0x0
  3115                           
  3116  0020                     ??_LedPointSelect:	
  3117                           ; 0 bytes @ 0x0
  3118                           
  3119  0020                     ??_Flash_Memory_Unlock:	
  3120                           ; 0 bytes @ 0x0
  3121                           
  3122  0020                     ??_Flash_Memory_Erasing:	
  3123                           ; 0 bytes @ 0x0
  3124                           
  3125  0020                     ??_setMemory_Modify:	
  3126                           ; 0 bytes @ 0x0
  3127                           
  3128  0020                     ??_setMemory_LoopSave:	
  3129                           ; 0 bytes @ 0x0
  3130                           
  3131  0020                     ??_WDT_Main:	
  3132                           ; 0 bytes @ 0x0
  3133                           
  3134  0020                     ??_getMain_Lights_Count:	
  3135                           ; 0 bytes @ 0x0
  3136                           
  3137  0020                     ??_setRF_Learn:	
  3138                           ; 0 bytes @ 0x0
  3139                           
  3140  0020                     ??_TouchPower:	
  3141                           ; 0 bytes @ 0x0
  3142                           
  3143  0020                     ??_SwPointSelect:	
  3144                           ; 0 bytes @ 0x0
  3145                           
  3146  0020                     ?___bmul:	
  3147                           ; 0 bytes @ 0x0
  3148                           
  3149  0020                     ?_getBuz_GO:	
  3150                           ; 1 bytes @ 0x0
  3151                           
  3152  0020                     ?_getAD:	
  3153                           ; 2 bytes @ 0x0
  3154                           
  3155  0020                     ?___wmul:	
  3156                           ; 2 bytes @ 0x0
  3157                           
  3158  0020                     ?___awdiv:	
  3159                           ; 2 bytes @ 0x0
  3160                           
  3161  0020                     ?___lwdiv:	
  3162                           ; 2 bytes @ 0x0
  3163                           
  3164  0020                     ?___ftpack:	
  3165                           ; 2 bytes @ 0x0
  3166                           
  3167  0020                     getDimmer_LoadGO@loadgo:	
  3168                           ; 3 bytes @ 0x0
  3169                           
  3170  0020                     setDimmerLights_Line@lights:	
  3171                           ; 1 bytes @ 0x0
  3172                           
  3173  0020                     getDimmer_Load_Status@status:	
  3174                           ; 1 bytes @ 0x0
  3175                           
  3176  0020                     getAD@adcon1:	
  3177                           ; 1 bytes @ 0x0
  3178                           
  3179  0020                     setMemory_Data@data:	
  3180                           ; 1 bytes @ 0x0
  3181                           
  3182  0020                     getMain_LightsStatus@status:	
  3183                           ; 1 bytes @ 0x0
  3184                           
  3185  0020                     getMain_Lights_Count@count:	
  3186                           ; 1 bytes @ 0x0
  3187                           
  3188  0020                     getLoad_OK@ok:	
  3189                           ; 1 bytes @ 0x0
  3190                           
  3191  0020                     ___bmul@multiplicand:	
  3192                           ; 1 bytes @ 0x0
  3193                           
  3194  0020                     DelayTime_1us@count:	
  3195                           ; 1 bytes @ 0x0
  3196                           
  3197  0020                     ___wmul@multiplier:	
  3198                           ; 2 bytes @ 0x0
  3199                           
  3200  0020                     ___awdiv@divisor:	
  3201                           ; 2 bytes @ 0x0
  3202                           
  3203  0020                     ___lwdiv@divisor:	
  3204                           ; 2 bytes @ 0x0
  3205                           
  3206  0020                     ___ftpack@arg:	
  3207                           ; 2 bytes @ 0x0
  3208                           
  3209                           
  3210                           ; 3 bytes @ 0x0
  3211  0020                     	ds	1
  3212  0021                     ??_getDimmerLights_Allow_Condition:	
  3213  0021                     ??_setMemory_Data:	
  3214                           ; 0 bytes @ 0x1
  3215                           
  3216  0021                     ??_RF_Initialization:	
  3217                           ; 0 bytes @ 0x1
  3218                           
  3219  0021                     ??_Mcu_Initialization:	
  3220                           ; 0 bytes @ 0x1
  3221                           
  3222  0021                     ??___bmul:	
  3223                           ; 0 bytes @ 0x1
  3224                           
  3225  0021                     CC2500_WriteByte@loop_a:	
  3226                           ; 0 bytes @ 0x1
  3227                           
  3228  0021                     CC2500_ReadByte@loop_b:	
  3229                           ; 1 bytes @ 0x1
  3230                           
  3231  0021                     DelayOffPointSelect@sw:	
  3232                           ; 1 bytes @ 0x1
  3233                           
  3234  0021                     DimmerLightsPointSelect@lights:	
  3235                           ; 1 bytes @ 0x1
  3236                           
  3237  0021                     getDimmerLights_Line@line:	
  3238                           ; 1 bytes @ 0x1
  3239                           
  3240  0021                     LedPointSelect@led:	
  3241                           ; 1 bytes @ 0x1
  3242                           
  3243  0021                     Flash_Memory_Read@i:	
  3244                           ; 1 bytes @ 0x1
  3245                           
  3246  0021                     Flash_Memory_Write@i:	
  3247                           ; 1 bytes @ 0x1
  3248                           
  3249  0021                     setMemory_Modify@command:	
  3250                           ; 1 bytes @ 0x1
  3251                           
  3252  0021                     setMemory_LoopSave@command:	
  3253                           ; 1 bytes @ 0x1
  3254                           
  3255  0021                     getMain_Lights_Count@status1:	
  3256                           ; 1 bytes @ 0x1
  3257                           
  3258  0021                     setLoad_AH_AL_Restore@i:	
  3259                           ; 1 bytes @ 0x1
  3260                           
  3261  0021                     setRF_Learn@command:	
  3262                           ; 1 bytes @ 0x1
  3263                           
  3264  0021                     getRF_KeyStatus@key:	
  3265                           ; 1 bytes @ 0x1
  3266                           
  3267  0021                     SwPointSelect@sw:	
  3268                           ; 1 bytes @ 0x1
  3269                           
  3270  0021                     _getSw_KeyStatus$6247:	
  3271                           ; 1 bytes @ 0x1
  3272                           
  3273  0021                     _getMain_All_Error_Status$3606:	
  3274                           ; 1 bytes @ 0x1
  3275                           
  3276                           
  3277                           ; 2 bytes @ 0x1
  3278  0021                     	ds	1
  3279  0022                     ??_CC2500_WriteCommand:	
  3280  0022                     ??_CC2500_ReadStatus:	
  3281                           ; 0 bytes @ 0x2
  3282                           
  3283  0022                     ??_DelayTime_1us:	
  3284                           ; 0 bytes @ 0x2
  3285                           
  3286  0022                     ?_CC2500_WriteREG:	
  3287                           ; 0 bytes @ 0x2
  3288                           
  3289  0022                     ??_DlyOff_Initialization:	
  3290                           ; 0 bytes @ 0x2
  3291                           
  3292  0022                     ??_setDimmerLights_Initialization:	
  3293                           ; 0 bytes @ 0x2
  3294                           
  3295  0022                     ?_setLED:	
  3296                           ; 0 bytes @ 0x2
  3297                           
  3298  0022                     ??_setLED_Main:	
  3299                           ; 0 bytes @ 0x2
  3300                           
  3301  0022                     ??_Load_Initialization:	
  3302                           ; 0 bytes @ 0x2
  3303                           
  3304  0022                     ??_getBuz_GO:	
  3305                           ; 0 bytes @ 0x2
  3306                           
  3307  0022                     ??_getDelayOff_GO:	
  3308                           ; 0 bytes @ 0x2
  3309                           
  3310  0022                     ??_getDimmerLights_Status:	
  3311                           ; 0 bytes @ 0x2
  3312                           
  3313  0022                     ??_getAll_DimmerLights_AdjSw:	
  3314                           ; 0 bytes @ 0x2
  3315                           
  3316  0022                     CC2500_WriteREG@value:	
  3317                           ; 0 bytes @ 0x2
  3318                           
  3319  0022                     DlyOff_Initialization@sw:	
  3320                           ; 1 bytes @ 0x2
  3321                           
  3322  0022                     getDelayOff_GO@sw:	
  3323                           ; 1 bytes @ 0x2
  3324                           
  3325  0022                     _getDimmerLights_Allow_Condition$2330:	
  3326                           ; 1 bytes @ 0x2
  3327                           
  3328  0022                     getDimmerLights_Status@lights:	
  3329                           ; 1 bytes @ 0x2
  3330                           
  3331  0022                     setLED@command:	
  3332                           ; 1 bytes @ 0x2
  3333                           
  3334  0022                     Flash_Memory_Read@address:	
  3335                           ; 1 bytes @ 0x2
  3336                           
  3337  0022                     setMemory_Data@address:	
  3338                           ; 1 bytes @ 0x2
  3339                           
  3340  0022                     getMain_Lights_Count@status2:	
  3341                           ; 1 bytes @ 0x2
  3342                           
  3343  0022                     _getRF_KeyStatus$5261:	
  3344                           ; 1 bytes @ 0x2
  3345                           
  3346  0022                     _getSw_KeyStatus$6248:	
  3347                           ; 1 bytes @ 0x2
  3348                           
  3349  0022                     ___bmul@product:	
  3350                           ; 1 bytes @ 0x2
  3351                           
  3352  0022                     DelayTime_1us@i:	
  3353                           ; 1 bytes @ 0x2
  3354                           
  3355  0022                     ___wmul@multiplicand:	
  3356                           ; 2 bytes @ 0x2
  3357                           
  3358  0022                     ___awdiv@dividend:	
  3359                           ; 2 bytes @ 0x2
  3360                           
  3361  0022                     ___lwdiv@dividend:	
  3362                           ; 2 bytes @ 0x2
  3363                           
  3364                           
  3365                           ; 2 bytes @ 0x2
  3366  0022                     	ds	1
  3367  0023                     ??_CC2500_WriteREG:	
  3368  0023                     ??_setLED:	
  3369                           ; 0 bytes @ 0x3
  3370                           
  3371  0023                     ??_DelayOff_Initialization:	
  3372                           ; 0 bytes @ 0x3
  3373                           
  3374  0023                     ??_getAD:	
  3375                           ; 0 bytes @ 0x3
  3376                           
  3377  0023                     CC2500_WriteCommand@command:	
  3378                           ; 0 bytes @ 0x3
  3379                           
  3380  0023                     CC2500_ReadStatus@status_addr:	
  3381                           ; 1 bytes @ 0x3
  3382                           
  3383  0023                     getDelayOff_GO@go:	
  3384                           ; 1 bytes @ 0x3
  3385                           
  3386  0023                     setDimmerLights_Initialization@lights:	
  3387                           ; 1 bytes @ 0x3
  3388                           
  3389  0023                     _getDimmerLights_Allow_Condition$2331:	
  3390                           ; 1 bytes @ 0x3
  3391                           
  3392  0023                     getDimmerLights_Status@status:	
  3393                           ; 1 bytes @ 0x3
  3394                           
  3395  0023                     getAll_DimmerLights_AdjSw@count:	
  3396                           ; 1 bytes @ 0x3
  3397                           
  3398  0023                     setLED@led:	
  3399                           ; 1 bytes @ 0x3
  3400                           
  3401  0023                     getAD@adcon0:	
  3402                           ; 1 bytes @ 0x3
  3403                           
  3404  0023                     Flash_Memory_Read@ret:	
  3405                           ; 1 bytes @ 0x3
  3406                           
  3407  0023                     getSw_KeyStatus@status:	
  3408                           ; 1 bytes @ 0x3
  3409                           
  3410  0023                     ___bmul@multiplier:	
  3411                           ; 1 bytes @ 0x3
  3412                           
  3413  0023                     ___ftpack@exp:	
  3414                           ; 1 bytes @ 0x3
  3415                           
  3416  0023                     _getMain_All_Error_Status$3607:	
  3417                           ; 1 bytes @ 0x3
  3418                           
  3419                           
  3420                           ; 2 bytes @ 0x3
  3421  0023                     	ds	1
  3422  0024                     ??_CC2500_ClearTXFIFO:	
  3423  0024                     ??_CC2500_ClearRXFIFO:	
  3424                           ; 0 bytes @ 0x4
  3425                           
  3426  0024                     ??_CC2500_SIDLEMode:	
  3427                           ; 0 bytes @ 0x4
  3428                           
  3429  0024                     ??_DelayTimejudge:	
  3430                           ; 0 bytes @ 0x4
  3431                           
  3432  0024                     ??_setLED_Initialization:	
  3433                           ; 0 bytes @ 0x4
  3434                           
  3435  0024                     ??_Flash_Memory_Modify:	
  3436                           ; 0 bytes @ 0x4
  3437                           
  3438  0024                     ??_getLoad_AD:	
  3439                           ; 0 bytes @ 0x4
  3440                           
  3441  0024                     ??_getTemp_AD:	
  3442                           ; 0 bytes @ 0x4
  3443                           
  3444  0024                     ??_RF_RxDisable:	
  3445                           ; 0 bytes @ 0x4
  3446                           
  3447  0024                     ??_setSw_Initialization:	
  3448                           ; 0 bytes @ 0x4
  3449                           
  3450  0024                     ??_CC2500_TxData:	
  3451                           ; 0 bytes @ 0x4
  3452                           
  3453  0024                     ??_CC2500_RxData:	
  3454                           ; 0 bytes @ 0x4
  3455                           
  3456  0024                     ??_DimmerLights_Initialization:	
  3457                           ; 0 bytes @ 0x4
  3458                           
  3459  0024                     ??___wmul:	
  3460                           ; 0 bytes @ 0x4
  3461                           
  3462  0024                     ??___awdiv:	
  3463                           ; 0 bytes @ 0x4
  3464                           
  3465  0024                     ??___lwdiv:	
  3466                           ; 0 bytes @ 0x4
  3467                           
  3468  0024                     CC2500_WriteREG@w_addr:	
  3469                           ; 0 bytes @ 0x4
  3470                           
  3471  0024                     _getDimmerLights_Allow_Condition$2332:	
  3472                           ; 1 bytes @ 0x4
  3473                           
  3474  0024                     setLED_Initialization@led:	
  3475                           ; 1 bytes @ 0x4
  3476                           
  3477  0024                     setLED_Main@led:	
  3478                           ; 1 bytes @ 0x4
  3479                           
  3480  0024                     setSw_Initialization@sw:	
  3481                           ; 1 bytes @ 0x4
  3482                           
  3483  0024                     getSw_KeyStatus@sw:	
  3484                           ; 1 bytes @ 0x4
  3485                           
  3486  0024                     ___ftpack@sign:	
  3487                           ; 1 bytes @ 0x4
  3488                           
  3489  0024                     getBuz_GO@i:	
  3490                           ; 1 bytes @ 0x4
  3491                           
  3492  0024                     DelayTime_1us@j:	
  3493                           ; 2 bytes @ 0x4
  3494                           
  3495  0024                     getAll_DimmerLights_AdjSw@i:	
  3496                           ; 2 bytes @ 0x4
  3497                           
  3498  0024                     ___wmul@product:	
  3499                           ; 2 bytes @ 0x4
  3500                           
  3501                           
  3502                           ; 2 bytes @ 0x4
  3503  0024                     	ds	1
  3504  0025                     ??_CC2500_InitSetREG:	
  3505  0025                     ??_CC2500_InitPATable:	
  3506                           ; 0 bytes @ 0x5
  3507                           
  3508  0025                     ??_Switch_Initialization:	
  3509                           ; 0 bytes @ 0x5
  3510                           
  3511  0025                     ??___ftpack:	
  3512                           ; 0 bytes @ 0x5
  3513                           
  3514  0025                     ??_LED_Initialization:	
  3515                           ; 0 bytes @ 0x5
  3516                           
  3517  0025                     ??_LED_Main:	
  3518                           ; 0 bytes @ 0x5
  3519                           
  3520  0025                     CC2500_TxData@loop_e:	
  3521                           ; 0 bytes @ 0x5
  3522                           
  3523  0025                     CC2500_RxData@loop_f:	
  3524                           ; 1 bytes @ 0x5
  3525                           
  3526  0025                     getDimmerLights_Allow_Condition@lights:	
  3527                           ; 1 bytes @ 0x5
  3528                           
  3529  0025                     Flash_Memory_Modify@i:	
  3530                           ; 1 bytes @ 0x5
  3531                           
  3532  0025                     getMain_All_Error_Status@command:	
  3533                           ; 1 bytes @ 0x5
  3534                           
  3535  0025                     getTemp_AD@channel:	
  3536                           ; 1 bytes @ 0x5
  3537                           
  3538  0025                     ___awdiv@counter:	
  3539                           ; 1 bytes @ 0x5
  3540                           
  3541  0025                     ___lwdiv@counter:	
  3542                           ; 1 bytes @ 0x5
  3543                           
  3544                           
  3545                           ; 1 bytes @ 0x5
  3546  0025                     	ds	1
  3547  0026                     ??_CC2500_PowerRST:	
  3548  0026                     ??_CC2500_FrequencyCabr:	
  3549                           ; 0 bytes @ 0x6
  3550                           
  3551  0026                     ??_Flash_Memory_Main:	
  3552                           ; 0 bytes @ 0x6
  3553                           
  3554  0026                     CC2500_InitSetREG@temp1:	
  3555                           ; 0 bytes @ 0x6
  3556                           
  3557  0026                     CC2500_InitPATable@temp:	
  3558                           ; 1 bytes @ 0x6
  3559                           
  3560  0026                     DelayTimejudge@i:	
  3561                           ; 1 bytes @ 0x6
  3562                           
  3563  0026                     getDimmerLights_Allow_Condition@allow:	
  3564                           ; 1 bytes @ 0x6
  3565                           
  3566  0026                     getAll_DimmerLights_AdjSw@adjsw:	
  3567                           ; 1 bytes @ 0x6
  3568                           
  3569  0026                     getMain_All_Error_Status@status:	
  3570                           ; 1 bytes @ 0x6
  3571                           
  3572  0026                     getLoad_AD@channel:	
  3573                           ; 1 bytes @ 0x6
  3574                           
  3575  0026                     ___awdiv@sign:	
  3576                           ; 1 bytes @ 0x6
  3577                           
  3578  0026                     ___lwdiv@quotient:	
  3579                           ; 1 bytes @ 0x6
  3580                           
  3581                           
  3582                           ; 2 bytes @ 0x6
  3583  0026                     	ds	1
  3584  0027                     ??_setDimmerLights_AdjOn:	
  3585  0027                     CC2500_InitSetREG@temp2:	
  3586                           ; 0 bytes @ 0x7
  3587                           
  3588  0027                     CC2500_InitPATable@loop_d:	
  3589                           ; 1 bytes @ 0x7
  3590                           
  3591  0027                     DelayTimejudge@j:	
  3592                           ; 1 bytes @ 0x7
  3593                           
  3594  0027                     setDimmerLights_AdjOn@sw:	
  3595                           ; 1 bytes @ 0x7
  3596                           
  3597  0027                     getLoad_AD@k:	
  3598                           ; 1 bytes @ 0x7
  3599                           
  3600  0027                     ___awdiv@quotient:	
  3601                           ; 1 bytes @ 0x7
  3602                           
  3603                           
  3604                           ; 2 bytes @ 0x7
  3605  0027                     	ds	1
  3606  0028                     ??_Load_Main:	
  3607  0028                     ?___awtoft:	
  3608                           ; 0 bytes @ 0x8
  3609                           
  3610  0028                     CC2500_InitSetREG@loop_c:	
  3611                           ; 3 bytes @ 0x8
  3612                           
  3613  0028                     DelayTimejudge@k:	
  3614                           ; 1 bytes @ 0x8
  3615                           
  3616  0028                     getLoad_AD@j:	
  3617                           ; 1 bytes @ 0x8
  3618                           
  3619  0028                     ___awtoft@c:	
  3620                           ; 1 bytes @ 0x8
  3621                           
  3622                           
  3623                           ; 2 bytes @ 0x8
  3624  0028                     	ds	1
  3625  0029                     ?_setBuz:	
  3626  0029                     ??_CC2500_PowerOnInitial:	
  3627                           ; 0 bytes @ 0x9
  3628                           
  3629  0029                     DelayTimejudge@value:	
  3630                           ; 0 bytes @ 0x9
  3631                           
  3632  0029                     getLoad_AD@i:	
  3633                           ; 1 bytes @ 0x9
  3634                           
  3635  0029                     setBuz@time:	
  3636                           ; 1 bytes @ 0x9
  3637                           
  3638                           
  3639                           ; 2 bytes @ 0x9
  3640  0029                     	ds	1
  3641  002A                     Load_Main@error:	
  3642                           
  3643                           ; 1 bytes @ 0xA
  3644  002A                     	ds	1
  3645  002B                     ??_setBuz:	
  3646  002B                     ??___awtoft:	
  3647                           ; 0 bytes @ 0xB
  3648                           
  3649  002B                     Load_Main@Load_Status:	
  3650                           ; 0 bytes @ 0xB
  3651                           
  3652                           
  3653                           ; 1 bytes @ 0xB
  3654  002B                     	ds	1
  3655  002C                     setBuz@count:	
  3656  002C                     Load_Main@i:	
  3657                           ; 1 bytes @ 0xC
  3658                           
  3659                           
  3660                           ; 2 bytes @ 0xC
  3661  002C                     	ds	1
  3662  002D                     ??_my_MainTimer:	
  3663  002D                     ??_setDimmerLights_SwOn:	
  3664                           ; 0 bytes @ 0xD
  3665                           
  3666  002D                     ___awtoft@sign:	
  3667                           ; 0 bytes @ 0xD
  3668                           
  3669                           
  3670                           ; 1 bytes @ 0xD
  3671  002D                     	ds	1
  3672  002E                     ?___ftdiv:	
  3673  002E                     ?___ftmul:	
  3674                           ; 3 bytes @ 0xE
  3675                           
  3676  002E                     _setDimmerLights_SwOn$2311:	
  3677                           ; 3 bytes @ 0xE
  3678                           
  3679  002E                     ___ftdiv@f2:	
  3680                           ; 1 bytes @ 0xE
  3681                           
  3682  002E                     ___ftmul@f1:	
  3683                           ; 3 bytes @ 0xE
  3684                           
  3685                           
  3686                           ; 3 bytes @ 0xE
  3687  002E                     	ds	1
  3688  002F                     _setDimmerLights_SwOn$2312:	
  3689                           
  3690                           ; 1 bytes @ 0xF
  3691  002F                     	ds	1
  3692  0030                     setDimmerLights_SwOn@idle:	
  3693                           
  3694                           ; 1 bytes @ 0x10
  3695  0030                     	ds	1
  3696  0031                     setDimmerLights_SwOn@sw:	
  3697  0031                     ___ftdiv@f1:	
  3698                           ; 1 bytes @ 0x11
  3699                           
  3700  0031                     ___ftmul@f2:	
  3701                           ; 3 bytes @ 0x11
  3702                           
  3703                           
  3704                           ; 3 bytes @ 0x11
  3705  0031                     	ds	3
  3706  0034                     ??___ftdiv:	
  3707  0034                     ??___ftmul:	
  3708                           ; 0 bytes @ 0x14
  3709                           
  3710                           
  3711                           ; 0 bytes @ 0x14
  3712  0034                     	ds	4
  3713  0038                     ___ftdiv@cntr:	
  3714  0038                     ___ftmul@exp:	
  3715                           ; 1 bytes @ 0x18
  3716                           
  3717                           
  3718                           ; 1 bytes @ 0x18
  3719  0038                     	ds	1
  3720  0039                     ___ftdiv@f3:	
  3721  0039                     ___ftmul@f3_as_product:	
  3722                           ; 3 bytes @ 0x19
  3723                           
  3724                           
  3725                           ; 3 bytes @ 0x19
  3726  0039                     	ds	3
  3727  003C                     ___ftdiv@exp:	
  3728  003C                     ___ftmul@cntr:	
  3729                           ; 1 bytes @ 0x1C
  3730                           
  3731                           
  3732                           ; 1 bytes @ 0x1C
  3733  003C                     	ds	1
  3734  003D                     ___ftdiv@sign:	
  3735  003D                     ___ftmul@sign:	
  3736                           ; 1 bytes @ 0x1D
  3737                           
  3738                           
  3739                           ; 1 bytes @ 0x1D
  3740  003D                     	ds	1
  3741  003E                     ?___ftneg:	
  3742  003E                     ___ftneg@f1:	
  3743                           ; 3 bytes @ 0x1E
  3744                           
  3745                           
  3746                           ; 3 bytes @ 0x1E
  3747  003E                     	ds	3
  3748  0041                     ??___ftneg:	
  3749  0041                     ?___ftadd:	
  3750                           ; 0 bytes @ 0x21
  3751                           
  3752  0041                     ___ftadd@f1:	
  3753                           ; 3 bytes @ 0x21
  3754                           
  3755                           
  3756                           ; 3 bytes @ 0x21
  3757  0041                     	ds	3
  3758  0044                     ___ftadd@f2:	
  3759                           
  3760                           ; 3 bytes @ 0x24
  3761  0044                     	ds	3
  3762  0047                     ??___ftadd:	
  3763                           
  3764                           ; 0 bytes @ 0x27
  3765  0047                     	ds	4
  3766  004B                     ___ftadd@sign:	
  3767                           
  3768                           ; 1 bytes @ 0x2B
  3769  004B                     	ds	1
  3770  004C                     ___ftadd@exp2:	
  3771                           
  3772                           ; 1 bytes @ 0x2C
  3773  004C                     	ds	1
  3774  004D                     ___ftadd@exp1:	
  3775                           
  3776                           ; 1 bytes @ 0x2D
  3777  004D                     	ds	1
  3778  004E                     ?___fttol:	
  3779  004E                     ___fttol@f1:	
  3780                           ; 4 bytes @ 0x2E
  3781                           
  3782                           
  3783                           ; 3 bytes @ 0x2E
  3784  004E                     	ds	4
  3785  0052                     ??___fttol:	
  3786                           
  3787                           ; 0 bytes @ 0x32
  3788  0052                     	ds	4
  3789  0056                     ___fttol@sign1:	
  3790                           
  3791                           ; 1 bytes @ 0x36
  3792  0056                     	ds	1
  3793  0057                     ___fttol@lval:	
  3794                           
  3795                           ; 4 bytes @ 0x37
  3796  0057                     	ds	4
  3797  005B                     ___fttol@exp1:	
  3798                           
  3799                           ; 1 bytes @ 0x3B
  3800  005B                     	ds	1
  3801  005C                     ??_setPercentValue:	
  3802  005C                     ??_getPercentValue:	
  3803                           ; 0 bytes @ 0x3C
  3804                           
  3805                           
  3806                           ; 0 bytes @ 0x3C
  3807  005C                     	ds	2
  3808  005E                     getPercentValue@value:	
  3809  005E                     setPercentValue@value:	
  3810                           ; 1 bytes @ 0x3E
  3811                           
  3812                           
  3813                           ; 1 bytes @ 0x3E
  3814  005E                     	ds	1
  3815  005F                     getPercentValue@i:	
  3816  005F                     setPercentValue@i:	
  3817                           ; 3 bytes @ 0x3F
  3818                           
  3819                           
  3820                           ; 3 bytes @ 0x3F
  3821  005F                     	ds	3
  3822  0062                     ?_setProductData:	
  3823  0062                     ??_setDimmerLights_AdjRF:	
  3824                           ; 0 bytes @ 0x42
  3825                           
  3826  0062                     ??_Flash_Memory_Initialization:	
  3827                           ; 0 bytes @ 0x42
  3828                           
  3829  0062                     setProductData@value:	
  3830                           ; 0 bytes @ 0x42
  3831                           
  3832                           
  3833                           ; 1 bytes @ 0x42
  3834  0062                     	ds	1
  3835  0063                     ??_setProductData:	
  3836  0063                     setDimmerLights_AdjRF@lights:	
  3837                           ; 0 bytes @ 0x43
  3838                           
  3839  0063                     Flash_Memory_Initialization@i:	
  3840                           ; 1 bytes @ 0x43
  3841                           
  3842                           
  3843                           ; 1 bytes @ 0x43
  3844  0063                     	ds	2
  3845  0065                     setProductData@address:	
  3846                           
  3847                           ; 1 bytes @ 0x45
  3848  0065                     	ds	1
  3849  0066                     ?_setRF_DimmerLights:	
  3850  0066                     ??_setTemp_Main:	
  3851                           ; 0 bytes @ 0x46
  3852                           
  3853  0066                     ??_setLog_Code:	
  3854                           ; 0 bytes @ 0x46
  3855                           
  3856  0066                     ??_setRF_DimmerValue:	
  3857                           ; 0 bytes @ 0x46
  3858                           
  3859  0066                     ?_setDelayOff_GO:	
  3860                           ; 0 bytes @ 0x46
  3861                           
  3862  0066                     setDelayOff_GO@command:	
  3863                           ; 0 bytes @ 0x46
  3864                           
  3865  0066                     setRF_DimmerLights@on:	
  3866                           ; 1 bytes @ 0x46
  3867                           
  3868                           
  3869                           ; 1 bytes @ 0x46
  3870  0066                     	ds	1
  3871  0067                     ??_setRF_DimmerLights:	
  3872  0067                     setDelayOff_GO@value:	
  3873                           ; 0 bytes @ 0x47
  3874                           
  3875  0067                     setRF_DimmerValue@lights:	
  3876                           ; 1 bytes @ 0x47
  3877                           
  3878                           
  3879                           ; 1 bytes @ 0x47
  3880  0067                     	ds	1
  3881  0068                     ??_setRFSW_AdjControl:	
  3882  0068                     ??_setDelayOff_GO:	
  3883                           ; 0 bytes @ 0x48
  3884                           
  3885  0068                     setTemp_Main@error:	
  3886                           ; 0 bytes @ 0x48
  3887                           
  3888                           
  3889                           ; 1 bytes @ 0x48
  3890  0068                     	ds	1
  3891  0069                     ??_Temp_Main:	
  3892  0069                     setDelayOff_GO@sw:	
  3893                           ; 0 bytes @ 0x49
  3894                           
  3895  0069                     setRF_DimmerLights@status:	
  3896                           ; 1 bytes @ 0x49
  3897                           
  3898                           
  3899                           ; 1 bytes @ 0x49
  3900  0069                     	ds	1
  3901  006A                     ??_setDimmerLights_SwOff:	
  3902  006A                     setDimmerLights_SwOff@sw:	
  3903                           ; 0 bytes @ 0x4A
  3904                           
  3905  006A                     setRFSW_AdjControl@status:	
  3906                           ; 1 bytes @ 0x4A
  3907                           
  3908  006A                     setRF_DimmerLights@lights:	
  3909                           ; 1 bytes @ 0x4A
  3910                           
  3911                           
  3912                           ; 1 bytes @ 0x4A
  3913  006A                     	ds	1
  3914  006B                     ??_setDimmerLights_ErrorClose:	
  3915  006B                     ?_setDimmerLights:	
  3916                           ; 0 bytes @ 0x4B
  3917                           
  3918  006B                     ?_setDimmerLights_Adj:	
  3919                           ; 0 bytes @ 0x4B
  3920                           
  3921  006B                     ??_Exception_Main:	
  3922                           ; 0 bytes @ 0x4B
  3923                           
  3924  006B                     ??_setRFSW_Control:	
  3925                           ; 0 bytes @ 0x4B
  3926                           
  3927  006B                     ??_setSw_Main:	
  3928                           ; 0 bytes @ 0x4B
  3929                           
  3930  006B                     setDimmerLights@status:	
  3931                           ; 0 bytes @ 0x4B
  3932                           
  3933  006B                     setDimmerLights_Adj@status:	
  3934                           ; 1 bytes @ 0x4B
  3935                           
  3936  006B                     setRFSW_AdjControl@sw:	
  3937                           ; 1 bytes @ 0x4B
  3938                           
  3939                           
  3940                           ; 1 bytes @ 0x4B
  3941  006B                     	ds	1
  3942  006C                     ??_DlyOff_Main:	
  3943  006C                     ??_setDimmerLights:	
  3944                           ; 0 bytes @ 0x4C
  3945                           
  3946  006C                     ??_setDimmerLights_Adj:	
  3947                           ; 0 bytes @ 0x4C
  3948                           
  3949  006C                     setRFSW_Control@status:	
  3950                           ; 0 bytes @ 0x4C
  3951                           
  3952                           
  3953                           ; 1 bytes @ 0x4C
  3954  006C                     	ds	1
  3955  006D                     setDimmerLights@lights:	
  3956  006D                     setDimmerLights_Adj@lights:	
  3957                           ; 1 bytes @ 0x4D
  3958                           
  3959  006D                     setRFSW_Control@sw:	
  3960                           ; 1 bytes @ 0x4D
  3961                           
  3962  006D                     setSw_Main@sw:	
  3963                           ; 1 bytes @ 0x4D
  3964                           
  3965                           
  3966                           ; 1 bytes @ 0x4D
  3967  006D                     	ds	1
  3968  006E                     ??_setDimmerLights_Main:	
  3969  006E                     ??_Switch_Main:	
  3970                           ; 0 bytes @ 0x4E
  3971                           
  3972  006E                     ??_getRxData:	
  3973                           ; 0 bytes @ 0x4E
  3974                           
  3975  006E                     ??_setControl_Lights_Table:	
  3976                           ; 0 bytes @ 0x4E
  3977                           
  3978  006E                     DlyOff_Main@sw:	
  3979                           ; 0 bytes @ 0x4E
  3980                           
  3981  006E                     setDimmerLights_Main@lights:	
  3982                           ; 1 bytes @ 0x4E
  3983                           
  3984                           
  3985                           ; 1 bytes @ 0x4E
  3986  006E                     	ds	1
  3987  006F                     ??_RF_Main:	
  3988  006F                     ??_DelayOff_Main:	
  3989                           ; 0 bytes @ 0x4F
  3990                           
  3991  006F                     ??_DimmerLights_Main:	
  3992                           ; 0 bytes @ 0x4F
  3993                           
  3994  006F                     ??_main:	
  3995                           ; 0 bytes @ 0x4F
  3996                           
  3997                           
  3998                           	psect	maintext
  3999  080F                     __pmaintext:	
  4000                           ; 0 bytes @ 0x4F
  4001 ;;
  4002 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  4003 ;;
  4004 ;; *************** function _main *****************
  4005 ;; Defined at:
  4006 ;;		line 7 in file "../src/Main_B1.c"
  4007 ;; Parameters:    Size  Location     Type
  4008 ;;  argc            2    3[BANK4 ] int 
  4009 ;;  argv            2    5[BANK4 ] PTR PTR unsigned char 
  4010 ;; Auto vars:     Size  Location     Type
  4011 ;;		None
  4012 ;; Return value:  Size  Location     Type
  4013 ;;                  2    3[BANK4 ] int 
  4014 ;; Registers used:
  4015 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4016 ;; Tracked objects:
  4017 ;;		On entry : 17F/0
  4018 ;;		On exit  : 0/0
  4019 ;;		Unchanged: 0/0
  4020 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4021 ;;      Params:         0       0       0       0       0       4       0       0       0       0       0       0       
      +0       0
  4022 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4023 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4024 ;;      Totals:         0       0       0       0       0       4       0       0       0       0       0       0       
      +0       0
  4025 ;;Total ram usage:        4 bytes
  4026 ;; Hardware stack levels required when called:   15
  4027 ;; This function calls:
  4028 ;;		_Buzzer_Initialization
  4029 ;;		_Buzzer_Main
  4030 ;;		_CC2500_PowerOnInitial
  4031 ;;		_DelayOff_Initialization
  4032 ;;		_DelayOff_Main
  4033 ;;		_DimmerLights_Initialization
  4034 ;;		_DimmerLights_Main
  4035 ;;		_Exception_Main
  4036 ;;		_Flash_Memory_Initialization
  4037 ;;		_Flash_Memory_Main
  4038 ;;		_LED_Initialization
  4039 ;;		_LED_Main
  4040 ;;		_Load_Initialization
  4041 ;;		_Load_Main
  4042 ;;		_Mcu_Initialization
  4043 ;;		_RF_Initialization
  4044 ;;		_RF_Main
  4045 ;;		_Switch_Initialization
  4046 ;;		_Switch_Main
  4047 ;;		_Temp_Initialization
  4048 ;;		_Temp_Main
  4049 ;;		_WDT_Main
  4050 ;;		_getLoad_AD
  4051 ;;		_getTemp_AD
  4052 ;;		_myMain_Initialization
  4053 ;;		_my_MainTimer
  4054 ;; This function is called by:
  4055 ;;		Startup code after reset
  4056 ;; This function uses a non-reentrant model
  4057 ;;
  4058                           
  4059                           
  4060                           ;psect for function _main
  4061  080F                     _main:	
  4062                           
  4063                           ;Main_B1.c: 8: myMain_Initialization();
  4064                           
  4065                           ;incstack = 0
  4066                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4067  080F  3188  2000  3188   	fcall	_myMain_Initialization
  4068                           
  4069                           ;Main_B1.c: 9: Mcu_Initialization();
  4070  0812  319C  2462  3188   	fcall	_Mcu_Initialization
  4071                           
  4072                           ;Main_B1.c: 10: Flash_Memory_Initialization();
  4073  0815  3186  263F  3188   	fcall	_Flash_Memory_Initialization
  4074                           
  4075                           ;Main_B1.c: 11: LED_Initialization();
  4076  0818  319B  2383  3188   	fcall	_LED_Initialization
  4077                           
  4078                           ;Main_B1.c: 12: Buzzer_Initialization();
  4079  081B  319A  22BF  3188   	fcall	_Buzzer_Initialization
  4080                           
  4081                           ;Main_B1.c: 14: ;;
  4082                           ;Main_B1.c: 15: Temp_Initialization();
  4083  081E  319A  22CB  3188   	fcall	_Temp_Initialization
  4084                           
  4085                           ;Main_B1.c: 16: Load_Initialization();
  4086  0821  319A  22C2  3188   	fcall	_Load_Initialization
  4087                           
  4088                           ;Main_B1.c: 17: ;;
  4089                           ;Main_B1.c: 18: DelayOff_Initialization();
  4090  0824  319B  2307  3188   	fcall	_DelayOff_Initialization
  4091                           
  4092                           ;Main_B1.c: 20: DimmerLights_Initialization();
  4093  0827  319D  250D  3188   	fcall	_DimmerLights_Initialization
  4094                           
  4095                           ;Main_B1.c: 21: ;;
  4096                           ;Main_B1.c: 22: ;;
  4097                           ;Main_B1.c: 23: ;;
  4098                           ;Main_B1.c: 24: Switch_Initialization();
  4099  082A  319B  23BF  3188   	fcall	_Switch_Initialization
  4100                           
  4101                           ;Main_B1.c: 25: RF_Initialization();
  4102  082D  319A  22C5  3188   	fcall	_RF_Initialization
  4103                           
  4104                           ;Main_B1.c: 26: CC2500_PowerOnInitial();
  4105  0830  319D  2586  3188   	fcall	_CC2500_PowerOnInitial
  4106  0833                     l10993:	
  4107                           ;Main_B1.c: 27: ;;
  4108                           ;Main_B1.c: 28: ;;
  4109                           ;Main_B1.c: 30: while (1) {
  4110                           
  4111                           
  4112                           ;Main_B1.c: 32: if (myMain.PowerON == 1) {
  4113  0833  0021               	movlb	1	; select bank1
  4114  0834  1C20               	btfss	_myMain^(0+128),0
  4115  0835  283E               	goto	l10997
  4116                           
  4117                           ;Main_B1.c: 38: getLoad_AD(0x05);
  4118  0836  3005               	movlw	5
  4119  0837  318C  2469  3188   	fcall	_getLoad_AD
  4120                           
  4121                           ;Main_B1.c: 42: getTemp_AD(0x09);
  4122  083A  3009               	movlw	9
  4123  083B  3193  2361  3188   	fcall	_getTemp_AD
  4124  083E                     l10997:	
  4125                           
  4126                           ;Main_B1.c: 57: }
  4127                           ;Main_B1.c: 93: if (Timer1.Timeout == 1) {
  4128  083E  0022               	movlb	2	; select bank2
  4129  083F  1C20               	btfss	_Timer1^(0+256),0
  4130  0840  2833               	goto	l10993
  4131                           
  4132                           ;Main_B1.c: 94: Timer1.Timeout = 0;
  4133  0841  1020               	bcf	_Timer1^(0+256),0
  4134                           
  4135                           ;Main_B1.c: 96: my_MainTimer();
  4136  0842  3192  22E7  3188   	fcall	_my_MainTimer
  4137                           
  4138                           ;Main_B1.c: 97: WDT_Main();
  4139  0845  319C  2474  3188   	fcall	_WDT_Main
  4140                           
  4141                           ;Main_B1.c: 98: ;;
  4142                           ;Main_B1.c: 99: ;;
  4143                           ;Main_B1.c: 100: if (myMain.PowerON == 1) {
  4144  0848  0021               	movlb	1	; select bank1
  4145  0849  1C20               	btfss	_myMain^(0+128),0
  4146  084A  2833               	goto	l10993
  4147                           
  4148                           ;Main_B1.c: 101: Flash_Memory_Main();
  4149  084B  3191  21CD  3188   	fcall	_Flash_Memory_Main
  4150                           
  4151                           ;Main_B1.c: 103: LED_Main();
  4152  084E  319B  238F  3188   	fcall	_LED_Main
  4153                           
  4154                           ;Main_B1.c: 104: Buzzer_Main();
  4155  0851  3194  2424  3188   	fcall	_Buzzer_Main
  4156                           
  4157                           ;Main_B1.c: 106: ;;
  4158                           ;Main_B1.c: 107: Temp_Main();
  4159  0854  319A  22CE  3188   	fcall	_Temp_Main
  4160                           
  4161                           ;Main_B1.c: 108: Load_Main();
  4162  0857  3180  2049  3188   	fcall	_Load_Main
  4163                           
  4164                           ;Main_B1.c: 109: ;;
  4165                           ;Main_B1.c: 111: ;;
  4166                           ;Main_B1.c: 112: DimmerLights_Main();
  4167  085A  319E  26E3  3188   	fcall	_DimmerLights_Main
  4168                           
  4169                           ;Main_B1.c: 113: Switch_Main();
  4170  085D  319B  2354  3188   	fcall	_Switch_Main
  4171                           
  4172                           ;Main_B1.c: 114: ;;
  4173                           ;Main_B1.c: 115: ;;
  4174                           ;Main_B1.c: 117: RF_Main();
  4175  0860  319A  22C8  3188   	fcall	_RF_Main
  4176                           
  4177                           ;Main_B1.c: 118: DelayOff_Main();
  4178  0863  319B  230F  3188   	fcall	_DelayOff_Main
  4179                           
  4180                           ;Main_B1.c: 119: ;;
  4181                           ;Main_B1.c: 120: ;;
  4182                           ;Main_B1.c: 121: Exception_Main();
  4183  0866  3185  255F  3188   	fcall	_Exception_Main
  4184  0869  2833               	goto	l10993
  4185  086A                     __end_of_main:	
  4186                           ;Main_B1.c: 128: }
  4187                           ;Main_B1.c: 129: }
  4188                           ;Main_B1.c: 163: }
  4189                           ;Main_B1.c: 164: return (0);
  4190                           ;	Return value of _main is never used
  4191                           
  4192                           
  4193                           	psect	text1
  4194  12E7                     __ptext1:	
  4195 ;; *************** function _my_MainTimer *****************
  4196 ;; Defined at:
  4197 ;;		line 185 in file "../src/Main_B1.c"
  4198 ;; Parameters:    Size  Location     Type
  4199 ;;		None
  4200 ;; Auto vars:     Size  Location     Type
  4201 ;;		None
  4202 ;; Return value:  Size  Location     Type
  4203 ;;		None               void
  4204 ;; Registers used:
  4205 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4206 ;; Tracked objects:
  4207 ;;		On entry : 0/0
  4208 ;;		On exit  : 0/0
  4209 ;;		Unchanged: 0/0
  4210 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4211 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4212 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4213 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4214 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4215 ;;Total ram usage:        1 bytes
  4216 ;; Hardware stack levels used:    1
  4217 ;; Hardware stack levels required when called:    7
  4218 ;; This function calls:
  4219 ;;		_setBuz
  4220 ;; This function is called by:
  4221 ;;		_main
  4222 ;; This function uses a non-reentrant model
  4223 ;;
  4224                           
  4225                           
  4226                           ;psect for function _my_MainTimer
  4227  12E7                     _my_MainTimer:	
  4228                           
  4229                           ;Main_B1.c: 188: if (myMain.PowerON == 0) {
  4230                           
  4231                           ;incstack = 0
  4232                           ; Regs used in _my_MainTimer: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4233  12E7  0021               	movlb	1	; select bank1
  4234  12E8  1820               	btfsc	_myMain^(0+128),0
  4235  12E9  2B01               	goto	l10695
  4236                           
  4237                           ;Main_B1.c: 189: myMain.PowerCount++;
  4238  12EA  3001               	movlw	1
  4239  12EB  0020               	movlb	0	; select bank0
  4240  12EC  00AD               	movwf	??_my_MainTimer
  4241  12ED  082D               	movf	??_my_MainTimer,w
  4242  12EE  0021               	movlb	1	; select bank1
  4243  12EF  07A1               	addwf	(_myMain^(0+128)+1),f
  4244                           
  4245                           ;Main_B1.c: 190: if (myMain.PowerCount == 150) {
  4246  12F0  0821               	movf	(_myMain^(0+128)+1),w
  4247  12F1  3A96               	xorlw	150
  4248  12F2  1D03               	skipz
  4249  12F3  0008               	return
  4250                           
  4251                           ;Main_B1.c: 191: myMain.PowerCount = 0;
  4252  12F4  01A1               	clrf	(_myMain^(0+128)+1)
  4253                           
  4254                           ;Main_B1.c: 192: myMain.PowerON = 1;
  4255  12F5  1420               	bsf	_myMain^(0+128),0
  4256                           
  4257                           ;Main_B1.c: 197: setBuz(3, 50);
  4258  12F6  3032               	movlw	50
  4259  12F7  0020               	movlb	0	; select bank0
  4260  12F8  00A9               	movwf	setBuz@time
  4261  12F9  3000               	movlw	0
  4262  12FA  00AA               	movwf	setBuz@time+1
  4263  12FB  3003               	movlw	3
  4264  12FC  3197  274E         	fcall	_setBuz
  4265                           
  4266                           ;Main_B1.c: 198: myMain.SelfTest = 1;
  4267  12FE  0021               	movlb	1	; select bank1
  4268  12FF  1620               	bsf	_myMain^(0+128),4
  4269                           
  4270                           ;Main_B1.c: 207: }
  4271                           ;Main_B1.c: 208: } else {
  4272  1300  0008               	return
  4273  1301                     l10695:	
  4274                           
  4275                           ;Main_B1.c: 209: myMain.PowerCount++;
  4276  1301  3001               	movlw	1
  4277  1302  0020               	movlb	0	; select bank0
  4278  1303  00AD               	movwf	??_my_MainTimer
  4279  1304  082D               	movf	??_my_MainTimer,w
  4280  1305  0021               	movlb	1	; select bank1
  4281  1306  07A1               	addwf	(_myMain^(0+128)+1),f
  4282                           
  4283                           ;Main_B1.c: 210: if (myMain.PowerCount == 100) {
  4284  1307  0821               	movf	(_myMain^(0+128)+1),w
  4285  1308  3A64               	xorlw	100
  4286  1309  1903               	btfsc	3,2
  4287                           
  4288                           ;Main_B1.c: 211: myMain.PowerCount = 0;
  4289  130A  01A1               	clrf	(_myMain^(0+128)+1)
  4290                           
  4291                           ;Main_B1.c: 226: }
  4292                           ;Main_B1.c: 228: myMain.Count1++;
  4293  130B  3001               	movlw	1
  4294  130C  07A4               	addwf	(_myMain^(0+128)+4),f
  4295  130D  3000               	movlw	0
  4296  130E  3DA5               	addwfc	((_myMain+1)^(0+128)+4),f
  4297                           
  4298                           ;Main_B1.c: 229: if (myMain.Count1 == 100)
  4299  130F  3004               	movlw	4
  4300  1310  3EA0               	addlw	_myMain& (0+255)
  4301  1311  0086               	movwf	6
  4302  1312  0187               	clrf	7
  4303  1313  3F40               	moviw [0]fsr1
  4304  1314  3A64               	xorlw	100
  4305  1315  1D03               	skipz
  4306  1316  2B19               	goto	u12525
  4307  1317  3F41               	moviw [1]fsr1
  4308  1318  3A00               	xorlw	0
  4309  1319                     u12525:	
  4310  1319  1D03               	skipz
  4311  131A  0008               	return
  4312                           
  4313                           ;Main_B1.c: 230: {
  4314                           ;Main_B1.c: 231: myMain.Count1 = 0;
  4315  131B  01A4               	clrf	(_myMain^(0+128)+4)
  4316  131C  01A5               	clrf	((_myMain+1)^(0+128)+4)
  4317                           
  4318                           ;Main_B1.c: 243: if (myMain.Flag) {
  4319  131D  1CA0               	btfss	_myMain^(0+128),1
  4320  131E  2B21               	goto	l1547
  4321                           
  4322                           ;Main_B1.c: 244: myMain.Flag = 0;
  4323  131F  10A0               	bcf	_myMain^(0+128),1
  4324                           
  4325                           ;Main_B1.c: 253: } else {
  4326  1320  0008               	return
  4327  1321                     l1547:	
  4328                           
  4329                           ;Main_B1.c: 254: myMain.Flag = 1;
  4330  1321  14A0               	bsf	_myMain^(0+128),1
  4331  1322  0008               	return
  4332  1323                     __end_of_my_MainTimer:	
  4333                           
  4334                           	psect	text2
  4335  0800                     __ptext2:	
  4336 ;; *************** function _myMain_Initialization *****************
  4337 ;; Defined at:
  4338 ;;		line 170 in file "../src/Main_B1.c"
  4339 ;; Parameters:    Size  Location     Type
  4340 ;;		None
  4341 ;; Auto vars:     Size  Location     Type
  4342 ;;		None
  4343 ;; Return value:  Size  Location     Type
  4344 ;;		None               void
  4345 ;; Registers used:
  4346 ;;		wreg, fsr1l, fsr1h
  4347 ;; Tracked objects:
  4348 ;;		On entry : 0/0
  4349 ;;		On exit  : 0/0
  4350 ;;		Unchanged: 0/0
  4351 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4352 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4353 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4354 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4355 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4356 ;;Total ram usage:        1 bytes
  4357 ;; Hardware stack levels used:    1
  4358 ;; Hardware stack levels required when called:    5
  4359 ;; This function calls:
  4360 ;;		Nothing
  4361 ;; This function is called by:
  4362 ;;		_main
  4363 ;; This function uses a non-reentrant model
  4364 ;;
  4365                           
  4366                           
  4367                           ;psect for function _myMain_Initialization
  4368  0800                     _myMain_Initialization:	
  4369                           
  4370                           ;Main_B1.c: 173: product = &_product;
  4371                           
  4372                           ;incstack = 0
  4373                           ; Regs used in _myMain_Initialization: [wregfsr1]
  4374  0800  3045               	movlw	__product& (0+255)
  4375  0801  0020               	movlb	0	; select bank0
  4376  0802  00A0               	movwf	??_myMain_Initialization
  4377  0803  0820               	movf	??_myMain_Initialization,w
  4378  0804  00F9               	movwf	_product
  4379                           
  4380                           ;Main_B1.c: 174: product->Data[20] = 210;
  4381  0805  30D2               	movlw	210
  4382  0806  00A0               	movwf	??_myMain_Initialization
  4383  0807  0879               	movf	_product,w
  4384  0808  3E14               	addlw	20
  4385  0809  0086               	movwf	6
  4386  080A  3002               	movlw	2	; select bank4/5
  4387  080B  0087               	movwf	7
  4388  080C  0820               	movf	??_myMain_Initialization,w
  4389  080D  0081               	movwf	1
  4390  080E  0008               	return
  4391  080F                     __end_of_myMain_Initialization:	
  4392                           
  4393                           	psect	text3
  4394  1361                     __ptext3:	
  4395 ;; *************** function _getTemp_AD *****************
  4396 ;; Defined at:
  4397 ;;		line 15 in file "../src/OverTemperature_B1.c"
  4398 ;; Parameters:    Size  Location     Type
  4399 ;;  channel         1    wreg     unsigned char 
  4400 ;; Auto vars:     Size  Location     Type
  4401 ;;  channel         1    5[BANK0 ] unsigned char 
  4402 ;; Return value:  Size  Location     Type
  4403 ;;		None               void
  4404 ;; Registers used:
  4405 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4406 ;; Tracked objects:
  4407 ;;		On entry : 0/0
  4408 ;;		On exit  : 0/0
  4409 ;;		Unchanged: 0/0
  4410 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4411 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4412 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4413 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4414 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4415 ;;Total ram usage:        2 bytes
  4416 ;; Hardware stack levels used:    1
  4417 ;; Hardware stack levels required when called:    7
  4418 ;; This function calls:
  4419 ;;		_getAD
  4420 ;; This function is called by:
  4421 ;;		_main
  4422 ;; This function uses a non-reentrant model
  4423 ;;
  4424                           
  4425                           
  4426                           ;psect for function _getTemp_AD
  4427  1361                     _getTemp_AD:	
  4428                           
  4429                           ;incstack = 0
  4430                           ; Regs used in _getTemp_AD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4431                           ;getTemp_AD@channel stored from wreg
  4432  1361  0020               	movlb	0	; select bank0
  4433  1362  00A5               	movwf	getTemp_AD@channel
  4434                           
  4435                           ;OverTemperature_B1.c: 18: if (Temp.ADtoGO == 1) {
  4436  1363  0021               	movlb	1	; select bank1
  4437  1364  1D56               	btfss	_Temp^(0+128),2
  4438  1365  0008               	return
  4439                           
  4440                           ;OverTemperature_B1.c: 19: Temp.ADRES = getAD(channel, 0xf0);
  4441  1366  30F0               	movlw	240
  4442  1367  0020               	movlb	0	; select bank0
  4443  1368  00A4               	movwf	??_getTemp_AD
  4444  1369  0824               	movf	??_getTemp_AD,w
  4445  136A  00A0               	movwf	getAD@adcon1
  4446  136B  0825               	movf	getTemp_AD@channel,w
  4447  136C  319F  2703  3193   	fcall	_getAD
  4448  136F  0020               	movlb	0	; select bank0
  4449  1370  0821               	movf	?_getAD+1,w
  4450  1371  0021               	movlb	1	; select bank1
  4451  1372  01E3               	clrf	((_Temp+1)^(0+128)+12)
  4452  1373  07E3               	addwf	((_Temp+1)^(0+128)+12),f
  4453  1374  0020               	movlb	0	; select bank0
  4454  1375  0820               	movf	?_getAD,w
  4455  1376  0021               	movlb	1	; select bank1
  4456  1377  01E2               	clrf	(_Temp^(0+128)+12)
  4457  1378  07E2               	addwf	(_Temp^(0+128)+12),f
  4458                           
  4459                           ;OverTemperature_B1.c: 20: if (Temp.ADRES > 0) {
  4460  1379  300C               	movlw	12
  4461  137A  3ED6               	addlw	_Temp& (0+255)
  4462  137B  0086               	movwf	6
  4463  137C  0187               	clrf	7
  4464  137D  0016               	moviw fsr1++
  4465  137E  0401               	iorwf	1,w
  4466  137F  1903               	skipnz
  4467  1380  0008               	return
  4468                           
  4469                           ;OverTemperature_B1.c: 21: if (Temp.ADH[0] < Temp.ADRES) {
  4470  1381  0863               	movf	((_Temp+1)^(0+128)+12),w
  4471  1382  025F               	subwf	((_Temp+1)^(0+128)+8),w
  4472  1383  1D03               	skipz
  4473  1384  2B87               	goto	u12475
  4474  1385  0862               	movf	(_Temp^(0+128)+12),w
  4475  1386  025E               	subwf	(_Temp^(0+128)+8),w
  4476  1387                     u12475:	
  4477  1387  1803               	skipnc
  4478  1388  2B90               	goto	l10677
  4479                           
  4480                           ;OverTemperature_B1.c: 22: Temp.ADH[0] = Temp.ADRES;
  4481  1389  0863               	movf	((_Temp+1)^(0+128)+12),w
  4482  138A  01DF               	clrf	((_Temp+1)^(0+128)+8)
  4483  138B  07DF               	addwf	((_Temp+1)^(0+128)+8),f
  4484  138C  0862               	movf	(_Temp^(0+128)+12),w
  4485  138D  01DE               	clrf	(_Temp^(0+128)+8)
  4486  138E  07DE               	addwf	(_Temp^(0+128)+8),f
  4487                           
  4488                           ;OverTemperature_B1.c: 23: } else if (Temp.ADH[1] < Temp.ADRES) {
  4489  138F  0008               	return
  4490  1390                     l10677:	
  4491  1390  0863               	movf	((_Temp+1)^(0+128)+12),w
  4492  1391  0261               	subwf	((_Temp+1)^(0+128)+10),w
  4493  1392  1D03               	skipz
  4494  1393  2B96               	goto	u12485
  4495  1394  0862               	movf	(_Temp^(0+128)+12),w
  4496  1395  0260               	subwf	(_Temp^(0+128)+10),w
  4497  1396                     u12485:	
  4498  1396  1803               	skipnc
  4499  1397  0008               	return
  4500                           
  4501                           ;OverTemperature_B1.c: 24: Temp.ADH[1] = Temp.ADRES;
  4502  1398  0863               	movf	((_Temp+1)^(0+128)+12),w
  4503  1399  01E1               	clrf	((_Temp+1)^(0+128)+10)
  4504  139A  07E1               	addwf	((_Temp+1)^(0+128)+10),f
  4505  139B  0862               	movf	(_Temp^(0+128)+12),w
  4506  139C  01E0               	clrf	(_Temp^(0+128)+10)
  4507  139D  07E0               	addwf	(_Temp^(0+128)+10),f
  4508  139E  0008               	return
  4509  139F                     __end_of_getTemp_AD:	
  4510                           
  4511                           	psect	text4
  4512  0C69                     __ptext4:	
  4513 ;; *************** function _getLoad_AD *****************
  4514 ;; Defined at:
  4515 ;;		line 15 in file "../src/OverLoad_B1.c"
  4516 ;; Parameters:    Size  Location     Type
  4517 ;;  channel         1    wreg     unsigned char 
  4518 ;; Auto vars:     Size  Location     Type
  4519 ;;  channel         1    6[BANK0 ] unsigned char 
  4520 ;;  i               1    9[BANK0 ] unsigned char 
  4521 ;;  j               1    8[BANK0 ] unsigned char 
  4522 ;;  k               1    7[BANK0 ] unsigned char 
  4523 ;; Return value:  Size  Location     Type
  4524 ;;		None               void
  4525 ;; Registers used:
  4526 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4527 ;; Tracked objects:
  4528 ;;		On entry : 0/0
  4529 ;;		On exit  : 0/0
  4530 ;;		Unchanged: 0/0
  4531 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4532 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4533 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4534 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4535 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4536 ;;Total ram usage:        6 bytes
  4537 ;; Hardware stack levels used:    1
  4538 ;; Hardware stack levels required when called:    7
  4539 ;; This function calls:
  4540 ;;		_getAD
  4541 ;; This function is called by:
  4542 ;;		_main
  4543 ;; This function uses a non-reentrant model
  4544 ;;
  4545                           
  4546                           
  4547                           ;psect for function _getLoad_AD
  4548  0C69                     _getLoad_AD:	
  4549                           
  4550                           ;incstack = 0
  4551                           ; Regs used in _getLoad_AD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4552                           ;getLoad_AD@channel stored from wreg
  4553  0C69  0020               	movlb	0	; select bank0
  4554  0C6A  00A6               	movwf	getLoad_AD@channel
  4555                           
  4556                           ;OverLoad_B1.c: 16: char i = 0, j = 0, k = 0;
  4557  0C6B  01A9               	clrf	getLoad_AD@i
  4558  0C6C  01A8               	clrf	getLoad_AD@j
  4559  0C6D  01A7               	clrf	getLoad_AD@k
  4560                           
  4561                           ;OverLoad_B1.c: 18: if (Load.ADtoGO == 1) {
  4562  0C6E  0022               	movlb	2	; select bank2
  4563  0C6F  1E27               	btfss	_Load^(0+256),4
  4564  0C70  0008               	return
  4565                           
  4566                           ;OverLoad_B1.c: 19: Load.ADRES = getAD(channel, 0xf3);
  4567  0C71  30F3               	movlw	243
  4568  0C72  0020               	movlb	0	; select bank0
  4569  0C73  00A4               	movwf	??_getLoad_AD
  4570  0C74  0824               	movf	??_getLoad_AD,w
  4571  0C75  00A0               	movwf	getAD@adcon1
  4572  0C76  0826               	movf	getLoad_AD@channel,w
  4573  0C77  319F  2703  318C   	fcall	_getAD
  4574  0C7A  0020               	movlb	0	; select bank0
  4575  0C7B  0821               	movf	?_getAD+1,w
  4576  0C7C  0022               	movlb	2	; select bank2
  4577  0C7D  01C9               	clrf	((_Load+1)^(0+256)+33)
  4578  0C7E  07C9               	addwf	((_Load+1)^(0+256)+33),f
  4579  0C7F  0020               	movlb	0	; select bank0
  4580  0C80  0820               	movf	?_getAD,w
  4581  0C81  0022               	movlb	2	; select bank2
  4582  0C82  01C8               	clrf	(_Load^(0+256)+33)
  4583  0C83  07C8               	addwf	(_Load^(0+256)+33),f
  4584                           
  4585                           ;OverLoad_B1.c: 21: for (i = 0; i < 4; i++) {
  4586  0C84  0020               	movlb	0	; select bank0
  4587  0C85  01A9               	clrf	getLoad_AD@i
  4588  0C86  3004               	movlw	4
  4589  0C87  0229               	subwf	getLoad_AD@i,w
  4590  0C88  1803               	btfsc	3,0
  4591  0C89  2CB7               	goto	l10647
  4592  0C8A                     l10635:	
  4593                           
  4594                           ;OverLoad_B1.c: 22: if (Load.AH[i] < Load.ADRES && j == 0) {
  4595  0C8A  3529               	lslf	getLoad_AD@i,w
  4596  0C8B  3E32               	addlw	(_Load+11)& (0+255)
  4597  0C8C  0086               	movwf	6
  4598  0C8D  3001               	movlw	1	; select bank2/3
  4599  0C8E  0087               	movwf	7
  4600  0C8F  3F40               	moviw [0]fsr1
  4601  0C90  00A4               	movwf	??_getLoad_AD
  4602  0C91  3F41               	moviw [1]fsr1
  4603  0C92  00A5               	movwf	??_getLoad_AD+1
  4604  0C93  0022               	movlb	2	; select bank2
  4605  0C94  0849               	movf	((_Load+1)^(0+256)+33),w
  4606  0C95  0020               	movlb	0	; select bank0
  4607  0C96  0225               	subwf	??_getLoad_AD+1,w
  4608  0C97  1D03               	skipz
  4609  0C98  2C9D               	goto	u12375
  4610  0C99  0022               	movlb	2	; select bank2
  4611  0C9A  0848               	movf	(_Load^(0+256)+33),w
  4612  0C9B  0020               	movlb	0	; select bank0
  4613  0C9C  0224               	subwf	??_getLoad_AD,w
  4614  0C9D                     u12375:	
  4615  0C9D  1803               	skipnc
  4616  0C9E  2CAF               	goto	l10643
  4617  0C9F  08A8               	movf	getLoad_AD@j,f
  4618  0CA0  1D03               	skipz
  4619  0CA1  2CAF               	goto	l10643
  4620                           
  4621                           ;OverLoad_B1.c: 23: Load.AH[i] = Load.ADRES;
  4622  0CA2  3529               	lslf	getLoad_AD@i,w
  4623  0CA3  3E32               	addlw	(_Load+11)& (0+255)
  4624  0CA4  0086               	movwf	6
  4625  0CA5  3001               	movlw	1	; select bank2/3
  4626  0CA6  0087               	movwf	7
  4627  0CA7  0022               	movlb	2	; select bank2
  4628  0CA8  0848               	movf	(_Load^(0+256)+33),w
  4629  0CA9  3FC0               	movwi [0]fsr1
  4630  0CAA  0849               	movf	((_Load+1)^(0+256)+33),w
  4631  0CAB  3FC1               	movwi [1]fsr1
  4632                           
  4633                           ;OverLoad_B1.c: 24: j = 1;
  4634  0CAC  0020               	movlb	0	; select bank0
  4635  0CAD  01A8               	clrf	getLoad_AD@j
  4636  0CAE  0AA8               	incf	getLoad_AD@j,f
  4637  0CAF                     l10643:	
  4638  0CAF  3001               	movlw	1
  4639  0CB0  00A4               	movwf	??_getLoad_AD
  4640  0CB1  0824               	movf	??_getLoad_AD,w
  4641  0CB2  07A9               	addwf	getLoad_AD@i,f
  4642  0CB3  3004               	movlw	4
  4643  0CB4  0229               	subwf	getLoad_AD@i,w
  4644  0CB5  1C03               	skipc
  4645  0CB6  2C8A               	goto	l10635
  4646  0CB7                     l10647:	
  4647                           
  4648                           ;OverLoad_B1.c: 25: }
  4649                           ;OverLoad_B1.c: 26: }
  4650                           ;OverLoad_B1.c: 27: if (j == 0) {
  4651  0CB7  08A8               	movf	getLoad_AD@j,f
  4652  0CB8  1D03               	skipz
  4653  0CB9  0008               	return
  4654                           
  4655                           ;OverLoad_B1.c: 28: for (i = 0; i < 4; i++) {
  4656  0CBA  01A9               	clrf	getLoad_AD@i
  4657  0CBB                     L1:	
  4658  0CBB  3004               	movlw	4
  4659  0CBC  0229               	subwf	getLoad_AD@i,w
  4660  0CBD  1803               	btfsc	3,0
  4661  0CBE  0008               	return
  4662                           
  4663                           ;OverLoad_B1.c: 29: if (Load.AL[i] > Load.ADRES && k == 0) {
  4664  0CBF  3529               	lslf	getLoad_AD@i,w
  4665  0CC0  3E3C               	addlw	(_Load+21)& (0+255)
  4666  0CC1  0086               	movwf	6
  4667  0CC2  3001               	movlw	1	; select bank2/3
  4668  0CC3  0087               	movwf	7
  4669  0CC4  3F40               	moviw [0]fsr1
  4670  0CC5  00A4               	movwf	??_getLoad_AD
  4671  0CC6  3F41               	moviw [1]fsr1
  4672  0CC7  00A5               	movwf	??_getLoad_AD+1
  4673  0CC8  0825               	movf	??_getLoad_AD+1,w
  4674  0CC9  0022               	movlb	2	; select bank2
  4675  0CCA  0249               	subwf	((_Load+1)^(0+256)+33),w
  4676  0CCB  1D03               	skipz
  4677  0CCC  2CD1               	goto	u12425
  4678  0CCD  0020               	movlb	0	; select bank0
  4679  0CCE  0824               	movf	??_getLoad_AD,w
  4680  0CCF  0022               	movlb	2	; select bank2
  4681  0CD0  0248               	subwf	(_Load^(0+256)+33),w
  4682  0CD1                     u12425:	
  4683  0CD1  1803               	skipnc
  4684  0CD2  2CE4               	goto	l10663
  4685  0CD3  0020               	movlb	0	; select bank0
  4686  0CD4  08A7               	movf	getLoad_AD@k,f
  4687  0CD5  1D03               	skipz
  4688  0CD6  2CE4               	goto	l10663
  4689                           
  4690                           ;OverLoad_B1.c: 30: Load.AL[i] = Load.ADRES;
  4691  0CD7  3529               	lslf	getLoad_AD@i,w
  4692  0CD8  3E3C               	addlw	(_Load+21)& (0+255)
  4693  0CD9  0086               	movwf	6
  4694  0CDA  3001               	movlw	1	; select bank2/3
  4695  0CDB  0087               	movwf	7
  4696  0CDC  0022               	movlb	2	; select bank2
  4697  0CDD  0848               	movf	(_Load^(0+256)+33),w
  4698  0CDE  3FC0               	movwi [0]fsr1
  4699  0CDF  0849               	movf	((_Load+1)^(0+256)+33),w
  4700  0CE0  3FC1               	movwi [1]fsr1
  4701                           
  4702                           ;OverLoad_B1.c: 31: k = 1;
  4703  0CE1  0020               	movlb	0	; select bank0
  4704  0CE2  01A7               	clrf	getLoad_AD@k
  4705  0CE3  0AA7               	incf	getLoad_AD@k,f
  4706  0CE4                     l10663:	
  4707  0CE4  3001               	movlw	1
  4708  0CE5  0020               	movlb	0	; select bank0
  4709  0CE6  00A4               	movwf	??_getLoad_AD
  4710  0CE7  0824               	movf	??_getLoad_AD,w
  4711  0CE8  07A9               	addwf	getLoad_AD@i,f
  4712  0CE9  2CBB               	goto	L1
  4713  0CEA                     __end_of_getLoad_AD:	
  4714                           
  4715                           	psect	text5
  4716  1F03                     __ptext5:	
  4717 ;; *************** function _getAD *****************
  4718 ;; Defined at:
  4719 ;;		line 453 in file "../src/MCU_B1.c"
  4720 ;; Parameters:    Size  Location     Type
  4721 ;;  adcon0          1    wreg     unsigned char 
  4722 ;;  adcon1          1    0[BANK0 ] unsigned char 
  4723 ;; Auto vars:     Size  Location     Type
  4724 ;;  adcon0          1    3[BANK0 ] unsigned char 
  4725 ;; Return value:  Size  Location     Type
  4726 ;;                  2    0[BANK0 ] int 
  4727 ;; Registers used:
  4728 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4729 ;; Tracked objects:
  4730 ;;		On entry : 0/0
  4731 ;;		On exit  : 0/0
  4732 ;;		Unchanged: 0/0
  4733 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4734 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4735 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4736 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4737 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4738 ;;Total ram usage:        4 bytes
  4739 ;; Hardware stack levels used:    1
  4740 ;; Hardware stack levels required when called:    6
  4741 ;; This function calls:
  4742 ;;		_Timeout_Counter
  4743 ;;		_set_TimeoutCleared
  4744 ;; This function is called by:
  4745 ;;		_getLoad_AD
  4746 ;;		_getTemp_AD
  4747 ;; This function uses a non-reentrant model
  4748 ;;
  4749                           
  4750                           
  4751                           ;psect for function _getAD
  4752  1F03                     _getAD:	
  4753                           
  4754                           ;incstack = 0
  4755                           ; Regs used in _getAD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4756                           ;getAD@adcon0 stored from wreg
  4757  1F03  0020               	movlb	0	; select bank0
  4758  1F04  00A3               	movwf	getAD@adcon0
  4759                           
  4760                           ;MCU_B1.c: 454: ADCON0 = adcon0;
  4761  1F05  0823               	movf	getAD@adcon0,w
  4762  1F06  0021               	movlb	1	; select bank1
  4763  1F07  009D               	movwf	29	;volatile
  4764                           
  4765                           ;MCU_B1.c: 455: ADCON1 = adcon1;
  4766  1F08  0020               	movlb	0	; select bank0
  4767  1F09  0820               	movf	getAD@adcon1,w
  4768  1F0A  0021               	movlb	1	; select bank1
  4769  1F0B  009E               	movwf	30	;volatile
  4770                           
  4771                           ;MCU_B1.c: 456: GO_nDONE = 1;
  4772  1F0C  149D               	bsf	29,1	;volatile
  4773                           
  4774                           ;MCU_B1.c: 457: while (GO_nDONE == 1 && myMain.Timeout == 0) {
  4775  1F0D  2F11               	goto	l10115
  4776  1F0E                     l10113:	
  4777                           
  4778                           ;MCU_B1.c: 458: Timeout_Counter();
  4779  1F0E  319D  2571  319F   	fcall	_Timeout_Counter
  4780  1F11                     l10115:	
  4781  1F11  0021               	movlb	1	; select bank1
  4782  1F12  1C9D               	btfss	29,1	;volatile
  4783  1F13  2F16               	goto	l10119
  4784  1F14  1D2B               	btfss	(_myMain^(0+128)+11),2
  4785  1F15  2F0E               	goto	l10113
  4786  1F16                     l10119:	
  4787                           
  4788                           ;MCU_B1.c: 459: };
  4789                           ;MCU_B1.c: 460: set_TimeoutCleared();
  4790  1F16  319A  22E1         	fcall	_set_TimeoutCleared
  4791                           
  4792                           ;MCU_B1.c: 461: return ((ADRESH*256)+ADRESL);
  4793  1F18  0021               	movlb	1	; select bank1
  4794  1F19  081C               	movf	28,w	;volatile
  4795  1F1A  0020               	movlb	0	; select bank0
  4796  1F1B  01A1               	clrf	?_getAD+1
  4797  1F1C  07A1               	addwf	?_getAD+1,f
  4798  1F1D  0021               	movlb	1	; select bank1
  4799  1F1E  081B               	movf	27,w	;volatile
  4800  1F1F  0020               	movlb	0	; select bank0
  4801  1F20  01A0               	clrf	?_getAD
  4802  1F21  07A0               	addwf	?_getAD,f
  4803  1F22  0008               	return
  4804  1F23                     __end_of_getAD:	
  4805                           
  4806                           	psect	text6
  4807  1C74                     __ptext6:	
  4808 ;; *************** function _WDT_Main *****************
  4809 ;; Defined at:
  4810 ;;		line 1097 in file "../src/MCU_B1.c"
  4811 ;; Parameters:    Size  Location     Type
  4812 ;;		None
  4813 ;; Auto vars:     Size  Location     Type
  4814 ;;		None
  4815 ;; Return value:  Size  Location     Type
  4816 ;;		None               void
  4817 ;; Registers used:
  4818 ;;		wreg, status,2, status,0, pclath, cstack
  4819 ;; Tracked objects:
  4820 ;;		On entry : 0/0
  4821 ;;		On exit  : 0/0
  4822 ;;		Unchanged: 0/0
  4823 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4824 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4825 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4826 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4827 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4828 ;;Total ram usage:        1 bytes
  4829 ;; Hardware stack levels used:    1
  4830 ;; Hardware stack levels required when called:    6
  4831 ;; This function calls:
  4832 ;;		_WDT_Clearing
  4833 ;; This function is called by:
  4834 ;;		_main
  4835 ;; This function uses a non-reentrant model
  4836 ;;
  4837                           
  4838                           
  4839                           ;psect for function _WDT_Main
  4840  1C74                     _WDT_Main:	
  4841                           
  4842                           ;MCU_B1.c: 1098: if (WDT.Enable == 1) {
  4843                           
  4844                           ;incstack = 0
  4845                           ; Regs used in _WDT_Main: [wreg+status,2+status,0+pclath+cstack]
  4846  1C74  0022               	movlb	2	; select bank2
  4847  1C75  1C25               	btfss	_WDT^(0+256),0
  4848  1C76  0008               	return
  4849                           
  4850                           ;MCU_B1.c: 1099: if (WDT.Timer-- > 0) {
  4851  1C77  3001               	movlw	1
  4852  1C78  02A6               	subwf	(_WDT^(0+256)+1),f
  4853  1C79  0826               	movf	(_WDT^(0+256)+1),w
  4854  1C7A  3AFF               	xorlw	255
  4855  1C7B  1903               	skipnz
  4856  1C7C  0008               	return
  4857                           
  4858                           ;MCU_B1.c: 1100: WDT.Timer = 100;
  4859  1C7D  3064               	movlw	100
  4860  1C7E  0020               	movlb	0	; select bank0
  4861  1C7F  00A0               	movwf	??_WDT_Main
  4862  1C80  0820               	movf	??_WDT_Main,w
  4863  1C81  0022               	movlb	2	; select bank2
  4864  1C82  00A6               	movwf	(_WDT^(0+256)+1)
  4865                           
  4866                           ;MCU_B1.c: 1101: WDT_Clearing();
  4867  1C83  3180  2002         	fcall	_WDT_Clearing
  4868  1C85  0008               	return
  4869  1C86                     __end_of_WDT_Main:	
  4870                           
  4871                           	psect	text7
  4872  0002                     __ptext7:	
  4873 ;; *************** function _WDT_Clearing *****************
  4874 ;; Defined at:
  4875 ;;		line 1107 in file "../src/MCU_B1.c"
  4876 ;; Parameters:    Size  Location     Type
  4877 ;;		None
  4878 ;; Auto vars:     Size  Location     Type
  4879 ;;		None
  4880 ;; Return value:  Size  Location     Type
  4881 ;;		None               void
  4882 ;; Registers used:
  4883 ;;		None
  4884 ;; Tracked objects:
  4885 ;;		On entry : 0/0
  4886 ;;		On exit  : 0/0
  4887 ;;		Unchanged: 0/0
  4888 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4889 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4890 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4891 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4892 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4893 ;;Total ram usage:        0 bytes
  4894 ;; Hardware stack levels used:    1
  4895 ;; Hardware stack levels required when called:    5
  4896 ;; This function calls:
  4897 ;;		Nothing
  4898 ;; This function is called by:
  4899 ;;		_WDT_Main
  4900 ;; This function uses a non-reentrant model
  4901 ;;
  4902                           
  4903                           
  4904                           ;psect for function _WDT_Clearing
  4905  0002                     _WDT_Clearing:	
  4906                           
  4907                           ;incstack = 0
  4908                           ; Regs used in _WDT_Clearing: []
  4909  0002  0064               	clrwdt	;# 
  4910  0003  0008               	return
  4911  0004                     __end_of_WDT_Clearing:	
  4912                           
  4913                           	psect	text8
  4914  1ACE                     __ptext8:	
  4915 ;; *************** function _Temp_Main *****************
  4916 ;; Defined at:
  4917 ;;		line 49 in file "../src/OverTemperature_B1.c"
  4918 ;; Parameters:    Size  Location     Type
  4919 ;;		None
  4920 ;; Auto vars:     Size  Location     Type
  4921 ;;		None
  4922 ;; Return value:  Size  Location     Type
  4923 ;;		None               void
  4924 ;; Registers used:
  4925 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4926 ;; Tracked objects:
  4927 ;;		On entry : 0/0
  4928 ;;		On exit  : 0/0
  4929 ;;		Unchanged: 0/0
  4930 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4931 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4932 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4933 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4934 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4935 ;;Total ram usage:        0 bytes
  4936 ;; Hardware stack levels used:    1
  4937 ;; Hardware stack levels required when called:    8
  4938 ;; This function calls:
  4939 ;;		_setTemp_Main
  4940 ;; This function is called by:
  4941 ;;		_main
  4942 ;; This function uses a non-reentrant model
  4943 ;;
  4944                           
  4945                           
  4946                           ;psect for function _Temp_Main
  4947  1ACE                     _Temp_Main:	
  4948                           
  4949                           ;OverTemperature_B1.c: 51: setTemp_Main();
  4950                           
  4951                           ;incstack = 0
  4952                           ; Regs used in _Temp_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4953  1ACE  318F  2750         	fcall	_setTemp_Main
  4954  1AD0  0008               	return
  4955  1AD1                     __end_of_Temp_Main:	
  4956                           
  4957                           	psect	text9
  4958  0F50                     __ptext9:	
  4959 ;; *************** function _setTemp_Main *****************
  4960 ;; Defined at:
  4961 ;;		line 56 in file "../src/OverTemperature_B1.c"
  4962 ;; Parameters:    Size  Location     Type
  4963 ;;		None
  4964 ;; Auto vars:     Size  Location     Type
  4965 ;;  error           1   72[BANK0 ] unsigned char 
  4966 ;; Return value:  Size  Location     Type
  4967 ;;		None               void
  4968 ;; Registers used:
  4969 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4970 ;; Tracked objects:
  4971 ;;		On entry : 0/0
  4972 ;;		On exit  : 0/0
  4973 ;;		Unchanged: 0/0
  4974 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4975 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4976 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4977 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4978 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4979 ;;Total ram usage:        3 bytes
  4980 ;; Hardware stack levels used:    1
  4981 ;; Hardware stack levels required when called:    7
  4982 ;; This function calls:
  4983 ;;		_getMain_All_Error_Status
  4984 ;;		_setBuz
  4985 ;;		_setProductData
  4986 ;; This function is called by:
  4987 ;;		_Temp_Main
  4988 ;; This function uses a non-reentrant model
  4989 ;;
  4990                           
  4991                           
  4992                           ;psect for function _setTemp_Main
  4993  0F50                     _setTemp_Main:	
  4994                           
  4995                           ;OverTemperature_B1.c: 57: char error = getMain_All_Error_Status(0);
  4996                           
  4997                           ;incstack = 0
  4998                           ; Regs used in _setTemp_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4999  0F50  3000               	movlw	0
  5000  0F51  3191  2166  318F   	fcall	_getMain_All_Error_Status
  5001  0F54  0020               	movlb	0	; select bank0
  5002  0F55  00E6               	movwf	??_setTemp_Main
  5003  0F56  0866               	movf	??_setTemp_Main,w
  5004  0F57  00E8               	movwf	setTemp_Main@error
  5005                           
  5006                           ;OverTemperature_B1.c: 58: if (Temp.Enable == 1) {
  5007  0F58  0021               	movlb	1	; select bank1
  5008  0F59  1C56               	btfss	_Temp^(0+128),0
  5009  0F5A  2FFC               	goto	l1897
  5010                           
  5011                           ;OverTemperature_B1.c: 65: if (Temp.ADtoGO == 0) {
  5012  0F5B  1956               	btfsc	_Temp^(0+128),2
  5013  0F5C  2F6C               	goto	l10185
  5014                           
  5015                           ;OverTemperature_B1.c: 66: Temp.Time++;
  5016  0F5D  3001               	movlw	1
  5017  0F5E  07D7               	addwf	(_Temp^(0+128)+1),f
  5018  0F5F  3000               	movlw	0
  5019  0F60  3DD8               	addwfc	((_Temp+1)^(0+128)+1),f
  5020                           
  5021                           ;OverTemperature_B1.c: 67: if (Temp.Time >= 500) {
  5022  0F61  3001               	movlw	1
  5023  0F62  0258               	subwf	((_Temp+1)^(0+128)+1),w
  5024  0F63  30F4               	movlw	244
  5025  0F64  1903               	skipnz
  5026  0F65  0257               	subwf	(_Temp^(0+128)+1),w
  5027  0F66  1C03               	skipc
  5028  0F67  0008               	return
  5029                           
  5030                           ;OverTemperature_B1.c: 68: Temp.Time = 0;
  5031  0F68  01D7               	clrf	(_Temp^(0+128)+1)
  5032  0F69  01D8               	clrf	((_Temp+1)^(0+128)+1)
  5033                           
  5034                           ;OverTemperature_B1.c: 69: Temp.ADtoGO = 1;
  5035  0F6A  1556               	bsf	_Temp^(0+128),2
  5036                           
  5037                           ;OverTemperature_B1.c: 70: }
  5038                           ;OverTemperature_B1.c: 71: } else {
  5039  0F6B  0008               	return
  5040  0F6C                     l10185:	
  5041                           
  5042                           ;OverTemperature_B1.c: 72: Temp.Time++;
  5043  0F6C  3001               	movlw	1
  5044  0F6D  07D7               	addwf	(_Temp^(0+128)+1),f
  5045  0F6E  3000               	movlw	0
  5046  0F6F  3DD8               	addwfc	((_Temp+1)^(0+128)+1),f
  5047                           
  5048                           ;OverTemperature_B1.c: 73: if (Temp.Time >= 5) {
  5049  0F70  3000               	movlw	0
  5050  0F71  0258               	subwf	((_Temp+1)^(0+128)+1),w
  5051  0F72  3005               	movlw	5
  5052  0F73  1903               	skipnz
  5053  0F74  0257               	subwf	(_Temp^(0+128)+1),w
  5054  0F75  1C03               	skipc
  5055  0F76  0008               	return
  5056                           
  5057                           ;OverTemperature_B1.c: 74: Temp.Time = 0;
  5058  0F77  01D7               	clrf	(_Temp^(0+128)+1)
  5059  0F78  01D8               	clrf	((_Temp+1)^(0+128)+1)
  5060                           
  5061                           ;OverTemperature_B1.c: 76: if (Temp.ADH[0] > 0 && Temp.ADH[1] > 0) {
  5062  0F79  3008               	movlw	8
  5063  0F7A  3ED6               	addlw	_Temp& (0+255)
  5064  0F7B  0086               	movwf	6
  5065  0F7C  0187               	clrf	7
  5066  0F7D  0016               	moviw fsr1++
  5067  0F7E  0401               	iorwf	1,w
  5068  0F7F  1903               	skipnz
  5069  0F80  2FF6               	goto	l1902
  5070  0F81  300A               	movlw	10
  5071  0F82  3ED6               	addlw	_Temp& (0+255)
  5072  0F83  0086               	movwf	6
  5073  0F84  0187               	clrf	7
  5074  0F85  0016               	moviw fsr1++
  5075  0F86  0401               	iorwf	1,w
  5076  0F87  1903               	skipnz
  5077  0F88  2FF6               	goto	l1902
  5078                           
  5079                           ;OverTemperature_B1.c: 77: Temp.ADtoGO = 0;
  5080  0F89  1156               	bcf	_Temp^(0+128),2
  5081                           
  5082                           ;OverTemperature_B1.c: 78: Temp.AD = (Temp.ADH[0] + Temp.ADH[1]) / 2;
  5083  0F8A  300A               	movlw	10
  5084  0F8B  3ED6               	addlw	_Temp& (0+255)
  5085  0F8C  0086               	movwf	6
  5086  0F8D  0187               	clrf	7
  5087  0F8E  3008               	movlw	8
  5088  0F8F  3ED6               	addlw	_Temp& (0+255)
  5089  0F90  0084               	movwf	4
  5090  0F91  0185               	clrf	5
  5091  0F92  3F40               	moviw [0]fsr1
  5092  0F93  0700               	addwf	0,w
  5093  0F94  0020               	movlb	0	; select bank0
  5094  0F95  00E6               	movwf	??_setTemp_Main
  5095  0F96  3101               	addfsr 0,1
  5096  0F97  3F41               	moviw [1]fsr1
  5097  0F98  3D00               	addwfc	0,w
  5098  0F99  00E7               	movwf	??_setTemp_Main+1
  5099  0F9A  36E7               	lsrf	??_setTemp_Main+1,f
  5100  0F9B  0CE6               	rrf	??_setTemp_Main,f
  5101  0F9C  0866               	movf	??_setTemp_Main,w
  5102  0F9D  0021               	movlb	1	; select bank1
  5103  0F9E  00DC               	movwf	(_Temp^(0+128)+6)
  5104  0F9F  0020               	movlb	0	; select bank0
  5105  0FA0  0867               	movf	??_setTemp_Main+1,w
  5106  0FA1  0021               	movlb	1	; select bank1
  5107  0FA2  00DD               	movwf	((_Temp+1)^(0+128)+6)
  5108                           
  5109                           ;OverTemperature_B1.c: 89: Temp.SafeValue = 455;
  5110  0FA3  30C7               	movlw	199
  5111  0FA4  00E4               	movwf	(_Temp^(0+128)+14)
  5112  0FA5  3001               	movlw	1
  5113  0FA6  00E5               	movwf	(_Temp^(0+128)+15)
  5114                           
  5115                           ;OverTemperature_B1.c: 90: Temp.DangerValue = 415;
  5116  0FA7  309F               	movlw	159
  5117  0FA8  00E6               	movwf	(_Temp^(0+128)+16)
  5118  0FA9  3001               	movlw	1
  5119  0FAA  00E7               	movwf	(_Temp^(0+128)+17)
  5120                           
  5121                           ;OverTemperature_B1.c: 96: if (Temp.ERROR == 1) {
  5122  0FAB  1CD6               	btfss	_Temp^(0+128),1
  5123  0FAC  2FCD               	goto	l10217
  5124                           
  5125                           ;OverTemperature_B1.c: 97: if (Temp.AD >= Temp.SafeValue) {
  5126  0FAD  0865               	movf	((_Temp+1)^(0+128)+14),w
  5127  0FAE  025D               	subwf	((_Temp+1)^(0+128)+6),w
  5128  0FAF  1D03               	skipz
  5129  0FB0  2FB3               	goto	u11565
  5130  0FB1  0864               	movf	(_Temp^(0+128)+14),w
  5131  0FB2  025C               	subwf	(_Temp^(0+128)+6),w
  5132  0FB3                     u11565:	
  5133  0FB3  1C03               	skipc
  5134  0FB4  2FCB               	goto	l10215
  5135                           
  5136                           ;OverTemperature_B1.c: 98: Temp.Count++;
  5137  0FB5  3001               	movlw	1
  5138  0FB6  0020               	movlb	0	; select bank0
  5139  0FB7  00E6               	movwf	??_setTemp_Main
  5140  0FB8  0866               	movf	??_setTemp_Main,w
  5141  0FB9  0021               	movlb	1	; select bank1
  5142  0FBA  07D9               	addwf	(_Temp^(0+128)+3),f
  5143                           
  5144                           ;OverTemperature_B1.c: 99: if (Temp.Count >= 3) {
  5145  0FBB  3003               	movlw	3
  5146  0FBC  0259               	subwf	(_Temp^(0+128)+3),w
  5147  0FBD  1C03               	skipc
  5148  0FBE  2FE3               	goto	l10229
  5149                           
  5150                           ;OverTemperature_B1.c: 100: Temp.Count = 0;
  5151  0FBF  01D9               	clrf	(_Temp^(0+128)+3)
  5152                           
  5153                           ;OverTemperature_B1.c: 101: Temp.ERROR = 0;
  5154  0FC0  10D6               	bcf	_Temp^(0+128),1
  5155                           
  5156                           ;OverTemperature_B1.c: 102: setBuz(2, 100);
  5157  0FC1  3064               	movlw	100
  5158  0FC2  0020               	movlb	0	; select bank0
  5159  0FC3  00A9               	movwf	setBuz@time
  5160  0FC4  3000               	movlw	0
  5161  0FC5  00AA               	movwf	setBuz@time+1
  5162  0FC6  3002               	movlw	2
  5163  0FC7  3197  274E  318F   	fcall	_setBuz
  5164                           
  5165                           ;OverTemperature_B1.c: 103: }
  5166                           ;OverTemperature_B1.c: 104: } else {
  5167  0FCA  2FE3               	goto	l10229
  5168  0FCB                     l10215:	
  5169                           
  5170                           ;OverTemperature_B1.c: 105: Temp.Count = 0;
  5171  0FCB  0021               	movlb	1	; select bank1
  5172  0FCC  2FE2               	goto	l10227
  5173  0FCD                     l10217:	
  5174                           ;OverTemperature_B1.c: 106: }
  5175                           ;OverTemperature_B1.c: 107: } else {
  5176                           
  5177                           
  5178                           ;OverTemperature_B1.c: 108: if (Temp.AD <= Temp.DangerValue) {
  5179  0FCD  085D               	movf	((_Temp+1)^(0+128)+6),w
  5180  0FCE  0267               	subwf	((_Temp+1)^(0+128)+16),w
  5181  0FCF  1D03               	skipz
  5182  0FD0  2FD3               	goto	u11585
  5183  0FD1  085C               	movf	(_Temp^(0+128)+6),w
  5184  0FD2  0266               	subwf	(_Temp^(0+128)+16),w
  5185  0FD3                     u11585:	
  5186  0FD3  1C03               	skipc
  5187  0FD4  2FE2               	goto	l10227
  5188                           
  5189                           ;OverTemperature_B1.c: 109: Temp.Count++;
  5190  0FD5  3001               	movlw	1
  5191  0FD6  0020               	movlb	0	; select bank0
  5192  0FD7  00E6               	movwf	??_setTemp_Main
  5193  0FD8  0866               	movf	??_setTemp_Main,w
  5194  0FD9  0021               	movlb	1	; select bank1
  5195  0FDA  07D9               	addwf	(_Temp^(0+128)+3),f
  5196                           
  5197                           ;OverTemperature_B1.c: 110: if (Temp.Count >= 3) {
  5198  0FDB  3003               	movlw	3
  5199  0FDC  0259               	subwf	(_Temp^(0+128)+3),w
  5200  0FDD  1C03               	skipc
  5201  0FDE  2FE3               	goto	l10229
  5202                           
  5203                           ;OverTemperature_B1.c: 111: Temp.Count = 0;
  5204  0FDF  01D9               	clrf	(_Temp^(0+128)+3)
  5205                           
  5206                           ;OverTemperature_B1.c: 112: Temp.ERROR = 1;
  5207  0FE0  14D6               	bsf	_Temp^(0+128),1
  5208                           
  5209                           ;OverTemperature_B1.c: 113: }
  5210                           ;OverTemperature_B1.c: 114: } else {
  5211  0FE1  2FE3               	goto	l10229
  5212  0FE2                     l10227:	
  5213                           
  5214                           ;OverTemperature_B1.c: 115: Temp.Count = 0;
  5215  0FE2  01D9               	clrf	(_Temp^(0+128)+3)
  5216  0FE3                     l10229:	
  5217                           
  5218                           ;OverTemperature_B1.c: 116: }
  5219                           ;OverTemperature_B1.c: 117: }
  5220                           ;OverTemperature_B1.c: 118: setProductData(24, Temp.AD >> 8);
  5221  0FE3  0021               	movlb	1	; select bank1
  5222  0FE4  085D               	movf	((_Temp+1)^(0+128)+6),w
  5223  0FE5  0020               	movlb	0	; select bank0
  5224  0FE6  00E6               	movwf	??_setTemp_Main
  5225  0FE7  0866               	movf	??_setTemp_Main,w
  5226  0FE8  00E2               	movwf	setProductData@value
  5227  0FE9  3018               	movlw	24
  5228  0FEA  319B  23CC  318F   	fcall	_setProductData
  5229                           
  5230                           ;OverTemperature_B1.c: 119: setProductData(25, Temp.AD);
  5231  0FED  0021               	movlb	1	; select bank1
  5232  0FEE  085C               	movf	(_Temp^(0+128)+6),w
  5233  0FEF  0020               	movlb	0	; select bank0
  5234  0FF0  00E6               	movwf	??_setTemp_Main
  5235  0FF1  0866               	movf	??_setTemp_Main,w
  5236  0FF2  00E2               	movwf	setProductData@value
  5237  0FF3  3019               	movlw	25
  5238  0FF4  319B  23CC         	fcall	_setProductData
  5239  0FF6                     l1902:	
  5240                           
  5241                           ;OverTemperature_B1.c: 135: }
  5242                           ;OverTemperature_B1.c: 136: Temp.ADH[0] = 0;
  5243  0FF6  0021               	movlb	1	; select bank1
  5244  0FF7  01DE               	clrf	(_Temp^(0+128)+8)
  5245  0FF8  01DF               	clrf	((_Temp+1)^(0+128)+8)
  5246                           
  5247                           ;OverTemperature_B1.c: 137: Temp.ADH[1] = 0;
  5248  0FF9  01E0               	clrf	(_Temp^(0+128)+10)
  5249  0FFA  01E1               	clrf	((_Temp+1)^(0+128)+10)
  5250                           
  5251                           ;OverTemperature_B1.c: 138: }
  5252                           ;OverTemperature_B1.c: 139: }
  5253                           ;OverTemperature_B1.c: 141: } else {
  5254  0FFB  0008               	return
  5255  0FFC                     l1897:	
  5256                           
  5257                           ;OverTemperature_B1.c: 142: if (myMain.PowerON == 1) {
  5258  0FFC  1C20               	btfss	_myMain^(0+128),0
  5259  0FFD  0008               	return
  5260                           
  5261                           ;OverTemperature_B1.c: 143: Temp.Enable = 1;
  5262  0FFE  1456               	bsf	_Temp^(0+128),0
  5263  0FFF  0008               	return
  5264  1000                     __end_of_setTemp_Main:	
  5265                           
  5266                           	psect	text10
  5267  1ACB                     __ptext10:	
  5268 ;; *************** function _Temp_Initialization *****************
  5269 ;; Defined at:
  5270 ;;		line 8 in file "../src/OverTemperature_B1.c"
  5271 ;; Parameters:    Size  Location     Type
  5272 ;;		None
  5273 ;; Auto vars:     Size  Location     Type
  5274 ;;		None
  5275 ;; Return value:  Size  Location     Type
  5276 ;;		None               void
  5277 ;; Registers used:
  5278 ;;		status,2, status,0, pclath, cstack
  5279 ;; Tracked objects:
  5280 ;;		On entry : 0/0
  5281 ;;		On exit  : 0/0
  5282 ;;		Unchanged: 0/0
  5283 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5284 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5285 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5286 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5287 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5288 ;;Total ram usage:        0 bytes
  5289 ;; Hardware stack levels used:    1
  5290 ;; Hardware stack levels required when called:    6
  5291 ;; This function calls:
  5292 ;;		_setTemp_Initialization
  5293 ;; This function is called by:
  5294 ;;		_main
  5295 ;; This function uses a non-reentrant model
  5296 ;;
  5297                           
  5298                           
  5299                           ;psect for function _Temp_Initialization
  5300  1ACB                     _Temp_Initialization:	
  5301                           
  5302                           ;OverTemperature_B1.c: 10: setTemp_Initialization();
  5303                           
  5304                           ;incstack = 0
  5305                           ; Regs used in _Temp_Initialization: [status,2+status,0+pclath+cstack]
  5306  1ACB  3190  2066         	fcall	_setTemp_Initialization
  5307  1ACD  0008               	return
  5308  1ACE                     __end_of_Temp_Initialization:	
  5309                           
  5310                           	psect	text11
  5311  1066                     __ptext11:	
  5312 ;; *************** function _setTemp_Initialization *****************
  5313 ;; Defined at:
  5314 ;;		line 44 in file "../src/OverTemperature_B1.c"
  5315 ;; Parameters:    Size  Location     Type
  5316 ;;		None
  5317 ;; Auto vars:     Size  Location     Type
  5318 ;;		None
  5319 ;; Return value:  Size  Location     Type
  5320 ;;		None               void
  5321 ;; Registers used:
  5322 ;;		None
  5323 ;; Tracked objects:
  5324 ;;		On entry : 0/0
  5325 ;;		On exit  : 0/0
  5326 ;;		Unchanged: 0/0
  5327 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5328 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5329 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5330 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5331 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5332 ;;Total ram usage:        0 bytes
  5333 ;; Hardware stack levels used:    1
  5334 ;; Hardware stack levels required when called:    5
  5335 ;; This function calls:
  5336 ;;		Nothing
  5337 ;; This function is called by:
  5338 ;;		_Temp_Initialization
  5339 ;; This function uses a non-reentrant model
  5340 ;;
  5341                           
  5342                           
  5343                           ;psect for function _setTemp_Initialization
  5344  1066                     _setTemp_Initialization:	
  5345                           
  5346                           ;incstack = 0
  5347                           ; Regs used in _setTemp_Initialization: []
  5348  1066  0008               	return
  5349  1067                     __end_of_setTemp_Initialization:	
  5350                           
  5351                           	psect	text12
  5352  1B54                     __ptext12:	
  5353 ;; *************** function _Switch_Main *****************
  5354 ;; Defined at:
  5355 ;;		line 72 in file "../src/Switch_B1.c"
  5356 ;; Parameters:    Size  Location     Type
  5357 ;;		None
  5358 ;; Auto vars:     Size  Location     Type
  5359 ;;		None
  5360 ;; Return value:  Size  Location     Type
  5361 ;;		None               void
  5362 ;; Registers used:
  5363 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5364 ;; Tracked objects:
  5365 ;;		On entry : 0/0
  5366 ;;		On exit  : 0/0
  5367 ;;		Unchanged: 0/0
  5368 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5369 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5370 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5371 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5372 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5373 ;;Total ram usage:        0 bytes
  5374 ;; Hardware stack levels used:    1
  5375 ;; Hardware stack levels required when called:   10
  5376 ;; This function calls:
  5377 ;;		_TouchPower
  5378 ;;		_setSw_Main
  5379 ;; This function is called by:
  5380 ;;		_main
  5381 ;; This function uses a non-reentrant model
  5382 ;;
  5383                           
  5384                           
  5385                           ;psect for function _Switch_Main
  5386  1B54                     _Switch_Main:	
  5387                           
  5388                           ;Switch_B1.c: 75: setSw_Main(1);
  5389                           
  5390                           ;incstack = 0
  5391                           ; Regs used in _Switch_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5392  1B54  3001               	movlw	1
  5393  1B55  3181  21F5  319B   	fcall	_setSw_Main
  5394                           
  5395                           ;Switch_B1.c: 79: setSw_Main(2);
  5396  1B58  3002               	movlw	2
  5397  1B59  3181  21F5  319B   	fcall	_setSw_Main
  5398                           
  5399                           ;Switch_B1.c: 87: TouchPower();
  5400  1B5C  319D  259B         	fcall	_TouchPower
  5401  1B5E  0008               	return
  5402  1B5F                     __end_of_Switch_Main:	
  5403                           
  5404                           	psect	text13
  5405  01F5                     __ptext13:	
  5406 ;; *************** function _setSw_Main *****************
  5407 ;; Defined at:
  5408 ;;		line 121 in file "../src/Switch_B1.c"
  5409 ;; Parameters:    Size  Location     Type
  5410 ;;  sw              1    wreg     unsigned char 
  5411 ;; Auto vars:     Size  Location     Type
  5412 ;;  sw              1   77[BANK0 ] unsigned char 
  5413 ;; Return value:  Size  Location     Type
  5414 ;;		None               void
  5415 ;; Registers used:
  5416 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5417 ;; Tracked objects:
  5418 ;;		On entry : 0/0
  5419 ;;		On exit  : 0/0
  5420 ;;		Unchanged: 0/0
  5421 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5422 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5423 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5424 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5425 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5426 ;;Total ram usage:        3 bytes
  5427 ;; Hardware stack levels used:    1
  5428 ;; Hardware stack levels required when called:    9
  5429 ;; This function calls:
  5430 ;;		_SwPointSelect
  5431 ;;		_getMain_All_Error_Status
  5432 ;;		_getSw_KeyStatus
  5433 ;;		_setBuz
  5434 ;;		_setDimmerLights_AdjOn
  5435 ;;		_setDimmerLights_SwOff
  5436 ;;		_setDimmerLights_SwOn
  5437 ;;		_setRF_Learn
  5438 ;; This function is called by:
  5439 ;;		_Switch_Main
  5440 ;; This function uses a non-reentrant model
  5441 ;;
  5442                           
  5443                           
  5444                           ;psect for function _setSw_Main
  5445  01F5                     _setSw_Main:	
  5446                           
  5447                           ;incstack = 0
  5448                           ; Regs used in _setSw_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5449                           ;setSw_Main@sw stored from wreg
  5450  01F5  0020               	movlb	0	; select bank0
  5451  01F6  00ED               	movwf	setSw_Main@sw
  5452                           
  5453                           ;Switch_B1.c: 122: SwPointSelect(sw);
  5454  01F7  086D               	movf	setSw_Main@sw,w
  5455  01F8  319D  2549  3181   	fcall	_SwPointSelect
  5456                           
  5457                           ;Switch_B1.c: 123: if (Sw->Enable == 1) {
  5458  01FB  0877               	movf	_Sw,w
  5459  01FC  0086               	movwf	6
  5460  01FD  3001               	movlw	1	; select bank2/3
  5461  01FE  0087               	movwf	7
  5462  01FF  1C01               	btfss	1,0
  5463  0200  2B5F               	goto	l2667
  5464                           
  5465                           ;Switch_B1.c: 125: if (getMain_All_Error_Status(0) == 0) {
  5466  0201  3000               	movlw	0
  5467  0202  3191  2166  3181   	fcall	_getMain_All_Error_Status
  5468  0205  3800               	iorlw	0
  5469  0206  1D03               	skipz
  5470  0207  2A23               	goto	l10343
  5471                           
  5472                           ;Switch_B1.c: 126: Sw->Detect = 0;
  5473  0208  0A77               	incf	_Sw,w
  5474  0209  0086               	movwf	6
  5475  020A  3001               	movlw	1	; select bank2/3
  5476  020B  0087               	movwf	7
  5477  020C  1081               	bcf	1,1
  5478                           
  5479                           ;Switch_B1.c: 127: Sw->Touch = getSw_KeyStatus(sw) == 1 ? 1 : 0;
  5480  020D  0020               	movlb	0	; select bank0
  5481  020E  086D               	movf	setSw_Main@sw,w
  5482  020F  319E  26A4  3181   	fcall	_getSw_KeyStatus
  5483  0212  3A01               	xorlw	1
  5484  0213  3000               	movlw	0
  5485  0214  1903               	skipnz
  5486  0215  3001               	movlw	1
  5487  0216  0020               	movlb	0	; select bank0
  5488  0217  00EB               	movwf	??_setSw_Main
  5489  0218  0877               	movf	_Sw,w
  5490  0219  0086               	movwf	6
  5491  021A  3001               	movlw	1	; select bank2/3
  5492  021B  0087               	movwf	7
  5493  021C  0DEB               	rlf	??_setSw_Main,f
  5494  021D  0801               	movf	1,w
  5495  021E  066B               	xorwf	??_setSw_Main,w
  5496  021F  39FD               	andlw	-3
  5497  0220  066B               	xorwf	??_setSw_Main,w
  5498  0221  0081               	movwf	1
  5499                           
  5500                           ;Switch_B1.c: 128: } else {
  5501  0222  2A38               	goto	l2669
  5502  0223                     l10343:	
  5503                           
  5504                           ;Switch_B1.c: 129: if (Sw->Detect == 0) {
  5505  0223  0A77               	incf	_Sw,w
  5506  0224  0086               	movwf	6
  5507  0225  3001               	movlw	1	; select bank2/3
  5508  0226  0087               	movwf	7
  5509  0227  1881               	btfsc	1,1
  5510  0228  2A38               	goto	l2669
  5511                           
  5512                           ;Switch_B1.c: 130: Sw->Detect = 1;
  5513  0229  0A77               	incf	_Sw,w
  5514  022A  0086               	movwf	6
  5515  022B  3001               	movlw	1	; select bank2/3
  5516  022C  0087               	movwf	7
  5517  022D  1481               	bsf	1,1
  5518                           
  5519                           ;Switch_B1.c: 131: Sw->Touch = 0;
  5520  022E  0877               	movf	_Sw,w
  5521  022F  0086               	movwf	6
  5522  0230  3001               	movlw	1	; select bank2/3
  5523  0231  0087               	movwf	7
  5524  0232  1081               	bcf	1,1
  5525                           
  5526                           ;Switch_B1.c: 132: Sw->Debounce = 1;
  5527  0233  0877               	movf	_Sw,w
  5528  0234  0086               	movwf	6
  5529  0235  3001               	movlw	1	; select bank2/3
  5530  0236  0087               	movwf	7
  5531  0237  1501               	bsf	1,2
  5532  0238                     l2669:	
  5533                           
  5534                           ;Switch_B1.c: 133: }
  5535                           ;Switch_B1.c: 134: }
  5536                           ;Switch_B1.c: 136: if (Sw->Touch == 1) {
  5537  0238  0877               	movf	_Sw,w
  5538  0239  0086               	movwf	6
  5539  023A  3001               	movlw	1	; select bank2/3
  5540  023B  0087               	movwf	7
  5541  023C  1C81               	btfss	1,1
  5542  023D  2B08               	goto	l10393
  5543                           
  5544                           ;Switch_B1.c: 137: if (Sw->Debounce == 0) {
  5545  023E  0877               	movf	_Sw,w
  5546  023F  0086               	movwf	6
  5547  0240  3001               	movlw	1	; select bank2/3
  5548  0241  0087               	movwf	7
  5549  0242  1901               	btfsc	1,2
  5550  0243  2A66               	goto	l10359
  5551                           
  5552                           ;Switch_B1.c: 138: Sw->DebounceTime++;
  5553  0244  3001               	movlw	1
  5554  0245  0020               	movlb	0	; select bank0
  5555  0246  00EB               	movwf	??_setSw_Main
  5556  0247  0877               	movf	_Sw,w
  5557  0248  3E02               	addlw	2
  5558  0249  0086               	movwf	6
  5559  024A  3001               	movlw	1	; select bank2/3
  5560  024B  0087               	movwf	7
  5561  024C  086B               	movf	??_setSw_Main,w
  5562  024D  0781               	addwf	1,f
  5563                           
  5564                           ;Switch_B1.c: 139: if (Sw->DebounceTime >= 5) {
  5565  024E  0877               	movf	_Sw,w
  5566  024F  3E02               	addlw	2
  5567  0250  0086               	movwf	6
  5568  0251  3001               	movlw	1	; select bank2/3
  5569  0252  0087               	movwf	7
  5570  0253  3005               	movlw	5
  5571  0254  0201               	subwf	1,w
  5572  0255  1C03               	skipc
  5573  0256  0008               	return
  5574                           
  5575                           ;Switch_B1.c: 140: Sw->DebounceTime = 0;
  5576  0257  0877               	movf	_Sw,w
  5577  0258  3E02               	addlw	2
  5578  0259  0086               	movwf	6
  5579  025A  3001               	movlw	1	; select bank2/3
  5580  025B  0087               	movwf	7
  5581  025C  0181               	clrf	1
  5582                           
  5583                           ;Switch_B1.c: 141: Sw->Debounce = 1;
  5584  025D  0877               	movf	_Sw,w
  5585  025E  0086               	movwf	6
  5586  025F  3001               	movlw	1	; select bank2/3
  5587  0260  0087               	movwf	7
  5588  0261  1501               	bsf	1,2
  5589                           
  5590                           ;Switch_B1.c: 144: setDimmerLights_SwOn(sw);
  5591  0262  086D               	movf	setSw_Main@sw,w
  5592  0263  3188  206A         	fcall	_setDimmerLights_SwOn
  5593                           
  5594                           ;Switch_B1.c: 147: }
  5595                           ;Switch_B1.c: 148: } else {
  5596  0265  0008               	return
  5597  0266                     l10359:	
  5598                           
  5599                           ;Switch_B1.c: 149: if (Sw->Hold1 == 0) {
  5600  0266  0877               	movf	_Sw,w
  5601  0267  0086               	movwf	6
  5602  0268  3001               	movlw	1	; select bank2/3
  5603  0269  0087               	movwf	7
  5604  026A  1981               	btfsc	1,3
  5605  026B  2A98               	goto	l10369
  5606                           
  5607                           ;Switch_B1.c: 150: Sw->Hold1Time++;
  5608  026C  0877               	movf	_Sw,w
  5609  026D  3E03               	addlw	3
  5610  026E  0086               	movwf	6
  5611  026F  3001               	movlw	1	; select bank2/3
  5612  0270  0087               	movwf	7
  5613  0271  3001               	movlw	1
  5614  0272  0781               	addwf	1,f
  5615  0273  3141               	addfsr 1,1
  5616  0274  1803               	skipnc
  5617  0275  0A81               	incf	1,f
  5618                           
  5619                           ;Switch_B1.c: 151: if (Sw->Hold1Time >= 150) {
  5620  0276  0877               	movf	_Sw,w
  5621  0277  3E03               	addlw	3
  5622  0278  0086               	movwf	6
  5623  0279  3001               	movlw	1	; select bank2/3
  5624  027A  0087               	movwf	7
  5625  027B  3F40               	moviw [0]fsr1
  5626  027C  0020               	movlb	0	; select bank0
  5627  027D  00EB               	movwf	??_setSw_Main
  5628  027E  3F41               	moviw [1]fsr1
  5629  027F  00EC               	movwf	??_setSw_Main+1
  5630  0280  3000               	movlw	0
  5631  0281  026C               	subwf	??_setSw_Main+1,w
  5632  0282  3096               	movlw	150
  5633  0283  1903               	skipnz
  5634  0284  026B               	subwf	??_setSw_Main,w
  5635  0285  1C03               	skipc
  5636  0286  0008               	return
  5637                           
  5638                           ;Switch_B1.c: 152: Sw->Hold1Time = 0;
  5639  0287  0877               	movf	_Sw,w
  5640  0288  3E03               	addlw	3
  5641  0289  0086               	movwf	6
  5642  028A  3001               	movlw	1	; select bank2/3
  5643  028B  0087               	movwf	7
  5644  028C  3000               	movlw	0
  5645  028D  3FC0               	movwi [0]fsr1
  5646  028E  3FC1               	movwi [1]fsr1
  5647                           
  5648                           ;Switch_B1.c: 155: Sw->Hold1 = 1;
  5649  028F  0877               	movf	_Sw,w
  5650  0290  0086               	movwf	6
  5651  0291  3001               	movlw	1	; select bank2/3
  5652  0292  0087               	movwf	7
  5653  0293  1581               	bsf	1,3
  5654                           
  5655                           ;Switch_B1.c: 156: setDimmerLights_AdjOn(sw);
  5656  0294  086D               	movf	setSw_Main@sw,w
  5657  0295  3192  223A         	fcall	_setDimmerLights_AdjOn
  5658                           
  5659                           ;Switch_B1.c: 159: }
  5660                           ;Switch_B1.c: 160: } else {
  5661  0297  0008               	return
  5662  0298                     l10369:	
  5663                           
  5664                           ;Switch_B1.c: 161: if (Sw->Hold2 == 0) {
  5665  0298  0877               	movf	_Sw,w
  5666  0299  0086               	movwf	6
  5667  029A  3001               	movlw	1	; select bank2/3
  5668  029B  0087               	movwf	7
  5669  029C  1A01               	btfsc	1,4
  5670  029D  2AD6               	goto	l10383
  5671                           
  5672                           ;Switch_B1.c: 162: Sw->Hold2Time++;
  5673  029E  0877               	movf	_Sw,w
  5674  029F  3E05               	addlw	5
  5675  02A0  0086               	movwf	6
  5676  02A1  3001               	movlw	1	; select bank2/3
  5677  02A2  0087               	movwf	7
  5678  02A3  3001               	movlw	1
  5679  02A4  0781               	addwf	1,f
  5680  02A5  3141               	addfsr 1,1
  5681  02A6  1803               	skipnc
  5682  02A7  0A81               	incf	1,f
  5683                           
  5684                           ;Switch_B1.c: 163: if (Sw->Hold2Time >= 150) {
  5685  02A8  0877               	movf	_Sw,w
  5686  02A9  3E05               	addlw	5
  5687  02AA  0086               	movwf	6
  5688  02AB  3001               	movlw	1	; select bank2/3
  5689  02AC  0087               	movwf	7
  5690  02AD  3F40               	moviw [0]fsr1
  5691  02AE  0020               	movlb	0	; select bank0
  5692  02AF  00EB               	movwf	??_setSw_Main
  5693  02B0  3F41               	moviw [1]fsr1
  5694  02B1  00EC               	movwf	??_setSw_Main+1
  5695  02B2  3000               	movlw	0
  5696  02B3  026C               	subwf	??_setSw_Main+1,w
  5697  02B4  3096               	movlw	150
  5698  02B5  1903               	skipnz
  5699  02B6  026B               	subwf	??_setSw_Main,w
  5700  02B7  1C03               	skipc
  5701  02B8  0008               	return
  5702                           
  5703                           ;Switch_B1.c: 164: Sw->Hold2Time = 0;
  5704  02B9  0877               	movf	_Sw,w
  5705  02BA  3E05               	addlw	5
  5706  02BB  0086               	movwf	6
  5707  02BC  3001               	movlw	1	; select bank2/3
  5708  02BD  0087               	movwf	7
  5709  02BE  3000               	movlw	0
  5710  02BF  3FC0               	movwi [0]fsr1
  5711  02C0  3FC1               	movwi [1]fsr1
  5712                           
  5713                           ;Switch_B1.c: 165: Sw->Hold2 = 1;
  5714  02C1  0877               	movf	_Sw,w
  5715  02C2  0086               	movwf	6
  5716  02C3  3001               	movlw	1	; select bank2/3
  5717  02C4  0087               	movwf	7
  5718  02C5  1601               	bsf	1,4
  5719                           
  5720                           ;Switch_B1.c: 168: setRF_Learn(1);
  5721  02C6  3001               	movlw	1
  5722  02C7  319D  255D  3181   	fcall	_setRF_Learn
  5723                           
  5724                           ;Switch_B1.c: 170: if (myMain.First == 1) {
  5725  02CA  0021               	movlb	1	; select bank1
  5726  02CB  1EA0               	btfss	_myMain^(0+128),5
  5727  02CC  0008               	return
  5728                           
  5729                           ;Switch_B1.c: 171: setBuz(2, 100);
  5730  02CD  3064               	movlw	100
  5731  02CE  0020               	movlb	0	; select bank0
  5732  02CF  00A9               	movwf	setBuz@time
  5733  02D0  3000               	movlw	0
  5734  02D1  00AA               	movwf	setBuz@time+1
  5735  02D2  3002               	movlw	2
  5736  02D3  3197  274E         	fcall	_setBuz
  5737                           
  5738                           ;Switch_B1.c: 172: }
  5739                           ;Switch_B1.c: 174: }
  5740                           ;Switch_B1.c: 175: } else {
  5741  02D5  0008               	return
  5742  02D6                     l10383:	
  5743                           
  5744                           ;Switch_B1.c: 176: if (Sw->Hold3 == 0) {
  5745  02D6  0877               	movf	_Sw,w
  5746  02D7  0086               	movwf	6
  5747  02D8  3001               	movlw	1	; select bank2/3
  5748  02D9  0087               	movwf	7
  5749  02DA  1A81               	btfsc	1,5
  5750  02DB  0008               	return
  5751                           
  5752                           ;Switch_B1.c: 177: Sw->Hold3Time++;
  5753  02DC  0877               	movf	_Sw,w
  5754  02DD  3E07               	addlw	7
  5755  02DE  0086               	movwf	6
  5756  02DF  3001               	movlw	1	; select bank2/3
  5757  02E0  0087               	movwf	7
  5758  02E1  3001               	movlw	1
  5759  02E2  0781               	addwf	1,f
  5760  02E3  3141               	addfsr 1,1
  5761  02E4  1803               	skipnc
  5762  02E5  0A81               	incf	1,f
  5763                           
  5764                           ;Switch_B1.c: 178: if (Sw->Hold3Time >= 300) {
  5765  02E6  0877               	movf	_Sw,w
  5766  02E7  3E07               	addlw	7
  5767  02E8  0086               	movwf	6
  5768  02E9  3001               	movlw	1	; select bank2/3
  5769  02EA  0087               	movwf	7
  5770  02EB  3F40               	moviw [0]fsr1
  5771  02EC  0020               	movlb	0	; select bank0
  5772  02ED  00EB               	movwf	??_setSw_Main
  5773  02EE  3F41               	moviw [1]fsr1
  5774  02EF  00EC               	movwf	??_setSw_Main+1
  5775  02F0  3001               	movlw	1
  5776  02F1  026C               	subwf	??_setSw_Main+1,w
  5777  02F2  302C               	movlw	44
  5778  02F3  1903               	skipnz
  5779  02F4  026B               	subwf	??_setSw_Main,w
  5780  02F5  1C03               	skipc
  5781  02F6  0008               	return
  5782                           
  5783                           ;Switch_B1.c: 179: Sw->Hold3Time = 0;
  5784  02F7  0877               	movf	_Sw,w
  5785  02F8  3E07               	addlw	7
  5786  02F9  0086               	movwf	6
  5787  02FA  3001               	movlw	1	; select bank2/3
  5788  02FB  0087               	movwf	7
  5789  02FC  3000               	movlw	0
  5790  02FD  3FC0               	movwi [0]fsr1
  5791  02FE  3FC1               	movwi [1]fsr1
  5792                           
  5793                           ;Switch_B1.c: 180: Sw->Hold3 = 1;
  5794  02FF  0877               	movf	_Sw,w
  5795  0300  0086               	movwf	6
  5796  0301  3001               	movlw	1	; select bank2/3
  5797  0302  0087               	movwf	7
  5798  0303  1681               	bsf	1,5
  5799                           
  5800                           ;Switch_B1.c: 183: setRF_Learn(0);
  5801  0304  3000               	movlw	0
  5802  0305  319D  255D         	fcall	_setRF_Learn
  5803                           
  5804                           ;Switch_B1.c: 186: }
  5805                           ;Switch_B1.c: 187: }
  5806                           ;Switch_B1.c: 188: }
  5807                           ;Switch_B1.c: 189: }
  5808                           ;Switch_B1.c: 190: }
  5809                           ;Switch_B1.c: 191: } else {
  5810  0307  0008               	return
  5811  0308                     l10393:	
  5812                           
  5813                           ;Switch_B1.c: 192: if (Sw->Debounce == 1) {
  5814  0308  0877               	movf	_Sw,w
  5815  0309  0086               	movwf	6
  5816  030A  3001               	movlw	1	; select bank2/3
  5817  030B  0087               	movwf	7
  5818  030C  1D01               	btfss	1,2
  5819  030D  0008               	return
  5820                           
  5821                           ;Switch_B1.c: 193: Sw->DebounceTime++;
  5822  030E  3001               	movlw	1
  5823  030F  0020               	movlb	0	; select bank0
  5824  0310  00EB               	movwf	??_setSw_Main
  5825  0311  0877               	movf	_Sw,w
  5826  0312  3E02               	addlw	2
  5827  0313  0086               	movwf	6
  5828  0314  3001               	movlw	1	; select bank2/3
  5829  0315  0087               	movwf	7
  5830  0316  086B               	movf	??_setSw_Main,w
  5831  0317  0781               	addwf	1,f
  5832                           
  5833                           ;Switch_B1.c: 194: if (Sw->DebounceTime >= 5) {
  5834  0318  0877               	movf	_Sw,w
  5835  0319  3E02               	addlw	2
  5836  031A  0086               	movwf	6
  5837  031B  3001               	movlw	1	; select bank2/3
  5838  031C  0087               	movwf	7
  5839  031D  3005               	movlw	5
  5840  031E  0201               	subwf	1,w
  5841  031F  1C03               	skipc
  5842  0320  0008               	return
  5843                           
  5844                           ;Switch_B1.c: 195: Sw->DebounceTime = 0;
  5845  0321  0877               	movf	_Sw,w
  5846  0322  3E02               	addlw	2
  5847  0323  0086               	movwf	6
  5848  0324  3001               	movlw	1	; select bank2/3
  5849  0325  0087               	movwf	7
  5850  0326  0181               	clrf	1
  5851                           
  5852                           ;Switch_B1.c: 196: Sw->Debounce = 0;
  5853  0327  0877               	movf	_Sw,w
  5854  0328  0086               	movwf	6
  5855  0329  3001               	movlw	1	; select bank2/3
  5856  032A  0087               	movwf	7
  5857  032B  1101               	bcf	1,2
  5858                           
  5859                           ;Switch_B1.c: 197: Sw->Hold1Time = 0;
  5860  032C  0877               	movf	_Sw,w
  5861  032D  3E03               	addlw	3
  5862  032E  0086               	movwf	6
  5863  032F  3001               	movlw	1	; select bank2/3
  5864  0330  0087               	movwf	7
  5865  0331  3000               	movlw	0
  5866  0332  3FC0               	movwi [0]fsr1
  5867  0333  3FC1               	movwi [1]fsr1
  5868                           
  5869                           ;Switch_B1.c: 198: Sw->Hold1 = 0;
  5870  0334  0877               	movf	_Sw,w
  5871  0335  0086               	movwf	6
  5872  0336  3001               	movlw	1	; select bank2/3
  5873  0337  0087               	movwf	7
  5874  0338  1181               	bcf	1,3
  5875                           
  5876                           ;Switch_B1.c: 199: Sw->Hold2Time = 0;
  5877  0339  0877               	movf	_Sw,w
  5878  033A  3E05               	addlw	5
  5879  033B  0086               	movwf	6
  5880  033C  3001               	movlw	1	; select bank2/3
  5881  033D  0087               	movwf	7
  5882  033E  3000               	movlw	0
  5883  033F  3FC0               	movwi [0]fsr1
  5884  0340  3FC1               	movwi [1]fsr1
  5885                           
  5886                           ;Switch_B1.c: 200: Sw->Hold2 = 0;
  5887  0341  0877               	movf	_Sw,w
  5888  0342  0086               	movwf	6
  5889  0343  3001               	movlw	1	; select bank2/3
  5890  0344  0087               	movwf	7
  5891  0345  1201               	bcf	1,4
  5892                           
  5893                           ;Switch_B1.c: 201: Sw->Hold3Time = 0;
  5894  0346  0877               	movf	_Sw,w
  5895  0347  3E07               	addlw	7
  5896  0348  0086               	movwf	6
  5897  0349  3001               	movlw	1	; select bank2/3
  5898  034A  0087               	movwf	7
  5899  034B  3000               	movlw	0
  5900  034C  3FC0               	movwi [0]fsr1
  5901  034D  3FC1               	movwi [1]fsr1
  5902                           
  5903                           ;Switch_B1.c: 202: Sw->Hold3 = 0;
  5904  034E  0877               	movf	_Sw,w
  5905  034F  0086               	movwf	6
  5906  0350  3001               	movlw	1	; select bank2/3
  5907  0351  0087               	movwf	7
  5908  0352  1281               	bcf	1,5
  5909                           
  5910                           ;Switch_B1.c: 204: if (SwDetect.Error == 0) {
  5911  0353  0021               	movlb	1	; select bank1
  5912  0354  1851               	btfsc	_SwDetect^(0+128),0
  5913  0355  2B5B               	goto	l10419
  5914                           
  5915                           ;Switch_B1.c: 205: setDimmerLights_SwOff(sw);
  5916  0356  0020               	movlb	0	; select bank0
  5917  0357  086D               	movf	setSw_Main@sw,w
  5918  0358  3194  24BC  3181   	fcall	_setDimmerLights_SwOff
  5919  035B                     l10419:	
  5920                           
  5921                           ;Switch_B1.c: 206: }
  5922                           ;Switch_B1.c: 209: setRF_Learn(0);
  5923  035B  3000               	movlw	0
  5924  035C  319D  255D         	fcall	_setRF_Learn
  5925                           
  5926                           ;Switch_B1.c: 211: }
  5927                           ;Switch_B1.c: 212: }
  5928                           ;Switch_B1.c: 213: }
  5929                           ;Switch_B1.c: 214: } else {
  5930  035E  0008               	return
  5931  035F                     l2667:	
  5932                           
  5933                           ;Switch_B1.c: 215: if (myMain.PowerON == 1) {
  5934  035F  0021               	movlb	1	; select bank1
  5935  0360  1C20               	btfss	_myMain^(0+128),0
  5936  0361  0008               	return
  5937                           
  5938                           ;Switch_B1.c: 216: Sw->Enable = 1;
  5939  0362  0877               	movf	_Sw,w
  5940  0363  0086               	movwf	6
  5941  0364  3001               	movlw	1	; select bank2/3
  5942  0365  0087               	movwf	7
  5943  0366  1401               	bsf	1,0
  5944  0367  0008               	return
  5945  0368                     __end_of_setSw_Main:	
  5946                           
  5947                           	psect	text14
  5948  1D5D                     __ptext14:	
  5949 ;; *************** function _setRF_Learn *****************
  5950 ;; Defined at:
  5951 ;;		line 23 in file "../src/RF_Control_B1.c"
  5952 ;; Parameters:    Size  Location     Type
  5953 ;;  command         1    wreg     unsigned char 
  5954 ;; Auto vars:     Size  Location     Type
  5955 ;;  command         1    1[BANK0 ] unsigned char 
  5956 ;; Return value:  Size  Location     Type
  5957 ;;		None               void
  5958 ;; Registers used:
  5959 ;;		wreg, status,2, status,0
  5960 ;; Tracked objects:
  5961 ;;		On entry : 0/0
  5962 ;;		On exit  : 0/0
  5963 ;;		Unchanged: 0/0
  5964 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5965 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5966 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5967 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5968 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5969 ;;Total ram usage:        2 bytes
  5970 ;; Hardware stack levels used:    1
  5971 ;; Hardware stack levels required when called:    5
  5972 ;; This function calls:
  5973 ;;		Nothing
  5974 ;; This function is called by:
  5975 ;;		_setSw_Main
  5976 ;; This function uses a non-reentrant model
  5977 ;;
  5978                           
  5979                           
  5980                           ;psect for function _setRF_Learn
  5981  1D5D                     _setRF_Learn:	
  5982                           
  5983                           ;incstack = 0
  5984                           ; Regs used in _setRF_Learn: [wreg+status,2+status,0]
  5985                           ;setRF_Learn@command stored from wreg
  5986  1D5D  0020               	movlb	0	; select bank0
  5987  1D5E  00A1               	movwf	setRF_Learn@command
  5988                           
  5989                           ;RF_Control_B1.c: 24: RF1.Learn = command == 1 ? 1 : 0;
  5990  1D5F  0821               	movf	setRF_Learn@command,w
  5991  1D60  3A01               	xorlw	1
  5992  1D61  3000               	movlw	0
  5993  1D62  1903               	skipnz
  5994  1D63  3001               	movlw	1
  5995  1D64  00A0               	movwf	??_setRF_Learn
  5996  1D65  0EA0               	swapf	??_setRF_Learn,f
  5997  1D66  0DA0               	rlf	??_setRF_Learn,f
  5998  1D67  0DA0               	rlf	??_setRF_Learn,f
  5999  1D68  0021               	movlb	1	; select bank1
  6000  1D69  083A               	movf	_RF1^(0+128),w
  6001  1D6A  0020               	movlb	0	; select bank0
  6002  1D6B  0620               	xorwf	??_setRF_Learn,w
  6003  1D6C  39BF               	andlw	-65
  6004  1D6D  0620               	xorwf	??_setRF_Learn,w
  6005  1D6E  0021               	movlb	1	; select bank1
  6006  1D6F  00BA               	movwf	_RF1^(0+128)
  6007  1D70  0008               	return
  6008  1D71                     __end_of_setRF_Learn:	
  6009                           
  6010                           	psect	text15
  6011  123A                     __ptext15:	
  6012 ;; *************** function _setDimmerLights_AdjOn *****************
  6013 ;; Defined at:
  6014 ;;		line 477 in file "../src/Dimmer_B1.c"
  6015 ;; Parameters:    Size  Location     Type
  6016 ;;  sw              1    wreg     unsigned char 
  6017 ;; Auto vars:     Size  Location     Type
  6018 ;;  sw              1    7[BANK0 ] unsigned char 
  6019 ;; Return value:  Size  Location     Type
  6020 ;;		None               void
  6021 ;; Registers used:
  6022 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6023 ;; Tracked objects:
  6024 ;;		On entry : 0/0
  6025 ;;		On exit  : 0/0
  6026 ;;		Unchanged: 0/0
  6027 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6028 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6029 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6030 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6031 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6032 ;;Total ram usage:        1 bytes
  6033 ;; Hardware stack levels used:    1
  6034 ;; Hardware stack levels required when called:    7
  6035 ;; This function calls:
  6036 ;;		_DimmerLightsPointSelect
  6037 ;;		_getDimmerLights_Allow_Condition
  6038 ;; This function is called by:
  6039 ;;		_setSw_Main
  6040 ;; This function uses a non-reentrant model
  6041 ;;
  6042                           
  6043                           
  6044                           ;psect for function _setDimmerLights_AdjOn
  6045  123A                     _setDimmerLights_AdjOn:	
  6046                           
  6047                           ;incstack = 0
  6048                           ; Regs used in _setDimmerLights_AdjOn: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  6049                           ;setDimmerLights_AdjOn@sw stored from wreg
  6050  123A  0020               	movlb	0	; select bank0
  6051  123B  00A7               	movwf	setDimmerLights_AdjOn@sw
  6052                           
  6053                           ;Dimmer_B1.c: 478: DimmerLightsPointSelect(sw);
  6054  123C  0827               	movf	setDimmerLights_AdjOn@sw,w
  6055  123D  319C  2486  3192   	fcall	_DimmerLightsPointSelect
  6056                           
  6057                           ;Dimmer_B1.c: 488: if (DimmerLights->Trigger == 0 && getDimmerLights_Allow_Condition(sw)
      +                           == 0) {
  6058  1240  0020               	movlb	0	; select bank0
  6059  1241  086F               	movf	_DimmerLights,w
  6060  1242  3E0A               	addlw	10
  6061  1243  0086               	movwf	6
  6062  1244  3001               	movlw	1	; select bank2/3
  6063  1245  0087               	movwf	7
  6064  1246  1881               	btfsc	1,1
  6065  1247  0008               	return
  6066  1248  0827               	movf	setDimmerLights_AdjOn@sw,w
  6067  1249  3192  2272  3192   	fcall	_getDimmerLights_Allow_Condition
  6068  124C  3800               	iorlw	0
  6069  124D  1D03               	skipz
  6070  124E  0008               	return
  6071                           
  6072                           ;Dimmer_B1.c: 489: if (DimmerLights->SwFlag == 1) {
  6073  124F  0020               	movlb	0	; select bank0
  6074  1250  086F               	movf	_DimmerLights,w
  6075  1251  3E0B               	addlw	11
  6076  1252  0086               	movwf	6
  6077  1253  3001               	movlw	1	; select bank2/3
  6078  1254  0087               	movwf	7
  6079  1255  1C81               	btfss	1,1
  6080  1256  0008               	return
  6081                           
  6082                           ;Dimmer_B1.c: 490: DimmerLights->SwAdj = 1;
  6083  1257  086F               	movf	_DimmerLights,w
  6084  1258  3E0B               	addlw	11
  6085  1259  0086               	movwf	6
  6086  125A  3001               	movlw	1	; select bank2/3
  6087  125B  0087               	movwf	7
  6088  125C  1501               	bsf	1,2
  6089                           
  6090                           ;Dimmer_B1.c: 491: DimmerLights->Status = 1;
  6091  125D  086F               	movf	_DimmerLights,w
  6092  125E  3E02               	addlw	2
  6093  125F  0086               	movwf	6
  6094  1260  3001               	movlw	1	; select bank2/3
  6095  1261  0087               	movwf	7
  6096  1262  1481               	bsf	1,1
  6097                           
  6098                           ;Dimmer_B1.c: 493: DimmerLights->TriggerAdj = 1;
  6099  1263  086F               	movf	_DimmerLights,w
  6100  1264  3E0A               	addlw	10
  6101  1265  0086               	movwf	6
  6102  1266  3001               	movlw	1	; select bank2/3
  6103  1267  0087               	movwf	7
  6104  1268  1581               	bsf	1,3
  6105                           
  6106                           ;Dimmer_B1.c: 494: DimmerLights->SwitchAdj = 1;
  6107  1269  086F               	movf	_DimmerLights,w
  6108  126A  3E0A               	addlw	10
  6109  126B  0086               	movwf	6
  6110  126C  3001               	movlw	1	; select bank2/3
  6111  126D  0087               	movwf	7
  6112  126E  1501               	bsf	1,2
  6113                           
  6114                           ;Dimmer_B1.c: 495: RB5 = RB5 == 1 ? 0 : 1;
  6115  126F  3020               	movlw	32
  6116  1270  068D               	xorwf	13,f
  6117  1271  0008               	return
  6118  1272                     __end_of_setDimmerLights_AdjOn:	
  6119                           
  6120                           	psect	text16
  6121  1EA4                     __ptext16:	
  6122 ;; *************** function _getSw_KeyStatus *****************
  6123 ;; Defined at:
  6124 ;;		line 222 in file "../src/Switch_B1.c"
  6125 ;; Parameters:    Size  Location     Type
  6126 ;;  sw              1    wreg     unsigned char 
  6127 ;; Auto vars:     Size  Location     Type
  6128 ;;  sw              1    4[BANK0 ] unsigned char 
  6129 ;;  status          1    3[BANK0 ] unsigned char 
  6130 ;; Return value:  Size  Location     Type
  6131 ;;                  1    wreg      unsigned char 
  6132 ;; Registers used:
  6133 ;;		wreg, status,2
  6134 ;; Tracked objects:
  6135 ;;		On entry : 0/0
  6136 ;;		On exit  : 0/0
  6137 ;;		Unchanged: 0/0
  6138 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6139 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6140 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6141 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6142 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6143 ;;Total ram usage:        5 bytes
  6144 ;; Hardware stack levels used:    1
  6145 ;; Hardware stack levels required when called:    5
  6146 ;; This function calls:
  6147 ;;		Nothing
  6148 ;; This function is called by:
  6149 ;;		_setSw_Main
  6150 ;; This function uses a non-reentrant model
  6151 ;;
  6152                           
  6153                           
  6154                           ;psect for function _getSw_KeyStatus
  6155  1EA4                     _getSw_KeyStatus:	
  6156                           
  6157                           ;incstack = 0
  6158                           ; Regs used in _getSw_KeyStatus: [wreg+status,2]
  6159                           ;getSw_KeyStatus@sw stored from wreg
  6160  1EA4  0020               	movlb	0	; select bank0
  6161  1EA5  00A4               	movwf	getSw_KeyStatus@sw
  6162                           
  6163                           ;Switch_B1.c: 223: char status = 0;
  6164  1EA6  01A3               	clrf	getSw_KeyStatus@status
  6165                           
  6166                           ;Switch_B1.c: 235: if (sw == 1) {
  6167  1EA7  0824               	movf	getSw_KeyStatus@sw,w
  6168  1EA8  3A01               	xorlw	1
  6169  1EA9  1D03               	skipz
  6170  1EAA  2EB3               	goto	l9841
  6171                           
  6172                           ;Switch_B1.c: 236: status = RA6 == 1 || RA4 == 1 ? 1 : 0;
  6173  1EAB  01A1               	clrf	_getSw_KeyStatus$6247
  6174  1EAC  0AA1               	incf	_getSw_KeyStatus$6247,f
  6175  1EAD  1F0C               	btfss	12,6	;volatile
  6176  1EAE  1A0C               	btfsc	12,4	;volatile
  6177  1EAF  2EB1               	goto	l9839
  6178  1EB0  01A1               	clrf	_getSw_KeyStatus$6247
  6179  1EB1                     l9839:	
  6180  1EB1  0821               	movf	_getSw_KeyStatus$6247,w
  6181  1EB2  2EBE               	goto	L2
  6182  1EB3                     l9841:	
  6183                           ;Switch_B1.c: 237: } else if (sw == 2) {
  6184                           
  6185  1EB3  0824               	movf	getSw_KeyStatus@sw,w
  6186  1EB4  3A02               	xorlw	2
  6187  1EB5  1D03               	skipz
  6188  1EB6  2EC1               	goto	l9851
  6189                           
  6190                           ;Switch_B1.c: 238: status = RA0 == 1 || RB1 == 1 ? 1 : 0;
  6191  1EB7  01A2               	clrf	_getSw_KeyStatus$6248
  6192  1EB8  0AA2               	incf	_getSw_KeyStatus$6248,f
  6193  1EB9  1C0C               	btfss	12,0	;volatile
  6194  1EBA  188D               	btfsc	13,1	;volatile
  6195  1EBB  2EBD               	goto	l9849
  6196  1EBC  01A2               	clrf	_getSw_KeyStatus$6248
  6197  1EBD                     l9849:	
  6198  1EBD  0822               	movf	_getSw_KeyStatus$6248,w
  6199  1EBE                     L2:	
  6200  1EBE  00A0               	movwf	??_getSw_KeyStatus
  6201  1EBF  0820               	movf	??_getSw_KeyStatus,w
  6202  1EC0  00A3               	movwf	getSw_KeyStatus@status
  6203  1EC1                     l9851:	
  6204                           
  6205                           ;Switch_B1.c: 239: }
  6206                           ;Switch_B1.c: 246: return status;
  6207  1EC1  0823               	movf	getSw_KeyStatus@status,w
  6208  1EC2  0008               	return
  6209  1EC3                     __end_of_getSw_KeyStatus:	
  6210                           
  6211                           	psect	text17
  6212  1D49                     __ptext17:	
  6213 ;; *************** function _SwPointSelect *****************
  6214 ;; Defined at:
  6215 ;;		line 25 in file "../src/Switch_B1.c"
  6216 ;; Parameters:    Size  Location     Type
  6217 ;;  sw              1    wreg     unsigned char 
  6218 ;; Auto vars:     Size  Location     Type
  6219 ;;  sw              1    1[BANK0 ] unsigned char 
  6220 ;; Return value:  Size  Location     Type
  6221 ;;		None               void
  6222 ;; Registers used:
  6223 ;;		wreg
  6224 ;; Tracked objects:
  6225 ;;		On entry : 0/0
  6226 ;;		On exit  : 0/0
  6227 ;;		Unchanged: 0/0
  6228 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6229 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6230 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6231 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6232 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6233 ;;Total ram usage:        2 bytes
  6234 ;; Hardware stack levels used:    1
  6235 ;; Hardware stack levels required when called:    5
  6236 ;; This function calls:
  6237 ;;		Nothing
  6238 ;; This function is called by:
  6239 ;;		_setSw_Main
  6240 ;; This function uses a non-reentrant model
  6241 ;;
  6242                           
  6243                           
  6244                           ;psect for function _SwPointSelect
  6245  1D49                     _SwPointSelect:	
  6246                           
  6247                           ;incstack = 0
  6248                           ; Regs used in _SwPointSelect: [wreg]
  6249                           ;SwPointSelect@sw stored from wreg
  6250  1D49  0020               	movlb	0	; select bank0
  6251  1D4A  00A1               	movwf	SwPointSelect@sw
  6252                           
  6253                           ;Switch_B1.c: 28: if (sw == 1) {
  6254  1D4B  0821               	movf	SwPointSelect@sw,w
  6255  1D4C  3A01               	xorlw	1
  6256  1D4D  1D03               	skipz
  6257  1D4E  2D54               	goto	l9825
  6258                           
  6259                           ;Switch_B1.c: 29: Sw = &Sw1;
  6260  1D4F  30CF               	movlw	_Sw1& (0+255)
  6261  1D50  00A0               	movwf	??_SwPointSelect
  6262  1D51  0820               	movf	??_SwPointSelect,w
  6263  1D52  00F7               	movwf	_Sw
  6264                           
  6265                           ;Switch_B1.c: 30: }
  6266  1D53  0008               	return
  6267  1D54                     l9825:	
  6268                           
  6269                           ;Switch_B1.c: 33: else if (sw == 2) {
  6270  1D54  0821               	movf	SwPointSelect@sw,w
  6271  1D55  3A02               	xorlw	2
  6272  1D56  1D03               	skipz
  6273  1D57  0008               	return
  6274                           
  6275                           ;Switch_B1.c: 34: Sw = &Sw2;
  6276  1D58  30D8               	movlw	_Sw2& (0+255)
  6277  1D59  00A0               	movwf	??_SwPointSelect
  6278  1D5A  0820               	movf	??_SwPointSelect,w
  6279  1D5B  00F7               	movwf	_Sw
  6280  1D5C  0008               	return
  6281  1D5D                     __end_of_SwPointSelect:	
  6282                           
  6283                           	psect	text18
  6284  1BBF                     __ptext18:	
  6285 ;; *************** function _Switch_Initialization *****************
  6286 ;; Defined at:
  6287 ;;		line 46 in file "../src/Switch_B1.c"
  6288 ;; Parameters:    Size  Location     Type
  6289 ;;		None
  6290 ;; Auto vars:     Size  Location     Type
  6291 ;;		None
  6292 ;; Return value:  Size  Location     Type
  6293 ;;		None               void
  6294 ;; Registers used:
  6295 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6296 ;; Tracked objects:
  6297 ;;		On entry : 0/0
  6298 ;;		On exit  : 0/0
  6299 ;;		Unchanged: 0/0
  6300 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6301 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6302 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6303 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6304 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6305 ;;Total ram usage:        0 bytes
  6306 ;; Hardware stack levels used:    1
  6307 ;; Hardware stack levels required when called:    8
  6308 ;; This function calls:
  6309 ;;		_TouchPower
  6310 ;;		_setSw_Initialization
  6311 ;; This function is called by:
  6312 ;;		_main
  6313 ;; This function uses a non-reentrant model
  6314 ;;
  6315                           
  6316                           
  6317                           ;psect for function _Switch_Initialization
  6318  1BBF                     _Switch_Initialization:	
  6319                           
  6320                           ;Switch_B1.c: 47: TouchPower();
  6321                           
  6322                           ;incstack = 0
  6323                           ; Regs used in _Switch_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  6324  1BBF  319D  259B  319B   	fcall	_TouchPower
  6325                           
  6326                           ;Switch_B1.c: 49: WPUB1 = 0;
  6327  1BC2  0024               	movlb	4	; select bank4
  6328  1BC3  108D               	bcf	13,1	;volatile
  6329                           
  6330                           ;Switch_B1.c: 58: setSw_Initialization(1);
  6331  1BC4  3001               	movlw	1
  6332  1BC5  319B  232F  319B   	fcall	_setSw_Initialization
  6333                           
  6334                           ;Switch_B1.c: 62: setSw_Initialization(2);
  6335  1BC8  3002               	movlw	2
  6336  1BC9  319B  232F         	fcall	_setSw_Initialization
  6337  1BCB  0008               	return
  6338  1BCC                     __end_of_Switch_Initialization:	
  6339                           
  6340                           	psect	text19
  6341  1B2F                     __ptext19:	
  6342 ;; *************** function _setSw_Initialization *****************
  6343 ;; Defined at:
  6344 ;;		line 93 in file "../src/Switch_B1.c"
  6345 ;; Parameters:    Size  Location     Type
  6346 ;;  sw              1    wreg     unsigned char 
  6347 ;; Auto vars:     Size  Location     Type
  6348 ;;  sw              1    4[BANK0 ] unsigned char 
  6349 ;; Return value:  Size  Location     Type
  6350 ;;		None               void
  6351 ;; Registers used:
  6352 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6353 ;; Tracked objects:
  6354 ;;		On entry : 0/0
  6355 ;;		On exit  : 0/0
  6356 ;;		Unchanged: 0/0
  6357 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6358 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6359 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6360 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6361 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6362 ;;Total ram usage:        1 bytes
  6363 ;; Hardware stack levels used:    1
  6364 ;; Hardware stack levels required when called:    7
  6365 ;; This function calls:
  6366 ;;		_setLED
  6367 ;; This function is called by:
  6368 ;;		_Switch_Initialization
  6369 ;; This function uses a non-reentrant model
  6370 ;;
  6371                           
  6372                           
  6373                           ;psect for function _setSw_Initialization
  6374  1B2F                     _setSw_Initialization:	
  6375                           
  6376                           ;incstack = 0
  6377                           ; Regs used in _setSw_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6378                           ;setSw_Initialization@sw stored from wreg
  6379  1B2F  0020               	movlb	0	; select bank0
  6380  1B30  00A4               	movwf	setSw_Initialization@sw
  6381                           
  6382                           ;Switch_B1.c: 94: setLED(sw, 1);
  6383  1B31  01A2               	clrf	setLED@command
  6384  1B32  0AA2               	incf	setLED@command,f
  6385  1B33  0824               	movf	setSw_Initialization@sw,w
  6386  1B34  3196  264F         	fcall	_setLED
  6387  1B36  0008               	return
  6388  1B37                     __end_of_setSw_Initialization:	
  6389                           
  6390                           	psect	text20
  6391  1D9B                     __ptext20:	
  6392 ;; *************** function _TouchPower *****************
  6393 ;; Defined at:
  6394 ;;		line 10 in file "../src/Switch_B1.c"
  6395 ;; Parameters:    Size  Location     Type
  6396 ;;		None
  6397 ;; Auto vars:     Size  Location     Type
  6398 ;;		None
  6399 ;; Return value:  Size  Location     Type
  6400 ;;		None               void
  6401 ;; Registers used:
  6402 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6403 ;; Tracked objects:
  6404 ;;		On entry : 0/0
  6405 ;;		On exit  : 0/0
  6406 ;;		Unchanged: 0/0
  6407 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6408 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6409 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6410 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6411 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6412 ;;Total ram usage:        0 bytes
  6413 ;; Hardware stack levels used:    1
  6414 ;; Hardware stack levels required when called:    6
  6415 ;; This function calls:
  6416 ;;		_Timeout_Counter
  6417 ;;		_set_TimeoutCleared
  6418 ;; This function is called by:
  6419 ;;		_Switch_Initialization
  6420 ;;		_Switch_Main
  6421 ;; This function uses a non-reentrant model
  6422 ;;
  6423                           
  6424                           
  6425                           ;psect for function _TouchPower
  6426  1D9B                     _TouchPower:	
  6427                           
  6428                           ;Switch_B1.c: 11: if (RC5 == 0) {
  6429                           
  6430                           ;incstack = 0
  6431                           ; Regs used in _TouchPower: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6432  1D9B  0020               	movlb	0	; select bank0
  6433  1D9C  1A8E               	btfsc	14,5	;volatile
  6434  1D9D  0008               	return
  6435                           
  6436                           ;Switch_B1.c: 12: if (myMain.PowerON == 1) {
  6437  1D9E  0021               	movlb	1	; select bank1
  6438  1D9F  1C20               	btfss	_myMain^(0+128),0
  6439  1DA0  0008               	return
  6440  1DA1  2DA7               	goto	l10325
  6441  1DA2                     l2645:	
  6442                           ;Switch_B1.c: 13: while (RC5 == 0 && myMain.Timeout == 0) {
  6443                           
  6444                           
  6445                           ;Switch_B1.c: 14: RC5 = 1;
  6446  1DA2  0020               	movlb	0	; select bank0
  6447  1DA3  168E               	bsf	14,5	;volatile
  6448                           
  6449                           ;Switch_B1.c: 15: Timeout_Counter();
  6450  1DA4  319D  2571  319D   	fcall	_Timeout_Counter
  6451  1DA7                     l10325:	
  6452  1DA7  0020               	movlb	0	; select bank0
  6453  1DA8  1A8E               	btfsc	14,5	;volatile
  6454  1DA9  2DAD               	goto	l10329
  6455  1DAA  0021               	movlb	1	; select bank1
  6456  1DAB  1D2B               	btfss	(_myMain^(0+128)+11),2
  6457  1DAC  2DA2               	goto	l2645
  6458  1DAD                     l10329:	
  6459                           
  6460                           ;Switch_B1.c: 16: }
  6461                           ;Switch_B1.c: 17: set_TimeoutCleared();
  6462  1DAD  319A  22E1         	fcall	_set_TimeoutCleared
  6463  1DAF  0008               	return
  6464  1DB0                     __end_of_TouchPower:	
  6465                           
  6466                           	psect	text21
  6467  1AC8                     __ptext21:	
  6468 ;; *************** function _RF_Main *****************
  6469 ;; Defined at:
  6470 ;;		line 16 in file "../src/RF_Control_B1.c"
  6471 ;; Parameters:    Size  Location     Type
  6472 ;;		None
  6473 ;; Auto vars:     Size  Location     Type
  6474 ;;		None
  6475 ;; Return value:  Size  Location     Type
  6476 ;;		None               void
  6477 ;; Registers used:
  6478 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6479 ;; Tracked objects:
  6480 ;;		On entry : 0/0
  6481 ;;		On exit  : 0/0
  6482 ;;		Unchanged: 0/0
  6483 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6484 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6485 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6486 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6487 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6488 ;;Total ram usage:        0 bytes
  6489 ;; Hardware stack levels used:    1
  6490 ;; Hardware stack levels required when called:   14
  6491 ;; This function calls:
  6492 ;;		_setRF_Main
  6493 ;; This function is called by:
  6494 ;;		_main
  6495 ;; This function uses a non-reentrant model
  6496 ;;
  6497                           
  6498                           
  6499                           ;psect for function _RF_Main
  6500  1AC8                     _RF_Main:	
  6501                           
  6502                           ;RF_Control_B1.c: 18: setRF_Main();
  6503                           
  6504                           ;incstack = 0
  6505                           ; Regs used in _RF_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6506  1AC8  318E  260C         	fcall	_setRF_Main
  6507  1ACA  0008               	return
  6508  1ACB                     __end_of_RF_Main:	
  6509                           
  6510                           	psect	text22
  6511  0E0C                     __ptext22:	
  6512 ;; *************** function _setRF_Main *****************
  6513 ;; Defined at:
  6514 ;;		line 52 in file "../src/RF_Control_B1.c"
  6515 ;; Parameters:    Size  Location     Type
  6516 ;;		None
  6517 ;; Auto vars:     Size  Location     Type
  6518 ;;  error           1    2[BANK4 ] unsigned char 
  6519 ;;  Receive_OK      1    1[BANK4 ] unsigned char 
  6520 ;;  loop_f          1    0[BANK4 ] unsigned char 
  6521 ;; Return value:  Size  Location     Type
  6522 ;;		None               void
  6523 ;; Registers used:
  6524 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6525 ;; Tracked objects:
  6526 ;;		On entry : 0/0
  6527 ;;		On exit  : 0/0
  6528 ;;		Unchanged: 0/0
  6529 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6530 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6531 ;;      Locals:         0       0       0       0       0       3       0       0       0       0       0       0       
      +0       0
  6532 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  6533 ;;      Totals:         0       0       1       0       0       3       0       0       0       0       0       0       
      +0       0
  6534 ;;Total ram usage:        4 bytes
  6535 ;; Hardware stack levels used:    1
  6536 ;; Hardware stack levels required when called:   13
  6537 ;; This function calls:
  6538 ;;		_CC2500_RxData
  6539 ;;		_CC2500_TxData
  6540 ;;		_CC2500_WriteCommand
  6541 ;;		_RF_RxDisable
  6542 ;;		_getBuz_GO
  6543 ;;		_getMain_All_Error_Status
  6544 ;;		_getRF_KeyStatus
  6545 ;;		_getRxData
  6546 ;; This function is called by:
  6547 ;;		_RF_Main
  6548 ;; This function uses a non-reentrant model
  6549 ;;
  6550                           
  6551                           
  6552                           ;psect for function _setRF_Main
  6553  0E0C                     _setRF_Main:	
  6554                           
  6555                           ;RF_Control_B1.c: 53: char loop_f = 0, Receive_OK = 0, error = 0;
  6556                           
  6557                           ;incstack = 0
  6558                           ; Regs used in _setRF_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6559  0E0C  0024               	movlb	4	; select bank4
  6560  0E0D  01E5               	clrf	setRF_Main@loop_f^(0+512)
  6561  0E0E  01E6               	clrf	setRF_Main@Receive_OK^(0+512)
  6562  0E0F  01E7               	clrf	setRF_Main@error^(0+512)
  6563                           
  6564                           ;RF_Control_B1.c: 54: if (RF1.Enable == 1) {
  6565  0E10  0021               	movlb	1	; select bank1
  6566  0E11  1C3A               	btfss	_RF1^(0+128),0
  6567  0E12  2EA3               	goto	l2251
  6568                           
  6569                           ;RF_Control_B1.c: 56: if (RF1.RxStatus == 1) {
  6570  0E13  1DBA               	btfss	_RF1^(0+128),3
  6571  0E14  2E26               	goto	l10249
  6572                           
  6573                           ;RF_Control_B1.c: 57: RF1.CorrectionCounter++;
  6574  0E15  3001               	movlw	1
  6575  0E16  07C4               	addwf	(_RF1^(0+128)+10),f
  6576  0E17  3000               	movlw	0
  6577  0E18  3DC5               	addwfc	((_RF1+1)^(0+128)+10),f
  6578                           
  6579                           ;RF_Control_B1.c: 58: if (RF1.CorrectionCounter >= 6000) {
  6580  0E19  3017               	movlw	23
  6581  0E1A  0245               	subwf	((_RF1+1)^(0+128)+10),w
  6582  0E1B  3070               	movlw	112
  6583  0E1C  1903               	skipnz
  6584  0E1D  0244               	subwf	(_RF1^(0+128)+10),w
  6585  0E1E  1C03               	skipc
  6586  0E1F  2E29               	goto	l10251
  6587                           
  6588                           ;RF_Control_B1.c: 59: RF1.CorrectionCounter = 0;
  6589  0E20  01C4               	clrf	(_RF1^(0+128)+10)
  6590  0E21  01C5               	clrf	((_RF1+1)^(0+128)+10)
  6591                           
  6592                           ;RF_Control_B1.c: 60: RF_RxDisable();
  6593  0E22  319C  24AC  318E   	fcall	_RF_RxDisable
  6594                           
  6595                           ;RF_Control_B1.c: 61: }
  6596                           ;RF_Control_B1.c: 62: } else {
  6597  0E25  2E29               	goto	l10251
  6598  0E26                     l10249:	
  6599                           
  6600                           ;RF_Control_B1.c: 63: RF1.CorrectionCounter = 0;
  6601  0E26  0021               	movlb	1	; select bank1
  6602  0E27  01C4               	clrf	(_RF1^(0+128)+10)
  6603  0E28  01C5               	clrf	((_RF1+1)^(0+128)+10)
  6604  0E29                     l10251:	
  6605                           
  6606                           ;RF_Control_B1.c: 64: }
  6607                           ;RF_Control_B1.c: 66: if (RF1.Learn == 0) {
  6608  0E29  0021               	movlb	1	; select bank1
  6609  0E2A  1B3A               	btfsc	_RF1^(0+128),6
  6610  0E2B  2E3F               	goto	l2255
  6611                           
  6612                           ;RF_Control_B1.c: 67: if (RF1.Run == 1) {
  6613  0E2C  1CBB               	btfss	(_RF1^(0+128)+1),1
  6614  0E2D  2E44               	goto	l10267
  6615                           
  6616                           ;RF_Control_B1.c: 68: RF1.Count++;
  6617  0E2E  3001               	movlw	1
  6618  0E2F  07BC               	addwf	(_RF1^(0+128)+2),f
  6619  0E30  3000               	movlw	0
  6620  0E31  3DBD               	addwfc	((_RF1+1)^(0+128)+2),f
  6621                           
  6622                           ;RF_Control_B1.c: 69: if (RF1.Count == RF1.RunTime) {
  6623  0E32  3002               	movlw	2
  6624  0E33  3EBA               	addlw	_RF1& (0+255)
  6625  0E34  0086               	movwf	6
  6626  0E35  0187               	clrf	7
  6627  0E36  3F40               	moviw [0]fsr1
  6628  0E37  0641               	xorwf	(_RF1^(0+128)+7),w
  6629  0E38  1D03               	skipz
  6630  0E39  2E3C               	goto	u11665
  6631  0E3A  3F41               	moviw [1]fsr1
  6632  0E3B  0642               	xorwf	((_RF1+1)^(0+128)+7),w
  6633  0E3C                     u11665:	
  6634  0E3C  1D03               	skipz
  6635  0E3D  2E44               	goto	l10267
  6636  0E3E  2E41               	goto	l10263
  6637  0E3F                     l2255:	
  6638                           ;RF_Control_B1.c: 72: }
  6639                           ;RF_Control_B1.c: 73: }
  6640                           ;RF_Control_B1.c: 74: } else {
  6641                           
  6642                           ;RF_Control_B1.c: 71: RF1.Run = 0;
  6643                           
  6644                           ;RF_Control_B1.c: 70: RF1.Count = 0;
  6645                           
  6646                           
  6647                           ;RF_Control_B1.c: 75: if (RF1.Run == 1) {
  6648  0E3F  1CBB               	btfss	(_RF1^(0+128)+1),1
  6649  0E40  2E44               	goto	l10267
  6650  0E41                     l10263:	
  6651                           
  6652                           ;RF_Control_B1.c: 76: RF1.Count = 0;
  6653  0E41  01BC               	clrf	(_RF1^(0+128)+2)
  6654  0E42  01BD               	clrf	((_RF1+1)^(0+128)+2)
  6655                           
  6656                           ;RF_Control_B1.c: 77: RF1.Run = 0;
  6657  0E43  10BB               	bcf	(_RF1^(0+128)+1),1
  6658  0E44                     l10267:	
  6659                           
  6660                           ;RF_Control_B1.c: 78: }
  6661                           ;RF_Control_B1.c: 79: }
  6662                           ;RF_Control_B1.c: 81: if (getBuz_GO() == 0) {
  6663  0E44  319C  240A  318E   	fcall	_getBuz_GO
  6664  0E47  0020               	movlb	0	; select bank0
  6665  0E48  0821               	movf	?_getBuz_GO+1,w
  6666  0E49  0420               	iorwf	?_getBuz_GO,w
  6667  0E4A  1D03               	skipz
  6668  0E4B  0008               	return
  6669                           
  6670                           ;RF_Control_B1.c: 82: if (getMain_All_Error_Status(0) == 0) {
  6671  0E4C  3000               	movlw	0
  6672  0E4D  3191  2166  318E   	fcall	_getMain_All_Error_Status
  6673  0E50  3800               	iorlw	0
  6674  0E51  1D03               	skipz
  6675  0E52  2E68               	goto	l2261
  6676                           
  6677                           ;RF_Control_B1.c: 84: RF1.Key = getRF_KeyStatus() == 1 ? 1 : 0;
  6678  0E53  319C  241B  318E   	fcall	_getRF_KeyStatus
  6679  0E56  3A01               	xorlw	1
  6680  0E57  3000               	movlw	0
  6681  0E58  1903               	skipnz
  6682  0E59  3001               	movlw	1
  6683  0E5A  0021               	movlb	1	; select bank1
  6684  0E5B  00ED               	movwf	??_setRF_Main^(0+128)
  6685  0E5C  0CED               	rrf	??_setRF_Main^(0+128),f
  6686  0E5D  0CED               	rrf	??_setRF_Main^(0+128),f
  6687  0E5E  083A               	movf	_RF1^(0+128),w
  6688  0E5F  066D               	xorwf	??_setRF_Main^(0+128),w
  6689  0E60  397F               	andlw	-129
  6690  0E61  066D               	xorwf	??_setRF_Main^(0+128),w
  6691  0E62  00BA               	movwf	_RF1^(0+128)
  6692                           
  6693                           ;RF_Control_B1.c: 85: if (RF1.Key == 1 && RF1.Learn == 0) {
  6694  0E63  1BBA               	btfsc	_RF1^(0+128),7
  6695  0E64  1B3A               	btfsc	_RF1^(0+128),6
  6696  0E65  2E6A               	goto	l2263
  6697                           
  6698                           ;RF_Control_B1.c: 86: RF1.Run = 1;
  6699  0E66  14BB               	bsf	(_RF1^(0+128)+1),1
  6700                           
  6701                           ;RF_Control_B1.c: 87: }
  6702                           ;RF_Control_B1.c: 92: } else {
  6703  0E67  2E6A               	goto	l2263
  6704  0E68                     l2261:	
  6705                           
  6706                           ;RF_Control_B1.c: 93: RF1.Key = 0;
  6707  0E68  0021               	movlb	1	; select bank1
  6708  0E69  13BA               	bcf	_RF1^(0+128),7
  6709  0E6A                     l2263:	
  6710                           
  6711                           ;RF_Control_B1.c: 94: }
  6712                           ;RF_Control_B1.c: 96: if (RF1.TransceiveGO == 1 && RF1.Learn == 0) {
  6713  0E6A  193A               	btfsc	_RF1^(0+128),2
  6714  0E6B  1B3A               	btfsc	_RF1^(0+128),6
  6715  0E6C  2E7B               	goto	l10291
  6716                           
  6717                           ;RF_Control_B1.c: 97: RF1.TransceiveGO = 0;
  6718  0E6D  113A               	bcf	_RF1^(0+128),2
  6719                           
  6720                           ;RF_Control_B1.c: 98: RF1.RxStatus = 0;
  6721  0E6E  11BA               	bcf	_RF1^(0+128),3
  6722                           
  6723                           ;RF_Control_B1.c: 99: RF1.ReceiveGO = 0;
  6724  0E6F  10BA               	bcf	_RF1^(0+128),1
  6725                           
  6726                           ;RF_Control_B1.c: 100: RF1.RunTime = 5;
  6727  0E70  3005               	movlw	5
  6728  0E71  00C1               	movwf	(_RF1^(0+128)+7)
  6729  0E72  3000               	movlw	0
  6730  0E73  00C2               	movwf	(_RF1^(0+128)+8)
  6731                           
  6732                           ;RF_Control_B1.c: 101: RF1.Run = 1;
  6733  0E74  14BB               	bsf	(_RF1^(0+128)+1),1
  6734                           
  6735                           ;RF_Control_B1.c: 102: RF_RxDisable();
  6736  0E75  319C  24AC  318E   	fcall	_RF_RxDisable
  6737                           
  6738                           ;RF_Control_B1.c: 103: CC2500_TxData();
  6739  0E78  3189  21E6  318E   	fcall	_CC2500_TxData
  6740  0E7B                     l10291:	
  6741                           
  6742                           ;RF_Control_B1.c: 104: }
  6743                           ;RF_Control_B1.c: 106: if (RF1.Run == 0 && RF1.TransceiveGO == 0) {
  6744  0E7B  0021               	movlb	1	; select bank1
  6745  0E7C  18BB               	btfsc	(_RF1^(0+128)+1),1
  6746  0E7D  0008               	return
  6747  0E7E  193A               	btfsc	_RF1^(0+128),2
  6748  0E7F  0008               	return
  6749                           
  6750                           ;RF_Control_B1.c: 107: if (RF1.RxStatus == 1) {
  6751  0E80  1DBA               	btfss	_RF1^(0+128),3
  6752  0E81  2E94               	goto	l2266
  6753                           
  6754                           ;RF_Control_B1.c: 108: if (RF1.Key == 0 || RF1.Learn == 1) {
  6755  0E82  1FBA               	btfss	_RF1^(0+128),7
  6756  0E83  2E86               	goto	l10301
  6757  0E84  1F3A               	btfss	_RF1^(0+128),6
  6758  0E85  0008               	return
  6759  0E86                     l10301:	
  6760                           
  6761                           ;RF_Control_B1.c: 110: CC2500_RxData();
  6762  0E86  318B  237B  318E   	fcall	_CC2500_RxData
  6763                           
  6764                           ;RF_Control_B1.c: 112: if (RF1.ReceiveGO == 1) {
  6765  0E89  0021               	movlb	1	; select bank1
  6766  0E8A  1CBA               	btfss	_RF1^(0+128),1
  6767  0E8B  0008               	return
  6768                           
  6769                           ;RF_Control_B1.c: 113: RF1.ReceiveGO = 0;
  6770  0E8C  10BA               	bcf	_RF1^(0+128),1
  6771                           
  6772                           ;RF_Control_B1.c: 114: RF1.Run = 1;
  6773  0E8D  14BB               	bsf	(_RF1^(0+128)+1),1
  6774                           
  6775                           ;RF_Control_B1.c: 115: RF1.Correction = 0;
  6776  0E8E  12BB               	bcf	(_RF1^(0+128)+1),5
  6777                           
  6778                           ;RF_Control_B1.c: 116: RF1.CorrectionCounter = 0;
  6779  0E8F  01C4               	clrf	(_RF1^(0+128)+10)
  6780  0E90  01C5               	clrf	((_RF1+1)^(0+128)+10)
  6781                           
  6782                           ;RF_Control_B1.c: 124: getRxData();
  6783  0E91  318B  23EA         	fcall	_getRxData
  6784                           
  6785                           ;RF_Control_B1.c: 126: }
  6786                           ;RF_Control_B1.c: 127: }
  6787                           ;RF_Control_B1.c: 128: } else {
  6788  0E93  0008               	return
  6789  0E94                     l2266:	
  6790                           
  6791                           ;RF_Control_B1.c: 130: if (RF1.ReceiveGO == 0) {
  6792  0E94  18BA               	btfsc	_RF1^(0+128),1
  6793  0E95  0008               	return
  6794                           
  6795                           ;RF_Control_B1.c: 131: RF1.RxStatus = 1;
  6796  0E96  15BA               	bsf	_RF1^(0+128),3
  6797                           
  6798                           ;RF_Control_B1.c: 133: CC2500_WriteCommand(0x36);
  6799  0E97  3036               	movlw	54
  6800  0E98  319D  25FA  318E   	fcall	_CC2500_WriteCommand
  6801                           
  6802                           ;RF_Control_B1.c: 135: CC2500_WriteCommand(0x3A);
  6803  0E9B  303A               	movlw	58
  6804  0E9C  319D  25FA  318E   	fcall	_CC2500_WriteCommand
  6805                           
  6806                           ;RF_Control_B1.c: 136: CC2500_WriteCommand(0x34);
  6807  0E9F  3034               	movlw	52
  6808  0EA0  319D  25FA         	fcall	_CC2500_WriteCommand
  6809                           
  6810                           ;RF_Control_B1.c: 137: }
  6811                           ;RF_Control_B1.c: 139: }
  6812                           ;RF_Control_B1.c: 140: }
  6813                           ;RF_Control_B1.c: 141: }
  6814                           ;RF_Control_B1.c: 142: } else {
  6815  0EA2  0008               	return
  6816  0EA3                     l2251:	
  6817                           
  6818                           ;RF_Control_B1.c: 143: if (myMain.PowerON == 1) {
  6819  0EA3  1C20               	btfss	_myMain^(0+128),0
  6820  0EA4  0008               	return
  6821                           
  6822                           ;RF_Control_B1.c: 144: RF1.Enable = 1;
  6823  0EA5  143A               	bsf	_RF1^(0+128),0
  6824  0EA6  0008               	return
  6825  0EA7                     __end_of_setRF_Main:	
  6826                           
  6827                           	psect	text23
  6828  0BEA                     __ptext23:	
  6829 ;; *************** function _getRxData *****************
  6830 ;; Defined at:
  6831 ;;		line 238 in file "../src/RF_Control_B1.c"
  6832 ;; Parameters:    Size  Location     Type
  6833 ;;		None
  6834 ;; Auto vars:     Size  Location     Type
  6835 ;;  error           1    4[BANK1 ] unsigned char 
  6836 ;; Return value:  Size  Location     Type
  6837 ;;		None               void
  6838 ;; Registers used:
  6839 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6840 ;; Tracked objects:
  6841 ;;		On entry : 0/0
  6842 ;;		On exit  : 0/0
  6843 ;;		Unchanged: 0/0
  6844 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6845 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6846 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  6847 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6848 ;;      Totals:         0       1       1       0       0       0       0       0       0       0       0       0       
      +0       0
  6849 ;;Total ram usage:        2 bytes
  6850 ;; Hardware stack levels used:    1
  6851 ;; Hardware stack levels required when called:   12
  6852 ;; This function calls:
  6853 ;;		_getMain_All_Error_Status
  6854 ;;		_setControl_Lights_Table
  6855 ;;		_setLog_Code
  6856 ;;		_setTxData
  6857 ;; This function is called by:
  6858 ;;		_setRF_Main
  6859 ;; This function uses a non-reentrant model
  6860 ;;
  6861                           
  6862                           
  6863                           ;psect for function _getRxData
  6864  0BEA                     _getRxData:	
  6865                           
  6866                           ;RF_Control_B1.c: 239: char error = getMain_All_Error_Status(0);
  6867                           
  6868                           ;incstack = 0
  6869                           ; Regs used in _getRxData: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6870  0BEA  3000               	movlw	0
  6871  0BEB  3191  2166  318B   	fcall	_getMain_All_Error_Status
  6872  0BEE  0020               	movlb	0	; select bank0
  6873  0BEF  00EE               	movwf	??_getRxData
  6874  0BF0  086E               	movf	??_getRxData,w
  6875  0BF1  0021               	movlb	1	; select bank1
  6876  0BF2  00EC               	movwf	getRxData@error^(0+128)
  6877                           
  6878                           ;RF_Control_B1.c: 240: if (RF_Data[0] == 0xaa && RF_Data[1] == 0x01) {
  6879  0BF3  0023               	movlb	3	; select bank3
  6880  0BF4  0820               	movf	_RF_Data^(0+384),w
  6881  0BF5  3AAA               	xorlw	170
  6882  0BF6  1D03               	skipz
  6883  0BF7  2C0E               	goto	l9779
  6884  0BF8  0821               	movf	(_RF_Data^(0+384)+1),w
  6885  0BF9  3A01               	xorlw	1
  6886  0BFA  1D03               	skipz
  6887  0BFB  2C0E               	goto	l9779
  6888                           
  6889                           ;RF_Control_B1.c: 242: product->Data[2] = 0x55;
  6890  0BFC  3055               	movlw	85
  6891  0BFD  0020               	movlb	0	; select bank0
  6892  0BFE  00EE               	movwf	??_getRxData
  6893  0BFF  0879               	movf	_product,w
  6894  0C00  3E02               	addlw	2
  6895  0C01  0086               	movwf	6
  6896  0C02  3002               	movlw	2	; select bank4/5
  6897  0C03  0087               	movwf	7
  6898  0C04  086E               	movf	??_getRxData,w
  6899  0C05  0081               	movwf	1
  6900                           
  6901                           ;RF_Control_B1.c: 243: setTxData();
  6902  0C06  318D  2571         	fcall	_setTxData
  6903                           
  6904                           ;RF_Control_B1.c: 244: RF1.RunTime = 10;
  6905  0C08  300A               	movlw	10
  6906  0C09  0021               	movlb	1	; select bank1
  6907  0C0A  00C1               	movwf	(_RF1^(0+128)+7)
  6908  0C0B  3000               	movlw	0
  6909  0C0C  00C2               	movwf	(_RF1^(0+128)+8)
  6910                           
  6911                           ;RF_Control_B1.c: 250: } else {
  6912  0C0D  0008               	return
  6913  0C0E                     l9779:	
  6914                           
  6915                           ;RF_Control_B1.c: 252: if (error == 0) {
  6916  0C0E  0021               	movlb	1	; select bank1
  6917  0C0F  08EC               	movf	getRxData@error^(0+128),f
  6918  0C10  1D03               	skipz
  6919  0C11  0008               	return
  6920                           
  6921                           ;RF_Control_B1.c: 253: if (RF1.Learn == 1) {
  6922  0C12  1F3A               	btfss	_RF1^(0+128),6
  6923  0C13  2C1F               	goto	l9789
  6924                           
  6925                           ;RF_Control_B1.c: 254: if (RF_Data[0] == 0x0 && RF_Data[1] == 0x64) {
  6926  0C14  0023               	movlb	3	; select bank3
  6927  0C15  08A0               	movf	_RF_Data^(0+384),f
  6928  0C16  1D03               	skipz
  6929  0C17  0008               	return
  6930  0C18  0821               	movf	(_RF_Data^(0+384)+1),w
  6931  0C19  3A64               	xorlw	100
  6932  0C1A  1D03               	skipz
  6933  0C1B  0008               	return
  6934                           
  6935                           ;RF_Control_B1.c: 255: setLog_Code();
  6936  0C1C  3191  2199         	fcall	_setLog_Code
  6937                           
  6938                           ;RF_Control_B1.c: 256: }
  6939                           ;RF_Control_B1.c: 257: } else {
  6940  0C1E  0008               	return
  6941  0C1F                     l9789:	
  6942                           
  6943                           ;RF_Control_B1.c: 258: if (RF_Data[0] == 0x00 && RF_Data[1] == 0x02) {
  6944  0C1F  0023               	movlb	3	; select bank3
  6945  0C20  08A0               	movf	_RF_Data^(0+384),f
  6946  0C21  1D03               	skipz
  6947  0C22  2C54               	goto	l9809
  6948  0C23  0821               	movf	(_RF_Data^(0+384)+1),w
  6949  0C24  3A02               	xorlw	2
  6950  0C25  1D03               	skipz
  6951  0C26  2C54               	goto	l9809
  6952                           
  6953                           ;RF_Control_B1.c: 260: if (RF_Data[12] == 0xff && RF_Data[13] == 0xff && RF_Data[14] == 
      +                          0xff) {
  6954  0C27  082C               	movf	(_RF_Data^(0+384)+12),w
  6955  0C28  3AFF               	xorlw	255
  6956  0C29  1D03               	skipz
  6957  0C2A  2C35               	goto	l9801
  6958  0C2B  082D               	movf	(_RF_Data^(0+384)+13),w
  6959  0C2C  3AFF               	xorlw	255
  6960  0C2D  1D03               	skipz
  6961  0C2E  2C35               	goto	l9801
  6962  0C2F  082E               	movf	(_RF_Data^(0+384)+14),w
  6963  0C30  3AFF               	xorlw	255
  6964  0C31  1D03               	skipz
  6965  0C32  2C35               	goto	l9801
  6966                           
  6967                           ;RF_Control_B1.c: 261: __nop();
  6968  0C33  0000               	nop
  6969                           
  6970                           ;RF_Control_B1.c: 262: } else {
  6971  0C34  0008               	return
  6972  0C35                     l9801:	
  6973                           
  6974                           ;RF_Control_B1.c: 263: if (RF_Data[12] == product->Data[12] && RF_Data[13] == product->D
      +                          ata[13] && RF_Data[14] == product->Data[14]) {
  6975  0C35  0879               	movf	_product,w
  6976  0C36  3E0C               	addlw	12
  6977  0C37  0086               	movwf	6
  6978  0C38  3002               	movlw	2	; select bank4/5
  6979  0C39  0087               	movwf	7
  6980  0C3A  0023               	movlb	3	; select bank3
  6981  0C3B  082C               	movf	(_RF_Data^(0+384)+12),w
  6982  0C3C  0601               	xorwf	1,w
  6983  0C3D  1D03               	skipz
  6984  0C3E  0008               	return
  6985  0C3F  0879               	movf	_product,w
  6986  0C40  3E0D               	addlw	13
  6987  0C41  0086               	movwf	6
  6988  0C42  3002               	movlw	2	; select bank4/5
  6989  0C43  0087               	movwf	7
  6990  0C44  082D               	movf	(_RF_Data^(0+384)+13),w
  6991  0C45  0601               	xorwf	1,w
  6992  0C46  1D03               	skipz
  6993  0C47  0008               	return
  6994  0C48  0879               	movf	_product,w
  6995  0C49  3E0E               	addlw	14
  6996  0C4A  0086               	movwf	6
  6997  0C4B  3002               	movlw	2	; select bank4/5
  6998  0C4C  0087               	movwf	7
  6999  0C4D  082E               	movf	(_RF_Data^(0+384)+14),w
  7000  0C4E  0601               	xorwf	1,w
  7001  0C4F  1D03               	skipz
  7002  0C50  0008               	return
  7003                           
  7004                           ;RF_Control_B1.c: 264: setControl_Lights_Table();
  7005  0C51  318B  2314         	fcall	_setControl_Lights_Table
  7006                           
  7007                           ;RF_Control_B1.c: 265: }
  7008                           ;RF_Control_B1.c: 266: }
  7009                           ;RF_Control_B1.c: 267: } else if (RF_Data[0] == 0xff && RF_Data[1] == 0x02) {
  7010  0C53  0008               	return
  7011  0C54                     l9809:	
  7012  0C54  0023               	movlb	3	; select bank3
  7013  0C55  0820               	movf	_RF_Data^(0+384),w
  7014  0C56  3AFF               	xorlw	255
  7015  0C57  1D03               	skipz
  7016  0C58  2C5F               	goto	l9815
  7017  0C59  0821               	movf	(_RF_Data^(0+384)+1),w
  7018  0C5A  3A02               	xorlw	2
  7019  0C5B  1D03               	skipz
  7020  0C5C  2C5F               	goto	l9815
  7021                           
  7022                           ;RF_Control_B1.c: 268: __nop();
  7023  0C5D  0000               	nop
  7024                           
  7025                           ;RF_Control_B1.c: 269: } else if (RF_Data[0] == 0x0 && RF_Data[1] == 0x65) {
  7026  0C5E  0008               	return
  7027  0C5F                     l9815:	
  7028  0C5F  0023               	movlb	3	; select bank3
  7029  0C60  08A0               	movf	_RF_Data^(0+384),f
  7030  0C61  1D03               	skipz
  7031  0C62  0008               	return
  7032  0C63  0821               	movf	(_RF_Data^(0+384)+1),w
  7033  0C64  3A65               	xorlw	101
  7034  0C65  1D03               	skipz
  7035  0C66  0008               	return
  7036                           
  7037                           ;RF_Control_B1.c: 270: __nop();
  7038  0C67  0000               	nop
  7039                           
  7040                           ;RF_Control_B1.c: 278: ;
  7041                           
  7042                           ;RF_Control_B1.c: 271: }
  7043                           ;RF_Control_B1.c: 276: }
  7044                           ;RF_Control_B1.c: 277: } else {
  7045  0C68  0008               	return
  7046  0C69                     __end_of_getRxData:	
  7047                           
  7048                           	psect	text24
  7049  1199                     __ptext24:	
  7050 ;; *************** function _setLog_Code *****************
  7051 ;; Defined at:
  7052 ;;		line 284 in file "../src/RF_Control_B1.c"
  7053 ;; Parameters:    Size  Location     Type
  7054 ;;		None
  7055 ;; Auto vars:     Size  Location     Type
  7056 ;;		None
  7057 ;; Return value:  Size  Location     Type
  7058 ;;		None               void
  7059 ;; Registers used:
  7060 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7061 ;; Tracked objects:
  7062 ;;		On entry : 0/0
  7063 ;;		On exit  : 0/0
  7064 ;;		Unchanged: 0/0
  7065 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7066 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7067 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7068 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7069 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7070 ;;Total ram usage:        1 bytes
  7071 ;; Hardware stack levels used:    1
  7072 ;; Hardware stack levels required when called:    7
  7073 ;; This function calls:
  7074 ;;		_setBuz
  7075 ;;		_setMemory_LoopSave
  7076 ;;		_setMemory_Modify
  7077 ;;		_setProductData
  7078 ;; This function is called by:
  7079 ;;		_getRxData
  7080 ;; This function uses a non-reentrant model
  7081 ;;
  7082                           
  7083                           
  7084                           ;psect for function _setLog_Code
  7085  1199                     _setLog_Code:	
  7086                           
  7087                           ;RF_Control_B1.c: 285: RF1.Learn = 0;
  7088                           
  7089                           ;incstack = 0
  7090                           ; Regs used in _setLog_Code: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7091  1199  0021               	movlb	1	; select bank1
  7092  119A  133A               	bcf	_RF1^(0+128),6
  7093                           
  7094                           ;RF_Control_B1.c: 286: setProductData(12, RF_Data[12]);
  7095  119B  0023               	movlb	3	; select bank3
  7096  119C  082C               	movf	(_RF_Data^(0+384)+12),w
  7097  119D  0020               	movlb	0	; select bank0
  7098  119E  00E6               	movwf	??_setLog_Code
  7099  119F  0866               	movf	??_setLog_Code,w
  7100  11A0  00E2               	movwf	setProductData@value
  7101  11A1  300C               	movlw	12
  7102  11A2  319B  23CC  3191   	fcall	_setProductData
  7103                           
  7104                           ;RF_Control_B1.c: 287: setProductData(13, RF_Data[13]);
  7105  11A5  0023               	movlb	3	; select bank3
  7106  11A6  082D               	movf	(_RF_Data^(0+384)+13),w
  7107  11A7  0020               	movlb	0	; select bank0
  7108  11A8  00E6               	movwf	??_setLog_Code
  7109  11A9  0866               	movf	??_setLog_Code,w
  7110  11AA  00E2               	movwf	setProductData@value
  7111  11AB  300D               	movlw	13
  7112  11AC  319B  23CC  3191   	fcall	_setProductData
  7113                           
  7114                           ;RF_Control_B1.c: 288: setProductData(14, RF_Data[14]);
  7115  11AF  0023               	movlb	3	; select bank3
  7116  11B0  082E               	movf	(_RF_Data^(0+384)+14),w
  7117  11B1  0020               	movlb	0	; select bank0
  7118  11B2  00E6               	movwf	??_setLog_Code
  7119  11B3  0866               	movf	??_setLog_Code,w
  7120  11B4  00E2               	movwf	setProductData@value
  7121  11B5  300E               	movlw	14
  7122  11B6  319B  23CC  3191   	fcall	_setProductData
  7123                           
  7124                           ;RF_Control_B1.c: 289: setBuz(1, 100);
  7125  11B9  3064               	movlw	100
  7126  11BA  0020               	movlb	0	; select bank0
  7127  11BB  00A9               	movwf	setBuz@time
  7128  11BC  3000               	movlw	0
  7129  11BD  00AA               	movwf	setBuz@time+1
  7130  11BE  3001               	movlw	1
  7131  11BF  3197  274E  3191   	fcall	_setBuz
  7132                           
  7133                           ;RF_Control_B1.c: 290: if (myMain.First == 1) {
  7134  11C2  0021               	movlb	1	; select bank1
  7135  11C3  1EA0               	btfss	_myMain^(0+128),5
  7136  11C4  29C9               	goto	l2315
  7137                           
  7138                           ;RF_Control_B1.c: 291: setMemory_LoopSave(1);
  7139  11C5  3001               	movlw	1
  7140  11C6  319C  24D2  3191   	fcall	_setMemory_LoopSave
  7141  11C9                     l2315:	
  7142                           
  7143                           ;RF_Control_B1.c: 292: }
  7144                           ;RF_Control_B1.c: 293: setMemory_Modify(1);
  7145  11C9  3001               	movlw	1
  7146  11CA  319C  24BF         	fcall	_setMemory_Modify
  7147  11CC  0008               	return
  7148  11CD                     __end_of_setLog_Code:	
  7149                           
  7150                           	psect	text25
  7151  1CD2                     __ptext25:	
  7152 ;; *************** function _setMemory_LoopSave *****************
  7153 ;; Defined at:
  7154 ;;		line 1070 in file "../src/MCU_B1.c"
  7155 ;; Parameters:    Size  Location     Type
  7156 ;;  command         1    wreg     unsigned char 
  7157 ;; Auto vars:     Size  Location     Type
  7158 ;;  command         1    1[BANK0 ] unsigned char 
  7159 ;; Return value:  Size  Location     Type
  7160 ;;		None               void
  7161 ;; Registers used:
  7162 ;;		wreg, status,2, status,0
  7163 ;; Tracked objects:
  7164 ;;		On entry : 0/0
  7165 ;;		On exit  : 0/0
  7166 ;;		Unchanged: 0/0
  7167 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7168 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7169 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7170 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7171 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7172 ;;Total ram usage:        2 bytes
  7173 ;; Hardware stack levels used:    1
  7174 ;; Hardware stack levels required when called:    5
  7175 ;; This function calls:
  7176 ;;		Nothing
  7177 ;; This function is called by:
  7178 ;;		_setLog_Code
  7179 ;; This function uses a non-reentrant model
  7180 ;;
  7181                           
  7182                           
  7183                           ;psect for function _setMemory_LoopSave
  7184  1CD2                     _setMemory_LoopSave:	
  7185                           
  7186                           ;incstack = 0
  7187                           ; Regs used in _setMemory_LoopSave: [wreg+status,2+status,0]
  7188                           ;setMemory_LoopSave@command stored from wreg
  7189  1CD2  0020               	movlb	0	; select bank0
  7190  1CD3  00A1               	movwf	setMemory_LoopSave@command
  7191                           
  7192                           ;MCU_B1.c: 1071: Memory.LoopSave = command == 1 ? 1 : 0;
  7193  1CD4  0821               	movf	setMemory_LoopSave@command,w
  7194  1CD5  3A01               	xorlw	1
  7195  1CD6  3000               	movlw	0
  7196  1CD7  1903               	skipnz
  7197  1CD8  3001               	movlw	1
  7198  1CD9  00A0               	movwf	??_setMemory_LoopSave
  7199  1CDA  0DA0               	rlf	??_setMemory_LoopSave,f
  7200  1CDB  0DA0               	rlf	??_setMemory_LoopSave,f
  7201  1CDC  0024               	movlb	4	; select bank4
  7202  1CDD  0844               	movf	(_Memory^(0+512)+36),w
  7203  1CDE  0020               	movlb	0	; select bank0
  7204  1CDF  0620               	xorwf	??_setMemory_LoopSave,w
  7205  1CE0  39FB               	andlw	-5
  7206  1CE1  0620               	xorwf	??_setMemory_LoopSave,w
  7207  1CE2  0024               	movlb	4	; select bank4
  7208  1CE3  00C4               	movwf	(_Memory^(0+512)+36)
  7209  1CE4  0008               	return
  7210  1CE5                     __end_of_setMemory_LoopSave:	
  7211                           
  7212                           	psect	text26
  7213  0B14                     __ptext26:	
  7214 ;; *************** function _setControl_Lights_Table *****************
  7215 ;; Defined at:
  7216 ;;		line 297 in file "../src/RF_Control_B1.c"
  7217 ;; Parameters:    Size  Location     Type
  7218 ;;		None
  7219 ;; Auto vars:     Size  Location     Type
  7220 ;;		None
  7221 ;; Return value:  Size  Location     Type
  7222 ;;		None               void
  7223 ;; Registers used:
  7224 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7225 ;; Tracked objects:
  7226 ;;		On entry : 0/0
  7227 ;;		On exit  : 0/0
  7228 ;;		Unchanged: 0/0
  7229 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7230 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7231 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7232 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7233 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7234 ;;Total ram usage:        0 bytes
  7235 ;; Hardware stack levels used:    1
  7236 ;; Hardware stack levels required when called:   11
  7237 ;; This function calls:
  7238 ;;		_setBuz
  7239 ;;		_setDimmerLights_ErrorClose
  7240 ;;		_setProductData
  7241 ;;		_setRFSW_AdjControl
  7242 ;;		_setRFSW_Control
  7243 ;;		_setTxData
  7244 ;; This function is called by:
  7245 ;;		_getRxData
  7246 ;; This function uses a non-reentrant model
  7247 ;;
  7248                           
  7249                           
  7250                           ;psect for function _setControl_Lights_Table
  7251  0B14                     _setControl_Lights_Table:	
  7252                           
  7253                           ;RF_Control_B1.c: 298: switch (RF_Data[15]) {
  7254                           
  7255                           ;incstack = 0
  7256                           ; Regs used in _setControl_Lights_Table: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7257  0B14  2B5F               	goto	l9465
  7258  0B15                     l9449:	
  7259                           ;RF_Control_B1.c: 299: case 0x00:
  7260                           
  7261                           
  7262                           ;RF_Control_B1.c: 301: setDimmerLights_ErrorClose(255);
  7263  0B15  30FF               	movlw	255
  7264  0B16  3189  2184  318B   	fcall	_setDimmerLights_ErrorClose
  7265                           
  7266                           ;RF_Control_B1.c: 303: setProductData(9, 0);
  7267  0B19  0020               	movlb	0	; select bank0
  7268  0B1A  01E2               	clrf	setProductData@value
  7269  0B1B  3009               	movlw	9
  7270  0B1C  319B  23CC  318B   	fcall	_setProductData
  7271                           
  7272                           ;RF_Control_B1.c: 304: setProductData(11, 0);
  7273  0B1F  0020               	movlb	0	; select bank0
  7274  0B20  01E2               	clrf	setProductData@value
  7275  0B21  300B               	movlw	11
  7276  0B22  319B  23CC  318B   	fcall	_setProductData
  7277                           
  7278                           ;RF_Control_B1.c: 305: setProductData(15, 0);
  7279  0B25  0020               	movlb	0	; select bank0
  7280  0B26  01E2               	clrf	setProductData@value
  7281  0B27  300F               	movlw	15
  7282  0B28  319B  23CC  318B   	fcall	_setProductData
  7283                           
  7284                           ;RF_Control_B1.c: 306: setProductData(17, 0);
  7285  0B2B  0020               	movlb	0	; select bank0
  7286  0B2C  01E2               	clrf	setProductData@value
  7287  0B2D  3011               	movlw	17
  7288  0B2E  319B  23CC  318B   	fcall	_setProductData
  7289                           
  7290                           ;RF_Control_B1.c: 307: setBuz(1, 100);
  7291  0B31  3064               	movlw	100
  7292  0B32  0020               	movlb	0	; select bank0
  7293  0B33  00A9               	movwf	setBuz@time
  7294  0B34  3000               	movlw	0
  7295  0B35  00AA               	movwf	setBuz@time+1
  7296  0B36  3001               	movlw	1
  7297  0B37  3197  274E         	fcall	_setBuz
  7298                           
  7299                           ;RF_Control_B1.c: 309: break;
  7300  0B39  0008               	return
  7301  0B3A                     l9453:	
  7302                           ;RF_Control_B1.c: 310: case 0x20:
  7303                           
  7304                           
  7305                           ;RF_Control_B1.c: 311: setProductData(9, 0);
  7306  0B3A  0020               	movlb	0	; select bank0
  7307  0B3B  01E2               	clrf	setProductData@value
  7308  0B3C  3009               	movlw	9
  7309  0B3D  319B  23CC  318B   	fcall	_setProductData
  7310                           
  7311                           ;RF_Control_B1.c: 312: setProductData(11, 0);
  7312  0B40  0020               	movlb	0	; select bank0
  7313  0B41  01E2               	clrf	setProductData@value
  7314  0B42  300B               	movlw	11
  7315  0B43  319B  23CC  318B   	fcall	_setProductData
  7316                           
  7317                           ;RF_Control_B1.c: 313: setProductData(17, 0);
  7318  0B46  0020               	movlb	0	; select bank0
  7319  0B47  01E2               	clrf	setProductData@value
  7320  0B48  3011               	movlw	17
  7321  0B49  319B  23CC  318B   	fcall	_setProductData
  7322                           
  7323                           ;RF_Control_B1.c: 314: setTxData();
  7324  0B4C  318D  2571         	fcall	_setTxData
  7325                           
  7326                           ;RF_Control_B1.c: 315: break;
  7327  0B4E  0008               	return
  7328  0B4F                     l9455:	
  7329                           ;RF_Control_B1.c: 316: case 0x01:
  7330                           
  7331                           
  7332                           ;RF_Control_B1.c: 318: setRFSW_Control(1);
  7333  0B4F  3001               	movlw	1
  7334  0B50  3195  250B         	fcall	_setRFSW_Control
  7335                           
  7336                           ;RF_Control_B1.c: 320: break;
  7337  0B52  0008               	return
  7338  0B53                     l9457:	
  7339                           ;RF_Control_B1.c: 321: case 0x02:
  7340                           
  7341                           
  7342                           ;RF_Control_B1.c: 323: setRFSW_Control(2);
  7343  0B53  3002               	movlw	2
  7344  0B54  3195  250B         	fcall	_setRFSW_Control
  7345                           
  7346                           ;RF_Control_B1.c: 330: break;
  7347                           
  7348                           ;RF_Control_B1.c: 326: case 0x03:
  7349                           
  7350                           ;RF_Control_B1.c: 325: break;
  7351  0B56  0008               	return
  7352  0B57                     l9459:	
  7353                           ;RF_Control_B1.c: 331: case 0x11:
  7354                           
  7355                           
  7356                           ;RF_Control_B1.c: 334: setRFSW_AdjControl(1);
  7357  0B57  3001               	movlw	1
  7358  0B58  3193  2323         	fcall	_setRFSW_AdjControl
  7359                           
  7360                           ;RF_Control_B1.c: 337: break;
  7361  0B5A  0008               	return
  7362  0B5B                     l9461:	
  7363                           ;RF_Control_B1.c: 338: case 0x21:
  7364                           
  7365                           
  7366                           ;RF_Control_B1.c: 341: setRFSW_AdjControl(2);
  7367  0B5B  3002               	movlw	2
  7368  0B5C  3193  2323         	fcall	_setRFSW_AdjControl
  7369                           
  7370                           ;RF_Control_B1.c: 352: }
  7371                           
  7372                           ;RF_Control_B1.c: 351: break;
  7373                           
  7374                           ;RF_Control_B1.c: 345: case 0x31:
  7375                           
  7376                           ;RF_Control_B1.c: 344: break;
  7377  0B5E  0008               	return
  7378  0B5F                     l9465:	
  7379  0B5F  0023               	movlb	3	; select bank3
  7380  0B60  082F               	movf	(_RF_Data^(0+384)+15),w
  7381                           
  7382                           ; Switch size 1, requested type "space"
  7383                           ; Number of cases is 8, Range of values is 0 to 49
  7384                           ; switch strategies available:
  7385                           ; Name         Instructions Cycles
  7386                           ; simple_byte           25    13 (average)
  7387                           ; direct_byte          106     6 (fixed)
  7388                           ; jumptable            260     6 (fixed)
  7389                           ;	Chosen strategy is simple_byte
  7390  0B61  3A00               	xorlw	0	; case 0
  7391  0B62  1903               	skipnz
  7392  0B63  2B15               	goto	l9449
  7393  0B64  3A01               	xorlw	1	; case 1
  7394  0B65  1903               	skipnz
  7395  0B66  2B4F               	goto	l9455
  7396  0B67  3A03               	xorlw	3	; case 2
  7397  0B68  1903               	skipnz
  7398  0B69  2B53               	goto	l9457
  7399  0B6A  3A01               	xorlw	1	; case 3
  7400  0B6B  1903               	skipnz
  7401  0B6C  2B7A               	goto	l2329
  7402  0B6D  3A12               	xorlw	18	; case 17
  7403  0B6E  1903               	skipnz
  7404  0B6F  2B57               	goto	l9459
  7405  0B70  3A31               	xorlw	49	; case 32
  7406  0B71  1903               	skipnz
  7407  0B72  2B3A               	goto	l9453
  7408  0B73  3A01               	xorlw	1	; case 33
  7409  0B74  1903               	skipnz
  7410  0B75  2B5B               	goto	l9461
  7411  0B76  3A10               	xorlw	16	; case 49
  7412  0B77  1903               	skipnz
  7413  0B78  2B7A               	goto	l2329
  7414  0B79  2B7A               	goto	l2329
  7415  0B7A                     l2329:	
  7416  0B7A  0008               	return
  7417  0B7B                     __end_of_setControl_Lights_Table:	
  7418                           
  7419                           	psect	text27
  7420  150B                     __ptext27:	
  7421 ;; *************** function _setRFSW_Control *****************
  7422 ;; Defined at:
  7423 ;;		line 379 in file "../src/RF_Control_B1.c"
  7424 ;; Parameters:    Size  Location     Type
  7425 ;;  sw              1    wreg     unsigned char 
  7426 ;; Auto vars:     Size  Location     Type
  7427 ;;  sw              1   77[BANK0 ] unsigned char 
  7428 ;;  status          1   76[BANK0 ] unsigned char 
  7429 ;; Return value:  Size  Location     Type
  7430 ;;		None               void
  7431 ;; Registers used:
  7432 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7433 ;; Tracked objects:
  7434 ;;		On entry : 0/0
  7435 ;;		On exit  : 0/0
  7436 ;;		Unchanged: 0/0
  7437 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7438 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7439 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7440 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7441 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7442 ;;Total ram usage:        3 bytes
  7443 ;; Hardware stack levels used:    1
  7444 ;; Hardware stack levels required when called:    9
  7445 ;; This function calls:
  7446 ;;		_getDelayOff_GO
  7447 ;;		_getDimmerLights_Status
  7448 ;;		_setBuz
  7449 ;;		_setDelayOff_GO
  7450 ;;		_setDimmerLights_SwOff
  7451 ;;		_setDimmerLights_SwOn
  7452 ;;		_setRF_DimmerLights
  7453 ;;		_setTxData
  7454 ;; This function is called by:
  7455 ;;		_setControl_Lights_Table
  7456 ;; This function uses a non-reentrant model
  7457 ;;
  7458                           
  7459                           
  7460                           ;psect for function _setRFSW_Control
  7461  150B                     _setRFSW_Control:	
  7462                           
  7463                           ;incstack = 0
  7464                           ; Regs used in _setRFSW_Control: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7465                           ;setRFSW_Control@sw stored from wreg
  7466  150B  0020               	movlb	0	; select bank0
  7467  150C  00ED               	movwf	setRFSW_Control@sw
  7468                           
  7469                           ;RF_Control_B1.c: 380: char status = 0;
  7470  150D  01EC               	clrf	setRFSW_Control@status
  7471                           
  7472                           ;RF_Control_B1.c: 383: if (RF_Data[16] == 0x80) {
  7473  150E  0023               	movlb	3	; select bank3
  7474  150F  0830               	movf	(_RF_Data^(0+384)+16),w
  7475  1510  3A80               	xorlw	128
  7476  1511  1D03               	skipz
  7477  1512  2D3E               	goto	l9243
  7478                           
  7479                           ;RF_Control_B1.c: 384: setDelayOff_GO(sw, 1, RF_Data[17]);
  7480  1513  0020               	movlb	0	; select bank0
  7481  1514  01E6               	clrf	setDelayOff_GO@command
  7482  1515  0AE6               	incf	setDelayOff_GO@command,f
  7483  1516  0023               	movlb	3	; select bank3
  7484  1517  0831               	movf	(_RF_Data^(0+384)+17),w
  7485  1518  0020               	movlb	0	; select bank0
  7486  1519  00EB               	movwf	??_setRFSW_Control
  7487  151A  086B               	movf	??_setRFSW_Control,w
  7488  151B  00E7               	movwf	setDelayOff_GO@value
  7489  151C  086D               	movf	setRFSW_Control@sw,w
  7490  151D  3195  25FC  3195   	fcall	_setDelayOff_GO
  7491                           
  7492                           ;RF_Control_B1.c: 385: if (getDimmerLights_Status(sw) == 1) {
  7493  1520  0020               	movlb	0	; select bank0
  7494  1521  086D               	movf	setRFSW_Control@sw,w
  7495  1522  319B  23F9  3195   	fcall	_getDimmerLights_Status
  7496  1525  3A01               	xorlw	1
  7497  1526  1D03               	skipz
  7498  1527  2D4D               	goto	l9247
  7499                           
  7500                           ;RF_Control_B1.c: 386: setBuz(1, 100);
  7501  1528  3064               	movlw	100
  7502  1529  0020               	movlb	0	; select bank0
  7503  152A  00A9               	movwf	setBuz@time
  7504  152B  3000               	movlw	0
  7505  152C  00AA               	movwf	setBuz@time+1
  7506  152D  3001               	movlw	1
  7507  152E  3197  274E  3195   	fcall	_setBuz
  7508                           
  7509                           ;RF_Control_B1.c: 387: status = 1;
  7510  1531  0020               	movlb	0	; select bank0
  7511  1532  01EC               	clrf	setRFSW_Control@status
  7512  1533  0AEC               	incf	setRFSW_Control@status,f
  7513                           
  7514                           ;RF_Control_B1.c: 388: setRF_DimmerLights(sw, 1);
  7515  1534  01E6               	clrf	setRF_DimmerLights@on
  7516  1535  0AE6               	incf	setRF_DimmerLights@on,f
  7517  1536  086D               	movf	setRFSW_Control@sw,w
  7518  1537  3197  27A7  3195   	fcall	_setRF_DimmerLights
  7519                           
  7520                           ;RF_Control_B1.c: 389: setTxData();
  7521  153A  318D  2571  3195   	fcall	_setTxData
  7522                           
  7523                           ;RF_Control_B1.c: 391: }
  7524                           ;RF_Control_B1.c: 392: } else {
  7525  153D  2D4D               	goto	l9247
  7526  153E                     l9243:	
  7527                           
  7528                           ;RF_Control_B1.c: 394: if (getDelayOff_GO(sw) == 1) {
  7529  153E  0020               	movlb	0	; select bank0
  7530  153F  086D               	movf	setRFSW_Control@sw,w
  7531  1540  319B  23E9  3195   	fcall	_getDelayOff_GO
  7532  1543  3A01               	xorlw	1
  7533  1544  1D03               	skipz
  7534  1545  2D4D               	goto	l9247
  7535                           
  7536                           ;RF_Control_B1.c: 395: setDelayOff_GO(sw, 0, 0);
  7537  1546  0020               	movlb	0	; select bank0
  7538  1547  01E6               	clrf	setDelayOff_GO@command
  7539  1548  01E7               	clrf	setDelayOff_GO@value
  7540  1549  086D               	movf	setRFSW_Control@sw,w
  7541  154A  3195  25FC  3195   	fcall	_setDelayOff_GO
  7542  154D                     l9247:	
  7543                           
  7544                           ;RF_Control_B1.c: 396: }
  7545                           ;RF_Control_B1.c: 398: }
  7546                           ;RF_Control_B1.c: 399: if (status == 0) {
  7547  154D  0020               	movlb	0	; select bank0
  7548  154E  08EC               	movf	setRFSW_Control@status,f
  7549  154F  1D03               	skipz
  7550  1550  0008               	return
  7551                           
  7552                           ;RF_Control_B1.c: 401: setDimmerLights_SwOn(sw);
  7553  1551  086D               	movf	setRFSW_Control@sw,w
  7554  1552  3188  206A  3195   	fcall	_setDimmerLights_SwOn
  7555                           
  7556                           ;RF_Control_B1.c: 402: setDimmerLights_SwOff(sw);
  7557  1555  0020               	movlb	0	; select bank0
  7558  1556  086D               	movf	setRFSW_Control@sw,w
  7559  1557  3194  24BC         	fcall	_setDimmerLights_SwOff
  7560  1559  0008               	return
  7561  155A                     __end_of_setRFSW_Control:	
  7562                           
  7563                           	psect	text28
  7564  086A                     __ptext28:	
  7565 ;; *************** function _setDimmerLights_SwOn *****************
  7566 ;; Defined at:
  7567 ;;		line 405 in file "../src/Dimmer_B1.c"
  7568 ;; Parameters:    Size  Location     Type
  7569 ;;  sw              1    wreg     unsigned char 
  7570 ;; Auto vars:     Size  Location     Type
  7571 ;;  sw              1   17[BANK0 ] unsigned char 
  7572 ;;  idle            1   16[BANK0 ] unsigned char 
  7573 ;; Return value:  Size  Location     Type
  7574 ;;		None               void
  7575 ;; Registers used:
  7576 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7577 ;; Tracked objects:
  7578 ;;		On entry : 0/0
  7579 ;;		On exit  : 0/0
  7580 ;;		Unchanged: 0/0
  7581 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7582 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7583 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7584 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7585 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7586 ;;Total ram usage:        5 bytes
  7587 ;; Hardware stack levels used:    1
  7588 ;; Hardware stack levels required when called:    7
  7589 ;; This function calls:
  7590 ;;		_DimmerLightsPointSelect
  7591 ;;		_setBuz
  7592 ;; This function is called by:
  7593 ;;		_setRFSW_Control
  7594 ;;		_setSw_Main
  7595 ;; This function uses a non-reentrant model
  7596 ;;
  7597                           
  7598                           
  7599                           ;psect for function _setDimmerLights_SwOn
  7600  086A                     _setDimmerLights_SwOn:	
  7601                           
  7602                           ;incstack = 0
  7603                           ; Regs used in _setDimmerLights_SwOn: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7604                           ;setDimmerLights_SwOn@sw stored from wreg
  7605  086A  0020               	movlb	0	; select bank0
  7606  086B  00B1               	movwf	setDimmerLights_SwOn@sw
  7607                           
  7608                           ;Dimmer_B1.c: 406: DimmerLightsPointSelect(sw);
  7609  086C  0831               	movf	setDimmerLights_SwOn@sw,w
  7610  086D  319C  2486  3188   	fcall	_DimmerLightsPointSelect
  7611                           
  7612                           ;Dimmer_B1.c: 407: char idle = 0;
  7613  0870  0020               	movlb	0	; select bank0
  7614  0871  01B0               	clrf	setDimmerLights_SwOn@idle
  7615                           
  7616                           ;Dimmer_B1.c: 410: if (idle == 0) {
  7617  0872  08B0               	movf	setDimmerLights_SwOn@idle,f
  7618  0873  1D03               	skipz
  7619  0874  2895               	goto	l9031
  7620                           
  7621                           ;Dimmer_B1.c: 411: if (sw == 1) {
  7622  0875  0831               	movf	setDimmerLights_SwOn@sw,w
  7623  0876  3A01               	xorlw	1
  7624  0877  1D03               	skipz
  7625  0878  2884               	goto	l9021
  7626                           
  7627                           ;Dimmer_B1.c: 412: idle = DimmerLights2.TriggerAdj == 1 || DimmerLights2.AdjSw == 1 ? 1 
      +                          : 0;
  7628  0879  01AE               	clrf	_setDimmerLights_SwOn$2311
  7629  087A  0AAE               	incf	_setDimmerLights_SwOn$2311,f
  7630  087B  0023               	movlb	3	; select bank3
  7631  087C  1DC8               	btfss	(_DimmerLights2^(0+384)+10),3	;volatile
  7632  087D  1B3F               	btfsc	(_DimmerLights2^(0+384)+1),6	;volatile
  7633  087E  2881               	goto	l9019
  7634  087F  0020               	movlb	0	; select bank0
  7635  0880  01AE               	clrf	_setDimmerLights_SwOn$2311
  7636  0881                     l9019:	
  7637  0881  0020               	movlb	0	; select bank0
  7638  0882  082E               	movf	_setDimmerLights_SwOn$2311,w
  7639  0883  2892               	goto	L3
  7640  0884                     l9021:	
  7641                           ;Dimmer_B1.c: 413: } else if (sw == 2) {
  7642                           
  7643  0884  0831               	movf	setDimmerLights_SwOn@sw,w
  7644  0885  3A02               	xorlw	2
  7645  0886  1D03               	skipz
  7646  0887  2895               	goto	l9031
  7647                           
  7648                           ;Dimmer_B1.c: 414: idle = DimmerLights1.TriggerAdj == 1 || DimmerLights1.AdjSw == 1 ? 1 
      +                          : 0;
  7649  0888  01AF               	clrf	_setDimmerLights_SwOn$2312
  7650  0889  0AAF               	incf	_setDimmerLights_SwOn$2312,f
  7651  088A  0022               	movlb	2	; select bank2
  7652  088B  1DDF               	btfss	(_DimmerLights1^(0+256)+10),3	;volatile
  7653  088C  1B56               	btfsc	(_DimmerLights1^(0+256)+1),6	;volatile
  7654  088D  2890               	goto	l9029
  7655  088E  0020               	movlb	0	; select bank0
  7656  088F  01AF               	clrf	_setDimmerLights_SwOn$2312
  7657  0890                     l9029:	
  7658  0890  0020               	movlb	0	; select bank0
  7659  0891  082F               	movf	_setDimmerLights_SwOn$2312,w
  7660  0892                     L3:	
  7661  0892  00AD               	movwf	??_setDimmerLights_SwOn
  7662  0893  082D               	movf	??_setDimmerLights_SwOn,w
  7663  0894  00B0               	movwf	setDimmerLights_SwOn@idle
  7664  0895                     l9031:	
  7665                           
  7666                           ;Dimmer_B1.c: 415: }
  7667                           ;Dimmer_B1.c: 416: }
  7668                           ;Dimmer_B1.c: 436: if (idle == 0) {
  7669  0895  08B0               	movf	setDimmerLights_SwOn@idle,f
  7670  0896  1D03               	skipz
  7671  0897  0008               	return
  7672                           
  7673                           ;Dimmer_B1.c: 437: DimmerLights->SwFlag = 1;
  7674  0898  086F               	movf	_DimmerLights,w
  7675  0899  3E0B               	addlw	11
  7676  089A  0086               	movwf	6
  7677  089B  3001               	movlw	1	; select bank2/3
  7678  089C  0087               	movwf	7
  7679  089D  1481               	bsf	1,1
  7680                           
  7681                           ;Dimmer_B1.c: 438: if (DimmerLights->Status == 0) {
  7682  089E  086F               	movf	_DimmerLights,w
  7683  089F  3E02               	addlw	2
  7684  08A0  0086               	movwf	6
  7685  08A1  3001               	movlw	1	; select bank2/3
  7686  08A2  0087               	movwf	7
  7687  08A3  1881               	btfsc	1,1
  7688  08A4  28B8               	goto	l9037
  7689                           
  7690                           ;Dimmer_B1.c: 439: DimmerLights->Status = 1;
  7691  08A5  086F               	movf	_DimmerLights,w
  7692  08A6  3E02               	addlw	2
  7693  08A7  0086               	movwf	6
  7694  08A8  3001               	movlw	1	; select bank2/3
  7695  08A9  0087               	movwf	7
  7696  08AA  1481               	bsf	1,1
  7697                           
  7698                           ;Dimmer_B1.c: 440: DimmerLights->Trigger = 1;
  7699  08AB  086F               	movf	_DimmerLights,w
  7700  08AC  3E0A               	addlw	10
  7701  08AD  0086               	movwf	6
  7702  08AE  3001               	movlw	1	; select bank2/3
  7703  08AF  0087               	movwf	7
  7704  08B0  1481               	bsf	1,1
  7705                           
  7706                           ;Dimmer_B1.c: 441: DimmerLights->Switch = 1;
  7707  08B1  086F               	movf	_DimmerLights,w
  7708  08B2  3E0A               	addlw	10
  7709  08B3  0086               	movwf	6
  7710  08B4  3001               	movlw	1	; select bank2/3
  7711  08B5  0087               	movwf	7
  7712  08B6  1401               	bsf	1,0
  7713                           
  7714                           ;Dimmer_B1.c: 442: } else {
  7715  08B7  28BE               	goto	l9039
  7716  08B8                     l9037:	
  7717                           
  7718                           ;Dimmer_B1.c: 443: DimmerLights->Status = 0;
  7719  08B8  086F               	movf	_DimmerLights,w
  7720  08B9  3E02               	addlw	2
  7721  08BA  0086               	movwf	6
  7722  08BB  3001               	movlw	1	; select bank2/3
  7723  08BC  0087               	movwf	7
  7724  08BD  1081               	bcf	1,1
  7725  08BE                     l9039:	
  7726                           
  7727                           ;Dimmer_B1.c: 444: }
  7728                           ;Dimmer_B1.c: 445: setBuz(1, 100);
  7729  08BE  3064               	movlw	100
  7730  08BF  00A9               	movwf	setBuz@time
  7731  08C0  3000               	movlw	0
  7732  08C1  00AA               	movwf	setBuz@time+1
  7733  08C2  3001               	movlw	1
  7734  08C3  3197  274E         	fcall	_setBuz
  7735  08C5  0008               	return
  7736  08C6                     __end_of_setDimmerLights_SwOn:	
  7737                           
  7738                           	psect	text29
  7739  1323                     __ptext29:	
  7740 ;; *************** function _setRFSW_AdjControl *****************
  7741 ;; Defined at:
  7742 ;;		line 408 in file "../src/RF_Control_B1.c"
  7743 ;; Parameters:    Size  Location     Type
  7744 ;;  sw              1    wreg     unsigned char 
  7745 ;; Auto vars:     Size  Location     Type
  7746 ;;  sw              1   75[BANK0 ] unsigned char 
  7747 ;;  status          1   74[BANK0 ] unsigned char 
  7748 ;; Return value:  Size  Location     Type
  7749 ;;		None               void
  7750 ;; Registers used:
  7751 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7752 ;; Tracked objects:
  7753 ;;		On entry : 0/0
  7754 ;;		On exit  : 0/0
  7755 ;;		Unchanged: 0/0
  7756 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7757 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7758 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7759 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7760 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7761 ;;Total ram usage:        4 bytes
  7762 ;; Hardware stack levels used:    1
  7763 ;; Hardware stack levels required when called:   10
  7764 ;; This function calls:
  7765 ;;		_getDimmerLights_Status
  7766 ;;		_setMemory_Modify
  7767 ;;		_setProductData
  7768 ;;		_setRF_DimmerValue
  7769 ;;		_setTxData
  7770 ;; This function is called by:
  7771 ;;		_setControl_Lights_Table
  7772 ;; This function uses a non-reentrant model
  7773 ;;
  7774                           
  7775                           
  7776                           ;psect for function _setRFSW_AdjControl
  7777  1323                     _setRFSW_AdjControl:	
  7778                           
  7779                           ;incstack = 0
  7780                           ; Regs used in _setRFSW_AdjControl: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7781                           ;setRFSW_AdjControl@sw stored from wreg
  7782  1323  0020               	movlb	0	; select bank0
  7783  1324  00EB               	movwf	setRFSW_AdjControl@sw
  7784                           
  7785                           ;RF_Control_B1.c: 409: char status = 0;
  7786  1325  01EA               	clrf	setRFSW_AdjControl@status
  7787                           
  7788                           ;RF_Control_B1.c: 411: status = getDimmerLights_Status(sw);
  7789  1326  086B               	movf	setRFSW_AdjControl@sw,w
  7790  1327  319B  23F9  3193   	fcall	_getDimmerLights_Status
  7791  132A  0020               	movlb	0	; select bank0
  7792  132B  00E8               	movwf	??_setRFSW_AdjControl
  7793  132C  0868               	movf	??_setRFSW_AdjControl,w
  7794  132D  00EA               	movwf	setRFSW_AdjControl@status
  7795                           
  7796                           ;RF_Control_B1.c: 414: if (status == 1) {
  7797  132E  086A               	movf	setRFSW_AdjControl@status,w
  7798  132F  3A01               	xorlw	1
  7799  1330  1D03               	skipz
  7800  1331  2B3C               	goto	l9261
  7801                           
  7802                           ;RF_Control_B1.c: 415: setMemory_Modify(1);
  7803  1332  3001               	movlw	1
  7804  1333  319C  24BF  3193   	fcall	_setMemory_Modify
  7805                           
  7806                           ;RF_Control_B1.c: 416: setRF_DimmerValue(sw);
  7807  1336  0020               	movlb	0	; select bank0
  7808  1337  086B               	movf	setRFSW_AdjControl@sw,w
  7809  1338  3191  2137  3193   	fcall	_setRF_DimmerValue
  7810                           
  7811                           ;RF_Control_B1.c: 417: } else {
  7812  133B  2B4D               	goto	l2341
  7813  133C                     l9261:	
  7814                           
  7815                           ;RF_Control_B1.c: 418: setProductData(9, product->Data[20 + sw]);
  7816  133C  0020               	movlb	0	; select bank0
  7817  133D  086B               	movf	setRFSW_AdjControl@sw,w
  7818  133E  3E14               	addlw	20
  7819  133F  0779               	addwf	_product,w
  7820  1340  00E8               	movwf	??_setRFSW_AdjControl
  7821  1341  0868               	movf	??_setRFSW_AdjControl,w
  7822  1342  0086               	movwf	6
  7823  1343  3002               	movlw	2	; select bank4/5
  7824  1344  0087               	movwf	7
  7825  1345  0801               	movf	1,w
  7826  1346  00E9               	movwf	??_setRFSW_AdjControl+1
  7827  1347  0869               	movf	??_setRFSW_AdjControl+1,w
  7828  1348  00E2               	movwf	setProductData@value
  7829  1349  3009               	movlw	9
  7830  134A  319B  23CC  3193   	fcall	_setProductData
  7831  134D                     l2341:	
  7832                           
  7833                           ;RF_Control_B1.c: 419: }
  7834                           ;RF_Control_B1.c: 420: setProductData(17, product->Data[26 + sw]);
  7835  134D  0020               	movlb	0	; select bank0
  7836  134E  086B               	movf	setRFSW_AdjControl@sw,w
  7837  134F  3E1A               	addlw	26
  7838  1350  0779               	addwf	_product,w
  7839  1351  00E8               	movwf	??_setRFSW_AdjControl
  7840  1352  0868               	movf	??_setRFSW_AdjControl,w
  7841  1353  0086               	movwf	6
  7842  1354  3002               	movlw	2	; select bank4/5
  7843  1355  0087               	movwf	7
  7844  1356  0801               	movf	1,w
  7845  1357  00E9               	movwf	??_setRFSW_AdjControl+1
  7846  1358  0869               	movf	??_setRFSW_AdjControl+1,w
  7847  1359  00E2               	movwf	setProductData@value
  7848  135A  3011               	movlw	17
  7849  135B  319B  23CC  3193   	fcall	_setProductData
  7850                           
  7851                           ;RF_Control_B1.c: 421: setTxData();
  7852  135E  318D  2571         	fcall	_setTxData
  7853  1360  0008               	return
  7854  1361                     __end_of_setRFSW_AdjControl:	
  7855                           
  7856                           	psect	text30
  7857  1137                     __ptext30:	
  7858 ;; *************** function _setRF_DimmerValue *****************
  7859 ;; Defined at:
  7860 ;;		line 426 in file "../src/RF_Control_B1.c"
  7861 ;; Parameters:    Size  Location     Type
  7862 ;;  lights          1    wreg     unsigned char 
  7863 ;; Auto vars:     Size  Location     Type
  7864 ;;  lights          1   71[BANK0 ] unsigned char 
  7865 ;; Return value:  Size  Location     Type
  7866 ;;		None               void
  7867 ;; Registers used:
  7868 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7869 ;; Tracked objects:
  7870 ;;		On entry : 0/0
  7871 ;;		On exit  : 0/0
  7872 ;;		Unchanged: 0/0
  7873 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7874 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7875 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7876 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7877 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7878 ;;Total ram usage:        2 bytes
  7879 ;; Hardware stack levels used:    1
  7880 ;; Hardware stack levels required when called:    9
  7881 ;; This function calls:
  7882 ;;		_setDimmerLights_AdjRF
  7883 ;;		_setProductData
  7884 ;; This function is called by:
  7885 ;;		_setRFSW_AdjControl
  7886 ;; This function uses a non-reentrant model
  7887 ;;
  7888                           
  7889                           
  7890                           ;psect for function _setRF_DimmerValue
  7891  1137                     _setRF_DimmerValue:	
  7892                           
  7893                           ;incstack = 0
  7894                           ; Regs used in _setRF_DimmerValue: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7895                           ;setRF_DimmerValue@lights stored from wreg
  7896  1137  0020               	movlb	0	; select bank0
  7897  1138  00E7               	movwf	setRF_DimmerValue@lights
  7898                           
  7899                           ;RF_Control_B1.c: 427: if (RF_Data[9] > 0x64) {
  7900  1139  3065               	movlw	101
  7901  113A  0023               	movlb	3	; select bank3
  7902  113B  0229               	subwf	(_RF_Data^(0+384)+9),w
  7903  113C  1C03               	skipc
  7904  113D  2944               	goto	l9133
  7905                           
  7906                           ;RF_Control_B1.c: 428: RF_Data[9] = 0x64;
  7907  113E  3064               	movlw	100
  7908  113F  0020               	movlb	0	; select bank0
  7909  1140  00E6               	movwf	??_setRF_DimmerValue
  7910  1141  0866               	movf	??_setRF_DimmerValue,w
  7911  1142  0023               	movlb	3	; select bank3
  7912  1143  00A9               	movwf	(_RF_Data^(0+384)+9)
  7913  1144                     l9133:	
  7914                           
  7915                           ;RF_Control_B1.c: 429: }
  7916                           ;RF_Control_B1.c: 430: setProductData(9, RF_Data[9]);
  7917  1144  0829               	movf	(_RF_Data^(0+384)+9),w
  7918  1145  0020               	movlb	0	; select bank0
  7919  1146  00E6               	movwf	??_setRF_DimmerValue
  7920  1147  0866               	movf	??_setRF_DimmerValue,w
  7921  1148  00E2               	movwf	setProductData@value
  7922  1149  3009               	movlw	9
  7923  114A  319B  23CC  3191   	fcall	_setProductData
  7924                           
  7925                           ;RF_Control_B1.c: 431: setProductData(11, lights);
  7926  114D  0020               	movlb	0	; select bank0
  7927  114E  0867               	movf	setRF_DimmerValue@lights,w
  7928  114F  00E6               	movwf	??_setRF_DimmerValue
  7929  1150  0866               	movf	??_setRF_DimmerValue,w
  7930  1151  00E2               	movwf	setProductData@value
  7931  1152  300B               	movlw	11
  7932  1153  319B  23CC  3191   	fcall	_setProductData
  7933                           
  7934                           ;RF_Control_B1.c: 432: setProductData((20 + lights), RF_Data[9]);
  7935  1156  0023               	movlb	3	; select bank3
  7936  1157  0829               	movf	(_RF_Data^(0+384)+9),w
  7937  1158  0020               	movlb	0	; select bank0
  7938  1159  00E6               	movwf	??_setRF_DimmerValue
  7939  115A  0866               	movf	??_setRF_DimmerValue,w
  7940  115B  00E2               	movwf	setProductData@value
  7941  115C  0867               	movf	setRF_DimmerValue@lights,w
  7942  115D  3E14               	addlw	20
  7943  115E  319B  23CC  3191   	fcall	_setProductData
  7944                           
  7945                           ;RF_Control_B1.c: 433: setDimmerLights_AdjRF(lights);
  7946  1161  0020               	movlb	0	; select bank0
  7947  1162  0867               	movf	setRF_DimmerValue@lights,w
  7948  1163  319F  2768         	fcall	_setDimmerLights_AdjRF
  7949  1165  0008               	return
  7950  1166                     __end_of_setRF_DimmerValue:	
  7951                           
  7952                           	psect	text31
  7953  1F68                     __ptext31:	
  7954 ;; *************** function _setDimmerLights_AdjRF *****************
  7955 ;; Defined at:
  7956 ;;		line 903 in file "../src/Dimmer_B1.c"
  7957 ;; Parameters:    Size  Location     Type
  7958 ;;  lights          1    wreg     unsigned char 
  7959 ;; Auto vars:     Size  Location     Type
  7960 ;;  lights          1   67[BANK0 ] unsigned char 
  7961 ;; Return value:  Size  Location     Type
  7962 ;;		None               void
  7963 ;; Registers used:
  7964 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7965 ;; Tracked objects:
  7966 ;;		On entry : 0/0
  7967 ;;		On exit  : 0/0
  7968 ;;		Unchanged: 0/0
  7969 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7970 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7971 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7972 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7973 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7974 ;;Total ram usage:        2 bytes
  7975 ;; Hardware stack levels used:    1
  7976 ;; Hardware stack levels required when called:    8
  7977 ;; This function calls:
  7978 ;;		_DimmerLightsPointSelect
  7979 ;;		_getPercentValue
  7980 ;; This function is called by:
  7981 ;;		_setRF_DimmerValue
  7982 ;; This function uses a non-reentrant model
  7983 ;;
  7984                           
  7985                           
  7986                           ;psect for function _setDimmerLights_AdjRF
  7987  1F68                     _setDimmerLights_AdjRF:	
  7988                           
  7989                           ;incstack = 0
  7990                           ; Regs used in _setDimmerLights_AdjRF: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  7991                           ;setDimmerLights_AdjRF@lights stored from wreg
  7992  1F68  0020               	movlb	0	; select bank0
  7993  1F69  00E3               	movwf	setDimmerLights_AdjRF@lights
  7994                           
  7995                           ;Dimmer_B1.c: 905: DimmerLightsPointSelect(lights);
  7996  1F6A  0863               	movf	setDimmerLights_AdjRF@lights,w
  7997  1F6B  319C  2486  319F   	fcall	_DimmerLightsPointSelect
  7998                           
  7999                           ;Dimmer_B1.c: 906: DimmerLights->AdjRF = 1;
  8000  1F6E  0020               	movlb	0	; select bank0
  8001  1F6F  086F               	movf	_DimmerLights,w
  8002  1F70  3E02               	addlw	2
  8003  1F71  0086               	movwf	6
  8004  1F72  3001               	movlw	1	; select bank2/3
  8005  1F73  0087               	movwf	7
  8006  1F74  1401               	bsf	1,0
  8007                           
  8008                           ;Dimmer_B1.c: 907: DimmerLights->Signal = 1;
  8009  1F75  0A6F               	incf	_DimmerLights,w
  8010  1F76  0086               	movwf	6
  8011  1F77  3001               	movlw	1	; select bank2/3
  8012  1F78  0087               	movwf	7
  8013  1F79  1681               	bsf	1,5
  8014                           
  8015                           ;Dimmer_B1.c: 908: DimmerLights->MaxmumValue = getPercentValue(product->Data[9]);
  8016  1F7A  0879               	movf	_product,w
  8017  1F7B  3E09               	addlw	9
  8018  1F7C  0086               	movwf	6
  8019  1F7D  3002               	movlw	2	; select bank4/5
  8020  1F7E  0087               	movwf	7
  8021  1F7F  0801               	movf	1,w
  8022  1F80  318A  22AF         	fcall	_getPercentValue
  8023  1F82  0020               	movlb	0	; select bank0
  8024  1F83  00E2               	movwf	??_setDimmerLights_AdjRF
  8025  1F84  086F               	movf	_DimmerLights,w
  8026  1F85  3E06               	addlw	6
  8027  1F86  0086               	movwf	6
  8028  1F87  3001               	movlw	1	; select bank2/3
  8029  1F88  0087               	movwf	7
  8030  1F89  0862               	movf	??_setDimmerLights_AdjRF,w
  8031  1F8A  0081               	movwf	1
  8032  1F8B  0008               	return
  8033  1F8C                     __end_of_setDimmerLights_AdjRF:	
  8034                           
  8035                           	psect	text32
  8036  0AAF                     __ptext32:	
  8037 ;; *************** function _getPercentValue *****************
  8038 ;; Defined at:
  8039 ;;		line 1018 in file "../src/Dimmer_B1.c"
  8040 ;; Parameters:    Size  Location     Type
  8041 ;;  value           1    wreg     unsigned char 
  8042 ;; Auto vars:     Size  Location     Type
  8043 ;;  value           1   62[BANK0 ] unsigned char 
  8044 ;;  i               3   63[BANK0 ] float 
  8045 ;; Return value:  Size  Location     Type
  8046 ;;                  1    wreg      unsigned char 
  8047 ;; Registers used:
  8048 ;;		wreg, status,2, status,0, pclath, cstack
  8049 ;; Tracked objects:
  8050 ;;		On entry : 0/0
  8051 ;;		On exit  : 0/0
  8052 ;;		Unchanged: 0/0
  8053 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8054 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8055 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8056 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8057 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8058 ;;Total ram usage:        6 bytes
  8059 ;; Hardware stack levels used:    1
  8060 ;; Hardware stack levels required when called:    7
  8061 ;; This function calls:
  8062 ;;		___awtoft
  8063 ;;		___ftadd
  8064 ;;		___ftdiv
  8065 ;;		___ftmul
  8066 ;;		___ftneg
  8067 ;;		___fttol
  8068 ;; This function is called by:
  8069 ;;		_setDimmerLights_AdjRF
  8070 ;; This function uses a non-reentrant model
  8071 ;;
  8072                           
  8073                           
  8074                           ;psect for function _getPercentValue
  8075  0AAF                     _getPercentValue:	
  8076                           
  8077                           ;incstack = 0
  8078                           ; Regs used in _getPercentValue: [wreg+status,2+status,0+pclath+cstack]
  8079                           ;getPercentValue@value stored from wreg
  8080  0AAF  0020               	movlb	0	; select bank0
  8081  0AB0  00DE               	movwf	getPercentValue@value
  8082                           
  8083                           ;Dimmer_B1.c: 1026: float i = ((char)(75*0.8)) - ((char)(15*0.8));
  8084  0AB1  3000               	movlw	0
  8085  0AB2  00DF               	movwf	getPercentValue@i
  8086  0AB3  3040               	movlw	64
  8087  0AB4  00E0               	movwf	getPercentValue@i+1
  8088  0AB5  3042               	movlw	66
  8089  0AB6  00E1               	movwf	getPercentValue@i+2
  8090                           
  8091                           ;Dimmer_B1.c: 1027: i /= 100;
  8092  0AB7  3000               	movlw	0
  8093  0AB8  00AE               	movwf	___ftdiv@f2
  8094  0AB9  30C8               	movlw	200
  8095  0ABA  00AF               	movwf	___ftdiv@f2+1
  8096  0ABB  3042               	movlw	66
  8097  0ABC  00B0               	movwf	___ftdiv@f2+2
  8098  0ABD  085F               	movf	getPercentValue@i,w
  8099  0ABE  00B1               	movwf	___ftdiv@f1
  8100  0ABF  0860               	movf	getPercentValue@i+1,w
  8101  0AC0  00B2               	movwf	___ftdiv@f1+1
  8102  0AC1  0861               	movf	getPercentValue@i+2,w
  8103  0AC2  00B3               	movwf	___ftdiv@f1+2
  8104  0AC3  318E  26A7  318A   	fcall	___ftdiv
  8105  0AC6  0020               	movlb	0	; select bank0
  8106  0AC7  082E               	movf	?___ftdiv,w
  8107  0AC8  00DF               	movwf	getPercentValue@i
  8108  0AC9  082F               	movf	?___ftdiv+1,w
  8109  0ACA  00E0               	movwf	getPercentValue@i+1
  8110  0ACB  0830               	movf	?___ftdiv+2,w
  8111  0ACC  00E1               	movwf	getPercentValue@i+2
  8112                           
  8113                           ;Dimmer_B1.c: 1029: return (char) (((char)(75*0.8)) - ((100 - value) * i));
  8114  0ACD  085E               	movf	getPercentValue@value,w
  8115  0ACE  00DC               	movwf	??_getPercentValue
  8116  0ACF  01DD               	clrf	??_getPercentValue+1
  8117  0AD0  09DC               	comf	??_getPercentValue,f
  8118  0AD1  09DD               	comf	??_getPercentValue+1,f
  8119  0AD2  0ADC               	incf	??_getPercentValue,f
  8120  0AD3  1903               	skipnz
  8121  0AD4  0ADD               	incf	??_getPercentValue+1,f
  8122  0AD5  085C               	movf	??_getPercentValue,w
  8123  0AD6  3E64               	addlw	100
  8124  0AD7  00A8               	movwf	___awtoft@c
  8125  0AD8  3000               	movlw	0
  8126  0AD9  3D5D               	addwfc	??_getPercentValue+1,w
  8127  0ADA  00A9               	movwf	___awtoft@c+1
  8128  0ADB  319F  2723  318A   	fcall	___awtoft
  8129  0ADE  0020               	movlb	0	; select bank0
  8130  0ADF  0828               	movf	?___awtoft,w
  8131  0AE0  00B1               	movwf	___ftmul@f2
  8132  0AE1  0829               	movf	?___awtoft+1,w
  8133  0AE2  00B2               	movwf	___ftmul@f2+1
  8134  0AE3  082A               	movf	?___awtoft+2,w
  8135  0AE4  00B3               	movwf	___ftmul@f2+2
  8136  0AE5  085F               	movf	getPercentValue@i,w
  8137  0AE6  00AE               	movwf	___ftmul@f1
  8138  0AE7  0860               	movf	getPercentValue@i+1,w
  8139  0AE8  00AF               	movwf	___ftmul@f1+1
  8140  0AE9  0861               	movf	getPercentValue@i+2,w
  8141  0AEA  00B0               	movwf	___ftmul@f1+2
  8142  0AEB  3187  271B  318A   	fcall	___ftmul
  8143  0AEE  0020               	movlb	0	; select bank0
  8144  0AEF  082E               	movf	?___ftmul,w
  8145  0AF0  00BE               	movwf	___ftneg@f1
  8146  0AF1  082F               	movf	?___ftmul+1,w
  8147  0AF2  00BF               	movwf	___ftneg@f1+1
  8148  0AF3  0830               	movf	?___ftmul+2,w
  8149  0AF4  00C0               	movwf	___ftneg@f1+2
  8150  0AF5  319B  2337  318A   	fcall	___ftneg
  8151  0AF8  0020               	movlb	0	; select bank0
  8152  0AF9  083E               	movf	?___ftneg,w
  8153  0AFA  00C4               	movwf	___ftadd@f2
  8154  0AFB  083F               	movf	?___ftneg+1,w
  8155  0AFC  00C5               	movwf	___ftadd@f2+1
  8156  0AFD  0840               	movf	?___ftneg+2,w
  8157  0AFE  00C6               	movwf	___ftadd@f2+2
  8158  0AFF  3000               	movlw	0
  8159  0B00  00C1               	movwf	___ftadd@f1
  8160  0B01  3070               	movlw	112
  8161  0B02  00C2               	movwf	___ftadd@f1+1
  8162  0B03  3042               	movlw	66
  8163  0B04  00C3               	movwf	___ftadd@f1+2
  8164  0B05  3184  2469  318A   	fcall	___ftadd
  8165  0B08  0020               	movlb	0	; select bank0
  8166  0B09  0841               	movf	?___ftadd,w
  8167  0B0A  00CE               	movwf	___fttol@f1
  8168  0B0B  0842               	movf	?___ftadd+1,w
  8169  0B0C  00CF               	movwf	___fttol@f1+1
  8170  0B0D  0843               	movf	?___ftadd+2,w
  8171  0B0E  00D0               	movwf	___fttol@f1+2
  8172  0B0F  318C  24EA         	fcall	___fttol
  8173  0B11  0020               	movlb	0	; select bank0
  8174  0B12  084E               	movf	?___fttol,w
  8175  0B13  0008               	return
  8176  0B14                     __end_of_getPercentValue:	
  8177                           
  8178                           	psect	text33
  8179  071B                     __ptext33:	
  8180 ;; *************** function ___ftmul *****************
  8181 ;; Defined at:
  8182 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftmul.c"
  8183 ;; Parameters:    Size  Location     Type
  8184 ;;  f1              3   14[BANK0 ] float 
  8185 ;;  f2              3   17[BANK0 ] float 
  8186 ;; Auto vars:     Size  Location     Type
  8187 ;;  f3_as_produc    3   25[BANK0 ] unsigned um
  8188 ;;  sign            1   29[BANK0 ] unsigned char 
  8189 ;;  cntr            1   28[BANK0 ] unsigned char 
  8190 ;;  exp             1   24[BANK0 ] unsigned char 
  8191 ;; Return value:  Size  Location     Type
  8192 ;;                  3   14[BANK0 ] float 
  8193 ;; Registers used:
  8194 ;;		wreg, status,2, status,0, pclath, cstack
  8195 ;; Tracked objects:
  8196 ;;		On entry : 0/0
  8197 ;;		On exit  : 0/0
  8198 ;;		Unchanged: 0/0
  8199 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8200 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8201 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8202 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8203 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8204 ;;Total ram usage:       16 bytes
  8205 ;; Hardware stack levels used:    1
  8206 ;; Hardware stack levels required when called:    6
  8207 ;; This function calls:
  8208 ;;		___ftpack
  8209 ;; This function is called by:
  8210 ;;		_getPercentValue
  8211 ;; This function uses a non-reentrant model
  8212 ;;
  8213                           
  8214                           
  8215                           ;psect for function ___ftmul
  8216  071B                     ___ftmul:	
  8217                           
  8218                           ;incstack = 0
  8219                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  8220  071B  0020               	movlb	0	; select bank0
  8221  071C  082E               	movf	___ftmul@f1,w
  8222  071D  00B4               	movwf	??___ftmul
  8223  071E  082F               	movf	___ftmul@f1+1,w
  8224  071F  00B5               	movwf	??___ftmul+1
  8225  0720  0830               	movf	___ftmul@f1+2,w
  8226  0721  00B6               	movwf	??___ftmul+2
  8227  0722  1003               	clrc
  8228  0723  0D35               	rlf	??___ftmul+1,w
  8229  0724  0D36               	rlf	??___ftmul+2,w
  8230  0725  00B7               	movwf	??___ftmul+3
  8231  0726  0837               	movf	??___ftmul+3,w
  8232  0727  00B8               	movwf	___ftmul@exp
  8233  0728  08B8               	movf	___ftmul@exp,f
  8234  0729  1D03               	skipz
  8235  072A  2F32               	goto	l8757
  8236  072B  3000               	movlw	0
  8237  072C  00AE               	movwf	?___ftmul
  8238  072D  3000               	movlw	0
  8239  072E  00AF               	movwf	?___ftmul+1
  8240  072F  3000               	movlw	0
  8241  0730  00B0               	movwf	?___ftmul+2
  8242  0731  0008               	return
  8243  0732                     l8757:	
  8244  0732  0831               	movf	___ftmul@f2,w
  8245  0733  00B4               	movwf	??___ftmul
  8246  0734  0832               	movf	___ftmul@f2+1,w
  8247  0735  00B5               	movwf	??___ftmul+1
  8248  0736  0833               	movf	___ftmul@f2+2,w
  8249  0737  00B6               	movwf	??___ftmul+2
  8250  0738  1003               	clrc
  8251  0739  0D35               	rlf	??___ftmul+1,w
  8252  073A  0D36               	rlf	??___ftmul+2,w
  8253  073B  00B7               	movwf	??___ftmul+3
  8254  073C  0837               	movf	??___ftmul+3,w
  8255  073D  00BD               	movwf	___ftmul@sign
  8256  073E  08BD               	movf	___ftmul@sign,f
  8257  073F  1D03               	skipz
  8258  0740  2F48               	goto	l8763
  8259  0741  3000               	movlw	0
  8260  0742  00AE               	movwf	?___ftmul
  8261  0743  3000               	movlw	0
  8262  0744  00AF               	movwf	?___ftmul+1
  8263  0745  3000               	movlw	0
  8264  0746  00B0               	movwf	?___ftmul+2
  8265  0747  0008               	return
  8266  0748                     l8763:	
  8267  0748  083D               	movf	___ftmul@sign,w
  8268  0749  3E7B               	addlw	123
  8269  074A  00B4               	movwf	??___ftmul
  8270  074B  0834               	movf	??___ftmul,w
  8271  074C  07B8               	addwf	___ftmul@exp,f
  8272  074D  082E               	movf	___ftmul@f1,w
  8273  074E  00B4               	movwf	??___ftmul
  8274  074F  082F               	movf	___ftmul@f1+1,w
  8275  0750  00B5               	movwf	??___ftmul+1
  8276  0751  0830               	movf	___ftmul@f1+2,w
  8277  0752  00B6               	movwf	??___ftmul+2
  8278  0753  3010               	movlw	16
  8279  0754                     u9385:	
  8280  0754  36B6               	lsrf	??___ftmul+2,f
  8281  0755  0CB5               	rrf	??___ftmul+1,f
  8282  0756  0CB4               	rrf	??___ftmul,f
  8283  0757  0B89               	decfsz	9,f
  8284  0758  2F54               	goto	u9385
  8285  0759  0834               	movf	??___ftmul,w
  8286  075A  00B7               	movwf	??___ftmul+3
  8287  075B  0837               	movf	??___ftmul+3,w
  8288  075C  00BD               	movwf	___ftmul@sign
  8289  075D  0831               	movf	___ftmul@f2,w
  8290  075E  00B4               	movwf	??___ftmul
  8291  075F  0832               	movf	___ftmul@f2+1,w
  8292  0760  00B5               	movwf	??___ftmul+1
  8293  0761  0833               	movf	___ftmul@f2+2,w
  8294  0762  00B6               	movwf	??___ftmul+2
  8295  0763  3010               	movlw	16
  8296  0764                     u9395:	
  8297  0764  36B6               	lsrf	??___ftmul+2,f
  8298  0765  0CB5               	rrf	??___ftmul+1,f
  8299  0766  0CB4               	rrf	??___ftmul,f
  8300  0767  0B89               	decfsz	9,f
  8301  0768  2F64               	goto	u9395
  8302  0769  0834               	movf	??___ftmul,w
  8303  076A  00B7               	movwf	??___ftmul+3
  8304  076B  0837               	movf	??___ftmul+3,w
  8305  076C  06BD               	xorwf	___ftmul@sign,f
  8306  076D  3080               	movlw	128
  8307  076E  00B4               	movwf	??___ftmul
  8308  076F  0834               	movf	??___ftmul,w
  8309  0770  05BD               	andwf	___ftmul@sign,f
  8310  0771  17AF               	bsf	___ftmul@f1+1,7
  8311  0772  17B2               	bsf	___ftmul@f2+1,7
  8312  0773  30FF               	movlw	255
  8313  0774  05B1               	andwf	___ftmul@f2,f
  8314  0775  30FF               	movlw	255
  8315  0776  05B2               	andwf	___ftmul@f2+1,f
  8316  0777  3000               	movlw	0
  8317  0778  05B3               	andwf	___ftmul@f2+2,f
  8318  0779  3000               	movlw	0
  8319  077A  00B9               	movwf	___ftmul@f3_as_product
  8320  077B  3000               	movlw	0
  8321  077C  00BA               	movwf	___ftmul@f3_as_product+1
  8322  077D  3000               	movlw	0
  8323  077E  00BB               	movwf	___ftmul@f3_as_product+2
  8324  077F  3007               	movlw	7
  8325  0780  00B4               	movwf	??___ftmul
  8326  0781  0834               	movf	??___ftmul,w
  8327  0782  00BC               	movwf	___ftmul@cntr
  8328  0783                     l8775:	
  8329  0783  1C2E               	btfss	___ftmul@f1,0
  8330  0784  2F8B               	goto	l8779
  8331  0785  0831               	movf	___ftmul@f2,w
  8332  0786  07B9               	addwf	___ftmul@f3_as_product,f
  8333  0787  0832               	movf	___ftmul@f2+1,w
  8334  0788  3DBA               	addwfc	___ftmul@f3_as_product+1,f
  8335  0789  0833               	movf	___ftmul@f2+2,w
  8336  078A  3DBB               	addwfc	___ftmul@f3_as_product+2,f
  8337  078B                     l8779:	
  8338  078B  3001               	movlw	1
  8339  078C                     u9415:	
  8340  078C  36B0               	lsrf	___ftmul@f1+2,f
  8341  078D  0CAF               	rrf	___ftmul@f1+1,f
  8342  078E  0CAE               	rrf	___ftmul@f1,f
  8343  078F  0B89               	decfsz	9,f
  8344  0790  2F8C               	goto	u9415
  8345  0791  3001               	movlw	1
  8346  0792                     u9425:	
  8347  0792  35B1               	lslf	___ftmul@f2,f
  8348  0793  0DB2               	rlf	___ftmul@f2+1,f
  8349  0794  0DB3               	rlf	___ftmul@f2+2,f
  8350  0795  0B89               	decfsz	9,f
  8351  0796  2F92               	goto	u9425
  8352  0797  3001               	movlw	1
  8353  0798  02BC               	subwf	___ftmul@cntr,f
  8354  0799  1D03               	btfss	3,2
  8355  079A  2F83               	goto	l8775
  8356  079B  3009               	movlw	9
  8357  079C  00B4               	movwf	??___ftmul
  8358  079D  0834               	movf	??___ftmul,w
  8359  079E  00BC               	movwf	___ftmul@cntr
  8360  079F                     l8787:	
  8361  079F  1C2E               	btfss	___ftmul@f1,0
  8362  07A0  2FA7               	goto	l8791
  8363  07A1  0831               	movf	___ftmul@f2,w
  8364  07A2  07B9               	addwf	___ftmul@f3_as_product,f
  8365  07A3  0832               	movf	___ftmul@f2+1,w
  8366  07A4  3DBA               	addwfc	___ftmul@f3_as_product+1,f
  8367  07A5  0833               	movf	___ftmul@f2+2,w
  8368  07A6  3DBB               	addwfc	___ftmul@f3_as_product+2,f
  8369  07A7                     l8791:	
  8370  07A7  3001               	movlw	1
  8371  07A8                     u9455:	
  8372  07A8  36B0               	lsrf	___ftmul@f1+2,f
  8373  07A9  0CAF               	rrf	___ftmul@f1+1,f
  8374  07AA  0CAE               	rrf	___ftmul@f1,f
  8375  07AB  0B89               	decfsz	9,f
  8376  07AC  2FA8               	goto	u9455
  8377  07AD  3001               	movlw	1
  8378  07AE                     u9465:	
  8379  07AE  36BB               	lsrf	___ftmul@f3_as_product+2,f
  8380  07AF  0CBA               	rrf	___ftmul@f3_as_product+1,f
  8381  07B0  0CB9               	rrf	___ftmul@f3_as_product,f
  8382  07B1  0B89               	decfsz	9,f
  8383  07B2  2FAE               	goto	u9465
  8384  07B3  3001               	movlw	1
  8385  07B4  02BC               	subwf	___ftmul@cntr,f
  8386  07B5  1D03               	btfss	3,2
  8387  07B6  2F9F               	goto	l8787
  8388  07B7  0839               	movf	___ftmul@f3_as_product,w
  8389  07B8  00A0               	movwf	___ftpack@arg
  8390  07B9  083A               	movf	___ftmul@f3_as_product+1,w
  8391  07BA  00A1               	movwf	___ftpack@arg+1
  8392  07BB  083B               	movf	___ftmul@f3_as_product+2,w
  8393  07BC  00A2               	movwf	___ftpack@arg+2
  8394  07BD  0838               	movf	___ftmul@exp,w
  8395  07BE  00B4               	movwf	??___ftmul
  8396  07BF  0834               	movf	??___ftmul,w
  8397  07C0  00A3               	movwf	___ftpack@exp
  8398  07C1  083D               	movf	___ftmul@sign,w
  8399  07C2  00B5               	movwf	??___ftmul+1
  8400  07C3  0835               	movf	??___ftmul+1,w
  8401  07C4  00A4               	movwf	___ftpack@sign
  8402  07C5  3189  2123         	fcall	___ftpack
  8403  07C7  0020               	movlb	0	; select bank0
  8404  07C8  0820               	movf	?___ftpack,w
  8405  07C9  00AE               	movwf	?___ftmul
  8406  07CA  0821               	movf	?___ftpack+1,w
  8407  07CB  00AF               	movwf	?___ftmul+1
  8408  07CC  0822               	movf	?___ftpack+2,w
  8409  07CD  00B0               	movwf	?___ftmul+2
  8410  07CE  0008               	return
  8411  07CF                     __end_of___ftmul:	
  8412                           
  8413                           	psect	text34
  8414  1CBF                     __ptext34:	
  8415 ;; *************** function _setMemory_Modify *****************
  8416 ;; Defined at:
  8417 ;;		line 1064 in file "../src/MCU_B1.c"
  8418 ;; Parameters:    Size  Location     Type
  8419 ;;  command         1    wreg     unsigned char 
  8420 ;; Auto vars:     Size  Location     Type
  8421 ;;  command         1    1[BANK0 ] unsigned char 
  8422 ;; Return value:  Size  Location     Type
  8423 ;;		None               void
  8424 ;; Registers used:
  8425 ;;		wreg, status,2, status,0
  8426 ;; Tracked objects:
  8427 ;;		On entry : 0/0
  8428 ;;		On exit  : 0/0
  8429 ;;		Unchanged: 0/0
  8430 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8431 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8432 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8433 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8434 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8435 ;;Total ram usage:        2 bytes
  8436 ;; Hardware stack levels used:    1
  8437 ;; Hardware stack levels required when called:    5
  8438 ;; This function calls:
  8439 ;;		Nothing
  8440 ;; This function is called by:
  8441 ;;		_setLog_Code
  8442 ;;		_setRFSW_AdjControl
  8443 ;; This function uses a non-reentrant model
  8444 ;;
  8445                           
  8446                           
  8447                           ;psect for function _setMemory_Modify
  8448  1CBF                     _setMemory_Modify:	
  8449                           
  8450                           ;incstack = 0
  8451                           ; Regs used in _setMemory_Modify: [wreg+status,2+status,0]
  8452                           ;setMemory_Modify@command stored from wreg
  8453  1CBF  0020               	movlb	0	; select bank0
  8454  1CC0  00A1               	movwf	setMemory_Modify@command
  8455                           
  8456                           ;MCU_B1.c: 1065: Memory.Modify = command == 1 ? 1 : 0;
  8457  1CC1  0821               	movf	setMemory_Modify@command,w
  8458  1CC2  3A01               	xorlw	1
  8459  1CC3  3000               	movlw	0
  8460  1CC4  1903               	skipnz
  8461  1CC5  3001               	movlw	1
  8462  1CC6  00A0               	movwf	??_setMemory_Modify
  8463  1CC7  0024               	movlb	4	; select bank4
  8464  1CC8  0844               	movf	(_Memory^(0+512)+36),w
  8465  1CC9  0020               	movlb	0	; select bank0
  8466  1CCA  0620               	xorwf	??_setMemory_Modify,w
  8467  1CCB  39FE               	andlw	-2
  8468  1CCC  0620               	xorwf	??_setMemory_Modify,w
  8469  1CCD  0024               	movlb	4	; select bank4
  8470  1CCE  00C4               	movwf	(_Memory^(0+512)+36)
  8471                           
  8472                           ;MCU_B1.c: 1066: Memory.Time = 0;
  8473  1CCF  01C2               	clrf	(_Memory^(0+512)+34)
  8474  1CD0  01C3               	clrf	((_Memory+1)^(0+512)+34)
  8475  1CD1  0008               	return
  8476  1CD2                     __end_of_setMemory_Modify:	
  8477                           
  8478                           	psect	text35
  8479  1C1B                     __ptext35:	
  8480 ;; *************** function _getRF_KeyStatus *****************
  8481 ;; Defined at:
  8482 ;;		line 150 in file "../src/RF_Control_B1.c"
  8483 ;; Parameters:    Size  Location     Type
  8484 ;;		None
  8485 ;; Auto vars:     Size  Location     Type
  8486 ;;  key             1    1[BANK0 ] unsigned char 
  8487 ;; Return value:  Size  Location     Type
  8488 ;;                  1    wreg      unsigned char 
  8489 ;; Registers used:
  8490 ;;		wreg, status,2
  8491 ;; Tracked objects:
  8492 ;;		On entry : 0/0
  8493 ;;		On exit  : 0/0
  8494 ;;		Unchanged: 0/0
  8495 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8496 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8497 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8498 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8499 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8500 ;;Total ram usage:        3 bytes
  8501 ;; Hardware stack levels used:    1
  8502 ;; Hardware stack levels required when called:    5
  8503 ;; This function calls:
  8504 ;;		Nothing
  8505 ;; This function is called by:
  8506 ;;		_setRF_Main
  8507 ;; This function uses a non-reentrant model
  8508 ;;
  8509                           
  8510                           
  8511                           ;psect for function _getRF_KeyStatus
  8512  1C1B                     _getRF_KeyStatus:	
  8513                           
  8514                           ;RF_Control_B1.c: 151: char key = 0;
  8515                           
  8516                           ;incstack = 0
  8517                           ; Regs used in _getRF_KeyStatus: [wreg+status,2]
  8518  1C1B  0020               	movlb	0	; select bank0
  8519  1C1C  01A1               	clrf	getRF_KeyStatus@key
  8520                           
  8521                           ;RF_Control_B1.c: 157: key = (RA6 == 1 || RA4 == 1 || RA0 == 1 || RB1 == 1) ? 1 : 0;
  8522  1C1D  01A2               	clrf	_getRF_KeyStatus$5261
  8523  1C1E  0AA2               	incf	_getRF_KeyStatus$5261,f
  8524  1C1F  1F0C               	btfss	12,6	;volatile
  8525  1C20  1A0C               	btfsc	12,4	;volatile
  8526  1C21  2C26               	goto	l9761
  8527  1C22  1C0C               	btfss	12,0	;volatile
  8528  1C23  188D               	btfsc	13,1	;volatile
  8529  1C24  2C26               	goto	l9761
  8530  1C25  01A2               	clrf	_getRF_KeyStatus$5261
  8531  1C26                     l9761:	
  8532  1C26  0822               	movf	_getRF_KeyStatus$5261,w
  8533  1C27  00A0               	movwf	??_getRF_KeyStatus
  8534  1C28  0820               	movf	??_getRF_KeyStatus,w
  8535  1C29  00A1               	movwf	getRF_KeyStatus@key
  8536                           
  8537                           ;RF_Control_B1.c: 163: return key;
  8538  1C2A  0821               	movf	getRF_KeyStatus@key,w
  8539  1C2B  0008               	return
  8540  1C2C                     __end_of_getRF_KeyStatus:	
  8541                           
  8542                           	psect	text36
  8543  1C0A                     __ptext36:	
  8544 ;; *************** function _getBuz_GO *****************
  8545 ;; Defined at:
  8546 ;;		line 82 in file "../src/Buzzer_B1.c"
  8547 ;; Parameters:    Size  Location     Type
  8548 ;;		None
  8549 ;; Auto vars:     Size  Location     Type
  8550 ;;  i               2    4[BANK0 ] int 
  8551 ;; Return value:  Size  Location     Type
  8552 ;;                  2    0[BANK0 ] int 
  8553 ;; Registers used:
  8554 ;;		wreg, status,2, status,0
  8555 ;; Tracked objects:
  8556 ;;		On entry : 0/0
  8557 ;;		On exit  : 0/0
  8558 ;;		Unchanged: 0/0
  8559 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8560 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8561 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8562 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8563 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8564 ;;Total ram usage:        6 bytes
  8565 ;; Hardware stack levels used:    1
  8566 ;; Hardware stack levels required when called:    5
  8567 ;; This function calls:
  8568 ;;		Nothing
  8569 ;; This function is called by:
  8570 ;;		_setRF_Main
  8571 ;; This function uses a non-reentrant model
  8572 ;;
  8573                           
  8574                           
  8575                           ;psect for function _getBuz_GO
  8576  1C0A                     _getBuz_GO:	
  8577                           
  8578                           ;Buzzer_B1.c: 83: int i = Buz1.GO;
  8579                           
  8580                           ;incstack = 0
  8581                           ; Regs used in _getBuz_GO: [wreg+status,2+status,0]
  8582  1C0A  0021               	movlb	1	; select bank1
  8583  1C0B  0C2E               	rrf	_Buz1^(0+128),w
  8584  1C0C  3901               	andlw	1
  8585  1C0D  0020               	movlb	0	; select bank0
  8586  1C0E  00A2               	movwf	??_getBuz_GO
  8587  1C0F  01A3               	clrf	??_getBuz_GO+1
  8588  1C10  0822               	movf	??_getBuz_GO,w
  8589  1C11  00A4               	movwf	getBuz_GO@i
  8590  1C12  0823               	movf	??_getBuz_GO+1,w
  8591  1C13  00A5               	movwf	getBuz_GO@i+1
  8592                           
  8593                           ;Buzzer_B1.c: 84: return i;
  8594  1C14  0825               	movf	getBuz_GO@i+1,w
  8595  1C15  01A1               	clrf	?_getBuz_GO+1
  8596  1C16  07A1               	addwf	?_getBuz_GO+1,f
  8597  1C17  0824               	movf	getBuz_GO@i,w
  8598  1C18  01A0               	clrf	?_getBuz_GO
  8599  1C19  07A0               	addwf	?_getBuz_GO,f
  8600  1C1A  0008               	return
  8601  1C1B                     __end_of_getBuz_GO:	
  8602                           
  8603                           	psect	text37
  8604  1CAC                     __ptext37:	
  8605 ;; *************** function _RF_RxDisable *****************
  8606 ;; Defined at:
  8607 ;;		line 225 in file "../src/RF_Control_B1.c"
  8608 ;; Parameters:    Size  Location     Type
  8609 ;;		None
  8610 ;; Auto vars:     Size  Location     Type
  8611 ;;		None
  8612 ;; Return value:  Size  Location     Type
  8613 ;;		None               void
  8614 ;; Registers used:
  8615 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8616 ;; Tracked objects:
  8617 ;;		On entry : 0/0
  8618 ;;		On exit  : 0/0
  8619 ;;		Unchanged: 0/0
  8620 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8621 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8622 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8623 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8624 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8625 ;;Total ram usage:        0 bytes
  8626 ;; Hardware stack levels used:    1
  8627 ;; Hardware stack levels required when called:    7
  8628 ;; This function calls:
  8629 ;;		_CC2500_WriteCommand
  8630 ;; This function is called by:
  8631 ;;		_setRF_Main
  8632 ;; This function uses a non-reentrant model
  8633 ;;
  8634                           
  8635                           
  8636                           ;psect for function _RF_RxDisable
  8637  1CAC                     _RF_RxDisable:	
  8638                           
  8639                           ;RF_Control_B1.c: 226: if (RF1.ReceiveGO == 1 || RF1.RxStatus == 1) {
  8640                           
  8641                           ;incstack = 0
  8642                           ; Regs used in _RF_RxDisable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8643  1CAC  0021               	movlb	1	; select bank1
  8644  1CAD  18BA               	btfsc	_RF1^(0+128),1
  8645  1CAE  2CB1               	goto	l2293
  8646  1CAF  1DBA               	btfss	_RF1^(0+128),3
  8647  1CB0  0008               	return
  8648  1CB1                     l2293:	
  8649                           
  8650                           ;RF_Control_B1.c: 227: RF1.RxStatus = 0;
  8651  1CB1  11BA               	bcf	_RF1^(0+128),3
  8652                           
  8653                           ;RF_Control_B1.c: 228: RF1.ReceiveGO = 0;
  8654  1CB2  10BA               	bcf	_RF1^(0+128),1
  8655                           
  8656                           ;RF_Control_B1.c: 229: CC2500_WriteCommand(0x36);
  8657  1CB3  3036               	movlw	54
  8658  1CB4  319D  25FA  319C   	fcall	_CC2500_WriteCommand
  8659                           
  8660                           ;RF_Control_B1.c: 231: CC2500_WriteCommand(0x3A);
  8661  1CB7  303A               	movlw	58
  8662  1CB8  319D  25FA  319C   	fcall	_CC2500_WriteCommand
  8663                           
  8664                           ;RF_Control_B1.c: 232: CC2500_WriteCommand(0x3B);
  8665  1CBB  303B               	movlw	59
  8666  1CBC  319D  25FA         	fcall	_CC2500_WriteCommand
  8667  1CBE  0008               	return
  8668  1CBF                     __end_of_RF_RxDisable:	
  8669                           
  8670                           	psect	text38
  8671  09E6                     __ptext38:	
  8672 ;; *************** function _CC2500_TxData *****************
  8673 ;; Defined at:
  8674 ;;		line 32 in file "../src/CC2500_B1.c"
  8675 ;; Parameters:    Size  Location     Type
  8676 ;;		None
  8677 ;; Auto vars:     Size  Location     Type
  8678 ;;  loop_e          1    5[BANK0 ] unsigned char 
  8679 ;; Return value:  Size  Location     Type
  8680 ;;		None               void
  8681 ;; Registers used:
  8682 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8683 ;; Tracked objects:
  8684 ;;		On entry : 0/0
  8685 ;;		On exit  : 0/0
  8686 ;;		Unchanged: 0/0
  8687 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8688 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8689 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8690 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8691 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8692 ;;Total ram usage:        2 bytes
  8693 ;; Hardware stack levels used:    1
  8694 ;; Hardware stack levels required when called:    7
  8695 ;; This function calls:
  8696 ;;		_CC2500_WriteByte
  8697 ;;		_CC2500_WriteCommand
  8698 ;;		_Timeout_Counter
  8699 ;;		_set_TimeoutCleared
  8700 ;; This function is called by:
  8701 ;;		_setRF_Main
  8702 ;; This function uses a non-reentrant model
  8703 ;;
  8704                           
  8705                           
  8706                           ;psect for function _CC2500_TxData
  8707  09E6                     _CC2500_TxData:	
  8708                           
  8709                           ;CC2500_B1.c: 33: unsigned char loop_e;
  8710                           ;CC2500_B1.c: 35: RC4 = 0;
  8711                           
  8712                           ;incstack = 0
  8713                           ; Regs used in _CC2500_TxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8714  09E6  0020               	movlb	0	; select bank0
  8715  09E7  120E               	bcf	14,4	;volatile
  8716                           
  8717                           ;CC2500_B1.c: 36: SPI0Buffer = 0x3F + 0x40;
  8718  09E8  307F               	movlw	127
  8719  09E9  00A4               	movwf	??_CC2500_TxData
  8720  09EA  0824               	movf	??_CC2500_TxData,w
  8721  09EB  0021               	movlb	1	; select bank1
  8722  09EC  00D0               	movwf	_SPI0Buffer^(0+128)
  8723                           
  8724                           ;CC2500_B1.c: 37: while (RC2 == 1 && myMain.Timeout == 0) {
  8725  09ED  29F1               	goto	l9477
  8726  09EE                     l9475:	
  8727                           
  8728                           ;CC2500_B1.c: 38: Timeout_Counter();
  8729  09EE  319D  2571  3189   	fcall	_Timeout_Counter
  8730  09F1                     l9477:	
  8731  09F1  0020               	movlb	0	; select bank0
  8732  09F2  1D0E               	btfss	14,2	;volatile
  8733  09F3  29F7               	goto	l9481
  8734  09F4  0021               	movlb	1	; select bank1
  8735  09F5  1D2B               	btfss	(_myMain^(0+128)+11),2
  8736  09F6  29EE               	goto	l9475
  8737  09F7                     l9481:	
  8738                           
  8739                           ;CC2500_B1.c: 39: };
  8740                           ;CC2500_B1.c: 40: set_TimeoutCleared();
  8741  09F7  319A  22E1  3189   	fcall	_set_TimeoutCleared
  8742                           
  8743                           ;CC2500_B1.c: 42: CC2500_WriteByte();
  8744  09FA  319D  25C8  3189   	fcall	_CC2500_WriteByte
  8745                           
  8746                           ;CC2500_B1.c: 43: SPI0Buffer = Tx_Length;
  8747  09FD  0021               	movlb	1	; select bank1
  8748  09FE  0852               	movf	_Tx_Length^(0+128),w
  8749  09FF  0020               	movlb	0	; select bank0
  8750  0A00  00A4               	movwf	??_CC2500_TxData
  8751  0A01  0824               	movf	??_CC2500_TxData,w
  8752  0A02  0021               	movlb	1	; select bank1
  8753  0A03  00D0               	movwf	_SPI0Buffer^(0+128)
  8754                           
  8755                           ;CC2500_B1.c: 44: CC2500_WriteByte();
  8756  0A04  319D  25C8  3189   	fcall	_CC2500_WriteByte
  8757                           
  8758                           ;CC2500_B1.c: 45: for (loop_e = 0; loop_e < Tx_Length; loop_e++) {
  8759  0A07  0020               	movlb	0	; select bank0
  8760  0A08  01A5               	clrf	CC2500_TxData@loop_e
  8761  0A09                     l9495:	
  8762  0A09  0021               	movlb	1	; select bank1
  8763  0A0A  0852               	movf	_Tx_Length^(0+128),w
  8764  0A0B  0020               	movlb	0	; select bank0
  8765  0A0C  0225               	subwf	CC2500_TxData@loop_e,w
  8766  0A0D  1803               	btfsc	3,0
  8767  0A0E  2A22               	goto	l255
  8768                           
  8769                           ;CC2500_B1.c: 46: SPI0Buffer = RF_Data[loop_e];
  8770  0A0F  0825               	movf	CC2500_TxData@loop_e,w
  8771  0A10  3EA0               	addlw	_RF_Data& (0+255)
  8772  0A11  0086               	movwf	6
  8773  0A12  3001               	movlw	1	; select bank3/4
  8774  0A13  0087               	movwf	7
  8775  0A14  0801               	movf	1,w
  8776  0A15  00A4               	movwf	??_CC2500_TxData
  8777  0A16  0824               	movf	??_CC2500_TxData,w
  8778  0A17  0021               	movlb	1	; select bank1
  8779  0A18  00D0               	movwf	_SPI0Buffer^(0+128)
  8780                           
  8781                           ;CC2500_B1.c: 47: CC2500_WriteByte();
  8782  0A19  319D  25C8  3189   	fcall	_CC2500_WriteByte
  8783  0A1C  3001               	movlw	1
  8784  0A1D  0020               	movlb	0	; select bank0
  8785  0A1E  00A4               	movwf	??_CC2500_TxData
  8786  0A1F  0824               	movf	??_CC2500_TxData,w
  8787  0A20  07A5               	addwf	CC2500_TxData@loop_e,f
  8788  0A21  2A09               	goto	l9495
  8789  0A22                     l255:	
  8790                           
  8791                           ;CC2500_B1.c: 48: }
  8792                           ;CC2500_B1.c: 49: RC4 = 1;
  8793  0A22  160E               	bsf	14,4	;volatile
  8794                           
  8795                           ;CC2500_B1.c: 50: CC2500_WriteCommand(0x35);
  8796  0A23  3035               	movlw	53
  8797  0A24  319D  25FA  3189   	fcall	_CC2500_WriteCommand
  8798                           
  8799                           ;CC2500_B1.c: 51: while (RB0 == 0 && myMain.Timeout == 0) {
  8800  0A27  2A2B               	goto	l9501
  8801  0A28                     l9499:	
  8802                           
  8803                           ;CC2500_B1.c: 52: Timeout_Counter();
  8804  0A28  319D  2571  3189   	fcall	_Timeout_Counter
  8805  0A2B                     l9501:	
  8806  0A2B  0020               	movlb	0	; select bank0
  8807  0A2C  180D               	btfsc	13,0	;volatile
  8808  0A2D  2A31               	goto	l9505
  8809  0A2E  0021               	movlb	1	; select bank1
  8810  0A2F  1D2B               	btfss	(_myMain^(0+128)+11),2
  8811  0A30  2A28               	goto	l9499
  8812  0A31                     l9505:	
  8813                           
  8814                           ;CC2500_B1.c: 53: };
  8815                           ;CC2500_B1.c: 54: set_TimeoutCleared();
  8816  0A31  319A  22E1  3189   	fcall	_set_TimeoutCleared
  8817                           
  8818                           ;CC2500_B1.c: 56: while (RB0 == 1 && myMain.Timeout == 0) {
  8819  0A34  2A38               	goto	l9509
  8820  0A35                     l9507:	
  8821                           
  8822                           ;CC2500_B1.c: 57: Timeout_Counter();
  8823  0A35  319D  2571  3189   	fcall	_Timeout_Counter
  8824  0A38                     l9509:	
  8825  0A38  0020               	movlb	0	; select bank0
  8826  0A39  1C0D               	btfss	13,0	;volatile
  8827  0A3A  2A3E               	goto	l9513
  8828  0A3B  0021               	movlb	1	; select bank1
  8829  0A3C  1D2B               	btfss	(_myMain^(0+128)+11),2
  8830  0A3D  2A35               	goto	l9507
  8831  0A3E                     l9513:	
  8832                           
  8833                           ;CC2500_B1.c: 58: };
  8834                           ;CC2500_B1.c: 59: set_TimeoutCleared();
  8835  0A3E  319A  22E1  3189   	fcall	_set_TimeoutCleared
  8836                           
  8837                           ;CC2500_B1.c: 61: CC2500_WriteCommand(0x36);
  8838  0A41  3036               	movlw	54
  8839  0A42  319D  25FA  3189   	fcall	_CC2500_WriteCommand
  8840                           
  8841                           ;CC2500_B1.c: 62: CC2500_WriteCommand(0x3B);
  8842  0A45  303B               	movlw	59
  8843  0A46  319D  25FA         	fcall	_CC2500_WriteCommand
  8844                           
  8845                           ;CC2500_B1.c: 64: Transceive_OK = 1;
  8846  0A48  14F8               	bsf	_Transceive_OK/(0+8),_Transceive_OK& (0+7)
  8847  0A49  0008               	return
  8848  0A4A                     __end_of_CC2500_TxData:	
  8849                           
  8850                           	psect	text39
  8851  0B7B                     __ptext39:	
  8852 ;; *************** function _CC2500_RxData *****************
  8853 ;; Defined at:
  8854 ;;		line 70 in file "../src/CC2500_B1.c"
  8855 ;; Parameters:    Size  Location     Type
  8856 ;;		None
  8857 ;; Auto vars:     Size  Location     Type
  8858 ;;  loop_f          1    5[BANK0 ] unsigned char 
  8859 ;; Return value:  Size  Location     Type
  8860 ;;		None               void
  8861 ;; Registers used:
  8862 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8863 ;; Tracked objects:
  8864 ;;		On entry : 0/0
  8865 ;;		On exit  : 0/0
  8866 ;;		Unchanged: 0/0
  8867 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8868 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8869 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8870 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8871 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8872 ;;Total ram usage:        2 bytes
  8873 ;; Hardware stack levels used:    1
  8874 ;; Hardware stack levels required when called:    7
  8875 ;; This function calls:
  8876 ;;		_CC2500_ReadByte
  8877 ;;		_CC2500_ReadStatus
  8878 ;;		_CC2500_WriteByte
  8879 ;;		_Timeout_Counter
  8880 ;;		_set_TimeoutCleared
  8881 ;; This function is called by:
  8882 ;;		_setRF_Main
  8883 ;; This function uses a non-reentrant model
  8884 ;;
  8885                           
  8886                           
  8887                           ;psect for function _CC2500_RxData
  8888  0B7B                     _CC2500_RxData:	
  8889                           
  8890                           ;CC2500_B1.c: 71: unsigned char loop_f;
  8891                           ;CC2500_B1.c: 75: if (RB0 == 1)
  8892                           
  8893                           ;incstack = 0
  8894                           ; Regs used in _CC2500_RxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8895  0B7B  0020               	movlb	0	; select bank0
  8896  0B7C  180D               	btfsc	13,0	;volatile
  8897  0B7D  2B82               	goto	l9527
  8898  0B7E  2B8B               	goto	l9533
  8899  0B7F                     l9525:	
  8900                           ;CC2500_B1.c: 76: {
  8901                           ;CC2500_B1.c: 77: while (RB0 == 1 && myMain.Timeout == 0) {
  8902                           
  8903                           
  8904                           ;CC2500_B1.c: 78: Timeout_Counter();
  8905  0B7F  319D  2571  318B   	fcall	_Timeout_Counter
  8906  0B82                     l9527:	
  8907  0B82  0020               	movlb	0	; select bank0
  8908  0B83  1C0D               	btfss	13,0	;volatile
  8909  0B84  2B88               	goto	l9531
  8910  0B85  0021               	movlb	1	; select bank1
  8911  0B86  1D2B               	btfss	(_myMain^(0+128)+11),2
  8912  0B87  2B7F               	goto	l9525
  8913  0B88                     l9531:	
  8914                           
  8915                           ;CC2500_B1.c: 79: };
  8916                           ;CC2500_B1.c: 80: set_TimeoutCleared();
  8917  0B88  319A  22E1  318B   	fcall	_set_TimeoutCleared
  8918  0B8B                     l9533:	
  8919                           
  8920                           ;CC2500_B1.c: 81: }
  8921                           ;CC2500_B1.c: 83: CC2500_ReadStatus(0x3B);
  8922  0B8B  303B               	movlw	59
  8923  0B8C  319F  278C  318B   	fcall	_CC2500_ReadStatus
  8924                           
  8925                           ;CC2500_B1.c: 85: if (s_data != 0) {
  8926  0B8F  0021               	movlb	1	; select bank1
  8927  0B90  0855               	movf	_s_data^(0+128),w
  8928  0B91  1903               	btfsc	3,2
  8929  0B92  0008               	return
  8930                           
  8931                           ;CC2500_B1.c: 86: RC4 = 0;
  8932  0B93  0020               	movlb	0	; select bank0
  8933  0B94  120E               	bcf	14,4	;volatile
  8934                           
  8935                           ;CC2500_B1.c: 87: SPI0Buffer = 0x3F + 0xC0;
  8936  0B95  30FF               	movlw	255
  8937  0B96  00A4               	movwf	??_CC2500_RxData
  8938  0B97  0824               	movf	??_CC2500_RxData,w
  8939  0B98  0021               	movlb	1	; select bank1
  8940  0B99  00D0               	movwf	_SPI0Buffer^(0+128)
  8941                           
  8942                           ;CC2500_B1.c: 88: while (RC2 == 1 && myMain.Timeout == 0) {
  8943  0B9A  2B9E               	goto	l9543
  8944  0B9B                     l9541:	
  8945                           
  8946                           ;CC2500_B1.c: 89: Timeout_Counter();
  8947  0B9B  319D  2571  318B   	fcall	_Timeout_Counter
  8948  0B9E                     l9543:	
  8949  0B9E  0020               	movlb	0	; select bank0
  8950  0B9F  1D0E               	btfss	14,2	;volatile
  8951  0BA0  2BA4               	goto	l9547
  8952  0BA1  0021               	movlb	1	; select bank1
  8953  0BA2  1D2B               	btfss	(_myMain^(0+128)+11),2
  8954  0BA3  2B9B               	goto	l9541
  8955  0BA4                     l9547:	
  8956                           
  8957                           ;CC2500_B1.c: 90: };
  8958                           ;CC2500_B1.c: 91: set_TimeoutCleared();
  8959  0BA4  319A  22E1  318B   	fcall	_set_TimeoutCleared
  8960                           
  8961                           ;CC2500_B1.c: 92: CC2500_WriteByte();
  8962  0BA7  319D  25C8  318B   	fcall	_CC2500_WriteByte
  8963                           
  8964                           ;CC2500_B1.c: 94: CC2500_ReadByte();
  8965  0BAA  319E  264A  318B   	fcall	_CC2500_ReadByte
  8966                           
  8967                           ;CC2500_B1.c: 95: Rx_Length = SPI0Buffer;
  8968  0BAD  0021               	movlb	1	; select bank1
  8969  0BAE  0850               	movf	_SPI0Buffer^(0+128),w
  8970  0BAF  0020               	movlb	0	; select bank0
  8971  0BB0  00A4               	movwf	??_CC2500_RxData
  8972  0BB1  0824               	movf	??_CC2500_RxData,w
  8973  0BB2  0021               	movlb	1	; select bank1
  8974  0BB3  00CF               	movwf	_Rx_Length^(0+128)
  8975                           
  8976                           ;CC2500_B1.c: 96: for (loop_f = 0; loop_f < Rx_Length; loop_f++) {
  8977  0BB4  0020               	movlb	0	; select bank0
  8978  0BB5  01A5               	clrf	CC2500_RxData@loop_f
  8979  0BB6                     l9563:	
  8980  0BB6  0021               	movlb	1	; select bank1
  8981  0BB7  084F               	movf	_Rx_Length^(0+128),w
  8982  0BB8  0020               	movlb	0	; select bank0
  8983  0BB9  0225               	subwf	CC2500_RxData@loop_f,w
  8984  0BBA  1803               	btfsc	3,0
  8985  0BBB  2BCF               	goto	l9565
  8986                           
  8987                           ;CC2500_B1.c: 97: CC2500_ReadByte();
  8988  0BBC  319E  264A  318B   	fcall	_CC2500_ReadByte
  8989                           
  8990                           ;CC2500_B1.c: 98: RF_Data[loop_f] = SPI0Buffer;
  8991  0BBF  0021               	movlb	1	; select bank1
  8992  0BC0  0850               	movf	_SPI0Buffer^(0+128),w
  8993  0BC1  0020               	movlb	0	; select bank0
  8994  0BC2  00A4               	movwf	??_CC2500_RxData
  8995  0BC3  0825               	movf	CC2500_RxData@loop_f,w
  8996  0BC4  3EA0               	addlw	_RF_Data& (0+255)
  8997  0BC5  0086               	movwf	6
  8998  0BC6  3001               	movlw	1	; select bank3/4
  8999  0BC7  0087               	movwf	7
  9000  0BC8  0824               	movf	??_CC2500_RxData,w
  9001  0BC9  0081               	movwf	1
  9002  0BCA  3001               	movlw	1
  9003  0BCB  00A4               	movwf	??_CC2500_RxData
  9004  0BCC  0824               	movf	??_CC2500_RxData,w
  9005  0BCD  07A5               	addwf	CC2500_RxData@loop_f,f
  9006  0BCE  2BB6               	goto	l9563
  9007  0BCF                     l9565:	
  9008                           
  9009                           ;CC2500_B1.c: 99: }
  9010                           ;CC2500_B1.c: 100: CC2500_ReadByte();
  9011  0BCF  319E  264A  318B   	fcall	_CC2500_ReadByte
  9012                           
  9013                           ;CC2500_B1.c: 101: RSSI = SPI0Buffer;
  9014  0BD2  0021               	movlb	1	; select bank1
  9015  0BD3  0850               	movf	_SPI0Buffer^(0+128),w
  9016  0BD4  0020               	movlb	0	; select bank0
  9017  0BD5  00A4               	movwf	??_CC2500_RxData
  9018  0BD6  0824               	movf	??_CC2500_RxData,w
  9019  0BD7  0021               	movlb	1	; select bank1
  9020  0BD8  00CE               	movwf	_RSSI^(0+128)
  9021                           
  9022                           ;CC2500_B1.c: 102: CC2500_ReadByte();
  9023  0BD9  319E  264A         	fcall	_CC2500_ReadByte
  9024                           
  9025                           ;CC2500_B1.c: 103: CRC = SPI0Buffer;
  9026  0BDB  0021               	movlb	1	; select bank1
  9027  0BDC  0850               	movf	_SPI0Buffer^(0+128),w
  9028  0BDD  0020               	movlb	0	; select bank0
  9029  0BDE  00A4               	movwf	??_CC2500_RxData
  9030  0BDF  0824               	movf	??_CC2500_RxData,w
  9031  0BE0  0021               	movlb	1	; select bank1
  9032  0BE1  00C9               	movwf	_CRC^(0+128)
  9033                           
  9034                           ;CC2500_B1.c: 104: RC4 = 1;
  9035  0BE2  0020               	movlb	0	; select bank0
  9036  0BE3  160E               	bsf	14,4	;volatile
  9037                           
  9038                           ;CC2500_B1.c: 105: if (CRC & 0x80)
  9039  0BE4  0021               	movlb	1	; select bank1
  9040  0BE5  1BC9               	btfsc	_CRC^(0+128),7
  9041                           
  9042                           ;CC2500_B1.c: 106: Receive_OK = 1;
  9043  0BE6  1478               	bsf	_Receive_OK/(0+8),_Receive_OK& (0+7)
  9044                           
  9045                           ;CC2500_B1.c: 108: RF1.RxStatus = 0;
  9046  0BE7  11BA               	bcf	_RF1^(0+128),3
  9047                           
  9048                           ;CC2500_B1.c: 109: RF1.ReceiveGO = 1;
  9049  0BE8  14BA               	bsf	_RF1^(0+128),1
  9050  0BE9  0008               	return
  9051  0BEA                     __end_of_CC2500_RxData:	
  9052                           
  9053                           	psect	text40
  9054  1F8C                     __ptext40:	
  9055 ;; *************** function _CC2500_ReadStatus *****************
  9056 ;; Defined at:
  9057 ;;		line 301 in file "../src/CC2500_B1.c"
  9058 ;; Parameters:    Size  Location     Type
  9059 ;;  status_addr     1    wreg     unsigned char 
  9060 ;; Auto vars:     Size  Location     Type
  9061 ;;  status_addr     1    3[BANK0 ] unsigned char 
  9062 ;; Return value:  Size  Location     Type
  9063 ;;		None               void
  9064 ;; Registers used:
  9065 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9066 ;; Tracked objects:
  9067 ;;		On entry : 0/0
  9068 ;;		On exit  : 0/0
  9069 ;;		Unchanged: 0/0
  9070 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9071 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9072 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9073 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9074 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9075 ;;Total ram usage:        2 bytes
  9076 ;; Hardware stack levels used:    1
  9077 ;; Hardware stack levels required when called:    6
  9078 ;; This function calls:
  9079 ;;		_CC2500_ReadByte
  9080 ;;		_CC2500_WriteByte
  9081 ;;		_Timeout_Counter
  9082 ;;		_set_TimeoutCleared
  9083 ;; This function is called by:
  9084 ;;		_CC2500_RxData
  9085 ;; This function uses a non-reentrant model
  9086 ;;
  9087                           
  9088                           
  9089                           ;psect for function _CC2500_ReadStatus
  9090  1F8C                     _CC2500_ReadStatus:	
  9091                           
  9092                           ;incstack = 0
  9093                           ; Regs used in _CC2500_ReadStatus: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9094                           ;CC2500_ReadStatus@status_addr stored from wreg
  9095  1F8C  0020               	movlb	0	; select bank0
  9096  1F8D  00A3               	movwf	CC2500_ReadStatus@status_addr
  9097                           
  9098                           ;CC2500_B1.c: 302: RC4 = 0;
  9099  1F8E  120E               	bcf	14,4	;volatile
  9100                           
  9101                           ;CC2500_B1.c: 303: SPI0Buffer = status_addr + 0xC0;
  9102  1F8F  0823               	movf	CC2500_ReadStatus@status_addr,w
  9103  1F90  3EC0               	addlw	192
  9104  1F91  00A2               	movwf	??_CC2500_ReadStatus
  9105  1F92  0822               	movf	??_CC2500_ReadStatus,w
  9106  1F93  0021               	movlb	1	; select bank1
  9107  1F94  00D0               	movwf	_SPI0Buffer^(0+128)
  9108                           
  9109                           ;CC2500_B1.c: 305: while (RC2 == 1 && myMain.Timeout == 0) {
  9110  1F95  2F99               	goto	l9285
  9111  1F96                     l9283:	
  9112                           
  9113                           ;CC2500_B1.c: 306: Timeout_Counter();
  9114  1F96  319D  2571  319F   	fcall	_Timeout_Counter
  9115  1F99                     l9285:	
  9116  1F99  0020               	movlb	0	; select bank0
  9117  1F9A  1D0E               	btfss	14,2	;volatile
  9118  1F9B  2F9F               	goto	l9289
  9119  1F9C  0021               	movlb	1	; select bank1
  9120  1F9D  1D2B               	btfss	(_myMain^(0+128)+11),2
  9121  1F9E  2F96               	goto	l9283
  9122  1F9F                     l9289:	
  9123                           
  9124                           ;CC2500_B1.c: 307: };
  9125                           ;CC2500_B1.c: 308: set_TimeoutCleared();
  9126  1F9F  319A  22E1  319F   	fcall	_set_TimeoutCleared
  9127                           
  9128                           ;CC2500_B1.c: 310: CC2500_WriteByte();
  9129  1FA2  319D  25C8  319F   	fcall	_CC2500_WriteByte
  9130                           
  9131                           ;CC2500_B1.c: 311: CC2500_ReadByte();
  9132  1FA5  319E  264A         	fcall	_CC2500_ReadByte
  9133                           
  9134                           ;CC2500_B1.c: 312: RC4 = 1;
  9135  1FA7  0020               	movlb	0	; select bank0
  9136  1FA8  160E               	bsf	14,4	;volatile
  9137                           
  9138                           ;CC2500_B1.c: 314: s_data = SPI0Buffer;
  9139  1FA9  0021               	movlb	1	; select bank1
  9140  1FAA  0850               	movf	_SPI0Buffer^(0+128),w
  9141  1FAB  0020               	movlb	0	; select bank0
  9142  1FAC  00A2               	movwf	??_CC2500_ReadStatus
  9143  1FAD  0822               	movf	??_CC2500_ReadStatus,w
  9144  1FAE  0021               	movlb	1	; select bank1
  9145  1FAF  00D5               	movwf	_s_data^(0+128)
  9146  1FB0  0008               	return
  9147  1FB1                     __end_of_CC2500_ReadStatus:	
  9148                           
  9149                           	psect	text41
  9150  1E4A                     __ptext41:	
  9151 ;; *************** function _CC2500_ReadByte *****************
  9152 ;; Defined at:
  9153 ;;		line 235 in file "../src/CC2500_B1.c"
  9154 ;; Parameters:    Size  Location     Type
  9155 ;;		None
  9156 ;; Auto vars:     Size  Location     Type
  9157 ;;  loop_b          1    1[BANK0 ] unsigned char 
  9158 ;; Return value:  Size  Location     Type
  9159 ;;		None               void
  9160 ;; Registers used:
  9161 ;;		wreg, status,2, status,0
  9162 ;; Tracked objects:
  9163 ;;		On entry : 0/0
  9164 ;;		On exit  : 0/0
  9165 ;;		Unchanged: 0/0
  9166 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9167 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9168 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9169 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9170 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9171 ;;Total ram usage:        2 bytes
  9172 ;; Hardware stack levels used:    1
  9173 ;; Hardware stack levels required when called:    5
  9174 ;; This function calls:
  9175 ;;		Nothing
  9176 ;; This function is called by:
  9177 ;;		_CC2500_RxData
  9178 ;;		_CC2500_ReadStatus
  9179 ;;		_CC2500_ReadREG
  9180 ;; This function uses a non-reentrant model
  9181 ;;
  9182                           
  9183                           
  9184                           ;psect for function _CC2500_ReadByte
  9185  1E4A                     _CC2500_ReadByte:	
  9186                           
  9187                           ;CC2500_B1.c: 236: unsigned char loop_b;
  9188                           ;CC2500_B1.c: 237: for (loop_b = 0; loop_b < 8; loop_b++) {
  9189                           
  9190                           ;incstack = 0
  9191                           ; Regs used in _CC2500_ReadByte: [wreg+status,2+status,0]
  9192  1E4A  0020               	movlb	0	; select bank0
  9193  1E4B  01A1               	clrf	CC2500_ReadByte@loop_b
  9194  1E4C                     L4:	
  9195  1E4C  3008               	movlw	8
  9196  1E4D  0221               	subwf	CC2500_ReadByte@loop_b,w
  9197  1E4E  1803               	btfsc	3,0
  9198  1E4F  0008               	return
  9199                           
  9200                           ;CC2500_B1.c: 238: RC1 = 1;
  9201  1E50  148E               	bsf	14,1	;volatile
  9202                           
  9203                           ;CC2500_B1.c: 239: SPI0Buffer <<= 1;
  9204  1E51  1003               	clrc
  9205  1E52  0021               	movlb	1	; select bank1
  9206  1E53  0DD0               	rlf	_SPI0Buffer^(0+128),f
  9207                           
  9208                           ;CC2500_B1.c: 240: if (RC2 == 1)
  9209  1E54  0020               	movlb	0	; select bank0
  9210  1E55  1D0E               	btfss	14,2	;volatile
  9211  1E56  2E5A               	goto	l9181
  9212                           
  9213                           ;CC2500_B1.c: 241: SPI0Buffer |= 0x01;
  9214  1E57  0021               	movlb	1	; select bank1
  9215  1E58  1450               	bsf	_SPI0Buffer^(0+128),0
  9216  1E59  2E60               	goto	l9183
  9217  1E5A                     l9181:	
  9218                           
  9219                           ;CC2500_B1.c: 242: else
  9220                           ;CC2500_B1.c: 243: SPI0Buffer &= 0xFE;
  9221  1E5A  30FE               	movlw	254
  9222  1E5B  0020               	movlb	0	; select bank0
  9223  1E5C  00A0               	movwf	??_CC2500_ReadByte
  9224  1E5D  0820               	movf	??_CC2500_ReadByte,w
  9225  1E5E  0021               	movlb	1	; select bank1
  9226  1E5F  05D0               	andwf	_SPI0Buffer^(0+128),f
  9227  1E60                     l9183:	
  9228                           
  9229                           ;CC2500_B1.c: 244: RC1 = 0;
  9230  1E60  0020               	movlb	0	; select bank0
  9231  1E61  108E               	bcf	14,1	;volatile
  9232  1E62  3001               	movlw	1
  9233  1E63  00A0               	movwf	??_CC2500_ReadByte
  9234  1E64  0820               	movf	??_CC2500_ReadByte,w
  9235  1E65  07A1               	addwf	CC2500_ReadByte@loop_b,f
  9236  1E66  2E4C               	goto	L4
  9237  1E67                     __end_of_CC2500_ReadByte:	
  9238                           
  9239                           	psect	text42
  9240  1AC5                     __ptext42:	
  9241 ;; *************** function _RF_Initialization *****************
  9242 ;; Defined at:
  9243 ;;		line 9 in file "../src/RF_Control_B1.c"
  9244 ;; Parameters:    Size  Location     Type
  9245 ;;		None
  9246 ;; Auto vars:     Size  Location     Type
  9247 ;;		None
  9248 ;; Return value:  Size  Location     Type
  9249 ;;		None               void
  9250 ;; Registers used:
  9251 ;;		wreg, status,2, status,0, pclath, cstack
  9252 ;; Tracked objects:
  9253 ;;		On entry : 0/0
  9254 ;;		On exit  : 0/0
  9255 ;;		Unchanged: 0/0
  9256 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9257 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9258 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9259 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9260 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9261 ;;Total ram usage:        0 bytes
  9262 ;; Hardware stack levels used:    1
  9263 ;; Hardware stack levels required when called:    6
  9264 ;; This function calls:
  9265 ;;		_setRF_Initialization
  9266 ;; This function is called by:
  9267 ;;		_main
  9268 ;; This function uses a non-reentrant model
  9269 ;;
  9270                           
  9271                           
  9272                           ;psect for function _RF_Initialization
  9273  1AC5                     _RF_Initialization:	
  9274                           
  9275                           ;RF_Control_B1.c: 11: setRF_Initialization();
  9276                           
  9277                           ;incstack = 0
  9278                           ; Regs used in _RF_Initialization: [wreg+status,2+status,0+pclath+cstack]
  9279  1AC5  319B  2349         	fcall	_setRF_Initialization
  9280  1AC7  0008               	return
  9281  1AC8                     __end_of_RF_Initialization:	
  9282                           
  9283                           	psect	text43
  9284  1B49                     __ptext43:	
  9285 ;; *************** function _setRF_Initialization *****************
  9286 ;; Defined at:
  9287 ;;		line 43 in file "../src/RF_Control_B1.c"
  9288 ;; Parameters:    Size  Location     Type
  9289 ;;		None
  9290 ;; Auto vars:     Size  Location     Type
  9291 ;;		None
  9292 ;; Return value:  Size  Location     Type
  9293 ;;		None               void
  9294 ;; Registers used:
  9295 ;;		wreg
  9296 ;; Tracked objects:
  9297 ;;		On entry : 0/0
  9298 ;;		On exit  : 0/0
  9299 ;;		Unchanged: 0/0
  9300 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9301 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9302 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9303 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9304 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9305 ;;Total ram usage:        1 bytes
  9306 ;; Hardware stack levels used:    1
  9307 ;; Hardware stack levels required when called:    5
  9308 ;; This function calls:
  9309 ;;		Nothing
  9310 ;; This function is called by:
  9311 ;;		_RF_Initialization
  9312 ;; This function uses a non-reentrant model
  9313 ;;
  9314                           
  9315                           
  9316                           ;psect for function _setRF_Initialization
  9317  1B49                     _setRF_Initialization:	
  9318                           
  9319                           ;RF_Control_B1.c: 45: Tx_Length = 21;
  9320                           
  9321                           ;incstack = 0
  9322                           ; Regs used in _setRF_Initialization: [wreg]
  9323  1B49  3015               	movlw	21
  9324  1B4A  0020               	movlb	0	; select bank0
  9325  1B4B  00A0               	movwf	??_setRF_Initialization
  9326  1B4C  0820               	movf	??_setRF_Initialization,w
  9327  1B4D  0021               	movlb	1	; select bank1
  9328  1B4E  00D2               	movwf	_Tx_Length^(0+128)
  9329                           
  9330                           ;RF_Control_B1.c: 46: RF1.RunTime = 5;
  9331  1B4F  3005               	movlw	5
  9332  1B50  00C1               	movwf	(_RF1^(0+128)+7)
  9333  1B51  3000               	movlw	0
  9334  1B52  00C2               	movwf	(_RF1^(0+128)+8)
  9335  1B53  0008               	return
  9336  1B54                     __end_of_setRF_Initialization:	
  9337                           
  9338                           	psect	text44
  9339  1C62                     __ptext44:	
  9340 ;; *************** function _Mcu_Initialization *****************
  9341 ;; Defined at:
  9342 ;;		line 30 in file "../src/MCU_B1.c"
  9343 ;; Parameters:    Size  Location     Type
  9344 ;;		None
  9345 ;; Auto vars:     Size  Location     Type
  9346 ;;		None
  9347 ;; Return value:  Size  Location     Type
  9348 ;;		None               void
  9349 ;; Registers used:
  9350 ;;		wreg, status,2, status,0, pclath, cstack
  9351 ;; Tracked objects:
  9352 ;;		On entry : 0/0
  9353 ;;		On exit  : 0/0
  9354 ;;		Unchanged: 0/0
  9355 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9356 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9357 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9358 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9359 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9360 ;;Total ram usage:        0 bytes
  9361 ;; Hardware stack levels used:    1
  9362 ;; Hardware stack levels required when called:    6
  9363 ;; This function calls:
  9364 ;;		_ADC_Set
  9365 ;;		_Fosc_Set
  9366 ;;		_IOC_Set
  9367 ;;		_IO_Set
  9368 ;;		_TMR1_Set
  9369 ;;		_WDT_Set
  9370 ;; This function is called by:
  9371 ;;		_main
  9372 ;; This function uses a non-reentrant model
  9373 ;;
  9374                           
  9375                           
  9376                           ;psect for function _Mcu_Initialization
  9377  1C62                     _Mcu_Initialization:	
  9378                           
  9379                           ;MCU_B1.c: 32: Fosc_Set();
  9380                           
  9381                           ;incstack = 0
  9382                           ; Regs used in _Mcu_Initialization: [wreg+status,2+status,0+pclath+cstack]
  9383  1C62  319A  22DD  319C   	fcall	_Fosc_Set
  9384                           
  9385                           ;MCU_B1.c: 34: IO_Set();
  9386  1C65  319D  25E1  319C   	fcall	_IO_Set
  9387                           
  9388                           ;MCU_B1.c: 36: ;;
  9389                           ;MCU_B1.c: 38: TMR1_Set();
  9390  1C68  319B  23A7  319C   	fcall	_TMR1_Set
  9391                           
  9392                           ;MCU_B1.c: 40: ADC_Set();
  9393  1C6B  319A  22F8  319C   	fcall	_ADC_Set
  9394                           
  9395                           ;MCU_B1.c: 42: ;;
  9396                           ;MCU_B1.c: 44: ;;
  9397                           ;MCU_B1.c: 46: IOC_Set();
  9398  1C6E  319B  239B  319C   	fcall	_IOC_Set
  9399                           
  9400                           ;MCU_B1.c: 48: ;;
  9401                           ;MCU_B1.c: 50: ;;
  9402                           ;MCU_B1.c: 52: WDT_Set();
  9403  1C71  319B  23B3         	fcall	_WDT_Set
  9404  1C73  0008               	return
  9405  1C74                     __end_of_Mcu_Initialization:	
  9406                           
  9407                           	psect	text45
  9408  1BB3                     __ptext45:	
  9409 ;; *************** function _WDT_Set *****************
  9410 ;; Defined at:
  9411 ;;		line 1083 in file "../src/MCU_B1.c"
  9412 ;; Parameters:    Size  Location     Type
  9413 ;;		None
  9414 ;; Auto vars:     Size  Location     Type
  9415 ;;		None
  9416 ;; Return value:  Size  Location     Type
  9417 ;;		None               void
  9418 ;; Registers used:
  9419 ;;		wreg
  9420 ;; Tracked objects:
  9421 ;;		On entry : 0/0
  9422 ;;		On exit  : 0/0
  9423 ;;		Unchanged: 0/0
  9424 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9425 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9426 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9427 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9428 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9429 ;;Total ram usage:        1 bytes
  9430 ;; Hardware stack levels used:    1
  9431 ;; Hardware stack levels required when called:    5
  9432 ;; This function calls:
  9433 ;;		Nothing
  9434 ;; This function is called by:
  9435 ;;		_Mcu_Initialization
  9436 ;; This function uses a non-reentrant model
  9437 ;;
  9438                           
  9439                           
  9440                           ;psect for function _WDT_Set
  9441  1BB3                     _WDT_Set:	
  9442                           
  9443                           ;MCU_B1.c: 1090: WDTCON = 0b00010111;;
  9444                           
  9445                           ;incstack = 0
  9446                           ; Regs used in _WDT_Set: [wreg]
  9447  1BB3  3017               	movlw	23
  9448  1BB4  0021               	movlb	1	; select bank1
  9449  1BB5  0097               	movwf	23	;volatile
  9450                           
  9451                           ;MCU_B1.c: 1092: WDT.Enable = 1;
  9452  1BB6  0022               	movlb	2	; select bank2
  9453  1BB7  1425               	bsf	_WDT^(0+256),0
  9454                           
  9455                           ;MCU_B1.c: 1093: WDT.Timer = 10;
  9456  1BB8  300A               	movlw	10
  9457  1BB9  0020               	movlb	0	; select bank0
  9458  1BBA  00A0               	movwf	??_WDT_Set
  9459  1BBB  0820               	movf	??_WDT_Set,w
  9460  1BBC  0022               	movlb	2	; select bank2
  9461  1BBD  00A6               	movwf	(_WDT^(0+256)+1)
  9462  1BBE  0008               	return
  9463  1BBF                     __end_of_WDT_Set:	
  9464                           
  9465                           	psect	text46
  9466  1BA7                     __ptext46:	
  9467 ;; *************** function _TMR1_Set *****************
  9468 ;; Defined at:
  9469 ;;		line 199 in file "../src/MCU_B1.c"
  9470 ;; Parameters:    Size  Location     Type
  9471 ;;		None
  9472 ;; Auto vars:     Size  Location     Type
  9473 ;;		None
  9474 ;; Return value:  Size  Location     Type
  9475 ;;		None               void
  9476 ;; Registers used:
  9477 ;;		wreg
  9478 ;; Tracked objects:
  9479 ;;		On entry : 0/0
  9480 ;;		On exit  : 0/0
  9481 ;;		Unchanged: 0/0
  9482 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9483 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9484 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9485 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9486 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9487 ;;Total ram usage:        0 bytes
  9488 ;; Hardware stack levels used:    1
  9489 ;; Hardware stack levels required when called:    5
  9490 ;; This function calls:
  9491 ;;		Nothing
  9492 ;; This function is called by:
  9493 ;;		_Mcu_Initialization
  9494 ;; This function uses a non-reentrant model
  9495 ;;
  9496                           
  9497                           
  9498                           ;psect for function _TMR1_Set
  9499  1BA7                     _TMR1_Set:	
  9500                           
  9501                           ;MCU_B1.c: 200: T1CON = (0x40 | 0x00 | 0x01);
  9502                           
  9503                           ;incstack = 0
  9504                           ; Regs used in _TMR1_Set: [wreg]
  9505  1BA7  3041               	movlw	65
  9506  1BA8  0020               	movlb	0	; select bank0
  9507  1BA9  0098               	movwf	24	;volatile
  9508                           
  9509                           ;MCU_B1.c: 201: TMR1H = (int)((65536-1480)/256);
  9510  1BAA  30FA               	movlw	250
  9511  1BAB  0097               	movwf	23	;volatile
  9512                           
  9513                           ;MCU_B1.c: 202: TMR1L = (int)((65536-1480)%256);
  9514  1BAC  3038               	movlw	56
  9515  1BAD  0096               	movwf	22	;volatile
  9516                           
  9517                           ;MCU_B1.c: 203: TMR1IE = 1;
  9518  1BAE  0021               	movlb	1	; select bank1
  9519  1BAF  1411               	bsf	17,0	;volatile
  9520                           
  9521                           ;MCU_B1.c: 204: PEIE = 1;
  9522  1BB0  170B               	bsf	11,6	;volatile
  9523                           
  9524                           ;MCU_B1.c: 205: GIE = 1;
  9525  1BB1  178B               	bsf	11,7	;volatile
  9526  1BB2  0008               	return
  9527  1BB3                     __end_of_TMR1_Set:	
  9528                           
  9529                           	psect	text47
  9530  1DE1                     __ptext47:	
  9531 ;; *************** function _IO_Set *****************
  9532 ;; Defined at:
  9533 ;;		line 60 in file "../src/MCU_B1.c"
  9534 ;; Parameters:    Size  Location     Type
  9535 ;;		None
  9536 ;; Auto vars:     Size  Location     Type
  9537 ;;		None
  9538 ;; Return value:  Size  Location     Type
  9539 ;;		None               void
  9540 ;; Registers used:
  9541 ;;		wreg, status,2
  9542 ;; Tracked objects:
  9543 ;;		On entry : 0/0
  9544 ;;		On exit  : 0/0
  9545 ;;		Unchanged: 0/0
  9546 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9547 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9548 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9549 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9550 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9551 ;;Total ram usage:        0 bytes
  9552 ;; Hardware stack levels used:    1
  9553 ;; Hardware stack levels required when called:    5
  9554 ;; This function calls:
  9555 ;;		Nothing
  9556 ;; This function is called by:
  9557 ;;		_Mcu_Initialization
  9558 ;; This function uses a non-reentrant model
  9559 ;;
  9560                           
  9561                           
  9562                           ;psect for function _IO_Set
  9563  1DE1                     _IO_Set:	
  9564                           
  9565                           ;MCU_B1.c: 88: TRISA = 0b01110111;;
  9566                           
  9567                           ;incstack = 0
  9568                           ; Regs used in _IO_Set: [wreg+status,2]
  9569  1DE1  3077               	movlw	119
  9570  1DE2  0021               	movlb	1	; select bank1
  9571  1DE3  008C               	movwf	12	;volatile
  9572                           
  9573                           ;MCU_B1.c: 89: TRISB = 0b00000111;;
  9574  1DE4  3007               	movlw	7
  9575  1DE5  008D               	movwf	13	;volatile
  9576                           
  9577                           ;MCU_B1.c: 90: TRISC = 0b00001100;;
  9578  1DE6  300C               	movlw	12
  9579  1DE7  008E               	movwf	14	;volatile
  9580                           
  9581                           ;MCU_B1.c: 91: LATA = 0b00000000;;
  9582  1DE8  0022               	movlb	2	; select bank2
  9583  1DE9  018C               	clrf	12	;volatile
  9584                           
  9585                           ;MCU_B1.c: 92: LATB = 0b00000010;;
  9586  1DEA  3002               	movlw	2
  9587  1DEB  008D               	movwf	13	;volatile
  9588                           
  9589                           ;MCU_B1.c: 93: LATC = 0b00000000;;
  9590  1DEC  018E               	clrf	14	;volatile
  9591                           
  9592                           ;MCU_B1.c: 94: ANSELA = 0b00100010;;
  9593  1DED  3022               	movlw	34
  9594  1DEE  0023               	movlb	3	; select bank3
  9595  1DEF  008C               	movwf	12	;volatile
  9596                           
  9597                           ;MCU_B1.c: 95: ANSELB = 0b00000000;;
  9598  1DF0  018D               	clrf	13	;volatile
  9599                           
  9600                           ;MCU_B1.c: 96: ANSELC = 0b00000000;;
  9601  1DF1  018E               	clrf	14	;volatile
  9602                           
  9603                           ;MCU_B1.c: 97: PORTA = 0b01110111;;
  9604  1DF2  3077               	movlw	119
  9605  1DF3  0020               	movlb	0	; select bank0
  9606  1DF4  008C               	movwf	12	;volatile
  9607                           
  9608                           ;MCU_B1.c: 98: PORTB = 0b00000111;;
  9609  1DF5  3007               	movlw	7
  9610  1DF6  008D               	movwf	13	;volatile
  9611                           
  9612                           ;MCU_B1.c: 99: PORTC = 0b00001100;;
  9613  1DF7  300C               	movlw	12
  9614  1DF8  008E               	movwf	14	;volatile
  9615  1DF9  0008               	return
  9616  1DFA                     __end_of_IO_Set:	
  9617                           
  9618                           	psect	text48
  9619  1B9B                     __ptext48:	
  9620 ;; *************** function _IOC_Set *****************
  9621 ;; Defined at:
  9622 ;;		line 365 in file "../src/MCU_B1.c"
  9623 ;; Parameters:    Size  Location     Type
  9624 ;;		None
  9625 ;; Auto vars:     Size  Location     Type
  9626 ;;		None
  9627 ;; Return value:  Size  Location     Type
  9628 ;;		None               void
  9629 ;; Registers used:
  9630 ;;		wreg, status,2
  9631 ;; Tracked objects:
  9632 ;;		On entry : 0/0
  9633 ;;		On exit  : 0/0
  9634 ;;		Unchanged: 0/0
  9635 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9636 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9637 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9638 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9639 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9640 ;;Total ram usage:        0 bytes
  9641 ;; Hardware stack levels used:    1
  9642 ;; Hardware stack levels required when called:    5
  9643 ;; This function calls:
  9644 ;;		Nothing
  9645 ;; This function is called by:
  9646 ;;		_Mcu_Initialization
  9647 ;; This function uses a non-reentrant model
  9648 ;;
  9649                           
  9650                           
  9651                           ;psect for function _IOC_Set
  9652  1B9B                     _IOC_Set:	
  9653                           
  9654                           ;MCU_B1.c: 366: WPUB2 = 0;
  9655                           
  9656                           ;incstack = 0
  9657                           ; Regs used in _IOC_Set: [wreg+status,2]
  9658  1B9B  0024               	movlb	4	; select bank4
  9659  1B9C  110D               	bcf	13,2	;volatile
  9660                           
  9661                           ;MCU_B1.c: 386: IOCBP = 0b00000000;
  9662  1B9D  0027               	movlb	7	; select bank7
  9663  1B9E  0194               	clrf	20	;volatile
  9664                           
  9665                           ;MCU_B1.c: 387: IOCBN = 0b00000100;
  9666  1B9F  3004               	movlw	4
  9667  1BA0  0095               	movwf	21	;volatile
  9668                           
  9669                           ;MCU_B1.c: 391: IOCBF = 0b00000000;
  9670  1BA1  0196               	clrf	22	;volatile
  9671                           
  9672                           ;MCU_B1.c: 393: IOCIE = 1;
  9673  1BA2  158B               	bsf	11,3	;volatile
  9674                           
  9675                           ;MCU_B1.c: 394: IOCIF = 0;
  9676  1BA3  100B               	bcf	11,0	;volatile
  9677                           
  9678                           ;MCU_B1.c: 395: PEIE = 1;
  9679  1BA4  170B               	bsf	11,6	;volatile
  9680                           
  9681                           ;MCU_B1.c: 396: GIE = 1;
  9682  1BA5  178B               	bsf	11,7	;volatile
  9683  1BA6  0008               	return
  9684  1BA7                     __end_of_IOC_Set:	
  9685                           
  9686                           	psect	text49
  9687  1ADD                     __ptext49:	
  9688 ;; *************** function _Fosc_Set *****************
  9689 ;; Defined at:
  9690 ;;		line 56 in file "../src/MCU_B1.c"
  9691 ;; Parameters:    Size  Location     Type
  9692 ;;		None
  9693 ;; Auto vars:     Size  Location     Type
  9694 ;;		None
  9695 ;; Return value:  Size  Location     Type
  9696 ;;		None               void
  9697 ;; Registers used:
  9698 ;;		wreg
  9699 ;; Tracked objects:
  9700 ;;		On entry : 0/0
  9701 ;;		On exit  : 0/0
  9702 ;;		Unchanged: 0/0
  9703 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9704 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9705 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9706 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9707 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9708 ;;Total ram usage:        0 bytes
  9709 ;; Hardware stack levels used:    1
  9710 ;; Hardware stack levels required when called:    5
  9711 ;; This function calls:
  9712 ;;		Nothing
  9713 ;; This function is called by:
  9714 ;;		_Mcu_Initialization
  9715 ;; This function uses a non-reentrant model
  9716 ;;
  9717                           
  9718                           
  9719                           ;psect for function _Fosc_Set
  9720  1ADD                     _Fosc_Set:	
  9721                           
  9722                           ;MCU_B1.c: 57: OSCCON = 0x78;
  9723                           
  9724                           ;incstack = 0
  9725                           ; Regs used in _Fosc_Set: [wreg]
  9726  1ADD  3078               	movlw	120
  9727  1ADE  0021               	movlb	1	; select bank1
  9728  1ADF  0099               	movwf	25	;volatile
  9729  1AE0  0008               	return
  9730  1AE1                     __end_of_Fosc_Set:	
  9731                           
  9732                           	psect	text50
  9733  1AF8                     __ptext50:	
  9734 ;; *************** function _ADC_Set *****************
  9735 ;; Defined at:
  9736 ;;		line 419 in file "../src/MCU_B1.c"
  9737 ;; Parameters:    Size  Location     Type
  9738 ;;		None
  9739 ;; Auto vars:     Size  Location     Type
  9740 ;;		None
  9741 ;; Return value:  Size  Location     Type
  9742 ;;		None               void
  9743 ;; Registers used:
  9744 ;;		wreg
  9745 ;; Tracked objects:
  9746 ;;		On entry : 0/0
  9747 ;;		On exit  : 0/0
  9748 ;;		Unchanged: 0/0
  9749 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9750 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9751 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9752 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9753 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9754 ;;Total ram usage:        0 bytes
  9755 ;; Hardware stack levels used:    1
  9756 ;; Hardware stack levels required when called:    5
  9757 ;; This function calls:
  9758 ;;		Nothing
  9759 ;; This function is called by:
  9760 ;;		_Mcu_Initialization
  9761 ;; This function uses a non-reentrant model
  9762 ;;
  9763                           
  9764                           
  9765                           ;psect for function _ADC_Set
  9766  1AF8                     _ADC_Set:	
  9767                           
  9768                           ;MCU_B1.c: 420: ADCON1 = 0xf3;
  9769                           
  9770                           ;incstack = 0
  9771                           ; Regs used in _ADC_Set: [wreg]
  9772  1AF8  30F3               	movlw	243
  9773  1AF9  0021               	movlb	1	; select bank1
  9774  1AFA  009E               	movwf	30	;volatile
  9775                           
  9776                           ;MCU_B1.c: 421: FVRCON = 0xc1;
  9777  1AFB  30C1               	movlw	193
  9778  1AFC  0022               	movlb	2	; select bank2
  9779  1AFD  0097               	movwf	23	;volatile
  9780  1AFE  0008               	return
  9781  1AFF                     __end_of_ADC_Set:	
  9782                           
  9783                           	psect	text51
  9784  0049                     __ptext51:	
  9785 ;; *************** function _Load_Main *****************
  9786 ;; Defined at:
  9787 ;;		line 39 in file "../src/OverLoad_B1.c"
  9788 ;; Parameters:    Size  Location     Type
  9789 ;;		None
  9790 ;; Auto vars:     Size  Location     Type
  9791 ;;  i               2   12[BANK0 ] int 
  9792 ;;  Load_Status     1   11[BANK0 ] unsigned char 
  9793 ;;  error           1   10[BANK0 ] unsigned char 
  9794 ;; Return value:  Size  Location     Type
  9795 ;;		None               void
  9796 ;; Registers used:
  9797 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9798 ;; Tracked objects:
  9799 ;;		On entry : 0/0
  9800 ;;		On exit  : 0/0
  9801 ;;		Unchanged: 0/0
  9802 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9803 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9804 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9805 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9806 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9807 ;;Total ram usage:        6 bytes
  9808 ;; Hardware stack levels used:    1
  9809 ;; Hardware stack levels required when called:    7
  9810 ;; This function calls:
  9811 ;;		___lwdiv
  9812 ;;		___wmul
  9813 ;;		_getAll_DimmerLights_AdjSw
  9814 ;;		_getDimmer_LoadGO
  9815 ;;		_getDimmer_Load_Status
  9816 ;;		_getMain_All_Error_Status
  9817 ;;		_getMain_LightsStatus
  9818 ;;		_getMain_Lights_Count
  9819 ;;		_setLoad_AH_AL_Restore
  9820 ;; This function is called by:
  9821 ;;		_main
  9822 ;; This function uses a non-reentrant model
  9823 ;;
  9824                           
  9825                           
  9826                           ;psect for function _Load_Main
  9827  0049                     _Load_Main:	
  9828                           
  9829                           ;OverLoad_B1.c: 40: char error = getMain_All_Error_Status(0);
  9830                           
  9831                           ;incstack = 0
  9832                           ; Regs used in _Load_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9833  0049  3000               	movlw	0
  9834  004A  3191  2166  3180   	fcall	_getMain_All_Error_Status
  9835  004D  0020               	movlb	0	; select bank0
  9836  004E  00A8               	movwf	??_Load_Main
  9837  004F  0828               	movf	??_Load_Main,w
  9838  0050  00AA               	movwf	Load_Main@error
  9839                           
  9840                           ;OverLoad_B1.c: 41: char Load_Status = 0;
  9841  0051  01AB               	clrf	Load_Main@Load_Status
  9842                           
  9843                           ;OverLoad_B1.c: 43: if (Load.Enable == 1) {
  9844  0052  0022               	movlb	2	; select bank2
  9845  0053  1C27               	btfss	_Load^(0+256),0
  9846  0054  29EF               	goto	l1729
  9847                           
  9848                           ;OverLoad_B1.c: 64: if (getMain_LightsStatus() == 0) {
  9849  0055  319C  2499  3180   	fcall	_getMain_LightsStatus
  9850  0058  3800               	iorlw	0
  9851  0059  1D03               	skipz
  9852  005A  285D               	goto	l10723
  9853                           
  9854                           ;OverLoad_B1.c: 65: Load.GO = 0;
  9855  005B  0022               	movlb	2	; select bank2
  9856  005C  287E               	goto	l10741
  9857  005D                     l10723:	
  9858                           ;OverLoad_B1.c: 66: } else {
  9859                           
  9860                           
  9861                           ;OverLoad_B1.c: 69: if (error == 0 && getAll_DimmerLights_AdjSw() == 0) {
  9862  005D  0020               	movlb	0	; select bank0
  9863  005E  08AA               	movf	Load_Main@error,f
  9864  005F  1D03               	skipz
  9865  0060  287B               	goto	l1732
  9866  0061  3190  20DB  3180   	fcall	_getAll_DimmerLights_AdjSw
  9867  0064  3800               	iorlw	0
  9868  0065  1D03               	skipz
  9869  0066  287B               	goto	l1732
  9870                           
  9871                           ;OverLoad_B1.c: 70: Load.GO = 1;
  9872  0067  0022               	movlb	2	; select bank2
  9873  0068  14A7               	bsf	_Load^(0+256),1
  9874                           
  9875                           ;OverLoad_B1.c: 72: if (getDimmer_LoadGO() == 1) {
  9876  0069  319B  231F  3180   	fcall	_getDimmer_LoadGO
  9877  006C  3A01               	xorlw	1
  9878  006D  1D03               	skipz
  9879  006E  2876               	goto	l1733
  9880                           
  9881                           ;OverLoad_B1.c: 73: if (Load.Run == 0 && Load.OK == 0) {
  9882  006F  0022               	movlb	2	; select bank2
  9883  0070  1DA7               	btfss	_Load^(0+256),3
  9884  0071  1BA7               	btfsc	_Load^(0+256),7
  9885  0072  287F               	goto	l1731
  9886                           
  9887                           ;OverLoad_B1.c: 74: Load.Run = 1;
  9888  0073  15A7               	bsf	_Load^(0+256),3
  9889                           
  9890                           ;OverLoad_B1.c: 75: Load.Count = 0;
  9891  0074  01D0               	clrf	(_Load^(0+256)+41)
  9892                           
  9893                           ;OverLoad_B1.c: 76: }
  9894                           ;OverLoad_B1.c: 77: } else {
  9895  0075  287F               	goto	l1731
  9896  0076                     l1733:	
  9897                           
  9898                           ;OverLoad_B1.c: 78: if (Load.OK == 1) {
  9899  0076  0022               	movlb	2	; select bank2
  9900  0077  1FA7               	btfss	_Load^(0+256),7
  9901  0078  287F               	goto	l1731
  9902                           
  9903                           ;OverLoad_B1.c: 79: Load.OK = 0;
  9904  0079  13A7               	bcf	_Load^(0+256),7
  9905                           
  9906                           ;OverLoad_B1.c: 80: }
  9907                           ;OverLoad_B1.c: 81: }
  9908                           ;OverLoad_B1.c: 82: } else {
  9909  007A  287F               	goto	l1731
  9910  007B                     l1732:	
  9911                           
  9912                           ;OverLoad_B1.c: 83: if (Load.GO == 1) {
  9913  007B  0022               	movlb	2	; select bank2
  9914  007C  1CA7               	btfss	_Load^(0+256),1
  9915  007D  287F               	goto	l1731
  9916  007E                     l10741:	
  9917                           
  9918                           ;OverLoad_B1.c: 84: Load.GO = 0;
  9919  007E  10A7               	bcf	_Load^(0+256),1
  9920  007F                     l1731:	
  9921                           
  9922                           ;OverLoad_B1.c: 85: }
  9923                           ;OverLoad_B1.c: 86: }
  9924                           ;OverLoad_B1.c: 88: }
  9925                           ;OverLoad_B1.c: 91: if (Load.GO == 1) {
  9926  007F  1CA7               	btfss	_Load^(0+256),1
  9927  0080  29CB               	goto	l1739
  9928                           
  9929                           ;OverLoad_B1.c: 92: Load.LightsON = 1;
  9930  0081  1527               	bsf	_Load^(0+256),2
  9931                           
  9932                           ;OverLoad_B1.c: 94: if (Load.ADtoGO == 1) {
  9933  0082  1E27               	btfss	_Load^(0+256),4
  9934  0083  29C9               	goto	l1740
  9935                           
  9936                           ;OverLoad_B1.c: 95: Load.Time++;
  9937  0084  3001               	movlw	1
  9938  0085  07A8               	addwf	(_Load^(0+256)+1),f
  9939  0086  3000               	movlw	0
  9940  0087  3DA9               	addwfc	((_Load+1)^(0+256)+1),f
  9941                           
  9942                           ;OverLoad_B1.c: 96: if (Load.Time >= 5) {
  9943  0088  3000               	movlw	0
  9944  0089  0229               	subwf	((_Load+1)^(0+256)+1),w
  9945  008A  3005               	movlw	5
  9946  008B  1903               	skipnz
  9947  008C  0228               	subwf	(_Load^(0+256)+1),w
  9948  008D  1C03               	skipc
  9949  008E  0008               	return
  9950                           
  9951                           ;OverLoad_B1.c: 97: Load.Time = 0;
  9952  008F  01A8               	clrf	(_Load^(0+256)+1)
  9953  0090  01A9               	clrf	((_Load+1)^(0+256)+1)
  9954                           
  9955                           ;OverLoad_B1.c: 98: Load.ADtoGO = 0;
  9956  0091  1227               	bcf	_Load^(0+256),4
  9957                           
  9958                           ;OverLoad_B1.c: 100: for (int i = 1; i < 4; i++) {
  9959  0092  3001               	movlw	1
  9960  0093  0020               	movlb	0	; select bank0
  9961  0094  00AC               	movwf	Load_Main@i
  9962  0095  3000               	movlw	0
  9963  0096  00AD               	movwf	Load_Main@i+1
  9964  0097  082D               	movf	Load_Main@i+1,w
  9965  0098  3A80               	xorlw	128
  9966  0099  00A8               	movwf	??_Load_Main
  9967  009A  3080               	movlw	128
  9968  009B  0228               	subwf	??_Load_Main,w
  9969  009C  1D03               	skipz
  9970  009D  28A0               	goto	u12665
  9971  009E  3004               	movlw	4
  9972  009F  022C               	subwf	Load_Main@i,w
  9973  00A0                     u12665:	
  9974  00A0  1803               	btfsc	3,0
  9975  00A1  28D4               	goto	l10763
  9976  00A2                     l10757:	
  9977                           
  9978                           ;OverLoad_B1.c: 101: Load.ADH += Load.AH[i];
  9979  00A2  0020               	movlb	0	; select bank0
  9980  00A3  352C               	lslf	Load_Main@i,w
  9981  00A4  3E32               	addlw	(_Load+11)& (0+255)
  9982  00A5  0086               	movwf	6
  9983  00A6  3001               	movlw	1	; select bank2/3
  9984  00A7  0087               	movwf	7
  9985  00A8  3F40               	moviw [0]fsr1
  9986  00A9  00A8               	movwf	??_Load_Main
  9987  00AA  3F41               	moviw [1]fsr1
  9988  00AB  00A9               	movwf	??_Load_Main+1
  9989  00AC  0828               	movf	??_Load_Main,w
  9990  00AD  0022               	movlb	2	; select bank2
  9991  00AE  07AC               	addwf	(_Load^(0+256)+5),f
  9992  00AF  0020               	movlb	0	; select bank0
  9993  00B0  0829               	movf	??_Load_Main+1,w
  9994  00B1  0022               	movlb	2	; select bank2
  9995  00B2  3DAD               	addwfc	((_Load+1)^(0+256)+5),f
  9996                           
  9997                           ;OverLoad_B1.c: 102: Load.ADL += Load.AL[i];
  9998  00B3  0020               	movlb	0	; select bank0
  9999  00B4  352C               	lslf	Load_Main@i,w
 10000  00B5  3E3C               	addlw	(_Load+21)& (0+255)
 10001  00B6  0086               	movwf	6
 10002  00B7  3001               	movlw	1	; select bank2/3
 10003  00B8  0087               	movwf	7
 10004  00B9  3F40               	moviw [0]fsr1
 10005  00BA  00A8               	movwf	??_Load_Main
 10006  00BB  3F41               	moviw [1]fsr1
 10007  00BC  00A9               	movwf	??_Load_Main+1
 10008  00BD  0828               	movf	??_Load_Main,w
 10009  00BE  0022               	movlb	2	; select bank2
 10010  00BF  07AE               	addwf	(_Load^(0+256)+7),f
 10011  00C0  0020               	movlb	0	; select bank0
 10012  00C1  0829               	movf	??_Load_Main+1,w
 10013  00C2  0022               	movlb	2	; select bank2
 10014  00C3  3DAF               	addwfc	((_Load+1)^(0+256)+7),f
 10015  00C4  3001               	movlw	1
 10016  00C5  0020               	movlb	0	; select bank0
 10017  00C6  07AC               	addwf	Load_Main@i,f
 10018  00C7  3000               	movlw	0
 10019  00C8  3DAD               	addwfc	Load_Main@i+1,f
 10020  00C9  082D               	movf	Load_Main@i+1,w
 10021  00CA  3A80               	xorlw	128
 10022  00CB  00A8               	movwf	??_Load_Main
 10023  00CC  3080               	movlw	128
 10024  00CD  0228               	subwf	??_Load_Main,w
 10025  00CE  1D03               	skipz
 10026  00CF  28D2               	goto	u12675
 10027  00D0  3004               	movlw	4
 10028  00D1  022C               	subwf	Load_Main@i,w
 10029  00D2                     u12675:	
 10030  00D2  1C03               	skipc
 10031  00D3  28A2               	goto	l10757
 10032  00D4                     l10763:	
 10033                           
 10034                           ;OverLoad_B1.c: 103: }
 10035                           ;OverLoad_B1.c: 104: Load.ADH /= 3;
 10036  00D4  3003               	movlw	3
 10037  00D5  0020               	movlb	0	; select bank0
 10038  00D6  00A0               	movwf	___lwdiv@divisor
 10039  00D7  3000               	movlw	0
 10040  00D8  00A1               	movwf	___lwdiv@divisor+1
 10041  00D9  0022               	movlb	2	; select bank2
 10042  00DA  082D               	movf	((_Load+1)^(0+256)+5),w
 10043  00DB  0020               	movlb	0	; select bank0
 10044  00DC  01A3               	clrf	___lwdiv@dividend+1
 10045  00DD  07A3               	addwf	___lwdiv@dividend+1,f
 10046  00DE  0022               	movlb	2	; select bank2
 10047  00DF  082C               	movf	(_Load^(0+256)+5),w
 10048  00E0  0020               	movlb	0	; select bank0
 10049  00E1  01A2               	clrf	___lwdiv@dividend
 10050  00E2  07A2               	addwf	___lwdiv@dividend,f
 10051  00E3  3192  2203  3180   	fcall	___lwdiv
 10052  00E6  0020               	movlb	0	; select bank0
 10053  00E7  0821               	movf	?___lwdiv+1,w
 10054  00E8  0022               	movlb	2	; select bank2
 10055  00E9  01AD               	clrf	((_Load+1)^(0+256)+5)
 10056  00EA  07AD               	addwf	((_Load+1)^(0+256)+5),f
 10057  00EB  0020               	movlb	0	; select bank0
 10058  00EC  0820               	movf	?___lwdiv,w
 10059  00ED  0022               	movlb	2	; select bank2
 10060  00EE  01AC               	clrf	(_Load^(0+256)+5)
 10061  00EF  07AC               	addwf	(_Load^(0+256)+5),f
 10062                           
 10063                           ;OverLoad_B1.c: 105: Load.ADL /= 3;
 10064  00F0  3003               	movlw	3
 10065  00F1  0020               	movlb	0	; select bank0
 10066  00F2  00A0               	movwf	___lwdiv@divisor
 10067  00F3  3000               	movlw	0
 10068  00F4  00A1               	movwf	___lwdiv@divisor+1
 10069  00F5  0022               	movlb	2	; select bank2
 10070  00F6  082F               	movf	((_Load+1)^(0+256)+7),w
 10071  00F7  0020               	movlb	0	; select bank0
 10072  00F8  01A3               	clrf	___lwdiv@dividend+1
 10073  00F9  07A3               	addwf	___lwdiv@dividend+1,f
 10074  00FA  0022               	movlb	2	; select bank2
 10075  00FB  082E               	movf	(_Load^(0+256)+7),w
 10076  00FC  0020               	movlb	0	; select bank0
 10077  00FD  01A2               	clrf	___lwdiv@dividend
 10078  00FE  07A2               	addwf	___lwdiv@dividend,f
 10079  00FF  3192  2203  3180   	fcall	___lwdiv
 10080  0102  0020               	movlb	0	; select bank0
 10081  0103  0821               	movf	?___lwdiv+1,w
 10082  0104  0022               	movlb	2	; select bank2
 10083  0105  01AF               	clrf	((_Load+1)^(0+256)+7)
 10084  0106  07AF               	addwf	((_Load+1)^(0+256)+7),f
 10085  0107  0020               	movlb	0	; select bank0
 10086  0108  0820               	movf	?___lwdiv,w
 10087  0109  0022               	movlb	2	; select bank2
 10088  010A  01AE               	clrf	(_Load^(0+256)+7)
 10089  010B  07AE               	addwf	(_Load^(0+256)+7),f
 10090                           
 10091                           ;OverLoad_B1.c: 106: setLoad_AH_AL_Restore();
 10092  010C  319E  262E  3180   	fcall	_setLoad_AH_AL_Restore
 10093                           
 10094                           ;OverLoad_B1.c: 108: if (Load.ADH > Load.ADL) {
 10095  010F  0022               	movlb	2	; select bank2
 10096  0110  082D               	movf	((_Load+1)^(0+256)+5),w
 10097  0111  022F               	subwf	((_Load+1)^(0+256)+7),w
 10098  0112  1D03               	skipz
 10099  0113  2916               	goto	u12685
 10100  0114  082C               	movf	(_Load^(0+256)+5),w
 10101  0115  022E               	subwf	(_Load^(0+256)+7),w
 10102  0116                     u12685:	
 10103  0116  1803               	skipnc
 10104  0117  0008               	return
 10105                           
 10106                           ;OverLoad_B1.c: 109: Load.AD = Load.ADH - Load.ADL;
 10107  0118  3005               	movlw	5
 10108  0119  3E27               	addlw	_Load& (0+255)
 10109  011A  0086               	movwf	6
 10110  011B  3001               	movlw	1	; select bank2/3
 10111  011C  0087               	movwf	7
 10112  011D  092E               	comf	(_Load^(0+256)+7),w
 10113  011E  0020               	movlb	0	; select bank0
 10114  011F  00A8               	movwf	??_Load_Main
 10115  0120  0022               	movlb	2	; select bank2
 10116  0121  092F               	comf	((_Load+1)^(0+256)+7),w
 10117  0122  0020               	movlb	0	; select bank0
 10118  0123  00A9               	movwf	??_Load_Main+1
 10119  0124  0AA8               	incf	??_Load_Main,f
 10120  0125  1903               	skipnz
 10121  0126  0AA9               	incf	??_Load_Main+1,f
 10122  0127  3F40               	moviw [0]fsr1
 10123  0128  0728               	addwf	??_Load_Main,w
 10124  0129  0022               	movlb	2	; select bank2
 10125  012A  00C6               	movwf	(_Load^(0+256)+31)
 10126  012B  3F41               	moviw [1]fsr1
 10127  012C  0020               	movlb	0	; select bank0
 10128  012D  3D29               	addwfc	??_Load_Main+1,w
 10129  012E  0022               	movlb	2	; select bank2
 10130  012F  00C7               	movwf	(_Load^(0+256)+32)
 10131                           
 10132                           ;OverLoad_B1.c: 110: Load.ADH = 0;
 10133  0130  01AC               	clrf	(_Load^(0+256)+5)
 10134  0131  01AD               	clrf	((_Load+1)^(0+256)+5)
 10135                           
 10136                           ;OverLoad_B1.c: 111: Load.ADL = 0;
 10137  0132  01AE               	clrf	(_Load^(0+256)+7)
 10138  0133  01AF               	clrf	((_Load+1)^(0+256)+7)
 10139                           
 10140                           ;OverLoad_B1.c: 113: if (Load.Run == 1) {
 10141  0134  1DA7               	btfss	_Load^(0+256),3
 10142  0135  2995               	goto	l10803
 10143                           
 10144                           ;OverLoad_B1.c: 114: if (Load.Count < 2) {
 10145  0136  3002               	movlw	2
 10146  0137  0250               	subwf	(_Load^(0+256)+41),w
 10147  0138  1803               	skipnc
 10148  0139  2995               	goto	l10803
 10149                           
 10150                           ;OverLoad_B1.c: 115: Load.Count++;
 10151  013A  3001               	movlw	1
 10152  013B  0020               	movlb	0	; select bank0
 10153  013C  00A8               	movwf	??_Load_Main
 10154  013D  0828               	movf	??_Load_Main,w
 10155  013E  0022               	movlb	2	; select bank2
 10156  013F  07D0               	addwf	(_Load^(0+256)+41),f
 10157                           
 10158                           ;OverLoad_B1.c: 116: Load_Status = getDimmer_Load_Status();
 10159  0140  319B  2327  3180   	fcall	_getDimmer_Load_Status
 10160  0143  0020               	movlb	0	; select bank0
 10161  0144  00A8               	movwf	??_Load_Main
 10162  0145  0828               	movf	??_Load_Main,w
 10163  0146  00AB               	movwf	Load_Main@Load_Status
 10164                           
 10165                           ;OverLoad_B1.c: 117: Load.LightsCount = getMain_Lights_Count();
 10166  0147  319D  2535  3180   	fcall	_getMain_Lights_Count
 10167  014A  0020               	movlb	0	; select bank0
 10168  014B  00A8               	movwf	??_Load_Main
 10169  014C  0828               	movf	??_Load_Main,w
 10170  014D  0022               	movlb	2	; select bank2
 10171  014E  00D3               	movwf	(_Load^(0+256)+44)
 10172                           
 10173                           ;OverLoad_B1.c: 118: if (Load.Count == 1) {
 10174  014F  0850               	movf	(_Load^(0+256)+41),w
 10175  0150  3A01               	xorlw	1
 10176  0151  1D03               	skipz
 10177  0152  295D               	goto	l10789
 10178                           
 10179                           ;OverLoad_B1.c: 119: Load.ErrorCountValue = 2;
 10180  0153  3002               	movlw	2
 10181  0154  0020               	movlb	0	; select bank0
 10182  0155  00A8               	movwf	??_Load_Main
 10183  0156  0828               	movf	??_Load_Main,w
 10184  0157  0022               	movlb	2	; select bank2
 10185  0158  00D2               	movwf	(_Load^(0+256)+43)
 10186                           
 10187                           ;OverLoad_B1.c: 120: Load.JudgeValue = (20*50);
 10188  0159  30E8               	movlw	232
 10189  015A  00CC               	movwf	(_Load^(0+256)+37)
 10190  015B  3003               	movlw	3
 10191  015C  2968               	goto	L5
 10192  015D                     l10789:	
 10193                           ;OverLoad_B1.c: 121: } else if (Load.Count == 2) {
 10194                           
 10195  015D  0850               	movf	(_Load^(0+256)+41),w
 10196  015E  3A02               	xorlw	2
 10197  015F  1D03               	skipz
 10198  0160  2995               	goto	l10803
 10199                           
 10200                           ;OverLoad_B1.c: 122: if (Load.LightsCount == 1) {
 10201  0161  0853               	movf	(_Load^(0+256)+44),w
 10202  0162  3A01               	xorlw	1
 10203  0163  1D03               	skipz
 10204  0164  296A               	goto	l10795
 10205                           
 10206                           ;OverLoad_B1.c: 123: Load.JudgeValue = (int)(1.1*50);
 10207  0165  3037               	movlw	55
 10208  0166  00CC               	movwf	(_Load^(0+256)+37)
 10209  0167  3000               	movlw	0
 10210  0168                     L5:	
 10211  0168  00CD               	movwf	(_Load^(0+256)+38)
 10212                           
 10213                           ;OverLoad_B1.c: 124: } else {
 10214  0169  2995               	goto	l10803
 10215  016A                     l10795:	
 10216                           
 10217                           ;OverLoad_B1.c: 125: if (Load_Status == 0) {
 10218  016A  0020               	movlb	0	; select bank0
 10219  016B  08AB               	movf	Load_Main@Load_Status,f
 10220  016C  1D03               	skipz
 10221  016D  2989               	goto	l10799
 10222                           
 10223                           ;OverLoad_B1.c: 126: Load.JudgeValue = (int)(1.1*50) * Load.LightsCount;
 10224  016E  0022               	movlb	2	; select bank2
 10225  016F  0853               	movf	(_Load^(0+256)+44),w
 10226  0170  0020               	movlb	0	; select bank0
 10227  0171  00A8               	movwf	??_Load_Main
 10228  0172  01A9               	clrf	??_Load_Main+1
 10229  0173  0828               	movf	??_Load_Main,w
 10230  0174  00A0               	movwf	___wmul@multiplier
 10231  0175  0829               	movf	??_Load_Main+1,w
 10232  0176  00A1               	movwf	___wmul@multiplier+1
 10233  0177  3037               	movlw	55
 10234  0178  00A2               	movwf	___wmul@multiplicand
 10235  0179  3000               	movlw	0
 10236  017A  00A3               	movwf	___wmul@multiplicand+1
 10237  017B  319E  2667  3180   	fcall	___wmul
 10238  017E  0020               	movlb	0	; select bank0
 10239  017F  0821               	movf	?___wmul+1,w
 10240  0180  0022               	movlb	2	; select bank2
 10241  0181  01CD               	clrf	((_Load+1)^(0+256)+37)
 10242  0182  07CD               	addwf	((_Load+1)^(0+256)+37),f
 10243  0183  0020               	movlb	0	; select bank0
 10244  0184  0820               	movf	?___wmul,w
 10245  0185  0022               	movlb	2	; select bank2
 10246  0186  01CC               	clrf	(_Load^(0+256)+37)
 10247  0187  07CC               	addwf	(_Load^(0+256)+37),f
 10248                           
 10249                           ;OverLoad_B1.c: 127: } else if (Load_Status == 1) {
 10250  0188  2995               	goto	l10803
 10251  0189                     l10799:	
 10252  0189  0020               	movlb	0	; select bank0
 10253  018A  082B               	movf	Load_Main@Load_Status,w
 10254  018B  3A01               	xorlw	1
 10255  018C  1D03               	skipz
 10256  018D  2995               	goto	l10803
 10257                           
 10258                           ;OverLoad_B1.c: 128: Load.JudgeValue = (int)(1.1*50) + Load.TotalLoad;
 10259  018E  0022               	movlb	2	; select bank2
 10260  018F  0830               	movf	(_Load^(0+256)+9),w
 10261  0190  3E37               	addlw	55
 10262  0191  00CC               	movwf	(_Load^(0+256)+37)
 10263  0192  3000               	movlw	0
 10264  0193  3D31               	addwfc	((_Load+1)^(0+256)+9),w
 10265  0194  00CD               	movwf	((_Load+1)^(0+256)+37)
 10266  0195                     l10803:	
 10267                           
 10268                           ;OverLoad_B1.c: 129: }
 10269                           ;OverLoad_B1.c: 130: }
 10270                           ;OverLoad_B1.c: 131: }
 10271                           ;OverLoad_B1.c: 132: }
 10272                           ;OverLoad_B1.c: 133: }
 10273                           ;OverLoad_B1.c: 135: if (Load.AD >= Load.JudgeValue) {
 10274  0195  0022               	movlb	2	; select bank2
 10275  0196  084D               	movf	((_Load+1)^(0+256)+37),w
 10276  0197  0247               	subwf	((_Load+1)^(0+256)+31),w
 10277  0198  1D03               	skipz
 10278  0199  299C               	goto	u12765
 10279  019A  084C               	movf	(_Load^(0+256)+37),w
 10280  019B  0246               	subwf	(_Load^(0+256)+31),w
 10281  019C                     u12765:	
 10282  019C  1C03               	skipc
 10283  019D  29AB               	goto	l10813
 10284                           
 10285                           ;OverLoad_B1.c: 136: Load.ErrorCount++;
 10286  019E  3001               	movlw	1
 10287  019F  0020               	movlb	0	; select bank0
 10288  01A0  00A8               	movwf	??_Load_Main
 10289  01A1  0828               	movf	??_Load_Main,w
 10290  01A2  0022               	movlb	2	; select bank2
 10291  01A3  07D1               	addwf	(_Load^(0+256)+42),f
 10292                           
 10293                           ;OverLoad_B1.c: 137: if (Load.ErrorCount > Load.ErrorCountValue) {
 10294  01A4  0851               	movf	(_Load^(0+256)+42),w
 10295  01A5  0252               	subwf	(_Load^(0+256)+43),w
 10296  01A6  1803               	skipnc
 10297  01A7  0008               	return
 10298                           
 10299                           ;OverLoad_B1.c: 138: Load.ErrorCount = 0;
 10300  01A8  01D1               	clrf	(_Load^(0+256)+42)
 10301                           
 10302                           ;OverLoad_B1.c: 139: Load.ERROR = 1;
 10303  01A9  16A7               	bsf	_Load^(0+256),5
 10304                           
 10305                           ;OverLoad_B1.c: 161: }
 10306                           ;OverLoad_B1.c: 162: } else {
 10307  01AA  0008               	return
 10308  01AB                     l10813:	
 10309                           
 10310                           ;OverLoad_B1.c: 163: Load.ErrorCount = 0;
 10311  01AB  01D1               	clrf	(_Load^(0+256)+42)
 10312                           
 10313                           ;OverLoad_B1.c: 164: if (Load.Run == 1) {
 10314  01AC  1DA7               	btfss	_Load^(0+256),3
 10315  01AD  0008               	return
 10316                           
 10317                           ;OverLoad_B1.c: 165: Load.SafeCount++;
 10318  01AE  3001               	movlw	1
 10319  01AF  0020               	movlb	0	; select bank0
 10320  01B0  00A8               	movwf	??_Load_Main
 10321  01B1  0828               	movf	??_Load_Main,w
 10322  01B2  0022               	movlb	2	; select bank2
 10323  01B3  07D4               	addwf	(_Load^(0+256)+45),f
 10324                           
 10325                           ;OverLoad_B1.c: 166: if (Load.SafeCount >= 3) {
 10326  01B4  3003               	movlw	3
 10327  01B5  0254               	subwf	(_Load^(0+256)+45),w
 10328  01B6  1C03               	skipc
 10329  01B7  0008               	return
 10330                           
 10331                           ;OverLoad_B1.c: 167: Load.SafeCount = 0;
 10332  01B8  01D4               	clrf	(_Load^(0+256)+45)
 10333                           
 10334                           ;OverLoad_B1.c: 168: Load.OK = 1;
 10335  01B9  17A7               	bsf	_Load^(0+256),7
 10336                           
 10337                           ;OverLoad_B1.c: 169: Load.Run = 0;
 10338  01BA  11A7               	bcf	_Load^(0+256),3
 10339                           
 10340                           ;OverLoad_B1.c: 170: Load.Count = 0;
 10341  01BB  01D0               	clrf	(_Load^(0+256)+41)
 10342                           
 10343                           ;OverLoad_B1.c: 171: Load.TotalLoad = Load.AD;
 10344  01BC  0847               	movf	((_Load+1)^(0+256)+31),w
 10345  01BD  01B1               	clrf	((_Load+1)^(0+256)+9)
 10346  01BE  07B1               	addwf	((_Load+1)^(0+256)+9),f
 10347  01BF  0846               	movf	(_Load^(0+256)+31),w
 10348  01C0  01B0               	clrf	(_Load^(0+256)+9)
 10349  01C1  07B0               	addwf	(_Load^(0+256)+9),f
 10350                           
 10351                           ;OverLoad_B1.c: 172: Load.ErrorCountValue = 3;
 10352  01C2  3003               	movlw	3
 10353  01C3  0020               	movlb	0	; select bank0
 10354  01C4  00A8               	movwf	??_Load_Main
 10355  01C5  0828               	movf	??_Load_Main,w
 10356  01C6  0022               	movlb	2	; select bank2
 10357  01C7  00D2               	movwf	(_Load^(0+256)+43)
 10358                           
 10359                           ;OverLoad_B1.c: 196: }
 10360                           ;OverLoad_B1.c: 197: }
 10361                           ;OverLoad_B1.c: 198: }
 10362                           ;OverLoad_B1.c: 200: }
 10363                           ;OverLoad_B1.c: 201: }
 10364                           ;OverLoad_B1.c: 202: } else {
 10365  01C8  0008               	return
 10366  01C9                     l1740:	
 10367                           
 10368                           ;OverLoad_B1.c: 203: Load.ADtoGO = 1;
 10369  01C9  1627               	bsf	_Load^(0+256),4
 10370                           
 10371                           ;OverLoad_B1.c: 204: }
 10372                           ;OverLoad_B1.c: 205: } else {
 10373  01CA  0008               	return
 10374  01CB                     l1739:	
 10375                           
 10376                           ;OverLoad_B1.c: 206: if (Load.LightsON == 1) {
 10377  01CB  1D27               	btfss	_Load^(0+256),2
 10378  01CC  29DE               	goto	l10851
 10379                           
 10380                           ;OverLoad_B1.c: 207: Load.LightsON = 0;
 10381  01CD  1127               	bcf	_Load^(0+256),2
 10382                           
 10383                           ;OverLoad_B1.c: 209: Load.ADtoGO = 0;
 10384  01CE  1227               	bcf	_Load^(0+256),4
 10385                           
 10386                           ;OverLoad_B1.c: 210: Load.Time = 0;
 10387  01CF  01A8               	clrf	(_Load^(0+256)+1)
 10388  01D0  01A9               	clrf	((_Load+1)^(0+256)+1)
 10389                           
 10390                           ;OverLoad_B1.c: 211: setLoad_AH_AL_Restore();
 10391  01D1  319E  262E  3180   	fcall	_setLoad_AH_AL_Restore
 10392                           
 10393                           ;OverLoad_B1.c: 213: Load.ErrorCount = 0;
 10394  01D4  0022               	movlb	2	; select bank2
 10395  01D5  01D1               	clrf	(_Load^(0+256)+42)
 10396                           
 10397                           ;OverLoad_B1.c: 214: Load.SafeCount = 0;
 10398  01D6  01D4               	clrf	(_Load^(0+256)+45)
 10399                           
 10400                           ;OverLoad_B1.c: 216: Load.ADH = 0;
 10401  01D7  01AC               	clrf	(_Load^(0+256)+5)
 10402  01D8  01AD               	clrf	((_Load+1)^(0+256)+5)
 10403                           
 10404                           ;OverLoad_B1.c: 217: Load.ADL = 0;
 10405  01D9  01AE               	clrf	(_Load^(0+256)+7)
 10406  01DA  01AF               	clrf	((_Load+1)^(0+256)+7)
 10407                           
 10408                           ;OverLoad_B1.c: 223: Load.Run = 0;
 10409  01DB  11A7               	bcf	_Load^(0+256),3
 10410                           
 10411                           ;OverLoad_B1.c: 224: Load.Count = 0;
 10412  01DC  01D0               	clrf	(_Load^(0+256)+41)
 10413                           
 10414                           ;OverLoad_B1.c: 225: Load.OK = 0;
 10415  01DD  13A7               	bcf	_Load^(0+256),7
 10416  01DE                     l10851:	
 10417                           
 10418                           ;OverLoad_B1.c: 247: }
 10419                           ;OverLoad_B1.c: 248: if (Load.ERROR == 1) {
 10420  01DE  1EA7               	btfss	_Load^(0+256),5
 10421  01DF  0008               	return
 10422                           
 10423                           ;OverLoad_B1.c: 249: Load.ErrorTime++;
 10424  01E0  3001               	movlw	1
 10425  01E1  07AA               	addwf	(_Load^(0+256)+3),f
 10426  01E2  3000               	movlw	0
 10427  01E3  3DAB               	addwfc	((_Load+1)^(0+256)+3),f
 10428                           
 10429                           ;OverLoad_B1.c: 250: if (Load.ErrorTime >= 1000) {
 10430  01E4  3003               	movlw	3
 10431  01E5  022B               	subwf	((_Load+1)^(0+256)+3),w
 10432  01E6  30E8               	movlw	232
 10433  01E7  1903               	skipnz
 10434  01E8  022A               	subwf	(_Load^(0+256)+3),w
 10435  01E9  1C03               	skipc
 10436  01EA  0008               	return
 10437                           
 10438                           ;OverLoad_B1.c: 251: Load.ErrorTime = 0;
 10439  01EB  01AA               	clrf	(_Load^(0+256)+3)
 10440  01EC  01AB               	clrf	((_Load+1)^(0+256)+3)
 10441                           
 10442                           ;OverLoad_B1.c: 252: Load.ERROR = 0;
 10443  01ED  12A7               	bcf	_Load^(0+256),5
 10444                           
 10445                           ;OverLoad_B1.c: 253: }
 10446                           ;OverLoad_B1.c: 254: }
 10447                           ;OverLoad_B1.c: 255: }
 10448                           ;OverLoad_B1.c: 256: } else {
 10449  01EE  0008               	return
 10450  01EF                     l1729:	
 10451                           
 10452                           ;OverLoad_B1.c: 257: if (myMain.PowerON == 1) {
 10453  01EF  0021               	movlb	1	; select bank1
 10454  01F0  1C20               	btfss	_myMain^(0+128),0
 10455  01F1  0008               	return
 10456                           
 10457                           ;OverLoad_B1.c: 258: Load.Enable = 1;
 10458  01F2  0022               	movlb	2	; select bank2
 10459  01F3  1427               	bsf	_Load^(0+256),0
 10460  01F4  0008               	return
 10461  01F5                     __end_of_Load_Main:	
 10462                           
 10463                           	psect	text52
 10464  1D35                     __ptext52:	
 10465 ;; *************** function _getMain_Lights_Count *****************
 10466 ;; Defined at:
 10467 ;;		line 467 in file "../src/Main_B1.c"
 10468 ;; Parameters:    Size  Location     Type
 10469 ;;		None
 10470 ;; Auto vars:     Size  Location     Type
 10471 ;;  status2         1    2[BANK0 ] unsigned char 
 10472 ;;  status1         1    1[BANK0 ] unsigned char 
 10473 ;;  count           1    0[BANK0 ] unsigned char 
 10474 ;; Return value:  Size  Location     Type
 10475 ;;                  1    wreg      unsigned char 
 10476 ;; Registers used:
 10477 ;;		wreg, status,2, status,0
 10478 ;; Tracked objects:
 10479 ;;		On entry : 0/0
 10480 ;;		On exit  : 0/0
 10481 ;;		Unchanged: 0/0
 10482 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10483 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10484 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10485 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10486 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10487 ;;Total ram usage:        3 bytes
 10488 ;; Hardware stack levels used:    1
 10489 ;; Hardware stack levels required when called:    5
 10490 ;; This function calls:
 10491 ;;		Nothing
 10492 ;; This function is called by:
 10493 ;;		_Load_Main
 10494 ;; This function uses a non-reentrant model
 10495 ;;
 10496                           
 10497                           
 10498                           ;psect for function _getMain_Lights_Count
 10499  1D35                     _getMain_Lights_Count:	
 10500                           
 10501                           ;Main_B1.c: 468: char count = 0;
 10502                           
 10503                           ;incstack = 0
 10504                           ; Regs used in _getMain_Lights_Count: [wreg+status,2+status,0]
 10505  1D35  0020               	movlb	0	; select bank0
 10506  1D36  01A0               	clrf	getMain_Lights_Count@count
 10507                           
 10508                           ;Main_B1.c: 472: char status1 = 0;
 10509  1D37  01A1               	clrf	getMain_Lights_Count@status1
 10510                           
 10511                           ;Main_B1.c: 473: status1 = DimmerLights1.StatusFlag == 1 ? 1 : 0;
 10512  1D38  3000               	movlw	0
 10513  1D39  0022               	movlb	2	; select bank2
 10514  1D3A  1956               	btfsc	(_DimmerLights1^(0+256)+1),2	;volatile
 10515  1D3B  3001               	movlw	1
 10516  1D3C  0020               	movlb	0	; select bank0
 10517  1D3D  00A1               	movwf	getMain_Lights_Count@status1
 10518                           
 10519                           ;Main_B1.c: 476: char status2 = 0;
 10520  1D3E  01A2               	clrf	getMain_Lights_Count@status2
 10521                           
 10522                           ;Main_B1.c: 477: status2 = DimmerLights2.StatusFlag == 1 ? 1 : 0;
 10523  1D3F  3000               	movlw	0
 10524  1D40  0023               	movlb	3	; select bank3
 10525  1D41  193F               	btfsc	(_DimmerLights2^(0+384)+1),2	;volatile
 10526  1D42  3001               	movlw	1
 10527  1D43  0020               	movlb	0	; select bank0
 10528  1D44  00A2               	movwf	getMain_Lights_Count@status2
 10529                           
 10530                           ;Main_B1.c: 501: return count = (status1 + status2);
 10531  1D45  0821               	movf	getMain_Lights_Count@status1,w
 10532  1D46  0722               	addwf	getMain_Lights_Count@status2,w
 10533  1D47  00A0               	movwf	getMain_Lights_Count@count
 10534  1D48  0008               	return
 10535  1D49                     __end_of_getMain_Lights_Count:	
 10536                           
 10537                           	psect	text53
 10538  1B27                     __ptext53:	
 10539 ;; *************** function _getDimmer_Load_Status *****************
 10540 ;; Defined at:
 10541 ;;		line 888 in file "../src/Dimmer_B1.c"
 10542 ;; Parameters:    Size  Location     Type
 10543 ;;		None
 10544 ;; Auto vars:     Size  Location     Type
 10545 ;;  status          1    0[BANK0 ] unsigned char 
 10546 ;; Return value:  Size  Location     Type
 10547 ;;                  1    wreg      unsigned char 
 10548 ;; Registers used:
 10549 ;;		wreg, status,2
 10550 ;; Tracked objects:
 10551 ;;		On entry : 0/0
 10552 ;;		On exit  : 0/0
 10553 ;;		Unchanged: 0/0
 10554 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10555 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10556 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10557 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10558 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10559 ;;Total ram usage:        1 bytes
 10560 ;; Hardware stack levels used:    1
 10561 ;; Hardware stack levels required when called:    5
 10562 ;; This function calls:
 10563 ;;		Nothing
 10564 ;; This function is called by:
 10565 ;;		_Load_Main
 10566 ;; This function uses a non-reentrant model
 10567 ;;
 10568                           
 10569                           
 10570                           ;psect for function _getDimmer_Load_Status
 10571  1B27                     _getDimmer_Load_Status:	
 10572                           
 10573                           ;Dimmer_B1.c: 889: char status = Dimmer.Load_Status == 1 ? 1 : 0;
 10574                           
 10575                           ;incstack = 0
 10576                           ; Regs used in _getDimmer_Load_Status: [wreg+status,2]
 10577  1B27  3000               	movlw	0
 10578  1B28  0021               	movlb	1	; select bank1
 10579  1B29  19C6               	btfsc	_Dimmer^(0+128),3	;volatile
 10580  1B2A  3001               	movlw	1
 10581  1B2B  0020               	movlb	0	; select bank0
 10582  1B2C  00A0               	movwf	getDimmer_Load_Status@status
 10583                           
 10584                           ;Dimmer_B1.c: 890: return status;
 10585  1B2D  0820               	movf	getDimmer_Load_Status@status,w
 10586  1B2E  0008               	return
 10587  1B2F                     __end_of_getDimmer_Load_Status:	
 10588                           
 10589                           	psect	text54
 10590  1B1F                     __ptext54:	
 10591 ;; *************** function _getDimmer_LoadGO *****************
 10592 ;; Defined at:
 10593 ;;		line 623 in file "../src/Dimmer_B1.c"
 10594 ;; Parameters:    Size  Location     Type
 10595 ;;		None
 10596 ;; Auto vars:     Size  Location     Type
 10597 ;;  loadgo          1    0[BANK0 ] unsigned char 
 10598 ;; Return value:  Size  Location     Type
 10599 ;;                  1    wreg      unsigned char 
 10600 ;; Registers used:
 10601 ;;		wreg, status,2
 10602 ;; Tracked objects:
 10603 ;;		On entry : 0/0
 10604 ;;		On exit  : 0/0
 10605 ;;		Unchanged: 0/0
 10606 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10607 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10608 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10609 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10610 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10611 ;;Total ram usage:        1 bytes
 10612 ;; Hardware stack levels used:    1
 10613 ;; Hardware stack levels required when called:    5
 10614 ;; This function calls:
 10615 ;;		Nothing
 10616 ;; This function is called by:
 10617 ;;		_Load_Main
 10618 ;; This function uses a non-reentrant model
 10619 ;;
 10620                           
 10621                           
 10622                           ;psect for function _getDimmer_LoadGO
 10623  1B1F                     _getDimmer_LoadGO:	
 10624                           
 10625                           ;Dimmer_B1.c: 624: char loadgo = Dimmer.LoadGO == 1 ? 1 : 0;
 10626                           
 10627                           ;incstack = 0
 10628                           ; Regs used in _getDimmer_LoadGO: [wreg+status,2]
 10629  1B1F  3000               	movlw	0
 10630  1B20  0021               	movlb	1	; select bank1
 10631  1B21  1946               	btfsc	_Dimmer^(0+128),2	;volatile
 10632  1B22  3001               	movlw	1
 10633  1B23  0020               	movlb	0	; select bank0
 10634  1B24  00A0               	movwf	getDimmer_LoadGO@loadgo
 10635                           
 10636                           ;Dimmer_B1.c: 625: return loadgo;
 10637  1B25  0820               	movf	getDimmer_LoadGO@loadgo,w
 10638  1B26  0008               	return
 10639  1B27                     __end_of_getDimmer_LoadGO:	
 10640                           
 10641                           	psect	text55
 10642  10DB                     __ptext55:	
 10643 ;; *************** function _getAll_DimmerLights_AdjSw *****************
 10644 ;; Defined at:
 10645 ;;		line 832 in file "../src/Dimmer_B1.c"
 10646 ;; Parameters:    Size  Location     Type
 10647 ;;		None
 10648 ;; Auto vars:     Size  Location     Type
 10649 ;;  i               2    4[BANK0 ] int 
 10650 ;;  adjsw           1    6[BANK0 ] unsigned char 
 10651 ;;  count           1    3[BANK0 ] unsigned char 
 10652 ;; Return value:  Size  Location     Type
 10653 ;;                  1    wreg      unsigned char 
 10654 ;; Registers used:
 10655 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10656 ;; Tracked objects:
 10657 ;;		On entry : 0/0
 10658 ;;		On exit  : 0/0
 10659 ;;		Unchanged: 0/0
 10660 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10661 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10662 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10663 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10664 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10665 ;;Total ram usage:        5 bytes
 10666 ;; Hardware stack levels used:    1
 10667 ;; Hardware stack levels required when called:    6
 10668 ;; This function calls:
 10669 ;;		_DimmerLightsPointSelect
 10670 ;; This function is called by:
 10671 ;;		_Load_Main
 10672 ;; This function uses a non-reentrant model
 10673 ;;
 10674                           
 10675                           
 10676                           ;psect for function _getAll_DimmerLights_AdjSw
 10677  10DB                     _getAll_DimmerLights_AdjSw:	
 10678                           
 10679                           ;Dimmer_B1.c: 833: char count = 2;
 10680                           
 10681                           ;incstack = 0
 10682                           ; Regs used in _getAll_DimmerLights_AdjSw: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cs
      +                          tack]
 10683  10DB  3002               	movlw	2
 10684  10DC  0020               	movlb	0	; select bank0
 10685  10DD  00A2               	movwf	??_getAll_DimmerLights_AdjSw
 10686  10DE  0822               	movf	??_getAll_DimmerLights_AdjSw,w
 10687  10DF  00A3               	movwf	getAll_DimmerLights_AdjSw@count
 10688                           
 10689                           ;Dimmer_B1.c: 834: char adjsw = 0;
 10690  10E0  01A6               	clrf	getAll_DimmerLights_AdjSw@adjsw
 10691                           
 10692                           ;Dimmer_B1.c: 836: for (int i = 0; i < count; i++) {
 10693  10E1  01A4               	clrf	getAll_DimmerLights_AdjSw@i
 10694  10E2  01A5               	clrf	getAll_DimmerLights_AdjSw@i+1
 10695  10E3                     l10023:	
 10696  10E3  0825               	movf	getAll_DimmerLights_AdjSw@i+1,w
 10697  10E4  3A80               	xorlw	128
 10698  10E5  00A2               	movwf	??_getAll_DimmerLights_AdjSw
 10699  10E6  3080               	movlw	128
 10700  10E7  0222               	subwf	??_getAll_DimmerLights_AdjSw,w
 10701  10E8  1D03               	skipz
 10702  10E9  28EC               	goto	u11365
 10703  10EA  0823               	movf	getAll_DimmerLights_AdjSw@count,w
 10704  10EB  0224               	subwf	getAll_DimmerLights_AdjSw@i,w
 10705  10EC                     u11365:	
 10706  10EC  1803               	btfsc	3,0
 10707  10ED  2905               	goto	l10025
 10708                           
 10709                           ;Dimmer_B1.c: 837: DimmerLightsPointSelect(i + 1);
 10710  10EE  0020               	movlb	0	; select bank0
 10711  10EF  0824               	movf	getAll_DimmerLights_AdjSw@i,w
 10712  10F0  3E01               	addlw	1
 10713  10F1  319C  2486  3190   	fcall	_DimmerLightsPointSelect
 10714                           
 10715                           ;Dimmer_B1.c: 838: if (adjsw == 0) {
 10716  10F4  0020               	movlb	0	; select bank0
 10717  10F5  08A6               	movf	getAll_DimmerLights_AdjSw@adjsw,f
 10718  10F6  1D03               	skipz
 10719  10F7  2900               	goto	l10021
 10720                           
 10721                           ;Dimmer_B1.c: 839: adjsw = DimmerLights->AdjSw == 1 ? 1 : 0;
 10722  10F8  0A6F               	incf	_DimmerLights,w
 10723  10F9  0086               	movwf	6
 10724  10FA  3001               	movlw	1	; select bank2/3
 10725  10FB  0087               	movwf	7
 10726  10FC  3000               	movlw	0
 10727  10FD  1B01               	btfsc	1,6
 10728  10FE  3001               	movlw	1
 10729  10FF  00A6               	movwf	getAll_DimmerLights_AdjSw@adjsw
 10730  1100                     l10021:	
 10731  1100  3001               	movlw	1
 10732  1101  07A4               	addwf	getAll_DimmerLights_AdjSw@i,f
 10733  1102  3000               	movlw	0
 10734  1103  3DA5               	addwfc	getAll_DimmerLights_AdjSw@i+1,f
 10735  1104  28E3               	goto	l10023
 10736  1105                     l10025:	
 10737                           
 10738                           ;Dimmer_B1.c: 840: }
 10739                           ;Dimmer_B1.c: 841: }
 10740                           ;Dimmer_B1.c: 842: return adjsw;
 10741  1105  0020               	movlb	0	; select bank0
 10742  1106  0826               	movf	getAll_DimmerLights_AdjSw@adjsw,w
 10743  1107  0008               	return
 10744  1108                     __end_of_getAll_DimmerLights_AdjSw:	
 10745                           
 10746                           	psect	text56
 10747  1E67                     __ptext56:	
 10748 ;; *************** function ___wmul *****************
 10749 ;; Defined at:
 10750 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul16.c"
 10751 ;; Parameters:    Size  Location     Type
 10752 ;;  multiplier      2    0[BANK0 ] unsigned int 
 10753 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 10754 ;; Auto vars:     Size  Location     Type
 10755 ;;  product         2    4[BANK0 ] unsigned int 
 10756 ;; Return value:  Size  Location     Type
 10757 ;;                  2    0[BANK0 ] unsigned int 
 10758 ;; Registers used:
 10759 ;;		wreg, status,2, status,0
 10760 ;; Tracked objects:
 10761 ;;		On entry : 0/0
 10762 ;;		On exit  : 0/0
 10763 ;;		Unchanged: 0/0
 10764 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10765 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10766 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10767 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10768 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10769 ;;Total ram usage:        6 bytes
 10770 ;; Hardware stack levels used:    1
 10771 ;; Hardware stack levels required when called:    5
 10772 ;; This function calls:
 10773 ;;		Nothing
 10774 ;; This function is called by:
 10775 ;;		_Load_Main
 10776 ;; This function uses a non-reentrant model
 10777 ;;
 10778                           
 10779                           
 10780                           ;psect for function ___wmul
 10781  1E67                     ___wmul:	
 10782                           
 10783                           ;incstack = 0
 10784                           ; Regs used in ___wmul: [wreg+status,2+status,0]
 10785  1E67  0020               	movlb	0	; select bank0
 10786  1E68  01A4               	clrf	___wmul@product
 10787  1E69  01A5               	clrf	___wmul@product+1
 10788  1E6A                     l10425:	
 10789  1E6A  1C20               	btfss	___wmul@multiplier,0
 10790  1E6B  2E70               	goto	l2872
 10791  1E6C  0822               	movf	___wmul@multiplicand,w
 10792  1E6D  07A4               	addwf	___wmul@product,f
 10793  1E6E  0823               	movf	___wmul@multiplicand+1,w
 10794  1E6F  3DA5               	addwfc	___wmul@product+1,f
 10795  1E70                     l2872:	
 10796  1E70  3001               	movlw	1
 10797  1E71                     u12045:	
 10798  1E71  35A2               	lslf	___wmul@multiplicand,f
 10799  1E72  0DA3               	rlf	___wmul@multiplicand+1,f
 10800  1E73  0B89               	decfsz	9,f
 10801  1E74  2E71               	goto	u12045
 10802  1E75  3001               	movlw	1
 10803  1E76                     u12055:	
 10804  1E76  36A1               	lsrf	___wmul@multiplier+1,f
 10805  1E77  0CA0               	rrf	___wmul@multiplier,f
 10806  1E78  0B89               	decfsz	9,f
 10807  1E79  2E76               	goto	u12055
 10808  1E7A  0821               	movf	___wmul@multiplier+1,w
 10809  1E7B  0420               	iorwf	___wmul@multiplier,w
 10810  1E7C  1D03               	skipz
 10811  1E7D  2E6A               	goto	l10425
 10812  1E7E  0825               	movf	___wmul@product+1,w
 10813  1E7F  01A1               	clrf	?___wmul+1
 10814  1E80  07A1               	addwf	?___wmul+1,f
 10815  1E81  0824               	movf	___wmul@product,w
 10816  1E82  01A0               	clrf	?___wmul
 10817  1E83  07A0               	addwf	?___wmul,f
 10818  1E84  0008               	return
 10819  1E85                     __end_of___wmul:	
 10820                           
 10821                           	psect	text57
 10822  1203                     __ptext57:	
 10823 ;; *************** function ___lwdiv *****************
 10824 ;; Defined at:
 10825 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\lwdiv.c"
 10826 ;; Parameters:    Size  Location     Type
 10827 ;;  divisor         2    0[BANK0 ] unsigned int 
 10828 ;;  dividend        2    2[BANK0 ] unsigned int 
 10829 ;; Auto vars:     Size  Location     Type
 10830 ;;  quotient        2    6[BANK0 ] unsigned int 
 10831 ;;  counter         1    5[BANK0 ] unsigned char 
 10832 ;; Return value:  Size  Location     Type
 10833 ;;                  2    0[BANK0 ] unsigned int 
 10834 ;; Registers used:
 10835 ;;		wreg, status,2, status,0
 10836 ;; Tracked objects:
 10837 ;;		On entry : 0/0
 10838 ;;		On exit  : 0/0
 10839 ;;		Unchanged: 0/0
 10840 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10841 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10842 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10843 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10844 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10845 ;;Total ram usage:        8 bytes
 10846 ;; Hardware stack levels used:    1
 10847 ;; Hardware stack levels required when called:    5
 10848 ;; This function calls:
 10849 ;;		Nothing
 10850 ;; This function is called by:
 10851 ;;		_Load_Main
 10852 ;; This function uses a non-reentrant model
 10853 ;;
 10854                           
 10855                           
 10856                           ;psect for function ___lwdiv
 10857  1203                     ___lwdiv:	
 10858                           
 10859                           ;incstack = 0
 10860                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
 10861  1203  0020               	movlb	0	; select bank0
 10862  1204  01A6               	clrf	___lwdiv@quotient
 10863  1205  01A7               	clrf	___lwdiv@quotient+1
 10864  1206  0821               	movf	___lwdiv@divisor+1,w
 10865  1207  0420               	iorwf	___lwdiv@divisor,w
 10866  1208  1903               	skipnz
 10867  1209  2A33               	goto	l10457
 10868  120A  01A5               	clrf	___lwdiv@counter
 10869  120B  0AA5               	incf	___lwdiv@counter,f
 10870  120C                     l10445:	
 10871  120C  1BA1               	btfsc	___lwdiv@divisor+1,7
 10872  120D  2A18               	goto	l10447
 10873  120E  3001               	movlw	1
 10874  120F                     u12085:	
 10875  120F  35A0               	lslf	___lwdiv@divisor,f
 10876  1210  0DA1               	rlf	___lwdiv@divisor+1,f
 10877  1211  0B89               	decfsz	9,f
 10878  1212  2A0F               	goto	u12085
 10879  1213  3001               	movlw	1
 10880  1214  00A4               	movwf	??___lwdiv
 10881  1215  0824               	movf	??___lwdiv,w
 10882  1216  07A5               	addwf	___lwdiv@counter,f
 10883  1217  2A0C               	goto	l10445
 10884  1218                     l10447:	
 10885  1218  3001               	movlw	1
 10886  1219                     u12105:	
 10887  1219  35A6               	lslf	___lwdiv@quotient,f
 10888  121A  0DA7               	rlf	___lwdiv@quotient+1,f
 10889  121B  0B89               	decfsz	9,f
 10890  121C  2A19               	goto	u12105
 10891  121D  0821               	movf	___lwdiv@divisor+1,w
 10892  121E  0223               	subwf	___lwdiv@dividend+1,w
 10893  121F  1D03               	skipz
 10894  1220  2A23               	goto	u12115
 10895  1221  0820               	movf	___lwdiv@divisor,w
 10896  1222  0222               	subwf	___lwdiv@dividend,w
 10897  1223                     u12115:	
 10898  1223  1C03               	skipc
 10899  1224  2A2A               	goto	l10453
 10900  1225  0820               	movf	___lwdiv@divisor,w
 10901  1226  02A2               	subwf	___lwdiv@dividend,f
 10902  1227  0821               	movf	___lwdiv@divisor+1,w
 10903  1228  3BA3               	subwfb	___lwdiv@dividend+1,f
 10904  1229  1426               	bsf	___lwdiv@quotient,0
 10905  122A                     l10453:	
 10906  122A  3001               	movlw	1
 10907  122B                     u12125:	
 10908  122B  36A1               	lsrf	___lwdiv@divisor+1,f
 10909  122C  0CA0               	rrf	___lwdiv@divisor,f
 10910  122D  0B89               	decfsz	9,f
 10911  122E  2A2B               	goto	u12125
 10912  122F  3001               	movlw	1
 10913  1230  02A5               	subwf	___lwdiv@counter,f
 10914  1231  1D03               	btfss	3,2
 10915  1232  2A18               	goto	l10447
 10916  1233                     l10457:	
 10917  1233  0827               	movf	___lwdiv@quotient+1,w
 10918  1234  01A1               	clrf	?___lwdiv+1
 10919  1235  07A1               	addwf	?___lwdiv+1,f
 10920  1236  0826               	movf	___lwdiv@quotient,w
 10921  1237  01A0               	clrf	?___lwdiv
 10922  1238  07A0               	addwf	?___lwdiv,f
 10923  1239  0008               	return
 10924  123A                     __end_of___lwdiv:	
 10925                           
 10926                           	psect	text58
 10927  1AC2                     __ptext58:	
 10928 ;; *************** function _Load_Initialization *****************
 10929 ;; Defined at:
 10930 ;;		line 9 in file "../src/OverLoad_B1.c"
 10931 ;; Parameters:    Size  Location     Type
 10932 ;;		None
 10933 ;; Auto vars:     Size  Location     Type
 10934 ;;		None
 10935 ;; Return value:  Size  Location     Type
 10936 ;;		None               void
 10937 ;; Registers used:
 10938 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10939 ;; Tracked objects:
 10940 ;;		On entry : 0/0
 10941 ;;		On exit  : 0/0
 10942 ;;		Unchanged: 0/0
 10943 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10944 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10945 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10946 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10947 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10948 ;;Total ram usage:        0 bytes
 10949 ;; Hardware stack levels used:    1
 10950 ;; Hardware stack levels required when called:    6
 10951 ;; This function calls:
 10952 ;;		_setLoad_AH_AL_Restore
 10953 ;; This function is called by:
 10954 ;;		_main
 10955 ;; This function uses a non-reentrant model
 10956 ;;
 10957                           
 10958                           
 10959                           ;psect for function _Load_Initialization
 10960  1AC2                     _Load_Initialization:	
 10961                           
 10962                           ;OverLoad_B1.c: 11: setLoad_AH_AL_Restore();
 10963                           
 10964                           ;incstack = 0
 10965                           ; Regs used in _Load_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10966  1AC2  319E  262E         	fcall	_setLoad_AH_AL_Restore
 10967  1AC4  0008               	return
 10968  1AC5                     __end_of_Load_Initialization:	
 10969                           
 10970                           	psect	text59
 10971  1E2E                     __ptext59:	
 10972 ;; *************** function _setLoad_AH_AL_Restore *****************
 10973 ;; Defined at:
 10974 ;;		line 284 in file "../src/OverLoad_B1.c"
 10975 ;; Parameters:    Size  Location     Type
 10976 ;;		None
 10977 ;; Auto vars:     Size  Location     Type
 10978 ;;  i               1    1[BANK0 ] unsigned char 
 10979 ;; Return value:  Size  Location     Type
 10980 ;;		None               void
 10981 ;; Registers used:
 10982 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10983 ;; Tracked objects:
 10984 ;;		On entry : 0/0
 10985 ;;		On exit  : 0/0
 10986 ;;		Unchanged: 0/0
 10987 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10988 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10989 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10990 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10991 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10992 ;;Total ram usage:        2 bytes
 10993 ;; Hardware stack levels used:    1
 10994 ;; Hardware stack levels required when called:    5
 10995 ;; This function calls:
 10996 ;;		Nothing
 10997 ;; This function is called by:
 10998 ;;		_Load_Initialization
 10999 ;;		_Load_Main
 11000 ;; This function uses a non-reentrant model
 11001 ;;
 11002                           
 11003                           
 11004                           ;psect for function _setLoad_AH_AL_Restore
 11005  1E2E                     _setLoad_AH_AL_Restore:	
 11006                           
 11007                           ;OverLoad_B1.c: 285: char i;
 11008                           ;OverLoad_B1.c: 286: for (i = 0; i < 5; i++) {
 11009                           
 11010                           ;incstack = 0
 11011                           ; Regs used in _setLoad_AH_AL_Restore: [wreg+fsr1l+fsr1h+status,2+status,0]
 11012  1E2E  0020               	movlb	0	; select bank0
 11013  1E2F  01A1               	clrf	setLoad_AH_AL_Restore@i
 11014  1E30                     L6:	
 11015  1E30  3005               	movlw	5
 11016  1E31  0221               	subwf	setLoad_AH_AL_Restore@i,w
 11017  1E32  1803               	btfsc	3,0
 11018  1E33  0008               	return
 11019                           
 11020                           ;OverLoad_B1.c: 287: Load.AH[i] = 0;
 11021  1E34  3521               	lslf	setLoad_AH_AL_Restore@i,w
 11022  1E35  3E32               	addlw	(_Load+11)& (0+255)
 11023  1E36  0086               	movwf	6
 11024  1E37  3001               	movlw	1	; select bank2/3
 11025  1E38  0087               	movwf	7
 11026  1E39  3000               	movlw	0
 11027  1E3A  3FC0               	movwi [0]fsr1
 11028  1E3B  3FC1               	movwi [1]fsr1
 11029                           
 11030                           ;OverLoad_B1.c: 288: Load.AL[i] = 0xffff;
 11031  1E3C  3521               	lslf	setLoad_AH_AL_Restore@i,w
 11032  1E3D  3E3C               	addlw	(_Load+21)& (0+255)
 11033  1E3E  0086               	movwf	6
 11034  1E3F  3001               	movlw	1	; select bank2/3
 11035  1E40  0087               	movwf	7
 11036  1E41  30FF               	movlw	255
 11037  1E42  3FC0               	movwi [0]fsr1
 11038  1E43  30FF               	movlw	255
 11039  1E44  3FC1               	movwi [1]fsr1
 11040  1E45  3001               	movlw	1
 11041  1E46  00A0               	movwf	??_setLoad_AH_AL_Restore
 11042  1E47  0820               	movf	??_setLoad_AH_AL_Restore,w
 11043  1E48  07A1               	addwf	setLoad_AH_AL_Restore@i,f
 11044  1E49  2E30               	goto	L6
 11045  1E4A                     __end_of_setLoad_AH_AL_Restore:	
 11046                           
 11047                           	psect	text60
 11048  1B8F                     __ptext60:	
 11049 ;; *************** function _LED_Main *****************
 11050 ;; Defined at:
 11051 ;;		line 47 in file "../src/LED_B1.c"
 11052 ;; Parameters:    Size  Location     Type
 11053 ;;		None
 11054 ;; Auto vars:     Size  Location     Type
 11055 ;;		None
 11056 ;; Return value:  Size  Location     Type
 11057 ;;		None               void
 11058 ;; Registers used:
 11059 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11060 ;; Tracked objects:
 11061 ;;		On entry : 0/0
 11062 ;;		On exit  : 0/0
 11063 ;;		Unchanged: 0/0
 11064 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11065 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11066 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11067 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11068 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11069 ;;Total ram usage:        0 bytes
 11070 ;; Hardware stack levels used:    1
 11071 ;; Hardware stack levels required when called:    7
 11072 ;; This function calls:
 11073 ;;		_setLED_Main
 11074 ;; This function is called by:
 11075 ;;		_main
 11076 ;; This function uses a non-reentrant model
 11077 ;;
 11078                           
 11079                           
 11080                           ;psect for function _LED_Main
 11081  1B8F                     _LED_Main:	
 11082                           
 11083                           ;LED_B1.c: 53: setLED_Main(1);
 11084                           
 11085                           ;incstack = 0
 11086                           ; Regs used in _LED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11087  1B8F  3001               	movlw	1
 11088  1B90  3193  239F  319B   	fcall	_setLED_Main
 11089                           
 11090                           ;LED_B1.c: 56: setLED_Main(2);
 11091  1B93  3002               	movlw	2
 11092  1B94  3193  239F  319B   	fcall	_setLED_Main
 11093                           
 11094                           ;LED_B1.c: 62: setLED_Main(99);
 11095  1B97  3063               	movlw	99
 11096  1B98  3193  239F         	fcall	_setLED_Main
 11097  1B9A  0008               	return
 11098  1B9B                     __end_of_LED_Main:	
 11099                           
 11100                           	psect	text61
 11101  139F                     __ptext61:	
 11102 ;; *************** function _setLED_Main *****************
 11103 ;; Defined at:
 11104 ;;		line 221 in file "../src/LED_B1.c"
 11105 ;; Parameters:    Size  Location     Type
 11106 ;;  led             1    wreg     unsigned char 
 11107 ;; Auto vars:     Size  Location     Type
 11108 ;;  led             1    4[BANK0 ] unsigned char 
 11109 ;; Return value:  Size  Location     Type
 11110 ;;		None               void
 11111 ;; Registers used:
 11112 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11113 ;; Tracked objects:
 11114 ;;		On entry : 0/0
 11115 ;;		On exit  : 0/0
 11116 ;;		Unchanged: 0/0
 11117 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11118 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11119 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11120 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11121 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11122 ;;Total ram usage:        3 bytes
 11123 ;; Hardware stack levels used:    1
 11124 ;; Hardware stack levels required when called:    6
 11125 ;; This function calls:
 11126 ;;		_LedPointSelect
 11127 ;; This function is called by:
 11128 ;;		_LED_Main
 11129 ;; This function uses a non-reentrant model
 11130 ;;
 11131                           
 11132                           
 11133                           ;psect for function _setLED_Main
 11134  139F                     _setLED_Main:	
 11135                           
 11136                           ;incstack = 0
 11137                           ; Regs used in _setLED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11138                           ;setLED_Main@led stored from wreg
 11139  139F  0020               	movlb	0	; select bank0
 11140  13A0  00A4               	movwf	setLED_Main@led
 11141                           
 11142                           ;LED_B1.c: 222: LedPointSelect(led);
 11143  13A1  0824               	movf	setLED_Main@led,w
 11144  13A2  319E  26C3  3193   	fcall	_LedPointSelect
 11145                           
 11146                           ;LED_B1.c: 223: if (LED->GO == 1) {
 11147  13A5  0021               	movlb	1	; select bank1
 11148  13A6  084D               	movf	_LED^(0+128),w
 11149  13A7  0086               	movwf	6
 11150  13A8  3001               	movlw	1	; select bank2/3
 11151  13A9  0087               	movwf	7
 11152  13AA  1C81               	btfss	1,1
 11153  13AB  0008               	return
 11154                           
 11155                           ;LED_B1.c: 224: LED->Time++;
 11156  13AC  0A4D               	incf	_LED^(0+128),w
 11157  13AD  0086               	movwf	6
 11158  13AE  3001               	movlw	1	; select bank2/3
 11159  13AF  0087               	movwf	7
 11160  13B0  3001               	movlw	1
 11161  13B1  0781               	addwf	1,f
 11162  13B2  3141               	addfsr 1,1
 11163  13B3  1803               	skipnc
 11164  13B4  0A81               	incf	1,f
 11165                           
 11166                           ;LED_B1.c: 225: if (LED->Time >= 500 / 10) {
 11167  13B5  0A4D               	incf	_LED^(0+128),w
 11168  13B6  0086               	movwf	6
 11169  13B7  3001               	movlw	1	; select bank2/3
 11170  13B8  0087               	movwf	7
 11171  13B9  3F40               	moviw [0]fsr1
 11172  13BA  0020               	movlb	0	; select bank0
 11173  13BB  00A2               	movwf	??_setLED_Main
 11174  13BC  3F41               	moviw [1]fsr1
 11175  13BD  00A3               	movwf	??_setLED_Main+1
 11176  13BE  3000               	movlw	0
 11177  13BF  0223               	subwf	??_setLED_Main+1,w
 11178  13C0  3032               	movlw	50
 11179  13C1  1903               	skipnz
 11180  13C2  0222               	subwf	??_setLED_Main,w
 11181  13C3  1C03               	skipc
 11182  13C4  0008               	return
 11183                           
 11184                           ;LED_B1.c: 226: LED->Time = 0;
 11185  13C5  0021               	movlb	1	; select bank1
 11186  13C6  0A4D               	incf	_LED^(0+128),w
 11187  13C7  0086               	movwf	6
 11188  13C8  3001               	movlw	1	; select bank2/3
 11189  13C9  0087               	movwf	7
 11190  13CA  3000               	movlw	0
 11191  13CB  3FC0               	movwi [0]fsr1
 11192  13CC  3FC1               	movwi [1]fsr1
 11193                           
 11194                           ;LED_B1.c: 228: if (led == 1) {
 11195  13CD  0020               	movlb	0	; select bank0
 11196  13CE  0824               	movf	setLED_Main@led,w
 11197  13CF  3A01               	xorlw	1
 11198                           
 11199                           ;LED_B1.c: 229: RA3 = RA3 == 1 ? 0 : 1;
 11200  13D0  3008               	movlw	8
 11201  13D1  1903               	btfsc	3,2
 11202  13D2  068C               	xorwf	12,f
 11203                           
 11204                           ;LED_B1.c: 230: }
 11205                           ;LED_B1.c: 233: if (led == 2) {
 11206  13D3  0824               	movf	setLED_Main@led,w
 11207  13D4  3A02               	xorlw	2
 11208  13D5  1D03               	skipz
 11209  13D6  2BD9               	goto	l1067
 11210                           
 11211                           ;LED_B1.c: 234: RC7 = RC7 == 1 ? 0 : 1;
 11212  13D7  3080               	movlw	128
 11213  13D8  068E               	xorwf	14,f
 11214  13D9                     l1067:	
 11215                           
 11216                           ;LED_B1.c: 235: }
 11217                           ;LED_B1.c: 243: if (led == 99) {
 11218  13D9  0824               	movf	setLED_Main@led,w
 11219  13DA  3A63               	xorlw	99
 11220  13DB  1D03               	skipz
 11221  13DC  0008               	return
 11222                           
 11223                           ;LED_B1.c: 244: RB5 = RB5 == 1 ? 0 : 1;
 11224  13DD  3020               	movlw	32
 11225  13DE  068D               	xorwf	13,f
 11226  13DF  0008               	return
 11227  13E0                     __end_of_setLED_Main:	
 11228                           
 11229                           	psect	text62
 11230  1B83                     __ptext62:	
 11231 ;; *************** function _LED_Initialization *****************
 11232 ;; Defined at:
 11233 ;;		line 31 in file "../src/LED_B1.c"
 11234 ;; Parameters:    Size  Location     Type
 11235 ;;		None
 11236 ;; Auto vars:     Size  Location     Type
 11237 ;;		None
 11238 ;; Return value:  Size  Location     Type
 11239 ;;		None               void
 11240 ;; Registers used:
 11241 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11242 ;; Tracked objects:
 11243 ;;		On entry : 0/0
 11244 ;;		On exit  : 0/0
 11245 ;;		Unchanged: 0/0
 11246 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11247 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11248 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11249 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11250 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11251 ;;Total ram usage:        0 bytes
 11252 ;; Hardware stack levels used:    1
 11253 ;; Hardware stack levels required when called:    8
 11254 ;; This function calls:
 11255 ;;		_setLED_Initialization
 11256 ;; This function is called by:
 11257 ;;		_main
 11258 ;; This function uses a non-reentrant model
 11259 ;;
 11260                           
 11261                           
 11262                           ;psect for function _LED_Initialization
 11263  1B83                     _LED_Initialization:	
 11264                           
 11265                           ;LED_B1.c: 33: setLED_Initialization(1);
 11266                           
 11267                           ;incstack = 0
 11268                           ; Regs used in _LED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11269  1B83  3001               	movlw	1
 11270  1B84  319C  2450  319B   	fcall	_setLED_Initialization
 11271                           
 11272                           ;LED_B1.c: 36: setLED_Initialization(2);
 11273  1B87  3002               	movlw	2
 11274  1B88  319C  2450  319B   	fcall	_setLED_Initialization
 11275                           
 11276                           ;LED_B1.c: 42: setLED_Initialization(99);
 11277  1B8B  3063               	movlw	99
 11278  1B8C  319C  2450         	fcall	_setLED_Initialization
 11279  1B8E  0008               	return
 11280  1B8F                     __end_of_LED_Initialization:	
 11281                           
 11282                           	psect	text63
 11283  1C50                     __ptext63:	
 11284 ;; *************** function _setLED_Initialization *****************
 11285 ;; Defined at:
 11286 ;;		line 69 in file "../src/LED_B1.c"
 11287 ;; Parameters:    Size  Location     Type
 11288 ;;  led             1    wreg     unsigned char 
 11289 ;; Auto vars:     Size  Location     Type
 11290 ;;  led             1    4[BANK0 ] unsigned char 
 11291 ;; Return value:  Size  Location     Type
 11292 ;;		None               void
 11293 ;; Registers used:
 11294 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11295 ;; Tracked objects:
 11296 ;;		On entry : 0/0
 11297 ;;		On exit  : 0/0
 11298 ;;		Unchanged: 0/0
 11299 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11300 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11301 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11302 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11303 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11304 ;;Total ram usage:        1 bytes
 11305 ;; Hardware stack levels used:    1
 11306 ;; Hardware stack levels required when called:    7
 11307 ;; This function calls:
 11308 ;;		_LedPointSelect
 11309 ;;		_setLED
 11310 ;; This function is called by:
 11311 ;;		_LED_Initialization
 11312 ;; This function uses a non-reentrant model
 11313 ;;
 11314                           
 11315                           
 11316                           ;psect for function _setLED_Initialization
 11317  1C50                     _setLED_Initialization:	
 11318                           
 11319                           ;incstack = 0
 11320                           ; Regs used in _setLED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 11321                           ;setLED_Initialization@led stored from wreg
 11322  1C50  0020               	movlb	0	; select bank0
 11323  1C51  00A4               	movwf	setLED_Initialization@led
 11324                           
 11325                           ;LED_B1.c: 70: LedPointSelect(led);
 11326  1C52  0824               	movf	setLED_Initialization@led,w
 11327  1C53  319E  26C3  319C   	fcall	_LedPointSelect
 11328                           
 11329                           ;LED_B1.c: 71: LED->Enable = 1;
 11330  1C56  0021               	movlb	1	; select bank1
 11331  1C57  084D               	movf	_LED^(0+128),w
 11332  1C58  0086               	movwf	6
 11333  1C59  3001               	movlw	1	; select bank2/3
 11334  1C5A  0087               	movwf	7
 11335  1C5B  1401               	bsf	1,0
 11336                           
 11337                           ;LED_B1.c: 72: setLED(led, 0);
 11338  1C5C  0020               	movlb	0	; select bank0
 11339  1C5D  01A2               	clrf	setLED@command
 11340  1C5E  0824               	movf	setLED_Initialization@led,w
 11341  1C5F  3196  264F         	fcall	_setLED
 11342  1C61  0008               	return
 11343  1C62                     __end_of_setLED_Initialization:	
 11344                           
 11345                           	psect	text64
 11346  11CD                     __ptext64:	
 11347 ;; *************** function _Flash_Memory_Main *****************
 11348 ;; Defined at:
 11349 ;;		line 965 in file "../src/MCU_B1.c"
 11350 ;; Parameters:    Size  Location     Type
 11351 ;;		None
 11352 ;; Auto vars:     Size  Location     Type
 11353 ;;		None
 11354 ;; Return value:  Size  Location     Type
 11355 ;;		None               void
 11356 ;; Registers used:
 11357 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11358 ;; Tracked objects:
 11359 ;;		On entry : 0/0
 11360 ;;		On exit  : 0/0
 11361 ;;		Unchanged: 0/0
 11362 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11363 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11364 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11365 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11366 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11367 ;;Total ram usage:        1 bytes
 11368 ;; Hardware stack levels used:    1
 11369 ;; Hardware stack levels required when called:    8
 11370 ;; This function calls:
 11371 ;;		_Flash_Memory_Modify
 11372 ;;		_getMain_LightsStatus
 11373 ;; This function is called by:
 11374 ;;		_main
 11375 ;; This function uses a non-reentrant model
 11376 ;;
 11377                           
 11378                           
 11379                           ;psect for function _Flash_Memory_Main
 11380  11CD                     _Flash_Memory_Main:	
 11381                           
 11382                           ;MCU_B1.c: 966: if (Memory.Modify == 1) {
 11383                           
 11384                           ;incstack = 0
 11385                           ; Regs used in _Flash_Memory_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11386  11CD  0024               	movlb	4	; select bank4
 11387  11CE  1C44               	btfss	(_Memory^(0+512)+36),0
 11388  11CF  0008               	return
 11389                           
 11390                           ;MCU_B1.c: 967: Memory.GO = getMain_LightsStatus() == 0 ? 1 : 0;
 11391  11D0  319C  2499  3191   	fcall	_getMain_LightsStatus
 11392  11D3  3A00               	xorlw	0
 11393  11D4  3000               	movlw	0
 11394  11D5  1903               	skipnz
 11395  11D6  3001               	movlw	1
 11396  11D7  0020               	movlb	0	; select bank0
 11397  11D8  00A6               	movwf	??_Flash_Memory_Main
 11398  11D9  0DA6               	rlf	??_Flash_Memory_Main,f
 11399  11DA  0024               	movlb	4	; select bank4
 11400  11DB  0844               	movf	(_Memory^(0+512)+36),w
 11401  11DC  0020               	movlb	0	; select bank0
 11402  11DD  0626               	xorwf	??_Flash_Memory_Main,w
 11403  11DE  39FD               	andlw	-3
 11404  11DF  0626               	xorwf	??_Flash_Memory_Main,w
 11405  11E0  0024               	movlb	4	; select bank4
 11406  11E1  00C4               	movwf	(_Memory^(0+512)+36)
 11407                           
 11408                           ;MCU_B1.c: 968: if (Memory.GO == 1) {
 11409  11E2  1CC4               	btfss	(_Memory^(0+512)+36),1
 11410  11E3  29FD               	goto	l1335
 11411                           
 11412                           ;MCU_B1.c: 969: Memory.Runtime = 1;
 11413  11E4  15C4               	bsf	(_Memory^(0+512)+36),3
 11414                           
 11415                           ;MCU_B1.c: 970: Memory.Time++;
 11416  11E5  3001               	movlw	1
 11417  11E6  07C2               	addwf	(_Memory^(0+512)+34),f
 11418  11E7  3000               	movlw	0
 11419  11E8  3DC3               	addwfc	((_Memory+1)^(0+512)+34),f
 11420                           
 11421                           ;MCU_B1.c: 971: if (Memory.Time == 25) {
 11422  11E9  3022               	movlw	34
 11423  11EA  3E20               	addlw	_Memory& (0+255)
 11424  11EB  0086               	movwf	6
 11425  11EC  3002               	movlw	2	; select bank4/5
 11426  11ED  0087               	movwf	7
 11427  11EE  3F40               	moviw [0]fsr1
 11428  11EF  3A19               	xorlw	25
 11429  11F0  1D03               	skipz
 11430  11F1  29F4               	goto	u12315
 11431  11F2  3F41               	moviw [1]fsr1
 11432  11F3  3A00               	xorlw	0
 11433  11F4                     u12315:	
 11434  11F4  1D03               	skipz
 11435  11F5  0008               	return
 11436                           
 11437                           ;MCU_B1.c: 972: Memory.Time = 0;
 11438  11F6  01C2               	clrf	(_Memory^(0+512)+34)
 11439  11F7  01C3               	clrf	((_Memory+1)^(0+512)+34)
 11440                           
 11441                           ;MCU_B1.c: 973: Memory.Modify = 0;
 11442  11F8  1044               	bcf	(_Memory^(0+512)+36),0
 11443                           
 11444                           ;MCU_B1.c: 974: Memory.GO = 0;
 11445  11F9  10C4               	bcf	(_Memory^(0+512)+36),1
 11446                           
 11447                           ;MCU_B1.c: 975: Flash_Memory_Modify();
 11448  11FA  3194  246E         	fcall	_Flash_Memory_Modify
 11449                           
 11450                           ;MCU_B1.c: 976: }
 11451                           ;MCU_B1.c: 977: } else {
 11452  11FC  0008               	return
 11453  11FD                     l1335:	
 11454                           
 11455                           ;MCU_B1.c: 978: if (Memory.Runtime == 1) {
 11456  11FD  1DC4               	btfss	(_Memory^(0+512)+36),3
 11457  11FE  0008               	return
 11458                           
 11459                           ;MCU_B1.c: 979: Memory.Runtime = 0;
 11460  11FF  11C4               	bcf	(_Memory^(0+512)+36),3
 11461                           
 11462                           ;MCU_B1.c: 980: Memory.Time = 0;
 11463  1200  01C2               	clrf	(_Memory^(0+512)+34)
 11464  1201  01C3               	clrf	((_Memory+1)^(0+512)+34)
 11465  1202  0008               	return
 11466  1203                     __end_of_Flash_Memory_Main:	
 11467                           
 11468                           	psect	text65
 11469  146E                     __ptext65:	
 11470 ;; *************** function _Flash_Memory_Modify *****************
 11471 ;; Defined at:
 11472 ;;		line 1038 in file "../src/MCU_B1.c"
 11473 ;; Parameters:    Size  Location     Type
 11474 ;;		None
 11475 ;; Auto vars:     Size  Location     Type
 11476 ;;  i               1    5[BANK0 ] unsigned char 
 11477 ;; Return value:  Size  Location     Type
 11478 ;;		None               void
 11479 ;; Registers used:
 11480 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11481 ;; Tracked objects:
 11482 ;;		On entry : 0/0
 11483 ;;		On exit  : 0/0
 11484 ;;		Unchanged: 0/0
 11485 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11486 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11487 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11488 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11489 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11490 ;;Total ram usage:        2 bytes
 11491 ;; Hardware stack levels used:    1
 11492 ;; Hardware stack levels required when called:    7
 11493 ;; This function calls:
 11494 ;;		_Flash_Memory_Erasing
 11495 ;;		_Flash_Memory_Read
 11496 ;;		_Flash_Memory_Write
 11497 ;;		_setMemory_Data
 11498 ;; This function is called by:
 11499 ;;		_Flash_Memory_Main
 11500 ;; This function uses a non-reentrant model
 11501 ;;
 11502                           
 11503                           
 11504                           ;psect for function _Flash_Memory_Modify
 11505  146E                     _Flash_Memory_Modify:	
 11506                           
 11507                           ;MCU_B1.c: 1039: char i = 0;
 11508                           
 11509                           ;incstack = 0
 11510                           ; Regs used in _Flash_Memory_Modify: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11511  146E  0020               	movlb	0	; select bank0
 11512  146F  01A5               	clrf	Flash_Memory_Modify@i
 11513                           
 11514                           ;MCU_B1.c: 1040: for (i = 0; i < 32; i++) {
 11515  1470  01A5               	clrf	Flash_Memory_Modify@i
 11516  1471  3020               	movlw	32
 11517  1472  0225               	subwf	Flash_Memory_Modify@i,w
 11518  1473  1803               	btfsc	3,0
 11519  1474  2C8A               	goto	l10137
 11520  1475                     l10131:	
 11521                           
 11522                           ;MCU_B1.c: 1041: Memory.Data[i] = Flash_Memory_Read(i);
 11523  1475  0825               	movf	Flash_Memory_Modify@i,w
 11524  1476  319E  2614  3194   	fcall	_Flash_Memory_Read
 11525  1479  0020               	movlb	0	; select bank0
 11526  147A  00A4               	movwf	??_Flash_Memory_Modify
 11527  147B  0825               	movf	Flash_Memory_Modify@i,w
 11528  147C  3E20               	addlw	_Memory& (0+255)
 11529  147D  0086               	movwf	6
 11530  147E  3002               	movlw	2	; select bank4/5
 11531  147F  0087               	movwf	7
 11532  1480  0824               	movf	??_Flash_Memory_Modify,w
 11533  1481  0081               	movwf	1
 11534  1482  3001               	movlw	1
 11535  1483  00A4               	movwf	??_Flash_Memory_Modify
 11536  1484  0824               	movf	??_Flash_Memory_Modify,w
 11537  1485  07A5               	addwf	Flash_Memory_Modify@i,f
 11538  1486  3020               	movlw	32
 11539  1487  0225               	subwf	Flash_Memory_Modify@i,w
 11540  1488  1C03               	skipc
 11541  1489  2C75               	goto	l10131
 11542  148A                     l10137:	
 11543                           
 11544                           ;MCU_B1.c: 1042: }
 11545                           ;MCU_B1.c: 1043: setMemory_Data(0, product->Data[12]);
 11546  148A  0879               	movf	_product,w
 11547  148B  0086               	movwf	6
 11548  148C  3002               	movlw	2	; select bank4/5
 11549  148D  0087               	movwf	7
 11550  148E  3002               	movlw	2	; select bank4/5
 11551  148F  3F4C               	moviw [12]fsr1
 11552  1490  00A0               	movwf	setMemory_Data@data
 11553  1491  3000               	movlw	0
 11554  1492  319B  236B  3194   	fcall	_setMemory_Data
 11555                           
 11556                           ;MCU_B1.c: 1044: setMemory_Data(1, product->Data[13]);
 11557  1495  0879               	movf	_product,w
 11558  1496  0086               	movwf	6
 11559  1497  3002               	movlw	2	; select bank4/5
 11560  1498  0087               	movwf	7
 11561  1499  3002               	movlw	2	; select bank4/5
 11562  149A  3F4D               	moviw [13]fsr1
 11563  149B  0020               	movlb	0	; select bank0
 11564  149C  00A0               	movwf	setMemory_Data@data
 11565  149D  3001               	movlw	1
 11566  149E  319B  236B  3194   	fcall	_setMemory_Data
 11567                           
 11568                           ;MCU_B1.c: 1045: setMemory_Data(2, product->Data[14]);
 11569  14A1  0879               	movf	_product,w
 11570  14A2  0086               	movwf	6
 11571  14A3  3002               	movlw	2	; select bank4/5
 11572  14A4  0087               	movwf	7
 11573  14A5  3002               	movlw	2	; select bank4/5
 11574  14A6  3F4E               	moviw [14]fsr1
 11575  14A7  0020               	movlb	0	; select bank0
 11576  14A8  00A0               	movwf	setMemory_Data@data
 11577  14A9  3002               	movlw	2
 11578  14AA  319B  236B  3194   	fcall	_setMemory_Data
 11579                           
 11580                           ;MCU_B1.c: 1051: if (Memory.LoopSave == 1) {
 11581  14AD  0024               	movlb	4	; select bank4
 11582  14AE  1D44               	btfss	(_Memory^(0+512)+36),2
 11583  14AF  2CB4               	goto	l1358
 11584                           
 11585                           ;MCU_B1.c: 1052: Memory.LoopSave = 0;
 11586  14B0  1144               	bcf	(_Memory^(0+512)+36),2
 11587                           
 11588                           ;MCU_B1.c: 1053: myMain.FirstOpen = 0;
 11589  14B1  0021               	movlb	1	; select bank1
 11590  14B2  11A0               	bcf	_myMain^(0+128),3
 11591                           
 11592                           ;MCU_B1.c: 1054: myMain.First = 0;
 11593  14B3  12A0               	bcf	_myMain^(0+128),5
 11594  14B4                     l1358:	
 11595                           
 11596                           ;MCU_B1.c: 1056: }
 11597                           ;MCU_B1.c: 1057: GIE = 0;
 11598  14B4  138B               	bcf	11,7	;volatile
 11599                           
 11600                           ;MCU_B1.c: 1058: Flash_Memory_Erasing();
 11601  14B5  319B  2377  3194   	fcall	_Flash_Memory_Erasing
 11602                           
 11603                           ;MCU_B1.c: 1059: Flash_Memory_Write();
 11604  14B8  3191  2108         	fcall	_Flash_Memory_Write
 11605                           
 11606                           ;MCU_B1.c: 1060: GIE = 1;
 11607  14BA  178B               	bsf	11,7	;volatile
 11608  14BB  0008               	return
 11609  14BC                     __end_of_Flash_Memory_Modify:	
 11610                           
 11611                           	psect	text66
 11612  1B77                     __ptext66:	
 11613 ;; *************** function _Flash_Memory_Erasing *****************
 11614 ;; Defined at:
 11615 ;;		line 1027 in file "../src/MCU_B1.c"
 11616 ;; Parameters:    Size  Location     Type
 11617 ;;		None
 11618 ;; Auto vars:     Size  Location     Type
 11619 ;;		None
 11620 ;; Return value:  Size  Location     Type
 11621 ;;		None               void
 11622 ;; Registers used:
 11623 ;;		wreg, status,2, status,0, pclath, cstack
 11624 ;; Tracked objects:
 11625 ;;		On entry : 0/0
 11626 ;;		On exit  : 0/0
 11627 ;;		Unchanged: 0/0
 11628 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11629 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11630 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11631 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11632 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11633 ;;Total ram usage:        0 bytes
 11634 ;; Hardware stack levels used:    1
 11635 ;; Hardware stack levels required when called:    6
 11636 ;; This function calls:
 11637 ;;		_Flash_Memory_Unlock
 11638 ;; This function is called by:
 11639 ;;		_Flash_Memory_Modify
 11640 ;; This function uses a non-reentrant model
 11641 ;;
 11642                           
 11643                           
 11644                           ;psect for function _Flash_Memory_Erasing
 11645  1B77                     _Flash_Memory_Erasing:	
 11646                           
 11647                           ;MCU_B1.c: 1028: CFGS = 0;
 11648                           
 11649                           ;incstack = 0
 11650                           ; Regs used in _Flash_Memory_Erasing: [wreg+status,2+status,0+pclath+cstack]
 11651  1B77  0023               	movlb	3	; select bank3
 11652  1B78  1315               	bcf	21,6	;volatile
 11653                           
 11654                           ;MCU_B1.c: 1029: PMADRH = 0x30;
 11655  1B79  3030               	movlw	48
 11656  1B7A  0092               	movwf	18	;volatile
 11657                           
 11658                           ;MCU_B1.c: 1030: PMADRL = 0x00;
 11659  1B7B  0191               	clrf	17	;volatile
 11660                           
 11661                           ;MCU_B1.c: 1031: FREE = 1;
 11662  1B7C  1615               	bsf	21,4	;volatile
 11663                           
 11664                           ;MCU_B1.c: 1032: WREN = 1;
 11665  1B7D  1515               	bsf	21,2	;volatile
 11666                           
 11667                           ;MCU_B1.c: 1033: Flash_Memory_Unlock();
 11668  1B7E  319B  2340         	fcall	_Flash_Memory_Unlock
 11669                           
 11670                           ;MCU_B1.c: 1034: WREN = 0;
 11671  1B80  0023               	movlb	3	; select bank3
 11672  1B81  1115               	bcf	21,2	;volatile
 11673  1B82  0008               	return
 11674  1B83                     __end_of_Flash_Memory_Erasing:	
 11675                           
 11676                           	psect	text67
 11677  063F                     __ptext67:	
 11678 ;; *************** function _Flash_Memory_Initialization *****************
 11679 ;; Defined at:
 11680 ;;		line 924 in file "../src/MCU_B1.c"
 11681 ;; Parameters:    Size  Location     Type
 11682 ;;		None
 11683 ;; Auto vars:     Size  Location     Type
 11684 ;;  i               1   67[BANK0 ] unsigned char 
 11685 ;; Return value:  Size  Location     Type
 11686 ;;		None               void
 11687 ;; Registers used:
 11688 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11689 ;; Tracked objects:
 11690 ;;		On entry : 0/0
 11691 ;;		On exit  : 0/0
 11692 ;;		Unchanged: 0/0
 11693 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11694 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11695 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11696 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11697 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11698 ;;Total ram usage:        2 bytes
 11699 ;; Hardware stack levels used:    1
 11700 ;; Hardware stack levels required when called:    8
 11701 ;; This function calls:
 11702 ;;		_Flash_Memory_Read
 11703 ;;		_Flash_Memory_Write
 11704 ;;		_setMemory_Data
 11705 ;;		_setPercentValue
 11706 ;; This function is called by:
 11707 ;;		_main
 11708 ;; This function uses a non-reentrant model
 11709 ;;
 11710                           
 11711                           
 11712                           ;psect for function _Flash_Memory_Initialization
 11713  063F                     _Flash_Memory_Initialization:	
 11714                           
 11715                           ;MCU_B1.c: 925: char i = 0;
 11716                           
 11717                           ;incstack = 0
 11718                           ; Regs used in _Flash_Memory_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 11719  063F  0020               	movlb	0	; select bank0
 11720  0640  01E3               	clrf	Flash_Memory_Initialization@i
 11721                           
 11722                           ;MCU_B1.c: 926: if (Flash_Memory_Read(31) == 0xaa) {
 11723  0641  301F               	movlw	31
 11724  0642  319E  2614  3186   	fcall	_Flash_Memory_Read
 11725  0645  3AAA               	xorlw	170
 11726  0646  1D03               	skipz
 11727  0647  2EB1               	goto	l10545
 11728                           
 11729                           ;MCU_B1.c: 927: product->Data[12] = Flash_Memory_Read(0);
 11730  0648  3000               	movlw	0
 11731  0649  319E  2614  3186   	fcall	_Flash_Memory_Read
 11732  064C  0020               	movlb	0	; select bank0
 11733  064D  00E2               	movwf	??_Flash_Memory_Initialization
 11734  064E  0879               	movf	_product,w
 11735  064F  3E0C               	addlw	12
 11736  0650  0086               	movwf	6
 11737  0651  3002               	movlw	2	; select bank4/5
 11738  0652  0087               	movwf	7
 11739  0653  0862               	movf	??_Flash_Memory_Initialization,w
 11740  0654  0081               	movwf	1
 11741                           
 11742                           ;MCU_B1.c: 928: product->Data[13] = Flash_Memory_Read(1);
 11743  0655  3001               	movlw	1
 11744  0656  319E  2614  3186   	fcall	_Flash_Memory_Read
 11745  0659  0020               	movlb	0	; select bank0
 11746  065A  00E2               	movwf	??_Flash_Memory_Initialization
 11747  065B  0879               	movf	_product,w
 11748  065C  3E0D               	addlw	13
 11749  065D  0086               	movwf	6
 11750  065E  3002               	movlw	2	; select bank4/5
 11751  065F  0087               	movwf	7
 11752  0660  0862               	movf	??_Flash_Memory_Initialization,w
 11753  0661  0081               	movwf	1
 11754                           
 11755                           ;MCU_B1.c: 929: product->Data[14] = Flash_Memory_Read(2);
 11756  0662  3002               	movlw	2
 11757  0663  319E  2614  3186   	fcall	_Flash_Memory_Read
 11758  0666  0020               	movlb	0	; select bank0
 11759  0667  00E2               	movwf	??_Flash_Memory_Initialization
 11760  0668  0879               	movf	_product,w
 11761  0669  3E0E               	addlw	14
 11762  066A  0086               	movwf	6
 11763  066B  3002               	movlw	2	; select bank4/5
 11764  066C  0087               	movwf	7
 11765  066D  0862               	movf	??_Flash_Memory_Initialization,w
 11766  066E  0081               	movwf	1
 11767                           
 11768                           ;MCU_B1.c: 935: i = setPercentValue(((char)(75*0.8)));
 11769  066F  303C               	movlw	60
 11770  0670  318A  224A  3186   	fcall	_setPercentValue
 11771  0673  0020               	movlb	0	; select bank0
 11772  0674  00E2               	movwf	??_Flash_Memory_Initialization
 11773  0675  0862               	movf	??_Flash_Memory_Initialization,w
 11774  0676  00E3               	movwf	Flash_Memory_Initialization@i
 11775                           
 11776                           ;MCU_B1.c: 936: product->Data[21] = i;
 11777  0677  0863               	movf	Flash_Memory_Initialization@i,w
 11778  0678  00E2               	movwf	??_Flash_Memory_Initialization
 11779  0679  0879               	movf	_product,w
 11780  067A  3E15               	addlw	21
 11781  067B  0086               	movwf	6
 11782  067C  3002               	movlw	2	; select bank4/5
 11783  067D  0087               	movwf	7
 11784  067E  0862               	movf	??_Flash_Memory_Initialization,w
 11785  067F  0081               	movwf	1
 11786                           
 11787                           ;MCU_B1.c: 937: product->Data[22] = i;
 11788  0680  0863               	movf	Flash_Memory_Initialization@i,w
 11789  0681  00E2               	movwf	??_Flash_Memory_Initialization
 11790  0682  0879               	movf	_product,w
 11791  0683  3E16               	addlw	22
 11792  0684  0086               	movwf	6
 11793  0685  3002               	movlw	2	; select bank4/5
 11794  0686  0087               	movwf	7
 11795  0687  0862               	movf	??_Flash_Memory_Initialization,w
 11796  0688  0081               	movwf	1
 11797                           
 11798                           ;MCU_B1.c: 938: product->Data[23] = i;
 11799  0689  0863               	movf	Flash_Memory_Initialization@i,w
 11800  068A  00E2               	movwf	??_Flash_Memory_Initialization
 11801  068B  0879               	movf	_product,w
 11802  068C  3E17               	addlw	23
 11803  068D  0086               	movwf	6
 11804  068E  3002               	movlw	2	; select bank4/5
 11805  068F  0087               	movwf	7
 11806  0690  0862               	movf	??_Flash_Memory_Initialization,w
 11807  0691  0081               	movwf	1
 11808                           
 11809                           ;MCU_B1.c: 940: if (product->Data[12] == 0xff && product->Data[13] == 0xff && product->D
      +                          ata[14] == 0xff) {
 11810  0692  0879               	movf	_product,w
 11811  0693  3E0C               	addlw	12
 11812  0694  0086               	movwf	6
 11813  0695  3002               	movlw	2	; select bank4/5
 11814  0696  0087               	movwf	7
 11815  0697  0801               	movf	1,w
 11816  0698  3AFF               	xorlw	255
 11817  0699  1D03               	skipz
 11818  069A  0008               	return
 11819  069B  0879               	movf	_product,w
 11820  069C  3E0D               	addlw	13
 11821  069D  0086               	movwf	6
 11822  069E  3002               	movlw	2	; select bank4/5
 11823  069F  0087               	movwf	7
 11824  06A0  0801               	movf	1,w
 11825  06A1  3AFF               	xorlw	255
 11826  06A2  1D03               	skipz
 11827  06A3  0008               	return
 11828  06A4  0879               	movf	_product,w
 11829  06A5  3E0E               	addlw	14
 11830  06A6  0086               	movwf	6
 11831  06A7  3002               	movlw	2	; select bank4/5
 11832  06A8  0087               	movwf	7
 11833  06A9  0801               	movf	1,w
 11834  06AA  3AFF               	xorlw	255
 11835  06AB  1D03               	skipz
 11836  06AC  0008               	return
 11837                           
 11838                           ;MCU_B1.c: 941: myMain.FirstOpen = 1;
 11839  06AD  0021               	movlb	1	; select bank1
 11840  06AE  15A0               	bsf	_myMain^(0+128),3
 11841                           
 11842                           ;MCU_B1.c: 942: myMain.First = 1;
 11843  06AF  16A0               	bsf	_myMain^(0+128),5
 11844                           
 11845                           ;MCU_B1.c: 943: }
 11846                           ;MCU_B1.c: 944: } else {
 11847  06B0  0008               	return
 11848  06B1                     l10545:	
 11849                           
 11850                           ;MCU_B1.c: 945: i = setPercentValue(((char)(75*0.8)));
 11851  06B1  303C               	movlw	60
 11852  06B2  318A  224A  3186   	fcall	_setPercentValue
 11853  06B5  0020               	movlb	0	; select bank0
 11854  06B6  00E2               	movwf	??_Flash_Memory_Initialization
 11855  06B7  0862               	movf	??_Flash_Memory_Initialization,w
 11856  06B8  00E3               	movwf	Flash_Memory_Initialization@i
 11857                           
 11858                           ;MCU_B1.c: 946: setMemory_Data(0, 0xff);
 11859  06B9  30FF               	movlw	255
 11860  06BA  00E2               	movwf	??_Flash_Memory_Initialization
 11861  06BB  0862               	movf	??_Flash_Memory_Initialization,w
 11862  06BC  00A0               	movwf	setMemory_Data@data
 11863  06BD  3000               	movlw	0
 11864  06BE  319B  236B  3186   	fcall	_setMemory_Data
 11865                           
 11866                           ;MCU_B1.c: 947: setMemory_Data(1, 0xff);
 11867  06C1  30FF               	movlw	255
 11868  06C2  0020               	movlb	0	; select bank0
 11869  06C3  00E2               	movwf	??_Flash_Memory_Initialization
 11870  06C4  0862               	movf	??_Flash_Memory_Initialization,w
 11871  06C5  00A0               	movwf	setMemory_Data@data
 11872  06C6  3001               	movlw	1
 11873  06C7  319B  236B  3186   	fcall	_setMemory_Data
 11874                           
 11875                           ;MCU_B1.c: 948: setMemory_Data(2, 0xff);
 11876  06CA  30FF               	movlw	255
 11877  06CB  0020               	movlb	0	; select bank0
 11878  06CC  00E2               	movwf	??_Flash_Memory_Initialization
 11879  06CD  0862               	movf	??_Flash_Memory_Initialization,w
 11880  06CE  00A0               	movwf	setMemory_Data@data
 11881  06CF  3002               	movlw	2
 11882  06D0  319B  236B  3186   	fcall	_setMemory_Data
 11883                           
 11884                           ;MCU_B1.c: 949: setMemory_Data(3, 0xff);
 11885  06D3  30FF               	movlw	255
 11886  06D4  0020               	movlb	0	; select bank0
 11887  06D5  00E2               	movwf	??_Flash_Memory_Initialization
 11888  06D6  0862               	movf	??_Flash_Memory_Initialization,w
 11889  06D7  00A0               	movwf	setMemory_Data@data
 11890  06D8  3003               	movlw	3
 11891  06D9  319B  236B  3186   	fcall	_setMemory_Data
 11892                           
 11893                           ;MCU_B1.c: 950: setMemory_Data(4, 0xff);
 11894  06DC  30FF               	movlw	255
 11895  06DD  0020               	movlb	0	; select bank0
 11896  06DE  00E2               	movwf	??_Flash_Memory_Initialization
 11897  06DF  0862               	movf	??_Flash_Memory_Initialization,w
 11898  06E0  00A0               	movwf	setMemory_Data@data
 11899  06E1  3004               	movlw	4
 11900  06E2  319B  236B  3186   	fcall	_setMemory_Data
 11901                           
 11902                           ;MCU_B1.c: 951: setMemory_Data(5, 0xff);
 11903  06E5  30FF               	movlw	255
 11904  06E6  0020               	movlb	0	; select bank0
 11905  06E7  00E2               	movwf	??_Flash_Memory_Initialization
 11906  06E8  0862               	movf	??_Flash_Memory_Initialization,w
 11907  06E9  00A0               	movwf	setMemory_Data@data
 11908  06EA  3005               	movlw	5
 11909  06EB  319B  236B  3186   	fcall	_setMemory_Data
 11910                           
 11911                           ;MCU_B1.c: 952: setMemory_Data(31, 0xaa);
 11912  06EE  30AA               	movlw	170
 11913  06EF  0020               	movlb	0	; select bank0
 11914  06F0  00E2               	movwf	??_Flash_Memory_Initialization
 11915  06F1  0862               	movf	??_Flash_Memory_Initialization,w
 11916  06F2  00A0               	movwf	setMemory_Data@data
 11917  06F3  301F               	movlw	31
 11918  06F4  319B  236B  3186   	fcall	_setMemory_Data
 11919                           
 11920                           ;MCU_B1.c: 953: product->Data[21] = i;
 11921  06F7  0020               	movlb	0	; select bank0
 11922  06F8  0863               	movf	Flash_Memory_Initialization@i,w
 11923  06F9  00E2               	movwf	??_Flash_Memory_Initialization
 11924  06FA  0879               	movf	_product,w
 11925  06FB  3E15               	addlw	21
 11926  06FC  0086               	movwf	6
 11927  06FD  3002               	movlw	2	; select bank4/5
 11928  06FE  0087               	movwf	7
 11929  06FF  0862               	movf	??_Flash_Memory_Initialization,w
 11930  0700  0081               	movwf	1
 11931                           
 11932                           ;MCU_B1.c: 954: product->Data[22] = i;
 11933  0701  0863               	movf	Flash_Memory_Initialization@i,w
 11934  0702  00E2               	movwf	??_Flash_Memory_Initialization
 11935  0703  0879               	movf	_product,w
 11936  0704  3E16               	addlw	22
 11937  0705  0086               	movwf	6
 11938  0706  3002               	movlw	2	; select bank4/5
 11939  0707  0087               	movwf	7
 11940  0708  0862               	movf	??_Flash_Memory_Initialization,w
 11941  0709  0081               	movwf	1
 11942                           
 11943                           ;MCU_B1.c: 955: product->Data[23] = i;
 11944  070A  0863               	movf	Flash_Memory_Initialization@i,w
 11945  070B  00E2               	movwf	??_Flash_Memory_Initialization
 11946  070C  0879               	movf	_product,w
 11947  070D  3E17               	addlw	23
 11948  070E  0086               	movwf	6
 11949  070F  3002               	movlw	2	; select bank4/5
 11950  0710  0087               	movwf	7
 11951  0711  0862               	movf	??_Flash_Memory_Initialization,w
 11952  0712  0081               	movwf	1
 11953                           
 11954                           ;MCU_B1.c: 956: GIE = 0;
 11955  0713  138B               	bcf	11,7	;volatile
 11956                           
 11957                           ;MCU_B1.c: 957: Flash_Memory_Write();
 11958  0714  3191  2108         	fcall	_Flash_Memory_Write
 11959                           
 11960                           ;MCU_B1.c: 958: GIE = 1;
 11961  0716  178B               	bsf	11,7	;volatile
 11962                           
 11963                           ;MCU_B1.c: 959: myMain.FirstOpen = 1;
 11964  0717  0021               	movlb	1	; select bank1
 11965  0718  15A0               	bsf	_myMain^(0+128),3
 11966                           
 11967                           ;MCU_B1.c: 960: myMain.First = 1;
 11968  0719  16A0               	bsf	_myMain^(0+128),5
 11969  071A  0008               	return
 11970  071B                     __end_of_Flash_Memory_Initialization:	
 11971                           
 11972                           	psect	text68
 11973  1B6B                     __ptext68:	
 11974 ;; *************** function _setMemory_Data *****************
 11975 ;; Defined at:
 11976 ;;		line 1075 in file "../src/MCU_B1.c"
 11977 ;; Parameters:    Size  Location     Type
 11978 ;;  address         1    wreg     unsigned char 
 11979 ;;  data            1    0[BANK0 ] unsigned char 
 11980 ;; Auto vars:     Size  Location     Type
 11981 ;;  address         1    2[BANK0 ] unsigned char 
 11982 ;; Return value:  Size  Location     Type
 11983 ;;		None               void
 11984 ;; Registers used:
 11985 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11986 ;; Tracked objects:
 11987 ;;		On entry : 0/0
 11988 ;;		On exit  : 0/0
 11989 ;;		Unchanged: 0/0
 11990 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11991 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11992 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11993 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11994 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11995 ;;Total ram usage:        3 bytes
 11996 ;; Hardware stack levels used:    1
 11997 ;; Hardware stack levels required when called:    5
 11998 ;; This function calls:
 11999 ;;		Nothing
 12000 ;; This function is called by:
 12001 ;;		_Flash_Memory_Initialization
 12002 ;;		_Flash_Memory_Modify
 12003 ;; This function uses a non-reentrant model
 12004 ;;
 12005                           
 12006                           
 12007                           ;psect for function _setMemory_Data
 12008  1B6B                     _setMemory_Data:	
 12009                           
 12010                           ;incstack = 0
 12011                           ; Regs used in _setMemory_Data: [wreg+fsr1l+fsr1h+status,2+status,0]
 12012                           ;setMemory_Data@address stored from wreg
 12013  1B6B  0020               	movlb	0	; select bank0
 12014  1B6C  00A2               	movwf	setMemory_Data@address
 12015                           
 12016                           ;MCU_B1.c: 1076: Memory.Data[address] = data;
 12017  1B6D  0820               	movf	setMemory_Data@data,w
 12018  1B6E  00A1               	movwf	??_setMemory_Data
 12019  1B6F  0822               	movf	setMemory_Data@address,w
 12020  1B70  3E20               	addlw	_Memory& (0+255)
 12021  1B71  0086               	movwf	6
 12022  1B72  3002               	movlw	2	; select bank4/5
 12023  1B73  0087               	movwf	7
 12024  1B74  0821               	movf	??_setMemory_Data,w
 12025  1B75  0081               	movwf	1
 12026  1B76  0008               	return
 12027  1B77                     __end_of_setMemory_Data:	
 12028                           
 12029                           	psect	text69
 12030  1108                     __ptext69:	
 12031 ;; *************** function _Flash_Memory_Write *****************
 12032 ;; Defined at:
 12033 ;;		line 1008 in file "../src/MCU_B1.c"
 12034 ;; Parameters:    Size  Location     Type
 12035 ;;		None
 12036 ;; Auto vars:     Size  Location     Type
 12037 ;;  i               1    1[BANK0 ] unsigned char 
 12038 ;; Return value:  Size  Location     Type
 12039 ;;		None               void
 12040 ;; Registers used:
 12041 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12042 ;; Tracked objects:
 12043 ;;		On entry : 0/0
 12044 ;;		On exit  : 0/0
 12045 ;;		Unchanged: 0/0
 12046 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12047 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12048 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12049 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12050 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12051 ;;Total ram usage:        2 bytes
 12052 ;; Hardware stack levels used:    1
 12053 ;; Hardware stack levels required when called:    6
 12054 ;; This function calls:
 12055 ;;		_Flash_Memory_Unlock
 12056 ;; This function is called by:
 12057 ;;		_Flash_Memory_Initialization
 12058 ;;		_Flash_Memory_Modify
 12059 ;; This function uses a non-reentrant model
 12060 ;;
 12061                           
 12062                           
 12063                           ;psect for function _Flash_Memory_Write
 12064  1108                     _Flash_Memory_Write:	
 12065                           
 12066                           ;MCU_B1.c: 1009: char i = 0;
 12067                           
 12068                           ;incstack = 0
 12069                           ; Regs used in _Flash_Memory_Write: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12070  1108  0020               	movlb	0	; select bank0
 12071  1109  01A1               	clrf	Flash_Memory_Write@i
 12072                           
 12073                           ;MCU_B1.c: 1010: CFGS = 0;
 12074  110A  0023               	movlb	3	; select bank3
 12075  110B  1315               	bcf	21,6	;volatile
 12076                           
 12077                           ;MCU_B1.c: 1011: PMADRH = 0x30;
 12078  110C  3030               	movlw	48
 12079  110D  0092               	movwf	18	;volatile
 12080                           
 12081                           ;MCU_B1.c: 1012: PMDATH = 0;
 12082  110E  0194               	clrf	20	;volatile
 12083                           
 12084                           ;MCU_B1.c: 1013: FREE = 0;
 12085  110F  1215               	bcf	21,4	;volatile
 12086                           
 12087                           ;MCU_B1.c: 1014: LWLO = 1;
 12088  1110  1695               	bsf	21,5	;volatile
 12089                           
 12090                           ;MCU_B1.c: 1015: WREN = 1;
 12091  1111  1515               	bsf	21,2	;volatile
 12092                           
 12093                           ;MCU_B1.c: 1016: for (i = 0; i < 32; i++) {
 12094  1112  0020               	movlb	0	; select bank0
 12095  1113  01A1               	clrf	Flash_Memory_Write@i
 12096  1114  3020               	movlw	32
 12097  1115  0221               	subwf	Flash_Memory_Write@i,w
 12098  1116  1803               	btfsc	3,0
 12099  1117  2930               	goto	l1349
 12100  1118                     l9711:	
 12101                           
 12102                           ;MCU_B1.c: 1017: PMADRL = i;
 12103  1118  0821               	movf	Flash_Memory_Write@i,w
 12104  1119  0023               	movlb	3	; select bank3
 12105  111A  0091               	movwf	17	;volatile
 12106                           
 12107                           ;MCU_B1.c: 1018: PMDATL = Memory.Data[i];
 12108  111B  0020               	movlb	0	; select bank0
 12109  111C  0821               	movf	Flash_Memory_Write@i,w
 12110  111D  3E20               	addlw	_Memory& (0+255)
 12111  111E  0086               	movwf	6
 12112  111F  3002               	movlw	2	; select bank4/5
 12113  1120  0087               	movwf	7
 12114  1121  0801               	movf	1,w
 12115  1122  0023               	movlb	3	; select bank3
 12116  1123  0093               	movwf	19	;volatile
 12117                           
 12118                           ;MCU_B1.c: 1019: Flash_Memory_Unlock();
 12119  1124  319B  2340  3191   	fcall	_Flash_Memory_Unlock
 12120  1127  3001               	movlw	1
 12121  1128  0020               	movlb	0	; select bank0
 12122  1129  00A0               	movwf	??_Flash_Memory_Write
 12123  112A  0820               	movf	??_Flash_Memory_Write,w
 12124  112B  07A1               	addwf	Flash_Memory_Write@i,f
 12125  112C  3020               	movlw	32
 12126  112D  0221               	subwf	Flash_Memory_Write@i,w
 12127  112E  1C03               	skipc
 12128  112F  2918               	goto	l9711
 12129  1130                     l1349:	
 12130                           
 12131                           ;MCU_B1.c: 1020: }
 12132                           ;MCU_B1.c: 1021: LWLO = 0;
 12133  1130  0023               	movlb	3	; select bank3
 12134  1131  1295               	bcf	21,5	;volatile
 12135                           
 12136                           ;MCU_B1.c: 1022: Flash_Memory_Unlock();
 12137  1132  319B  2340         	fcall	_Flash_Memory_Unlock
 12138                           
 12139                           ;MCU_B1.c: 1023: WREN = 0;
 12140  1134  0023               	movlb	3	; select bank3
 12141  1135  1115               	bcf	21,2	;volatile
 12142  1136  0008               	return
 12143  1137                     __end_of_Flash_Memory_Write:	
 12144                           
 12145                           	psect	text70
 12146  1B40                     __ptext70:	
 12147 ;; *************** function _Flash_Memory_Unlock *****************
 12148 ;; Defined at:
 12149 ;;		line 987 in file "../src/MCU_B1.c"
 12150 ;; Parameters:    Size  Location     Type
 12151 ;;		None
 12152 ;; Auto vars:     Size  Location     Type
 12153 ;;		None
 12154 ;; Return value:  Size  Location     Type
 12155 ;;		None               void
 12156 ;; Registers used:
 12157 ;;		wreg
 12158 ;; Tracked objects:
 12159 ;;		On entry : 0/0
 12160 ;;		On exit  : 0/0
 12161 ;;		Unchanged: 0/0
 12162 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12163 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12164 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12165 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12166 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12167 ;;Total ram usage:        0 bytes
 12168 ;; Hardware stack levels used:    1
 12169 ;; Hardware stack levels required when called:    5
 12170 ;; This function calls:
 12171 ;;		Nothing
 12172 ;; This function is called by:
 12173 ;;		_Flash_Memory_Write
 12174 ;;		_Flash_Memory_Erasing
 12175 ;; This function uses a non-reentrant model
 12176 ;;
 12177                           
 12178                           
 12179                           ;psect for function _Flash_Memory_Unlock
 12180  1B40                     _Flash_Memory_Unlock:	
 12181                           
 12182                           ;MCU_B1.c: 988: PMCON2 = 0x55;
 12183                           
 12184                           ;incstack = 0
 12185                           ; Regs used in _Flash_Memory_Unlock: [wreg]
 12186  1B40  3055               	movlw	85
 12187  1B41  0023               	movlb	3	; select bank3
 12188  1B42  0096               	movwf	22	;volatile
 12189                           
 12190                           ;MCU_B1.c: 989: PMCON2 = 0xaa;
 12191  1B43  30AA               	movlw	170
 12192  1B44  0096               	movwf	22	;volatile
 12193                           
 12194                           ;MCU_B1.c: 990: WR = 1;
 12195  1B45  1495               	bsf	21,1	;volatile
 12196                           
 12197                           ;MCU_B1.c: 991: __nop();
 12198  1B46  0000               	nop
 12199                           
 12200                           ;MCU_B1.c: 992: __nop();
 12201  1B47  0000               	nop
 12202  1B48  0008               	return
 12203  1B49                     __end_of_Flash_Memory_Unlock:	
 12204                           
 12205                           	psect	text71
 12206  1E14                     __ptext71:	
 12207 ;; *************** function _Flash_Memory_Read *****************
 12208 ;; Defined at:
 12209 ;;		line 996 in file "../src/MCU_B1.c"
 12210 ;; Parameters:    Size  Location     Type
 12211 ;;  address         1    wreg     unsigned char 
 12212 ;; Auto vars:     Size  Location     Type
 12213 ;;  address         1    2[BANK0 ] unsigned char 
 12214 ;;  ret             1    3[BANK0 ] unsigned char 
 12215 ;;  i               1    1[BANK0 ] unsigned char 
 12216 ;; Return value:  Size  Location     Type
 12217 ;;                  1    wreg      unsigned char 
 12218 ;; Registers used:
 12219 ;;		wreg, status,2
 12220 ;; Tracked objects:
 12221 ;;		On entry : 0/0
 12222 ;;		On exit  : 0/0
 12223 ;;		Unchanged: 0/0
 12224 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12225 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12226 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12227 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12228 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12229 ;;Total ram usage:        4 bytes
 12230 ;; Hardware stack levels used:    1
 12231 ;; Hardware stack levels required when called:    5
 12232 ;; This function calls:
 12233 ;;		Nothing
 12234 ;; This function is called by:
 12235 ;;		_Flash_Memory_Initialization
 12236 ;;		_Flash_Memory_Modify
 12237 ;; This function uses a non-reentrant model
 12238 ;;
 12239                           
 12240                           
 12241                           ;psect for function _Flash_Memory_Read
 12242  1E14                     _Flash_Memory_Read:	
 12243                           
 12244                           ;incstack = 0
 12245                           ; Regs used in _Flash_Memory_Read: [wreg+status,2]
 12246                           ;Flash_Memory_Read@address stored from wreg
 12247  1E14  0020               	movlb	0	; select bank0
 12248  1E15  00A2               	movwf	Flash_Memory_Read@address
 12249                           
 12250                           ;MCU_B1.c: 997: char i = 0, ret = 0;
 12251  1E16  01A1               	clrf	Flash_Memory_Read@i
 12252  1E17  01A3               	clrf	Flash_Memory_Read@ret
 12253                           
 12254                           ;MCU_B1.c: 998: PMADRH = 0x30;
 12255  1E18  3030               	movlw	48
 12256  1E19  0023               	movlb	3	; select bank3
 12257  1E1A  0092               	movwf	18	;volatile
 12258                           
 12259                           ;MCU_B1.c: 999: PMADRL = address;
 12260  1E1B  0020               	movlb	0	; select bank0
 12261  1E1C  0822               	movf	Flash_Memory_Read@address,w
 12262  1E1D  0023               	movlb	3	; select bank3
 12263  1E1E  0091               	movwf	17	;volatile
 12264                           
 12265                           ;MCU_B1.c: 1000: CFGS = 0;
 12266  1E1F  1315               	bcf	21,6	;volatile
 12267                           
 12268                           ;MCU_B1.c: 1001: RD = 1;
 12269  1E20  1415               	bsf	21,0	;volatile
 12270                           
 12271                           ;MCU_B1.c: 1002: i = PMDATH;
 12272  1E21  0814               	movf	20,w	;volatile
 12273  1E22  0020               	movlb	0	; select bank0
 12274  1E23  00A0               	movwf	??_Flash_Memory_Read
 12275  1E24  0820               	movf	??_Flash_Memory_Read,w
 12276  1E25  00A1               	movwf	Flash_Memory_Read@i
 12277                           
 12278                           ;MCU_B1.c: 1003: ret = PMDATL;
 12279  1E26  0023               	movlb	3	; select bank3
 12280  1E27  0813               	movf	19,w	;volatile
 12281  1E28  0020               	movlb	0	; select bank0
 12282  1E29  00A0               	movwf	??_Flash_Memory_Read
 12283  1E2A  0820               	movf	??_Flash_Memory_Read,w
 12284  1E2B  00A3               	movwf	Flash_Memory_Read@ret
 12285                           
 12286                           ;MCU_B1.c: 1004: return ret;
 12287  1E2C  0823               	movf	Flash_Memory_Read@ret,w
 12288  1E2D  0008               	return
 12289  1E2E                     __end_of_Flash_Memory_Read:	
 12290                           
 12291                           	psect	text72
 12292  055F                     __ptext72:	
 12293 ;; *************** function _Exception_Main *****************
 12294 ;; Defined at:
 12295 ;;		line 523 in file "../src/Main_B1.c"
 12296 ;; Parameters:    Size  Location     Type
 12297 ;;		None
 12298 ;; Auto vars:     Size  Location     Type
 12299 ;;  i               2    4[BANK1 ] int 
 12300 ;;  i               2    2[BANK1 ] int 
 12301 ;;  lights          1    6[BANK1 ] unsigned char 
 12302 ;;  error           1    1[BANK1 ] unsigned char 
 12303 ;;  count           1    0[BANK1 ] unsigned char 
 12304 ;; Return value:  Size  Location     Type
 12305 ;;		None               void
 12306 ;; Registers used:
 12307 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12308 ;; Tracked objects:
 12309 ;;		On entry : 0/0
 12310 ;;		On exit  : 0/0
 12311 ;;		Unchanged: 0/0
 12312 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12313 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12314 ;;      Locals:         0       0       7       0       0       0       0       0       0       0       0       0       
      +0       0
 12315 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12316 ;;      Totals:         0       1       7       0       0       0       0       0       0       0       0       0       
      +0       0
 12317 ;;Total ram usage:        8 bytes
 12318 ;; Hardware stack levels used:    1
 12319 ;; Hardware stack levels required when called:    9
 12320 ;; This function calls:
 12321 ;;		_getDimmerLights_Line
 12322 ;;		_getDimmerLights_Status
 12323 ;;		_getMain_All_Error_Status
 12324 ;;		_getMain_LightsStatus
 12325 ;;		_setBuz
 12326 ;;		_setDimmerLights_SwOff
 12327 ;;		_setLED
 12328 ;; This function is called by:
 12329 ;;		_main
 12330 ;; This function uses a non-reentrant model
 12331 ;;
 12332                           
 12333                           
 12334                           ;psect for function _Exception_Main
 12335  055F                     _Exception_Main:	
 12336                           
 12337                           ;Main_B1.c: 524: char error = getMain_All_Error_Status(0);
 12338                           
 12339                           ;incstack = 0
 12340                           ; Regs used in _Exception_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12341  055F  3000               	movlw	0
 12342  0560  3191  2166  3185   	fcall	_getMain_All_Error_Status
 12343  0563  0020               	movlb	0	; select bank0
 12344  0564  00EB               	movwf	??_Exception_Main
 12345  0565  086B               	movf	??_Exception_Main,w
 12346  0566  0021               	movlb	1	; select bank1
 12347  0567  00E9               	movwf	Exception_Main@error^(0+128)
 12348                           
 12349                           ;Main_B1.c: 525: char lights = 0, count = 2;
 12350  0568  01EE               	clrf	Exception_Main@lights^(0+128)
 12351  0569  3002               	movlw	2
 12352  056A  0020               	movlb	0	; select bank0
 12353  056B  00EB               	movwf	??_Exception_Main
 12354  056C  086B               	movf	??_Exception_Main,w
 12355  056D  0021               	movlb	1	; select bank1
 12356  056E  00E8               	movwf	Exception_Main@count^(0+128)
 12357                           
 12358                           ;Main_B1.c: 526: if (myMain.Error_Run == 1) {
 12359  056F  1DAB               	btfss	(_myMain^(0+128)+11),3
 12360  0570  2D7E               	goto	l10879
 12361                           
 12362                           ;Main_B1.c: 527: if (error == 0) {
 12363  0571  08E9               	movf	Exception_Main@error^(0+128),f
 12364  0572  1D03               	skipz
 12365  0573  0008               	return
 12366                           
 12367                           ;Main_B1.c: 528: myMain.Error_Run = 0;
 12368  0574  11AB               	bcf	(_myMain^(0+128)+11),3
 12369                           
 12370                           ;Main_B1.c: 533: setLED(99, 10);
 12371  0575  300A               	movlw	10
 12372  0576  0020               	movlb	0	; select bank0
 12373  0577  00EB               	movwf	??_Exception_Main
 12374  0578  086B               	movf	??_Exception_Main,w
 12375  0579  00A2               	movwf	setLED@command
 12376  057A  3063               	movlw	99
 12377  057B  3196  264F         	fcall	_setLED
 12378                           
 12379                           ;Main_B1.c: 535: }
 12380                           ;Main_B1.c: 536: } else {
 12381  057D  0008               	return
 12382  057E                     l10879:	
 12383                           
 12384                           ;Main_B1.c: 537: if (error != 0) {
 12385  057E  0021               	movlb	1	; select bank1
 12386  057F  0869               	movf	Exception_Main@error^(0+128),w
 12387  0580  1903               	btfsc	3,2
 12388  0581  0008               	return
 12389                           
 12390                           ;Main_B1.c: 538: myMain.Error_Run = 1;
 12391  0582  15AB               	bsf	(_myMain^(0+128)+11),3
 12392                           
 12393                           ;Main_B1.c: 541: setLED(99, 11);
 12394  0583  300B               	movlw	11
 12395  0584  0020               	movlb	0	; select bank0
 12396  0585  00EB               	movwf	??_Exception_Main
 12397  0586  086B               	movf	??_Exception_Main,w
 12398  0587  00A2               	movwf	setLED@command
 12399  0588  3063               	movlw	99
 12400  0589  3196  264F  3185   	fcall	_setLED
 12401                           
 12402                           ;Main_B1.c: 543: switch (error) {
 12403  058C  2E34               	goto	l10927
 12404  058D                     l10885:	
 12405                           ;Main_B1.c: 544: case 2:
 12406                           
 12407                           
 12408                           ;Main_B1.c: 545: if (getMain_LightsStatus() == 1) {
 12409  058D  319C  2499  3185   	fcall	_getMain_LightsStatus
 12410  0590  3A01               	xorlw	1
 12411  0591  1D03               	skipz
 12412  0592  2D9C               	goto	l10889
 12413                           
 12414                           ;Main_B1.c: 546: setBuz(10, 300);
 12415  0593  302C               	movlw	44
 12416  0594  0020               	movlb	0	; select bank0
 12417  0595  00A9               	movwf	setBuz@time
 12418  0596  3001               	movlw	1
 12419  0597  00AA               	movwf	setBuz@time+1
 12420  0598  300A               	movlw	10
 12421  0599  3197  274E  3185   	fcall	_setBuz
 12422  059C                     l10889:	
 12423                           
 12424                           ;Main_B1.c: 547: }
 12425                           ;Main_B1.c: 549: for (int i = 0; i < count; i++) {
 12426  059C  0021               	movlb	1	; select bank1
 12427  059D  01EA               	clrf	Exception_Main@i^(0+128)
 12428  059E  01EB               	clrf	(Exception_Main@i+1)^(0+128)
 12429  059F                     l10899:	
 12430  059F  086B               	movf	(Exception_Main@i+1)^(0+128),w
 12431  05A0  3A80               	xorlw	128
 12432  05A1  0020               	movlb	0	; select bank0
 12433  05A2  00EB               	movwf	??_Exception_Main
 12434  05A3  3080               	movlw	128
 12435  05A4  026B               	subwf	??_Exception_Main,w
 12436  05A5  1D03               	skipz
 12437  05A6  2DAA               	goto	u12895
 12438  05A7  0021               	movlb	1	; select bank1
 12439  05A8  0868               	movf	Exception_Main@count^(0+128),w
 12440  05A9  026A               	subwf	Exception_Main@i^(0+128),w
 12441  05AA                     u12895:	
 12442  05AA  1803               	btfsc	3,0
 12443  05AB  2DCE               	goto	u12890
 12444                           
 12445                           ;Main_B1.c: 551: if (getDimmerLights_Status(i + 1) == 1) {
 12446  05AC  0021               	movlb	1	; select bank1
 12447  05AD  086A               	movf	Exception_Main@i^(0+128),w
 12448  05AE  3E01               	addlw	1
 12449  05AF  319B  23F9  3185   	fcall	_getDimmerLights_Status
 12450  05B2  3A01               	xorlw	1
 12451  05B3  1D03               	skipz
 12452  05B4  2DC8               	goto	l10897
 12453                           
 12454                           ;Main_B1.c: 552: DimmerLights->SwFlag = 1;
 12455  05B5  0020               	movlb	0	; select bank0
 12456  05B6  086F               	movf	_DimmerLights,w
 12457  05B7  3E0B               	addlw	11
 12458  05B8  0086               	movwf	6
 12459  05B9  3001               	movlw	1	; select bank2/3
 12460  05BA  0087               	movwf	7
 12461  05BB  1481               	bsf	1,1
 12462                           
 12463                           ;Main_B1.c: 553: DimmerLights->Status = 0;
 12464  05BC  086F               	movf	_DimmerLights,w
 12465  05BD  3E02               	addlw	2
 12466  05BE  0086               	movwf	6
 12467  05BF  3001               	movlw	1	; select bank2/3
 12468  05C0  0087               	movwf	7
 12469  05C1  1081               	bcf	1,1
 12470                           
 12471                           ;Main_B1.c: 554: setDimmerLights_SwOff(i + 1);
 12472  05C2  0021               	movlb	1	; select bank1
 12473  05C3  086A               	movf	Exception_Main@i^(0+128),w
 12474  05C4  3E01               	addlw	1
 12475  05C5  3194  24BC  3185   	fcall	_setDimmerLights_SwOff
 12476  05C8                     l10897:	
 12477  05C8  3001               	movlw	1
 12478  05C9  0021               	movlb	1	; select bank1
 12479  05CA  07EA               	addwf	Exception_Main@i^(0+128),f
 12480  05CB  3000               	movlw	0
 12481  05CC  3DEB               	addwfc	(Exception_Main@i+1)^(0+128),f
 12482  05CD  2D9F               	goto	l10899
 12483  05CE                     u12890:	
 12484  05CE  0021               	movlb	1	; select bank1
 12485  05CF  0008               	return
 12486  05D0                     l10901:	
 12487                           ;Main_B1.c: 558: case 3:
 12488                           
 12489                           ;Main_B1.c: 555: }
 12490                           ;Main_B1.c: 556: }
 12491                           ;Main_B1.c: 557: break;
 12492                           
 12493                           
 12494                           ;Main_B1.c: 560: setBuz(5, 300);
 12495  05D0  302C               	movlw	44
 12496  05D1  0020               	movlb	0	; select bank0
 12497  05D2  00A9               	movwf	setBuz@time
 12498  05D3  3001               	movlw	1
 12499  05D4  00AA               	movwf	setBuz@time+1
 12500  05D5  3005               	movlw	5
 12501  05D6  3197  274E  3185   	fcall	_setBuz
 12502                           
 12503                           ;Main_B1.c: 561: lights = getDimmerLights_Line();
 12504  05D9  319D  2521  3185   	fcall	_getDimmerLights_Line
 12505  05DC  0020               	movlb	0	; select bank0
 12506  05DD  00EB               	movwf	??_Exception_Main
 12507  05DE  086B               	movf	??_Exception_Main,w
 12508  05DF  0021               	movlb	1	; select bank1
 12509  05E0  00EE               	movwf	Exception_Main@lights^(0+128)
 12510                           
 12511                           ;Main_B1.c: 562: if (lights == 0) {
 12512  05E1  08EE               	movf	Exception_Main@lights^(0+128),f
 12513  05E2  1D03               	skipz
 12514  05E3  2E17               	goto	l10919
 12515                           
 12516                           ;Main_B1.c: 564: for (int i = 0; i < count; i++) {
 12517  05E4  01EC               	clrf	Exception_Main@i_3621^(0+128)
 12518  05E5  01ED               	clrf	(Exception_Main@i_3621+1)^(0+128)
 12519  05E6                     l10917:	
 12520  05E6  086D               	movf	(Exception_Main@i_3621+1)^(0+128),w
 12521  05E7  3A80               	xorlw	128
 12522  05E8  0020               	movlb	0	; select bank0
 12523  05E9  00EB               	movwf	??_Exception_Main
 12524  05EA  3080               	movlw	128
 12525  05EB  026B               	subwf	??_Exception_Main,w
 12526  05EC  1D03               	skipz
 12527  05ED  2DF1               	goto	u12925
 12528  05EE  0021               	movlb	1	; select bank1
 12529  05EF  0868               	movf	Exception_Main@count^(0+128),w
 12530  05F0  026C               	subwf	Exception_Main@i_3621^(0+128),w
 12531  05F1                     u12925:	
 12532  05F1  1803               	btfsc	3,0
 12533  05F2  2E15               	goto	u12920
 12534                           
 12535                           ;Main_B1.c: 566: if (getDimmerLights_Status(i + 1) == 1) {
 12536  05F3  0021               	movlb	1	; select bank1
 12537  05F4  086C               	movf	Exception_Main@i_3621^(0+128),w
 12538  05F5  3E01               	addlw	1
 12539  05F6  319B  23F9  3185   	fcall	_getDimmerLights_Status
 12540  05F9  3A01               	xorlw	1
 12541  05FA  1D03               	skipz
 12542  05FB  2E0F               	goto	l10915
 12543                           
 12544                           ;Main_B1.c: 567: DimmerLights->SwFlag = 1;
 12545  05FC  0020               	movlb	0	; select bank0
 12546  05FD  086F               	movf	_DimmerLights,w
 12547  05FE  3E0B               	addlw	11
 12548  05FF  0086               	movwf	6
 12549  0600  3001               	movlw	1	; select bank2/3
 12550  0601  0087               	movwf	7
 12551  0602  1481               	bsf	1,1
 12552                           
 12553                           ;Main_B1.c: 568: DimmerLights->Status = 0;
 12554  0603  086F               	movf	_DimmerLights,w
 12555  0604  3E02               	addlw	2
 12556  0605  0086               	movwf	6
 12557  0606  3001               	movlw	1	; select bank2/3
 12558  0607  0087               	movwf	7
 12559  0608  1081               	bcf	1,1
 12560                           
 12561                           ;Main_B1.c: 569: setDimmerLights_SwOff(i + 1);
 12562  0609  0021               	movlb	1	; select bank1
 12563  060A  086C               	movf	Exception_Main@i_3621^(0+128),w
 12564  060B  3E01               	addlw	1
 12565  060C  3194  24BC  3185   	fcall	_setDimmerLights_SwOff
 12566  060F                     l10915:	
 12567  060F  3001               	movlw	1
 12568  0610  0021               	movlb	1	; select bank1
 12569  0611  07EC               	addwf	Exception_Main@i_3621^(0+128),f
 12570  0612  3000               	movlw	0
 12571  0613  3DED               	addwfc	(Exception_Main@i_3621+1)^(0+128),f
 12572  0614  2DE6               	goto	l10917
 12573  0615                     u12920:	
 12574  0615  0021               	movlb	1	; select bank1
 12575  0616  0008               	return
 12576  0617                     l10919:	
 12577                           ;Main_B1.c: 570: }
 12578                           ;Main_B1.c: 571: }
 12579                           ;Main_B1.c: 572: } else {
 12580                           
 12581                           
 12582                           ;Main_B1.c: 574: if (getDimmerLights_Status(lights) == 1) {
 12583  0617  0021               	movlb	1	; select bank1
 12584  0618  086E               	movf	Exception_Main@lights^(0+128),w
 12585  0619  319B  23F9  3185   	fcall	_getDimmerLights_Status
 12586  061C  3A01               	xorlw	1
 12587  061D  1903               	btfsc	3,2
 12588  061E  2E21               	goto	l10921
 12589  061F  0021               	movlb	1	; select bank1
 12590  0620  0008               	return
 12591  0621                     l10921:	
 12592                           
 12593                           ;Main_B1.c: 576: DimmerLights->SwFlag = 1;
 12594  0621  0020               	movlb	0	; select bank0
 12595  0622  086F               	movf	_DimmerLights,w
 12596  0623  3E0B               	addlw	11
 12597  0624  0086               	movwf	6
 12598  0625  3001               	movlw	1	; select bank2/3
 12599  0626  0087               	movwf	7
 12600  0627  1481               	bsf	1,1
 12601                           
 12602                           ;Main_B1.c: 577: DimmerLights->Status = 0;
 12603  0628  086F               	movf	_DimmerLights,w
 12604  0629  3E02               	addlw	2
 12605  062A  0086               	movwf	6
 12606  062B  3001               	movlw	1	; select bank2/3
 12607  062C  0087               	movwf	7
 12608  062D  1081               	bcf	1,1
 12609                           
 12610                           ;Main_B1.c: 578: setDimmerLights_SwOff(lights);
 12611  062E  0021               	movlb	1	; select bank1
 12612  062F  086E               	movf	Exception_Main@lights^(0+128),w
 12613  0630  3194  24BC         	fcall	_setDimmerLights_SwOff
 12614  0632  0021               	movlb	1	; select bank1
 12615  0633  0008               	return
 12616  0634                     l10927:	
 12617                           ;Main_B1.c: 582: }
 12618                           
 12619                           ;Main_B1.c: 579: }
 12620                           ;Main_B1.c: 580: }
 12621                           ;Main_B1.c: 581: break;
 12622                           
 12623  0634  0021               	movlb	1	; select bank1
 12624  0635  0869               	movf	Exception_Main@error^(0+128),w
 12625                           
 12626                           ; Switch size 1, requested type "space"
 12627                           ; Number of cases is 2, Range of values is 2 to 3
 12628                           ; switch strategies available:
 12629                           ; Name         Instructions Cycles
 12630                           ; simple_byte            7     4 (average)
 12631                           ; direct_byte           13     9 (fixed)
 12632                           ; jumptable            263     9 (fixed)
 12633                           ;	Chosen strategy is simple_byte
 12634  0636  3A02               	xorlw	2	; case 2
 12635  0637  1903               	skipnz
 12636  0638  2D8D               	goto	l10885
 12637  0639  3A01               	xorlw	1	; case 3
 12638  063A  1903               	skipnz
 12639  063B  2DD0               	goto	l10901
 12640  063C  2E3E               	goto	l1609
 12641  063D  0008               	return
 12642  063E                     l1609:	
 12643  063E  0008               	return
 12644  063F                     __end_of_Exception_Main:	
 12645                           
 12646                           	psect	text73
 12647  1D21                     __ptext73:	
 12648 ;; *************** function _getDimmerLights_Line *****************
 12649 ;; Defined at:
 12650 ;;		line 736 in file "../src/Dimmer_B1.c"
 12651 ;; Parameters:    Size  Location     Type
 12652 ;;		None
 12653 ;; Auto vars:     Size  Location     Type
 12654 ;;  line            1    1[BANK0 ] unsigned char 
 12655 ;; Return value:  Size  Location     Type
 12656 ;;                  1    wreg      unsigned char 
 12657 ;; Registers used:
 12658 ;;		wreg, status,2
 12659 ;; Tracked objects:
 12660 ;;		On entry : 0/0
 12661 ;;		On exit  : 0/0
 12662 ;;		Unchanged: 0/0
 12663 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12664 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12665 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12666 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12667 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12668 ;;Total ram usage:        2 bytes
 12669 ;; Hardware stack levels used:    1
 12670 ;; Hardware stack levels required when called:    5
 12671 ;; This function calls:
 12672 ;;		Nothing
 12673 ;; This function is called by:
 12674 ;;		_Exception_Main
 12675 ;; This function uses a non-reentrant model
 12676 ;;
 12677                           
 12678                           
 12679                           ;psect for function _getDimmerLights_Line
 12680  1D21                     _getDimmerLights_Line:	
 12681                           
 12682                           ;Dimmer_B1.c: 737: char line = 0;
 12683                           
 12684                           ;incstack = 0
 12685                           ; Regs used in _getDimmerLights_Line: [wreg+status,2]
 12686  1D21  0020               	movlb	0	; select bank0
 12687  1D22  01A1               	clrf	getDimmerLights_Line@line
 12688                           
 12689                           ;Dimmer_B1.c: 739: if (DimmerLights1.Line == 1) {
 12690  1D23  0022               	movlb	2	; select bank2
 12691  1D24  1F5F               	btfss	(_DimmerLights1^(0+256)+10),6	;volatile
 12692  1D25  2D2A               	goto	l860
 12693                           
 12694                           ;Dimmer_B1.c: 740: line = 1;
 12695  1D26  0020               	movlb	0	; select bank0
 12696  1D27  01A1               	clrf	getDimmerLights_Line@line
 12697  1D28  0AA1               	incf	getDimmerLights_Line@line,f
 12698                           
 12699                           ;Dimmer_B1.c: 741: }
 12700  1D29  2D32               	goto	l861
 12701  1D2A                     l860:	
 12702                           
 12703                           ;Dimmer_B1.c: 744: else if (DimmerLights2.Line == 1) {
 12704  1D2A  0023               	movlb	3	; select bank3
 12705  1D2B  1F48               	btfss	(_DimmerLights2^(0+384)+10),6	;volatile
 12706  1D2C  2D32               	goto	l861
 12707                           
 12708                           ;Dimmer_B1.c: 745: line = 2;
 12709  1D2D  3002               	movlw	2
 12710  1D2E  0020               	movlb	0	; select bank0
 12711  1D2F  00A0               	movwf	??_getDimmerLights_Line
 12712  1D30  0820               	movf	??_getDimmerLights_Line,w
 12713  1D31  00A1               	movwf	getDimmerLights_Line@line
 12714  1D32                     l861:	
 12715                           
 12716                           ;Dimmer_B1.c: 746: }
 12717                           ;Dimmer_B1.c: 753: return line;
 12718  1D32  0020               	movlb	0	; select bank0
 12719  1D33  0821               	movf	getDimmerLights_Line@line,w
 12720  1D34  0008               	return
 12721  1D35                     __end_of_getDimmerLights_Line:	
 12722                           
 12723                           	psect	text74
 12724  1EE3                     __ptext74:	
 12725 ;; *************** function _DimmerLights_Main *****************
 12726 ;; Defined at:
 12727 ;;		line 502 in file "../src/Dimmer_B1.c"
 12728 ;; Parameters:    Size  Location     Type
 12729 ;;		None
 12730 ;; Auto vars:     Size  Location     Type
 12731 ;;		None
 12732 ;; Return value:  Size  Location     Type
 12733 ;;		None               void
 12734 ;; Registers used:
 12735 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12736 ;; Tracked objects:
 12737 ;;		On entry : 0/0
 12738 ;;		On exit  : 0/0
 12739 ;;		Unchanged: 0/0
 12740 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12741 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12742 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12743 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12744 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12745 ;;Total ram usage:        0 bytes
 12746 ;; Hardware stack levels used:    1
 12747 ;; Hardware stack levels required when called:   10
 12748 ;; This function calls:
 12749 ;;		_getLoad_OK
 12750 ;;		_getMain_All_Error_Status
 12751 ;;		_getMain_LightsStatus
 12752 ;;		_setDimmerLights_Main
 12753 ;; This function is called by:
 12754 ;;		_main
 12755 ;; This function uses a non-reentrant model
 12756 ;;
 12757                           
 12758                           
 12759                           ;psect for function _DimmerLights_Main
 12760  1EE3                     _DimmerLights_Main:	
 12761                           
 12762                           ;Dimmer_B1.c: 514: if (Dimmer.LoadGO == 1) {
 12763                           
 12764                           ;incstack = 0
 12765                           ; Regs used in _DimmerLights_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12766  1EE3  0021               	movlb	1	; select bank1
 12767  1EE4  1D46               	btfss	_Dimmer^(0+128),2	;volatile
 12768  1EE5  2EFB               	goto	l10515
 12769                           
 12770                           ;Dimmer_B1.c: 515: if (getLoad_OK() == 1 || getMain_All_Error_Status(0) != 0 || getMain_
      +                          LightsStatus() == 0) {
 12771  1EE6  319B  2317  319E   	fcall	_getLoad_OK
 12772  1EE9  3A01               	xorlw	1
 12773  1EEA  1903               	skipnz
 12774  1EEB  2EF9               	goto	l811
 12775  1EEC  3000               	movlw	0
 12776  1EED  3191  2166  319E   	fcall	_getMain_All_Error_Status
 12777  1EF0  3800               	iorlw	0
 12778  1EF1  1D03               	skipz
 12779  1EF2  2EF9               	goto	l811
 12780  1EF3  319C  2499  319E   	fcall	_getMain_LightsStatus
 12781  1EF6  3800               	iorlw	0
 12782  1EF7  1D03               	skipz
 12783  1EF8  2EFB               	goto	l10515
 12784  1EF9                     l811:	
 12785                           
 12786                           ;Dimmer_B1.c: 516: Dimmer.LoadGO = 0;
 12787  1EF9  0021               	movlb	1	; select bank1
 12788  1EFA  1146               	bcf	_Dimmer^(0+128),2	;volatile
 12789  1EFB                     l10515:	
 12790                           
 12791                           ;Dimmer_B1.c: 517: }
 12792                           ;Dimmer_B1.c: 518: }
 12793                           ;Dimmer_B1.c: 522: setDimmerLights_Main(1);
 12794  1EFB  3001               	movlw	1
 12795  1EFC  3195  255A  319E   	fcall	_setDimmerLights_Main
 12796                           
 12797                           ;Dimmer_B1.c: 526: setDimmerLights_Main(2);
 12798  1EFF  3002               	movlw	2
 12799  1F00  3195  255A         	fcall	_setDimmerLights_Main
 12800  1F02  0008               	return
 12801  1F03                     __end_of_DimmerLights_Main:	
 12802                           
 12803                           	psect	text75
 12804  155A                     __ptext75:	
 12805 ;; *************** function _setDimmerLights_Main *****************
 12806 ;; Defined at:
 12807 ;;		line 536 in file "../src/Dimmer_B1.c"
 12808 ;; Parameters:    Size  Location     Type
 12809 ;;  lights          1    wreg     unsigned char 
 12810 ;; Auto vars:     Size  Location     Type
 12811 ;;  lights          1   78[BANK0 ] unsigned char 
 12812 ;; Return value:  Size  Location     Type
 12813 ;;		None               void
 12814 ;; Registers used:
 12815 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12816 ;; Tracked objects:
 12817 ;;		On entry : 0/0
 12818 ;;		On exit  : 0/0
 12819 ;;		Unchanged: 0/0
 12820 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12821 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12822 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12823 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12824 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12825 ;;Total ram usage:        1 bytes
 12826 ;; Hardware stack levels used:    1
 12827 ;; Hardware stack levels required when called:    9
 12828 ;; This function calls:
 12829 ;;		_DimmerLightsPointSelect
 12830 ;;		_getDimmerLights_Allow_Condition
 12831 ;;		_setDimmerLights
 12832 ;;		_setDimmerLights_Adj
 12833 ;; This function is called by:
 12834 ;;		_DimmerLights_Main
 12835 ;; This function uses a non-reentrant model
 12836 ;;
 12837                           
 12838                           
 12839                           ;psect for function _setDimmerLights_Main
 12840  155A                     _setDimmerLights_Main:	
 12841                           
 12842                           ;incstack = 0
 12843                           ; Regs used in _setDimmerLights_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12844                           ;setDimmerLights_Main@lights stored from wreg
 12845  155A  0020               	movlb	0	; select bank0
 12846  155B  00EE               	movwf	setDimmerLights_Main@lights
 12847                           
 12848                           ;Dimmer_B1.c: 537: DimmerLightsPointSelect(lights);
 12849  155C  086E               	movf	setDimmerLights_Main@lights,w
 12850  155D  319C  2486  3195   	fcall	_DimmerLightsPointSelect
 12851                           
 12852                           ;Dimmer_B1.c: 539: if (DimmerLights->Trigger == 1) {
 12853  1560  0020               	movlb	0	; select bank0
 12854  1561  086F               	movf	_DimmerLights,w
 12855  1562  3E0A               	addlw	10
 12856  1563  0086               	movwf	6
 12857  1564  3001               	movlw	1	; select bank2/3
 12858  1565  0087               	movwf	7
 12859  1566  1C81               	btfss	1,1
 12860  1567  2D89               	goto	l9985
 12861                           
 12862                           ;Dimmer_B1.c: 540: if (getDimmerLights_Allow_Condition(lights) == 0) {
 12863  1568  086E               	movf	setDimmerLights_Main@lights,w
 12864  1569  3192  2272  3195   	fcall	_getDimmerLights_Allow_Condition
 12865  156C  3800               	iorlw	0
 12866  156D  1D03               	skipz
 12867  156E  0008               	return
 12868                           
 12869                           ;Dimmer_B1.c: 541: DimmerLights->Trigger = 0;
 12870  156F  0020               	movlb	0	; select bank0
 12871  1570  086F               	movf	_DimmerLights,w
 12872  1571  3E0A               	addlw	10
 12873  1572  0086               	movwf	6
 12874  1573  3001               	movlw	1	; select bank2/3
 12875  1574  0087               	movwf	7
 12876  1575  1081               	bcf	1,1
 12877                           
 12878                           ;Dimmer_B1.c: 542: if (DimmerLights->Switch == 1) {
 12879  1576  086F               	movf	_DimmerLights,w
 12880  1577  3E0A               	addlw	10
 12881  1578  0086               	movwf	6
 12882  1579  3001               	movlw	1	; select bank2/3
 12883  157A  0087               	movwf	7
 12884  157B  1C01               	btfss	1,0
 12885  157C  2D83               	goto	l9983
 12886                           
 12887                           ;Dimmer_B1.c: 543: setDimmerLights(lights, 1);
 12888  157D  01EB               	clrf	setDimmerLights@status
 12889  157E  0AEB               	incf	setDimmerLights@status,f
 12890  157F  086E               	movf	setDimmerLights_Main@lights,w
 12891  1580  3195  25AA         	fcall	_setDimmerLights
 12892                           
 12893                           ;Dimmer_B1.c: 544: } else {
 12894  1582  0008               	return
 12895  1583                     l9983:	
 12896                           
 12897                           ;Dimmer_B1.c: 545: setDimmerLights(lights, 0);
 12898  1583  0020               	movlb	0	; select bank0
 12899  1584  01EB               	clrf	setDimmerLights@status
 12900  1585  086E               	movf	setDimmerLights_Main@lights,w
 12901  1586  3195  25AA         	fcall	_setDimmerLights
 12902                           
 12903                           ;Dimmer_B1.c: 546: }
 12904                           ;Dimmer_B1.c: 547: }
 12905                           ;Dimmer_B1.c: 548: } else {
 12906  1588  0008               	return
 12907  1589                     l9985:	
 12908                           
 12909                           ;Dimmer_B1.c: 549: if (DimmerLights->TriggerAdj == 1) {
 12910  1589  0020               	movlb	0	; select bank0
 12911  158A  086F               	movf	_DimmerLights,w
 12912  158B  3E0A               	addlw	10
 12913  158C  0086               	movwf	6
 12914  158D  3001               	movlw	1	; select bank2/3
 12915  158E  0087               	movwf	7
 12916  158F  1D81               	btfss	1,3
 12917  1590  0008               	return
 12918                           
 12919                           ;Dimmer_B1.c: 550: DimmerLights->TriggerAdj = 0;
 12920  1591  086F               	movf	_DimmerLights,w
 12921  1592  3E0A               	addlw	10
 12922  1593  0086               	movwf	6
 12923  1594  3001               	movlw	1	; select bank2/3
 12924  1595  0087               	movwf	7
 12925  1596  1181               	bcf	1,3
 12926                           
 12927                           ;Dimmer_B1.c: 551: if (DimmerLights->SwitchAdj == 1) {
 12928  1597  086F               	movf	_DimmerLights,w
 12929  1598  3E0A               	addlw	10
 12930  1599  0086               	movwf	6
 12931  159A  3001               	movlw	1	; select bank2/3
 12932  159B  0087               	movwf	7
 12933  159C  1D01               	btfss	1,2
 12934  159D  2DA4               	goto	l9991
 12935                           
 12936                           ;Dimmer_B1.c: 552: setDimmerLights_Adj(lights, 1);
 12937  159E  01EB               	clrf	setDimmerLights_Adj@status
 12938  159F  0AEB               	incf	setDimmerLights_Adj@status,f
 12939  15A0  086E               	movf	setDimmerLights_Main@lights,w
 12940  15A1  3196  26F6         	fcall	_setDimmerLights_Adj
 12941                           
 12942                           ;Dimmer_B1.c: 553: } else {
 12943  15A3  0008               	return
 12944  15A4                     l9991:	
 12945                           
 12946                           ;Dimmer_B1.c: 554: setDimmerLights_Adj(lights, 0);
 12947  15A4  0020               	movlb	0	; select bank0
 12948  15A5  01EB               	clrf	setDimmerLights_Adj@status
 12949  15A6  086E               	movf	setDimmerLights_Main@lights,w
 12950  15A7  3196  26F6         	fcall	_setDimmerLights_Adj
 12951  15A9  0008               	return
 12952  15AA                     __end_of_setDimmerLights_Main:	
 12953                           
 12954                           	psect	text76
 12955  16F6                     __ptext76:	
 12956 ;; *************** function _setDimmerLights_Adj *****************
 12957 ;; Defined at:
 12958 ;;		line 672 in file "../src/Dimmer_B1.c"
 12959 ;; Parameters:    Size  Location     Type
 12960 ;;  lights          1    wreg     unsigned char 
 12961 ;;  status          1   75[BANK0 ] unsigned char 
 12962 ;; Auto vars:     Size  Location     Type
 12963 ;;  lights          1   77[BANK0 ] unsigned char 
 12964 ;; Return value:  Size  Location     Type
 12965 ;;		None               void
 12966 ;; Registers used:
 12967 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12968 ;; Tracked objects:
 12969 ;;		On entry : 0/0
 12970 ;;		On exit  : 0/0
 12971 ;;		Unchanged: 0/0
 12972 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12973 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12974 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12975 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12976 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12977 ;;Total ram usage:        3 bytes
 12978 ;; Hardware stack levels used:    1
 12979 ;; Hardware stack levels required when called:    8
 12980 ;; This function calls:
 12981 ;;		_setBuz
 12982 ;;		_setDimmerLights_Line
 12983 ;;		_setPercentValue
 12984 ;;		_setProductData
 12985 ;;		_setRF_DimmerLights
 12986 ;;		_setTxData
 12987 ;; This function is called by:
 12988 ;;		_setDimmerLights_Main
 12989 ;; This function uses a non-reentrant model
 12990 ;;
 12991                           
 12992                           
 12993                           ;psect for function _setDimmerLights_Adj
 12994  16F6                     _setDimmerLights_Adj:	
 12995                           
 12996                           ;incstack = 0
 12997                           ; Regs used in _setDimmerLights_Adj: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12998                           ;setDimmerLights_Adj@lights stored from wreg
 12999  16F6  0020               	movlb	0	; select bank0
 13000  16F7  00ED               	movwf	setDimmerLights_Adj@lights
 13001                           
 13002                           ;Dimmer_B1.c: 674: if (status == 1) {
 13003  16F8  086B               	movf	setDimmerLights_Adj@status,w
 13004  16F9  3A01               	xorlw	1
 13005  16FA  1D03               	skipz
 13006  16FB  2F0E               	goto	l9653
 13007                           
 13008                           ;Dimmer_B1.c: 675: DimmerLights->AdjSw = 1;
 13009  16FC  0A6F               	incf	_DimmerLights,w
 13010  16FD  0086               	movwf	6
 13011  16FE  3001               	movlw	1	; select bank2/3
 13012  16FF  0087               	movwf	7
 13013  1700  1701               	bsf	1,6
 13014                           
 13015                           ;Dimmer_B1.c: 676: DimmerLights->Signal = 1;
 13016  1701  0A6F               	incf	_DimmerLights,w
 13017  1702  0086               	movwf	6
 13018  1703  3001               	movlw	1	; select bank2/3
 13019  1704  0087               	movwf	7
 13020  1705  1681               	bsf	1,5
 13021                           
 13022                           ;Dimmer_B1.c: 677: setBuz(1, 100);
 13023  1706  3064               	movlw	100
 13024  1707  00A9               	movwf	setBuz@time
 13025  1708  3000               	movlw	0
 13026  1709  00AA               	movwf	setBuz@time+1
 13027  170A  3001               	movlw	1
 13028  170B  3197  274E         	fcall	_setBuz
 13029                           
 13030                           ;Dimmer_B1.c: 678: } else if (status == 0) {
 13031  170D  0008               	return
 13032  170E                     l9653:	
 13033  170E  0020               	movlb	0	; select bank0
 13034  170F  08EB               	movf	setDimmerLights_Adj@status,f
 13035  1710  1D03               	skipz
 13036  1711  0008               	return
 13037                           
 13038                           ;Dimmer_B1.c: 679: Dimmer.Load_Status = 0;
 13039  1712  0021               	movlb	1	; select bank1
 13040  1713  11C6               	bcf	_Dimmer^(0+128),3	;volatile
 13041                           
 13042                           ;Dimmer_B1.c: 680: setDimmerLights_Line(lights);
 13043  1714  0020               	movlb	0	; select bank0
 13044  1715  086D               	movf	setDimmerLights_Adj@lights,w
 13045  1716  319D  25B0  3196   	fcall	_setDimmerLights_Line
 13046                           
 13047                           ;Dimmer_B1.c: 681: DimmerLights->AdjSw = 0;
 13048  1719  0020               	movlb	0	; select bank0
 13049  171A  0A6F               	incf	_DimmerLights,w
 13050  171B  0086               	movwf	6
 13051  171C  3001               	movlw	1	; select bank2/3
 13052  171D  0087               	movwf	7
 13053  171E  1301               	bcf	1,6
 13054                           
 13055                           ;Dimmer_B1.c: 682: DimmerLights->Signal = 0;
 13056  171F  0A6F               	incf	_DimmerLights,w
 13057  1720  0086               	movwf	6
 13058  1721  3001               	movlw	1	; select bank2/3
 13059  1722  0087               	movwf	7
 13060  1723  1281               	bcf	1,5
 13061                           
 13062                           ;Dimmer_B1.c: 684: DimmerLights->MaxmumValue = DimmerLights->DimmingValue;
 13063  1724  086F               	movf	_DimmerLights,w
 13064  1725  3E04               	addlw	4
 13065  1726  0086               	movwf	6
 13066  1727  3001               	movlw	1	; select bank2/3
 13067  1728  0087               	movwf	7
 13068  1729  0801               	movf	1,w
 13069  172A  00EC               	movwf	??_setDimmerLights_Adj
 13070  172B  086F               	movf	_DimmerLights,w
 13071  172C  3E06               	addlw	6
 13072  172D  0086               	movwf	6
 13073  172E  3001               	movlw	1	; select bank2/3
 13074  172F  0087               	movwf	7
 13075  1730  086C               	movf	??_setDimmerLights_Adj,w
 13076  1731  0081               	movwf	1
 13077                           
 13078                           ;Dimmer_B1.c: 685: setProductData((20 + lights), setPercentValue(DimmerLights->DimmingVa
      +                          lue));
 13079  1732  086F               	movf	_DimmerLights,w
 13080  1733  3E04               	addlw	4
 13081  1734  0086               	movwf	6
 13082  1735  3001               	movlw	1	; select bank2/3
 13083  1736  0087               	movwf	7
 13084  1737  0801               	movf	1,w
 13085  1738  318A  224A  3196   	fcall	_setPercentValue
 13086  173B  0020               	movlb	0	; select bank0
 13087  173C  00EC               	movwf	??_setDimmerLights_Adj
 13088  173D  086C               	movf	??_setDimmerLights_Adj,w
 13089  173E  00E2               	movwf	setProductData@value
 13090  173F  086D               	movf	setDimmerLights_Adj@lights,w
 13091  1740  3E14               	addlw	20
 13092  1741  319B  23CC  3196   	fcall	_setProductData
 13093                           
 13094                           ;Dimmer_B1.c: 700: setRF_DimmerLights(lights, 1);
 13095  1744  0020               	movlb	0	; select bank0
 13096  1745  01E6               	clrf	setRF_DimmerLights@on
 13097  1746  0AE6               	incf	setRF_DimmerLights@on,f
 13098  1747  086D               	movf	setDimmerLights_Adj@lights,w
 13099  1748  3197  27A7  3196   	fcall	_setRF_DimmerLights
 13100                           
 13101                           ;Dimmer_B1.c: 701: setTxData();
 13102  174B  318D  2571         	fcall	_setTxData
 13103  174D  0008               	return
 13104  174E                     __end_of_setDimmerLights_Adj:	
 13105                           
 13106                           	psect	text77
 13107  15AA                     __ptext77:	
 13108 ;; *************** function _setDimmerLights *****************
 13109 ;; Defined at:
 13110 ;;		line 630 in file "../src/Dimmer_B1.c"
 13111 ;; Parameters:    Size  Location     Type
 13112 ;;  lights          1    wreg     unsigned char 
 13113 ;;  status          1   75[BANK0 ] unsigned char 
 13114 ;; Auto vars:     Size  Location     Type
 13115 ;;  lights          1   77[BANK0 ] unsigned char 
 13116 ;; Return value:  Size  Location     Type
 13117 ;;		None               void
 13118 ;; Registers used:
 13119 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13120 ;; Tracked objects:
 13121 ;;		On entry : 0/0
 13122 ;;		On exit  : 0/0
 13123 ;;		Unchanged: 0/0
 13124 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13125 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13126 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13127 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13128 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13129 ;;Total ram usage:        3 bytes
 13130 ;; Hardware stack levels used:    1
 13131 ;; Hardware stack levels required when called:    8
 13132 ;; This function calls:
 13133 ;;		_setDimmerLights_Line
 13134 ;;		_setLED
 13135 ;;		_setPercentValue
 13136 ;;		_setProductData
 13137 ;;		_setRF_DimmerLights
 13138 ;;		_setTxData
 13139 ;; This function is called by:
 13140 ;;		_setDimmerLights_Main
 13141 ;; This function uses a non-reentrant model
 13142 ;;
 13143                           
 13144                           
 13145                           ;psect for function _setDimmerLights
 13146  15AA                     _setDimmerLights:	
 13147                           
 13148                           ;incstack = 0
 13149                           ; Regs used in _setDimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13150                           ;setDimmerLights@lights stored from wreg
 13151  15AA  0020               	movlb	0	; select bank0
 13152  15AB  00ED               	movwf	setDimmerLights@lights
 13153                           
 13154                           ;Dimmer_B1.c: 638: if (status == 1) {
 13155  15AC  086B               	movf	setDimmerLights@status,w
 13156  15AD  3A01               	xorlw	1
 13157  15AE  1D03               	skipz
 13158  15AF  2DDA               	goto	l9633
 13159                           
 13160                           ;Dimmer_B1.c: 639: DimmerLights->StatusFlag = 1;
 13161  15B0  0A6F               	incf	_DimmerLights,w
 13162  15B1  0086               	movwf	6
 13163  15B2  3001               	movlw	1	; select bank2/3
 13164  15B3  0087               	movwf	7
 13165  15B4  1501               	bsf	1,2
 13166                           
 13167                           ;Dimmer_B1.c: 642: Dimmer.Load_Status = 1;
 13168  15B5  0021               	movlb	1	; select bank1
 13169  15B6  15C6               	bsf	_Dimmer^(0+128),3	;volatile
 13170                           
 13171                           ;Dimmer_B1.c: 643: setDimmerLights_Line(lights);
 13172  15B7  0020               	movlb	0	; select bank0
 13173  15B8  086D               	movf	setDimmerLights@lights,w
 13174  15B9  319D  25B0  3195   	fcall	_setDimmerLights_Line
 13175                           
 13176                           ;Dimmer_B1.c: 645: setLED(lights, 0);
 13177  15BC  0020               	movlb	0	; select bank0
 13178  15BD  01A2               	clrf	setLED@command
 13179  15BE  086D               	movf	setDimmerLights@lights,w
 13180  15BF  3196  264F  3195   	fcall	_setLED
 13181                           
 13182                           ;Dimmer_B1.c: 650: DimmerLights->DimmingValue = ((char)(75*0.8));
 13183  15C2  303C               	movlw	60
 13184  15C3  0020               	movlb	0	; select bank0
 13185  15C4  00EC               	movwf	??_setDimmerLights
 13186  15C5  086F               	movf	_DimmerLights,w
 13187  15C6  3E04               	addlw	4
 13188  15C7  0086               	movwf	6
 13189  15C8  3001               	movlw	1	; select bank2/3
 13190  15C9  0087               	movwf	7
 13191  15CA  086C               	movf	??_setDimmerLights,w
 13192  15CB  0081               	movwf	1
 13193                           
 13194                           ;Dimmer_B1.c: 652: setProductData((20 + lights), setPercentValue(((char)(75*0.8))));
 13195  15CC  303C               	movlw	60
 13196  15CD  318A  224A  3195   	fcall	_setPercentValue
 13197  15D0  0020               	movlb	0	; select bank0
 13198  15D1  00EC               	movwf	??_setDimmerLights
 13199  15D2  086C               	movf	??_setDimmerLights,w
 13200  15D3  00E2               	movwf	setProductData@value
 13201  15D4  086D               	movf	setDimmerLights@lights,w
 13202  15D5  3E14               	addlw	20
 13203  15D6  319B  23CC  3195   	fcall	_setProductData
 13204                           
 13205                           ;Dimmer_B1.c: 654: } else if (status == 0) {
 13206  15D9  2DF0               	goto	l9643
 13207  15DA                     l9633:	
 13208  15DA  0020               	movlb	0	; select bank0
 13209  15DB  08EB               	movf	setDimmerLights@status,f
 13210  15DC  1D03               	skipz
 13211  15DD  2DF0               	goto	l9643
 13212                           
 13213                           ;Dimmer_B1.c: 655: DimmerLights->StatusFlag = 0;
 13214  15DE  0A6F               	incf	_DimmerLights,w
 13215  15DF  0086               	movwf	6
 13216  15E0  3001               	movlw	1	; select bank2/3
 13217  15E1  0087               	movwf	7
 13218  15E2  1101               	bcf	1,2
 13219                           
 13220                           ;Dimmer_B1.c: 658: Dimmer.Load_Status = 0;
 13221  15E3  0021               	movlb	1	; select bank1
 13222  15E4  11C6               	bcf	_Dimmer^(0+128),3	;volatile
 13223                           
 13224                           ;Dimmer_B1.c: 659: setDimmerLights_Line(0);
 13225  15E5  3000               	movlw	0
 13226  15E6  319D  25B0  3195   	fcall	_setDimmerLights_Line
 13227                           
 13228                           ;Dimmer_B1.c: 661: setLED(lights, 1);
 13229  15E9  0020               	movlb	0	; select bank0
 13230  15EA  01A2               	clrf	setLED@command
 13231  15EB  0AA2               	incf	setLED@command,f
 13232  15EC  086D               	movf	setDimmerLights@lights,w
 13233  15ED  3196  264F  3195   	fcall	_setLED
 13234  15F0                     l9643:	
 13235                           
 13236                           ;Dimmer_B1.c: 663: }
 13237                           ;Dimmer_B1.c: 666: setRF_DimmerLights(lights, status);
 13238  15F0  0020               	movlb	0	; select bank0
 13239  15F1  086B               	movf	setDimmerLights@status,w
 13240  15F2  00EC               	movwf	??_setDimmerLights
 13241  15F3  086C               	movf	??_setDimmerLights,w
 13242  15F4  00E6               	movwf	setRF_DimmerLights@on
 13243  15F5  086D               	movf	setDimmerLights@lights,w
 13244  15F6  3197  27A7  3195   	fcall	_setRF_DimmerLights
 13245                           
 13246                           ;Dimmer_B1.c: 667: setTxData();
 13247  15F9  318D  2571         	fcall	_setTxData
 13248  15FB  0008               	return
 13249  15FC                     __end_of_setDimmerLights:	
 13250                           
 13251                           	psect	text78
 13252  0D71                     __ptext78:	
 13253 ;; *************** function _setTxData *****************
 13254 ;; Defined at:
 13255 ;;		line 167 in file "../src/RF_Control_B1.c"
 13256 ;; Parameters:    Size  Location     Type
 13257 ;;		None
 13258 ;; Auto vars:     Size  Location     Type
 13259 ;;  i               1    0        unsigned char 
 13260 ;; Return value:  Size  Location     Type
 13261 ;;		None               void
 13262 ;; Registers used:
 13263 ;;		wreg, fsr1l, fsr1h
 13264 ;; Tracked objects:
 13265 ;;		On entry : 0/0
 13266 ;;		On exit  : 0/0
 13267 ;;		Unchanged: 0/0
 13268 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13269 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13270 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13271 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13272 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13273 ;;Total ram usage:        1 bytes
 13274 ;; Hardware stack levels used:    1
 13275 ;; Hardware stack levels required when called:    5
 13276 ;; This function calls:
 13277 ;;		Nothing
 13278 ;; This function is called by:
 13279 ;;		_setDimmerLights
 13280 ;;		_setDimmerLights_Adj
 13281 ;;		_getRxData
 13282 ;;		_setControl_Lights_Table
 13283 ;;		_setRFSW_Control
 13284 ;;		_setRFSW_AdjControl
 13285 ;; This function uses a non-reentrant model
 13286 ;;
 13287                           
 13288                           
 13289                           ;psect for function _setTxData
 13290  0D71                     _setTxData:	
 13291                           
 13292                           ;RF_Control_B1.c: 168: char i;
 13293                           ;RF_Control_B1.c: 169: if (RF1.Enable == 1) {
 13294                           
 13295                           ;incstack = 0
 13296                           ; Regs used in _setTxData: [wregfsr1]
 13297  0D71  0021               	movlb	1	; select bank1
 13298  0D72  1C3A               	btfss	_RF1^(0+128),0
 13299  0D73  0008               	return
 13300                           
 13301                           ;RF_Control_B1.c: 171: if (RF1.TransceiveGO == 0) {
 13302  0D74  193A               	btfsc	_RF1^(0+128),2
 13303  0D75  0008               	return
 13304                           
 13305                           ;RF_Control_B1.c: 172: RF1.TransceiveGO = 1;
 13306  0D76  153A               	bsf	_RF1^(0+128),2
 13307                           
 13308                           ;RF_Control_B1.c: 173: RF1.RunTime = 20;
 13309  0D77  3014               	movlw	20
 13310  0D78  00C1               	movwf	(_RF1^(0+128)+7)
 13311  0D79  3000               	movlw	0
 13312  0D7A  00C2               	movwf	(_RF1^(0+128)+8)
 13313                           
 13314                           ;RF_Control_B1.c: 185: RF_Data[0] = 0x63;
 13315  0D7B  3063               	movlw	99
 13316  0D7C  0020               	movlb	0	; select bank0
 13317  0D7D  00A0               	movwf	??_setTxData
 13318  0D7E  0820               	movf	??_setTxData,w
 13319  0D7F  0023               	movlb	3	; select bank3
 13320  0D80  00A0               	movwf	_RF_Data^(0+384)
 13321                           
 13322                           ;RF_Control_B1.c: 186: RF_Data[1] = 0x02;
 13323  0D81  3002               	movlw	2
 13324  0D82  0020               	movlb	0	; select bank0
 13325  0D83  00A0               	movwf	??_setTxData
 13326  0D84  0820               	movf	??_setTxData,w
 13327  0D85  0023               	movlb	3	; select bank3
 13328  0D86  00A1               	movwf	(_RF_Data^(0+384)+1)
 13329                           
 13330                           ;RF_Control_B1.c: 188: RF_Data[2] = product->Data[2];
 13331  0D87  0879               	movf	_product,w
 13332  0D88  0086               	movwf	6
 13333  0D89  3002               	movlw	2	; select bank4/5
 13334  0D8A  0087               	movwf	7
 13335  0D8B  3002               	movlw	2	; select bank4/5
 13336  0D8C  3F42               	moviw [2]fsr1
 13337  0D8D  00A2               	movwf	(_RF_Data^(0+384)+2)
 13338                           
 13339                           ;RF_Control_B1.c: 189: RF_Data[3] = product->Data[3];
 13340  0D8E  0879               	movf	_product,w
 13341  0D8F  0086               	movwf	6
 13342  0D90  3002               	movlw	2	; select bank4/5
 13343  0D91  0087               	movwf	7
 13344  0D92  3002               	movlw	2	; select bank4/5
 13345  0D93  3F43               	moviw [3]fsr1
 13346  0D94  00A3               	movwf	(_RF_Data^(0+384)+3)
 13347                           
 13348                           ;RF_Control_B1.c: 190: RF_Data[4] = product->Data[4];
 13349  0D95  0879               	movf	_product,w
 13350  0D96  0086               	movwf	6
 13351  0D97  3002               	movlw	2	; select bank4/5
 13352  0D98  0087               	movwf	7
 13353  0D99  3002               	movlw	2	; select bank4/5
 13354  0D9A  3F44               	moviw [4]fsr1
 13355  0D9B  00A4               	movwf	(_RF_Data^(0+384)+4)
 13356                           
 13357                           ;RF_Control_B1.c: 191: RF_Data[5] = product->Data[5];
 13358  0D9C  0879               	movf	_product,w
 13359  0D9D  0086               	movwf	6
 13360  0D9E  3002               	movlw	2	; select bank4/5
 13361  0D9F  0087               	movwf	7
 13362  0DA0  3002               	movlw	2	; select bank4/5
 13363  0DA1  3F45               	moviw [5]fsr1
 13364  0DA2  00A5               	movwf	(_RF_Data^(0+384)+5)
 13365                           
 13366                           ;RF_Control_B1.c: 192: RF_Data[6] = product->Data[6];
 13367  0DA3  0879               	movf	_product,w
 13368  0DA4  0086               	movwf	6
 13369  0DA5  3002               	movlw	2	; select bank4/5
 13370  0DA6  0087               	movwf	7
 13371  0DA7  3002               	movlw	2	; select bank4/5
 13372  0DA8  3F46               	moviw [6]fsr1
 13373  0DA9  00A6               	movwf	(_RF_Data^(0+384)+6)
 13374                           
 13375                           ;RF_Control_B1.c: 193: RF_Data[7] = product->Data[7];
 13376  0DAA  0879               	movf	_product,w
 13377  0DAB  0086               	movwf	6
 13378  0DAC  3002               	movlw	2	; select bank4/5
 13379  0DAD  0087               	movwf	7
 13380  0DAE  3002               	movlw	2	; select bank4/5
 13381  0DAF  3F47               	moviw [7]fsr1
 13382  0DB0  00A7               	movwf	(_RF_Data^(0+384)+7)
 13383                           
 13384                           ;RF_Control_B1.c: 194: RF_Data[8] = product->Data[8];
 13385  0DB1  0879               	movf	_product,w
 13386  0DB2  0086               	movwf	6
 13387  0DB3  3002               	movlw	2	; select bank4/5
 13388  0DB4  0087               	movwf	7
 13389  0DB5  3002               	movlw	2	; select bank4/5
 13390  0DB6  3F48               	moviw [8]fsr1
 13391  0DB7  00A8               	movwf	(_RF_Data^(0+384)+8)
 13392                           
 13393                           ;RF_Control_B1.c: 195: RF_Data[9] = product->Data[9];
 13394  0DB8  0879               	movf	_product,w
 13395  0DB9  0086               	movwf	6
 13396  0DBA  3002               	movlw	2	; select bank4/5
 13397  0DBB  0087               	movwf	7
 13398  0DBC  3002               	movlw	2	; select bank4/5
 13399  0DBD  3F49               	moviw [9]fsr1
 13400  0DBE  00A9               	movwf	(_RF_Data^(0+384)+9)
 13401                           
 13402                           ;RF_Control_B1.c: 196: RF_Data[10] = product->Data[10];
 13403  0DBF  0879               	movf	_product,w
 13404  0DC0  0086               	movwf	6
 13405  0DC1  3002               	movlw	2	; select bank4/5
 13406  0DC2  0087               	movwf	7
 13407  0DC3  3002               	movlw	2	; select bank4/5
 13408  0DC4  3F4A               	moviw [10]fsr1
 13409  0DC5  00AA               	movwf	(_RF_Data^(0+384)+10)
 13410                           
 13411                           ;RF_Control_B1.c: 197: RF_Data[11] = product->Data[11];
 13412  0DC6  0879               	movf	_product,w
 13413  0DC7  0086               	movwf	6
 13414  0DC8  3002               	movlw	2	; select bank4/5
 13415  0DC9  0087               	movwf	7
 13416  0DCA  3002               	movlw	2	; select bank4/5
 13417  0DCB  3F4B               	moviw [11]fsr1
 13418  0DCC  00AB               	movwf	(_RF_Data^(0+384)+11)
 13419                           
 13420                           ;RF_Control_B1.c: 198: RF_Data[12] = product->Data[12];
 13421  0DCD  0879               	movf	_product,w
 13422  0DCE  0086               	movwf	6
 13423  0DCF  3002               	movlw	2	; select bank4/5
 13424  0DD0  0087               	movwf	7
 13425  0DD1  3002               	movlw	2	; select bank4/5
 13426  0DD2  3F4C               	moviw [12]fsr1
 13427  0DD3  00AC               	movwf	(_RF_Data^(0+384)+12)
 13428                           
 13429                           ;RF_Control_B1.c: 199: RF_Data[13] = product->Data[13];
 13430  0DD4  0879               	movf	_product,w
 13431  0DD5  0086               	movwf	6
 13432  0DD6  3002               	movlw	2	; select bank4/5
 13433  0DD7  0087               	movwf	7
 13434  0DD8  3002               	movlw	2	; select bank4/5
 13435  0DD9  3F4D               	moviw [13]fsr1
 13436  0DDA  00AD               	movwf	(_RF_Data^(0+384)+13)
 13437                           
 13438                           ;RF_Control_B1.c: 200: RF_Data[14] = product->Data[14];
 13439  0DDB  0879               	movf	_product,w
 13440  0DDC  0086               	movwf	6
 13441  0DDD  3002               	movlw	2	; select bank4/5
 13442  0DDE  0087               	movwf	7
 13443  0DDF  3002               	movlw	2	; select bank4/5
 13444  0DE0  3F4E               	moviw [14]fsr1
 13445  0DE1  00AE               	movwf	(_RF_Data^(0+384)+14)
 13446                           
 13447                           ;RF_Control_B1.c: 201: RF_Data[15] = product->Data[15];
 13448  0DE2  0879               	movf	_product,w
 13449  0DE3  0086               	movwf	6
 13450  0DE4  3002               	movlw	2	; select bank4/5
 13451  0DE5  0087               	movwf	7
 13452  0DE6  3002               	movlw	2	; select bank4/5
 13453  0DE7  3F4F               	moviw [15]fsr1
 13454  0DE8  00AF               	movwf	(_RF_Data^(0+384)+15)
 13455                           
 13456                           ;RF_Control_B1.c: 202: RF_Data[16] = product->Data[16];
 13457  0DE9  0879               	movf	_product,w
 13458  0DEA  0086               	movwf	6
 13459  0DEB  3002               	movlw	2	; select bank4/5
 13460  0DEC  0087               	movwf	7
 13461  0DED  3002               	movlw	2	; select bank4/5
 13462  0DEE  3F50               	moviw [16]fsr1
 13463  0DEF  00B0               	movwf	(_RF_Data^(0+384)+16)
 13464                           
 13465                           ;RF_Control_B1.c: 203: RF_Data[17] = product->Data[17];
 13466  0DF0  0879               	movf	_product,w
 13467  0DF1  0086               	movwf	6
 13468  0DF2  3002               	movlw	2	; select bank4/5
 13469  0DF3  0087               	movwf	7
 13470  0DF4  3002               	movlw	2	; select bank4/5
 13471  0DF5  3F51               	moviw [17]fsr1
 13472  0DF6  00B1               	movwf	(_RF_Data^(0+384)+17)
 13473                           
 13474                           ;RF_Control_B1.c: 204: RF_Data[18] = product->Data[18];
 13475  0DF7  0879               	movf	_product,w
 13476  0DF8  0086               	movwf	6
 13477  0DF9  3002               	movlw	2	; select bank4/5
 13478  0DFA  0087               	movwf	7
 13479  0DFB  3002               	movlw	2	; select bank4/5
 13480  0DFC  3F52               	moviw [18]fsr1
 13481  0DFD  00B2               	movwf	(_RF_Data^(0+384)+18)
 13482                           
 13483                           ;RF_Control_B1.c: 205: RF_Data[19] = product->Data[19];
 13484  0DFE  0879               	movf	_product,w
 13485  0DFF  0086               	movwf	6
 13486  0E00  3002               	movlw	2	; select bank4/5
 13487  0E01  0087               	movwf	7
 13488  0E02  3002               	movlw	2	; select bank4/5
 13489  0E03  3F53               	moviw [19]fsr1
 13490  0E04  00B3               	movwf	(_RF_Data^(0+384)+19)
 13491                           
 13492                           ;RF_Control_B1.c: 206: RF_Data[20] = 210;
 13493  0E05  30D2               	movlw	210
 13494  0E06  0020               	movlb	0	; select bank0
 13495  0E07  00A0               	movwf	??_setTxData
 13496  0E08  0820               	movf	??_setTxData,w
 13497  0E09  0023               	movlb	3	; select bank3
 13498  0E0A  00B4               	movwf	(_RF_Data^(0+384)+20)
 13499  0E0B  0008               	return
 13500  0E0C                     __end_of_setTxData:	
 13501                           
 13502                           	psect	text79
 13503  17A7                     __ptext79:	
 13504 ;; *************** function _setRF_DimmerLights *****************
 13505 ;; Defined at:
 13506 ;;		line 437 in file "../src/RF_Control_B1.c"
 13507 ;; Parameters:    Size  Location     Type
 13508 ;;  lights          1    wreg     unsigned char 
 13509 ;;  on              1   70[BANK0 ] unsigned char 
 13510 ;; Auto vars:     Size  Location     Type
 13511 ;;  lights          1   74[BANK0 ] unsigned char 
 13512 ;;  status          1   73[BANK0 ] unsigned char 
 13513 ;; Return value:  Size  Location     Type
 13514 ;;		None               void
 13515 ;; Registers used:
 13516 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13517 ;; Tracked objects:
 13518 ;;		On entry : 0/0
 13519 ;;		On exit  : 0/0
 13520 ;;		Unchanged: 0/0
 13521 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13522 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13523 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13524 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13525 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13526 ;;Total ram usage:        5 bytes
 13527 ;; Hardware stack levels used:    1
 13528 ;; Hardware stack levels required when called:    6
 13529 ;; This function calls:
 13530 ;;		_setProductData
 13531 ;; This function is called by:
 13532 ;;		_setDimmerLights
 13533 ;;		_setDimmerLights_Adj
 13534 ;;		_setRFSW_Control
 13535 ;; This function uses a non-reentrant model
 13536 ;;
 13537                           
 13538                           
 13539                           ;psect for function _setRF_DimmerLights
 13540  17A7                     _setRF_DimmerLights:	
 13541                           
 13542                           ;incstack = 0
 13543                           ; Regs used in _setRF_DimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13544                           ;setRF_DimmerLights@lights stored from wreg
 13545  17A7  0020               	movlb	0	; select bank0
 13546  17A8  00EA               	movwf	setRF_DimmerLights@lights
 13547                           
 13548                           ;RF_Control_B1.c: 438: char status = 1;
 13549  17A9  01E9               	clrf	setRF_DimmerLights@status
 13550  17AA  0AE9               	incf	setRF_DimmerLights@status,f
 13551                           
 13552                           ;RF_Control_B1.c: 439: status <<= (lights - 1);
 13553  17AB  086A               	movf	setRF_DimmerLights@lights,w
 13554  17AC  3EFF               	addlw	-1
 13555  17AD  0A89               	incf	9,f
 13556  17AE  2FB1               	goto	u9960
 13557  17AF                     u9965:	
 13558  17AF  1003               	clrc
 13559  17B0  0DE9               	rlf	setRF_DimmerLights@status,f
 13560  17B1                     u9960:	
 13561  17B1  3EFF               	addlw	-1
 13562  17B2  1D03               	skipz
 13563  17B3  2FAF               	goto	u9965
 13564                           
 13565                           ;RF_Control_B1.c: 440: setProductData(11, lights);
 13566  17B4  086A               	movf	setRF_DimmerLights@lights,w
 13567  17B5  00E7               	movwf	??_setRF_DimmerLights
 13568  17B6  0867               	movf	??_setRF_DimmerLights,w
 13569  17B7  00E2               	movwf	setProductData@value
 13570  17B8  300B               	movlw	11
 13571  17B9  319B  23CC  3197   	fcall	_setProductData
 13572                           
 13573                           ;RF_Control_B1.c: 448: setProductData(9, product->Data[20 + lights]);
 13574  17BC  0020               	movlb	0	; select bank0
 13575  17BD  086A               	movf	setRF_DimmerLights@lights,w
 13576  17BE  3E14               	addlw	20
 13577  17BF  0779               	addwf	_product,w
 13578  17C0  00E7               	movwf	??_setRF_DimmerLights
 13579  17C1  0867               	movf	??_setRF_DimmerLights,w
 13580  17C2  0086               	movwf	6
 13581  17C3  3002               	movlw	2	; select bank4/5
 13582  17C4  0087               	movwf	7
 13583  17C5  0801               	movf	1,w
 13584  17C6  00E8               	movwf	??_setRF_DimmerLights+1
 13585  17C7  0868               	movf	??_setRF_DimmerLights+1,w
 13586  17C8  00E2               	movwf	setProductData@value
 13587  17C9  3009               	movlw	9
 13588  17CA  319B  23CC  3197   	fcall	_setProductData
 13589                           
 13590                           ;RF_Control_B1.c: 449: setProductData(17, product->Data[26 + lights]);
 13591  17CD  0020               	movlb	0	; select bank0
 13592  17CE  086A               	movf	setRF_DimmerLights@lights,w
 13593  17CF  3E1A               	addlw	26
 13594  17D0  0779               	addwf	_product,w
 13595  17D1  00E7               	movwf	??_setRF_DimmerLights
 13596  17D2  0867               	movf	??_setRF_DimmerLights,w
 13597  17D3  0086               	movwf	6
 13598  17D4  3002               	movlw	2	; select bank4/5
 13599  17D5  0087               	movwf	7
 13600  17D6  0801               	movf	1,w
 13601  17D7  00E8               	movwf	??_setRF_DimmerLights+1
 13602  17D8  0868               	movf	??_setRF_DimmerLights+1,w
 13603  17D9  00E2               	movwf	setProductData@value
 13604  17DA  3011               	movlw	17
 13605  17DB  319B  23CC  3197   	fcall	_setProductData
 13606                           
 13607                           ;RF_Control_B1.c: 450: if (on == 1) {
 13608  17DE  0020               	movlb	0	; select bank0
 13609  17DF  0866               	movf	setRF_DimmerLights@on,w
 13610  17E0  3A01               	xorlw	1
 13611  17E1  1D03               	skipz
 13612  17E2  2FF1               	goto	l9071
 13613                           
 13614                           ;RF_Control_B1.c: 451: setProductData(15, (product->Data[15] | status));
 13615  17E3  0879               	movf	_product,w
 13616  17E4  3E0F               	addlw	15
 13617  17E5  0086               	movwf	6
 13618  17E6  3002               	movlw	2	; select bank4/5
 13619  17E7  0087               	movwf	7
 13620  17E8  0801               	movf	1,w
 13621  17E9  0469               	iorwf	setRF_DimmerLights@status,w
 13622  17EA  00E7               	movwf	??_setRF_DimmerLights
 13623  17EB  0867               	movf	??_setRF_DimmerLights,w
 13624  17EC  00E2               	movwf	setProductData@value
 13625  17ED  300F               	movlw	15
 13626  17EE  319B  23CC         	fcall	_setProductData
 13627                           
 13628                           ;RF_Control_B1.c: 452: } else {
 13629  17F0  0008               	return
 13630  17F1                     l9071:	
 13631                           
 13632                           ;RF_Control_B1.c: 453: setProductData(15, (product->Data[15]&(~status)));
 13633  17F1  0879               	movf	_product,w
 13634  17F2  3E0F               	addlw	15
 13635  17F3  0086               	movwf	6
 13636  17F4  3002               	movlw	2	; select bank4/5
 13637  17F5  0087               	movwf	7
 13638  17F6  0020               	movlb	0	; select bank0
 13639  17F7  0969               	comf	setRF_DimmerLights@status,w
 13640  17F8  0501               	andwf	1,w
 13641  17F9  00E7               	movwf	??_setRF_DimmerLights
 13642  17FA  0867               	movf	??_setRF_DimmerLights,w
 13643  17FB  00E2               	movwf	setProductData@value
 13644  17FC  300F               	movlw	15
 13645  17FD  319B  23CC         	fcall	_setProductData
 13646  17FF  0008               	return
 13647  1800                     __end_of_setRF_DimmerLights:	
 13648                           
 13649                           	psect	text80
 13650  0A4A                     __ptext80:	
 13651 ;; *************** function _setPercentValue *****************
 13652 ;; Defined at:
 13653 ;;		line 1034 in file "../src/Dimmer_B1.c"
 13654 ;; Parameters:    Size  Location     Type
 13655 ;;  value           1    wreg     unsigned char 
 13656 ;; Auto vars:     Size  Location     Type
 13657 ;;  value           1   62[BANK0 ] unsigned char 
 13658 ;;  i               3   63[BANK0 ] float 
 13659 ;; Return value:  Size  Location     Type
 13660 ;;                  1    wreg      unsigned char 
 13661 ;; Registers used:
 13662 ;;		wreg, status,2, status,0, pclath, cstack
 13663 ;; Tracked objects:
 13664 ;;		On entry : 0/0
 13665 ;;		On exit  : 0/0
 13666 ;;		Unchanged: 0/0
 13667 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13668 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13669 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13670 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13671 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13672 ;;Total ram usage:        6 bytes
 13673 ;; Hardware stack levels used:    1
 13674 ;; Hardware stack levels required when called:    7
 13675 ;; This function calls:
 13676 ;;		___awtoft
 13677 ;;		___ftadd
 13678 ;;		___ftdiv
 13679 ;;		___ftneg
 13680 ;;		___fttol
 13681 ;; This function is called by:
 13682 ;;		_setDimmerLights
 13683 ;;		_setDimmerLights_Adj
 13684 ;;		_Flash_Memory_Initialization
 13685 ;; This function uses a non-reentrant model
 13686 ;;
 13687                           
 13688                           
 13689                           ;psect for function _setPercentValue
 13690  0A4A                     _setPercentValue:	
 13691                           
 13692                           ;incstack = 0
 13693                           ; Regs used in _setPercentValue: [wreg+status,2+status,0+pclath+cstack]
 13694                           ;setPercentValue@value stored from wreg
 13695  0A4A  0020               	movlb	0	; select bank0
 13696  0A4B  00DE               	movwf	setPercentValue@value
 13697                           
 13698                           ;Dimmer_B1.c: 1042: float i = ((char)(75*0.8)) - ((char)(15*0.8));
 13699  0A4C  3000               	movlw	0
 13700  0A4D  00DF               	movwf	setPercentValue@i
 13701  0A4E  3040               	movlw	64
 13702  0A4F  00E0               	movwf	setPercentValue@i+1
 13703  0A50  3042               	movlw	66
 13704  0A51  00E1               	movwf	setPercentValue@i+2
 13705                           
 13706                           ;Dimmer_B1.c: 1043: i /= 100;
 13707  0A52  3000               	movlw	0
 13708  0A53  00AE               	movwf	___ftdiv@f2
 13709  0A54  30C8               	movlw	200
 13710  0A55  00AF               	movwf	___ftdiv@f2+1
 13711  0A56  3042               	movlw	66
 13712  0A57  00B0               	movwf	___ftdiv@f2+2
 13713  0A58  085F               	movf	setPercentValue@i,w
 13714  0A59  00B1               	movwf	___ftdiv@f1
 13715  0A5A  0860               	movf	setPercentValue@i+1,w
 13716  0A5B  00B2               	movwf	___ftdiv@f1+1
 13717  0A5C  0861               	movf	setPercentValue@i+2,w
 13718  0A5D  00B3               	movwf	___ftdiv@f1+2
 13719  0A5E  318E  26A7  318A   	fcall	___ftdiv
 13720  0A61  0020               	movlb	0	; select bank0
 13721  0A62  082E               	movf	?___ftdiv,w
 13722  0A63  00DF               	movwf	setPercentValue@i
 13723  0A64  082F               	movf	?___ftdiv+1,w
 13724  0A65  00E0               	movwf	setPercentValue@i+1
 13725  0A66  0830               	movf	?___ftdiv+2,w
 13726  0A67  00E1               	movwf	setPercentValue@i+2
 13727                           
 13728                           ;Dimmer_B1.c: 1045: return (char) (100 - ((((char)(75*0.8)) - value) / i));
 13729  0A68  085E               	movf	setPercentValue@value,w
 13730  0A69  00DC               	movwf	??_setPercentValue
 13731  0A6A  01DD               	clrf	??_setPercentValue+1
 13732  0A6B  09DC               	comf	??_setPercentValue,f
 13733  0A6C  09DD               	comf	??_setPercentValue+1,f
 13734  0A6D  0ADC               	incf	??_setPercentValue,f
 13735  0A6E  1903               	skipnz
 13736  0A6F  0ADD               	incf	??_setPercentValue+1,f
 13737  0A70  085C               	movf	??_setPercentValue,w
 13738  0A71  3E3C               	addlw	60
 13739  0A72  00A8               	movwf	___awtoft@c
 13740  0A73  3000               	movlw	0
 13741  0A74  3D5D               	addwfc	??_setPercentValue+1,w
 13742  0A75  00A9               	movwf	___awtoft@c+1
 13743  0A76  319F  2723  318A   	fcall	___awtoft
 13744  0A79  0020               	movlb	0	; select bank0
 13745  0A7A  0828               	movf	?___awtoft,w
 13746  0A7B  00B1               	movwf	___ftdiv@f1
 13747  0A7C  0829               	movf	?___awtoft+1,w
 13748  0A7D  00B2               	movwf	___ftdiv@f1+1
 13749  0A7E  082A               	movf	?___awtoft+2,w
 13750  0A7F  00B3               	movwf	___ftdiv@f1+2
 13751  0A80  085F               	movf	setPercentValue@i,w
 13752  0A81  00AE               	movwf	___ftdiv@f2
 13753  0A82  0860               	movf	setPercentValue@i+1,w
 13754  0A83  00AF               	movwf	___ftdiv@f2+1
 13755  0A84  0861               	movf	setPercentValue@i+2,w
 13756  0A85  00B0               	movwf	___ftdiv@f2+2
 13757  0A86  318E  26A7  318A   	fcall	___ftdiv
 13758  0A89  0020               	movlb	0	; select bank0
 13759  0A8A  082E               	movf	?___ftdiv,w
 13760  0A8B  00BE               	movwf	___ftneg@f1
 13761  0A8C  082F               	movf	?___ftdiv+1,w
 13762  0A8D  00BF               	movwf	___ftneg@f1+1
 13763  0A8E  0830               	movf	?___ftdiv+2,w
 13764  0A8F  00C0               	movwf	___ftneg@f1+2
 13765  0A90  319B  2337  318A   	fcall	___ftneg
 13766  0A93  0020               	movlb	0	; select bank0
 13767  0A94  083E               	movf	?___ftneg,w
 13768  0A95  00C4               	movwf	___ftadd@f2
 13769  0A96  083F               	movf	?___ftneg+1,w
 13770  0A97  00C5               	movwf	___ftadd@f2+1
 13771  0A98  0840               	movf	?___ftneg+2,w
 13772  0A99  00C6               	movwf	___ftadd@f2+2
 13773  0A9A  3000               	movlw	0
 13774  0A9B  00C1               	movwf	___ftadd@f1
 13775  0A9C  30C8               	movlw	200
 13776  0A9D  00C2               	movwf	___ftadd@f1+1
 13777  0A9E  3042               	movlw	66
 13778  0A9F  00C3               	movwf	___ftadd@f1+2
 13779  0AA0  3184  2469  318A   	fcall	___ftadd
 13780  0AA3  0020               	movlb	0	; select bank0
 13781  0AA4  0841               	movf	?___ftadd,w
 13782  0AA5  00CE               	movwf	___fttol@f1
 13783  0AA6  0842               	movf	?___ftadd+1,w
 13784  0AA7  00CF               	movwf	___fttol@f1+1
 13785  0AA8  0843               	movf	?___ftadd+2,w
 13786  0AA9  00D0               	movwf	___fttol@f1+2
 13787  0AAA  318C  24EA         	fcall	___fttol
 13788  0AAC  0020               	movlb	0	; select bank0
 13789  0AAD  084E               	movf	?___fttol,w
 13790  0AAE  0008               	return
 13791  0AAF                     __end_of_setPercentValue:	
 13792                           
 13793                           	psect	text81
 13794  0CEA                     __ptext81:	
 13795 ;; *************** function ___fttol *****************
 13796 ;; Defined at:
 13797 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\fttol.c"
 13798 ;; Parameters:    Size  Location     Type
 13799 ;;  f1              3   46[BANK0 ] float 
 13800 ;; Auto vars:     Size  Location     Type
 13801 ;;  lval            4   55[BANK0 ] unsigned long 
 13802 ;;  exp1            1   59[BANK0 ] unsigned char 
 13803 ;;  sign1           1   54[BANK0 ] unsigned char 
 13804 ;; Return value:  Size  Location     Type
 13805 ;;                  4   46[BANK0 ] long 
 13806 ;; Registers used:
 13807 ;;		wreg, status,2, status,0
 13808 ;; Tracked objects:
 13809 ;;		On entry : 0/0
 13810 ;;		On exit  : 0/0
 13811 ;;		Unchanged: 0/0
 13812 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13813 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13814 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13815 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13816 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13817 ;;Total ram usage:       14 bytes
 13818 ;; Hardware stack levels used:    1
 13819 ;; Hardware stack levels required when called:    5
 13820 ;; This function calls:
 13821 ;;		Nothing
 13822 ;; This function is called by:
 13823 ;;		_getPercentValue
 13824 ;;		_setPercentValue
 13825 ;; This function uses a non-reentrant model
 13826 ;;
 13827                           
 13828                           
 13829                           ;psect for function ___fttol
 13830  0CEA                     ___fttol:	
 13831                           
 13832                           ;incstack = 0
 13833                           ; Regs used in ___fttol: [wreg+status,2+status,0]
 13834  0CEA  0020               	movlb	0	; select bank0
 13835  0CEB  084E               	movf	___fttol@f1,w
 13836  0CEC  00D2               	movwf	??___fttol
 13837  0CED  084F               	movf	___fttol@f1+1,w
 13838  0CEE  00D3               	movwf	??___fttol+1
 13839  0CEF  0850               	movf	___fttol@f1+2,w
 13840  0CF0  00D4               	movwf	??___fttol+2
 13841  0CF1  1003               	clrc
 13842  0CF2  0D53               	rlf	??___fttol+1,w
 13843  0CF3  0D54               	rlf	??___fttol+2,w
 13844  0CF4  00D5               	movwf	??___fttol+3
 13845  0CF5  0855               	movf	??___fttol+3,w
 13846  0CF6  00DB               	movwf	___fttol@exp1
 13847  0CF7  08DB               	movf	___fttol@exp1,f
 13848  0CF8  1D03               	skipz
 13849  0CF9  2D03               	goto	l8815
 13850  0CFA  3000               	movlw	0
 13851  0CFB  00D1               	movwf	?___fttol+3
 13852  0CFC  3000               	movlw	0
 13853  0CFD  00D0               	movwf	?___fttol+2
 13854  0CFE  3000               	movlw	0
 13855  0CFF  00CF               	movwf	?___fttol+1
 13856  0D00  3000               	movlw	0
 13857  0D01  00CE               	movwf	?___fttol
 13858  0D02  0008               	return
 13859  0D03                     l8815:	
 13860  0D03  084E               	movf	___fttol@f1,w
 13861  0D04  00D2               	movwf	??___fttol
 13862  0D05  084F               	movf	___fttol@f1+1,w
 13863  0D06  00D3               	movwf	??___fttol+1
 13864  0D07  0850               	movf	___fttol@f1+2,w
 13865  0D08  00D4               	movwf	??___fttol+2
 13866  0D09  3017               	movlw	23
 13867  0D0A                     u9505:	
 13868  0D0A  36D4               	lsrf	??___fttol+2,f
 13869  0D0B  0CD3               	rrf	??___fttol+1,f
 13870  0D0C  0CD2               	rrf	??___fttol,f
 13871  0D0D  0B89               	decfsz	9,f
 13872  0D0E  2D0A               	goto	u9505
 13873  0D0F  0852               	movf	??___fttol,w
 13874  0D10  00D5               	movwf	??___fttol+3
 13875  0D11  0855               	movf	??___fttol+3,w
 13876  0D12  00D6               	movwf	___fttol@sign1
 13877  0D13  17CF               	bsf	___fttol@f1+1,7
 13878  0D14  30FF               	movlw	255
 13879  0D15  05CE               	andwf	___fttol@f1,f
 13880  0D16  30FF               	movlw	255
 13881  0D17  05CF               	andwf	___fttol@f1+1,f
 13882  0D18  3000               	movlw	0
 13883  0D19  05D0               	andwf	___fttol@f1+2,f
 13884  0D1A  084E               	movf	___fttol@f1,w
 13885  0D1B  00D7               	movwf	___fttol@lval
 13886  0D1C  084F               	movf	___fttol@f1+1,w
 13887  0D1D  00D8               	movwf	___fttol@lval+1
 13888  0D1E  0850               	movf	___fttol@f1+2,w
 13889  0D1F  00D9               	movwf	___fttol@lval+2
 13890  0D20  01DA               	clrf	___fttol@lval+3
 13891  0D21  308E               	movlw	142
 13892  0D22  02DB               	subwf	___fttol@exp1,f
 13893  0D23  1FDB               	btfss	___fttol@exp1,7
 13894  0D24  2D41               	goto	l8835
 13895  0D25  085B               	movf	___fttol@exp1,w
 13896  0D26  3A80               	xorlw	128
 13897  0D27  3E8F               	addlw	143
 13898  0D28  1803               	skipnc
 13899  0D29  2D33               	goto	l8833
 13900  0D2A  3000               	movlw	0
 13901  0D2B  00D1               	movwf	?___fttol+3
 13902  0D2C  3000               	movlw	0
 13903  0D2D  00D0               	movwf	?___fttol+2
 13904  0D2E  3000               	movlw	0
 13905  0D2F  00CF               	movwf	?___fttol+1
 13906  0D30  3000               	movlw	0
 13907  0D31  00CE               	movwf	?___fttol
 13908  0D32  0008               	return
 13909  0D33                     l8833:	
 13910  0D33  3001               	movlw	1
 13911  0D34                     u9535:	
 13912  0D34  36DA               	lsrf	___fttol@lval+3,f
 13913  0D35  0CD9               	rrf	___fttol@lval+2,f
 13914  0D36  0CD8               	rrf	___fttol@lval+1,f
 13915  0D37  0CD7               	rrf	___fttol@lval,f
 13916  0D38  0B89               	decfsz	9,f
 13917  0D39  2D34               	goto	u9535
 13918  0D3A  3001               	movlw	1
 13919  0D3B  00D2               	movwf	??___fttol
 13920  0D3C  0852               	movf	??___fttol,w
 13921  0D3D  07DB               	addwf	___fttol@exp1,f
 13922  0D3E  1903               	btfsc	3,2
 13923  0D3F  2D5A               	goto	l8845
 13924  0D40  2D33               	goto	l8833
 13925  0D41                     l8835:	
 13926  0D41  3018               	movlw	24
 13927  0D42  025B               	subwf	___fttol@exp1,w
 13928  0D43  1C03               	skipc
 13929  0D44  2D57               	goto	l8843
 13930  0D45  3000               	movlw	0
 13931  0D46  00D1               	movwf	?___fttol+3
 13932  0D47  3000               	movlw	0
 13933  0D48  00D0               	movwf	?___fttol+2
 13934  0D49  3000               	movlw	0
 13935  0D4A  00CF               	movwf	?___fttol+1
 13936  0D4B  3000               	movlw	0
 13937  0D4C  00CE               	movwf	?___fttol
 13938  0D4D  0008               	return
 13939  0D4E                     l8841:	
 13940  0D4E  3001               	movlw	1
 13941  0D4F                     u9565:	
 13942  0D4F  35D7               	lslf	___fttol@lval,f
 13943  0D50  0DD8               	rlf	___fttol@lval+1,f
 13944  0D51  0DD9               	rlf	___fttol@lval+2,f
 13945  0D52  0DDA               	rlf	___fttol@lval+3,f
 13946  0D53  0B89               	decfsz	9,f
 13947  0D54  2D4F               	goto	u9565
 13948  0D55  3001               	movlw	1
 13949  0D56  02DB               	subwf	___fttol@exp1,f
 13950  0D57                     l8843:	
 13951  0D57  08DB               	movf	___fttol@exp1,f
 13952  0D58  1D03               	skipz
 13953  0D59  2D4E               	goto	l8841
 13954  0D5A                     l8845:	
 13955  0D5A  0856               	movf	___fttol@sign1,w
 13956  0D5B  1903               	btfsc	3,2
 13957  0D5C  2D68               	goto	l8849
 13958  0D5D  09D7               	comf	___fttol@lval,f
 13959  0D5E  09D8               	comf	___fttol@lval+1,f
 13960  0D5F  09D9               	comf	___fttol@lval+2,f
 13961  0D60  09DA               	comf	___fttol@lval+3,f
 13962  0D61  0AD7               	incf	___fttol@lval,f
 13963  0D62  1903               	skipnz
 13964  0D63  0AD8               	incf	___fttol@lval+1,f
 13965  0D64  1903               	skipnz
 13966  0D65  0AD9               	incf	___fttol@lval+2,f
 13967  0D66  1903               	skipnz
 13968  0D67  0ADA               	incf	___fttol@lval+3,f
 13969  0D68                     l8849:	
 13970  0D68  085A               	movf	___fttol@lval+3,w
 13971  0D69  00D1               	movwf	?___fttol+3
 13972  0D6A  0859               	movf	___fttol@lval+2,w
 13973  0D6B  00D0               	movwf	?___fttol+2
 13974  0D6C  0858               	movf	___fttol@lval+1,w
 13975  0D6D  00CF               	movwf	?___fttol+1
 13976  0D6E  0857               	movf	___fttol@lval,w
 13977  0D6F  00CE               	movwf	?___fttol
 13978  0D70  0008               	return
 13979  0D71                     __end_of___fttol:	
 13980                           
 13981                           	psect	text82
 13982  1B37                     __ptext82:	
 13983 ;; *************** function ___ftneg *****************
 13984 ;; Defined at:
 13985 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftneg.c"
 13986 ;; Parameters:    Size  Location     Type
 13987 ;;  f1              3   30[BANK0 ] float 
 13988 ;; Auto vars:     Size  Location     Type
 13989 ;;		None
 13990 ;; Return value:  Size  Location     Type
 13991 ;;                  3   30[BANK0 ] float 
 13992 ;; Registers used:
 13993 ;;		wreg
 13994 ;; Tracked objects:
 13995 ;;		On entry : 0/0
 13996 ;;		On exit  : 0/0
 13997 ;;		Unchanged: 0/0
 13998 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13999 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14000 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14001 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14002 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14003 ;;Total ram usage:        3 bytes
 14004 ;; Hardware stack levels used:    1
 14005 ;; Hardware stack levels required when called:    5
 14006 ;; This function calls:
 14007 ;;		Nothing
 14008 ;; This function is called by:
 14009 ;;		_getPercentValue
 14010 ;;		_setPercentValue
 14011 ;; This function uses a non-reentrant model
 14012 ;;
 14013                           
 14014                           
 14015                           ;psect for function ___ftneg
 14016  1B37                     ___ftneg:	
 14017                           
 14018                           ;incstack = 0
 14019                           ; Regs used in ___ftneg: [wreg]
 14020  1B37  0020               	movlb	0	; select bank0
 14021  1B38  0840               	movf	___ftneg@f1+2,w
 14022  1B39  043F               	iorwf	___ftneg@f1+1,w
 14023  1B3A  043E               	iorwf	___ftneg@f1,w
 14024  1B3B  1903               	skipnz
 14025  1B3C  0008               	return
 14026  1B3D  3080               	movlw	128
 14027  1B3E  06C0               	xorwf	___ftneg@f1+2,f
 14028  1B3F  0008               	return
 14029  1B40                     __end_of___ftneg:	
 14030                           
 14031                           	psect	text83
 14032  0EA7                     __ptext83:	
 14033 ;; *************** function ___ftdiv *****************
 14034 ;; Defined at:
 14035 ;;		line 49 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\pic\ftdiv.c"
 14036 ;; Parameters:    Size  Location     Type
 14037 ;;  f2              3   14[BANK0 ] float 
 14038 ;;  f1              3   17[BANK0 ] float 
 14039 ;; Auto vars:     Size  Location     Type
 14040 ;;  f3              3   25[BANK0 ] float 
 14041 ;;  sign            1   29[BANK0 ] unsigned char 
 14042 ;;  exp             1   28[BANK0 ] unsigned char 
 14043 ;;  cntr            1   24[BANK0 ] unsigned char 
 14044 ;; Return value:  Size  Location     Type
 14045 ;;                  3   14[BANK0 ] float 
 14046 ;; Registers used:
 14047 ;;		wreg, status,2, status,0, pclath, cstack
 14048 ;; Tracked objects:
 14049 ;;		On entry : 0/0
 14050 ;;		On exit  : 0/0
 14051 ;;		Unchanged: 0/0
 14052 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14053 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14054 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14055 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14056 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14057 ;;Total ram usage:       16 bytes
 14058 ;; Hardware stack levels used:    1
 14059 ;; Hardware stack levels required when called:    6
 14060 ;; This function calls:
 14061 ;;		___ftpack
 14062 ;; This function is called by:
 14063 ;;		_getPercentValue
 14064 ;;		_setPercentValue
 14065 ;; This function uses a non-reentrant model
 14066 ;;
 14067                           
 14068                           
 14069                           ;psect for function ___ftdiv
 14070  0EA7                     ___ftdiv:	
 14071                           
 14072                           ;incstack = 0
 14073                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
 14074  0EA7  0020               	movlb	0	; select bank0
 14075  0EA8  0831               	movf	___ftdiv@f1,w
 14076  0EA9  00B4               	movwf	??___ftdiv
 14077  0EAA  0832               	movf	___ftdiv@f1+1,w
 14078  0EAB  00B5               	movwf	??___ftdiv+1
 14079  0EAC  0833               	movf	___ftdiv@f1+2,w
 14080  0EAD  00B6               	movwf	??___ftdiv+2
 14081  0EAE  1003               	clrc
 14082  0EAF  0D35               	rlf	??___ftdiv+1,w
 14083  0EB0  0D36               	rlf	??___ftdiv+2,w
 14084  0EB1  00B7               	movwf	??___ftdiv+3
 14085  0EB2  0837               	movf	??___ftdiv+3,w
 14086  0EB3  00BC               	movwf	___ftdiv@exp
 14087  0EB4  08BC               	movf	___ftdiv@exp,f
 14088  0EB5  1D03               	skipz
 14089  0EB6  2EBE               	goto	l8715
 14090  0EB7  3000               	movlw	0
 14091  0EB8  00AE               	movwf	?___ftdiv
 14092  0EB9  3000               	movlw	0
 14093  0EBA  00AF               	movwf	?___ftdiv+1
 14094  0EBB  3000               	movlw	0
 14095  0EBC  00B0               	movwf	?___ftdiv+2
 14096  0EBD  0008               	return
 14097  0EBE                     l8715:	
 14098  0EBE  082E               	movf	___ftdiv@f2,w
 14099  0EBF  00B4               	movwf	??___ftdiv
 14100  0EC0  082F               	movf	___ftdiv@f2+1,w
 14101  0EC1  00B5               	movwf	??___ftdiv+1
 14102  0EC2  0830               	movf	___ftdiv@f2+2,w
 14103  0EC3  00B6               	movwf	??___ftdiv+2
 14104  0EC4  1003               	clrc
 14105  0EC5  0D35               	rlf	??___ftdiv+1,w
 14106  0EC6  0D36               	rlf	??___ftdiv+2,w
 14107  0EC7  00B7               	movwf	??___ftdiv+3
 14108  0EC8  0837               	movf	??___ftdiv+3,w
 14109  0EC9  00BD               	movwf	___ftdiv@sign
 14110  0ECA  08BD               	movf	___ftdiv@sign,f
 14111  0ECB  1D03               	skipz
 14112  0ECC  2ED4               	goto	l8721
 14113  0ECD  3000               	movlw	0
 14114  0ECE  00AE               	movwf	?___ftdiv
 14115  0ECF  3000               	movlw	0
 14116  0ED0  00AF               	movwf	?___ftdiv+1
 14117  0ED1  3000               	movlw	0
 14118  0ED2  00B0               	movwf	?___ftdiv+2
 14119  0ED3  0008               	return
 14120  0ED4                     l8721:	
 14121  0ED4  3000               	movlw	0
 14122  0ED5  00B9               	movwf	___ftdiv@f3
 14123  0ED6  3000               	movlw	0
 14124  0ED7  00BA               	movwf	___ftdiv@f3+1
 14125  0ED8  3000               	movlw	0
 14126  0ED9  00BB               	movwf	___ftdiv@f3+2
 14127  0EDA  3089               	movlw	137
 14128  0EDB  073D               	addwf	___ftdiv@sign,w
 14129  0EDC  00B4               	movwf	??___ftdiv
 14130  0EDD  0834               	movf	??___ftdiv,w
 14131  0EDE  02BC               	subwf	___ftdiv@exp,f
 14132  0EDF  0831               	movf	___ftdiv@f1,w
 14133  0EE0  00B4               	movwf	??___ftdiv
 14134  0EE1  0832               	movf	___ftdiv@f1+1,w
 14135  0EE2  00B5               	movwf	??___ftdiv+1
 14136  0EE3  0833               	movf	___ftdiv@f1+2,w
 14137  0EE4  00B6               	movwf	??___ftdiv+2
 14138  0EE5  3010               	movlw	16
 14139  0EE6                     u9305:	
 14140  0EE6  36B6               	lsrf	??___ftdiv+2,f
 14141  0EE7  0CB5               	rrf	??___ftdiv+1,f
 14142  0EE8  0CB4               	rrf	??___ftdiv,f
 14143  0EE9  0B89               	decfsz	9,f
 14144  0EEA  2EE6               	goto	u9305
 14145  0EEB  0834               	movf	??___ftdiv,w
 14146  0EEC  00B7               	movwf	??___ftdiv+3
 14147  0EED  0837               	movf	??___ftdiv+3,w
 14148  0EEE  00BD               	movwf	___ftdiv@sign
 14149  0EEF  082E               	movf	___ftdiv@f2,w
 14150  0EF0  00B4               	movwf	??___ftdiv
 14151  0EF1  082F               	movf	___ftdiv@f2+1,w
 14152  0EF2  00B5               	movwf	??___ftdiv+1
 14153  0EF3  0830               	movf	___ftdiv@f2+2,w
 14154  0EF4  00B6               	movwf	??___ftdiv+2
 14155  0EF5  3010               	movlw	16
 14156  0EF6                     u9315:	
 14157  0EF6  36B6               	lsrf	??___ftdiv+2,f
 14158  0EF7  0CB5               	rrf	??___ftdiv+1,f
 14159  0EF8  0CB4               	rrf	??___ftdiv,f
 14160  0EF9  0B89               	decfsz	9,f
 14161  0EFA  2EF6               	goto	u9315
 14162  0EFB  0834               	movf	??___ftdiv,w
 14163  0EFC  00B7               	movwf	??___ftdiv+3
 14164  0EFD  0837               	movf	??___ftdiv+3,w
 14165  0EFE  06BD               	xorwf	___ftdiv@sign,f
 14166  0EFF  3080               	movlw	128
 14167  0F00  00B4               	movwf	??___ftdiv
 14168  0F01  0834               	movf	??___ftdiv,w
 14169  0F02  05BD               	andwf	___ftdiv@sign,f
 14170  0F03  17B2               	bsf	___ftdiv@f1+1,7
 14171  0F04  30FF               	movlw	255
 14172  0F05  05B1               	andwf	___ftdiv@f1,f
 14173  0F06  30FF               	movlw	255
 14174  0F07  05B2               	andwf	___ftdiv@f1+1,f
 14175  0F08  3000               	movlw	0
 14176  0F09  05B3               	andwf	___ftdiv@f1+2,f
 14177  0F0A  17AF               	bsf	___ftdiv@f2+1,7
 14178  0F0B  30FF               	movlw	255
 14179  0F0C  05AE               	andwf	___ftdiv@f2,f
 14180  0F0D  30FF               	movlw	255
 14181  0F0E  05AF               	andwf	___ftdiv@f2+1,f
 14182  0F0F  3000               	movlw	0
 14183  0F10  05B0               	andwf	___ftdiv@f2+2,f
 14184  0F11  3018               	movlw	24
 14185  0F12  00B4               	movwf	??___ftdiv
 14186  0F13  0834               	movf	??___ftdiv,w
 14187  0F14  00B8               	movwf	___ftdiv@cntr
 14188  0F15                     l8735:	
 14189  0F15  3001               	movlw	1
 14190  0F16                     u9325:	
 14191  0F16  35B9               	lslf	___ftdiv@f3,f
 14192  0F17  0DBA               	rlf	___ftdiv@f3+1,f
 14193  0F18  0DBB               	rlf	___ftdiv@f3+2,f
 14194  0F19  0B89               	decfsz	9,f
 14195  0F1A  2F16               	goto	u9325
 14196  0F1B  0830               	movf	___ftdiv@f2+2,w
 14197  0F1C  0233               	subwf	___ftdiv@f1+2,w
 14198  0F1D  1D03               	skipz
 14199  0F1E  2F25               	goto	u9335
 14200  0F1F  082F               	movf	___ftdiv@f2+1,w
 14201  0F20  0232               	subwf	___ftdiv@f1+1,w
 14202  0F21  1D03               	skipz
 14203  0F22  2F25               	goto	u9335
 14204  0F23  082E               	movf	___ftdiv@f2,w
 14205  0F24  0231               	subwf	___ftdiv@f1,w
 14206  0F25                     u9335:	
 14207  0F25  1C03               	skipc
 14208  0F26  2F2E               	goto	l8743
 14209  0F27  082E               	movf	___ftdiv@f2,w
 14210  0F28  02B1               	subwf	___ftdiv@f1,f
 14211  0F29  082F               	movf	___ftdiv@f2+1,w
 14212  0F2A  3BB2               	subwfb	___ftdiv@f1+1,f
 14213  0F2B  0830               	movf	___ftdiv@f2+2,w
 14214  0F2C  3BB3               	subwfb	___ftdiv@f1+2,f
 14215  0F2D  1439               	bsf	___ftdiv@f3,0
 14216  0F2E                     l8743:	
 14217  0F2E  3001               	movlw	1
 14218  0F2F                     u9345:	
 14219  0F2F  35B1               	lslf	___ftdiv@f1,f
 14220  0F30  0DB2               	rlf	___ftdiv@f1+1,f
 14221  0F31  0DB3               	rlf	___ftdiv@f1+2,f
 14222  0F32  0B89               	decfsz	9,f
 14223  0F33  2F2F               	goto	u9345
 14224  0F34  3001               	movlw	1
 14225  0F35  02B8               	subwf	___ftdiv@cntr,f
 14226  0F36  1D03               	btfss	3,2
 14227  0F37  2F15               	goto	l8735
 14228  0F38  0839               	movf	___ftdiv@f3,w
 14229  0F39  00A0               	movwf	___ftpack@arg
 14230  0F3A  083A               	movf	___ftdiv@f3+1,w
 14231  0F3B  00A1               	movwf	___ftpack@arg+1
 14232  0F3C  083B               	movf	___ftdiv@f3+2,w
 14233  0F3D  00A2               	movwf	___ftpack@arg+2
 14234  0F3E  083C               	movf	___ftdiv@exp,w
 14235  0F3F  00B4               	movwf	??___ftdiv
 14236  0F40  0834               	movf	??___ftdiv,w
 14237  0F41  00A3               	movwf	___ftpack@exp
 14238  0F42  083D               	movf	___ftdiv@sign,w
 14239  0F43  00B5               	movwf	??___ftdiv+1
 14240  0F44  0835               	movf	??___ftdiv+1,w
 14241  0F45  00A4               	movwf	___ftpack@sign
 14242  0F46  3189  2123         	fcall	___ftpack
 14243  0F48  0020               	movlb	0	; select bank0
 14244  0F49  0820               	movf	?___ftpack,w
 14245  0F4A  00AE               	movwf	?___ftdiv
 14246  0F4B  0821               	movf	?___ftpack+1,w
 14247  0F4C  00AF               	movwf	?___ftdiv+1
 14248  0F4D  0822               	movf	?___ftpack+2,w
 14249  0F4E  00B0               	movwf	?___ftdiv+2
 14250  0F4F  0008               	return
 14251  0F50                     __end_of___ftdiv:	
 14252                           
 14253                           	psect	text84
 14254  0469                     __ptext84:	
 14255 ;; *************** function ___ftadd *****************
 14256 ;; Defined at:
 14257 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftadd.c"
 14258 ;; Parameters:    Size  Location     Type
 14259 ;;  f1              3   33[BANK0 ] float 
 14260 ;;  f2              3   36[BANK0 ] float 
 14261 ;; Auto vars:     Size  Location     Type
 14262 ;;  exp1            1   45[BANK0 ] unsigned char 
 14263 ;;  exp2            1   44[BANK0 ] unsigned char 
 14264 ;;  sign            1   43[BANK0 ] unsigned char 
 14265 ;; Return value:  Size  Location     Type
 14266 ;;                  3   33[BANK0 ] float 
 14267 ;; Registers used:
 14268 ;;		wreg, status,2, status,0, pclath, cstack
 14269 ;; Tracked objects:
 14270 ;;		On entry : 0/0
 14271 ;;		On exit  : 0/0
 14272 ;;		Unchanged: 0/0
 14273 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14274 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14275 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14276 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14277 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14278 ;;Total ram usage:       13 bytes
 14279 ;; Hardware stack levels used:    1
 14280 ;; Hardware stack levels required when called:    6
 14281 ;; This function calls:
 14282 ;;		___ftpack
 14283 ;; This function is called by:
 14284 ;;		_getPercentValue
 14285 ;;		_setPercentValue
 14286 ;; This function uses a non-reentrant model
 14287 ;;
 14288                           
 14289                           
 14290                           ;psect for function ___ftadd
 14291  0469                     ___ftadd:	
 14292                           
 14293                           ;incstack = 0
 14294                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
 14295  0469  0020               	movlb	0	; select bank0
 14296  046A  0841               	movf	___ftadd@f1,w
 14297  046B  00C7               	movwf	??___ftadd
 14298  046C  0842               	movf	___ftadd@f1+1,w
 14299  046D  00C8               	movwf	??___ftadd+1
 14300  046E  0843               	movf	___ftadd@f1+2,w
 14301  046F  00C9               	movwf	??___ftadd+2
 14302  0470  1003               	clrc
 14303  0471  0D48               	rlf	??___ftadd+1,w
 14304  0472  0D49               	rlf	??___ftadd+2,w
 14305  0473  00CA               	movwf	??___ftadd+3
 14306  0474  084A               	movf	??___ftadd+3,w
 14307  0475  00CD               	movwf	___ftadd@exp1
 14308  0476  0844               	movf	___ftadd@f2,w
 14309  0477  00C7               	movwf	??___ftadd
 14310  0478  0845               	movf	___ftadd@f2+1,w
 14311  0479  00C8               	movwf	??___ftadd+1
 14312  047A  0846               	movf	___ftadd@f2+2,w
 14313  047B  00C9               	movwf	??___ftadd+2
 14314  047C  1003               	clrc
 14315  047D  0D48               	rlf	??___ftadd+1,w
 14316  047E  0D49               	rlf	??___ftadd+2,w
 14317  047F  00CA               	movwf	??___ftadd+3
 14318  0480  084A               	movf	??___ftadd+3,w
 14319  0481  00CC               	movwf	___ftadd@exp2
 14320  0482  084D               	movf	___ftadd@exp1,w
 14321  0483  1903               	btfsc	3,2
 14322  0484  2C91               	goto	l8645
 14323  0485  084C               	movf	___ftadd@exp2,w
 14324  0486  024D               	subwf	___ftadd@exp1,w
 14325  0487  1803               	skipnc
 14326  0488  2C98               	goto	l8649
 14327  0489  034D               	decf	___ftadd@exp1,w
 14328  048A  3AFF               	xorlw	255
 14329  048B  074C               	addwf	___ftadd@exp2,w
 14330  048C  00C7               	movwf	??___ftadd
 14331  048D  3019               	movlw	25
 14332  048E  0247               	subwf	??___ftadd,w
 14333  048F  1C03               	skipc
 14334  0490  2C98               	goto	l8649
 14335  0491                     l8645:	
 14336  0491  0844               	movf	___ftadd@f2,w
 14337  0492  00C1               	movwf	?___ftadd
 14338  0493  0845               	movf	___ftadd@f2+1,w
 14339  0494  00C2               	movwf	?___ftadd+1
 14340  0495  0846               	movf	___ftadd@f2+2,w
 14341  0496  00C3               	movwf	?___ftadd+2
 14342  0497  0008               	return
 14343  0498                     l8649:	
 14344  0498  084C               	movf	___ftadd@exp2,w
 14345  0499  1903               	btfsc	3,2
 14346  049A  0008               	return
 14347  049B  084D               	movf	___ftadd@exp1,w
 14348  049C  024C               	subwf	___ftadd@exp2,w
 14349  049D  1803               	skipnc
 14350  049E  2CA7               	goto	l8655
 14351  049F  034C               	decf	___ftadd@exp2,w
 14352  04A0  3AFF               	xorlw	255
 14353  04A1  074D               	addwf	___ftadd@exp1,w
 14354  04A2  00C7               	movwf	??___ftadd
 14355  04A3  3019               	movlw	25
 14356  04A4  0247               	subwf	??___ftadd,w
 14357  04A5  1803               	btfsc	3,0
 14358  04A6  0008               	return
 14359  04A7                     l8655:	
 14360  04A7  3006               	movlw	6
 14361  04A8  00C7               	movwf	??___ftadd
 14362  04A9  0847               	movf	??___ftadd,w
 14363  04AA  00CB               	movwf	___ftadd@sign
 14364  04AB  1BC3               	btfsc	___ftadd@f1+2,7
 14365  04AC  17CB               	bsf	___ftadd@sign,7
 14366  04AD  1BC6               	btfsc	___ftadd@f2+2,7
 14367  04AE  174B               	bsf	___ftadd@sign,6
 14368  04AF  17C2               	bsf	___ftadd@f1+1,7
 14369  04B0  30FF               	movlw	255
 14370  04B1  05C1               	andwf	___ftadd@f1,f
 14371  04B2  30FF               	movlw	255
 14372  04B3  05C2               	andwf	___ftadd@f1+1,f
 14373  04B4  3000               	movlw	0
 14374  04B5  05C3               	andwf	___ftadd@f1+2,f
 14375  04B6  17C5               	bsf	___ftadd@f2+1,7
 14376  04B7  30FF               	movlw	255
 14377  04B8  05C4               	andwf	___ftadd@f2,f
 14378  04B9  30FF               	movlw	255
 14379  04BA  05C5               	andwf	___ftadd@f2+1,f
 14380  04BB  3000               	movlw	0
 14381  04BC  05C6               	andwf	___ftadd@f2+2,f
 14382  04BD  084C               	movf	___ftadd@exp2,w
 14383  04BE  024D               	subwf	___ftadd@exp1,w
 14384  04BF  1803               	skipnc
 14385  04C0  2CE3               	goto	l8677
 14386  04C1                     l8667:	
 14387  04C1  3001               	movlw	1
 14388  04C2                     u9145:	
 14389  04C2  35C4               	lslf	___ftadd@f2,f
 14390  04C3  0DC5               	rlf	___ftadd@f2+1,f
 14391  04C4  0DC6               	rlf	___ftadd@f2+2,f
 14392  04C5  0B89               	decfsz	9,f
 14393  04C6  2CC2               	goto	u9145
 14394  04C7  3001               	movlw	1
 14395  04C8  02CC               	subwf	___ftadd@exp2,f
 14396  04C9  084C               	movf	___ftadd@exp2,w
 14397  04CA  064D               	xorwf	___ftadd@exp1,w
 14398  04CB  1903               	skipnz
 14399  04CC  2CDE               	goto	l8675
 14400  04CD  3001               	movlw	1
 14401  04CE  02CB               	subwf	___ftadd@sign,f
 14402  04CF  084B               	movf	___ftadd@sign,w
 14403  04D0  3907               	andlw	7
 14404  04D1  1903               	btfsc	3,2
 14405  04D2  2CDE               	goto	l8675
 14406  04D3  2CC1               	goto	l8667
 14407  04D4                     l8673:	
 14408  04D4  3001               	movlw	1
 14409  04D5                     u9175:	
 14410  04D5  36C3               	lsrf	___ftadd@f1+2,f
 14411  04D6  0CC2               	rrf	___ftadd@f1+1,f
 14412  04D7  0CC1               	rrf	___ftadd@f1,f
 14413  04D8  0B89               	decfsz	9,f
 14414  04D9  2CD5               	goto	u9175
 14415  04DA  3001               	movlw	1
 14416  04DB  00C7               	movwf	??___ftadd
 14417  04DC  0847               	movf	??___ftadd,w
 14418  04DD  07CD               	addwf	___ftadd@exp1,f
 14419  04DE                     l8675:	
 14420  04DE  084D               	movf	___ftadd@exp1,w
 14421  04DF  064C               	xorwf	___ftadd@exp2,w
 14422  04E0  1903               	btfsc	3,2
 14423  04E1  2D08               	goto	l3062
 14424  04E2  2CD4               	goto	l8673
 14425  04E3                     l8677:	
 14426  04E3  084D               	movf	___ftadd@exp1,w
 14427  04E4  024C               	subwf	___ftadd@exp2,w
 14428  04E5  1803               	skipnc
 14429  04E6  2D08               	goto	l3062
 14430  04E7                     l8679:	
 14431  04E7  3001               	movlw	1
 14432  04E8                     u9205:	
 14433  04E8  35C1               	lslf	___ftadd@f1,f
 14434  04E9  0DC2               	rlf	___ftadd@f1+1,f
 14435  04EA  0DC3               	rlf	___ftadd@f1+2,f
 14436  04EB  0B89               	decfsz	9,f
 14437  04EC  2CE8               	goto	u9205
 14438  04ED  3001               	movlw	1
 14439  04EE  02CD               	subwf	___ftadd@exp1,f
 14440  04EF  084C               	movf	___ftadd@exp2,w
 14441  04F0  064D               	xorwf	___ftadd@exp1,w
 14442  04F1  1903               	skipnz
 14443  04F2  2D04               	goto	l8687
 14444  04F3  3001               	movlw	1
 14445  04F4  02CB               	subwf	___ftadd@sign,f
 14446  04F5  084B               	movf	___ftadd@sign,w
 14447  04F6  3907               	andlw	7
 14448  04F7  1903               	btfsc	3,2
 14449  04F8  2D04               	goto	l8687
 14450  04F9  2CE7               	goto	l8679
 14451  04FA                     l8685:	
 14452  04FA  3001               	movlw	1
 14453  04FB                     u9235:	
 14454  04FB  36C6               	lsrf	___ftadd@f2+2,f
 14455  04FC  0CC5               	rrf	___ftadd@f2+1,f
 14456  04FD  0CC4               	rrf	___ftadd@f2,f
 14457  04FE  0B89               	decfsz	9,f
 14458  04FF  2CFB               	goto	u9235
 14459  0500  3001               	movlw	1
 14460  0501  00C7               	movwf	??___ftadd
 14461  0502  0847               	movf	??___ftadd,w
 14462  0503  07CC               	addwf	___ftadd@exp2,f
 14463  0504                     l8687:	
 14464  0504  084D               	movf	___ftadd@exp1,w
 14465  0505  064C               	xorwf	___ftadd@exp2,w
 14466  0506  1D03               	skipz
 14467  0507  2CFA               	goto	l8685
 14468  0508                     l3062:	
 14469  0508  1FCB               	btfss	___ftadd@sign,7
 14470  0509  2D1A               	goto	l8691
 14471  050A  30FF               	movlw	255
 14472  050B  06C1               	xorwf	___ftadd@f1,f
 14473  050C  30FF               	movlw	255
 14474  050D  06C2               	xorwf	___ftadd@f1+1,f
 14475  050E  30FF               	movlw	255
 14476  050F  06C3               	xorwf	___ftadd@f1+2,f
 14477  0510  3001               	movlw	1
 14478  0511  07C1               	addwf	___ftadd@f1,f
 14479  0512  3000               	movlw	0
 14480  0513  1803               	skipnc
 14481  0514  3001               	movlw	1
 14482  0515  07C2               	addwf	___ftadd@f1+1,f
 14483  0516  3000               	movlw	0
 14484  0517  1803               	skipnc
 14485  0518  3001               	movlw	1
 14486  0519  07C3               	addwf	___ftadd@f1+2,f
 14487  051A                     l8691:	
 14488  051A  1F4B               	btfss	___ftadd@sign,6
 14489  051B  2D2C               	goto	l8695
 14490  051C  30FF               	movlw	255
 14491  051D  06C4               	xorwf	___ftadd@f2,f
 14492  051E  30FF               	movlw	255
 14493  051F  06C5               	xorwf	___ftadd@f2+1,f
 14494  0520  30FF               	movlw	255
 14495  0521  06C6               	xorwf	___ftadd@f2+2,f
 14496  0522  3001               	movlw	1
 14497  0523  07C4               	addwf	___ftadd@f2,f
 14498  0524  3000               	movlw	0
 14499  0525  1803               	skipnc
 14500  0526  3001               	movlw	1
 14501  0527  07C5               	addwf	___ftadd@f2+1,f
 14502  0528  3000               	movlw	0
 14503  0529  1803               	skipnc
 14504  052A  3001               	movlw	1
 14505  052B  07C6               	addwf	___ftadd@f2+2,f
 14506  052C                     l8695:	
 14507  052C  01CB               	clrf	___ftadd@sign
 14508  052D  0841               	movf	___ftadd@f1,w
 14509  052E  07C4               	addwf	___ftadd@f2,f
 14510  052F  0842               	movf	___ftadd@f1+1,w
 14511  0530  3DC5               	addwfc	___ftadd@f2+1,f
 14512  0531  0843               	movf	___ftadd@f1+2,w
 14513  0532  3DC6               	addwfc	___ftadd@f2+2,f
 14514  0533  1FC6               	btfss	___ftadd@f2+2,7
 14515  0534  2D47               	goto	l8705
 14516  0535  30FF               	movlw	255
 14517  0536  06C4               	xorwf	___ftadd@f2,f
 14518  0537  30FF               	movlw	255
 14519  0538  06C5               	xorwf	___ftadd@f2+1,f
 14520  0539  30FF               	movlw	255
 14521  053A  06C6               	xorwf	___ftadd@f2+2,f
 14522  053B  3001               	movlw	1
 14523  053C  07C4               	addwf	___ftadd@f2,f
 14524  053D  3000               	movlw	0
 14525  053E  1803               	skipnc
 14526  053F  3001               	movlw	1
 14527  0540  07C5               	addwf	___ftadd@f2+1,f
 14528  0541  3000               	movlw	0
 14529  0542  1803               	skipnc
 14530  0543  3001               	movlw	1
 14531  0544  07C6               	addwf	___ftadd@f2+2,f
 14532  0545  01CB               	clrf	___ftadd@sign
 14533  0546  0ACB               	incf	___ftadd@sign,f
 14534  0547                     l8705:	
 14535  0547  0844               	movf	___ftadd@f2,w
 14536  0548  00A0               	movwf	___ftpack@arg
 14537  0549  0845               	movf	___ftadd@f2+1,w
 14538  054A  00A1               	movwf	___ftpack@arg+1
 14539  054B  0846               	movf	___ftadd@f2+2,w
 14540  054C  00A2               	movwf	___ftpack@arg+2
 14541  054D  084D               	movf	___ftadd@exp1,w
 14542  054E  00C7               	movwf	??___ftadd
 14543  054F  0847               	movf	??___ftadd,w
 14544  0550  00A3               	movwf	___ftpack@exp
 14545  0551  084B               	movf	___ftadd@sign,w
 14546  0552  00C8               	movwf	??___ftadd+1
 14547  0553  0848               	movf	??___ftadd+1,w
 14548  0554  00A4               	movwf	___ftpack@sign
 14549  0555  3189  2123         	fcall	___ftpack
 14550  0557  0020               	movlb	0	; select bank0
 14551  0558  0820               	movf	?___ftpack,w
 14552  0559  00C1               	movwf	?___ftadd
 14553  055A  0821               	movf	?___ftpack+1,w
 14554  055B  00C2               	movwf	?___ftadd+1
 14555  055C  0822               	movf	?___ftpack+2,w
 14556  055D  00C3               	movwf	?___ftadd+2
 14557  055E  0008               	return
 14558  055F                     __end_of___ftadd:	
 14559                           
 14560                           	psect	text85
 14561  1F23                     __ptext85:	
 14562 ;; *************** function ___awtoft *****************
 14563 ;; Defined at:
 14564 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awtoft.c"
 14565 ;; Parameters:    Size  Location     Type
 14566 ;;  c               2    8[BANK0 ] int 
 14567 ;; Auto vars:     Size  Location     Type
 14568 ;;  sign            1   13[BANK0 ] unsigned char 
 14569 ;; Return value:  Size  Location     Type
 14570 ;;                  3    8[BANK0 ] float 
 14571 ;; Registers used:
 14572 ;;		wreg, status,2, status,0, pclath, cstack
 14573 ;; Tracked objects:
 14574 ;;		On entry : 0/0
 14575 ;;		On exit  : 0/0
 14576 ;;		Unchanged: 0/0
 14577 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14578 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14579 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14580 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14581 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14582 ;;Total ram usage:        6 bytes
 14583 ;; Hardware stack levels used:    1
 14584 ;; Hardware stack levels required when called:    6
 14585 ;; This function calls:
 14586 ;;		___ftpack
 14587 ;; This function is called by:
 14588 ;;		_getPercentValue
 14589 ;;		_setPercentValue
 14590 ;; This function uses a non-reentrant model
 14591 ;;
 14592                           
 14593                           
 14594                           ;psect for function ___awtoft
 14595  1F23                     ___awtoft:	
 14596                           
 14597                           ;incstack = 0
 14598                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
 14599  1F23  0020               	movlb	0	; select bank0
 14600  1F24  01AD               	clrf	___awtoft@sign
 14601  1F25  1FA9               	btfss	___awtoft@c+1,7
 14602  1F26  2F2E               	goto	l8633
 14603  1F27  09A8               	comf	___awtoft@c,f
 14604  1F28  09A9               	comf	___awtoft@c+1,f
 14605  1F29  0AA8               	incf	___awtoft@c,f
 14606  1F2A  1903               	skipnz
 14607  1F2B  0AA9               	incf	___awtoft@c+1,f
 14608  1F2C  01AD               	clrf	___awtoft@sign
 14609  1F2D  0AAD               	incf	___awtoft@sign,f
 14610  1F2E                     l8633:	
 14611  1F2E  0828               	movf	___awtoft@c,w
 14612  1F2F  00A0               	movwf	___ftpack@arg
 14613  1F30  0829               	movf	___awtoft@c+1,w
 14614  1F31  00A1               	movwf	___ftpack@arg+1
 14615  1F32  01A2               	clrf	___ftpack@arg+2
 14616  1F33  308E               	movlw	142
 14617  1F34  00AB               	movwf	??___awtoft
 14618  1F35  082B               	movf	??___awtoft,w
 14619  1F36  00A3               	movwf	___ftpack@exp
 14620  1F37  082D               	movf	___awtoft@sign,w
 14621  1F38  00AC               	movwf	??___awtoft+1
 14622  1F39  082C               	movf	??___awtoft+1,w
 14623  1F3A  00A4               	movwf	___ftpack@sign
 14624  1F3B  3189  2123         	fcall	___ftpack
 14625  1F3D  0020               	movlb	0	; select bank0
 14626  1F3E  0820               	movf	?___ftpack,w
 14627  1F3F  00A8               	movwf	?___awtoft
 14628  1F40  0821               	movf	?___ftpack+1,w
 14629  1F41  00A9               	movwf	?___awtoft+1
 14630  1F42  0822               	movf	?___ftpack+2,w
 14631  1F43  00AA               	movwf	?___awtoft+2
 14632  1F44  0008               	return
 14633  1F45                     __end_of___awtoft:	
 14634                           
 14635                           	psect	text86
 14636  0923                     __ptext86:	
 14637 ;; *************** function ___ftpack *****************
 14638 ;; Defined at:
 14639 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\float.c"
 14640 ;; Parameters:    Size  Location     Type
 14641 ;;  arg             3    0[BANK0 ] unsigned um
 14642 ;;  exp             1    3[BANK0 ] unsigned char 
 14643 ;;  sign            1    4[BANK0 ] unsigned char 
 14644 ;; Auto vars:     Size  Location     Type
 14645 ;;		None
 14646 ;; Return value:  Size  Location     Type
 14647 ;;                  3    0[BANK0 ] float 
 14648 ;; Registers used:
 14649 ;;		wreg, status,2, status,0
 14650 ;; Tracked objects:
 14651 ;;		On entry : 0/0
 14652 ;;		On exit  : 0/0
 14653 ;;		Unchanged: 0/0
 14654 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14655 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14656 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14657 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14658 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14659 ;;Total ram usage:        8 bytes
 14660 ;; Hardware stack levels used:    1
 14661 ;; Hardware stack levels required when called:    5
 14662 ;; This function calls:
 14663 ;;		Nothing
 14664 ;; This function is called by:
 14665 ;;		___awtoft
 14666 ;;		___ftadd
 14667 ;;		___ftdiv
 14668 ;;		___ftmul
 14669 ;; This function uses a non-reentrant model
 14670 ;;
 14671                           
 14672                           
 14673                           ;psect for function ___ftpack
 14674  0923                     ___ftpack:	
 14675                           
 14676                           ;incstack = 0
 14677                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 14678  0923  0020               	movlb	0	; select bank0
 14679  0924  0823               	movf	___ftpack@exp,w
 14680  0925  1903               	btfsc	3,2
 14681  0926  292C               	goto	l8583
 14682  0927  0822               	movf	___ftpack@arg+2,w
 14683  0928  0421               	iorwf	___ftpack@arg+1,w
 14684  0929  0420               	iorwf	___ftpack@arg,w
 14685  092A  1D03               	skipz
 14686  092B  293D               	goto	l8589
 14687  092C                     l8583:	
 14688  092C  3000               	movlw	0
 14689  092D  00A0               	movwf	?___ftpack
 14690  092E  3000               	movlw	0
 14691  092F  00A1               	movwf	?___ftpack+1
 14692  0930  3000               	movlw	0
 14693  0931  00A2               	movwf	?___ftpack+2
 14694  0932  0008               	return
 14695  0933                     l8587:	
 14696  0933  3001               	movlw	1
 14697  0934  00A5               	movwf	??___ftpack
 14698  0935  0825               	movf	??___ftpack,w
 14699  0936  07A3               	addwf	___ftpack@exp,f
 14700  0937  3001               	movlw	1
 14701  0938                     u8935:	
 14702  0938  36A2               	lsrf	___ftpack@arg+2,f
 14703  0939  0CA1               	rrf	___ftpack@arg+1,f
 14704  093A  0CA0               	rrf	___ftpack@arg,f
 14705  093B  0B89               	decfsz	9,f
 14706  093C  2938               	goto	u8935
 14707  093D                     l8589:	
 14708  093D  30FE               	movlw	254
 14709  093E  0522               	andwf	___ftpack@arg+2,w
 14710  093F  1903               	btfsc	3,2
 14711  0940  2956               	goto	l3033
 14712  0941  2933               	goto	l8587
 14713  0942                     l8591:	
 14714  0942  3001               	movlw	1
 14715  0943  00A5               	movwf	??___ftpack
 14716  0944  0825               	movf	??___ftpack,w
 14717  0945  07A3               	addwf	___ftpack@exp,f
 14718  0946  3001               	movlw	1
 14719  0947  07A0               	addwf	___ftpack@arg,f
 14720  0948  3000               	movlw	0
 14721  0949  1803               	skipnc
 14722  094A  3001               	movlw	1
 14723  094B  07A1               	addwf	___ftpack@arg+1,f
 14724  094C  3000               	movlw	0
 14725  094D  1803               	skipnc
 14726  094E  3001               	movlw	1
 14727  094F  07A2               	addwf	___ftpack@arg+2,f
 14728  0950  3001               	movlw	1
 14729  0951                     u8955:	
 14730  0951  36A2               	lsrf	___ftpack@arg+2,f
 14731  0952  0CA1               	rrf	___ftpack@arg+1,f
 14732  0953  0CA0               	rrf	___ftpack@arg,f
 14733  0954  0B89               	decfsz	9,f
 14734  0955  2951               	goto	u8955
 14735  0956                     l3033:	
 14736  0956  30FF               	movlw	255
 14737  0957  0522               	andwf	___ftpack@arg+2,w
 14738  0958  1903               	btfsc	3,2
 14739  0959  2963               	goto	l8599
 14740  095A  2942               	goto	l8591
 14741  095B                     l8597:	
 14742  095B  3001               	movlw	1
 14743  095C  02A3               	subwf	___ftpack@exp,f
 14744  095D  3001               	movlw	1
 14745  095E                     u8975:	
 14746  095E  35A0               	lslf	___ftpack@arg,f
 14747  095F  0DA1               	rlf	___ftpack@arg+1,f
 14748  0960  0DA2               	rlf	___ftpack@arg+2,f
 14749  0961  0B89               	decfsz	9,f
 14750  0962  295E               	goto	u8975
 14751  0963                     l8599:	
 14752  0963  1FA1               	btfss	___ftpack@arg+1,7
 14753  0964  295B               	goto	l8597
 14754  0965  1823               	btfsc	___ftpack@exp,0
 14755  0966  296D               	goto	l3039
 14756  0967  30FF               	movlw	255
 14757  0968  05A0               	andwf	___ftpack@arg,f
 14758  0969  307F               	movlw	127
 14759  096A  05A1               	andwf	___ftpack@arg+1,f
 14760  096B  30FF               	movlw	255
 14761  096C  05A2               	andwf	___ftpack@arg+2,f
 14762  096D                     l3039:	
 14763  096D  1003               	clrc
 14764  096E  0CA3               	rrf	___ftpack@exp,f
 14765  096F  0823               	movf	___ftpack@exp,w
 14766  0970  00A5               	movwf	??___ftpack
 14767  0971  01A6               	clrf	??___ftpack+1
 14768  0972  01A7               	clrf	??___ftpack+2
 14769  0973  3010               	movlw	16
 14770  0974                     u9005:	
 14771  0974  35A5               	lslf	??___ftpack,f
 14772  0975  0DA6               	rlf	??___ftpack+1,f
 14773  0976  0DA7               	rlf	??___ftpack+2,f
 14774  0977  0B89               	decfsz	9,f
 14775  0978  2974               	goto	u9005
 14776  0979  0825               	movf	??___ftpack,w
 14777  097A  04A0               	iorwf	___ftpack@arg,f
 14778  097B  0826               	movf	??___ftpack+1,w
 14779  097C  04A1               	iorwf	___ftpack@arg+1,f
 14780  097D  0827               	movf	??___ftpack+2,w
 14781  097E  04A2               	iorwf	___ftpack@arg+2,f
 14782  097F  0824               	movf	___ftpack@sign,w
 14783  0980  1903               	btfsc	3,2
 14784  0981  0008               	return
 14785  0982  17A2               	bsf	___ftpack@arg+2,7
 14786  0983  0008               	return
 14787  0984                     __end_of___ftpack:	
 14788                           
 14789                           	psect	text87
 14790  164F                     __ptext87:	
 14791 ;; *************** function _setLED *****************
 14792 ;; Defined at:
 14793 ;;		line 76 in file "../src/LED_B1.c"
 14794 ;; Parameters:    Size  Location     Type
 14795 ;;  led             1    wreg     unsigned char 
 14796 ;;  command         1    2[BANK0 ] unsigned char 
 14797 ;; Auto vars:     Size  Location     Type
 14798 ;;  led             1    3[BANK0 ] unsigned char 
 14799 ;; Return value:  Size  Location     Type
 14800 ;;		None               void
 14801 ;; Registers used:
 14802 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14803 ;; Tracked objects:
 14804 ;;		On entry : 0/0
 14805 ;;		On exit  : 0/0
 14806 ;;		Unchanged: 0/0
 14807 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14808 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14809 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14810 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14811 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14812 ;;Total ram usage:        2 bytes
 14813 ;; Hardware stack levels used:    1
 14814 ;; Hardware stack levels required when called:    6
 14815 ;; This function calls:
 14816 ;;		_LedPointSelect
 14817 ;; This function is called by:
 14818 ;;		_setDimmerLights
 14819 ;;		_setLED_Initialization
 14820 ;;		_Exception_Main
 14821 ;;		_setSw_Initialization
 14822 ;; This function uses a non-reentrant model
 14823 ;;
 14824                           
 14825                           
 14826                           ;psect for function _setLED
 14827  164F                     _setLED:	
 14828                           
 14829                           ;incstack = 0
 14830                           ; Regs used in _setLED: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14831                           ;setLED@led stored from wreg
 14832  164F  0020               	movlb	0	; select bank0
 14833  1650  00A3               	movwf	setLED@led
 14834                           
 14835                           ;LED_B1.c: 77: LedPointSelect(led);
 14836  1651  0823               	movf	setLED@led,w
 14837  1652  319E  26C3  3196   	fcall	_LedPointSelect
 14838                           
 14839                           ;LED_B1.c: 78: if (command == 0) {
 14840  1655  0020               	movlb	0	; select bank0
 14841  1656  08A2               	movf	setLED@command,f
 14842  1657  1D03               	skipz
 14843  1658  2E66               	goto	l9387
 14844                           
 14845                           ;LED_B1.c: 80: if (led == 1) {
 14846  1659  0823               	movf	setLED@led,w
 14847  165A  3A01               	xorlw	1
 14848  165B  1D03               	skipz
 14849  165C  2E5E               	goto	l9379
 14850                           
 14851                           ;LED_B1.c: 84: RA3 = 1;
 14852  165D  158C               	bsf	12,3	;volatile
 14853  165E                     l9379:	
 14854                           
 14855                           ;LED_B1.c: 86: }
 14856                           ;LED_B1.c: 89: if (led == 2) {
 14857  165E  0823               	movf	setLED@led,w
 14858  165F  3A02               	xorlw	2
 14859  1660  1903               	btfsc	3,2
 14860                           
 14861                           ;LED_B1.c: 93: RC7 = 1;
 14862  1661  178E               	bsf	14,7	;volatile
 14863                           
 14864                           ;LED_B1.c: 95: }
 14865                           ;LED_B1.c: 107: if (led == 99) {
 14866  1662  0823               	movf	setLED@led,w
 14867  1663  3A63               	xorlw	99
 14868  1664  1903               	btfsc	3,2
 14869                           
 14870                           ;LED_B1.c: 111: RB5 = 1;
 14871  1665  168D               	bsf	13,5	;volatile
 14872  1666                     l9387:	
 14873                           
 14874                           ;LED_B1.c: 113: }
 14875                           ;LED_B1.c: 115: }
 14876                           ;LED_B1.c: 116: if (command == 1) {
 14877  1666  0822               	movf	setLED@command,w
 14878  1667  3A01               	xorlw	1
 14879  1668  1D03               	skipz
 14880  1669  2E77               	goto	l9401
 14881                           
 14882                           ;LED_B1.c: 118: if (led == 1) {
 14883  166A  0823               	movf	setLED@led,w
 14884  166B  3A01               	xorlw	1
 14885  166C  1D03               	skipz
 14886  166D  2E6F               	goto	l9393
 14887                           
 14888                           ;LED_B1.c: 122: RA3 = 0;
 14889  166E  118C               	bcf	12,3	;volatile
 14890  166F                     l9393:	
 14891                           
 14892                           ;LED_B1.c: 124: }
 14893                           ;LED_B1.c: 127: if (led == 2) {
 14894  166F  0823               	movf	setLED@led,w
 14895  1670  3A02               	xorlw	2
 14896  1671  1903               	btfsc	3,2
 14897                           
 14898                           ;LED_B1.c: 131: RC7 = 0;
 14899  1672  138E               	bcf	14,7	;volatile
 14900                           
 14901                           ;LED_B1.c: 133: }
 14902                           ;LED_B1.c: 145: if (led == 99) {
 14903  1673  0823               	movf	setLED@led,w
 14904  1674  3A63               	xorlw	99
 14905  1675  1903               	btfsc	3,2
 14906                           
 14907                           ;LED_B1.c: 149: RB5 = 0;
 14908  1676  128D               	bcf	13,5	;volatile
 14909  1677                     l9401:	
 14910                           
 14911                           ;LED_B1.c: 151: }
 14912                           ;LED_B1.c: 153: }
 14913                           ;LED_B1.c: 154: if (command == 10) {
 14914  1677  0822               	movf	setLED@command,w
 14915  1678  3A0A               	xorlw	10
 14916  1679  1D03               	skipz
 14917  167A  2E97               	goto	l9417
 14918                           
 14919                           ;LED_B1.c: 155: LED->GO = 0;
 14920  167B  0021               	movlb	1	; select bank1
 14921  167C  084D               	movf	_LED^(0+128),w
 14922  167D  0086               	movwf	6
 14923  167E  3001               	movlw	1	; select bank2/3
 14924  167F  0087               	movwf	7
 14925  1680  1081               	bcf	1,1
 14926                           
 14927                           ;LED_B1.c: 156: LED->Time = 0;
 14928  1681  0A4D               	incf	_LED^(0+128),w
 14929  1682  0086               	movwf	6
 14930  1683  3001               	movlw	1	; select bank2/3
 14931  1684  0087               	movwf	7
 14932  1685  3000               	movlw	0
 14933  1686  3FC0               	movwi [0]fsr1
 14934  1687  3FC1               	movwi [1]fsr1
 14935                           
 14936                           ;LED_B1.c: 158: if (led == 1) {
 14937  1688  0020               	movlb	0	; select bank0
 14938  1689  0823               	movf	setLED@led,w
 14939  168A  3A01               	xorlw	1
 14940  168B  1D03               	skipz
 14941  168C  2E8F               	goto	l9409
 14942                           
 14943                           ;LED_B1.c: 162: RA3 = 1;
 14944  168D  158C               	bsf	12,3	;volatile
 14945                           
 14946                           ;LED_B1.c: 164: }
 14947  168E  2E93               	goto	l9413
 14948  168F                     l9409:	
 14949                           
 14950                           ;LED_B1.c: 167: else if (led == 2) {
 14951  168F  0823               	movf	setLED@led,w
 14952  1690  3A02               	xorlw	2
 14953  1691  1903               	btfsc	3,2
 14954                           
 14955                           ;LED_B1.c: 171: RC7 = 1;
 14956  1692  178E               	bsf	14,7	;volatile
 14957  1693                     l9413:	
 14958                           
 14959                           ;LED_B1.c: 173: }
 14960                           ;LED_B1.c: 185: if (led == 99) {
 14961  1693  0823               	movf	setLED@led,w
 14962  1694  3A63               	xorlw	99
 14963  1695  1903               	btfsc	3,2
 14964                           
 14965                           ;LED_B1.c: 189: RB5 = 1;
 14966  1696  168D               	bsf	13,5	;volatile
 14967  1697                     l9417:	
 14968                           
 14969                           ;LED_B1.c: 191: }
 14970                           ;LED_B1.c: 193: }
 14971                           ;LED_B1.c: 194: if (command == 11) {
 14972  1697  0822               	movf	setLED@command,w
 14973  1698  3A0B               	xorlw	11
 14974  1699  1D03               	skipz
 14975  169A  0008               	return
 14976                           
 14977                           ;LED_B1.c: 195: LED->GO = 1;
 14978  169B  0021               	movlb	1	; select bank1
 14979  169C  084D               	movf	_LED^(0+128),w
 14980  169D  0086               	movwf	6
 14981  169E  3001               	movlw	1	; select bank2/3
 14982  169F  0087               	movwf	7
 14983  16A0  1481               	bsf	1,1
 14984  16A1  0008               	return
 14985  16A2                     __end_of_setLED:	
 14986                           
 14987                           	psect	text88
 14988  1EC3                     __ptext88:	
 14989 ;; *************** function _LedPointSelect *****************
 14990 ;; Defined at:
 14991 ;;		line 7 in file "../src/LED_B1.c"
 14992 ;; Parameters:    Size  Location     Type
 14993 ;;  led             1    wreg     unsigned char 
 14994 ;; Auto vars:     Size  Location     Type
 14995 ;;  led             1    1[BANK0 ] unsigned char 
 14996 ;; Return value:  Size  Location     Type
 14997 ;;		None               void
 14998 ;; Registers used:
 14999 ;;		wreg
 15000 ;; Tracked objects:
 15001 ;;		On entry : 0/0
 15002 ;;		On exit  : 0/0
 15003 ;;		Unchanged: 0/0
 15004 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15005 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15006 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15007 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15008 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15009 ;;Total ram usage:        2 bytes
 15010 ;; Hardware stack levels used:    1
 15011 ;; Hardware stack levels required when called:    5
 15012 ;; This function calls:
 15013 ;;		Nothing
 15014 ;; This function is called by:
 15015 ;;		_setLED_Initialization
 15016 ;;		_setLED
 15017 ;;		_setLED_Main
 15018 ;; This function uses a non-reentrant model
 15019 ;;
 15020                           
 15021                           
 15022                           ;psect for function _LedPointSelect
 15023  1EC3                     _LedPointSelect:	
 15024                           
 15025                           ;incstack = 0
 15026                           ; Regs used in _LedPointSelect: [wreg]
 15027                           ;LedPointSelect@led stored from wreg
 15028  1EC3  0020               	movlb	0	; select bank0
 15029  1EC4  00A1               	movwf	LedPointSelect@led
 15030                           
 15031                           ;LED_B1.c: 9: if (led == 1) {
 15032  1EC5  0821               	movf	LedPointSelect@led,w
 15033  1EC6  3A01               	xorlw	1
 15034  1EC7  1D03               	skipz
 15035  1EC8  2ECE               	goto	l1032
 15036                           
 15037                           ;LED_B1.c: 10: LED = &VarLED1;
 15038  1EC9  306A               	movlw	_VarLED1& (0+255)
 15039  1ECA  00A0               	movwf	??_LedPointSelect
 15040  1ECB  0820               	movf	??_LedPointSelect,w
 15041  1ECC  0021               	movlb	1	; select bank1
 15042  1ECD  00CD               	movwf	_LED^(0+128)
 15043  1ECE                     l1032:	
 15044                           
 15045                           ;LED_B1.c: 11: }
 15046                           ;LED_B1.c: 14: if (led == 2) {
 15047  1ECE  0020               	movlb	0	; select bank0
 15048  1ECF  0821               	movf	LedPointSelect@led,w
 15049  1ED0  3A02               	xorlw	2
 15050  1ED1  1D03               	skipz
 15051  1ED2  2ED8               	goto	l1033
 15052                           
 15053                           ;LED_B1.c: 15: LED = &VarLED2;
 15054  1ED3  30EB               	movlw	_VarLED2& (0+255)
 15055  1ED4  00A0               	movwf	??_LedPointSelect
 15056  1ED5  0820               	movf	??_LedPointSelect,w
 15057  1ED6  0021               	movlb	1	; select bank1
 15058  1ED7  00CD               	movwf	_LED^(0+128)
 15059  1ED8                     l1033:	
 15060                           
 15061                           ;LED_B1.c: 16: }
 15062                           ;LED_B1.c: 24: if (led == 99) {
 15063  1ED8  0020               	movlb	0	; select bank0
 15064  1ED9  0821               	movf	LedPointSelect@led,w
 15065  1EDA  3A63               	xorlw	99
 15066  1EDB  1D03               	skipz
 15067  1EDC  0008               	return
 15068                           
 15069                           ;LED_B1.c: 25: LED = &VarErrLED;
 15070  1EDD  3066               	movlw	_VarErrLED& (0+255)
 15071  1EDE  00A0               	movwf	??_LedPointSelect
 15072  1EDF  0820               	movf	??_LedPointSelect,w
 15073  1EE0  0021               	movlb	1	; select bank1
 15074  1EE1  00CD               	movwf	_LED^(0+128)
 15075  1EE2  0008               	return
 15076  1EE3                     __end_of_LedPointSelect:	
 15077                           
 15078                           	psect	text89
 15079  1DB0                     __ptext89:	
 15080 ;; *************** function _setDimmerLights_Line *****************
 15081 ;; Defined at:
 15082 ;;		line 706 in file "../src/Dimmer_B1.c"
 15083 ;; Parameters:    Size  Location     Type
 15084 ;;  lights          1    wreg     unsigned char 
 15085 ;; Auto vars:     Size  Location     Type
 15086 ;;  lights          1    0[BANK0 ] unsigned char 
 15087 ;; Return value:  Size  Location     Type
 15088 ;;		None               void
 15089 ;; Registers used:
 15090 ;;		wreg
 15091 ;; Tracked objects:
 15092 ;;		On entry : 0/0
 15093 ;;		On exit  : 0/0
 15094 ;;		Unchanged: 0/0
 15095 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15096 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15097 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15098 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15099 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15100 ;;Total ram usage:        1 bytes
 15101 ;; Hardware stack levels used:    1
 15102 ;; Hardware stack levels required when called:    5
 15103 ;; This function calls:
 15104 ;;		Nothing
 15105 ;; This function is called by:
 15106 ;;		_setDimmerLights
 15107 ;;		_setDimmerLights_Adj
 15108 ;; This function uses a non-reentrant model
 15109 ;;
 15110                           
 15111                           
 15112                           ;psect for function _setDimmerLights_Line
 15113  1DB0                     _setDimmerLights_Line:	
 15114                           
 15115                           ;incstack = 0
 15116                           ; Regs used in _setDimmerLights_Line: [wreg]
 15117                           ;setDimmerLights_Line@lights stored from wreg
 15118  1DB0  0020               	movlb	0	; select bank0
 15119  1DB1  00A0               	movwf	setDimmerLights_Line@lights
 15120                           
 15121                           ;Dimmer_B1.c: 707: Dimmer.LoadGO = 1;
 15122  1DB2  0021               	movlb	1	; select bank1
 15123  1DB3  1546               	bsf	_Dimmer^(0+128),2	;volatile
 15124                           
 15125                           ;Dimmer_B1.c: 709: DimmerLights1.Line = 0;
 15126  1DB4  0022               	movlb	2	; select bank2
 15127  1DB5  135F               	bcf	(_DimmerLights1^(0+256)+10),6	;volatile
 15128                           
 15129                           ;Dimmer_B1.c: 712: DimmerLights2.Line = 0;
 15130  1DB6  0023               	movlb	3	; select bank3
 15131  1DB7  1348               	bcf	(_DimmerLights2^(0+384)+10),6	;volatile
 15132                           
 15133                           ;Dimmer_B1.c: 718: if (lights == 1) {
 15134  1DB8  0020               	movlb	0	; select bank0
 15135  1DB9  0820               	movf	setDimmerLights_Line@lights,w
 15136  1DBA  3A01               	xorlw	1
 15137  1DBB  1D03               	skipz
 15138  1DBC  2DC0               	goto	l9367
 15139                           
 15140                           ;Dimmer_B1.c: 719: DimmerLights1.Line = 1;
 15141  1DBD  0022               	movlb	2	; select bank2
 15142  1DBE  175F               	bsf	(_DimmerLights1^(0+256)+10),6	;volatile
 15143                           
 15144                           ;Dimmer_B1.c: 720: }
 15145  1DBF  0008               	return
 15146  1DC0                     l9367:	
 15147                           
 15148                           ;Dimmer_B1.c: 723: else if (lights == 2) {
 15149  1DC0  0020               	movlb	0	; select bank0
 15150  1DC1  0820               	movf	setDimmerLights_Line@lights,w
 15151  1DC2  3A02               	xorlw	2
 15152  1DC3  1D03               	skipz
 15153  1DC4  0008               	return
 15154                           
 15155                           ;Dimmer_B1.c: 724: DimmerLights2.Line = 1;
 15156  1DC5  0023               	movlb	3	; select bank3
 15157  1DC6  1748               	bsf	(_DimmerLights2^(0+384)+10),6	;volatile
 15158  1DC7  0008               	return
 15159  1DC8                     __end_of_setDimmerLights_Line:	
 15160                           
 15161                           	psect	text90
 15162  1272                     __ptext90:	
 15163 ;; *************** function _getDimmerLights_Allow_Condition *****************
 15164 ;; Defined at:
 15165 ;;		line 586 in file "../src/Dimmer_B1.c"
 15166 ;; Parameters:    Size  Location     Type
 15167 ;;  lights          1    wreg     unsigned char 
 15168 ;; Auto vars:     Size  Location     Type
 15169 ;;  lights          1    5[BANK0 ] unsigned char 
 15170 ;;  allow           1    6[BANK0 ] unsigned char 
 15171 ;; Return value:  Size  Location     Type
 15172 ;;                  1    wreg      unsigned char 
 15173 ;; Registers used:
 15174 ;;		wreg, status,2, status,0, pclath, cstack
 15175 ;; Tracked objects:
 15176 ;;		On entry : 0/0
 15177 ;;		On exit  : 0/0
 15178 ;;		Unchanged: 0/0
 15179 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15180 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15181 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15182 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15183 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15184 ;;Total ram usage:        6 bytes
 15185 ;; Hardware stack levels used:    1
 15186 ;; Hardware stack levels required when called:    6
 15187 ;; This function calls:
 15188 ;;		_getLoad_OK
 15189 ;; This function is called by:
 15190 ;;		_setDimmerLights_AdjOn
 15191 ;;		_setDimmerLights_Main
 15192 ;; This function uses a non-reentrant model
 15193 ;;
 15194                           
 15195                           
 15196                           ;psect for function _getDimmerLights_Allow_Condition
 15197  1272                     _getDimmerLights_Allow_Condition:	
 15198                           
 15199                           ;incstack = 0
 15200                           ; Regs used in _getDimmerLights_Allow_Condition: [wreg+status,2+status,0+pclath+cstack]
 15201                           ;getDimmerLights_Allow_Condition@lights stored from wreg
 15202  1272  0020               	movlb	0	; select bank0
 15203  1273  00A5               	movwf	getDimmerLights_Allow_Condition@lights
 15204                           
 15205                           ;Dimmer_B1.c: 587: char allow = 0;
 15206  1274  01A6               	clrf	getDimmerLights_Allow_Condition@allow
 15207                           
 15208                           ;Dimmer_B1.c: 594: allow = getLoad_OK() == 0 && Dimmer.LoadGO == 0 ? 0 : 1;
 15209  1275  01A2               	clrf	_getDimmerLights_Allow_Condition$2330
 15210  1276  0AA2               	incf	_getDimmerLights_Allow_Condition$2330,f
 15211  1277  319B  2317  3192   	fcall	_getLoad_OK
 15212  127A  3800               	iorlw	0
 15213  127B  1D03               	skipz
 15214  127C  2A82               	goto	l9309
 15215  127D  0021               	movlb	1	; select bank1
 15216  127E  1946               	btfsc	_Dimmer^(0+128),2	;volatile
 15217  127F  2A82               	goto	l9309
 15218  1280  0020               	movlb	0	; select bank0
 15219  1281  01A2               	clrf	_getDimmerLights_Allow_Condition$2330
 15220  1282                     l9309:	
 15221  1282  0020               	movlb	0	; select bank0
 15222  1283  0822               	movf	_getDimmerLights_Allow_Condition$2330,w
 15223  1284  00A1               	movwf	??_getDimmerLights_Allow_Condition
 15224  1285  0821               	movf	??_getDimmerLights_Allow_Condition,w
 15225  1286  00A6               	movwf	getDimmerLights_Allow_Condition@allow
 15226                           
 15227                           ;Dimmer_B1.c: 599: if (allow == 0) {
 15228  1287  08A6               	movf	getDimmerLights_Allow_Condition@allow,f
 15229  1288  1D03               	skipz
 15230  1289  2AAA               	goto	l9333
 15231                           
 15232                           ;Dimmer_B1.c: 600: if (lights == 1) {
 15233  128A  0825               	movf	getDimmerLights_Allow_Condition@lights,w
 15234  128B  3A01               	xorlw	1
 15235  128C  1D03               	skipz
 15236  128D  2A99               	goto	l9323
 15237                           
 15238                           ;Dimmer_B1.c: 601: allow = DimmerLights2.TriggerAdj == 1 || DimmerLights2.AdjSw == 1 ? 1
      +                           : 0;
 15239  128E  01A3               	clrf	_getDimmerLights_Allow_Condition$2331
 15240  128F  0AA3               	incf	_getDimmerLights_Allow_Condition$2331,f
 15241  1290  0023               	movlb	3	; select bank3
 15242  1291  1DC8               	btfss	(_DimmerLights2^(0+384)+10),3	;volatile
 15243  1292  1B3F               	btfsc	(_DimmerLights2^(0+384)+1),6	;volatile
 15244  1293  2A96               	goto	l9321
 15245  1294  0020               	movlb	0	; select bank0
 15246  1295  01A3               	clrf	_getDimmerLights_Allow_Condition$2331
 15247  1296                     l9321:	
 15248  1296  0020               	movlb	0	; select bank0
 15249  1297  0823               	movf	_getDimmerLights_Allow_Condition$2331,w
 15250  1298  2AA7               	goto	L7
 15251  1299                     l9323:	
 15252                           ;Dimmer_B1.c: 602: } else if (lights == 2) {
 15253                           
 15254  1299  0825               	movf	getDimmerLights_Allow_Condition@lights,w
 15255  129A  3A02               	xorlw	2
 15256  129B  1D03               	skipz
 15257  129C  2AAA               	goto	l9333
 15258                           
 15259                           ;Dimmer_B1.c: 603: allow = DimmerLights1.TriggerAdj == 1 || DimmerLights1.AdjSw == 1 ? 1
      +                           : 0;
 15260  129D  01A4               	clrf	_getDimmerLights_Allow_Condition$2332
 15261  129E  0AA4               	incf	_getDimmerLights_Allow_Condition$2332,f
 15262  129F  0022               	movlb	2	; select bank2
 15263  12A0  1DDF               	btfss	(_DimmerLights1^(0+256)+10),3	;volatile
 15264  12A1  1B56               	btfsc	(_DimmerLights1^(0+256)+1),6	;volatile
 15265  12A2  2AA5               	goto	l9331
 15266  12A3  0020               	movlb	0	; select bank0
 15267  12A4  01A4               	clrf	_getDimmerLights_Allow_Condition$2332
 15268  12A5                     l9331:	
 15269  12A5  0020               	movlb	0	; select bank0
 15270  12A6  0824               	movf	_getDimmerLights_Allow_Condition$2332,w
 15271  12A7                     L7:	
 15272  12A7  00A1               	movwf	??_getDimmerLights_Allow_Condition
 15273  12A8  0821               	movf	??_getDimmerLights_Allow_Condition,w
 15274  12A9  00A6               	movwf	getDimmerLights_Allow_Condition@allow
 15275  12AA                     l9333:	
 15276                           
 15277                           ;Dimmer_B1.c: 604: }
 15278                           ;Dimmer_B1.c: 605: }
 15279                           ;Dimmer_B1.c: 619: return allow;
 15280  12AA  0826               	movf	getDimmerLights_Allow_Condition@allow,w
 15281  12AB  0008               	return
 15282  12AC                     __end_of_getDimmerLights_Allow_Condition:	
 15283                           
 15284                           	psect	text91
 15285  1B17                     __ptext91:	
 15286 ;; *************** function _getLoad_OK *****************
 15287 ;; Defined at:
 15288 ;;		line 264 in file "../src/OverLoad_B1.c"
 15289 ;; Parameters:    Size  Location     Type
 15290 ;;		None
 15291 ;; Auto vars:     Size  Location     Type
 15292 ;;  ok              1    0[BANK0 ] unsigned char 
 15293 ;; Return value:  Size  Location     Type
 15294 ;;                  1    wreg      unsigned char 
 15295 ;; Registers used:
 15296 ;;		wreg, status,2
 15297 ;; Tracked objects:
 15298 ;;		On entry : 0/0
 15299 ;;		On exit  : 0/0
 15300 ;;		Unchanged: 0/0
 15301 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15302 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15303 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15304 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15305 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15306 ;;Total ram usage:        1 bytes
 15307 ;; Hardware stack levels used:    1
 15308 ;; Hardware stack levels required when called:    5
 15309 ;; This function calls:
 15310 ;;		Nothing
 15311 ;; This function is called by:
 15312 ;;		_DimmerLights_Main
 15313 ;;		_getDimmerLights_Allow_Condition
 15314 ;; This function uses a non-reentrant model
 15315 ;;
 15316                           
 15317                           
 15318                           ;psect for function _getLoad_OK
 15319  1B17                     _getLoad_OK:	
 15320                           
 15321                           ;OverLoad_B1.c: 265: char ok = Load.OK == 1 ? 1 : 0;
 15322                           
 15323                           ;incstack = 0
 15324                           ; Regs used in _getLoad_OK: [wreg+status,2]
 15325  1B17  3000               	movlw	0
 15326  1B18  0022               	movlb	2	; select bank2
 15327  1B19  1BA7               	btfsc	_Load^(0+256),7
 15328  1B1A  3001               	movlw	1
 15329  1B1B  0020               	movlb	0	; select bank0
 15330  1B1C  00A0               	movwf	getLoad_OK@ok
 15331                           
 15332                           ;OverLoad_B1.c: 266: return ok;
 15333  1B1D  0820               	movf	getLoad_OK@ok,w
 15334  1B1E  0008               	return
 15335  1B1F                     __end_of_getLoad_OK:	
 15336                           
 15337                           	psect	text92
 15338  1C99                     __ptext92:	
 15339 ;; *************** function _getMain_LightsStatus *****************
 15340 ;; Defined at:
 15341 ;;		line 375 in file "../src/Main_B1.c"
 15342 ;; Parameters:    Size  Location     Type
 15343 ;;		None
 15344 ;; Auto vars:     Size  Location     Type
 15345 ;;  status          1    0[BANK0 ] unsigned char 
 15346 ;; Return value:  Size  Location     Type
 15347 ;;                  1    wreg      unsigned char 
 15348 ;; Registers used:
 15349 ;;		wreg, status,2, status,0
 15350 ;; Tracked objects:
 15351 ;;		On entry : 0/0
 15352 ;;		On exit  : 0/0
 15353 ;;		Unchanged: 0/0
 15354 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15355 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15356 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15357 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15358 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15359 ;;Total ram usage:        1 bytes
 15360 ;; Hardware stack levels used:    1
 15361 ;; Hardware stack levels required when called:    5
 15362 ;; This function calls:
 15363 ;;		Nothing
 15364 ;; This function is called by:
 15365 ;;		_DimmerLights_Main
 15366 ;;		_Flash_Memory_Main
 15367 ;;		_Exception_Main
 15368 ;;		_Load_Main
 15369 ;; This function uses a non-reentrant model
 15370 ;;
 15371                           
 15372                           
 15373                           ;psect for function _getMain_LightsStatus
 15374  1C99                     _getMain_LightsStatus:	
 15375                           
 15376                           ;Main_B1.c: 376: char status = 0;
 15377                           
 15378                           ;incstack = 0
 15379                           ; Regs used in _getMain_LightsStatus: [wreg+status,2+status,0]
 15380  1C99  0020               	movlb	0	; select bank0
 15381  1C9A  01A0               	clrf	getMain_LightsStatus@status
 15382                           
 15383                           ;Main_B1.c: 395: status = DimmerLights1.Status == 1 ? 1 : 0;
 15384  1C9B  3000               	movlw	0
 15385  1C9C  0022               	movlb	2	; select bank2
 15386  1C9D  18D7               	btfsc	(_DimmerLights1^(0+256)+2),1	;volatile
 15387  1C9E  3001               	movlw	1
 15388  1C9F  0020               	movlb	0	; select bank0
 15389  1CA0  00A0               	movwf	getMain_LightsStatus@status
 15390                           
 15391                           ;Main_B1.c: 396: if (status == 0) {
 15392  1CA1  08A0               	movf	getMain_LightsStatus@status,f
 15393  1CA2  1D03               	skipz
 15394  1CA3  2CAA               	goto	l9969
 15395                           
 15396                           ;Main_B1.c: 397: status = DimmerLights2.Status == 1 ? 1 : 0;
 15397  1CA4  3000               	movlw	0
 15398  1CA5  0023               	movlb	3	; select bank3
 15399  1CA6  18C0               	btfsc	(_DimmerLights2^(0+384)+2),1	;volatile
 15400  1CA7  3001               	movlw	1
 15401  1CA8  0020               	movlb	0	; select bank0
 15402  1CA9  00A0               	movwf	getMain_LightsStatus@status
 15403  1CAA                     l9969:	
 15404                           
 15405                           ;Main_B1.c: 398: }
 15406                           ;Main_B1.c: 422: return status;
 15407  1CAA  0820               	movf	getMain_LightsStatus@status,w
 15408  1CAB  0008               	return
 15409  1CAC                     __end_of_getMain_LightsStatus:	
 15410                           
 15411                           	psect	text93
 15412  1166                     __ptext93:	
 15413 ;; *************** function _getMain_All_Error_Status *****************
 15414 ;; Defined at:
 15415 ;;		line 426 in file "../src/Main_B1.c"
 15416 ;; Parameters:    Size  Location     Type
 15417 ;;  command         1    wreg     unsigned char 
 15418 ;; Auto vars:     Size  Location     Type
 15419 ;;  command         1    5[BANK0 ] unsigned char 
 15420 ;;  status          1    6[BANK0 ] unsigned char 
 15421 ;; Return value:  Size  Location     Type
 15422 ;;                  1    wreg      unsigned char 
 15423 ;; Registers used:
 15424 ;;		wreg, status,2, status,0
 15425 ;; Tracked objects:
 15426 ;;		On entry : 0/0
 15427 ;;		On exit  : 0/0
 15428 ;;		Unchanged: 0/0
 15429 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15430 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15431 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15432 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15433 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15434 ;;Total ram usage:        7 bytes
 15435 ;; Hardware stack levels used:    1
 15436 ;; Hardware stack levels required when called:    5
 15437 ;; This function calls:
 15438 ;;		Nothing
 15439 ;; This function is called by:
 15440 ;;		_DimmerLights_Main
 15441 ;;		_Exception_Main
 15442 ;;		_Load_Main
 15443 ;;		_setTemp_Main
 15444 ;;		_setRF_Main
 15445 ;;		_getRxData
 15446 ;;		_setSw_Main
 15447 ;; This function uses a non-reentrant model
 15448 ;;
 15449                           
 15450                           
 15451                           ;psect for function _getMain_All_Error_Status
 15452  1166                     _getMain_All_Error_Status:	
 15453                           
 15454                           ;incstack = 0
 15455                           ; Regs used in _getMain_All_Error_Status: [wreg+status,2+status,0]
 15456                           ;getMain_All_Error_Status@command stored from wreg
 15457  1166  0020               	movlb	0	; select bank0
 15458  1167  00A5               	movwf	getMain_All_Error_Status@command
 15459                           
 15460                           ;Main_B1.c: 427: char status = 0;
 15461  1168  01A6               	clrf	getMain_All_Error_Status@status
 15462                           
 15463                           ;Main_B1.c: 438: if (status == 0 && command != 2) {
 15464  1169  08A6               	movf	getMain_All_Error_Status@status,f
 15465  116A  1D03               	skipz
 15466  116B  2980               	goto	l9349
 15467  116C  0825               	movf	getMain_All_Error_Status@command,w
 15468  116D  3A02               	xorlw	2
 15469  116E  1903               	skipnz
 15470  116F  2980               	goto	l9349
 15471                           
 15472                           ;Main_B1.c: 439: status = Temp.ERROR == 1 ? 2 : 0;
 15473  1170  0021               	movlb	1	; select bank1
 15474  1171  18D6               	btfsc	_Temp^(0+128),1
 15475  1172  2977               	goto	l9347
 15476  1173  0020               	movlb	0	; select bank0
 15477  1174  01A1               	clrf	_getMain_All_Error_Status$3606
 15478  1175  01A2               	clrf	_getMain_All_Error_Status$3606+1
 15479  1176  297C               	goto	l1574
 15480  1177                     l9347:	
 15481  1177  3002               	movlw	2
 15482  1178  0020               	movlb	0	; select bank0
 15483  1179  00A1               	movwf	_getMain_All_Error_Status$3606
 15484  117A  3000               	movlw	0
 15485  117B  00A2               	movwf	_getMain_All_Error_Status$3606+1
 15486  117C                     l1574:	
 15487  117C  0821               	movf	_getMain_All_Error_Status$3606,w
 15488  117D  00A0               	movwf	??_getMain_All_Error_Status
 15489  117E  0820               	movf	??_getMain_All_Error_Status,w
 15490  117F  00A6               	movwf	getMain_All_Error_Status@status
 15491  1180                     l9349:	
 15492                           
 15493                           ;Main_B1.c: 440: }
 15494                           ;Main_B1.c: 445: if (status == 0 && command != 3) {
 15495  1180  08A6               	movf	getMain_All_Error_Status@status,f
 15496  1181  1D03               	skipz
 15497  1182  2997               	goto	l1575
 15498  1183  0825               	movf	getMain_All_Error_Status@command,w
 15499  1184  3A03               	xorlw	3
 15500  1185  1903               	skipnz
 15501  1186  2997               	goto	l1575
 15502                           
 15503                           ;Main_B1.c: 446: status = Load.ERROR == 1 ? 3 : 0;
 15504  1187  0022               	movlb	2	; select bank2
 15505  1188  1AA7               	btfsc	_Load^(0+256),5
 15506  1189  298E               	goto	l9357
 15507  118A  0020               	movlb	0	; select bank0
 15508  118B  01A3               	clrf	_getMain_All_Error_Status$3607
 15509  118C  01A4               	clrf	_getMain_All_Error_Status$3607+1
 15510  118D  2993               	goto	l1579
 15511  118E                     l9357:	
 15512  118E  3003               	movlw	3
 15513  118F  0020               	movlb	0	; select bank0
 15514  1190  00A3               	movwf	_getMain_All_Error_Status$3607
 15515  1191  3000               	movlw	0
 15516  1192  00A4               	movwf	_getMain_All_Error_Status$3607+1
 15517  1193                     l1579:	
 15518  1193  0823               	movf	_getMain_All_Error_Status$3607,w
 15519  1194  00A0               	movwf	??_getMain_All_Error_Status
 15520  1195  0820               	movf	??_getMain_All_Error_Status,w
 15521  1196  00A6               	movwf	getMain_All_Error_Status@status
 15522  1197                     l1575:	
 15523                           
 15524                           ;Main_B1.c: 447: }
 15525                           ;Main_B1.c: 463: return status;
 15526  1197  0826               	movf	getMain_All_Error_Status@status,w
 15527  1198  0008               	return
 15528  1199                     __end_of_getMain_All_Error_Status:	
 15529                           
 15530                           	psect	text94
 15531  1D0D                     __ptext94:	
 15532 ;; *************** function _DimmerLights_Initialization *****************
 15533 ;; Defined at:
 15534 ;;		line 341 in file "../src/Dimmer_B1.c"
 15535 ;; Parameters:    Size  Location     Type
 15536 ;;		None
 15537 ;; Auto vars:     Size  Location     Type
 15538 ;;		None
 15539 ;; Return value:  Size  Location     Type
 15540 ;;		None               void
 15541 ;; Registers used:
 15542 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15543 ;; Tracked objects:
 15544 ;;		On entry : 0/0
 15545 ;;		On exit  : 0/0
 15546 ;;		Unchanged: 0/0
 15547 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15548 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15549 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15550 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15551 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15552 ;;Total ram usage:        1 bytes
 15553 ;; Hardware stack levels used:    1
 15554 ;; Hardware stack levels required when called:    7
 15555 ;; This function calls:
 15556 ;;		_setDimmerLights_Initialization
 15557 ;; This function is called by:
 15558 ;;		_main
 15559 ;; This function uses a non-reentrant model
 15560 ;;
 15561                           
 15562                           
 15563                           ;psect for function _DimmerLights_Initialization
 15564  1D0D                     _DimmerLights_Initialization:	
 15565                           
 15566                           ;Dimmer_B1.c: 344: DimmerLights11 = &DimmerLights1;
 15567                           
 15568                           ;incstack = 0
 15569                           ; Regs used in _DimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 15570  1D0D  3055               	movlw	_DimmerLights1& (0+255)
 15571  1D0E  0020               	movlb	0	; select bank0
 15572  1D0F  00A4               	movwf	??_DimmerLights_Initialization
 15573  1D10  0824               	movf	??_DimmerLights_Initialization,w
 15574  1D11  0021               	movlb	1	; select bank1
 15575  1D12  00CA               	movwf	_DimmerLights11^(0+128)
 15576                           
 15577                           ;Dimmer_B1.c: 345: setDimmerLights_Initialization(1);
 15578  1D13  3001               	movlw	1
 15579  1D14  3187  27CF  319D   	fcall	_setDimmerLights_Initialization
 15580                           
 15581                           ;Dimmer_B1.c: 349: DimmerLights22 = &DimmerLights2;
 15582  1D17  30BE               	movlw	_DimmerLights2& (0+255)
 15583  1D18  0020               	movlb	0	; select bank0
 15584  1D19  00A4               	movwf	??_DimmerLights_Initialization
 15585  1D1A  0824               	movf	??_DimmerLights_Initialization,w
 15586  1D1B  0021               	movlb	1	; select bank1
 15587  1D1C  00CB               	movwf	_DimmerLights22^(0+128)
 15588                           
 15589                           ;Dimmer_B1.c: 350: setDimmerLights_Initialization(2);
 15590  1D1D  3002               	movlw	2
 15591  1D1E  3187  27CF         	fcall	_setDimmerLights_Initialization
 15592  1D20  0008               	return
 15593  1D21                     __end_of_DimmerLights_Initialization:	
 15594                           
 15595                           	psect	text95
 15596  07CF                     __ptext95:	
 15597 ;; *************** function _setDimmerLights_Initialization *****************
 15598 ;; Defined at:
 15599 ;;		line 365 in file "../src/Dimmer_B1.c"
 15600 ;; Parameters:    Size  Location     Type
 15601 ;;  lights          1    wreg     unsigned char 
 15602 ;; Auto vars:     Size  Location     Type
 15603 ;;  lights          1    3[BANK0 ] unsigned char 
 15604 ;; Return value:  Size  Location     Type
 15605 ;;		None               void
 15606 ;; Registers used:
 15607 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15608 ;; Tracked objects:
 15609 ;;		On entry : 0/0
 15610 ;;		On exit  : 0/0
 15611 ;;		Unchanged: 0/0
 15612 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15613 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15614 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15615 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15616 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15617 ;;Total ram usage:        2 bytes
 15618 ;; Hardware stack levels used:    1
 15619 ;; Hardware stack levels required when called:    6
 15620 ;; This function calls:
 15621 ;;		_DimmerLightsPointSelect
 15622 ;; This function is called by:
 15623 ;;		_DimmerLights_Initialization
 15624 ;; This function uses a non-reentrant model
 15625 ;;
 15626                           
 15627                           
 15628                           ;psect for function _setDimmerLights_Initialization
 15629  07CF                     _setDimmerLights_Initialization:	
 15630                           
 15631                           ;incstack = 0
 15632                           ; Regs used in _setDimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pcla
      +                          th+cstack]
 15633                           ;setDimmerLights_Initialization@lights stored from wreg
 15634  07CF  0020               	movlb	0	; select bank0
 15635  07D0  00A3               	movwf	setDimmerLights_Initialization@lights
 15636                           
 15637                           ;Dimmer_B1.c: 367: DimmerLightsPointSelect(lights);
 15638  07D1  0823               	movf	setDimmerLights_Initialization@lights,w
 15639  07D2  319C  2486  3187   	fcall	_DimmerLightsPointSelect
 15640                           
 15641                           ;Dimmer_B1.c: 369: DimmerLights->DimmingTimeValue = 7;
 15642  07D5  3007               	movlw	7
 15643  07D6  0020               	movlb	0	; select bank0
 15644  07D7  00A2               	movwf	??_setDimmerLights_Initialization
 15645  07D8  086F               	movf	_DimmerLights,w
 15646  07D9  3E08               	addlw	8
 15647  07DA  0086               	movwf	6
 15648  07DB  3001               	movlw	1	; select bank2/3
 15649  07DC  0087               	movwf	7
 15650  07DD  0822               	movf	??_setDimmerLights_Initialization,w
 15651  07DE  0081               	movwf	1
 15652                           
 15653                           ;Dimmer_B1.c: 374: DimmerLights->MaxmumValue = ((char)(75*0.8));
 15654  07DF  303C               	movlw	60
 15655  07E0  00A2               	movwf	??_setDimmerLights_Initialization
 15656  07E1  086F               	movf	_DimmerLights,w
 15657  07E2  3E06               	addlw	6
 15658  07E3  0086               	movwf	6
 15659  07E4  3001               	movlw	1	; select bank2/3
 15660  07E5  0087               	movwf	7
 15661  07E6  0822               	movf	??_setDimmerLights_Initialization,w
 15662  07E7  0081               	movwf	1
 15663                           
 15664                           ;Dimmer_B1.c: 375: DimmerLights->MinimumValue = ((char)(15*0.8));
 15665  07E8  300C               	movlw	12
 15666  07E9  00A2               	movwf	??_setDimmerLights_Initialization
 15667  07EA  086F               	movf	_DimmerLights,w
 15668  07EB  3E09               	addlw	9
 15669  07EC  0086               	movwf	6
 15670  07ED  3001               	movlw	1	; select bank2/3
 15671  07EE  0087               	movwf	7
 15672  07EF  0822               	movf	??_setDimmerLights_Initialization,w
 15673  07F0  0081               	movwf	1
 15674                           
 15675                           ;Dimmer_B1.c: 389: DimmerLights->DimmingValue = DimmerLights->MaxmumValue;
 15676  07F1  086F               	movf	_DimmerLights,w
 15677  07F2  3E06               	addlw	6
 15678  07F3  0086               	movwf	6
 15679  07F4  3001               	movlw	1	; select bank2/3
 15680  07F5  0087               	movwf	7
 15681  07F6  0801               	movf	1,w
 15682  07F7  00A2               	movwf	??_setDimmerLights_Initialization
 15683  07F8  086F               	movf	_DimmerLights,w
 15684  07F9  3E04               	addlw	4
 15685  07FA  0086               	movwf	6
 15686  07FB  3001               	movlw	1	; select bank2/3
 15687  07FC  0087               	movwf	7
 15688  07FD  0822               	movf	??_setDimmerLights_Initialization,w
 15689  07FE  0081               	movwf	1
 15690  07FF  0008               	return
 15691  0800                     __end_of_setDimmerLights_Initialization:	
 15692                           
 15693                           	psect	text96
 15694  1B0F                     __ptext96:	
 15695 ;; *************** function _DelayOff_Main *****************
 15696 ;; Defined at:
 15697 ;;		line 41 in file "../src/DelayOff_B1.c"
 15698 ;; Parameters:    Size  Location     Type
 15699 ;;		None
 15700 ;; Auto vars:     Size  Location     Type
 15701 ;;		None
 15702 ;; Return value:  Size  Location     Type
 15703 ;;		None               void
 15704 ;; Registers used:
 15705 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15706 ;; Tracked objects:
 15707 ;;		On entry : 0/0
 15708 ;;		On exit  : 0/0
 15709 ;;		Unchanged: 0/0
 15710 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15711 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15712 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15713 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15714 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15715 ;;Total ram usage:        0 bytes
 15716 ;; Hardware stack levels used:    1
 15717 ;; Hardware stack levels required when called:   11
 15718 ;; This function calls:
 15719 ;;		_DlyOff_Main
 15720 ;; This function is called by:
 15721 ;;		_main
 15722 ;; This function uses a non-reentrant model
 15723 ;;
 15724                           
 15725                           
 15726                           ;psect for function _DelayOff_Main
 15727  1B0F                     _DelayOff_Main:	
 15728                           
 15729                           ;DelayOff_B1.c: 43: DlyOff_Main(1);
 15730                           
 15731                           ;incstack = 0
 15732                           ; Regs used in _DelayOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15733  1B0F  3001               	movlw	1
 15734  1B10  3188  20C6  319B   	fcall	_DlyOff_Main
 15735                           
 15736                           ;DelayOff_B1.c: 47: DlyOff_Main(2);
 15737  1B13  3002               	movlw	2
 15738  1B14  3188  20C6         	fcall	_DlyOff_Main
 15739  1B16  0008               	return
 15740  1B17                     __end_of_DelayOff_Main:	
 15741                           
 15742                           	psect	text97
 15743  08C6                     __ptext97:	
 15744 ;; *************** function _DlyOff_Main *****************
 15745 ;; Defined at:
 15746 ;;		line 61 in file "../src/DelayOff_B1.c"
 15747 ;; Parameters:    Size  Location     Type
 15748 ;;  sw              1    wreg     unsigned char 
 15749 ;; Auto vars:     Size  Location     Type
 15750 ;;  sw              1   78[BANK0 ] unsigned char 
 15751 ;; Return value:  Size  Location     Type
 15752 ;;		None               void
 15753 ;; Registers used:
 15754 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15755 ;; Tracked objects:
 15756 ;;		On entry : 0/0
 15757 ;;		On exit  : 0/0
 15758 ;;		Unchanged: 0/0
 15759 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15760 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15761 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15762 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15763 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15764 ;;Total ram usage:        3 bytes
 15765 ;; Hardware stack levels used:    1
 15766 ;; Hardware stack levels required when called:   10
 15767 ;; This function calls:
 15768 ;;		_DelayOffPointSelect
 15769 ;;		_setBuz
 15770 ;;		_setDimmerLights_ErrorClose
 15771 ;; This function is called by:
 15772 ;;		_DelayOff_Main
 15773 ;; This function uses a non-reentrant model
 15774 ;;
 15775                           
 15776                           
 15777                           ;psect for function _DlyOff_Main
 15778  08C6                     _DlyOff_Main:	
 15779                           
 15780                           ;incstack = 0
 15781                           ; Regs used in _DlyOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15782                           ;DlyOff_Main@sw stored from wreg
 15783  08C6  0020               	movlb	0	; select bank0
 15784  08C7  00EE               	movwf	DlyOff_Main@sw
 15785                           
 15786                           ;DelayOff_B1.c: 63: DelayOffPointSelect(sw);
 15787  08C8  086E               	movf	DlyOff_Main@sw,w
 15788  08C9  319C  24F9  3188   	fcall	_DelayOffPointSelect
 15789                           
 15790                           ;DelayOff_B1.c: 64: if (DelayOff->GO == 1) {
 15791  08CC  0875               	movf	_DelayOff,w
 15792  08CD  0086               	movwf	6
 15793  08CE  3001               	movlw	1	; select bank2/3
 15794  08CF  0087               	movwf	7
 15795  08D0  1C81               	btfss	1,1
 15796  08D1  0008               	return
 15797                           
 15798                           ;DelayOff_B1.c: 65: DelayOff->SecondTime++;
 15799  08D2  0875               	movf	_DelayOff,w
 15800  08D3  3E02               	addlw	2
 15801  08D4  0086               	movwf	6
 15802  08D5  3001               	movlw	1	; select bank2/3
 15803  08D6  0087               	movwf	7
 15804  08D7  3001               	movlw	1
 15805  08D8  0781               	addwf	1,f
 15806  08D9  3141               	addfsr 1,1
 15807  08DA  1803               	skipnc
 15808  08DB  0A81               	incf	1,f
 15809                           
 15810                           ;DelayOff_B1.c: 66: if (DelayOff->SecondTime >= 6000) {
 15811  08DC  0875               	movf	_DelayOff,w
 15812  08DD  3E02               	addlw	2
 15813  08DE  0086               	movwf	6
 15814  08DF  3001               	movlw	1	; select bank2/3
 15815  08E0  0087               	movwf	7
 15816  08E1  3F40               	moviw [0]fsr1
 15817  08E2  0020               	movlb	0	; select bank0
 15818  08E3  00EC               	movwf	??_DlyOff_Main
 15819  08E4  3F41               	moviw [1]fsr1
 15820  08E5  00ED               	movwf	??_DlyOff_Main+1
 15821  08E6  3017               	movlw	23
 15822  08E7  026D               	subwf	??_DlyOff_Main+1,w
 15823  08E8  3070               	movlw	112
 15824  08E9  1903               	skipnz
 15825  08EA  026C               	subwf	??_DlyOff_Main,w
 15826  08EB  1C03               	skipc
 15827  08EC  0008               	return
 15828                           
 15829                           ;DelayOff_B1.c: 67: DelayOff->SecondTime = 0;
 15830  08ED  0875               	movf	_DelayOff,w
 15831  08EE  3E02               	addlw	2
 15832  08EF  0086               	movwf	6
 15833  08F0  3001               	movlw	1	; select bank2/3
 15834  08F1  0087               	movwf	7
 15835  08F2  3000               	movlw	0
 15836  08F3  3FC0               	movwi [0]fsr1
 15837  08F4  3FC1               	movwi [1]fsr1
 15838                           
 15839                           ;DelayOff_B1.c: 68: DelayOff->MinuteTime++;
 15840  08F5  3001               	movlw	1
 15841  08F6  00EC               	movwf	??_DlyOff_Main
 15842  08F7  0875               	movf	_DelayOff,w
 15843  08F8  3E04               	addlw	4
 15844  08F9  0086               	movwf	6
 15845  08FA  3001               	movlw	1	; select bank2/3
 15846  08FB  0087               	movwf	7
 15847  08FC  086C               	movf	??_DlyOff_Main,w
 15848  08FD  0781               	addwf	1,f
 15849                           
 15850                           ;DelayOff_B1.c: 69: if (DelayOff->MinuteTime >= DelayOff->Value) {
 15851  08FE  0875               	movf	_DelayOff,w
 15852  08FF  3E04               	addlw	4
 15853  0900  0086               	movwf	6
 15854  0901  3001               	movlw	1	; select bank2/3
 15855  0902  0087               	movwf	7
 15856  0903  0A75               	incf	_DelayOff,w
 15857  0904  0084               	movwf	4
 15858  0905  3001               	movlw	1	; select bank2/3
 15859  0906  0085               	movwf	5
 15860  0907  0800               	movf	0,w
 15861  0908  0201               	subwf	1,w
 15862  0909  1C03               	skipc
 15863  090A  0008               	return
 15864                           
 15865                           ;DelayOff_B1.c: 70: DelayOff->MinuteTime = 0;
 15866  090B  0875               	movf	_DelayOff,w
 15867  090C  3E04               	addlw	4
 15868  090D  0086               	movwf	6
 15869  090E  3001               	movlw	1	; select bank2/3
 15870  090F  0087               	movwf	7
 15871  0910  0181               	clrf	1
 15872                           
 15873                           ;DelayOff_B1.c: 71: DelayOff->GO = 0;
 15874  0911  0875               	movf	_DelayOff,w
 15875  0912  0086               	movwf	6
 15876  0913  3001               	movlw	1	; select bank2/3
 15877  0914  0087               	movwf	7
 15878  0915  1081               	bcf	1,1
 15879                           
 15880                           ;DelayOff_B1.c: 72: setBuz(1, 100);
 15881  0916  3064               	movlw	100
 15882  0917  00A9               	movwf	setBuz@time
 15883  0918  3000               	movlw	0
 15884  0919  00AA               	movwf	setBuz@time+1
 15885  091A  3001               	movlw	1
 15886  091B  3197  274E  3188   	fcall	_setBuz
 15887                           
 15888                           ;DelayOff_B1.c: 75: setDimmerLights_ErrorClose(sw);
 15889  091E  0020               	movlb	0	; select bank0
 15890  091F  086E               	movf	DlyOff_Main@sw,w
 15891  0920  3189  2184         	fcall	_setDimmerLights_ErrorClose
 15892  0922  0008               	return
 15893  0923                     __end_of_DlyOff_Main:	
 15894                           
 15895                           	psect	text98
 15896  0984                     __ptext98:	
 15897 ;; *************** function _setDimmerLights_ErrorClose *****************
 15898 ;; Defined at:
 15899 ;;		line 846 in file "../src/Dimmer_B1.c"
 15900 ;; Parameters:    Size  Location     Type
 15901 ;;  lights          1    wreg     unsigned char 
 15902 ;; Auto vars:     Size  Location     Type
 15903 ;;  lights          1    1[BANK1 ] unsigned char 
 15904 ;;  i               2    2[BANK1 ] int 
 15905 ;;  count           1    0[BANK1 ] unsigned char 
 15906 ;; Return value:  Size  Location     Type
 15907 ;;		None               void
 15908 ;; Registers used:
 15909 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15910 ;; Tracked objects:
 15911 ;;		On entry : 0/0
 15912 ;;		On exit  : 0/0
 15913 ;;		Unchanged: 0/0
 15914 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15915 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15916 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
 15917 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15918 ;;      Totals:         0       1       4       0       0       0       0       0       0       0       0       0       
      +0       0
 15919 ;;Total ram usage:        5 bytes
 15920 ;; Hardware stack levels used:    1
 15921 ;; Hardware stack levels required when called:    9
 15922 ;; This function calls:
 15923 ;;		_DimmerLightsPointSelect
 15924 ;;		_getDimmerLights_Status
 15925 ;;		_setDimmerLights_SwOff
 15926 ;; This function is called by:
 15927 ;;		_DlyOff_Main
 15928 ;;		_setControl_Lights_Table
 15929 ;; This function uses a non-reentrant model
 15930 ;;
 15931                           
 15932                           
 15933                           ;psect for function _setDimmerLights_ErrorClose
 15934  0984                     _setDimmerLights_ErrorClose:	
 15935                           
 15936                           ;incstack = 0
 15937                           ; Regs used in _setDimmerLights_ErrorClose: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 15938                           ;setDimmerLights_ErrorClose@lights stored from wreg
 15939  0984  0021               	movlb	1	; select bank1
 15940  0985  00E9               	movwf	setDimmerLights_ErrorClose@lights^(0+128)
 15941                           
 15942                           ;Dimmer_B1.c: 847: if (lights == 255) {
 15943  0986  0869               	movf	setDimmerLights_ErrorClose@lights^(0+128),w
 15944  0987  3AFF               	xorlw	255
 15945  0988  1D03               	skipz
 15946  0989  29C7               	goto	l9205
 15947                           
 15948                           ;Dimmer_B1.c: 852: char count = 2;
 15949  098A  3002               	movlw	2
 15950  098B  0020               	movlb	0	; select bank0
 15951  098C  00EB               	movwf	??_setDimmerLights_ErrorClose
 15952  098D  086B               	movf	??_setDimmerLights_ErrorClose,w
 15953  098E  0021               	movlb	1	; select bank1
 15954  098F  00E8               	movwf	setDimmerLights_ErrorClose@count^(0+128)
 15955                           
 15956                           ;Dimmer_B1.c: 857: for (int i = 0; i < count; i++) {
 15957  0990  01EA               	clrf	setDimmerLights_ErrorClose@i^(0+128)
 15958  0991  01EB               	clrf	(setDimmerLights_ErrorClose@i+1)^(0+128)
 15959  0992                     l9203:	
 15960  0992  086B               	movf	(setDimmerLights_ErrorClose@i+1)^(0+128),w
 15961  0993  3A80               	xorlw	128
 15962  0994  0020               	movlb	0	; select bank0
 15963  0995  00EB               	movwf	??_setDimmerLights_ErrorClose
 15964  0996  3080               	movlw	128
 15965  0997  026B               	subwf	??_setDimmerLights_ErrorClose,w
 15966  0998  1D03               	skipz
 15967  0999  299D               	goto	u10105
 15968  099A  0021               	movlb	1	; select bank1
 15969  099B  0868               	movf	setDimmerLights_ErrorClose@count^(0+128),w
 15970  099C  026A               	subwf	setDimmerLights_ErrorClose@i^(0+128),w
 15971  099D                     u10105:	
 15972  099D  1803               	btfsc	3,0
 15973  099E  0008               	return
 15974                           
 15975                           ;Dimmer_B1.c: 858: DimmerLightsPointSelect(i + 1);
 15976  099F  0021               	movlb	1	; select bank1
 15977  09A0  086A               	movf	setDimmerLights_ErrorClose@i^(0+128),w
 15978  09A1  3E01               	addlw	1
 15979  09A2  319C  2486  3189   	fcall	_DimmerLightsPointSelect
 15980                           
 15981                           ;Dimmer_B1.c: 859: if (getDimmerLights_Status(i + 1) == 1) {
 15982  09A5  0021               	movlb	1	; select bank1
 15983  09A6  086A               	movf	setDimmerLights_ErrorClose@i^(0+128),w
 15984  09A7  3E01               	addlw	1
 15985  09A8  319B  23F9  3189   	fcall	_getDimmerLights_Status
 15986  09AB  3A01               	xorlw	1
 15987  09AC  1D03               	skipz
 15988  09AD  29C1               	goto	l9201
 15989                           
 15990                           ;Dimmer_B1.c: 860: DimmerLights->SwFlag = 1;
 15991  09AE  0020               	movlb	0	; select bank0
 15992  09AF  086F               	movf	_DimmerLights,w
 15993  09B0  3E0B               	addlw	11
 15994  09B1  0086               	movwf	6
 15995  09B2  3001               	movlw	1	; select bank2/3
 15996  09B3  0087               	movwf	7
 15997  09B4  1481               	bsf	1,1
 15998                           
 15999                           ;Dimmer_B1.c: 861: DimmerLights->Status = 0;
 16000  09B5  086F               	movf	_DimmerLights,w
 16001  09B6  3E02               	addlw	2
 16002  09B7  0086               	movwf	6
 16003  09B8  3001               	movlw	1	; select bank2/3
 16004  09B9  0087               	movwf	7
 16005  09BA  1081               	bcf	1,1
 16006                           
 16007                           ;Dimmer_B1.c: 862: setDimmerLights_SwOff(i + 1);
 16008  09BB  0021               	movlb	1	; select bank1
 16009  09BC  086A               	movf	setDimmerLights_ErrorClose@i^(0+128),w
 16010  09BD  3E01               	addlw	1
 16011  09BE  3194  24BC  3189   	fcall	_setDimmerLights_SwOff
 16012  09C1                     l9201:	
 16013  09C1  3001               	movlw	1
 16014  09C2  0021               	movlb	1	; select bank1
 16015  09C3  07EA               	addwf	setDimmerLights_ErrorClose@i^(0+128),f
 16016  09C4  3000               	movlw	0
 16017  09C5  3DEB               	addwfc	(setDimmerLights_ErrorClose@i+1)^(0+128),f
 16018  09C6  2992               	goto	l9203
 16019  09C7                     l9205:	
 16020                           ;Dimmer_B1.c: 863: }
 16021                           ;Dimmer_B1.c: 864: }
 16022                           ;Dimmer_B1.c: 865: } else {
 16023                           
 16024                           
 16025                           ;Dimmer_B1.c: 866: DimmerLightsPointSelect(lights);
 16026  09C7  0021               	movlb	1	; select bank1
 16027  09C8  0869               	movf	setDimmerLights_ErrorClose@lights^(0+128),w
 16028  09C9  319C  2486  3189   	fcall	_DimmerLightsPointSelect
 16029                           
 16030                           ;Dimmer_B1.c: 867: if (getDimmerLights_Status(lights) == 1) {
 16031  09CC  0021               	movlb	1	; select bank1
 16032  09CD  0869               	movf	setDimmerLights_ErrorClose@lights^(0+128),w
 16033  09CE  319B  23F9  3189   	fcall	_getDimmerLights_Status
 16034  09D1  3A01               	xorlw	1
 16035  09D2  1D03               	skipz
 16036  09D3  0008               	return
 16037                           
 16038                           ;Dimmer_B1.c: 868: DimmerLights->SwFlag = 1;
 16039  09D4  0020               	movlb	0	; select bank0
 16040  09D5  086F               	movf	_DimmerLights,w
 16041  09D6  3E0B               	addlw	11
 16042  09D7  0086               	movwf	6
 16043  09D8  3001               	movlw	1	; select bank2/3
 16044  09D9  0087               	movwf	7
 16045  09DA  1481               	bsf	1,1
 16046                           
 16047                           ;Dimmer_B1.c: 869: DimmerLights->Status = 0;
 16048  09DB  086F               	movf	_DimmerLights,w
 16049  09DC  3E02               	addlw	2
 16050  09DD  0086               	movwf	6
 16051  09DE  3001               	movlw	1	; select bank2/3
 16052  09DF  0087               	movwf	7
 16053  09E0  1081               	bcf	1,1
 16054                           
 16055                           ;Dimmer_B1.c: 870: setDimmerLights_SwOff(lights);
 16056  09E1  0021               	movlb	1	; select bank1
 16057  09E2  0869               	movf	setDimmerLights_ErrorClose@lights^(0+128),w
 16058  09E3  3194  24BC         	fcall	_setDimmerLights_SwOff
 16059  09E5  0008               	return
 16060  09E6                     __end_of_setDimmerLights_ErrorClose:	
 16061                           
 16062                           	psect	text99
 16063  14BC                     __ptext99:	
 16064 ;; *************** function _setDimmerLights_SwOff *****************
 16065 ;; Defined at:
 16066 ;;		line 450 in file "../src/Dimmer_B1.c"
 16067 ;; Parameters:    Size  Location     Type
 16068 ;;  sw              1    wreg     unsigned char 
 16069 ;; Auto vars:     Size  Location     Type
 16070 ;;  sw              1   74[BANK0 ] unsigned char 
 16071 ;; Return value:  Size  Location     Type
 16072 ;;		None               void
 16073 ;; Registers used:
 16074 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16075 ;; Tracked objects:
 16076 ;;		On entry : 0/0
 16077 ;;		On exit  : 0/0
 16078 ;;		Unchanged: 0/0
 16079 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16080 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16081 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16082 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16083 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16084 ;;Total ram usage:        1 bytes
 16085 ;; Hardware stack levels used:    1
 16086 ;; Hardware stack levels required when called:    8
 16087 ;; This function calls:
 16088 ;;		_DimmerLightsPointSelect
 16089 ;;		_getDelayOff_GO
 16090 ;;		_setDelayOff_GO
 16091 ;; This function is called by:
 16092 ;;		_setDimmerLights_ErrorClose
 16093 ;;		_Exception_Main
 16094 ;;		_setRFSW_Control
 16095 ;;		_setSw_Main
 16096 ;; This function uses a non-reentrant model
 16097 ;;
 16098                           
 16099                           
 16100                           ;psect for function _setDimmerLights_SwOff
 16101  14BC                     _setDimmerLights_SwOff:	
 16102                           
 16103                           ;incstack = 0
 16104                           ; Regs used in _setDimmerLights_SwOff: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 16105                           ;setDimmerLights_SwOff@sw stored from wreg
 16106  14BC  0020               	movlb	0	; select bank0
 16107  14BD  00EA               	movwf	setDimmerLights_SwOff@sw
 16108                           
 16109                           ;Dimmer_B1.c: 451: DimmerLightsPointSelect(sw);
 16110  14BE  086A               	movf	setDimmerLights_SwOff@sw,w
 16111  14BF  319C  2486  3194   	fcall	_DimmerLightsPointSelect
 16112                           
 16113                           ;Dimmer_B1.c: 453: if (DimmerLights->SwFlag == 1) {
 16114  14C2  0020               	movlb	0	; select bank0
 16115  14C3  086F               	movf	_DimmerLights,w
 16116  14C4  3E0B               	addlw	11
 16117  14C5  0086               	movwf	6
 16118  14C6  3001               	movlw	1	; select bank2/3
 16119  14C7  0087               	movwf	7
 16120  14C8  1C81               	btfss	1,1
 16121  14C9  0008               	return
 16122                           
 16123                           ;Dimmer_B1.c: 454: DimmerLights->SwFlag = 0;
 16124  14CA  086F               	movf	_DimmerLights,w
 16125  14CB  3E0B               	addlw	11
 16126  14CC  0086               	movwf	6
 16127  14CD  3001               	movlw	1	; select bank2/3
 16128  14CE  0087               	movwf	7
 16129  14CF  1081               	bcf	1,1
 16130                           
 16131                           ;Dimmer_B1.c: 455: if (DimmerLights->Status == 1) {
 16132  14D0  086F               	movf	_DimmerLights,w
 16133  14D1  3E02               	addlw	2
 16134  14D2  0086               	movwf	6
 16135  14D3  3001               	movlw	1	; select bank2/3
 16136  14D4  0087               	movwf	7
 16137  14D5  1C81               	btfss	1,1
 16138  14D6  2CF1               	goto	l9051
 16139                           
 16140                           ;Dimmer_B1.c: 457: if (DimmerLights->SwAdj == 1) {
 16141  14D7  086F               	movf	_DimmerLights,w
 16142  14D8  3E0B               	addlw	11
 16143  14D9  0086               	movwf	6
 16144  14DA  3001               	movlw	1	; select bank2/3
 16145  14DB  0087               	movwf	7
 16146  14DC  1D01               	btfss	1,2
 16147  14DD  0008               	return
 16148                           
 16149                           ;Dimmer_B1.c: 458: DimmerLights->SwAdj = 0;
 16150  14DE  086F               	movf	_DimmerLights,w
 16151  14DF  3E0B               	addlw	11
 16152  14E0  0086               	movwf	6
 16153  14E1  3001               	movlw	1	; select bank2/3
 16154  14E2  0087               	movwf	7
 16155  14E3  1101               	bcf	1,2
 16156                           
 16157                           ;Dimmer_B1.c: 460: DimmerLights->TriggerAdj = 1;
 16158  14E4  086F               	movf	_DimmerLights,w
 16159  14E5  3E0A               	addlw	10
 16160  14E6  0086               	movwf	6
 16161  14E7  3001               	movlw	1	; select bank2/3
 16162  14E8  0087               	movwf	7
 16163  14E9  1581               	bsf	1,3
 16164                           
 16165                           ;Dimmer_B1.c: 461: DimmerLights->SwitchAdj = 0;
 16166  14EA  086F               	movf	_DimmerLights,w
 16167  14EB  3E0A               	addlw	10
 16168  14EC  0086               	movwf	6
 16169  14ED  3001               	movlw	1	; select bank2/3
 16170  14EE  0087               	movwf	7
 16171  14EF  1101               	bcf	1,2
 16172                           
 16173                           ;Dimmer_B1.c: 462: }
 16174                           ;Dimmer_B1.c: 463: } else {
 16175  14F0  0008               	return
 16176  14F1                     l9051:	
 16177                           
 16178                           ;Dimmer_B1.c: 464: DimmerLights->Trigger = 1;
 16179  14F1  086F               	movf	_DimmerLights,w
 16180  14F2  3E0A               	addlw	10
 16181  14F3  0086               	movwf	6
 16182  14F4  3001               	movlw	1	; select bank2/3
 16183  14F5  0087               	movwf	7
 16184  14F6  1481               	bsf	1,1
 16185                           
 16186                           ;Dimmer_B1.c: 465: DimmerLights->Switch = 0;
 16187  14F7  086F               	movf	_DimmerLights,w
 16188  14F8  3E0A               	addlw	10
 16189  14F9  0086               	movwf	6
 16190  14FA  3001               	movlw	1	; select bank2/3
 16191  14FB  0087               	movwf	7
 16192  14FC  1001               	bcf	1,0
 16193                           
 16194                           ;Dimmer_B1.c: 468: if (getDelayOff_GO(sw) == 1) {
 16195  14FD  086A               	movf	setDimmerLights_SwOff@sw,w
 16196  14FE  319B  23E9  3194   	fcall	_getDelayOff_GO
 16197  1501  3A01               	xorlw	1
 16198  1502  1D03               	skipz
 16199  1503  0008               	return
 16200                           
 16201                           ;Dimmer_B1.c: 469: setDelayOff_GO(sw, 0, 0);
 16202  1504  0020               	movlb	0	; select bank0
 16203  1505  01E6               	clrf	setDelayOff_GO@command
 16204  1506  01E7               	clrf	setDelayOff_GO@value
 16205  1507  086A               	movf	setDimmerLights_SwOff@sw,w
 16206  1508  3195  25FC         	fcall	_setDelayOff_GO
 16207  150A  0008               	return
 16208  150B                     __end_of_setDimmerLights_SwOff:	
 16209                           
 16210                           	psect	text100
 16211  15FC                     __ptext100:	
 16212 ;; *************** function _setDelayOff_GO *****************
 16213 ;; Defined at:
 16214 ;;		line 83 in file "../src/DelayOff_B1.c"
 16215 ;; Parameters:    Size  Location     Type
 16216 ;;  sw              1    wreg     unsigned char 
 16217 ;;  command         1   70[BANK0 ] unsigned char 
 16218 ;;  value           1   71[BANK0 ] unsigned char 
 16219 ;; Auto vars:     Size  Location     Type
 16220 ;;  sw              1   73[BANK0 ] unsigned char 
 16221 ;; Return value:  Size  Location     Type
 16222 ;;		None               void
 16223 ;; Registers used:
 16224 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16225 ;; Tracked objects:
 16226 ;;		On entry : 0/0
 16227 ;;		On exit  : 0/0
 16228 ;;		Unchanged: 0/0
 16229 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16230 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16231 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16232 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16233 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16234 ;;Total ram usage:        4 bytes
 16235 ;; Hardware stack levels used:    1
 16236 ;; Hardware stack levels required when called:    7
 16237 ;; This function calls:
 16238 ;;		_DelayOffPointSelect
 16239 ;;		_DelayTimejudge
 16240 ;;		_setProductData
 16241 ;; This function is called by:
 16242 ;;		_setDimmerLights_SwOff
 16243 ;;		_setRFSW_Control
 16244 ;; This function uses a non-reentrant model
 16245 ;;
 16246                           
 16247                           
 16248                           ;psect for function _setDelayOff_GO
 16249  15FC                     _setDelayOff_GO:	
 16250                           
 16251                           ;incstack = 0
 16252                           ; Regs used in _setDelayOff_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16253                           ;setDelayOff_GO@sw stored from wreg
 16254  15FC  0020               	movlb	0	; select bank0
 16255  15FD  00E9               	movwf	setDelayOff_GO@sw
 16256                           
 16257                           ;DelayOff_B1.c: 86: DelayOffPointSelect(sw);
 16258  15FE  0869               	movf	setDelayOff_GO@sw,w
 16259  15FF  319C  24F9  3195   	fcall	_DelayOffPointSelect
 16260                           
 16261                           ;DelayOff_B1.c: 87: DelayOff->GO = command == 1 ? 1 : 0;
 16262  1602  0020               	movlb	0	; select bank0
 16263  1603  0866               	movf	setDelayOff_GO@command,w
 16264  1604  3A01               	xorlw	1
 16265  1605  3000               	movlw	0
 16266  1606  1903               	skipnz
 16267  1607  3001               	movlw	1
 16268  1608  00E8               	movwf	??_setDelayOff_GO
 16269  1609  0875               	movf	_DelayOff,w
 16270  160A  0086               	movwf	6
 16271  160B  3001               	movlw	1	; select bank2/3
 16272  160C  0087               	movwf	7
 16273  160D  0DE8               	rlf	??_setDelayOff_GO,f
 16274  160E  0801               	movf	1,w
 16275  160F  0668               	xorwf	??_setDelayOff_GO,w
 16276  1610  39FD               	andlw	-3
 16277  1611  0668               	xorwf	??_setDelayOff_GO,w
 16278  1612  0081               	movwf	1
 16279                           
 16280                           ;DelayOff_B1.c: 89: if (command == 1) {
 16281  1613  0866               	movf	setDelayOff_GO@command,w
 16282  1614  3A01               	xorlw	1
 16283  1615  1D03               	skipz
 16284  1616  2E3A               	goto	l8983
 16285                           
 16286                           ;DelayOff_B1.c: 90: DelayOff->Value = DelayTimejudge(value);
 16287  1617  0867               	movf	setDelayOff_GO@value,w
 16288  1618  3190  20B1  3195   	fcall	_DelayTimejudge
 16289  161B  0020               	movlb	0	; select bank0
 16290  161C  00E8               	movwf	??_setDelayOff_GO
 16291  161D  0A75               	incf	_DelayOff,w
 16292  161E  0086               	movwf	6
 16293  161F  3001               	movlw	1	; select bank2/3
 16294  1620  0087               	movwf	7
 16295  1621  0868               	movf	??_setDelayOff_GO,w
 16296  1622  0081               	movwf	1
 16297                           
 16298                           ;DelayOff_B1.c: 91: if (((value % 16) == 5 || (value % 16) == 0) && value <= 0x25) {
 16299  1623  300F               	movlw	15
 16300  1624  0567               	andwf	setDelayOff_GO@value,w
 16301  1625  00E8               	movwf	??_setDelayOff_GO
 16302  1626  0868               	movf	??_setDelayOff_GO,w
 16303  1627  3A05               	xorlw	5
 16304  1628  1903               	skipnz
 16305  1629  2E2E               	goto	l8977
 16306  162A  0867               	movf	setDelayOff_GO@value,w
 16307  162B  390F               	andlw	15
 16308  162C  1D03               	btfss	3,2
 16309  162D  2E34               	goto	l8981
 16310  162E                     l8977:	
 16311  162E  3026               	movlw	38
 16312  162F  0267               	subwf	setDelayOff_GO@value,w
 16313  1630  1803               	skipnc
 16314  1631  2E34               	goto	l8981
 16315                           
 16316                           ;DelayOff_B1.c: 92: setProductData(26 + sw, value);
 16317  1632  0867               	movf	setDelayOff_GO@value,w
 16318  1633  2E36               	goto	L9
 16319  1634                     l8981:	
 16320                           ;DelayOff_B1.c: 93: } else {
 16321                           
 16322                           
 16323                           ;DelayOff_B1.c: 94: setProductData(26 + sw, 0x05);
 16324  1634  3005               	movlw	5
 16325  1635  0020               	movlb	0	; select bank0
 16326  1636                     L9:	
 16327  1636  00E8               	movwf	??_setDelayOff_GO
 16328  1637  0868               	movf	??_setDelayOff_GO,w
 16329  1638  00E2               	movwf	setProductData@value
 16330  1639  2E3C               	goto	L8
 16331  163A                     l8983:	
 16332                           ;DelayOff_B1.c: 95: }
 16333                           ;DelayOff_B1.c: 96: } else {
 16334                           
 16335                           
 16336                           ;DelayOff_B1.c: 97: setProductData(sw + 26, 0);
 16337  163A  0020               	movlb	0	; select bank0
 16338  163B  01E2               	clrf	setProductData@value
 16339  163C                     L8:	
 16340  163C  0869               	movf	setDelayOff_GO@sw,w
 16341  163D  3E1A               	addlw	26
 16342  163E  319B  23CC         	fcall	_setProductData
 16343                           
 16344                           ;DelayOff_B1.c: 98: }
 16345                           ;DelayOff_B1.c: 99: DelayOff->SecondTime = 0;
 16346  1640  0875               	movf	_DelayOff,w
 16347  1641  3E02               	addlw	2
 16348  1642  0086               	movwf	6
 16349  1643  3001               	movlw	1	; select bank2/3
 16350  1644  0087               	movwf	7
 16351  1645  3000               	movlw	0
 16352  1646  3FC0               	movwi [0]fsr1
 16353  1647  3FC1               	movwi [1]fsr1
 16354                           
 16355                           ;DelayOff_B1.c: 100: DelayOff->MinuteTime = 0;
 16356  1648  0875               	movf	_DelayOff,w
 16357  1649  3E04               	addlw	4
 16358  164A  0086               	movwf	6
 16359  164B  3001               	movlw	1	; select bank2/3
 16360  164C  0087               	movwf	7
 16361  164D  0181               	clrf	1
 16362  164E  0008               	return
 16363  164F                     __end_of_setDelayOff_GO:	
 16364                           
 16365                           	psect	text101
 16366  1BCC                     __ptext101:	
 16367 ;; *************** function _setProductData *****************
 16368 ;; Defined at:
 16369 ;;		line 605 in file "../src/Main_B1.c"
 16370 ;; Parameters:    Size  Location     Type
 16371 ;;  address         1    wreg     unsigned char 
 16372 ;;  value           1   66[BANK0 ] unsigned char 
 16373 ;; Auto vars:     Size  Location     Type
 16374 ;;  address         1   69[BANK0 ] unsigned char 
 16375 ;; Return value:  Size  Location     Type
 16376 ;;		None               void
 16377 ;; Registers used:
 16378 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 16379 ;; Tracked objects:
 16380 ;;		On entry : 0/0
 16381 ;;		On exit  : 0/0
 16382 ;;		Unchanged: 0/0
 16383 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16384 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16385 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16386 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16387 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16388 ;;Total ram usage:        4 bytes
 16389 ;; Hardware stack levels used:    1
 16390 ;; Hardware stack levels required when called:    5
 16391 ;; This function calls:
 16392 ;;		Nothing
 16393 ;; This function is called by:
 16394 ;;		_setDelayOff_GO
 16395 ;;		_setDimmerLights
 16396 ;;		_setDimmerLights_Adj
 16397 ;;		_setTemp_Main
 16398 ;;		_setLog_Code
 16399 ;;		_setControl_Lights_Table
 16400 ;;		_setRFSW_AdjControl
 16401 ;;		_setRF_DimmerValue
 16402 ;;		_setRF_DimmerLights
 16403 ;; This function uses a non-reentrant model
 16404 ;;
 16405                           
 16406                           
 16407                           ;psect for function _setProductData
 16408  1BCC                     _setProductData:	
 16409                           
 16410                           ;incstack = 0
 16411                           ; Regs used in _setProductData: [wreg+fsr1l+fsr1h+status,2+status,0]
 16412                           ;setProductData@address stored from wreg
 16413  1BCC  0020               	movlb	0	; select bank0
 16414  1BCD  00E5               	movwf	setProductData@address
 16415                           
 16416                           ;Main_B1.c: 606: product->Data[address] = value;
 16417  1BCE  0862               	movf	setProductData@value,w
 16418  1BCF  00E3               	movwf	??_setProductData
 16419  1BD0  0865               	movf	setProductData@address,w
 16420  1BD1  0779               	addwf	_product,w
 16421  1BD2  00E4               	movwf	??_setProductData+1
 16422  1BD3  0864               	movf	??_setProductData+1,w
 16423  1BD4  0086               	movwf	6
 16424  1BD5  3002               	movlw	2	; select bank4/5
 16425  1BD6  0087               	movwf	7
 16426  1BD7  0863               	movf	??_setProductData,w
 16427  1BD8  0081               	movwf	1
 16428  1BD9  0008               	return
 16429  1BDA                     __end_of_setProductData:	
 16430                           
 16431                           	psect	text102
 16432  10B1                     __ptext102:	
 16433 ;; *************** function _DelayTimejudge *****************
 16434 ;; Defined at:
 16435 ;;		line 112 in file "../src/DelayOff_B1.c"
 16436 ;; Parameters:    Size  Location     Type
 16437 ;;  value           1    wreg     unsigned char 
 16438 ;; Auto vars:     Size  Location     Type
 16439 ;;  value           1    9[BANK0 ] unsigned char 
 16440 ;;  k               1    8[BANK0 ] unsigned char 
 16441 ;;  j               1    7[BANK0 ] unsigned char 
 16442 ;;  i               1    6[BANK0 ] unsigned char 
 16443 ;; Return value:  Size  Location     Type
 16444 ;;                  1    wreg      unsigned char 
 16445 ;; Registers used:
 16446 ;;		wreg, status,2, status,0, pclath, cstack
 16447 ;; Tracked objects:
 16448 ;;		On entry : 0/0
 16449 ;;		On exit  : 0/0
 16450 ;;		Unchanged: 0/0
 16451 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16452 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16453 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16454 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16455 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16456 ;;Total ram usage:        6 bytes
 16457 ;; Hardware stack levels used:    1
 16458 ;; Hardware stack levels required when called:    6
 16459 ;; This function calls:
 16460 ;;		___bmul
 16461 ;; This function is called by:
 16462 ;;		_setDelayOff_GO
 16463 ;; This function uses a non-reentrant model
 16464 ;;
 16465                           
 16466                           
 16467                           ;psect for function _DelayTimejudge
 16468  10B1                     _DelayTimejudge:	
 16469                           
 16470                           ;incstack = 0
 16471                           ; Regs used in _DelayTimejudge: [wreg+status,2+status,0+pclath+cstack]
 16472                           ;DelayTimejudge@value stored from wreg
 16473  10B1  0020               	movlb	0	; select bank0
 16474  10B2  00A9               	movwf	DelayTimejudge@value
 16475                           
 16476                           ;DelayOff_B1.c: 113: char i = 5, j = 0, k = 0;
 16477  10B3  3005               	movlw	5
 16478  10B4  00A4               	movwf	??_DelayTimejudge
 16479  10B5  0824               	movf	??_DelayTimejudge,w
 16480  10B6  00A6               	movwf	DelayTimejudge@i
 16481  10B7  01A7               	clrf	DelayTimejudge@j
 16482  10B8  01A8               	clrf	DelayTimejudge@k
 16483                           
 16484                           ;DelayOff_B1.c: 114: if (value <= 0x30) {
 16485  10B9  3031               	movlw	49
 16486  10BA  0229               	subwf	DelayTimejudge@value,w
 16487  10BB  1803               	skipnc
 16488  10BC  28D9               	goto	l8873
 16489                           
 16490                           ;DelayOff_B1.c: 115: j = value & 0x0f;
 16491  10BD  0829               	movf	DelayTimejudge@value,w
 16492  10BE  390F               	andlw	15
 16493  10BF  00A4               	movwf	??_DelayTimejudge
 16494  10C0  0824               	movf	??_DelayTimejudge,w
 16495  10C1  00A7               	movwf	DelayTimejudge@j
 16496                           
 16497                           ;DelayOff_B1.c: 116: k = (value >> 4) & 0x0f;
 16498  10C2  0829               	movf	DelayTimejudge@value,w
 16499  10C3  00A4               	movwf	??_DelayTimejudge
 16500  10C4  3004               	movlw	4
 16501  10C5                     u9625:	
 16502  10C5  36A4               	lsrf	??_DelayTimejudge,f
 16503  10C6  0B89               	decfsz	9,f
 16504  10C7  28C5               	goto	u9625
 16505  10C8  0824               	movf	??_DelayTimejudge,w
 16506  10C9  390F               	andlw	15
 16507  10CA  00A5               	movwf	??_DelayTimejudge+1
 16508  10CB  0825               	movf	??_DelayTimejudge+1,w
 16509  10CC  00A8               	movwf	DelayTimejudge@k
 16510                           
 16511                           ;DelayOff_B1.c: 117: i = j + (k * 10);
 16512  10CD  300A               	movlw	10
 16513  10CE  00A4               	movwf	??_DelayTimejudge
 16514  10CF  0824               	movf	??_DelayTimejudge,w
 16515  10D0  00A0               	movwf	___bmul@multiplicand
 16516  10D1  0828               	movf	DelayTimejudge@k,w
 16517  10D2  319C  243E         	fcall	___bmul
 16518  10D4  0020               	movlb	0	; select bank0
 16519  10D5  0727               	addwf	DelayTimejudge@j,w
 16520  10D6  00A5               	movwf	??_DelayTimejudge+1
 16521  10D7  0825               	movf	??_DelayTimejudge+1,w
 16522  10D8  00A6               	movwf	DelayTimejudge@i
 16523  10D9                     l8873:	
 16524                           
 16525                           ;DelayOff_B1.c: 118: }
 16526                           ;DelayOff_B1.c: 139: return i;
 16527  10D9  0826               	movf	DelayTimejudge@i,w
 16528  10DA  0008               	return
 16529  10DB                     __end_of_DelayTimejudge:	
 16530                           
 16531                           	psect	text103
 16532  1C3E                     __ptext103:	
 16533 ;; *************** function ___bmul *****************
 16534 ;; Defined at:
 16535 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul8.c"
 16536 ;; Parameters:    Size  Location     Type
 16537 ;;  multiplier      1    wreg     unsigned char 
 16538 ;;  multiplicand    1    0[BANK0 ] unsigned char 
 16539 ;; Auto vars:     Size  Location     Type
 16540 ;;  multiplier      1    3[BANK0 ] unsigned char 
 16541 ;;  product         1    2[BANK0 ] unsigned char 
 16542 ;; Return value:  Size  Location     Type
 16543 ;;                  1    wreg      unsigned char 
 16544 ;; Registers used:
 16545 ;;		wreg, status,2, status,0
 16546 ;; Tracked objects:
 16547 ;;		On entry : 0/0
 16548 ;;		On exit  : 0/0
 16549 ;;		Unchanged: 0/0
 16550 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16551 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16552 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16553 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16554 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16555 ;;Total ram usage:        4 bytes
 16556 ;; Hardware stack levels used:    1
 16557 ;; Hardware stack levels required when called:    5
 16558 ;; This function calls:
 16559 ;;		Nothing
 16560 ;; This function is called by:
 16561 ;;		_DelayTimejudge
 16562 ;; This function uses a non-reentrant model
 16563 ;;
 16564                           
 16565                           
 16566                           ;psect for function ___bmul
 16567  1C3E                     ___bmul:	
 16568                           
 16569                           ;incstack = 0
 16570                           ; Regs used in ___bmul: [wreg+status,2+status,0]
 16571                           ;___bmul@multiplier stored from wreg
 16572  1C3E  0020               	movlb	0	; select bank0
 16573  1C3F  00A3               	movwf	___bmul@multiplier
 16574  1C40  01A2               	clrf	___bmul@product
 16575  1C41                     l8611:	
 16576  1C41  1C23               	btfss	___bmul@multiplier,0
 16577  1C42  2C47               	goto	l8615
 16578  1C43  0820               	movf	___bmul@multiplicand,w
 16579  1C44  00A1               	movwf	??___bmul
 16580  1C45  0821               	movf	??___bmul,w
 16581  1C46  07A2               	addwf	___bmul@product,f
 16582  1C47                     l8615:	
 16583  1C47  1003               	clrc
 16584  1C48  0DA0               	rlf	___bmul@multiplicand,f
 16585  1C49  1003               	clrc
 16586  1C4A  0CA3               	rrf	___bmul@multiplier,f
 16587  1C4B  08A3               	movf	___bmul@multiplier,f
 16588  1C4C  1D03               	skipz
 16589  1C4D  2C41               	goto	l8611
 16590  1C4E  0822               	movf	___bmul@product,w
 16591  1C4F  0008               	return
 16592  1C50                     __end_of___bmul:	
 16593                           
 16594                           	psect	text104
 16595  1BE9                     __ptext104:	
 16596 ;; *************** function _getDelayOff_GO *****************
 16597 ;; Defined at:
 16598 ;;		line 105 in file "../src/DelayOff_B1.c"
 16599 ;; Parameters:    Size  Location     Type
 16600 ;;  sw              1    wreg     unsigned char 
 16601 ;; Auto vars:     Size  Location     Type
 16602 ;;  sw              1    2[BANK0 ] unsigned char 
 16603 ;;  go              1    3[BANK0 ] unsigned char 
 16604 ;; Return value:  Size  Location     Type
 16605 ;;                  1    wreg      unsigned char 
 16606 ;; Registers used:
 16607 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16608 ;; Tracked objects:
 16609 ;;		On entry : 0/0
 16610 ;;		On exit  : 0/0
 16611 ;;		Unchanged: 0/0
 16612 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16613 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16614 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16615 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16616 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16617 ;;Total ram usage:        2 bytes
 16618 ;; Hardware stack levels used:    1
 16619 ;; Hardware stack levels required when called:    6
 16620 ;; This function calls:
 16621 ;;		_DelayOffPointSelect
 16622 ;; This function is called by:
 16623 ;;		_setDimmerLights_SwOff
 16624 ;;		_setRFSW_Control
 16625 ;; This function uses a non-reentrant model
 16626 ;;
 16627                           
 16628                           
 16629                           ;psect for function _getDelayOff_GO
 16630  1BE9                     _getDelayOff_GO:	
 16631                           
 16632                           ;incstack = 0
 16633                           ; Regs used in _getDelayOff_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16634                           ;getDelayOff_GO@sw stored from wreg
 16635  1BE9  0020               	movlb	0	; select bank0
 16636  1BEA  00A2               	movwf	getDelayOff_GO@sw
 16637                           
 16638                           ;DelayOff_B1.c: 106: DelayOffPointSelect(sw);
 16639  1BEB  0822               	movf	getDelayOff_GO@sw,w
 16640  1BEC  319C  24F9         	fcall	_DelayOffPointSelect
 16641                           
 16642                           ;DelayOff_B1.c: 107: char go = DelayOff->GO == 1 ? 1 : 0;
 16643  1BEE  0875               	movf	_DelayOff,w
 16644  1BEF  0086               	movwf	6
 16645  1BF0  3001               	movlw	1	; select bank2/3
 16646  1BF1  0087               	movwf	7
 16647  1BF2  3000               	movlw	0
 16648  1BF3  1881               	btfsc	1,1
 16649  1BF4  3001               	movlw	1
 16650  1BF5  0020               	movlb	0	; select bank0
 16651  1BF6  00A3               	movwf	getDelayOff_GO@go
 16652                           
 16653                           ;DelayOff_B1.c: 108: return go;
 16654  1BF7  0823               	movf	getDelayOff_GO@go,w
 16655  1BF8  0008               	return
 16656  1BF9                     __end_of_getDelayOff_GO:	
 16657                           
 16658                           	psect	text105
 16659  1BF9                     __ptext105:	
 16660 ;; *************** function _getDimmerLights_Status *****************
 16661 ;; Defined at:
 16662 ;;		line 757 in file "../src/Dimmer_B1.c"
 16663 ;; Parameters:    Size  Location     Type
 16664 ;;  lights          1    wreg     unsigned char 
 16665 ;; Auto vars:     Size  Location     Type
 16666 ;;  lights          1    2[BANK0 ] unsigned char 
 16667 ;;  status          1    3[BANK0 ] unsigned char 
 16668 ;; Return value:  Size  Location     Type
 16669 ;;                  1    wreg      unsigned char 
 16670 ;; Registers used:
 16671 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16672 ;; Tracked objects:
 16673 ;;		On entry : 0/0
 16674 ;;		On exit  : 0/0
 16675 ;;		Unchanged: 0/0
 16676 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16677 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16678 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16679 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16680 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16681 ;;Total ram usage:        2 bytes
 16682 ;; Hardware stack levels used:    1
 16683 ;; Hardware stack levels required when called:    6
 16684 ;; This function calls:
 16685 ;;		_DimmerLightsPointSelect
 16686 ;; This function is called by:
 16687 ;;		_setDimmerLights_ErrorClose
 16688 ;;		_Exception_Main
 16689 ;;		_setRFSW_Control
 16690 ;;		_setRFSW_AdjControl
 16691 ;; This function uses a non-reentrant model
 16692 ;;
 16693                           
 16694                           
 16695                           ;psect for function _getDimmerLights_Status
 16696  1BF9                     _getDimmerLights_Status:	
 16697                           
 16698                           ;incstack = 0
 16699                           ; Regs used in _getDimmerLights_Status: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
 16700                           ;getDimmerLights_Status@lights stored from wreg
 16701  1BF9  0020               	movlb	0	; select bank0
 16702  1BFA  00A2               	movwf	getDimmerLights_Status@lights
 16703                           
 16704                           ;Dimmer_B1.c: 758: DimmerLightsPointSelect(lights);
 16705  1BFB  0822               	movf	getDimmerLights_Status@lights,w
 16706  1BFC  319C  2486         	fcall	_DimmerLightsPointSelect
 16707                           
 16708                           ;Dimmer_B1.c: 759: char status = DimmerLights->Status == 1 ? 1 : 0;
 16709  1BFE  0020               	movlb	0	; select bank0
 16710  1BFF  086F               	movf	_DimmerLights,w
 16711  1C00  3E02               	addlw	2
 16712  1C01  0086               	movwf	6
 16713  1C02  3001               	movlw	1	; select bank2/3
 16714  1C03  0087               	movwf	7
 16715  1C04  3000               	movlw	0
 16716  1C05  1881               	btfsc	1,1
 16717  1C06  3001               	movlw	1
 16718  1C07  00A3               	movwf	getDimmerLights_Status@status
 16719                           
 16720                           ;Dimmer_B1.c: 760: return status;
 16721  1C08  0823               	movf	getDimmerLights_Status@status,w
 16722  1C09  0008               	return
 16723  1C0A                     __end_of_getDimmerLights_Status:	
 16724                           
 16725                           	psect	text106
 16726  1C86                     __ptext106:	
 16727 ;; *************** function _DimmerLightsPointSelect *****************
 16728 ;; Defined at:
 16729 ;;		line 321 in file "../src/Dimmer_B1.c"
 16730 ;; Parameters:    Size  Location     Type
 16731 ;;  lights          1    wreg     unsigned char 
 16732 ;; Auto vars:     Size  Location     Type
 16733 ;;  lights          1    1[BANK0 ] unsigned char 
 16734 ;; Return value:  Size  Location     Type
 16735 ;;		None               void
 16736 ;; Registers used:
 16737 ;;		wreg
 16738 ;; Tracked objects:
 16739 ;;		On entry : 0/0
 16740 ;;		On exit  : 0/0
 16741 ;;		Unchanged: 0/0
 16742 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16743 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16744 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16745 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16746 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16747 ;;Total ram usage:        2 bytes
 16748 ;; Hardware stack levels used:    1
 16749 ;; Hardware stack levels required when called:    5
 16750 ;; This function calls:
 16751 ;;		Nothing
 16752 ;; This function is called by:
 16753 ;;		_setDimmerLights_Initialization
 16754 ;;		_setDimmerLights_SwOn
 16755 ;;		_setDimmerLights_SwOff
 16756 ;;		_setDimmerLights_AdjOn
 16757 ;;		_setDimmerLights_Main
 16758 ;;		_getDimmerLights_Status
 16759 ;;		_getAll_DimmerLights_AdjSw
 16760 ;;		_setDimmerLights_ErrorClose
 16761 ;;		_setDimmerLights_AdjRF
 16762 ;;		_setDimmerLights_Status
 16763 ;;		_setDimmerLights_GO
 16764 ;;		_setDimmerLights_MaxmumValue
 16765 ;;		_setDimmerLights_Trigger
 16766 ;;		_setDimmerLights_TriggerAdj
 16767 ;; This function uses a non-reentrant model
 16768 ;;
 16769                           
 16770                           
 16771                           ;psect for function _DimmerLightsPointSelect
 16772  1C86                     _DimmerLightsPointSelect:	
 16773                           
 16774                           ;incstack = 0
 16775                           ; Regs used in _DimmerLightsPointSelect: [wreg]
 16776                           ;DimmerLightsPointSelect@lights stored from wreg
 16777  1C86  0020               	movlb	0	; select bank0
 16778  1C87  00A1               	movwf	DimmerLightsPointSelect@lights
 16779                           
 16780                           ;Dimmer_B1.c: 323: if (lights == 1) {
 16781  1C88  0821               	movf	DimmerLightsPointSelect@lights,w
 16782  1C89  3A01               	xorlw	1
 16783  1C8A  1D03               	skipz
 16784  1C8B  2C90               	goto	l770
 16785                           
 16786                           ;Dimmer_B1.c: 324: DimmerLights = &DimmerLights1;
 16787  1C8C  3055               	movlw	_DimmerLights1& (0+255)
 16788  1C8D  00A0               	movwf	??_DimmerLightsPointSelect
 16789  1C8E  0820               	movf	??_DimmerLightsPointSelect,w
 16790  1C8F  00EF               	movwf	_DimmerLights
 16791  1C90                     l770:	
 16792                           
 16793                           ;Dimmer_B1.c: 325: }
 16794                           ;Dimmer_B1.c: 328: if (lights == 2) {
 16795  1C90  0821               	movf	DimmerLightsPointSelect@lights,w
 16796  1C91  3A02               	xorlw	2
 16797  1C92  1D03               	skipz
 16798  1C93  0008               	return
 16799                           
 16800                           ;Dimmer_B1.c: 329: DimmerLights = &DimmerLights2;
 16801  1C94  30BE               	movlw	_DimmerLights2& (0+255)
 16802  1C95  00A0               	movwf	??_DimmerLightsPointSelect
 16803  1C96  0820               	movf	??_DimmerLightsPointSelect,w
 16804  1C97  00EF               	movwf	_DimmerLights
 16805  1C98  0008               	return
 16806  1C99                     __end_of_DimmerLightsPointSelect:	
 16807                           
 16808                           	psect	text107
 16809  174E                     __ptext107:	
 16810 ;; *************** function _setBuz *****************
 16811 ;; Defined at:
 16812 ;;		line 22 in file "../src/Buzzer_B1.c"
 16813 ;; Parameters:    Size  Location     Type
 16814 ;;  count           1    wreg     unsigned char 
 16815 ;;  time            2    9[BANK0 ] int 
 16816 ;; Auto vars:     Size  Location     Type
 16817 ;;  count           1   12[BANK0 ] unsigned char 
 16818 ;; Return value:  Size  Location     Type
 16819 ;;		None               void
 16820 ;; Registers used:
 16821 ;;		wreg, status,2, status,0, pclath, cstack
 16822 ;; Tracked objects:
 16823 ;;		On entry : 0/0
 16824 ;;		On exit  : 0/0
 16825 ;;		Unchanged: 0/0
 16826 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16827 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16828 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16829 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16830 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16831 ;;Total ram usage:        4 bytes
 16832 ;; Hardware stack levels used:    1
 16833 ;; Hardware stack levels required when called:    6
 16834 ;; This function calls:
 16835 ;;		___awdiv
 16836 ;; This function is called by:
 16837 ;;		_DlyOff_Main
 16838 ;;		_setDimmerLights_SwOn
 16839 ;;		_setDimmerLights_Adj
 16840 ;;		_my_MainTimer
 16841 ;;		_Exception_Main
 16842 ;;		_setTemp_Main
 16843 ;;		_setLog_Code
 16844 ;;		_setControl_Lights_Table
 16845 ;;		_setRFSW_Control
 16846 ;;		_setSw_Main
 16847 ;; This function uses a non-reentrant model
 16848 ;;
 16849                           
 16850                           
 16851                           ;psect for function _setBuz
 16852  174E                     _setBuz:	
 16853                           
 16854                           ;incstack = 0
 16855                           ; Regs used in _setBuz: [wreg+status,2+status,0+pclath+cstack]
 16856                           ;setBuz@count stored from wreg
 16857  174E  0020               	movlb	0	; select bank0
 16858  174F  00AC               	movwf	setBuz@count
 16859                           
 16860                           ;Buzzer_B1.c: 23: time /= 10;
 16861  1750  300A               	movlw	10
 16862  1751  00A0               	movwf	___awdiv@divisor
 16863  1752  3000               	movlw	0
 16864  1753  00A1               	movwf	___awdiv@divisor+1
 16865  1754  082A               	movf	setBuz@time+1,w
 16866  1755  01A3               	clrf	___awdiv@dividend+1
 16867  1756  07A3               	addwf	___awdiv@dividend+1,f
 16868  1757  0829               	movf	setBuz@time,w
 16869  1758  01A2               	clrf	___awdiv@dividend
 16870  1759  07A2               	addwf	___awdiv@dividend,f
 16871  175A  3196  26A2  3197   	fcall	___awdiv
 16872  175D  0020               	movlb	0	; select bank0
 16873  175E  0821               	movf	?___awdiv+1,w
 16874  175F  01AA               	clrf	setBuz@time+1
 16875  1760  07AA               	addwf	setBuz@time+1,f
 16876  1761  0820               	movf	?___awdiv,w
 16877  1762  01A9               	clrf	setBuz@time
 16878  1763  07A9               	addwf	setBuz@time,f
 16879                           
 16880                           ;Buzzer_B1.c: 24: if (Buz1.Enable == 1) {
 16881  1764  0021               	movlb	1	; select bank1
 16882  1765  1C2E               	btfss	_Buz1^(0+128),0
 16883  1766  0008               	return
 16884                           
 16885                           ;Buzzer_B1.c: 25: if (Buz1.GO == 0) {
 16886  1767  18AE               	btfsc	_Buz1^(0+128),1
 16887  1768  2F7F               	goto	l96
 16888                           
 16889                           ;Buzzer_B1.c: 26: Buz1.GO = 1;
 16890  1769  14AE               	bsf	_Buz1^(0+128),1
 16891                           
 16892                           ;Buzzer_B1.c: 27: Buz1.Counter = 0;
 16893  176A  01AF               	clrf	(_Buz1^(0+128)+1)
 16894  176B  01B0               	clrf	((_Buz1+1)^(0+128)+1)
 16895                           
 16896                           ;Buzzer_B1.c: 28: Buz1.Count = count;
 16897  176C  0020               	movlb	0	; select bank0
 16898  176D  082C               	movf	setBuz@count,w
 16899  176E  00AB               	movwf	??_setBuz
 16900  176F  082B               	movf	??_setBuz,w
 16901  1770  0021               	movlb	1	; select bank1
 16902  1771  00B1               	movwf	(_Buz1^(0+128)+3)
 16903                           
 16904                           ;Buzzer_B1.c: 29: Buz1.TimeValue = time;
 16905  1772  0020               	movlb	0	; select bank0
 16906  1773  082A               	movf	setBuz@time+1,w
 16907  1774  0021               	movlb	1	; select bank1
 16908  1775  01B5               	clrf	((_Buz1+1)^(0+128)+6)
 16909  1776  07B5               	addwf	((_Buz1+1)^(0+128)+6),f
 16910  1777  0020               	movlb	0	; select bank0
 16911  1778  0829               	movf	setBuz@time,w
 16912  1779  0021               	movlb	1	; select bank1
 16913  177A  01B4               	clrf	(_Buz1^(0+128)+6)
 16914  177B  07B4               	addwf	(_Buz1^(0+128)+6),f
 16915                           
 16916                           ;Buzzer_B1.c: 30: RB3 = 1;
 16917  177C  0020               	movlb	0	; select bank0
 16918  177D  158D               	bsf	13,3	;volatile
 16919                           
 16920                           ;Buzzer_B1.c: 31: } else {
 16921  177E  0008               	return
 16922  177F                     l96:	
 16923                           
 16924                           ;Buzzer_B1.c: 32: if (Buz1.BufferStatus1 == 0) {
 16925  177F  19AE               	btfsc	_Buz1^(0+128),3
 16926  1780  2F93               	goto	l98
 16927                           
 16928                           ;Buzzer_B1.c: 33: Buz1.BufferStatus1 = 1;
 16929  1781  15AE               	bsf	_Buz1^(0+128),3
 16930                           
 16931                           ;Buzzer_B1.c: 34: Buz1.CountBuffer1 = count;
 16932  1782  0020               	movlb	0	; select bank0
 16933  1783  082C               	movf	setBuz@count,w
 16934  1784  00AB               	movwf	??_setBuz
 16935  1785  082B               	movf	??_setBuz,w
 16936  1786  0021               	movlb	1	; select bank1
 16937  1787  00B2               	movwf	(_Buz1^(0+128)+4)
 16938                           
 16939                           ;Buzzer_B1.c: 35: Buz1.TimeValueBuffer1 = time;
 16940  1788  0020               	movlb	0	; select bank0
 16941  1789  082A               	movf	setBuz@time+1,w
 16942  178A  0021               	movlb	1	; select bank1
 16943  178B  01B7               	clrf	((_Buz1+1)^(0+128)+8)
 16944  178C  07B7               	addwf	((_Buz1+1)^(0+128)+8),f
 16945  178D  0020               	movlb	0	; select bank0
 16946  178E  0829               	movf	setBuz@time,w
 16947  178F  0021               	movlb	1	; select bank1
 16948  1790  01B6               	clrf	(_Buz1^(0+128)+8)
 16949  1791  07B6               	addwf	(_Buz1^(0+128)+8),f
 16950                           
 16951                           ;Buzzer_B1.c: 36: } else if (Buz1.BufferStatus2 == 0) {
 16952  1792  0008               	return
 16953  1793                     l98:	
 16954  1793  1A2E               	btfsc	_Buz1^(0+128),4
 16955  1794  0008               	return
 16956                           
 16957                           ;Buzzer_B1.c: 37: Buz1.BufferStatus2 = 1;
 16958  1795  162E               	bsf	_Buz1^(0+128),4
 16959                           
 16960                           ;Buzzer_B1.c: 38: Buz1.CountBuffer2 = count;
 16961  1796  0020               	movlb	0	; select bank0
 16962  1797  082C               	movf	setBuz@count,w
 16963  1798  00AB               	movwf	??_setBuz
 16964  1799  082B               	movf	??_setBuz,w
 16965  179A  0021               	movlb	1	; select bank1
 16966  179B  00B3               	movwf	(_Buz1^(0+128)+5)
 16967                           
 16968                           ;Buzzer_B1.c: 39: Buz1.TimeValueBuffer2 = time;
 16969  179C  0020               	movlb	0	; select bank0
 16970  179D  082A               	movf	setBuz@time+1,w
 16971  179E  0021               	movlb	1	; select bank1
 16972  179F  01B9               	clrf	((_Buz1+1)^(0+128)+10)
 16973  17A0  07B9               	addwf	((_Buz1+1)^(0+128)+10),f
 16974  17A1  0020               	movlb	0	; select bank0
 16975  17A2  0829               	movf	setBuz@time,w
 16976  17A3  0021               	movlb	1	; select bank1
 16977  17A4  01B8               	clrf	(_Buz1^(0+128)+10)
 16978  17A5  07B8               	addwf	(_Buz1^(0+128)+10),f
 16979  17A6  0008               	return
 16980  17A7                     __end_of_setBuz:	
 16981                           
 16982                           	psect	text108
 16983  16A2                     __ptext108:	
 16984 ;; *************** function ___awdiv *****************
 16985 ;; Defined at:
 16986 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awdiv.c"
 16987 ;; Parameters:    Size  Location     Type
 16988 ;;  divisor         2    0[BANK0 ] int 
 16989 ;;  dividend        2    2[BANK0 ] int 
 16990 ;; Auto vars:     Size  Location     Type
 16991 ;;  quotient        2    7[BANK0 ] int 
 16992 ;;  sign            1    6[BANK0 ] unsigned char 
 16993 ;;  counter         1    5[BANK0 ] unsigned char 
 16994 ;; Return value:  Size  Location     Type
 16995 ;;                  2    0[BANK0 ] int 
 16996 ;; Registers used:
 16997 ;;		wreg, status,2, status,0
 16998 ;; Tracked objects:
 16999 ;;		On entry : 0/0
 17000 ;;		On exit  : 0/0
 17001 ;;		Unchanged: 0/0
 17002 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17003 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17004 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17005 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17006 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17007 ;;Total ram usage:        9 bytes
 17008 ;; Hardware stack levels used:    1
 17009 ;; Hardware stack levels required when called:    5
 17010 ;; This function calls:
 17011 ;;		Nothing
 17012 ;; This function is called by:
 17013 ;;		_setBuz
 17014 ;; This function uses a non-reentrant model
 17015 ;;
 17016                           
 17017                           
 17018                           ;psect for function ___awdiv
 17019  16A2                     ___awdiv:	
 17020                           
 17021                           ;incstack = 0
 17022                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 17023  16A2  0020               	movlb	0	; select bank0
 17024  16A3  01A6               	clrf	___awdiv@sign
 17025  16A4  1FA1               	btfss	___awdiv@divisor+1,7
 17026  16A5  2EAD               	goto	l8901
 17027  16A6  09A0               	comf	___awdiv@divisor,f
 17028  16A7  09A1               	comf	___awdiv@divisor+1,f
 17029  16A8  0AA0               	incf	___awdiv@divisor,f
 17030  16A9  1903               	skipnz
 17031  16AA  0AA1               	incf	___awdiv@divisor+1,f
 17032  16AB  01A6               	clrf	___awdiv@sign
 17033  16AC  0AA6               	incf	___awdiv@sign,f
 17034  16AD                     l8901:	
 17035  16AD  1FA3               	btfss	___awdiv@dividend+1,7
 17036  16AE  2EB8               	goto	l8907
 17037  16AF  09A2               	comf	___awdiv@dividend,f
 17038  16B0  09A3               	comf	___awdiv@dividend+1,f
 17039  16B1  0AA2               	incf	___awdiv@dividend,f
 17040  16B2  1903               	skipnz
 17041  16B3  0AA3               	incf	___awdiv@dividend+1,f
 17042  16B4  3001               	movlw	1
 17043  16B5  00A4               	movwf	??___awdiv
 17044  16B6  0824               	movf	??___awdiv,w
 17045  16B7  06A6               	xorwf	___awdiv@sign,f
 17046  16B8                     l8907:	
 17047  16B8  01A7               	clrf	___awdiv@quotient
 17048  16B9  01A8               	clrf	___awdiv@quotient+1
 17049  16BA  0821               	movf	___awdiv@divisor+1,w
 17050  16BB  0420               	iorwf	___awdiv@divisor,w
 17051  16BC  1903               	skipnz
 17052  16BD  2EE7               	goto	l8929
 17053  16BE  01A5               	clrf	___awdiv@counter
 17054  16BF  0AA5               	incf	___awdiv@counter,f
 17055  16C0                     l8917:	
 17056  16C0  1BA1               	btfsc	___awdiv@divisor+1,7
 17057  16C1  2ECC               	goto	l8919
 17058  16C2  3001               	movlw	1
 17059  16C3                     u9685:	
 17060  16C3  35A0               	lslf	___awdiv@divisor,f
 17061  16C4  0DA1               	rlf	___awdiv@divisor+1,f
 17062  16C5  0B89               	decfsz	9,f
 17063  16C6  2EC3               	goto	u9685
 17064  16C7  3001               	movlw	1
 17065  16C8  00A4               	movwf	??___awdiv
 17066  16C9  0824               	movf	??___awdiv,w
 17067  16CA  07A5               	addwf	___awdiv@counter,f
 17068  16CB  2EC0               	goto	l8917
 17069  16CC                     l8919:	
 17070  16CC  3001               	movlw	1
 17071  16CD                     u9705:	
 17072  16CD  35A7               	lslf	___awdiv@quotient,f
 17073  16CE  0DA8               	rlf	___awdiv@quotient+1,f
 17074  16CF  0B89               	decfsz	9,f
 17075  16D0  2ECD               	goto	u9705
 17076  16D1  0821               	movf	___awdiv@divisor+1,w
 17077  16D2  0223               	subwf	___awdiv@dividend+1,w
 17078  16D3  1D03               	skipz
 17079  16D4  2ED7               	goto	u9715
 17080  16D5  0820               	movf	___awdiv@divisor,w
 17081  16D6  0222               	subwf	___awdiv@dividend,w
 17082  16D7                     u9715:	
 17083  16D7  1C03               	skipc
 17084  16D8  2EDE               	goto	l8925
 17085  16D9  0820               	movf	___awdiv@divisor,w
 17086  16DA  02A2               	subwf	___awdiv@dividend,f
 17087  16DB  0821               	movf	___awdiv@divisor+1,w
 17088  16DC  3BA3               	subwfb	___awdiv@dividend+1,f
 17089  16DD  1427               	bsf	___awdiv@quotient,0
 17090  16DE                     l8925:	
 17091  16DE  3001               	movlw	1
 17092  16DF                     u9725:	
 17093  16DF  36A1               	lsrf	___awdiv@divisor+1,f
 17094  16E0  0CA0               	rrf	___awdiv@divisor,f
 17095  16E1  0B89               	decfsz	9,f
 17096  16E2  2EDF               	goto	u9725
 17097  16E3  3001               	movlw	1
 17098  16E4  02A5               	subwf	___awdiv@counter,f
 17099  16E5  1D03               	btfss	3,2
 17100  16E6  2ECC               	goto	l8919
 17101  16E7                     l8929:	
 17102  16E7  0826               	movf	___awdiv@sign,w
 17103  16E8  1903               	btfsc	3,2
 17104  16E9  2EEF               	goto	l8933
 17105  16EA  09A7               	comf	___awdiv@quotient,f
 17106  16EB  09A8               	comf	___awdiv@quotient+1,f
 17107  16EC  0AA7               	incf	___awdiv@quotient,f
 17108  16ED  1903               	skipnz
 17109  16EE  0AA8               	incf	___awdiv@quotient+1,f
 17110  16EF                     l8933:	
 17111  16EF  0828               	movf	___awdiv@quotient+1,w
 17112  16F0  01A1               	clrf	?___awdiv+1
 17113  16F1  07A1               	addwf	?___awdiv+1,f
 17114  16F2  0827               	movf	___awdiv@quotient,w
 17115  16F3  01A0               	clrf	?___awdiv
 17116  16F4  07A0               	addwf	?___awdiv,f
 17117  16F5  0008               	return
 17118  16F6                     __end_of___awdiv:	
 17119                           
 17120                           	psect	text109
 17121  1B07                     __ptext109:	
 17122 ;; *************** function _DelayOff_Initialization *****************
 17123 ;; Defined at:
 17124 ;;		line 26 in file "../src/DelayOff_B1.c"
 17125 ;; Parameters:    Size  Location     Type
 17126 ;;		None
 17127 ;; Auto vars:     Size  Location     Type
 17128 ;;		None
 17129 ;; Return value:  Size  Location     Type
 17130 ;;		None               void
 17131 ;; Registers used:
 17132 ;;		wreg, status,2, status,0, pclath, cstack
 17133 ;; Tracked objects:
 17134 ;;		On entry : 0/0
 17135 ;;		On exit  : 0/0
 17136 ;;		Unchanged: 0/0
 17137 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17138 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17139 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17140 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17141 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17142 ;;Total ram usage:        0 bytes
 17143 ;; Hardware stack levels used:    1
 17144 ;; Hardware stack levels required when called:    7
 17145 ;; This function calls:
 17146 ;;		_DlyOff_Initialization
 17147 ;; This function is called by:
 17148 ;;		_main
 17149 ;; This function uses a non-reentrant model
 17150 ;;
 17151                           
 17152                           
 17153                           ;psect for function _DelayOff_Initialization
 17154  1B07                     _DelayOff_Initialization:	
 17155                           
 17156                           ;DelayOff_B1.c: 28: DlyOff_Initialization(1);
 17157                           
 17158                           ;incstack = 0
 17159                           ; Regs used in _DelayOff_Initialization: [wreg+status,2+status,0+pclath+cstack]
 17160  1B07  3001               	movlw	1
 17161  1B08  319A  22E6  319B   	fcall	_DlyOff_Initialization
 17162                           
 17163                           ;DelayOff_B1.c: 32: DlyOff_Initialization(2);
 17164  1B0B  3002               	movlw	2
 17165  1B0C  319A  22E6         	fcall	_DlyOff_Initialization
 17166  1B0E  0008               	return
 17167  1B0F                     __end_of_DelayOff_Initialization:	
 17168                           
 17169                           	psect	text110
 17170  1AE6                     __ptext110:	
 17171 ;; *************** function _DlyOff_Initialization *****************
 17172 ;; Defined at:
 17173 ;;		line 56 in file "../src/DelayOff_B1.c"
 17174 ;; Parameters:    Size  Location     Type
 17175 ;;  sw              1    wreg     unsigned char 
 17176 ;; Auto vars:     Size  Location     Type
 17177 ;;  sw              1    2[BANK0 ] unsigned char 
 17178 ;; Return value:  Size  Location     Type
 17179 ;;		None               void
 17180 ;; Registers used:
 17181 ;;		wreg, status,2, status,0, pclath, cstack
 17182 ;; Tracked objects:
 17183 ;;		On entry : 0/0
 17184 ;;		On exit  : 0/0
 17185 ;;		Unchanged: 0/0
 17186 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17187 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17188 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17189 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17190 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17191 ;;Total ram usage:        1 bytes
 17192 ;; Hardware stack levels used:    1
 17193 ;; Hardware stack levels required when called:    6
 17194 ;; This function calls:
 17195 ;;		_DelayOffPointSelect
 17196 ;; This function is called by:
 17197 ;;		_DelayOff_Initialization
 17198 ;; This function uses a non-reentrant model
 17199 ;;
 17200                           
 17201                           
 17202                           ;psect for function _DlyOff_Initialization
 17203  1AE6                     _DlyOff_Initialization:	
 17204                           
 17205                           ;incstack = 0
 17206                           ; Regs used in _DlyOff_Initialization: [wreg+status,2+status,0+pclath+cstack]
 17207                           ;DlyOff_Initialization@sw stored from wreg
 17208  1AE6  0020               	movlb	0	; select bank0
 17209  1AE7  00A2               	movwf	DlyOff_Initialization@sw
 17210                           
 17211                           ;DelayOff_B1.c: 57: DelayOffPointSelect(sw);
 17212  1AE8  0822               	movf	DlyOff_Initialization@sw,w
 17213  1AE9  319C  24F9         	fcall	_DelayOffPointSelect
 17214  1AEB  0008               	return
 17215  1AEC                     __end_of_DlyOff_Initialization:	
 17216                           
 17217                           	psect	text111
 17218  1CF9                     __ptext111:	
 17219 ;; *************** function _DelayOffPointSelect *****************
 17220 ;; Defined at:
 17221 ;;		line 7 in file "../src/DelayOff_B1.c"
 17222 ;; Parameters:    Size  Location     Type
 17223 ;;  sw              1    wreg     unsigned char 
 17224 ;; Auto vars:     Size  Location     Type
 17225 ;;  sw              1    1[BANK0 ] unsigned char 
 17226 ;; Return value:  Size  Location     Type
 17227 ;;		None               void
 17228 ;; Registers used:
 17229 ;;		wreg
 17230 ;; Tracked objects:
 17231 ;;		On entry : 0/0
 17232 ;;		On exit  : 0/0
 17233 ;;		Unchanged: 0/0
 17234 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17235 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17236 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17237 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17238 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17239 ;;Total ram usage:        2 bytes
 17240 ;; Hardware stack levels used:    1
 17241 ;; Hardware stack levels required when called:    5
 17242 ;; This function calls:
 17243 ;;		Nothing
 17244 ;; This function is called by:
 17245 ;;		_DlyOff_Initialization
 17246 ;;		_DlyOff_Main
 17247 ;;		_setDelayOff_GO
 17248 ;;		_getDelayOff_GO
 17249 ;; This function uses a non-reentrant model
 17250 ;;
 17251                           
 17252                           
 17253                           ;psect for function _DelayOffPointSelect
 17254  1CF9                     _DelayOffPointSelect:	
 17255                           
 17256                           ;incstack = 0
 17257                           ; Regs used in _DelayOffPointSelect: [wreg]
 17258                           ;DelayOffPointSelect@sw stored from wreg
 17259  1CF9  0020               	movlb	0	; select bank0
 17260  1CFA  00A1               	movwf	DelayOffPointSelect@sw
 17261                           
 17262                           ;DelayOff_B1.c: 9: if (sw == 1) {
 17263  1CFB  0821               	movf	DelayOffPointSelect@sw,w
 17264  1CFC  3A01               	xorlw	1
 17265  1CFD  1D03               	skipz
 17266  1CFE  2D04               	goto	l8857
 17267                           
 17268                           ;DelayOff_B1.c: 10: DelayOff = &DlySw1;
 17269  1CFF  30E1               	movlw	_DlySw1& (0+255)
 17270  1D00  00A0               	movwf	??_DelayOffPointSelect
 17271  1D01  0820               	movf	??_DelayOffPointSelect,w
 17272  1D02  00F5               	movwf	_DelayOff
 17273                           
 17274                           ;DelayOff_B1.c: 11: }
 17275  1D03  0008               	return
 17276  1D04                     l8857:	
 17277                           
 17278                           ;DelayOff_B1.c: 14: else if (sw == 2) {
 17279  1D04  0821               	movf	DelayOffPointSelect@sw,w
 17280  1D05  3A02               	xorlw	2
 17281  1D06  1D03               	skipz
 17282  1D07  0008               	return
 17283                           
 17284                           ;DelayOff_B1.c: 15: DelayOff = &DlySw2;
 17285  1D08  30E6               	movlw	_DlySw2& (0+255)
 17286  1D09  00A0               	movwf	??_DelayOffPointSelect
 17287  1D0A  0820               	movf	??_DelayOffPointSelect,w
 17288  1D0B  00F5               	movwf	_DelayOff
 17289  1D0C  0008               	return
 17290  1D0D                     __end_of_DelayOffPointSelect:	
 17291                           
 17292                           	psect	text112
 17293  1D86                     __ptext112:	
 17294 ;; *************** function _CC2500_PowerOnInitial *****************
 17295 ;; Defined at:
 17296 ;;		line 119 in file "../src/CC2500_B1.c"
 17297 ;; Parameters:    Size  Location     Type
 17298 ;;		None
 17299 ;; Auto vars:     Size  Location     Type
 17300 ;;		None
 17301 ;; Return value:  Size  Location     Type
 17302 ;;		None               void
 17303 ;; Registers used:
 17304 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17305 ;; Tracked objects:
 17306 ;;		On entry : 0/0
 17307 ;;		On exit  : 0/0
 17308 ;;		Unchanged: 0/0
 17309 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17310 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17311 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17312 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17313 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17314 ;;Total ram usage:        0 bytes
 17315 ;; Hardware stack levels used:    1
 17316 ;; Hardware stack levels required when called:    8
 17317 ;; This function calls:
 17318 ;;		_CC2500_ClearRXFIFO
 17319 ;;		_CC2500_ClearTXFIFO
 17320 ;;		_CC2500_FrequencyCabr
 17321 ;;		_CC2500_InitPATable
 17322 ;;		_CC2500_InitSetREG
 17323 ;;		_CC2500_PowerRST
 17324 ;;		_CC2500_SIDLEMode
 17325 ;; This function is called by:
 17326 ;;		_main
 17327 ;; This function uses a non-reentrant model
 17328 ;;
 17329                           
 17330                           
 17331                           ;psect for function _CC2500_PowerOnInitial
 17332  1D86                     _CC2500_PowerOnInitial:	
 17333                           
 17334                           ;CC2500_B1.c: 120: CC2500_PowerRST();
 17335                           
 17336                           ;incstack = 0
 17337                           ; Regs used in _CC2500_PowerOnInitial: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 17338  1D86  3193  23E0  319D   	fcall	_CC2500_PowerRST
 17339                           
 17340                           ;CC2500_B1.c: 121: CC2500_InitSetREG();
 17341  1D89  3190  2087  319D   	fcall	_CC2500_InitSetREG
 17342                           
 17343                           ;CC2500_B1.c: 122: CC2500_InitPATable();
 17344  1D8C  319E  2685  319D   	fcall	_CC2500_InitPATable
 17345                           
 17346                           ;CC2500_B1.c: 123: CC2500_ClearTXFIFO();
 17347  1D8F  319A  22D5  319D   	fcall	_CC2500_ClearTXFIFO
 17348                           
 17349                           ;CC2500_B1.c: 124: CC2500_ClearRXFIFO();
 17350  1D92  319A  22D1  319D   	fcall	_CC2500_ClearRXFIFO
 17351                           
 17352                           ;CC2500_B1.c: 125: CC2500_FrequencyCabr();
 17353  1D95  319B  235F  319D   	fcall	_CC2500_FrequencyCabr
 17354                           
 17355                           ;CC2500_B1.c: 126: CC2500_SIDLEMode();
 17356  1D98  319A  22D9         	fcall	_CC2500_SIDLEMode
 17357  1D9A  0008               	return
 17358  1D9B                     __end_of_CC2500_PowerOnInitial:	
 17359                           
 17360                           	psect	text113
 17361  1AD9                     __ptext113:	
 17362 ;; *************** function _CC2500_SIDLEMode *****************
 17363 ;; Defined at:
 17364 ;;		line 209 in file "../src/CC2500_B1.c"
 17365 ;; Parameters:    Size  Location     Type
 17366 ;;		None
 17367 ;; Auto vars:     Size  Location     Type
 17368 ;;		None
 17369 ;; Return value:  Size  Location     Type
 17370 ;;		None               void
 17371 ;; Registers used:
 17372 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17373 ;; Tracked objects:
 17374 ;;		On entry : 0/0
 17375 ;;		On exit  : 0/0
 17376 ;;		Unchanged: 0/0
 17377 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17378 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17379 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17380 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17381 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17382 ;;Total ram usage:        0 bytes
 17383 ;; Hardware stack levels used:    1
 17384 ;; Hardware stack levels required when called:    7
 17385 ;; This function calls:
 17386 ;;		_CC2500_WriteCommand
 17387 ;; This function is called by:
 17388 ;;		_CC2500_PowerOnInitial
 17389 ;; This function uses a non-reentrant model
 17390 ;;
 17391                           
 17392                           
 17393                           ;psect for function _CC2500_SIDLEMode
 17394  1AD9                     _CC2500_SIDLEMode:	
 17395                           
 17396                           ;CC2500_B1.c: 210: CC2500_WriteCommand(0x36);
 17397                           
 17398                           ;incstack = 0
 17399                           ; Regs used in _CC2500_SIDLEMode: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17400  1AD9  3036               	movlw	54
 17401  1ADA  319D  25FA         	fcall	_CC2500_WriteCommand
 17402  1ADC  0008               	return
 17403  1ADD                     __end_of_CC2500_SIDLEMode:	
 17404                           
 17405                           	psect	text114
 17406  13E0                     __ptext114:	
 17407 ;; *************** function _CC2500_PowerRST *****************
 17408 ;; Defined at:
 17409 ;;		line 132 in file "../src/CC2500_B1.c"
 17410 ;; Parameters:    Size  Location     Type
 17411 ;;		None
 17412 ;; Auto vars:     Size  Location     Type
 17413 ;;		None
 17414 ;; Return value:  Size  Location     Type
 17415 ;;		None               void
 17416 ;; Registers used:
 17417 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17418 ;; Tracked objects:
 17419 ;;		On entry : 0/0
 17420 ;;		On exit  : 0/0
 17421 ;;		Unchanged: 0/0
 17422 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17423 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17424 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17425 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17426 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17427 ;;Total ram usage:        1 bytes
 17428 ;; Hardware stack levels used:    1
 17429 ;; Hardware stack levels required when called:    6
 17430 ;; This function calls:
 17431 ;;		_CC2500_WriteByte
 17432 ;;		_DelayTime_1us
 17433 ;;		_Timeout_Counter
 17434 ;;		_set_TimeoutCleared
 17435 ;; This function is called by:
 17436 ;;		_CC2500_PowerOnInitial
 17437 ;; This function uses a non-reentrant model
 17438 ;;
 17439                           
 17440                           
 17441                           ;psect for function _CC2500_PowerRST
 17442  13E0                     _CC2500_PowerRST:	
 17443                           
 17444                           ;CC2500_B1.c: 133: RC1 = 0;
 17445                           
 17446                           ;incstack = 0
 17447                           ; Regs used in _CC2500_PowerRST: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17448  13E0  0020               	movlb	0	; select bank0
 17449  13E1  108E               	bcf	14,1	;volatile
 17450                           
 17451                           ;CC2500_B1.c: 134: RC0 = 0;
 17452  13E2  100E               	bcf	14,0	;volatile
 17453                           
 17454                           ;CC2500_B1.c: 135: RC4 = 1;
 17455  13E3  160E               	bsf	14,4	;volatile
 17456                           
 17457                           ;CC2500_B1.c: 136: DelayTime_1us(10);
 17458  13E4  300A               	movlw	10
 17459  13E5  00A0               	movwf	DelayTime_1us@count
 17460  13E6  3000               	movlw	0
 17461  13E7  00A1               	movwf	DelayTime_1us@count+1
 17462  13E8  319F  27B1  3193   	fcall	_DelayTime_1us
 17463                           
 17464                           ;CC2500_B1.c: 137: RC4 = 0;
 17465  13EB  0020               	movlb	0	; select bank0
 17466  13EC  120E               	bcf	14,4	;volatile
 17467                           
 17468                           ;CC2500_B1.c: 138: DelayTime_1us(10);
 17469  13ED  300A               	movlw	10
 17470  13EE  00A0               	movwf	DelayTime_1us@count
 17471  13EF  3000               	movlw	0
 17472  13F0  00A1               	movwf	DelayTime_1us@count+1
 17473  13F1  319F  27B1  3193   	fcall	_DelayTime_1us
 17474                           
 17475                           ;CC2500_B1.c: 139: RC4 = 1;
 17476  13F4  0020               	movlb	0	; select bank0
 17477  13F5  160E               	bsf	14,4	;volatile
 17478                           
 17479                           ;CC2500_B1.c: 140: DelayTime_1us(40);
 17480  13F6  3028               	movlw	40
 17481  13F7  00A0               	movwf	DelayTime_1us@count
 17482  13F8  3000               	movlw	0
 17483  13F9  00A1               	movwf	DelayTime_1us@count+1
 17484  13FA  319F  27B1  3193   	fcall	_DelayTime_1us
 17485                           
 17486                           ;CC2500_B1.c: 141: RC4 = 0;
 17487  13FD  0020               	movlb	0	; select bank0
 17488  13FE  120E               	bcf	14,4	;volatile
 17489                           
 17490                           ;CC2500_B1.c: 142: SPI0Buffer = 0x30;
 17491  13FF  3030               	movlw	48
 17492  1400  00A6               	movwf	??_CC2500_PowerRST
 17493  1401  0826               	movf	??_CC2500_PowerRST,w
 17494  1402  0021               	movlb	1	; select bank1
 17495  1403  00D0               	movwf	_SPI0Buffer^(0+128)
 17496                           
 17497                           ;CC2500_B1.c: 143: while (RC2 == 1 && myMain.Timeout == 0) {
 17498  1404  2C08               	goto	l9869
 17499  1405                     l9867:	
 17500                           
 17501                           ;CC2500_B1.c: 144: Timeout_Counter();
 17502  1405  319D  2571  3193   	fcall	_Timeout_Counter
 17503  1408                     l9869:	
 17504  1408  0020               	movlb	0	; select bank0
 17505  1409  1D0E               	btfss	14,2	;volatile
 17506  140A  2C0E               	goto	l9873
 17507  140B  0021               	movlb	1	; select bank1
 17508  140C  1D2B               	btfss	(_myMain^(0+128)+11),2
 17509  140D  2C05               	goto	l9867
 17510  140E                     l9873:	
 17511                           
 17512                           ;CC2500_B1.c: 145: };
 17513                           ;CC2500_B1.c: 146: set_TimeoutCleared();
 17514  140E  319A  22E1  3193   	fcall	_set_TimeoutCleared
 17515                           
 17516                           ;CC2500_B1.c: 147: CC2500_WriteByte();
 17517  1411  319D  25C8  3193   	fcall	_CC2500_WriteByte
 17518                           
 17519                           ;CC2500_B1.c: 148: while (RC2 == 1 && myMain.Timeout == 0) {
 17520  1414  2C18               	goto	l9879
 17521  1415                     l9877:	
 17522                           
 17523                           ;CC2500_B1.c: 149: Timeout_Counter();
 17524  1415  319D  2571  3193   	fcall	_Timeout_Counter
 17525  1418                     l9879:	
 17526  1418  0020               	movlb	0	; select bank0
 17527  1419  1D0E               	btfss	14,2	;volatile
 17528  141A  2C1E               	goto	l9883
 17529  141B  0021               	movlb	1	; select bank1
 17530  141C  1D2B               	btfss	(_myMain^(0+128)+11),2
 17531  141D  2C15               	goto	l9877
 17532  141E                     l9883:	
 17533                           
 17534                           ;CC2500_B1.c: 150: };
 17535                           ;CC2500_B1.c: 151: set_TimeoutCleared();
 17536  141E  319A  22E1         	fcall	_set_TimeoutCleared
 17537                           
 17538                           ;CC2500_B1.c: 152: RC0 = 0;
 17539  1420  0020               	movlb	0	; select bank0
 17540  1421  100E               	bcf	14,0	;volatile
 17541                           
 17542                           ;CC2500_B1.c: 153: RC4 = 1;
 17543  1422  160E               	bsf	14,4	;volatile
 17544  1423  0008               	return
 17545  1424                     __end_of_CC2500_PowerRST:	
 17546                           
 17547                           	psect	text115
 17548  1087                     __ptext115:	
 17549 ;; *************** function _CC2500_InitSetREG *****************
 17550 ;; Defined at:
 17551 ;;		line 159 in file "../src/CC2500_B1.c"
 17552 ;; Parameters:    Size  Location     Type
 17553 ;;		None
 17554 ;; Auto vars:     Size  Location     Type
 17555 ;;  loop_c          1    8[BANK0 ] unsigned char 
 17556 ;;  temp2           1    7[BANK0 ] unsigned char 
 17557 ;;  temp1           1    6[BANK0 ] unsigned char 
 17558 ;; Return value:  Size  Location     Type
 17559 ;;		None               void
 17560 ;; Registers used:
 17561 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17562 ;; Tracked objects:
 17563 ;;		On entry : 0/0
 17564 ;;		On exit  : 0/0
 17565 ;;		Unchanged: 0/0
 17566 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17567 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17568 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17569 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17570 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17571 ;;Total ram usage:        4 bytes
 17572 ;; Hardware stack levels used:    1
 17573 ;; Hardware stack levels required when called:    7
 17574 ;; This function calls:
 17575 ;;		_CC2500_WriteREG
 17576 ;; This function is called by:
 17577 ;;		_CC2500_PowerOnInitial
 17578 ;; This function uses a non-reentrant model
 17579 ;;
 17580                           
 17581                           
 17582                           ;psect for function _CC2500_InitSetREG
 17583  1087                     _CC2500_InitSetREG:	
 17584                           
 17585                           ;CC2500_B1.c: 160: unsigned char loop_c;
 17586                           ;CC2500_B1.c: 161: unsigned char temp1, temp2;
 17587                           ;CC2500_B1.c: 163: for (loop_c = 0; loop_c < 47; loop_c++) {
 17588                           
 17589                           ;incstack = 0
 17590                           ; Regs used in _CC2500_InitSetREG: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 17591  1087  0020               	movlb	0	; select bank0
 17592  1088  01A8               	clrf	CC2500_InitSetREG@loop_c
 17593  1089                     L10:	
 17594  1089  302F               	movlw	47
 17595  108A  0228               	subwf	CC2500_InitSetREG@loop_c,w
 17596  108B  1803               	btfsc	3,0
 17597  108C  0008               	return
 17598                           
 17599                           ;CC2500_B1.c: 164: temp1 = CC2500_registers_address[loop_c];
 17600  108D  0828               	movf	CC2500_InitSetREG@loop_c,w
 17601  108E  3E00               	addlw	low (_CC2500_registers_address| (0+32768))
 17602  108F  0084               	movwf	4
 17603  1090  3090               	movlw	high (_CC2500_registers_address| (0+32768))
 17604  1091  1803               	skipnc
 17605  1092  3E01               	addlw	1
 17606  1093  0085               	movwf	5
 17607  1094  0800               	movf	0,w	;code access
 17608  1095  00A5               	movwf	??_CC2500_InitSetREG
 17609  1096  0825               	movf	??_CC2500_InitSetREG,w
 17610  1097  00A6               	movwf	CC2500_InitSetREG@temp1
 17611                           
 17612                           ;CC2500_B1.c: 165: temp2 = CC2500_rfSettings[loop_c];
 17613  1098  0828               	movf	CC2500_InitSetREG@loop_c,w
 17614  1099  3E2F               	addlw	low (_CC2500_rfSettings| (0+32768))
 17615  109A  0084               	movwf	4
 17616  109B  3090               	movlw	high (_CC2500_rfSettings| (0+32768))
 17617  109C  1803               	skipnc
 17618  109D  3E01               	addlw	1
 17619  109E  0085               	movwf	5
 17620  109F  0800               	movf	0,w	;code access
 17621  10A0  00A5               	movwf	??_CC2500_InitSetREG
 17622  10A1  0825               	movf	??_CC2500_InitSetREG,w
 17623  10A2  00A7               	movwf	CC2500_InitSetREG@temp2
 17624                           
 17625                           ;CC2500_B1.c: 167: CC2500_WriteREG(temp1, temp2);
 17626  10A3  0827               	movf	CC2500_InitSetREG@temp2,w
 17627  10A4  00A5               	movwf	??_CC2500_InitSetREG
 17628  10A5  0825               	movf	??_CC2500_InitSetREG,w
 17629  10A6  00A2               	movwf	CC2500_WriteREG@value
 17630  10A7  0826               	movf	CC2500_InitSetREG@temp1,w
 17631  10A8  319F  2745  3190   	fcall	_CC2500_WriteREG
 17632  10AB  3001               	movlw	1
 17633  10AC  0020               	movlb	0	; select bank0
 17634  10AD  00A5               	movwf	??_CC2500_InitSetREG
 17635  10AE  0825               	movf	??_CC2500_InitSetREG,w
 17636  10AF  07A8               	addwf	CC2500_InitSetREG@loop_c,f
 17637  10B0  2889               	goto	L10
 17638  10B1                     __end_of_CC2500_InitSetREG:	
 17639                           
 17640                           	psect	text116
 17641  1E85                     __ptext116:	
 17642 ;; *************** function _CC2500_InitPATable *****************
 17643 ;; Defined at:
 17644 ;;		line 174 in file "../src/CC2500_B1.c"
 17645 ;; Parameters:    Size  Location     Type
 17646 ;;		None
 17647 ;; Auto vars:     Size  Location     Type
 17648 ;;  loop_d          1    7[BANK0 ] unsigned char 
 17649 ;;  temp            1    6[BANK0 ] unsigned char 
 17650 ;; Return value:  Size  Location     Type
 17651 ;;		None               void
 17652 ;; Registers used:
 17653 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17654 ;; Tracked objects:
 17655 ;;		On entry : 0/0
 17656 ;;		On exit  : 0/0
 17657 ;;		Unchanged: 0/0
 17658 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17659 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17660 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17661 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17662 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17663 ;;Total ram usage:        3 bytes
 17664 ;; Hardware stack levels used:    1
 17665 ;; Hardware stack levels required when called:    7
 17666 ;; This function calls:
 17667 ;;		_CC2500_WriteREG
 17668 ;; This function is called by:
 17669 ;;		_CC2500_PowerOnInitial
 17670 ;; This function uses a non-reentrant model
 17671 ;;
 17672                           
 17673                           
 17674                           ;psect for function _CC2500_InitPATable
 17675  1E85                     _CC2500_InitPATable:	
 17676                           
 17677                           ;CC2500_B1.c: 175: unsigned char loop_d;
 17678                           ;CC2500_B1.c: 176: unsigned char temp;
 17679                           ;CC2500_B1.c: 178: for (loop_d = 0; loop_d < 8; loop_d++) {
 17680                           
 17681                           ;incstack = 0
 17682                           ; Regs used in _CC2500_InitPATable: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 17683  1E85  0020               	movlb	0	; select bank0
 17684  1E86  01A7               	clrf	CC2500_InitPATable@loop_d
 17685  1E87                     L11:	
 17686  1E87  3008               	movlw	8
 17687  1E88  0227               	subwf	CC2500_InitPATable@loop_d,w
 17688  1E89  1803               	btfsc	3,0
 17689  1E8A  0008               	return
 17690                           
 17691                           ;CC2500_B1.c: 179: temp = CC2500_patable_vaule[loop_d];
 17692  1E8B  0827               	movf	CC2500_InitPATable@loop_d,w
 17693  1E8C  3E5E               	addlw	low (_CC2500_patable_vaule| (0+32768))
 17694  1E8D  0084               	movwf	4
 17695  1E8E  3090               	movlw	high (_CC2500_patable_vaule| (0+32768))
 17696  1E8F  1803               	skipnc
 17697  1E90  3E01               	addlw	1
 17698  1E91  0085               	movwf	5
 17699  1E92  0800               	movf	0,w	;code access
 17700  1E93  00A5               	movwf	??_CC2500_InitPATable
 17701  1E94  0825               	movf	??_CC2500_InitPATable,w
 17702  1E95  00A6               	movwf	CC2500_InitPATable@temp
 17703                           
 17704                           ;CC2500_B1.c: 180: CC2500_WriteREG(0x3E, temp);
 17705  1E96  0826               	movf	CC2500_InitPATable@temp,w
 17706  1E97  00A5               	movwf	??_CC2500_InitPATable
 17707  1E98  0825               	movf	??_CC2500_InitPATable,w
 17708  1E99  00A2               	movwf	CC2500_WriteREG@value
 17709  1E9A  303E               	movlw	62
 17710  1E9B  319F  2745  319E   	fcall	_CC2500_WriteREG
 17711  1E9E  3001               	movlw	1
 17712  1E9F  0020               	movlb	0	; select bank0
 17713  1EA0  00A5               	movwf	??_CC2500_InitPATable
 17714  1EA1  0825               	movf	??_CC2500_InitPATable,w
 17715  1EA2  07A7               	addwf	CC2500_InitPATable@loop_d,f
 17716  1EA3  2E87               	goto	L11
 17717  1EA4                     __end_of_CC2500_InitPATable:	
 17718                           
 17719                           	psect	text117
 17720  1F45                     __ptext117:	
 17721 ;; *************** function _CC2500_WriteREG *****************
 17722 ;; Defined at:
 17723 ;;		line 251 in file "../src/CC2500_B1.c"
 17724 ;; Parameters:    Size  Location     Type
 17725 ;;  w_addr          1    wreg     unsigned char 
 17726 ;;  value           1    2[BANK0 ] unsigned char 
 17727 ;; Auto vars:     Size  Location     Type
 17728 ;;  w_addr          1    4[BANK0 ] unsigned char 
 17729 ;; Return value:  Size  Location     Type
 17730 ;;		None               void
 17731 ;; Registers used:
 17732 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17733 ;; Tracked objects:
 17734 ;;		On entry : 0/0
 17735 ;;		On exit  : 0/0
 17736 ;;		Unchanged: 0/0
 17737 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17738 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17739 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17740 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17741 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17742 ;;Total ram usage:        3 bytes
 17743 ;; Hardware stack levels used:    1
 17744 ;; Hardware stack levels required when called:    6
 17745 ;; This function calls:
 17746 ;;		_CC2500_WriteByte
 17747 ;;		_Timeout_Counter
 17748 ;;		_set_TimeoutCleared
 17749 ;; This function is called by:
 17750 ;;		_CC2500_InitSetREG
 17751 ;;		_CC2500_InitPATable
 17752 ;; This function uses a non-reentrant model
 17753 ;;
 17754                           
 17755                           
 17756                           ;psect for function _CC2500_WriteREG
 17757  1F45                     _CC2500_WriteREG:	
 17758                           
 17759                           ;incstack = 0
 17760                           ; Regs used in _CC2500_WriteREG: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17761                           ;CC2500_WriteREG@w_addr stored from wreg
 17762  1F45  0020               	movlb	0	; select bank0
 17763  1F46  00A4               	movwf	CC2500_WriteREG@w_addr
 17764                           
 17765                           ;CC2500_B1.c: 252: RC4 = 0;
 17766  1F47  120E               	bcf	14,4	;volatile
 17767                           
 17768                           ;CC2500_B1.c: 253: SPI0Buffer = w_addr;
 17769  1F48  0824               	movf	CC2500_WriteREG@w_addr,w
 17770  1F49  00A3               	movwf	??_CC2500_WriteREG
 17771  1F4A  0823               	movf	??_CC2500_WriteREG,w
 17772  1F4B  0021               	movlb	1	; select bank1
 17773  1F4C  00D0               	movwf	_SPI0Buffer^(0+128)
 17774                           
 17775                           ;CC2500_B1.c: 254: while (RC2 == 1 && myMain.Timeout == 0) {
 17776  1F4D  2F51               	goto	l9595
 17777  1F4E                     l9593:	
 17778                           
 17779                           ;CC2500_B1.c: 255: Timeout_Counter();
 17780  1F4E  319D  2571  319F   	fcall	_Timeout_Counter
 17781  1F51                     l9595:	
 17782  1F51  0020               	movlb	0	; select bank0
 17783  1F52  1D0E               	btfss	14,2	;volatile
 17784  1F53  2F57               	goto	l9599
 17785  1F54  0021               	movlb	1	; select bank1
 17786  1F55  1D2B               	btfss	(_myMain^(0+128)+11),2
 17787  1F56  2F4E               	goto	l9593
 17788  1F57                     l9599:	
 17789                           
 17790                           ;CC2500_B1.c: 256: };
 17791                           ;CC2500_B1.c: 257: set_TimeoutCleared();
 17792  1F57  319A  22E1  319F   	fcall	_set_TimeoutCleared
 17793                           
 17794                           ;CC2500_B1.c: 259: CC2500_WriteByte();
 17795  1F5A  319D  25C8  319F   	fcall	_CC2500_WriteByte
 17796                           
 17797                           ;CC2500_B1.c: 260: SPI0Buffer = value;
 17798  1F5D  0020               	movlb	0	; select bank0
 17799  1F5E  0822               	movf	CC2500_WriteREG@value,w
 17800  1F5F  00A3               	movwf	??_CC2500_WriteREG
 17801  1F60  0823               	movf	??_CC2500_WriteREG,w
 17802  1F61  0021               	movlb	1	; select bank1
 17803  1F62  00D0               	movwf	_SPI0Buffer^(0+128)
 17804                           
 17805                           ;CC2500_B1.c: 261: CC2500_WriteByte();
 17806  1F63  319D  25C8         	fcall	_CC2500_WriteByte
 17807                           
 17808                           ;CC2500_B1.c: 262: RC4 = 1;
 17809  1F65  0020               	movlb	0	; select bank0
 17810  1F66  160E               	bsf	14,4	;volatile
 17811  1F67  0008               	return
 17812  1F68                     __end_of_CC2500_WriteREG:	
 17813                           
 17814                           	psect	text118
 17815  1B5F                     __ptext118:	
 17816 ;; *************** function _CC2500_FrequencyCabr *****************
 17817 ;; Defined at:
 17818 ;;		line 201 in file "../src/CC2500_B1.c"
 17819 ;; Parameters:    Size  Location     Type
 17820 ;;		None
 17821 ;; Auto vars:     Size  Location     Type
 17822 ;;		None
 17823 ;; Return value:  Size  Location     Type
 17824 ;;		None               void
 17825 ;; Registers used:
 17826 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17827 ;; Tracked objects:
 17828 ;;		On entry : 0/0
 17829 ;;		On exit  : 0/0
 17830 ;;		Unchanged: 0/0
 17831 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17832 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17833 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17834 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17835 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17836 ;;Total ram usage:        0 bytes
 17837 ;; Hardware stack levels used:    1
 17838 ;; Hardware stack levels required when called:    7
 17839 ;; This function calls:
 17840 ;;		_CC2500_WriteCommand
 17841 ;;		_DelayTime_1us
 17842 ;; This function is called by:
 17843 ;;		_CC2500_PowerOnInitial
 17844 ;; This function uses a non-reentrant model
 17845 ;;
 17846                           
 17847                           
 17848                           ;psect for function _CC2500_FrequencyCabr
 17849  1B5F                     _CC2500_FrequencyCabr:	
 17850                           
 17851                           ;CC2500_B1.c: 202: CC2500_WriteCommand(0x33);
 17852                           
 17853                           ;incstack = 0
 17854                           ; Regs used in _CC2500_FrequencyCabr: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17855  1B5F  3033               	movlw	51
 17856  1B60  319D  25FA  319B   	fcall	_CC2500_WriteCommand
 17857                           
 17858                           ;CC2500_B1.c: 203: DelayTime_1us(1000);
 17859  1B63  30E8               	movlw	232
 17860  1B64  0020               	movlb	0	; select bank0
 17861  1B65  00A0               	movwf	DelayTime_1us@count
 17862  1B66  3003               	movlw	3
 17863  1B67  00A1               	movwf	DelayTime_1us@count+1
 17864  1B68  319F  27B1         	fcall	_DelayTime_1us
 17865  1B6A  0008               	return
 17866  1B6B                     __end_of_CC2500_FrequencyCabr:	
 17867                           
 17868                           	psect	text119
 17869  1FB1                     __ptext119:	
 17870 ;; *************** function _DelayTime_1us *****************
 17871 ;; Defined at:
 17872 ;;		line 320 in file "../src/CC2500_B1.c"
 17873 ;; Parameters:    Size  Location     Type
 17874 ;;  count           2    0[BANK0 ] int 
 17875 ;; Auto vars:     Size  Location     Type
 17876 ;;  j               2    4[BANK0 ] unsigned int 
 17877 ;;  i               2    2[BANK0 ] unsigned int 
 17878 ;; Return value:  Size  Location     Type
 17879 ;;		None               void
 17880 ;; Registers used:
 17881 ;;		wreg, status,2
 17882 ;; Tracked objects:
 17883 ;;		On entry : 0/0
 17884 ;;		On exit  : 0/0
 17885 ;;		Unchanged: 0/0
 17886 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17887 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17888 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17889 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17890 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17891 ;;Total ram usage:        6 bytes
 17892 ;; Hardware stack levels used:    1
 17893 ;; Hardware stack levels required when called:    5
 17894 ;; This function calls:
 17895 ;;		Nothing
 17896 ;; This function is called by:
 17897 ;;		_CC2500_PowerRST
 17898 ;;		_CC2500_FrequencyCabr
 17899 ;; This function uses a non-reentrant model
 17900 ;;
 17901                           
 17902                           
 17903                           ;psect for function _DelayTime_1us
 17904  1FB1                     _DelayTime_1us:	
 17905                           
 17906                           ;CC2500_B1.c: 321: unsigned int i, j;
 17907                           ;CC2500_B1.c: 322: for (i = 1; i < count; i++)
 17908                           
 17909                           ;incstack = 0
 17910                           ; Regs used in _DelayTime_1us: [wreg+status,2]
 17911  1FB1  3001               	movlw	1
 17912  1FB2  0020               	movlb	0	; select bank0
 17913  1FB3  00A2               	movwf	DelayTime_1us@i
 17914  1FB4  3000               	movlw	0
 17915  1FB5  00A3               	movwf	DelayTime_1us@i+1
 17916  1FB6                     l372:	
 17917  1FB6  0821               	movf	DelayTime_1us@count+1,w
 17918  1FB7  0223               	subwf	DelayTime_1us@i+1,w
 17919  1FB8  1D03               	skipz
 17920  1FB9  2FBC               	goto	u10725
 17921  1FBA  0820               	movf	DelayTime_1us@count,w
 17922  1FBB  0222               	subwf	DelayTime_1us@i,w
 17923  1FBC                     u10725:	
 17924  1FBC  1803               	btfsc	3,0
 17925  1FBD  0008               	return
 17926                           
 17927                           ;CC2500_B1.c: 323: for (j = 0; j <= 1; j++);
 17928  1FBE  01A4               	clrf	DelayTime_1us@j
 17929  1FBF  01A5               	clrf	DelayTime_1us@j+1
 17930  1FC0  3000               	movlw	0
 17931  1FC1  0225               	subwf	DelayTime_1us@j+1,w
 17932  1FC2  3002               	movlw	2
 17933  1FC3  1903               	skipnz
 17934  1FC4  0224               	subwf	DelayTime_1us@j,w
 17935  1FC5  1803               	btfsc	3,0
 17936  1FC6  2FD2               	goto	l9587
 17937  1FC7                     l9585:	
 17938  1FC7  3001               	movlw	1
 17939  1FC8  07A4               	addwf	DelayTime_1us@j,f
 17940  1FC9  3000               	movlw	0
 17941  1FCA  3DA5               	addwfc	DelayTime_1us@j+1,f
 17942  1FCB  3000               	movlw	0
 17943  1FCC  0225               	subwf	DelayTime_1us@j+1,w
 17944  1FCD  3002               	movlw	2
 17945  1FCE  1903               	skipnz
 17946  1FCF  0224               	subwf	DelayTime_1us@j,w
 17947  1FD0  1C03               	skipc
 17948  1FD1  2FC7               	goto	l9585
 17949  1FD2                     l9587:	
 17950  1FD2  3001               	movlw	1
 17951  1FD3  07A2               	addwf	DelayTime_1us@i,f
 17952  1FD4  3000               	movlw	0
 17953  1FD5  3DA3               	addwfc	DelayTime_1us@i+1,f
 17954  1FD6  2FB6               	goto	l372
 17955  1FD7                     __end_of_DelayTime_1us:	
 17956                           
 17957                           	psect	text120
 17958  1AD5                     __ptext120:	
 17959 ;; *************** function _CC2500_ClearTXFIFO *****************
 17960 ;; Defined at:
 17961 ;;		line 187 in file "../src/CC2500_B1.c"
 17962 ;; Parameters:    Size  Location     Type
 17963 ;;		None
 17964 ;; Auto vars:     Size  Location     Type
 17965 ;;		None
 17966 ;; Return value:  Size  Location     Type
 17967 ;;		None               void
 17968 ;; Registers used:
 17969 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17970 ;; Tracked objects:
 17971 ;;		On entry : 0/0
 17972 ;;		On exit  : 0/0
 17973 ;;		Unchanged: 0/0
 17974 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17975 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17976 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17977 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17978 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17979 ;;Total ram usage:        0 bytes
 17980 ;; Hardware stack levels used:    1
 17981 ;; Hardware stack levels required when called:    7
 17982 ;; This function calls:
 17983 ;;		_CC2500_WriteCommand
 17984 ;; This function is called by:
 17985 ;;		_CC2500_PowerOnInitial
 17986 ;; This function uses a non-reentrant model
 17987 ;;
 17988                           
 17989                           
 17990                           ;psect for function _CC2500_ClearTXFIFO
 17991  1AD5                     _CC2500_ClearTXFIFO:	
 17992                           
 17993                           ;CC2500_B1.c: 188: CC2500_WriteCommand(0x3B);
 17994                           
 17995                           ;incstack = 0
 17996                           ; Regs used in _CC2500_ClearTXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17997  1AD5  303B               	movlw	59
 17998  1AD6  319D  25FA         	fcall	_CC2500_WriteCommand
 17999  1AD8  0008               	return
 18000  1AD9                     __end_of_CC2500_ClearTXFIFO:	
 18001                           
 18002                           	psect	text121
 18003  1AD1                     __ptext121:	
 18004 ;; *************** function _CC2500_ClearRXFIFO *****************
 18005 ;; Defined at:
 18006 ;;		line 194 in file "../src/CC2500_B1.c"
 18007 ;; Parameters:    Size  Location     Type
 18008 ;;		None
 18009 ;; Auto vars:     Size  Location     Type
 18010 ;;		None
 18011 ;; Return value:  Size  Location     Type
 18012 ;;		None               void
 18013 ;; Registers used:
 18014 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18015 ;; Tracked objects:
 18016 ;;		On entry : 0/0
 18017 ;;		On exit  : 0/0
 18018 ;;		Unchanged: 0/0
 18019 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18020 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18021 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18022 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18023 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18024 ;;Total ram usage:        0 bytes
 18025 ;; Hardware stack levels used:    1
 18026 ;; Hardware stack levels required when called:    7
 18027 ;; This function calls:
 18028 ;;		_CC2500_WriteCommand
 18029 ;; This function is called by:
 18030 ;;		_CC2500_PowerOnInitial
 18031 ;; This function uses a non-reentrant model
 18032 ;;
 18033                           
 18034                           
 18035                           ;psect for function _CC2500_ClearRXFIFO
 18036  1AD1                     _CC2500_ClearRXFIFO:	
 18037                           
 18038                           ;CC2500_B1.c: 195: CC2500_WriteCommand(0x3A);
 18039                           
 18040                           ;incstack = 0
 18041                           ; Regs used in _CC2500_ClearRXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 18042  1AD1  303A               	movlw	58
 18043  1AD2  319D  25FA         	fcall	_CC2500_WriteCommand
 18044  1AD4  0008               	return
 18045  1AD5                     __end_of_CC2500_ClearRXFIFO:	
 18046                           
 18047                           	psect	text122
 18048  1DFA                     __ptext122:	
 18049 ;; *************** function _CC2500_WriteCommand *****************
 18050 ;; Defined at:
 18051 ;;		line 285 in file "../src/CC2500_B1.c"
 18052 ;; Parameters:    Size  Location     Type
 18053 ;;  command         1    wreg     unsigned char 
 18054 ;; Auto vars:     Size  Location     Type
 18055 ;;  command         1    3[BANK0 ] unsigned char 
 18056 ;; Return value:  Size  Location     Type
 18057 ;;		None               void
 18058 ;; Registers used:
 18059 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18060 ;; Tracked objects:
 18061 ;;		On entry : 0/0
 18062 ;;		On exit  : 0/0
 18063 ;;		Unchanged: 0/0
 18064 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18065 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18066 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18067 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18068 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18069 ;;Total ram usage:        2 bytes
 18070 ;; Hardware stack levels used:    1
 18071 ;; Hardware stack levels required when called:    6
 18072 ;; This function calls:
 18073 ;;		_CC2500_WriteByte
 18074 ;;		_Timeout_Counter
 18075 ;;		_set_TimeoutCleared
 18076 ;; This function is called by:
 18077 ;;		_CC2500_TxData
 18078 ;;		_CC2500_ClearTXFIFO
 18079 ;;		_CC2500_ClearRXFIFO
 18080 ;;		_CC2500_FrequencyCabr
 18081 ;;		_CC2500_SIDLEMode
 18082 ;;		_setRF_Main
 18083 ;;		_RF_RxDisable
 18084 ;; This function uses a non-reentrant model
 18085 ;;
 18086                           
 18087                           
 18088                           ;psect for function _CC2500_WriteCommand
 18089  1DFA                     _CC2500_WriteCommand:	
 18090                           
 18091                           ;incstack = 0
 18092                           ; Regs used in _CC2500_WriteCommand: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 18093                           ;CC2500_WriteCommand@command stored from wreg
 18094  1DFA  0020               	movlb	0	; select bank0
 18095  1DFB  00A3               	movwf	CC2500_WriteCommand@command
 18096                           
 18097                           ;CC2500_B1.c: 286: RC4 = 0;
 18098  1DFC  120E               	bcf	14,4	;volatile
 18099                           
 18100                           ;CC2500_B1.c: 287: SPI0Buffer = command;
 18101  1DFD  0823               	movf	CC2500_WriteCommand@command,w
 18102  1DFE  00A2               	movwf	??_CC2500_WriteCommand
 18103  1DFF  0822               	movf	??_CC2500_WriteCommand,w
 18104  1E00  0021               	movlb	1	; select bank1
 18105  1E01  00D0               	movwf	_SPI0Buffer^(0+128)
 18106                           
 18107                           ;CC2500_B1.c: 289: while (RC2 == 1 && myMain.Timeout == 0) {
 18108  1E02  2E06               	goto	l9269
 18109  1E03                     l9267:	
 18110                           
 18111                           ;CC2500_B1.c: 290: Timeout_Counter();
 18112  1E03  319D  2571  319D   	fcall	_Timeout_Counter
 18113  1E06                     l9269:	
 18114  1E06  0020               	movlb	0	; select bank0
 18115  1E07  1D0E               	btfss	14,2	;volatile
 18116  1E08  2E0C               	goto	l9273
 18117  1E09  0021               	movlb	1	; select bank1
 18118  1E0A  1D2B               	btfss	(_myMain^(0+128)+11),2
 18119  1E0B  2E03               	goto	l9267
 18120  1E0C                     l9273:	
 18121                           
 18122                           ;CC2500_B1.c: 291: };
 18123                           ;CC2500_B1.c: 292: set_TimeoutCleared();
 18124  1E0C  319A  22E1  319D   	fcall	_set_TimeoutCleared
 18125                           
 18126                           ;CC2500_B1.c: 294: CC2500_WriteByte();
 18127  1E0F  319D  25C8         	fcall	_CC2500_WriteByte
 18128                           
 18129                           ;CC2500_B1.c: 295: RC4 = 1;
 18130  1E11  0020               	movlb	0	; select bank0
 18131  1E12  160E               	bsf	14,4	;volatile
 18132  1E13  0008               	return
 18133  1E14                     __end_of_CC2500_WriteCommand:	
 18134                           
 18135                           	psect	text123
 18136  1AE1                     __ptext123:	
 18137 ;; *************** function _set_TimeoutCleared *****************
 18138 ;; Defined at:
 18139 ;;		line 283 in file "../src/Main_B1.c"
 18140 ;; Parameters:    Size  Location     Type
 18141 ;;		None
 18142 ;; Auto vars:     Size  Location     Type
 18143 ;;		None
 18144 ;; Return value:  Size  Location     Type
 18145 ;;		None               void
 18146 ;; Registers used:
 18147 ;;		status,2
 18148 ;; Tracked objects:
 18149 ;;		On entry : 0/0
 18150 ;;		On exit  : 0/0
 18151 ;;		Unchanged: 0/0
 18152 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18153 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18154 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18155 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18156 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18157 ;;Total ram usage:        0 bytes
 18158 ;; Hardware stack levels used:    1
 18159 ;; Hardware stack levels required when called:    5
 18160 ;; This function calls:
 18161 ;;		Nothing
 18162 ;; This function is called by:
 18163 ;;		_CC2500_TxData
 18164 ;;		_CC2500_RxData
 18165 ;;		_CC2500_PowerRST
 18166 ;;		_CC2500_WriteREG
 18167 ;;		_CC2500_WriteCommand
 18168 ;;		_CC2500_ReadStatus
 18169 ;;		_getAD
 18170 ;;		_TouchPower
 18171 ;;		_CC2500_ReadREG
 18172 ;; This function uses a non-reentrant model
 18173 ;;
 18174                           
 18175                           
 18176                           ;psect for function _set_TimeoutCleared
 18177  1AE1                     _set_TimeoutCleared:	
 18178                           
 18179                           ;Main_B1.c: 284: myMain.Timeout = 0;
 18180                           
 18181                           ;incstack = 0
 18182                           ; Regs used in _set_TimeoutCleared: [status,2]
 18183  1AE1  0021               	movlb	1	; select bank1
 18184  1AE2  112B               	bcf	(_myMain^(0+128)+11),2
 18185                           
 18186                           ;Main_B1.c: 285: myMain.Timeout_Counter = 0;
 18187  1AE3  01AC               	clrf	(_myMain^(0+128)+12)
 18188  1AE4  01AD               	clrf	((_myMain+1)^(0+128)+12)
 18189  1AE5  0008               	return
 18190  1AE6                     __end_of_set_TimeoutCleared:	
 18191                           
 18192                           	psect	text124
 18193  1D71                     __ptext124:	
 18194 ;; *************** function _Timeout_Counter *****************
 18195 ;; Defined at:
 18196 ;;		line 274 in file "../src/Main_B1.c"
 18197 ;; Parameters:    Size  Location     Type
 18198 ;;		None
 18199 ;; Auto vars:     Size  Location     Type
 18200 ;;		None
 18201 ;; Return value:  Size  Location     Type
 18202 ;;		None               void
 18203 ;; Registers used:
 18204 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 18205 ;; Tracked objects:
 18206 ;;		On entry : 0/0
 18207 ;;		On exit  : 0/0
 18208 ;;		Unchanged: 0/0
 18209 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18210 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18211 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18212 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18213 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18214 ;;Total ram usage:        0 bytes
 18215 ;; Hardware stack levels used:    1
 18216 ;; Hardware stack levels required when called:    5
 18217 ;; This function calls:
 18218 ;;		Nothing
 18219 ;; This function is called by:
 18220 ;;		_CC2500_TxData
 18221 ;;		_CC2500_RxData
 18222 ;;		_CC2500_PowerRST
 18223 ;;		_CC2500_WriteREG
 18224 ;;		_CC2500_WriteCommand
 18225 ;;		_CC2500_ReadStatus
 18226 ;;		_getAD
 18227 ;;		_TouchPower
 18228 ;;		_CC2500_ReadREG
 18229 ;; This function uses a non-reentrant model
 18230 ;;
 18231                           
 18232                           
 18233                           ;psect for function _Timeout_Counter
 18234  1D71                     _Timeout_Counter:	
 18235                           
 18236                           ;Main_B1.c: 275: myMain.Timeout_Counter++;
 18237                           
 18238                           ;incstack = 0
 18239                           ; Regs used in _Timeout_Counter: [wreg+fsr1l+fsr1h+status,2+status,0]
 18240  1D71  3001               	movlw	1
 18241  1D72  0021               	movlb	1	; select bank1
 18242  1D73  07AC               	addwf	(_myMain^(0+128)+12),f
 18243  1D74  3000               	movlw	0
 18244  1D75  3DAD               	addwfc	((_myMain+1)^(0+128)+12),f
 18245                           
 18246                           ;Main_B1.c: 276: if (myMain.Timeout_Counter == 7500) {
 18247  1D76  300C               	movlw	12
 18248  1D77  3EA0               	addlw	_myMain& (0+255)
 18249  1D78  0086               	movwf	6
 18250  1D79  0187               	clrf	7
 18251  1D7A  3F40               	moviw [0]fsr1
 18252  1D7B  3A4C               	xorlw	76
 18253  1D7C  1D03               	skipz
 18254  1D7D  2D80               	goto	u10015
 18255  1D7E  3F41               	moviw [1]fsr1
 18256  1D7F  3A1D               	xorlw	29
 18257  1D80                     u10015:	
 18258  1D80  1D03               	skipz
 18259  1D81  0008               	return
 18260                           
 18261                           ;Main_B1.c: 277: myMain.Timeout_Counter = 0;
 18262  1D82  01AC               	clrf	(_myMain^(0+128)+12)
 18263  1D83  01AD               	clrf	((_myMain+1)^(0+128)+12)
 18264                           
 18265                           ;Main_B1.c: 278: myMain.Timeout = 1;
 18266  1D84  152B               	bsf	(_myMain^(0+128)+11),2
 18267  1D85  0008               	return
 18268  1D86                     __end_of_Timeout_Counter:	
 18269                           
 18270                           	psect	text125
 18271  1DC8                     __ptext125:	
 18272 ;; *************** function _CC2500_WriteByte *****************
 18273 ;; Defined at:
 18274 ;;		line 219 in file "../src/CC2500_B1.c"
 18275 ;; Parameters:    Size  Location     Type
 18276 ;;		None
 18277 ;; Auto vars:     Size  Location     Type
 18278 ;;  loop_a          1    1[BANK0 ] unsigned char 
 18279 ;; Return value:  Size  Location     Type
 18280 ;;		None               void
 18281 ;; Registers used:
 18282 ;;		wreg, status,2, status,0
 18283 ;; Tracked objects:
 18284 ;;		On entry : 0/0
 18285 ;;		On exit  : 0/0
 18286 ;;		Unchanged: 0/0
 18287 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18288 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18289 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18290 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18291 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18292 ;;Total ram usage:        2 bytes
 18293 ;; Hardware stack levels used:    1
 18294 ;; Hardware stack levels required when called:    5
 18295 ;; This function calls:
 18296 ;;		Nothing
 18297 ;; This function is called by:
 18298 ;;		_CC2500_TxData
 18299 ;;		_CC2500_RxData
 18300 ;;		_CC2500_PowerRST
 18301 ;;		_CC2500_WriteREG
 18302 ;;		_CC2500_WriteCommand
 18303 ;;		_CC2500_ReadStatus
 18304 ;;		_CC2500_ReadREG
 18305 ;; This function uses a non-reentrant model
 18306 ;;
 18307                           
 18308                           
 18309                           ;psect for function _CC2500_WriteByte
 18310  1DC8                     _CC2500_WriteByte:	
 18311                           
 18312                           ;CC2500_B1.c: 220: unsigned char loop_a;
 18313                           ;CC2500_B1.c: 221: for (loop_a = 0; loop_a < 8; loop_a++) {
 18314                           
 18315                           ;incstack = 0
 18316                           ; Regs used in _CC2500_WriteByte: [wreg+status,2+status,0]
 18317  1DC8  0020               	movlb	0	; select bank0
 18318  1DC9  01A1               	clrf	CC2500_WriteByte@loop_a
 18319  1DCA                     L12:	
 18320  1DCA  3008               	movlw	8
 18321  1DCB  0221               	subwf	CC2500_WriteByte@loop_a,w
 18322  1DCC  1803               	btfsc	3,0
 18323  1DCD  0008               	return
 18324                           
 18325                           ;CC2500_B1.c: 222: if (SPI0Buffer & 0x80)
 18326  1DCE  0021               	movlb	1	; select bank1
 18327  1DCF  1FD0               	btfss	_SPI0Buffer^(0+128),7
 18328  1DD0  2DD4               	goto	l328
 18329                           
 18330                           ;CC2500_B1.c: 223: RC0 = 1;
 18331  1DD1  0020               	movlb	0	; select bank0
 18332  1DD2  140E               	bsf	14,0	;volatile
 18333  1DD3  2DD6               	goto	l329
 18334  1DD4                     l328:	
 18335                           
 18336                           ;CC2500_B1.c: 224: else
 18337                           ;CC2500_B1.c: 225: RC0 = 0;
 18338  1DD4  0020               	movlb	0	; select bank0
 18339  1DD5  100E               	bcf	14,0	;volatile
 18340  1DD6                     l329:	
 18341                           
 18342                           ;CC2500_B1.c: 226: RC1 = 1;
 18343  1DD6  148E               	bsf	14,1	;volatile
 18344                           
 18345                           ;CC2500_B1.c: 227: SPI0Buffer <<= 1;
 18346  1DD7  1003               	clrc
 18347  1DD8  0021               	movlb	1	; select bank1
 18348  1DD9  0DD0               	rlf	_SPI0Buffer^(0+128),f
 18349                           
 18350                           ;CC2500_B1.c: 228: RC1 = 0;
 18351  1DDA  0020               	movlb	0	; select bank0
 18352  1DDB  108E               	bcf	14,1	;volatile
 18353  1DDC  3001               	movlw	1
 18354  1DDD  00A0               	movwf	??_CC2500_WriteByte
 18355  1DDE  0820               	movf	??_CC2500_WriteByte,w
 18356  1DDF  07A1               	addwf	CC2500_WriteByte@loop_a,f
 18357  1DE0  2DCA               	goto	L12
 18358  1DE1                     __end_of_CC2500_WriteByte:	
 18359                           
 18360                           	psect	text126
 18361  1424                     __ptext126:	
 18362 ;; *************** function _Buzzer_Main *****************
 18363 ;; Defined at:
 18364 ;;		line 46 in file "../src/Buzzer_B1.c"
 18365 ;; Parameters:    Size  Location     Type
 18366 ;;		None
 18367 ;; Auto vars:     Size  Location     Type
 18368 ;;		None
 18369 ;; Return value:  Size  Location     Type
 18370 ;;		None               void
 18371 ;; Registers used:
 18372 ;;		wreg, status,2, status,0
 18373 ;; Tracked objects:
 18374 ;;		On entry : 0/0
 18375 ;;		On exit  : 0/0
 18376 ;;		Unchanged: 0/0
 18377 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18378 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18379 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18380 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18381 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18382 ;;Total ram usage:        1 bytes
 18383 ;; Hardware stack levels used:    1
 18384 ;; Hardware stack levels required when called:    5
 18385 ;; This function calls:
 18386 ;;		Nothing
 18387 ;; This function is called by:
 18388 ;;		_main
 18389 ;; This function uses a non-reentrant model
 18390 ;;
 18391                           
 18392                           
 18393                           ;psect for function _Buzzer_Main
 18394  1424                     _Buzzer_Main:	
 18395                           
 18396                           ;Buzzer_B1.c: 47: if (Buz1.GO == 1) {
 18397                           
 18398                           ;incstack = 0
 18399                           ; Regs used in _Buzzer_Main: [wreg+status,2+status,0]
 18400  1424  0021               	movlb	1	; select bank1
 18401  1425  1CAE               	btfss	_Buz1^(0+128),1
 18402  1426  0008               	return
 18403                           
 18404                           ;Buzzer_B1.c: 48: Buz1.Counter++;
 18405  1427  3001               	movlw	1
 18406  1428  07AF               	addwf	(_Buz1^(0+128)+1),f
 18407  1429  3000               	movlw	0
 18408  142A  3DB0               	addwfc	((_Buz1+1)^(0+128)+1),f
 18409                           
 18410                           ;Buzzer_B1.c: 49: if (Buz1.Counter >= Buz1.TimeValue) {
 18411  142B  0835               	movf	((_Buz1+1)^(0+128)+6),w
 18412  142C  0230               	subwf	((_Buz1+1)^(0+128)+1),w
 18413  142D  1D03               	skipz
 18414  142E  2C31               	goto	u12155
 18415  142F  0834               	movf	(_Buz1^(0+128)+6),w
 18416  1430  022F               	subwf	(_Buz1^(0+128)+1),w
 18417  1431                     u12155:	
 18418  1431  1C03               	skipc
 18419  1432  0008               	return
 18420                           
 18421                           ;Buzzer_B1.c: 50: Buz1.Counter = 0;
 18422  1433  01AF               	clrf	(_Buz1^(0+128)+1)
 18423  1434  01B0               	clrf	((_Buz1+1)^(0+128)+1)
 18424                           
 18425                           ;Buzzer_B1.c: 51: Buz1.Switch = (RB3 == 1) ? 1 : 0;
 18426  1435  12AE               	bcf	_Buz1^(0+128),5
 18427  1436  0020               	movlb	0	; select bank0
 18428  1437  1D8D               	btfss	13,3	;volatile
 18429  1438  2C3B               	goto	l10471
 18430  1439  0021               	movlb	1	; select bank1
 18431  143A  16AE               	bsf	_Buz1^(0+128),5
 18432  143B                     l10471:	
 18433                           
 18434                           ;Buzzer_B1.c: 52: if (Buz1.Switch == 0) {
 18435  143B  0021               	movlb	1	; select bank1
 18436  143C  1AAE               	btfsc	_Buz1^(0+128),5
 18437  143D  2C67               	goto	l106
 18438                           
 18439                           ;Buzzer_B1.c: 53: if (Buz1.Count == 0) {
 18440  143E  08B1               	movf	(_Buz1^(0+128)+3),f
 18441  143F  1D03               	skipz
 18442  1440  2C63               	goto	l107
 18443                           
 18444                           ;Buzzer_B1.c: 54: if (Buz1.BufferStatus1 == 1) {
 18445  1441  1DAE               	btfss	_Buz1^(0+128),3
 18446  1442  2C51               	goto	l108
 18447                           
 18448                           ;Buzzer_B1.c: 55: Buz1.BufferStatus1 = 0;
 18449  1443  11AE               	bcf	_Buz1^(0+128),3
 18450                           
 18451                           ;Buzzer_B1.c: 56: Buz1.Count = Buz1.CountBuffer1;
 18452  1444  0832               	movf	(_Buz1^(0+128)+4),w
 18453  1445  0020               	movlb	0	; select bank0
 18454  1446  00A0               	movwf	??_Buzzer_Main
 18455  1447  0820               	movf	??_Buzzer_Main,w
 18456  1448  0021               	movlb	1	; select bank1
 18457  1449  00B1               	movwf	(_Buz1^(0+128)+3)
 18458                           
 18459                           ;Buzzer_B1.c: 57: Buz1.TimeValue = Buz1.TimeValueBuffer1;
 18460  144A  0837               	movf	((_Buz1+1)^(0+128)+8),w
 18461  144B  01B5               	clrf	((_Buz1+1)^(0+128)+6)
 18462  144C  07B5               	addwf	((_Buz1+1)^(0+128)+6),f
 18463  144D  0836               	movf	(_Buz1^(0+128)+8),w
 18464  144E  01B4               	clrf	(_Buz1^(0+128)+6)
 18465  144F  07B4               	addwf	(_Buz1^(0+128)+6),f
 18466                           
 18467                           ;Buzzer_B1.c: 58: } else if (Buz1.BufferStatus2 == 1) {
 18468  1450  0008               	return
 18469  1451                     l108:	
 18470  1451  1E2E               	btfss	_Buz1^(0+128),4
 18471  1452  2C61               	goto	l110
 18472                           
 18473                           ;Buzzer_B1.c: 59: Buz1.BufferStatus2 = 0;
 18474  1453  122E               	bcf	_Buz1^(0+128),4
 18475                           
 18476                           ;Buzzer_B1.c: 60: Buz1.Count = Buz1.CountBuffer2;
 18477  1454  0833               	movf	(_Buz1^(0+128)+5),w
 18478  1455  0020               	movlb	0	; select bank0
 18479  1456  00A0               	movwf	??_Buzzer_Main
 18480  1457  0820               	movf	??_Buzzer_Main,w
 18481  1458  0021               	movlb	1	; select bank1
 18482  1459  00B1               	movwf	(_Buz1^(0+128)+3)
 18483                           
 18484                           ;Buzzer_B1.c: 61: Buz1.TimeValue = Buz1.TimeValueBuffer2;
 18485  145A  0839               	movf	((_Buz1+1)^(0+128)+10),w
 18486  145B  01B5               	clrf	((_Buz1+1)^(0+128)+6)
 18487  145C  07B5               	addwf	((_Buz1+1)^(0+128)+6),f
 18488  145D  0838               	movf	(_Buz1^(0+128)+10),w
 18489  145E  01B4               	clrf	(_Buz1^(0+128)+6)
 18490  145F  07B4               	addwf	(_Buz1^(0+128)+6),f
 18491                           
 18492                           ;Buzzer_B1.c: 62: } else {
 18493  1460  0008               	return
 18494  1461                     l110:	
 18495                           
 18496                           ;Buzzer_B1.c: 63: Buz1.GO = 0;
 18497  1461  10AE               	bcf	_Buz1^(0+128),1
 18498                           
 18499                           ;Buzzer_B1.c: 64: }
 18500                           ;Buzzer_B1.c: 65: } else {
 18501  1462  0008               	return
 18502  1463                     l107:	
 18503                           
 18504                           ;Buzzer_B1.c: 66: Buz1.Switch = 1;
 18505  1463  16AE               	bsf	_Buz1^(0+128),5
 18506                           
 18507                           ;Buzzer_B1.c: 68: RB3 = 1;
 18508  1464  0020               	movlb	0	; select bank0
 18509  1465  158D               	bsf	13,3	;volatile
 18510                           
 18511                           ;Buzzer_B1.c: 69: }
 18512                           ;Buzzer_B1.c: 70: } else {
 18513  1466  0008               	return
 18514  1467                     l106:	
 18515                           
 18516                           ;Buzzer_B1.c: 71: Buz1.Switch = 0;
 18517  1467  12AE               	bcf	_Buz1^(0+128),5
 18518                           
 18519                           ;Buzzer_B1.c: 73: RB3 = 0;
 18520  1468  0020               	movlb	0	; select bank0
 18521  1469  118D               	bcf	13,3	;volatile
 18522                           
 18523                           ;Buzzer_B1.c: 75: Buz1.Count--;
 18524  146A  3001               	movlw	1
 18525  146B  0021               	movlb	1	; select bank1
 18526  146C  02B1               	subwf	(_Buz1^(0+128)+3),f
 18527  146D  0008               	return
 18528  146E                     __end_of_Buzzer_Main:	
 18529                           
 18530                           	psect	text127
 18531  1ABF                     __ptext127:	
 18532 ;; *************** function _Buzzer_Initialization *****************
 18533 ;; Defined at:
 18534 ;;		line 11 in file "../src/Buzzer_B1.c"
 18535 ;; Parameters:    Size  Location     Type
 18536 ;;		None
 18537 ;; Auto vars:     Size  Location     Type
 18538 ;;		None
 18539 ;; Return value:  Size  Location     Type
 18540 ;;		None               void
 18541 ;; Registers used:
 18542 ;;		None
 18543 ;; Tracked objects:
 18544 ;;		On entry : 0/0
 18545 ;;		On exit  : 0/0
 18546 ;;		Unchanged: 0/0
 18547 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18548 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18549 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18550 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18551 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18552 ;;Total ram usage:        0 bytes
 18553 ;; Hardware stack levels used:    1
 18554 ;; Hardware stack levels required when called:    5
 18555 ;; This function calls:
 18556 ;;		Nothing
 18557 ;; This function is called by:
 18558 ;;		_main
 18559 ;; This function uses a non-reentrant model
 18560 ;;
 18561                           
 18562                           
 18563                           ;psect for function _Buzzer_Initialization
 18564  1ABF                     _Buzzer_Initialization:	
 18565                           
 18566                           ;Buzzer_B1.c: 13: Buz1.Enable = 1;
 18567                           
 18568                           ;incstack = 0
 18569                           ; Regs used in _Buzzer_Initialization: []
 18570  1ABF  0021               	movlb	1	; select bank1
 18571  1AC0  142E               	bsf	_Buz1^(0+128),0
 18572  1AC1  0008               	return
 18573  1AC2                     __end_of_Buzzer_Initialization:	
 18574                           
 18575                           	psect	intentry
 18576  0004                     __pintentry:	
 18577 ;; *************** function _ISR *****************
 18578 ;; Defined at:
 18579 ;;		line 107 in file "../src/MCU_B1.c"
 18580 ;; Parameters:    Size  Location     Type
 18581 ;;		None
 18582 ;; Auto vars:     Size  Location     Type
 18583 ;;		None
 18584 ;; Return value:  Size  Location     Type
 18585 ;;		None               void
 18586 ;; Registers used:
 18587 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18588 ;; Tracked objects:
 18589 ;;		On entry : 0/0
 18590 ;;		On exit  : 0/0
 18591 ;;		Unchanged: 0/0
 18592 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18593 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18594 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18595 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18596 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18597 ;;Total ram usage:        1 bytes
 18598 ;; Hardware stack levels used:    1
 18599 ;; Hardware stack levels required when called:    4
 18600 ;; This function calls:
 18601 ;;		_IOC_ISR
 18602 ;;		_TMR1_ISR
 18603 ;; This function is called by:
 18604 ;;		Interrupt level 1
 18605 ;; This function uses a non-reentrant model
 18606 ;;
 18607                           
 18608  0004                     _ISR:	
 18609                           
 18610                           ;incstack = 0
 18611                           ; Regs used in _ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 18612  0004  147E               	bsf	126,0	;set compiler interrupt flag
 18613  0005  3180               	pagesel	$
 18614  0006  0020               	movlb	0	; select bank0
 18615  0007  087F               	movf	127,w
 18616  0008  00F4               	movwf	??_ISR
 18617                           
 18618                           ;MCU_B1.c: 109: IOC_ISR();
 18619  0009  319B  23DA  3180   	fcall	_IOC_ISR
 18620                           
 18621                           ;MCU_B1.c: 111: ;;
 18622                           ;MCU_B1.c: 113: TMR1_ISR();
 18623  000C  319F  27D7         	fcall	_TMR1_ISR
 18624  000E  0874               	movf	??_ISR,w
 18625  000F  0020               	movlb	0	; select bank0
 18626  0010  00FF               	movwf	127
 18627  0011  107E               	bcf	126,0	;clear compiler interrupt flag
 18628  0012  0009               	retfie
 18629  0013                     __end_of_ISR:	
 18630                           
 18631                           	psect	text129
 18632  1FD7                     __ptext129:	
 18633 ;; *************** function _TMR1_ISR *****************
 18634 ;; Defined at:
 18635 ;;		line 209 in file "../src/MCU_B1.c"
 18636 ;; Parameters:    Size  Location     Type
 18637 ;;		None
 18638 ;; Auto vars:     Size  Location     Type
 18639 ;;		None
 18640 ;; Return value:  Size  Location     Type
 18641 ;;		None               void
 18642 ;; Registers used:
 18643 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18644 ;; Tracked objects:
 18645 ;;		On entry : 0/0
 18646 ;;		On exit  : 0/0
 18647 ;;		Unchanged: 0/0
 18648 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18649 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18650 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18651 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18652 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18653 ;;Total ram usage:        0 bytes
 18654 ;; Hardware stack levels used:    1
 18655 ;; Hardware stack levels required when called:    2
 18656 ;; This function calls:
 18657 ;;		_setDimmerLights_IntrControl
 18658 ;; This function is called by:
 18659 ;;		_ISR
 18660 ;; This function uses a non-reentrant model
 18661 ;;
 18662                           
 18663                           
 18664                           ;psect for function _TMR1_ISR
 18665  1FD7                     _TMR1_ISR:	
 18666                           
 18667                           ;MCU_B1.c: 211: if (TMR1IE == 1 && TMR1IF == 1) {
 18668                           
 18669                           ;incstack = 0
 18670                           ; Regs used in _TMR1_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 18671  1FD7  0021               	movlb	1	; select bank1
 18672  1FD8  1C11               	btfss	17,0	;volatile
 18673  1FD9  0008               	return
 18674  1FDA  0020               	movlb	0	; select bank0
 18675  1FDB  1C11               	btfss	17,0	;volatile
 18676  1FDC  0008               	return
 18677                           
 18678                           ;MCU_B1.c: 212: TMR1H = (int)((65536-1480)/256);
 18679  1FDD  30FA               	movlw	250
 18680  1FDE  0097               	movwf	23	;volatile
 18681                           
 18682                           ;MCU_B1.c: 213: TMR1L = (int)((65536-1480)%256);
 18683  1FDF  3038               	movlw	56
 18684  1FE0  0096               	movwf	22	;volatile
 18685                           
 18686                           ;MCU_B1.c: 214: TMR1IF = 0;
 18687  1FE1  1011               	bcf	17,0	;volatile
 18688                           
 18689                           ;MCU_B1.c: 219: setDimmerLights_IntrControl(1);
 18690  1FE2  3001               	movlw	1
 18691  1FE3  3183  2368  319F   	fcall	_setDimmerLights_IntrControl
 18692                           
 18693                           ;MCU_B1.c: 224: setDimmerLights_IntrControl(2);
 18694  1FE6  3002               	movlw	2
 18695  1FE7  3183  2368  319F   	fcall	_setDimmerLights_IntrControl
 18696                           
 18697                           ;MCU_B1.c: 235: Timer1.Count++;
 18698  1FEA  3001               	movlw	1
 18699  1FEB  0022               	movlb	2	; select bank2
 18700  1FEC  07A1               	addwf	(_Timer1^(0+256)+1),f
 18701  1FED  3000               	movlw	0
 18702  1FEE  3DA2               	addwfc	((_Timer1+1)^(0+256)+1),f
 18703                           
 18704                           ;MCU_B1.c: 236: if (Timer1.Count == 100) {
 18705  1FEF  3001               	movlw	1
 18706  1FF0  3E20               	addlw	_Timer1& (0+255)
 18707  1FF1  0086               	movwf	6
 18708  1FF2  3001               	movlw	1	; select bank2/3
 18709  1FF3  0087               	movwf	7
 18710  1FF4  3F40               	moviw [0]fsr1
 18711  1FF5  3A64               	xorlw	100
 18712  1FF6  1D03               	skipz
 18713  1FF7  2FFA               	goto	u811_25
 18714  1FF8  3F41               	moviw [1]fsr1
 18715  1FF9  3A00               	xorlw	0
 18716  1FFA                     u811_25:	
 18717  1FFA  1D03               	skipz
 18718  1FFB  0008               	return
 18719                           
 18720                           ;MCU_B1.c: 237: Timer1.Count = 0;
 18721  1FFC  01A1               	clrf	(_Timer1^(0+256)+1)
 18722  1FFD  01A2               	clrf	((_Timer1+1)^(0+256)+1)
 18723                           
 18724                           ;MCU_B1.c: 238: Timer1.Timeout = 1;
 18725  1FFE  1420               	bsf	_Timer1^(0+256),0
 18726  1FFF  0008               	return
 18727  2000                     __end_of_TMR1_ISR:	
 18728                           
 18729                           	psect	text130
 18730  0368                     __ptext130:	
 18731 ;; *************** function _setDimmerLights_IntrControl *****************
 18732 ;; Defined at:
 18733 ;;		line 96 in file "../src/Dimmer_B1.c"
 18734 ;; Parameters:    Size  Location     Type
 18735 ;;  lights          1    wreg     unsigned char 
 18736 ;; Auto vars:     Size  Location     Type
 18737 ;;  lights          1    3[COMMON] unsigned char 
 18738 ;; Return value:  Size  Location     Type
 18739 ;;		None               void
 18740 ;; Registers used:
 18741 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18742 ;; Tracked objects:
 18743 ;;		On entry : 0/0
 18744 ;;		On exit  : 0/0
 18745 ;;		Unchanged: 0/0
 18746 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18747 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18748 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18749 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18750 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18751 ;;Total ram usage:        2 bytes
 18752 ;; Hardware stack levels used:    1
 18753 ;; Hardware stack levels required when called:    1
 18754 ;; This function calls:
 18755 ;;		_DimmerIntrPointSelect
 18756 ;; This function is called by:
 18757 ;;		_TMR1_ISR
 18758 ;; This function uses a non-reentrant model
 18759 ;;
 18760                           
 18761                           
 18762                           ;psect for function _setDimmerLights_IntrControl
 18763  0368                     _setDimmerLights_IntrControl:	
 18764                           
 18765                           ;incstack = 0
 18766                           ; Regs used in _setDimmerLights_IntrControl: [wreg-fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 18767                           ;setDimmerLights_IntrControl@lights stored from wreg
 18768  0368  00F3               	movwf	setDimmerLights_IntrControl@lights
 18769                           
 18770                           ;Dimmer_B1.c: 234: DimmerIntrPointSelect(lights);
 18771  0369  0873               	movf	setDimmerLights_IntrControl@lights,w
 18772  036A  319C  242C  3183   	fcall	_DimmerIntrPointSelect
 18773                           
 18774                           ;Dimmer_B1.c: 236: if (DimmerLightsIntr->IntrStart == 1) {
 18775  036D  0876               	movf	_DimmerLightsIntr,w
 18776  036E  3E02               	addlw	2
 18777  036F  0086               	movwf	6
 18778  0370  3001               	movlw	1	; select bank2/3
 18779  0371  0087               	movwf	7
 18780  0372  1D01               	btfss	1,2
 18781  0373  2B92               	goto	i1l7335
 18782                           
 18783                           ;Dimmer_B1.c: 237: DimmerLightsIntr->Count++;
 18784  0374  3001               	movlw	1
 18785  0375  00F2               	movwf	??_setDimmerLights_IntrControl
 18786  0376  0876               	movf	_DimmerLightsIntr,w
 18787  0377  3E03               	addlw	3
 18788  0378  0086               	movwf	6
 18789  0379  3001               	movlw	1	; select bank2/3
 18790  037A  0087               	movwf	7
 18791  037B  0872               	movf	??_setDimmerLights_IntrControl,w
 18792  037C  0781               	addwf	1,f
 18793                           
 18794                           ;Dimmer_B1.c: 238: if (DimmerLightsIntr->Count >= ((char)(75*0.8)) + 1) {
 18795  037D  0876               	movf	_DimmerLightsIntr,w
 18796  037E  3E03               	addlw	3
 18797  037F  0086               	movwf	6
 18798  0380  3001               	movlw	1	; select bank2/3
 18799  0381  0087               	movwf	7
 18800  0382  303D               	movlw	61
 18801  0383  0201               	subwf	1,w
 18802  0384  1C03               	skipc
 18803  0385  2B92               	goto	i1l7335
 18804                           
 18805                           ;Dimmer_B1.c: 239: DimmerLightsIntr->Count = 0;
 18806  0386  0876               	movf	_DimmerLightsIntr,w
 18807  0387  3E03               	addlw	3
 18808  0388  0086               	movwf	6
 18809  0389  3001               	movlw	1	; select bank2/3
 18810  038A  0087               	movwf	7
 18811  038B  0181               	clrf	1
 18812                           
 18813                           ;Dimmer_B1.c: 240: DimmerLightsIntr->IntrStart = 0;
 18814  038C  0876               	movf	_DimmerLightsIntr,w
 18815  038D  3E02               	addlw	2
 18816  038E  0086               	movwf	6
 18817  038F  3001               	movlw	1	; select bank2/3
 18818  0390  0087               	movwf	7
 18819  0391  1101               	bcf	1,2
 18820  0392                     i1l7335:	
 18821                           
 18822                           ;Dimmer_B1.c: 241: }
 18823                           ;Dimmer_B1.c: 242: }
 18824                           ;Dimmer_B1.c: 244: if (DimmerLightsIntr->GO == 1) {
 18825  0392  0A76               	incf	_DimmerLightsIntr,w
 18826  0393  0086               	movwf	6
 18827  0394  3001               	movlw	1	; select bank2/3
 18828  0395  0087               	movwf	7
 18829  0396  1C01               	btfss	1,0
 18830  0397  2BC9               	goto	i1l7351
 18831                           
 18832                           ;Dimmer_B1.c: 245: if (DimmerLightsIntr->Count >= DimmerLightsIntr->DimmingValue) {
 18833  0398  0876               	movf	_DimmerLightsIntr,w
 18834  0399  3E03               	addlw	3
 18835  039A  0086               	movwf	6
 18836  039B  3001               	movlw	1	; select bank2/3
 18837  039C  0087               	movwf	7
 18838  039D  0876               	movf	_DimmerLightsIntr,w
 18839  039E  3E04               	addlw	4
 18840  039F  0084               	movwf	4
 18841  03A0  3001               	movlw	1	; select bank2/3
 18842  03A1  0085               	movwf	5
 18843  03A2  0800               	movf	0,w
 18844  03A3  0201               	subwf	1,w
 18845  03A4  1C03               	skipc
 18846  03A5  0008               	return
 18847                           
 18848                           ;Dimmer_B1.c: 246: DimmerLightsIntr->GO = 0;
 18849  03A6  0A76               	incf	_DimmerLightsIntr,w
 18850  03A7  0086               	movwf	6
 18851  03A8  3001               	movlw	1	; select bank2/3
 18852  03A9  0087               	movwf	7
 18853  03AA  1001               	bcf	1,0
 18854                           
 18855                           ;Dimmer_B1.c: 247: DimmerLightsIntr->Flag = 1;
 18856  03AB  0A76               	incf	_DimmerLightsIntr,w
 18857  03AC  0086               	movwf	6
 18858  03AD  3001               	movlw	1	; select bank2/3
 18859  03AE  0087               	movwf	7
 18860  03AF  1581               	bsf	1,3
 18861                           
 18862                           ;Dimmer_B1.c: 249: if (DimmerLightsIntr->MOSFET == 1) {
 18863  03B0  0876               	movf	_DimmerLightsIntr,w
 18864  03B1  0086               	movwf	6
 18865  03B2  3001               	movlw	1	; select bank2/3
 18866  03B3  0087               	movwf	7
 18867  03B4  1C01               	btfss	1,0
 18868  03B5  0008               	return
 18869                           
 18870                           ;Dimmer_B1.c: 250: DimmerLightsIntr->MOSFET = 0;
 18871  03B6  0876               	movf	_DimmerLightsIntr,w
 18872  03B7  0086               	movwf	6
 18873  03B8  3001               	movlw	1	; select bank2/3
 18874  03B9  0087               	movwf	7
 18875  03BA  1001               	bcf	1,0
 18876                           
 18877                           ;Dimmer_B1.c: 252: if (lights == 1) {
 18878  03BB  0873               	movf	setDimmerLights_IntrControl@lights,w
 18879  03BC  3A01               	xorlw	1
 18880  03BD  1D03               	skipz
 18881  03BE  2BC2               	goto	i1l7347
 18882                           
 18883                           ;Dimmer_B1.c: 253: RA7 = 0;
 18884  03BF  0020               	movlb	0	; select bank0
 18885  03C0  138C               	bcf	12,7	;volatile
 18886                           
 18887                           ;Dimmer_B1.c: 255: }
 18888  03C1  0008               	return
 18889  03C2                     i1l7347:	
 18890                           
 18891                           ;Dimmer_B1.c: 258: else if (lights == 2) {
 18892  03C2  0873               	movf	setDimmerLights_IntrControl@lights,w
 18893  03C3  3A02               	xorlw	2
 18894  03C4  1D03               	skipz
 18895  03C5  0008               	return
 18896                           
 18897                           ;Dimmer_B1.c: 259: RB4 = 0;
 18898  03C6  0020               	movlb	0	; select bank0
 18899  03C7  120D               	bcf	13,4	;volatile
 18900                           
 18901                           ;Dimmer_B1.c: 260: }
 18902                           ;Dimmer_B1.c: 262: }
 18903                           ;Dimmer_B1.c: 263: }
 18904                           ;Dimmer_B1.c: 264: } else {
 18905  03C8  0008               	return
 18906  03C9                     i1l7351:	
 18907                           
 18908                           ;Dimmer_B1.c: 265: if (DimmerLightsIntr->Flag == 1) {
 18909  03C9  0A76               	incf	_DimmerLightsIntr,w
 18910  03CA  0086               	movwf	6
 18911  03CB  3001               	movlw	1	; select bank2/3
 18912  03CC  0087               	movwf	7
 18913  03CD  1D81               	btfss	1,3
 18914  03CE  0008               	return
 18915                           
 18916                           ;Dimmer_B1.c: 266: DimmerLightsIntr->Flag = 0;
 18917  03CF  0A76               	incf	_DimmerLightsIntr,w
 18918  03D0  0086               	movwf	6
 18919  03D1  3001               	movlw	1	; select bank2/3
 18920  03D2  0087               	movwf	7
 18921  03D3  1181               	bcf	1,3
 18922                           
 18923                           ;Dimmer_B1.c: 267: DimmerLightsIntr->DimmingTime++;
 18924  03D4  3001               	movlw	1
 18925  03D5  00F2               	movwf	??_setDimmerLights_IntrControl
 18926  03D6  0876               	movf	_DimmerLightsIntr,w
 18927  03D7  3E05               	addlw	5
 18928  03D8  0086               	movwf	6
 18929  03D9  3001               	movlw	1	; select bank2/3
 18930  03DA  0087               	movwf	7
 18931  03DB  0872               	movf	??_setDimmerLights_IntrControl,w
 18932  03DC  0781               	addwf	1,f
 18933                           
 18934                           ;Dimmer_B1.c: 268: if (DimmerLightsIntr->DimmingTime >= DimmerLightsIntr->DimmingTimeVal
      +                          ue) {
 18935  03DD  0876               	movf	_DimmerLightsIntr,w
 18936  03DE  3E05               	addlw	5
 18937  03DF  0086               	movwf	6
 18938  03E0  3001               	movlw	1	; select bank2/3
 18939  03E1  0087               	movwf	7
 18940  03E2  0876               	movf	_DimmerLightsIntr,w
 18941  03E3  3E08               	addlw	8
 18942  03E4  0084               	movwf	4
 18943  03E5  3001               	movlw	1	; select bank2/3
 18944  03E6  0085               	movwf	5
 18945  03E7  0800               	movf	0,w
 18946  03E8  0201               	subwf	1,w
 18947  03E9  1C03               	skipc
 18948  03EA  2C2D               	goto	i1l7377
 18949                           
 18950                           ;Dimmer_B1.c: 269: DimmerLightsIntr->DimmingTime = 0;
 18951  03EB  0876               	movf	_DimmerLightsIntr,w
 18952  03EC  3E05               	addlw	5
 18953  03ED  0086               	movwf	6
 18954  03EE  3001               	movlw	1	; select bank2/3
 18955  03EF  0087               	movwf	7
 18956  03F0  0181               	clrf	1
 18957                           
 18958                           ;Dimmer_B1.c: 270: if (DimmerLightsIntr->AdjSw == 1) {
 18959  03F1  0A76               	incf	_DimmerLightsIntr,w
 18960  03F2  0086               	movwf	6
 18961  03F3  3001               	movlw	1	; select bank2/3
 18962  03F4  0087               	movwf	7
 18963  03F5  1F01               	btfss	1,6
 18964  03F6  0008               	return
 18965                           
 18966                           ;Dimmer_B1.c: 271: if (DimmerLightsIntr->AdjStatus == 0) {
 18967  03F7  0A76               	incf	_DimmerLightsIntr,w
 18968  03F8  0086               	movwf	6
 18969  03F9  3001               	movlw	1	; select bank2/3
 18970  03FA  0087               	movwf	7
 18971  03FB  1B81               	btfsc	1,7
 18972  03FC  2C16               	goto	i1l7371
 18973                           
 18974                           ;Dimmer_B1.c: 272: if (DimmerLightsIntr->DimmingValue < ((char)(75*0.8))) {
 18975  03FD  0876               	movf	_DimmerLightsIntr,w
 18976  03FE  3E04               	addlw	4
 18977  03FF  0086               	movwf	6
 18978  0400  3001               	movlw	1	; select bank2/3
 18979  0401  0087               	movwf	7
 18980  0402  303C               	movlw	60
 18981  0403  0201               	subwf	1,w
 18982  0404  1803               	skipnc
 18983  0405  2C10               	goto	i1l7369
 18984                           
 18985                           ;Dimmer_B1.c: 273: DimmerLightsIntr->DimmingValue++;
 18986  0406  3001               	movlw	1
 18987  0407  00F2               	movwf	??_setDimmerLights_IntrControl
 18988  0408  0876               	movf	_DimmerLightsIntr,w
 18989  0409  3E04               	addlw	4
 18990  040A  0086               	movwf	6
 18991  040B  3001               	movlw	1	; select bank2/3
 18992  040C  0087               	movwf	7
 18993  040D  0872               	movf	??_setDimmerLights_IntrControl,w
 18994  040E  0781               	addwf	1,f
 18995                           
 18996                           ;Dimmer_B1.c: 274: } else {
 18997  040F  0008               	return
 18998  0410                     i1l7369:	
 18999                           
 19000                           ;Dimmer_B1.c: 275: DimmerLightsIntr->AdjStatus = 1;
 19001  0410  0A76               	incf	_DimmerLightsIntr,w
 19002  0411  0086               	movwf	6
 19003  0412  3001               	movlw	1	; select bank2/3
 19004  0413  0087               	movwf	7
 19005  0414  1781               	bsf	1,7
 19006                           
 19007                           ;Dimmer_B1.c: 276: }
 19008                           ;Dimmer_B1.c: 277: } else {
 19009  0415  0008               	return
 19010  0416                     i1l7371:	
 19011                           
 19012                           ;Dimmer_B1.c: 278: if (DimmerLightsIntr->DimmingValue > ((char)(15*0.8))) {
 19013  0416  0876               	movf	_DimmerLightsIntr,w
 19014  0417  3E04               	addlw	4
 19015  0418  0086               	movwf	6
 19016  0419  3001               	movlw	1	; select bank2/3
 19017  041A  0087               	movwf	7
 19018  041B  300D               	movlw	13
 19019  041C  0201               	subwf	1,w
 19020  041D  1C03               	skipc
 19021  041E  2C27               	goto	i1l7375
 19022                           
 19023                           ;Dimmer_B1.c: 279: DimmerLightsIntr->DimmingValue--;
 19024  041F  0876               	movf	_DimmerLightsIntr,w
 19025  0420  3E04               	addlw	4
 19026  0421  0086               	movwf	6
 19027  0422  3001               	movlw	1	; select bank2/3
 19028  0423  0087               	movwf	7
 19029  0424  3001               	movlw	1
 19030  0425  0281               	subwf	1,f
 19031                           
 19032                           ;Dimmer_B1.c: 280: } else
 19033  0426  0008               	return
 19034  0427                     i1l7375:	
 19035                           
 19036                           ;Dimmer_B1.c: 281: DimmerLightsIntr->AdjStatus = 0;
 19037  0427  0A76               	incf	_DimmerLightsIntr,w
 19038  0428  0086               	movwf	6
 19039  0429  3001               	movlw	1	; select bank2/3
 19040  042A  0087               	movwf	7
 19041  042B  1381               	bcf	1,7
 19042                           
 19043                           ;Dimmer_B1.c: 282: }
 19044                           ;Dimmer_B1.c: 283: }
 19045                           ;Dimmer_B1.c: 284: } else if (DimmerLightsIntr->AdjRF == 1) {
 19046  042C  0008               	return
 19047  042D                     i1l7377:	
 19048  042D  0876               	movf	_DimmerLightsIntr,w
 19049  042E  3E02               	addlw	2
 19050  042F  0086               	movwf	6
 19051  0430  3001               	movlw	1	; select bank2/3
 19052  0431  0087               	movwf	7
 19053  0432  1C01               	btfss	1,0
 19054  0433  0008               	return
 19055                           
 19056                           ;Dimmer_B1.c: 285: if (DimmerLightsIntr->DimmingValue < DimmerLightsIntr->MaxmumValue) {
 19057  0434  0876               	movf	_DimmerLightsIntr,w
 19058  0435  3E04               	addlw	4
 19059  0436  0086               	movwf	6
 19060  0437  3001               	movlw	1	; select bank2/3
 19061  0438  0087               	movwf	7
 19062  0439  0876               	movf	_DimmerLightsIntr,w
 19063  043A  3E06               	addlw	6
 19064  043B  0084               	movwf	4
 19065  043C  3001               	movlw	1	; select bank2/3
 19066  043D  0085               	movwf	5
 19067  043E  0800               	movf	0,w
 19068  043F  0201               	subwf	1,w
 19069  0440  1803               	skipnc
 19070  0441  2C4C               	goto	i1l7383
 19071                           
 19072                           ;Dimmer_B1.c: 286: DimmerLightsIntr->DimmingValue++;
 19073  0442  3001               	movlw	1
 19074  0443  00F2               	movwf	??_setDimmerLights_IntrControl
 19075  0444  0876               	movf	_DimmerLightsIntr,w
 19076  0445  3E04               	addlw	4
 19077  0446  0086               	movwf	6
 19078  0447  3001               	movlw	1	; select bank2/3
 19079  0448  0087               	movwf	7
 19080  0449  0872               	movf	??_setDimmerLights_IntrControl,w
 19081  044A  0781               	addwf	1,f
 19082                           
 19083                           ;Dimmer_B1.c: 287: } else if (DimmerLightsIntr->DimmingValue > DimmerLightsIntr->MaxmumV
      +                          alue) {
 19084  044B  0008               	return
 19085  044C                     i1l7383:	
 19086  044C  0876               	movf	_DimmerLightsIntr,w
 19087  044D  3E06               	addlw	6
 19088  044E  0086               	movwf	6
 19089  044F  3001               	movlw	1	; select bank2/3
 19090  0450  0087               	movwf	7
 19091  0451  0876               	movf	_DimmerLightsIntr,w
 19092  0452  3E04               	addlw	4
 19093  0453  0084               	movwf	4
 19094  0454  3001               	movlw	1	; select bank2/3
 19095  0455  0085               	movwf	5
 19096  0456  0800               	movf	0,w
 19097  0457  0201               	subwf	1,w
 19098  0458  1803               	skipnc
 19099  0459  2C62               	goto	i1l7387
 19100                           
 19101                           ;Dimmer_B1.c: 288: DimmerLightsIntr->DimmingValue--;
 19102  045A  0876               	movf	_DimmerLightsIntr,w
 19103  045B  3E04               	addlw	4
 19104  045C  0086               	movwf	6
 19105  045D  3001               	movlw	1	; select bank2/3
 19106  045E  0087               	movwf	7
 19107  045F  3001               	movlw	1
 19108  0460  0281               	subwf	1,f
 19109                           
 19110                           ;Dimmer_B1.c: 289: } else {
 19111  0461  0008               	return
 19112  0462                     i1l7387:	
 19113                           
 19114                           ;Dimmer_B1.c: 290: DimmerLightsIntr->AdjRF = 0;
 19115  0462  0876               	movf	_DimmerLightsIntr,w
 19116  0463  3E02               	addlw	2
 19117  0464  0086               	movwf	6
 19118  0465  3001               	movlw	1	; select bank2/3
 19119  0466  0087               	movwf	7
 19120  0467  1001               	bcf	1,0
 19121  0468  0008               	return
 19122  0469                     __end_of_setDimmerLights_IntrControl:	
 19123                           
 19124                           	psect	text131
 19125  1C2C                     __ptext131:	
 19126 ;; *************** function _DimmerIntrPointSelect *****************
 19127 ;; Defined at:
 19128 ;;		line 74 in file "../src/Dimmer_B1.c"
 19129 ;; Parameters:    Size  Location     Type
 19130 ;;  lights          1    wreg     unsigned char 
 19131 ;; Auto vars:     Size  Location     Type
 19132 ;;  lights          1    1[COMMON] unsigned char 
 19133 ;; Return value:  Size  Location     Type
 19134 ;;		None               void
 19135 ;; Registers used:
 19136 ;;		wreg
 19137 ;; Tracked objects:
 19138 ;;		On entry : 0/0
 19139 ;;		On exit  : 0/0
 19140 ;;		Unchanged: 0/0
 19141 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19142 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19143 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19144 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19145 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19146 ;;Total ram usage:        2 bytes
 19147 ;; Hardware stack levels used:    1
 19148 ;; This function calls:
 19149 ;;		Nothing
 19150 ;; This function is called by:
 19151 ;;		_setDimmerLights_IntrControl
 19152 ;; This function uses a non-reentrant model
 19153 ;;
 19154                           
 19155                           
 19156                           ;psect for function _DimmerIntrPointSelect
 19157  1C2C                     _DimmerIntrPointSelect:	
 19158                           
 19159                           ;incstack = 0
 19160                           ; Regs used in _DimmerIntrPointSelect: [wreg]
 19161                           ;DimmerIntrPointSelect@lights stored from wreg
 19162  1C2C  00F1               	movwf	DimmerIntrPointSelect@lights
 19163                           
 19164                           ;Dimmer_B1.c: 76: if (lights == 1) {
 19165  1C2D  0871               	movf	DimmerIntrPointSelect@lights,w
 19166  1C2E  3A01               	xorlw	1
 19167  1C2F  1D03               	skipz
 19168  1C30  2C35               	goto	i1l738
 19169                           
 19170                           ;Dimmer_B1.c: 77: DimmerLightsIntr = &DimmerLights1;
 19171  1C31  3055               	movlw	_DimmerLights1& (0+255)
 19172  1C32  00F0               	movwf	??_DimmerIntrPointSelect
 19173  1C33  0870               	movf	??_DimmerIntrPointSelect,w
 19174  1C34  00F6               	movwf	_DimmerLightsIntr
 19175  1C35                     i1l738:	
 19176                           
 19177                           ;Dimmer_B1.c: 78: }
 19178                           ;Dimmer_B1.c: 81: if (lights == 2) {
 19179  1C35  0871               	movf	DimmerIntrPointSelect@lights,w
 19180  1C36  3A02               	xorlw	2
 19181  1C37  1D03               	skipz
 19182  1C38  0008               	return
 19183                           
 19184                           ;Dimmer_B1.c: 82: DimmerLightsIntr = &DimmerLights2;
 19185  1C39  30BE               	movlw	_DimmerLights2& (0+255)
 19186  1C3A  00F0               	movwf	??_DimmerIntrPointSelect
 19187  1C3B  0870               	movf	??_DimmerIntrPointSelect,w
 19188  1C3C  00F6               	movwf	_DimmerLightsIntr
 19189  1C3D  0008               	return
 19190  1C3E                     __end_of_DimmerIntrPointSelect:	
 19191                           
 19192                           	psect	text132
 19193  1BDA                     __ptext132:	
 19194 ;; *************** function _IOC_ISR *****************
 19195 ;; Defined at:
 19196 ;;		line 400 in file "../src/MCU_B1.c"
 19197 ;; Parameters:    Size  Location     Type
 19198 ;;		None
 19199 ;; Auto vars:     Size  Location     Type
 19200 ;;		None
 19201 ;; Return value:  Size  Location     Type
 19202 ;;		None               void
 19203 ;; Registers used:
 19204 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19205 ;; Tracked objects:
 19206 ;;		On entry : 0/0
 19207 ;;		On exit  : 0/0
 19208 ;;		Unchanged: 0/0
 19209 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19210 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19211 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19212 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19213 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19214 ;;Total ram usage:        0 bytes
 19215 ;; Hardware stack levels used:    1
 19216 ;; Hardware stack levels required when called:    3
 19217 ;; This function calls:
 19218 ;;		_setDimmerReClock
 19219 ;; This function is called by:
 19220 ;;		_ISR
 19221 ;; This function uses a non-reentrant model
 19222 ;;
 19223                           
 19224                           
 19225                           ;psect for function _IOC_ISR
 19226  1BDA                     _IOC_ISR:	
 19227                           
 19228                           ;MCU_B1.c: 401: if (IOCIE == 1 && IOCIF == 1 && IOCBF2 == 1) {
 19229                           
 19230                           ;incstack = 0
 19231                           ; Regs used in _IOC_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 19232  1BDA  1D8B               	btfss	11,3	;volatile
 19233  1BDB  0008               	return
 19234  1BDC  1C0B               	btfss	11,0	;volatile
 19235  1BDD  0008               	return
 19236  1BDE  0027               	movlb	7	; select bank7
 19237  1BDF  1D16               	btfss	22,2	;volatile
 19238  1BE0  0008               	return
 19239                           
 19240                           ;MCU_B1.c: 402: IOCBF2 = 0;
 19241  1BE1  1116               	bcf	22,2	;volatile
 19242                           
 19243                           ;MCU_B1.c: 403: IOCIF = 0;
 19244  1BE2  100B               	bcf	11,0	;volatile
 19245                           
 19246                           ;MCU_B1.c: 404: if (myMain.PowerON == 1) {
 19247  1BE3  0021               	movlb	1	; select bank1
 19248  1BE4  1C20               	btfss	_myMain^(0+128),0
 19249  1BE5  0008               	return
 19250                           
 19251                           ;MCU_B1.c: 407: setDimmerReClock();
 19252  1BE6  319A  22FF         	fcall	_setDimmerReClock
 19253  1BE8  0008               	return
 19254  1BE9                     __end_of_IOC_ISR:	
 19255                           
 19256                           	psect	text133
 19257  1AFF                     __ptext133:	
 19258 ;; *************** function _setDimmerReClock *****************
 19259 ;; Defined at:
 19260 ;;		line 243 in file "../src/MCU_B1.c"
 19261 ;; Parameters:    Size  Location     Type
 19262 ;;		None
 19263 ;; Auto vars:     Size  Location     Type
 19264 ;;		None
 19265 ;; Return value:  Size  Location     Type
 19266 ;;		None               void
 19267 ;; Registers used:
 19268 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19269 ;; Tracked objects:
 19270 ;;		On entry : 0/0
 19271 ;;		On exit  : 0/0
 19272 ;;		Unchanged: 0/0
 19273 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19274 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19275 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19276 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19277 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19278 ;;Total ram usage:        0 bytes
 19279 ;; Hardware stack levels used:    1
 19280 ;; Hardware stack levels required when called:    2
 19281 ;; This function calls:
 19282 ;;		_setDimmerLights_IntrIOC_GO
 19283 ;; This function is called by:
 19284 ;;		_IOC_ISR
 19285 ;; This function uses a non-reentrant model
 19286 ;;
 19287                           
 19288                           
 19289                           ;psect for function _setDimmerReClock
 19290  1AFF                     _setDimmerReClock:	
 19291                           
 19292                           ;MCU_B1.c: 248: setDimmerLights_IntrIOC_GO(1);
 19293                           
 19294                           ;incstack = 0
 19295                           ; Regs used in _setDimmerReClock: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 19296  1AFF  3001               	movlw	1
 19297  1B00  3192  22AC  319A   	fcall	_setDimmerLights_IntrIOC_GO
 19298                           
 19299                           ;MCU_B1.c: 252: setDimmerLights_IntrIOC_GO(2);
 19300  1B03  3002               	movlw	2
 19301  1B04  3192  22AC         	fcall	_setDimmerLights_IntrIOC_GO
 19302  1B06  0008               	return
 19303  1B07                     __end_of_setDimmerReClock:	
 19304                           
 19305                           	psect	text134
 19306  12AC                     __ptext134:	
 19307 ;; *************** function _setDimmerLights_IntrIOC_GO *****************
 19308 ;; Defined at:
 19309 ;;		line 28 in file "../src/Dimmer_B1.c"
 19310 ;; Parameters:    Size  Location     Type
 19311 ;;  lights          1    wreg     unsigned char 
 19312 ;; Auto vars:     Size  Location     Type
 19313 ;;  lights          1    2[COMMON] unsigned char 
 19314 ;; Return value:  Size  Location     Type
 19315 ;;		None               void
 19316 ;; Registers used:
 19317 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19318 ;; Tracked objects:
 19319 ;;		On entry : 0/0
 19320 ;;		On exit  : 0/0
 19321 ;;		Unchanged: 0/0
 19322 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19323 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19324 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19325 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19326 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19327 ;;Total ram usage:        1 bytes
 19328 ;; Hardware stack levels used:    1
 19329 ;; Hardware stack levels required when called:    1
 19330 ;; This function calls:
 19331 ;;		_DimmerIntrIOCPointSelect
 19332 ;; This function is called by:
 19333 ;;		_setDimmerReClock
 19334 ;; This function uses a non-reentrant model
 19335 ;;
 19336                           
 19337                           
 19338                           ;psect for function _setDimmerLights_IntrIOC_GO
 19339  12AC                     _setDimmerLights_IntrIOC_GO:	
 19340                           
 19341                           ;incstack = 0
 19342                           ; Regs used in _setDimmerLights_IntrIOC_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 19343                           ;setDimmerLights_IntrIOC_GO@lights stored from wreg
 19344  12AC  00F2               	movwf	setDimmerLights_IntrIOC_GO@lights
 19345                           
 19346                           ;Dimmer_B1.c: 29: DimmerIntrIOCPointSelect(lights);
 19347  12AD  0872               	movf	setDimmerLights_IntrIOC_GO@lights,w
 19348  12AE  319C  24E5  3192   	fcall	_DimmerIntrIOCPointSelect
 19349                           
 19350                           ;Dimmer_B1.c: 46: if (DimmerLightsIntrIOC->IntrStart == 0 && RB2 == 0) {
 19351  12B1  0021               	movlb	1	; select bank1
 19352  12B2  084C               	movf	_DimmerLightsIntrIOC^(0+128),w
 19353  12B3  3E02               	addlw	2
 19354  12B4  0086               	movwf	6
 19355  12B5  3001               	movlw	1	; select bank2/3
 19356  12B6  0087               	movwf	7
 19357  12B7  1901               	btfsc	1,2
 19358  12B8  0008               	return
 19359  12B9  0020               	movlb	0	; select bank0
 19360  12BA  190D               	btfsc	13,2	;volatile
 19361  12BB  0008               	return
 19362                           
 19363                           ;Dimmer_B1.c: 47: DimmerLightsIntrIOC->IntrStart = 1;
 19364  12BC  0021               	movlb	1	; select bank1
 19365  12BD  084C               	movf	_DimmerLightsIntrIOC^(0+128),w
 19366  12BE  3E02               	addlw	2
 19367  12BF  0086               	movwf	6
 19368  12C0  3001               	movlw	1	; select bank2/3
 19369  12C1  0087               	movwf	7
 19370  12C2  1501               	bsf	1,2
 19371                           
 19372                           ;Dimmer_B1.c: 48: DimmerLightsIntrIOC->GO = 1;
 19373  12C3  0A4C               	incf	_DimmerLightsIntrIOC^(0+128),w
 19374  12C4  0086               	movwf	6
 19375  12C5  3001               	movlw	1	; select bank2/3
 19376  12C6  0087               	movwf	7
 19377  12C7  1401               	bsf	1,0
 19378                           
 19379                           ;Dimmer_B1.c: 49: DimmerLightsIntrIOC->MosfetSignal = 1;
 19380  12C8  0A4C               	incf	_DimmerLightsIntrIOC^(0+128),w
 19381  12C9  0086               	movwf	6
 19382  12CA  3001               	movlw	1	; select bank2/3
 19383  12CB  0087               	movwf	7
 19384  12CC  1481               	bsf	1,1
 19385                           
 19386                           ;Dimmer_B1.c: 50: Dimmer.Correction = 0;
 19387  12CD  01C8               	clrf	(_Dimmer^(0+128)+2)	;volatile
 19388                           
 19389                           ;Dimmer_B1.c: 52: if (DimmerLightsIntrIOC->StatusFlag == 1) {
 19390  12CE  0A4C               	incf	_DimmerLightsIntrIOC^(0+128),w
 19391  12CF  0086               	movwf	6
 19392  12D0  3001               	movlw	1	; select bank2/3
 19393  12D1  0087               	movwf	7
 19394  12D2  1D01               	btfss	1,2
 19395  12D3  0008               	return
 19396                           
 19397                           ;Dimmer_B1.c: 53: DimmerLightsIntrIOC->MOSFET = 1;
 19398  12D4  084C               	movf	_DimmerLightsIntrIOC^(0+128),w
 19399  12D5  0086               	movwf	6
 19400  12D6  3001               	movlw	1	; select bank2/3
 19401  12D7  0087               	movwf	7
 19402  12D8  1401               	bsf	1,0
 19403                           
 19404                           ;Dimmer_B1.c: 55: if (lights == 1) {
 19405  12D9  0872               	movf	setDimmerLights_IntrIOC_GO@lights,w
 19406  12DA  3A01               	xorlw	1
 19407  12DB  1D03               	skipz
 19408  12DC  2AE0               	goto	i1l6969
 19409                           
 19410                           ;Dimmer_B1.c: 56: RA7 = 1;
 19411  12DD  0020               	movlb	0	; select bank0
 19412  12DE  178C               	bsf	12,7	;volatile
 19413                           
 19414                           ;Dimmer_B1.c: 58: }
 19415  12DF  0008               	return
 19416  12E0                     i1l6969:	
 19417                           
 19418                           ;Dimmer_B1.c: 61: else if (lights == 2) {
 19419  12E0  0872               	movf	setDimmerLights_IntrIOC_GO@lights,w
 19420  12E1  3A02               	xorlw	2
 19421  12E2  1D03               	skipz
 19422  12E3  0008               	return
 19423                           
 19424                           ;Dimmer_B1.c: 62: RB4 = 1;
 19425  12E4  0020               	movlb	0	; select bank0
 19426  12E5  160D               	bsf	13,4	;volatile
 19427  12E6  0008               	return
 19428  12E7                     __end_of_setDimmerLights_IntrIOC_GO:	
 19429                           
 19430                           	psect	text135
 19431  1CE5                     __ptext135:	
 19432 ;; *************** function _DimmerIntrIOCPointSelect *****************
 19433 ;; Defined at:
 19434 ;;		line 8 in file "../src/Dimmer_B1.c"
 19435 ;; Parameters:    Size  Location     Type
 19436 ;;  lights          1    wreg     unsigned char 
 19437 ;; Auto vars:     Size  Location     Type
 19438 ;;  lights          1    1[COMMON] unsigned char 
 19439 ;; Return value:  Size  Location     Type
 19440 ;;		None               void
 19441 ;; Registers used:
 19442 ;;		wreg
 19443 ;; Tracked objects:
 19444 ;;		On entry : 0/0
 19445 ;;		On exit  : 0/0
 19446 ;;		Unchanged: 0/0
 19447 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19448 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19449 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19450 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19451 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19452 ;;Total ram usage:        2 bytes
 19453 ;; Hardware stack levels used:    1
 19454 ;; This function calls:
 19455 ;;		Nothing
 19456 ;; This function is called by:
 19457 ;;		_setDimmerLights_IntrIOC_GO
 19458 ;; This function uses a non-reentrant model
 19459 ;;
 19460                           
 19461                           
 19462                           ;psect for function _DimmerIntrIOCPointSelect
 19463  1CE5                     _DimmerIntrIOCPointSelect:	
 19464                           
 19465                           ;incstack = 0
 19466                           ; Regs used in _DimmerIntrIOCPointSelect: [wreg]
 19467                           ;DimmerIntrIOCPointSelect@lights stored from wreg
 19468  1CE5  00F1               	movwf	DimmerIntrIOCPointSelect@lights
 19469                           
 19470                           ;Dimmer_B1.c: 10: if (lights == 1) {
 19471  1CE6  0871               	movf	DimmerIntrIOCPointSelect@lights,w
 19472  1CE7  3A01               	xorlw	1
 19473  1CE8  1D03               	skipz
 19474  1CE9  2CEF               	goto	i1l725
 19475                           
 19476                           ;Dimmer_B1.c: 11: DimmerLightsIntrIOC = &DimmerLights1;
 19477  1CEA  3055               	movlw	_DimmerLights1& (0+255)
 19478  1CEB  00F0               	movwf	??_DimmerIntrIOCPointSelect
 19479  1CEC  0870               	movf	??_DimmerIntrIOCPointSelect,w
 19480  1CED  0021               	movlb	1	; select bank1
 19481  1CEE  00CC               	movwf	_DimmerLightsIntrIOC^(0+128)
 19482  1CEF                     i1l725:	
 19483                           
 19484                           ;Dimmer_B1.c: 12: }
 19485                           ;Dimmer_B1.c: 15: if (lights == 2) {
 19486  1CEF  0871               	movf	DimmerIntrIOCPointSelect@lights,w
 19487  1CF0  3A02               	xorlw	2
 19488  1CF1  1D03               	skipz
 19489  1CF2  0008               	return
 19490                           
 19491                           ;Dimmer_B1.c: 16: DimmerLightsIntrIOC = &DimmerLights2;
 19492  1CF3  30BE               	movlw	_DimmerLights2& (0+255)
 19493  1CF4  00F0               	movwf	??_DimmerIntrIOCPointSelect
 19494  1CF5  0870               	movf	??_DimmerIntrIOCPointSelect,w
 19495  1CF6  0021               	movlb	1	; select bank1
 19496  1CF7  00CC               	movwf	_DimmerLightsIntrIOC^(0+128)
 19497  1CF8  0008               	return
 19498  1CF9                     __end_of_DimmerIntrIOCPointSelect:	
 19499  007E                     btemp	set	126	;btemp
 19500  007E                     pic14e$flags	set	126
 19501  007E                     wtemp	set	126
 19502  007E                     wtemp0	set	126
 19503  0080                     wtemp1	set	128
 19504  0082                     wtemp2	set	130
 19505  0084                     wtemp3	set	132
 19506  0086                     wtemp4	set	134
 19507  0088                     wtemp5	set	136
 19508  007F                     wtemp6	set	127
 19509  007E                     ttemp	set	126
 19510  007E                     ttemp0	set	126
 19511  0081                     ttemp1	set	129
 19512  0084                     ttemp2	set	132
 19513  0087                     ttemp3	set	135
 19514  007F                     ttemp4	set	127
 19515  007E                     ltemp	set	126
 19516  007E                     ltemp0	set	126
 19517  0082                     ltemp1	set	130
 19518  0086                     ltemp2	set	134
 19519  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    102
    Data        32
    BSS         270
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      5      10
    BANK0            80     79      80
    BANK1            80      7      79
    BANK2            80      0      78
    BANK3            80      0      79
    BANK4            80      7      76
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    Sw	PTR struct Switch size(1) Largest target is 9
		 -> NULL(NULL[0]), Sw2(BANK3[9]), Sw1(BANK3[9]), 

    LED	PTR struct LED size(1) Largest target is 4
		 -> NULL(NULL[0]), VarErrLED(BANK2[4]), VarLED2(BANK3[4]), VarLED1(BANK2[4]), 

    product	PTR struct Product size(1) Largest target is 32
		 -> NULL(NULL[0]), _product(BANK4[32]), 

    DimmerLights22	PTR volatile struct DimmerLights size(1) Largest target is 17
		 -> NULL(NULL[0]), DimmerLights2(BANK3[17]), 

    DimmerLights11	PTR volatile struct DimmerLights size(1) Largest target is 17
		 -> NULL(NULL[0]), DimmerLights1(BANK2[17]), 

    DimmerLights	PTR volatile struct DimmerLights size(1) Largest target is 17
		 -> NULL(NULL[0]), DimmerLights2(BANK3[17]), DimmerLights1(BANK2[17]), 

    DimmerLightsIntr	PTR volatile struct DimmerLights size(1) Largest target is 17
		 -> NULL(NULL[0]), DimmerLights2(BANK3[17]), DimmerLights1(BANK2[17]), 

    DimmerLightsIntrIOC	PTR volatile struct DimmerLights size(1) Largest target is 17
		 -> NULL(NULL[0]), DimmerLights2(BANK3[17]), DimmerLights1(BANK2[17]), 

    DelayOff	PTR struct DelayOff size(1) Largest target is 5
		 -> NULL(NULL[0]), DlySw2(BANK3[5]), DlySw1(BANK3[5]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _TMR1_ISR->_setDimmerLights_IntrControl
    _setDimmerLights_IntrControl->_DimmerIntrPointSelect
    _setDimmerReClock->_setDimmerLights_IntrIOC_GO
    _setDimmerLights_IntrIOC_GO->_DimmerIntrIOCPointSelect

Critical Paths under _main in BANK0

    _my_MainTimer->_setBuz
    _getTemp_AD->_getAD
    _getLoad_AD->_getAD
    _Temp_Main->_setTemp_Main
    _setTemp_Main->_setProductData
    _Switch_Main->_setSw_Main
    _setSw_Main->_setDimmerLights_SwOff
    _setDimmerLights_AdjOn->_getDimmerLights_Allow_Condition
    _Switch_Initialization->_setSw_Initialization
    _setSw_Initialization->_setLED
    _setRF_Main->_getRxData
    _setLog_Code->_setProductData
    _setControl_Lights_Table->_setRFSW_Control
    _setRFSW_Control->_setDimmerLights_SwOff
    _setRFSW_Control->_setRF_DimmerLights
    _setDimmerLights_SwOn->_setBuz
    _setRFSW_AdjControl->_setRF_DimmerValue
    _setRF_DimmerValue->_setProductData
    _setDimmerLights_AdjRF->_getPercentValue
    _getPercentValue->___fttol
    ___ftmul->___awtoft
    _RF_RxDisable->_CC2500_WriteCommand
    _CC2500_TxData->_CC2500_WriteCommand
    _CC2500_RxData->_CC2500_ReadStatus
    _CC2500_ReadStatus->_CC2500_ReadByte
    _CC2500_ReadStatus->_CC2500_WriteByte
    _RF_Initialization->_setRF_Initialization
    _Mcu_Initialization->_WDT_Set
    _Load_Main->___lwdiv
    _getAll_DimmerLights_AdjSw->_DimmerLightsPointSelect
    _Load_Initialization->_setLoad_AH_AL_Restore
    _LED_Main->_setLED_Main
    _setLED_Main->_LedPointSelect
    _LED_Initialization->_setLED_Initialization
    _setLED_Initialization->_setLED
    _Flash_Memory_Main->_Flash_Memory_Modify
    _Flash_Memory_Modify->_Flash_Memory_Read
    _Flash_Memory_Initialization->_setPercentValue
    _Exception_Main->_setDimmerLights_SwOff
    _DimmerLights_Main->_setDimmerLights_Main
    _setDimmerLights_Main->_setDimmerLights
    _setDimmerLights_Main->_setDimmerLights_Adj
    _setDimmerLights_Adj->_setRF_DimmerLights
    _setDimmerLights->_setRF_DimmerLights
    _setRF_DimmerLights->_setProductData
    _setPercentValue->___fttol
    ___fttol->___ftadd
    ___ftneg->___ftdiv
    ___ftneg->___ftmul
    ___ftdiv->___awtoft
    ___ftadd->___ftneg
    ___awtoft->___ftpack
    _setLED->_LedPointSelect
    _getDimmerLights_Allow_Condition->_getLoad_OK
    _DimmerLights_Initialization->_setDimmerLights_Initialization
    _setDimmerLights_Initialization->_DimmerLightsPointSelect
    _DelayOff_Main->_DlyOff_Main
    _DlyOff_Main->_setDimmerLights_ErrorClose
    _setDimmerLights_ErrorClose->_setDimmerLights_SwOff
    _setDimmerLights_SwOff->_setDelayOff_GO
    _setDelayOff_GO->_setProductData
    _setProductData->_setPercentValue
    _DelayTimejudge->___bmul
    _getDelayOff_GO->_DelayOffPointSelect
    _getDimmerLights_Status->_DimmerLightsPointSelect
    _setBuz->___awdiv
    _DelayOff_Initialization->_DlyOff_Initialization
    _DlyOff_Initialization->_DelayOffPointSelect
    _CC2500_PowerOnInitial->_CC2500_InitSetREG
    _CC2500_SIDLEMode->_CC2500_WriteCommand
    _CC2500_PowerRST->_DelayTime_1us
    _CC2500_InitSetREG->_CC2500_WriteREG
    _CC2500_InitPATable->_CC2500_WriteREG
    _CC2500_WriteREG->_CC2500_WriteByte
    _CC2500_FrequencyCabr->_DelayTime_1us
    _CC2500_ClearTXFIFO->_CC2500_WriteCommand
    _CC2500_ClearRXFIFO->_CC2500_WriteCommand
    _CC2500_WriteCommand->_CC2500_WriteByte

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_Exception_Main
    _RF_Main->_setRF_Main
    _setRF_Main->_getRxData
    _setControl_Lights_Table->_setDimmerLights_ErrorClose
    _DlyOff_Main->_setDimmerLights_ErrorClose

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    _RF_Main->_setRF_Main

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     0      4  130241
                                              3 BANK4      4     0      4
              _Buzzer_Initialization
                        _Buzzer_Main
              _CC2500_PowerOnInitial
            _DelayOff_Initialization
                      _DelayOff_Main
        _DimmerLights_Initialization
                  _DimmerLights_Main
                     _Exception_Main
        _Flash_Memory_Initialization
                  _Flash_Memory_Main
                 _LED_Initialization
                           _LED_Main
                _Load_Initialization
                          _Load_Main
                 _Mcu_Initialization
                  _RF_Initialization
                            _RF_Main
              _Switch_Initialization
                        _Switch_Main
                _Temp_Initialization
                          _Temp_Main
                           _WDT_Main
                         _getLoad_AD
                         _getTemp_AD
              _myMain_Initialization
                       _my_MainTimer
 ---------------------------------------------------------------------------------
 (1) _my_MainTimer                                         1     1      0    1666
                                             13 BANK0      1     1      0
                             _setBuz
 ---------------------------------------------------------------------------------
 (1) _myMain_Initialization                                1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _getTemp_AD                                           2     2      0     247
                                              4 BANK0      2     2      0
                              _getAD
 ---------------------------------------------------------------------------------
 (1) _getLoad_AD                                           6     6      0     615
                                              4 BANK0      6     6      0
                              _getAD
 ---------------------------------------------------------------------------------
 (2) _getAD                                                4     1      3     216
                                              0 BANK0      4     1      3
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (1) _WDT_Main                                             1     1      0       0
                                              0 BANK0      1     1      0
                       _WDT_Clearing
 ---------------------------------------------------------------------------------
 (2) _WDT_Clearing                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Temp_Main                                            0     0      0    4048
                       _setTemp_Main
 ---------------------------------------------------------------------------------
 (2) _setTemp_Main                                         3     3      0    4048
                                             70 BANK0      3     3      0
           _getMain_All_Error_Status
                             _setBuz
                     _setProductData
 ---------------------------------------------------------------------------------
 (1) _Temp_Initialization                                  0     0      0       0
             _setTemp_Initialization
 ---------------------------------------------------------------------------------
 (2) _setTemp_Initialization                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Switch_Main                                          0     0      0    8404
                         _TouchPower
                         _setSw_Main
 ---------------------------------------------------------------------------------
 (2) _setSw_Main                                           3     3      0    8404
                                             75 BANK0      3     3      0
                      _SwPointSelect
           _getMain_All_Error_Status
                    _getSw_KeyStatus
                             _setBuz
              _setDimmerLights_AdjOn
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                        _setRF_Learn
 ---------------------------------------------------------------------------------
 (3) _setRF_Learn                                          2     2      0      31
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_AdjOn                                1     1      0     405
                                              7 BANK0      1     1      0
            _DimmerLightsPointSelect
    _getDimmerLights_Allow_Condition
 ---------------------------------------------------------------------------------
 (3) _getSw_KeyStatus                                      5     5      0     176
                                              0 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 (3) _SwPointSelect                                        2     2      0      62
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _Switch_Initialization                                0     0      0    1020
                         _TouchPower
               _setSw_Initialization
 ---------------------------------------------------------------------------------
 (2) _setSw_Initialization                                 1     1      0    1020
                                              4 BANK0      1     1      0
                             _setLED
 ---------------------------------------------------------------------------------
 (2) _TouchPower                                           0     0      0       0
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (1) _RF_Main                                              0     0      0   45972
                         _setRF_Main
 ---------------------------------------------------------------------------------
 (2) _setRF_Main                                           4     4      0   45972
                                              5 BANK1      1     1      0
                                              0 BANK4      3     3      0
                      _CC2500_RxData
                      _CC2500_TxData
                _CC2500_WriteCommand
                       _RF_RxDisable
                          _getBuz_GO
           _getMain_All_Error_Status
                    _getRF_KeyStatus
                          _getRxData
 ---------------------------------------------------------------------------------
 (3) _getRxData                                            2     2      0   44813
                                             78 BANK0      1     1      0
                                              4 BANK1      1     1      0
           _getMain_All_Error_Status
            _setControl_Lights_Table
                        _setLog_Code
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setLog_Code                                          1     1      0    3869
                                             70 BANK0      1     1      0
                             _setBuz
                 _setMemory_LoopSave
                   _setMemory_Modify
                     _setProductData
 ---------------------------------------------------------------------------------
 (5) _setMemory_LoopSave                                   2     2      0      31
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setControl_Lights_Table                              0     0      0   40672
                             _setBuz
         _setDimmerLights_ErrorClose
                     _setProductData
                 _setRFSW_AdjControl
                    _setRFSW_Control
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setRFSW_Control                                      3     3      0   13863
                                             75 BANK0      3     3      0
                     _getDelayOff_GO
             _getDimmerLights_Status
                             _setBuz
                     _setDelayOff_GO
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_SwOn                                 5     5      0    1966
                                             13 BANK0      5     5      0
            _DimmerLightsPointSelect
                             _setBuz
 ---------------------------------------------------------------------------------
 (5) _setRFSW_AdjControl                                   4     4      0   18820
                                             72 BANK0      4     4      0
             _getDimmerLights_Status
                   _setMemory_Modify
                     _setProductData
                  _setRF_DimmerValue
                          _setTxData
 ---------------------------------------------------------------------------------
 (6) _setRF_DimmerValue                                    2     2      0   16360
                                             70 BANK0      2     2      0
              _setDimmerLights_AdjRF
                     _setProductData
 ---------------------------------------------------------------------------------
 (7) _setDimmerLights_AdjRF                                2     2      0   14126
                                             66 BANK0      2     2      0
            _DimmerLightsPointSelect
                    _getPercentValue
 ---------------------------------------------------------------------------------
 (8) _getPercentValue                                      6     6      0   14033
                                             60 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftneg
                            ___fttol
 ---------------------------------------------------------------------------------
 (9) ___ftmul                                             16    10      6    3075
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (5) _setMemory_Modify                                     2     2      0      31
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _getRF_KeyStatus                                      3     3      0      74
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _getBuz_GO                                            6     4      2      34
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (3) _RF_RxDisable                                         0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (3) _CC2500_TxData                                        2     2      0     235
                                              4 BANK0      2     2      0
                   _CC2500_WriteByte
                _CC2500_WriteCommand
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _CC2500_RxData                                        2     2      0     371
                                              4 BANK0      2     2      0
                    _CC2500_ReadByte
                  _CC2500_ReadStatus
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _CC2500_ReadStatus                                    2     2      0     167
                                              2 BANK0      2     2      0
                    _CC2500_ReadByte
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (5) _CC2500_ReadByte                                      2     2      0      68
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _RF_Initialization                                    0     0      0       0
               _setRF_Initialization
 ---------------------------------------------------------------------------------
 (2) _setRF_Initialization                                 1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Mcu_Initialization                                   0     0      0       0
                            _ADC_Set
                           _Fosc_Set
                            _IOC_Set
                             _IO_Set
                           _TMR1_Set
                            _WDT_Set
 ---------------------------------------------------------------------------------
 (2) _WDT_Set                                              1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _TMR1_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IO_Set                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IOC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Fosc_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Load_Main                                            6     6      0    1890
                                              8 BANK0      6     6      0
                            ___lwdiv
                             ___wmul
          _getAll_DimmerLights_AdjSw
                   _getDimmer_LoadGO
              _getDimmer_Load_Status
           _getMain_All_Error_Status
               _getMain_LightsStatus
               _getMain_Lights_Count
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _getMain_Lights_Count                                 3     3      0      80
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) _getDimmer_Load_Status                                1     1      0      34
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _getDimmer_LoadGO                                     1     1      0      34
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _getAll_DimmerLights_AdjSw                            5     5      0     232
                                              2 BANK0      5     5      0
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     290
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     549
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (1) _Load_Initialization                                  0     0      0     130
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _setLoad_AH_AL_Restore                                2     2      0     130
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _LED_Main                                             0     0      0     217
                        _setLED_Main
 ---------------------------------------------------------------------------------
 (2) _setLED_Main                                          3     3      0     217
                                              2 BANK0      3     3      0
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (1) _LED_Initialization                                   0     0      0    1144
              _setLED_Initialization
 ---------------------------------------------------------------------------------
 (2) _setLED_Initialization                                1     1      0    1144
                                              4 BANK0      1     1      0
                     _LedPointSelect
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Main                                    1     1      0    1243
                                              6 BANK0      1     1      0
                _Flash_Memory_Modify
               _getMain_LightsStatus
 ---------------------------------------------------------------------------------
 (2) _Flash_Memory_Modify                                  2     2      0    1172
                                              4 BANK0      2     2      0
               _Flash_Memory_Erasing
                  _Flash_Memory_Read
                 _Flash_Memory_Write
                     _setMemory_Data
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Erasing                                 0     0      0       0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Initialization                          2     2      0   12192
                                             66 BANK0      2     2      0
                  _Flash_Memory_Read
                 _Flash_Memory_Write
                     _setMemory_Data
                    _setPercentValue
 ---------------------------------------------------------------------------------
 (3) _setMemory_Data                                       3     2      1     832
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Write                                   2     2      0     133
                                              0 BANK0      2     2      0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (4) _Flash_Memory_Unlock                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Read                                    4     4      0      74
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _Exception_Main                                       8     8      0    7294
                                             75 BANK0      1     1      0
                                              0 BANK1      7     7      0
               _getDimmerLights_Line
             _getDimmerLights_Status
           _getMain_All_Error_Status
               _getMain_LightsStatus
                             _setBuz
              _setDimmerLights_SwOff
                             _setLED
 ---------------------------------------------------------------------------------
 (2) _getDimmerLights_Line                                 2     2      0      40
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Main                                    0     0      0   35750
                         _getLoad_OK
           _getMain_All_Error_Status
               _getMain_LightsStatus
               _setDimmerLights_Main
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Main                                 1     1      0   35407
                                             78 BANK0      1     1      0
            _DimmerLightsPointSelect
    _getDimmerLights_Allow_Condition
                    _setDimmerLights
                _setDimmerLights_Adj
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_Adj                                  3     2      1   17731
                                             75 BANK0      3     2      1
                             _setBuz
               _setDimmerLights_Line
                    _setPercentValue
                     _setProductData
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights                                      3     2      1   17147
                                             75 BANK0      3     2      1
               _setDimmerLights_Line
                             _setLED
                    _setPercentValue
                     _setProductData
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setTxData                                            2     2      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (6) _setRF_DimmerLights                                   5     4      1    2595
                                             70 BANK0      5     4      1
                     _setProductData
 ---------------------------------------------------------------------------------
 (2) _setPercentValue                                      6     6      0   10958
                                             60 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftneg
                            ___fttol
 ---------------------------------------------------------------------------------
 (9) ___fttol                                             14    10      4     525
                                             46 BANK0     14    10      4
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
 ---------------------------------------------------------------------------------
 (9) ___ftneg                                              3     0      3     219
                                             30 BANK0      3     0      3
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (9) ___ftdiv                                             16    10      6    3315
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (9) ___ftadd                                             13     7      6    4080
                                             33 BANK0     13     7      6
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (9) ___awtoft                                             6     3      3    2720
                                              8 BANK0      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (10) ___ftpack                                            8     3      5    2433
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (3) _setLED                                               2     1      1     989
                                              2 BANK0      2     1      1
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (4) _LedPointSelect                                       2     2      0      93
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_Line                                 1     1      0      62
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _getDimmerLights_Allow_Condition                      6     6      0     281
                                              1 BANK0      6     6      0
                         _getLoad_OK
 ---------------------------------------------------------------------------------
 (5) _getLoad_OK                                           1     1      0      34
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _getMain_LightsStatus                                 1     1      0      71
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _getMain_All_Error_Status                             7     7      0     238
                                              0 BANK0      7     7      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Initialization                          1     1      0      93
                                              4 BANK0      1     1      0
     _setDimmerLights_Initialization
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Initialization                       2     2      0      93
                                              2 BANK0      2     2      0
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Main                                        0     0      0    5972
                        _DlyOff_Main
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Main                                          3     3      0    5972
                                             76 BANK0      3     3      0
                _DelayOffPointSelect
                             _setBuz
         _setDimmerLights_ErrorClose
 ---------------------------------------------------------------------------------
 (5) _setDimmerLights_ErrorClose                           5     5      0    4182
                                             75 BANK0      1     1      0
                                              0 BANK1      4     4      0
            _DimmerLightsPointSelect
             _getDimmerLights_Status
              _setDimmerLights_SwOff
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_SwOff                                1     1      0    3705
                                             74 BANK0      1     1      0
            _DimmerLightsPointSelect
                     _getDelayOff_GO
                     _setDelayOff_GO
 ---------------------------------------------------------------------------------
 (4) _setDelayOff_GO                                       4     2      2    3423
                                             70 BANK0      4     2      2
                _DelayOffPointSelect
                     _DelayTimejudge
                     _setProductData
 ---------------------------------------------------------------------------------
 (3) _setProductData                                       4     3      1    2141
                                             66 BANK0      4     3      1
                    _setPercentValue (ARG)
 ---------------------------------------------------------------------------------
 (5) _DelayTimejudge                                       6     6      0     417
                                              4 BANK0      6     6      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (6) ___bmul                                               4     3      1     213
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (4) _getDelayOff_GO                                       2     2      0     127
                                              2 BANK0      2     2      0
                _DelayOffPointSelect
 ---------------------------------------------------------------------------------
 (6) _getDimmerLights_Status                               2     2      0     127
                                              2 BANK0      2     2      0
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (4) _DimmerLightsPointSelect                              2     2      0      62
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _setBuz                                               4     2      2    1666
                                              9 BANK0      4     2      2
                            ___awdiv
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4     599
                                              0 BANK0      9     5      4
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Initialization                              0     0      0      93
              _DlyOff_Initialization
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Initialization                                1     1      0      93
                                              2 BANK0      1     1      0
                _DelayOffPointSelect
 ---------------------------------------------------------------------------------
 (5) _DelayOffPointSelect                                  2     2      0      62
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _CC2500_PowerOnInitial                                0     0      0    2251
                 _CC2500_ClearRXFIFO
                 _CC2500_ClearTXFIFO
               _CC2500_FrequencyCabr
                 _CC2500_InitPATable
                  _CC2500_InitSetREG
                    _CC2500_PowerRST
                   _CC2500_SIDLEMode
 ---------------------------------------------------------------------------------
 (2) _CC2500_SIDLEMode                                     0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (2) _CC2500_PowerRST                                      1     1      0     512
                                              6 BANK0      1     1      0
                   _CC2500_WriteByte
                      _DelayTime_1us
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (2) _CC2500_InitSetREG                                    4     4      0     482
                                              5 BANK0      4     4      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (2) _CC2500_InitPATable                                   3     3      0     417
                                              5 BANK0      3     3      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (3) _CC2500_WriteREG                                      3     2      1     284
                                              2 BANK0      3     2      1
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (2) _CC2500_FrequencyCabr                                 0     0      0     543
                _CC2500_WriteCommand
                      _DelayTime_1us
 ---------------------------------------------------------------------------------
 (3) _DelayTime_1us                                        6     4      2     444
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (2) _CC2500_ClearTXFIFO                                   0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (2) _CC2500_ClearRXFIFO                                   0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (4) _CC2500_WriteCommand                                  2     2      0      99
                                              2 BANK0      2     2      0
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _set_TimeoutCleared                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Timeout_Counter                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _CC2500_WriteByte                                     2     2      0      68
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Main                                          1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Initialization                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _ISR                                                 1     1      0     220
                                              4 COMMON     1     1      0
                            _IOC_ISR
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (12) _TMR1_ISR                                            0     0      0     110
        _setDimmerLights_IntrControl
 ---------------------------------------------------------------------------------
 (13) _setDimmerLights_IntrControl                         2     2      0     110
                                              2 COMMON     2     2      0
              _DimmerIntrPointSelect
 ---------------------------------------------------------------------------------
 (14) _DimmerIntrPointSelect                               2     2      0      44
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (12) _IOC_ISR                                             0     0      0     110
                   _setDimmerReClock
 ---------------------------------------------------------------------------------
 (13) _setDimmerReClock                                    0     0      0     110
         _setDimmerLights_IntrIOC_GO
 ---------------------------------------------------------------------------------
 (14) _setDimmerLights_IntrIOC_GO                          1     1      0     110
                                              2 COMMON     1     1      0
           _DimmerIntrIOCPointSelect
 ---------------------------------------------------------------------------------
 (15) _DimmerIntrIOCPointSelect                            2     2      0      44
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 15
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Buzzer_Initialization
   _Buzzer_Main
   _CC2500_PowerOnInitial
     _CC2500_ClearRXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_ClearTXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_FrequencyCabr
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
       _DelayTime_1us
     _CC2500_InitPATable
       _CC2500_WriteREG
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_InitSetREG
       _CC2500_WriteREG
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_PowerRST
       _CC2500_WriteByte
       _DelayTime_1us
       _Timeout_Counter
       _set_TimeoutCleared
     _CC2500_SIDLEMode
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
   _DelayOff_Initialization
     _DlyOff_Initialization
       _DelayOffPointSelect
   _DelayOff_Main
     _DlyOff_Main
       _DelayOffPointSelect
       _setBuz
         ___awdiv
       _setDimmerLights_ErrorClose
         _DimmerLightsPointSelect
         _getDimmerLights_Status
           _DimmerLightsPointSelect
         _setDimmerLights_SwOff
           _DimmerLightsPointSelect
           _getDelayOff_GO
             _DelayOffPointSelect
           _setDelayOff_GO
             _DelayOffPointSelect
             _DelayTimejudge
               ___bmul
             _setProductData
               _setPercentValue (ARG)
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
   _DimmerLights_Initialization
     _setDimmerLights_Initialization
       _DimmerLightsPointSelect
   _DimmerLights_Main
     _getLoad_OK
     _getMain_All_Error_Status
     _getMain_LightsStatus
     _setDimmerLights_Main
       _DimmerLightsPointSelect
       _getDimmerLights_Allow_Condition
         _getLoad_OK
       _setDimmerLights
         _setDimmerLights_Line
         _setLED
           _LedPointSelect
         _setPercentValue
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setProductData
           _setPercentValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setRF_DimmerLights
           _setProductData
             _setPercentValue (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
         _setTxData
       _setDimmerLights_Adj
         _setBuz
           ___awdiv
         _setDimmerLights_Line
         _setPercentValue
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setProductData
           _setPercentValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setRF_DimmerLights
           _setProductData
             _setPercentValue (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
         _setTxData
   _Exception_Main
     _getDimmerLights_Line
     _getDimmerLights_Status
       _DimmerLightsPointSelect
     _getMain_All_Error_Status
     _getMain_LightsStatus
     _setBuz
       ___awdiv
     _setDimmerLights_SwOff
       _DimmerLightsPointSelect
       _getDelayOff_GO
         _DelayOffPointSelect
       _setDelayOff_GO
         _DelayOffPointSelect
         _DelayTimejudge
           ___bmul
         _setProductData
           _setPercentValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
     _setLED
       _LedPointSelect
   _Flash_Memory_Initialization
     _Flash_Memory_Read
     _Flash_Memory_Write
       _Flash_Memory_Unlock
     _setMemory_Data
     _setPercentValue
       ___awtoft
         ___ftpack
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___ftneg
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
   _Flash_Memory_Main
     _Flash_Memory_Modify
       _Flash_Memory_Erasing
         _Flash_Memory_Unlock
       _Flash_Memory_Read
       _Flash_Memory_Write
         _Flash_Memory_Unlock
       _setMemory_Data
     _getMain_LightsStatus
   _LED_Initialization
     _setLED_Initialization
       _LedPointSelect
       _setLED
         _LedPointSelect
   _LED_Main
     _setLED_Main
       _LedPointSelect
   _Load_Initialization
     _setLoad_AH_AL_Restore
   _Load_Main
     ___lwdiv
     ___wmul
     _getAll_DimmerLights_AdjSw
       _DimmerLightsPointSelect
     _getDimmer_LoadGO
     _getDimmer_Load_Status
     _getMain_All_Error_Status
     _getMain_LightsStatus
     _getMain_Lights_Count
     _setLoad_AH_AL_Restore
   _Mcu_Initialization
     _ADC_Set
     _Fosc_Set
     _IOC_Set
     _IO_Set
     _TMR1_Set
     _WDT_Set
   _RF_Initialization
     _setRF_Initialization
   _RF_Main
     _setRF_Main
       _CC2500_RxData
         _CC2500_ReadByte
         _CC2500_ReadStatus
           _CC2500_ReadByte
           _CC2500_WriteByte
           _Timeout_Counter
           _set_TimeoutCleared
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
       _CC2500_TxData
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _Timeout_Counter
           _set_TimeoutCleared
         _Timeout_Counter
         _set_TimeoutCleared
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
       _RF_RxDisable
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _Timeout_Counter
           _set_TimeoutCleared
       _getBuz_GO
       _getMain_All_Error_Status
       _getRF_KeyStatus
       _getRxData
         _getMain_All_Error_Status
         _setControl_Lights_Table
           _setBuz
             ___awdiv
           _setDimmerLights_ErrorClose
             _DimmerLightsPointSelect
             _getDimmerLights_Status
               _DimmerLightsPointSelect
             _setDimmerLights_SwOff
               _DimmerLightsPointSelect
               _getDelayOff_GO
                 _DelayOffPointSelect
               _setDelayOff_GO
                 _DelayOffPointSelect
                 _DelayTimejudge
                   ___bmul
                 _setProductData
                   _setPercentValue (ARG)
                     ___awtoft
                       ___ftpack
                     ___ftadd
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___fttol
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftadd (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftneg (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftdiv (ARG)
                             ___awtoft (ARG)
                               ___ftpack
                             ___ftpack (ARG)
                           ___ftmul (ARG)
                             ___awtoft (ARG)
                               ___ftpack
                             ___ftpack (ARG)
                         ___ftpack (ARG)
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
           _setProductData
             _setPercentValue (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
           _setRFSW_AdjControl
             _getDimmerLights_Status
               _DimmerLightsPointSelect
             _setMemory_Modify
             _setProductData
               _setPercentValue (ARG)
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
             _setRF_DimmerValue
               _setDimmerLights_AdjRF
                 _DimmerLightsPointSelect
                 _getPercentValue
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
               _setProductData
                 _setPercentValue (ARG)
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
             _setTxData
           _setRFSW_Control
             _getDelayOff_GO
               _DelayOffPointSelect
             _getDimmerLights_Status
               _DimmerLightsPointSelect
             _setBuz
               ___awdiv
             _setDelayOff_GO
               _DelayOffPointSelect
               _DelayTimejudge
                 ___bmul
               _setProductData
                 _setPercentValue (ARG)
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
             _setDimmerLights_SwOff
               _DimmerLightsPointSelect
               _getDelayOff_GO
                 _DelayOffPointSelect
               _setDelayOff_GO
                 _DelayOffPointSelect
                 _DelayTimejudge
                   ___bmul
                 _setProductData
                   _setPercentValue (ARG)
                     ___awtoft
                       ___ftpack
                     ___ftadd
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___fttol
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftadd (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftneg (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftdiv (ARG)
                             ___awtoft (ARG)
                               ___ftpack
                             ___ftpack (ARG)
                           ___ftmul (ARG)
                             ___awtoft (ARG)
                               ___ftpack
                             ___ftpack (ARG)
                         ___ftpack (ARG)
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
             _setDimmerLights_SwOn
               _DimmerLightsPointSelect
               _setBuz
                 ___awdiv
             _setRF_DimmerLights
               _setProductData
                 _setPercentValue (ARG)
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
             _setTxData
           _setTxData
         _setLog_Code
           _setBuz
             ___awdiv
           _setMemory_LoopSave
           _setMemory_Modify
           _setProductData
             _setPercentValue (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
         _setTxData
   _Switch_Initialization
     _TouchPower
       _Timeout_Counter
       _set_TimeoutCleared
     _setSw_Initialization
       _setLED
         _LedPointSelect
   _Switch_Main
     _TouchPower
       _Timeout_Counter
       _set_TimeoutCleared
     _setSw_Main
       _SwPointSelect
       _getMain_All_Error_Status
       _getSw_KeyStatus
       _setBuz
         ___awdiv
       _setDimmerLights_AdjOn
         _DimmerLightsPointSelect
         _getDimmerLights_Allow_Condition
           _getLoad_OK
       _setDimmerLights_SwOff
         _DimmerLightsPointSelect
         _getDelayOff_GO
           _DelayOffPointSelect
         _setDelayOff_GO
           _DelayOffPointSelect
           _DelayTimejudge
             ___bmul
           _setProductData
             _setPercentValue (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
       _setDimmerLights_SwOn
         _DimmerLightsPointSelect
         _setBuz
           ___awdiv
       _setRF_Learn
   _Temp_Initialization
     _setTemp_Initialization
   _Temp_Main
     _setTemp_Main
       _getMain_All_Error_Status
       _setBuz
         ___awdiv
       _setProductData
         _setPercentValue (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
   _WDT_Main
     _WDT_Clearing
   _getLoad_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _getTemp_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _myMain_Initialization
   _my_MainTimer
     _setBuz
       ___awdiv

 _ISR (ROOT)
   _IOC_ISR
     _setDimmerReClock
       _setDimmerLights_IntrIOC_GO
         _DimmerIntrIOCPointSelect
   _TMR1_ISR
     _setDimmerLights_IntrControl
       _DimmerIntrPointSelect

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       1       1        7.1%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      5       A       2       71.4%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     4F      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      7      4F       7       98.8%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      4E       9       97.5%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      4F      11       98.8%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      7      4C      13       95.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     192      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     192      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.32 build 58300 
Symbol Table                                                                                   Wed Dec 17 13:17:07 2014

                    __size_of_Switch_Main 000B                     ?_Flash_Memory_Erasing 0070  
                            _WDT_Clearing 0002                            ___bmul@product 0022  
               getMain_Lights_Count@count 0020                                        l96 177F  
                                      l98 1793                                        _RD 0CA8  
                 __end_of_CC2500_WriteREG 1F68                                        _WR 0CA9  
                            ___awdiv@sign 0026                                        _Sw 0077  
                     ___wmul@multiplicand 0022                      _getDimmerLights_Line 1D21  
                  __end_of_setDelayOff_GO 164F                              ___ftadd@exp1 004D  
                            ___ftadd@exp2 004C                 setDimmerLights_Adj@lights 006D  
                __size_of_getRF_KeyStatus 0011                      _setDimmerLights_Main 155A  
                    _setDimmerLights_Line 1DB0                              ___ftadd@sign 004B  
                                     l110 1461                                       l106 1467  
                                     l107 1463                                       l108 1451  
                    _setDimmerLights_SwOn 086A                                       l255 0A22  
                                     l328 1DD4                                       l329 1DD6  
                                     l372 1FB6                                       l811 1EF9  
                                     l770 1C90                                       l860 1D2A  
                                     l861 1D32                                       _GIE 005F  
                                     _CRC 00C9                                       _RA0 0060  
                                     _RB0 0068      __size_of_DimmerLights_Initialization 0014  
                                     _RB1 0069                                       _RA3 0063  
                                     _RC0 0070                                       _RB2 006A  
                                     _RA4 0064                                       _LED 00CD  
                                     _RC1 0071                                       _RB3 006B  
                                     _RC2 0072                                       _RB4 006C  
                                     _RA6 0066                                       _RB5 006D  
                                     _RA7 0067                                       _RC4 0074  
                                     _RC5 0075                                       _RC7 0077  
                                     _RF1 00BA                                       _ISR 0004  
                                     _WDT 0125              getDimmerLights_Status@lights 0022  
                                     _Sw1 01CF                                       _Sw2 01D8  
               setDimmerLights_Adj@status 006B                  __end_of_CC2500_WriteByte 1DE1  
                   _Buzzer_Initialization 1ABF                           __end_of_ADC_Set 1AFF  
                         ?_DelayTimejudge 0070                                       wreg 0009  
    setDimmerLights_Initialization@lights 0023              getDimmerLights_Status@status 0023  
                         _setDimmerLights 15AA                         ??_getSw_KeyStatus 0020  
                   _setDimmerLights_AdjRF 1F68                     _setDimmerLights_AdjOn 123A  
                                    ?_ISR 0070           setDimmerLights_ErrorClose@count 00E8  
                            ___ftdiv@cntr 0038                           __end_of_IOC_ISR 1BE9  
                              Load_Main@i 002C                              ___ftdiv@sign 003D  
                                    l1032 1ECE                                      l1033 1ED8  
                                    l1067 13D9                                      l1335 11FD  
                                    l3033 0956                  ?_DimmerLightsPointSelect 0070  
                                    l2315 11C9                                      l2251 0EA3  
                                    l1349 1130                                      l2341 134D  
                                    l2261 0E68                                      l3062 0508  
                                    l1358 14B4                                      l3039 096D  
                                    l2263 0E6A                                      l2255 0E3F  
                                    l1609 063E                                      l2329 0B7A  
                                    l2266 0E94                                      l1731 007F  
                                    l1547 1321                                      l1740 01C9  
                                    l1732 007B                                      l1733 0076  
                         __end_of_IOC_Set 1BA7                                      l2293 1CB1  
                                    l1574 117C                                      l1902 0FF6  
                                    l1575 1197                                      l1729 01EF  
                                    l1579 1193                                      l1739 01CB  
                                    l2645 1DA2                                      l2667 035F  
                                    l2669 0238                                      l2872 1E70  
                                    l1897 0FFC                     _setDimmerLights_SwOff 14BC  
                                    l9021 0884                                      l9031 0895  
                                    l9201 09C1                                      l9051 14F1  
                                    l9203 0992                                      l9019 0881  
                                    l9205 09C7                                      l9133 1144  
                                    l9037 08B8                                      l9029 0890  
                                    l9071 17F1                                      l9039 08BE  
                                    l9321 1296                                      l9401 1677  
                                    l8611 1C41                                      l9331 12A5  
                                    l9323 1299                                      l9243 153E  
                                    l9333 12AA                                      l9309 1282  
                                    l9413 1693                                      l9181 1E5A  
                                    l9501 0A2B                                      l9261 133C  
                                    l8615 1C47                                      l9183 1E60  
                                    l9247 154D                                      l9273 1E0C  
                                    l9409 168F                                      l9417 1697  
                                    l8633 1F2E                                      l8705 0547  
                                    l8721 0ED4                                      l9513 0A3E  
                                    l9505 0A31                                      l9267 1E03  
                                    l9347 1177                                      l8715 0EBE  
                                    l9283 1F96                                      l9531 0B88  
                                    l9507 0A35                                      l9269 1E06  
                                    l8901 16AD                                      l9357 118E  
                                    l9349 1180                                      l8645 0491  
                                    l9285 1F99                                      l9541 0B9B  
                                    l9525 0B7F                                      l9533 0B8B  
                                    l9509 0A38                                      l9461 0B5B  
                                    l9453 0B3A                     _myMain_Initialization 0800  
                                    l9367 1DC0                                      l8591 0942  
                                    l8583 092C                                      l8655 04A7  
                                    l8743 0F2E                                      l8735 0F15  
                                    l8815 0D03                                      l9711 1118  
                                    l9543 0B9E                                      l9527 0B82  
                                    l9455 0B4F                                      l9393 166F  
                                    l8673 04D4                                      l8649 0498  
                                    l8841 0D4E                                      l8833 0D33  
                                    l9633 15DA                                      l9289 1F9F  
                                    l9481 09F7                                      l9457 0B53  
                                    l9449 0B15                                      l9465 0B5F  
                                    l9801 0C35                                      l8907 16B8  
                                    l9379 165E                                      l9387 1666  
                                    l8587 0933                                      l8691 051A  
                                    l8675 04DE                                      l8667 04C1  
                                    l8843 0D57                                      l8835 0D41  
                                    l9643 15F0                                      l9563 0BB6  
                                    l9547 0BA4                                      l9475 09EE  
                                    l8763 0748                                      l9459 0B57  
                                    l8933 16EF                                      l8925 16DE  
                                    l8917 16C0                                      l8597 095B  
                                    l8589 093D                                      l8685 04FA  
                                    l8677 04E3                                      l8845 0D5A  
                                    l9653 170E                                      l9565 0BCF  
                                    l9477 09F1                                      l8757 0732  
                                    l8919 16CC                                      l8599 0963  
                                    l8695 052C                                      l8687 0504  
                                    l8679 04E7                                      l9495 0A09  
                                    l8791 07A7                                      l8775 0783  
                                    l9815 0C5F                                      l9585 1FC7  
                                    l9593 1F4E                                      l8857 1D04  
                                    l8929 16E7                                      l8873 10D9  
                                    l8849 0D68                                      l9761 1C26  
                                    l9809 0C54                                      l9825 1D54  
                                    l9841 1EB3                                      _CFGS 0CAE  
                                    l9587 1FD2                                      l9595 1F51  
                                    l9499 0A28                                      l8787 079F  
                                    l8779 078B                                      l9851 1EC1  
                                    l8981 1634                                      l9599 1F57  
                                    l8983 163A                                      l9839 1EB1  
                            __CFG_WDTE$ON 0000                                      l9873 140E  
                                    l8977 162E                                      l9849 1EBD  
                                    l9883 141E                                      l9867 1405  
                                    l9779 0C0E                                      l9877 1415  
                                    l9869 1408                                      l9789 0C1F  
                                    l9879 1418                                      l9991 15A4  
                                    l9983 1583                                      l9969 1CAA  
                                    l9985 1589                                      _FREE 0CAC  
                                    _LATA 010C                                      _LATB 010D  
                                    _LATC 010E                                      _PEIE 005E  
                                    u9005 0974                                      u9205 04E8  
                                    u9145 04C2                                      u9305 0EE6  
                                    u9235 04FB                                      u9315 0EF6  
                                    u9325 0F16                                      u9175 04D5  
                                    u9335 0F25                                      u9415 078C  
                                    u9345 0F2F                                      u9505 0D0A  
                                    u9425 0792                                      u9535 0D34  
                                    u9455 07A8                                      u9705 16CD  
                                    u9625 10C5                                      u9465 07AE  
                                    u9385 0754                                      u9715 16D7  
                                    u9395 0764                                      u9725 16DF  
                                    u9565 0D4F                                      u8935 0938  
                                    u8955 0951                                      _LWLO 0CAD  
                                    u9685 16C3                                      u8975 095E  
                                    u9960 17B1                                      u9965 17AF  
                                    _RSSI 00CE                                      _WREN 0CAA  
                                    _Buz1 00AE                                      _Load 0127  
                                    _Temp 00D6                                      _main 080F  
                            ___ftpack@arg 0020                       __end_of_DlyOff_Main 0923  
                         __end_of_RF_Main 1ACB                              ___ftpack@exp 0023  
                                    fsr0h 0005                                      fsr1h 0007  
                                    fsr0l 0004                                      indf0 0000  
                                    indf1 0001                                      fsr1l 0006  
                                    btemp 007E                           __end_of_WDT_Set 1BBF  
                                    ltemp 007E             __size_of_setRF_Initialization 000B  
                        _setDimmerReClock 1AFF                                      start 0013  
                                    ttemp 007E                                      wtemp 007E  
                     DelayTimejudge@value 0029                __end_of_setRFSW_AdjControl 1361  
                       ___bmul@multiplier 0023                              ___ftmul@cntr 003C  
                            ___ftmul@sign 003D            getAll_DimmerLights_AdjSw@adjsw 0026  
            __size_of_Temp_Initialization 0003      _getDimmerLights_Allow_Condition$2330 0022  
    _getDimmerLights_Allow_Condition$2331 0023      _getDimmerLights_Allow_Condition$2332 0024  
                       ?_getDimmer_LoadGO 0070            getAll_DimmerLights_AdjSw@count 0023  
                                   ??_ISR 0074                              ___fttol@exp1 005B  
                            ___fttol@lval 0057   __end_of_getDimmerLights_Allow_Condition 12AC  
__size_of_getDimmerLights_Allow_Condition 003A         ??_getDimmerLights_Allow_Condition 0021  
        ?_getDimmerLights_Allow_Condition 0070           _getDimmerLights_Allow_Condition 1272  
                  _getDimmerLights_Status 1BF9                        ??_getDimmer_LoadGO 0020  
          __size_of_DimmerIntrPointSelect 0012                          __end_of_LED_Main 1B9B  
        setDimmerLights_ErrorClose@lights 00E9             __end_of_DimmerIntrPointSelect 1C3E  
                   ?_getDimmerLights_Line 0070                                     l10021 1100  
                                   l10023 10E3                                     l10025 1105  
                                   l10113 1F0E                                     l10131 1475  
                                   l10115 1F11                                     l10301 0E86  
                                   l10215 0FCB                                     l10119 1F16  
                                   l10137 148A                                     l10217 0FCD  
                                   l10251 0E29                                     l10227 0FE2  
                                   l10325 1DA7                                     l10229 0FE3  
                                   l10263 0E41                                     l10343 0223  
                                   l10425 1E6A                                     l10249 0E26  
                                   l10329 1DAD                                     l10185 0F6C  
                                   l10515 1EFB                                     l10291 0E7B  
                                   l10267 0E44                                     l10419 035B  
                                   l10453 122A                                     l10445 120C  
                                   l10471 143B                                     l10447 1218  
                                   l10383 02D6                                     l10359 0266  
                                   l10545 06B1                                     l10457 1233  
                                   l10369 0298                                     l10393 0308  
                                   l10803 0195                                     l10723 005D  
                                   l10643 0CAF                                     l10635 0C8A  
                                   l10901 05D0                                     l10813 01AB  
                                   l10741 007E                                     l10663 0CE4  
                                   l10647 0CB7                     ?_setDimmerLights_Main 0070  
                                   l10921 0621                                     l10915 060F  
                                   l10851 01DE                                     l10763 00D4  
                                   l10917 05E6                                     l10757 00A2  
                                   l10677 1390                                     l10919 0617  
                                   l10927 0634                                     l10695 1301  
                                   l10795 016A                                     l10885 058D  
                                   l10789 015D                                     l10879 057E  
                                   l10799 0189                                     l10897 05C8  
                                   l10889 059C                                     l10993 0833  
                                   l10899 059F                                     l10997 083E  
                   ?_setDimmerLights_Line 0070                           ?_setDelayOff_GO 0066  
                   ?_setDimmerLights_SwOn 0070                                     ?_main 0268  
                         __end_of___awdiv 16F6                           __end_of___ftadd 055F  
                         __end_of___ftdiv 0F50                           __end_of___ftneg 1B40  
                                   u10015 1D80                                     u10105 099D  
                         __end_of___ftmul 07CF                                     u12105 1219  
                                   u12115 1223                           ___awdiv@divisor 0020  
                                   u12125 122B                                     u12045 1E71  
                                   u12055 1E76                                     _T1CON 0018  
                                   u12155 1431                                     u12315 11F4  
                                   u10725 1FBC                           __end_of___fttol 0D71  
                                   u12085 120F                                     u11365 10EC  
                                   u12425 0CD1                                     u11565 0FB3  
                                   u12525 1319                                     u12375 0C9D  
                                   u11665 0E3C                                     u11585 0FD3  
                                   u12475 1387                                     u12485 1396  
                                   u12920 0615                                     u12665 00A0  
                                   u12675 00D2                                     u12925 05F1  
                                   u12765 019C                                     u12685 0116  
                                   _IOCBF 0396                                     u12890 05CE  
                                   _IOCBN 0395                                     u12895 05AA  
                                   _IOCBP 0394                                     _IOCIE 005B  
                                   _IOCIF 0058                           __end_of___lwdiv 123A  
                                   i1l725 1CEF                                     i1l738 1C35  
                         ___awdiv@counter 0025             __size_of_CC2500_FrequencyCabr 000C  
                                   _TMR1H 0017                                     _TMR1L 0016  
                                   _PORTA 000C                                     _PORTB 000D  
                                   _PORTC 000E                              ?_setLED_Main 0070  
                      setRF_Learn@command 0021                                     _TRISA 008C  
                                   _TRISB 008D                                     _TRISC 008E  
                                   _WPUB1 1069                                     _WPUB2 106A  
                 __end_of_Timeout_Counter 1D86                             __CFG_WRT$HALF 0000  
      __end_of_setDimmerLights_IntrIOC_GO 12E7                _setDimmerLights_IntrIOC_GO 12AC  
                        __end_of_TMR1_ISR 2000                   __size_of_setProductData 000E  
            __size_of_CC2500_WriteCommand 001A        __end_of_setDimmerLights_ErrorClose 09E6  
              _setDimmerLights_ErrorClose 0984                          __end_of_TMR1_Set 1BB3  
                                   _getAD 1F03                             ___awtoft@sign 002D  
             DimmerIntrPointSelect@lights 0071                             ___ftpack@sign 0024  
             __size_of_CC2500_ClearRXFIFO 0004                             ??_Buzzer_Main 0020  
                        __end_of_WDT_Main 1C86               __size_of_CC2500_ClearTXFIFO 0004  
                     CC2500_RxData@loop_f 0025                            __pbitbssCOMMON 03C0  
                          __CFG_BOREN$OFF 0000              __end_of_getMain_Lights_Count 1D49  
                      Flash_Memory_Read@i 0021                          ?_CC2500_ReadByte 0070  
                                   ltemp0 007E                                     ltemp1 0082  
                                   ltemp2 0086                                     ltemp3 0080  
          __size_of_setLED_Initialization 0012              __end_of_getMain_LightsStatus 1CAC  
           __end_of_setLED_Initialization 1C62                                     ttemp0 007E  
                                   ttemp1 0081                                     ttemp2 0084  
                                   ttemp3 0087                                     ttemp4 007F  
                            ?_setRF_Learn 0070                                     status 0003  
                                   wtemp0 007E                                     wtemp1 0080  
                                   wtemp2 0082                                     wtemp3 0084  
                                   wtemp4 0086                                     wtemp5 0088  
                                   wtemp6 007F                        _setRF_DimmerLights 17A7  
             __size_of_Flash_Memory_Write 002F                         ?_CC2500_SIDLEMode 0070  
              __size_of_RF_Initialization 0003          __size_of_DelayOff_Initialization 0008  
                  ?_setLoad_AH_AL_Restore 0070                         setTemp_Main@error 0068  
                  ??_Flash_Memory_Erasing 0020                           _getPercentValue 0AAF  
                      ??_CC2500_SIDLEMode 0024                           __initialization 0015  
                        ?_CC2500_PowerRST 0070                         ?_setMemory_Modify 0070  
                 __size_of_getDelayOff_GO 0010                         ??_setPercentValue 005C  
                            __end_of_main 086A                       ?_setRF_DimmerLights 0066  
                        __end_of_Fosc_Set 1AE1                        ??_setMemory_Modify 0020  
                          _Exception_Main 055F                          ?_CC2500_WriteREG 0022  
                               ??_ADC_Set 0020                   __end_of_setDimmerLights 15FC  
                    _setSw_Initialization 1B2F                                    ??_main 006F  
                           ___fttol@sign1 0056                              ?_setLog_Code 0070  
                 _setControl_Lights_Table 0B14                            _setMemory_Data 1B6B  
                  ?_Buzzer_Initialization 0070         __size_of_DimmerIntrIOCPointSelect 0014  
                 ??_DlyOff_Initialization 0022                                _Receive_OK 03C0  
               ?_DimmerIntrIOCPointSelect 0070                                 ??_IOC_ISR 0073  
                               ??_IOC_Set 0020           __end_of_DimmerLightsPointSelect 1C99  
                  ?_setDimmerLights_AdjRF 0070                    ?_setDimmerLights_AdjOn 0070  
                __size_of_setRFSW_Control 004F                   ??_Switch_Initialization 0025  
                    ??_setRF_DimmerLights 0067                                    ?_getAD 0020  
                       ??_getRF_KeyStatus 0020                    ?_setDimmerLights_SwOff 0070  
                             _DlyOff_Main 08C6                    ?_myMain_Initialization 0070  
                                  _ADCON0 009D                                    _ADCON1 009E  
                               ??_RF_Main 006F                                    _ADRESH 009C  
                                  _ADRESL 009B                          ___awdiv@dividend 0022  
                   _getDimmer_Load_Status 1B27                                 ??_WDT_Set 0020  
                        __end_of___awtoft 1F45                                    _ANSELA 018C  
                                  _ANSELB 018D                                    _ANSELC 018E  
                        __end_of___ftpack 0984                  _getMain_All_Error_Status 1166  
                                  _IOCBF2 1CB2                                    i1l7351 03C9  
                                  i1l7335 0392                                    i1l7371 0416  
                                  i1l7347 03C2                                    i1l7383 044C  
                                  i1l7375 0427                                    i1l7369 0410  
                                  i1l7377 042D                                    i1l7387 0462  
                                  i1l6969 12E0                                    _FVRCON 0117  
    getDimmerLights_Allow_Condition@allow 0026                                    _PMADRH 0192  
                                  _PMADRL 0191                                    _PMDATH 0194  
                                  _PMDATL 0193                                    _PMCON2 0196  
                                  _OSCCON 0099                                    u811_25 1FFA  
                      __size_of_Load_Main 01AC                                    _TMR1IE 0488  
                                  _TMR1IF 0088                                    _IO_Set 1DE1  
                                  _WDTCON 0097                      Exception_Main@i_3621 00EC  
                      DelayTime_1us@count 0020            __size_of_CC2500_PowerOnInitial 0015  
           __end_of_CC2500_PowerOnInitial 1D9B                                    _Dimmer 00C6  
                                  _DlySw1 01E1                                    _DlySw2 01E6  
              __end_of_Mcu_Initialization 1C74                       __end_of_Buzzer_Main 146E  
                                  _Memory 0220                                    _Timer1 0120  
                                  ___bmul 1C3E                    __end_of_Exception_Main 063F  
                    Load_Main@Load_Status 002B                      Exception_Main@lights 00EE  
                                  ___wmul 1E67                                 ??___awdiv 0024  
                               ??___ftadd 0047              __size_of_DelayOffPointSelect 0014  
                               ??___ftdiv 0034                                 ??___ftneg 0041  
                   setDimmerLights@lights 006D                                 ??___ftmul 0034  
                               ??___fttol 0052              ?_Flash_Memory_Initialization 0070  
                  ??_getDimmerLights_Line 0020                                 ??___lwdiv 0024  
             setDimmerLights_AdjRF@lights 0063                    ??_setDimmerLights_Main 006E  
                  ??_setDimmerLights_Line 0020                                    _r_data 00D4  
                                  _s_data 00D5                    ??_setDimmerLights_SwOn 002D  
                                  _setLED 164F                                    _myMain 00A0  
                  __end_of_setMemory_Data 1B77                          _DimmerLightsIntr 0076  
                   ?_setSw_Initialization 0070                     setDimmerLights@status 006B  
                        ___awdiv@quotient 0027                                    _setBuz 174E  
                      __size_of_Temp_Main 0003               __end_of_Load_Initialization 1AC5  
        ??_setDimmerLights_Initialization 0022           ?_setDimmerLights_Initialization 0070  
                   ___ftmul@f3_as_product 0039       __end_of_setDimmerLights_IntrControl 0469  
             _setDimmerLights_IntrControl 0368                  Flash_Memory_Read@address 0022  
                        ?_Timeout_Counter 0070                __end_of_setMemory_LoopSave 1CE5  
             getMain_Lights_Count@status1 0021               getMain_Lights_Count@status2 0022  
                   __end_of_SwPointSelect 1D5D              __size_of_Flash_Memory_Modify 004E  
       setDimmerLights_IntrControl@lights 0073                   __size_of_LedPointSelect 0020  
                     Flash_Memory_Write@i 0021              __size_of_Flash_Memory_Unlock 0009  
              getMain_LightsStatus@status 0020                                _TouchPower 1D9B  
             __size_of_CC2500_InitPATable 001F                       CC2500_TxData@loop_e 0025  
              ?_getAll_DimmerLights_AdjSw 0070                   __end_of_getPercentValue 0B14  
        __end_of_CC2500_registers_address 102F                   __end_of__initialization 0045  
                               ?_LED_Main 0070                                ___ftadd@f1 0041  
                              ___ftadd@f2 0044                      _getRF_KeyStatus$5261 0022  
                           ?_my_MainTimer 0070                 _setDimmerLights_SwOn$2311 002E  
               _setDimmerLights_SwOn$2312 002F                                ___ftdiv@f1 0031  
                              ___ftdiv@f2 002E                                ___ftdiv@f3 0039  
                              ___ftneg@f1 003E                                ___awtoft@c 0028  
                     ___bmul@multiplicand 0020              ?_DimmerLights_Initialization 0070  
                              ___ftmul@f1 002E                                ___ftmul@f2 0031  
                              ___fttol@f1 004E                            __pcstackCOMMON 0070  
          DimmerIntrIOCPointSelect@lights 0071                           ?_Exception_Main 0070  
                            __pidataBANK4 1067                             __end_of_getAD 1F23  
                               ?_TMR1_ISR 0070                                 ?_TMR1_Set 0070  
                  setLoad_AH_AL_Restore@i 0021                 setMemory_LoopSave@command 0021  
            __size_of_setDimmerLights_Adj 0058                        _LED_Initialization 1B83  
                         _getSw_KeyStatus 1EA4                 ??_setControl_Lights_Table 006E  
                      getRF_KeyStatus@key 0021                          ??_DelayTimejudge 0024  
                         ?_setMemory_Data 0020             ??_Flash_Memory_Initialization 0062  
                        ?_setDimmerLights 006B                      _getMain_Lights_Count 1D35  
                               ?_WDT_Main 0070                         __end_of_Load_Main 01F5  
                      __size_of_getBuz_GO 0011                      _getMain_LightsStatus 1C99  
              __end_of_set_TimeoutCleared 1AE6                  __end_of_setDimmerReClock 1B07  
                      __size_of_getRxData 007F                       ?_LED_Initialization 0070  
                       ?_CC2500_WriteByte 0070                            _setProductData 1BCC  
                          _DimmerLights11 00CA                            _DimmerLights22 00CB  
                    __size_of_setLED_Main 0041                    ?_getDimmer_Load_Status 0070  
                                 ??_getAD 0023                       _Temp_Initialization 1ACB  
                      ??_CC2500_WriteByte 0020                                __pbssBANK0 006F  
                              __pbssBANK1 00A0                                __pbssBANK2 0120  
                              __pbssBANK3 01A0                                __pbssBANK4 0220  
                               ?_Fosc_Set 0070                               _Buzzer_Main 1424  
                       ??_setRFSW_Control 006B                         __end_of_Temp_Main 1AD1  
                                 ?_IO_Set 0070                            ??_my_MainTimer 002D  
                              ??_LED_Main 0025                           __CFG_VCAPEN$OFF 0000  
                 _DelayOff_Initialization 1B07                                __pnvCOMMON 0079  
                           ??_Switch_Main 006E                            DelayTime_1us@i 0022  
                          DelayTime_1us@j 0024                      ??_LED_Initialization 0025  
                            _DimmerLights 006F                         LedPointSelect@led 0021  
                  __size_of_DelayOff_Main 0008                      __size_of_setRF_Learn 0014  
                             setBuz@count 002C                   ?_getDimmerLights_Status 0070  
                              __pmaintext 080F                            _getDelayOff_GO 1BE9  
                     _CC2500_WriteCommand 1DFA                      ?_Temp_Initialization 0070  
                                 ?___bmul 0020          __size_of_DimmerLightsPointSelect 0013  
                        ??_setDelayOff_GO 0068             ??_DimmerLights_Initialization 0024  
                                 ?___wmul 0020                                ??_TMR1_ISR 0074  
                           ?_setTemp_Main 0070                                _getLoad_AD 0C69  
                              ??_TMR1_Set 0020                                __pintentry 0004  
                  ??_setSw_Initialization 0024                                _getLoad_OK 1B17  
                      __size_of_setTxData 009B                                   ?_setLED 0022  
                  __size_of_DelayTime_1us 0026                     ?_getMain_Lights_Count 0070  
                                 _ADC_Set 1AF8                                   ?_setBuz 0029  
                               ?___awtoft 0028                                 ?___ftpack 0020  
                              _getTemp_AD 1361                                ??_WDT_Main 0020  
                   ?_getMain_LightsStatus 0070              __end_of_setRF_Initialization 1B54  
                      _setRFSW_AdjControl 1323                    __end_of_setProductData 1BDA  
                                 _IOC_ISR 1BDA                                   _IOC_Set 1B9B  
                    __size_of_setLog_Code 0034     getDimmerLights_Allow_Condition@lights 0025  
                    ?_CC2500_WriteCommand 0070                         _Flash_Memory_Main 11CD  
               __size_of_getDimmer_LoadGO 0008                         _Flash_Memory_Read 1E14  
              getAll_DimmerLights_AdjSw@i 0024               ?_setDimmerLights_IntrIOC_GO 0070  
                  __size_of_CC2500_RxData 006F                    __size_of_CC2500_TxData 0064  
             ?_setDimmerLights_ErrorClose 0070                       ?_setRFSW_AdjControl 0070  
                                 _RF_Data 01A0                                   _RF_Main 1AC8  
                      ?_Flash_Memory_Main 0070                        ?_Flash_Memory_Read 0070  
                                 _WDT_Set 1BB3           __end_of_setControl_Lights_Table 0B7B  
                         setRF_Main@error 0267                                ??_Fosc_Set 0020  
                             ?_TouchPower 0070                           _setPercentValue 0A4A  
                 ??_setLoad_AH_AL_Restore 0020                          ?_getPercentValue 0070  
            __end_of_CC2500_FrequencyCabr 1B6B                           __size_of_IO_Set 0019  
                       __end_of_getBuz_GO 1C1B                       ??_Flash_Memory_Main 0026  
                     ??_Flash_Memory_Read 0020                    __end_of_getDelayOff_GO 1BF9  
                                 _VarLED1 016A                                   _VarLED2 01EB  
          __end_of_getDimmerLights_Status 1C0A                         __end_of_getRxData 0C69  
                 __end_of_getSw_KeyStatus 1EC3                  _CC2500_registers_address 1000  
        __end_of_DimmerIntrIOCPointSelect 1CF9                     ??_Temp_Initialization 0020  
                    ??_setRFSW_AdjControl 0068                            ??_setTemp_Main 0066  
                         __size_of___bmul 0012                       setProductData@value 0062  
                                 ___awdiv 16A2                                   ___ftadd 0469  
                                 ___ftdiv 0EA7                                   ___ftneg 1B37  
                         __size_of___wmul 001E                                   ___ftmul 071B  
                                 ___fttol 0CEA                       __end_of_Switch_Main 1B5F  
                                 ___lwdiv 1203                   ??_Buzzer_Initialization 0020  
                         _getRF_KeyStatus 1C1B                                ??___awtoft 002B  
                              ??___ftpack 0025                           __size_of_setLED 0053  
                    setRFSW_AdjControl@sw 006B                           __size_of_setBuz 0059  
                                 __ptext1 12E7                                   __ptext2 0800  
                                 __ptext3 1361                                   __ptext4 0C69  
                                 __ptext5 1F03                                   __ptext6 1C74  
                                 __ptext7 0002                                   __ptext8 1ACE  
                                 __ptext9 0F50                   ??_setDimmerLights_AdjRF 0062  
                 ??_setDimmerLights_AdjOn 0027                 __size_of_CC2500_SIDLEMode 0004  
                   _DimmerIntrPointSelect 1C2C                              __size_of_ISR 000F  
              ??_getMain_All_Error_Status 0020                           ?_setProductData 0062  
               __end_of_Flash_Memory_Main 1203                 __end_of_Flash_Memory_Read 1E2E  
                 ??_setDimmerLights_SwOff 006A                                _setRF_Main 0E0C  
                 ??_myMain_Initialization 0020                             _DelayOff_Main 1B0F  
                       _DimmerLights_Main 1EE3            __size_of_DlyOff_Initialization 0006  
                   ??_CC2500_WriteCommand 0022                 __size_of_setMemory_Modify 0013  
           __end_of_DlyOff_Initialization 1AEC                __end_of_CC2500_ClearRXFIFO 1AD5  
                ??_setTemp_Initialization 0020                __end_of_CC2500_ClearTXFIFO 1AD9  
           DimmerLightsPointSelect@lights 0021                              ?_DlyOff_Main 0070  
                      ?_DimmerLights_Main 0070                                   _product 0079  
                          _LedPointSelect 1EC3                       _DelayOffPointSelect 1CF9  
                                 clrloop0 1AF3            __size_of_Switch_Initialization 000D  
           __end_of_Switch_Initialization 1BCC                      end_of_initialization 0045  
               ??_DelayOff_Initialization 0023                         _CC2500_InitSetREG 1087  
                           _DelayTime_1us 1FB1                         __end_of_setTxData 0E0C  
              __end_of_Flash_Memory_Write 1137                                   init_ram 1AEC  
                      ?_CC2500_InitSetREG 0070                       ??_DimmerLights_Main 006F  
                    Flash_Memory_Read@ret 0023                                   initloop 1AED  
                              _setSw_Main 01F5                     CC2500_ReadByte@loop_b 0021  
                  setDimmerLights_SwOn@sw 0031                         _CC2500_ReadStatus 1F8C  
                    Flash_Memory_Modify@i 0025                     _setLED_Initialization 1C50  
                         ?_getDelayOff_GO 0070                                getBuz_GO@i 0024  
                      ?_CC2500_ReadStatus 0070                  __size_of_CC2500_ReadByte 001D  
                           _CC2500_RxData 0B7B                             _CC2500_TxData 09E6  
                     ??_CC2500_InitSetREG 0025             __size_of_Flash_Memory_Erasing 000C  
                    ?_DelayOffPointSelect 0070                       _Flash_Memory_Modify 146E  
                             ?_getLoad_AD 0070                               ?_getLoad_OK 0070  
                  ??_getMain_Lights_Count 0020                              __pstringtext 1000  
                     _Flash_Memory_Unlock 1B40                       ??_CC2500_ReadStatus 0022  
                  ??_getMain_LightsStatus 0020                   CC2500_InitSetREG@loop_c 0028  
                             ?_getTemp_AD 0070                       __size_of_TouchPower 0015  
                setLED_Initialization@led 0024                    setSw_Initialization@sw 0024  
               __end_of_DimmerLights_Main 1F03                        _Mcu_Initialization 1C62  
                __size_of_CC2500_PowerRST 0044                      __end_of_my_MainTimer 1323  
                          ?_DelayOff_Main 0070                          __CFG_FOSC$INTOSC 0000  
                  __end_of_LedPointSelect 1EE3                   __end_of_setPercentValue 0AAF  
                __size_of_CC2500_WriteREG 0023                 __end_of_CC2500_InitSetREG 10B1  
                     ?_Mcu_Initialization 0070                      ?_Flash_Memory_Modify 0070  
             __size_of_setRF_DimmerLights 0059                            ?_DelayTime_1us 0020  
                     _setDimmerLights_Adj 16F6                      ?_Flash_Memory_Unlock 0070  
               __end_of_CC2500_ReadStatus 1FB1                             ?_RF_RxDisable 0070  
         getMain_All_Error_Status@command 0025               ??_getAll_DimmerLights_AdjSw 0022  
                             ___ftdiv@exp 003C                          ??_Exception_Main 006B  
                          __end_of_IO_Set 1DFA                      _setRF_Initialization 1B49  
                      _setMemory_LoopSave 1CD2                               _Switch_Main 1B54  
                       __size_of_LED_Main 000C                          ?_getSw_KeyStatus 0070  
                          ?_CC2500_RxData 0070                            ?_CC2500_TxData 0070  
                 _DimmerLightsPointSelect 1C86                   __end_of_getRF_KeyStatus 1C2C  
                        ??_setMemory_Data 0021                               ___ftmul@exp 0038  
                   _CC2500_PowerOnInitial 1D86                      ??_Mcu_Initialization 0021  
                   ??_DelayOffPointSelect 0020                             ?_WDT_Clearing 0070  
                     ?_setMemory_LoopSave 0070                      ?_setDimmerLights_Adj 006B  
                          __end_of___bmul 1C50                      setRF_DimmerLights@on 0066  
                _DimmerIntrIOCPointSelect 1CE5                            __end_of___wmul 1E85  
                       getSw_KeyStatus@sw 0024                         __size_of_TMR1_ISR 0029  
           __size_of_getDimmerLights_Line 0014                    ?_DimmerIntrPointSelect 0070  
                       __size_of_TMR1_Set 000C             __size_of_setDimmerLights_Main 0050  
                          __end_of_setLED 16A2             __size_of_setDimmerLights_Line 0018  
           __size_of_setDimmerLights_SwOn 005C                            __end_of_setBuz 17A7  
                    _CC2500_FrequencyCabr 1B5F                   ??_getDimmer_Load_Status 0020  
              __size_of_Flash_Memory_Main 0036                __size_of_Flash_Memory_Read 001A  
                             ?_setRF_Main 0070                           _setRFSW_Control 150B  
                       __size_of_WDT_Main 0012                         ?_setDimmerReClock 0070  
                     start_initialization 0015                         _setRF_DimmerValue 1137  
                         ?_LedPointSelect 0070                                 _Load_Main 0049  
                             __end_of_ISR 0013                          _getDimmer_LoadGO 1B1F  
                   ??_Flash_Memory_Modify 0024              __size_of_Load_Initialization 0003  
                      ??_setDimmerReClock 0073                        ?_setRF_DimmerValue 0070  
              __end_of_CC2500_InitPATable 1EA4           __size_of_setTemp_Initialization 0001  
                    ??_setMemory_LoopSave 0020                     ??_Flash_Memory_Unlock 0020  
                    __end_of_setTemp_Main 1000                            ??_RF_RxDisable 0024  
                     __size_of_getLoad_AD 0081                              ?_Buzzer_Main 0070  
                     __size_of_getLoad_OK 0008                        _set_TimeoutCleared 1AE1  
                                ??_IO_Set 0020                  __size_of_Timeout_Counter 0015  
                               _VarErrLED 0166                               ?_setSw_Main 0070  
                     ??_setRF_DimmerValue 0066                       __size_of_getTemp_AD 003E  
                  ?_setLED_Initialization 0070                     ?_setRF_Initialization 0070  
                       __size_of_Fosc_Set 0004                 __size_of_CC2500_WriteByte 0019  
                               _Temp_Main 1ACE                       ?_set_TimeoutCleared 0070  
                          ??_WDT_Clearing 0020                                 _Rx_Length 00CF  
                   setProductData@address 0065                       Exception_Main@count 00E8  
                 setRF_DimmerValue@lights 0067                       Exception_Main@error 00E9  
                                ??___bmul 0021                     ??_setDimmerLights_Adj 006C  
                                ??___wmul 0024                    __size_of_SwPointSelect 0014  
                               _Tx_Length 00D2                               __pdataBANK4 0245  
                                ??_setLED 0023                 _getAll_DimmerLights_AdjSw 10DB  
                                ?_ADC_Set 0070                                  ??_setBuz 002B  
                         ??_DelayOff_Main 006F                         ??_CC2500_ReadByte 0020  
        __end_of_getMain_All_Error_Status 1199                          _CC2500_SIDLEMode 1AD9  
              __size_of_DimmerLights_Main 0020                 __end_of_setRF_DimmerValue 1166  
                      setMemory_Data@data 0020                     ?_CC2500_FrequencyCabr 0070  
                           ??_setLED_Main 0022                         __size_of___awtoft 0022  
                       __size_of___ftpack 0061                                  ?_IOC_ISR 0070  
                             __pbssCOMMON 0075                                  ?_IOC_Set 0070  
                               ___latbits 0003                          _setMemory_Modify 1CBF  
                              ?_Load_Main 0070                             __pcstackBANK0 0020  
                           __pcstackBANK1 00E8                             __pcstackBANK4 0265  
                    ??_set_TimeoutCleared 0020                          ?_setPercentValue 0070  
                         ??_DelayTime_1us 0022                __size_of_CC2500_InitSetREG 002A  
                __size_of_setDimmerLights 0052                             DlyOff_Main@sw 006E  
                       ??_CC2500_PowerRST 0026                                  ?_RF_Main 0070  
                                ?_WDT_Set 0070                              ??_TouchPower 0020  
                    __size_of_DlyOff_Main 005D                __size_of_CC2500_ReadStatus 0025  
                       ??_CC2500_WriteREG 0023                             ??_setRF_Learn 0020  
                           _DimmerLights1 0155                             _DimmerLights2 01BE  
                   CC2500_WriteREG@w_addr 0024                     setDelayOff_GO@command 0066  
               ??_DimmerLightsPointSelect 0020            __size_of_setLoad_AH_AL_Restore 001C  
                         ??_CC2500_RxData 0024             __end_of_setLoad_AH_AL_Restore 1E4A  
                setRFSW_AdjControl@status 006A                           ??_CC2500_TxData 0024  
                          getRxData@error 00EC               __size_of_LED_Initialization 000C  
                  ?_CC2500_PowerOnInitial 0070                           Exception_Main@i 00EA  
                              ?_Temp_Main 0070                       __size_of_setRF_Main 009B  
                        ___lwdiv@dividend 0022                     DelayOffPointSelect@sw 0021  
                              setBuz@time 0029                       setDelayOff_GO@value 0067  
                ?_setControl_Lights_Table 0070                          ?_getRF_KeyStatus 0070  
                          Load_Main@error 002A                    _setTemp_Initialization 1066  
                               _getBuz_GO 1C0A       __end_of_Flash_Memory_Initialization 071B  
             _Flash_Memory_Initialization 063F                                  ?___awdiv 0020  
                               __ptext100 15FC                                 __ptext101 1BCC  
                               __ptext110 1AE6                                 __ptext102 10B1  
                               __ptext111 1CF9                                 __ptext103 1C3E  
                               __ptext120 1AD5                                 __ptext112 1D86  
                               __ptext104 1BE9                                 __ptext121 1AD1  
                               __ptext113 1AD9                                 __ptext105 1BF9  
                               __ptext130 0368                                 __ptext122 1DFA  
                               __ptext114 13E0                                 __ptext106 1C86  
                               __ptext131 1C2C                                 __ptext123 1AE1  
                               __ptext115 1087                                 __ptext107 174E  
                               __ptext132 1BDA                                 __ptext124 1D71  
                               __ptext116 1E85                                 __ptext108 16A2  
                               __ptext133 1AFF                                 __ptext125 1DC8  
                               __ptext117 1F45                                 __ptext109 1B07  
                                ?___ftadd 0041                                 __ptext134 12AC  
                               __ptext126 1424                                 __ptext118 1B5F  
                               __ptext135 1CE5                                 __ptext127 1ABF  
                               __ptext119 1FB1                                 __ptext129 1FD7  
                               _getRxData 0BEA                                  ?___ftdiv 002E  
                                ?___ftneg 003E                                  ?___ftmul 002E  
                                ?___fttol 004E                     __size_of_my_MainTimer 003C  
                                ?___lwdiv 0020                   __end_of_setRFSW_Control 155A  
                        ??_setProductData 0063             __size_of_setSw_Initialization 0008  
          __size_of_Buzzer_Initialization 0003             __end_of_Buzzer_Initialization 1AC2  
                        getPercentValue@i 005F                          setPercentValue@i 005F  
                           ??_setLog_Code 0066                  getDimmerLights_Line@line 0021  
                      __end_of_TouchPower 1DB0                           DelayTimejudge@i 0026  
                         DelayTimejudge@j 0027                           DelayTimejudge@k 0028  
                     __size_of_setSw_Main 0173              CC2500_ReadStatus@status_addr 0023  
          __size_of_setDimmerLights_AdjRF 0024            __size_of_setDimmerLights_AdjOn 0038  
           __end_of_setDimmerLights_AdjRF 1F8C             __end_of_setDimmerLights_AdjOn 1272  
                  CC2500_WriteByte@loop_a 0021                                 _r_address 00D3  
          __size_of_setDimmerLights_SwOff 004F            __size_of_myMain_Initialization 000F  
           __end_of_setDimmerLights_SwOff 150B              __end_of_CC2500_patable_vaule 1066  
           __end_of_myMain_Initialization 080F                            __size_of_getAD 0020  
                        ___lwdiv@quotient 0026                   __size_of_DelayTimejudge 002A  
                           _SwPointSelect 1D49                       __end_of_setLED_Main 13E0  
                        ??_getDelayOff_GO 0022                       _DimmerLightsIntrIOC 00CC  
                  ??_setRF_Initialization 0020               __end_of_Temp_Initialization 1ACE  
                       _CC2500_rfSettings 102F                            ___wmul@product 0024  
                                _LED_Main 1B8F                           SwPointSelect@sw 0021  
                               clear_ram0 1AF2                  CC2500_InitPATable@loop_d 0027  
                            _my_MainTimer 12E7                                 _setTxData 0D71  
     __end_of_DimmerLights_Initialization 1D21               _DimmerLights_Initialization 1D0D  
                      _CC2500_ClearRXFIFO 1AD1                        _CC2500_ClearTXFIFO 1AD5  
                setRF_DimmerLights@lights 006A                                  _GO_nDONE 04E9  
                     __end_of_setRF_Learn 1D71                         ??_Timeout_Counter 0020  
                              ?_getBuz_GO 0020                  __size_of_getPercentValue 0065  
                setRF_DimmerLights@status 0069               __size_of_setRFSW_AdjControl 003E  
                      _Flash_Memory_Write 1108                                ?_getRxData 0070  
                            ??_getLoad_AD 0024                                  _TMR1_ISR 1FD7  
                  CC2500_InitSetREG@temp1 0026                    CC2500_InitSetREG@temp2 0027  
                            ??_getLoad_OK 0020                                  _TMR1_Set 1BA7  
                     ?_CC2500_ClearRXFIFO 0070                       ?_CC2500_ClearTXFIFO 0070  
                                _RF_Count 0123                      __end_of_RF_RxDisable 1CBF  
                            ??_getTemp_AD 0024               __end_of_CC2500_WriteCommand 1E14  
                  ??_CC2500_FrequencyCabr 0026                                  _WDT_Main 1C74  
                 DlyOff_Initialization@sw 0022                     getSw_KeyStatus@status 0023  
                        __size_of_ADC_Set 0007                         ___wmul@multiplier 0020  
              __size_of_setRF_DimmerValue 002F                       ?_Flash_Memory_Write 0070  
                        setRF_Main@loop_f 0265                     __size_of_setTemp_Main 00B0  
                 __size_of_setDelayOff_GO 0053                                  _DelayOff 0075  
                            setSw_Main@sw 006D          setDimmerLights_IntrIOC_GO@lights 0072  
                             ??_Load_Main 0028                          __size_of_IOC_ISR 000F  
            ?_setDimmerLights_IntrControl 0070            getMain_All_Error_Status@status 0026  
                        __size_of_IOC_Set 000C              __end_of_Flash_Memory_Erasing 1B83  
                          ?_SwPointSelect 0070                               getAD@adcon0 0023  
                             getAD@adcon1 0020                            setLED_Main@led 0024  
                    __end_of_WDT_Clearing 0004                       __end_of_setLog_Code 11CD  
                   _DlyOff_Initialization 1AE6                      ??_CC2500_ClearRXFIFO 0024  
                    ??_CC2500_ClearTXFIFO 0024                 __end_of_CC2500_rfSettings 105E  
                        __size_of_RF_Main 0003                                  _Fosc_Set 1ADD  
                        __size_of_WDT_Set 000C                     setRFSW_Control@status 006C  
                      __end_of_getLoad_AD 0CEA                        __end_of_getLoad_OK 1B1F  
                   _Switch_Initialization 1BBF         __size_of_getMain_All_Error_Status 0033  
                    ??_Flash_Memory_Write 0020                         ??_setDimmerLights 006C  
               ?_getMain_All_Error_Status 0070                      __size_of_Buzzer_Main 004A  
                      __end_of_getTemp_AD 139F                                ?_setTxData 0070  
                            ?_Switch_Main 0070                ??_DimmerIntrIOCPointSelect 0070  
                        _CC2500_WriteByte 1DC8                         getLoad_AD@channel 0026  
            Flash_Memory_Initialization@i 0063                                  _SwDetect 00D1  
                             ??_Temp_Main 0069                         setRFSW_Control@sw 006D  
           _getMain_All_Error_Status$3606 0021             _getMain_All_Error_Status$3607 0023  
                __end_of_getDimmer_LoadGO 1B27                       _Load_Initialization 1AC2  
                               setLED@led 0023                   ??_DimmerIntrPointSelect 0070  
                            _setTemp_Main 0F50                          __size_of___awdiv 0054  
                        __size_of___ftadd 00F6                          ?_setRFSW_Control 0070  
                        __size_of___ftdiv 00A9                          __size_of___ftneg 0009  
                        __size_of___ftmul 00B4                          __size_of___fttol 0087  
                        __size_of___lwdiv 0037                  setDimmerLights_SwOn@idle 0030  
                                ___awtoft 1F23                          ??_LedPointSelect 0020  
                                ___ftpack 0923             __size_of_getMain_Lights_Count 0014  
                  getDimmer_LoadGO@loadgo 0020             __size_of_getMain_LightsStatus 0013  
                       getTemp_AD@channel 0025                              ??_setRF_Main 00ED  
                    CC2500_WriteREG@value 0022                               _setLED_Main 139F  
              __end_of_setRF_DimmerLights 1800            __size_of_getDimmer_Load_Status 0008  
                ?_DelayOff_Initialization 0070                          getDelayOff_GO@go 0023  
                        getDelayOff_GO@sw 0022             __end_of_getDimmer_Load_Status 1B2F  
                        setDelayOff_GO@sw 0069                           ___lwdiv@divisor 0020  
                    ?_Load_Initialization 0070        __size_of_getAll_DimmerLights_AdjSw 002D  
                         ___lwdiv@counter 0025                                  __ptext10 1ACB  
                                __ptext11 1066                                  __ptext20 1D9B  
                                __ptext12 1B54                                  __ptext21 1AC8  
                                __ptext13 01F5                                  __ptext30 1137  
                                __ptext22 0E0C                                  __ptext14 1D5D  
                                __ptext31 1F68                                  __ptext23 0BEA  
                                __ptext15 123A                                  __ptext40 1F8C  
                                __ptext32 0AAF                                  __ptext24 1199  
                                __ptext16 1EA4                                  __ptext41 1E4A  
                                __ptext33 071B                                  __ptext25 1CD2  
                                __ptext17 1D49                                  __ptext50 1AF8  
                                __ptext42 1AC5                                  __ptext34 1CBF  
                                __ptext26 0B14                                  __ptext18 1BBF  
                                __ptext51 0049                                  __ptext43 1B49  
                                __ptext35 1C1B                                  __ptext27 150B  
                                __ptext19 1B2F                                  __ptext60 1B8F  
                                __ptext52 1D35                                  __ptext44 1C62  
                                __ptext36 1C0A                                  __ptext28 086A  
                                __ptext61 139F                                  __ptext53 1B27  
                                __ptext45 1BB3                                  __ptext37 1CAC  
                                __ptext29 1323                                  __ptext70 1B40  
                                __ptext62 1B83                                  __ptext54 1B1F  
                                __ptext46 1BA7                                  __ptext38 09E6  
                                __ptext71 1E14                                  __ptext63 1C50  
                                __ptext55 10DB                                  __ptext47 1DE1  
                                __ptext39 0B7B                                  __ptext80 0A4A  
                                __ptext72 055F                                  __ptext64 11CD  
                                __ptext56 1E67                                  __ptext48 1B9B  
                                __ptext81 0CEA                                  __ptext73 1D21  
                                __ptext65 146E                                  __ptext57 1203  
                                __ptext49 1ADD                                  __ptext90 1272  
                                __ptext82 1B37                                  __ptext74 1EE3  
                                __ptext66 1B77                                  __ptext58 1AC2  
                                __ptext91 1B17                                  __ptext83 0EA7  
                                __ptext75 155A                                  __ptext67 063F  
                                __ptext59 1E2E                                  __ptext92 1C99  
                                __ptext84 0469                                  __ptext76 16F6  
                                __ptext68 1B6B                                  __ptext93 1166  
                                __ptext85 1F23                                  __ptext77 15AA  
                                __ptext69 1108                                  __ptext94 1D0D  
                                __ptext86 0923                                  __ptext78 0D71  
                                __ptext95 07CF                                  __ptext87 164F  
                                __ptext79 17A7                                  __ptext96 1B0F  
                                __ptext88 1EC3                                  __ptext97 08C6  
                                __ptext89 1DB0                                  __ptext98 0984  
                                __ptext99 14BC                                  __product 0245  
           ??_setDimmerLights_IntrControl 0072                   ??_setLED_Initialization 0024  
                ??_getDimmerLights_Status 0022              __end_of_getDimmerLights_Line 1D35  
            __end_of_setDimmerLights_Main 15AA              __end_of_setDimmerLights_Line 1DC8  
            __end_of_setDimmerLights_SwOn 08C6                              ??_setSw_Main 006B  
                           setLED@command 0022                             __size_of_main 005B  
                             _setRF_Learn 1D5D                  __end_of_CC2500_SIDLEMode 1ADD  
              setDimmerLights_Main@lights 006E               __end_of_DelayOffPointSelect 1D0D  
              CC2500_WriteCommand@command 0023                      setRF_Main@Receive_OK 0266  
               __size_of_setDimmerReClock 0008                   setDimmerLights_AdjOn@sw 0027  
                         _CC2500_ReadByte 1E4A                        _CC2500_InitPATable 1E85  
                __end_of_setMemory_Modify 1CD2                        __end_of_setRF_Main 0EA7  
                             ??_getBuz_GO 0022               __size_of_Mcu_Initialization 0012  
             setDimmerLights_ErrorClose@i 00EA                      _CC2500_patable_vaule 105E  
                             ??_getRxData 006E                              getLoad_OK@ok 0020  
                                main@argc 0268                                  main@argv 026A  
                     ?_CC2500_InitPATable 0070                      _getSw_KeyStatus$6247 0021  
                    _getSw_KeyStatus$6248 0022                           _CC2500_PowerRST 13E0  
                __size_of_getSw_KeyStatus 001F               __end_of_Flash_Memory_Modify 14BC  
                       ??_getPercentValue 005C                               _setLog_Code 1199  
             __end_of_Flash_Memory_Unlock 1B49                           ??_SwPointSelect 0020  
                         _CC2500_WriteREG 1F45                        __end_of_setSw_Main 0368  
                   ??_Load_Initialization 0022                             _Transceive_OK 03C1  
                  ?_DlyOff_Initialization 0070                            _DelayTimejudge 10B1  
                             pic14e$flags 007E              ??_setDimmerLights_IntrIOC_GO 0072  
              setDimmerLights_Line@lights 0020              ??_setDimmerLights_ErrorClose 006B  
                 setDimmerLights_SwOff@sw 006A               __size_of_setMemory_LoopSave 0013  
       __end_of_getAll_DimmerLights_AdjSw 1108                                  intlevel1 0000  
                    ??_CC2500_InitPATable 0025                    ?_Switch_Initialization 0070  
                 ??_CC2500_PowerOnInitial 0029    __end_of_setDimmerLights_Initialization 0800  
 __size_of_setDimmerLights_Initialization 0031            _setDimmerLights_Initialization 07CF  
             __end_of_setDimmerLights_Adj 174E                   ?_setTemp_Initialization 0070  
                             ??_setTxData 0020                    CC2500_InitPATable@temp 0026  
                   __size_of_RF_RxDisable 0013                         _RF_Initialization 1AC5  
    __size_of_setDimmerLights_IntrControl 0101                               getLoad_AD@i 0029  
                             getLoad_AD@j 0028                               getLoad_AD@k 0027  
                    _Flash_Memory_Erasing 1B77                        ?_RF_Initialization 0070  
                              _SPI0Buffer 00D0                   __size_of_Exception_Main 00E0  
         __end_of_DelayOff_Initialization 1B0F       __size_of_setDimmerLights_IntrIOC_GO 003B  
     __size_of_setDimmerLights_ErrorClose 0062                     __size_of_WDT_Clearing 0002  
                   __end_of_DelayOff_Main 1B17                       ??_RF_Initialization 0021  
                 __size_of_setMemory_Data 000C                            _setDelayOff_GO 15FC  
        __size_of_setControl_Lights_Table 0067                    __end_of_DelayTimejudge 10DB  
             getDimmer_Load_Status@status 0020      __size_of_Flash_Memory_Initialization 00DC  
             __size_of_set_TimeoutCleared 0005                             ??_DlyOff_Main 006C  
                   setMemory_Data@address 0022                     __end_of_DelayTime_1us 1FD7  
                 __end_of_CC2500_ReadByte 1E67              __end_of_setSw_Initialization 1B37  
                         _Timeout_Counter 1D71           __size_of_getDimmerLights_Status 0011  
                    getPercentValue@value 005E                              _RF_RxDisable 1CAC  
              __end_of_LED_Initialization 1B8F            __end_of_setTemp_Initialization 1067  
                __size_of_setPercentValue 0065                   setMemory_Modify@command 0021  
                    setPercentValue@value 005E                 __end_of_RF_Initialization 1AC8  
                   __end_of_CC2500_RxData 0BEA                     __end_of_CC2500_TxData 0A4A  
                   _setLoad_AH_AL_Restore 1E2E                   __end_of_CC2500_PowerRST 1424  
