

Microchip Technology PIC LITE Macro Assembler V1.32 build 58300 
                                                                                               Thu Dec 25 17:01:48 2014

Microchip Technology Omniscient Code Generator (Lite mode) build 58300
     1                           	processor	16F1518
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK4,global,class=CODE,delta=2
     5                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     6                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
     9                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    13                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    14                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    15                           	psect	dataBANK4,global,class=BANK4,space=1,delta=1
    16                           	psect	clrtext,global,class=CODE,delta=2
    17                           	psect	inittext,global,class=CODE,delta=2
    18                           	psect	cstackBANK4,global,class=BANK4,space=1,delta=1
    19                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1
    20                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    21                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    22                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    23                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    24                           	psect	text1,local,class=CODE,merge=1,inline,delta=2
    25                           	psect	text2,local,class=CODE,merge=1,delta=2
    26                           	psect	text3,local,class=CODE,merge=1,inline,delta=2
    27                           	psect	text4,local,class=CODE,merge=1,inline,delta=2
    28                           	psect	text5,local,class=CODE,merge=1,inline,delta=2
    29                           	psect	text6,local,class=CODE,merge=1,delta=2
    30                           	psect	text7,local,class=CODE,merge=1,delta=2
    31                           	psect	text8,local,class=CODE,merge=1,inline,delta=2
    32                           	psect	text9,local,class=CODE,merge=1,delta=2
    33                           	psect	text10,local,class=CODE,merge=1,inline,delta=2
    34                           	psect	text11,local,class=CODE,merge=1,delta=2
    35                           	psect	text12,local,class=CODE,merge=1,inline,delta=2
    36                           	psect	text13,local,class=CODE,merge=1,delta=2
    37                           	psect	text14,local,class=CODE,merge=1,inline,delta=2
    38                           	psect	text15,local,class=CODE,merge=1,delta=2
    39                           	psect	text16,local,class=CODE,merge=1,delta=2
    40                           	psect	text17,local,class=CODE,merge=1,delta=2
    41                           	psect	text18,local,class=CODE,merge=1,inline,delta=2
    42                           	psect	text19,local,class=CODE,merge=1,delta=2
    43                           	psect	text20,local,class=CODE,merge=1,delta=2
    44                           	psect	text21,local,class=CODE,merge=1,inline,delta=2
    45                           	psect	text22,local,class=CODE,merge=1,inline,delta=2
    46                           	psect	text23,local,class=CODE,merge=1,inline,delta=2
    47                           	psect	text24,local,class=CODE,merge=1,inline,delta=2
    48                           	psect	text25,local,class=CODE,merge=1,inline,delta=2
    49                           	psect	text26,local,class=CODE,merge=1,inline,delta=2
    50                           	psect	text27,local,class=CODE,merge=1,delta=2
    51                           	psect	text28,local,class=CODE,merge=1,inline,delta=2
    52                           	psect	text29,local,class=CODE,merge=1,inline,delta=2
    53                           	psect	text30,local,class=CODE,merge=1,delta=2
    54                           	psect	text31,local,class=CODE,merge=1,inline,delta=2
    55                           	psect	text32,local,class=CODE,merge=1,inline,delta=2
    56                           	psect	text33,local,class=CODE,merge=1,delta=2
    57                           	psect	text34,local,class=CODE,merge=1,delta=2
    58                           	psect	text35,local,class=CODE,merge=1,delta=2
    59                           	psect	text36,local,class=CODE,merge=1,delta=2
    60                           	psect	text37,local,class=CODE,merge=1,inline,delta=2
    61                           	psect	text38,local,class=CODE,merge=1,delta=2
    62                           	psect	text39,local,class=CODE,merge=1,inline,delta=2
    63                           	psect	text40,local,class=CODE,merge=1,delta=2
    64                           	psect	text41,local,class=CODE,merge=1,delta=2
    65                           	psect	text42,local,class=CODE,merge=1,delta=2
    66                           	psect	text43,local,class=CODE,merge=1,delta=2
    67                           	psect	text44,local,class=CODE,merge=1,delta=2
    68                           	psect	text45,local,class=CODE,merge=1,delta=2
    69                           	psect	text46,local,class=CODE,merge=1,delta=2
    70                           	psect	text47,local,class=CODE,merge=1,delta=2
    71                           	psect	text48,local,class=CODE,merge=1,delta=2
    72                           	psect	text49,local,class=CODE,merge=1,delta=2
    73                           	psect	text50,local,class=CODE,merge=1,delta=2
    74                           	psect	text51,local,class=CODE,merge=1,delta=2
    75                           	psect	text52,local,class=CODE,merge=1,delta=2
    76                           	psect	text53,local,class=CODE,merge=1,delta=2
    77                           	psect	text54,local,class=CODE,merge=1,delta=2
    78                           	psect	text55,local,class=CODE,merge=1,inline,delta=2
    79                           	psect	text56,local,class=CODE,merge=1,inline,delta=2
    80                           	psect	text57,local,class=CODE,merge=1,delta=2
    81                           	psect	text58,local,class=CODE,merge=1,inline,delta=2
    82                           	psect	text59,local,class=CODE,merge=1,inline,delta=2
    83                           	psect	text60,local,class=CODE,merge=1,delta=2
    84                           	psect	text61,local,class=CODE,merge=1,delta=2
    85                           	psect	text62,local,class=CODE,merge=1,inline,delta=2
    86                           	psect	text63,local,class=CODE,merge=1,delta=2
    87                           	psect	text64,local,class=CODE,merge=1,delta=2
    88                           	psect	text65,local,class=CODE,merge=1,delta=2
    89                           	psect	text66,local,class=CODE,merge=1,delta=2
    90                           	psect	text67,local,class=CODE,merge=1,inline,delta=2
    91                           	psect	text68,local,class=CODE,merge=1,delta=2
    92                           	psect	text69,local,class=CODE,merge=1,delta=2
    93                           	psect	text70,local,class=CODE,merge=1,delta=2
    94                           	psect	text71,local,class=CODE,merge=1,delta=2
    95                           	psect	text72,local,class=CODE,merge=1,delta=2
    96                           	psect	text73,local,class=CODE,merge=1,delta=2
    97                           	psect	text74,local,class=CODE,merge=1,inline,delta=2
    98                           	psect	text75,local,class=CODE,merge=1,delta=2
    99                           	psect	text76,local,class=CODE,merge=1,inline,delta=2
   100                           	psect	text77,local,class=CODE,merge=1,delta=2
   101                           	psect	text78,local,class=CODE,merge=1,inline,delta=2
   102                           	psect	text79,local,class=CODE,merge=1,delta=2
   103                           	psect	text80,local,class=CODE,merge=1,delta=2
   104                           	psect	text81,local,class=CODE,merge=1,delta=2
   105                           	psect	text82,local,class=CODE,merge=1,delta=2
   106                           	psect	text83,local,class=CODE,merge=1,delta=2
   107                           	psect	text84,local,class=CODE,merge=1,delta=2
   108                           	psect	text85,local,class=CODE,merge=1,delta=2
   109                           	psect	text86,local,class=CODE,merge=1,delta=2
   110                           	psect	text87,local,class=CODE,merge=1,delta=2
   111                           	psect	text88,local,class=CODE,merge=1,delta=2
   112                           	psect	text89,local,class=CODE,merge=1,delta=2
   113                           	psect	text90,local,class=CODE,merge=1,delta=2
   114                           	psect	text91,local,class=CODE,merge=1,delta=2
   115                           	psect	text92,local,class=CODE,merge=1,delta=2
   116                           	psect	text93,local,class=CODE,merge=1,inline,delta=2
   117                           	psect	text94,local,class=CODE,merge=1,delta=2
   118                           	psect	text95,local,class=CODE,merge=1,inline,delta=2
   119                           	psect	text96,local,class=CODE,merge=1,inline,delta=2
   120                           	psect	text97,local,class=CODE,merge=1,delta=2
   121                           	psect	text98,local,class=CODE,merge=1,delta=2
   122                           	psect	text99,local,class=CODE,merge=1,delta=2
   123                           	psect	text100,local,class=CODE,merge=1,delta=2
   124                           	psect	text101,local,class=CODE,merge=1,delta=2
   125                           	psect	text102,local,class=CODE,merge=1,delta=2
   126                           	psect	text103,local,class=CODE,merge=1,delta=2
   127                           	psect	text104,local,class=CODE,merge=1,delta=2
   128                           	psect	text105,local,class=CODE,merge=1,delta=2
   129                           	psect	text106,local,class=CODE,merge=1,delta=2
   130                           	psect	text107,local,class=CODE,merge=1,delta=2
   131                           	psect	text108,local,class=CODE,merge=1,delta=2
   132                           	psect	text109,local,class=CODE,merge=1,delta=2
   133                           	psect	text110,local,class=CODE,merge=1,delta=2
   134                           	psect	text111,local,class=CODE,merge=1,delta=2
   135                           	psect	text112,local,class=CODE,merge=1,delta=2
   136                           	psect	text113,local,class=CODE,merge=1,inline,delta=2
   137                           	psect	text114,local,class=CODE,merge=1,delta=2
   138                           	psect	text115,local,class=CODE,merge=1,delta=2
   139                           	psect	text116,local,class=CODE,merge=1,delta=2
   140                           	psect	text117,local,class=CODE,merge=1,delta=2
   141                           	psect	text118,local,class=CODE,merge=1,inline,delta=2
   142                           	psect	text119,local,class=CODE,merge=1,delta=2
   143                           	psect	text120,local,class=CODE,merge=1,delta=2
   144                           	psect	text121,local,class=CODE,merge=1,delta=2
   145                           	psect	text122,local,class=CODE,merge=1,delta=2
   146                           	psect	text123,local,class=CODE,merge=1,delta=2
   147                           	psect	text124,local,class=CODE,merge=1,delta=2
   148                           	psect	text125,local,class=CODE,merge=1,delta=2
   149                           	psect	text126,local,class=CODE,merge=1,inline,delta=2
   150                           	psect	text127,local,class=CODE,merge=1,delta=2
   151                           	psect	text128,local,class=CODE,merge=1,delta=2
   152                           	psect	text129,local,class=CODE,merge=1,inline,delta=2
   153                           	psect	text130,local,class=CODE,merge=1,inline,delta=2
   154                           	psect	intentry,global,class=CODE,delta=2
   155                           	psect	text132,local,class=CODE,merge=1,inline,delta=2
   156                           	psect	text133,local,class=CODE,merge=1,inline,delta=2
   157                           	psect	text134,local,class=CODE,merge=1,inline,delta=2
   158                           	psect	text135,local,class=CODE,merge=1,inline,delta=2
   159                           	dabs	1,0x7E,2
   160  0000                     	;# 
   161  0001                     	;# 
   162  0002                     	;# 
   163  0003                     	;# 
   164  0004                     	;# 
   165  0005                     	;# 
   166  0006                     	;# 
   167  0007                     	;# 
   168  0008                     	;# 
   169  0009                     	;# 
   170  000A                     	;# 
   171  000B                     	;# 
   172  000C                     	;# 
   173  000D                     	;# 
   174  000E                     	;# 
   175  0010                     	;# 
   176  0011                     	;# 
   177  0012                     	;# 
   178  0015                     	;# 
   179  0016                     	;# 
   180  0016                     	;# 
   181  0017                     	;# 
   182  0018                     	;# 
   183  0019                     	;# 
   184  001A                     	;# 
   185  001B                     	;# 
   186  001C                     	;# 
   187  008C                     	;# 
   188  008D                     	;# 
   189  008E                     	;# 
   190  0090                     	;# 
   191  0091                     	;# 
   192  0092                     	;# 
   193  0095                     	;# 
   194  0096                     	;# 
   195  0097                     	;# 
   196  0099                     	;# 
   197  009A                     	;# 
   198  009B                     	;# 
   199  009B                     	;# 
   200  009C                     	;# 
   201  009D                     	;# 
   202  009E                     	;# 
   203  010C                     	;# 
   204  010D                     	;# 
   205  010E                     	;# 
   206  0116                     	;# 
   207  0117                     	;# 
   208  011D                     	;# 
   209  018C                     	;# 
   210  018D                     	;# 
   211  018E                     	;# 
   212  0191                     	;# 
   213  0191                     	;# 
   214  0192                     	;# 
   215  0193                     	;# 
   216  0193                     	;# 
   217  0194                     	;# 
   218  0195                     	;# 
   219  0196                     	;# 
   220  0197                     	;# 
   221  0199                     	;# 
   222  019A                     	;# 
   223  019B                     	;# 
   224  019B                     	;# 
   225  019B                     	;# 
   226  019B                     	;# 
   227  019C                     	;# 
   228  019C                     	;# 
   229  019D                     	;# 
   230  019E                     	;# 
   231  019F                     	;# 
   232  020D                     	;# 
   233  0210                     	;# 
   234  0211                     	;# 
   235  0211                     	;# 
   236  0212                     	;# 
   237  0212                     	;# 
   238  0213                     	;# 
   239  0213                     	;# 
   240  0214                     	;# 
   241  0214                     	;# 
   242  0215                     	;# 
   243  0215                     	;# 
   244  0215                     	;# 
   245  0216                     	;# 
   246  0216                     	;# 
   247  0217                     	;# 
   248  0217                     	;# 
   249  0291                     	;# 
   250  0291                     	;# 
   251  0292                     	;# 
   252  0293                     	;# 
   253  0298                     	;# 
   254  0298                     	;# 
   255  0299                     	;# 
   256  029A                     	;# 
   257  0394                     	;# 
   258  0395                     	;# 
   259  0396                     	;# 
   260  0FE4                     	;# 
   261  0FE5                     	;# 
   262  0FE6                     	;# 
   263  0FE7                     	;# 
   264  0FE8                     	;# 
   265  0FE9                     	;# 
   266  0FEA                     	;# 
   267  0FEB                     	;# 
   268  0FED                     	;# 
   269  0FEE                     	;# 
   270  0FEF                     	;# 
   271  0000                     	;# 
   272  0001                     	;# 
   273  0002                     	;# 
   274  0003                     	;# 
   275  0004                     	;# 
   276  0005                     	;# 
   277  0006                     	;# 
   278  0007                     	;# 
   279  0008                     	;# 
   280  0009                     	;# 
   281  000A                     	;# 
   282  000B                     	;# 
   283  000C                     	;# 
   284  000D                     	;# 
   285  000E                     	;# 
   286  0010                     	;# 
   287  0011                     	;# 
   288  0012                     	;# 
   289  0015                     	;# 
   290  0016                     	;# 
   291  0016                     	;# 
   292  0017                     	;# 
   293  0018                     	;# 
   294  0019                     	;# 
   295  001A                     	;# 
   296  001B                     	;# 
   297  001C                     	;# 
   298  008C                     	;# 
   299  008D                     	;# 
   300  008E                     	;# 
   301  0090                     	;# 
   302  0091                     	;# 
   303  0092                     	;# 
   304  0095                     	;# 
   305  0096                     	;# 
   306  0097                     	;# 
   307  0099                     	;# 
   308  009A                     	;# 
   309  009B                     	;# 
   310  009B                     	;# 
   311  009C                     	;# 
   312  009D                     	;# 
   313  009E                     	;# 
   314  010C                     	;# 
   315  010D                     	;# 
   316  010E                     	;# 
   317  0116                     	;# 
   318  0117                     	;# 
   319  011D                     	;# 
   320  018C                     	;# 
   321  018D                     	;# 
   322  018E                     	;# 
   323  0191                     	;# 
   324  0191                     	;# 
   325  0192                     	;# 
   326  0193                     	;# 
   327  0193                     	;# 
   328  0194                     	;# 
   329  0195                     	;# 
   330  0196                     	;# 
   331  0197                     	;# 
   332  0199                     	;# 
   333  019A                     	;# 
   334  019B                     	;# 
   335  019B                     	;# 
   336  019B                     	;# 
   337  019B                     	;# 
   338  019C                     	;# 
   339  019C                     	;# 
   340  019D                     	;# 
   341  019E                     	;# 
   342  019F                     	;# 
   343  020D                     	;# 
   344  0210                     	;# 
   345  0211                     	;# 
   346  0211                     	;# 
   347  0212                     	;# 
   348  0212                     	;# 
   349  0213                     	;# 
   350  0213                     	;# 
   351  0214                     	;# 
   352  0214                     	;# 
   353  0215                     	;# 
   354  0215                     	;# 
   355  0215                     	;# 
   356  0216                     	;# 
   357  0216                     	;# 
   358  0217                     	;# 
   359  0217                     	;# 
   360  0291                     	;# 
   361  0291                     	;# 
   362  0292                     	;# 
   363  0293                     	;# 
   364  0298                     	;# 
   365  0298                     	;# 
   366  0299                     	;# 
   367  029A                     	;# 
   368  0394                     	;# 
   369  0395                     	;# 
   370  0396                     	;# 
   371  0FE4                     	;# 
   372  0FE5                     	;# 
   373  0FE6                     	;# 
   374  0FE7                     	;# 
   375  0FE8                     	;# 
   376  0FE9                     	;# 
   377  0FEA                     	;# 
   378  0FEB                     	;# 
   379  0FED                     	;# 
   380  0FEE                     	;# 
   381  0FEF                     	;# 
   382  0000                     	;# 
   383  0001                     	;# 
   384  0002                     	;# 
   385  0003                     	;# 
   386  0004                     	;# 
   387  0005                     	;# 
   388  0006                     	;# 
   389  0007                     	;# 
   390  0008                     	;# 
   391  0009                     	;# 
   392  000A                     	;# 
   393  000B                     	;# 
   394  000C                     	;# 
   395  000D                     	;# 
   396  000E                     	;# 
   397  0010                     	;# 
   398  0011                     	;# 
   399  0012                     	;# 
   400  0015                     	;# 
   401  0016                     	;# 
   402  0016                     	;# 
   403  0017                     	;# 
   404  0018                     	;# 
   405  0019                     	;# 
   406  001A                     	;# 
   407  001B                     	;# 
   408  001C                     	;# 
   409  008C                     	;# 
   410  008D                     	;# 
   411  008E                     	;# 
   412  0090                     	;# 
   413  0091                     	;# 
   414  0092                     	;# 
   415  0095                     	;# 
   416  0096                     	;# 
   417  0097                     	;# 
   418  0099                     	;# 
   419  009A                     	;# 
   420  009B                     	;# 
   421  009B                     	;# 
   422  009C                     	;# 
   423  009D                     	;# 
   424  009E                     	;# 
   425  010C                     	;# 
   426  010D                     	;# 
   427  010E                     	;# 
   428  0116                     	;# 
   429  0117                     	;# 
   430  011D                     	;# 
   431  018C                     	;# 
   432  018D                     	;# 
   433  018E                     	;# 
   434  0191                     	;# 
   435  0191                     	;# 
   436  0192                     	;# 
   437  0193                     	;# 
   438  0193                     	;# 
   439  0194                     	;# 
   440  0195                     	;# 
   441  0196                     	;# 
   442  0197                     	;# 
   443  0199                     	;# 
   444  019A                     	;# 
   445  019B                     	;# 
   446  019B                     	;# 
   447  019B                     	;# 
   448  019B                     	;# 
   449  019C                     	;# 
   450  019C                     	;# 
   451  019D                     	;# 
   452  019E                     	;# 
   453  019F                     	;# 
   454  020D                     	;# 
   455  0210                     	;# 
   456  0211                     	;# 
   457  0211                     	;# 
   458  0212                     	;# 
   459  0212                     	;# 
   460  0213                     	;# 
   461  0213                     	;# 
   462  0214                     	;# 
   463  0214                     	;# 
   464  0215                     	;# 
   465  0215                     	;# 
   466  0215                     	;# 
   467  0216                     	;# 
   468  0216                     	;# 
   469  0217                     	;# 
   470  0217                     	;# 
   471  0291                     	;# 
   472  0291                     	;# 
   473  0292                     	;# 
   474  0293                     	;# 
   475  0298                     	;# 
   476  0298                     	;# 
   477  0299                     	;# 
   478  029A                     	;# 
   479  0394                     	;# 
   480  0395                     	;# 
   481  0396                     	;# 
   482  0FE4                     	;# 
   483  0FE5                     	;# 
   484  0FE6                     	;# 
   485  0FE7                     	;# 
   486  0FE8                     	;# 
   487  0FE9                     	;# 
   488  0FEA                     	;# 
   489  0FEB                     	;# 
   490  0FED                     	;# 
   491  0FEE                     	;# 
   492  0FEF                     	;# 
   493  0000                     	;# 
   494  0001                     	;# 
   495  0002                     	;# 
   496  0003                     	;# 
   497  0004                     	;# 
   498  0005                     	;# 
   499  0006                     	;# 
   500  0007                     	;# 
   501  0008                     	;# 
   502  0009                     	;# 
   503  000A                     	;# 
   504  000B                     	;# 
   505  000C                     	;# 
   506  000D                     	;# 
   507  000E                     	;# 
   508  0010                     	;# 
   509  0011                     	;# 
   510  0012                     	;# 
   511  0015                     	;# 
   512  0016                     	;# 
   513  0016                     	;# 
   514  0017                     	;# 
   515  0018                     	;# 
   516  0019                     	;# 
   517  001A                     	;# 
   518  001B                     	;# 
   519  001C                     	;# 
   520  008C                     	;# 
   521  008D                     	;# 
   522  008E                     	;# 
   523  0090                     	;# 
   524  0091                     	;# 
   525  0092                     	;# 
   526  0095                     	;# 
   527  0096                     	;# 
   528  0097                     	;# 
   529  0099                     	;# 
   530  009A                     	;# 
   531  009B                     	;# 
   532  009B                     	;# 
   533  009C                     	;# 
   534  009D                     	;# 
   535  009E                     	;# 
   536  010C                     	;# 
   537  010D                     	;# 
   538  010E                     	;# 
   539  0116                     	;# 
   540  0117                     	;# 
   541  011D                     	;# 
   542  018C                     	;# 
   543  018D                     	;# 
   544  018E                     	;# 
   545  0191                     	;# 
   546  0191                     	;# 
   547  0192                     	;# 
   548  0193                     	;# 
   549  0193                     	;# 
   550  0194                     	;# 
   551  0195                     	;# 
   552  0196                     	;# 
   553  0197                     	;# 
   554  0199                     	;# 
   555  019A                     	;# 
   556  019B                     	;# 
   557  019B                     	;# 
   558  019B                     	;# 
   559  019B                     	;# 
   560  019C                     	;# 
   561  019C                     	;# 
   562  019D                     	;# 
   563  019E                     	;# 
   564  019F                     	;# 
   565  020D                     	;# 
   566  0210                     	;# 
   567  0211                     	;# 
   568  0211                     	;# 
   569  0212                     	;# 
   570  0212                     	;# 
   571  0213                     	;# 
   572  0213                     	;# 
   573  0214                     	;# 
   574  0214                     	;# 
   575  0215                     	;# 
   576  0215                     	;# 
   577  0215                     	;# 
   578  0216                     	;# 
   579  0216                     	;# 
   580  0217                     	;# 
   581  0217                     	;# 
   582  0291                     	;# 
   583  0291                     	;# 
   584  0292                     	;# 
   585  0293                     	;# 
   586  0298                     	;# 
   587  0298                     	;# 
   588  0299                     	;# 
   589  029A                     	;# 
   590  0394                     	;# 
   591  0395                     	;# 
   592  0396                     	;# 
   593  0FE4                     	;# 
   594  0FE5                     	;# 
   595  0FE6                     	;# 
   596  0FE7                     	;# 
   597  0FE8                     	;# 
   598  0FE9                     	;# 
   599  0FEA                     	;# 
   600  0FEB                     	;# 
   601  0FED                     	;# 
   602  0FEE                     	;# 
   603  0FEF                     	;# 
   604  0000                     	;# 
   605  0001                     	;# 
   606  0002                     	;# 
   607  0003                     	;# 
   608  0004                     	;# 
   609  0005                     	;# 
   610  0006                     	;# 
   611  0007                     	;# 
   612  0008                     	;# 
   613  0009                     	;# 
   614  000A                     	;# 
   615  000B                     	;# 
   616  000C                     	;# 
   617  000D                     	;# 
   618  000E                     	;# 
   619  0010                     	;# 
   620  0011                     	;# 
   621  0012                     	;# 
   622  0015                     	;# 
   623  0016                     	;# 
   624  0016                     	;# 
   625  0017                     	;# 
   626  0018                     	;# 
   627  0019                     	;# 
   628  001A                     	;# 
   629  001B                     	;# 
   630  001C                     	;# 
   631  008C                     	;# 
   632  008D                     	;# 
   633  008E                     	;# 
   634  0090                     	;# 
   635  0091                     	;# 
   636  0092                     	;# 
   637  0095                     	;# 
   638  0096                     	;# 
   639  0097                     	;# 
   640  0099                     	;# 
   641  009A                     	;# 
   642  009B                     	;# 
   643  009B                     	;# 
   644  009C                     	;# 
   645  009D                     	;# 
   646  009E                     	;# 
   647  010C                     	;# 
   648  010D                     	;# 
   649  010E                     	;# 
   650  0116                     	;# 
   651  0117                     	;# 
   652  011D                     	;# 
   653  018C                     	;# 
   654  018D                     	;# 
   655  018E                     	;# 
   656  0191                     	;# 
   657  0191                     	;# 
   658  0192                     	;# 
   659  0193                     	;# 
   660  0193                     	;# 
   661  0194                     	;# 
   662  0195                     	;# 
   663  0196                     	;# 
   664  0197                     	;# 
   665  0199                     	;# 
   666  019A                     	;# 
   667  019B                     	;# 
   668  019B                     	;# 
   669  019B                     	;# 
   670  019B                     	;# 
   671  019C                     	;# 
   672  019C                     	;# 
   673  019D                     	;# 
   674  019E                     	;# 
   675  019F                     	;# 
   676  020D                     	;# 
   677  0210                     	;# 
   678  0211                     	;# 
   679  0211                     	;# 
   680  0212                     	;# 
   681  0212                     	;# 
   682  0213                     	;# 
   683  0213                     	;# 
   684  0214                     	;# 
   685  0214                     	;# 
   686  0215                     	;# 
   687  0215                     	;# 
   688  0215                     	;# 
   689  0216                     	;# 
   690  0216                     	;# 
   691  0217                     	;# 
   692  0217                     	;# 
   693  0291                     	;# 
   694  0291                     	;# 
   695  0292                     	;# 
   696  0293                     	;# 
   697  0298                     	;# 
   698  0298                     	;# 
   699  0299                     	;# 
   700  029A                     	;# 
   701  0394                     	;# 
   702  0395                     	;# 
   703  0396                     	;# 
   704  0FE4                     	;# 
   705  0FE5                     	;# 
   706  0FE6                     	;# 
   707  0FE7                     	;# 
   708  0FE8                     	;# 
   709  0FE9                     	;# 
   710  0FEA                     	;# 
   711  0FEB                     	;# 
   712  0FED                     	;# 
   713  0FEE                     	;# 
   714  0FEF                     	;# 
   715  0000                     	;# 
   716  0001                     	;# 
   717  0002                     	;# 
   718  0003                     	;# 
   719  0004                     	;# 
   720  0005                     	;# 
   721  0006                     	;# 
   722  0007                     	;# 
   723  0008                     	;# 
   724  0009                     	;# 
   725  000A                     	;# 
   726  000B                     	;# 
   727  000C                     	;# 
   728  000D                     	;# 
   729  000E                     	;# 
   730  0010                     	;# 
   731  0011                     	;# 
   732  0012                     	;# 
   733  0015                     	;# 
   734  0016                     	;# 
   735  0016                     	;# 
   736  0017                     	;# 
   737  0018                     	;# 
   738  0019                     	;# 
   739  001A                     	;# 
   740  001B                     	;# 
   741  001C                     	;# 
   742  008C                     	;# 
   743  008D                     	;# 
   744  008E                     	;# 
   745  0090                     	;# 
   746  0091                     	;# 
   747  0092                     	;# 
   748  0095                     	;# 
   749  0096                     	;# 
   750  0097                     	;# 
   751  0099                     	;# 
   752  009A                     	;# 
   753  009B                     	;# 
   754  009B                     	;# 
   755  009C                     	;# 
   756  009D                     	;# 
   757  009E                     	;# 
   758  010C                     	;# 
   759  010D                     	;# 
   760  010E                     	;# 
   761  0116                     	;# 
   762  0117                     	;# 
   763  011D                     	;# 
   764  018C                     	;# 
   765  018D                     	;# 
   766  018E                     	;# 
   767  0191                     	;# 
   768  0191                     	;# 
   769  0192                     	;# 
   770  0193                     	;# 
   771  0193                     	;# 
   772  0194                     	;# 
   773  0195                     	;# 
   774  0196                     	;# 
   775  0197                     	;# 
   776  0199                     	;# 
   777  019A                     	;# 
   778  019B                     	;# 
   779  019B                     	;# 
   780  019B                     	;# 
   781  019B                     	;# 
   782  019C                     	;# 
   783  019C                     	;# 
   784  019D                     	;# 
   785  019E                     	;# 
   786  019F                     	;# 
   787  020D                     	;# 
   788  0210                     	;# 
   789  0211                     	;# 
   790  0211                     	;# 
   791  0212                     	;# 
   792  0212                     	;# 
   793  0213                     	;# 
   794  0213                     	;# 
   795  0214                     	;# 
   796  0214                     	;# 
   797  0215                     	;# 
   798  0215                     	;# 
   799  0215                     	;# 
   800  0216                     	;# 
   801  0216                     	;# 
   802  0217                     	;# 
   803  0217                     	;# 
   804  0291                     	;# 
   805  0291                     	;# 
   806  0292                     	;# 
   807  0293                     	;# 
   808  0298                     	;# 
   809  0298                     	;# 
   810  0299                     	;# 
   811  029A                     	;# 
   812  0394                     	;# 
   813  0395                     	;# 
   814  0396                     	;# 
   815  0FE4                     	;# 
   816  0FE5                     	;# 
   817  0FE6                     	;# 
   818  0FE7                     	;# 
   819  0FE8                     	;# 
   820  0FE9                     	;# 
   821  0FEA                     	;# 
   822  0FEB                     	;# 
   823  0FED                     	;# 
   824  0FEE                     	;# 
   825  0FEF                     	;# 
   826  0000                     	;# 
   827  0001                     	;# 
   828  0002                     	;# 
   829  0003                     	;# 
   830  0004                     	;# 
   831  0005                     	;# 
   832  0006                     	;# 
   833  0007                     	;# 
   834  0008                     	;# 
   835  0009                     	;# 
   836  000A                     	;# 
   837  000B                     	;# 
   838  000C                     	;# 
   839  000D                     	;# 
   840  000E                     	;# 
   841  0010                     	;# 
   842  0011                     	;# 
   843  0012                     	;# 
   844  0015                     	;# 
   845  0016                     	;# 
   846  0016                     	;# 
   847  0017                     	;# 
   848  0018                     	;# 
   849  0019                     	;# 
   850  001A                     	;# 
   851  001B                     	;# 
   852  001C                     	;# 
   853  008C                     	;# 
   854  008D                     	;# 
   855  008E                     	;# 
   856  0090                     	;# 
   857  0091                     	;# 
   858  0092                     	;# 
   859  0095                     	;# 
   860  0096                     	;# 
   861  0097                     	;# 
   862  0099                     	;# 
   863  009A                     	;# 
   864  009B                     	;# 
   865  009B                     	;# 
   866  009C                     	;# 
   867  009D                     	;# 
   868  009E                     	;# 
   869  010C                     	;# 
   870  010D                     	;# 
   871  010E                     	;# 
   872  0116                     	;# 
   873  0117                     	;# 
   874  011D                     	;# 
   875  018C                     	;# 
   876  018D                     	;# 
   877  018E                     	;# 
   878  0191                     	;# 
   879  0191                     	;# 
   880  0192                     	;# 
   881  0193                     	;# 
   882  0193                     	;# 
   883  0194                     	;# 
   884  0195                     	;# 
   885  0196                     	;# 
   886  0197                     	;# 
   887  0199                     	;# 
   888  019A                     	;# 
   889  019B                     	;# 
   890  019B                     	;# 
   891  019B                     	;# 
   892  019B                     	;# 
   893  019C                     	;# 
   894  019C                     	;# 
   895  019D                     	;# 
   896  019E                     	;# 
   897  019F                     	;# 
   898  020D                     	;# 
   899  0210                     	;# 
   900  0211                     	;# 
   901  0211                     	;# 
   902  0212                     	;# 
   903  0212                     	;# 
   904  0213                     	;# 
   905  0213                     	;# 
   906  0214                     	;# 
   907  0214                     	;# 
   908  0215                     	;# 
   909  0215                     	;# 
   910  0215                     	;# 
   911  0216                     	;# 
   912  0216                     	;# 
   913  0217                     	;# 
   914  0217                     	;# 
   915  0291                     	;# 
   916  0291                     	;# 
   917  0292                     	;# 
   918  0293                     	;# 
   919  0298                     	;# 
   920  0298                     	;# 
   921  0299                     	;# 
   922  029A                     	;# 
   923  0394                     	;# 
   924  0395                     	;# 
   925  0396                     	;# 
   926  0FE4                     	;# 
   927  0FE5                     	;# 
   928  0FE6                     	;# 
   929  0FE7                     	;# 
   930  0FE8                     	;# 
   931  0FE9                     	;# 
   932  0FEA                     	;# 
   933  0FEB                     	;# 
   934  0FED                     	;# 
   935  0FEE                     	;# 
   936  0FEF                     	;# 
   937  0000                     	;# 
   938  0001                     	;# 
   939  0002                     	;# 
   940  0003                     	;# 
   941  0004                     	;# 
   942  0005                     	;# 
   943  0006                     	;# 
   944  0007                     	;# 
   945  0008                     	;# 
   946  0009                     	;# 
   947  000A                     	;# 
   948  000B                     	;# 
   949  000C                     	;# 
   950  000D                     	;# 
   951  000E                     	;# 
   952  0010                     	;# 
   953  0011                     	;# 
   954  0012                     	;# 
   955  0015                     	;# 
   956  0016                     	;# 
   957  0016                     	;# 
   958  0017                     	;# 
   959  0018                     	;# 
   960  0019                     	;# 
   961  001A                     	;# 
   962  001B                     	;# 
   963  001C                     	;# 
   964  008C                     	;# 
   965  008D                     	;# 
   966  008E                     	;# 
   967  0090                     	;# 
   968  0091                     	;# 
   969  0092                     	;# 
   970  0095                     	;# 
   971  0096                     	;# 
   972  0097                     	;# 
   973  0099                     	;# 
   974  009A                     	;# 
   975  009B                     	;# 
   976  009B                     	;# 
   977  009C                     	;# 
   978  009D                     	;# 
   979  009E                     	;# 
   980  010C                     	;# 
   981  010D                     	;# 
   982  010E                     	;# 
   983  0116                     	;# 
   984  0117                     	;# 
   985  011D                     	;# 
   986  018C                     	;# 
   987  018D                     	;# 
   988  018E                     	;# 
   989  0191                     	;# 
   990  0191                     	;# 
   991  0192                     	;# 
   992  0193                     	;# 
   993  0193                     	;# 
   994  0194                     	;# 
   995  0195                     	;# 
   996  0196                     	;# 
   997  0197                     	;# 
   998  0199                     	;# 
   999  019A                     	;# 
  1000  019B                     	;# 
  1001  019B                     	;# 
  1002  019B                     	;# 
  1003  019B                     	;# 
  1004  019C                     	;# 
  1005  019C                     	;# 
  1006  019D                     	;# 
  1007  019E                     	;# 
  1008  019F                     	;# 
  1009  020D                     	;# 
  1010  0210                     	;# 
  1011  0211                     	;# 
  1012  0211                     	;# 
  1013  0212                     	;# 
  1014  0212                     	;# 
  1015  0213                     	;# 
  1016  0213                     	;# 
  1017  0214                     	;# 
  1018  0214                     	;# 
  1019  0215                     	;# 
  1020  0215                     	;# 
  1021  0215                     	;# 
  1022  0216                     	;# 
  1023  0216                     	;# 
  1024  0217                     	;# 
  1025  0217                     	;# 
  1026  0291                     	;# 
  1027  0291                     	;# 
  1028  0292                     	;# 
  1029  0293                     	;# 
  1030  0298                     	;# 
  1031  0298                     	;# 
  1032  0299                     	;# 
  1033  029A                     	;# 
  1034  0394                     	;# 
  1035  0395                     	;# 
  1036  0396                     	;# 
  1037  0FE4                     	;# 
  1038  0FE5                     	;# 
  1039  0FE6                     	;# 
  1040  0FE7                     	;# 
  1041  0FE8                     	;# 
  1042  0FE9                     	;# 
  1043  0FEA                     	;# 
  1044  0FEB                     	;# 
  1045  0FED                     	;# 
  1046  0FEE                     	;# 
  1047  0FEF                     	;# 
  1048  0000                     	;# 
  1049  0001                     	;# 
  1050  0002                     	;# 
  1051  0003                     	;# 
  1052  0004                     	;# 
  1053  0005                     	;# 
  1054  0006                     	;# 
  1055  0007                     	;# 
  1056  0008                     	;# 
  1057  0009                     	;# 
  1058  000A                     	;# 
  1059  000B                     	;# 
  1060  000C                     	;# 
  1061  000D                     	;# 
  1062  000E                     	;# 
  1063  0010                     	;# 
  1064  0011                     	;# 
  1065  0012                     	;# 
  1066  0015                     	;# 
  1067  0016                     	;# 
  1068  0016                     	;# 
  1069  0017                     	;# 
  1070  0018                     	;# 
  1071  0019                     	;# 
  1072  001A                     	;# 
  1073  001B                     	;# 
  1074  001C                     	;# 
  1075  008C                     	;# 
  1076  008D                     	;# 
  1077  008E                     	;# 
  1078  0090                     	;# 
  1079  0091                     	;# 
  1080  0092                     	;# 
  1081  0095                     	;# 
  1082  0096                     	;# 
  1083  0097                     	;# 
  1084  0099                     	;# 
  1085  009A                     	;# 
  1086  009B                     	;# 
  1087  009B                     	;# 
  1088  009C                     	;# 
  1089  009D                     	;# 
  1090  009E                     	;# 
  1091  010C                     	;# 
  1092  010D                     	;# 
  1093  010E                     	;# 
  1094  0116                     	;# 
  1095  0117                     	;# 
  1096  011D                     	;# 
  1097  018C                     	;# 
  1098  018D                     	;# 
  1099  018E                     	;# 
  1100  0191                     	;# 
  1101  0191                     	;# 
  1102  0192                     	;# 
  1103  0193                     	;# 
  1104  0193                     	;# 
  1105  0194                     	;# 
  1106  0195                     	;# 
  1107  0196                     	;# 
  1108  0197                     	;# 
  1109  0199                     	;# 
  1110  019A                     	;# 
  1111  019B                     	;# 
  1112  019B                     	;# 
  1113  019B                     	;# 
  1114  019B                     	;# 
  1115  019C                     	;# 
  1116  019C                     	;# 
  1117  019D                     	;# 
  1118  019E                     	;# 
  1119  019F                     	;# 
  1120  020D                     	;# 
  1121  0210                     	;# 
  1122  0211                     	;# 
  1123  0211                     	;# 
  1124  0212                     	;# 
  1125  0212                     	;# 
  1126  0213                     	;# 
  1127  0213                     	;# 
  1128  0214                     	;# 
  1129  0214                     	;# 
  1130  0215                     	;# 
  1131  0215                     	;# 
  1132  0215                     	;# 
  1133  0216                     	;# 
  1134  0216                     	;# 
  1135  0217                     	;# 
  1136  0217                     	;# 
  1137  0291                     	;# 
  1138  0291                     	;# 
  1139  0292                     	;# 
  1140  0293                     	;# 
  1141  0298                     	;# 
  1142  0298                     	;# 
  1143  0299                     	;# 
  1144  029A                     	;# 
  1145  0394                     	;# 
  1146  0395                     	;# 
  1147  0396                     	;# 
  1148  0FE4                     	;# 
  1149  0FE5                     	;# 
  1150  0FE6                     	;# 
  1151  0FE7                     	;# 
  1152  0FE8                     	;# 
  1153  0FE9                     	;# 
  1154  0FEA                     	;# 
  1155  0FEB                     	;# 
  1156  0FED                     	;# 
  1157  0FEE                     	;# 
  1158  0FEF                     	;# 
  1159  0000                     	;# 
  1160  0001                     	;# 
  1161  0002                     	;# 
  1162  0003                     	;# 
  1163  0004                     	;# 
  1164  0005                     	;# 
  1165  0006                     	;# 
  1166  0007                     	;# 
  1167  0008                     	;# 
  1168  0009                     	;# 
  1169  000A                     	;# 
  1170  000B                     	;# 
  1171  000C                     	;# 
  1172  000D                     	;# 
  1173  000E                     	;# 
  1174  0010                     	;# 
  1175  0011                     	;# 
  1176  0012                     	;# 
  1177  0015                     	;# 
  1178  0016                     	;# 
  1179  0016                     	;# 
  1180  0017                     	;# 
  1181  0018                     	;# 
  1182  0019                     	;# 
  1183  001A                     	;# 
  1184  001B                     	;# 
  1185  001C                     	;# 
  1186  008C                     	;# 
  1187  008D                     	;# 
  1188  008E                     	;# 
  1189  0090                     	;# 
  1190  0091                     	;# 
  1191  0092                     	;# 
  1192  0095                     	;# 
  1193  0096                     	;# 
  1194  0097                     	;# 
  1195  0099                     	;# 
  1196  009A                     	;# 
  1197  009B                     	;# 
  1198  009B                     	;# 
  1199  009C                     	;# 
  1200  009D                     	;# 
  1201  009E                     	;# 
  1202  010C                     	;# 
  1203  010D                     	;# 
  1204  010E                     	;# 
  1205  0116                     	;# 
  1206  0117                     	;# 
  1207  011D                     	;# 
  1208  018C                     	;# 
  1209  018D                     	;# 
  1210  018E                     	;# 
  1211  0191                     	;# 
  1212  0191                     	;# 
  1213  0192                     	;# 
  1214  0193                     	;# 
  1215  0193                     	;# 
  1216  0194                     	;# 
  1217  0195                     	;# 
  1218  0196                     	;# 
  1219  0197                     	;# 
  1220  0199                     	;# 
  1221  019A                     	;# 
  1222  019B                     	;# 
  1223  019B                     	;# 
  1224  019B                     	;# 
  1225  019B                     	;# 
  1226  019C                     	;# 
  1227  019C                     	;# 
  1228  019D                     	;# 
  1229  019E                     	;# 
  1230  019F                     	;# 
  1231  020D                     	;# 
  1232  0210                     	;# 
  1233  0211                     	;# 
  1234  0211                     	;# 
  1235  0212                     	;# 
  1236  0212                     	;# 
  1237  0213                     	;# 
  1238  0213                     	;# 
  1239  0214                     	;# 
  1240  0214                     	;# 
  1241  0215                     	;# 
  1242  0215                     	;# 
  1243  0215                     	;# 
  1244  0216                     	;# 
  1245  0216                     	;# 
  1246  0217                     	;# 
  1247  0217                     	;# 
  1248  0291                     	;# 
  1249  0291                     	;# 
  1250  0292                     	;# 
  1251  0293                     	;# 
  1252  0298                     	;# 
  1253  0298                     	;# 
  1254  0299                     	;# 
  1255  029A                     	;# 
  1256  0394                     	;# 
  1257  0395                     	;# 
  1258  0396                     	;# 
  1259  0FE4                     	;# 
  1260  0FE5                     	;# 
  1261  0FE6                     	;# 
  1262  0FE7                     	;# 
  1263  0FE8                     	;# 
  1264  0FE9                     	;# 
  1265  0FEA                     	;# 
  1266  0FEB                     	;# 
  1267  0FED                     	;# 
  1268  0FEE                     	;# 
  1269  0FEF                     	;# 
  1270  0000                     	;# 
  1271  0001                     	;# 
  1272  0002                     	;# 
  1273  0003                     	;# 
  1274  0004                     	;# 
  1275  0005                     	;# 
  1276  0006                     	;# 
  1277  0007                     	;# 
  1278  0008                     	;# 
  1279  0009                     	;# 
  1280  000A                     	;# 
  1281  000B                     	;# 
  1282  000C                     	;# 
  1283  000D                     	;# 
  1284  000E                     	;# 
  1285  0010                     	;# 
  1286  0011                     	;# 
  1287  0012                     	;# 
  1288  0015                     	;# 
  1289  0016                     	;# 
  1290  0016                     	;# 
  1291  0017                     	;# 
  1292  0018                     	;# 
  1293  0019                     	;# 
  1294  001A                     	;# 
  1295  001B                     	;# 
  1296  001C                     	;# 
  1297  008C                     	;# 
  1298  008D                     	;# 
  1299  008E                     	;# 
  1300  0090                     	;# 
  1301  0091                     	;# 
  1302  0092                     	;# 
  1303  0095                     	;# 
  1304  0096                     	;# 
  1305  0097                     	;# 
  1306  0099                     	;# 
  1307  009A                     	;# 
  1308  009B                     	;# 
  1309  009B                     	;# 
  1310  009C                     	;# 
  1311  009D                     	;# 
  1312  009E                     	;# 
  1313  010C                     	;# 
  1314  010D                     	;# 
  1315  010E                     	;# 
  1316  0116                     	;# 
  1317  0117                     	;# 
  1318  011D                     	;# 
  1319  018C                     	;# 
  1320  018D                     	;# 
  1321  018E                     	;# 
  1322  0191                     	;# 
  1323  0191                     	;# 
  1324  0192                     	;# 
  1325  0193                     	;# 
  1326  0193                     	;# 
  1327  0194                     	;# 
  1328  0195                     	;# 
  1329  0196                     	;# 
  1330  0197                     	;# 
  1331  0199                     	;# 
  1332  019A                     	;# 
  1333  019B                     	;# 
  1334  019B                     	;# 
  1335  019B                     	;# 
  1336  019B                     	;# 
  1337  019C                     	;# 
  1338  019C                     	;# 
  1339  019D                     	;# 
  1340  019E                     	;# 
  1341  019F                     	;# 
  1342  020D                     	;# 
  1343  0210                     	;# 
  1344  0211                     	;# 
  1345  0211                     	;# 
  1346  0212                     	;# 
  1347  0212                     	;# 
  1348  0213                     	;# 
  1349  0213                     	;# 
  1350  0214                     	;# 
  1351  0214                     	;# 
  1352  0215                     	;# 
  1353  0215                     	;# 
  1354  0215                     	;# 
  1355  0216                     	;# 
  1356  0216                     	;# 
  1357  0217                     	;# 
  1358  0217                     	;# 
  1359  0291                     	;# 
  1360  0291                     	;# 
  1361  0292                     	;# 
  1362  0293                     	;# 
  1363  0298                     	;# 
  1364  0298                     	;# 
  1365  0299                     	;# 
  1366  029A                     	;# 
  1367  0394                     	;# 
  1368  0395                     	;# 
  1369  0396                     	;# 
  1370  0FE4                     	;# 
  1371  0FE5                     	;# 
  1372  0FE6                     	;# 
  1373  0FE7                     	;# 
  1374  0FE8                     	;# 
  1375  0FE9                     	;# 
  1376  0FEA                     	;# 
  1377  0FEB                     	;# 
  1378  0FED                     	;# 
  1379  0FEE                     	;# 
  1380  0FEF                     	;# 
  1381  0000                     	;# 
  1382  0001                     	;# 
  1383  0002                     	;# 
  1384  0003                     	;# 
  1385  0004                     	;# 
  1386  0005                     	;# 
  1387  0006                     	;# 
  1388  0007                     	;# 
  1389  0008                     	;# 
  1390  0009                     	;# 
  1391  000A                     	;# 
  1392  000B                     	;# 
  1393  000C                     	;# 
  1394  000D                     	;# 
  1395  000E                     	;# 
  1396  0010                     	;# 
  1397  0011                     	;# 
  1398  0012                     	;# 
  1399  0015                     	;# 
  1400  0016                     	;# 
  1401  0016                     	;# 
  1402  0017                     	;# 
  1403  0018                     	;# 
  1404  0019                     	;# 
  1405  001A                     	;# 
  1406  001B                     	;# 
  1407  001C                     	;# 
  1408  008C                     	;# 
  1409  008D                     	;# 
  1410  008E                     	;# 
  1411  0090                     	;# 
  1412  0091                     	;# 
  1413  0092                     	;# 
  1414  0095                     	;# 
  1415  0096                     	;# 
  1416  0097                     	;# 
  1417  0099                     	;# 
  1418  009A                     	;# 
  1419  009B                     	;# 
  1420  009B                     	;# 
  1421  009C                     	;# 
  1422  009D                     	;# 
  1423  009E                     	;# 
  1424  010C                     	;# 
  1425  010D                     	;# 
  1426  010E                     	;# 
  1427  0116                     	;# 
  1428  0117                     	;# 
  1429  011D                     	;# 
  1430  018C                     	;# 
  1431  018D                     	;# 
  1432  018E                     	;# 
  1433  0191                     	;# 
  1434  0191                     	;# 
  1435  0192                     	;# 
  1436  0193                     	;# 
  1437  0193                     	;# 
  1438  0194                     	;# 
  1439  0195                     	;# 
  1440  0196                     	;# 
  1441  0197                     	;# 
  1442  0199                     	;# 
  1443  019A                     	;# 
  1444  019B                     	;# 
  1445  019B                     	;# 
  1446  019B                     	;# 
  1447  019B                     	;# 
  1448  019C                     	;# 
  1449  019C                     	;# 
  1450  019D                     	;# 
  1451  019E                     	;# 
  1452  019F                     	;# 
  1453  020D                     	;# 
  1454  0210                     	;# 
  1455  0211                     	;# 
  1456  0211                     	;# 
  1457  0212                     	;# 
  1458  0212                     	;# 
  1459  0213                     	;# 
  1460  0213                     	;# 
  1461  0214                     	;# 
  1462  0214                     	;# 
  1463  0215                     	;# 
  1464  0215                     	;# 
  1465  0215                     	;# 
  1466  0216                     	;# 
  1467  0216                     	;# 
  1468  0217                     	;# 
  1469  0217                     	;# 
  1470  0291                     	;# 
  1471  0291                     	;# 
  1472  0292                     	;# 
  1473  0293                     	;# 
  1474  0298                     	;# 
  1475  0298                     	;# 
  1476  0299                     	;# 
  1477  029A                     	;# 
  1478  0394                     	;# 
  1479  0395                     	;# 
  1480  0396                     	;# 
  1481  0FE4                     	;# 
  1482  0FE5                     	;# 
  1483  0FE6                     	;# 
  1484  0FE7                     	;# 
  1485  0FE8                     	;# 
  1486  0FE9                     	;# 
  1487  0FEA                     	;# 
  1488  0FEB                     	;# 
  1489  0FED                     	;# 
  1490  0FEE                     	;# 
  1491  0FEF                     	;# 
  1492  0000                     	;# 
  1493  0001                     	;# 
  1494  0002                     	;# 
  1495  0003                     	;# 
  1496  0004                     	;# 
  1497  0005                     	;# 
  1498  0006                     	;# 
  1499  0007                     	;# 
  1500  0008                     	;# 
  1501  0009                     	;# 
  1502  000A                     	;# 
  1503  000B                     	;# 
  1504  000C                     	;# 
  1505  000D                     	;# 
  1506  000E                     	;# 
  1507  0010                     	;# 
  1508  0011                     	;# 
  1509  0012                     	;# 
  1510  0015                     	;# 
  1511  0016                     	;# 
  1512  0016                     	;# 
  1513  0017                     	;# 
  1514  0018                     	;# 
  1515  0019                     	;# 
  1516  001A                     	;# 
  1517  001B                     	;# 
  1518  001C                     	;# 
  1519  008C                     	;# 
  1520  008D                     	;# 
  1521  008E                     	;# 
  1522  0090                     	;# 
  1523  0091                     	;# 
  1524  0092                     	;# 
  1525  0095                     	;# 
  1526  0096                     	;# 
  1527  0097                     	;# 
  1528  0099                     	;# 
  1529  009A                     	;# 
  1530  009B                     	;# 
  1531  009B                     	;# 
  1532  009C                     	;# 
  1533  009D                     	;# 
  1534  009E                     	;# 
  1535  010C                     	;# 
  1536  010D                     	;# 
  1537  010E                     	;# 
  1538  0116                     	;# 
  1539  0117                     	;# 
  1540  011D                     	;# 
  1541  018C                     	;# 
  1542  018D                     	;# 
  1543  018E                     	;# 
  1544  0191                     	;# 
  1545  0191                     	;# 
  1546  0192                     	;# 
  1547  0193                     	;# 
  1548  0193                     	;# 
  1549  0194                     	;# 
  1550  0195                     	;# 
  1551  0196                     	;# 
  1552  0197                     	;# 
  1553  0199                     	;# 
  1554  019A                     	;# 
  1555  019B                     	;# 
  1556  019B                     	;# 
  1557  019B                     	;# 
  1558  019B                     	;# 
  1559  019C                     	;# 
  1560  019C                     	;# 
  1561  019D                     	;# 
  1562  019E                     	;# 
  1563  019F                     	;# 
  1564  020D                     	;# 
  1565  0210                     	;# 
  1566  0211                     	;# 
  1567  0211                     	;# 
  1568  0212                     	;# 
  1569  0212                     	;# 
  1570  0213                     	;# 
  1571  0213                     	;# 
  1572  0214                     	;# 
  1573  0214                     	;# 
  1574  0215                     	;# 
  1575  0215                     	;# 
  1576  0215                     	;# 
  1577  0216                     	;# 
  1578  0216                     	;# 
  1579  0217                     	;# 
  1580  0217                     	;# 
  1581  0291                     	;# 
  1582  0291                     	;# 
  1583  0292                     	;# 
  1584  0293                     	;# 
  1585  0298                     	;# 
  1586  0298                     	;# 
  1587  0299                     	;# 
  1588  029A                     	;# 
  1589  0394                     	;# 
  1590  0395                     	;# 
  1591  0396                     	;# 
  1592  0FE4                     	;# 
  1593  0FE5                     	;# 
  1594  0FE6                     	;# 
  1595  0FE7                     	;# 
  1596  0FE8                     	;# 
  1597  0FE9                     	;# 
  1598  0FEA                     	;# 
  1599  0FEB                     	;# 
  1600  0FED                     	;# 
  1601  0FEE                     	;# 
  1602  0FEF                     	;# 
  1603  0000                     	;# 
  1604  0001                     	;# 
  1605  0002                     	;# 
  1606  0003                     	;# 
  1607  0004                     	;# 
  1608  0005                     	;# 
  1609  0006                     	;# 
  1610  0007                     	;# 
  1611  0008                     	;# 
  1612  0009                     	;# 
  1613  000A                     	;# 
  1614  000B                     	;# 
  1615  000C                     	;# 
  1616  000D                     	;# 
  1617  000E                     	;# 
  1618  0010                     	;# 
  1619  0011                     	;# 
  1620  0012                     	;# 
  1621  0015                     	;# 
  1622  0016                     	;# 
  1623  0016                     	;# 
  1624  0017                     	;# 
  1625  0018                     	;# 
  1626  0019                     	;# 
  1627  001A                     	;# 
  1628  001B                     	;# 
  1629  001C                     	;# 
  1630  008C                     	;# 
  1631  008D                     	;# 
  1632  008E                     	;# 
  1633  0090                     	;# 
  1634  0091                     	;# 
  1635  0092                     	;# 
  1636  0095                     	;# 
  1637  0096                     	;# 
  1638  0097                     	;# 
  1639  0099                     	;# 
  1640  009A                     	;# 
  1641  009B                     	;# 
  1642  009B                     	;# 
  1643  009C                     	;# 
  1644  009D                     	;# 
  1645  009E                     	;# 
  1646  010C                     	;# 
  1647  010D                     	;# 
  1648  010E                     	;# 
  1649  0116                     	;# 
  1650  0117                     	;# 
  1651  011D                     	;# 
  1652  018C                     	;# 
  1653  018D                     	;# 
  1654  018E                     	;# 
  1655  0191                     	;# 
  1656  0191                     	;# 
  1657  0192                     	;# 
  1658  0193                     	;# 
  1659  0193                     	;# 
  1660  0194                     	;# 
  1661  0195                     	;# 
  1662  0196                     	;# 
  1663  0197                     	;# 
  1664  0199                     	;# 
  1665  019A                     	;# 
  1666  019B                     	;# 
  1667  019B                     	;# 
  1668  019B                     	;# 
  1669  019B                     	;# 
  1670  019C                     	;# 
  1671  019C                     	;# 
  1672  019D                     	;# 
  1673  019E                     	;# 
  1674  019F                     	;# 
  1675  020D                     	;# 
  1676  0210                     	;# 
  1677  0211                     	;# 
  1678  0211                     	;# 
  1679  0212                     	;# 
  1680  0212                     	;# 
  1681  0213                     	;# 
  1682  0213                     	;# 
  1683  0214                     	;# 
  1684  0214                     	;# 
  1685  0215                     	;# 
  1686  0215                     	;# 
  1687  0215                     	;# 
  1688  0216                     	;# 
  1689  0216                     	;# 
  1690  0217                     	;# 
  1691  0217                     	;# 
  1692  0291                     	;# 
  1693  0291                     	;# 
  1694  0292                     	;# 
  1695  0293                     	;# 
  1696  0298                     	;# 
  1697  0298                     	;# 
  1698  0299                     	;# 
  1699  029A                     	;# 
  1700  0394                     	;# 
  1701  0395                     	;# 
  1702  0396                     	;# 
  1703  0FE4                     	;# 
  1704  0FE5                     	;# 
  1705  0FE6                     	;# 
  1706  0FE7                     	;# 
  1707  0FE8                     	;# 
  1708  0FE9                     	;# 
  1709  0FEA                     	;# 
  1710  0FEB                     	;# 
  1711  0FED                     	;# 
  1712  0FEE                     	;# 
  1713  0FEF                     	;# 
  1714  0000                     	;# 
  1715  0001                     	;# 
  1716  0002                     	;# 
  1717  0003                     	;# 
  1718  0004                     	;# 
  1719  0005                     	;# 
  1720  0006                     	;# 
  1721  0007                     	;# 
  1722  0008                     	;# 
  1723  0009                     	;# 
  1724  000A                     	;# 
  1725  000B                     	;# 
  1726  000C                     	;# 
  1727  000D                     	;# 
  1728  000E                     	;# 
  1729  0010                     	;# 
  1730  0011                     	;# 
  1731  0012                     	;# 
  1732  0015                     	;# 
  1733  0016                     	;# 
  1734  0016                     	;# 
  1735  0017                     	;# 
  1736  0018                     	;# 
  1737  0019                     	;# 
  1738  001A                     	;# 
  1739  001B                     	;# 
  1740  001C                     	;# 
  1741  008C                     	;# 
  1742  008D                     	;# 
  1743  008E                     	;# 
  1744  0090                     	;# 
  1745  0091                     	;# 
  1746  0092                     	;# 
  1747  0095                     	;# 
  1748  0096                     	;# 
  1749  0097                     	;# 
  1750  0099                     	;# 
  1751  009A                     	;# 
  1752  009B                     	;# 
  1753  009B                     	;# 
  1754  009C                     	;# 
  1755  009D                     	;# 
  1756  009E                     	;# 
  1757  010C                     	;# 
  1758  010D                     	;# 
  1759  010E                     	;# 
  1760  0116                     	;# 
  1761  0117                     	;# 
  1762  011D                     	;# 
  1763  018C                     	;# 
  1764  018D                     	;# 
  1765  018E                     	;# 
  1766  0191                     	;# 
  1767  0191                     	;# 
  1768  0192                     	;# 
  1769  0193                     	;# 
  1770  0193                     	;# 
  1771  0194                     	;# 
  1772  0195                     	;# 
  1773  0196                     	;# 
  1774  0197                     	;# 
  1775  0199                     	;# 
  1776  019A                     	;# 
  1777  019B                     	;# 
  1778  019B                     	;# 
  1779  019B                     	;# 
  1780  019B                     	;# 
  1781  019C                     	;# 
  1782  019C                     	;# 
  1783  019D                     	;# 
  1784  019E                     	;# 
  1785  019F                     	;# 
  1786  020D                     	;# 
  1787  0210                     	;# 
  1788  0211                     	;# 
  1789  0211                     	;# 
  1790  0212                     	;# 
  1791  0212                     	;# 
  1792  0213                     	;# 
  1793  0213                     	;# 
  1794  0214                     	;# 
  1795  0214                     	;# 
  1796  0215                     	;# 
  1797  0215                     	;# 
  1798  0215                     	;# 
  1799  0216                     	;# 
  1800  0216                     	;# 
  1801  0217                     	;# 
  1802  0217                     	;# 
  1803  0291                     	;# 
  1804  0291                     	;# 
  1805  0292                     	;# 
  1806  0293                     	;# 
  1807  0298                     	;# 
  1808  0298                     	;# 
  1809  0299                     	;# 
  1810  029A                     	;# 
  1811  0394                     	;# 
  1812  0395                     	;# 
  1813  0396                     	;# 
  1814  0FE4                     	;# 
  1815  0FE5                     	;# 
  1816  0FE6                     	;# 
  1817  0FE7                     	;# 
  1818  0FE8                     	;# 
  1819  0FE9                     	;# 
  1820  0FEA                     	;# 
  1821  0FEB                     	;# 
  1822  0FED                     	;# 
  1823  0FEE                     	;# 
  1824  0FEF                     	;# 
  1825  0000                     	;# 
  1826  0001                     	;# 
  1827  0002                     	;# 
  1828  0003                     	;# 
  1829  0004                     	;# 
  1830  0005                     	;# 
  1831  0006                     	;# 
  1832  0007                     	;# 
  1833  0008                     	;# 
  1834  0009                     	;# 
  1835  000A                     	;# 
  1836  000B                     	;# 
  1837  000C                     	;# 
  1838  000D                     	;# 
  1839  000E                     	;# 
  1840  0010                     	;# 
  1841  0011                     	;# 
  1842  0012                     	;# 
  1843  0015                     	;# 
  1844  0016                     	;# 
  1845  0016                     	;# 
  1846  0017                     	;# 
  1847  0018                     	;# 
  1848  0019                     	;# 
  1849  001A                     	;# 
  1850  001B                     	;# 
  1851  001C                     	;# 
  1852  008C                     	;# 
  1853  008D                     	;# 
  1854  008E                     	;# 
  1855  0090                     	;# 
  1856  0091                     	;# 
  1857  0092                     	;# 
  1858  0095                     	;# 
  1859  0096                     	;# 
  1860  0097                     	;# 
  1861  0099                     	;# 
  1862  009A                     	;# 
  1863  009B                     	;# 
  1864  009B                     	;# 
  1865  009C                     	;# 
  1866  009D                     	;# 
  1867  009E                     	;# 
  1868  010C                     	;# 
  1869  010D                     	;# 
  1870  010E                     	;# 
  1871  0116                     	;# 
  1872  0117                     	;# 
  1873  011D                     	;# 
  1874  018C                     	;# 
  1875  018D                     	;# 
  1876  018E                     	;# 
  1877  0191                     	;# 
  1878  0191                     	;# 
  1879  0192                     	;# 
  1880  0193                     	;# 
  1881  0193                     	;# 
  1882  0194                     	;# 
  1883  0195                     	;# 
  1884  0196                     	;# 
  1885  0197                     	;# 
  1886  0199                     	;# 
  1887  019A                     	;# 
  1888  019B                     	;# 
  1889  019B                     	;# 
  1890  019B                     	;# 
  1891  019B                     	;# 
  1892  019C                     	;# 
  1893  019C                     	;# 
  1894  019D                     	;# 
  1895  019E                     	;# 
  1896  019F                     	;# 
  1897  020D                     	;# 
  1898  0210                     	;# 
  1899  0211                     	;# 
  1900  0211                     	;# 
  1901  0212                     	;# 
  1902  0212                     	;# 
  1903  0213                     	;# 
  1904  0213                     	;# 
  1905  0214                     	;# 
  1906  0214                     	;# 
  1907  0215                     	;# 
  1908  0215                     	;# 
  1909  0215                     	;# 
  1910  0216                     	;# 
  1911  0216                     	;# 
  1912  0217                     	;# 
  1913  0217                     	;# 
  1914  0291                     	;# 
  1915  0291                     	;# 
  1916  0292                     	;# 
  1917  0293                     	;# 
  1918  0298                     	;# 
  1919  0298                     	;# 
  1920  0299                     	;# 
  1921  029A                     	;# 
  1922  0394                     	;# 
  1923  0395                     	;# 
  1924  0396                     	;# 
  1925  0FE4                     	;# 
  1926  0FE5                     	;# 
  1927  0FE6                     	;# 
  1928  0FE7                     	;# 
  1929  0FE8                     	;# 
  1930  0FE9                     	;# 
  1931  0FEA                     	;# 
  1932  0FEB                     	;# 
  1933  0FED                     	;# 
  1934  0FEE                     	;# 
  1935  0FEF                     	;# 
  1936  0000                     	;# 
  1937  0001                     	;# 
  1938  0002                     	;# 
  1939  0003                     	;# 
  1940  0004                     	;# 
  1941  0005                     	;# 
  1942  0006                     	;# 
  1943  0007                     	;# 
  1944  0008                     	;# 
  1945  0009                     	;# 
  1946  000A                     	;# 
  1947  000B                     	;# 
  1948  000C                     	;# 
  1949  000D                     	;# 
  1950  000E                     	;# 
  1951  0010                     	;# 
  1952  0011                     	;# 
  1953  0012                     	;# 
  1954  0015                     	;# 
  1955  0016                     	;# 
  1956  0016                     	;# 
  1957  0017                     	;# 
  1958  0018                     	;# 
  1959  0019                     	;# 
  1960  001A                     	;# 
  1961  001B                     	;# 
  1962  001C                     	;# 
  1963  008C                     	;# 
  1964  008D                     	;# 
  1965  008E                     	;# 
  1966  0090                     	;# 
  1967  0091                     	;# 
  1968  0092                     	;# 
  1969  0095                     	;# 
  1970  0096                     	;# 
  1971  0097                     	;# 
  1972  0099                     	;# 
  1973  009A                     	;# 
  1974  009B                     	;# 
  1975  009B                     	;# 
  1976  009C                     	;# 
  1977  009D                     	;# 
  1978  009E                     	;# 
  1979  010C                     	;# 
  1980  010D                     	;# 
  1981  010E                     	;# 
  1982  0116                     	;# 
  1983  0117                     	;# 
  1984  011D                     	;# 
  1985  018C                     	;# 
  1986  018D                     	;# 
  1987  018E                     	;# 
  1988  0191                     	;# 
  1989  0191                     	;# 
  1990  0192                     	;# 
  1991  0193                     	;# 
  1992  0193                     	;# 
  1993  0194                     	;# 
  1994  0195                     	;# 
  1995  0196                     	;# 
  1996  0197                     	;# 
  1997  0199                     	;# 
  1998  019A                     	;# 
  1999  019B                     	;# 
  2000  019B                     	;# 
  2001  019B                     	;# 
  2002  019B                     	;# 
  2003  019C                     	;# 
  2004  019C                     	;# 
  2005  019D                     	;# 
  2006  019E                     	;# 
  2007  019F                     	;# 
  2008  020D                     	;# 
  2009  0210                     	;# 
  2010  0211                     	;# 
  2011  0211                     	;# 
  2012  0212                     	;# 
  2013  0212                     	;# 
  2014  0213                     	;# 
  2015  0213                     	;# 
  2016  0214                     	;# 
  2017  0214                     	;# 
  2018  0215                     	;# 
  2019  0215                     	;# 
  2020  0215                     	;# 
  2021  0216                     	;# 
  2022  0216                     	;# 
  2023  0217                     	;# 
  2024  0217                     	;# 
  2025  0291                     	;# 
  2026  0291                     	;# 
  2027  0292                     	;# 
  2028  0293                     	;# 
  2029  0298                     	;# 
  2030  0298                     	;# 
  2031  0299                     	;# 
  2032  029A                     	;# 
  2033  0394                     	;# 
  2034  0395                     	;# 
  2035  0396                     	;# 
  2036  0FE4                     	;# 
  2037  0FE5                     	;# 
  2038  0FE6                     	;# 
  2039  0FE7                     	;# 
  2040  0FE8                     	;# 
  2041  0FE9                     	;# 
  2042  0FEA                     	;# 
  2043  0FEB                     	;# 
  2044  0FED                     	;# 
  2045  0FEE                     	;# 
  2046  0FEF                     	;# 
  2047  0000                     	;# 
  2048  0001                     	;# 
  2049  0002                     	;# 
  2050  0003                     	;# 
  2051  0004                     	;# 
  2052  0005                     	;# 
  2053  0006                     	;# 
  2054  0007                     	;# 
  2055  0008                     	;# 
  2056  0009                     	;# 
  2057  000A                     	;# 
  2058  000B                     	;# 
  2059  000C                     	;# 
  2060  000D                     	;# 
  2061  000E                     	;# 
  2062  0010                     	;# 
  2063  0011                     	;# 
  2064  0012                     	;# 
  2065  0015                     	;# 
  2066  0016                     	;# 
  2067  0016                     	;# 
  2068  0017                     	;# 
  2069  0018                     	;# 
  2070  0019                     	;# 
  2071  001A                     	;# 
  2072  001B                     	;# 
  2073  001C                     	;# 
  2074  008C                     	;# 
  2075  008D                     	;# 
  2076  008E                     	;# 
  2077  0090                     	;# 
  2078  0091                     	;# 
  2079  0092                     	;# 
  2080  0095                     	;# 
  2081  0096                     	;# 
  2082  0097                     	;# 
  2083  0099                     	;# 
  2084  009A                     	;# 
  2085  009B                     	;# 
  2086  009B                     	;# 
  2087  009C                     	;# 
  2088  009D                     	;# 
  2089  009E                     	;# 
  2090  010C                     	;# 
  2091  010D                     	;# 
  2092  010E                     	;# 
  2093  0116                     	;# 
  2094  0117                     	;# 
  2095  011D                     	;# 
  2096  018C                     	;# 
  2097  018D                     	;# 
  2098  018E                     	;# 
  2099  0191                     	;# 
  2100  0191                     	;# 
  2101  0192                     	;# 
  2102  0193                     	;# 
  2103  0193                     	;# 
  2104  0194                     	;# 
  2105  0195                     	;# 
  2106  0196                     	;# 
  2107  0197                     	;# 
  2108  0199                     	;# 
  2109  019A                     	;# 
  2110  019B                     	;# 
  2111  019B                     	;# 
  2112  019B                     	;# 
  2113  019B                     	;# 
  2114  019C                     	;# 
  2115  019C                     	;# 
  2116  019D                     	;# 
  2117  019E                     	;# 
  2118  019F                     	;# 
  2119  020D                     	;# 
  2120  0210                     	;# 
  2121  0211                     	;# 
  2122  0211                     	;# 
  2123  0212                     	;# 
  2124  0212                     	;# 
  2125  0213                     	;# 
  2126  0213                     	;# 
  2127  0214                     	;# 
  2128  0214                     	;# 
  2129  0215                     	;# 
  2130  0215                     	;# 
  2131  0215                     	;# 
  2132  0216                     	;# 
  2133  0216                     	;# 
  2134  0217                     	;# 
  2135  0217                     	;# 
  2136  0291                     	;# 
  2137  0291                     	;# 
  2138  0292                     	;# 
  2139  0293                     	;# 
  2140  0298                     	;# 
  2141  0298                     	;# 
  2142  0299                     	;# 
  2143  029A                     	;# 
  2144  0394                     	;# 
  2145  0395                     	;# 
  2146  0396                     	;# 
  2147  0FE4                     	;# 
  2148  0FE5                     	;# 
  2149  0FE6                     	;# 
  2150  0FE7                     	;# 
  2151  0FE8                     	;# 
  2152  0FE9                     	;# 
  2153  0FEA                     	;# 
  2154  0FEB                     	;# 
  2155  0FED                     	;# 
  2156  0FEE                     	;# 
  2157  0FEF                     	;# 
  2158                           
  2159                           	psect	idataBANK4
  2160  1EDB                     __pidataBANK4:	
  2161                           
  2162                           ;initializer for __product
  2163  1EDB  3463               	retlw	99
  2164  1EDC  3402               	retlw	2
  2165  1EDD  3400               	retlw	0
  2166  1EDE  3400               	retlw	0
  2167  1EDF  3400               	retlw	0
  2168  1EE0  3400               	retlw	0
  2169  1EE1  3400               	retlw	0
  2170  1EE2  3400               	retlw	0
  2171  1EE3  3400               	retlw	0
  2172  1EE4  3400               	retlw	0
  2173  1EE5  3400               	retlw	0
  2174  1EE6  3400               	retlw	0
  2175  1EE7  34FF               	retlw	255
  2176  1EE8  34FF               	retlw	255
  2177  1EE9  34FF               	retlw	255
  2178  1EEA  3400               	retlw	0
  2179  1EEB  3400               	retlw	0
  2180  1EEC  3400               	retlw	0
  2181  1EED  3400               	retlw	0
  2182  1EEE  3400               	retlw	0
  2183  1EEF  3400               	retlw	0
  2184  1EF0  3400               	retlw	0
  2185  1EF1  3400               	retlw	0
  2186  1EF2  3400               	retlw	0
  2187  1EF3  3400               	retlw	0
  2188  1EF4  3400               	retlw	0
  2189  1EF5  3400               	retlw	0
  2190  1EF6  3400               	retlw	0
  2191  1EF7  3400               	retlw	0
  2192  1EF8  3400               	retlw	0
  2193  1EF9  3400               	retlw	0
  2194  1EFA  3400               	retlw	0
  2195                           
  2196                           	psect	stringtext
  2197  1000                     __pstringtext:	
  2198  1000                     _CC2500_registers_address:	
  2199  1000  3403               	retlw	3
  2200  1001  3416               	retlw	22
  2201  1002  3417               	retlw	23
  2202  1003  341E               	retlw	30
  2203  1004  341F               	retlw	31
  2204  1005  3420               	retlw	32
  2205  1006  342A               	retlw	42
  2206  1007  342B               	retlw	43
  2207  1008  340B               	retlw	11
  2208  1009  340C               	retlw	12
  2209  100A  340D               	retlw	13
  2210  100B  340E               	retlw	14
  2211  100C  340F               	retlw	15
  2212  100D  3410               	retlw	16
  2213  100E  3411               	retlw	17
  2214  100F  3412               	retlw	18
  2215  1010  3413               	retlw	19
  2216  1011  3414               	retlw	20
  2217  1012  340A               	retlw	10
  2218  1013  3415               	retlw	21
  2219  1014  3421               	retlw	33
  2220  1015  3422               	retlw	34
  2221  1016  3418               	retlw	24
  2222  1017  3419               	retlw	25
  2223  1018  341A               	retlw	26
  2224  1019  341B               	retlw	27
  2225  101A  341C               	retlw	28
  2226  101B  341D               	retlw	29
  2227  101C  3423               	retlw	35
  2228  101D  3424               	retlw	36
  2229  101E  3425               	retlw	37
  2230  101F  3426               	retlw	38
  2231  1020  3429               	retlw	41
  2232  1021  342C               	retlw	44
  2233  1022  342D               	retlw	45
  2234  1023  342E               	retlw	46
  2235  1024  3400               	retlw	0
  2236  1025  3401               	retlw	1
  2237  1026  3402               	retlw	2
  2238  1027  3407               	retlw	7
  2239  1028  3408               	retlw	8
  2240  1029  3409               	retlw	9
  2241  102A  3406               	retlw	6
  2242  102B  3404               	retlw	4
  2243  102C  3405               	retlw	5
  2244  102D  3427               	retlw	39
  2245  102E  3428               	retlw	40
  2246  102F                     __end_of_CC2500_registers_address:	
  2247  102F                     _CC2500_rfSettings:	
  2248  102F  3407               	retlw	7
  2249  1030  3407               	retlw	7
  2250  1031  3430               	retlw	48
  2251  1032  3487               	retlw	135
  2252  1033  346B               	retlw	107
  2253  1034  34F8               	retlw	248
  2254  1035  347F               	retlw	127
  2255  1036  343F               	retlw	63
  2256  1037  3409               	retlw	9
  2257  1038  3400               	retlw	0
  2258  1039  345C               	retlw	92
  2259  103A  34A7               	retlw	167
  2260  103B  3462               	retlw	98
  2261  103C  3486               	retlw	134
  2262  103D  3483               	retlw	131
  2263  103E  3403               	retlw	3
  2264  103F  3422               	retlw	34
  2265  1040  34F8               	retlw	248
  2266  1041  3400               	retlw	0
  2267  1042  3444               	retlw	68
  2268  1043  34B6               	retlw	182
  2269  1044  3410               	retlw	16
  2270  1045  3418               	retlw	24
  2271  1046  341D               	retlw	29
  2272  1047  341C               	retlw	28
  2273  1048  34C7               	retlw	199
  2274  1049  3400               	retlw	0
  2275  104A  34B2               	retlw	178
  2276  104B  34EA               	retlw	234
  2277  104C  340A               	retlw	10
  2278  104D  3400               	retlw	0
  2279  104E  3411               	retlw	17
  2280  104F  3459               	retlw	89
  2281  1050  3488               	retlw	136
  2282  1051  3431               	retlw	49
  2283  1052  340B               	retlw	11
  2284  1053  342F               	retlw	47
  2285  1054  342E               	retlw	46
  2286  1055  3406               	retlw	6
  2287  1056  3404               	retlw	4
  2288  1057  3405               	retlw	5
  2289  1058  3400               	retlw	0
  2290  1059  3430               	retlw	48
  2291  105A  34D3               	retlw	211
  2292  105B  3491               	retlw	145
  2293  105C  3441               	retlw	65
  2294  105D  3400               	retlw	0
  2295  105E                     __end_of_CC2500_rfSettings:	
  2296  105E                     _CC2500_patable_vaule:	
  2297  105E  34FE               	retlw	254
  2298  105F  34FE               	retlw	254
  2299  1060  34FE               	retlw	254
  2300  1061  34FE               	retlw	254
  2301  1062  34FE               	retlw	254
  2302  1063  34FE               	retlw	254
  2303  1064  34FE               	retlw	254
  2304  1065  34FE               	retlw	254
  2305  1066                     __end_of_CC2500_patable_vaule:	
  2306                           
  2307                           	psect	nvBANK0
  2308  006F                     __pnvBANK0:	
  2309  006F                     _product:	
  2310  006F                     	ds	1
  2311  000C                     _PORTA	set	12
  2312  000D                     _PORTB	set	13
  2313  000E                     _PORTC	set	14
  2314  0018                     _T1CON	set	24
  2315  0017                     _TMR1H	set	23
  2316  0016                     _TMR1L	set	22
  2317  005F                     _GIE	set	95
  2318  005B                     _IOCIE	set	91
  2319  0058                     _IOCIF	set	88
  2320  005E                     _PEIE	set	94
  2321  0060                     _RA0	set	96
  2322  0063                     _RA3	set	99
  2323  0064                     _RA4	set	100
  2324  0066                     _RA6	set	102
  2325  0067                     _RA7	set	103
  2326  0068                     _RB0	set	104
  2327  0069                     _RB1	set	105
  2328  006A                     _RB2	set	106
  2329  006B                     _RB3	set	107
  2330  006C                     _RB4	set	108
  2331  006D                     _RB5	set	109
  2332  0070                     _RC0	set	112
  2333  0071                     _RC1	set	113
  2334  0072                     _RC2	set	114
  2335  0074                     _RC4	set	116
  2336  0075                     _RC5	set	117
  2337  0077                     _RC7	set	119
  2338  0088                     _TMR1IF	set	136
  2339  009D                     _ADCON0	set	157
  2340  009E                     _ADCON1	set	158
  2341  009C                     _ADRESH	set	156
  2342  009B                     _ADRESL	set	155
  2343  0099                     _OSCCON	set	153
  2344  008C                     _TRISA	set	140
  2345  008D                     _TRISB	set	141
  2346  008E                     _TRISC	set	142
  2347  0097                     _WDTCON	set	151
  2348  04E9                     _GO_nDONE	set	1257
  2349  0488                     _TMR1IE	set	1160
  2350  0117                     _FVRCON	set	279
  2351  010C                     _LATA	set	268
  2352  010D                     _LATB	set	269
  2353  010E                     _LATC	set	270
  2354  018C                     _ANSELA	set	396
  2355  018D                     _ANSELB	set	397
  2356  018E                     _ANSELC	set	398
  2357  0192                     _PMADRH	set	402
  2358  0191                     _PMADRL	set	401
  2359  0196                     _PMCON2	set	406
  2360  0194                     _PMDATH	set	404
  2361  0193                     _PMDATL	set	403
  2362  0CAE                     _CFGS	set	3246
  2363  0CAC                     _FREE	set	3244
  2364  0CAD                     _LWLO	set	3245
  2365  0CA8                     _RD	set	3240
  2366  0CA9                     _WR	set	3241
  2367  0CAA                     _WREN	set	3242
  2368  020D                     _WPUB	set	525
  2369  1069                     _WPUB1	set	4201
  2370  106A                     _WPUB2	set	4202
  2371  0396                     _IOCBF	set	918
  2372  0395                     _IOCBN	set	917
  2373  0394                     _IOCBP	set	916
  2374  1CB2                     _IOCBF2	set	7346
  2375                           
  2376                           ; #config settings
  2377  0000                     
  2378                           	psect	cinit
  2379  0022                     start_initialization:	
  2380  0022                     __initialization:	
  2381                           
  2382                           ; Clear objects allocated to BITCOMMON
  2383  0022  01F8               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
  2384                           
  2385                           ; Clear objects allocated to COMMON
  2386  0023  01F9               	clrf	__pbssCOMMON& (0+127)
  2387  0024  01FA               	clrf	(__pbssCOMMON+1)& (0+127)
  2388                           
  2389                           ; Clear objects allocated to BANK0
  2390  0025  01ED               	clrf	__pbssBANK0& (0+127)
  2391  0026  01EE               	clrf	(__pbssBANK0+1)& (0+127)
  2392                           
  2393                           ; Clear objects allocated to BANK1
  2394  0027  30A0               	movlw	low __pbssBANK1
  2395  0028  0084               	movwf	4
  2396  0029  3000               	movlw	high __pbssBANK1
  2397  002A  0085               	movwf	5
  2398  002B  304C               	movlw	76
  2399  002C  319A  22F6  3180   	fcall	clear_ram0
  2400                           
  2401                           ; Clear objects allocated to BANK2
  2402  002F  3020               	movlw	low __pbssBANK2
  2403  0030  0084               	movwf	4
  2404  0031  3001               	movlw	high __pbssBANK2
  2405  0032  0085               	movwf	5
  2406  0033  3050               	movlw	80
  2407  0034  319A  22F6  3180   	fcall	clear_ram0
  2408                           
  2409                           ; Clear objects allocated to BANK3
  2410  0037  30A0               	movlw	low __pbssBANK3
  2411  0038  0084               	movwf	4
  2412  0039  3001               	movlw	high __pbssBANK3
  2413  003A  0085               	movwf	5
  2414  003B  304B               	movlw	75
  2415  003C  319A  22F6  3180   	fcall	clear_ram0
  2416                           
  2417                           ; Clear objects allocated to BANK4
  2418  003F  3020               	movlw	low __pbssBANK4
  2419  0040  0084               	movwf	4
  2420  0041  3002               	movlw	high __pbssBANK4
  2421  0042  0085               	movwf	5
  2422  0043  3025               	movlw	37
  2423  0044  319A  22F6  3180   	fcall	clear_ram0
  2424                           
  2425                           ; Initialize objects allocated to BANK4
  2426  0047  30DB               	movlw	low __pidataBANK4
  2427  0048  0084               	movwf	4
  2428  0049  309E               	movlw	(high __pidataBANK4)| (0+128)
  2429  004A  0085               	movwf	5
  2430  004B  3045               	movlw	low __pdataBANK4
  2431  004C  0086               	movwf	6
  2432  004D  3002               	movlw	high __pdataBANK4
  2433  004E  0087               	movwf	7
  2434  004F  3020               	movlw	32
  2435  0050  319A  22F0         	fcall	init_ram
  2436  0052                     end_of_initialization:	
  2437                           ;End of C runtime variable initialization code
  2438                           
  2439  0052                     __end_of__initialization:	
  2440  0052  107E               	bcf	pic14e$flags,0	;clear compiler interrupt flag
  2441  0053  0020               	movlb	0
  2442  0054  3196  2E91         	ljmp	_main	;jump to C main() function
  2443                           
  2444                           	psect	bitbssCOMMON
  2445  03C0                     __pbitbssCOMMON:	
  2446  03C0                     _Receive_OK:	
  2447  03C0                     	ds	1
  2448  03C1                     _Transceive_OK:	
  2449  03C1                     	ds	1
  2450                           
  2451                           	psect	bssCOMMON
  2452  0079                     __pbssCOMMON:	
  2453  0079                     _DelayOff:	
  2454  0079                     	ds	1
  2455  007A                     _DimmerLightsIntr:	
  2456  007A                     	ds	1
  2457                           
  2458                           	psect	bssBANK0
  2459  006D                     __pbssBANK0:	
  2460  006D                     _DimmerLights:	
  2461  006D                     	ds	1
  2462  006E                     _Sw:	
  2463  006E                     	ds	1
  2464                           
  2465                           	psect	bssBANK1
  2466  00A0                     __pbssBANK1:	
  2467  00A0                     _RF1:	
  2468  00A0                     	ds	14
  2469  00AE                     _myMain:	
  2470  00AE                     	ds	14
  2471  00BC                     _Buz1:	
  2472  00BC                     	ds	12
  2473  00C8                     _Dimmer:	
  2474  00C8                     	ds	3
  2475  00CB                     _WDT:	
  2476  00CB                     	ds	2
  2477  00CD                     _CRC:	
  2478  00CD                     	ds	1
  2479  00CE                     _DimmerLights11:	
  2480  00CE                     	ds	1
  2481  00CF                     _DimmerLights22:	
  2482  00CF                     	ds	1
  2483  00D0                     _DimmerLightsIntrIOC:	
  2484  00D0                     	ds	1
  2485  00D1                     _LED:	
  2486  00D1                     	ds	1
  2487  00D2                     _RSSI:	
  2488  00D2                     	ds	1
  2489  00D3                     _Rx_Length:	
  2490  00D3                     	ds	1
  2491  00D4                     _SPI0Buffer:	
  2492  00D4                     	ds	1
  2493  00D5                     _SwDetect:	
  2494  00D5                     	ds	1
  2495  00D6                     _Tx_Length:	
  2496  00D6                     	ds	1
  2497  00D7                     _r_address:	
  2498  00D7                     	ds	1
  2499  00D8                     _r_data:	
  2500  00D8                     	ds	1
  2501  00D9                     _s_data:	
  2502  00D9                     	ds	1
  2503  00DA                     _Temp:	
  2504  00DA                     	ds	18
  2505                           
  2506                           	psect	bssBANK2
  2507  0120                     __pbssBANK2:	
  2508  0120                     _Timer1:	
  2509  0120                     	ds	3
  2510  0123                     _RF_Count:	
  2511  0123                     	ds	2
  2512  0125                     _Load:	
  2513  0125                     	ds	46
  2514  0153                     _DimmerLights1:	
  2515  0153                     	ds	17
  2516  0164                     _VarErrLED:	
  2517  0164                     	ds	4
  2518  0168                     _VarLED1:	
  2519  0168                     	ds	4
  2520  016C                     _VarLED2:	
  2521  016C                     	ds	4
  2522                           
  2523                           	psect	bssBANK3
  2524  01A0                     __pbssBANK3:	
  2525  01A0                     _RF_Data:	
  2526  01A0                     	ds	30
  2527  01BE                     _DimmerLights2:	
  2528  01BE                     	ds	17
  2529  01CF                     _Sw1:	
  2530  01CF                     	ds	9
  2531  01D8                     _Sw2:	
  2532  01D8                     	ds	9
  2533  01E1                     _DlySw1:	
  2534  01E1                     	ds	5
  2535  01E6                     _DlySw2:	
  2536  01E6                     	ds	5
  2537                           
  2538                           	psect	bssBANK4
  2539  0220                     __pbssBANK4:	
  2540  0220                     _Memory:	
  2541  0220                     	ds	37
  2542                           
  2543                           	psect	dataBANK4
  2544  0245                     __pdataBANK4:	
  2545  0245                     __product:	
  2546  0245                     	ds	32
  2547                           
  2548                           	psect	clrtext
  2549  1AF6                     clear_ram0:	
  2550                           ;	Called with FSR0 containing the base address, and
  2551                           ;	WREG with the size to clear
  2552                           
  2553  1AF6  0064               	clrwdt	;clear the watchdog before getting into this loop
  2554  1AF7                     clrloop0:	
  2555  1AF7  0180               	clrf	0	;clear RAM location pointed to by FSR
  2556  1AF8  3101               	addfsr 0,1
  2557  1AF9  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2558  1AFA  2AF7               	goto	clrloop0	;have we reached the end yet?
  2559  1AFB  3400               	retlw	0	;all done for this memory range, return
  2560                           
  2561                           	psect	inittext
  2562  1AF0                     init_ram:	
  2563  1AF0  00FE               	movwf	126
  2564  1AF1                     initloop:	
  2565  1AF1  0012               	moviw fsr0++
  2566  1AF2  001E               	movwi fsr1++
  2567  1AF3  0BFE               	decfsz	126,f
  2568  1AF4  2AF1               	goto	initloop
  2569  1AF5  3400               	retlw	0
  2570                           
  2571                           	psect	cstackBANK4
  2572  0265                     __pcstackBANK4:	
  2573  0265                     Exception_Main@count:	
  2574                           
  2575                           ; 1 bytes @ 0x0
  2576  0265                     	ds	1
  2577  0266                     Exception_Main@error:	
  2578                           
  2579                           ; 1 bytes @ 0x1
  2580  0266                     	ds	1
  2581  0267                     Exception_Main@i:	
  2582                           
  2583                           ; 2 bytes @ 0x2
  2584  0267                     	ds	2
  2585  0269                     Exception_Main@i_3643:	
  2586                           
  2587                           ; 2 bytes @ 0x4
  2588  0269                     	ds	2
  2589  026B                     Exception_Main@lights:	
  2590                           
  2591                           ; 1 bytes @ 0x6
  2592  026B                     	ds	1
  2593                           
  2594                           	psect	cstackBANK3
  2595  01EB                     __pcstackBANK3:	
  2596  01EB                     ?_main:	
  2597  01EB                     main@argc:	
  2598                           ; 2 bytes @ 0x0
  2599                           
  2600                           
  2601                           ; 2 bytes @ 0x0
  2602  01EB                     	ds	2
  2603  01ED                     main@argv:	
  2604                           
  2605                           ; 2 bytes @ 0x2
  2606  01ED                     	ds	2
  2607                           
  2608                           	psect	cstackBANK1
  2609  00EC                     __pcstackBANK1:	
  2610  00EC                     ??_setRF_Main:	
  2611  00EC                     DlyOff_Main@sw:	
  2612                           ; 0 bytes @ 0x0
  2613                           
  2614                           
  2615                           ; 1 bytes @ 0x0
  2616  00EC                     	ds	1
  2617  00ED                     setRF_Main@loop_f:	
  2618                           
  2619                           ; 1 bytes @ 0x1
  2620  00ED                     	ds	1
  2621  00EE                     setRF_Main@error:	
  2622                           
  2623                           ; 1 bytes @ 0x2
  2624  00EE                     	ds	1
  2625                           
  2626                           	psect	cstackCOMMON
  2627  0070                     __pcstackCOMMON:	
  2628  0070                     ?_CC2500_WriteCommand:	
  2629  0070                     ?_RF_Timeout_Counter:	
  2630                           ; 0 bytes @ 0x0
  2631                           
  2632  0070                     ?_setRF_TimeoutCleared:	
  2633                           ; 0 bytes @ 0x0
  2634                           
  2635  0070                     ?_CC2500_WriteByte:	
  2636                           ; 0 bytes @ 0x0
  2637                           
  2638  0070                     ?_CC2500_ReadStatus:	
  2639                           ; 0 bytes @ 0x0
  2640                           
  2641  0070                     ?_CC2500_ReadByte:	
  2642                           ; 0 bytes @ 0x0
  2643                           
  2644  0070                     ?_CC2500_PowerRST:	
  2645                           ; 0 bytes @ 0x0
  2646                           
  2647  0070                     ?_CC2500_InitSetREG:	
  2648                           ; 0 bytes @ 0x0
  2649                           
  2650  0070                     ?_CC2500_InitPATable:	
  2651                           ; 0 bytes @ 0x0
  2652                           
  2653  0070                     ?_CC2500_ClearTXFIFO:	
  2654                           ; 0 bytes @ 0x0
  2655                           
  2656  0070                     ?_CC2500_ClearRXFIFO:	
  2657                           ; 0 bytes @ 0x0
  2658                           
  2659  0070                     ?_CC2500_FrequencyCabr:	
  2660                           ; 0 bytes @ 0x0
  2661                           
  2662  0070                     ?_CC2500_SIDLEMode:	
  2663                           ; 0 bytes @ 0x0
  2664                           
  2665  0070                     ?_DlyOff_Initialization:	
  2666                           ; 0 bytes @ 0x0
  2667                           
  2668  0070                     ?_DlyOff_Main:	
  2669                           ; 0 bytes @ 0x0
  2670                           
  2671  0070                     ?_setDimmerLights_ErrorClose:	
  2672                           ; 0 bytes @ 0x0
  2673                           
  2674  0070                     ?_setDimmerLights_IntrIOC_GO:	
  2675                           ; 0 bytes @ 0x0
  2676                           
  2677  0070                     ??_setDimmerLights_IntrIOC_GO:	
  2678                           ; 0 bytes @ 0x0
  2679                           
  2680  0070                     ?_setDimmerLights_Initialization:	
  2681                           ; 0 bytes @ 0x0
  2682                           
  2683  0070                     ?_setDimmerLights_Main:	
  2684                           ; 0 bytes @ 0x0
  2685                           
  2686  0070                     ?_setDimmerLights_Line:	
  2687                           ; 0 bytes @ 0x0
  2688                           
  2689  0070                     ?_setTxData:	
  2690                           ; 0 bytes @ 0x0
  2691                           
  2692  0070                     ?_setRF_TransceiveGO:	
  2693                           ; 0 bytes @ 0x0
  2694                           
  2695  0070                     ?_setLED_Initialization:	
  2696                           ; 0 bytes @ 0x0
  2697                           
  2698  0070                     ?_setLED_Main:	
  2699                           ; 0 bytes @ 0x0
  2700                           
  2701  0070                     ?_Fosc_Set:	
  2702                           ; 0 bytes @ 0x0
  2703                           
  2704  0070                     ?_IO_Set:	
  2705                           ; 0 bytes @ 0x0
  2706                           
  2707  0070                     ?_TMR1_Set:	
  2708                           ; 0 bytes @ 0x0
  2709                           
  2710  0070                     ?_ADC_Set:	
  2711                           ; 0 bytes @ 0x0
  2712                           
  2713  0070                     ?_IOC_Set:	
  2714                           ; 0 bytes @ 0x0
  2715                           
  2716  0070                     ?_WDT_Set:	
  2717                           ; 0 bytes @ 0x0
  2718                           
  2719  0070                     ?_IOC_ISR:	
  2720                           ; 0 bytes @ 0x0
  2721                           
  2722  0070                     ?_TMR1_ISR:	
  2723                           ; 0 bytes @ 0x0
  2724                           
  2725  0070                     ?_Timeout_Counter:	
  2726                           ; 0 bytes @ 0x0
  2727                           
  2728  0070                     ?_set_TimeoutCleared:	
  2729                           ; 0 bytes @ 0x0
  2730                           
  2731  0070                     ?_Flash_Memory_Write:	
  2732                           ; 0 bytes @ 0x0
  2733                           
  2734  0070                     ?_Flash_Memory_Modify:	
  2735                           ; 0 bytes @ 0x0
  2736                           
  2737  0070                     ?_WDT_Clearing:	
  2738                           ; 0 bytes @ 0x0
  2739                           
  2740  0070                     ?_myMain_Initialization:	
  2741                           ; 0 bytes @ 0x0
  2742                           
  2743  0070                     ?_Temp_Initialization:	
  2744                           ; 0 bytes @ 0x0
  2745                           
  2746  0070                     ?_Load_Initialization:	
  2747                           ; 0 bytes @ 0x0
  2748                           
  2749  0070                     ?_Switch_Initialization:	
  2750                           ; 0 bytes @ 0x0
  2751                           
  2752  0070                     ?_RF_Initialization:	
  2753                           ; 0 bytes @ 0x0
  2754                           
  2755  0070                     ?_getLoad_AD:	
  2756                           ; 0 bytes @ 0x0
  2757                           
  2758  0070                     ?_getTemp_AD:	
  2759                           ; 0 bytes @ 0x0
  2760                           
  2761  0070                     ?_my_MainTimer:	
  2762                           ; 0 bytes @ 0x0
  2763                           
  2764  0070                     ?_Temp_Main:	
  2765                           ; 0 bytes @ 0x0
  2766                           
  2767  0070                     ?_Load_Main:	
  2768                           ; 0 bytes @ 0x0
  2769                           
  2770  0070                     ?_Switch_Main:	
  2771                           ; 0 bytes @ 0x0
  2772                           
  2773  0070                     ?_RF_Main:	
  2774                           ; 0 bytes @ 0x0
  2775                           
  2776  0070                     ?_Exception_Main:	
  2777                           ; 0 bytes @ 0x0
  2778                           
  2779  0070                     ?_setLoad_AH_AL_Restore:	
  2780                           ; 0 bytes @ 0x0
  2781                           
  2782  0070                     ?_setTemp_Initialization:	
  2783                           ; 0 bytes @ 0x0
  2784                           
  2785  0070                     ?_setTemp_Main:	
  2786                           ; 0 bytes @ 0x0
  2787                           
  2788  0070                     ?_setRF_Initialization:	
  2789                           ; 0 bytes @ 0x0
  2790                           
  2791  0070                     ?_setRF_Main:	
  2792                           ; 0 bytes @ 0x0
  2793                           
  2794  0070                     ?_RF_RxDisable:	
  2795                           ; 0 bytes @ 0x0
  2796                           
  2797  0070                     ?_getRxData:	
  2798                           ; 0 bytes @ 0x0
  2799                           
  2800  0070                     ?_setLog_Code:	
  2801                           ; 0 bytes @ 0x0
  2802                           
  2803  0070                     ?_setControl_Lights_Table:	
  2804                           ; 0 bytes @ 0x0
  2805                           
  2806  0070                     ?_setRFSW_Control:	
  2807                           ; 0 bytes @ 0x0
  2808                           
  2809  0070                     ?_setRFSW_AdjControl:	
  2810                           ; 0 bytes @ 0x0
  2811                           
  2812  0070                     ?_setRF_DimmerValue:	
  2813                           ; 0 bytes @ 0x0
  2814                           
  2815  0070                     ?_setSw_Initialization:	
  2816                           ; 0 bytes @ 0x0
  2817                           
  2818  0070                     ?_setSw_Main:	
  2819                           ; 0 bytes @ 0x0
  2820                           
  2821  0070                     ?_Buzzer_Initialization:	
  2822                           ; 0 bytes @ 0x0
  2823                           
  2824  0070                     ?_Buzzer_Main:	
  2825                           ; 0 bytes @ 0x0
  2826                           
  2827  0070                     ?_CC2500_TxData:	
  2828                           ; 0 bytes @ 0x0
  2829                           
  2830  0070                     ?_CC2500_RxData:	
  2831                           ; 0 bytes @ 0x0
  2832                           
  2833  0070                     ?_CC2500_PowerOnInitial:	
  2834                           ; 0 bytes @ 0x0
  2835                           
  2836  0070                     ?_DelayOffPointSelect:	
  2837                           ; 0 bytes @ 0x0
  2838                           
  2839  0070                     ?_DelayOff_Initialization:	
  2840                           ; 0 bytes @ 0x0
  2841                           
  2842  0070                     ?_DelayOff_Main:	
  2843                           ; 0 bytes @ 0x0
  2844                           
  2845  0070                     ?_setDimmerLights_IntrControl:	
  2846                           ; 0 bytes @ 0x0
  2847                           
  2848  0070                     ??_setDimmerLights_IntrControl:	
  2849                           ; 0 bytes @ 0x0
  2850                           
  2851  0070                     ?_DimmerLightsPointSelect:	
  2852                           ; 0 bytes @ 0x0
  2853                           
  2854  0070                     ?_DimmerLights_Initialization:	
  2855                           ; 0 bytes @ 0x0
  2856                           
  2857  0070                     ?_setDimmerLights_SwOn:	
  2858                           ; 0 bytes @ 0x0
  2859                           
  2860  0070                     ?_setDimmerLights_SwOff:	
  2861                           ; 0 bytes @ 0x0
  2862                           
  2863  0070                     ?_setDimmerLights_AdjOn:	
  2864                           ; 0 bytes @ 0x0
  2865                           
  2866  0070                     ?_DimmerLights_Main:	
  2867                           ; 0 bytes @ 0x0
  2868                           
  2869  0070                     ?_setDimmerLights_AdjRF:	
  2870                           ; 0 bytes @ 0x0
  2871                           
  2872  0070                     ?_LedPointSelect:	
  2873                           ; 0 bytes @ 0x0
  2874                           
  2875  0070                     ?_LED_Initialization:	
  2876                           ; 0 bytes @ 0x0
  2877                           
  2878  0070                     ?_LED_Main:	
  2879                           ; 0 bytes @ 0x0
  2880                           
  2881  0070                     ?_Mcu_Initialization:	
  2882                           ; 0 bytes @ 0x0
  2883                           
  2884  0070                     ?_ISR:	
  2885                           ; 0 bytes @ 0x0
  2886                           
  2887  0070                     ?_Flash_Memory_Initialization:	
  2888                           ; 0 bytes @ 0x0
  2889                           
  2890  0070                     ?_Flash_Memory_Main:	
  2891                           ; 0 bytes @ 0x0
  2892                           
  2893  0070                     ?_Flash_Memory_Unlock:	
  2894                           ; 0 bytes @ 0x0
  2895                           
  2896  0070                     ?_Flash_Memory_Erasing:	
  2897                           ; 0 bytes @ 0x0
  2898                           
  2899  0070                     ?_setMemory_Modify:	
  2900                           ; 0 bytes @ 0x0
  2901                           
  2902  0070                     ?_setMemory_LoopSave:	
  2903                           ; 0 bytes @ 0x0
  2904                           
  2905  0070                     ?_WDT_Main:	
  2906                           ; 0 bytes @ 0x0
  2907                           
  2908  0070                     ?_setRF_Learn:	
  2909                           ; 0 bytes @ 0x0
  2910                           
  2911  0070                     ?_TouchPower:	
  2912                           ; 0 bytes @ 0x0
  2913                           
  2914  0070                     ?_SwPointSelect:	
  2915                           ; 0 bytes @ 0x0
  2916                           
  2917  0070                     ?_DelayTimejudge:	
  2918                           ; 0 bytes @ 0x0
  2919                           
  2920  0070                     ?_getLoad_OK:	
  2921                           ; 1 bytes @ 0x0
  2922                           
  2923  0070                     ?_getMain_All_Error_Status:	
  2924                           ; 1 bytes @ 0x0
  2925                           
  2926  0070                     ?_getMain_LightsStatus:	
  2927                           ; 1 bytes @ 0x0
  2928                           
  2929  0070                     ?_getDimmerLights_Allow_Condition:	
  2930                           ; 1 bytes @ 0x0
  2931                           
  2932  0070                     ?_setPercentValue:	
  2933                           ; 1 bytes @ 0x0
  2934                           
  2935  0070                     ?_getPercentValue:	
  2936                           ; 1 bytes @ 0x0
  2937                           
  2938  0070                     ?_Flash_Memory_Read:	
  2939                           ; 1 bytes @ 0x0
  2940                           
  2941  0070                     ?_getRF_KeyStatus:	
  2942                           ; 1 bytes @ 0x0
  2943                           
  2944  0070                     ?_getSw_KeyStatus:	
  2945                           ; 1 bytes @ 0x0
  2946                           
  2947  0070                     ?_getDelayOff_GO:	
  2948                           ; 1 bytes @ 0x0
  2949                           
  2950  0070                     ?_getDimmer_LoadGO:	
  2951                           ; 1 bytes @ 0x0
  2952                           
  2953  0070                     ?_getDimmerLights_Line:	
  2954                           ; 1 bytes @ 0x0
  2955                           
  2956  0070                     ?_getDimmerLights_Status:	
  2957                           ; 1 bytes @ 0x0
  2958                           
  2959  0070                     ?_getAll_DimmerLights_AdjSw:	
  2960                           ; 1 bytes @ 0x0
  2961                           
  2962  0070                     ?_getDimmer_Load_Status:	
  2963                           ; 1 bytes @ 0x0
  2964                           
  2965  0070                     ?_getMain_Lights_Count:	
  2966                           ; 1 bytes @ 0x0
  2967                           
  2968                           
  2969                           ; 1 bytes @ 0x0
  2970  0070                     	ds	1
  2971  0071                     setDimmerLights_IntrIOC_GO@lights:	
  2972  0071                     setDimmerLights_IntrControl@lights:	
  2973                           ; 1 bytes @ 0x1
  2974                           
  2975                           
  2976                           ; 1 bytes @ 0x1
  2977  0071                     	ds	1
  2978  0072                     ??_IOC_ISR:	
  2979  0072                     ??_TMR1_ISR:	
  2980                           ; 0 bytes @ 0x2
  2981                           
  2982  0072                     ??_ISR:	
  2983                           ; 0 bytes @ 0x2
  2984                           
  2985                           
  2986                           ; 0 bytes @ 0x2
  2987  0072                     	ds	1
  2988  0073                     ??_RF_Timeout_Counter:	
  2989  0073                     ??_setRF_TimeoutCleared:	
  2990                           ; 0 bytes @ 0x3
  2991                           
  2992  0073                     ??_CC2500_WriteByte:	
  2993                           ; 0 bytes @ 0x3
  2994                           
  2995  0073                     ??_CC2500_ReadByte:	
  2996                           ; 0 bytes @ 0x3
  2997                           
  2998  0073                     ?_DelayTime_1us:	
  2999                           ; 0 bytes @ 0x3
  3000                           
  3001  0073                     ??_getLoad_OK:	
  3002                           ; 0 bytes @ 0x3
  3003                           
  3004  0073                     ??_getMain_All_Error_Status:	
  3005                           ; 0 bytes @ 0x3
  3006                           
  3007  0073                     ??_getMain_LightsStatus:	
  3008                           ; 0 bytes @ 0x3
  3009                           
  3010  0073                     ??_setDimmerLights_Line:	
  3011                           ; 0 bytes @ 0x3
  3012                           
  3013  0073                     ??_setTxData:	
  3014                           ; 0 bytes @ 0x3
  3015                           
  3016  0073                     ??_setRF_TransceiveGO:	
  3017                           ; 0 bytes @ 0x3
  3018                           
  3019  0073                     ??_Fosc_Set:	
  3020                           ; 0 bytes @ 0x3
  3021                           
  3022  0073                     ??_IO_Set:	
  3023                           ; 0 bytes @ 0x3
  3024                           
  3025  0073                     ??_TMR1_Set:	
  3026                           ; 0 bytes @ 0x3
  3027                           
  3028  0073                     ??_ADC_Set:	
  3029                           ; 0 bytes @ 0x3
  3030                           
  3031  0073                     ??_IOC_Set:	
  3032                           ; 0 bytes @ 0x3
  3033                           
  3034  0073                     ??_WDT_Set:	
  3035                           ; 0 bytes @ 0x3
  3036                           
  3037  0073                     ??_Timeout_Counter:	
  3038                           ; 0 bytes @ 0x3
  3039                           
  3040  0073                     ??_set_TimeoutCleared:	
  3041                           ; 0 bytes @ 0x3
  3042                           
  3043  0073                     ??_Flash_Memory_Read:	
  3044                           ; 0 bytes @ 0x3
  3045                           
  3046  0073                     ?_setMemory_Data:	
  3047                           ; 0 bytes @ 0x3
  3048                           
  3049  0073                     ??_Flash_Memory_Write:	
  3050                           ; 0 bytes @ 0x3
  3051                           
  3052  0073                     ??_WDT_Clearing:	
  3053                           ; 0 bytes @ 0x3
  3054                           
  3055  0073                     ??_myMain_Initialization:	
  3056                           ; 0 bytes @ 0x3
  3057                           
  3058  0073                     ??_Temp_Initialization:	
  3059                           ; 0 bytes @ 0x3
  3060                           
  3061  0073                     ??_setLoad_AH_AL_Restore:	
  3062                           ; 0 bytes @ 0x3
  3063                           
  3064  0073                     ??_setTemp_Initialization:	
  3065                           ; 0 bytes @ 0x3
  3066                           
  3067  0073                     ??_setRF_Initialization:	
  3068                           ; 0 bytes @ 0x3
  3069                           
  3070  0073                     ??_getRF_KeyStatus:	
  3071                           ; 0 bytes @ 0x3
  3072                           
  3073  0073                     ??_getSw_KeyStatus:	
  3074                           ; 0 bytes @ 0x3
  3075                           
  3076  0073                     ??_Buzzer_Initialization:	
  3077                           ; 0 bytes @ 0x3
  3078                           
  3079  0073                     ??_Buzzer_Main:	
  3080                           ; 0 bytes @ 0x3
  3081                           
  3082  0073                     ??_DelayOffPointSelect:	
  3083                           ; 0 bytes @ 0x3
  3084                           
  3085  0073                     ??_DimmerLightsPointSelect:	
  3086                           ; 0 bytes @ 0x3
  3087                           
  3088  0073                     ??_getDimmer_LoadGO:	
  3089                           ; 0 bytes @ 0x3
  3090                           
  3091  0073                     ??_getDimmerLights_Line:	
  3092                           ; 0 bytes @ 0x3
  3093                           
  3094  0073                     ??_getDimmer_Load_Status:	
  3095                           ; 0 bytes @ 0x3
  3096                           
  3097  0073                     ??_LedPointSelect:	
  3098                           ; 0 bytes @ 0x3
  3099                           
  3100  0073                     ??_Flash_Memory_Unlock:	
  3101                           ; 0 bytes @ 0x3
  3102                           
  3103  0073                     ??_Flash_Memory_Erasing:	
  3104                           ; 0 bytes @ 0x3
  3105                           
  3106  0073                     ??_setMemory_Modify:	
  3107                           ; 0 bytes @ 0x3
  3108                           
  3109  0073                     ??_setMemory_LoopSave:	
  3110                           ; 0 bytes @ 0x3
  3111                           
  3112  0073                     ??_WDT_Main:	
  3113                           ; 0 bytes @ 0x3
  3114                           
  3115  0073                     ??_getMain_Lights_Count:	
  3116                           ; 0 bytes @ 0x3
  3117                           
  3118  0073                     ??_setRF_Learn:	
  3119                           ; 0 bytes @ 0x3
  3120                           
  3121  0073                     ??_TouchPower:	
  3122                           ; 0 bytes @ 0x3
  3123                           
  3124  0073                     ??_SwPointSelect:	
  3125                           ; 0 bytes @ 0x3
  3126                           
  3127  0073                     ?___bmul:	
  3128                           ; 0 bytes @ 0x3
  3129                           
  3130  0073                     ?_getBuz_GO:	
  3131                           ; 1 bytes @ 0x3
  3132                           
  3133  0073                     ?_getAD:	
  3134                           ; 2 bytes @ 0x3
  3135                           
  3136  0073                     ?___wmul:	
  3137                           ; 2 bytes @ 0x3
  3138                           
  3139  0073                     ?___awdiv:	
  3140                           ; 2 bytes @ 0x3
  3141                           
  3142  0073                     ?___lwdiv:	
  3143                           ; 2 bytes @ 0x3
  3144                           
  3145  0073                     ?___ftpack:	
  3146                           ; 2 bytes @ 0x3
  3147                           
  3148  0073                     getDimmer_LoadGO@loadgo:	
  3149                           ; 3 bytes @ 0x3
  3150                           
  3151  0073                     setDimmerLights_Line@lights:	
  3152                           ; 1 bytes @ 0x3
  3153                           
  3154  0073                     getDimmer_Load_Status@status:	
  3155                           ; 1 bytes @ 0x3
  3156                           
  3157  0073                     getAD@adcon1:	
  3158                           ; 1 bytes @ 0x3
  3159                           
  3160  0073                     setMemory_Data@data:	
  3161                           ; 1 bytes @ 0x3
  3162                           
  3163  0073                     getMain_LightsStatus@status:	
  3164                           ; 1 bytes @ 0x3
  3165                           
  3166  0073                     getMain_Lights_Count@count:	
  3167                           ; 1 bytes @ 0x3
  3168                           
  3169  0073                     getLoad_OK@ok:	
  3170                           ; 1 bytes @ 0x3
  3171                           
  3172  0073                     ___bmul@multiplicand:	
  3173                           ; 1 bytes @ 0x3
  3174                           
  3175  0073                     DelayTime_1us@count:	
  3176                           ; 1 bytes @ 0x3
  3177                           
  3178  0073                     ___wmul@multiplier:	
  3179                           ; 2 bytes @ 0x3
  3180                           
  3181  0073                     ___awdiv@divisor:	
  3182                           ; 2 bytes @ 0x3
  3183                           
  3184  0073                     ___lwdiv@divisor:	
  3185                           ; 2 bytes @ 0x3
  3186                           
  3187  0073                     ___ftpack@arg:	
  3188                           ; 2 bytes @ 0x3
  3189                           
  3190                           
  3191                           ; 3 bytes @ 0x3
  3192  0073                     	ds	1
  3193  0074                     ??_getDimmerLights_Allow_Condition:	
  3194  0074                     ??_setMemory_Data:	
  3195                           ; 0 bytes @ 0x4
  3196                           
  3197  0074                     ??_RF_Initialization:	
  3198                           ; 0 bytes @ 0x4
  3199                           
  3200  0074                     ??_Mcu_Initialization:	
  3201                           ; 0 bytes @ 0x4
  3202                           
  3203  0074                     ??___bmul:	
  3204                           ; 0 bytes @ 0x4
  3205                           
  3206  0074                     CC2500_WriteByte@loop_a:	
  3207                           ; 0 bytes @ 0x4
  3208                           
  3209  0074                     CC2500_ReadByte@loop_b:	
  3210                           ; 1 bytes @ 0x4
  3211                           
  3212  0074                     DelayOffPointSelect@sw:	
  3213                           ; 1 bytes @ 0x4
  3214                           
  3215  0074                     DimmerLightsPointSelect@lights:	
  3216                           ; 1 bytes @ 0x4
  3217                           
  3218  0074                     getDimmerLights_Line@line:	
  3219                           ; 1 bytes @ 0x4
  3220                           
  3221  0074                     LedPointSelect@led:	
  3222                           ; 1 bytes @ 0x4
  3223                           
  3224  0074                     Flash_Memory_Read@i:	
  3225                           ; 1 bytes @ 0x4
  3226                           
  3227  0074                     Flash_Memory_Write@i:	
  3228                           ; 1 bytes @ 0x4
  3229                           
  3230  0074                     setMemory_Modify@command:	
  3231                           ; 1 bytes @ 0x4
  3232                           
  3233  0074                     setMemory_LoopSave@command:	
  3234                           ; 1 bytes @ 0x4
  3235                           
  3236  0074                     getMain_Lights_Count@status1:	
  3237                           ; 1 bytes @ 0x4
  3238                           
  3239  0074                     setLoad_AH_AL_Restore@i:	
  3240                           ; 1 bytes @ 0x4
  3241                           
  3242  0074                     setRF_Learn@command:	
  3243                           ; 1 bytes @ 0x4
  3244                           
  3245  0074                     getRF_KeyStatus@key:	
  3246                           ; 1 bytes @ 0x4
  3247                           
  3248  0074                     setRF_TransceiveGO@command:	
  3249                           ; 1 bytes @ 0x4
  3250                           
  3251  0074                     SwPointSelect@sw:	
  3252                           ; 1 bytes @ 0x4
  3253                           
  3254  0074                     _getSw_KeyStatus$6304:	
  3255                           ; 1 bytes @ 0x4
  3256                           
  3257                           
  3258                           ; 1 bytes @ 0x4
  3259  0074                     	ds	1
  3260  0075                     ??_CC2500_WriteCommand:	
  3261  0075                     ??_CC2500_ReadStatus:	
  3262                           ; 0 bytes @ 0x5
  3263                           
  3264  0075                     ??_CC2500_PowerRST:	
  3265                           ; 0 bytes @ 0x5
  3266                           
  3267  0075                     ??_DelayTime_1us:	
  3268                           ; 0 bytes @ 0x5
  3269                           
  3270  0075                     ?_CC2500_WriteREG:	
  3271                           ; 0 bytes @ 0x5
  3272                           
  3273  0075                     ??_DlyOff_Initialization:	
  3274                           ; 0 bytes @ 0x5
  3275                           
  3276  0075                     ??_setDimmerLights_Initialization:	
  3277                           ; 0 bytes @ 0x5
  3278                           
  3279  0075                     ?_setLED:	
  3280                           ; 0 bytes @ 0x5
  3281                           
  3282  0075                     ??_setLED_Main:	
  3283                           ; 0 bytes @ 0x5
  3284                           
  3285  0075                     ??_Load_Initialization:	
  3286                           ; 0 bytes @ 0x5
  3287                           
  3288  0075                     ??_getBuz_GO:	
  3289                           ; 0 bytes @ 0x5
  3290                           
  3291  0075                     ??_getDelayOff_GO:	
  3292                           ; 0 bytes @ 0x5
  3293                           
  3294  0075                     ??_setDimmerLights_AdjOn:	
  3295                           ; 0 bytes @ 0x5
  3296                           
  3297  0075                     ??_getDimmerLights_Status:	
  3298                           ; 0 bytes @ 0x5
  3299                           
  3300  0075                     ??_getAll_DimmerLights_AdjSw:	
  3301                           ; 0 bytes @ 0x5
  3302                           
  3303  0075                     CC2500_WriteREG@value:	
  3304                           ; 0 bytes @ 0x5
  3305                           
  3306  0075                     DlyOff_Initialization@sw:	
  3307                           ; 1 bytes @ 0x5
  3308                           
  3309  0075                     getDelayOff_GO@sw:	
  3310                           ; 1 bytes @ 0x5
  3311                           
  3312  0075                     setDimmerLights_AdjOn@sw:	
  3313                           ; 1 bytes @ 0x5
  3314                           
  3315  0075                     getDimmerLights_Status@lights:	
  3316                           ; 1 bytes @ 0x5
  3317                           
  3318  0075                     setLED@command:	
  3319                           ; 1 bytes @ 0x5
  3320                           
  3321  0075                     Flash_Memory_Read@address:	
  3322                           ; 1 bytes @ 0x5
  3323                           
  3324  0075                     setMemory_Data@address:	
  3325                           ; 1 bytes @ 0x5
  3326                           
  3327  0075                     getMain_Lights_Count@status2:	
  3328                           ; 1 bytes @ 0x5
  3329                           
  3330  0075                     _getRF_KeyStatus$5308:	
  3331                           ; 1 bytes @ 0x5
  3332                           
  3333  0075                     _getSw_KeyStatus$6305:	
  3334                           ; 1 bytes @ 0x5
  3335                           
  3336  0075                     ___bmul@product:	
  3337                           ; 1 bytes @ 0x5
  3338                           
  3339  0075                     ___wmul@multiplicand:	
  3340                           ; 1 bytes @ 0x5
  3341                           
  3342  0075                     ___awdiv@dividend:	
  3343                           ; 2 bytes @ 0x5
  3344                           
  3345  0075                     ___lwdiv@dividend:	
  3346                           ; 2 bytes @ 0x5
  3347                           
  3348                           
  3349                           ; 2 bytes @ 0x5
  3350  0075                     	ds	1
  3351  0076                     ??_CC2500_WriteREG:	
  3352  0076                     ??_setLED:	
  3353                           ; 0 bytes @ 0x6
  3354                           
  3355  0076                     ??_DelayOff_Initialization:	
  3356                           ; 0 bytes @ 0x6
  3357                           
  3358  0076                     ??_getAD:	
  3359                           ; 0 bytes @ 0x6
  3360                           
  3361  0076                     CC2500_WriteCommand@command:	
  3362                           ; 0 bytes @ 0x6
  3363                           
  3364  0076                     CC2500_ReadStatus@status_addr:	
  3365                           ; 1 bytes @ 0x6
  3366                           
  3367  0076                     getDelayOff_GO@go:	
  3368                           ; 1 bytes @ 0x6
  3369                           
  3370  0076                     setDimmerLights_Initialization@lights:	
  3371                           ; 1 bytes @ 0x6
  3372                           
  3373  0076                     getDimmerLights_Status@status:	
  3374                           ; 1 bytes @ 0x6
  3375                           
  3376  0076                     setLED@led:	
  3377                           ; 1 bytes @ 0x6
  3378                           
  3379  0076                     getAD@adcon0:	
  3380                           ; 1 bytes @ 0x6
  3381                           
  3382  0076                     Flash_Memory_Read@ret:	
  3383                           ; 1 bytes @ 0x6
  3384                           
  3385  0076                     getSw_KeyStatus@status:	
  3386                           ; 1 bytes @ 0x6
  3387                           
  3388  0076                     ___bmul@multiplier:	
  3389                           ; 1 bytes @ 0x6
  3390                           
  3391  0076                     ___ftpack@exp:	
  3392                           ; 1 bytes @ 0x6
  3393                           
  3394                           
  3395                           ; 1 bytes @ 0x6
  3396  0076                     	ds	1
  3397  0077                     ??_CC2500_ClearTXFIFO:	
  3398  0077                     ??_CC2500_ClearRXFIFO:	
  3399                           ; 0 bytes @ 0x7
  3400                           
  3401  0077                     ??_CC2500_FrequencyCabr:	
  3402                           ; 0 bytes @ 0x7
  3403                           
  3404  0077                     ??_CC2500_SIDLEMode:	
  3405                           ; 0 bytes @ 0x7
  3406                           
  3407  0077                     ??_setLED_Initialization:	
  3408                           ; 0 bytes @ 0x7
  3409                           
  3410  0077                     ??_Flash_Memory_Modify:	
  3411                           ; 0 bytes @ 0x7
  3412                           
  3413  0077                     ??_getTemp_AD:	
  3414                           ; 0 bytes @ 0x7
  3415                           
  3416  0077                     ??_RF_RxDisable:	
  3417                           ; 0 bytes @ 0x7
  3418                           
  3419  0077                     ??_setSw_Initialization:	
  3420                           ; 0 bytes @ 0x7
  3421                           
  3422  0077                     ??_CC2500_TxData:	
  3423                           ; 0 bytes @ 0x7
  3424                           
  3425  0077                     ??_CC2500_RxData:	
  3426                           ; 0 bytes @ 0x7
  3427                           
  3428  0077                     ??_DimmerLights_Initialization:	
  3429                           ; 0 bytes @ 0x7
  3430                           
  3431  0077                     ??___wmul:	
  3432                           ; 0 bytes @ 0x7
  3433                           
  3434  0077                     ??___awdiv:	
  3435                           ; 0 bytes @ 0x7
  3436                           
  3437  0077                     ??___lwdiv:	
  3438                           ; 0 bytes @ 0x7
  3439                           
  3440  0077                     CC2500_WriteREG@w_addr:	
  3441                           ; 0 bytes @ 0x7
  3442                           
  3443  0077                     setLED_Initialization@led:	
  3444                           ; 1 bytes @ 0x7
  3445                           
  3446  0077                     setLED_Main@led:	
  3447                           ; 1 bytes @ 0x7
  3448                           
  3449  0077                     setSw_Initialization@sw:	
  3450                           ; 1 bytes @ 0x7
  3451                           
  3452  0077                     getSw_KeyStatus@sw:	
  3453                           ; 1 bytes @ 0x7
  3454                           
  3455  0077                     ___ftpack@sign:	
  3456                           ; 1 bytes @ 0x7
  3457                           
  3458                           
  3459                           ; 1 bytes @ 0x7
  3460  0077                     	ds	1
  3461  0078                     ??_setDimmerLights_Main:	
  3462  0078                     ??_Switch_Initialization:	
  3463                           ; 0 bytes @ 0x8
  3464                           
  3465  0078                     ??_Temp_Main:	
  3466                           ; 0 bytes @ 0x8
  3467                           
  3468  0078                     ??_Switch_Main:	
  3469                           ; 0 bytes @ 0x8
  3470                           
  3471  0078                     ??_RF_Main:	
  3472                           ; 0 bytes @ 0x8
  3473                           
  3474  0078                     ??_setControl_Lights_Table:	
  3475                           ; 0 bytes @ 0x8
  3476                           
  3477  0078                     ??_CC2500_PowerOnInitial:	
  3478                           ; 0 bytes @ 0x8
  3479                           
  3480  0078                     ??_DelayOff_Main:	
  3481                           ; 0 bytes @ 0x8
  3482                           
  3483  0078                     ??_setDimmerLights_SwOff:	
  3484                           ; 0 bytes @ 0x8
  3485                           
  3486  0078                     ??_DimmerLights_Main:	
  3487                           ; 0 bytes @ 0x8
  3488                           
  3489  0078                     ??_LED_Initialization:	
  3490                           ; 0 bytes @ 0x8
  3491                           
  3492  0078                     ??_LED_Main:	
  3493                           ; 0 bytes @ 0x8
  3494                           
  3495  0078                     ??_main:	
  3496                           ; 0 bytes @ 0x8
  3497                           
  3498  0078                     ??___ftneg:	
  3499                           ; 0 bytes @ 0x8
  3500                           
  3501                           
  3502                           	psect	cstackBANK0
  3503  0020                     __pcstackBANK0:	
  3504                           ; 0 bytes @ 0x8
  3505                           
  3506  0020                     ??_CC2500_InitSetREG:	
  3507  0020                     ??_CC2500_InitPATable:	
  3508                           ; 0 bytes @ 0x0
  3509                           
  3510  0020                     ??_DelayTimejudge:	
  3511                           ; 0 bytes @ 0x0
  3512                           
  3513  0020                     ??_getLoad_AD:	
  3514                           ; 0 bytes @ 0x0
  3515                           
  3516  0020                     ??___ftpack:	
  3517                           ; 0 bytes @ 0x0
  3518                           
  3519  0020                     CC2500_TxData@loop_e:	
  3520                           ; 0 bytes @ 0x0
  3521                           
  3522  0020                     CC2500_RxData@loop_f:	
  3523                           ; 1 bytes @ 0x0
  3524                           
  3525  0020                     _getDimmerLights_Allow_Condition$2349:	
  3526                           ; 1 bytes @ 0x0
  3527                           
  3528  0020                     getAll_DimmerLights_AdjSw@count:	
  3529                           ; 1 bytes @ 0x0
  3530                           
  3531  0020                     Flash_Memory_Modify@i:	
  3532                           ; 1 bytes @ 0x0
  3533                           
  3534  0020                     getTemp_AD@channel:	
  3535                           ; 1 bytes @ 0x0
  3536                           
  3537  0020                     ___awdiv@counter:	
  3538                           ; 1 bytes @ 0x0
  3539                           
  3540  0020                     ___lwdiv@counter:	
  3541                           ; 1 bytes @ 0x0
  3542                           
  3543  0020                     getBuz_GO@i:	
  3544                           ; 1 bytes @ 0x0
  3545                           
  3546  0020                     DelayTime_1us@i:	
  3547                           ; 2 bytes @ 0x0
  3548                           
  3549  0020                     _getMain_All_Error_Status$3628:	
  3550                           ; 2 bytes @ 0x0
  3551                           
  3552  0020                     ___wmul@product:	
  3553                           ; 2 bytes @ 0x0
  3554                           
  3555                           
  3556                           ; 2 bytes @ 0x0
  3557  0020                     	ds	1
  3558  0021                     ??_Flash_Memory_Main:	
  3559  0021                     CC2500_InitSetREG@temp1:	
  3560                           ; 0 bytes @ 0x1
  3561                           
  3562  0021                     CC2500_InitPATable@temp:	
  3563                           ; 1 bytes @ 0x1
  3564                           
  3565  0021                     _getDimmerLights_Allow_Condition$2350:	
  3566                           ; 1 bytes @ 0x1
  3567                           
  3568  0021                     ___awdiv@sign:	
  3569                           ; 1 bytes @ 0x1
  3570                           
  3571  0021                     getAll_DimmerLights_AdjSw@i:	
  3572                           ; 1 bytes @ 0x1
  3573                           
  3574  0021                     ___lwdiv@quotient:	
  3575                           ; 2 bytes @ 0x1
  3576                           
  3577                           
  3578                           ; 2 bytes @ 0x1
  3579  0021                     	ds	1
  3580  0022                     CC2500_InitSetREG@temp2:	
  3581  0022                     CC2500_InitPATable@loop_d:	
  3582                           ; 1 bytes @ 0x2
  3583                           
  3584  0022                     DelayTimejudge@i:	
  3585                           ; 1 bytes @ 0x2
  3586                           
  3587  0022                     _getDimmerLights_Allow_Condition$2351:	
  3588                           ; 1 bytes @ 0x2
  3589                           
  3590  0022                     getLoad_AD@channel:	
  3591                           ; 1 bytes @ 0x2
  3592                           
  3593  0022                     DelayTime_1us@j:	
  3594                           ; 1 bytes @ 0x2
  3595                           
  3596  0022                     _getMain_All_Error_Status$3629:	
  3597                           ; 2 bytes @ 0x2
  3598                           
  3599  0022                     ___awdiv@quotient:	
  3600                           ; 2 bytes @ 0x2
  3601                           
  3602                           
  3603                           ; 2 bytes @ 0x2
  3604  0022                     	ds	1
  3605  0023                     ?___awtoft:	
  3606  0023                     CC2500_InitSetREG@loop_c:	
  3607                           ; 3 bytes @ 0x3
  3608                           
  3609  0023                     DelayTimejudge@j:	
  3610                           ; 1 bytes @ 0x3
  3611                           
  3612  0023                     getDimmerLights_Allow_Condition@lights:	
  3613                           ; 1 bytes @ 0x3
  3614                           
  3615  0023                     getAll_DimmerLights_AdjSw@adjsw:	
  3616                           ; 1 bytes @ 0x3
  3617                           
  3618  0023                     getLoad_AD@k:	
  3619                           ; 1 bytes @ 0x3
  3620                           
  3621  0023                     ___awtoft@c:	
  3622                           ; 1 bytes @ 0x3
  3623                           
  3624                           
  3625                           ; 2 bytes @ 0x3
  3626  0023                     	ds	1
  3627  0024                     ?_setBuz:	
  3628  0024                     DelayTimejudge@k:	
  3629                           ; 0 bytes @ 0x4
  3630                           
  3631  0024                     getDimmerLights_Allow_Condition@allow:	
  3632                           ; 1 bytes @ 0x4
  3633                           
  3634  0024                     getMain_All_Error_Status@command:	
  3635                           ; 1 bytes @ 0x4
  3636                           
  3637  0024                     getLoad_AD@j:	
  3638                           ; 1 bytes @ 0x4
  3639                           
  3640  0024                     setBuz@time:	
  3641                           ; 1 bytes @ 0x4
  3642                           
  3643                           
  3644                           ; 2 bytes @ 0x4
  3645  0024                     	ds	1
  3646  0025                     DelayTimejudge@value:	
  3647  0025                     getMain_All_Error_Status@status:	
  3648                           ; 1 bytes @ 0x5
  3649                           
  3650  0025                     getLoad_AD@i:	
  3651                           ; 1 bytes @ 0x5
  3652                           
  3653                           
  3654                           ; 1 bytes @ 0x5
  3655  0025                     	ds	1
  3656  0026                     ??_Load_Main:	
  3657  0026                     ??_setBuz:	
  3658                           ; 0 bytes @ 0x6
  3659                           
  3660  0026                     ??___awtoft:	
  3661                           ; 0 bytes @ 0x6
  3662                           
  3663                           
  3664                           ; 0 bytes @ 0x6
  3665  0026                     	ds	1
  3666  0027                     setBuz@count:	
  3667                           
  3668                           ; 1 bytes @ 0x7
  3669  0027                     	ds	1
  3670  0028                     ??_my_MainTimer:	
  3671  0028                     ??_setDimmerLights_SwOn:	
  3672                           ; 0 bytes @ 0x8
  3673                           
  3674  0028                     Load_Main@error:	
  3675                           ; 0 bytes @ 0x8
  3676                           
  3677  0028                     ___awtoft@sign:	
  3678                           ; 1 bytes @ 0x8
  3679                           
  3680                           
  3681                           ; 1 bytes @ 0x8
  3682  0028                     	ds	1
  3683  0029                     ?___ftdiv:	
  3684  0029                     ?___ftmul:	
  3685                           ; 3 bytes @ 0x9
  3686                           
  3687  0029                     _setDimmerLights_SwOn$2330:	
  3688                           ; 3 bytes @ 0x9
  3689                           
  3690  0029                     Load_Main@Load_Status:	
  3691                           ; 1 bytes @ 0x9
  3692                           
  3693  0029                     ___ftdiv@f2:	
  3694                           ; 1 bytes @ 0x9
  3695                           
  3696  0029                     ___ftmul@f1:	
  3697                           ; 3 bytes @ 0x9
  3698                           
  3699                           
  3700                           ; 3 bytes @ 0x9
  3701  0029                     	ds	1
  3702  002A                     _setDimmerLights_SwOn$2331:	
  3703  002A                     Load_Main@i:	
  3704                           ; 1 bytes @ 0xA
  3705                           
  3706                           
  3707                           ; 2 bytes @ 0xA
  3708  002A                     	ds	1
  3709  002B                     setDimmerLights_SwOn@idle:	
  3710                           
  3711                           ; 1 bytes @ 0xB
  3712  002B                     	ds	1
  3713  002C                     setDimmerLights_SwOn@sw:	
  3714  002C                     ___ftdiv@f1:	
  3715                           ; 1 bytes @ 0xC
  3716                           
  3717  002C                     ___ftmul@f2:	
  3718                           ; 3 bytes @ 0xC
  3719                           
  3720                           
  3721                           ; 3 bytes @ 0xC
  3722  002C                     	ds	3
  3723  002F                     ??___ftdiv:	
  3724  002F                     ??___ftmul:	
  3725                           ; 0 bytes @ 0xF
  3726                           
  3727                           
  3728                           ; 0 bytes @ 0xF
  3729  002F                     	ds	4
  3730  0033                     ___ftdiv@cntr:	
  3731  0033                     ___ftmul@exp:	
  3732                           ; 1 bytes @ 0x13
  3733                           
  3734                           
  3735                           ; 1 bytes @ 0x13
  3736  0033                     	ds	1
  3737  0034                     ___ftdiv@f3:	
  3738  0034                     ___ftmul@f3_as_product:	
  3739                           ; 3 bytes @ 0x14
  3740                           
  3741                           
  3742                           ; 3 bytes @ 0x14
  3743  0034                     	ds	3
  3744  0037                     ___ftdiv@exp:	
  3745  0037                     ___ftmul@cntr:	
  3746                           ; 1 bytes @ 0x17
  3747                           
  3748                           
  3749                           ; 1 bytes @ 0x17
  3750  0037                     	ds	1
  3751  0038                     ___ftdiv@sign:	
  3752  0038                     ___ftmul@sign:	
  3753                           ; 1 bytes @ 0x18
  3754                           
  3755                           
  3756                           ; 1 bytes @ 0x18
  3757  0038                     	ds	1
  3758  0039                     ?___ftneg:	
  3759  0039                     ___ftneg@f1:	
  3760                           ; 3 bytes @ 0x19
  3761                           
  3762                           
  3763                           ; 3 bytes @ 0x19
  3764  0039                     	ds	3
  3765  003C                     ?___ftadd:	
  3766  003C                     ___ftadd@f1:	
  3767                           ; 3 bytes @ 0x1C
  3768                           
  3769                           
  3770                           ; 3 bytes @ 0x1C
  3771  003C                     	ds	3
  3772  003F                     ___ftadd@f2:	
  3773                           
  3774                           ; 3 bytes @ 0x1F
  3775  003F                     	ds	3
  3776  0042                     ??___ftadd:	
  3777                           
  3778                           ; 0 bytes @ 0x22
  3779  0042                     	ds	4
  3780  0046                     ___ftadd@sign:	
  3781                           
  3782                           ; 1 bytes @ 0x26
  3783  0046                     	ds	1
  3784  0047                     ___ftadd@exp2:	
  3785                           
  3786                           ; 1 bytes @ 0x27
  3787  0047                     	ds	1
  3788  0048                     ___ftadd@exp1:	
  3789                           
  3790                           ; 1 bytes @ 0x28
  3791  0048                     	ds	1
  3792  0049                     ?___fttol:	
  3793  0049                     ___fttol@f1:	
  3794                           ; 4 bytes @ 0x29
  3795                           
  3796                           
  3797                           ; 3 bytes @ 0x29
  3798  0049                     	ds	4
  3799  004D                     ??___fttol:	
  3800                           
  3801                           ; 0 bytes @ 0x2D
  3802  004D                     	ds	4
  3803  0051                     ___fttol@sign1:	
  3804                           
  3805                           ; 1 bytes @ 0x31
  3806  0051                     	ds	1
  3807  0052                     ___fttol@lval:	
  3808                           
  3809                           ; 4 bytes @ 0x32
  3810  0052                     	ds	4
  3811  0056                     ___fttol@exp1:	
  3812                           
  3813                           ; 1 bytes @ 0x36
  3814  0056                     	ds	1
  3815  0057                     ??_setPercentValue:	
  3816  0057                     ??_getPercentValue:	
  3817                           ; 0 bytes @ 0x37
  3818                           
  3819                           
  3820                           ; 0 bytes @ 0x37
  3821  0057                     	ds	2
  3822  0059                     getPercentValue@value:	
  3823  0059                     setPercentValue@value:	
  3824                           ; 1 bytes @ 0x39
  3825                           
  3826                           
  3827                           ; 1 bytes @ 0x39
  3828  0059                     	ds	1
  3829  005A                     getPercentValue@i:	
  3830  005A                     setPercentValue@i:	
  3831                           ; 3 bytes @ 0x3A
  3832                           
  3833                           
  3834                           ; 3 bytes @ 0x3A
  3835  005A                     	ds	3
  3836  005D                     ?_setProductData:	
  3837  005D                     ??_setDimmerLights_AdjRF:	
  3838                           ; 0 bytes @ 0x3D
  3839                           
  3840  005D                     ??_Flash_Memory_Initialization:	
  3841                           ; 0 bytes @ 0x3D
  3842                           
  3843  005D                     setProductData@value:	
  3844                           ; 0 bytes @ 0x3D
  3845                           
  3846                           
  3847                           ; 1 bytes @ 0x3D
  3848  005D                     	ds	1
  3849  005E                     ??_setProductData:	
  3850  005E                     setDimmerLights_AdjRF@lights:	
  3851                           ; 0 bytes @ 0x3E
  3852                           
  3853  005E                     Flash_Memory_Initialization@i:	
  3854                           ; 1 bytes @ 0x3E
  3855                           
  3856                           
  3857                           ; 1 bytes @ 0x3E
  3858  005E                     	ds	2
  3859  0060                     setProductData@address:	
  3860                           
  3861                           ; 1 bytes @ 0x40
  3862  0060                     	ds	1
  3863  0061                     ?_setRF_DimmerLights:	
  3864  0061                     ??_setTemp_Main:	
  3865                           ; 0 bytes @ 0x41
  3866                           
  3867  0061                     ??_setLog_Code:	
  3868                           ; 0 bytes @ 0x41
  3869                           
  3870  0061                     ??_setRF_DimmerValue:	
  3871                           ; 0 bytes @ 0x41
  3872                           
  3873  0061                     ?_setDelayOff_GO:	
  3874                           ; 0 bytes @ 0x41
  3875                           
  3876  0061                     setDelayOff_GO@command:	
  3877                           ; 0 bytes @ 0x41
  3878                           
  3879  0061                     setRF_DimmerLights@on:	
  3880                           ; 1 bytes @ 0x41
  3881                           
  3882                           
  3883                           ; 1 bytes @ 0x41
  3884  0061                     	ds	1
  3885  0062                     ??_setRF_DimmerLights:	
  3886  0062                     setDelayOff_GO@value:	
  3887                           ; 0 bytes @ 0x42
  3888                           
  3889  0062                     setRF_DimmerValue@lights:	
  3890                           ; 1 bytes @ 0x42
  3891                           
  3892                           
  3893                           ; 1 bytes @ 0x42
  3894  0062                     	ds	1
  3895  0063                     ??_setRFSW_AdjControl:	
  3896  0063                     ??_setDelayOff_GO:	
  3897                           ; 0 bytes @ 0x43
  3898                           
  3899  0063                     setTemp_Main@error:	
  3900                           ; 0 bytes @ 0x43
  3901                           
  3902                           
  3903                           ; 1 bytes @ 0x43
  3904  0063                     	ds	1
  3905  0064                     setDelayOff_GO@sw:	
  3906  0064                     setRF_DimmerLights@status:	
  3907                           ; 1 bytes @ 0x44
  3908                           
  3909                           
  3910                           ; 1 bytes @ 0x44
  3911  0064                     	ds	1
  3912  0065                     setDimmerLights_SwOff@sw:	
  3913  0065                     setRFSW_AdjControl@status:	
  3914                           ; 1 bytes @ 0x45
  3915                           
  3916  0065                     setRF_DimmerLights@lights:	
  3917                           ; 1 bytes @ 0x45
  3918                           
  3919                           
  3920                           ; 1 bytes @ 0x45
  3921  0065                     	ds	1
  3922  0066                     ??_setDimmerLights_ErrorClose:	
  3923  0066                     ?_setDimmerLights:	
  3924                           ; 0 bytes @ 0x46
  3925                           
  3926  0066                     ?_setDimmerLights_Adj:	
  3927                           ; 0 bytes @ 0x46
  3928                           
  3929  0066                     ??_Exception_Main:	
  3930                           ; 0 bytes @ 0x46
  3931                           
  3932  0066                     ??_setRFSW_Control:	
  3933                           ; 0 bytes @ 0x46
  3934                           
  3935  0066                     ??_setSw_Main:	
  3936                           ; 0 bytes @ 0x46
  3937                           
  3938  0066                     setDimmerLights@status:	
  3939                           ; 0 bytes @ 0x46
  3940                           
  3941  0066                     setDimmerLights_Adj@status:	
  3942                           ; 1 bytes @ 0x46
  3943                           
  3944  0066                     setRFSW_AdjControl@sw:	
  3945                           ; 1 bytes @ 0x46
  3946                           
  3947                           
  3948                           ; 1 bytes @ 0x46
  3949  0066                     	ds	1
  3950  0067                     ??_setDimmerLights:	
  3951  0067                     ??_setDimmerLights_Adj:	
  3952                           ; 0 bytes @ 0x47
  3953                           
  3954  0067                     setDimmerLights_ErrorClose@count:	
  3955                           ; 0 bytes @ 0x47
  3956                           
  3957  0067                     setRFSW_Control@status:	
  3958                           ; 1 bytes @ 0x47
  3959                           
  3960                           
  3961                           ; 1 bytes @ 0x47
  3962  0067                     	ds	1
  3963  0068                     setDimmerLights@lights:	
  3964  0068                     setDimmerLights_Adj@lights:	
  3965                           ; 1 bytes @ 0x48
  3966                           
  3967  0068                     setDimmerLights_ErrorClose@lights:	
  3968                           ; 1 bytes @ 0x48
  3969                           
  3970  0068                     setRFSW_Control@sw:	
  3971                           ; 1 bytes @ 0x48
  3972                           
  3973  0068                     setSw_Main@sw:	
  3974                           ; 1 bytes @ 0x48
  3975                           
  3976                           
  3977                           ; 1 bytes @ 0x48
  3978  0068                     	ds	1
  3979  0069                     setDimmerLights_Main@lights:	
  3980  0069                     setDimmerLights_ErrorClose@i:	
  3981                           ; 1 bytes @ 0x49
  3982                           
  3983                           
  3984                           ; 2 bytes @ 0x49
  3985  0069                     	ds	2
  3986  006B                     ??_DlyOff_Main:	
  3987  006B                     ??_getRxData:	
  3988                           ; 0 bytes @ 0x4B
  3989                           
  3990                           
  3991                           ; 0 bytes @ 0x4B
  3992  006B                     	ds	1
  3993  006C                     getRxData@error:	
  3994                           
  3995                           ; 1 bytes @ 0x4C
  3996  006C                     	ds	1
  3997                           
  3998                           	psect	maintext
  3999  1691                     __pmaintext:	
  4000 ;;
  4001 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  4002 ;;
  4003 ;; *************** function _main *****************
  4004 ;; Defined at:
  4005 ;;		line 7 in file "../src/Main_B1.c"
  4006 ;; Parameters:    Size  Location     Type
  4007 ;;  argc            2    0[BANK3 ] int 
  4008 ;;  argv            2    2[BANK3 ] PTR PTR unsigned char 
  4009 ;; Auto vars:     Size  Location     Type
  4010 ;;		None
  4011 ;; Return value:  Size  Location     Type
  4012 ;;                  2    0[BANK3 ] int 
  4013 ;; Registers used:
  4014 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4015 ;; Tracked objects:
  4016 ;;		On entry : 17F/0
  4017 ;;		On exit  : 0/0
  4018 ;;		Unchanged: 0/0
  4019 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4020 ;;      Params:         0       0       0       0       4       0       0       0       0       0       0       0       
      +0       0
  4021 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4022 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4023 ;;      Totals:         0       0       0       0       4       0       0       0       0       0       0       0       
      +0       0
  4024 ;;Total ram usage:        4 bytes
  4025 ;; Hardware stack levels required when called:   13
  4026 ;; This function calls:
  4027 ;;		_Buzzer_Initialization
  4028 ;;		_Buzzer_Main
  4029 ;;		_CC2500_PowerOnInitial
  4030 ;;		_DelayOff_Initialization
  4031 ;;		_DelayOff_Main
  4032 ;;		_DimmerLights_Initialization
  4033 ;;		_DimmerLights_Main
  4034 ;;		_Exception_Main
  4035 ;;		_Flash_Memory_Initialization
  4036 ;;		_Flash_Memory_Main
  4037 ;;		_LED_Initialization
  4038 ;;		_LED_Main
  4039 ;;		_Load_Initialization
  4040 ;;		_Load_Main
  4041 ;;		_Mcu_Initialization
  4042 ;;		_RF_Initialization
  4043 ;;		_RF_Main
  4044 ;;		_Switch_Initialization
  4045 ;;		_Switch_Main
  4046 ;;		_Temp_Initialization
  4047 ;;		_Temp_Main
  4048 ;;		_WDT_Main
  4049 ;;		_getLoad_AD
  4050 ;;		_getTemp_AD
  4051 ;;		_myMain_Initialization
  4052 ;;		_my_MainTimer
  4053 ;; This function is called by:
  4054 ;;		Startup code after reset
  4055 ;; This function uses a non-reentrant model
  4056 ;;
  4057                           
  4058                           
  4059                           ;psect for function _main
  4060  1691                     _main:	
  4061                           
  4062                           ;Main_B1.c: 8: myMain_Initialization();
  4063                           
  4064                           ;incstack = 0
  4065                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4066  1691  319B  23F7  3196   	fcall	_myMain_Initialization
  4067                           
  4068                           ;Main_B1.c: 9: Mcu_Initialization();
  4069  1694  319C  24DB  3196   	fcall	_Mcu_Initialization
  4070                           
  4071                           ;Main_B1.c: 10: Flash_Memory_Initialization();
  4072  1697  3186  2651  3196   	fcall	_Flash_Memory_Initialization
  4073                           
  4074                           ;Main_B1.c: 11: LED_Initialization();
  4075  169A  319B  2381  3196   	fcall	_LED_Initialization
  4076                           
  4077                           ;Main_B1.c: 12: Buzzer_Initialization();
  4078  169D  319A  22C3  3196   	fcall	_Buzzer_Initialization
  4079                           
  4080                           ;Main_B1.c: 14: ;;
  4081                           ;Main_B1.c: 15: Temp_Initialization();
  4082  16A0  319A  22CF  3196   	fcall	_Temp_Initialization
  4083                           
  4084                           ;Main_B1.c: 16: Load_Initialization();
  4085  16A3  319A  22C6  3196   	fcall	_Load_Initialization
  4086                           
  4087                           ;Main_B1.c: 17: ;;
  4088                           ;Main_B1.c: 18: DelayOff_Initialization();
  4089  16A6  319B  231F  3196   	fcall	_DelayOff_Initialization
  4090                           
  4091                           ;Main_B1.c: 20: DimmerLights_Initialization();
  4092  16A9  319D  2592  3196   	fcall	_DimmerLights_Initialization
  4093                           
  4094                           ;Main_B1.c: 21: ;;
  4095                           ;Main_B1.c: 22: ;;
  4096                           ;Main_B1.c: 23: ;;
  4097                           ;Main_B1.c: 24: Switch_Initialization();
  4098  16AC  319B  23B1  3196   	fcall	_Switch_Initialization
  4099                           
  4100                           ;Main_B1.c: 25: RF_Initialization();
  4101  16AF  319A  22C9  3196   	fcall	_RF_Initialization
  4102                           
  4103                           ;Main_B1.c: 26: CC2500_PowerOnInitial();
  4104  16B2  319D  253E  3196   	fcall	_CC2500_PowerOnInitial
  4105  16B5                     l10926:	
  4106                           ;Main_B1.c: 27: ;;
  4107                           ;Main_B1.c: 28: ;;
  4108                           ;Main_B1.c: 30: while (1) {
  4109                           
  4110                           
  4111                           ;Main_B1.c: 32: if (myMain.PowerON == 1) {
  4112  16B5  0021               	movlb	1	; select bank1
  4113  16B6  1C2E               	btfss	_myMain^(0+128),0
  4114  16B7  2EC0               	goto	l10930
  4115                           
  4116                           ;Main_B1.c: 38: getLoad_AD(0x05);
  4117  16B8  3005               	movlw	5
  4118  16B9  318B  23E3  3196   	fcall	_getLoad_AD
  4119                           
  4120                           ;Main_B1.c: 42: getTemp_AD(0x09);
  4121  16BC  3009               	movlw	9
  4122  16BD  3192  227C  3196   	fcall	_getTemp_AD
  4123  16C0                     l10930:	
  4124                           
  4125                           ;Main_B1.c: 57: }
  4126                           ;Main_B1.c: 93: if (Timer1.Timeout == 1) {
  4127  16C0  0022               	movlb	2	; select bank2
  4128  16C1  1C20               	btfss	_Timer1^(0+256),0
  4129  16C2  2EB5               	goto	l10926
  4130                           
  4131                           ;Main_B1.c: 94: Timer1.Timeout = 0;
  4132  16C3  1020               	bcf	_Timer1^(0+256),0
  4133                           
  4134                           ;Main_B1.c: 96: my_MainTimer();
  4135  16C4  3192  22B7  3196   	fcall	_my_MainTimer
  4136                           
  4137                           ;Main_B1.c: 97: WDT_Main();
  4138  16C7  319C  2476  3196   	fcall	_WDT_Main
  4139                           
  4140                           ;Main_B1.c: 98: ;;
  4141                           ;Main_B1.c: 99: ;;
  4142                           ;Main_B1.c: 100: if (myMain.PowerON == 1) {
  4143  16CA  0021               	movlb	1	; select bank1
  4144  16CB  1C2E               	btfss	_myMain^(0+128),0
  4145  16CC  2EB5               	goto	l10926
  4146                           
  4147                           ;Main_B1.c: 101: Flash_Memory_Main();
  4148  16CD  3191  21D5  3196   	fcall	_Flash_Memory_Main
  4149                           
  4150                           ;Main_B1.c: 103: LED_Main();
  4151  16D0  319B  238D  3196   	fcall	_LED_Main
  4152                           
  4153                           ;Main_B1.c: 104: Buzzer_Main();
  4154  16D3  3193  23B6  3196   	fcall	_Buzzer_Main
  4155                           
  4156                           ;Main_B1.c: 106: ;;
  4157                           ;Main_B1.c: 107: Temp_Main();
  4158  16D6  3188  2000  3196   	fcall	_Temp_Main
  4159                           
  4160                           ;Main_B1.c: 108: Load_Main();
  4161  16D9  3180  2056  3196   	fcall	_Load_Main
  4162                           
  4163                           ;Main_B1.c: 109: ;;
  4164                           ;Main_B1.c: 111: ;;
  4165                           ;Main_B1.c: 112: DimmerLights_Main();
  4166  16DC  319E  267B  3196   	fcall	_DimmerLights_Main
  4167                           
  4168                           ;Main_B1.c: 113: Switch_Main();
  4169  16DF  319B  236A  3196   	fcall	_Switch_Main
  4170                           
  4171                           ;Main_B1.c: 114: ;;
  4172                           ;Main_B1.c: 115: ;;
  4173                           ;Main_B1.c: 117: RF_Main();
  4174  16E2  319A  22CC  3196   	fcall	_RF_Main
  4175                           
  4176                           ;Main_B1.c: 118: DelayOff_Main();
  4177  16E5  319B  2327  3196   	fcall	_DelayOff_Main
  4178                           
  4179                           ;Main_B1.c: 119: ;;
  4180                           ;Main_B1.c: 120: ;;
  4181                           ;Main_B1.c: 121: Exception_Main();
  4182  16E8  3185  256D  3196   	fcall	_Exception_Main
  4183  16EB  2EB5               	goto	l10926
  4184  16EC                     __end_of_main:	
  4185                           ;Main_B1.c: 128: }
  4186                           ;Main_B1.c: 129: }
  4187                           ;Main_B1.c: 163: }
  4188                           ;Main_B1.c: 164: return (0);
  4189                           ;	Return value of _main is never used
  4190                           
  4191                           
  4192                           	psect	text1
  4193  12B7                     __ptext1:	
  4194 ;; *************** function _my_MainTimer *****************
  4195 ;; Defined at:
  4196 ;;		line 185 in file "../src/Main_B1.c"
  4197 ;; Parameters:    Size  Location     Type
  4198 ;;		None
  4199 ;; Auto vars:     Size  Location     Type
  4200 ;;		None
  4201 ;; Return value:  Size  Location     Type
  4202 ;;		None               void
  4203 ;; Registers used:
  4204 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4205 ;; Tracked objects:
  4206 ;;		On entry : 0/0
  4207 ;;		On exit  : 0/0
  4208 ;;		Unchanged: 0/0
  4209 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4210 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4211 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4212 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4213 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4214 ;;Total ram usage:        1 bytes
  4215 ;; Hardware stack levels used:    1
  4216 ;; Hardware stack levels required when called:    5
  4217 ;; This function calls:
  4218 ;;		_setBuz
  4219 ;; This function is called by:
  4220 ;;		_main
  4221 ;; This function uses a non-reentrant model
  4222 ;;
  4223                           
  4224                           
  4225                           ;psect for function _my_MainTimer
  4226  12B7                     _my_MainTimer:	
  4227                           
  4228                           ;Main_B1.c: 188: if (myMain.PowerON == 0) {
  4229                           
  4230                           ;incstack = 0
  4231                           ; Regs used in _my_MainTimer: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4232  12B7  0021               	movlb	1	; select bank1
  4233  12B8  182E               	btfsc	_myMain^(0+128),0
  4234  12B9  2AD1               	goto	l10634
  4235                           
  4236                           ;Main_B1.c: 189: myMain.PowerCount++;
  4237  12BA  3001               	movlw	1
  4238  12BB  0020               	movlb	0	; select bank0
  4239  12BC  00A8               	movwf	??_my_MainTimer
  4240  12BD  0828               	movf	??_my_MainTimer,w
  4241  12BE  0021               	movlb	1	; select bank1
  4242  12BF  07AF               	addwf	(_myMain^(0+128)+1),f
  4243                           
  4244                           ;Main_B1.c: 190: if (myMain.PowerCount == (1500 / 20)) {
  4245  12C0  082F               	movf	(_myMain^(0+128)+1),w
  4246  12C1  3A4B               	xorlw	75
  4247  12C2  1D03               	skipz
  4248  12C3  0008               	return
  4249                           
  4250                           ;Main_B1.c: 191: myMain.PowerCount = 0;
  4251  12C4  01AF               	clrf	(_myMain^(0+128)+1)
  4252                           
  4253                           ;Main_B1.c: 192: myMain.PowerON = 1;
  4254  12C5  142E               	bsf	_myMain^(0+128),0
  4255                           
  4256                           ;Main_B1.c: 197: setBuz(3, 50);
  4257  12C6  3032               	movlw	50
  4258  12C7  0020               	movlb	0	; select bank0
  4259  12C8  00A4               	movwf	setBuz@time
  4260  12C9  3000               	movlw	0
  4261  12CA  00A5               	movwf	setBuz@time+1
  4262  12CB  3003               	movlw	3
  4263  12CC  3195  25DF         	fcall	_setBuz
  4264                           
  4265                           ;Main_B1.c: 198: myMain.SelfTest = 1;
  4266  12CE  0021               	movlb	1	; select bank1
  4267  12CF  162E               	bsf	_myMain^(0+128),4
  4268                           
  4269                           ;Main_B1.c: 207: }
  4270                           ;Main_B1.c: 208: } else {
  4271  12D0  0008               	return
  4272  12D1                     l10634:	
  4273                           
  4274                           ;Main_B1.c: 209: myMain.PowerCount++;
  4275  12D1  3001               	movlw	1
  4276  12D2  0020               	movlb	0	; select bank0
  4277  12D3  00A8               	movwf	??_my_MainTimer
  4278  12D4  0828               	movf	??_my_MainTimer,w
  4279  12D5  0021               	movlb	1	; select bank1
  4280  12D6  07AF               	addwf	(_myMain^(0+128)+1),f
  4281                           
  4282                           ;Main_B1.c: 210: if (myMain.PowerCount == (1000 / 20)) {
  4283  12D7  082F               	movf	(_myMain^(0+128)+1),w
  4284  12D8  3A32               	xorlw	50
  4285  12D9  1903               	btfsc	3,2
  4286                           
  4287                           ;Main_B1.c: 211: myMain.PowerCount = 0;
  4288  12DA  01AF               	clrf	(_myMain^(0+128)+1)
  4289                           
  4290                           ;Main_B1.c: 226: }
  4291                           ;Main_B1.c: 228: myMain.Count1++;
  4292  12DB  3001               	movlw	1
  4293  12DC  07B2               	addwf	(_myMain^(0+128)+4),f
  4294  12DD  3000               	movlw	0
  4295  12DE  3DB3               	addwfc	((_myMain+1)^(0+128)+4),f
  4296                           
  4297                           ;Main_B1.c: 229: if (myMain.Count1 == (1000 / 20)) {
  4298  12DF  3004               	movlw	4
  4299  12E0  3EAE               	addlw	_myMain& (0+255)
  4300  12E1  0086               	movwf	6
  4301  12E2  0187               	clrf	7
  4302  12E3  3F40               	moviw [0]fsr1
  4303  12E4  3A32               	xorlw	50
  4304  12E5  1D03               	skipz
  4305  12E6  2AE9               	goto	u12095
  4306  12E7  3F41               	moviw [1]fsr1
  4307  12E8  3A00               	xorlw	0
  4308  12E9                     u12095:	
  4309  12E9  1D03               	skipz
  4310  12EA  0008               	return
  4311                           
  4312                           ;Main_B1.c: 230: myMain.Count1 = 0;
  4313  12EB  01B2               	clrf	(_myMain^(0+128)+4)
  4314  12EC  01B3               	clrf	((_myMain+1)^(0+128)+4)
  4315                           
  4316                           ;Main_B1.c: 242: if (myMain.Flag) {
  4317  12ED  1CAE               	btfss	_myMain^(0+128),1
  4318  12EE  2AF1               	goto	l1558
  4319                           
  4320                           ;Main_B1.c: 243: myMain.Flag = 0;
  4321  12EF  10AE               	bcf	_myMain^(0+128),1
  4322                           
  4323                           ;Main_B1.c: 252: } else {
  4324  12F0  0008               	return
  4325  12F1                     l1558:	
  4326                           
  4327                           ;Main_B1.c: 253: myMain.Flag = 1;
  4328  12F1  14AE               	bsf	_myMain^(0+128),1
  4329  12F2  0008               	return
  4330  12F3                     __end_of_my_MainTimer:	
  4331                           
  4332                           	psect	text2
  4333  1BF7                     __ptext2:	
  4334 ;; *************** function _myMain_Initialization *****************
  4335 ;; Defined at:
  4336 ;;		line 170 in file "../src/Main_B1.c"
  4337 ;; Parameters:    Size  Location     Type
  4338 ;;		None
  4339 ;; Auto vars:     Size  Location     Type
  4340 ;;		None
  4341 ;; Return value:  Size  Location     Type
  4342 ;;		None               void
  4343 ;; Registers used:
  4344 ;;		wreg, fsr1l, fsr1h
  4345 ;; Tracked objects:
  4346 ;;		On entry : 0/0
  4347 ;;		On exit  : 0/0
  4348 ;;		Unchanged: 0/0
  4349 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4350 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4351 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4352 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4353 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4354 ;;Total ram usage:        1 bytes
  4355 ;; Hardware stack levels used:    1
  4356 ;; Hardware stack levels required when called:    3
  4357 ;; This function calls:
  4358 ;;		Nothing
  4359 ;; This function is called by:
  4360 ;;		_main
  4361 ;; This function uses a non-reentrant model
  4362 ;;
  4363                           
  4364                           
  4365                           ;psect for function _myMain_Initialization
  4366  1BF7                     _myMain_Initialization:	
  4367                           
  4368                           ;Main_B1.c: 173: product = &_product;
  4369                           
  4370                           ;incstack = 0
  4371                           ; Regs used in _myMain_Initialization: [wregfsr1]
  4372  1BF7  3045               	movlw	__product& (0+255)
  4373  1BF8  00F3               	movwf	??_myMain_Initialization
  4374  1BF9  0873               	movf	??_myMain_Initialization,w
  4375  1BFA  0020               	movlb	0	; select bank0
  4376  1BFB  00EF               	movwf	_product
  4377                           
  4378                           ;Main_B1.c: 174: product->Data[20] = 210;
  4379  1BFC  30D2               	movlw	210
  4380  1BFD  00F3               	movwf	??_myMain_Initialization
  4381  1BFE  086F               	movf	_product,w
  4382  1BFF  3E14               	addlw	20
  4383  1C00  0086               	movwf	6
  4384  1C01  3002               	movlw	2	; select bank4/5
  4385  1C02  0087               	movwf	7
  4386  1C03  0873               	movf	??_myMain_Initialization,w
  4387  1C04  0081               	movwf	1
  4388  1C05  0008               	return
  4389  1C06                     __end_of_myMain_Initialization:	
  4390                           
  4391                           	psect	text3
  4392  127C                     __ptext3:	
  4393 ;; *************** function _getTemp_AD *****************
  4394 ;; Defined at:
  4395 ;;		line 15 in file "../src/OverTemperature_B1.c"
  4396 ;; Parameters:    Size  Location     Type
  4397 ;;  channel         1    wreg     unsigned char 
  4398 ;; Auto vars:     Size  Location     Type
  4399 ;;  channel         1    0[BANK0 ] unsigned char 
  4400 ;; Return value:  Size  Location     Type
  4401 ;;		None               void
  4402 ;; Registers used:
  4403 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4404 ;; Tracked objects:
  4405 ;;		On entry : 0/0
  4406 ;;		On exit  : 0/0
  4407 ;;		Unchanged: 0/0
  4408 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4409 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4410 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4411 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4412 ;;      Totals:         1       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4413 ;;Total ram usage:        2 bytes
  4414 ;; Hardware stack levels used:    1
  4415 ;; Hardware stack levels required when called:    5
  4416 ;; This function calls:
  4417 ;;		_getAD
  4418 ;; This function is called by:
  4419 ;;		_main
  4420 ;; This function uses a non-reentrant model
  4421 ;;
  4422                           
  4423                           
  4424                           ;psect for function _getTemp_AD
  4425  127C                     _getTemp_AD:	
  4426                           
  4427                           ;incstack = 0
  4428                           ; Regs used in _getTemp_AD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4429                           ;getTemp_AD@channel stored from wreg
  4430  127C  0020               	movlb	0	; select bank0
  4431  127D  00A0               	movwf	getTemp_AD@channel
  4432                           
  4433                           ;OverTemperature_B1.c: 18: if (Temp.ADtoGO == 1) {
  4434  127E  0021               	movlb	1	; select bank1
  4435  127F  1D5A               	btfss	_Temp^(0+128),2
  4436  1280  0008               	return
  4437                           
  4438                           ;OverTemperature_B1.c: 19: Temp.ADRES = getAD(channel, 0xf0);
  4439  1281  30F0               	movlw	240
  4440  1282  00F7               	movwf	??_getTemp_AD
  4441  1283  0877               	movf	??_getTemp_AD,w
  4442  1284  00F3               	movwf	getAD@adcon1
  4443  1285  0020               	movlb	0	; select bank0
  4444  1286  0820               	movf	getTemp_AD@channel,w
  4445  1287  319D  25F2  3192   	fcall	_getAD
  4446  128A  0874               	movf	?_getAD+1,w
  4447  128B  0021               	movlb	1	; select bank1
  4448  128C  01E7               	clrf	((_Temp+1)^(0+128)+12)
  4449  128D  07E7               	addwf	((_Temp+1)^(0+128)+12),f
  4450  128E  0873               	movf	?_getAD,w
  4451  128F  01E6               	clrf	(_Temp^(0+128)+12)
  4452  1290  07E6               	addwf	(_Temp^(0+128)+12),f
  4453                           
  4454                           ;OverTemperature_B1.c: 20: if (Temp.ADRES > 0) {
  4455  1291  300C               	movlw	12
  4456  1292  3EDA               	addlw	_Temp& (0+255)
  4457  1293  0086               	movwf	6
  4458  1294  0187               	clrf	7
  4459  1295  0016               	moviw fsr1++
  4460  1296  0401               	iorwf	1,w
  4461  1297  1903               	skipnz
  4462  1298  0008               	return
  4463                           
  4464                           ;OverTemperature_B1.c: 21: if (Temp.ADH[0] < Temp.ADRES) {
  4465  1299  0867               	movf	((_Temp+1)^(0+128)+12),w
  4466  129A  0263               	subwf	((_Temp+1)^(0+128)+8),w
  4467  129B  1D03               	skipz
  4468  129C  2A9F               	goto	u12045
  4469  129D  0866               	movf	(_Temp^(0+128)+12),w
  4470  129E  0262               	subwf	(_Temp^(0+128)+8),w
  4471  129F                     u12045:	
  4472  129F  1803               	skipnc
  4473  12A0  2AA8               	goto	l10616
  4474                           
  4475                           ;OverTemperature_B1.c: 22: Temp.ADH[0] = Temp.ADRES;
  4476  12A1  0867               	movf	((_Temp+1)^(0+128)+12),w
  4477  12A2  01E3               	clrf	((_Temp+1)^(0+128)+8)
  4478  12A3  07E3               	addwf	((_Temp+1)^(0+128)+8),f
  4479  12A4  0866               	movf	(_Temp^(0+128)+12),w
  4480  12A5  01E2               	clrf	(_Temp^(0+128)+8)
  4481  12A6  07E2               	addwf	(_Temp^(0+128)+8),f
  4482                           
  4483                           ;OverTemperature_B1.c: 23: } else if (Temp.ADH[1] < Temp.ADRES) {
  4484  12A7  0008               	return
  4485  12A8                     l10616:	
  4486  12A8  0867               	movf	((_Temp+1)^(0+128)+12),w
  4487  12A9  0265               	subwf	((_Temp+1)^(0+128)+10),w
  4488  12AA  1D03               	skipz
  4489  12AB  2AAE               	goto	u12055
  4490  12AC  0866               	movf	(_Temp^(0+128)+12),w
  4491  12AD  0264               	subwf	(_Temp^(0+128)+10),w
  4492  12AE                     u12055:	
  4493  12AE  1803               	skipnc
  4494  12AF  0008               	return
  4495                           
  4496                           ;OverTemperature_B1.c: 24: Temp.ADH[1] = Temp.ADRES;
  4497  12B0  0867               	movf	((_Temp+1)^(0+128)+12),w
  4498  12B1  01E5               	clrf	((_Temp+1)^(0+128)+10)
  4499  12B2  07E5               	addwf	((_Temp+1)^(0+128)+10),f
  4500  12B3  0866               	movf	(_Temp^(0+128)+12),w
  4501  12B4  01E4               	clrf	(_Temp^(0+128)+10)
  4502  12B5  07E4               	addwf	(_Temp^(0+128)+10),f
  4503  12B6  0008               	return
  4504  12B7                     __end_of_getTemp_AD:	
  4505                           
  4506                           	psect	text4
  4507  0BE3                     __ptext4:	
  4508 ;; *************** function _getLoad_AD *****************
  4509 ;; Defined at:
  4510 ;;		line 15 in file "../src/OverLoad_B1.c"
  4511 ;; Parameters:    Size  Location     Type
  4512 ;;  channel         1    wreg     unsigned char 
  4513 ;; Auto vars:     Size  Location     Type
  4514 ;;  channel         1    2[BANK0 ] unsigned char 
  4515 ;;  i               1    5[BANK0 ] unsigned char 
  4516 ;;  j               1    4[BANK0 ] unsigned char 
  4517 ;;  k               1    3[BANK0 ] unsigned char 
  4518 ;; Return value:  Size  Location     Type
  4519 ;;		None               void
  4520 ;; Registers used:
  4521 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4522 ;; Tracked objects:
  4523 ;;		On entry : 0/0
  4524 ;;		On exit  : 0/0
  4525 ;;		Unchanged: 0/0
  4526 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4527 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4528 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4529 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4530 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4531 ;;Total ram usage:        6 bytes
  4532 ;; Hardware stack levels used:    1
  4533 ;; Hardware stack levels required when called:    5
  4534 ;; This function calls:
  4535 ;;		_getAD
  4536 ;; This function is called by:
  4537 ;;		_main
  4538 ;; This function uses a non-reentrant model
  4539 ;;
  4540                           
  4541                           
  4542                           ;psect for function _getLoad_AD
  4543  0BE3                     _getLoad_AD:	
  4544                           
  4545                           ;incstack = 0
  4546                           ; Regs used in _getLoad_AD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4547                           ;getLoad_AD@channel stored from wreg
  4548  0BE3  0020               	movlb	0	; select bank0
  4549  0BE4  00A2               	movwf	getLoad_AD@channel
  4550                           
  4551                           ;OverLoad_B1.c: 16: char i = 0, j = 0, k = 0;
  4552  0BE5  01A5               	clrf	getLoad_AD@i
  4553  0BE6  01A4               	clrf	getLoad_AD@j
  4554  0BE7  01A3               	clrf	getLoad_AD@k
  4555                           
  4556                           ;OverLoad_B1.c: 18: if (Load.ADtoGO == 1) {
  4557  0BE8  0022               	movlb	2	; select bank2
  4558  0BE9  1E25               	btfss	_Load^(0+256),4
  4559  0BEA  0008               	return
  4560                           
  4561                           ;OverLoad_B1.c: 19: Load.ADRES = getAD(channel, 0xf3);
  4562  0BEB  30F3               	movlw	243
  4563  0BEC  0020               	movlb	0	; select bank0
  4564  0BED  00A0               	movwf	??_getLoad_AD
  4565  0BEE  0820               	movf	??_getLoad_AD,w
  4566  0BEF  00F3               	movwf	getAD@adcon1
  4567  0BF0  0822               	movf	getLoad_AD@channel,w
  4568  0BF1  319D  25F2  318B   	fcall	_getAD
  4569  0BF4  0874               	movf	?_getAD+1,w
  4570  0BF5  0022               	movlb	2	; select bank2
  4571  0BF6  01C7               	clrf	((_Load+1)^(0+256)+33)
  4572  0BF7  07C7               	addwf	((_Load+1)^(0+256)+33),f
  4573  0BF8  0873               	movf	?_getAD,w
  4574  0BF9  01C6               	clrf	(_Load^(0+256)+33)
  4575  0BFA  07C6               	addwf	(_Load^(0+256)+33),f
  4576                           
  4577                           ;OverLoad_B1.c: 21: for (i = 0; i < 4; i++) {
  4578  0BFB  0020               	movlb	0	; select bank0
  4579  0BFC  01A5               	clrf	getLoad_AD@i
  4580  0BFD  3004               	movlw	4
  4581  0BFE  0225               	subwf	getLoad_AD@i,w
  4582  0BFF  1803               	btfsc	3,0
  4583  0C00  2C2E               	goto	l10586
  4584  0C01                     l10574:	
  4585                           
  4586                           ;OverLoad_B1.c: 22: if (Load.AH[i] < Load.ADRES && j == 0) {
  4587  0C01  3525               	lslf	getLoad_AD@i,w
  4588  0C02  3E30               	addlw	(_Load+11)& (0+255)
  4589  0C03  0086               	movwf	6
  4590  0C04  3001               	movlw	1	; select bank2/3
  4591  0C05  0087               	movwf	7
  4592  0C06  3F40               	moviw [0]fsr1
  4593  0C07  00A0               	movwf	??_getLoad_AD
  4594  0C08  3F41               	moviw [1]fsr1
  4595  0C09  00A1               	movwf	??_getLoad_AD+1
  4596  0C0A  0022               	movlb	2	; select bank2
  4597  0C0B  0847               	movf	((_Load+1)^(0+256)+33),w
  4598  0C0C  0020               	movlb	0	; select bank0
  4599  0C0D  0221               	subwf	??_getLoad_AD+1,w
  4600  0C0E  1D03               	skipz
  4601  0C0F  2C14               	goto	u11945
  4602  0C10  0022               	movlb	2	; select bank2
  4603  0C11  0846               	movf	(_Load^(0+256)+33),w
  4604  0C12  0020               	movlb	0	; select bank0
  4605  0C13  0220               	subwf	??_getLoad_AD,w
  4606  0C14                     u11945:	
  4607  0C14  1803               	skipnc
  4608  0C15  2C26               	goto	l10582
  4609  0C16  08A4               	movf	getLoad_AD@j,f
  4610  0C17  1D03               	skipz
  4611  0C18  2C26               	goto	l10582
  4612                           
  4613                           ;OverLoad_B1.c: 23: Load.AH[i] = Load.ADRES;
  4614  0C19  3525               	lslf	getLoad_AD@i,w
  4615  0C1A  3E30               	addlw	(_Load+11)& (0+255)
  4616  0C1B  0086               	movwf	6
  4617  0C1C  3001               	movlw	1	; select bank2/3
  4618  0C1D  0087               	movwf	7
  4619  0C1E  0022               	movlb	2	; select bank2
  4620  0C1F  0846               	movf	(_Load^(0+256)+33),w
  4621  0C20  3FC0               	movwi [0]fsr1
  4622  0C21  0847               	movf	((_Load+1)^(0+256)+33),w
  4623  0C22  3FC1               	movwi [1]fsr1
  4624                           
  4625                           ;OverLoad_B1.c: 24: j = 1;
  4626  0C23  0020               	movlb	0	; select bank0
  4627  0C24  01A4               	clrf	getLoad_AD@j
  4628  0C25  0AA4               	incf	getLoad_AD@j,f
  4629  0C26                     l10582:	
  4630  0C26  3001               	movlw	1
  4631  0C27  00A0               	movwf	??_getLoad_AD
  4632  0C28  0820               	movf	??_getLoad_AD,w
  4633  0C29  07A5               	addwf	getLoad_AD@i,f
  4634  0C2A  3004               	movlw	4
  4635  0C2B  0225               	subwf	getLoad_AD@i,w
  4636  0C2C  1C03               	skipc
  4637  0C2D  2C01               	goto	l10574
  4638  0C2E                     l10586:	
  4639                           
  4640                           ;OverLoad_B1.c: 25: }
  4641                           ;OverLoad_B1.c: 26: }
  4642                           ;OverLoad_B1.c: 27: if (j == 0) {
  4643  0C2E  08A4               	movf	getLoad_AD@j,f
  4644  0C2F  1D03               	skipz
  4645  0C30  0008               	return
  4646                           
  4647                           ;OverLoad_B1.c: 28: for (i = 0; i < 4; i++) {
  4648  0C31  01A5               	clrf	getLoad_AD@i
  4649  0C32                     L1:	
  4650  0C32  3004               	movlw	4
  4651  0C33  0225               	subwf	getLoad_AD@i,w
  4652  0C34  1803               	btfsc	3,0
  4653  0C35  0008               	return
  4654                           
  4655                           ;OverLoad_B1.c: 29: if (Load.AL[i] > Load.ADRES && k == 0) {
  4656  0C36  3525               	lslf	getLoad_AD@i,w
  4657  0C37  3E3A               	addlw	(_Load+21)& (0+255)
  4658  0C38  0086               	movwf	6
  4659  0C39  3001               	movlw	1	; select bank2/3
  4660  0C3A  0087               	movwf	7
  4661  0C3B  3F40               	moviw [0]fsr1
  4662  0C3C  00A0               	movwf	??_getLoad_AD
  4663  0C3D  3F41               	moviw [1]fsr1
  4664  0C3E  00A1               	movwf	??_getLoad_AD+1
  4665  0C3F  0821               	movf	??_getLoad_AD+1,w
  4666  0C40  0022               	movlb	2	; select bank2
  4667  0C41  0247               	subwf	((_Load+1)^(0+256)+33),w
  4668  0C42  1D03               	skipz
  4669  0C43  2C48               	goto	u11995
  4670  0C44  0020               	movlb	0	; select bank0
  4671  0C45  0820               	movf	??_getLoad_AD,w
  4672  0C46  0022               	movlb	2	; select bank2
  4673  0C47  0246               	subwf	(_Load^(0+256)+33),w
  4674  0C48                     u11995:	
  4675  0C48  1803               	skipnc
  4676  0C49  2C5B               	goto	l10602
  4677  0C4A  0020               	movlb	0	; select bank0
  4678  0C4B  08A3               	movf	getLoad_AD@k,f
  4679  0C4C  1D03               	skipz
  4680  0C4D  2C5B               	goto	l10602
  4681                           
  4682                           ;OverLoad_B1.c: 30: Load.AL[i] = Load.ADRES;
  4683  0C4E  3525               	lslf	getLoad_AD@i,w
  4684  0C4F  3E3A               	addlw	(_Load+21)& (0+255)
  4685  0C50  0086               	movwf	6
  4686  0C51  3001               	movlw	1	; select bank2/3
  4687  0C52  0087               	movwf	7
  4688  0C53  0022               	movlb	2	; select bank2
  4689  0C54  0846               	movf	(_Load^(0+256)+33),w
  4690  0C55  3FC0               	movwi [0]fsr1
  4691  0C56  0847               	movf	((_Load+1)^(0+256)+33),w
  4692  0C57  3FC1               	movwi [1]fsr1
  4693                           
  4694                           ;OverLoad_B1.c: 31: k = 1;
  4695  0C58  0020               	movlb	0	; select bank0
  4696  0C59  01A3               	clrf	getLoad_AD@k
  4697  0C5A  0AA3               	incf	getLoad_AD@k,f
  4698  0C5B                     l10602:	
  4699  0C5B  3001               	movlw	1
  4700  0C5C  0020               	movlb	0	; select bank0
  4701  0C5D  00A0               	movwf	??_getLoad_AD
  4702  0C5E  0820               	movf	??_getLoad_AD,w
  4703  0C5F  07A5               	addwf	getLoad_AD@i,f
  4704  0C60  2C32               	goto	L1
  4705  0C61                     __end_of_getLoad_AD:	
  4706                           
  4707                           	psect	text5
  4708  1DF2                     __ptext5:	
  4709 ;; *************** function _getAD *****************
  4710 ;; Defined at:
  4711 ;;		line 460 in file "../src/MCU_B1.c"
  4712 ;; Parameters:    Size  Location     Type
  4713 ;;  adcon0          1    wreg     unsigned char 
  4714 ;;  adcon1          1    3[COMMON] unsigned char 
  4715 ;; Auto vars:     Size  Location     Type
  4716 ;;  adcon0          1    6[COMMON] unsigned char 
  4717 ;; Return value:  Size  Location     Type
  4718 ;;                  2    3[COMMON] int 
  4719 ;; Registers used:
  4720 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4721 ;; Tracked objects:
  4722 ;;		On entry : 0/0
  4723 ;;		On exit  : 0/0
  4724 ;;		Unchanged: 0/0
  4725 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4726 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4727 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4728 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4729 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4730 ;;Total ram usage:        4 bytes
  4731 ;; Hardware stack levels used:    1
  4732 ;; Hardware stack levels required when called:    4
  4733 ;; This function calls:
  4734 ;;		_Timeout_Counter
  4735 ;;		_set_TimeoutCleared
  4736 ;; This function is called by:
  4737 ;;		_getLoad_AD
  4738 ;;		_getTemp_AD
  4739 ;; This function uses a non-reentrant model
  4740 ;;
  4741                           
  4742                           
  4743                           ;psect for function _getAD
  4744  1DF2                     _getAD:	
  4745                           
  4746                           ;incstack = 0
  4747                           ; Regs used in _getAD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4748                           ;getAD@adcon0 stored from wreg
  4749  1DF2  00F6               	movwf	getAD@adcon0
  4750                           
  4751                           ;MCU_B1.c: 461: ADCON0 = adcon0;
  4752  1DF3  0876               	movf	getAD@adcon0,w
  4753  1DF4  0021               	movlb	1	; select bank1
  4754  1DF5  009D               	movwf	29	;volatile
  4755                           
  4756                           ;MCU_B1.c: 462: ADCON1 = adcon1;
  4757  1DF6  0873               	movf	getAD@adcon1,w
  4758  1DF7  009E               	movwf	30	;volatile
  4759                           
  4760                           ;MCU_B1.c: 463: GO_nDONE = 1;
  4761  1DF8  149D               	bsf	29,1	;volatile
  4762                           
  4763                           ;MCU_B1.c: 464: while (GO_nDONE == 1 && myMain.Timeout == 0) {
  4764  1DF9  2DFD               	goto	l10170
  4765  1DFA                     l10168:	
  4766                           
  4767                           ;MCU_B1.c: 465: Timeout_Counter();
  4768  1DFA  319D  2553  319D   	fcall	_Timeout_Counter
  4769  1DFD                     l10170:	
  4770  1DFD  0021               	movlb	1	; select bank1
  4771  1DFE  1C9D               	btfss	29,1	;volatile
  4772  1DFF  2E02               	goto	l10174
  4773  1E00  1D39               	btfss	(_myMain^(0+128)+11),2
  4774  1E01  2DFA               	goto	l10168
  4775  1E02                     l10174:	
  4776                           
  4777                           ;MCU_B1.c: 466: };
  4778                           ;MCU_B1.c: 467: set_TimeoutCleared();
  4779  1E02  319A  22EB         	fcall	_set_TimeoutCleared
  4780                           
  4781                           ;MCU_B1.c: 468: return ((ADRESH*256)+ADRESL);
  4782  1E04  0021               	movlb	1	; select bank1
  4783  1E05  081C               	movf	28,w	;volatile
  4784  1E06  01F4               	clrf	?_getAD+1
  4785  1E07  07F4               	addwf	?_getAD+1,f
  4786  1E08  081B               	movf	27,w	;volatile
  4787  1E09  01F3               	clrf	?_getAD
  4788  1E0A  07F3               	addwf	?_getAD,f
  4789  1E0B  0008               	return
  4790  1E0C                     __end_of_getAD:	
  4791                           
  4792                           	psect	text6
  4793  1C76                     __ptext6:	
  4794 ;; *************** function _WDT_Main *****************
  4795 ;; Defined at:
  4796 ;;		line 1104 in file "../src/MCU_B1.c"
  4797 ;; Parameters:    Size  Location     Type
  4798 ;;		None
  4799 ;; Auto vars:     Size  Location     Type
  4800 ;;		None
  4801 ;; Return value:  Size  Location     Type
  4802 ;;		None               void
  4803 ;; Registers used:
  4804 ;;		wreg, status,2, status,0, pclath, cstack
  4805 ;; Tracked objects:
  4806 ;;		On entry : 0/0
  4807 ;;		On exit  : 0/0
  4808 ;;		Unchanged: 0/0
  4809 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4810 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4811 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4812 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4813 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4814 ;;Total ram usage:        1 bytes
  4815 ;; Hardware stack levels used:    1
  4816 ;; Hardware stack levels required when called:    4
  4817 ;; This function calls:
  4818 ;;		_WDT_Clearing
  4819 ;; This function is called by:
  4820 ;;		_main
  4821 ;; This function uses a non-reentrant model
  4822 ;;
  4823                           
  4824                           
  4825                           ;psect for function _WDT_Main
  4826  1C76                     _WDT_Main:	
  4827                           
  4828                           ;MCU_B1.c: 1105: if (WDT.Enable == 1) {
  4829                           
  4830                           ;incstack = 0
  4831                           ; Regs used in _WDT_Main: [wreg+status,2+status,0+pclath+cstack]
  4832  1C76  0021               	movlb	1	; select bank1
  4833  1C77  1C4B               	btfss	_WDT^(0+128),0
  4834  1C78  0008               	return
  4835                           
  4836                           ;MCU_B1.c: 1106: if (WDT.Timer-- > 0) {
  4837  1C79  3001               	movlw	1
  4838  1C7A  02CC               	subwf	(_WDT^(0+128)+1),f
  4839  1C7B  084C               	movf	(_WDT^(0+128)+1),w
  4840  1C7C  3AFF               	xorlw	255
  4841  1C7D  1903               	skipnz
  4842  1C7E  0008               	return
  4843                           
  4844                           ;MCU_B1.c: 1107: WDT.Timer = 100;
  4845  1C7F  3064               	movlw	100
  4846  1C80  00F3               	movwf	??_WDT_Main
  4847  1C81  0873               	movf	??_WDT_Main,w
  4848  1C82  00CC               	movwf	(_WDT^(0+128)+1)
  4849                           
  4850                           ;MCU_B1.c: 1108: WDT_Clearing();
  4851  1C83  3180  2002         	fcall	_WDT_Clearing
  4852  1C85  0008               	return
  4853  1C86                     __end_of_WDT_Main:	
  4854                           
  4855                           	psect	text7
  4856  0002                     __ptext7:	
  4857 ;; *************** function _WDT_Clearing *****************
  4858 ;; Defined at:
  4859 ;;		line 1114 in file "../src/MCU_B1.c"
  4860 ;; Parameters:    Size  Location     Type
  4861 ;;		None
  4862 ;; Auto vars:     Size  Location     Type
  4863 ;;		None
  4864 ;; Return value:  Size  Location     Type
  4865 ;;		None               void
  4866 ;; Registers used:
  4867 ;;		None
  4868 ;; Tracked objects:
  4869 ;;		On entry : 0/0
  4870 ;;		On exit  : 0/0
  4871 ;;		Unchanged: 0/0
  4872 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4873 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4874 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4875 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4876 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4877 ;;Total ram usage:        0 bytes
  4878 ;; Hardware stack levels used:    1
  4879 ;; Hardware stack levels required when called:    3
  4880 ;; This function calls:
  4881 ;;		Nothing
  4882 ;; This function is called by:
  4883 ;;		_WDT_Main
  4884 ;; This function uses a non-reentrant model
  4885 ;;
  4886                           
  4887                           
  4888                           ;psect for function _WDT_Clearing
  4889  0002                     _WDT_Clearing:	
  4890                           
  4891                           ;incstack = 0
  4892                           ; Regs used in _WDT_Clearing: []
  4893  0002  0064               	clrwdt	;# 
  4894  0003  0008               	return
  4895  0004                     __end_of_WDT_Clearing:	
  4896                           
  4897                           	psect	text8
  4898  0800                     __ptext8:	
  4899 ;; *************** function _Temp_Main *****************
  4900 ;; Defined at:
  4901 ;;		line 49 in file "../src/OverTemperature_B1.c"
  4902 ;; Parameters:    Size  Location     Type
  4903 ;;		None
  4904 ;; Auto vars:     Size  Location     Type
  4905 ;;		None
  4906 ;; Return value:  Size  Location     Type
  4907 ;;		None               void
  4908 ;; Registers used:
  4909 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4910 ;; Tracked objects:
  4911 ;;		On entry : 0/0
  4912 ;;		On exit  : 0/0
  4913 ;;		Unchanged: 0/0
  4914 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4915 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4916 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4917 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4918 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4919 ;;Total ram usage:        0 bytes
  4920 ;; Hardware stack levels used:    1
  4921 ;; Hardware stack levels required when called:    6
  4922 ;; This function calls:
  4923 ;;		_setTemp_Main
  4924 ;; This function is called by:
  4925 ;;		_main
  4926 ;; This function uses a non-reentrant model
  4927 ;;
  4928                           
  4929                           
  4930                           ;psect for function _Temp_Main
  4931  0800                     _Temp_Main:	
  4932                           
  4933                           ;OverTemperature_B1.c: 51: setTemp_Main();
  4934                           
  4935                           ;incstack = 0
  4936                           ; Regs used in _Temp_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4937  0800  318E  269C         	fcall	_setTemp_Main
  4938  0802  0008               	return
  4939  0803                     __end_of_Temp_Main:	
  4940                           
  4941                           	psect	text9
  4942  0E9C                     __ptext9:	
  4943 ;; *************** function _setTemp_Main *****************
  4944 ;; Defined at:
  4945 ;;		line 56 in file "../src/OverTemperature_B1.c"
  4946 ;; Parameters:    Size  Location     Type
  4947 ;;		None
  4948 ;; Auto vars:     Size  Location     Type
  4949 ;;  error           1   67[BANK0 ] unsigned char 
  4950 ;; Return value:  Size  Location     Type
  4951 ;;		None               void
  4952 ;; Registers used:
  4953 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4954 ;; Tracked objects:
  4955 ;;		On entry : 0/0
  4956 ;;		On exit  : 0/0
  4957 ;;		Unchanged: 0/0
  4958 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4959 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4960 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4961 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4962 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4963 ;;Total ram usage:        3 bytes
  4964 ;; Hardware stack levels used:    1
  4965 ;; Hardware stack levels required when called:    5
  4966 ;; This function calls:
  4967 ;;		_getMain_All_Error_Status
  4968 ;;		_setBuz
  4969 ;;		_setProductData
  4970 ;; This function is called by:
  4971 ;;		_Temp_Main
  4972 ;; This function uses a non-reentrant model
  4973 ;;
  4974                           
  4975                           
  4976                           ;psect for function _setTemp_Main
  4977  0E9C                     _setTemp_Main:	
  4978                           
  4979                           ;OverTemperature_B1.c: 57: char error = getMain_All_Error_Status(0);
  4980                           
  4981                           ;incstack = 0
  4982                           ; Regs used in _setTemp_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4983  0E9C  3000               	movlw	0
  4984  0E9D  3191  216E  318E   	fcall	_getMain_All_Error_Status
  4985  0EA0  0020               	movlb	0	; select bank0
  4986  0EA1  00E1               	movwf	??_setTemp_Main
  4987  0EA2  0861               	movf	??_setTemp_Main,w
  4988  0EA3  00E3               	movwf	setTemp_Main@error
  4989                           
  4990                           ;OverTemperature_B1.c: 58: if (Temp.Enable == 1) {
  4991  0EA4  0021               	movlb	1	; select bank1
  4992  0EA5  1C5A               	btfss	_Temp^(0+128),0
  4993  0EA6  2F48               	goto	l1908
  4994                           
  4995                           ;OverTemperature_B1.c: 65: if (Temp.ADtoGO == 0) {
  4996  0EA7  195A               	btfsc	_Temp^(0+128),2
  4997  0EA8  2EB8               	goto	l10216
  4998                           
  4999                           ;OverTemperature_B1.c: 66: Temp.Time++;
  5000  0EA9  3001               	movlw	1
  5001  0EAA  07DB               	addwf	(_Temp^(0+128)+1),f
  5002  0EAB  3000               	movlw	0
  5003  0EAC  3DDC               	addwfc	((_Temp+1)^(0+128)+1),f
  5004                           
  5005                           ;OverTemperature_B1.c: 67: if (Temp.Time >= (5000 / 20)) {
  5006  0EAD  3000               	movlw	0
  5007  0EAE  025C               	subwf	((_Temp+1)^(0+128)+1),w
  5008  0EAF  30FA               	movlw	250
  5009  0EB0  1903               	skipnz
  5010  0EB1  025B               	subwf	(_Temp^(0+128)+1),w
  5011  0EB2  1C03               	skipc
  5012  0EB3  0008               	return
  5013                           
  5014                           ;OverTemperature_B1.c: 68: Temp.Time = 0;
  5015  0EB4  01DB               	clrf	(_Temp^(0+128)+1)
  5016  0EB5  01DC               	clrf	((_Temp+1)^(0+128)+1)
  5017                           
  5018                           ;OverTemperature_B1.c: 69: Temp.ADtoGO = 1;
  5019  0EB6  155A               	bsf	_Temp^(0+128),2
  5020                           
  5021                           ;OverTemperature_B1.c: 70: }
  5022                           ;OverTemperature_B1.c: 71: } else {
  5023  0EB7  0008               	return
  5024  0EB8                     l10216:	
  5025                           
  5026                           ;OverTemperature_B1.c: 72: Temp.Time++;
  5027  0EB8  3001               	movlw	1
  5028  0EB9  07DB               	addwf	(_Temp^(0+128)+1),f
  5029  0EBA  3000               	movlw	0
  5030  0EBB  3DDC               	addwfc	((_Temp+1)^(0+128)+1),f
  5031                           
  5032                           ;OverTemperature_B1.c: 73: if (Temp.Time >= (40 / 20)) {
  5033  0EBC  3000               	movlw	0
  5034  0EBD  025C               	subwf	((_Temp+1)^(0+128)+1),w
  5035  0EBE  3002               	movlw	2
  5036  0EBF  1903               	skipnz
  5037  0EC0  025B               	subwf	(_Temp^(0+128)+1),w
  5038  0EC1  1C03               	skipc
  5039  0EC2  0008               	return
  5040                           
  5041                           ;OverTemperature_B1.c: 74: Temp.Time = 0;
  5042  0EC3  01DB               	clrf	(_Temp^(0+128)+1)
  5043  0EC4  01DC               	clrf	((_Temp+1)^(0+128)+1)
  5044                           
  5045                           ;OverTemperature_B1.c: 76: if (Temp.ADH[0] > 0 && Temp.ADH[1] > 0) {
  5046  0EC5  3008               	movlw	8
  5047  0EC6  3EDA               	addlw	_Temp& (0+255)
  5048  0EC7  0086               	movwf	6
  5049  0EC8  0187               	clrf	7
  5050  0EC9  0016               	moviw fsr1++
  5051  0ECA  0401               	iorwf	1,w
  5052  0ECB  1903               	skipnz
  5053  0ECC  2F42               	goto	l1913
  5054  0ECD  300A               	movlw	10
  5055  0ECE  3EDA               	addlw	_Temp& (0+255)
  5056  0ECF  0086               	movwf	6
  5057  0ED0  0187               	clrf	7
  5058  0ED1  0016               	moviw fsr1++
  5059  0ED2  0401               	iorwf	1,w
  5060  0ED3  1903               	skipnz
  5061  0ED4  2F42               	goto	l1913
  5062                           
  5063                           ;OverTemperature_B1.c: 77: Temp.ADtoGO = 0;
  5064  0ED5  115A               	bcf	_Temp^(0+128),2
  5065                           
  5066                           ;OverTemperature_B1.c: 78: Temp.AD = (Temp.ADH[0] + Temp.ADH[1]) / 2;
  5067  0ED6  300A               	movlw	10
  5068  0ED7  3EDA               	addlw	_Temp& (0+255)
  5069  0ED8  0086               	movwf	6
  5070  0ED9  0187               	clrf	7
  5071  0EDA  3008               	movlw	8
  5072  0EDB  3EDA               	addlw	_Temp& (0+255)
  5073  0EDC  0084               	movwf	4
  5074  0EDD  0185               	clrf	5
  5075  0EDE  3F40               	moviw [0]fsr1
  5076  0EDF  0700               	addwf	0,w
  5077  0EE0  0020               	movlb	0	; select bank0
  5078  0EE1  00E1               	movwf	??_setTemp_Main
  5079  0EE2  3101               	addfsr 0,1
  5080  0EE3  3F41               	moviw [1]fsr1
  5081  0EE4  3D00               	addwfc	0,w
  5082  0EE5  00E2               	movwf	??_setTemp_Main+1
  5083  0EE6  36E2               	lsrf	??_setTemp_Main+1,f
  5084  0EE7  0CE1               	rrf	??_setTemp_Main,f
  5085  0EE8  0861               	movf	??_setTemp_Main,w
  5086  0EE9  0021               	movlb	1	; select bank1
  5087  0EEA  00E0               	movwf	(_Temp^(0+128)+6)
  5088  0EEB  0020               	movlb	0	; select bank0
  5089  0EEC  0862               	movf	??_setTemp_Main+1,w
  5090  0EED  0021               	movlb	1	; select bank1
  5091  0EEE  00E1               	movwf	((_Temp+1)^(0+128)+6)
  5092                           
  5093                           ;OverTemperature_B1.c: 89: Temp.SafeValue = 455;
  5094  0EEF  30C7               	movlw	199
  5095  0EF0  00E8               	movwf	(_Temp^(0+128)+14)
  5096  0EF1  3001               	movlw	1
  5097  0EF2  00E9               	movwf	(_Temp^(0+128)+15)
  5098                           
  5099                           ;OverTemperature_B1.c: 90: Temp.DangerValue = 415;
  5100  0EF3  309F               	movlw	159
  5101  0EF4  00EA               	movwf	(_Temp^(0+128)+16)
  5102  0EF5  3001               	movlw	1
  5103  0EF6  00EB               	movwf	(_Temp^(0+128)+17)
  5104                           
  5105                           ;OverTemperature_B1.c: 96: if (Temp.ERROR == 1) {
  5106  0EF7  1CDA               	btfss	_Temp^(0+128),1
  5107  0EF8  2F19               	goto	l10248
  5108                           
  5109                           ;OverTemperature_B1.c: 97: if (Temp.AD >= Temp.SafeValue) {
  5110  0EF9  0869               	movf	((_Temp+1)^(0+128)+14),w
  5111  0EFA  0261               	subwf	((_Temp+1)^(0+128)+6),w
  5112  0EFB  1D03               	skipz
  5113  0EFC  2EFF               	goto	u11395
  5114  0EFD  0868               	movf	(_Temp^(0+128)+14),w
  5115  0EFE  0260               	subwf	(_Temp^(0+128)+6),w
  5116  0EFF                     u11395:	
  5117  0EFF  1C03               	skipc
  5118  0F00  2F17               	goto	l10246
  5119                           
  5120                           ;OverTemperature_B1.c: 98: Temp.Count++;
  5121  0F01  3001               	movlw	1
  5122  0F02  0020               	movlb	0	; select bank0
  5123  0F03  00E1               	movwf	??_setTemp_Main
  5124  0F04  0861               	movf	??_setTemp_Main,w
  5125  0F05  0021               	movlb	1	; select bank1
  5126  0F06  07DD               	addwf	(_Temp^(0+128)+3),f
  5127                           
  5128                           ;OverTemperature_B1.c: 99: if (Temp.Count >= 3) {
  5129  0F07  3003               	movlw	3
  5130  0F08  025D               	subwf	(_Temp^(0+128)+3),w
  5131  0F09  1C03               	skipc
  5132  0F0A  2F2F               	goto	l10260
  5133                           
  5134                           ;OverTemperature_B1.c: 100: Temp.Count = 0;
  5135  0F0B  01DD               	clrf	(_Temp^(0+128)+3)
  5136                           
  5137                           ;OverTemperature_B1.c: 101: Temp.ERROR = 0;
  5138  0F0C  10DA               	bcf	_Temp^(0+128),1
  5139                           
  5140                           ;OverTemperature_B1.c: 102: setBuz(2, 100);
  5141  0F0D  3064               	movlw	100
  5142  0F0E  0020               	movlb	0	; select bank0
  5143  0F0F  00A4               	movwf	setBuz@time
  5144  0F10  3000               	movlw	0
  5145  0F11  00A5               	movwf	setBuz@time+1
  5146  0F12  3002               	movlw	2
  5147  0F13  3195  25DF  318E   	fcall	_setBuz
  5148                           
  5149                           ;OverTemperature_B1.c: 103: }
  5150                           ;OverTemperature_B1.c: 104: } else {
  5151  0F16  2F2F               	goto	l10260
  5152  0F17                     l10246:	
  5153                           
  5154                           ;OverTemperature_B1.c: 105: Temp.Count = 0;
  5155  0F17  0021               	movlb	1	; select bank1
  5156  0F18  2F2E               	goto	l10258
  5157  0F19                     l10248:	
  5158                           ;OverTemperature_B1.c: 106: }
  5159                           ;OverTemperature_B1.c: 107: } else {
  5160                           
  5161                           
  5162                           ;OverTemperature_B1.c: 108: if (Temp.AD <= Temp.DangerValue) {
  5163  0F19  0861               	movf	((_Temp+1)^(0+128)+6),w
  5164  0F1A  026B               	subwf	((_Temp+1)^(0+128)+16),w
  5165  0F1B  1D03               	skipz
  5166  0F1C  2F1F               	goto	u11415
  5167  0F1D  0860               	movf	(_Temp^(0+128)+6),w
  5168  0F1E  026A               	subwf	(_Temp^(0+128)+16),w
  5169  0F1F                     u11415:	
  5170  0F1F  1C03               	skipc
  5171  0F20  2F2E               	goto	l10258
  5172                           
  5173                           ;OverTemperature_B1.c: 109: Temp.Count++;
  5174  0F21  3001               	movlw	1
  5175  0F22  0020               	movlb	0	; select bank0
  5176  0F23  00E1               	movwf	??_setTemp_Main
  5177  0F24  0861               	movf	??_setTemp_Main,w
  5178  0F25  0021               	movlb	1	; select bank1
  5179  0F26  07DD               	addwf	(_Temp^(0+128)+3),f
  5180                           
  5181                           ;OverTemperature_B1.c: 110: if (Temp.Count >= 3) {
  5182  0F27  3003               	movlw	3
  5183  0F28  025D               	subwf	(_Temp^(0+128)+3),w
  5184  0F29  1C03               	skipc
  5185  0F2A  2F2F               	goto	l10260
  5186                           
  5187                           ;OverTemperature_B1.c: 111: Temp.Count = 0;
  5188  0F2B  01DD               	clrf	(_Temp^(0+128)+3)
  5189                           
  5190                           ;OverTemperature_B1.c: 112: Temp.ERROR = 1;
  5191  0F2C  14DA               	bsf	_Temp^(0+128),1
  5192                           
  5193                           ;OverTemperature_B1.c: 113: }
  5194                           ;OverTemperature_B1.c: 114: } else {
  5195  0F2D  2F2F               	goto	l10260
  5196  0F2E                     l10258:	
  5197                           
  5198                           ;OverTemperature_B1.c: 115: Temp.Count = 0;
  5199  0F2E  01DD               	clrf	(_Temp^(0+128)+3)
  5200  0F2F                     l10260:	
  5201                           
  5202                           ;OverTemperature_B1.c: 116: }
  5203                           ;OverTemperature_B1.c: 117: }
  5204                           ;OverTemperature_B1.c: 118: setProductData(24, Temp.AD >> 8);
  5205  0F2F  0021               	movlb	1	; select bank1
  5206  0F30  0861               	movf	((_Temp+1)^(0+128)+6),w
  5207  0F31  0020               	movlb	0	; select bank0
  5208  0F32  00E1               	movwf	??_setTemp_Main
  5209  0F33  0861               	movf	??_setTemp_Main,w
  5210  0F34  00DD               	movwf	setProductData@value
  5211  0F35  3018               	movlw	24
  5212  0F36  319B  23DA  318E   	fcall	_setProductData
  5213                           
  5214                           ;OverTemperature_B1.c: 119: setProductData(25, Temp.AD);
  5215  0F39  0021               	movlb	1	; select bank1
  5216  0F3A  0860               	movf	(_Temp^(0+128)+6),w
  5217  0F3B  0020               	movlb	0	; select bank0
  5218  0F3C  00E1               	movwf	??_setTemp_Main
  5219  0F3D  0861               	movf	??_setTemp_Main,w
  5220  0F3E  00DD               	movwf	setProductData@value
  5221  0F3F  3019               	movlw	25
  5222  0F40  319B  23DA         	fcall	_setProductData
  5223  0F42                     l1913:	
  5224                           
  5225                           ;OverTemperature_B1.c: 135: }
  5226                           ;OverTemperature_B1.c: 136: Temp.ADH[0] = 0;
  5227  0F42  0021               	movlb	1	; select bank1
  5228  0F43  01E2               	clrf	(_Temp^(0+128)+8)
  5229  0F44  01E3               	clrf	((_Temp+1)^(0+128)+8)
  5230                           
  5231                           ;OverTemperature_B1.c: 137: Temp.ADH[1] = 0;
  5232  0F45  01E4               	clrf	(_Temp^(0+128)+10)
  5233  0F46  01E5               	clrf	((_Temp+1)^(0+128)+10)
  5234                           
  5235                           ;OverTemperature_B1.c: 138: }
  5236                           ;OverTemperature_B1.c: 139: }
  5237                           ;OverTemperature_B1.c: 141: } else {
  5238  0F47  0008               	return
  5239  0F48                     l1908:	
  5240                           
  5241                           ;OverTemperature_B1.c: 142: if (myMain.PowerON == 1) {
  5242  0F48  1C2E               	btfss	_myMain^(0+128),0
  5243  0F49  0008               	return
  5244                           
  5245                           ;OverTemperature_B1.c: 143: Temp.Enable = 1;
  5246  0F4A  145A               	bsf	_Temp^(0+128),0
  5247  0F4B  0008               	return
  5248  0F4C                     __end_of_setTemp_Main:	
  5249                           
  5250                           	psect	text10
  5251  1ACF                     __ptext10:	
  5252 ;; *************** function _Temp_Initialization *****************
  5253 ;; Defined at:
  5254 ;;		line 8 in file "../src/OverTemperature_B1.c"
  5255 ;; Parameters:    Size  Location     Type
  5256 ;;		None
  5257 ;; Auto vars:     Size  Location     Type
  5258 ;;		None
  5259 ;; Return value:  Size  Location     Type
  5260 ;;		None               void
  5261 ;; Registers used:
  5262 ;;		status,2, status,0, pclath, cstack
  5263 ;; Tracked objects:
  5264 ;;		On entry : 0/0
  5265 ;;		On exit  : 0/0
  5266 ;;		Unchanged: 0/0
  5267 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5268 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5269 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5270 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5271 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5272 ;;Total ram usage:        0 bytes
  5273 ;; Hardware stack levels used:    1
  5274 ;; Hardware stack levels required when called:    4
  5275 ;; This function calls:
  5276 ;;		_setTemp_Initialization
  5277 ;; This function is called by:
  5278 ;;		_main
  5279 ;; This function uses a non-reentrant model
  5280 ;;
  5281                           
  5282                           
  5283                           ;psect for function _Temp_Initialization
  5284  1ACF                     _Temp_Initialization:	
  5285                           
  5286                           ;OverTemperature_B1.c: 10: setTemp_Initialization();
  5287                           
  5288                           ;incstack = 0
  5289                           ; Regs used in _Temp_Initialization: [status,2+status,0+pclath+cstack]
  5290  1ACF  3190  2066         	fcall	_setTemp_Initialization
  5291  1AD1  0008               	return
  5292  1AD2                     __end_of_Temp_Initialization:	
  5293                           
  5294                           	psect	text11
  5295  1066                     __ptext11:	
  5296 ;; *************** function _setTemp_Initialization *****************
  5297 ;; Defined at:
  5298 ;;		line 44 in file "../src/OverTemperature_B1.c"
  5299 ;; Parameters:    Size  Location     Type
  5300 ;;		None
  5301 ;; Auto vars:     Size  Location     Type
  5302 ;;		None
  5303 ;; Return value:  Size  Location     Type
  5304 ;;		None               void
  5305 ;; Registers used:
  5306 ;;		None
  5307 ;; Tracked objects:
  5308 ;;		On entry : 0/0
  5309 ;;		On exit  : 0/0
  5310 ;;		Unchanged: 0/0
  5311 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5312 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5313 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5314 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5315 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5316 ;;Total ram usage:        0 bytes
  5317 ;; Hardware stack levels used:    1
  5318 ;; Hardware stack levels required when called:    3
  5319 ;; This function calls:
  5320 ;;		Nothing
  5321 ;; This function is called by:
  5322 ;;		_Temp_Initialization
  5323 ;; This function uses a non-reentrant model
  5324 ;;
  5325                           
  5326                           
  5327                           ;psect for function _setTemp_Initialization
  5328  1066                     _setTemp_Initialization:	
  5329                           
  5330                           ;incstack = 0
  5331                           ; Regs used in _setTemp_Initialization: []
  5332  1066  0008               	return
  5333  1067                     __end_of_setTemp_Initialization:	
  5334                           
  5335                           	psect	text12
  5336  1B6A                     __ptext12:	
  5337 ;; *************** function _Switch_Main *****************
  5338 ;; Defined at:
  5339 ;;		line 72 in file "../src/Switch_B1.c"
  5340 ;; Parameters:    Size  Location     Type
  5341 ;;		None
  5342 ;; Auto vars:     Size  Location     Type
  5343 ;;		None
  5344 ;; Return value:  Size  Location     Type
  5345 ;;		None               void
  5346 ;; Registers used:
  5347 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5348 ;; Tracked objects:
  5349 ;;		On entry : 0/0
  5350 ;;		On exit  : 0/0
  5351 ;;		Unchanged: 0/0
  5352 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5353 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5354 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5355 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5356 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5357 ;;Total ram usage:        0 bytes
  5358 ;; Hardware stack levels used:    1
  5359 ;; Hardware stack levels required when called:    8
  5360 ;; This function calls:
  5361 ;;		_TouchPower
  5362 ;;		_setSw_Main
  5363 ;; This function is called by:
  5364 ;;		_main
  5365 ;; This function uses a non-reentrant model
  5366 ;;
  5367                           
  5368                           
  5369                           ;psect for function _Switch_Main
  5370  1B6A                     _Switch_Main:	
  5371                           
  5372                           ;Switch_B1.c: 75: setSw_Main(1);
  5373                           
  5374                           ;incstack = 0
  5375                           ; Regs used in _Switch_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5376  1B6A  3001               	movlw	1
  5377  1B6B  3181  21F0  319B   	fcall	_setSw_Main
  5378                           
  5379                           ;Switch_B1.c: 79: setSw_Main(2);
  5380  1B6E  3002               	movlw	2
  5381  1B6F  3181  21F0  319B   	fcall	_setSw_Main
  5382                           
  5383                           ;Switch_B1.c: 87: TouchPower();
  5384  1B72  319D  2568         	fcall	_TouchPower
  5385  1B74  0008               	return
  5386  1B75                     __end_of_Switch_Main:	
  5387                           
  5388                           	psect	text13
  5389  01F0                     __ptext13:	
  5390 ;; *************** function _setSw_Main *****************
  5391 ;; Defined at:
  5392 ;;		line 121 in file "../src/Switch_B1.c"
  5393 ;; Parameters:    Size  Location     Type
  5394 ;;  sw              1    wreg     unsigned char 
  5395 ;; Auto vars:     Size  Location     Type
  5396 ;;  sw              1   72[BANK0 ] unsigned char 
  5397 ;; Return value:  Size  Location     Type
  5398 ;;		None               void
  5399 ;; Registers used:
  5400 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5401 ;; Tracked objects:
  5402 ;;		On entry : 0/0
  5403 ;;		On exit  : 0/0
  5404 ;;		Unchanged: 0/0
  5405 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5406 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5407 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5408 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5409 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5410 ;;Total ram usage:        3 bytes
  5411 ;; Hardware stack levels used:    1
  5412 ;; Hardware stack levels required when called:    7
  5413 ;; This function calls:
  5414 ;;		_SwPointSelect
  5415 ;;		_getMain_All_Error_Status
  5416 ;;		_getSw_KeyStatus
  5417 ;;		_setBuz
  5418 ;;		_setDimmerLights_AdjOn
  5419 ;;		_setDimmerLights_SwOff
  5420 ;;		_setDimmerLights_SwOn
  5421 ;;		_setRF_Learn
  5422 ;; This function is called by:
  5423 ;;		_Switch_Main
  5424 ;; This function uses a non-reentrant model
  5425 ;;
  5426                           
  5427                           
  5428                           ;psect for function _setSw_Main
  5429  01F0                     _setSw_Main:	
  5430                           
  5431                           ;incstack = 0
  5432                           ; Regs used in _setSw_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5433                           ;setSw_Main@sw stored from wreg
  5434  01F0  0020               	movlb	0	; select bank0
  5435  01F1  00E8               	movwf	setSw_Main@sw
  5436                           
  5437                           ;Switch_B1.c: 122: SwPointSelect(sw);
  5438  01F2  0868               	movf	setSw_Main@sw,w
  5439  01F3  319D  257D  3181   	fcall	_SwPointSelect
  5440                           
  5441                           ;Switch_B1.c: 123: if (Sw->Enable == 1) {
  5442  01F6  0020               	movlb	0	; select bank0
  5443  01F7  086E               	movf	_Sw,w
  5444  01F8  0086               	movwf	6
  5445  01F9  3001               	movlw	1	; select bank2/3
  5446  01FA  0087               	movwf	7
  5447  01FB  1C01               	btfss	1,0
  5448  01FC  2B57               	goto	l2681
  5449                           
  5450                           ;Switch_B1.c: 125: if (getMain_All_Error_Status(0) == 0) {
  5451  01FD  3000               	movlw	0
  5452  01FE  3191  216E  3181   	fcall	_getMain_All_Error_Status
  5453  0201  3800               	iorlw	0
  5454  0202  1D03               	skipz
  5455  0203  2A1F               	goto	l10358
  5456                           
  5457                           ;Switch_B1.c: 126: Sw->Detect = 0;
  5458  0204  0020               	movlb	0	; select bank0
  5459  0205  0A6E               	incf	_Sw,w
  5460  0206  0086               	movwf	6
  5461  0207  3001               	movlw	1	; select bank2/3
  5462  0208  0087               	movwf	7
  5463  0209  1081               	bcf	1,1
  5464                           
  5465                           ;Switch_B1.c: 127: Sw->Touch = getSw_KeyStatus(sw) == 1 ? 1 : 0;
  5466  020A  0868               	movf	setSw_Main@sw,w
  5467  020B  319E  26BB  3181   	fcall	_getSw_KeyStatus
  5468  020E  3A01               	xorlw	1
  5469  020F  3000               	movlw	0
  5470  0210  1903               	skipnz
  5471  0211  3001               	movlw	1
  5472  0212  0020               	movlb	0	; select bank0
  5473  0213  00E6               	movwf	??_setSw_Main
  5474  0214  086E               	movf	_Sw,w
  5475  0215  0086               	movwf	6
  5476  0216  3001               	movlw	1	; select bank2/3
  5477  0217  0087               	movwf	7
  5478  0218  0DE6               	rlf	??_setSw_Main,f
  5479  0219  0801               	movf	1,w
  5480  021A  0666               	xorwf	??_setSw_Main,w
  5481  021B  39FD               	andlw	-3
  5482  021C  0666               	xorwf	??_setSw_Main,w
  5483  021D  0081               	movwf	1
  5484                           
  5485                           ;Switch_B1.c: 128: } else {
  5486  021E  2A35               	goto	l2683
  5487  021F                     l10358:	
  5488                           
  5489                           ;Switch_B1.c: 129: if (Sw->Detect == 0) {
  5490  021F  0020               	movlb	0	; select bank0
  5491  0220  0A6E               	incf	_Sw,w
  5492  0221  0086               	movwf	6
  5493  0222  3001               	movlw	1	; select bank2/3
  5494  0223  0087               	movwf	7
  5495  0224  1881               	btfsc	1,1
  5496  0225  2A35               	goto	l2683
  5497                           
  5498                           ;Switch_B1.c: 130: Sw->Detect = 1;
  5499  0226  0A6E               	incf	_Sw,w
  5500  0227  0086               	movwf	6
  5501  0228  3001               	movlw	1	; select bank2/3
  5502  0229  0087               	movwf	7
  5503  022A  1481               	bsf	1,1
  5504                           
  5505                           ;Switch_B1.c: 132: Sw->Touch = 0;
  5506  022B  086E               	movf	_Sw,w
  5507  022C  0086               	movwf	6
  5508  022D  3001               	movlw	1	; select bank2/3
  5509  022E  0087               	movwf	7
  5510  022F  1081               	bcf	1,1
  5511                           
  5512                           ;Switch_B1.c: 133: Sw->Debounce = 1;
  5513  0230  086E               	movf	_Sw,w
  5514  0231  0086               	movwf	6
  5515  0232  3001               	movlw	1	; select bank2/3
  5516  0233  0087               	movwf	7
  5517  0234  1501               	bsf	1,2
  5518  0235                     l2683:	
  5519                           
  5520                           ;Switch_B1.c: 134: }
  5521                           ;Switch_B1.c: 135: }
  5522                           ;Switch_B1.c: 137: if (Sw->Touch == 1) {
  5523  0235  086E               	movf	_Sw,w
  5524  0236  0086               	movwf	6
  5525  0237  3001               	movlw	1	; select bank2/3
  5526  0238  0087               	movwf	7
  5527  0239  1C81               	btfss	1,1
  5528  023A  2B04               	goto	l10408
  5529                           
  5530                           ;Switch_B1.c: 138: if (Sw->Debounce == 0) {
  5531  023B  086E               	movf	_Sw,w
  5532  023C  0086               	movwf	6
  5533  023D  3001               	movlw	1	; select bank2/3
  5534  023E  0087               	movwf	7
  5535  023F  1901               	btfsc	1,2
  5536  0240  2A62               	goto	l10374
  5537                           
  5538                           ;Switch_B1.c: 139: Sw->DebounceTime++;
  5539  0241  3001               	movlw	1
  5540  0242  00E6               	movwf	??_setSw_Main
  5541  0243  086E               	movf	_Sw,w
  5542  0244  3E02               	addlw	2
  5543  0245  0086               	movwf	6
  5544  0246  3001               	movlw	1	; select bank2/3
  5545  0247  0087               	movwf	7
  5546  0248  0866               	movf	??_setSw_Main,w
  5547  0249  0781               	addwf	1,f
  5548                           
  5549                           ;Switch_B1.c: 140: if (Sw->DebounceTime >= (50 / 20)) {
  5550  024A  086E               	movf	_Sw,w
  5551  024B  3E02               	addlw	2
  5552  024C  0086               	movwf	6
  5553  024D  3001               	movlw	1	; select bank2/3
  5554  024E  0087               	movwf	7
  5555  024F  3002               	movlw	2
  5556  0250  0201               	subwf	1,w
  5557  0251  1C03               	skipc
  5558  0252  0008               	return
  5559                           
  5560                           ;Switch_B1.c: 141: Sw->DebounceTime = 0;
  5561  0253  086E               	movf	_Sw,w
  5562  0254  3E02               	addlw	2
  5563  0255  0086               	movwf	6
  5564  0256  3001               	movlw	1	; select bank2/3
  5565  0257  0087               	movwf	7
  5566  0258  0181               	clrf	1
  5567                           
  5568                           ;Switch_B1.c: 142: Sw->Debounce = 1;
  5569  0259  086E               	movf	_Sw,w
  5570  025A  0086               	movwf	6
  5571  025B  3001               	movlw	1	; select bank2/3
  5572  025C  0087               	movwf	7
  5573  025D  1501               	bsf	1,2
  5574                           
  5575                           ;Switch_B1.c: 145: setDimmerLights_SwOn(sw);
  5576  025E  0868               	movf	setSw_Main@sw,w
  5577  025F  3197  27A4         	fcall	_setDimmerLights_SwOn
  5578                           
  5579                           ;Switch_B1.c: 148: }
  5580                           ;Switch_B1.c: 149: } else {
  5581  0261  0008               	return
  5582  0262                     l10374:	
  5583                           
  5584                           ;Switch_B1.c: 150: if (Sw->Hold1 == 0) {
  5585  0262  0020               	movlb	0	; select bank0
  5586  0263  086E               	movf	_Sw,w
  5587  0264  0086               	movwf	6
  5588  0265  3001               	movlw	1	; select bank2/3
  5589  0266  0087               	movwf	7
  5590  0267  1981               	btfsc	1,3
  5591  0268  2A94               	goto	l10384
  5592                           
  5593                           ;Switch_B1.c: 151: Sw->Hold1Time++;
  5594  0269  086E               	movf	_Sw,w
  5595  026A  3E03               	addlw	3
  5596  026B  0086               	movwf	6
  5597  026C  3001               	movlw	1	; select bank2/3
  5598  026D  0087               	movwf	7
  5599  026E  3001               	movlw	1
  5600  026F  0781               	addwf	1,f
  5601  0270  3141               	addfsr 1,1
  5602  0271  1803               	skipnc
  5603  0272  0A81               	incf	1,f
  5604                           
  5605                           ;Switch_B1.c: 152: if (Sw->Hold1Time >= (1500 / 20)) {
  5606  0273  086E               	movf	_Sw,w
  5607  0274  3E03               	addlw	3
  5608  0275  0086               	movwf	6
  5609  0276  3001               	movlw	1	; select bank2/3
  5610  0277  0087               	movwf	7
  5611  0278  3F40               	moviw [0]fsr1
  5612  0279  00E6               	movwf	??_setSw_Main
  5613  027A  3F41               	moviw [1]fsr1
  5614  027B  00E7               	movwf	??_setSw_Main+1
  5615  027C  3000               	movlw	0
  5616  027D  0267               	subwf	??_setSw_Main+1,w
  5617  027E  304B               	movlw	75
  5618  027F  1903               	skipnz
  5619  0280  0266               	subwf	??_setSw_Main,w
  5620  0281  1C03               	skipc
  5621  0282  0008               	return
  5622                           
  5623                           ;Switch_B1.c: 153: Sw->Hold1Time = 0;
  5624  0283  086E               	movf	_Sw,w
  5625  0284  3E03               	addlw	3
  5626  0285  0086               	movwf	6
  5627  0286  3001               	movlw	1	; select bank2/3
  5628  0287  0087               	movwf	7
  5629  0288  3000               	movlw	0
  5630  0289  3FC0               	movwi [0]fsr1
  5631  028A  3FC1               	movwi [1]fsr1
  5632                           
  5633                           ;Switch_B1.c: 156: Sw->Hold1 = 1;
  5634  028B  086E               	movf	_Sw,w
  5635  028C  0086               	movwf	6
  5636  028D  3001               	movlw	1	; select bank2/3
  5637  028E  0087               	movwf	7
  5638  028F  1581               	bsf	1,3
  5639                           
  5640                           ;Switch_B1.c: 157: setDimmerLights_AdjOn(sw);
  5641  0290  0868               	movf	setSw_Main@sw,w
  5642  0291  3190  20E2         	fcall	_setDimmerLights_AdjOn
  5643                           
  5644                           ;Switch_B1.c: 160: }
  5645                           ;Switch_B1.c: 161: } else {
  5646  0293  0008               	return
  5647  0294                     l10384:	
  5648                           
  5649                           ;Switch_B1.c: 162: if (Sw->Hold2 == 0) {
  5650  0294  0020               	movlb	0	; select bank0
  5651  0295  086E               	movf	_Sw,w
  5652  0296  0086               	movwf	6
  5653  0297  3001               	movlw	1	; select bank2/3
  5654  0298  0087               	movwf	7
  5655  0299  1A01               	btfsc	1,4
  5656  029A  2AD2               	goto	l10398
  5657                           
  5658                           ;Switch_B1.c: 163: Sw->Hold2Time++;
  5659  029B  086E               	movf	_Sw,w
  5660  029C  3E05               	addlw	5
  5661  029D  0086               	movwf	6
  5662  029E  3001               	movlw	1	; select bank2/3
  5663  029F  0087               	movwf	7
  5664  02A0  3001               	movlw	1
  5665  02A1  0781               	addwf	1,f
  5666  02A2  3141               	addfsr 1,1
  5667  02A3  1803               	skipnc
  5668  02A4  0A81               	incf	1,f
  5669                           
  5670                           ;Switch_B1.c: 164: if (Sw->Hold2Time >= (1500 / 20)) {
  5671  02A5  086E               	movf	_Sw,w
  5672  02A6  3E05               	addlw	5
  5673  02A7  0086               	movwf	6
  5674  02A8  3001               	movlw	1	; select bank2/3
  5675  02A9  0087               	movwf	7
  5676  02AA  3F40               	moviw [0]fsr1
  5677  02AB  00E6               	movwf	??_setSw_Main
  5678  02AC  3F41               	moviw [1]fsr1
  5679  02AD  00E7               	movwf	??_setSw_Main+1
  5680  02AE  3000               	movlw	0
  5681  02AF  0267               	subwf	??_setSw_Main+1,w
  5682  02B0  304B               	movlw	75
  5683  02B1  1903               	skipnz
  5684  02B2  0266               	subwf	??_setSw_Main,w
  5685  02B3  1C03               	skipc
  5686  02B4  0008               	return
  5687                           
  5688                           ;Switch_B1.c: 165: Sw->Hold2Time = 0;
  5689  02B5  086E               	movf	_Sw,w
  5690  02B6  3E05               	addlw	5
  5691  02B7  0086               	movwf	6
  5692  02B8  3001               	movlw	1	; select bank2/3
  5693  02B9  0087               	movwf	7
  5694  02BA  3000               	movlw	0
  5695  02BB  3FC0               	movwi [0]fsr1
  5696  02BC  3FC1               	movwi [1]fsr1
  5697                           
  5698                           ;Switch_B1.c: 166: Sw->Hold2 = 1;
  5699  02BD  086E               	movf	_Sw,w
  5700  02BE  0086               	movwf	6
  5701  02BF  3001               	movlw	1	; select bank2/3
  5702  02C0  0087               	movwf	7
  5703  02C1  1601               	bsf	1,4
  5704                           
  5705                           ;Switch_B1.c: 169: setRF_Learn(1);
  5706  02C2  3001               	movlw	1
  5707  02C3  319C  24CA  3181   	fcall	_setRF_Learn
  5708                           
  5709                           ;Switch_B1.c: 170: if (myMain.First == 1) {
  5710  02C6  0021               	movlb	1	; select bank1
  5711  02C7  1EAE               	btfss	_myMain^(0+128),5
  5712  02C8  0008               	return
  5713                           
  5714                           ;Switch_B1.c: 171: setBuz(2, 100);
  5715  02C9  3064               	movlw	100
  5716  02CA  0020               	movlb	0	; select bank0
  5717  02CB  00A4               	movwf	setBuz@time
  5718  02CC  3000               	movlw	0
  5719  02CD  00A5               	movwf	setBuz@time+1
  5720  02CE  3002               	movlw	2
  5721  02CF  3195  25DF         	fcall	_setBuz
  5722                           
  5723                           ;Switch_B1.c: 172: }
  5724                           ;Switch_B1.c: 176: }
  5725                           ;Switch_B1.c: 177: } else {
  5726  02D1  0008               	return
  5727  02D2                     l10398:	
  5728                           
  5729                           ;Switch_B1.c: 178: if (Sw->Hold3 == 0) {
  5730  02D2  0020               	movlb	0	; select bank0
  5731  02D3  086E               	movf	_Sw,w
  5732  02D4  0086               	movwf	6
  5733  02D5  3001               	movlw	1	; select bank2/3
  5734  02D6  0087               	movwf	7
  5735  02D7  1A81               	btfsc	1,5
  5736  02D8  0008               	return
  5737                           
  5738                           ;Switch_B1.c: 179: Sw->Hold3Time++;
  5739  02D9  086E               	movf	_Sw,w
  5740  02DA  3E07               	addlw	7
  5741  02DB  0086               	movwf	6
  5742  02DC  3001               	movlw	1	; select bank2/3
  5743  02DD  0087               	movwf	7
  5744  02DE  3001               	movlw	1
  5745  02DF  0781               	addwf	1,f
  5746  02E0  3141               	addfsr 1,1
  5747  02E1  1803               	skipnc
  5748  02E2  0A81               	incf	1,f
  5749                           
  5750                           ;Switch_B1.c: 180: if (Sw->Hold3Time >= 3000) {
  5751  02E3  086E               	movf	_Sw,w
  5752  02E4  3E07               	addlw	7
  5753  02E5  0086               	movwf	6
  5754  02E6  3001               	movlw	1	; select bank2/3
  5755  02E7  0087               	movwf	7
  5756  02E8  3F40               	moviw [0]fsr1
  5757  02E9  00E6               	movwf	??_setSw_Main
  5758  02EA  3F41               	moviw [1]fsr1
  5759  02EB  00E7               	movwf	??_setSw_Main+1
  5760  02EC  300B               	movlw	11
  5761  02ED  0267               	subwf	??_setSw_Main+1,w
  5762  02EE  30B8               	movlw	184
  5763  02EF  1903               	skipnz
  5764  02F0  0266               	subwf	??_setSw_Main,w
  5765  02F1  1C03               	skipc
  5766  02F2  0008               	return
  5767                           
  5768                           ;Switch_B1.c: 181: Sw->Hold3Time = 0;
  5769  02F3  086E               	movf	_Sw,w
  5770  02F4  3E07               	addlw	7
  5771  02F5  0086               	movwf	6
  5772  02F6  3001               	movlw	1	; select bank2/3
  5773  02F7  0087               	movwf	7
  5774  02F8  3000               	movlw	0
  5775  02F9  3FC0               	movwi [0]fsr1
  5776  02FA  3FC1               	movwi [1]fsr1
  5777                           
  5778                           ;Switch_B1.c: 182: Sw->Hold3 = 1;
  5779  02FB  086E               	movf	_Sw,w
  5780  02FC  0086               	movwf	6
  5781  02FD  3001               	movlw	1	; select bank2/3
  5782  02FE  0087               	movwf	7
  5783  02FF  1681               	bsf	1,5
  5784                           
  5785                           ;Switch_B1.c: 185: setRF_Learn(0);
  5786  0300  3000               	movlw	0
  5787  0301  319C  24CA         	fcall	_setRF_Learn
  5788                           
  5789                           ;Switch_B1.c: 188: }
  5790                           ;Switch_B1.c: 189: }
  5791                           ;Switch_B1.c: 190: }
  5792                           ;Switch_B1.c: 191: }
  5793                           ;Switch_B1.c: 192: }
  5794                           ;Switch_B1.c: 193: } else {
  5795  0303  0008               	return
  5796  0304                     l10408:	
  5797                           
  5798                           ;Switch_B1.c: 194: if (Sw->Debounce == 1) {
  5799  0304  0020               	movlb	0	; select bank0
  5800  0305  086E               	movf	_Sw,w
  5801  0306  0086               	movwf	6
  5802  0307  3001               	movlw	1	; select bank2/3
  5803  0308  0087               	movwf	7
  5804  0309  1D01               	btfss	1,2
  5805  030A  0008               	return
  5806                           
  5807                           ;Switch_B1.c: 195: Sw->DebounceTime++;
  5808  030B  3001               	movlw	1
  5809  030C  00E6               	movwf	??_setSw_Main
  5810  030D  086E               	movf	_Sw,w
  5811  030E  3E02               	addlw	2
  5812  030F  0086               	movwf	6
  5813  0310  3001               	movlw	1	; select bank2/3
  5814  0311  0087               	movwf	7
  5815  0312  0866               	movf	??_setSw_Main,w
  5816  0313  0781               	addwf	1,f
  5817                           
  5818                           ;Switch_B1.c: 196: if (Sw->DebounceTime >= (50 / 20)) {
  5819  0314  086E               	movf	_Sw,w
  5820  0315  3E02               	addlw	2
  5821  0316  0086               	movwf	6
  5822  0317  3001               	movlw	1	; select bank2/3
  5823  0318  0087               	movwf	7
  5824  0319  3002               	movlw	2
  5825  031A  0201               	subwf	1,w
  5826  031B  1C03               	skipc
  5827  031C  0008               	return
  5828                           
  5829                           ;Switch_B1.c: 197: Sw->DebounceTime = 0;
  5830  031D  086E               	movf	_Sw,w
  5831  031E  3E02               	addlw	2
  5832  031F  0086               	movwf	6
  5833  0320  3001               	movlw	1	; select bank2/3
  5834  0321  0087               	movwf	7
  5835  0322  0181               	clrf	1
  5836                           
  5837                           ;Switch_B1.c: 198: Sw->Debounce = 0;
  5838  0323  086E               	movf	_Sw,w
  5839  0324  0086               	movwf	6
  5840  0325  3001               	movlw	1	; select bank2/3
  5841  0326  0087               	movwf	7
  5842  0327  1101               	bcf	1,2
  5843                           
  5844                           ;Switch_B1.c: 199: Sw->Hold1Time = 0;
  5845  0328  086E               	movf	_Sw,w
  5846  0329  3E03               	addlw	3
  5847  032A  0086               	movwf	6
  5848  032B  3001               	movlw	1	; select bank2/3
  5849  032C  0087               	movwf	7
  5850  032D  3000               	movlw	0
  5851  032E  3FC0               	movwi [0]fsr1
  5852  032F  3FC1               	movwi [1]fsr1
  5853                           
  5854                           ;Switch_B1.c: 200: Sw->Hold1 = 0;
  5855  0330  086E               	movf	_Sw,w
  5856  0331  0086               	movwf	6
  5857  0332  3001               	movlw	1	; select bank2/3
  5858  0333  0087               	movwf	7
  5859  0334  1181               	bcf	1,3
  5860                           
  5861                           ;Switch_B1.c: 201: Sw->Hold2Time = 0;
  5862  0335  086E               	movf	_Sw,w
  5863  0336  3E05               	addlw	5
  5864  0337  0086               	movwf	6
  5865  0338  3001               	movlw	1	; select bank2/3
  5866  0339  0087               	movwf	7
  5867  033A  3000               	movlw	0
  5868  033B  3FC0               	movwi [0]fsr1
  5869  033C  3FC1               	movwi [1]fsr1
  5870                           
  5871                           ;Switch_B1.c: 202: Sw->Hold2 = 0;
  5872  033D  086E               	movf	_Sw,w
  5873  033E  0086               	movwf	6
  5874  033F  3001               	movlw	1	; select bank2/3
  5875  0340  0087               	movwf	7
  5876  0341  1201               	bcf	1,4
  5877                           
  5878                           ;Switch_B1.c: 203: Sw->Hold3Time = 0;
  5879  0342  086E               	movf	_Sw,w
  5880  0343  3E07               	addlw	7
  5881  0344  0086               	movwf	6
  5882  0345  3001               	movlw	1	; select bank2/3
  5883  0346  0087               	movwf	7
  5884  0347  3000               	movlw	0
  5885  0348  3FC0               	movwi [0]fsr1
  5886  0349  3FC1               	movwi [1]fsr1
  5887                           
  5888                           ;Switch_B1.c: 204: Sw->Hold3 = 0;
  5889  034A  086E               	movf	_Sw,w
  5890  034B  0086               	movwf	6
  5891  034C  3001               	movlw	1	; select bank2/3
  5892  034D  0087               	movwf	7
  5893  034E  1281               	bcf	1,5
  5894                           
  5895                           ;Switch_B1.c: 206: setDimmerLights_SwOff(sw);
  5896  034F  0868               	movf	setSw_Main@sw,w
  5897  0350  3194  244A  3181   	fcall	_setDimmerLights_SwOff
  5898                           
  5899                           ;Switch_B1.c: 210: setRF_Learn(0);
  5900  0353  3000               	movlw	0
  5901  0354  319C  24CA         	fcall	_setRF_Learn
  5902                           
  5903                           ;Switch_B1.c: 212: }
  5904                           ;Switch_B1.c: 213: }
  5905                           ;Switch_B1.c: 214: }
  5906                           ;Switch_B1.c: 215: } else {
  5907  0356  0008               	return
  5908  0357                     l2681:	
  5909                           
  5910                           ;Switch_B1.c: 216: if (myMain.PowerON == 1) {
  5911  0357  0021               	movlb	1	; select bank1
  5912  0358  1C2E               	btfss	_myMain^(0+128),0
  5913  0359  0008               	return
  5914                           
  5915                           ;Switch_B1.c: 217: Sw->Enable = 1;
  5916  035A  0020               	movlb	0	; select bank0
  5917  035B  086E               	movf	_Sw,w
  5918  035C  0086               	movwf	6
  5919  035D  3001               	movlw	1	; select bank2/3
  5920  035E  0087               	movwf	7
  5921  035F  1401               	bsf	1,0
  5922  0360  0008               	return
  5923  0361                     __end_of_setSw_Main:	
  5924                           
  5925                           	psect	text14
  5926  1CCA                     __ptext14:	
  5927 ;; *************** function _setRF_Learn *****************
  5928 ;; Defined at:
  5929 ;;		line 23 in file "../src/RF_Control_B1.c"
  5930 ;; Parameters:    Size  Location     Type
  5931 ;;  command         1    wreg     unsigned char 
  5932 ;; Auto vars:     Size  Location     Type
  5933 ;;  command         1    4[COMMON] unsigned char 
  5934 ;; Return value:  Size  Location     Type
  5935 ;;		None               void
  5936 ;; Registers used:
  5937 ;;		wreg, status,2, status,0
  5938 ;; Tracked objects:
  5939 ;;		On entry : 0/0
  5940 ;;		On exit  : 0/0
  5941 ;;		Unchanged: 0/0
  5942 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5943 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5944 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5945 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5946 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5947 ;;Total ram usage:        2 bytes
  5948 ;; Hardware stack levels used:    1
  5949 ;; Hardware stack levels required when called:    3
  5950 ;; This function calls:
  5951 ;;		Nothing
  5952 ;; This function is called by:
  5953 ;;		_setSw_Main
  5954 ;; This function uses a non-reentrant model
  5955 ;;
  5956                           
  5957                           
  5958                           ;psect for function _setRF_Learn
  5959  1CCA                     _setRF_Learn:	
  5960                           
  5961                           ;incstack = 0
  5962                           ; Regs used in _setRF_Learn: [wreg+status,2+status,0]
  5963                           ;setRF_Learn@command stored from wreg
  5964  1CCA  00F4               	movwf	setRF_Learn@command
  5965                           
  5966                           ;RF_Control_B1.c: 24: RF1.Learn = command == 1 ? 1 : 0;
  5967  1CCB  0874               	movf	setRF_Learn@command,w
  5968  1CCC  3A01               	xorlw	1
  5969  1CCD  3000               	movlw	0
  5970  1CCE  1903               	skipnz
  5971  1CCF  3001               	movlw	1
  5972  1CD0  00F3               	movwf	??_setRF_Learn
  5973  1CD1  0EF3               	swapf	??_setRF_Learn,f
  5974  1CD2  0DF3               	rlf	??_setRF_Learn,f
  5975  1CD3  0DF3               	rlf	??_setRF_Learn,f
  5976  1CD4  0021               	movlb	1	; select bank1
  5977  1CD5  0820               	movf	_RF1^(0+128),w
  5978  1CD6  0673               	xorwf	??_setRF_Learn,w
  5979  1CD7  39BF               	andlw	-65
  5980  1CD8  0673               	xorwf	??_setRF_Learn,w
  5981  1CD9  00A0               	movwf	_RF1^(0+128)
  5982  1CDA  0008               	return
  5983  1CDB                     __end_of_setRF_Learn:	
  5984                           
  5985                           	psect	text15
  5986  10E2                     __ptext15:	
  5987 ;; *************** function _setDimmerLights_AdjOn *****************
  5988 ;; Defined at:
  5989 ;;		line 584 in file "../src/Dimmer_B1.c"
  5990 ;; Parameters:    Size  Location     Type
  5991 ;;  sw              1    wreg     unsigned char 
  5992 ;; Auto vars:     Size  Location     Type
  5993 ;;  sw              1    5[COMMON] unsigned char 
  5994 ;; Return value:  Size  Location     Type
  5995 ;;		None               void
  5996 ;; Registers used:
  5997 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5998 ;; Tracked objects:
  5999 ;;		On entry : 0/0
  6000 ;;		On exit  : 0/0
  6001 ;;		Unchanged: 0/0
  6002 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6003 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6004 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6005 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6006 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6007 ;;Total ram usage:        1 bytes
  6008 ;; Hardware stack levels used:    1
  6009 ;; Hardware stack levels required when called:    4
  6010 ;; This function calls:
  6011 ;;		_DimmerLightsPointSelect
  6012 ;; This function is called by:
  6013 ;;		_setSw_Main
  6014 ;; This function uses a non-reentrant model
  6015 ;;
  6016                           
  6017                           
  6018                           ;psect for function _setDimmerLights_AdjOn
  6019  10E2                     _setDimmerLights_AdjOn:	
  6020                           
  6021                           ;incstack = 0
  6022                           ; Regs used in _setDimmerLights_AdjOn: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  6023                           ;setDimmerLights_AdjOn@sw stored from wreg
  6024  10E2  00F5               	movwf	setDimmerLights_AdjOn@sw
  6025                           
  6026                           ;Dimmer_B1.c: 585: DimmerLightsPointSelect(sw);
  6027  10E3  0875               	movf	setDimmerLights_AdjOn@sw,w
  6028  10E4  319D  25A8  3190   	fcall	_DimmerLightsPointSelect
  6029                           
  6030                           ;Dimmer_B1.c: 595: if (DimmerLights->Trigger == 0) {
  6031  10E7  0020               	movlb	0	; select bank0
  6032  10E8  086D               	movf	_DimmerLights,w
  6033  10E9  3E0A               	addlw	10
  6034  10EA  0086               	movwf	6
  6035  10EB  3001               	movlw	1	; select bank2/3
  6036  10EC  0087               	movwf	7
  6037  10ED  1881               	btfsc	1,1
  6038  10EE  0008               	return
  6039                           
  6040                           ;Dimmer_B1.c: 596: if (DimmerLights->SwFlag == 1) {
  6041  10EF  086D               	movf	_DimmerLights,w
  6042  10F0  3E0B               	addlw	11
  6043  10F1  0086               	movwf	6
  6044  10F2  3001               	movlw	1	; select bank2/3
  6045  10F3  0087               	movwf	7
  6046  10F4  1C81               	btfss	1,1
  6047  10F5  0008               	return
  6048                           
  6049                           ;Dimmer_B1.c: 597: DimmerLights->SwAdj = 1;
  6050  10F6  086D               	movf	_DimmerLights,w
  6051  10F7  3E0B               	addlw	11
  6052  10F8  0086               	movwf	6
  6053  10F9  3001               	movlw	1	; select bank2/3
  6054  10FA  0087               	movwf	7
  6055  10FB  1501               	bsf	1,2
  6056                           
  6057                           ;Dimmer_B1.c: 598: DimmerLights->Status = 1;
  6058  10FC  086D               	movf	_DimmerLights,w
  6059  10FD  3E02               	addlw	2
  6060  10FE  0086               	movwf	6
  6061  10FF  3001               	movlw	1	; select bank2/3
  6062  1100  0087               	movwf	7
  6063  1101  1481               	bsf	1,1
  6064                           
  6065                           ;Dimmer_B1.c: 600: DimmerLights->TriggerAdj = 1;
  6066  1102  086D               	movf	_DimmerLights,w
  6067  1103  3E0A               	addlw	10
  6068  1104  0086               	movwf	6
  6069  1105  3001               	movlw	1	; select bank2/3
  6070  1106  0087               	movwf	7
  6071  1107  1581               	bsf	1,3
  6072                           
  6073                           ;Dimmer_B1.c: 601: DimmerLights->SwitchAdj = 1;
  6074  1108  086D               	movf	_DimmerLights,w
  6075  1109  3E0A               	addlw	10
  6076  110A  0086               	movwf	6
  6077  110B  3001               	movlw	1	; select bank2/3
  6078  110C  0087               	movwf	7
  6079  110D  1501               	bsf	1,2
  6080  110E  0008               	return
  6081  110F                     __end_of_setDimmerLights_AdjOn:	
  6082                           
  6083                           	psect	text16
  6084  1EBB                     __ptext16:	
  6085 ;; *************** function _getSw_KeyStatus *****************
  6086 ;; Defined at:
  6087 ;;		line 223 in file "../src/Switch_B1.c"
  6088 ;; Parameters:    Size  Location     Type
  6089 ;;  sw              1    wreg     unsigned char 
  6090 ;; Auto vars:     Size  Location     Type
  6091 ;;  sw              1    7[COMMON] unsigned char 
  6092 ;;  status          1    6[COMMON] unsigned char 
  6093 ;; Return value:  Size  Location     Type
  6094 ;;                  1    wreg      unsigned char 
  6095 ;; Registers used:
  6096 ;;		wreg, status,2
  6097 ;; Tracked objects:
  6098 ;;		On entry : 0/0
  6099 ;;		On exit  : 0/0
  6100 ;;		Unchanged: 0/0
  6101 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6102 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6103 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6104 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6105 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6106 ;;Total ram usage:        5 bytes
  6107 ;; Hardware stack levels used:    1
  6108 ;; Hardware stack levels required when called:    3
  6109 ;; This function calls:
  6110 ;;		Nothing
  6111 ;; This function is called by:
  6112 ;;		_setSw_Main
  6113 ;; This function uses a non-reentrant model
  6114 ;;
  6115                           
  6116                           
  6117                           ;psect for function _getSw_KeyStatus
  6118  1EBB                     _getSw_KeyStatus:	
  6119                           
  6120                           ;incstack = 0
  6121                           ; Regs used in _getSw_KeyStatus: [wreg+status,2]
  6122                           ;getSw_KeyStatus@sw stored from wreg
  6123  1EBB  00F7               	movwf	getSw_KeyStatus@sw
  6124                           
  6125                           ;Switch_B1.c: 224: char status = 0;
  6126  1EBC  01F6               	clrf	getSw_KeyStatus@status
  6127                           
  6128                           ;Switch_B1.c: 236: if (sw == 1) {
  6129  1EBD  0877               	movf	getSw_KeyStatus@sw,w
  6130  1EBE  3A01               	xorlw	1
  6131  1EBF  1D03               	skipz
  6132  1EC0  2ECA               	goto	l7342
  6133                           
  6134                           ;Switch_B1.c: 237: status = RA6 == 1 || RA4 == 1 ? 1 : 0;
  6135  1EC1  01F4               	clrf	_getSw_KeyStatus$6304
  6136  1EC2  0AF4               	incf	_getSw_KeyStatus$6304,f
  6137  1EC3  0020               	movlb	0	; select bank0
  6138  1EC4  1F0C               	btfss	12,6	;volatile
  6139  1EC5  1A0C               	btfsc	12,4	;volatile
  6140  1EC6  2EC8               	goto	l7340
  6141  1EC7  01F4               	clrf	_getSw_KeyStatus$6304
  6142  1EC8                     l7340:	
  6143  1EC8  0874               	movf	_getSw_KeyStatus$6304,w
  6144  1EC9  2ED6               	goto	L2
  6145  1ECA                     l7342:	
  6146                           ;Switch_B1.c: 238: } else if (sw == 2) {
  6147                           
  6148  1ECA  0877               	movf	getSw_KeyStatus@sw,w
  6149  1ECB  3A02               	xorlw	2
  6150  1ECC  1D03               	skipz
  6151  1ECD  2ED9               	goto	l7352
  6152                           
  6153                           ;Switch_B1.c: 239: status = RA0 == 1 || RB1 == 1 ? 1 : 0;
  6154  1ECE  01F5               	clrf	_getSw_KeyStatus$6305
  6155  1ECF  0AF5               	incf	_getSw_KeyStatus$6305,f
  6156  1ED0  0020               	movlb	0	; select bank0
  6157  1ED1  1C0C               	btfss	12,0	;volatile
  6158  1ED2  188D               	btfsc	13,1	;volatile
  6159  1ED3  2ED5               	goto	l7350
  6160  1ED4  01F5               	clrf	_getSw_KeyStatus$6305
  6161  1ED5                     l7350:	
  6162  1ED5  0875               	movf	_getSw_KeyStatus$6305,w
  6163  1ED6                     L2:	
  6164  1ED6  00F3               	movwf	??_getSw_KeyStatus
  6165  1ED7  0873               	movf	??_getSw_KeyStatus,w
  6166  1ED8  00F6               	movwf	getSw_KeyStatus@status
  6167  1ED9                     l7352:	
  6168                           
  6169                           ;Switch_B1.c: 240: }
  6170                           ;Switch_B1.c: 247: return status;
  6171  1ED9  0876               	movf	getSw_KeyStatus@status,w
  6172  1EDA  0008               	return
  6173  1EDB                     __end_of_getSw_KeyStatus:	
  6174                           
  6175                           	psect	text17
  6176  1D7D                     __ptext17:	
  6177 ;; *************** function _SwPointSelect *****************
  6178 ;; Defined at:
  6179 ;;		line 25 in file "../src/Switch_B1.c"
  6180 ;; Parameters:    Size  Location     Type
  6181 ;;  sw              1    wreg     unsigned char 
  6182 ;; Auto vars:     Size  Location     Type
  6183 ;;  sw              1    4[COMMON] unsigned char 
  6184 ;; Return value:  Size  Location     Type
  6185 ;;		None               void
  6186 ;; Registers used:
  6187 ;;		wreg
  6188 ;; Tracked objects:
  6189 ;;		On entry : 0/0
  6190 ;;		On exit  : 0/0
  6191 ;;		Unchanged: 0/0
  6192 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6193 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6194 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6195 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6196 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6197 ;;Total ram usage:        2 bytes
  6198 ;; Hardware stack levels used:    1
  6199 ;; Hardware stack levels required when called:    3
  6200 ;; This function calls:
  6201 ;;		Nothing
  6202 ;; This function is called by:
  6203 ;;		_setSw_Main
  6204 ;; This function uses a non-reentrant model
  6205 ;;
  6206                           
  6207                           
  6208                           ;psect for function _SwPointSelect
  6209  1D7D                     _SwPointSelect:	
  6210                           
  6211                           ;incstack = 0
  6212                           ; Regs used in _SwPointSelect: [wreg]
  6213                           ;SwPointSelect@sw stored from wreg
  6214  1D7D  00F4               	movwf	SwPointSelect@sw
  6215                           
  6216                           ;Switch_B1.c: 28: if (sw == 1) {
  6217  1D7E  0874               	movf	SwPointSelect@sw,w
  6218  1D7F  3A01               	xorlw	1
  6219  1D80  1D03               	skipz
  6220  1D81  2D88               	goto	l7326
  6221                           
  6222                           ;Switch_B1.c: 29: Sw = &Sw1;
  6223  1D82  30CF               	movlw	_Sw1& (0+255)
  6224  1D83  00F3               	movwf	??_SwPointSelect
  6225  1D84  0873               	movf	??_SwPointSelect,w
  6226  1D85  0020               	movlb	0	; select bank0
  6227  1D86  00EE               	movwf	_Sw
  6228                           
  6229                           ;Switch_B1.c: 30: }
  6230  1D87  0008               	return
  6231  1D88                     l7326:	
  6232                           
  6233                           ;Switch_B1.c: 33: else if (sw == 2) {
  6234  1D88  0874               	movf	SwPointSelect@sw,w
  6235  1D89  3A02               	xorlw	2
  6236  1D8A  1D03               	skipz
  6237  1D8B  0008               	return
  6238                           
  6239                           ;Switch_B1.c: 34: Sw = &Sw2;
  6240  1D8C  30D8               	movlw	_Sw2& (0+255)
  6241  1D8D  00F3               	movwf	??_SwPointSelect
  6242  1D8E  0873               	movf	??_SwPointSelect,w
  6243  1D8F  0020               	movlb	0	; select bank0
  6244  1D90  00EE               	movwf	_Sw
  6245  1D91  0008               	return
  6246  1D92                     __end_of_SwPointSelect:	
  6247                           
  6248                           	psect	text18
  6249  1BB1                     __ptext18:	
  6250 ;; *************** function _Switch_Initialization *****************
  6251 ;; Defined at:
  6252 ;;		line 46 in file "../src/Switch_B1.c"
  6253 ;; Parameters:    Size  Location     Type
  6254 ;;		None
  6255 ;; Auto vars:     Size  Location     Type
  6256 ;;		None
  6257 ;; Return value:  Size  Location     Type
  6258 ;;		None               void
  6259 ;; Registers used:
  6260 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6261 ;; Tracked objects:
  6262 ;;		On entry : 0/0
  6263 ;;		On exit  : 0/0
  6264 ;;		Unchanged: 0/0
  6265 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6266 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6267 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6268 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6269 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6270 ;;Total ram usage:        0 bytes
  6271 ;; Hardware stack levels used:    1
  6272 ;; Hardware stack levels required when called:    6
  6273 ;; This function calls:
  6274 ;;		_TouchPower
  6275 ;;		_setSw_Initialization
  6276 ;; This function is called by:
  6277 ;;		_main
  6278 ;; This function uses a non-reentrant model
  6279 ;;
  6280                           
  6281                           
  6282                           ;psect for function _Switch_Initialization
  6283  1BB1                     _Switch_Initialization:	
  6284                           
  6285                           ;Switch_B1.c: 47: TouchPower();
  6286                           
  6287                           ;incstack = 0
  6288                           ; Regs used in _Switch_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  6289  1BB1  319D  2568  319B   	fcall	_TouchPower
  6290                           
  6291                           ;Switch_B1.c: 49: WPUB1 = 0;
  6292  1BB4  0024               	movlb	4	; select bank4
  6293  1BB5  108D               	bcf	13,1	;volatile
  6294                           
  6295                           ;Switch_B1.c: 58: setSw_Initialization(1);
  6296  1BB6  3001               	movlw	1
  6297  1BB7  319B  2318  319B   	fcall	_setSw_Initialization
  6298                           
  6299                           ;Switch_B1.c: 62: setSw_Initialization(2);
  6300  1BBA  3002               	movlw	2
  6301  1BBB  319B  2318         	fcall	_setSw_Initialization
  6302  1BBD  0008               	return
  6303  1BBE                     __end_of_Switch_Initialization:	
  6304                           
  6305                           	psect	text19
  6306  1B18                     __ptext19:	
  6307 ;; *************** function _setSw_Initialization *****************
  6308 ;; Defined at:
  6309 ;;		line 93 in file "../src/Switch_B1.c"
  6310 ;; Parameters:    Size  Location     Type
  6311 ;;  sw              1    wreg     unsigned char 
  6312 ;; Auto vars:     Size  Location     Type
  6313 ;;  sw              1    7[COMMON] unsigned char 
  6314 ;; Return value:  Size  Location     Type
  6315 ;;		None               void
  6316 ;; Registers used:
  6317 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6318 ;; Tracked objects:
  6319 ;;		On entry : 0/0
  6320 ;;		On exit  : 0/0
  6321 ;;		Unchanged: 0/0
  6322 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6323 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6324 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6325 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6326 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6327 ;;Total ram usage:        1 bytes
  6328 ;; Hardware stack levels used:    1
  6329 ;; Hardware stack levels required when called:    5
  6330 ;; This function calls:
  6331 ;;		_setLED
  6332 ;; This function is called by:
  6333 ;;		_Switch_Initialization
  6334 ;; This function uses a non-reentrant model
  6335 ;;
  6336                           
  6337                           
  6338                           ;psect for function _setSw_Initialization
  6339  1B18                     _setSw_Initialization:	
  6340                           
  6341                           ;incstack = 0
  6342                           ; Regs used in _setSw_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6343                           ;setSw_Initialization@sw stored from wreg
  6344  1B18  00F7               	movwf	setSw_Initialization@sw
  6345                           
  6346                           ;Switch_B1.c: 94: setLED(sw, 1);
  6347  1B19  01F5               	clrf	setLED@command
  6348  1B1A  0AF5               	incf	setLED@command,f
  6349  1B1B  0877               	movf	setSw_Initialization@sw,w
  6350  1B1C  3188  20B4         	fcall	_setLED
  6351  1B1E  0008               	return
  6352  1B1F                     __end_of_setSw_Initialization:	
  6353                           
  6354                           	psect	text20
  6355  1D68                     __ptext20:	
  6356 ;; *************** function _TouchPower *****************
  6357 ;; Defined at:
  6358 ;;		line 10 in file "../src/Switch_B1.c"
  6359 ;; Parameters:    Size  Location     Type
  6360 ;;		None
  6361 ;; Auto vars:     Size  Location     Type
  6362 ;;		None
  6363 ;; Return value:  Size  Location     Type
  6364 ;;		None               void
  6365 ;; Registers used:
  6366 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6367 ;; Tracked objects:
  6368 ;;		On entry : 0/0
  6369 ;;		On exit  : 0/0
  6370 ;;		Unchanged: 0/0
  6371 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6372 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6373 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6374 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6375 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6376 ;;Total ram usage:        0 bytes
  6377 ;; Hardware stack levels used:    1
  6378 ;; Hardware stack levels required when called:    4
  6379 ;; This function calls:
  6380 ;;		_Timeout_Counter
  6381 ;;		_set_TimeoutCleared
  6382 ;; This function is called by:
  6383 ;;		_Switch_Initialization
  6384 ;;		_Switch_Main
  6385 ;; This function uses a non-reentrant model
  6386 ;;
  6387                           
  6388                           
  6389                           ;psect for function _TouchPower
  6390  1D68                     _TouchPower:	
  6391                           
  6392                           ;Switch_B1.c: 11: if (myMain.PowerON == 1) {
  6393                           
  6394                           ;incstack = 0
  6395                           ; Regs used in _TouchPower: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6396  1D68  0021               	movlb	1	; select bank1
  6397  1D69  1C2E               	btfss	_myMain^(0+128),0
  6398  1D6A  0008               	return
  6399                           
  6400                           ;Switch_B1.c: 12: if (RC5 == 0) {
  6401  1D6B  0020               	movlb	0	; select bank0
  6402  1D6C  1A8E               	btfsc	14,5	;volatile
  6403  1D6D  0008               	return
  6404  1D6E  2D74               	goto	l10340
  6405  1D6F                     l2659:	
  6406                           ;Switch_B1.c: 13: while (RC5 == 0 && myMain.Timeout == 0) {
  6407                           
  6408                           
  6409                           ;Switch_B1.c: 14: RC5 = 1;
  6410  1D6F  0020               	movlb	0	; select bank0
  6411  1D70  168E               	bsf	14,5	;volatile
  6412                           
  6413                           ;Switch_B1.c: 15: Timeout_Counter();
  6414  1D71  319D  2553  319D   	fcall	_Timeout_Counter
  6415  1D74                     l10340:	
  6416  1D74  0020               	movlb	0	; select bank0
  6417  1D75  1A8E               	btfsc	14,5	;volatile
  6418  1D76  2D7A               	goto	l10344
  6419  1D77  0021               	movlb	1	; select bank1
  6420  1D78  1D39               	btfss	(_myMain^(0+128)+11),2
  6421  1D79  2D6F               	goto	l2659
  6422  1D7A                     l10344:	
  6423                           
  6424                           ;Switch_B1.c: 16: }
  6425                           ;Switch_B1.c: 17: set_TimeoutCleared();
  6426  1D7A  319A  22EB         	fcall	_set_TimeoutCleared
  6427  1D7C  0008               	return
  6428  1D7D                     __end_of_TouchPower:	
  6429                           
  6430                           	psect	text21
  6431  1AEB                     __ptext21:	
  6432 ;; *************** function _set_TimeoutCleared *****************
  6433 ;; Defined at:
  6434 ;;		line 282 in file "../src/Main_B1.c"
  6435 ;; Parameters:    Size  Location     Type
  6436 ;;		None
  6437 ;; Auto vars:     Size  Location     Type
  6438 ;;		None
  6439 ;; Return value:  Size  Location     Type
  6440 ;;		None               void
  6441 ;; Registers used:
  6442 ;;		status,2
  6443 ;; Tracked objects:
  6444 ;;		On entry : 0/0
  6445 ;;		On exit  : 0/0
  6446 ;;		Unchanged: 0/0
  6447 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6448 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6449 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6450 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6451 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6452 ;;Total ram usage:        0 bytes
  6453 ;; Hardware stack levels used:    1
  6454 ;; Hardware stack levels required when called:    3
  6455 ;; This function calls:
  6456 ;;		Nothing
  6457 ;; This function is called by:
  6458 ;;		_getAD
  6459 ;;		_TouchPower
  6460 ;; This function uses a non-reentrant model
  6461 ;;
  6462                           
  6463                           
  6464                           ;psect for function _set_TimeoutCleared
  6465  1AEB                     _set_TimeoutCleared:	
  6466                           
  6467                           ;Main_B1.c: 283: myMain.Timeout = 0;
  6468                           
  6469                           ;incstack = 0
  6470                           ; Regs used in _set_TimeoutCleared: [status,2]
  6471  1AEB  0021               	movlb	1	; select bank1
  6472  1AEC  1139               	bcf	(_myMain^(0+128)+11),2
  6473                           
  6474                           ;Main_B1.c: 284: myMain.Timeout_Counter = 0;
  6475  1AED  01BA               	clrf	(_myMain^(0+128)+12)
  6476  1AEE  01BB               	clrf	((_myMain+1)^(0+128)+12)
  6477  1AEF  0008               	return
  6478  1AF0                     __end_of_set_TimeoutCleared:	
  6479                           
  6480                           	psect	text22
  6481  1D53                     __ptext22:	
  6482 ;; *************** function _Timeout_Counter *****************
  6483 ;; Defined at:
  6484 ;;		line 273 in file "../src/Main_B1.c"
  6485 ;; Parameters:    Size  Location     Type
  6486 ;;		None
  6487 ;; Auto vars:     Size  Location     Type
  6488 ;;		None
  6489 ;; Return value:  Size  Location     Type
  6490 ;;		None               void
  6491 ;; Registers used:
  6492 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6493 ;; Tracked objects:
  6494 ;;		On entry : 0/0
  6495 ;;		On exit  : 0/0
  6496 ;;		Unchanged: 0/0
  6497 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6498 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6499 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6500 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6501 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6502 ;;Total ram usage:        0 bytes
  6503 ;; Hardware stack levels used:    1
  6504 ;; Hardware stack levels required when called:    3
  6505 ;; This function calls:
  6506 ;;		Nothing
  6507 ;; This function is called by:
  6508 ;;		_getAD
  6509 ;;		_TouchPower
  6510 ;; This function uses a non-reentrant model
  6511 ;;
  6512                           
  6513                           
  6514                           ;psect for function _Timeout_Counter
  6515  1D53                     _Timeout_Counter:	
  6516                           
  6517                           ;Main_B1.c: 274: myMain.Timeout_Counter++;
  6518                           
  6519                           ;incstack = 0
  6520                           ; Regs used in _Timeout_Counter: [wreg+fsr1l+fsr1h+status,2+status,0]
  6521  1D53  3001               	movlw	1
  6522  1D54  0021               	movlb	1	; select bank1
  6523  1D55  07BA               	addwf	(_myMain^(0+128)+12),f
  6524  1D56  3000               	movlw	0
  6525  1D57  3DBB               	addwfc	((_myMain+1)^(0+128)+12),f
  6526                           
  6527                           ;Main_B1.c: 275: if (myMain.Timeout_Counter == 25000) {
  6528  1D58  300C               	movlw	12
  6529  1D59  3EAE               	addlw	_myMain& (0+255)
  6530  1D5A  0086               	movwf	6
  6531  1D5B  0187               	clrf	7
  6532  1D5C  3F40               	moviw [0]fsr1
  6533  1D5D  3AA8               	xorlw	168
  6534  1D5E  1D03               	skipz
  6535  1D5F  2D62               	goto	u10735
  6536  1D60  3F41               	moviw [1]fsr1
  6537  1D61  3A61               	xorlw	97
  6538  1D62                     u10735:	
  6539  1D62  1D03               	skipz
  6540  1D63  0008               	return
  6541                           
  6542                           ;Main_B1.c: 276: myMain.Timeout_Counter = 0;
  6543  1D64  01BA               	clrf	(_myMain^(0+128)+12)
  6544  1D65  01BB               	clrf	((_myMain+1)^(0+128)+12)
  6545                           
  6546                           ;Main_B1.c: 277: myMain.Timeout = 1;
  6547  1D66  1539               	bsf	(_myMain^(0+128)+11),2
  6548  1D67  0008               	return
  6549  1D68                     __end_of_Timeout_Counter:	
  6550                           
  6551                           	psect	text23
  6552  1ACC                     __ptext23:	
  6553 ;; *************** function _RF_Main *****************
  6554 ;; Defined at:
  6555 ;;		line 16 in file "../src/RF_Control_B1.c"
  6556 ;; Parameters:    Size  Location     Type
  6557 ;;		None
  6558 ;; Auto vars:     Size  Location     Type
  6559 ;;		None
  6560 ;; Return value:  Size  Location     Type
  6561 ;;		None               void
  6562 ;; Registers used:
  6563 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6564 ;; Tracked objects:
  6565 ;;		On entry : 0/0
  6566 ;;		On exit  : 0/0
  6567 ;;		Unchanged: 0/0
  6568 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6569 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6570 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6571 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6572 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6573 ;;Total ram usage:        0 bytes
  6574 ;; Hardware stack levels used:    1
  6575 ;; Hardware stack levels required when called:   12
  6576 ;; This function calls:
  6577 ;;		_setRF_Main
  6578 ;; This function is called by:
  6579 ;;		_main
  6580 ;; This function uses a non-reentrant model
  6581 ;;
  6582                           
  6583                           
  6584                           ;psect for function _RF_Main
  6585  1ACC                     _RF_Main:	
  6586                           
  6587                           ;RF_Control_B1.c: 18: setRF_Main();
  6588                           
  6589                           ;incstack = 0
  6590                           ; Regs used in _RF_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6591  1ACC  318D  2567         	fcall	_setRF_Main
  6592  1ACE  0008               	return
  6593  1ACF                     __end_of_RF_Main:	
  6594                           
  6595                           	psect	text24
  6596  0D67                     __ptext24:	
  6597 ;; *************** function _setRF_Main *****************
  6598 ;; Defined at:
  6599 ;;		line 53 in file "../src/RF_Control_B1.c"
  6600 ;; Parameters:    Size  Location     Type
  6601 ;;		None
  6602 ;; Auto vars:     Size  Location     Type
  6603 ;;  error           1    2[BANK1 ] unsigned char 
  6604 ;;  loop_f          1    1[BANK1 ] unsigned char 
  6605 ;; Return value:  Size  Location     Type
  6606 ;;		None               void
  6607 ;; Registers used:
  6608 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6609 ;; Tracked objects:
  6610 ;;		On entry : 0/0
  6611 ;;		On exit  : 0/0
  6612 ;;		Unchanged: 0/0
  6613 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6614 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6615 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  6616 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  6617 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
  6618 ;;Total ram usage:        3 bytes
  6619 ;; Hardware stack levels used:    1
  6620 ;; Hardware stack levels required when called:   11
  6621 ;; This function calls:
  6622 ;;		_CC2500_PowerOnInitial
  6623 ;;		_CC2500_RxData
  6624 ;;		_CC2500_TxData
  6625 ;;		_CC2500_WriteCommand
  6626 ;;		_RF_RxDisable
  6627 ;;		___lwdiv
  6628 ;;		_getBuz_GO
  6629 ;;		_getRF_KeyStatus
  6630 ;;		_getRxData
  6631 ;; This function is called by:
  6632 ;;		_RF_Main
  6633 ;; This function uses a non-reentrant model
  6634 ;;
  6635                           
  6636                           
  6637                           ;psect for function _setRF_Main
  6638  0D67                     _setRF_Main:	
  6639                           
  6640                           ;RF_Control_B1.c: 54: char loop_f = 0, error = 0;
  6641                           
  6642                           ;incstack = 0
  6643                           ; Regs used in _setRF_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6644  0D67  0021               	movlb	1	; select bank1
  6645  0D68  01ED               	clrf	setRF_Main@loop_f^(0+128)
  6646  0D69  01EE               	clrf	setRF_Main@error^(0+128)
  6647                           
  6648                           ;RF_Control_B1.c: 55: if (RF1.Enable == 1) {
  6649  0D6A  1C20               	btfss	_RF1^(0+128),0
  6650  0D6B  2DEF               	goto	l2264
  6651                           
  6652                           ;RF_Control_B1.c: 57: if (getBuz_GO() == 0) {
  6653  0D6C  319C  24A8  318D   	fcall	_getBuz_GO
  6654  0D6F  0874               	movf	?_getBuz_GO+1,w
  6655  0D70  0473               	iorwf	?_getBuz_GO,w
  6656  0D71  1D03               	skipz
  6657  0D72  2DD0               	goto	l10310
  6658                           
  6659                           ;RF_Control_B1.c: 60: RF1.Key = getRF_KeyStatus() == 1 ? 1 : 0;
  6660  0D73  319C  24B9  318D   	fcall	_getRF_KeyStatus
  6661  0D76  3A01               	xorlw	1
  6662  0D77  3000               	movlw	0
  6663  0D78  1903               	skipnz
  6664  0D79  3001               	movlw	1
  6665  0D7A  0021               	movlb	1	; select bank1
  6666  0D7B  00EC               	movwf	??_setRF_Main^(0+128)
  6667  0D7C  0CEC               	rrf	??_setRF_Main^(0+128),f
  6668  0D7D  0CEC               	rrf	??_setRF_Main^(0+128),f
  6669  0D7E  0820               	movf	_RF1^(0+128),w
  6670  0D7F  066C               	xorwf	??_setRF_Main^(0+128),w
  6671  0D80  397F               	andlw	-129
  6672  0D81  066C               	xorwf	??_setRF_Main^(0+128),w
  6673  0D82  00A0               	movwf	_RF1^(0+128)
  6674                           
  6675                           ;RF_Control_B1.c: 65: if (RF1.Key == 0 || RF1.Learn == 1) {
  6676  0D83  1FA0               	btfss	_RF1^(0+128),7
  6677  0D84  2D87               	goto	l2268
  6678  0D85  1F20               	btfss	_RF1^(0+128),6
  6679  0D86  2DD0               	goto	l10310
  6680  0D87                     l2268:	
  6681                           
  6682                           ;RF_Control_B1.c: 67: if (RF1.TransceiveGO == 1) {
  6683  0D87  1D20               	btfss	_RF1^(0+128),2
  6684  0D88  2D97               	goto	l2269
  6685                           
  6686                           ;RF_Control_B1.c: 68: RF1.TransceiveGO = 0;
  6687  0D89  1120               	bcf	_RF1^(0+128),2
  6688                           
  6689                           ;RF_Control_B1.c: 69: if (RF1.Learn == 0) {
  6690  0D8A  1B20               	btfsc	_RF1^(0+128),6
  6691  0D8B  2DD0               	goto	l10310
  6692                           
  6693                           ;RF_Control_B1.c: 70: RF1.Count = 0;
  6694  0D8C  01A2               	clrf	(_RF1^(0+128)+2)
  6695  0D8D  01A3               	clrf	((_RF1+1)^(0+128)+2)
  6696                           
  6697                           ;RF_Control_B1.c: 71: RF1.CorrectionCounter = 0;
  6698  0D8E  01AA               	clrf	(_RF1^(0+128)+10)
  6699  0D8F  01AB               	clrf	((_RF1+1)^(0+128)+10)
  6700                           
  6701                           ;RF_Control_B1.c: 72: RF_RxDisable();
  6702  0D90  319B  23E8  318D   	fcall	_RF_RxDisable
  6703                           
  6704                           ;RF_Control_B1.c: 73: CC2500_TxData();
  6705  0D93  318B  230C  318D   	fcall	_CC2500_TxData
  6706                           
  6707                           ;RF_Control_B1.c: 75: }
  6708                           ;RF_Control_B1.c: 76: } else {
  6709  0D96  2DD0               	goto	l10310
  6710  0D97                     l2269:	
  6711                           
  6712                           ;RF_Control_B1.c: 77: if (RF1.RxStatus == 1) {
  6713  0D97  1DA0               	btfss	_RF1^(0+128),3
  6714  0D98  2DA6               	goto	l10296
  6715                           
  6716                           ;RF_Control_B1.c: 79: CC2500_RxData();
  6717  0D99  3189  21DB  318D   	fcall	_CC2500_RxData
  6718                           
  6719                           ;RF_Control_B1.c: 81: if (RF1.ReceiveGO == 1) {
  6720  0D9C  0021               	movlb	1	; select bank1
  6721  0D9D  1CA0               	btfss	_RF1^(0+128),1
  6722  0D9E  2DD0               	goto	l10310
  6723                           
  6724                           ;RF_Control_B1.c: 82: RF1.ReceiveGO = 0;
  6725  0D9F  10A0               	bcf	_RF1^(0+128),1
  6726                           
  6727                           ;RF_Control_B1.c: 83: RF1.CorrectionCounter = 0;
  6728  0DA0  01AA               	clrf	(_RF1^(0+128)+10)
  6729  0DA1  01AB               	clrf	((_RF1+1)^(0+128)+10)
  6730                           
  6731                           ;RF_Control_B1.c: 91: getRxData();
  6732  0DA2  318C  2461  318D   	fcall	_getRxData
  6733                           
  6734                           ;RF_Control_B1.c: 94: }
  6735                           ;RF_Control_B1.c: 95: } else {
  6736  0DA5  2DD0               	goto	l10310
  6737  0DA6                     l10296:	
  6738                           
  6739                           ;RF_Control_B1.c: 96: RF1.Count++;
  6740  0DA6  3001               	movlw	1
  6741  0DA7  0021               	movlb	1	; select bank1
  6742  0DA8  07A2               	addwf	(_RF1^(0+128)+2),f
  6743  0DA9  3000               	movlw	0
  6744  0DAA  3DA3               	addwfc	((_RF1+1)^(0+128)+2),f
  6745                           
  6746                           ;RF_Control_B1.c: 97: if (RF1.Count == (RF1.RunTime / 20)) {
  6747  0DAB  3014               	movlw	20
  6748  0DAC  00F3               	movwf	___lwdiv@divisor
  6749  0DAD  3000               	movlw	0
  6750  0DAE  00F4               	movwf	___lwdiv@divisor+1
  6751  0DAF  0828               	movf	((_RF1+1)^(0+128)+7),w
  6752  0DB0  01F6               	clrf	___lwdiv@dividend+1
  6753  0DB1  07F6               	addwf	___lwdiv@dividend+1,f
  6754  0DB2  0827               	movf	(_RF1^(0+128)+7),w
  6755  0DB3  01F5               	clrf	___lwdiv@dividend
  6756  0DB4  07F5               	addwf	___lwdiv@dividend,f
  6757  0DB5  3192  220B  318D   	fcall	___lwdiv
  6758  0DB8  0021               	movlb	1	; select bank1
  6759  0DB9  0823               	movf	((_RF1+1)^(0+128)+2),w
  6760  0DBA  0674               	xorwf	?___lwdiv+1,w
  6761  0DBB  1D03               	skipz
  6762  0DBC  2DBF               	goto	u11525
  6763  0DBD  0822               	movf	(_RF1^(0+128)+2),w
  6764  0DBE  0673               	xorwf	?___lwdiv,w
  6765  0DBF                     u11525:	
  6766  0DBF  1D03               	skipz
  6767  0DC0  2DD0               	goto	l10310
  6768                           
  6769                           ;RF_Control_B1.c: 98: RF1.Count = 0;
  6770  0DC1  01A2               	clrf	(_RF1^(0+128)+2)
  6771  0DC2  01A3               	clrf	((_RF1+1)^(0+128)+2)
  6772                           
  6773                           ;RF_Control_B1.c: 100: RF1.RxStatus = 1;
  6774  0DC3  15A0               	bsf	_RF1^(0+128),3
  6775                           
  6776                           ;RF_Control_B1.c: 101: CC2500_WriteCommand(0x36);
  6777  0DC4  3036               	movlw	54
  6778  0DC5  319D  25D8  318D   	fcall	_CC2500_WriteCommand
  6779                           
  6780                           ;RF_Control_B1.c: 102: CC2500_WriteCommand(0x3A);
  6781  0DC8  303A               	movlw	58
  6782  0DC9  319D  25D8  318D   	fcall	_CC2500_WriteCommand
  6783                           
  6784                           ;RF_Control_B1.c: 103: CC2500_WriteCommand(0x34);
  6785  0DCC  3034               	movlw	52
  6786  0DCD  319D  25D8  318D   	fcall	_CC2500_WriteCommand
  6787  0DD0                     l10310:	
  6788                           
  6789                           ;RF_Control_B1.c: 105: }
  6790                           ;RF_Control_B1.c: 107: }
  6791                           ;RF_Control_B1.c: 108: }
  6792                           ;RF_Control_B1.c: 109: }
  6793                           ;RF_Control_B1.c: 110: }
  6794                           ;RF_Control_B1.c: 112: RF1.CorrectionCounter++;
  6795  0DD0  3001               	movlw	1
  6796  0DD1  0021               	movlb	1	; select bank1
  6797  0DD2  07AA               	addwf	(_RF1^(0+128)+10),f
  6798  0DD3  3000               	movlw	0
  6799  0DD4  3DAB               	addwfc	((_RF1+1)^(0+128)+10),f
  6800                           
  6801                           ;RF_Control_B1.c: 113: if (RF1.CorrectionCounter > (60000 / 20)) {
  6802  0DD5  300B               	movlw	11
  6803  0DD6  022B               	subwf	((_RF1+1)^(0+128)+10),w
  6804  0DD7  30B9               	movlw	185
  6805  0DD8  1903               	skipnz
  6806  0DD9  022A               	subwf	(_RF1^(0+128)+10),w
  6807  0DDA  1C03               	skipc
  6808  0DDB  2DE8               	goto	l10324
  6809                           
  6810                           ;RF_Control_B1.c: 114: RF1.CorrectionCounter = 0;
  6811  0DDC  01AA               	clrf	(_RF1^(0+128)+10)
  6812  0DDD  01AB               	clrf	((_RF1+1)^(0+128)+10)
  6813                           
  6814                           ;RF_Control_B1.c: 116: RF1.RxStatus = 0;
  6815  0DDE  11A0               	bcf	_RF1^(0+128),3
  6816                           
  6817                           ;RF_Control_B1.c: 117: RF1.ReceiveGO = 0;
  6818  0DDF  10A0               	bcf	_RF1^(0+128),1
  6819                           
  6820                           ;RF_Control_B1.c: 118: CC2500_WriteCommand(0x36);
  6821  0DE0  3036               	movlw	54
  6822  0DE1  319D  25D8  318D   	fcall	_CC2500_WriteCommand
  6823                           
  6824                           ;RF_Control_B1.c: 119: CC2500_WriteCommand(0x3A);
  6825  0DE4  303A               	movlw	58
  6826  0DE5  319D  25D8  318D   	fcall	_CC2500_WriteCommand
  6827  0DE8                     l10324:	
  6828                           
  6829                           ;RF_Control_B1.c: 120: }
  6830                           ;RF_Control_B1.c: 122: if (RF1.Timeout == 1) {
  6831  0DE8  0021               	movlb	1	; select bank1
  6832  0DE9  1F21               	btfss	(_RF1^(0+128)+1),6
  6833  0DEA  0008               	return
  6834                           
  6835                           ;RF_Control_B1.c: 123: RF1.Timeout = 0;
  6836  0DEB  1321               	bcf	(_RF1^(0+128)+1),6
  6837                           
  6838                           ;RF_Control_B1.c: 124: CC2500_PowerOnInitial();
  6839  0DEC  319D  253E         	fcall	_CC2500_PowerOnInitial
  6840                           
  6841                           ;RF_Control_B1.c: 125: }
  6842                           ;RF_Control_B1.c: 127: } else {
  6843  0DEE  0008               	return
  6844  0DEF                     l2264:	
  6845                           
  6846                           ;RF_Control_B1.c: 128: if (myMain.PowerON == 1) {
  6847  0DEF  1C2E               	btfss	_myMain^(0+128),0
  6848  0DF0  0008               	return
  6849                           
  6850                           ;RF_Control_B1.c: 129: RF1.Enable = 1;
  6851  0DF1  1420               	bsf	_RF1^(0+128),0
  6852  0DF2  0008               	return
  6853  0DF3                     __end_of_setRF_Main:	
  6854                           
  6855                           	psect	text25
  6856  0C61                     __ptext25:	
  6857 ;; *************** function _getRxData *****************
  6858 ;; Defined at:
  6859 ;;		line 232 in file "../src/RF_Control_B1.c"
  6860 ;; Parameters:    Size  Location     Type
  6861 ;;		None
  6862 ;; Auto vars:     Size  Location     Type
  6863 ;;  error           1   76[BANK0 ] unsigned char 
  6864 ;; Return value:  Size  Location     Type
  6865 ;;		None               void
  6866 ;; Registers used:
  6867 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6868 ;; Tracked objects:
  6869 ;;		On entry : 0/0
  6870 ;;		On exit  : 0/0
  6871 ;;		Unchanged: 0/0
  6872 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6873 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6874 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6875 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6876 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6877 ;;Total ram usage:        2 bytes
  6878 ;; Hardware stack levels used:    1
  6879 ;; Hardware stack levels required when called:   10
  6880 ;; This function calls:
  6881 ;;		_getMain_All_Error_Status
  6882 ;;		_setControl_Lights_Table
  6883 ;;		_setLog_Code
  6884 ;;		_setTxData
  6885 ;; This function is called by:
  6886 ;;		_setRF_Main
  6887 ;; This function uses a non-reentrant model
  6888 ;;
  6889                           
  6890                           
  6891                           ;psect for function _getRxData
  6892  0C61                     _getRxData:	
  6893                           
  6894                           ;RF_Control_B1.c: 233: char error = getMain_All_Error_Status(0);
  6895                           
  6896                           ;incstack = 0
  6897                           ; Regs used in _getRxData: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6898  0C61  3000               	movlw	0
  6899  0C62  3191  216E  318C   	fcall	_getMain_All_Error_Status
  6900  0C65  0020               	movlb	0	; select bank0
  6901  0C66  00EB               	movwf	??_getRxData
  6902  0C67  086B               	movf	??_getRxData,w
  6903  0C68  00EC               	movwf	getRxData@error
  6904                           
  6905                           ;RF_Control_B1.c: 234: if (RF_Data[0] == 0xaa && RF_Data[1] == 0x01) {
  6906  0C69  0023               	movlb	3	; select bank3
  6907  0C6A  0820               	movf	_RF_Data^(0+384),w
  6908  0C6B  3AAA               	xorlw	170
  6909  0C6C  1D03               	skipz
  6910  0C6D  2C7F               	goto	l9980
  6911  0C6E  0821               	movf	(_RF_Data^(0+384)+1),w
  6912  0C6F  3A01               	xorlw	1
  6913  0C70  1D03               	skipz
  6914  0C71  2C7F               	goto	l9980
  6915                           
  6916                           ;RF_Control_B1.c: 236: product->Data[2] = 0x55;
  6917  0C72  3055               	movlw	85
  6918  0C73  0020               	movlb	0	; select bank0
  6919  0C74  00EB               	movwf	??_getRxData
  6920  0C75  086F               	movf	_product,w
  6921  0C76  3E02               	addlw	2
  6922  0C77  0086               	movwf	6
  6923  0C78  3002               	movlw	2	; select bank4/5
  6924  0C79  0087               	movwf	7
  6925  0C7A  086B               	movf	??_getRxData,w
  6926  0C7B  0081               	movwf	1
  6927                           
  6928                           ;RF_Control_B1.c: 237: setTxData();
  6929  0C7C  318F  274C         	fcall	_setTxData
  6930                           
  6931                           ;RF_Control_B1.c: 243: } else {
  6932  0C7E  0008               	return
  6933  0C7F                     l9980:	
  6934                           
  6935                           ;RF_Control_B1.c: 245: if (error == 0) {
  6936  0C7F  0020               	movlb	0	; select bank0
  6937  0C80  08EC               	movf	getRxData@error,f
  6938  0C81  1D03               	skipz
  6939  0C82  0008               	return
  6940                           
  6941                           ;RF_Control_B1.c: 246: if (RF1.Learn == 1) {
  6942  0C83  0021               	movlb	1	; select bank1
  6943  0C84  1F20               	btfss	_RF1^(0+128),6
  6944  0C85  2C91               	goto	l9990
  6945                           
  6946                           ;RF_Control_B1.c: 247: if (RF_Data[0] == 0x0 && RF_Data[1] == 0x64) {
  6947  0C86  0023               	movlb	3	; select bank3
  6948  0C87  08A0               	movf	_RF_Data^(0+384),f
  6949  0C88  1D03               	skipz
  6950  0C89  0008               	return
  6951  0C8A  0821               	movf	(_RF_Data^(0+384)+1),w
  6952  0C8B  3A64               	xorlw	100
  6953  0C8C  1D03               	skipz
  6954  0C8D  0008               	return
  6955                           
  6956                           ;RF_Control_B1.c: 248: setLog_Code();
  6957  0C8E  3191  21A1         	fcall	_setLog_Code
  6958                           
  6959                           ;RF_Control_B1.c: 249: }
  6960                           ;RF_Control_B1.c: 250: } else {
  6961  0C90  0008               	return
  6962  0C91                     l9990:	
  6963                           
  6964                           ;RF_Control_B1.c: 251: if (RF_Data[0] == 0x00 && RF_Data[1] == 0x02) {
  6965  0C91  0023               	movlb	3	; select bank3
  6966  0C92  08A0               	movf	_RF_Data^(0+384),f
  6967  0C93  1D03               	skipz
  6968  0C94  2CCB               	goto	l10010
  6969  0C95  0821               	movf	(_RF_Data^(0+384)+1),w
  6970  0C96  3A02               	xorlw	2
  6971  0C97  1D03               	skipz
  6972  0C98  2CCB               	goto	l10010
  6973                           
  6974                           ;RF_Control_B1.c: 253: if (RF_Data[12] == 0xff && RF_Data[13] == 0xff && RF_Data[14] == 
      +                          0xff) {
  6975  0C99  082C               	movf	(_RF_Data^(0+384)+12),w
  6976  0C9A  3AFF               	xorlw	255
  6977  0C9B  1D03               	skipz
  6978  0C9C  2CA7               	goto	l10002
  6979  0C9D  082D               	movf	(_RF_Data^(0+384)+13),w
  6980  0C9E  3AFF               	xorlw	255
  6981  0C9F  1D03               	skipz
  6982  0CA0  2CA7               	goto	l10002
  6983  0CA1  082E               	movf	(_RF_Data^(0+384)+14),w
  6984  0CA2  3AFF               	xorlw	255
  6985  0CA3  1D03               	skipz
  6986  0CA4  2CA7               	goto	l10002
  6987                           
  6988                           ;RF_Control_B1.c: 254: __nop();
  6989  0CA5  0000               	nop
  6990                           
  6991                           ;RF_Control_B1.c: 255: } else {
  6992  0CA6  0008               	return
  6993  0CA7                     l10002:	
  6994                           
  6995                           ;RF_Control_B1.c: 256: if (RF_Data[12] == product->Data[12] && RF_Data[13] == product->D
      +                          ata[13] && RF_Data[14] == product->Data[14]) {
  6996  0CA7  0020               	movlb	0	; select bank0
  6997  0CA8  086F               	movf	_product,w
  6998  0CA9  3E0C               	addlw	12
  6999  0CAA  0086               	movwf	6
  7000  0CAB  3002               	movlw	2	; select bank4/5
  7001  0CAC  0087               	movwf	7
  7002  0CAD  0023               	movlb	3	; select bank3
  7003  0CAE  082C               	movf	(_RF_Data^(0+384)+12),w
  7004  0CAF  0601               	xorwf	1,w
  7005  0CB0  1D03               	skipz
  7006  0CB1  0008               	return
  7007  0CB2  0020               	movlb	0	; select bank0
  7008  0CB3  086F               	movf	_product,w
  7009  0CB4  3E0D               	addlw	13
  7010  0CB5  0086               	movwf	6
  7011  0CB6  3002               	movlw	2	; select bank4/5
  7012  0CB7  0087               	movwf	7
  7013  0CB8  0023               	movlb	3	; select bank3
  7014  0CB9  082D               	movf	(_RF_Data^(0+384)+13),w
  7015  0CBA  0601               	xorwf	1,w
  7016  0CBB  1D03               	skipz
  7017  0CBC  0008               	return
  7018  0CBD  0020               	movlb	0	; select bank0
  7019  0CBE  086F               	movf	_product,w
  7020  0CBF  3E0E               	addlw	14
  7021  0CC0  0086               	movwf	6
  7022  0CC1  3002               	movlw	2	; select bank4/5
  7023  0CC2  0087               	movwf	7
  7024  0CC3  0023               	movlb	3	; select bank3
  7025  0CC4  082E               	movf	(_RF_Data^(0+384)+14),w
  7026  0CC5  0601               	xorwf	1,w
  7027  0CC6  1D03               	skipz
  7028  0CC7  0008               	return
  7029                           
  7030                           ;RF_Control_B1.c: 257: setControl_Lights_Table();
  7031  0CC8  318A  22A5         	fcall	_setControl_Lights_Table
  7032                           
  7033                           ;RF_Control_B1.c: 258: }
  7034                           ;RF_Control_B1.c: 259: }
  7035                           ;RF_Control_B1.c: 260: } else if (RF_Data[0] == 0xff && RF_Data[1] == 0x02) {
  7036  0CCA  0008               	return
  7037  0CCB                     l10010:	
  7038  0CCB  0023               	movlb	3	; select bank3
  7039  0CCC  0820               	movf	_RF_Data^(0+384),w
  7040  0CCD  3AFF               	xorlw	255
  7041  0CCE  1D03               	skipz
  7042  0CCF  2CD6               	goto	l10016
  7043  0CD0  0821               	movf	(_RF_Data^(0+384)+1),w
  7044  0CD1  3A02               	xorlw	2
  7045  0CD2  1D03               	skipz
  7046  0CD3  2CD6               	goto	l10016
  7047                           
  7048                           ;RF_Control_B1.c: 261: __nop();
  7049  0CD4  0000               	nop
  7050                           
  7051                           ;RF_Control_B1.c: 262: } else if (RF_Data[0] == 0x0 && RF_Data[1] == 0x65) {
  7052  0CD5  0008               	return
  7053  0CD6                     l10016:	
  7054  0CD6  0023               	movlb	3	; select bank3
  7055  0CD7  08A0               	movf	_RF_Data^(0+384),f
  7056  0CD8  1D03               	skipz
  7057  0CD9  0008               	return
  7058  0CDA  0821               	movf	(_RF_Data^(0+384)+1),w
  7059  0CDB  3A65               	xorlw	101
  7060  0CDC  1D03               	skipz
  7061  0CDD  0008               	return
  7062                           
  7063                           ;RF_Control_B1.c: 263: __nop();
  7064  0CDE  0000               	nop
  7065                           
  7066                           ;RF_Control_B1.c: 270: ;
  7067                           
  7068                           ;RF_Control_B1.c: 264: }
  7069                           ;RF_Control_B1.c: 268: }
  7070                           ;RF_Control_B1.c: 269: } else {
  7071  0CDF  0008               	return
  7072  0CE0                     __end_of_getRxData:	
  7073                           
  7074                           	psect	text26
  7075  11A1                     __ptext26:	
  7076 ;; *************** function _setLog_Code *****************
  7077 ;; Defined at:
  7078 ;;		line 276 in file "../src/RF_Control_B1.c"
  7079 ;; Parameters:    Size  Location     Type
  7080 ;;		None
  7081 ;; Auto vars:     Size  Location     Type
  7082 ;;		None
  7083 ;; Return value:  Size  Location     Type
  7084 ;;		None               void
  7085 ;; Registers used:
  7086 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7087 ;; Tracked objects:
  7088 ;;		On entry : 0/0
  7089 ;;		On exit  : 0/0
  7090 ;;		Unchanged: 0/0
  7091 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7092 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7093 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7094 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7095 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7096 ;;Total ram usage:        1 bytes
  7097 ;; Hardware stack levels used:    1
  7098 ;; Hardware stack levels required when called:    5
  7099 ;; This function calls:
  7100 ;;		_setBuz
  7101 ;;		_setMemory_LoopSave
  7102 ;;		_setMemory_Modify
  7103 ;;		_setProductData
  7104 ;; This function is called by:
  7105 ;;		_getRxData
  7106 ;; This function uses a non-reentrant model
  7107 ;;
  7108                           
  7109                           
  7110                           ;psect for function _setLog_Code
  7111  11A1                     _setLog_Code:	
  7112                           
  7113                           ;RF_Control_B1.c: 277: RF1.Learn = 0;
  7114                           
  7115                           ;incstack = 0
  7116                           ; Regs used in _setLog_Code: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7117  11A1  0021               	movlb	1	; select bank1
  7118  11A2  1320               	bcf	_RF1^(0+128),6
  7119                           
  7120                           ;RF_Control_B1.c: 278: setProductData(12, RF_Data[12]);
  7121  11A3  0023               	movlb	3	; select bank3
  7122  11A4  082C               	movf	(_RF_Data^(0+384)+12),w
  7123  11A5  0020               	movlb	0	; select bank0
  7124  11A6  00E1               	movwf	??_setLog_Code
  7125  11A7  0861               	movf	??_setLog_Code,w
  7126  11A8  00DD               	movwf	setProductData@value
  7127  11A9  300C               	movlw	12
  7128  11AA  319B  23DA  3191   	fcall	_setProductData
  7129                           
  7130                           ;RF_Control_B1.c: 279: setProductData(13, RF_Data[13]);
  7131  11AD  0023               	movlb	3	; select bank3
  7132  11AE  082D               	movf	(_RF_Data^(0+384)+13),w
  7133  11AF  0020               	movlb	0	; select bank0
  7134  11B0  00E1               	movwf	??_setLog_Code
  7135  11B1  0861               	movf	??_setLog_Code,w
  7136  11B2  00DD               	movwf	setProductData@value
  7137  11B3  300D               	movlw	13
  7138  11B4  319B  23DA  3191   	fcall	_setProductData
  7139                           
  7140                           ;RF_Control_B1.c: 280: setProductData(14, RF_Data[14]);
  7141  11B7  0023               	movlb	3	; select bank3
  7142  11B8  082E               	movf	(_RF_Data^(0+384)+14),w
  7143  11B9  0020               	movlb	0	; select bank0
  7144  11BA  00E1               	movwf	??_setLog_Code
  7145  11BB  0861               	movf	??_setLog_Code,w
  7146  11BC  00DD               	movwf	setProductData@value
  7147  11BD  300E               	movlw	14
  7148  11BE  319B  23DA  3191   	fcall	_setProductData
  7149                           
  7150                           ;RF_Control_B1.c: 281: setBuz(1, 100);
  7151  11C1  3064               	movlw	100
  7152  11C2  0020               	movlb	0	; select bank0
  7153  11C3  00A4               	movwf	setBuz@time
  7154  11C4  3000               	movlw	0
  7155  11C5  00A5               	movwf	setBuz@time+1
  7156  11C6  3001               	movlw	1
  7157  11C7  3195  25DF  3191   	fcall	_setBuz
  7158                           
  7159                           ;RF_Control_B1.c: 282: if (myMain.First == 1) {
  7160  11CA  0021               	movlb	1	; select bank1
  7161  11CB  1EAE               	btfss	_myMain^(0+128),5
  7162  11CC  29D1               	goto	l2326
  7163                           
  7164                           ;RF_Control_B1.c: 283: setMemory_LoopSave(1);
  7165  11CD  3001               	movlw	1
  7166  11CE  319C  2466  3191   	fcall	_setMemory_LoopSave
  7167  11D1                     l2326:	
  7168                           
  7169                           ;RF_Control_B1.c: 284: }
  7170                           ;RF_Control_B1.c: 285: setMemory_Modify(1);
  7171  11D1  3001               	movlw	1
  7172  11D2  319C  2456         	fcall	_setMemory_Modify
  7173  11D4  0008               	return
  7174  11D5                     __end_of_setLog_Code:	
  7175                           
  7176                           	psect	text27
  7177  1C66                     __ptext27:	
  7178 ;; *************** function _setMemory_LoopSave *****************
  7179 ;; Defined at:
  7180 ;;		line 1077 in file "../src/MCU_B1.c"
  7181 ;; Parameters:    Size  Location     Type
  7182 ;;  command         1    wreg     unsigned char 
  7183 ;; Auto vars:     Size  Location     Type
  7184 ;;  command         1    4[COMMON] unsigned char 
  7185 ;; Return value:  Size  Location     Type
  7186 ;;		None               void
  7187 ;; Registers used:
  7188 ;;		wreg, status,2, status,0
  7189 ;; Tracked objects:
  7190 ;;		On entry : 0/0
  7191 ;;		On exit  : 0/0
  7192 ;;		Unchanged: 0/0
  7193 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7194 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7195 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7196 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7197 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7198 ;;Total ram usage:        2 bytes
  7199 ;; Hardware stack levels used:    1
  7200 ;; Hardware stack levels required when called:    3
  7201 ;; This function calls:
  7202 ;;		Nothing
  7203 ;; This function is called by:
  7204 ;;		_setLog_Code
  7205 ;; This function uses a non-reentrant model
  7206 ;;
  7207                           
  7208                           
  7209                           ;psect for function _setMemory_LoopSave
  7210  1C66                     _setMemory_LoopSave:	
  7211                           
  7212                           ;incstack = 0
  7213                           ; Regs used in _setMemory_LoopSave: [wreg+status,2+status,0]
  7214                           ;setMemory_LoopSave@command stored from wreg
  7215  1C66  00F4               	movwf	setMemory_LoopSave@command
  7216                           
  7217                           ;MCU_B1.c: 1078: Memory.LoopSave = command == 1 ? 1 : 0;
  7218  1C67  0874               	movf	setMemory_LoopSave@command,w
  7219  1C68  3A01               	xorlw	1
  7220  1C69  3000               	movlw	0
  7221  1C6A  1903               	skipnz
  7222  1C6B  3001               	movlw	1
  7223  1C6C  00F3               	movwf	??_setMemory_LoopSave
  7224  1C6D  0DF3               	rlf	??_setMemory_LoopSave,f
  7225  1C6E  0DF3               	rlf	??_setMemory_LoopSave,f
  7226  1C6F  0024               	movlb	4	; select bank4
  7227  1C70  0844               	movf	(_Memory^(0+512)+36),w
  7228  1C71  0673               	xorwf	??_setMemory_LoopSave,w
  7229  1C72  39FB               	andlw	-5
  7230  1C73  0673               	xorwf	??_setMemory_LoopSave,w
  7231  1C74  00C4               	movwf	(_Memory^(0+512)+36)
  7232  1C75  0008               	return
  7233  1C76                     __end_of_setMemory_LoopSave:	
  7234                           
  7235                           	psect	text28
  7236  0AA5                     __ptext28:	
  7237 ;; *************** function _setControl_Lights_Table *****************
  7238 ;; Defined at:
  7239 ;;		line 289 in file "../src/RF_Control_B1.c"
  7240 ;; Parameters:    Size  Location     Type
  7241 ;;		None
  7242 ;; Auto vars:     Size  Location     Type
  7243 ;;		None
  7244 ;; Return value:  Size  Location     Type
  7245 ;;		None               void
  7246 ;; Registers used:
  7247 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7248 ;; Tracked objects:
  7249 ;;		On entry : 0/0
  7250 ;;		On exit  : 0/0
  7251 ;;		Unchanged: 0/0
  7252 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7253 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7254 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7255 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7256 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7257 ;;Total ram usage:        0 bytes
  7258 ;; Hardware stack levels used:    1
  7259 ;; Hardware stack levels required when called:    9
  7260 ;; This function calls:
  7261 ;;		_setBuz
  7262 ;;		_setDimmerLights_ErrorClose
  7263 ;;		_setProductData
  7264 ;;		_setRFSW_AdjControl
  7265 ;;		_setRFSW_Control
  7266 ;;		_setTxData
  7267 ;; This function is called by:
  7268 ;;		_getRxData
  7269 ;; This function uses a non-reentrant model
  7270 ;;
  7271                           
  7272                           
  7273                           ;psect for function _setControl_Lights_Table
  7274  0AA5                     _setControl_Lights_Table:	
  7275                           
  7276                           ;RF_Control_B1.c: 290: switch (RF_Data[15]) {
  7277                           
  7278                           ;incstack = 0
  7279                           ; Regs used in _setControl_Lights_Table: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7280  0AA5  2AF0               	goto	l9640
  7281  0AA6                     l9624:	
  7282                           ;RF_Control_B1.c: 291: case 0x00:
  7283                           
  7284                           
  7285                           ;RF_Control_B1.c: 293: setDimmerLights_ErrorClose(255);
  7286  0AA6  30FF               	movlw	255
  7287  0AA7  3196  26EC  318A   	fcall	_setDimmerLights_ErrorClose
  7288                           
  7289                           ;RF_Control_B1.c: 295: setProductData(9, 0);
  7290  0AAA  0020               	movlb	0	; select bank0
  7291  0AAB  01DD               	clrf	setProductData@value
  7292  0AAC  3009               	movlw	9
  7293  0AAD  319B  23DA  318A   	fcall	_setProductData
  7294                           
  7295                           ;RF_Control_B1.c: 296: setProductData(11, 0);
  7296  0AB0  0020               	movlb	0	; select bank0
  7297  0AB1  01DD               	clrf	setProductData@value
  7298  0AB2  300B               	movlw	11
  7299  0AB3  319B  23DA  318A   	fcall	_setProductData
  7300                           
  7301                           ;RF_Control_B1.c: 297: setProductData(15, 0);
  7302  0AB6  0020               	movlb	0	; select bank0
  7303  0AB7  01DD               	clrf	setProductData@value
  7304  0AB8  300F               	movlw	15
  7305  0AB9  319B  23DA  318A   	fcall	_setProductData
  7306                           
  7307                           ;RF_Control_B1.c: 298: setProductData(17, 0);
  7308  0ABC  0020               	movlb	0	; select bank0
  7309  0ABD  01DD               	clrf	setProductData@value
  7310  0ABE  3011               	movlw	17
  7311  0ABF  319B  23DA  318A   	fcall	_setProductData
  7312                           
  7313                           ;RF_Control_B1.c: 299: setBuz(1, 100);
  7314  0AC2  3064               	movlw	100
  7315  0AC3  0020               	movlb	0	; select bank0
  7316  0AC4  00A4               	movwf	setBuz@time
  7317  0AC5  3000               	movlw	0
  7318  0AC6  00A5               	movwf	setBuz@time+1
  7319  0AC7  3001               	movlw	1
  7320  0AC8  3195  25DF         	fcall	_setBuz
  7321                           
  7322                           ;RF_Control_B1.c: 301: break;
  7323  0ACA  0008               	return
  7324  0ACB                     l9628:	
  7325                           ;RF_Control_B1.c: 302: case 0x20:
  7326                           
  7327                           
  7328                           ;RF_Control_B1.c: 303: setProductData(9, 0);
  7329  0ACB  0020               	movlb	0	; select bank0
  7330  0ACC  01DD               	clrf	setProductData@value
  7331  0ACD  3009               	movlw	9
  7332  0ACE  319B  23DA  318A   	fcall	_setProductData
  7333                           
  7334                           ;RF_Control_B1.c: 304: setProductData(11, 0);
  7335  0AD1  0020               	movlb	0	; select bank0
  7336  0AD2  01DD               	clrf	setProductData@value
  7337  0AD3  300B               	movlw	11
  7338  0AD4  319B  23DA  318A   	fcall	_setProductData
  7339                           
  7340                           ;RF_Control_B1.c: 305: setProductData(17, 0);
  7341  0AD7  0020               	movlb	0	; select bank0
  7342  0AD8  01DD               	clrf	setProductData@value
  7343  0AD9  3011               	movlw	17
  7344  0ADA  319B  23DA  318A   	fcall	_setProductData
  7345                           
  7346                           ;RF_Control_B1.c: 306: setTxData();
  7347  0ADD  318F  274C         	fcall	_setTxData
  7348                           
  7349                           ;RF_Control_B1.c: 307: break;
  7350  0ADF  0008               	return
  7351  0AE0                     l9630:	
  7352                           ;RF_Control_B1.c: 308: case 0x01:
  7353                           
  7354                           
  7355                           ;RF_Control_B1.c: 310: setRFSW_Control(1);
  7356  0AE0  3001               	movlw	1
  7357  0AE1  3194  2499         	fcall	_setRFSW_Control
  7358                           
  7359                           ;RF_Control_B1.c: 312: break;
  7360  0AE3  0008               	return
  7361  0AE4                     l9632:	
  7362                           ;RF_Control_B1.c: 313: case 0x02:
  7363                           
  7364                           
  7365                           ;RF_Control_B1.c: 315: setRFSW_Control(2);
  7366  0AE4  3002               	movlw	2
  7367  0AE5  3194  2499         	fcall	_setRFSW_Control
  7368                           
  7369                           ;RF_Control_B1.c: 322: break;
  7370                           
  7371                           ;RF_Control_B1.c: 318: case 0x03:
  7372                           
  7373                           ;RF_Control_B1.c: 317: break;
  7374  0AE7  0008               	return
  7375  0AE8                     l9634:	
  7376                           ;RF_Control_B1.c: 323: case 0x11:
  7377                           
  7378                           
  7379                           ;RF_Control_B1.c: 326: setRFSW_AdjControl(1);
  7380  0AE8  3001               	movlw	1
  7381  0AE9  3192  22F3         	fcall	_setRFSW_AdjControl
  7382                           
  7383                           ;RF_Control_B1.c: 329: break;
  7384  0AEB  0008               	return
  7385  0AEC                     l9636:	
  7386                           ;RF_Control_B1.c: 330: case 0x21:
  7387                           
  7388                           
  7389                           ;RF_Control_B1.c: 333: setRFSW_AdjControl(2);
  7390  0AEC  3002               	movlw	2
  7391  0AED  3192  22F3         	fcall	_setRFSW_AdjControl
  7392                           
  7393                           ;RF_Control_B1.c: 344: }
  7394                           
  7395                           ;RF_Control_B1.c: 343: break;
  7396                           
  7397                           ;RF_Control_B1.c: 337: case 0x31:
  7398                           
  7399                           ;RF_Control_B1.c: 336: break;
  7400  0AEF  0008               	return
  7401  0AF0                     l9640:	
  7402  0AF0  0023               	movlb	3	; select bank3
  7403  0AF1  082F               	movf	(_RF_Data^(0+384)+15),w
  7404                           
  7405                           ; Switch size 1, requested type "space"
  7406                           ; Number of cases is 8, Range of values is 0 to 49
  7407                           ; switch strategies available:
  7408                           ; Name         Instructions Cycles
  7409                           ; simple_byte           25    13 (average)
  7410                           ; direct_byte          106     6 (fixed)
  7411                           ; jumptable            260     6 (fixed)
  7412                           ;	Chosen strategy is simple_byte
  7413  0AF2  3A00               	xorlw	0	; case 0
  7414  0AF3  1903               	skipnz
  7415  0AF4  2AA6               	goto	l9624
  7416  0AF5  3A01               	xorlw	1	; case 1
  7417  0AF6  1903               	skipnz
  7418  0AF7  2AE0               	goto	l9630
  7419  0AF8  3A03               	xorlw	3	; case 2
  7420  0AF9  1903               	skipnz
  7421  0AFA  2AE4               	goto	l9632
  7422  0AFB  3A01               	xorlw	1	; case 3
  7423  0AFC  1903               	skipnz
  7424  0AFD  2B0B               	goto	l2340
  7425  0AFE  3A12               	xorlw	18	; case 17
  7426  0AFF  1903               	skipnz
  7427  0B00  2AE8               	goto	l9634
  7428  0B01  3A31               	xorlw	49	; case 32
  7429  0B02  1903               	skipnz
  7430  0B03  2ACB               	goto	l9628
  7431  0B04  3A01               	xorlw	1	; case 33
  7432  0B05  1903               	skipnz
  7433  0B06  2AEC               	goto	l9636
  7434  0B07  3A10               	xorlw	16	; case 49
  7435  0B08  1903               	skipnz
  7436  0B09  2B0B               	goto	l2340
  7437  0B0A  2B0B               	goto	l2340
  7438  0B0B                     l2340:	
  7439  0B0B  0008               	return
  7440  0B0C                     __end_of_setControl_Lights_Table:	
  7441                           
  7442                           	psect	text29
  7443  1499                     __ptext29:	
  7444 ;; *************** function _setRFSW_Control *****************
  7445 ;; Defined at:
  7446 ;;		line 371 in file "../src/RF_Control_B1.c"
  7447 ;; Parameters:    Size  Location     Type
  7448 ;;  sw              1    wreg     unsigned char 
  7449 ;; Auto vars:     Size  Location     Type
  7450 ;;  sw              1   72[BANK0 ] unsigned char 
  7451 ;;  status          1   71[BANK0 ] unsigned char 
  7452 ;; Return value:  Size  Location     Type
  7453 ;;		None               void
  7454 ;; Registers used:
  7455 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7456 ;; Tracked objects:
  7457 ;;		On entry : 0/0
  7458 ;;		On exit  : 0/0
  7459 ;;		Unchanged: 0/0
  7460 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7461 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7462 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7463 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7464 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7465 ;;Total ram usage:        3 bytes
  7466 ;; Hardware stack levels used:    1
  7467 ;; Hardware stack levels required when called:    7
  7468 ;; This function calls:
  7469 ;;		_getDelayOff_GO
  7470 ;;		_getDimmerLights_Status
  7471 ;;		_setBuz
  7472 ;;		_setDelayOff_GO
  7473 ;;		_setDimmerLights_SwOff
  7474 ;;		_setDimmerLights_SwOn
  7475 ;;		_setRF_DimmerLights
  7476 ;;		_setTxData
  7477 ;; This function is called by:
  7478 ;;		_setControl_Lights_Table
  7479 ;; This function uses a non-reentrant model
  7480 ;;
  7481                           
  7482                           
  7483                           ;psect for function _setRFSW_Control
  7484  1499                     _setRFSW_Control:	
  7485                           
  7486                           ;incstack = 0
  7487                           ; Regs used in _setRFSW_Control: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7488                           ;setRFSW_Control@sw stored from wreg
  7489  1499  0020               	movlb	0	; select bank0
  7490  149A  00E8               	movwf	setRFSW_Control@sw
  7491                           
  7492                           ;RF_Control_B1.c: 372: char status = 0;
  7493  149B  01E7               	clrf	setRFSW_Control@status
  7494                           
  7495                           ;RF_Control_B1.c: 375: if (RF_Data[16] == 0x80) {
  7496  149C  0023               	movlb	3	; select bank3
  7497  149D  0830               	movf	(_RF_Data^(0+384)+16),w
  7498  149E  3A80               	xorlw	128
  7499  149F  1D03               	skipz
  7500  14A0  2CCC               	goto	l9404
  7501                           
  7502                           ;RF_Control_B1.c: 376: setDelayOff_GO(sw, 1, RF_Data[17]);
  7503  14A1  0020               	movlb	0	; select bank0
  7504  14A2  01E1               	clrf	setDelayOff_GO@command
  7505  14A3  0AE1               	incf	setDelayOff_GO@command,f
  7506  14A4  0023               	movlb	3	; select bank3
  7507  14A5  0831               	movf	(_RF_Data^(0+384)+17),w
  7508  14A6  0020               	movlb	0	; select bank0
  7509  14A7  00E6               	movwf	??_setRFSW_Control
  7510  14A8  0866               	movf	??_setRFSW_Control,w
  7511  14A9  00E2               	movwf	setDelayOff_GO@value
  7512  14AA  0868               	movf	setRFSW_Control@sw,w
  7513  14AB  3195  258C  3194   	fcall	_setDelayOff_GO
  7514                           
  7515                           ;RF_Control_B1.c: 377: if (getDimmerLights_Status(sw) == 1) {
  7516  14AE  0020               	movlb	0	; select bank0
  7517  14AF  0868               	movf	setRFSW_Control@sw,w
  7518  14B0  319C  2406  3194   	fcall	_getDimmerLights_Status
  7519  14B3  3A01               	xorlw	1
  7520  14B4  1D03               	skipz
  7521  14B5  2CDB               	goto	l9408
  7522                           
  7523                           ;RF_Control_B1.c: 378: setBuz(1, 100);
  7524  14B6  3064               	movlw	100
  7525  14B7  0020               	movlb	0	; select bank0
  7526  14B8  00A4               	movwf	setBuz@time
  7527  14B9  3000               	movlw	0
  7528  14BA  00A5               	movwf	setBuz@time+1
  7529  14BB  3001               	movlw	1
  7530  14BC  3195  25DF  3194   	fcall	_setBuz
  7531                           
  7532                           ;RF_Control_B1.c: 379: status = 1;
  7533  14BF  0020               	movlb	0	; select bank0
  7534  14C0  01E7               	clrf	setRFSW_Control@status
  7535  14C1  0AE7               	incf	setRFSW_Control@status,f
  7536                           
  7537                           ;RF_Control_B1.c: 380: setRF_DimmerLights(sw, 1);
  7538  14C2  01E1               	clrf	setRF_DimmerLights@on
  7539  14C3  0AE1               	incf	setRF_DimmerLights@on,f
  7540  14C4  0868               	movf	setRFSW_Control@sw,w
  7541  14C5  3196  2638  3194   	fcall	_setRF_DimmerLights
  7542                           
  7543                           ;RF_Control_B1.c: 381: setTxData();
  7544  14C8  318F  274C  3194   	fcall	_setTxData
  7545                           
  7546                           ;RF_Control_B1.c: 382: }
  7547                           ;RF_Control_B1.c: 383: } else {
  7548  14CB  2CDB               	goto	l9408
  7549  14CC                     l9404:	
  7550                           
  7551                           ;RF_Control_B1.c: 385: if (getDelayOff_GO(sw) == 1) {
  7552  14CC  0020               	movlb	0	; select bank0
  7553  14CD  0868               	movf	setRFSW_Control@sw,w
  7554  14CE  319B  23CC  3194   	fcall	_getDelayOff_GO
  7555  14D1  3A01               	xorlw	1
  7556  14D2  1D03               	skipz
  7557  14D3  2CDB               	goto	l9408
  7558                           
  7559                           ;RF_Control_B1.c: 386: setDelayOff_GO(sw, 0, 0);
  7560  14D4  0020               	movlb	0	; select bank0
  7561  14D5  01E1               	clrf	setDelayOff_GO@command
  7562  14D6  01E2               	clrf	setDelayOff_GO@value
  7563  14D7  0868               	movf	setRFSW_Control@sw,w
  7564  14D8  3195  258C  3194   	fcall	_setDelayOff_GO
  7565  14DB                     l9408:	
  7566                           
  7567                           ;RF_Control_B1.c: 387: }
  7568                           ;RF_Control_B1.c: 389: }
  7569                           ;RF_Control_B1.c: 390: if (status == 0) {
  7570  14DB  0020               	movlb	0	; select bank0
  7571  14DC  08E7               	movf	setRFSW_Control@status,f
  7572  14DD  1D03               	skipz
  7573  14DE  0008               	return
  7574                           
  7575                           ;RF_Control_B1.c: 392: setDimmerLights_SwOn(sw);
  7576  14DF  0868               	movf	setRFSW_Control@sw,w
  7577  14E0  3197  27A4  3194   	fcall	_setDimmerLights_SwOn
  7578                           
  7579                           ;RF_Control_B1.c: 393: setDimmerLights_SwOff(sw);
  7580  14E3  0020               	movlb	0	; select bank0
  7581  14E4  0868               	movf	setRFSW_Control@sw,w
  7582  14E5  3194  244A         	fcall	_setDimmerLights_SwOff
  7583  14E7  0008               	return
  7584  14E8                     __end_of_setRFSW_Control:	
  7585                           
  7586                           	psect	text30
  7587  17A4                     __ptext30:	
  7588 ;; *************** function _setDimmerLights_SwOn *****************
  7589 ;; Defined at:
  7590 ;;		line 512 in file "../src/Dimmer_B1.c"
  7591 ;; Parameters:    Size  Location     Type
  7592 ;;  sw              1    wreg     unsigned char 
  7593 ;; Auto vars:     Size  Location     Type
  7594 ;;  sw              1   12[BANK0 ] unsigned char 
  7595 ;;  idle            1   11[BANK0 ] unsigned char 
  7596 ;; Return value:  Size  Location     Type
  7597 ;;		None               void
  7598 ;; Registers used:
  7599 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7600 ;; Tracked objects:
  7601 ;;		On entry : 0/0
  7602 ;;		On exit  : 0/0
  7603 ;;		Unchanged: 0/0
  7604 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7605 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7606 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7607 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7608 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7609 ;;Total ram usage:        5 bytes
  7610 ;; Hardware stack levels used:    1
  7611 ;; Hardware stack levels required when called:    5
  7612 ;; This function calls:
  7613 ;;		_DimmerLightsPointSelect
  7614 ;;		_setBuz
  7615 ;; This function is called by:
  7616 ;;		_setRFSW_Control
  7617 ;;		_setSw_Main
  7618 ;; This function uses a non-reentrant model
  7619 ;;
  7620                           
  7621                           
  7622                           ;psect for function _setDimmerLights_SwOn
  7623  17A4                     _setDimmerLights_SwOn:	
  7624                           
  7625                           ;incstack = 0
  7626                           ; Regs used in _setDimmerLights_SwOn: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7627                           ;setDimmerLights_SwOn@sw stored from wreg
  7628  17A4  0020               	movlb	0	; select bank0
  7629  17A5  00AC               	movwf	setDimmerLights_SwOn@sw
  7630                           
  7631                           ;Dimmer_B1.c: 513: DimmerLightsPointSelect(sw);
  7632  17A6  082C               	movf	setDimmerLights_SwOn@sw,w
  7633  17A7  319D  25A8  3197   	fcall	_DimmerLightsPointSelect
  7634                           
  7635                           ;Dimmer_B1.c: 514: char idle = 0;
  7636  17AA  0020               	movlb	0	; select bank0
  7637  17AB  01AB               	clrf	setDimmerLights_SwOn@idle
  7638                           
  7639                           ;Dimmer_B1.c: 517: if (idle == 0) {
  7640  17AC  08AB               	movf	setDimmerLights_SwOn@idle,f
  7641  17AD  1D03               	skipz
  7642  17AE  2FCF               	goto	l9182
  7643                           
  7644                           ;Dimmer_B1.c: 518: if (sw == 1) {
  7645  17AF  082C               	movf	setDimmerLights_SwOn@sw,w
  7646  17B0  3A01               	xorlw	1
  7647  17B1  1D03               	skipz
  7648  17B2  2FBE               	goto	l9172
  7649                           
  7650                           ;Dimmer_B1.c: 519: idle = DimmerLights2.TriggerAdj == 1 || DimmerLights2.AdjSw == 1 ? 1 
      +                          : 0;
  7651  17B3  01A9               	clrf	_setDimmerLights_SwOn$2330
  7652  17B4  0AA9               	incf	_setDimmerLights_SwOn$2330,f
  7653  17B5  0023               	movlb	3	; select bank3
  7654  17B6  1DC8               	btfss	(_DimmerLights2^(0+384)+10),3
  7655  17B7  1B3F               	btfsc	(_DimmerLights2^(0+384)+1),6
  7656  17B8  2FBB               	goto	l9170
  7657  17B9  0020               	movlb	0	; select bank0
  7658  17BA  01A9               	clrf	_setDimmerLights_SwOn$2330
  7659  17BB                     l9170:	
  7660  17BB  0020               	movlb	0	; select bank0
  7661  17BC  0829               	movf	_setDimmerLights_SwOn$2330,w
  7662  17BD  2FCC               	goto	L3
  7663  17BE                     l9172:	
  7664                           ;Dimmer_B1.c: 520: } else if (sw == 2) {
  7665                           
  7666  17BE  082C               	movf	setDimmerLights_SwOn@sw,w
  7667  17BF  3A02               	xorlw	2
  7668  17C0  1D03               	skipz
  7669  17C1  2FCF               	goto	l9182
  7670                           
  7671                           ;Dimmer_B1.c: 521: idle = DimmerLights1.TriggerAdj == 1 || DimmerLights1.AdjSw == 1 ? 1 
      +                          : 0;
  7672  17C2  01AA               	clrf	_setDimmerLights_SwOn$2331
  7673  17C3  0AAA               	incf	_setDimmerLights_SwOn$2331,f
  7674  17C4  0022               	movlb	2	; select bank2
  7675  17C5  1DDD               	btfss	(_DimmerLights1^(0+256)+10),3
  7676  17C6  1B54               	btfsc	(_DimmerLights1^(0+256)+1),6
  7677  17C7  2FCA               	goto	l9180
  7678  17C8  0020               	movlb	0	; select bank0
  7679  17C9  01AA               	clrf	_setDimmerLights_SwOn$2331
  7680  17CA                     l9180:	
  7681  17CA  0020               	movlb	0	; select bank0
  7682  17CB  082A               	movf	_setDimmerLights_SwOn$2331,w
  7683  17CC                     L3:	
  7684  17CC  00A8               	movwf	??_setDimmerLights_SwOn
  7685  17CD  0828               	movf	??_setDimmerLights_SwOn,w
  7686  17CE  00AB               	movwf	setDimmerLights_SwOn@idle
  7687  17CF                     l9182:	
  7688                           
  7689                           ;Dimmer_B1.c: 522: }
  7690                           ;Dimmer_B1.c: 523: }
  7691                           ;Dimmer_B1.c: 543: if (idle == 0) {
  7692  17CF  08AB               	movf	setDimmerLights_SwOn@idle,f
  7693  17D0  1D03               	skipz
  7694  17D1  0008               	return
  7695                           
  7696                           ;Dimmer_B1.c: 544: DimmerLights->SwFlag = 1;
  7697  17D2  086D               	movf	_DimmerLights,w
  7698  17D3  3E0B               	addlw	11
  7699  17D4  0086               	movwf	6
  7700  17D5  3001               	movlw	1	; select bank2/3
  7701  17D6  0087               	movwf	7
  7702  17D7  1481               	bsf	1,1
  7703                           
  7704                           ;Dimmer_B1.c: 545: if (DimmerLights->Status == 0) {
  7705  17D8  086D               	movf	_DimmerLights,w
  7706  17D9  3E02               	addlw	2
  7707  17DA  0086               	movwf	6
  7708  17DB  3001               	movlw	1	; select bank2/3
  7709  17DC  0087               	movwf	7
  7710  17DD  1881               	btfsc	1,1
  7711  17DE  2FF2               	goto	l9188
  7712                           
  7713                           ;Dimmer_B1.c: 546: DimmerLights->Status = 1;
  7714  17DF  086D               	movf	_DimmerLights,w
  7715  17E0  3E02               	addlw	2
  7716  17E1  0086               	movwf	6
  7717  17E2  3001               	movlw	1	; select bank2/3
  7718  17E3  0087               	movwf	7
  7719  17E4  1481               	bsf	1,1
  7720                           
  7721                           ;Dimmer_B1.c: 547: DimmerLights->Trigger = 1;
  7722  17E5  086D               	movf	_DimmerLights,w
  7723  17E6  3E0A               	addlw	10
  7724  17E7  0086               	movwf	6
  7725  17E8  3001               	movlw	1	; select bank2/3
  7726  17E9  0087               	movwf	7
  7727  17EA  1481               	bsf	1,1
  7728                           
  7729                           ;Dimmer_B1.c: 548: DimmerLights->Switch = 1;
  7730  17EB  086D               	movf	_DimmerLights,w
  7731  17EC  3E0A               	addlw	10
  7732  17ED  0086               	movwf	6
  7733  17EE  3001               	movlw	1	; select bank2/3
  7734  17EF  0087               	movwf	7
  7735  17F0  1401               	bsf	1,0
  7736                           
  7737                           ;Dimmer_B1.c: 549: } else {
  7738  17F1  2FF8               	goto	l9190
  7739  17F2                     l9188:	
  7740                           
  7741                           ;Dimmer_B1.c: 550: DimmerLights->Status = 0;
  7742  17F2  086D               	movf	_DimmerLights,w
  7743  17F3  3E02               	addlw	2
  7744  17F4  0086               	movwf	6
  7745  17F5  3001               	movlw	1	; select bank2/3
  7746  17F6  0087               	movwf	7
  7747  17F7  1081               	bcf	1,1
  7748  17F8                     l9190:	
  7749                           
  7750                           ;Dimmer_B1.c: 551: }
  7751                           ;Dimmer_B1.c: 552: setBuz(1, 100);
  7752  17F8  3064               	movlw	100
  7753  17F9  00A4               	movwf	setBuz@time
  7754  17FA  3000               	movlw	0
  7755  17FB  00A5               	movwf	setBuz@time+1
  7756  17FC  3001               	movlw	1
  7757  17FD  3195  25DF         	fcall	_setBuz
  7758  17FF  0008               	return
  7759  1800                     __end_of_setDimmerLights_SwOn:	
  7760                           
  7761                           	psect	text31
  7762  12F3                     __ptext31:	
  7763 ;; *************** function _setRFSW_AdjControl *****************
  7764 ;; Defined at:
  7765 ;;		line 399 in file "../src/RF_Control_B1.c"
  7766 ;; Parameters:    Size  Location     Type
  7767 ;;  sw              1    wreg     unsigned char 
  7768 ;; Auto vars:     Size  Location     Type
  7769 ;;  sw              1   70[BANK0 ] unsigned char 
  7770 ;;  status          1   69[BANK0 ] unsigned char 
  7771 ;; Return value:  Size  Location     Type
  7772 ;;		None               void
  7773 ;; Registers used:
  7774 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7775 ;; Tracked objects:
  7776 ;;		On entry : 0/0
  7777 ;;		On exit  : 0/0
  7778 ;;		Unchanged: 0/0
  7779 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7780 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7781 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7782 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7783 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7784 ;;Total ram usage:        4 bytes
  7785 ;; Hardware stack levels used:    1
  7786 ;; Hardware stack levels required when called:    8
  7787 ;; This function calls:
  7788 ;;		_getDimmerLights_Status
  7789 ;;		_setMemory_Modify
  7790 ;;		_setProductData
  7791 ;;		_setRF_DimmerValue
  7792 ;;		_setTxData
  7793 ;; This function is called by:
  7794 ;;		_setControl_Lights_Table
  7795 ;; This function uses a non-reentrant model
  7796 ;;
  7797                           
  7798                           
  7799                           ;psect for function _setRFSW_AdjControl
  7800  12F3                     _setRFSW_AdjControl:	
  7801                           
  7802                           ;incstack = 0
  7803                           ; Regs used in _setRFSW_AdjControl: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7804                           ;setRFSW_AdjControl@sw stored from wreg
  7805  12F3  0020               	movlb	0	; select bank0
  7806  12F4  00E6               	movwf	setRFSW_AdjControl@sw
  7807                           
  7808                           ;RF_Control_B1.c: 400: char status = 0;
  7809  12F5  01E5               	clrf	setRFSW_AdjControl@status
  7810                           
  7811                           ;RF_Control_B1.c: 402: status = getDimmerLights_Status(sw);
  7812  12F6  0866               	movf	setRFSW_AdjControl@sw,w
  7813  12F7  319C  2406  3192   	fcall	_getDimmerLights_Status
  7814  12FA  0020               	movlb	0	; select bank0
  7815  12FB  00E3               	movwf	??_setRFSW_AdjControl
  7816  12FC  0863               	movf	??_setRFSW_AdjControl,w
  7817  12FD  00E5               	movwf	setRFSW_AdjControl@status
  7818                           
  7819                           ;RF_Control_B1.c: 405: if (status == 1) {
  7820  12FE  0865               	movf	setRFSW_AdjControl@status,w
  7821  12FF  3A01               	xorlw	1
  7822  1300  1D03               	skipz
  7823  1301  2B0C               	goto	l9422
  7824                           
  7825                           ;RF_Control_B1.c: 406: setMemory_Modify(1);
  7826  1302  3001               	movlw	1
  7827  1303  319C  2456  3192   	fcall	_setMemory_Modify
  7828                           
  7829                           ;RF_Control_B1.c: 407: setRF_DimmerValue(sw);
  7830  1306  0020               	movlb	0	; select bank0
  7831  1307  0866               	movf	setRFSW_AdjControl@sw,w
  7832  1308  3191  210F  3192   	fcall	_setRF_DimmerValue
  7833                           
  7834                           ;RF_Control_B1.c: 408: } else {
  7835  130B  2B1D               	goto	l2352
  7836  130C                     l9422:	
  7837                           
  7838                           ;RF_Control_B1.c: 409: setProductData(9, product->Data[20 + sw]);
  7839  130C  0020               	movlb	0	; select bank0
  7840  130D  0866               	movf	setRFSW_AdjControl@sw,w
  7841  130E  3E14               	addlw	20
  7842  130F  076F               	addwf	_product,w
  7843  1310  00E3               	movwf	??_setRFSW_AdjControl
  7844  1311  0863               	movf	??_setRFSW_AdjControl,w
  7845  1312  0086               	movwf	6
  7846  1313  3002               	movlw	2	; select bank4/5
  7847  1314  0087               	movwf	7
  7848  1315  0801               	movf	1,w
  7849  1316  00E4               	movwf	??_setRFSW_AdjControl+1
  7850  1317  0864               	movf	??_setRFSW_AdjControl+1,w
  7851  1318  00DD               	movwf	setProductData@value
  7852  1319  3009               	movlw	9
  7853  131A  319B  23DA  3192   	fcall	_setProductData
  7854  131D                     l2352:	
  7855                           
  7856                           ;RF_Control_B1.c: 410: }
  7857                           ;RF_Control_B1.c: 411: setProductData(17, product->Data[26 + sw]);
  7858  131D  0020               	movlb	0	; select bank0
  7859  131E  0866               	movf	setRFSW_AdjControl@sw,w
  7860  131F  3E1A               	addlw	26
  7861  1320  076F               	addwf	_product,w
  7862  1321  00E3               	movwf	??_setRFSW_AdjControl
  7863  1322  0863               	movf	??_setRFSW_AdjControl,w
  7864  1323  0086               	movwf	6
  7865  1324  3002               	movlw	2	; select bank4/5
  7866  1325  0087               	movwf	7
  7867  1326  0801               	movf	1,w
  7868  1327  00E4               	movwf	??_setRFSW_AdjControl+1
  7869  1328  0864               	movf	??_setRFSW_AdjControl+1,w
  7870  1329  00DD               	movwf	setProductData@value
  7871  132A  3011               	movlw	17
  7872  132B  319B  23DA  3192   	fcall	_setProductData
  7873                           
  7874                           ;RF_Control_B1.c: 412: setTxData();
  7875  132E  318F  274C         	fcall	_setTxData
  7876  1330  0008               	return
  7877  1331                     __end_of_setRFSW_AdjControl:	
  7878                           
  7879                           	psect	text32
  7880  110F                     __ptext32:	
  7881 ;; *************** function _setRF_DimmerValue *****************
  7882 ;; Defined at:
  7883 ;;		line 417 in file "../src/RF_Control_B1.c"
  7884 ;; Parameters:    Size  Location     Type
  7885 ;;  lights          1    wreg     unsigned char 
  7886 ;; Auto vars:     Size  Location     Type
  7887 ;;  lights          1   66[BANK0 ] unsigned char 
  7888 ;; Return value:  Size  Location     Type
  7889 ;;		None               void
  7890 ;; Registers used:
  7891 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7892 ;; Tracked objects:
  7893 ;;		On entry : 0/0
  7894 ;;		On exit  : 0/0
  7895 ;;		Unchanged: 0/0
  7896 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7897 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7898 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7899 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7900 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7901 ;;Total ram usage:        2 bytes
  7902 ;; Hardware stack levels used:    1
  7903 ;; Hardware stack levels required when called:    7
  7904 ;; This function calls:
  7905 ;;		_setDimmerLights_AdjRF
  7906 ;;		_setProductData
  7907 ;; This function is called by:
  7908 ;;		_setRFSW_AdjControl
  7909 ;; This function uses a non-reentrant model
  7910 ;;
  7911                           
  7912                           
  7913                           ;psect for function _setRF_DimmerValue
  7914  110F                     _setRF_DimmerValue:	
  7915                           
  7916                           ;incstack = 0
  7917                           ; Regs used in _setRF_DimmerValue: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7918                           ;setRF_DimmerValue@lights stored from wreg
  7919  110F  0020               	movlb	0	; select bank0
  7920  1110  00E2               	movwf	setRF_DimmerValue@lights
  7921                           
  7922                           ;RF_Control_B1.c: 418: if (RF_Data[9] > 0x64) {
  7923  1111  3065               	movlw	101
  7924  1112  0023               	movlb	3	; select bank3
  7925  1113  0229               	subwf	(_RF_Data^(0+384)+9),w
  7926  1114  1C03               	skipc
  7927  1115  291C               	goto	l9282
  7928                           
  7929                           ;RF_Control_B1.c: 419: RF_Data[9] = 0x64;
  7930  1116  3064               	movlw	100
  7931  1117  0020               	movlb	0	; select bank0
  7932  1118  00E1               	movwf	??_setRF_DimmerValue
  7933  1119  0861               	movf	??_setRF_DimmerValue,w
  7934  111A  0023               	movlb	3	; select bank3
  7935  111B  00A9               	movwf	(_RF_Data^(0+384)+9)
  7936  111C                     l9282:	
  7937                           
  7938                           ;RF_Control_B1.c: 420: }
  7939                           ;RF_Control_B1.c: 421: setProductData(9, RF_Data[9]);
  7940  111C  0829               	movf	(_RF_Data^(0+384)+9),w
  7941  111D  0020               	movlb	0	; select bank0
  7942  111E  00E1               	movwf	??_setRF_DimmerValue
  7943  111F  0861               	movf	??_setRF_DimmerValue,w
  7944  1120  00DD               	movwf	setProductData@value
  7945  1121  3009               	movlw	9
  7946  1122  319B  23DA  3191   	fcall	_setProductData
  7947                           
  7948                           ;RF_Control_B1.c: 422: setProductData(11, lights);
  7949  1125  0020               	movlb	0	; select bank0
  7950  1126  0862               	movf	setRF_DimmerValue@lights,w
  7951  1127  00E1               	movwf	??_setRF_DimmerValue
  7952  1128  0861               	movf	??_setRF_DimmerValue,w
  7953  1129  00DD               	movwf	setProductData@value
  7954  112A  300B               	movlw	11
  7955  112B  319B  23DA  3191   	fcall	_setProductData
  7956                           
  7957                           ;RF_Control_B1.c: 423: setProductData((20 + lights), RF_Data[9]);
  7958  112E  0023               	movlb	3	; select bank3
  7959  112F  0829               	movf	(_RF_Data^(0+384)+9),w
  7960  1130  0020               	movlb	0	; select bank0
  7961  1131  00E1               	movwf	??_setRF_DimmerValue
  7962  1132  0861               	movf	??_setRF_DimmerValue,w
  7963  1133  00DD               	movwf	setProductData@value
  7964  1134  0862               	movf	setRF_DimmerValue@lights,w
  7965  1135  3E14               	addlw	20
  7966  1136  319B  23DA  3191   	fcall	_setProductData
  7967                           
  7968                           ;RF_Control_B1.c: 424: setDimmerLights_AdjRF(lights);
  7969  1139  0020               	movlb	0	; select bank0
  7970  113A  0862               	movf	setRF_DimmerValue@lights,w
  7971  113B  3190  2067         	fcall	_setDimmerLights_AdjRF
  7972  113D  0008               	return
  7973  113E                     __end_of_setRF_DimmerValue:	
  7974                           
  7975                           	psect	text33
  7976  1067                     __ptext33:	
  7977 ;; *************** function _setDimmerLights_AdjRF *****************
  7978 ;; Defined at:
  7979 ;;		line 1019 in file "../src/Dimmer_B1.c"
  7980 ;; Parameters:    Size  Location     Type
  7981 ;;  lights          1    wreg     unsigned char 
  7982 ;; Auto vars:     Size  Location     Type
  7983 ;;  lights          1   62[BANK0 ] unsigned char 
  7984 ;; Return value:  Size  Location     Type
  7985 ;;		None               void
  7986 ;; Registers used:
  7987 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7988 ;; Tracked objects:
  7989 ;;		On entry : 0/0
  7990 ;;		On exit  : 0/0
  7991 ;;		Unchanged: 0/0
  7992 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7993 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7994 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7995 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7996 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7997 ;;Total ram usage:        2 bytes
  7998 ;; Hardware stack levels used:    1
  7999 ;; Hardware stack levels required when called:    6
  8000 ;; This function calls:
  8001 ;;		_DimmerLightsPointSelect
  8002 ;;		_getPercentValue
  8003 ;; This function is called by:
  8004 ;;		_setRF_DimmerValue
  8005 ;; This function uses a non-reentrant model
  8006 ;;
  8007                           
  8008                           
  8009                           ;psect for function _setDimmerLights_AdjRF
  8010  1067                     _setDimmerLights_AdjRF:	
  8011                           
  8012                           ;incstack = 0
  8013                           ; Regs used in _setDimmerLights_AdjRF: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  8014                           ;setDimmerLights_AdjRF@lights stored from wreg
  8015  1067  0020               	movlb	0	; select bank0
  8016  1068  00DE               	movwf	setDimmerLights_AdjRF@lights
  8017                           
  8018                           ;Dimmer_B1.c: 1021: DimmerLightsPointSelect(lights);
  8019  1069  085E               	movf	setDimmerLights_AdjRF@lights,w
  8020  106A  319D  25A8  3190   	fcall	_DimmerLightsPointSelect
  8021                           
  8022                           ;Dimmer_B1.c: 1022: DimmerLights->AdjRF = 1;
  8023  106D  0020               	movlb	0	; select bank0
  8024  106E  086D               	movf	_DimmerLights,w
  8025  106F  3E02               	addlw	2
  8026  1070  0086               	movwf	6
  8027  1071  3001               	movlw	1	; select bank2/3
  8028  1072  0087               	movwf	7
  8029  1073  1401               	bsf	1,0
  8030                           
  8031                           ;Dimmer_B1.c: 1023: DimmerLights->Signal = 1;
  8032  1074  0A6D               	incf	_DimmerLights,w
  8033  1075  0086               	movwf	6
  8034  1076  3001               	movlw	1	; select bank2/3
  8035  1077  0087               	movwf	7
  8036  1078  1681               	bsf	1,5
  8037                           
  8038                           ;Dimmer_B1.c: 1024: DimmerLights->MaxmumValue = getPercentValue(product->Data[9]);
  8039  1079  086F               	movf	_product,w
  8040  107A  3E09               	addlw	9
  8041  107B  0086               	movwf	6
  8042  107C  3002               	movlw	2	; select bank4/5
  8043  107D  0087               	movwf	7
  8044  107E  0801               	movf	1,w
  8045  107F  318A  2240         	fcall	_getPercentValue
  8046  1081  0020               	movlb	0	; select bank0
  8047  1082  00DD               	movwf	??_setDimmerLights_AdjRF
  8048  1083  086D               	movf	_DimmerLights,w
  8049  1084  3E06               	addlw	6
  8050  1085  0086               	movwf	6
  8051  1086  3001               	movlw	1	; select bank2/3
  8052  1087  0087               	movwf	7
  8053  1088  085D               	movf	??_setDimmerLights_AdjRF,w
  8054  1089  0081               	movwf	1
  8055  108A  0008               	return
  8056  108B                     __end_of_setDimmerLights_AdjRF:	
  8057                           
  8058                           	psect	text34
  8059  0A40                     __ptext34:	
  8060 ;; *************** function _getPercentValue *****************
  8061 ;; Defined at:
  8062 ;;		line 1134 in file "../src/Dimmer_B1.c"
  8063 ;; Parameters:    Size  Location     Type
  8064 ;;  value           1    wreg     unsigned char 
  8065 ;; Auto vars:     Size  Location     Type
  8066 ;;  value           1   57[BANK0 ] unsigned char 
  8067 ;;  i               3   58[BANK0 ] float 
  8068 ;; Return value:  Size  Location     Type
  8069 ;;                  1    wreg      unsigned char 
  8070 ;; Registers used:
  8071 ;;		wreg, status,2, status,0, pclath, cstack
  8072 ;; Tracked objects:
  8073 ;;		On entry : 0/0
  8074 ;;		On exit  : 0/0
  8075 ;;		Unchanged: 0/0
  8076 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8077 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8078 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8079 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8080 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8081 ;;Total ram usage:        6 bytes
  8082 ;; Hardware stack levels used:    1
  8083 ;; Hardware stack levels required when called:    5
  8084 ;; This function calls:
  8085 ;;		___awtoft
  8086 ;;		___ftadd
  8087 ;;		___ftdiv
  8088 ;;		___ftmul
  8089 ;;		___ftneg
  8090 ;;		___fttol
  8091 ;; This function is called by:
  8092 ;;		_setDimmerLights_AdjRF
  8093 ;; This function uses a non-reentrant model
  8094 ;;
  8095                           
  8096                           
  8097                           ;psect for function _getPercentValue
  8098  0A40                     _getPercentValue:	
  8099                           
  8100                           ;incstack = 0
  8101                           ; Regs used in _getPercentValue: [wreg+status,2+status,0+pclath+cstack]
  8102                           ;getPercentValue@value stored from wreg
  8103  0A40  0020               	movlb	0	; select bank0
  8104  0A41  00D9               	movwf	getPercentValue@value
  8105                           
  8106                           ;Dimmer_B1.c: 1142: float i = ((char)(70*0.8)) - ((char)(15*0.8));
  8107  0A42  3000               	movlw	0
  8108  0A43  00DA               	movwf	getPercentValue@i
  8109  0A44  3030               	movlw	48
  8110  0A45  00DB               	movwf	getPercentValue@i+1
  8111  0A46  3042               	movlw	66
  8112  0A47  00DC               	movwf	getPercentValue@i+2
  8113                           
  8114                           ;Dimmer_B1.c: 1143: i /= 100;
  8115  0A48  3000               	movlw	0
  8116  0A49  00A9               	movwf	___ftdiv@f2
  8117  0A4A  30C8               	movlw	200
  8118  0A4B  00AA               	movwf	___ftdiv@f2+1
  8119  0A4C  3042               	movlw	66
  8120  0A4D  00AB               	movwf	___ftdiv@f2+2
  8121  0A4E  085A               	movf	getPercentValue@i,w
  8122  0A4F  00AC               	movwf	___ftdiv@f1
  8123  0A50  085B               	movf	getPercentValue@i+1,w
  8124  0A51  00AD               	movwf	___ftdiv@f1+1
  8125  0A52  085C               	movf	getPercentValue@i+2,w
  8126  0A53  00AE               	movwf	___ftdiv@f1+2
  8127  0A54  318D  25F3  318A   	fcall	___ftdiv
  8128  0A57  0020               	movlb	0	; select bank0
  8129  0A58  0829               	movf	?___ftdiv,w
  8130  0A59  00DA               	movwf	getPercentValue@i
  8131  0A5A  082A               	movf	?___ftdiv+1,w
  8132  0A5B  00DB               	movwf	getPercentValue@i+1
  8133  0A5C  082B               	movf	?___ftdiv+2,w
  8134  0A5D  00DC               	movwf	getPercentValue@i+2
  8135                           
  8136                           ;Dimmer_B1.c: 1145: return (char) (((char)(70*0.8)) - ((100 - value) * i));
  8137  0A5E  0859               	movf	getPercentValue@value,w
  8138  0A5F  00D7               	movwf	??_getPercentValue
  8139  0A60  01D8               	clrf	??_getPercentValue+1
  8140  0A61  09D7               	comf	??_getPercentValue,f
  8141  0A62  09D8               	comf	??_getPercentValue+1,f
  8142  0A63  0AD7               	incf	??_getPercentValue,f
  8143  0A64  1903               	skipnz
  8144  0A65  0AD8               	incf	??_getPercentValue+1,f
  8145  0A66  0857               	movf	??_getPercentValue,w
  8146  0A67  3E64               	addlw	100
  8147  0A68  00A3               	movwf	___awtoft@c
  8148  0A69  3000               	movlw	0
  8149  0A6A  3D58               	addwfc	??_getPercentValue+1,w
  8150  0A6B  00A4               	movwf	___awtoft@c+1
  8151  0A6C  319E  26FB  318A   	fcall	___awtoft
  8152  0A6F  0020               	movlb	0	; select bank0
  8153  0A70  0823               	movf	?___awtoft,w
  8154  0A71  00AC               	movwf	___ftmul@f2
  8155  0A72  0824               	movf	?___awtoft+1,w
  8156  0A73  00AD               	movwf	___ftmul@f2+1
  8157  0A74  0825               	movf	?___awtoft+2,w
  8158  0A75  00AE               	movwf	___ftmul@f2+2
  8159  0A76  085A               	movf	getPercentValue@i,w
  8160  0A77  00A9               	movwf	___ftmul@f1
  8161  0A78  085B               	movf	getPercentValue@i+1,w
  8162  0A79  00AA               	movwf	___ftmul@f1+1
  8163  0A7A  085C               	movf	getPercentValue@i+2,w
  8164  0A7B  00AB               	movwf	___ftmul@f1+2
  8165  0A7C  3187  272D  318A   	fcall	___ftmul
  8166  0A7F  0020               	movlb	0	; select bank0
  8167  0A80  0829               	movf	?___ftmul,w
  8168  0A81  00B9               	movwf	___ftneg@f1
  8169  0A82  082A               	movf	?___ftmul+1,w
  8170  0A83  00BA               	movwf	___ftneg@f1+1
  8171  0A84  082B               	movf	?___ftmul+2,w
  8172  0A85  00BB               	movwf	___ftneg@f1+2
  8173  0A86  319B  232F  318A   	fcall	___ftneg
  8174  0A89  0020               	movlb	0	; select bank0
  8175  0A8A  0839               	movf	?___ftneg,w
  8176  0A8B  00BF               	movwf	___ftadd@f2
  8177  0A8C  083A               	movf	?___ftneg+1,w
  8178  0A8D  00C0               	movwf	___ftadd@f2+1
  8179  0A8E  083B               	movf	?___ftneg+2,w
  8180  0A8F  00C1               	movwf	___ftadd@f2+2
  8181  0A90  3000               	movlw	0
  8182  0A91  00BC               	movwf	___ftadd@f1
  8183  0A92  3060               	movlw	96
  8184  0A93  00BD               	movwf	___ftadd@f1+1
  8185  0A94  3042               	movlw	66
  8186  0A95  00BE               	movwf	___ftadd@f1+2
  8187  0A96  3184  2477  318A   	fcall	___ftadd
  8188  0A99  0020               	movlb	0	; select bank0
  8189  0A9A  083C               	movf	?___ftadd,w
  8190  0A9B  00C9               	movwf	___fttol@f1
  8191  0A9C  083D               	movf	?___ftadd+1,w
  8192  0A9D  00CA               	movwf	___fttol@f1+1
  8193  0A9E  083E               	movf	?___ftadd+2,w
  8194  0A9F  00CB               	movwf	___fttol@f1+2
  8195  0AA0  318C  24E0         	fcall	___fttol
  8196  0AA2  0020               	movlb	0	; select bank0
  8197  0AA3  0849               	movf	?___fttol,w
  8198  0AA4  0008               	return
  8199  0AA5                     __end_of_getPercentValue:	
  8200                           
  8201                           	psect	text35
  8202  072D                     __ptext35:	
  8203 ;; *************** function ___ftmul *****************
  8204 ;; Defined at:
  8205 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftmul.c"
  8206 ;; Parameters:    Size  Location     Type
  8207 ;;  f1              3    9[BANK0 ] float 
  8208 ;;  f2              3   12[BANK0 ] float 
  8209 ;; Auto vars:     Size  Location     Type
  8210 ;;  f3_as_produc    3   20[BANK0 ] unsigned um
  8211 ;;  sign            1   24[BANK0 ] unsigned char 
  8212 ;;  cntr            1   23[BANK0 ] unsigned char 
  8213 ;;  exp             1   19[BANK0 ] unsigned char 
  8214 ;; Return value:  Size  Location     Type
  8215 ;;                  3    9[BANK0 ] float 
  8216 ;; Registers used:
  8217 ;;		wreg, status,2, status,0, pclath, cstack
  8218 ;; Tracked objects:
  8219 ;;		On entry : 0/0
  8220 ;;		On exit  : 0/0
  8221 ;;		Unchanged: 0/0
  8222 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8223 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8224 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8225 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8226 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8227 ;;Total ram usage:       16 bytes
  8228 ;; Hardware stack levels used:    1
  8229 ;; Hardware stack levels required when called:    4
  8230 ;; This function calls:
  8231 ;;		___ftpack
  8232 ;; This function is called by:
  8233 ;;		_getPercentValue
  8234 ;; This function uses a non-reentrant model
  8235 ;;
  8236                           
  8237                           
  8238                           ;psect for function ___ftmul
  8239  072D                     ___ftmul:	
  8240                           
  8241                           ;incstack = 0
  8242                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  8243  072D  0020               	movlb	0	; select bank0
  8244  072E  0829               	movf	___ftmul@f1,w
  8245  072F  00AF               	movwf	??___ftmul
  8246  0730  082A               	movf	___ftmul@f1+1,w
  8247  0731  00B0               	movwf	??___ftmul+1
  8248  0732  082B               	movf	___ftmul@f1+2,w
  8249  0733  00B1               	movwf	??___ftmul+2
  8250  0734  1003               	clrc
  8251  0735  0D30               	rlf	??___ftmul+1,w
  8252  0736  0D31               	rlf	??___ftmul+2,w
  8253  0737  00B2               	movwf	??___ftmul+3
  8254  0738  0832               	movf	??___ftmul+3,w
  8255  0739  00B3               	movwf	___ftmul@exp
  8256  073A  08B3               	movf	___ftmul@exp,f
  8257  073B  1D03               	skipz
  8258  073C  2F44               	goto	l8874
  8259  073D  3000               	movlw	0
  8260  073E  00A9               	movwf	?___ftmul
  8261  073F  3000               	movlw	0
  8262  0740  00AA               	movwf	?___ftmul+1
  8263  0741  3000               	movlw	0
  8264  0742  00AB               	movwf	?___ftmul+2
  8265  0743  0008               	return
  8266  0744                     l8874:	
  8267  0744  082C               	movf	___ftmul@f2,w
  8268  0745  00AF               	movwf	??___ftmul
  8269  0746  082D               	movf	___ftmul@f2+1,w
  8270  0747  00B0               	movwf	??___ftmul+1
  8271  0748  082E               	movf	___ftmul@f2+2,w
  8272  0749  00B1               	movwf	??___ftmul+2
  8273  074A  1003               	clrc
  8274  074B  0D30               	rlf	??___ftmul+1,w
  8275  074C  0D31               	rlf	??___ftmul+2,w
  8276  074D  00B2               	movwf	??___ftmul+3
  8277  074E  0832               	movf	??___ftmul+3,w
  8278  074F  00B8               	movwf	___ftmul@sign
  8279  0750  08B8               	movf	___ftmul@sign,f
  8280  0751  1D03               	skipz
  8281  0752  2F5A               	goto	l8880
  8282  0753  3000               	movlw	0
  8283  0754  00A9               	movwf	?___ftmul
  8284  0755  3000               	movlw	0
  8285  0756  00AA               	movwf	?___ftmul+1
  8286  0757  3000               	movlw	0
  8287  0758  00AB               	movwf	?___ftmul+2
  8288  0759  0008               	return
  8289  075A                     l8880:	
  8290  075A  0838               	movf	___ftmul@sign,w
  8291  075B  3E7B               	addlw	123
  8292  075C  00AF               	movwf	??___ftmul
  8293  075D  082F               	movf	??___ftmul,w
  8294  075E  07B3               	addwf	___ftmul@exp,f
  8295  075F  0829               	movf	___ftmul@f1,w
  8296  0760  00AF               	movwf	??___ftmul
  8297  0761  082A               	movf	___ftmul@f1+1,w
  8298  0762  00B0               	movwf	??___ftmul+1
  8299  0763  082B               	movf	___ftmul@f1+2,w
  8300  0764  00B1               	movwf	??___ftmul+2
  8301  0765  3010               	movlw	16
  8302  0766                     u9265:	
  8303  0766  36B1               	lsrf	??___ftmul+2,f
  8304  0767  0CB0               	rrf	??___ftmul+1,f
  8305  0768  0CAF               	rrf	??___ftmul,f
  8306  0769  0B89               	decfsz	9,f
  8307  076A  2F66               	goto	u9265
  8308  076B  082F               	movf	??___ftmul,w
  8309  076C  00B2               	movwf	??___ftmul+3
  8310  076D  0832               	movf	??___ftmul+3,w
  8311  076E  00B8               	movwf	___ftmul@sign
  8312  076F  082C               	movf	___ftmul@f2,w
  8313  0770  00AF               	movwf	??___ftmul
  8314  0771  082D               	movf	___ftmul@f2+1,w
  8315  0772  00B0               	movwf	??___ftmul+1
  8316  0773  082E               	movf	___ftmul@f2+2,w
  8317  0774  00B1               	movwf	??___ftmul+2
  8318  0775  3010               	movlw	16
  8319  0776                     u9275:	
  8320  0776  36B1               	lsrf	??___ftmul+2,f
  8321  0777  0CB0               	rrf	??___ftmul+1,f
  8322  0778  0CAF               	rrf	??___ftmul,f
  8323  0779  0B89               	decfsz	9,f
  8324  077A  2F76               	goto	u9275
  8325  077B  082F               	movf	??___ftmul,w
  8326  077C  00B2               	movwf	??___ftmul+3
  8327  077D  0832               	movf	??___ftmul+3,w
  8328  077E  06B8               	xorwf	___ftmul@sign,f
  8329  077F  3080               	movlw	128
  8330  0780  00AF               	movwf	??___ftmul
  8331  0781  082F               	movf	??___ftmul,w
  8332  0782  05B8               	andwf	___ftmul@sign,f
  8333  0783  17AA               	bsf	___ftmul@f1+1,7
  8334  0784  17AD               	bsf	___ftmul@f2+1,7
  8335  0785  30FF               	movlw	255
  8336  0786  05AC               	andwf	___ftmul@f2,f
  8337  0787  30FF               	movlw	255
  8338  0788  05AD               	andwf	___ftmul@f2+1,f
  8339  0789  3000               	movlw	0
  8340  078A  05AE               	andwf	___ftmul@f2+2,f
  8341  078B  3000               	movlw	0
  8342  078C  00B4               	movwf	___ftmul@f3_as_product
  8343  078D  3000               	movlw	0
  8344  078E  00B5               	movwf	___ftmul@f3_as_product+1
  8345  078F  3000               	movlw	0
  8346  0790  00B6               	movwf	___ftmul@f3_as_product+2
  8347  0791  3007               	movlw	7
  8348  0792  00AF               	movwf	??___ftmul
  8349  0793  082F               	movf	??___ftmul,w
  8350  0794  00B7               	movwf	___ftmul@cntr
  8351  0795                     l8892:	
  8352  0795  1C29               	btfss	___ftmul@f1,0
  8353  0796  2F9D               	goto	l8896
  8354  0797  082C               	movf	___ftmul@f2,w
  8355  0798  07B4               	addwf	___ftmul@f3_as_product,f
  8356  0799  082D               	movf	___ftmul@f2+1,w
  8357  079A  3DB5               	addwfc	___ftmul@f3_as_product+1,f
  8358  079B  082E               	movf	___ftmul@f2+2,w
  8359  079C  3DB6               	addwfc	___ftmul@f3_as_product+2,f
  8360  079D                     l8896:	
  8361  079D  3001               	movlw	1
  8362  079E                     u9295:	
  8363  079E  36AB               	lsrf	___ftmul@f1+2,f
  8364  079F  0CAA               	rrf	___ftmul@f1+1,f
  8365  07A0  0CA9               	rrf	___ftmul@f1,f
  8366  07A1  0B89               	decfsz	9,f
  8367  07A2  2F9E               	goto	u9295
  8368  07A3  3001               	movlw	1
  8369  07A4                     u9305:	
  8370  07A4  35AC               	lslf	___ftmul@f2,f
  8371  07A5  0DAD               	rlf	___ftmul@f2+1,f
  8372  07A6  0DAE               	rlf	___ftmul@f2+2,f
  8373  07A7  0B89               	decfsz	9,f
  8374  07A8  2FA4               	goto	u9305
  8375  07A9  3001               	movlw	1
  8376  07AA  02B7               	subwf	___ftmul@cntr,f
  8377  07AB  1D03               	btfss	3,2
  8378  07AC  2F95               	goto	l8892
  8379  07AD  3009               	movlw	9
  8380  07AE  00AF               	movwf	??___ftmul
  8381  07AF  082F               	movf	??___ftmul,w
  8382  07B0  00B7               	movwf	___ftmul@cntr
  8383  07B1                     l8904:	
  8384  07B1  1C29               	btfss	___ftmul@f1,0
  8385  07B2  2FB9               	goto	l8908
  8386  07B3  082C               	movf	___ftmul@f2,w
  8387  07B4  07B4               	addwf	___ftmul@f3_as_product,f
  8388  07B5  082D               	movf	___ftmul@f2+1,w
  8389  07B6  3DB5               	addwfc	___ftmul@f3_as_product+1,f
  8390  07B7  082E               	movf	___ftmul@f2+2,w
  8391  07B8  3DB6               	addwfc	___ftmul@f3_as_product+2,f
  8392  07B9                     l8908:	
  8393  07B9  3001               	movlw	1
  8394  07BA                     u9335:	
  8395  07BA  36AB               	lsrf	___ftmul@f1+2,f
  8396  07BB  0CAA               	rrf	___ftmul@f1+1,f
  8397  07BC  0CA9               	rrf	___ftmul@f1,f
  8398  07BD  0B89               	decfsz	9,f
  8399  07BE  2FBA               	goto	u9335
  8400  07BF  3001               	movlw	1
  8401  07C0                     u9345:	
  8402  07C0  36B6               	lsrf	___ftmul@f3_as_product+2,f
  8403  07C1  0CB5               	rrf	___ftmul@f3_as_product+1,f
  8404  07C2  0CB4               	rrf	___ftmul@f3_as_product,f
  8405  07C3  0B89               	decfsz	9,f
  8406  07C4  2FC0               	goto	u9345
  8407  07C5  3001               	movlw	1
  8408  07C6  02B7               	subwf	___ftmul@cntr,f
  8409  07C7  1D03               	btfss	3,2
  8410  07C8  2FB1               	goto	l8904
  8411  07C9  0834               	movf	___ftmul@f3_as_product,w
  8412  07CA  00F3               	movwf	___ftpack@arg
  8413  07CB  0835               	movf	___ftmul@f3_as_product+1,w
  8414  07CC  00F4               	movwf	___ftpack@arg+1
  8415  07CD  0836               	movf	___ftmul@f3_as_product+2,w
  8416  07CE  00F5               	movwf	___ftpack@arg+2
  8417  07CF  0833               	movf	___ftmul@exp,w
  8418  07D0  00AF               	movwf	??___ftmul
  8419  07D1  082F               	movf	??___ftmul,w
  8420  07D2  00F6               	movwf	___ftpack@exp
  8421  07D3  0838               	movf	___ftmul@sign,w
  8422  07D4  00B0               	movwf	??___ftmul+1
  8423  07D5  0830               	movf	??___ftmul+1,w
  8424  07D6  00F7               	movwf	___ftpack@sign
  8425  07D7  3189  2113         	fcall	___ftpack
  8426  07D9  0873               	movf	?___ftpack,w
  8427  07DA  0020               	movlb	0	; select bank0
  8428  07DB  00A9               	movwf	?___ftmul
  8429  07DC  0874               	movf	?___ftpack+1,w
  8430  07DD  00AA               	movwf	?___ftmul+1
  8431  07DE  0875               	movf	?___ftpack+2,w
  8432  07DF  00AB               	movwf	?___ftmul+2
  8433  07E0  0008               	return
  8434  07E1                     __end_of___ftmul:	
  8435                           
  8436                           	psect	text36
  8437  1C56                     __ptext36:	
  8438 ;; *************** function _setMemory_Modify *****************
  8439 ;; Defined at:
  8440 ;;		line 1071 in file "../src/MCU_B1.c"
  8441 ;; Parameters:    Size  Location     Type
  8442 ;;  command         1    wreg     unsigned char 
  8443 ;; Auto vars:     Size  Location     Type
  8444 ;;  command         1    4[COMMON] unsigned char 
  8445 ;; Return value:  Size  Location     Type
  8446 ;;		None               void
  8447 ;; Registers used:
  8448 ;;		wreg, status,2, status,0
  8449 ;; Tracked objects:
  8450 ;;		On entry : 0/0
  8451 ;;		On exit  : 0/0
  8452 ;;		Unchanged: 0/0
  8453 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8454 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8455 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8456 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8457 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8458 ;;Total ram usage:        2 bytes
  8459 ;; Hardware stack levels used:    1
  8460 ;; Hardware stack levels required when called:    3
  8461 ;; This function calls:
  8462 ;;		Nothing
  8463 ;; This function is called by:
  8464 ;;		_setLog_Code
  8465 ;;		_setRFSW_AdjControl
  8466 ;; This function uses a non-reentrant model
  8467 ;;
  8468                           
  8469                           
  8470                           ;psect for function _setMemory_Modify
  8471  1C56                     _setMemory_Modify:	
  8472                           
  8473                           ;incstack = 0
  8474                           ; Regs used in _setMemory_Modify: [wreg+status,2+status,0]
  8475                           ;setMemory_Modify@command stored from wreg
  8476  1C56  00F4               	movwf	setMemory_Modify@command
  8477                           
  8478                           ;MCU_B1.c: 1072: Memory.Modify = command == 1 ? 1 : 0;
  8479  1C57  0874               	movf	setMemory_Modify@command,w
  8480  1C58  3A01               	xorlw	1
  8481  1C59  3000               	movlw	0
  8482  1C5A  1903               	skipnz
  8483  1C5B  3001               	movlw	1
  8484  1C5C  00F3               	movwf	??_setMemory_Modify
  8485  1C5D  0024               	movlb	4	; select bank4
  8486  1C5E  0844               	movf	(_Memory^(0+512)+36),w
  8487  1C5F  0673               	xorwf	??_setMemory_Modify,w
  8488  1C60  39FE               	andlw	-2
  8489  1C61  0673               	xorwf	??_setMemory_Modify,w
  8490  1C62  00C4               	movwf	(_Memory^(0+512)+36)
  8491                           
  8492                           ;MCU_B1.c: 1073: Memory.Time = 0;
  8493  1C63  01C2               	clrf	(_Memory^(0+512)+34)
  8494  1C64  01C3               	clrf	((_Memory+1)^(0+512)+34)
  8495  1C65  0008               	return
  8496  1C66                     __end_of_setMemory_Modify:	
  8497                           
  8498                           	psect	text37
  8499  1CB9                     __ptext37:	
  8500 ;; *************** function _getRF_KeyStatus *****************
  8501 ;; Defined at:
  8502 ;;		line 150 in file "../src/RF_Control_B1.c"
  8503 ;; Parameters:    Size  Location     Type
  8504 ;;		None
  8505 ;; Auto vars:     Size  Location     Type
  8506 ;;  key             1    4[COMMON] unsigned char 
  8507 ;; Return value:  Size  Location     Type
  8508 ;;                  1    wreg      unsigned char 
  8509 ;; Registers used:
  8510 ;;		wreg, status,2
  8511 ;; Tracked objects:
  8512 ;;		On entry : 0/0
  8513 ;;		On exit  : 0/0
  8514 ;;		Unchanged: 0/0
  8515 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8516 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8517 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8518 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8519 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8520 ;;Total ram usage:        3 bytes
  8521 ;; Hardware stack levels used:    1
  8522 ;; Hardware stack levels required when called:    3
  8523 ;; This function calls:
  8524 ;;		Nothing
  8525 ;; This function is called by:
  8526 ;;		_setRF_Main
  8527 ;; This function uses a non-reentrant model
  8528 ;;
  8529                           
  8530                           
  8531                           ;psect for function _getRF_KeyStatus
  8532  1CB9                     _getRF_KeyStatus:	
  8533                           
  8534                           ;RF_Control_B1.c: 151: char key = 0;
  8535                           
  8536                           ;incstack = 0
  8537                           ; Regs used in _getRF_KeyStatus: [wreg+status,2]
  8538  1CB9  01F4               	clrf	getRF_KeyStatus@key
  8539                           
  8540                           ;RF_Control_B1.c: 157: key = (RA6 == 1 || RA4 == 1 || RA0 == 1 || RB1 == 1) ? 1 : 0;
  8541  1CBA  01F5               	clrf	_getRF_KeyStatus$5308
  8542  1CBB  0AF5               	incf	_getRF_KeyStatus$5308,f
  8543  1CBC  0020               	movlb	0	; select bank0
  8544  1CBD  1F0C               	btfss	12,6	;volatile
  8545  1CBE  1A0C               	btfsc	12,4	;volatile
  8546  1CBF  2CC4               	goto	l9958
  8547  1CC0  1C0C               	btfss	12,0	;volatile
  8548  1CC1  188D               	btfsc	13,1	;volatile
  8549  1CC2  2CC4               	goto	l9958
  8550  1CC3  01F5               	clrf	_getRF_KeyStatus$5308
  8551  1CC4                     l9958:	
  8552  1CC4  0875               	movf	_getRF_KeyStatus$5308,w
  8553  1CC5  00F3               	movwf	??_getRF_KeyStatus
  8554  1CC6  0873               	movf	??_getRF_KeyStatus,w
  8555  1CC7  00F4               	movwf	getRF_KeyStatus@key
  8556                           
  8557                           ;RF_Control_B1.c: 163: return key;
  8558  1CC8  0874               	movf	getRF_KeyStatus@key,w
  8559  1CC9  0008               	return
  8560  1CCA                     __end_of_getRF_KeyStatus:	
  8561                           
  8562                           	psect	text38
  8563  1CA8                     __ptext38:	
  8564 ;; *************** function _getBuz_GO *****************
  8565 ;; Defined at:
  8566 ;;		line 82 in file "../src/Buzzer_B1.c"
  8567 ;; Parameters:    Size  Location     Type
  8568 ;;		None
  8569 ;; Auto vars:     Size  Location     Type
  8570 ;;  i               2    0[BANK0 ] int 
  8571 ;; Return value:  Size  Location     Type
  8572 ;;                  2    3[COMMON] int 
  8573 ;; Registers used:
  8574 ;;		wreg, status,2, status,0
  8575 ;; Tracked objects:
  8576 ;;		On entry : 0/0
  8577 ;;		On exit  : 0/0
  8578 ;;		Unchanged: 0/0
  8579 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8580 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8581 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8582 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8583 ;;      Totals:         4       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8584 ;;Total ram usage:        6 bytes
  8585 ;; Hardware stack levels used:    1
  8586 ;; Hardware stack levels required when called:    3
  8587 ;; This function calls:
  8588 ;;		Nothing
  8589 ;; This function is called by:
  8590 ;;		_setRF_Main
  8591 ;; This function uses a non-reentrant model
  8592 ;;
  8593                           
  8594                           
  8595                           ;psect for function _getBuz_GO
  8596  1CA8                     _getBuz_GO:	
  8597                           
  8598                           ;Buzzer_B1.c: 83: int i = Buz1.GO;
  8599                           
  8600                           ;incstack = 0
  8601                           ; Regs used in _getBuz_GO: [wreg+status,2+status,0]
  8602  1CA8  0021               	movlb	1	; select bank1
  8603  1CA9  0C3C               	rrf	_Buz1^(0+128),w
  8604  1CAA  3901               	andlw	1
  8605  1CAB  00F5               	movwf	??_getBuz_GO
  8606  1CAC  01F6               	clrf	??_getBuz_GO+1
  8607  1CAD  0875               	movf	??_getBuz_GO,w
  8608  1CAE  0020               	movlb	0	; select bank0
  8609  1CAF  00A0               	movwf	getBuz_GO@i
  8610  1CB0  0876               	movf	??_getBuz_GO+1,w
  8611  1CB1  00A1               	movwf	getBuz_GO@i+1
  8612                           
  8613                           ;Buzzer_B1.c: 84: return i;
  8614  1CB2  0821               	movf	getBuz_GO@i+1,w
  8615  1CB3  01F4               	clrf	?_getBuz_GO+1
  8616  1CB4  07F4               	addwf	?_getBuz_GO+1,f
  8617  1CB5  0820               	movf	getBuz_GO@i,w
  8618  1CB6  01F3               	clrf	?_getBuz_GO
  8619  1CB7  07F3               	addwf	?_getBuz_GO,f
  8620  1CB8  0008               	return
  8621  1CB9                     __end_of_getBuz_GO:	
  8622                           
  8623                           	psect	text39
  8624  1BE8                     __ptext39:	
  8625 ;; *************** function _RF_RxDisable *****************
  8626 ;; Defined at:
  8627 ;;		line 220 in file "../src/RF_Control_B1.c"
  8628 ;; Parameters:    Size  Location     Type
  8629 ;;		None
  8630 ;; Auto vars:     Size  Location     Type
  8631 ;;		None
  8632 ;; Return value:  Size  Location     Type
  8633 ;;		None               void
  8634 ;; Registers used:
  8635 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8636 ;; Tracked objects:
  8637 ;;		On entry : 0/0
  8638 ;;		On exit  : 0/0
  8639 ;;		Unchanged: 0/0
  8640 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8641 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8642 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8643 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8644 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8645 ;;Total ram usage:        0 bytes
  8646 ;; Hardware stack levels used:    1
  8647 ;; Hardware stack levels required when called:    5
  8648 ;; This function calls:
  8649 ;;		_CC2500_WriteCommand
  8650 ;; This function is called by:
  8651 ;;		_setRF_Main
  8652 ;; This function uses a non-reentrant model
  8653 ;;
  8654                           
  8655                           
  8656                           ;psect for function _RF_RxDisable
  8657  1BE8                     _RF_RxDisable:	
  8658                           
  8659                           ;RF_Control_B1.c: 221: if (RF1.ReceiveGO == 1 || RF1.RxStatus == 1) {
  8660                           
  8661                           ;incstack = 0
  8662                           ; Regs used in _RF_RxDisable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8663  1BE8  0021               	movlb	1	; select bank1
  8664  1BE9  18A0               	btfsc	_RF1^(0+128),1
  8665  1BEA  2BED               	goto	l2304
  8666  1BEB  1DA0               	btfss	_RF1^(0+128),3
  8667  1BEC  0008               	return
  8668  1BED                     l2304:	
  8669                           
  8670                           ;RF_Control_B1.c: 222: RF1.RxStatus = 0;
  8671  1BED  11A0               	bcf	_RF1^(0+128),3
  8672                           
  8673                           ;RF_Control_B1.c: 223: RF1.ReceiveGO = 0;
  8674  1BEE  10A0               	bcf	_RF1^(0+128),1
  8675                           
  8676                           ;RF_Control_B1.c: 224: CC2500_WriteCommand(0x36);
  8677  1BEF  3036               	movlw	54
  8678  1BF0  319D  25D8  319B   	fcall	_CC2500_WriteCommand
  8679                           
  8680                           ;RF_Control_B1.c: 225: CC2500_WriteCommand(0x3A);
  8681  1BF3  303A               	movlw	58
  8682  1BF4  319D  25D8         	fcall	_CC2500_WriteCommand
  8683  1BF6  0008               	return
  8684  1BF7                     __end_of_RF_RxDisable:	
  8685                           
  8686                           	psect	text40
  8687  0B0C                     __ptext40:	
  8688 ;; *************** function _CC2500_TxData *****************
  8689 ;; Defined at:
  8690 ;;		line 32 in file "../src/CC2500_B1.c"
  8691 ;; Parameters:    Size  Location     Type
  8692 ;;		None
  8693 ;; Auto vars:     Size  Location     Type
  8694 ;;  loop_e          1    0[BANK0 ] unsigned char 
  8695 ;; Return value:  Size  Location     Type
  8696 ;;		None               void
  8697 ;; Registers used:
  8698 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8699 ;; Tracked objects:
  8700 ;;		On entry : 0/0
  8701 ;;		On exit  : 0/0
  8702 ;;		Unchanged: 0/0
  8703 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8704 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8705 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8706 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8707 ;;      Totals:         1       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8708 ;;Total ram usage:        2 bytes
  8709 ;; Hardware stack levels used:    1
  8710 ;; Hardware stack levels required when called:    5
  8711 ;; This function calls:
  8712 ;;		_CC2500_WriteByte
  8713 ;;		_CC2500_WriteCommand
  8714 ;;		_RF_Timeout_Counter
  8715 ;;		_setRF_TimeoutCleared
  8716 ;; This function is called by:
  8717 ;;		_setRF_Main
  8718 ;; This function uses a non-reentrant model
  8719 ;;
  8720                           
  8721                           
  8722                           ;psect for function _CC2500_TxData
  8723  0B0C                     _CC2500_TxData:	
  8724                           
  8725                           ;CC2500_B1.c: 33: unsigned char loop_e;
  8726                           ;CC2500_B1.c: 35: CC2500_WriteCommand(0x36);
  8727                           
  8728                           ;incstack = 0
  8729                           ; Regs used in _CC2500_TxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8730  0B0C  3036               	movlw	54
  8731  0B0D  319D  25D8  318B   	fcall	_CC2500_WriteCommand
  8732                           
  8733                           ;CC2500_B1.c: 36: CC2500_WriteCommand(0x3B);
  8734  0B10  303B               	movlw	59
  8735  0B11  319D  25D8  318B   	fcall	_CC2500_WriteCommand
  8736                           
  8737                           ;CC2500_B1.c: 38: RC4 = 0;
  8738  0B14  0020               	movlb	0	; select bank0
  8739  0B15  120E               	bcf	14,4	;volatile
  8740                           
  8741                           ;CC2500_B1.c: 39: SPI0Buffer = 0x3F + 0x40;
  8742  0B16  307F               	movlw	127
  8743  0B17  00F7               	movwf	??_CC2500_TxData
  8744  0B18  0877               	movf	??_CC2500_TxData,w
  8745  0B19  0021               	movlb	1	; select bank1
  8746  0B1A  00D4               	movwf	_SPI0Buffer^(0+128)
  8747                           
  8748                           ;CC2500_B1.c: 40: while (RC2 == 1 && RF1.Timeout == 0) {
  8749  0B1B  2B1F               	goto	l9654
  8750  0B1C                     l9652:	
  8751                           
  8752                           ;CC2500_B1.c: 41: RF_Timeout_Counter();
  8753  0B1C  319D  2529  318B   	fcall	_RF_Timeout_Counter
  8754  0B1F                     l9654:	
  8755  0B1F  0020               	movlb	0	; select bank0
  8756  0B20  1D0E               	btfss	14,2	;volatile
  8757  0B21  2B25               	goto	l9658
  8758  0B22  0021               	movlb	1	; select bank1
  8759  0B23  1F21               	btfss	(_RF1^(0+128)+1),6
  8760  0B24  2B1C               	goto	l9652
  8761  0B25                     l9658:	
  8762                           
  8763                           ;CC2500_B1.c: 42: };
  8764                           ;CC2500_B1.c: 43: setRF_TimeoutCleared();
  8765  0B25  319A  22D6  318B   	fcall	_setRF_TimeoutCleared
  8766                           
  8767                           ;CC2500_B1.c: 45: CC2500_WriteByte();
  8768  0B28  319D  25C0  318B   	fcall	_CC2500_WriteByte
  8769                           
  8770                           ;CC2500_B1.c: 46: SPI0Buffer = Tx_Length;
  8771  0B2B  0021               	movlb	1	; select bank1
  8772  0B2C  0856               	movf	_Tx_Length^(0+128),w
  8773  0B2D  00F7               	movwf	??_CC2500_TxData
  8774  0B2E  0877               	movf	??_CC2500_TxData,w
  8775  0B2F  00D4               	movwf	_SPI0Buffer^(0+128)
  8776                           
  8777                           ;CC2500_B1.c: 47: CC2500_WriteByte();
  8778  0B30  319D  25C0  318B   	fcall	_CC2500_WriteByte
  8779                           
  8780                           ;CC2500_B1.c: 48: for (loop_e = 0; loop_e < Tx_Length; loop_e++) {
  8781  0B33  0020               	movlb	0	; select bank0
  8782  0B34  01A0               	clrf	CC2500_TxData@loop_e
  8783  0B35                     l9672:	
  8784  0B35  0021               	movlb	1	; select bank1
  8785  0B36  0856               	movf	_Tx_Length^(0+128),w
  8786  0B37  0020               	movlb	0	; select bank0
  8787  0B38  0220               	subwf	CC2500_TxData@loop_e,w
  8788  0B39  1803               	btfsc	3,0
  8789  0B3A  2B4E               	goto	l255
  8790                           
  8791                           ;CC2500_B1.c: 49: SPI0Buffer = RF_Data[loop_e];
  8792  0B3B  0820               	movf	CC2500_TxData@loop_e,w
  8793  0B3C  3EA0               	addlw	_RF_Data& (0+255)
  8794  0B3D  0086               	movwf	6
  8795  0B3E  3001               	movlw	1	; select bank3/4
  8796  0B3F  0087               	movwf	7
  8797  0B40  0801               	movf	1,w
  8798  0B41  00F7               	movwf	??_CC2500_TxData
  8799  0B42  0877               	movf	??_CC2500_TxData,w
  8800  0B43  0021               	movlb	1	; select bank1
  8801  0B44  00D4               	movwf	_SPI0Buffer^(0+128)
  8802                           
  8803                           ;CC2500_B1.c: 50: CC2500_WriteByte();
  8804  0B45  319D  25C0  318B   	fcall	_CC2500_WriteByte
  8805  0B48  3001               	movlw	1
  8806  0B49  00F7               	movwf	??_CC2500_TxData
  8807  0B4A  0877               	movf	??_CC2500_TxData,w
  8808  0B4B  0020               	movlb	0	; select bank0
  8809  0B4C  07A0               	addwf	CC2500_TxData@loop_e,f
  8810  0B4D  2B35               	goto	l9672
  8811  0B4E                     l255:	
  8812                           
  8813                           ;CC2500_B1.c: 51: }
  8814                           ;CC2500_B1.c: 52: RC4 = 1;
  8815  0B4E  160E               	bsf	14,4	;volatile
  8816                           
  8817                           ;CC2500_B1.c: 53: CC2500_WriteCommand(0x35);
  8818  0B4F  3035               	movlw	53
  8819  0B50  319D  25D8  318B   	fcall	_CC2500_WriteCommand
  8820                           
  8821                           ;CC2500_B1.c: 54: while (RB0 == 0 && RF1.Timeout == 0) {
  8822  0B53  2B57               	goto	l9678
  8823  0B54                     l9676:	
  8824                           
  8825                           ;CC2500_B1.c: 55: RF_Timeout_Counter();
  8826  0B54  319D  2529  318B   	fcall	_RF_Timeout_Counter
  8827  0B57                     l9678:	
  8828  0B57  0020               	movlb	0	; select bank0
  8829  0B58  180D               	btfsc	13,0	;volatile
  8830  0B59  2B5D               	goto	l9682
  8831  0B5A  0021               	movlb	1	; select bank1
  8832  0B5B  1F21               	btfss	(_RF1^(0+128)+1),6
  8833  0B5C  2B54               	goto	l9676
  8834  0B5D                     l9682:	
  8835                           
  8836                           ;CC2500_B1.c: 56: };
  8837                           ;CC2500_B1.c: 57: setRF_TimeoutCleared();
  8838  0B5D  319A  22D6  318B   	fcall	_setRF_TimeoutCleared
  8839                           
  8840                           ;CC2500_B1.c: 59: while (RB0 == 1 && RF1.Timeout == 0) {
  8841  0B60  2B64               	goto	l9686
  8842  0B61                     l9684:	
  8843                           
  8844                           ;CC2500_B1.c: 60: RF_Timeout_Counter();
  8845  0B61  319D  2529  318B   	fcall	_RF_Timeout_Counter
  8846  0B64                     l9686:	
  8847  0B64  0020               	movlb	0	; select bank0
  8848  0B65  1C0D               	btfss	13,0	;volatile
  8849  0B66  2B6A               	goto	l9690
  8850  0B67  0021               	movlb	1	; select bank1
  8851  0B68  1F21               	btfss	(_RF1^(0+128)+1),6
  8852  0B69  2B61               	goto	l9684
  8853  0B6A                     l9690:	
  8854                           
  8855                           ;CC2500_B1.c: 61: };
  8856                           ;CC2500_B1.c: 62: setRF_TimeoutCleared();
  8857  0B6A  319A  22D6  318B   	fcall	_setRF_TimeoutCleared
  8858                           
  8859                           ;CC2500_B1.c: 64: CC2500_WriteCommand(0x36);
  8860  0B6D  3036               	movlw	54
  8861  0B6E  319D  25D8  318B   	fcall	_CC2500_WriteCommand
  8862                           
  8863                           ;CC2500_B1.c: 65: CC2500_WriteCommand(0x3B);
  8864  0B71  303B               	movlw	59
  8865  0B72  319D  25D8         	fcall	_CC2500_WriteCommand
  8866                           
  8867                           ;CC2500_B1.c: 67: Transceive_OK = 1;
  8868  0B74  14F8               	bsf	_Transceive_OK/(0+8),_Transceive_OK& (0+7)
  8869  0B75  0008               	return
  8870  0B76                     __end_of_CC2500_TxData:	
  8871                           
  8872                           	psect	text41
  8873  09DB                     __ptext41:	
  8874 ;; *************** function _CC2500_RxData *****************
  8875 ;; Defined at:
  8876 ;;		line 73 in file "../src/CC2500_B1.c"
  8877 ;; Parameters:    Size  Location     Type
  8878 ;;		None
  8879 ;; Auto vars:     Size  Location     Type
  8880 ;;  loop_f          1    0[BANK0 ] unsigned char 
  8881 ;; Return value:  Size  Location     Type
  8882 ;;		None               void
  8883 ;; Registers used:
  8884 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8885 ;; Tracked objects:
  8886 ;;		On entry : 0/0
  8887 ;;		On exit  : 0/0
  8888 ;;		Unchanged: 0/0
  8889 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8890 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8891 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8892 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8893 ;;      Totals:         1       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8894 ;;Total ram usage:        2 bytes
  8895 ;; Hardware stack levels used:    1
  8896 ;; Hardware stack levels required when called:    5
  8897 ;; This function calls:
  8898 ;;		_CC2500_ReadByte
  8899 ;;		_CC2500_ReadStatus
  8900 ;;		_CC2500_WriteByte
  8901 ;;		_CC2500_WriteCommand
  8902 ;;		_RF_Timeout_Counter
  8903 ;;		_setRF_TimeoutCleared
  8904 ;; This function is called by:
  8905 ;;		_setRF_Main
  8906 ;; This function uses a non-reentrant model
  8907 ;;
  8908                           
  8909                           
  8910                           ;psect for function _CC2500_RxData
  8911  09DB                     _CC2500_RxData:	
  8912                           
  8913                           ;CC2500_B1.c: 74: unsigned char loop_f;
  8914                           ;CC2500_B1.c: 78: if (RB0 == 0) {
  8915                           
  8916                           ;incstack = 0
  8917                           ; Regs used in _CC2500_RxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8918  09DB  0020               	movlb	0	; select bank0
  8919  09DC  180D               	btfsc	13,0	;volatile
  8920  09DD  0008               	return
  8921                           
  8922                           ;CC2500_B1.c: 87: CC2500_ReadStatus(0x3B);
  8923  09DE  303B               	movlw	59
  8924  09DF  319F  273F  3189   	fcall	_CC2500_ReadStatus
  8925                           
  8926                           ;CC2500_B1.c: 89: if (s_data != 0) {
  8927  09E2  0021               	movlb	1	; select bank1
  8928  09E3  0859               	movf	_s_data^(0+128),w
  8929  09E4  1903               	btfsc	3,2
  8930  09E5  0008               	return
  8931                           
  8932                           ;CC2500_B1.c: 90: RC4 = 0;
  8933  09E6  0020               	movlb	0	; select bank0
  8934  09E7  120E               	bcf	14,4	;volatile
  8935                           
  8936                           ;CC2500_B1.c: 91: SPI0Buffer = 0x3F + 0xC0;
  8937  09E8  30FF               	movlw	255
  8938  09E9  00F7               	movwf	??_CC2500_RxData
  8939  09EA  0877               	movf	??_CC2500_RxData,w
  8940  09EB  0021               	movlb	1	; select bank1
  8941  09EC  00D4               	movwf	_SPI0Buffer^(0+128)
  8942                           
  8943                           ;CC2500_B1.c: 93: while (RC2 == 1 && RF1.Timeout == 0) {
  8944  09ED  29F1               	goto	l9710
  8945  09EE                     l9708:	
  8946                           
  8947                           ;CC2500_B1.c: 94: RF_Timeout_Counter();
  8948  09EE  319D  2529  3189   	fcall	_RF_Timeout_Counter
  8949  09F1                     l9710:	
  8950  09F1  0020               	movlb	0	; select bank0
  8951  09F2  1D0E               	btfss	14,2	;volatile
  8952  09F3  29F7               	goto	l9714
  8953  09F4  0021               	movlb	1	; select bank1
  8954  09F5  1F21               	btfss	(_RF1^(0+128)+1),6
  8955  09F6  29EE               	goto	l9708
  8956  09F7                     l9714:	
  8957                           
  8958                           ;CC2500_B1.c: 95: };
  8959                           ;CC2500_B1.c: 96: setRF_TimeoutCleared();
  8960  09F7  319A  22D6  3189   	fcall	_setRF_TimeoutCleared
  8961                           
  8962                           ;CC2500_B1.c: 98: CC2500_WriteByte();
  8963  09FA  319D  25C0  3189   	fcall	_CC2500_WriteByte
  8964                           
  8965                           ;CC2500_B1.c: 99: CC2500_ReadByte();
  8966  09FD  319E  2642  3189   	fcall	_CC2500_ReadByte
  8967                           
  8968                           ;CC2500_B1.c: 100: Rx_Length = SPI0Buffer;
  8969  0A00  0021               	movlb	1	; select bank1
  8970  0A01  0854               	movf	_SPI0Buffer^(0+128),w
  8971  0A02  00F7               	movwf	??_CC2500_RxData
  8972  0A03  0877               	movf	??_CC2500_RxData,w
  8973  0A04  00D3               	movwf	_Rx_Length^(0+128)
  8974                           
  8975                           ;CC2500_B1.c: 101: for (loop_f = 0; loop_f < Rx_Length; loop_f++) {
  8976  0A05  0020               	movlb	0	; select bank0
  8977  0A06  01A0               	clrf	CC2500_RxData@loop_f
  8978  0A07                     l9730:	
  8979  0A07  0021               	movlb	1	; select bank1
  8980  0A08  0853               	movf	_Rx_Length^(0+128),w
  8981  0A09  0020               	movlb	0	; select bank0
  8982  0A0A  0220               	subwf	CC2500_RxData@loop_f,w
  8983  0A0B  1803               	btfsc	3,0
  8984  0A0C  2A20               	goto	l9732
  8985                           
  8986                           ;CC2500_B1.c: 102: CC2500_ReadByte();
  8987  0A0D  319E  2642  3189   	fcall	_CC2500_ReadByte
  8988                           
  8989                           ;CC2500_B1.c: 103: RF_Data[loop_f] = SPI0Buffer;
  8990  0A10  0021               	movlb	1	; select bank1
  8991  0A11  0854               	movf	_SPI0Buffer^(0+128),w
  8992  0A12  00F7               	movwf	??_CC2500_RxData
  8993  0A13  0020               	movlb	0	; select bank0
  8994  0A14  0820               	movf	CC2500_RxData@loop_f,w
  8995  0A15  3EA0               	addlw	_RF_Data& (0+255)
  8996  0A16  0086               	movwf	6
  8997  0A17  3001               	movlw	1	; select bank3/4
  8998  0A18  0087               	movwf	7
  8999  0A19  0877               	movf	??_CC2500_RxData,w
  9000  0A1A  0081               	movwf	1
  9001  0A1B  3001               	movlw	1
  9002  0A1C  00F7               	movwf	??_CC2500_RxData
  9003  0A1D  0877               	movf	??_CC2500_RxData,w
  9004  0A1E  07A0               	addwf	CC2500_RxData@loop_f,f
  9005  0A1F  2A07               	goto	l9730
  9006  0A20                     l9732:	
  9007                           
  9008                           ;CC2500_B1.c: 104: }
  9009                           ;CC2500_B1.c: 105: CC2500_ReadByte();
  9010  0A20  319E  2642  3189   	fcall	_CC2500_ReadByte
  9011                           
  9012                           ;CC2500_B1.c: 106: RSSI = SPI0Buffer;
  9013  0A23  0021               	movlb	1	; select bank1
  9014  0A24  0854               	movf	_SPI0Buffer^(0+128),w
  9015  0A25  00F7               	movwf	??_CC2500_RxData
  9016  0A26  0877               	movf	??_CC2500_RxData,w
  9017  0A27  00D2               	movwf	_RSSI^(0+128)
  9018                           
  9019                           ;CC2500_B1.c: 107: CC2500_ReadByte();
  9020  0A28  319E  2642  3189   	fcall	_CC2500_ReadByte
  9021                           
  9022                           ;CC2500_B1.c: 108: CRC = SPI0Buffer;
  9023  0A2B  0021               	movlb	1	; select bank1
  9024  0A2C  0854               	movf	_SPI0Buffer^(0+128),w
  9025  0A2D  00F7               	movwf	??_CC2500_RxData
  9026  0A2E  0877               	movf	??_CC2500_RxData,w
  9027  0A2F  00CD               	movwf	_CRC^(0+128)
  9028                           
  9029                           ;CC2500_B1.c: 109: RC4 = 1;
  9030  0A30  0020               	movlb	0	; select bank0
  9031  0A31  160E               	bsf	14,4	;volatile
  9032                           
  9033                           ;CC2500_B1.c: 110: if (CRC & 0x80)
  9034  0A32  0021               	movlb	1	; select bank1
  9035  0A33  1BCD               	btfsc	_CRC^(0+128),7
  9036                           
  9037                           ;CC2500_B1.c: 111: Receive_OK = 1;
  9038  0A34  1478               	bsf	_Receive_OK/(0+8),_Receive_OK& (0+7)
  9039                           
  9040                           ;CC2500_B1.c: 113: RF1.RxStatus = 0;
  9041  0A35  11A0               	bcf	_RF1^(0+128),3
  9042                           
  9043                           ;CC2500_B1.c: 114: RF1.ReceiveGO = 1;
  9044  0A36  14A0               	bsf	_RF1^(0+128),1
  9045                           
  9046                           ;CC2500_B1.c: 115: CC2500_WriteCommand(0x36);
  9047  0A37  3036               	movlw	54
  9048  0A38  319D  25D8  3189   	fcall	_CC2500_WriteCommand
  9049                           
  9050                           ;CC2500_B1.c: 116: CC2500_WriteCommand(0x3A);
  9051  0A3B  303A               	movlw	58
  9052  0A3C  319D  25D8         	fcall	_CC2500_WriteCommand
  9053  0A3E  0021               	movlb	1	; select bank1
  9054  0A3F  0008               	return
  9055  0A40                     __end_of_CC2500_RxData:	
  9056                           
  9057                           	psect	text42
  9058  1F3F                     __ptext42:	
  9059 ;; *************** function _CC2500_ReadStatus *****************
  9060 ;; Defined at:
  9061 ;;		line 308 in file "../src/CC2500_B1.c"
  9062 ;; Parameters:    Size  Location     Type
  9063 ;;  status_addr     1    wreg     unsigned char 
  9064 ;; Auto vars:     Size  Location     Type
  9065 ;;  status_addr     1    6[COMMON] unsigned char 
  9066 ;; Return value:  Size  Location     Type
  9067 ;;		None               void
  9068 ;; Registers used:
  9069 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9070 ;; Tracked objects:
  9071 ;;		On entry : 0/0
  9072 ;;		On exit  : 0/0
  9073 ;;		Unchanged: 0/0
  9074 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9075 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9076 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9077 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9078 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9079 ;;Total ram usage:        2 bytes
  9080 ;; Hardware stack levels used:    1
  9081 ;; Hardware stack levels required when called:    4
  9082 ;; This function calls:
  9083 ;;		_CC2500_ReadByte
  9084 ;;		_CC2500_WriteByte
  9085 ;;		_RF_Timeout_Counter
  9086 ;;		_setRF_TimeoutCleared
  9087 ;; This function is called by:
  9088 ;;		_CC2500_RxData
  9089 ;; This function uses a non-reentrant model
  9090 ;;
  9091                           
  9092                           
  9093                           ;psect for function _CC2500_ReadStatus
  9094  1F3F                     _CC2500_ReadStatus:	
  9095                           
  9096                           ;incstack = 0
  9097                           ; Regs used in _CC2500_ReadStatus: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9098                           ;CC2500_ReadStatus@status_addr stored from wreg
  9099  1F3F  00F6               	movwf	CC2500_ReadStatus@status_addr
  9100                           
  9101                           ;CC2500_B1.c: 309: RC4 = 0;
  9102  1F40  0020               	movlb	0	; select bank0
  9103  1F41  120E               	bcf	14,4	;volatile
  9104                           
  9105                           ;CC2500_B1.c: 310: SPI0Buffer = status_addr + 0xC0;
  9106  1F42  0876               	movf	CC2500_ReadStatus@status_addr,w
  9107  1F43  3EC0               	addlw	192
  9108  1F44  00F5               	movwf	??_CC2500_ReadStatus
  9109  1F45  0875               	movf	??_CC2500_ReadStatus,w
  9110  1F46  0021               	movlb	1	; select bank1
  9111  1F47  00D4               	movwf	_SPI0Buffer^(0+128)
  9112                           
  9113                           ;CC2500_B1.c: 312: while (RC2 == 1 && RF1.Timeout == 0) {
  9114  1F48  2F4C               	goto	l9430
  9115  1F49                     l9428:	
  9116                           
  9117                           ;CC2500_B1.c: 313: RF_Timeout_Counter();
  9118  1F49  319D  2529  319F   	fcall	_RF_Timeout_Counter
  9119  1F4C                     l9430:	
  9120  1F4C  0020               	movlb	0	; select bank0
  9121  1F4D  1D0E               	btfss	14,2	;volatile
  9122  1F4E  2F52               	goto	l9434
  9123  1F4F  0021               	movlb	1	; select bank1
  9124  1F50  1F21               	btfss	(_RF1^(0+128)+1),6
  9125  1F51  2F49               	goto	l9428
  9126  1F52                     l9434:	
  9127                           
  9128                           ;CC2500_B1.c: 314: };
  9129                           ;CC2500_B1.c: 315: setRF_TimeoutCleared();
  9130  1F52  319A  22D6  319F   	fcall	_setRF_TimeoutCleared
  9131                           
  9132                           ;CC2500_B1.c: 317: CC2500_WriteByte();
  9133  1F55  319D  25C0  319F   	fcall	_CC2500_WriteByte
  9134                           
  9135                           ;CC2500_B1.c: 318: CC2500_ReadByte();
  9136  1F58  319E  2642         	fcall	_CC2500_ReadByte
  9137                           
  9138                           ;CC2500_B1.c: 319: RC4 = 1;
  9139  1F5A  0020               	movlb	0	; select bank0
  9140  1F5B  160E               	bsf	14,4	;volatile
  9141                           
  9142                           ;CC2500_B1.c: 321: s_data = SPI0Buffer;
  9143  1F5C  0021               	movlb	1	; select bank1
  9144  1F5D  0854               	movf	_SPI0Buffer^(0+128),w
  9145  1F5E  00F5               	movwf	??_CC2500_ReadStatus
  9146  1F5F  0875               	movf	??_CC2500_ReadStatus,w
  9147  1F60  00D9               	movwf	_s_data^(0+128)
  9148  1F61  0008               	return
  9149  1F62                     __end_of_CC2500_ReadStatus:	
  9150                           
  9151                           	psect	text43
  9152  1E42                     __ptext43:	
  9153 ;; *************** function _CC2500_ReadByte *****************
  9154 ;; Defined at:
  9155 ;;		line 242 in file "../src/CC2500_B1.c"
  9156 ;; Parameters:    Size  Location     Type
  9157 ;;		None
  9158 ;; Auto vars:     Size  Location     Type
  9159 ;;  loop_b          1    4[COMMON] unsigned char 
  9160 ;; Return value:  Size  Location     Type
  9161 ;;		None               void
  9162 ;; Registers used:
  9163 ;;		wreg, status,2, status,0
  9164 ;; Tracked objects:
  9165 ;;		On entry : 0/0
  9166 ;;		On exit  : 0/0
  9167 ;;		Unchanged: 0/0
  9168 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9169 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9170 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9171 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9172 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9173 ;;Total ram usage:        2 bytes
  9174 ;; Hardware stack levels used:    1
  9175 ;; Hardware stack levels required when called:    3
  9176 ;; This function calls:
  9177 ;;		Nothing
  9178 ;; This function is called by:
  9179 ;;		_CC2500_RxData
  9180 ;;		_CC2500_ReadStatus
  9181 ;;		_CC2500_ReadREG
  9182 ;; This function uses a non-reentrant model
  9183 ;;
  9184                           
  9185                           
  9186                           ;psect for function _CC2500_ReadByte
  9187  1E42                     _CC2500_ReadByte:	
  9188                           
  9189                           ;CC2500_B1.c: 243: unsigned char loop_b;
  9190                           ;CC2500_B1.c: 244: for (loop_b = 0; loop_b < 8; loop_b++) {
  9191                           
  9192                           ;incstack = 0
  9193                           ; Regs used in _CC2500_ReadByte: [wreg+status,2+status,0]
  9194  1E42  01F4               	clrf	CC2500_ReadByte@loop_b
  9195  1E43                     L4:	
  9196  1E43  3008               	movlw	8
  9197  1E44  0274               	subwf	CC2500_ReadByte@loop_b,w
  9198  1E45  1803               	btfsc	3,0
  9199  1E46  0008               	return
  9200                           
  9201                           ;CC2500_B1.c: 245: RC1 = 1;
  9202  1E47  0020               	movlb	0	; select bank0
  9203  1E48  148E               	bsf	14,1	;volatile
  9204                           
  9205                           ;CC2500_B1.c: 246: SPI0Buffer <<= 1;
  9206  1E49  1003               	clrc
  9207  1E4A  0021               	movlb	1	; select bank1
  9208  1E4B  0DD4               	rlf	_SPI0Buffer^(0+128),f
  9209                           
  9210                           ;CC2500_B1.c: 247: if (RC2 == 1)
  9211  1E4C  0020               	movlb	0	; select bank0
  9212  1E4D  1D0E               	btfss	14,2	;volatile
  9213  1E4E  2E52               	goto	l9318
  9214                           
  9215                           ;CC2500_B1.c: 248: SPI0Buffer |= 0x01;
  9216  1E4F  0021               	movlb	1	; select bank1
  9217  1E50  1454               	bsf	_SPI0Buffer^(0+128),0
  9218  1E51  2E57               	goto	l9320
  9219  1E52                     l9318:	
  9220                           
  9221                           ;CC2500_B1.c: 249: else
  9222                           ;CC2500_B1.c: 250: SPI0Buffer &= 0xFE;
  9223  1E52  30FE               	movlw	254
  9224  1E53  00F3               	movwf	??_CC2500_ReadByte
  9225  1E54  0873               	movf	??_CC2500_ReadByte,w
  9226  1E55  0021               	movlb	1	; select bank1
  9227  1E56  05D4               	andwf	_SPI0Buffer^(0+128),f
  9228  1E57                     l9320:	
  9229                           
  9230                           ;CC2500_B1.c: 251: RC1 = 0;
  9231  1E57  0020               	movlb	0	; select bank0
  9232  1E58  108E               	bcf	14,1	;volatile
  9233  1E59  3001               	movlw	1
  9234  1E5A  00F3               	movwf	??_CC2500_ReadByte
  9235  1E5B  0873               	movf	??_CC2500_ReadByte,w
  9236  1E5C  07F4               	addwf	CC2500_ReadByte@loop_b,f
  9237  1E5D  2E43               	goto	L4
  9238  1E5E                     __end_of_CC2500_ReadByte:	
  9239                           
  9240                           	psect	text44
  9241  1D3E                     __ptext44:	
  9242 ;; *************** function _CC2500_PowerOnInitial *****************
  9243 ;; Defined at:
  9244 ;;		line 126 in file "../src/CC2500_B1.c"
  9245 ;; Parameters:    Size  Location     Type
  9246 ;;		None
  9247 ;; Auto vars:     Size  Location     Type
  9248 ;;		None
  9249 ;; Return value:  Size  Location     Type
  9250 ;;		None               void
  9251 ;; Registers used:
  9252 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9253 ;; Tracked objects:
  9254 ;;		On entry : 0/0
  9255 ;;		On exit  : 0/0
  9256 ;;		Unchanged: 0/0
  9257 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9258 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9259 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9260 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9261 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9262 ;;Total ram usage:        0 bytes
  9263 ;; Hardware stack levels used:    1
  9264 ;; Hardware stack levels required when called:    6
  9265 ;; This function calls:
  9266 ;;		_CC2500_ClearRXFIFO
  9267 ;;		_CC2500_ClearTXFIFO
  9268 ;;		_CC2500_FrequencyCabr
  9269 ;;		_CC2500_InitPATable
  9270 ;;		_CC2500_InitSetREG
  9271 ;;		_CC2500_PowerRST
  9272 ;;		_CC2500_SIDLEMode
  9273 ;; This function is called by:
  9274 ;;		_main
  9275 ;;		_setRF_Main
  9276 ;; This function uses a non-reentrant model
  9277 ;;
  9278                           
  9279                           
  9280                           ;psect for function _CC2500_PowerOnInitial
  9281  1D3E                     _CC2500_PowerOnInitial:	
  9282                           
  9283                           ;CC2500_B1.c: 127: CC2500_PowerRST();
  9284                           
  9285                           ;incstack = 0
  9286                           ; Regs used in _CC2500_PowerOnInitial: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9287  1D3E  3193  2372  319D   	fcall	_CC2500_PowerRST
  9288                           
  9289                           ;CC2500_B1.c: 128: CC2500_InitSetREG();
  9290  1D41  3190  208B  319D   	fcall	_CC2500_InitSetREG
  9291                           
  9292                           ;CC2500_B1.c: 129: CC2500_InitPATable();
  9293  1D44  3187  27E1  319D   	fcall	_CC2500_InitPATable
  9294                           
  9295                           ;CC2500_B1.c: 130: CC2500_ClearTXFIFO();
  9296  1D47  319A  22DE  319D   	fcall	_CC2500_ClearTXFIFO
  9297                           
  9298                           ;CC2500_B1.c: 131: CC2500_ClearRXFIFO();
  9299  1D4A  319A  22DA  319D   	fcall	_CC2500_ClearRXFIFO
  9300                           
  9301                           ;CC2500_B1.c: 132: CC2500_FrequencyCabr();
  9302  1D4D  319B  235F  319D   	fcall	_CC2500_FrequencyCabr
  9303                           
  9304                           ;CC2500_B1.c: 133: CC2500_SIDLEMode();
  9305  1D50  319A  22E2         	fcall	_CC2500_SIDLEMode
  9306  1D52  0008               	return
  9307  1D53                     __end_of_CC2500_PowerOnInitial:	
  9308                           
  9309                           	psect	text45
  9310  1AE2                     __ptext45:	
  9311 ;; *************** function _CC2500_SIDLEMode *****************
  9312 ;; Defined at:
  9313 ;;		line 216 in file "../src/CC2500_B1.c"
  9314 ;; Parameters:    Size  Location     Type
  9315 ;;		None
  9316 ;; Auto vars:     Size  Location     Type
  9317 ;;		None
  9318 ;; Return value:  Size  Location     Type
  9319 ;;		None               void
  9320 ;; Registers used:
  9321 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9322 ;; Tracked objects:
  9323 ;;		On entry : 0/0
  9324 ;;		On exit  : 0/0
  9325 ;;		Unchanged: 0/0
  9326 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9327 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9328 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9329 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9330 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9331 ;;Total ram usage:        0 bytes
  9332 ;; Hardware stack levels used:    1
  9333 ;; Hardware stack levels required when called:    5
  9334 ;; This function calls:
  9335 ;;		_CC2500_WriteCommand
  9336 ;; This function is called by:
  9337 ;;		_CC2500_PowerOnInitial
  9338 ;; This function uses a non-reentrant model
  9339 ;;
  9340                           
  9341                           
  9342                           ;psect for function _CC2500_SIDLEMode
  9343  1AE2                     _CC2500_SIDLEMode:	
  9344                           
  9345                           ;CC2500_B1.c: 217: CC2500_WriteCommand(0x36);
  9346                           
  9347                           ;incstack = 0
  9348                           ; Regs used in _CC2500_SIDLEMode: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9349  1AE2  3036               	movlw	54
  9350  1AE3  319D  25D8         	fcall	_CC2500_WriteCommand
  9351  1AE5  0008               	return
  9352  1AE6                     __end_of_CC2500_SIDLEMode:	
  9353                           
  9354                           	psect	text46
  9355  1372                     __ptext46:	
  9356 ;; *************** function _CC2500_PowerRST *****************
  9357 ;; Defined at:
  9358 ;;		line 139 in file "../src/CC2500_B1.c"
  9359 ;; Parameters:    Size  Location     Type
  9360 ;;		None
  9361 ;; Auto vars:     Size  Location     Type
  9362 ;;		None
  9363 ;; Return value:  Size  Location     Type
  9364 ;;		None               void
  9365 ;; Registers used:
  9366 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9367 ;; Tracked objects:
  9368 ;;		On entry : 0/0
  9369 ;;		On exit  : 0/0
  9370 ;;		Unchanged: 0/0
  9371 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9372 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9373 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9374 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9375 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9376 ;;Total ram usage:        1 bytes
  9377 ;; Hardware stack levels used:    1
  9378 ;; Hardware stack levels required when called:    4
  9379 ;; This function calls:
  9380 ;;		_CC2500_WriteByte
  9381 ;;		_DelayTime_1us
  9382 ;;		_RF_Timeout_Counter
  9383 ;;		_setRF_TimeoutCleared
  9384 ;; This function is called by:
  9385 ;;		_CC2500_PowerOnInitial
  9386 ;; This function uses a non-reentrant model
  9387 ;;
  9388                           
  9389                           
  9390                           ;psect for function _CC2500_PowerRST
  9391  1372                     _CC2500_PowerRST:	
  9392                           
  9393                           ;CC2500_B1.c: 140: RC1 = 0;
  9394                           
  9395                           ;incstack = 0
  9396                           ; Regs used in _CC2500_PowerRST: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9397  1372  0020               	movlb	0	; select bank0
  9398  1373  108E               	bcf	14,1	;volatile
  9399                           
  9400                           ;CC2500_B1.c: 141: RC0 = 0;
  9401  1374  100E               	bcf	14,0	;volatile
  9402                           
  9403                           ;CC2500_B1.c: 142: RC4 = 1;
  9404  1375  160E               	bsf	14,4	;volatile
  9405                           
  9406                           ;CC2500_B1.c: 143: DelayTime_1us(10);
  9407  1376  300A               	movlw	10
  9408  1377  00F3               	movwf	DelayTime_1us@count
  9409  1378  3000               	movlw	0
  9410  1379  00F4               	movwf	DelayTime_1us@count+1
  9411  137A  319F  2786  3193   	fcall	_DelayTime_1us
  9412                           
  9413                           ;CC2500_B1.c: 144: RC4 = 0;
  9414  137D  0020               	movlb	0	; select bank0
  9415  137E  120E               	bcf	14,4	;volatile
  9416                           
  9417                           ;CC2500_B1.c: 145: DelayTime_1us(10);
  9418  137F  300A               	movlw	10
  9419  1380  00F3               	movwf	DelayTime_1us@count
  9420  1381  3000               	movlw	0
  9421  1382  00F4               	movwf	DelayTime_1us@count+1
  9422  1383  319F  2786  3193   	fcall	_DelayTime_1us
  9423                           
  9424                           ;CC2500_B1.c: 146: RC4 = 1;
  9425  1386  0020               	movlb	0	; select bank0
  9426  1387  160E               	bsf	14,4	;volatile
  9427                           
  9428                           ;CC2500_B1.c: 147: DelayTime_1us(40);
  9429  1388  3028               	movlw	40
  9430  1389  00F3               	movwf	DelayTime_1us@count
  9431  138A  3000               	movlw	0
  9432  138B  00F4               	movwf	DelayTime_1us@count+1
  9433  138C  319F  2786  3193   	fcall	_DelayTime_1us
  9434                           
  9435                           ;CC2500_B1.c: 148: RC4 = 0;
  9436  138F  0020               	movlb	0	; select bank0
  9437  1390  120E               	bcf	14,4	;volatile
  9438                           
  9439                           ;CC2500_B1.c: 149: SPI0Buffer = 0x30;
  9440  1391  3030               	movlw	48
  9441  1392  00F5               	movwf	??_CC2500_PowerRST
  9442  1393  0875               	movf	??_CC2500_PowerRST,w
  9443  1394  0021               	movlb	1	; select bank1
  9444  1395  00D4               	movwf	_SPI0Buffer^(0+128)
  9445                           
  9446                           ;CC2500_B1.c: 150: while (RC2 == 1 && RF1.Timeout == 0) {
  9447  1396  2B9A               	goto	l9458
  9448  1397                     l9456:	
  9449                           
  9450                           ;CC2500_B1.c: 151: RF_Timeout_Counter();
  9451  1397  319D  2529  3193   	fcall	_RF_Timeout_Counter
  9452  139A                     l9458:	
  9453  139A  0020               	movlb	0	; select bank0
  9454  139B  1D0E               	btfss	14,2	;volatile
  9455  139C  2BA0               	goto	l9462
  9456  139D  0021               	movlb	1	; select bank1
  9457  139E  1F21               	btfss	(_RF1^(0+128)+1),6
  9458  139F  2B97               	goto	l9456
  9459  13A0                     l9462:	
  9460                           
  9461                           ;CC2500_B1.c: 152: };
  9462                           ;CC2500_B1.c: 153: setRF_TimeoutCleared();
  9463  13A0  319A  22D6  3193   	fcall	_setRF_TimeoutCleared
  9464                           
  9465                           ;CC2500_B1.c: 154: CC2500_WriteByte();
  9466  13A3  319D  25C0  3193   	fcall	_CC2500_WriteByte
  9467                           
  9468                           ;CC2500_B1.c: 155: while (RC2 == 1 && RF1.Timeout == 0) {
  9469  13A6  2BAA               	goto	l9468
  9470  13A7                     l9466:	
  9471                           
  9472                           ;CC2500_B1.c: 156: RF_Timeout_Counter();
  9473  13A7  319D  2529  3193   	fcall	_RF_Timeout_Counter
  9474  13AA                     l9468:	
  9475  13AA  0020               	movlb	0	; select bank0
  9476  13AB  1D0E               	btfss	14,2	;volatile
  9477  13AC  2BB0               	goto	l9472
  9478  13AD  0021               	movlb	1	; select bank1
  9479  13AE  1F21               	btfss	(_RF1^(0+128)+1),6
  9480  13AF  2BA7               	goto	l9466
  9481  13B0                     l9472:	
  9482                           
  9483                           ;CC2500_B1.c: 157: };
  9484                           ;CC2500_B1.c: 158: setRF_TimeoutCleared();
  9485  13B0  319A  22D6         	fcall	_setRF_TimeoutCleared
  9486                           
  9487                           ;CC2500_B1.c: 159: RC0 = 0;
  9488  13B2  0020               	movlb	0	; select bank0
  9489  13B3  100E               	bcf	14,0	;volatile
  9490                           
  9491                           ;CC2500_B1.c: 160: RC4 = 1;
  9492  13B4  160E               	bsf	14,4	;volatile
  9493  13B5  0008               	return
  9494  13B6                     __end_of_CC2500_PowerRST:	
  9495                           
  9496                           	psect	text47
  9497  108B                     __ptext47:	
  9498 ;; *************** function _CC2500_InitSetREG *****************
  9499 ;; Defined at:
  9500 ;;		line 166 in file "../src/CC2500_B1.c"
  9501 ;; Parameters:    Size  Location     Type
  9502 ;;		None
  9503 ;; Auto vars:     Size  Location     Type
  9504 ;;  loop_c          1    3[BANK0 ] unsigned char 
  9505 ;;  temp2           1    2[BANK0 ] unsigned char 
  9506 ;;  temp1           1    1[BANK0 ] unsigned char 
  9507 ;; Return value:  Size  Location     Type
  9508 ;;		None               void
  9509 ;; Registers used:
  9510 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9511 ;; Tracked objects:
  9512 ;;		On entry : 0/0
  9513 ;;		On exit  : 0/0
  9514 ;;		Unchanged: 0/0
  9515 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9516 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9517 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9518 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9519 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9520 ;;Total ram usage:        4 bytes
  9521 ;; Hardware stack levels used:    1
  9522 ;; Hardware stack levels required when called:    5
  9523 ;; This function calls:
  9524 ;;		_CC2500_WriteREG
  9525 ;; This function is called by:
  9526 ;;		_CC2500_PowerOnInitial
  9527 ;; This function uses a non-reentrant model
  9528 ;;
  9529                           
  9530                           
  9531                           ;psect for function _CC2500_InitSetREG
  9532  108B                     _CC2500_InitSetREG:	
  9533                           
  9534                           ;CC2500_B1.c: 167: unsigned char loop_c;
  9535                           ;CC2500_B1.c: 168: unsigned char temp1, temp2;
  9536                           ;CC2500_B1.c: 170: for (loop_c = 0; loop_c < 47; loop_c++) {
  9537                           
  9538                           ;incstack = 0
  9539                           ; Regs used in _CC2500_InitSetREG: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9540  108B  0020               	movlb	0	; select bank0
  9541  108C  01A3               	clrf	CC2500_InitSetREG@loop_c
  9542  108D                     L5:	
  9543  108D  302F               	movlw	47
  9544  108E  0223               	subwf	CC2500_InitSetREG@loop_c,w
  9545  108F  1803               	btfsc	3,0
  9546  1090  0008               	return
  9547                           
  9548                           ;CC2500_B1.c: 171: temp1 = CC2500_registers_address[loop_c];
  9549  1091  0823               	movf	CC2500_InitSetREG@loop_c,w
  9550  1092  3E00               	addlw	low (_CC2500_registers_address| (0+32768))
  9551  1093  0084               	movwf	4
  9552  1094  3090               	movlw	high (_CC2500_registers_address| (0+32768))
  9553  1095  1803               	skipnc
  9554  1096  3E01               	addlw	1
  9555  1097  0085               	movwf	5
  9556  1098  0800               	movf	0,w	;code access
  9557  1099  00A0               	movwf	??_CC2500_InitSetREG
  9558  109A  0820               	movf	??_CC2500_InitSetREG,w
  9559  109B  00A1               	movwf	CC2500_InitSetREG@temp1
  9560                           
  9561                           ;CC2500_B1.c: 172: temp2 = CC2500_rfSettings[loop_c];
  9562  109C  0823               	movf	CC2500_InitSetREG@loop_c,w
  9563  109D  3E2F               	addlw	low (_CC2500_rfSettings| (0+32768))
  9564  109E  0084               	movwf	4
  9565  109F  3090               	movlw	high (_CC2500_rfSettings| (0+32768))
  9566  10A0  1803               	skipnc
  9567  10A1  3E01               	addlw	1
  9568  10A2  0085               	movwf	5
  9569  10A3  0800               	movf	0,w	;code access
  9570  10A4  00A0               	movwf	??_CC2500_InitSetREG
  9571  10A5  0820               	movf	??_CC2500_InitSetREG,w
  9572  10A6  00A2               	movwf	CC2500_InitSetREG@temp2
  9573                           
  9574                           ;CC2500_B1.c: 174: CC2500_WriteREG(temp1, temp2);
  9575  10A7  0822               	movf	CC2500_InitSetREG@temp2,w
  9576  10A8  00A0               	movwf	??_CC2500_InitSetREG
  9577  10A9  0820               	movf	??_CC2500_InitSetREG,w
  9578  10AA  00F5               	movwf	CC2500_WriteREG@value
  9579  10AB  0821               	movf	CC2500_InitSetREG@temp1,w
  9580  10AC  319F  271D  3190   	fcall	_CC2500_WriteREG
  9581  10AF  3001               	movlw	1
  9582  10B0  0020               	movlb	0	; select bank0
  9583  10B1  00A0               	movwf	??_CC2500_InitSetREG
  9584  10B2  0820               	movf	??_CC2500_InitSetREG,w
  9585  10B3  07A3               	addwf	CC2500_InitSetREG@loop_c,f
  9586  10B4  288D               	goto	L5
  9587  10B5                     __end_of_CC2500_InitSetREG:	
  9588                           
  9589                           	psect	text48
  9590  07E1                     __ptext48:	
  9591 ;; *************** function _CC2500_InitPATable *****************
  9592 ;; Defined at:
  9593 ;;		line 181 in file "../src/CC2500_B1.c"
  9594 ;; Parameters:    Size  Location     Type
  9595 ;;		None
  9596 ;; Auto vars:     Size  Location     Type
  9597 ;;  loop_d          1    2[BANK0 ] unsigned char 
  9598 ;;  temp            1    1[BANK0 ] unsigned char 
  9599 ;; Return value:  Size  Location     Type
  9600 ;;		None               void
  9601 ;; Registers used:
  9602 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9603 ;; Tracked objects:
  9604 ;;		On entry : 0/0
  9605 ;;		On exit  : 0/0
  9606 ;;		Unchanged: 0/0
  9607 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9608 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9609 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9610 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9611 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9612 ;;Total ram usage:        3 bytes
  9613 ;; Hardware stack levels used:    1
  9614 ;; Hardware stack levels required when called:    5
  9615 ;; This function calls:
  9616 ;;		_CC2500_WriteREG
  9617 ;; This function is called by:
  9618 ;;		_CC2500_PowerOnInitial
  9619 ;; This function uses a non-reentrant model
  9620 ;;
  9621                           
  9622                           
  9623                           ;psect for function _CC2500_InitPATable
  9624  07E1                     _CC2500_InitPATable:	
  9625                           
  9626                           ;CC2500_B1.c: 182: unsigned char loop_d;
  9627                           ;CC2500_B1.c: 183: unsigned char temp;
  9628                           ;CC2500_B1.c: 185: for (loop_d = 0; loop_d < 8; loop_d++) {
  9629                           
  9630                           ;incstack = 0
  9631                           ; Regs used in _CC2500_InitPATable: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9632  07E1  0020               	movlb	0	; select bank0
  9633  07E2  01A2               	clrf	CC2500_InitPATable@loop_d
  9634  07E3                     L6:	
  9635  07E3  3008               	movlw	8
  9636  07E4  0222               	subwf	CC2500_InitPATable@loop_d,w
  9637  07E5  1803               	btfsc	3,0
  9638  07E6  0008               	return
  9639                           
  9640                           ;CC2500_B1.c: 186: temp = CC2500_patable_vaule[loop_d];
  9641  07E7  0822               	movf	CC2500_InitPATable@loop_d,w
  9642  07E8  3E5E               	addlw	low (_CC2500_patable_vaule| (0+32768))
  9643  07E9  0084               	movwf	4
  9644  07EA  3090               	movlw	high (_CC2500_patable_vaule| (0+32768))
  9645  07EB  1803               	skipnc
  9646  07EC  3E01               	addlw	1
  9647  07ED  0085               	movwf	5
  9648  07EE  0800               	movf	0,w	;code access
  9649  07EF  00A0               	movwf	??_CC2500_InitPATable
  9650  07F0  0820               	movf	??_CC2500_InitPATable,w
  9651  07F1  00A1               	movwf	CC2500_InitPATable@temp
  9652                           
  9653                           ;CC2500_B1.c: 187: CC2500_WriteREG(0x3E, temp);
  9654  07F2  0821               	movf	CC2500_InitPATable@temp,w
  9655  07F3  00A0               	movwf	??_CC2500_InitPATable
  9656  07F4  0820               	movf	??_CC2500_InitPATable,w
  9657  07F5  00F5               	movwf	CC2500_WriteREG@value
  9658  07F6  303E               	movlw	62
  9659  07F7  319F  271D  3187   	fcall	_CC2500_WriteREG
  9660  07FA  3001               	movlw	1
  9661  07FB  0020               	movlb	0	; select bank0
  9662  07FC  00A0               	movwf	??_CC2500_InitPATable
  9663  07FD  0820               	movf	??_CC2500_InitPATable,w
  9664  07FE  07A2               	addwf	CC2500_InitPATable@loop_d,f
  9665  07FF  2FE3               	goto	L6
  9666  0800                     __end_of_CC2500_InitPATable:	
  9667                           
  9668                           	psect	text49
  9669  1F1D                     __ptext49:	
  9670 ;; *************** function _CC2500_WriteREG *****************
  9671 ;; Defined at:
  9672 ;;		line 258 in file "../src/CC2500_B1.c"
  9673 ;; Parameters:    Size  Location     Type
  9674 ;;  w_addr          1    wreg     unsigned char 
  9675 ;;  value           1    5[COMMON] unsigned char 
  9676 ;; Auto vars:     Size  Location     Type
  9677 ;;  w_addr          1    7[COMMON] unsigned char 
  9678 ;; Return value:  Size  Location     Type
  9679 ;;		None               void
  9680 ;; Registers used:
  9681 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9682 ;; Tracked objects:
  9683 ;;		On entry : 0/0
  9684 ;;		On exit  : 0/0
  9685 ;;		Unchanged: 0/0
  9686 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9687 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9688 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9689 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9690 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9691 ;;Total ram usage:        3 bytes
  9692 ;; Hardware stack levels used:    1
  9693 ;; Hardware stack levels required when called:    4
  9694 ;; This function calls:
  9695 ;;		_CC2500_WriteByte
  9696 ;;		_RF_Timeout_Counter
  9697 ;;		_setRF_TimeoutCleared
  9698 ;; This function is called by:
  9699 ;;		_CC2500_InitSetREG
  9700 ;;		_CC2500_InitPATable
  9701 ;; This function uses a non-reentrant model
  9702 ;;
  9703                           
  9704                           
  9705                           ;psect for function _CC2500_WriteREG
  9706  1F1D                     _CC2500_WriteREG:	
  9707                           
  9708                           ;incstack = 0
  9709                           ; Regs used in _CC2500_WriteREG: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9710                           ;CC2500_WriteREG@w_addr stored from wreg
  9711  1F1D  00F7               	movwf	CC2500_WriteREG@w_addr
  9712                           
  9713                           ;CC2500_B1.c: 259: RC4 = 0;
  9714  1F1E  0020               	movlb	0	; select bank0
  9715  1F1F  120E               	bcf	14,4	;volatile
  9716                           
  9717                           ;CC2500_B1.c: 260: SPI0Buffer = w_addr;
  9718  1F20  0877               	movf	CC2500_WriteREG@w_addr,w
  9719  1F21  00F6               	movwf	??_CC2500_WriteREG
  9720  1F22  0876               	movf	??_CC2500_WriteREG,w
  9721  1F23  0021               	movlb	1	; select bank1
  9722  1F24  00D4               	movwf	_SPI0Buffer^(0+128)
  9723                           
  9724                           ;CC2500_B1.c: 261: while (RC2 == 1 && RF1.Timeout == 0) {
  9725  1F25  2F29               	goto	l9342
  9726  1F26                     l9340:	
  9727                           
  9728                           ;CC2500_B1.c: 262: RF_Timeout_Counter();
  9729  1F26  319D  2529  319F   	fcall	_RF_Timeout_Counter
  9730  1F29                     l9342:	
  9731  1F29  0020               	movlb	0	; select bank0
  9732  1F2A  1D0E               	btfss	14,2	;volatile
  9733  1F2B  2F2F               	goto	l9346
  9734  1F2C  0021               	movlb	1	; select bank1
  9735  1F2D  1F21               	btfss	(_RF1^(0+128)+1),6
  9736  1F2E  2F26               	goto	l9340
  9737  1F2F                     l9346:	
  9738                           
  9739                           ;CC2500_B1.c: 263: };
  9740                           ;CC2500_B1.c: 264: setRF_TimeoutCleared();
  9741  1F2F  319A  22D6  319F   	fcall	_setRF_TimeoutCleared
  9742                           
  9743                           ;CC2500_B1.c: 266: CC2500_WriteByte();
  9744  1F32  319D  25C0  319F   	fcall	_CC2500_WriteByte
  9745                           
  9746                           ;CC2500_B1.c: 267: SPI0Buffer = value;
  9747  1F35  0875               	movf	CC2500_WriteREG@value,w
  9748  1F36  00F6               	movwf	??_CC2500_WriteREG
  9749  1F37  0876               	movf	??_CC2500_WriteREG,w
  9750  1F38  0021               	movlb	1	; select bank1
  9751  1F39  00D4               	movwf	_SPI0Buffer^(0+128)
  9752                           
  9753                           ;CC2500_B1.c: 268: CC2500_WriteByte();
  9754  1F3A  319D  25C0         	fcall	_CC2500_WriteByte
  9755                           
  9756                           ;CC2500_B1.c: 269: RC4 = 1;
  9757  1F3C  0020               	movlb	0	; select bank0
  9758  1F3D  160E               	bsf	14,4	;volatile
  9759  1F3E  0008               	return
  9760  1F3F                     __end_of_CC2500_WriteREG:	
  9761                           
  9762                           	psect	text50
  9763  1B5F                     __ptext50:	
  9764 ;; *************** function _CC2500_FrequencyCabr *****************
  9765 ;; Defined at:
  9766 ;;		line 208 in file "../src/CC2500_B1.c"
  9767 ;; Parameters:    Size  Location     Type
  9768 ;;		None
  9769 ;; Auto vars:     Size  Location     Type
  9770 ;;		None
  9771 ;; Return value:  Size  Location     Type
  9772 ;;		None               void
  9773 ;; Registers used:
  9774 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9775 ;; Tracked objects:
  9776 ;;		On entry : 0/0
  9777 ;;		On exit  : 0/0
  9778 ;;		Unchanged: 0/0
  9779 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9780 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9781 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9782 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9783 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9784 ;;Total ram usage:        0 bytes
  9785 ;; Hardware stack levels used:    1
  9786 ;; Hardware stack levels required when called:    5
  9787 ;; This function calls:
  9788 ;;		_CC2500_WriteCommand
  9789 ;;		_DelayTime_1us
  9790 ;; This function is called by:
  9791 ;;		_CC2500_PowerOnInitial
  9792 ;; This function uses a non-reentrant model
  9793 ;;
  9794                           
  9795                           
  9796                           ;psect for function _CC2500_FrequencyCabr
  9797  1B5F                     _CC2500_FrequencyCabr:	
  9798                           
  9799                           ;CC2500_B1.c: 209: CC2500_WriteCommand(0x33);
  9800                           
  9801                           ;incstack = 0
  9802                           ; Regs used in _CC2500_FrequencyCabr: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9803  1B5F  3033               	movlw	51
  9804  1B60  319D  25D8  319B   	fcall	_CC2500_WriteCommand
  9805                           
  9806                           ;CC2500_B1.c: 210: DelayTime_1us(1000);
  9807  1B63  30E8               	movlw	232
  9808  1B64  00F3               	movwf	DelayTime_1us@count
  9809  1B65  3003               	movlw	3
  9810  1B66  00F4               	movwf	DelayTime_1us@count+1
  9811  1B67  319F  2786         	fcall	_DelayTime_1us
  9812  1B69  0008               	return
  9813  1B6A                     __end_of_CC2500_FrequencyCabr:	
  9814                           
  9815                           	psect	text51
  9816  1F86                     __ptext51:	
  9817 ;; *************** function _DelayTime_1us *****************
  9818 ;; Defined at:
  9819 ;;		line 327 in file "../src/CC2500_B1.c"
  9820 ;; Parameters:    Size  Location     Type
  9821 ;;  count           2    3[COMMON] int 
  9822 ;; Auto vars:     Size  Location     Type
  9823 ;;  j               2    2[BANK0 ] unsigned int 
  9824 ;;  i               2    0[BANK0 ] unsigned int 
  9825 ;; Return value:  Size  Location     Type
  9826 ;;		None               void
  9827 ;; Registers used:
  9828 ;;		wreg, status,2
  9829 ;; Tracked objects:
  9830 ;;		On entry : 0/0
  9831 ;;		On exit  : 0/0
  9832 ;;		Unchanged: 0/0
  9833 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9834 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9835 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9836 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9837 ;;      Totals:         2       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9838 ;;Total ram usage:        6 bytes
  9839 ;; Hardware stack levels used:    1
  9840 ;; Hardware stack levels required when called:    3
  9841 ;; This function calls:
  9842 ;;		Nothing
  9843 ;; This function is called by:
  9844 ;;		_CC2500_PowerRST
  9845 ;;		_CC2500_FrequencyCabr
  9846 ;; This function uses a non-reentrant model
  9847 ;;
  9848                           
  9849                           
  9850                           ;psect for function _DelayTime_1us
  9851  1F86                     _DelayTime_1us:	
  9852                           
  9853                           ;CC2500_B1.c: 328: unsigned int i, j;
  9854                           ;CC2500_B1.c: 329: for (i = 1; i < count; i++)
  9855                           
  9856                           ;incstack = 0
  9857                           ; Regs used in _DelayTime_1us: [wreg+status,2]
  9858  1F86  3001               	movlw	1
  9859  1F87  0020               	movlb	0	; select bank0
  9860  1F88  00A0               	movwf	DelayTime_1us@i
  9861  1F89  3000               	movlw	0
  9862  1F8A  00A1               	movwf	DelayTime_1us@i+1
  9863  1F8B                     l367:	
  9864  1F8B  0874               	movf	DelayTime_1us@count+1,w
  9865  1F8C  0221               	subwf	DelayTime_1us@i+1,w
  9866  1F8D  1D03               	skipz
  9867  1F8E  2F91               	goto	u9995
  9868  1F8F  0873               	movf	DelayTime_1us@count,w
  9869  1F90  0220               	subwf	DelayTime_1us@i,w
  9870  1F91                     u9995:	
  9871  1F91  1803               	btfsc	3,0
  9872  1F92  0008               	return
  9873                           
  9874                           ;CC2500_B1.c: 330: for (j = 0; j <= 1; j++);
  9875  1F93  01A2               	clrf	DelayTime_1us@j
  9876  1F94  01A3               	clrf	DelayTime_1us@j+1
  9877  1F95  3000               	movlw	0
  9878  1F96  0223               	subwf	DelayTime_1us@j+1,w
  9879  1F97  3002               	movlw	2
  9880  1F98  1903               	skipnz
  9881  1F99  0222               	subwf	DelayTime_1us@j,w
  9882  1F9A  1803               	btfsc	3,0
  9883  1F9B  2FA7               	goto	l9334
  9884  1F9C                     l9332:	
  9885  1F9C  3001               	movlw	1
  9886  1F9D  07A2               	addwf	DelayTime_1us@j,f
  9887  1F9E  3000               	movlw	0
  9888  1F9F  3DA3               	addwfc	DelayTime_1us@j+1,f
  9889  1FA0  3000               	movlw	0
  9890  1FA1  0223               	subwf	DelayTime_1us@j+1,w
  9891  1FA2  3002               	movlw	2
  9892  1FA3  1903               	skipnz
  9893  1FA4  0222               	subwf	DelayTime_1us@j,w
  9894  1FA5  1C03               	skipc
  9895  1FA6  2F9C               	goto	l9332
  9896  1FA7                     l9334:	
  9897  1FA7  3001               	movlw	1
  9898  1FA8  07A0               	addwf	DelayTime_1us@i,f
  9899  1FA9  3000               	movlw	0
  9900  1FAA  3DA1               	addwfc	DelayTime_1us@i+1,f
  9901  1FAB  2F8B               	goto	l367
  9902  1FAC                     __end_of_DelayTime_1us:	
  9903                           
  9904                           	psect	text52
  9905  1ADE                     __ptext52:	
  9906 ;; *************** function _CC2500_ClearTXFIFO *****************
  9907 ;; Defined at:
  9908 ;;		line 194 in file "../src/CC2500_B1.c"
  9909 ;; Parameters:    Size  Location     Type
  9910 ;;		None
  9911 ;; Auto vars:     Size  Location     Type
  9912 ;;		None
  9913 ;; Return value:  Size  Location     Type
  9914 ;;		None               void
  9915 ;; Registers used:
  9916 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9917 ;; Tracked objects:
  9918 ;;		On entry : 0/0
  9919 ;;		On exit  : 0/0
  9920 ;;		Unchanged: 0/0
  9921 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9922 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9923 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9924 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9925 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9926 ;;Total ram usage:        0 bytes
  9927 ;; Hardware stack levels used:    1
  9928 ;; Hardware stack levels required when called:    5
  9929 ;; This function calls:
  9930 ;;		_CC2500_WriteCommand
  9931 ;; This function is called by:
  9932 ;;		_CC2500_PowerOnInitial
  9933 ;; This function uses a non-reentrant model
  9934 ;;
  9935                           
  9936                           
  9937                           ;psect for function _CC2500_ClearTXFIFO
  9938  1ADE                     _CC2500_ClearTXFIFO:	
  9939                           
  9940                           ;CC2500_B1.c: 195: CC2500_WriteCommand(0x3B);
  9941                           
  9942                           ;incstack = 0
  9943                           ; Regs used in _CC2500_ClearTXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9944  1ADE  303B               	movlw	59
  9945  1ADF  319D  25D8         	fcall	_CC2500_WriteCommand
  9946  1AE1  0008               	return
  9947  1AE2                     __end_of_CC2500_ClearTXFIFO:	
  9948                           
  9949                           	psect	text53
  9950  1ADA                     __ptext53:	
  9951 ;; *************** function _CC2500_ClearRXFIFO *****************
  9952 ;; Defined at:
  9953 ;;		line 201 in file "../src/CC2500_B1.c"
  9954 ;; Parameters:    Size  Location     Type
  9955 ;;		None
  9956 ;; Auto vars:     Size  Location     Type
  9957 ;;		None
  9958 ;; Return value:  Size  Location     Type
  9959 ;;		None               void
  9960 ;; Registers used:
  9961 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9962 ;; Tracked objects:
  9963 ;;		On entry : 0/0
  9964 ;;		On exit  : 0/0
  9965 ;;		Unchanged: 0/0
  9966 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9967 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9968 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9969 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9970 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9971 ;;Total ram usage:        0 bytes
  9972 ;; Hardware stack levels used:    1
  9973 ;; Hardware stack levels required when called:    5
  9974 ;; This function calls:
  9975 ;;		_CC2500_WriteCommand
  9976 ;; This function is called by:
  9977 ;;		_CC2500_PowerOnInitial
  9978 ;; This function uses a non-reentrant model
  9979 ;;
  9980                           
  9981                           
  9982                           ;psect for function _CC2500_ClearRXFIFO
  9983  1ADA                     _CC2500_ClearRXFIFO:	
  9984                           
  9985                           ;CC2500_B1.c: 202: CC2500_WriteCommand(0x3A);
  9986                           
  9987                           ;incstack = 0
  9988                           ; Regs used in _CC2500_ClearRXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9989  1ADA  303A               	movlw	58
  9990  1ADB  319D  25D8         	fcall	_CC2500_WriteCommand
  9991  1ADD  0008               	return
  9992  1ADE                     __end_of_CC2500_ClearRXFIFO:	
  9993                           
  9994                           	psect	text54
  9995  1DD8                     __ptext54:	
  9996 ;; *************** function _CC2500_WriteCommand *****************
  9997 ;; Defined at:
  9998 ;;		line 292 in file "../src/CC2500_B1.c"
  9999 ;; Parameters:    Size  Location     Type
 10000 ;;  command         1    wreg     unsigned char 
 10001 ;; Auto vars:     Size  Location     Type
 10002 ;;  command         1    6[COMMON] unsigned char 
 10003 ;; Return value:  Size  Location     Type
 10004 ;;		None               void
 10005 ;; Registers used:
 10006 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10007 ;; Tracked objects:
 10008 ;;		On entry : 0/0
 10009 ;;		On exit  : 0/0
 10010 ;;		Unchanged: 0/0
 10011 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10012 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10013 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10014 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10015 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10016 ;;Total ram usage:        2 bytes
 10017 ;; Hardware stack levels used:    1
 10018 ;; Hardware stack levels required when called:    4
 10019 ;; This function calls:
 10020 ;;		_CC2500_WriteByte
 10021 ;;		_RF_Timeout_Counter
 10022 ;;		_setRF_TimeoutCleared
 10023 ;; This function is called by:
 10024 ;;		_CC2500_TxData
 10025 ;;		_CC2500_RxData
 10026 ;;		_CC2500_ClearTXFIFO
 10027 ;;		_CC2500_ClearRXFIFO
 10028 ;;		_CC2500_FrequencyCabr
 10029 ;;		_CC2500_SIDLEMode
 10030 ;;		_setRF_Main
 10031 ;;		_RF_RxDisable
 10032 ;; This function uses a non-reentrant model
 10033 ;;
 10034                           
 10035                           
 10036                           ;psect for function _CC2500_WriteCommand
 10037  1DD8                     _CC2500_WriteCommand:	
 10038                           
 10039                           ;incstack = 0
 10040                           ; Regs used in _CC2500_WriteCommand: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10041                           ;CC2500_WriteCommand@command stored from wreg
 10042  1DD8  00F6               	movwf	CC2500_WriteCommand@command
 10043                           
 10044                           ;CC2500_B1.c: 293: RC4 = 0;
 10045  1DD9  0020               	movlb	0	; select bank0
 10046  1DDA  120E               	bcf	14,4	;volatile
 10047                           
 10048                           ;CC2500_B1.c: 294: SPI0Buffer = command;
 10049  1DDB  0876               	movf	CC2500_WriteCommand@command,w
 10050  1DDC  00F5               	movwf	??_CC2500_WriteCommand
 10051  1DDD  0875               	movf	??_CC2500_WriteCommand,w
 10052  1DDE  0021               	movlb	1	; select bank1
 10053  1DDF  00D4               	movwf	_SPI0Buffer^(0+128)
 10054                           
 10055                           ;CC2500_B1.c: 296: while (RC2 == 1 && RF1.Timeout == 0) {
 10056  1DE0  2DE4               	goto	l9296
 10057  1DE1                     l9294:	
 10058                           
 10059                           ;CC2500_B1.c: 297: RF_Timeout_Counter();
 10060  1DE1  319D  2529  319D   	fcall	_RF_Timeout_Counter
 10061  1DE4                     l9296:	
 10062  1DE4  0020               	movlb	0	; select bank0
 10063  1DE5  1D0E               	btfss	14,2	;volatile
 10064  1DE6  2DEA               	goto	l9300
 10065  1DE7  0021               	movlb	1	; select bank1
 10066  1DE8  1F21               	btfss	(_RF1^(0+128)+1),6
 10067  1DE9  2DE1               	goto	l9294
 10068  1DEA                     l9300:	
 10069                           
 10070                           ;CC2500_B1.c: 298: };
 10071                           ;CC2500_B1.c: 299: setRF_TimeoutCleared();
 10072  1DEA  319A  22D6  319D   	fcall	_setRF_TimeoutCleared
 10073                           
 10074                           ;CC2500_B1.c: 301: CC2500_WriteByte();
 10075  1DED  319D  25C0         	fcall	_CC2500_WriteByte
 10076                           
 10077                           ;CC2500_B1.c: 302: RC4 = 1;
 10078  1DEF  0020               	movlb	0	; select bank0
 10079  1DF0  160E               	bsf	14,4	;volatile
 10080  1DF1  0008               	return
 10081  1DF2                     __end_of_CC2500_WriteCommand:	
 10082                           
 10083                           	psect	text55
 10084  1AD6                     __ptext55:	
 10085 ;; *************** function _setRF_TimeoutCleared *****************
 10086 ;; Defined at:
 10087 ;;		line 144 in file "../src/RF_Control_B1.c"
 10088 ;; Parameters:    Size  Location     Type
 10089 ;;		None
 10090 ;; Auto vars:     Size  Location     Type
 10091 ;;		None
 10092 ;; Return value:  Size  Location     Type
 10093 ;;		None               void
 10094 ;; Registers used:
 10095 ;;		status,2
 10096 ;; Tracked objects:
 10097 ;;		On entry : 0/0
 10098 ;;		On exit  : 0/0
 10099 ;;		Unchanged: 0/0
 10100 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10101 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10102 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10103 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10104 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10105 ;;Total ram usage:        0 bytes
 10106 ;; Hardware stack levels used:    1
 10107 ;; Hardware stack levels required when called:    3
 10108 ;; This function calls:
 10109 ;;		Nothing
 10110 ;; This function is called by:
 10111 ;;		_CC2500_TxData
 10112 ;;		_CC2500_RxData
 10113 ;;		_CC2500_PowerRST
 10114 ;;		_CC2500_WriteREG
 10115 ;;		_CC2500_WriteCommand
 10116 ;;		_CC2500_ReadStatus
 10117 ;;		_CC2500_ReadREG
 10118 ;; This function uses a non-reentrant model
 10119 ;;
 10120                           
 10121                           
 10122                           ;psect for function _setRF_TimeoutCleared
 10123  1AD6                     _setRF_TimeoutCleared:	
 10124                           
 10125                           ;RF_Control_B1.c: 145: RF1.TimeoutCount = 0;
 10126                           
 10127                           ;incstack = 0
 10128                           ; Regs used in _setRF_TimeoutCleared: [status,2]
 10129  1AD6  0021               	movlb	1	; select bank1
 10130  1AD7  01AC               	clrf	(_RF1^(0+128)+12)
 10131  1AD8  01AD               	clrf	((_RF1+1)^(0+128)+12)
 10132  1AD9  0008               	return
 10133  1ADA                     __end_of_setRF_TimeoutCleared:	
 10134                           
 10135                           	psect	text56
 10136  1D29                     __ptext56:	
 10137 ;; *************** function _RF_Timeout_Counter *****************
 10138 ;; Defined at:
 10139 ;;		line 136 in file "../src/RF_Control_B1.c"
 10140 ;; Parameters:    Size  Location     Type
 10141 ;;		None
 10142 ;; Auto vars:     Size  Location     Type
 10143 ;;		None
 10144 ;; Return value:  Size  Location     Type
 10145 ;;		None               void
 10146 ;; Registers used:
 10147 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10148 ;; Tracked objects:
 10149 ;;		On entry : 0/0
 10150 ;;		On exit  : 0/0
 10151 ;;		Unchanged: 0/0
 10152 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10153 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10154 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10155 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10156 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10157 ;;Total ram usage:        0 bytes
 10158 ;; Hardware stack levels used:    1
 10159 ;; Hardware stack levels required when called:    3
 10160 ;; This function calls:
 10161 ;;		Nothing
 10162 ;; This function is called by:
 10163 ;;		_CC2500_TxData
 10164 ;;		_CC2500_RxData
 10165 ;;		_CC2500_PowerRST
 10166 ;;		_CC2500_WriteREG
 10167 ;;		_CC2500_WriteCommand
 10168 ;;		_CC2500_ReadStatus
 10169 ;;		_CC2500_ReadREG
 10170 ;; This function uses a non-reentrant model
 10171 ;;
 10172                           
 10173                           
 10174                           ;psect for function _RF_Timeout_Counter
 10175  1D29                     _RF_Timeout_Counter:	
 10176                           
 10177                           ;RF_Control_B1.c: 137: RF1.TimeoutCount++;
 10178                           
 10179                           ;incstack = 0
 10180                           ; Regs used in _RF_Timeout_Counter: [wreg+fsr1l+fsr1h+status,2+status,0]
 10181  1D29  3001               	movlw	1
 10182  1D2A  0021               	movlb	1	; select bank1
 10183  1D2B  07AC               	addwf	(_RF1^(0+128)+12),f
 10184  1D2C  3000               	movlw	0
 10185  1D2D  3DAD               	addwfc	((_RF1+1)^(0+128)+12),f
 10186                           
 10187                           ;RF_Control_B1.c: 138: if (RF1.TimeoutCount == 25000) {
 10188  1D2E  300C               	movlw	12
 10189  1D2F  3EA0               	addlw	_RF1& (0+255)
 10190  1D30  0086               	movwf	6
 10191  1D31  0187               	clrf	7
 10192  1D32  3F40               	moviw [0]fsr1
 10193  1D33  3AA8               	xorlw	168
 10194  1D34  1D03               	skipz
 10195  1D35  2D38               	goto	u9715
 10196  1D36  3F41               	moviw [1]fsr1
 10197  1D37  3A61               	xorlw	97
 10198  1D38                     u9715:	
 10199  1D38  1D03               	skipz
 10200  1D39  0008               	return
 10201                           
 10202                           ;RF_Control_B1.c: 139: RF1.TimeoutCount = 0;
 10203  1D3A  01AC               	clrf	(_RF1^(0+128)+12)
 10204  1D3B  01AD               	clrf	((_RF1+1)^(0+128)+12)
 10205                           
 10206                           ;RF_Control_B1.c: 140: RF1.Timeout = 1;
 10207  1D3C  1721               	bsf	(_RF1^(0+128)+1),6
 10208  1D3D  0008               	return
 10209  1D3E                     __end_of_RF_Timeout_Counter:	
 10210                           
 10211                           	psect	text57
 10212  1DC0                     __ptext57:	
 10213 ;; *************** function _CC2500_WriteByte *****************
 10214 ;; Defined at:
 10215 ;;		line 226 in file "../src/CC2500_B1.c"
 10216 ;; Parameters:    Size  Location     Type
 10217 ;;		None
 10218 ;; Auto vars:     Size  Location     Type
 10219 ;;  loop_a          1    4[COMMON] unsigned char 
 10220 ;; Return value:  Size  Location     Type
 10221 ;;		None               void
 10222 ;; Registers used:
 10223 ;;		wreg, status,2, status,0
 10224 ;; Tracked objects:
 10225 ;;		On entry : 0/0
 10226 ;;		On exit  : 0/0
 10227 ;;		Unchanged: 0/0
 10228 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10229 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10230 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10231 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10232 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10233 ;;Total ram usage:        2 bytes
 10234 ;; Hardware stack levels used:    1
 10235 ;; Hardware stack levels required when called:    3
 10236 ;; This function calls:
 10237 ;;		Nothing
 10238 ;; This function is called by:
 10239 ;;		_CC2500_TxData
 10240 ;;		_CC2500_RxData
 10241 ;;		_CC2500_PowerRST
 10242 ;;		_CC2500_WriteREG
 10243 ;;		_CC2500_WriteCommand
 10244 ;;		_CC2500_ReadStatus
 10245 ;;		_CC2500_ReadREG
 10246 ;; This function uses a non-reentrant model
 10247 ;;
 10248                           
 10249                           
 10250                           ;psect for function _CC2500_WriteByte
 10251  1DC0                     _CC2500_WriteByte:	
 10252                           
 10253                           ;CC2500_B1.c: 227: unsigned char loop_a;
 10254                           ;CC2500_B1.c: 228: for (loop_a = 0; loop_a < 8; loop_a++) {
 10255                           
 10256                           ;incstack = 0
 10257                           ; Regs used in _CC2500_WriteByte: [wreg+status,2+status,0]
 10258  1DC0  01F4               	clrf	CC2500_WriteByte@loop_a
 10259  1DC1                     L7:	
 10260  1DC1  3008               	movlw	8
 10261  1DC2  0274               	subwf	CC2500_WriteByte@loop_a,w
 10262  1DC3  1803               	btfsc	3,0
 10263  1DC4  0008               	return
 10264                           
 10265                           ;CC2500_B1.c: 229: if (SPI0Buffer & 0x80)
 10266  1DC5  0021               	movlb	1	; select bank1
 10267  1DC6  1FD4               	btfss	_SPI0Buffer^(0+128),7
 10268  1DC7  2DCB               	goto	l323
 10269                           
 10270                           ;CC2500_B1.c: 230: RC0 = 1;
 10271  1DC8  0020               	movlb	0	; select bank0
 10272  1DC9  140E               	bsf	14,0	;volatile
 10273  1DCA  2DCD               	goto	l324
 10274  1DCB                     l323:	
 10275                           
 10276                           ;CC2500_B1.c: 231: else
 10277                           ;CC2500_B1.c: 232: RC0 = 0;
 10278  1DCB  0020               	movlb	0	; select bank0
 10279  1DCC  100E               	bcf	14,0	;volatile
 10280  1DCD                     l324:	
 10281                           
 10282                           ;CC2500_B1.c: 233: RC1 = 1;
 10283  1DCD  148E               	bsf	14,1	;volatile
 10284                           
 10285                           ;CC2500_B1.c: 234: SPI0Buffer <<= 1;
 10286  1DCE  1003               	clrc
 10287  1DCF  0021               	movlb	1	; select bank1
 10288  1DD0  0DD4               	rlf	_SPI0Buffer^(0+128),f
 10289                           
 10290                           ;CC2500_B1.c: 235: RC1 = 0;
 10291  1DD1  0020               	movlb	0	; select bank0
 10292  1DD2  108E               	bcf	14,1	;volatile
 10293  1DD3  3001               	movlw	1
 10294  1DD4  00F3               	movwf	??_CC2500_WriteByte
 10295  1DD5  0873               	movf	??_CC2500_WriteByte,w
 10296  1DD6  07F4               	addwf	CC2500_WriteByte@loop_a,f
 10297  1DD7  2DC1               	goto	L7
 10298  1DD8                     __end_of_CC2500_WriteByte:	
 10299                           
 10300                           	psect	text58
 10301  1AC9                     __ptext58:	
 10302 ;; *************** function _RF_Initialization *****************
 10303 ;; Defined at:
 10304 ;;		line 9 in file "../src/RF_Control_B1.c"
 10305 ;; Parameters:    Size  Location     Type
 10306 ;;		None
 10307 ;; Auto vars:     Size  Location     Type
 10308 ;;		None
 10309 ;; Return value:  Size  Location     Type
 10310 ;;		None               void
 10311 ;; Registers used:
 10312 ;;		wreg, status,2, status,0, pclath, cstack
 10313 ;; Tracked objects:
 10314 ;;		On entry : 0/0
 10315 ;;		On exit  : 0/0
 10316 ;;		Unchanged: 0/0
 10317 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10318 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10319 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10320 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10321 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10322 ;;Total ram usage:        0 bytes
 10323 ;; Hardware stack levels used:    1
 10324 ;; Hardware stack levels required when called:    4
 10325 ;; This function calls:
 10326 ;;		_setRF_Initialization
 10327 ;; This function is called by:
 10328 ;;		_main
 10329 ;; This function uses a non-reentrant model
 10330 ;;
 10331                           
 10332                           
 10333                           ;psect for function _RF_Initialization
 10334  1AC9                     _RF_Initialization:	
 10335                           
 10336                           ;RF_Control_B1.c: 11: setRF_Initialization();
 10337                           
 10338                           ;incstack = 0
 10339                           ; Regs used in _RF_Initialization: [wreg+status,2+status,0+pclath+cstack]
 10340  1AC9  319B  234A         	fcall	_setRF_Initialization
 10341  1ACB  0008               	return
 10342  1ACC                     __end_of_RF_Initialization:	
 10343                           
 10344                           	psect	text59
 10345  1B4A                     __ptext59:	
 10346 ;; *************** function _setRF_Initialization *****************
 10347 ;; Defined at:
 10348 ;;		line 43 in file "../src/RF_Control_B1.c"
 10349 ;; Parameters:    Size  Location     Type
 10350 ;;		None
 10351 ;; Auto vars:     Size  Location     Type
 10352 ;;		None
 10353 ;; Return value:  Size  Location     Type
 10354 ;;		None               void
 10355 ;; Registers used:
 10356 ;;		wreg
 10357 ;; Tracked objects:
 10358 ;;		On entry : 0/0
 10359 ;;		On exit  : 0/0
 10360 ;;		Unchanged: 0/0
 10361 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10362 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10363 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10364 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10365 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10366 ;;Total ram usage:        1 bytes
 10367 ;; Hardware stack levels used:    1
 10368 ;; Hardware stack levels required when called:    3
 10369 ;; This function calls:
 10370 ;;		Nothing
 10371 ;; This function is called by:
 10372 ;;		_RF_Initialization
 10373 ;; This function uses a non-reentrant model
 10374 ;;
 10375                           
 10376                           
 10377                           ;psect for function _setRF_Initialization
 10378  1B4A                     _setRF_Initialization:	
 10379                           
 10380                           ;RF_Control_B1.c: 45: Tx_Length = 21;
 10381                           
 10382                           ;incstack = 0
 10383                           ; Regs used in _setRF_Initialization: [wreg]
 10384  1B4A  3015               	movlw	21
 10385  1B4B  00F3               	movwf	??_setRF_Initialization
 10386  1B4C  0873               	movf	??_setRF_Initialization,w
 10387  1B4D  0021               	movlb	1	; select bank1
 10388  1B4E  00D6               	movwf	_Tx_Length^(0+128)
 10389                           
 10390                           ;RF_Control_B1.c: 46: RF1.RunTime = 100;
 10391  1B4F  3064               	movlw	100
 10392  1B50  00A7               	movwf	(_RF1^(0+128)+7)
 10393  1B51  3000               	movlw	0
 10394  1B52  00A8               	movwf	(_RF1^(0+128)+8)
 10395  1B53  0008               	return
 10396  1B54                     __end_of_setRF_Initialization:	
 10397                           
 10398                           	psect	text60
 10399  1CDB                     __ptext60:	
 10400 ;; *************** function _Mcu_Initialization *****************
 10401 ;; Defined at:
 10402 ;;		line 30 in file "../src/MCU_B1.c"
 10403 ;; Parameters:    Size  Location     Type
 10404 ;;		None
 10405 ;; Auto vars:     Size  Location     Type
 10406 ;;		None
 10407 ;; Return value:  Size  Location     Type
 10408 ;;		None               void
 10409 ;; Registers used:
 10410 ;;		wreg, status,2, status,0, pclath, cstack
 10411 ;; Tracked objects:
 10412 ;;		On entry : 0/0
 10413 ;;		On exit  : 0/0
 10414 ;;		Unchanged: 0/0
 10415 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10416 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10417 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10418 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10419 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10420 ;;Total ram usage:        0 bytes
 10421 ;; Hardware stack levels used:    1
 10422 ;; Hardware stack levels required when called:    4
 10423 ;; This function calls:
 10424 ;;		_ADC_Set
 10425 ;;		_Fosc_Set
 10426 ;;		_IOC_Set
 10427 ;;		_IO_Set
 10428 ;;		_TMR1_Set
 10429 ;;		_WDT_Set
 10430 ;; This function is called by:
 10431 ;;		_main
 10432 ;; This function uses a non-reentrant model
 10433 ;;
 10434                           
 10435                           
 10436                           ;psect for function _Mcu_Initialization
 10437  1CDB                     _Mcu_Initialization:	
 10438                           
 10439                           ;MCU_B1.c: 32: Fosc_Set();
 10440                           
 10441                           ;incstack = 0
 10442                           ; Regs used in _Mcu_Initialization: [wreg+status,2+status,0+pclath+cstack]
 10443  1CDB  319A  22D2  319C   	fcall	_Fosc_Set
 10444                           
 10445                           ;MCU_B1.c: 34: IO_Set();
 10446  1CDE  319E  2627  319C   	fcall	_IO_Set
 10447                           
 10448                           ;MCU_B1.c: 36: ;;
 10449                           ;MCU_B1.c: 38: TMR1_Set();
 10450  1CE1  319B  23A5  319C   	fcall	_TMR1_Set
 10451                           
 10452                           ;MCU_B1.c: 40: ADC_Set();
 10453  1CE4  319B  2311  319C   	fcall	_ADC_Set
 10454                           
 10455                           ;MCU_B1.c: 42: ;;
 10456                           ;MCU_B1.c: 44: ;;
 10457                           ;MCU_B1.c: 46: IOC_Set();
 10458  1CE7  319B  2399  319C   	fcall	_IOC_Set
 10459                           
 10460                           ;MCU_B1.c: 48: ;;
 10461                           ;MCU_B1.c: 50: ;;
 10462                           ;MCU_B1.c: 52: WDT_Set();
 10463  1CEA  319B  2341         	fcall	_WDT_Set
 10464  1CEC  0008               	return
 10465  1CED                     __end_of_Mcu_Initialization:	
 10466                           
 10467                           	psect	text61
 10468  1B41                     __ptext61:	
 10469 ;; *************** function _WDT_Set *****************
 10470 ;; Defined at:
 10471 ;;		line 1090 in file "../src/MCU_B1.c"
 10472 ;; Parameters:    Size  Location     Type
 10473 ;;		None
 10474 ;; Auto vars:     Size  Location     Type
 10475 ;;		None
 10476 ;; Return value:  Size  Location     Type
 10477 ;;		None               void
 10478 ;; Registers used:
 10479 ;;		wreg
 10480 ;; Tracked objects:
 10481 ;;		On entry : 0/0
 10482 ;;		On exit  : 0/0
 10483 ;;		Unchanged: 0/0
 10484 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10485 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10486 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10487 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10488 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10489 ;;Total ram usage:        1 bytes
 10490 ;; Hardware stack levels used:    1
 10491 ;; Hardware stack levels required when called:    3
 10492 ;; This function calls:
 10493 ;;		Nothing
 10494 ;; This function is called by:
 10495 ;;		_Mcu_Initialization
 10496 ;; This function uses a non-reentrant model
 10497 ;;
 10498                           
 10499                           
 10500                           ;psect for function _WDT_Set
 10501  1B41                     _WDT_Set:	
 10502                           
 10503                           ;MCU_B1.c: 1097: WDTCON = 0b00010111;;
 10504                           
 10505                           ;incstack = 0
 10506                           ; Regs used in _WDT_Set: [wreg]
 10507  1B41  3017               	movlw	23
 10508  1B42  0021               	movlb	1	; select bank1
 10509  1B43  0097               	movwf	23	;volatile
 10510                           
 10511                           ;MCU_B1.c: 1099: WDT.Enable = 1;
 10512  1B44  144B               	bsf	_WDT^(0+128),0
 10513                           
 10514                           ;MCU_B1.c: 1100: WDT.Timer = 10;
 10515  1B45  300A               	movlw	10
 10516  1B46  00F3               	movwf	??_WDT_Set
 10517  1B47  0873               	movf	??_WDT_Set,w
 10518  1B48  00CC               	movwf	(_WDT^(0+128)+1)
 10519  1B49  0008               	return
 10520  1B4A                     __end_of_WDT_Set:	
 10521                           
 10522                           	psect	text62
 10523  1BA5                     __ptext62:	
 10524 ;; *************** function _TMR1_Set *****************
 10525 ;; Defined at:
 10526 ;;		line 221 in file "../src/MCU_B1.c"
 10527 ;; Parameters:    Size  Location     Type
 10528 ;;		None
 10529 ;; Auto vars:     Size  Location     Type
 10530 ;;		None
 10531 ;; Return value:  Size  Location     Type
 10532 ;;		None               void
 10533 ;; Registers used:
 10534 ;;		wreg
 10535 ;; Tracked objects:
 10536 ;;		On entry : 0/0
 10537 ;;		On exit  : 0/0
 10538 ;;		Unchanged: 0/0
 10539 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10540 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10541 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10542 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10543 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10544 ;;Total ram usage:        0 bytes
 10545 ;; Hardware stack levels used:    1
 10546 ;; Hardware stack levels required when called:    3
 10547 ;; This function calls:
 10548 ;;		Nothing
 10549 ;; This function is called by:
 10550 ;;		_Mcu_Initialization
 10551 ;; This function uses a non-reentrant model
 10552 ;;
 10553                           
 10554                           
 10555                           ;psect for function _TMR1_Set
 10556  1BA5                     _TMR1_Set:	
 10557                           
 10558                           ;MCU_B1.c: 222: T1CON = (0x40 | 0x00 | 0x01);
 10559                           
 10560                           ;incstack = 0
 10561                           ; Regs used in _TMR1_Set: [wreg]
 10562  1BA5  3041               	movlw	65
 10563  1BA6  0020               	movlb	0	; select bank0
 10564  1BA7  0098               	movwf	24	;volatile
 10565                           
 10566                           ;MCU_B1.c: 223: TMR1H = (int)((65536-1480)/256);
 10567  1BA8  30FA               	movlw	250
 10568  1BA9  0097               	movwf	23	;volatile
 10569                           
 10570                           ;MCU_B1.c: 224: TMR1L = (int)((65536-1480)%256);
 10571  1BAA  3038               	movlw	56
 10572  1BAB  0096               	movwf	22	;volatile
 10573                           
 10574                           ;MCU_B1.c: 225: TMR1IE = 1;
 10575  1BAC  0021               	movlb	1	; select bank1
 10576  1BAD  1411               	bsf	17,0	;volatile
 10577                           
 10578                           ;MCU_B1.c: 226: PEIE = 1;
 10579  1BAE  170B               	bsf	11,6	;volatile
 10580                           
 10581                           ;MCU_B1.c: 227: GIE = 1;
 10582  1BAF  178B               	bsf	11,7	;volatile
 10583  1BB0  0008               	return
 10584  1BB1                     __end_of_TMR1_Set:	
 10585                           
 10586                           	psect	text63
 10587  1E27                     __ptext63:	
 10588 ;; *************** function _IO_Set *****************
 10589 ;; Defined at:
 10590 ;;		line 60 in file "../src/MCU_B1.c"
 10591 ;; Parameters:    Size  Location     Type
 10592 ;;		None
 10593 ;; Auto vars:     Size  Location     Type
 10594 ;;		None
 10595 ;; Return value:  Size  Location     Type
 10596 ;;		None               void
 10597 ;; Registers used:
 10598 ;;		wreg, status,2
 10599 ;; Tracked objects:
 10600 ;;		On entry : 0/0
 10601 ;;		On exit  : 0/0
 10602 ;;		Unchanged: 0/0
 10603 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10604 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10605 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10606 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10607 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10608 ;;Total ram usage:        0 bytes
 10609 ;; Hardware stack levels used:    1
 10610 ;; Hardware stack levels required when called:    3
 10611 ;; This function calls:
 10612 ;;		Nothing
 10613 ;; This function is called by:
 10614 ;;		_Mcu_Initialization
 10615 ;; This function uses a non-reentrant model
 10616 ;;
 10617                           
 10618                           
 10619                           ;psect for function _IO_Set
 10620  1E27                     _IO_Set:	
 10621                           
 10622                           ;MCU_B1.c: 88: TRISA = 0b01110111;;
 10623                           
 10624                           ;incstack = 0
 10625                           ; Regs used in _IO_Set: [wreg+status,2]
 10626  1E27  3077               	movlw	119
 10627  1E28  0021               	movlb	1	; select bank1
 10628  1E29  008C               	movwf	12	;volatile
 10629                           
 10630                           ;MCU_B1.c: 89: TRISB = 0b00000111;;
 10631  1E2A  3007               	movlw	7
 10632  1E2B  008D               	movwf	13	;volatile
 10633                           
 10634                           ;MCU_B1.c: 90: TRISC = 0b00001100;;
 10635  1E2C  300C               	movlw	12
 10636  1E2D  008E               	movwf	14	;volatile
 10637                           
 10638                           ;MCU_B1.c: 92: LATA = 0b00000000;;
 10639  1E2E  0022               	movlb	2	; select bank2
 10640  1E2F  018C               	clrf	12	;volatile
 10641                           
 10642                           ;MCU_B1.c: 93: LATB = 0b00000010;;
 10643  1E30  3002               	movlw	2
 10644  1E31  008D               	movwf	13	;volatile
 10645                           
 10646                           ;MCU_B1.c: 94: LATC = 0b00000000;;
 10647  1E32  018E               	clrf	14	;volatile
 10648                           
 10649                           ;MCU_B1.c: 96: ANSELA = 0b00100010;;
 10650  1E33  3022               	movlw	34
 10651  1E34  0023               	movlb	3	; select bank3
 10652  1E35  008C               	movwf	12	;volatile
 10653                           
 10654                           ;MCU_B1.c: 97: ANSELB = 0b00000000;;
 10655  1E36  018D               	clrf	13	;volatile
 10656                           
 10657                           ;MCU_B1.c: 98: ANSELC = 0b00000000;;
 10658  1E37  018E               	clrf	14	;volatile
 10659                           
 10660                           ;MCU_B1.c: 100: PORTA = 0b01110111;;
 10661  1E38  3077               	movlw	119
 10662  1E39  0020               	movlb	0	; select bank0
 10663  1E3A  008C               	movwf	12	;volatile
 10664                           
 10665                           ;MCU_B1.c: 101: PORTB = 0b00000111;;
 10666  1E3B  3007               	movlw	7
 10667  1E3C  008D               	movwf	13	;volatile
 10668                           
 10669                           ;MCU_B1.c: 102: PORTC = 0b00001100;;
 10670  1E3D  300C               	movlw	12
 10671  1E3E  008E               	movwf	14	;volatile
 10672                           
 10673                           ;MCU_B1.c: 104: WPUB = 0b00000000;;
 10674  1E3F  0024               	movlb	4	; select bank4
 10675  1E40  018D               	clrf	13	;volatile
 10676  1E41  0008               	return
 10677  1E42                     __end_of_IO_Set:	
 10678                           
 10679                           	psect	text64
 10680  1B99                     __ptext64:	
 10681 ;; *************** function _IOC_Set *****************
 10682 ;; Defined at:
 10683 ;;		line 361 in file "../src/MCU_B1.c"
 10684 ;; Parameters:    Size  Location     Type
 10685 ;;		None
 10686 ;; Auto vars:     Size  Location     Type
 10687 ;;		None
 10688 ;; Return value:  Size  Location     Type
 10689 ;;		None               void
 10690 ;; Registers used:
 10691 ;;		wreg, status,2
 10692 ;; Tracked objects:
 10693 ;;		On entry : 0/0
 10694 ;;		On exit  : 0/0
 10695 ;;		Unchanged: 0/0
 10696 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10697 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10698 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10699 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10700 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10701 ;;Total ram usage:        0 bytes
 10702 ;; Hardware stack levels used:    1
 10703 ;; Hardware stack levels required when called:    3
 10704 ;; This function calls:
 10705 ;;		Nothing
 10706 ;; This function is called by:
 10707 ;;		_Mcu_Initialization
 10708 ;; This function uses a non-reentrant model
 10709 ;;
 10710                           
 10711                           
 10712                           ;psect for function _IOC_Set
 10713  1B99                     _IOC_Set:	
 10714                           
 10715                           ;MCU_B1.c: 362: WPUB2 = 0;
 10716                           
 10717                           ;incstack = 0
 10718                           ; Regs used in _IOC_Set: [wreg+status,2]
 10719  1B99  0024               	movlb	4	; select bank4
 10720  1B9A  110D               	bcf	13,2	;volatile
 10721                           
 10722                           ;MCU_B1.c: 382: IOCBP = 0b00000100;
 10723  1B9B  3004               	movlw	4
 10724  1B9C  0027               	movlb	7	; select bank7
 10725  1B9D  0094               	movwf	20	;volatile
 10726                           
 10727                           ;MCU_B1.c: 383: IOCBN = 0b00000000;
 10728  1B9E  0195               	clrf	21	;volatile
 10729                           
 10730                           ;MCU_B1.c: 387: IOCBF = 0b00000000;
 10731  1B9F  0196               	clrf	22	;volatile
 10732                           
 10733                           ;MCU_B1.c: 389: IOCIE = 1;
 10734  1BA0  158B               	bsf	11,3	;volatile
 10735                           
 10736                           ;MCU_B1.c: 390: IOCIF = 0;
 10737  1BA1  100B               	bcf	11,0	;volatile
 10738                           
 10739                           ;MCU_B1.c: 391: PEIE = 1;
 10740  1BA2  170B               	bsf	11,6	;volatile
 10741                           
 10742                           ;MCU_B1.c: 392: GIE = 1;
 10743  1BA3  178B               	bsf	11,7	;volatile
 10744  1BA4  0008               	return
 10745  1BA5                     __end_of_IOC_Set:	
 10746                           
 10747                           	psect	text65
 10748  1AD2                     __ptext65:	
 10749 ;; *************** function _Fosc_Set *****************
 10750 ;; Defined at:
 10751 ;;		line 56 in file "../src/MCU_B1.c"
 10752 ;; Parameters:    Size  Location     Type
 10753 ;;		None
 10754 ;; Auto vars:     Size  Location     Type
 10755 ;;		None
 10756 ;; Return value:  Size  Location     Type
 10757 ;;		None               void
 10758 ;; Registers used:
 10759 ;;		wreg
 10760 ;; Tracked objects:
 10761 ;;		On entry : 0/0
 10762 ;;		On exit  : 0/0
 10763 ;;		Unchanged: 0/0
 10764 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10765 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10766 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10767 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10768 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10769 ;;Total ram usage:        0 bytes
 10770 ;; Hardware stack levels used:    1
 10771 ;; Hardware stack levels required when called:    3
 10772 ;; This function calls:
 10773 ;;		Nothing
 10774 ;; This function is called by:
 10775 ;;		_Mcu_Initialization
 10776 ;; This function uses a non-reentrant model
 10777 ;;
 10778                           
 10779                           
 10780                           ;psect for function _Fosc_Set
 10781  1AD2                     _Fosc_Set:	
 10782                           
 10783                           ;MCU_B1.c: 57: OSCCON = 0x78;
 10784                           
 10785                           ;incstack = 0
 10786                           ; Regs used in _Fosc_Set: [wreg]
 10787  1AD2  3078               	movlw	120
 10788  1AD3  0021               	movlb	1	; select bank1
 10789  1AD4  0099               	movwf	25	;volatile
 10790  1AD5  0008               	return
 10791  1AD6                     __end_of_Fosc_Set:	
 10792                           
 10793                           	psect	text66
 10794  1B11                     __ptext66:	
 10795 ;; *************** function _ADC_Set *****************
 10796 ;; Defined at:
 10797 ;;		line 426 in file "../src/MCU_B1.c"
 10798 ;; Parameters:    Size  Location     Type
 10799 ;;		None
 10800 ;; Auto vars:     Size  Location     Type
 10801 ;;		None
 10802 ;; Return value:  Size  Location     Type
 10803 ;;		None               void
 10804 ;; Registers used:
 10805 ;;		wreg
 10806 ;; Tracked objects:
 10807 ;;		On entry : 0/0
 10808 ;;		On exit  : 0/0
 10809 ;;		Unchanged: 0/0
 10810 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10811 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10812 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10813 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10814 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10815 ;;Total ram usage:        0 bytes
 10816 ;; Hardware stack levels used:    1
 10817 ;; Hardware stack levels required when called:    3
 10818 ;; This function calls:
 10819 ;;		Nothing
 10820 ;; This function is called by:
 10821 ;;		_Mcu_Initialization
 10822 ;; This function uses a non-reentrant model
 10823 ;;
 10824                           
 10825                           
 10826                           ;psect for function _ADC_Set
 10827  1B11                     _ADC_Set:	
 10828                           
 10829                           ;MCU_B1.c: 427: ADCON1 = 0xf3;
 10830                           
 10831                           ;incstack = 0
 10832                           ; Regs used in _ADC_Set: [wreg]
 10833  1B11  30F3               	movlw	243
 10834  1B12  0021               	movlb	1	; select bank1
 10835  1B13  009E               	movwf	30	;volatile
 10836                           
 10837                           ;MCU_B1.c: 428: FVRCON = 0xc1;
 10838  1B14  30C1               	movlw	193
 10839  1B15  0022               	movlb	2	; select bank2
 10840  1B16  0097               	movwf	23	;volatile
 10841  1B17  0008               	return
 10842  1B18                     __end_of_ADC_Set:	
 10843                           
 10844                           	psect	text67
 10845  0056                     __ptext67:	
 10846 ;; *************** function _Load_Main *****************
 10847 ;; Defined at:
 10848 ;;		line 39 in file "../src/OverLoad_B1.c"
 10849 ;; Parameters:    Size  Location     Type
 10850 ;;		None
 10851 ;; Auto vars:     Size  Location     Type
 10852 ;;  i               2   10[BANK0 ] int 
 10853 ;;  Load_Status     1    9[BANK0 ] unsigned char 
 10854 ;;  error           1    8[BANK0 ] unsigned char 
 10855 ;; Return value:  Size  Location     Type
 10856 ;;		None               void
 10857 ;; Registers used:
 10858 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10859 ;; Tracked objects:
 10860 ;;		On entry : 0/0
 10861 ;;		On exit  : 0/0
 10862 ;;		Unchanged: 0/0
 10863 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10864 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10865 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10866 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10867 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10868 ;;Total ram usage:        6 bytes
 10869 ;; Hardware stack levels used:    1
 10870 ;; Hardware stack levels required when called:    5
 10871 ;; This function calls:
 10872 ;;		___lwdiv
 10873 ;;		___wmul
 10874 ;;		_getAll_DimmerLights_AdjSw
 10875 ;;		_getDimmer_LoadGO
 10876 ;;		_getDimmer_Load_Status
 10877 ;;		_getMain_All_Error_Status
 10878 ;;		_getMain_LightsStatus
 10879 ;;		_getMain_Lights_Count
 10880 ;;		_setLoad_AH_AL_Restore
 10881 ;; This function is called by:
 10882 ;;		_main
 10883 ;; This function uses a non-reentrant model
 10884 ;;
 10885                           
 10886                           
 10887                           ;psect for function _Load_Main
 10888  0056                     _Load_Main:	
 10889                           
 10890                           ;OverLoad_B1.c: 40: char error = getMain_All_Error_Status(0);
 10891                           
 10892                           ;incstack = 0
 10893                           ; Regs used in _Load_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10894  0056  3000               	movlw	0
 10895  0057  3191  216E  3180   	fcall	_getMain_All_Error_Status
 10896  005A  0020               	movlb	0	; select bank0
 10897  005B  00A6               	movwf	??_Load_Main
 10898  005C  0826               	movf	??_Load_Main,w
 10899  005D  00A8               	movwf	Load_Main@error
 10900                           
 10901                           ;OverLoad_B1.c: 41: char Load_Status = 0;
 10902  005E  01A9               	clrf	Load_Main@Load_Status
 10903                           
 10904                           ;OverLoad_B1.c: 43: if (Load.Enable == 1) {
 10905  005F  0022               	movlb	2	; select bank2
 10906  0060  1C25               	btfss	_Load^(0+256),0
 10907  0061  29EA               	goto	l1740
 10908                           
 10909                           ;OverLoad_B1.c: 64: if (getMain_LightsStatus() == 0) {
 10910  0062  319C  2416  3180   	fcall	_getMain_LightsStatus
 10911  0065  3800               	iorlw	0
 10912  0066  1D03               	skipz
 10913  0067  286A               	goto	l10662
 10914                           
 10915                           ;OverLoad_B1.c: 65: Load.GO = 0;
 10916  0068  0022               	movlb	2	; select bank2
 10917  0069  288B               	goto	l10680
 10918  006A                     l10662:	
 10919                           ;OverLoad_B1.c: 66: } else {
 10920                           
 10921                           
 10922                           ;OverLoad_B1.c: 69: if (error == 0 && getAll_DimmerLights_AdjSw() == 0) {
 10923  006A  0020               	movlb	0	; select bank0
 10924  006B  08A8               	movf	Load_Main@error,f
 10925  006C  1D03               	skipz
 10926  006D  2888               	goto	l1743
 10927  006E  3190  20B5  3180   	fcall	_getAll_DimmerLights_AdjSw
 10928  0071  3800               	iorlw	0
 10929  0072  1D03               	skipz
 10930  0073  2888               	goto	l1743
 10931                           
 10932                           ;OverLoad_B1.c: 70: Load.GO = 1;
 10933  0074  0022               	movlb	2	; select bank2
 10934  0075  14A5               	bsf	_Load^(0+256),1
 10935                           
 10936                           ;OverLoad_B1.c: 72: if (getDimmer_LoadGO() == 1) {
 10937  0076  319B  2303  3180   	fcall	_getDimmer_LoadGO
 10938  0079  3A01               	xorlw	1
 10939  007A  1D03               	skipz
 10940  007B  2883               	goto	l1744
 10941                           
 10942                           ;OverLoad_B1.c: 73: if (Load.Run == 0 && Load.OK == 0) {
 10943  007C  0022               	movlb	2	; select bank2
 10944  007D  1DA5               	btfss	_Load^(0+256),3
 10945  007E  1BA5               	btfsc	_Load^(0+256),7
 10946  007F  288C               	goto	l1742
 10947                           
 10948                           ;OverLoad_B1.c: 74: Load.Run = 1;
 10949  0080  15A5               	bsf	_Load^(0+256),3
 10950                           
 10951                           ;OverLoad_B1.c: 75: Load.Count = 0;
 10952  0081  01CE               	clrf	(_Load^(0+256)+41)
 10953                           
 10954                           ;OverLoad_B1.c: 76: }
 10955                           ;OverLoad_B1.c: 77: } else {
 10956  0082  288C               	goto	l1742
 10957  0083                     l1744:	
 10958                           
 10959                           ;OverLoad_B1.c: 78: if (Load.OK == 1) {
 10960  0083  0022               	movlb	2	; select bank2
 10961  0084  1FA5               	btfss	_Load^(0+256),7
 10962  0085  288C               	goto	l1742
 10963                           
 10964                           ;OverLoad_B1.c: 79: Load.OK = 0;
 10965  0086  13A5               	bcf	_Load^(0+256),7
 10966                           
 10967                           ;OverLoad_B1.c: 80: }
 10968                           ;OverLoad_B1.c: 81: }
 10969                           ;OverLoad_B1.c: 82: } else {
 10970  0087  288C               	goto	l1742
 10971  0088                     l1743:	
 10972                           
 10973                           ;OverLoad_B1.c: 83: if (Load.GO == 1) {
 10974  0088  0022               	movlb	2	; select bank2
 10975  0089  1CA5               	btfss	_Load^(0+256),1
 10976  008A  288C               	goto	l1742
 10977  008B                     l10680:	
 10978                           
 10979                           ;OverLoad_B1.c: 84: Load.GO = 0;
 10980  008B  10A5               	bcf	_Load^(0+256),1
 10981  008C                     l1742:	
 10982                           
 10983                           ;OverLoad_B1.c: 85: }
 10984                           ;OverLoad_B1.c: 86: }
 10985                           ;OverLoad_B1.c: 88: }
 10986                           ;OverLoad_B1.c: 91: if (Load.GO == 1) {
 10987  008C  1CA5               	btfss	_Load^(0+256),1
 10988  008D  29C6               	goto	l1750
 10989                           
 10990                           ;OverLoad_B1.c: 92: Load.LightsON = 1;
 10991  008E  1525               	bsf	_Load^(0+256),2
 10992                           
 10993                           ;OverLoad_B1.c: 94: if (Load.ADtoGO == 1) {
 10994  008F  1E25               	btfss	_Load^(0+256),4
 10995  0090  29C4               	goto	l1751
 10996                           
 10997                           ;OverLoad_B1.c: 95: Load.Time++;
 10998  0091  3001               	movlw	1
 10999  0092  07A6               	addwf	(_Load^(0+256)+1),f
 11000  0093  3000               	movlw	0
 11001  0094  3DA7               	addwfc	((_Load+1)^(0+256)+1),f
 11002                           
 11003                           ;OverLoad_B1.c: 96: if (Load.Time >= (40 / 20)) {
 11004  0095  3000               	movlw	0
 11005  0096  0227               	subwf	((_Load+1)^(0+256)+1),w
 11006  0097  3002               	movlw	2
 11007  0098  1903               	skipnz
 11008  0099  0226               	subwf	(_Load^(0+256)+1),w
 11009  009A  1C03               	skipc
 11010  009B  0008               	return
 11011                           
 11012                           ;OverLoad_B1.c: 97: Load.Time = 0;
 11013  009C  01A6               	clrf	(_Load^(0+256)+1)
 11014  009D  01A7               	clrf	((_Load+1)^(0+256)+1)
 11015                           
 11016                           ;OverLoad_B1.c: 98: Load.ADtoGO = 0;
 11017  009E  1225               	bcf	_Load^(0+256),4
 11018                           
 11019                           ;OverLoad_B1.c: 100: for (int i = 1; i < 4; i++) {
 11020  009F  3001               	movlw	1
 11021  00A0  0020               	movlb	0	; select bank0
 11022  00A1  00AA               	movwf	Load_Main@i
 11023  00A2  3000               	movlw	0
 11024  00A3  00AB               	movwf	Load_Main@i+1
 11025  00A4  082B               	movf	Load_Main@i+1,w
 11026  00A5  3A80               	xorlw	128
 11027  00A6  00A6               	movwf	??_Load_Main
 11028  00A7  3080               	movlw	128
 11029  00A8  0226               	subwf	??_Load_Main,w
 11030  00A9  1D03               	skipz
 11031  00AA  28AD               	goto	u12235
 11032  00AB  3004               	movlw	4
 11033  00AC  022A               	subwf	Load_Main@i,w
 11034  00AD                     u12235:	
 11035  00AD  1803               	btfsc	3,0
 11036  00AE  28E1               	goto	l10702
 11037  00AF                     l10696:	
 11038                           
 11039                           ;OverLoad_B1.c: 101: Load.ADH += Load.AH[i];
 11040  00AF  0020               	movlb	0	; select bank0
 11041  00B0  352A               	lslf	Load_Main@i,w
 11042  00B1  3E30               	addlw	(_Load+11)& (0+255)
 11043  00B2  0086               	movwf	6
 11044  00B3  3001               	movlw	1	; select bank2/3
 11045  00B4  0087               	movwf	7
 11046  00B5  3F40               	moviw [0]fsr1
 11047  00B6  00A6               	movwf	??_Load_Main
 11048  00B7  3F41               	moviw [1]fsr1
 11049  00B8  00A7               	movwf	??_Load_Main+1
 11050  00B9  0826               	movf	??_Load_Main,w
 11051  00BA  0022               	movlb	2	; select bank2
 11052  00BB  07AA               	addwf	(_Load^(0+256)+5),f
 11053  00BC  0020               	movlb	0	; select bank0
 11054  00BD  0827               	movf	??_Load_Main+1,w
 11055  00BE  0022               	movlb	2	; select bank2
 11056  00BF  3DAB               	addwfc	((_Load+1)^(0+256)+5),f
 11057                           
 11058                           ;OverLoad_B1.c: 102: Load.ADL += Load.AL[i];
 11059  00C0  0020               	movlb	0	; select bank0
 11060  00C1  352A               	lslf	Load_Main@i,w
 11061  00C2  3E3A               	addlw	(_Load+21)& (0+255)
 11062  00C3  0086               	movwf	6
 11063  00C4  3001               	movlw	1	; select bank2/3
 11064  00C5  0087               	movwf	7
 11065  00C6  3F40               	moviw [0]fsr1
 11066  00C7  00A6               	movwf	??_Load_Main
 11067  00C8  3F41               	moviw [1]fsr1
 11068  00C9  00A7               	movwf	??_Load_Main+1
 11069  00CA  0826               	movf	??_Load_Main,w
 11070  00CB  0022               	movlb	2	; select bank2
 11071  00CC  07AC               	addwf	(_Load^(0+256)+7),f
 11072  00CD  0020               	movlb	0	; select bank0
 11073  00CE  0827               	movf	??_Load_Main+1,w
 11074  00CF  0022               	movlb	2	; select bank2
 11075  00D0  3DAD               	addwfc	((_Load+1)^(0+256)+7),f
 11076  00D1  3001               	movlw	1
 11077  00D2  0020               	movlb	0	; select bank0
 11078  00D3  07AA               	addwf	Load_Main@i,f
 11079  00D4  3000               	movlw	0
 11080  00D5  3DAB               	addwfc	Load_Main@i+1,f
 11081  00D6  082B               	movf	Load_Main@i+1,w
 11082  00D7  3A80               	xorlw	128
 11083  00D8  00A6               	movwf	??_Load_Main
 11084  00D9  3080               	movlw	128
 11085  00DA  0226               	subwf	??_Load_Main,w
 11086  00DB  1D03               	skipz
 11087  00DC  28DF               	goto	u12245
 11088  00DD  3004               	movlw	4
 11089  00DE  022A               	subwf	Load_Main@i,w
 11090  00DF                     u12245:	
 11091  00DF  1C03               	skipc
 11092  00E0  28AF               	goto	l10696
 11093  00E1                     l10702:	
 11094                           
 11095                           ;OverLoad_B1.c: 103: }
 11096                           ;OverLoad_B1.c: 104: Load.ADH /= 3;
 11097  00E1  3003               	movlw	3
 11098  00E2  00F3               	movwf	___lwdiv@divisor
 11099  00E3  3000               	movlw	0
 11100  00E4  00F4               	movwf	___lwdiv@divisor+1
 11101  00E5  0022               	movlb	2	; select bank2
 11102  00E6  082B               	movf	((_Load+1)^(0+256)+5),w
 11103  00E7  01F6               	clrf	___lwdiv@dividend+1
 11104  00E8  07F6               	addwf	___lwdiv@dividend+1,f
 11105  00E9  082A               	movf	(_Load^(0+256)+5),w
 11106  00EA  01F5               	clrf	___lwdiv@dividend
 11107  00EB  07F5               	addwf	___lwdiv@dividend,f
 11108  00EC  3192  220B  3180   	fcall	___lwdiv
 11109  00EF  0874               	movf	?___lwdiv+1,w
 11110  00F0  0022               	movlb	2	; select bank2
 11111  00F1  01AB               	clrf	((_Load+1)^(0+256)+5)
 11112  00F2  07AB               	addwf	((_Load+1)^(0+256)+5),f
 11113  00F3  0873               	movf	?___lwdiv,w
 11114  00F4  01AA               	clrf	(_Load^(0+256)+5)
 11115  00F5  07AA               	addwf	(_Load^(0+256)+5),f
 11116                           
 11117                           ;OverLoad_B1.c: 105: Load.ADL /= 3;
 11118  00F6  3003               	movlw	3
 11119  00F7  00F3               	movwf	___lwdiv@divisor
 11120  00F8  3000               	movlw	0
 11121  00F9  00F4               	movwf	___lwdiv@divisor+1
 11122  00FA  082D               	movf	((_Load+1)^(0+256)+7),w
 11123  00FB  01F6               	clrf	___lwdiv@dividend+1
 11124  00FC  07F6               	addwf	___lwdiv@dividend+1,f
 11125  00FD  082C               	movf	(_Load^(0+256)+7),w
 11126  00FE  01F5               	clrf	___lwdiv@dividend
 11127  00FF  07F5               	addwf	___lwdiv@dividend,f
 11128  0100  3192  220B  3180   	fcall	___lwdiv
 11129  0103  0874               	movf	?___lwdiv+1,w
 11130  0104  0022               	movlb	2	; select bank2
 11131  0105  01AD               	clrf	((_Load+1)^(0+256)+7)
 11132  0106  07AD               	addwf	((_Load+1)^(0+256)+7),f
 11133  0107  0873               	movf	?___lwdiv,w
 11134  0108  01AC               	clrf	(_Load^(0+256)+7)
 11135  0109  07AC               	addwf	(_Load^(0+256)+7),f
 11136                           
 11137                           ;OverLoad_B1.c: 106: setLoad_AH_AL_Restore();
 11138  010A  319E  260C  3180   	fcall	_setLoad_AH_AL_Restore
 11139                           
 11140                           ;OverLoad_B1.c: 108: if (Load.ADH >= Load.ADL) {
 11141  010D  0022               	movlb	2	; select bank2
 11142  010E  082D               	movf	((_Load+1)^(0+256)+7),w
 11143  010F  022B               	subwf	((_Load+1)^(0+256)+5),w
 11144  0110  1D03               	skipz
 11145  0111  2914               	goto	u12255
 11146  0112  082C               	movf	(_Load^(0+256)+7),w
 11147  0113  022A               	subwf	(_Load^(0+256)+5),w
 11148  0114                     u12255:	
 11149  0114  1C03               	skipc
 11150  0115  0008               	return
 11151                           
 11152                           ;OverLoad_B1.c: 109: Load.AD = Load.ADH - Load.ADL;
 11153  0116  3005               	movlw	5
 11154  0117  3E25               	addlw	_Load& (0+255)
 11155  0118  0086               	movwf	6
 11156  0119  3001               	movlw	1	; select bank2/3
 11157  011A  0087               	movwf	7
 11158  011B  092C               	comf	(_Load^(0+256)+7),w
 11159  011C  0020               	movlb	0	; select bank0
 11160  011D  00A6               	movwf	??_Load_Main
 11161  011E  0022               	movlb	2	; select bank2
 11162  011F  092D               	comf	((_Load+1)^(0+256)+7),w
 11163  0120  0020               	movlb	0	; select bank0
 11164  0121  00A7               	movwf	??_Load_Main+1
 11165  0122  0AA6               	incf	??_Load_Main,f
 11166  0123  1903               	skipnz
 11167  0124  0AA7               	incf	??_Load_Main+1,f
 11168  0125  3F40               	moviw [0]fsr1
 11169  0126  0726               	addwf	??_Load_Main,w
 11170  0127  0022               	movlb	2	; select bank2
 11171  0128  00C4               	movwf	(_Load^(0+256)+31)
 11172  0129  3F41               	moviw [1]fsr1
 11173  012A  0020               	movlb	0	; select bank0
 11174  012B  3D27               	addwfc	??_Load_Main+1,w
 11175  012C  0022               	movlb	2	; select bank2
 11176  012D  00C5               	movwf	(_Load^(0+256)+32)
 11177                           
 11178                           ;OverLoad_B1.c: 110: Load.ADH = 0;
 11179  012E  01AA               	clrf	(_Load^(0+256)+5)
 11180  012F  01AB               	clrf	((_Load+1)^(0+256)+5)
 11181                           
 11182                           ;OverLoad_B1.c: 111: Load.ADL = 0;
 11183  0130  01AC               	clrf	(_Load^(0+256)+7)
 11184  0131  01AD               	clrf	((_Load+1)^(0+256)+7)
 11185                           
 11186                           ;OverLoad_B1.c: 113: if (Load.Run == 1) {
 11187  0132  1DA5               	btfss	_Load^(0+256),3
 11188  0133  2990               	goto	l10742
 11189                           
 11190                           ;OverLoad_B1.c: 114: if (Load.Count < 2) {
 11191  0134  3002               	movlw	2
 11192  0135  024E               	subwf	(_Load^(0+256)+41),w
 11193  0136  1803               	skipnc
 11194  0137  2990               	goto	l10742
 11195                           
 11196                           ;OverLoad_B1.c: 115: Load.Count++;
 11197  0138  3001               	movlw	1
 11198  0139  0020               	movlb	0	; select bank0
 11199  013A  00A6               	movwf	??_Load_Main
 11200  013B  0826               	movf	??_Load_Main,w
 11201  013C  0022               	movlb	2	; select bank2
 11202  013D  07CE               	addwf	(_Load^(0+256)+41),f
 11203                           
 11204                           ;OverLoad_B1.c: 116: Load_Status = getDimmer_Load_Status();
 11205  013E  319B  230A  3180   	fcall	_getDimmer_Load_Status
 11206  0141  0020               	movlb	0	; select bank0
 11207  0142  00A6               	movwf	??_Load_Main
 11208  0143  0826               	movf	??_Load_Main,w
 11209  0144  00A9               	movwf	Load_Main@Load_Status
 11210                           
 11211                           ;OverLoad_B1.c: 117: Load.LightsCount = getMain_Lights_Count();
 11212  0145  319C  2497  3180   	fcall	_getMain_Lights_Count
 11213  0148  0020               	movlb	0	; select bank0
 11214  0149  00A6               	movwf	??_Load_Main
 11215  014A  0826               	movf	??_Load_Main,w
 11216  014B  0022               	movlb	2	; select bank2
 11217  014C  00D1               	movwf	(_Load^(0+256)+44)
 11218                           
 11219                           ;OverLoad_B1.c: 118: if (Load.Count == 1) {
 11220  014D  084E               	movf	(_Load^(0+256)+41),w
 11221  014E  3A01               	xorlw	1
 11222  014F  1D03               	skipz
 11223  0150  295B               	goto	l10728
 11224                           
 11225                           ;OverLoad_B1.c: 119: Load.ErrorCountValue = 2;
 11226  0151  3002               	movlw	2
 11227  0152  0020               	movlb	0	; select bank0
 11228  0153  00A6               	movwf	??_Load_Main
 11229  0154  0826               	movf	??_Load_Main,w
 11230  0155  0022               	movlb	2	; select bank2
 11231  0156  00D0               	movwf	(_Load^(0+256)+43)
 11232                           
 11233                           ;OverLoad_B1.c: 120: Load.JudgeValue = (20*50);
 11234  0157  30E8               	movlw	232
 11235  0158  00CA               	movwf	(_Load^(0+256)+37)
 11236  0159  3003               	movlw	3
 11237  015A  2966               	goto	L8
 11238  015B                     l10728:	
 11239                           ;OverLoad_B1.c: 121: } else if (Load.Count == 2) {
 11240                           
 11241  015B  084E               	movf	(_Load^(0+256)+41),w
 11242  015C  3A02               	xorlw	2
 11243  015D  1D03               	skipz
 11244  015E  2990               	goto	l10742
 11245                           
 11246                           ;OverLoad_B1.c: 122: if (Load.LightsCount == 1) {
 11247  015F  0851               	movf	(_Load^(0+256)+44),w
 11248  0160  3A01               	xorlw	1
 11249  0161  1D03               	skipz
 11250  0162  2968               	goto	l10734
 11251                           
 11252                           ;OverLoad_B1.c: 123: Load.JudgeValue = (int)(1.1*50);
 11253  0163  3037               	movlw	55
 11254  0164  00CA               	movwf	(_Load^(0+256)+37)
 11255  0165  3000               	movlw	0
 11256  0166                     L8:	
 11257  0166  00CB               	movwf	(_Load^(0+256)+38)
 11258                           
 11259                           ;OverLoad_B1.c: 124: } else {
 11260  0167  2990               	goto	l10742
 11261  0168                     l10734:	
 11262                           
 11263                           ;OverLoad_B1.c: 125: if (Load_Status == 0) {
 11264  0168  0020               	movlb	0	; select bank0
 11265  0169  08A9               	movf	Load_Main@Load_Status,f
 11266  016A  1D03               	skipz
 11267  016B  2984               	goto	l10738
 11268                           
 11269                           ;OverLoad_B1.c: 126: Load.JudgeValue = (int)(1.1*50) * Load.LightsCount;
 11270  016C  0022               	movlb	2	; select bank2
 11271  016D  0851               	movf	(_Load^(0+256)+44),w
 11272  016E  0020               	movlb	0	; select bank0
 11273  016F  00A6               	movwf	??_Load_Main
 11274  0170  01A7               	clrf	??_Load_Main+1
 11275  0171  0826               	movf	??_Load_Main,w
 11276  0172  00F3               	movwf	___wmul@multiplier
 11277  0173  0827               	movf	??_Load_Main+1,w
 11278  0174  00F4               	movwf	___wmul@multiplier+1
 11279  0175  3037               	movlw	55
 11280  0176  00F5               	movwf	___wmul@multiplicand
 11281  0177  3000               	movlw	0
 11282  0178  00F6               	movwf	___wmul@multiplicand+1
 11283  0179  319E  269B  3180   	fcall	___wmul
 11284  017C  0874               	movf	?___wmul+1,w
 11285  017D  0022               	movlb	2	; select bank2
 11286  017E  01CB               	clrf	((_Load+1)^(0+256)+37)
 11287  017F  07CB               	addwf	((_Load+1)^(0+256)+37),f
 11288  0180  0873               	movf	?___wmul,w
 11289  0181  01CA               	clrf	(_Load^(0+256)+37)
 11290  0182  07CA               	addwf	(_Load^(0+256)+37),f
 11291                           
 11292                           ;OverLoad_B1.c: 127: } else if (Load_Status == 1) {
 11293  0183  2990               	goto	l10742
 11294  0184                     l10738:	
 11295  0184  0020               	movlb	0	; select bank0
 11296  0185  0829               	movf	Load_Main@Load_Status,w
 11297  0186  3A01               	xorlw	1
 11298  0187  1D03               	skipz
 11299  0188  2990               	goto	l10742
 11300                           
 11301                           ;OverLoad_B1.c: 128: Load.JudgeValue = (int)(1.1*50) + Load.TotalLoad;
 11302  0189  0022               	movlb	2	; select bank2
 11303  018A  082E               	movf	(_Load^(0+256)+9),w
 11304  018B  3E37               	addlw	55
 11305  018C  00CA               	movwf	(_Load^(0+256)+37)
 11306  018D  3000               	movlw	0
 11307  018E  3D2F               	addwfc	((_Load+1)^(0+256)+9),w
 11308  018F  00CB               	movwf	((_Load+1)^(0+256)+37)
 11309  0190                     l10742:	
 11310                           
 11311                           ;OverLoad_B1.c: 129: }
 11312                           ;OverLoad_B1.c: 130: }
 11313                           ;OverLoad_B1.c: 131: }
 11314                           ;OverLoad_B1.c: 132: }
 11315                           ;OverLoad_B1.c: 133: }
 11316                           ;OverLoad_B1.c: 135: if (Load.AD >= Load.JudgeValue) {
 11317  0190  0022               	movlb	2	; select bank2
 11318  0191  084B               	movf	((_Load+1)^(0+256)+37),w
 11319  0192  0245               	subwf	((_Load+1)^(0+256)+31),w
 11320  0193  1D03               	skipz
 11321  0194  2997               	goto	u12335
 11322  0195  084A               	movf	(_Load^(0+256)+37),w
 11323  0196  0244               	subwf	(_Load^(0+256)+31),w
 11324  0197                     u12335:	
 11325  0197  1C03               	skipc
 11326  0198  29A6               	goto	l10752
 11327                           
 11328                           ;OverLoad_B1.c: 136: Load.ErrorCount++;
 11329  0199  3001               	movlw	1
 11330  019A  0020               	movlb	0	; select bank0
 11331  019B  00A6               	movwf	??_Load_Main
 11332  019C  0826               	movf	??_Load_Main,w
 11333  019D  0022               	movlb	2	; select bank2
 11334  019E  07CF               	addwf	(_Load^(0+256)+42),f
 11335                           
 11336                           ;OverLoad_B1.c: 137: if (Load.ErrorCount > Load.ErrorCountValue) {
 11337  019F  084F               	movf	(_Load^(0+256)+42),w
 11338  01A0  0250               	subwf	(_Load^(0+256)+43),w
 11339  01A1  1803               	skipnc
 11340  01A2  0008               	return
 11341                           
 11342                           ;OverLoad_B1.c: 138: Load.ErrorCount = 0;
 11343  01A3  01CF               	clrf	(_Load^(0+256)+42)
 11344                           
 11345                           ;OverLoad_B1.c: 139: Load.ERROR = 1;
 11346  01A4  16A5               	bsf	_Load^(0+256),5
 11347                           
 11348                           ;OverLoad_B1.c: 161: }
 11349                           ;OverLoad_B1.c: 162: } else {
 11350  01A5  0008               	return
 11351  01A6                     l10752:	
 11352                           
 11353                           ;OverLoad_B1.c: 163: Load.ErrorCount = 0;
 11354  01A6  01CF               	clrf	(_Load^(0+256)+42)
 11355                           
 11356                           ;OverLoad_B1.c: 164: if (Load.Run == 1) {
 11357  01A7  1DA5               	btfss	_Load^(0+256),3
 11358  01A8  0008               	return
 11359                           
 11360                           ;OverLoad_B1.c: 165: Load.SafeCount++;
 11361  01A9  3001               	movlw	1
 11362  01AA  0020               	movlb	0	; select bank0
 11363  01AB  00A6               	movwf	??_Load_Main
 11364  01AC  0826               	movf	??_Load_Main,w
 11365  01AD  0022               	movlb	2	; select bank2
 11366  01AE  07D2               	addwf	(_Load^(0+256)+45),f
 11367                           
 11368                           ;OverLoad_B1.c: 166: if (Load.SafeCount >= 3) {
 11369  01AF  3003               	movlw	3
 11370  01B0  0252               	subwf	(_Load^(0+256)+45),w
 11371  01B1  1C03               	skipc
 11372  01B2  0008               	return
 11373                           
 11374                           ;OverLoad_B1.c: 167: Load.SafeCount = 0;
 11375  01B3  01D2               	clrf	(_Load^(0+256)+45)
 11376                           
 11377                           ;OverLoad_B1.c: 168: Load.OK = 1;
 11378  01B4  17A5               	bsf	_Load^(0+256),7
 11379                           
 11380                           ;OverLoad_B1.c: 169: Load.Run = 0;
 11381  01B5  11A5               	bcf	_Load^(0+256),3
 11382                           
 11383                           ;OverLoad_B1.c: 170: Load.Count = 0;
 11384  01B6  01CE               	clrf	(_Load^(0+256)+41)
 11385                           
 11386                           ;OverLoad_B1.c: 171: Load.TotalLoad = Load.AD;
 11387  01B7  0845               	movf	((_Load+1)^(0+256)+31),w
 11388  01B8  01AF               	clrf	((_Load+1)^(0+256)+9)
 11389  01B9  07AF               	addwf	((_Load+1)^(0+256)+9),f
 11390  01BA  0844               	movf	(_Load^(0+256)+31),w
 11391  01BB  01AE               	clrf	(_Load^(0+256)+9)
 11392  01BC  07AE               	addwf	(_Load^(0+256)+9),f
 11393                           
 11394                           ;OverLoad_B1.c: 172: Load.ErrorCountValue = 3;
 11395  01BD  3003               	movlw	3
 11396  01BE  0020               	movlb	0	; select bank0
 11397  01BF  00A6               	movwf	??_Load_Main
 11398  01C0  0826               	movf	??_Load_Main,w
 11399  01C1  0022               	movlb	2	; select bank2
 11400  01C2  00D0               	movwf	(_Load^(0+256)+43)
 11401                           
 11402                           ;OverLoad_B1.c: 175: }
 11403                           ;OverLoad_B1.c: 176: }
 11404                           ;OverLoad_B1.c: 199: }
 11405                           ;OverLoad_B1.c: 200: }
 11406                           ;OverLoad_B1.c: 201: }
 11407                           ;OverLoad_B1.c: 202: } else {
 11408  01C3  0008               	return
 11409  01C4                     l1751:	
 11410                           
 11411                           ;OverLoad_B1.c: 203: Load.ADtoGO = 1;
 11412  01C4  1625               	bsf	_Load^(0+256),4
 11413                           
 11414                           ;OverLoad_B1.c: 204: }
 11415                           ;OverLoad_B1.c: 205: } else {
 11416  01C5  0008               	return
 11417  01C6                     l1750:	
 11418                           
 11419                           ;OverLoad_B1.c: 207: if (Load.LightsON == 1) {
 11420  01C6  1D25               	btfss	_Load^(0+256),2
 11421  01C7  29D9               	goto	l10790
 11422                           
 11423                           ;OverLoad_B1.c: 208: Load.LightsON = 0;
 11424  01C8  1125               	bcf	_Load^(0+256),2
 11425                           
 11426                           ;OverLoad_B1.c: 210: Load.ADtoGO = 0;
 11427  01C9  1225               	bcf	_Load^(0+256),4
 11428                           
 11429                           ;OverLoad_B1.c: 211: Load.Time = 0;
 11430  01CA  01A6               	clrf	(_Load^(0+256)+1)
 11431  01CB  01A7               	clrf	((_Load+1)^(0+256)+1)
 11432                           
 11433                           ;OverLoad_B1.c: 212: setLoad_AH_AL_Restore();
 11434  01CC  319E  260C  3180   	fcall	_setLoad_AH_AL_Restore
 11435                           
 11436                           ;OverLoad_B1.c: 214: Load.ErrorCount = 0;
 11437  01CF  0022               	movlb	2	; select bank2
 11438  01D0  01CF               	clrf	(_Load^(0+256)+42)
 11439                           
 11440                           ;OverLoad_B1.c: 215: Load.SafeCount = 0;
 11441  01D1  01D2               	clrf	(_Load^(0+256)+45)
 11442                           
 11443                           ;OverLoad_B1.c: 217: Load.ADH = 0;
 11444  01D2  01AA               	clrf	(_Load^(0+256)+5)
 11445  01D3  01AB               	clrf	((_Load+1)^(0+256)+5)
 11446                           
 11447                           ;OverLoad_B1.c: 218: Load.ADL = 0;
 11448  01D4  01AC               	clrf	(_Load^(0+256)+7)
 11449  01D5  01AD               	clrf	((_Load+1)^(0+256)+7)
 11450                           
 11451                           ;OverLoad_B1.c: 224: Load.Run = 0;
 11452  01D6  11A5               	bcf	_Load^(0+256),3
 11453                           
 11454                           ;OverLoad_B1.c: 225: Load.Count = 0;
 11455  01D7  01CE               	clrf	(_Load^(0+256)+41)
 11456                           
 11457                           ;OverLoad_B1.c: 226: Load.OK = 0;
 11458  01D8  13A5               	bcf	_Load^(0+256),7
 11459  01D9                     l10790:	
 11460                           
 11461                           ;OverLoad_B1.c: 248: }
 11462                           ;OverLoad_B1.c: 249: if (Load.ERROR == 1) {
 11463  01D9  1EA5               	btfss	_Load^(0+256),5
 11464  01DA  0008               	return
 11465                           
 11466                           ;OverLoad_B1.c: 250: Load.ErrorTime++;
 11467  01DB  3001               	movlw	1
 11468  01DC  07A8               	addwf	(_Load^(0+256)+3),f
 11469  01DD  3000               	movlw	0
 11470  01DE  3DA9               	addwfc	((_Load+1)^(0+256)+3),f
 11471                           
 11472                           ;OverLoad_B1.c: 251: if (Load.ErrorTime >= (10000 / 20)) {
 11473  01DF  3001               	movlw	1
 11474  01E0  0229               	subwf	((_Load+1)^(0+256)+3),w
 11475  01E1  30F4               	movlw	244
 11476  01E2  1903               	skipnz
 11477  01E3  0228               	subwf	(_Load^(0+256)+3),w
 11478  01E4  1C03               	skipc
 11479  01E5  0008               	return
 11480                           
 11481                           ;OverLoad_B1.c: 252: Load.ErrorTime = 0;
 11482  01E6  01A8               	clrf	(_Load^(0+256)+3)
 11483  01E7  01A9               	clrf	((_Load+1)^(0+256)+3)
 11484                           
 11485                           ;OverLoad_B1.c: 253: Load.ERROR = 0;
 11486  01E8  12A5               	bcf	_Load^(0+256),5
 11487                           
 11488                           ;OverLoad_B1.c: 254: }
 11489                           ;OverLoad_B1.c: 255: }
 11490                           ;OverLoad_B1.c: 256: }
 11491                           ;OverLoad_B1.c: 257: } else {
 11492  01E9  0008               	return
 11493  01EA                     l1740:	
 11494                           
 11495                           ;OverLoad_B1.c: 258: if (myMain.PowerON == 1) {
 11496  01EA  0021               	movlb	1	; select bank1
 11497  01EB  1C2E               	btfss	_myMain^(0+128),0
 11498  01EC  0008               	return
 11499                           
 11500                           ;OverLoad_B1.c: 259: Load.Enable = 1;
 11501  01ED  0022               	movlb	2	; select bank2
 11502  01EE  1425               	bsf	_Load^(0+256),0
 11503  01EF  0008               	return
 11504  01F0                     __end_of_Load_Main:	
 11505                           
 11506                           	psect	text68
 11507  1C97                     __ptext68:	
 11508 ;; *************** function _getMain_Lights_Count *****************
 11509 ;; Defined at:
 11510 ;;		line 466 in file "../src/Main_B1.c"
 11511 ;; Parameters:    Size  Location     Type
 11512 ;;		None
 11513 ;; Auto vars:     Size  Location     Type
 11514 ;;  status2         1    5[COMMON] unsigned char 
 11515 ;;  status1         1    4[COMMON] unsigned char 
 11516 ;;  count           1    3[COMMON] unsigned char 
 11517 ;; Return value:  Size  Location     Type
 11518 ;;                  1    wreg      unsigned char 
 11519 ;; Registers used:
 11520 ;;		wreg, status,2, status,0
 11521 ;; Tracked objects:
 11522 ;;		On entry : 0/0
 11523 ;;		On exit  : 0/0
 11524 ;;		Unchanged: 0/0
 11525 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11526 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11527 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11528 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11529 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11530 ;;Total ram usage:        3 bytes
 11531 ;; Hardware stack levels used:    1
 11532 ;; Hardware stack levels required when called:    3
 11533 ;; This function calls:
 11534 ;;		Nothing
 11535 ;; This function is called by:
 11536 ;;		_Load_Main
 11537 ;; This function uses a non-reentrant model
 11538 ;;
 11539                           
 11540                           
 11541                           ;psect for function _getMain_Lights_Count
 11542  1C97                     _getMain_Lights_Count:	
 11543                           
 11544                           ;Main_B1.c: 467: char count = 0;
 11545                           
 11546                           ;incstack = 0
 11547                           ; Regs used in _getMain_Lights_Count: [wreg+status,2+status,0]
 11548  1C97  01F3               	clrf	getMain_Lights_Count@count
 11549                           
 11550                           ;Main_B1.c: 471: char status1 = 0;
 11551  1C98  01F4               	clrf	getMain_Lights_Count@status1
 11552                           
 11553                           ;Main_B1.c: 472: status1 = DimmerLights1.StatusFlag == 1 ? 1 : 0;
 11554  1C99  3000               	movlw	0
 11555  1C9A  0022               	movlb	2	; select bank2
 11556  1C9B  1954               	btfsc	(_DimmerLights1^(0+256)+1),2
 11557  1C9C  3001               	movlw	1
 11558  1C9D  00F4               	movwf	getMain_Lights_Count@status1
 11559                           
 11560                           ;Main_B1.c: 475: char status2 = 0;
 11561  1C9E  01F5               	clrf	getMain_Lights_Count@status2
 11562                           
 11563                           ;Main_B1.c: 476: status2 = DimmerLights2.StatusFlag == 1 ? 1 : 0;
 11564  1C9F  3000               	movlw	0
 11565  1CA0  0023               	movlb	3	; select bank3
 11566  1CA1  193F               	btfsc	(_DimmerLights2^(0+384)+1),2
 11567  1CA2  3001               	movlw	1
 11568  1CA3  00F5               	movwf	getMain_Lights_Count@status2
 11569                           
 11570                           ;Main_B1.c: 500: return count = (status1 + status2);
 11571  1CA4  0874               	movf	getMain_Lights_Count@status1,w
 11572  1CA5  0775               	addwf	getMain_Lights_Count@status2,w
 11573  1CA6  00F3               	movwf	getMain_Lights_Count@count
 11574  1CA7  0008               	return
 11575  1CA8                     __end_of_getMain_Lights_Count:	
 11576                           
 11577                           	psect	text69
 11578  1B0A                     __ptext69:	
 11579 ;; *************** function _getDimmer_Load_Status *****************
 11580 ;; Defined at:
 11581 ;;		line 1004 in file "../src/Dimmer_B1.c"
 11582 ;; Parameters:    Size  Location     Type
 11583 ;;		None
 11584 ;; Auto vars:     Size  Location     Type
 11585 ;;  status          1    3[COMMON] unsigned char 
 11586 ;; Return value:  Size  Location     Type
 11587 ;;                  1    wreg      unsigned char 
 11588 ;; Registers used:
 11589 ;;		wreg, status,2
 11590 ;; Tracked objects:
 11591 ;;		On entry : 0/0
 11592 ;;		On exit  : 0/0
 11593 ;;		Unchanged: 0/0
 11594 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11595 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11596 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11597 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11598 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11599 ;;Total ram usage:        1 bytes
 11600 ;; Hardware stack levels used:    1
 11601 ;; Hardware stack levels required when called:    3
 11602 ;; This function calls:
 11603 ;;		Nothing
 11604 ;; This function is called by:
 11605 ;;		_Load_Main
 11606 ;; This function uses a non-reentrant model
 11607 ;;
 11608                           
 11609                           
 11610                           ;psect for function _getDimmer_Load_Status
 11611  1B0A                     _getDimmer_Load_Status:	
 11612                           
 11613                           ;Dimmer_B1.c: 1005: char status = Dimmer.Load_Status == 1 ? 1 : 0;
 11614                           
 11615                           ;incstack = 0
 11616                           ; Regs used in _getDimmer_Load_Status: [wreg+status,2]
 11617  1B0A  3000               	movlw	0
 11618  1B0B  0021               	movlb	1	; select bank1
 11619  1B0C  19C8               	btfsc	_Dimmer^(0+128),3	;volatile
 11620  1B0D  3001               	movlw	1
 11621  1B0E  00F3               	movwf	getDimmer_Load_Status@status
 11622                           
 11623                           ;Dimmer_B1.c: 1006: return status;
 11624  1B0F  0873               	movf	getDimmer_Load_Status@status,w
 11625  1B10  0008               	return
 11626  1B11                     __end_of_getDimmer_Load_Status:	
 11627                           
 11628                           	psect	text70
 11629  1B03                     __ptext70:	
 11630 ;; *************** function _getDimmer_LoadGO *****************
 11631 ;; Defined at:
 11632 ;;		line 738 in file "../src/Dimmer_B1.c"
 11633 ;; Parameters:    Size  Location     Type
 11634 ;;		None
 11635 ;; Auto vars:     Size  Location     Type
 11636 ;;  loadgo          1    3[COMMON] unsigned char 
 11637 ;; Return value:  Size  Location     Type
 11638 ;;                  1    wreg      unsigned char 
 11639 ;; Registers used:
 11640 ;;		wreg, status,2
 11641 ;; Tracked objects:
 11642 ;;		On entry : 0/0
 11643 ;;		On exit  : 0/0
 11644 ;;		Unchanged: 0/0
 11645 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11646 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11647 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11648 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11649 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11650 ;;Total ram usage:        1 bytes
 11651 ;; Hardware stack levels used:    1
 11652 ;; Hardware stack levels required when called:    3
 11653 ;; This function calls:
 11654 ;;		Nothing
 11655 ;; This function is called by:
 11656 ;;		_Load_Main
 11657 ;; This function uses a non-reentrant model
 11658 ;;
 11659                           
 11660                           
 11661                           ;psect for function _getDimmer_LoadGO
 11662  1B03                     _getDimmer_LoadGO:	
 11663                           
 11664                           ;Dimmer_B1.c: 739: char loadgo = Dimmer.LoadGO == 1 ? 1 : 0;
 11665                           
 11666                           ;incstack = 0
 11667                           ; Regs used in _getDimmer_LoadGO: [wreg+status,2]
 11668  1B03  3000               	movlw	0
 11669  1B04  0021               	movlb	1	; select bank1
 11670  1B05  1948               	btfsc	_Dimmer^(0+128),2	;volatile
 11671  1B06  3001               	movlw	1
 11672  1B07  00F3               	movwf	getDimmer_LoadGO@loadgo
 11673                           
 11674                           ;Dimmer_B1.c: 740: return loadgo;
 11675  1B08  0873               	movf	getDimmer_LoadGO@loadgo,w
 11676  1B09  0008               	return
 11677  1B0A                     __end_of_getDimmer_LoadGO:	
 11678                           
 11679                           	psect	text71
 11680  10B5                     __ptext71:	
 11681 ;; *************** function _getAll_DimmerLights_AdjSw *****************
 11682 ;; Defined at:
 11683 ;;		line 948 in file "../src/Dimmer_B1.c"
 11684 ;; Parameters:    Size  Location     Type
 11685 ;;		None
 11686 ;; Auto vars:     Size  Location     Type
 11687 ;;  i               2    1[BANK0 ] int 
 11688 ;;  adjsw           1    3[BANK0 ] unsigned char 
 11689 ;;  count           1    0[BANK0 ] unsigned char 
 11690 ;; Return value:  Size  Location     Type
 11691 ;;                  1    wreg      unsigned char 
 11692 ;; Registers used:
 11693 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11694 ;; Tracked objects:
 11695 ;;		On entry : 0/0
 11696 ;;		On exit  : 0/0
 11697 ;;		Unchanged: 0/0
 11698 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11699 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11700 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11701 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11702 ;;      Totals:         1       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11703 ;;Total ram usage:        5 bytes
 11704 ;; Hardware stack levels used:    1
 11705 ;; Hardware stack levels required when called:    4
 11706 ;; This function calls:
 11707 ;;		_DimmerLightsPointSelect
 11708 ;; This function is called by:
 11709 ;;		_Load_Main
 11710 ;; This function uses a non-reentrant model
 11711 ;;
 11712                           
 11713                           
 11714                           ;psect for function _getAll_DimmerLights_AdjSw
 11715  10B5                     _getAll_DimmerLights_AdjSw:	
 11716                           
 11717                           ;Dimmer_B1.c: 949: char count = 2;
 11718                           
 11719                           ;incstack = 0
 11720                           ; Regs used in _getAll_DimmerLights_AdjSw: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cs
      +                          tack]
 11721  10B5  3002               	movlw	2
 11722  10B6  00F5               	movwf	??_getAll_DimmerLights_AdjSw
 11723  10B7  0875               	movf	??_getAll_DimmerLights_AdjSw,w
 11724  10B8  0020               	movlb	0	; select bank0
 11725  10B9  00A0               	movwf	getAll_DimmerLights_AdjSw@count
 11726                           
 11727                           ;Dimmer_B1.c: 950: char adjsw = 0;
 11728  10BA  01A3               	clrf	getAll_DimmerLights_AdjSw@adjsw
 11729                           
 11730                           ;Dimmer_B1.c: 952: for (int i = 0; i < count; i++) {
 11731  10BB  01A1               	clrf	getAll_DimmerLights_AdjSw@i
 11732  10BC  01A2               	clrf	getAll_DimmerLights_AdjSw@i+1
 11733  10BD                     l10134:	
 11734  10BD  0822               	movf	getAll_DimmerLights_AdjSw@i+1,w
 11735  10BE  3A80               	xorlw	128
 11736  10BF  00F5               	movwf	??_getAll_DimmerLights_AdjSw
 11737  10C0  3080               	movlw	128
 11738  10C1  0275               	subwf	??_getAll_DimmerLights_AdjSw,w
 11739  10C2  1D03               	skipz
 11740  10C3  28C6               	goto	u11215
 11741  10C4  0820               	movf	getAll_DimmerLights_AdjSw@count,w
 11742  10C5  0221               	subwf	getAll_DimmerLights_AdjSw@i,w
 11743  10C6                     u11215:	
 11744  10C6  1803               	btfsc	3,0
 11745  10C7  28DF               	goto	l10136
 11746                           
 11747                           ;Dimmer_B1.c: 953: DimmerLightsPointSelect(i + 1);
 11748  10C8  0020               	movlb	0	; select bank0
 11749  10C9  0821               	movf	getAll_DimmerLights_AdjSw@i,w
 11750  10CA  3E01               	addlw	1
 11751  10CB  319D  25A8  3190   	fcall	_DimmerLightsPointSelect
 11752                           
 11753                           ;Dimmer_B1.c: 954: if (adjsw == 0) {
 11754  10CE  0020               	movlb	0	; select bank0
 11755  10CF  08A3               	movf	getAll_DimmerLights_AdjSw@adjsw,f
 11756  10D0  1D03               	skipz
 11757  10D1  28DA               	goto	l10132
 11758                           
 11759                           ;Dimmer_B1.c: 955: adjsw = DimmerLights->AdjSw == 1 ? 1 : 0;
 11760  10D2  0A6D               	incf	_DimmerLights,w
 11761  10D3  0086               	movwf	6
 11762  10D4  3001               	movlw	1	; select bank2/3
 11763  10D5  0087               	movwf	7
 11764  10D6  3000               	movlw	0
 11765  10D7  1B01               	btfsc	1,6
 11766  10D8  3001               	movlw	1
 11767  10D9  00A3               	movwf	getAll_DimmerLights_AdjSw@adjsw
 11768  10DA                     l10132:	
 11769  10DA  3001               	movlw	1
 11770  10DB  07A1               	addwf	getAll_DimmerLights_AdjSw@i,f
 11771  10DC  3000               	movlw	0
 11772  10DD  3DA2               	addwfc	getAll_DimmerLights_AdjSw@i+1,f
 11773  10DE  28BD               	goto	l10134
 11774  10DF                     l10136:	
 11775                           
 11776                           ;Dimmer_B1.c: 956: }
 11777                           ;Dimmer_B1.c: 957: }
 11778                           ;Dimmer_B1.c: 958: return adjsw;
 11779  10DF  0020               	movlb	0	; select bank0
 11780  10E0  0823               	movf	getAll_DimmerLights_AdjSw@adjsw,w
 11781  10E1  0008               	return
 11782  10E2                     __end_of_getAll_DimmerLights_AdjSw:	
 11783                           
 11784                           	psect	text72
 11785  1E9B                     __ptext72:	
 11786 ;; *************** function ___wmul *****************
 11787 ;; Defined at:
 11788 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul16.c"
 11789 ;; Parameters:    Size  Location     Type
 11790 ;;  multiplier      2    3[COMMON] unsigned int 
 11791 ;;  multiplicand    2    5[COMMON] unsigned int 
 11792 ;; Auto vars:     Size  Location     Type
 11793 ;;  product         2    0[BANK0 ] unsigned int 
 11794 ;; Return value:  Size  Location     Type
 11795 ;;                  2    3[COMMON] unsigned int 
 11796 ;; Registers used:
 11797 ;;		wreg, status,2, status,0
 11798 ;; Tracked objects:
 11799 ;;		On entry : 0/0
 11800 ;;		On exit  : 0/0
 11801 ;;		Unchanged: 0/0
 11802 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11803 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11804 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11805 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11806 ;;      Totals:         4       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11807 ;;Total ram usage:        6 bytes
 11808 ;; Hardware stack levels used:    1
 11809 ;; Hardware stack levels required when called:    3
 11810 ;; This function calls:
 11811 ;;		Nothing
 11812 ;; This function is called by:
 11813 ;;		_Load_Main
 11814 ;; This function uses a non-reentrant model
 11815 ;;
 11816                           
 11817                           
 11818                           ;psect for function ___wmul
 11819  1E9B                     ___wmul:	
 11820                           
 11821                           ;incstack = 0
 11822                           ; Regs used in ___wmul: [wreg+status,2+status,0]
 11823  1E9B  0020               	movlb	0	; select bank0
 11824  1E9C  01A0               	clrf	___wmul@product
 11825  1E9D  01A1               	clrf	___wmul@product+1
 11826  1E9E                     l10438:	
 11827  1E9E  1C73               	btfss	___wmul@multiplier,0
 11828  1E9F  2EA5               	goto	l2885
 11829  1EA0  0875               	movf	___wmul@multiplicand,w
 11830  1EA1  0020               	movlb	0	; select bank0
 11831  1EA2  07A0               	addwf	___wmul@product,f
 11832  1EA3  0876               	movf	___wmul@multiplicand+1,w
 11833  1EA4  3DA1               	addwfc	___wmul@product+1,f
 11834  1EA5                     l2885:	
 11835  1EA5  3001               	movlw	1
 11836  1EA6                     u11775:	
 11837  1EA6  35F5               	lslf	___wmul@multiplicand,f
 11838  1EA7  0DF6               	rlf	___wmul@multiplicand+1,f
 11839  1EA8  0B89               	decfsz	9,f
 11840  1EA9  2EA6               	goto	u11775
 11841  1EAA  3001               	movlw	1
 11842  1EAB                     u11785:	
 11843  1EAB  36F4               	lsrf	___wmul@multiplier+1,f
 11844  1EAC  0CF3               	rrf	___wmul@multiplier,f
 11845  1EAD  0B89               	decfsz	9,f
 11846  1EAE  2EAB               	goto	u11785
 11847  1EAF  0874               	movf	___wmul@multiplier+1,w
 11848  1EB0  0473               	iorwf	___wmul@multiplier,w
 11849  1EB1  1D03               	skipz
 11850  1EB2  2E9E               	goto	l10438
 11851  1EB3  0020               	movlb	0	; select bank0
 11852  1EB4  0821               	movf	___wmul@product+1,w
 11853  1EB5  01F4               	clrf	?___wmul+1
 11854  1EB6  07F4               	addwf	?___wmul+1,f
 11855  1EB7  0820               	movf	___wmul@product,w
 11856  1EB8  01F3               	clrf	?___wmul
 11857  1EB9  07F3               	addwf	?___wmul,f
 11858  1EBA  0008               	return
 11859  1EBB                     __end_of___wmul:	
 11860                           
 11861                           	psect	text73
 11862  120B                     __ptext73:	
 11863 ;; *************** function ___lwdiv *****************
 11864 ;; Defined at:
 11865 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\lwdiv.c"
 11866 ;; Parameters:    Size  Location     Type
 11867 ;;  divisor         2    3[COMMON] unsigned int 
 11868 ;;  dividend        2    5[COMMON] unsigned int 
 11869 ;; Auto vars:     Size  Location     Type
 11870 ;;  quotient        2    1[BANK0 ] unsigned int 
 11871 ;;  counter         1    0[BANK0 ] unsigned char 
 11872 ;; Return value:  Size  Location     Type
 11873 ;;                  2    3[COMMON] unsigned int 
 11874 ;; Registers used:
 11875 ;;		wreg, status,2, status,0
 11876 ;; Tracked objects:
 11877 ;;		On entry : 0/0
 11878 ;;		On exit  : 0/0
 11879 ;;		Unchanged: 0/0
 11880 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11881 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11882 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11883 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11884 ;;      Totals:         5       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11885 ;;Total ram usage:        8 bytes
 11886 ;; Hardware stack levels used:    1
 11887 ;; Hardware stack levels required when called:    3
 11888 ;; This function calls:
 11889 ;;		Nothing
 11890 ;; This function is called by:
 11891 ;;		_Load_Main
 11892 ;;		_setRF_Main
 11893 ;; This function uses a non-reentrant model
 11894 ;;
 11895                           
 11896                           
 11897                           ;psect for function ___lwdiv
 11898  120B                     ___lwdiv:	
 11899                           
 11900                           ;incstack = 0
 11901                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
 11902  120B  0020               	movlb	0	; select bank0
 11903  120C  01A1               	clrf	___lwdiv@quotient
 11904  120D  01A2               	clrf	___lwdiv@quotient+1
 11905  120E  0874               	movf	___lwdiv@divisor+1,w
 11906  120F  0473               	iorwf	___lwdiv@divisor,w
 11907  1210  1903               	skipnz
 11908  1211  2A3B               	goto	l10044
 11909  1212  01A0               	clrf	___lwdiv@counter
 11910  1213  0AA0               	incf	___lwdiv@counter,f
 11911  1214                     l10032:	
 11912  1214  1BF4               	btfsc	___lwdiv@divisor+1,7
 11913  1215  2A20               	goto	l10034
 11914  1216  3001               	movlw	1
 11915  1217                     u11015:	
 11916  1217  35F3               	lslf	___lwdiv@divisor,f
 11917  1218  0DF4               	rlf	___lwdiv@divisor+1,f
 11918  1219  0B89               	decfsz	9,f
 11919  121A  2A17               	goto	u11015
 11920  121B  3001               	movlw	1
 11921  121C  00F7               	movwf	??___lwdiv
 11922  121D  0877               	movf	??___lwdiv,w
 11923  121E  07A0               	addwf	___lwdiv@counter,f
 11924  121F  2A14               	goto	l10032
 11925  1220                     l10034:	
 11926  1220  3001               	movlw	1
 11927  1221                     u11035:	
 11928  1221  35A1               	lslf	___lwdiv@quotient,f
 11929  1222  0DA2               	rlf	___lwdiv@quotient+1,f
 11930  1223  0B89               	decfsz	9,f
 11931  1224  2A21               	goto	u11035
 11932  1225  0874               	movf	___lwdiv@divisor+1,w
 11933  1226  0276               	subwf	___lwdiv@dividend+1,w
 11934  1227  1D03               	skipz
 11935  1228  2A2B               	goto	u11045
 11936  1229  0873               	movf	___lwdiv@divisor,w
 11937  122A  0275               	subwf	___lwdiv@dividend,w
 11938  122B                     u11045:	
 11939  122B  1C03               	skipc
 11940  122C  2A32               	goto	l10040
 11941  122D  0873               	movf	___lwdiv@divisor,w
 11942  122E  02F5               	subwf	___lwdiv@dividend,f
 11943  122F  0874               	movf	___lwdiv@divisor+1,w
 11944  1230  3BF6               	subwfb	___lwdiv@dividend+1,f
 11945  1231  1421               	bsf	___lwdiv@quotient,0
 11946  1232                     l10040:	
 11947  1232  3001               	movlw	1
 11948  1233                     u11055:	
 11949  1233  36F4               	lsrf	___lwdiv@divisor+1,f
 11950  1234  0CF3               	rrf	___lwdiv@divisor,f
 11951  1235  0B89               	decfsz	9,f
 11952  1236  2A33               	goto	u11055
 11953  1237  3001               	movlw	1
 11954  1238  02A0               	subwf	___lwdiv@counter,f
 11955  1239  1D03               	btfss	3,2
 11956  123A  2A20               	goto	l10034
 11957  123B                     l10044:	
 11958  123B  0822               	movf	___lwdiv@quotient+1,w
 11959  123C  01F4               	clrf	?___lwdiv+1
 11960  123D  07F4               	addwf	?___lwdiv+1,f
 11961  123E  0821               	movf	___lwdiv@quotient,w
 11962  123F  01F3               	clrf	?___lwdiv
 11963  1240  07F3               	addwf	?___lwdiv,f
 11964  1241  0008               	return
 11965  1242                     __end_of___lwdiv:	
 11966                           
 11967                           	psect	text74
 11968  1AC6                     __ptext74:	
 11969 ;; *************** function _Load_Initialization *****************
 11970 ;; Defined at:
 11971 ;;		line 9 in file "../src/OverLoad_B1.c"
 11972 ;; Parameters:    Size  Location     Type
 11973 ;;		None
 11974 ;; Auto vars:     Size  Location     Type
 11975 ;;		None
 11976 ;; Return value:  Size  Location     Type
 11977 ;;		None               void
 11978 ;; Registers used:
 11979 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11980 ;; Tracked objects:
 11981 ;;		On entry : 0/0
 11982 ;;		On exit  : 0/0
 11983 ;;		Unchanged: 0/0
 11984 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11985 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11986 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11987 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11988 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11989 ;;Total ram usage:        0 bytes
 11990 ;; Hardware stack levels used:    1
 11991 ;; Hardware stack levels required when called:    4
 11992 ;; This function calls:
 11993 ;;		_setLoad_AH_AL_Restore
 11994 ;; This function is called by:
 11995 ;;		_main
 11996 ;; This function uses a non-reentrant model
 11997 ;;
 11998                           
 11999                           
 12000                           ;psect for function _Load_Initialization
 12001  1AC6                     _Load_Initialization:	
 12002                           
 12003                           ;OverLoad_B1.c: 11: setLoad_AH_AL_Restore();
 12004                           
 12005                           ;incstack = 0
 12006                           ; Regs used in _Load_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12007  1AC6  319E  260C         	fcall	_setLoad_AH_AL_Restore
 12008  1AC8  0008               	return
 12009  1AC9                     __end_of_Load_Initialization:	
 12010                           
 12011                           	psect	text75
 12012  1E0C                     __ptext75:	
 12013 ;; *************** function _setLoad_AH_AL_Restore *****************
 12014 ;; Defined at:
 12015 ;;		line 285 in file "../src/OverLoad_B1.c"
 12016 ;; Parameters:    Size  Location     Type
 12017 ;;		None
 12018 ;; Auto vars:     Size  Location     Type
 12019 ;;  i               1    4[COMMON] unsigned char 
 12020 ;; Return value:  Size  Location     Type
 12021 ;;		None               void
 12022 ;; Registers used:
 12023 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 12024 ;; Tracked objects:
 12025 ;;		On entry : 0/0
 12026 ;;		On exit  : 0/0
 12027 ;;		Unchanged: 0/0
 12028 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12029 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12030 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12031 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12032 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12033 ;;Total ram usage:        2 bytes
 12034 ;; Hardware stack levels used:    1
 12035 ;; Hardware stack levels required when called:    3
 12036 ;; This function calls:
 12037 ;;		Nothing
 12038 ;; This function is called by:
 12039 ;;		_Load_Initialization
 12040 ;;		_Load_Main
 12041 ;; This function uses a non-reentrant model
 12042 ;;
 12043                           
 12044                           
 12045                           ;psect for function _setLoad_AH_AL_Restore
 12046  1E0C                     _setLoad_AH_AL_Restore:	
 12047                           
 12048                           ;OverLoad_B1.c: 286: char i;
 12049                           ;OverLoad_B1.c: 287: for (i = 0; i < 5; i++) {
 12050                           
 12051                           ;incstack = 0
 12052                           ; Regs used in _setLoad_AH_AL_Restore: [wreg+fsr1l+fsr1h+status,2+status,0]
 12053  1E0C  01F4               	clrf	setLoad_AH_AL_Restore@i
 12054  1E0D                     L9:	
 12055  1E0D  3005               	movlw	5
 12056  1E0E  0274               	subwf	setLoad_AH_AL_Restore@i,w
 12057  1E0F  1803               	btfsc	3,0
 12058  1E10  0008               	return
 12059                           
 12060                           ;OverLoad_B1.c: 288: Load.AH[i] = 0;
 12061  1E11  3574               	lslf	setLoad_AH_AL_Restore@i,w
 12062  1E12  3E30               	addlw	(_Load+11)& (0+255)
 12063  1E13  0086               	movwf	6
 12064  1E14  3001               	movlw	1	; select bank2/3
 12065  1E15  0087               	movwf	7
 12066  1E16  3000               	movlw	0
 12067  1E17  3FC0               	movwi [0]fsr1
 12068  1E18  3FC1               	movwi [1]fsr1
 12069                           
 12070                           ;OverLoad_B1.c: 289: Load.AL[i] = 0xffff;
 12071  1E19  3574               	lslf	setLoad_AH_AL_Restore@i,w
 12072  1E1A  3E3A               	addlw	(_Load+21)& (0+255)
 12073  1E1B  0086               	movwf	6
 12074  1E1C  3001               	movlw	1	; select bank2/3
 12075  1E1D  0087               	movwf	7
 12076  1E1E  30FF               	movlw	255
 12077  1E1F  3FC0               	movwi [0]fsr1
 12078  1E20  30FF               	movlw	255
 12079  1E21  3FC1               	movwi [1]fsr1
 12080  1E22  3001               	movlw	1
 12081  1E23  00F3               	movwf	??_setLoad_AH_AL_Restore
 12082  1E24  0873               	movf	??_setLoad_AH_AL_Restore,w
 12083  1E25  07F4               	addwf	setLoad_AH_AL_Restore@i,f
 12084  1E26  2E0D               	goto	L9
 12085  1E27                     __end_of_setLoad_AH_AL_Restore:	
 12086                           
 12087                           	psect	text76
 12088  1B8D                     __ptext76:	
 12089 ;; *************** function _LED_Main *****************
 12090 ;; Defined at:
 12091 ;;		line 47 in file "../src/LED_B1.c"
 12092 ;; Parameters:    Size  Location     Type
 12093 ;;		None
 12094 ;; Auto vars:     Size  Location     Type
 12095 ;;		None
 12096 ;; Return value:  Size  Location     Type
 12097 ;;		None               void
 12098 ;; Registers used:
 12099 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12100 ;; Tracked objects:
 12101 ;;		On entry : 0/0
 12102 ;;		On exit  : 0/0
 12103 ;;		Unchanged: 0/0
 12104 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12105 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12106 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12107 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12108 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12109 ;;Total ram usage:        0 bytes
 12110 ;; Hardware stack levels used:    1
 12111 ;; Hardware stack levels required when called:    5
 12112 ;; This function calls:
 12113 ;;		_setLED_Main
 12114 ;; This function is called by:
 12115 ;;		_main
 12116 ;; This function uses a non-reentrant model
 12117 ;;
 12118                           
 12119                           
 12120                           ;psect for function _LED_Main
 12121  1B8D                     _LED_Main:	
 12122                           
 12123                           ;LED_B1.c: 53: setLED_Main(1);
 12124                           
 12125                           ;incstack = 0
 12126                           ; Regs used in _LED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12127  1B8D  3001               	movlw	1
 12128  1B8E  3193  2331  319B   	fcall	_setLED_Main
 12129                           
 12130                           ;LED_B1.c: 56: setLED_Main(2);
 12131  1B91  3002               	movlw	2
 12132  1B92  3193  2331  319B   	fcall	_setLED_Main
 12133                           
 12134                           ;LED_B1.c: 62: setLED_Main(99);
 12135  1B95  3063               	movlw	99
 12136  1B96  3193  2331         	fcall	_setLED_Main
 12137  1B98  0008               	return
 12138  1B99                     __end_of_LED_Main:	
 12139                           
 12140                           	psect	text77
 12141  1331                     __ptext77:	
 12142 ;; *************** function _setLED_Main *****************
 12143 ;; Defined at:
 12144 ;;		line 221 in file "../src/LED_B1.c"
 12145 ;; Parameters:    Size  Location     Type
 12146 ;;  led             1    wreg     unsigned char 
 12147 ;; Auto vars:     Size  Location     Type
 12148 ;;  led             1    7[COMMON] unsigned char 
 12149 ;; Return value:  Size  Location     Type
 12150 ;;		None               void
 12151 ;; Registers used:
 12152 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12153 ;; Tracked objects:
 12154 ;;		On entry : 0/0
 12155 ;;		On exit  : 0/0
 12156 ;;		Unchanged: 0/0
 12157 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12158 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12159 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12160 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12161 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12162 ;;Total ram usage:        3 bytes
 12163 ;; Hardware stack levels used:    1
 12164 ;; Hardware stack levels required when called:    4
 12165 ;; This function calls:
 12166 ;;		_LedPointSelect
 12167 ;; This function is called by:
 12168 ;;		_LED_Main
 12169 ;; This function uses a non-reentrant model
 12170 ;;
 12171                           
 12172                           
 12173                           ;psect for function _setLED_Main
 12174  1331                     _setLED_Main:	
 12175                           
 12176                           ;incstack = 0
 12177                           ; Regs used in _setLED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12178                           ;setLED_Main@led stored from wreg
 12179  1331  00F7               	movwf	setLED_Main@led
 12180                           
 12181                           ;LED_B1.c: 222: LedPointSelect(led);
 12182  1332  0877               	movf	setLED_Main@led,w
 12183  1333  319E  265E  3193   	fcall	_LedPointSelect
 12184                           
 12185                           ;LED_B1.c: 223: if (LED->GO == 1) {
 12186  1336  0021               	movlb	1	; select bank1
 12187  1337  0851               	movf	_LED^(0+128),w
 12188  1338  0086               	movwf	6
 12189  1339  3001               	movlw	1	; select bank2/3
 12190  133A  0087               	movwf	7
 12191  133B  1C81               	btfss	1,1
 12192  133C  0008               	return
 12193                           
 12194                           ;LED_B1.c: 224: LED->Time++;
 12195  133D  0A51               	incf	_LED^(0+128),w
 12196  133E  0086               	movwf	6
 12197  133F  3001               	movlw	1	; select bank2/3
 12198  1340  0087               	movwf	7
 12199  1341  3001               	movlw	1
 12200  1342  0781               	addwf	1,f
 12201  1343  3141               	addfsr 1,1
 12202  1344  1803               	skipnc
 12203  1345  0A81               	incf	1,f
 12204                           
 12205                           ;LED_B1.c: 225: if (LED->Time >= (500 / 20)) {
 12206  1346  0A51               	incf	_LED^(0+128),w
 12207  1347  0086               	movwf	6
 12208  1348  3001               	movlw	1	; select bank2/3
 12209  1349  0087               	movwf	7
 12210  134A  3F40               	moviw [0]fsr1
 12211  134B  00F5               	movwf	??_setLED_Main
 12212  134C  3F41               	moviw [1]fsr1
 12213  134D  00F6               	movwf	??_setLED_Main+1
 12214  134E  3000               	movlw	0
 12215  134F  0276               	subwf	??_setLED_Main+1,w
 12216  1350  3019               	movlw	25
 12217  1351  1903               	skipnz
 12218  1352  0275               	subwf	??_setLED_Main,w
 12219  1353  1C03               	skipc
 12220  1354  0008               	return
 12221                           
 12222                           ;LED_B1.c: 226: LED->Time = 0;
 12223  1355  0A51               	incf	_LED^(0+128),w
 12224  1356  0086               	movwf	6
 12225  1357  3001               	movlw	1	; select bank2/3
 12226  1358  0087               	movwf	7
 12227  1359  3000               	movlw	0
 12228  135A  3FC0               	movwi [0]fsr1
 12229  135B  3FC1               	movwi [1]fsr1
 12230                           
 12231                           ;LED_B1.c: 228: if (led == 1) {
 12232  135C  0877               	movf	setLED_Main@led,w
 12233  135D  3A01               	xorlw	1
 12234  135E  1D03               	skipz
 12235  135F  2B63               	goto	l1077
 12236                           
 12237                           ;LED_B1.c: 229: RA3 = RA3 == 1 ? 0 : 1;
 12238  1360  3008               	movlw	8
 12239  1361  0020               	movlb	0	; select bank0
 12240  1362  068C               	xorwf	12,f
 12241  1363                     l1077:	
 12242                           
 12243                           ;LED_B1.c: 230: }
 12244                           ;LED_B1.c: 233: if (led == 2) {
 12245  1363  0877               	movf	setLED_Main@led,w
 12246  1364  3A02               	xorlw	2
 12247  1365  1D03               	skipz
 12248  1366  2B6A               	goto	l1078
 12249                           
 12250                           ;LED_B1.c: 234: RC7 = RC7 == 1 ? 0 : 1;
 12251  1367  3080               	movlw	128
 12252  1368  0020               	movlb	0	; select bank0
 12253  1369  068E               	xorwf	14,f
 12254  136A                     l1078:	
 12255                           
 12256                           ;LED_B1.c: 235: }
 12257                           ;LED_B1.c: 243: if (led == 99) {
 12258  136A  0877               	movf	setLED_Main@led,w
 12259  136B  3A63               	xorlw	99
 12260  136C  1D03               	skipz
 12261  136D  0008               	return
 12262                           
 12263                           ;LED_B1.c: 244: RB5 = RB5 == 1 ? 0 : 1;
 12264  136E  3020               	movlw	32
 12265  136F  0020               	movlb	0	; select bank0
 12266  1370  068D               	xorwf	13,f
 12267  1371  0008               	return
 12268  1372                     __end_of_setLED_Main:	
 12269                           
 12270                           	psect	text78
 12271  1B81                     __ptext78:	
 12272 ;; *************** function _LED_Initialization *****************
 12273 ;; Defined at:
 12274 ;;		line 31 in file "../src/LED_B1.c"
 12275 ;; Parameters:    Size  Location     Type
 12276 ;;		None
 12277 ;; Auto vars:     Size  Location     Type
 12278 ;;		None
 12279 ;; Return value:  Size  Location     Type
 12280 ;;		None               void
 12281 ;; Registers used:
 12282 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12283 ;; Tracked objects:
 12284 ;;		On entry : 0/0
 12285 ;;		On exit  : 0/0
 12286 ;;		Unchanged: 0/0
 12287 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12288 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12289 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12290 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12291 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12292 ;;Total ram usage:        0 bytes
 12293 ;; Hardware stack levels used:    1
 12294 ;; Hardware stack levels required when called:    6
 12295 ;; This function calls:
 12296 ;;		_setLED_Initialization
 12297 ;; This function is called by:
 12298 ;;		_main
 12299 ;; This function uses a non-reentrant model
 12300 ;;
 12301                           
 12302                           
 12303                           ;psect for function _LED_Initialization
 12304  1B81                     _LED_Initialization:	
 12305                           
 12306                           ;LED_B1.c: 33: setLED_Initialization(1);
 12307                           
 12308                           ;incstack = 0
 12309                           ; Regs used in _LED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12310  1B81  3001               	movlw	1
 12311  1B82  319C  2446  319B   	fcall	_setLED_Initialization
 12312                           
 12313                           ;LED_B1.c: 36: setLED_Initialization(2);
 12314  1B85  3002               	movlw	2
 12315  1B86  319C  2446  319B   	fcall	_setLED_Initialization
 12316                           
 12317                           ;LED_B1.c: 42: setLED_Initialization(99);
 12318  1B89  3063               	movlw	99
 12319  1B8A  319C  2446         	fcall	_setLED_Initialization
 12320  1B8C  0008               	return
 12321  1B8D                     __end_of_LED_Initialization:	
 12322                           
 12323                           	psect	text79
 12324  1C46                     __ptext79:	
 12325 ;; *************** function _setLED_Initialization *****************
 12326 ;; Defined at:
 12327 ;;		line 69 in file "../src/LED_B1.c"
 12328 ;; Parameters:    Size  Location     Type
 12329 ;;  led             1    wreg     unsigned char 
 12330 ;; Auto vars:     Size  Location     Type
 12331 ;;  led             1    7[COMMON] unsigned char 
 12332 ;; Return value:  Size  Location     Type
 12333 ;;		None               void
 12334 ;; Registers used:
 12335 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12336 ;; Tracked objects:
 12337 ;;		On entry : 0/0
 12338 ;;		On exit  : 0/0
 12339 ;;		Unchanged: 0/0
 12340 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12341 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12342 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12343 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12344 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12345 ;;Total ram usage:        1 bytes
 12346 ;; Hardware stack levels used:    1
 12347 ;; Hardware stack levels required when called:    5
 12348 ;; This function calls:
 12349 ;;		_LedPointSelect
 12350 ;;		_setLED
 12351 ;; This function is called by:
 12352 ;;		_LED_Initialization
 12353 ;; This function uses a non-reentrant model
 12354 ;;
 12355                           
 12356                           
 12357                           ;psect for function _setLED_Initialization
 12358  1C46                     _setLED_Initialization:	
 12359                           
 12360                           ;incstack = 0
 12361                           ; Regs used in _setLED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 12362                           ;setLED_Initialization@led stored from wreg
 12363  1C46  00F7               	movwf	setLED_Initialization@led
 12364                           
 12365                           ;LED_B1.c: 70: LedPointSelect(led);
 12366  1C47  0877               	movf	setLED_Initialization@led,w
 12367  1C48  319E  265E  319C   	fcall	_LedPointSelect
 12368                           
 12369                           ;LED_B1.c: 71: LED->Enable = 1;
 12370  1C4B  0021               	movlb	1	; select bank1
 12371  1C4C  0851               	movf	_LED^(0+128),w
 12372  1C4D  0086               	movwf	6
 12373  1C4E  3001               	movlw	1	; select bank2/3
 12374  1C4F  0087               	movwf	7
 12375  1C50  1401               	bsf	1,0
 12376                           
 12377                           ;LED_B1.c: 72: setLED(led, 0);
 12378  1C51  01F5               	clrf	setLED@command
 12379  1C52  0877               	movf	setLED_Initialization@led,w
 12380  1C53  3188  20B4         	fcall	_setLED
 12381  1C55  0008               	return
 12382  1C56                     __end_of_setLED_Initialization:	
 12383                           
 12384                           	psect	text80
 12385  11D5                     __ptext80:	
 12386 ;; *************** function _Flash_Memory_Main *****************
 12387 ;; Defined at:
 12388 ;;		line 972 in file "../src/MCU_B1.c"
 12389 ;; Parameters:    Size  Location     Type
 12390 ;;		None
 12391 ;; Auto vars:     Size  Location     Type
 12392 ;;		None
 12393 ;; Return value:  Size  Location     Type
 12394 ;;		None               void
 12395 ;; Registers used:
 12396 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12397 ;; Tracked objects:
 12398 ;;		On entry : 0/0
 12399 ;;		On exit  : 0/0
 12400 ;;		Unchanged: 0/0
 12401 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12402 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12403 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12404 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12405 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12406 ;;Total ram usage:        1 bytes
 12407 ;; Hardware stack levels used:    1
 12408 ;; Hardware stack levels required when called:    6
 12409 ;; This function calls:
 12410 ;;		_Flash_Memory_Modify
 12411 ;;		_getMain_LightsStatus
 12412 ;; This function is called by:
 12413 ;;		_main
 12414 ;; This function uses a non-reentrant model
 12415 ;;
 12416                           
 12417                           
 12418                           ;psect for function _Flash_Memory_Main
 12419  11D5                     _Flash_Memory_Main:	
 12420                           
 12421                           ;MCU_B1.c: 973: if (Memory.Modify == 1) {
 12422                           
 12423                           ;incstack = 0
 12424                           ; Regs used in _Flash_Memory_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12425  11D5  0024               	movlb	4	; select bank4
 12426  11D6  1C44               	btfss	(_Memory^(0+512)+36),0
 12427  11D7  0008               	return
 12428                           
 12429                           ;MCU_B1.c: 974: Memory.GO = getMain_LightsStatus() == 0 ? 1 : 0;
 12430  11D8  319C  2416  3191   	fcall	_getMain_LightsStatus
 12431  11DB  3A00               	xorlw	0
 12432  11DC  3000               	movlw	0
 12433  11DD  1903               	skipnz
 12434  11DE  3001               	movlw	1
 12435  11DF  0020               	movlb	0	; select bank0
 12436  11E0  00A1               	movwf	??_Flash_Memory_Main
 12437  11E1  0DA1               	rlf	??_Flash_Memory_Main,f
 12438  11E2  0024               	movlb	4	; select bank4
 12439  11E3  0844               	movf	(_Memory^(0+512)+36),w
 12440  11E4  0020               	movlb	0	; select bank0
 12441  11E5  0621               	xorwf	??_Flash_Memory_Main,w
 12442  11E6  39FD               	andlw	-3
 12443  11E7  0621               	xorwf	??_Flash_Memory_Main,w
 12444  11E8  0024               	movlb	4	; select bank4
 12445  11E9  00C4               	movwf	(_Memory^(0+512)+36)
 12446                           
 12447                           ;MCU_B1.c: 975: if (Memory.GO == 1) {
 12448  11EA  1CC4               	btfss	(_Memory^(0+512)+36),1
 12449  11EB  2A05               	goto	l1346
 12450                           
 12451                           ;MCU_B1.c: 976: Memory.Runtime = 1;
 12452  11EC  15C4               	bsf	(_Memory^(0+512)+36),3
 12453                           
 12454                           ;MCU_B1.c: 977: Memory.Time++;
 12455  11ED  3001               	movlw	1
 12456  11EE  07C2               	addwf	(_Memory^(0+512)+34),f
 12457  11EF  3000               	movlw	0
 12458  11F0  3DC3               	addwfc	((_Memory+1)^(0+512)+34),f
 12459                           
 12460                           ;MCU_B1.c: 978: if (Memory.Time == 25) {
 12461  11F1  3022               	movlw	34
 12462  11F2  3E20               	addlw	_Memory& (0+255)
 12463  11F3  0086               	movwf	6
 12464  11F4  3002               	movlw	2	; select bank4/5
 12465  11F5  0087               	movwf	7
 12466  11F6  3F40               	moviw [0]fsr1
 12467  11F7  3A19               	xorlw	25
 12468  11F8  1D03               	skipz
 12469  11F9  29FC               	goto	u11905
 12470  11FA  3F41               	moviw [1]fsr1
 12471  11FB  3A00               	xorlw	0
 12472  11FC                     u11905:	
 12473  11FC  1D03               	skipz
 12474  11FD  0008               	return
 12475                           
 12476                           ;MCU_B1.c: 979: Memory.Time = 0;
 12477  11FE  01C2               	clrf	(_Memory^(0+512)+34)
 12478  11FF  01C3               	clrf	((_Memory+1)^(0+512)+34)
 12479                           
 12480                           ;MCU_B1.c: 980: Memory.Modify = 0;
 12481  1200  1044               	bcf	(_Memory^(0+512)+36),0
 12482                           
 12483                           ;MCU_B1.c: 981: Memory.GO = 0;
 12484  1201  10C4               	bcf	(_Memory^(0+512)+36),1
 12485                           
 12486                           ;MCU_B1.c: 982: Flash_Memory_Modify();
 12487  1202  3193  23FC         	fcall	_Flash_Memory_Modify
 12488                           
 12489                           ;MCU_B1.c: 983: }
 12490                           ;MCU_B1.c: 984: } else {
 12491  1204  0008               	return
 12492  1205                     l1346:	
 12493                           
 12494                           ;MCU_B1.c: 985: if (Memory.Runtime == 1) {
 12495  1205  1DC4               	btfss	(_Memory^(0+512)+36),3
 12496  1206  0008               	return
 12497                           
 12498                           ;MCU_B1.c: 986: Memory.Runtime = 0;
 12499  1207  11C4               	bcf	(_Memory^(0+512)+36),3
 12500                           
 12501                           ;MCU_B1.c: 987: Memory.Time = 0;
 12502  1208  01C2               	clrf	(_Memory^(0+512)+34)
 12503  1209  01C3               	clrf	((_Memory+1)^(0+512)+34)
 12504  120A  0008               	return
 12505  120B                     __end_of_Flash_Memory_Main:	
 12506                           
 12507                           	psect	text81
 12508  13FC                     __ptext81:	
 12509 ;; *************** function _Flash_Memory_Modify *****************
 12510 ;; Defined at:
 12511 ;;		line 1045 in file "../src/MCU_B1.c"
 12512 ;; Parameters:    Size  Location     Type
 12513 ;;		None
 12514 ;; Auto vars:     Size  Location     Type
 12515 ;;  i               1    0[BANK0 ] unsigned char 
 12516 ;; Return value:  Size  Location     Type
 12517 ;;		None               void
 12518 ;; Registers used:
 12519 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12520 ;; Tracked objects:
 12521 ;;		On entry : 0/0
 12522 ;;		On exit  : 0/0
 12523 ;;		Unchanged: 0/0
 12524 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12525 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12526 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12527 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12528 ;;      Totals:         1       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12529 ;;Total ram usage:        2 bytes
 12530 ;; Hardware stack levels used:    1
 12531 ;; Hardware stack levels required when called:    5
 12532 ;; This function calls:
 12533 ;;		_Flash_Memory_Erasing
 12534 ;;		_Flash_Memory_Read
 12535 ;;		_Flash_Memory_Write
 12536 ;;		_setMemory_Data
 12537 ;; This function is called by:
 12538 ;;		_Flash_Memory_Main
 12539 ;; This function uses a non-reentrant model
 12540 ;;
 12541                           
 12542                           
 12543                           ;psect for function _Flash_Memory_Modify
 12544  13FC                     _Flash_Memory_Modify:	
 12545                           
 12546                           ;MCU_B1.c: 1046: char i = 0;
 12547                           
 12548                           ;incstack = 0
 12549                           ; Regs used in _Flash_Memory_Modify: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12550  13FC  0020               	movlb	0	; select bank0
 12551  13FD  01A0               	clrf	Flash_Memory_Modify@i
 12552                           
 12553                           ;MCU_B1.c: 1047: for (i = 0; i < 32; i++) {
 12554  13FE  01A0               	clrf	Flash_Memory_Modify@i
 12555  13FF  3020               	movlw	32
 12556  1400  0220               	subwf	Flash_Memory_Modify@i,w
 12557  1401  1803               	btfsc	3,0
 12558  1402  2C18               	goto	l10192
 12559  1403                     l10186:	
 12560                           
 12561                           ;MCU_B1.c: 1048: Memory.Data[i] = Flash_Memory_Read(i);
 12562  1403  0820               	movf	Flash_Memory_Modify@i,w
 12563  1404  319D  2500  3193   	fcall	_Flash_Memory_Read
 12564  1407  00F7               	movwf	??_Flash_Memory_Modify
 12565  1408  0020               	movlb	0	; select bank0
 12566  1409  0820               	movf	Flash_Memory_Modify@i,w
 12567  140A  3E20               	addlw	_Memory& (0+255)
 12568  140B  0086               	movwf	6
 12569  140C  3002               	movlw	2	; select bank4/5
 12570  140D  0087               	movwf	7
 12571  140E  0877               	movf	??_Flash_Memory_Modify,w
 12572  140F  0081               	movwf	1
 12573  1410  3001               	movlw	1
 12574  1411  00F7               	movwf	??_Flash_Memory_Modify
 12575  1412  0877               	movf	??_Flash_Memory_Modify,w
 12576  1413  07A0               	addwf	Flash_Memory_Modify@i,f
 12577  1414  3020               	movlw	32
 12578  1415  0220               	subwf	Flash_Memory_Modify@i,w
 12579  1416  1C03               	skipc
 12580  1417  2C03               	goto	l10186
 12581  1418                     l10192:	
 12582                           
 12583                           ;MCU_B1.c: 1049: }
 12584                           ;MCU_B1.c: 1050: setMemory_Data(0, product->Data[12]);
 12585  1418  086F               	movf	_product,w
 12586  1419  0086               	movwf	6
 12587  141A  3002               	movlw	2	; select bank4/5
 12588  141B  0087               	movwf	7
 12589  141C  3002               	movlw	2	; select bank4/5
 12590  141D  3F4C               	moviw [12]fsr1
 12591  141E  00F3               	movwf	setMemory_Data@data
 12592  141F  3000               	movlw	0
 12593  1420  319B  2354  3193   	fcall	_setMemory_Data
 12594                           
 12595                           ;MCU_B1.c: 1051: setMemory_Data(1, product->Data[13]);
 12596  1423  0020               	movlb	0	; select bank0
 12597  1424  086F               	movf	_product,w
 12598  1425  0086               	movwf	6
 12599  1426  3002               	movlw	2	; select bank4/5
 12600  1427  0087               	movwf	7
 12601  1428  3002               	movlw	2	; select bank4/5
 12602  1429  3F4D               	moviw [13]fsr1
 12603  142A  00F3               	movwf	setMemory_Data@data
 12604  142B  3001               	movlw	1
 12605  142C  319B  2354  3193   	fcall	_setMemory_Data
 12606                           
 12607                           ;MCU_B1.c: 1052: setMemory_Data(2, product->Data[14]);
 12608  142F  0020               	movlb	0	; select bank0
 12609  1430  086F               	movf	_product,w
 12610  1431  0086               	movwf	6
 12611  1432  3002               	movlw	2	; select bank4/5
 12612  1433  0087               	movwf	7
 12613  1434  3002               	movlw	2	; select bank4/5
 12614  1435  3F4E               	moviw [14]fsr1
 12615  1436  00F3               	movwf	setMemory_Data@data
 12616  1437  3002               	movlw	2
 12617  1438  319B  2354  3193   	fcall	_setMemory_Data
 12618                           
 12619                           ;MCU_B1.c: 1058: if (Memory.LoopSave == 1) {
 12620  143B  0024               	movlb	4	; select bank4
 12621  143C  1D44               	btfss	(_Memory^(0+512)+36),2
 12622  143D  2C42               	goto	l1369
 12623                           
 12624                           ;MCU_B1.c: 1059: Memory.LoopSave = 0;
 12625  143E  1144               	bcf	(_Memory^(0+512)+36),2
 12626                           
 12627                           ;MCU_B1.c: 1060: myMain.FirstOpen = 0;
 12628  143F  0021               	movlb	1	; select bank1
 12629  1440  11AE               	bcf	_myMain^(0+128),3
 12630                           
 12631                           ;MCU_B1.c: 1061: myMain.First = 0;
 12632  1441  12AE               	bcf	_myMain^(0+128),5
 12633  1442                     l1369:	
 12634                           
 12635                           ;MCU_B1.c: 1063: }
 12636                           ;MCU_B1.c: 1064: GIE = 0;
 12637  1442  138B               	bcf	11,7	;volatile
 12638                           
 12639                           ;MCU_B1.c: 1065: Flash_Memory_Erasing();
 12640  1443  319B  2375  3193   	fcall	_Flash_Memory_Erasing
 12641                           
 12642                           ;MCU_B1.c: 1066: Flash_Memory_Write();
 12643  1446  319F  27D6         	fcall	_Flash_Memory_Write
 12644                           
 12645                           ;MCU_B1.c: 1067: GIE = 1;
 12646  1448  178B               	bsf	11,7	;volatile
 12647  1449  0008               	return
 12648  144A                     __end_of_Flash_Memory_Modify:	
 12649                           
 12650                           	psect	text82
 12651  1B75                     __ptext82:	
 12652 ;; *************** function _Flash_Memory_Erasing *****************
 12653 ;; Defined at:
 12654 ;;		line 1034 in file "../src/MCU_B1.c"
 12655 ;; Parameters:    Size  Location     Type
 12656 ;;		None
 12657 ;; Auto vars:     Size  Location     Type
 12658 ;;		None
 12659 ;; Return value:  Size  Location     Type
 12660 ;;		None               void
 12661 ;; Registers used:
 12662 ;;		wreg, status,2, status,0, pclath, cstack
 12663 ;; Tracked objects:
 12664 ;;		On entry : 0/0
 12665 ;;		On exit  : 0/0
 12666 ;;		Unchanged: 0/0
 12667 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12668 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12669 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12670 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12671 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12672 ;;Total ram usage:        0 bytes
 12673 ;; Hardware stack levels used:    1
 12674 ;; Hardware stack levels required when called:    4
 12675 ;; This function calls:
 12676 ;;		_Flash_Memory_Unlock
 12677 ;; This function is called by:
 12678 ;;		_Flash_Memory_Modify
 12679 ;; This function uses a non-reentrant model
 12680 ;;
 12681                           
 12682                           
 12683                           ;psect for function _Flash_Memory_Erasing
 12684  1B75                     _Flash_Memory_Erasing:	
 12685                           
 12686                           ;MCU_B1.c: 1035: CFGS = 0;
 12687                           
 12688                           ;incstack = 0
 12689                           ; Regs used in _Flash_Memory_Erasing: [wreg+status,2+status,0+pclath+cstack]
 12690  1B75  0023               	movlb	3	; select bank3
 12691  1B76  1315               	bcf	21,6	;volatile
 12692                           
 12693                           ;MCU_B1.c: 1036: PMADRH = 0x30;
 12694  1B77  3030               	movlw	48
 12695  1B78  0092               	movwf	18	;volatile
 12696                           
 12697                           ;MCU_B1.c: 1037: PMADRL = 0x00;
 12698  1B79  0191               	clrf	17	;volatile
 12699                           
 12700                           ;MCU_B1.c: 1038: FREE = 1;
 12701  1B7A  1615               	bsf	21,4	;volatile
 12702                           
 12703                           ;MCU_B1.c: 1039: WREN = 1;
 12704  1B7B  1515               	bsf	21,2	;volatile
 12705                           
 12706                           ;MCU_B1.c: 1040: Flash_Memory_Unlock();
 12707  1B7C  319B  2338         	fcall	_Flash_Memory_Unlock
 12708                           
 12709                           ;MCU_B1.c: 1041: WREN = 0;
 12710  1B7E  0023               	movlb	3	; select bank3
 12711  1B7F  1115               	bcf	21,2	;volatile
 12712  1B80  0008               	return
 12713  1B81                     __end_of_Flash_Memory_Erasing:	
 12714                           
 12715                           	psect	text83
 12716  0651                     __ptext83:	
 12717 ;; *************** function _Flash_Memory_Initialization *****************
 12718 ;; Defined at:
 12719 ;;		line 931 in file "../src/MCU_B1.c"
 12720 ;; Parameters:    Size  Location     Type
 12721 ;;		None
 12722 ;; Auto vars:     Size  Location     Type
 12723 ;;  i               1   62[BANK0 ] unsigned char 
 12724 ;; Return value:  Size  Location     Type
 12725 ;;		None               void
 12726 ;; Registers used:
 12727 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12728 ;; Tracked objects:
 12729 ;;		On entry : 0/0
 12730 ;;		On exit  : 0/0
 12731 ;;		Unchanged: 0/0
 12732 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12733 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12734 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12735 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12736 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12737 ;;Total ram usage:        2 bytes
 12738 ;; Hardware stack levels used:    1
 12739 ;; Hardware stack levels required when called:    6
 12740 ;; This function calls:
 12741 ;;		_Flash_Memory_Read
 12742 ;;		_Flash_Memory_Write
 12743 ;;		_setMemory_Data
 12744 ;;		_setPercentValue
 12745 ;; This function is called by:
 12746 ;;		_main
 12747 ;; This function uses a non-reentrant model
 12748 ;;
 12749                           
 12750                           
 12751                           ;psect for function _Flash_Memory_Initialization
 12752  0651                     _Flash_Memory_Initialization:	
 12753                           
 12754                           ;MCU_B1.c: 932: char i = 0;
 12755                           
 12756                           ;incstack = 0
 12757                           ; Regs used in _Flash_Memory_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 12758  0651  0020               	movlb	0	; select bank0
 12759  0652  01DE               	clrf	Flash_Memory_Initialization@i
 12760                           
 12761                           ;MCU_B1.c: 933: if (Flash_Memory_Read(31) == 0xaa) {
 12762  0653  301F               	movlw	31
 12763  0654  319D  2500  3186   	fcall	_Flash_Memory_Read
 12764  0657  3AAA               	xorlw	170
 12765  0658  1D03               	skipz
 12766  0659  2EC3               	goto	l10502
 12767                           
 12768                           ;MCU_B1.c: 934: product->Data[12] = Flash_Memory_Read(0);
 12769  065A  3000               	movlw	0
 12770  065B  319D  2500  3186   	fcall	_Flash_Memory_Read
 12771  065E  0020               	movlb	0	; select bank0
 12772  065F  00DD               	movwf	??_Flash_Memory_Initialization
 12773  0660  086F               	movf	_product,w
 12774  0661  3E0C               	addlw	12
 12775  0662  0086               	movwf	6
 12776  0663  3002               	movlw	2	; select bank4/5
 12777  0664  0087               	movwf	7
 12778  0665  085D               	movf	??_Flash_Memory_Initialization,w
 12779  0666  0081               	movwf	1
 12780                           
 12781                           ;MCU_B1.c: 935: product->Data[13] = Flash_Memory_Read(1);
 12782  0667  3001               	movlw	1
 12783  0668  319D  2500  3186   	fcall	_Flash_Memory_Read
 12784  066B  0020               	movlb	0	; select bank0
 12785  066C  00DD               	movwf	??_Flash_Memory_Initialization
 12786  066D  086F               	movf	_product,w
 12787  066E  3E0D               	addlw	13
 12788  066F  0086               	movwf	6
 12789  0670  3002               	movlw	2	; select bank4/5
 12790  0671  0087               	movwf	7
 12791  0672  085D               	movf	??_Flash_Memory_Initialization,w
 12792  0673  0081               	movwf	1
 12793                           
 12794                           ;MCU_B1.c: 936: product->Data[14] = Flash_Memory_Read(2);
 12795  0674  3002               	movlw	2
 12796  0675  319D  2500  3186   	fcall	_Flash_Memory_Read
 12797  0678  0020               	movlb	0	; select bank0
 12798  0679  00DD               	movwf	??_Flash_Memory_Initialization
 12799  067A  086F               	movf	_product,w
 12800  067B  3E0E               	addlw	14
 12801  067C  0086               	movwf	6
 12802  067D  3002               	movlw	2	; select bank4/5
 12803  067E  0087               	movwf	7
 12804  067F  085D               	movf	??_Flash_Memory_Initialization,w
 12805  0680  0081               	movwf	1
 12806                           
 12807                           ;MCU_B1.c: 942: i = setPercentValue(((char)(70*0.8)));
 12808  0681  3038               	movlw	56
 12809  0682  3189  2176  3186   	fcall	_setPercentValue
 12810  0685  0020               	movlb	0	; select bank0
 12811  0686  00DD               	movwf	??_Flash_Memory_Initialization
 12812  0687  085D               	movf	??_Flash_Memory_Initialization,w
 12813  0688  00DE               	movwf	Flash_Memory_Initialization@i
 12814                           
 12815                           ;MCU_B1.c: 943: product->Data[21] = i;
 12816  0689  085E               	movf	Flash_Memory_Initialization@i,w
 12817  068A  00DD               	movwf	??_Flash_Memory_Initialization
 12818  068B  086F               	movf	_product,w
 12819  068C  3E15               	addlw	21
 12820  068D  0086               	movwf	6
 12821  068E  3002               	movlw	2	; select bank4/5
 12822  068F  0087               	movwf	7
 12823  0690  085D               	movf	??_Flash_Memory_Initialization,w
 12824  0691  0081               	movwf	1
 12825                           
 12826                           ;MCU_B1.c: 944: product->Data[22] = i;
 12827  0692  085E               	movf	Flash_Memory_Initialization@i,w
 12828  0693  00DD               	movwf	??_Flash_Memory_Initialization
 12829  0694  086F               	movf	_product,w
 12830  0695  3E16               	addlw	22
 12831  0696  0086               	movwf	6
 12832  0697  3002               	movlw	2	; select bank4/5
 12833  0698  0087               	movwf	7
 12834  0699  085D               	movf	??_Flash_Memory_Initialization,w
 12835  069A  0081               	movwf	1
 12836                           
 12837                           ;MCU_B1.c: 945: product->Data[23] = i;
 12838  069B  085E               	movf	Flash_Memory_Initialization@i,w
 12839  069C  00DD               	movwf	??_Flash_Memory_Initialization
 12840  069D  086F               	movf	_product,w
 12841  069E  3E17               	addlw	23
 12842  069F  0086               	movwf	6
 12843  06A0  3002               	movlw	2	; select bank4/5
 12844  06A1  0087               	movwf	7
 12845  06A2  085D               	movf	??_Flash_Memory_Initialization,w
 12846  06A3  0081               	movwf	1
 12847                           
 12848                           ;MCU_B1.c: 947: if (product->Data[12] == 0xff && product->Data[13] == 0xff && product->D
      +                          ata[14] == 0xff) {
 12849  06A4  086F               	movf	_product,w
 12850  06A5  3E0C               	addlw	12
 12851  06A6  0086               	movwf	6
 12852  06A7  3002               	movlw	2	; select bank4/5
 12853  06A8  0087               	movwf	7
 12854  06A9  0801               	movf	1,w
 12855  06AA  3AFF               	xorlw	255
 12856  06AB  1D03               	skipz
 12857  06AC  0008               	return
 12858  06AD  086F               	movf	_product,w
 12859  06AE  3E0D               	addlw	13
 12860  06AF  0086               	movwf	6
 12861  06B0  3002               	movlw	2	; select bank4/5
 12862  06B1  0087               	movwf	7
 12863  06B2  0801               	movf	1,w
 12864  06B3  3AFF               	xorlw	255
 12865  06B4  1D03               	skipz
 12866  06B5  0008               	return
 12867  06B6  086F               	movf	_product,w
 12868  06B7  3E0E               	addlw	14
 12869  06B8  0086               	movwf	6
 12870  06B9  3002               	movlw	2	; select bank4/5
 12871  06BA  0087               	movwf	7
 12872  06BB  0801               	movf	1,w
 12873  06BC  3AFF               	xorlw	255
 12874  06BD  1D03               	skipz
 12875  06BE  0008               	return
 12876                           
 12877                           ;MCU_B1.c: 948: myMain.FirstOpen = 1;
 12878  06BF  0021               	movlb	1	; select bank1
 12879  06C0  15AE               	bsf	_myMain^(0+128),3
 12880                           
 12881                           ;MCU_B1.c: 949: myMain.First = 1;
 12882  06C1  16AE               	bsf	_myMain^(0+128),5
 12883                           
 12884                           ;MCU_B1.c: 950: }
 12885                           ;MCU_B1.c: 951: } else {
 12886  06C2  0008               	return
 12887  06C3                     l10502:	
 12888                           
 12889                           ;MCU_B1.c: 952: i = setPercentValue(((char)(70*0.8)));
 12890  06C3  3038               	movlw	56
 12891  06C4  3189  2176  3186   	fcall	_setPercentValue
 12892  06C7  0020               	movlb	0	; select bank0
 12893  06C8  00DD               	movwf	??_Flash_Memory_Initialization
 12894  06C9  085D               	movf	??_Flash_Memory_Initialization,w
 12895  06CA  00DE               	movwf	Flash_Memory_Initialization@i
 12896                           
 12897                           ;MCU_B1.c: 953: setMemory_Data(0, 0xff);
 12898  06CB  30FF               	movlw	255
 12899  06CC  00DD               	movwf	??_Flash_Memory_Initialization
 12900  06CD  085D               	movf	??_Flash_Memory_Initialization,w
 12901  06CE  00F3               	movwf	setMemory_Data@data
 12902  06CF  3000               	movlw	0
 12903  06D0  319B  2354  3186   	fcall	_setMemory_Data
 12904                           
 12905                           ;MCU_B1.c: 954: setMemory_Data(1, 0xff);
 12906  06D3  30FF               	movlw	255
 12907  06D4  0020               	movlb	0	; select bank0
 12908  06D5  00DD               	movwf	??_Flash_Memory_Initialization
 12909  06D6  085D               	movf	??_Flash_Memory_Initialization,w
 12910  06D7  00F3               	movwf	setMemory_Data@data
 12911  06D8  3001               	movlw	1
 12912  06D9  319B  2354  3186   	fcall	_setMemory_Data
 12913                           
 12914                           ;MCU_B1.c: 955: setMemory_Data(2, 0xff);
 12915  06DC  30FF               	movlw	255
 12916  06DD  0020               	movlb	0	; select bank0
 12917  06DE  00DD               	movwf	??_Flash_Memory_Initialization
 12918  06DF  085D               	movf	??_Flash_Memory_Initialization,w
 12919  06E0  00F3               	movwf	setMemory_Data@data
 12920  06E1  3002               	movlw	2
 12921  06E2  319B  2354  3186   	fcall	_setMemory_Data
 12922                           
 12923                           ;MCU_B1.c: 956: setMemory_Data(3, 0xff);
 12924  06E5  30FF               	movlw	255
 12925  06E6  0020               	movlb	0	; select bank0
 12926  06E7  00DD               	movwf	??_Flash_Memory_Initialization
 12927  06E8  085D               	movf	??_Flash_Memory_Initialization,w
 12928  06E9  00F3               	movwf	setMemory_Data@data
 12929  06EA  3003               	movlw	3
 12930  06EB  319B  2354  3186   	fcall	_setMemory_Data
 12931                           
 12932                           ;MCU_B1.c: 957: setMemory_Data(4, 0xff);
 12933  06EE  30FF               	movlw	255
 12934  06EF  0020               	movlb	0	; select bank0
 12935  06F0  00DD               	movwf	??_Flash_Memory_Initialization
 12936  06F1  085D               	movf	??_Flash_Memory_Initialization,w
 12937  06F2  00F3               	movwf	setMemory_Data@data
 12938  06F3  3004               	movlw	4
 12939  06F4  319B  2354  3186   	fcall	_setMemory_Data
 12940                           
 12941                           ;MCU_B1.c: 958: setMemory_Data(5, 0xff);
 12942  06F7  30FF               	movlw	255
 12943  06F8  0020               	movlb	0	; select bank0
 12944  06F9  00DD               	movwf	??_Flash_Memory_Initialization
 12945  06FA  085D               	movf	??_Flash_Memory_Initialization,w
 12946  06FB  00F3               	movwf	setMemory_Data@data
 12947  06FC  3005               	movlw	5
 12948  06FD  319B  2354  3186   	fcall	_setMemory_Data
 12949                           
 12950                           ;MCU_B1.c: 959: setMemory_Data(31, 0xaa);
 12951  0700  30AA               	movlw	170
 12952  0701  0020               	movlb	0	; select bank0
 12953  0702  00DD               	movwf	??_Flash_Memory_Initialization
 12954  0703  085D               	movf	??_Flash_Memory_Initialization,w
 12955  0704  00F3               	movwf	setMemory_Data@data
 12956  0705  301F               	movlw	31
 12957  0706  319B  2354  3186   	fcall	_setMemory_Data
 12958                           
 12959                           ;MCU_B1.c: 960: product->Data[21] = i;
 12960  0709  0020               	movlb	0	; select bank0
 12961  070A  085E               	movf	Flash_Memory_Initialization@i,w
 12962  070B  00DD               	movwf	??_Flash_Memory_Initialization
 12963  070C  086F               	movf	_product,w
 12964  070D  3E15               	addlw	21
 12965  070E  0086               	movwf	6
 12966  070F  3002               	movlw	2	; select bank4/5
 12967  0710  0087               	movwf	7
 12968  0711  085D               	movf	??_Flash_Memory_Initialization,w
 12969  0712  0081               	movwf	1
 12970                           
 12971                           ;MCU_B1.c: 961: product->Data[22] = i;
 12972  0713  085E               	movf	Flash_Memory_Initialization@i,w
 12973  0714  00DD               	movwf	??_Flash_Memory_Initialization
 12974  0715  086F               	movf	_product,w
 12975  0716  3E16               	addlw	22
 12976  0717  0086               	movwf	6
 12977  0718  3002               	movlw	2	; select bank4/5
 12978  0719  0087               	movwf	7
 12979  071A  085D               	movf	??_Flash_Memory_Initialization,w
 12980  071B  0081               	movwf	1
 12981                           
 12982                           ;MCU_B1.c: 962: product->Data[23] = i;
 12983  071C  085E               	movf	Flash_Memory_Initialization@i,w
 12984  071D  00DD               	movwf	??_Flash_Memory_Initialization
 12985  071E  086F               	movf	_product,w
 12986  071F  3E17               	addlw	23
 12987  0720  0086               	movwf	6
 12988  0721  3002               	movlw	2	; select bank4/5
 12989  0722  0087               	movwf	7
 12990  0723  085D               	movf	??_Flash_Memory_Initialization,w
 12991  0724  0081               	movwf	1
 12992                           
 12993                           ;MCU_B1.c: 963: GIE = 0;
 12994  0725  138B               	bcf	11,7	;volatile
 12995                           
 12996                           ;MCU_B1.c: 964: Flash_Memory_Write();
 12997  0726  319F  27D6         	fcall	_Flash_Memory_Write
 12998                           
 12999                           ;MCU_B1.c: 965: GIE = 1;
 13000  0728  178B               	bsf	11,7	;volatile
 13001                           
 13002                           ;MCU_B1.c: 966: myMain.FirstOpen = 1;
 13003  0729  0021               	movlb	1	; select bank1
 13004  072A  15AE               	bsf	_myMain^(0+128),3
 13005                           
 13006                           ;MCU_B1.c: 967: myMain.First = 1;
 13007  072B  16AE               	bsf	_myMain^(0+128),5
 13008  072C  0008               	return
 13009  072D                     __end_of_Flash_Memory_Initialization:	
 13010                           
 13011                           	psect	text84
 13012  1B54                     __ptext84:	
 13013 ;; *************** function _setMemory_Data *****************
 13014 ;; Defined at:
 13015 ;;		line 1082 in file "../src/MCU_B1.c"
 13016 ;; Parameters:    Size  Location     Type
 13017 ;;  address         1    wreg     unsigned char 
 13018 ;;  data            1    3[COMMON] unsigned char 
 13019 ;; Auto vars:     Size  Location     Type
 13020 ;;  address         1    5[COMMON] unsigned char 
 13021 ;; Return value:  Size  Location     Type
 13022 ;;		None               void
 13023 ;; Registers used:
 13024 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 13025 ;; Tracked objects:
 13026 ;;		On entry : 0/0
 13027 ;;		On exit  : 0/0
 13028 ;;		Unchanged: 0/0
 13029 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13030 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13031 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13032 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13033 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13034 ;;Total ram usage:        3 bytes
 13035 ;; Hardware stack levels used:    1
 13036 ;; Hardware stack levels required when called:    3
 13037 ;; This function calls:
 13038 ;;		Nothing
 13039 ;; This function is called by:
 13040 ;;		_Flash_Memory_Initialization
 13041 ;;		_Flash_Memory_Modify
 13042 ;; This function uses a non-reentrant model
 13043 ;;
 13044                           
 13045                           
 13046                           ;psect for function _setMemory_Data
 13047  1B54                     _setMemory_Data:	
 13048                           
 13049                           ;incstack = 0
 13050                           ; Regs used in _setMemory_Data: [wreg+fsr1l+fsr1h+status,2+status,0]
 13051                           ;setMemory_Data@address stored from wreg
 13052  1B54  00F5               	movwf	setMemory_Data@address
 13053                           
 13054                           ;MCU_B1.c: 1083: Memory.Data[address] = data;
 13055  1B55  0873               	movf	setMemory_Data@data,w
 13056  1B56  00F4               	movwf	??_setMemory_Data
 13057  1B57  0875               	movf	setMemory_Data@address,w
 13058  1B58  3E20               	addlw	_Memory& (0+255)
 13059  1B59  0086               	movwf	6
 13060  1B5A  3002               	movlw	2	; select bank4/5
 13061  1B5B  0087               	movwf	7
 13062  1B5C  0874               	movf	??_setMemory_Data,w
 13063  1B5D  0081               	movwf	1
 13064  1B5E  0008               	return
 13065  1B5F                     __end_of_setMemory_Data:	
 13066                           
 13067                           	psect	text85
 13068  1FD6                     __ptext85:	
 13069 ;; *************** function _Flash_Memory_Write *****************
 13070 ;; Defined at:
 13071 ;;		line 1015 in file "../src/MCU_B1.c"
 13072 ;; Parameters:    Size  Location     Type
 13073 ;;		None
 13074 ;; Auto vars:     Size  Location     Type
 13075 ;;  i               1    4[COMMON] unsigned char 
 13076 ;; Return value:  Size  Location     Type
 13077 ;;		None               void
 13078 ;; Registers used:
 13079 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13080 ;; Tracked objects:
 13081 ;;		On entry : 0/0
 13082 ;;		On exit  : 0/0
 13083 ;;		Unchanged: 0/0
 13084 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13085 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13086 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13087 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13088 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13089 ;;Total ram usage:        2 bytes
 13090 ;; Hardware stack levels used:    1
 13091 ;; Hardware stack levels required when called:    4
 13092 ;; This function calls:
 13093 ;;		_Flash_Memory_Unlock
 13094 ;; This function is called by:
 13095 ;;		_Flash_Memory_Initialization
 13096 ;;		_Flash_Memory_Modify
 13097 ;; This function uses a non-reentrant model
 13098 ;;
 13099                           
 13100                           
 13101                           ;psect for function _Flash_Memory_Write
 13102  1FD6                     _Flash_Memory_Write:	
 13103                           
 13104                           ;MCU_B1.c: 1016: char i = 0;
 13105                           
 13106                           ;incstack = 0
 13107                           ; Regs used in _Flash_Memory_Write: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13108  1FD6  01F4               	clrf	Flash_Memory_Write@i
 13109                           
 13110                           ;MCU_B1.c: 1017: CFGS = 0;
 13111  1FD7  0023               	movlb	3	; select bank3
 13112  1FD8  1315               	bcf	21,6	;volatile
 13113                           
 13114                           ;MCU_B1.c: 1018: PMADRH = 0x30;
 13115  1FD9  3030               	movlw	48
 13116  1FDA  0092               	movwf	18	;volatile
 13117                           
 13118                           ;MCU_B1.c: 1019: PMDATH = 0;
 13119  1FDB  0194               	clrf	20	;volatile
 13120                           
 13121                           ;MCU_B1.c: 1020: FREE = 0;
 13122  1FDC  1215               	bcf	21,4	;volatile
 13123                           
 13124                           ;MCU_B1.c: 1021: LWLO = 1;
 13125  1FDD  1695               	bsf	21,5	;volatile
 13126                           
 13127                           ;MCU_B1.c: 1022: WREN = 1;
 13128  1FDE  1515               	bsf	21,2	;volatile
 13129                           
 13130                           ;MCU_B1.c: 1023: for (i = 0; i < 32; i++) {
 13131  1FDF  01F4               	clrf	Flash_Memory_Write@i
 13132  1FE0  3020               	movlw	32
 13133  1FE1  0274               	subwf	Flash_Memory_Write@i,w
 13134  1FE2  1803               	btfsc	3,0
 13135  1FE3  2FF9               	goto	l1360
 13136  1FE4                     l9916:	
 13137                           
 13138                           ;MCU_B1.c: 1024: PMADRL = i;
 13139  1FE4  0874               	movf	Flash_Memory_Write@i,w
 13140  1FE5  0023               	movlb	3	; select bank3
 13141  1FE6  0091               	movwf	17	;volatile
 13142                           
 13143                           ;MCU_B1.c: 1025: PMDATL = Memory.Data[i];
 13144  1FE7  0874               	movf	Flash_Memory_Write@i,w
 13145  1FE8  3E20               	addlw	_Memory& (0+255)
 13146  1FE9  0086               	movwf	6
 13147  1FEA  3002               	movlw	2	; select bank4/5
 13148  1FEB  0087               	movwf	7
 13149  1FEC  0801               	movf	1,w
 13150  1FED  0093               	movwf	19	;volatile
 13151                           
 13152                           ;MCU_B1.c: 1026: Flash_Memory_Unlock();
 13153  1FEE  319B  2338  319F   	fcall	_Flash_Memory_Unlock
 13154  1FF1  3001               	movlw	1
 13155  1FF2  00F3               	movwf	??_Flash_Memory_Write
 13156  1FF3  0873               	movf	??_Flash_Memory_Write,w
 13157  1FF4  07F4               	addwf	Flash_Memory_Write@i,f
 13158  1FF5  3020               	movlw	32
 13159  1FF6  0274               	subwf	Flash_Memory_Write@i,w
 13160  1FF7  1C03               	skipc
 13161  1FF8  2FE4               	goto	l9916
 13162  1FF9                     l1360:	
 13163                           
 13164                           ;MCU_B1.c: 1027: }
 13165                           ;MCU_B1.c: 1028: LWLO = 0;
 13166  1FF9  0023               	movlb	3	; select bank3
 13167  1FFA  1295               	bcf	21,5	;volatile
 13168                           
 13169                           ;MCU_B1.c: 1029: Flash_Memory_Unlock();
 13170  1FFB  319B  2338         	fcall	_Flash_Memory_Unlock
 13171                           
 13172                           ;MCU_B1.c: 1030: WREN = 0;
 13173  1FFD  0023               	movlb	3	; select bank3
 13174  1FFE  1115               	bcf	21,2	;volatile
 13175  1FFF  0008               	return
 13176  2000                     __end_of_Flash_Memory_Write:	
 13177                           
 13178                           	psect	text86
 13179  1B38                     __ptext86:	
 13180 ;; *************** function _Flash_Memory_Unlock *****************
 13181 ;; Defined at:
 13182 ;;		line 994 in file "../src/MCU_B1.c"
 13183 ;; Parameters:    Size  Location     Type
 13184 ;;		None
 13185 ;; Auto vars:     Size  Location     Type
 13186 ;;		None
 13187 ;; Return value:  Size  Location     Type
 13188 ;;		None               void
 13189 ;; Registers used:
 13190 ;;		wreg
 13191 ;; Tracked objects:
 13192 ;;		On entry : 0/0
 13193 ;;		On exit  : 0/0
 13194 ;;		Unchanged: 0/0
 13195 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13196 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13197 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13198 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13199 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13200 ;;Total ram usage:        0 bytes
 13201 ;; Hardware stack levels used:    1
 13202 ;; Hardware stack levels required when called:    3
 13203 ;; This function calls:
 13204 ;;		Nothing
 13205 ;; This function is called by:
 13206 ;;		_Flash_Memory_Write
 13207 ;;		_Flash_Memory_Erasing
 13208 ;; This function uses a non-reentrant model
 13209 ;;
 13210                           
 13211                           
 13212                           ;psect for function _Flash_Memory_Unlock
 13213  1B38                     _Flash_Memory_Unlock:	
 13214                           
 13215                           ;MCU_B1.c: 995: PMCON2 = 0x55;
 13216                           
 13217                           ;incstack = 0
 13218                           ; Regs used in _Flash_Memory_Unlock: [wreg]
 13219  1B38  3055               	movlw	85
 13220  1B39  0023               	movlb	3	; select bank3
 13221  1B3A  0096               	movwf	22	;volatile
 13222                           
 13223                           ;MCU_B1.c: 996: PMCON2 = 0xaa;
 13224  1B3B  30AA               	movlw	170
 13225  1B3C  0096               	movwf	22	;volatile
 13226                           
 13227                           ;MCU_B1.c: 997: WR = 1;
 13228  1B3D  1495               	bsf	21,1	;volatile
 13229                           
 13230                           ;MCU_B1.c: 998: __nop();
 13231  1B3E  0000               	nop
 13232                           
 13233                           ;MCU_B1.c: 999: __nop();
 13234  1B3F  0000               	nop
 13235  1B40  0008               	return
 13236  1B41                     __end_of_Flash_Memory_Unlock:	
 13237                           
 13238                           	psect	text87
 13239  1D00                     __ptext87:	
 13240 ;; *************** function _Flash_Memory_Read *****************
 13241 ;; Defined at:
 13242 ;;		line 1003 in file "../src/MCU_B1.c"
 13243 ;; Parameters:    Size  Location     Type
 13244 ;;  address         1    wreg     unsigned char 
 13245 ;; Auto vars:     Size  Location     Type
 13246 ;;  address         1    5[COMMON] unsigned char 
 13247 ;;  ret             1    6[COMMON] unsigned char 
 13248 ;;  i               1    4[COMMON] unsigned char 
 13249 ;; Return value:  Size  Location     Type
 13250 ;;                  1    wreg      unsigned char 
 13251 ;; Registers used:
 13252 ;;		wreg, status,2
 13253 ;; Tracked objects:
 13254 ;;		On entry : 0/0
 13255 ;;		On exit  : 0/0
 13256 ;;		Unchanged: 0/0
 13257 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13258 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13259 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13260 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13261 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13262 ;;Total ram usage:        4 bytes
 13263 ;; Hardware stack levels used:    1
 13264 ;; Hardware stack levels required when called:    3
 13265 ;; This function calls:
 13266 ;;		Nothing
 13267 ;; This function is called by:
 13268 ;;		_Flash_Memory_Initialization
 13269 ;;		_Flash_Memory_Modify
 13270 ;; This function uses a non-reentrant model
 13271 ;;
 13272                           
 13273                           
 13274                           ;psect for function _Flash_Memory_Read
 13275  1D00                     _Flash_Memory_Read:	
 13276                           
 13277                           ;incstack = 0
 13278                           ; Regs used in _Flash_Memory_Read: [wreg+status,2]
 13279                           ;Flash_Memory_Read@address stored from wreg
 13280  1D00  00F5               	movwf	Flash_Memory_Read@address
 13281                           
 13282                           ;MCU_B1.c: 1004: char i = 0, ret = 0;
 13283  1D01  01F4               	clrf	Flash_Memory_Read@i
 13284  1D02  01F6               	clrf	Flash_Memory_Read@ret
 13285                           
 13286                           ;MCU_B1.c: 1005: PMADRH = 0x30;
 13287  1D03  3030               	movlw	48
 13288  1D04  0023               	movlb	3	; select bank3
 13289  1D05  0092               	movwf	18	;volatile
 13290                           
 13291                           ;MCU_B1.c: 1006: PMADRL = address;
 13292  1D06  0875               	movf	Flash_Memory_Read@address,w
 13293  1D07  0091               	movwf	17	;volatile
 13294                           
 13295                           ;MCU_B1.c: 1007: CFGS = 0;
 13296  1D08  1315               	bcf	21,6	;volatile
 13297                           
 13298                           ;MCU_B1.c: 1008: RD = 1;
 13299  1D09  1415               	bsf	21,0	;volatile
 13300                           
 13301                           ;MCU_B1.c: 1009: i = PMDATH;
 13302  1D0A  0814               	movf	20,w	;volatile
 13303  1D0B  00F3               	movwf	??_Flash_Memory_Read
 13304  1D0C  0873               	movf	??_Flash_Memory_Read,w
 13305  1D0D  00F4               	movwf	Flash_Memory_Read@i
 13306                           
 13307                           ;MCU_B1.c: 1010: ret = PMDATL;
 13308  1D0E  0813               	movf	19,w	;volatile
 13309  1D0F  00F3               	movwf	??_Flash_Memory_Read
 13310  1D10  0873               	movf	??_Flash_Memory_Read,w
 13311  1D11  00F6               	movwf	Flash_Memory_Read@ret
 13312                           
 13313                           ;MCU_B1.c: 1011: return ret;
 13314  1D12  0876               	movf	Flash_Memory_Read@ret,w
 13315  1D13  0008               	return
 13316  1D14                     __end_of_Flash_Memory_Read:	
 13317                           
 13318                           	psect	text88
 13319  056D                     __ptext88:	
 13320 ;; *************** function _Exception_Main *****************
 13321 ;; Defined at:
 13322 ;;		line 522 in file "../src/Main_B1.c"
 13323 ;; Parameters:    Size  Location     Type
 13324 ;;		None
 13325 ;; Auto vars:     Size  Location     Type
 13326 ;;  i               2    4[BANK4 ] int 
 13327 ;;  i               2    2[BANK4 ] int 
 13328 ;;  lights          1    6[BANK4 ] unsigned char 
 13329 ;;  error           1    1[BANK4 ] unsigned char 
 13330 ;;  count           1    0[BANK4 ] unsigned char 
 13331 ;; Return value:  Size  Location     Type
 13332 ;;		None               void
 13333 ;; Registers used:
 13334 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13335 ;; Tracked objects:
 13336 ;;		On entry : 0/0
 13337 ;;		On exit  : 0/0
 13338 ;;		Unchanged: 0/0
 13339 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13340 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13341 ;;      Locals:         0       0       0       0       0       7       0       0       0       0       0       0       
      +0       0
 13342 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13343 ;;      Totals:         0       1       0       0       0       7       0       0       0       0       0       0       
      +0       0
 13344 ;;Total ram usage:        8 bytes
 13345 ;; Hardware stack levels used:    1
 13346 ;; Hardware stack levels required when called:    7
 13347 ;; This function calls:
 13348 ;;		_getDimmerLights_Line
 13349 ;;		_getDimmerLights_Status
 13350 ;;		_getMain_All_Error_Status
 13351 ;;		_getMain_LightsStatus
 13352 ;;		_setBuz
 13353 ;;		_setDimmerLights_SwOff
 13354 ;;		_setLED
 13355 ;; This function is called by:
 13356 ;;		_main
 13357 ;; This function uses a non-reentrant model
 13358 ;;
 13359                           
 13360                           
 13361                           ;psect for function _Exception_Main
 13362  056D                     _Exception_Main:	
 13363                           
 13364                           ;Main_B1.c: 523: char error = getMain_All_Error_Status(0);
 13365                           
 13366                           ;incstack = 0
 13367                           ; Regs used in _Exception_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13368  056D  3000               	movlw	0
 13369  056E  3191  216E  3185   	fcall	_getMain_All_Error_Status
 13370  0571  0020               	movlb	0	; select bank0
 13371  0572  00E6               	movwf	??_Exception_Main
 13372  0573  0866               	movf	??_Exception_Main,w
 13373  0574  0024               	movlb	4	; select bank4
 13374  0575  00E6               	movwf	Exception_Main@error^(0+512)
 13375                           
 13376                           ;Main_B1.c: 524: char lights = 0, count = 2;
 13377  0576  01EB               	clrf	Exception_Main@lights^(0+512)
 13378  0577  3002               	movlw	2
 13379  0578  0020               	movlb	0	; select bank0
 13380  0579  00E6               	movwf	??_Exception_Main
 13381  057A  0866               	movf	??_Exception_Main,w
 13382  057B  0024               	movlb	4	; select bank4
 13383  057C  00E5               	movwf	Exception_Main@count^(0+512)
 13384                           
 13385                           ;Main_B1.c: 525: if (myMain.Error_Run == 1) {
 13386  057D  0021               	movlb	1	; select bank1
 13387  057E  1DB9               	btfss	(_myMain^(0+128)+11),3
 13388  057F  2D8F               	goto	l10818
 13389                           
 13390                           ;Main_B1.c: 526: if (error == 0) {
 13391  0580  0024               	movlb	4	; select bank4
 13392  0581  08E6               	movf	Exception_Main@error^(0+512),f
 13393  0582  1D03               	skipz
 13394  0583  0008               	return
 13395                           
 13396                           ;Main_B1.c: 527: myMain.Error_Run = 0;
 13397  0584  0021               	movlb	1	; select bank1
 13398  0585  11B9               	bcf	(_myMain^(0+128)+11),3
 13399                           
 13400                           ;Main_B1.c: 532: setLED(99, 10);
 13401  0586  300A               	movlw	10
 13402  0587  0020               	movlb	0	; select bank0
 13403  0588  00E6               	movwf	??_Exception_Main
 13404  0589  0866               	movf	??_Exception_Main,w
 13405  058A  00F5               	movwf	setLED@command
 13406  058B  3063               	movlw	99
 13407  058C  3188  20B4         	fcall	_setLED
 13408                           
 13409                           ;Main_B1.c: 534: }
 13410                           ;Main_B1.c: 535: } else {
 13411  058E  0008               	return
 13412  058F                     l10818:	
 13413                           
 13414                           ;Main_B1.c: 536: if (error != 0) {
 13415  058F  0024               	movlb	4	; select bank4
 13416  0590  0866               	movf	Exception_Main@error^(0+512),w
 13417  0591  1903               	btfsc	3,2
 13418  0592  0008               	return
 13419                           
 13420                           ;Main_B1.c: 537: myMain.Error_Run = 1;
 13421  0593  0021               	movlb	1	; select bank1
 13422  0594  15B9               	bsf	(_myMain^(0+128)+11),3
 13423                           
 13424                           ;Main_B1.c: 540: setLED(99, 11);
 13425  0595  300B               	movlw	11
 13426  0596  0020               	movlb	0	; select bank0
 13427  0597  00E6               	movwf	??_Exception_Main
 13428  0598  0866               	movf	??_Exception_Main,w
 13429  0599  00F5               	movwf	setLED@command
 13430  059A  3063               	movlw	99
 13431  059B  3188  20B4  3185   	fcall	_setLED
 13432                           
 13433                           ;Main_B1.c: 542: switch (error) {
 13434  059E  2E46               	goto	l10866
 13435  059F                     l10824:	
 13436                           ;Main_B1.c: 543: case 2:
 13437                           
 13438                           
 13439                           ;Main_B1.c: 544: if (getMain_LightsStatus() == 1) {
 13440  059F  319C  2416  3185   	fcall	_getMain_LightsStatus
 13441  05A2  3A01               	xorlw	1
 13442  05A3  1D03               	skipz
 13443  05A4  2DAE               	goto	l10828
 13444                           
 13445                           ;Main_B1.c: 545: setBuz(10, 300);
 13446  05A5  302C               	movlw	44
 13447  05A6  0020               	movlb	0	; select bank0
 13448  05A7  00A4               	movwf	setBuz@time
 13449  05A8  3001               	movlw	1
 13450  05A9  00A5               	movwf	setBuz@time+1
 13451  05AA  300A               	movlw	10
 13452  05AB  3195  25DF  3185   	fcall	_setBuz
 13453  05AE                     l10828:	
 13454                           
 13455                           ;Main_B1.c: 546: }
 13456                           ;Main_B1.c: 548: for (int i = 0; i < count; i++) {
 13457  05AE  0024               	movlb	4	; select bank4
 13458  05AF  01E7               	clrf	Exception_Main@i^(0+512)
 13459  05B0  01E8               	clrf	(Exception_Main@i+1)^(0+512)
 13460  05B1                     l10838:	
 13461  05B1  0868               	movf	(Exception_Main@i+1)^(0+512),w
 13462  05B2  3A80               	xorlw	128
 13463  05B3  0020               	movlb	0	; select bank0
 13464  05B4  00E6               	movwf	??_Exception_Main
 13465  05B5  3080               	movlw	128
 13466  05B6  0266               	subwf	??_Exception_Main,w
 13467  05B7  1D03               	skipz
 13468  05B8  2DBC               	goto	u12465
 13469  05B9  0024               	movlb	4	; select bank4
 13470  05BA  0865               	movf	Exception_Main@count^(0+512),w
 13471  05BB  0267               	subwf	Exception_Main@i^(0+512),w
 13472  05BC                     u12465:	
 13473  05BC  1803               	btfsc	3,0
 13474  05BD  2DE0               	goto	u12460
 13475                           
 13476                           ;Main_B1.c: 550: if (getDimmerLights_Status(i + 1) == 1) {
 13477  05BE  0024               	movlb	4	; select bank4
 13478  05BF  0867               	movf	Exception_Main@i^(0+512),w
 13479  05C0  3E01               	addlw	1
 13480  05C1  319C  2406  3185   	fcall	_getDimmerLights_Status
 13481  05C4  3A01               	xorlw	1
 13482  05C5  1D03               	skipz
 13483  05C6  2DDA               	goto	l10836
 13484                           
 13485                           ;Main_B1.c: 551: DimmerLights->SwFlag = 1;
 13486  05C7  0020               	movlb	0	; select bank0
 13487  05C8  086D               	movf	_DimmerLights,w
 13488  05C9  3E0B               	addlw	11
 13489  05CA  0086               	movwf	6
 13490  05CB  3001               	movlw	1	; select bank2/3
 13491  05CC  0087               	movwf	7
 13492  05CD  1481               	bsf	1,1
 13493                           
 13494                           ;Main_B1.c: 552: DimmerLights->Status = 0;
 13495  05CE  086D               	movf	_DimmerLights,w
 13496  05CF  3E02               	addlw	2
 13497  05D0  0086               	movwf	6
 13498  05D1  3001               	movlw	1	; select bank2/3
 13499  05D2  0087               	movwf	7
 13500  05D3  1081               	bcf	1,1
 13501                           
 13502                           ;Main_B1.c: 553: setDimmerLights_SwOff(i + 1);
 13503  05D4  0024               	movlb	4	; select bank4
 13504  05D5  0867               	movf	Exception_Main@i^(0+512),w
 13505  05D6  3E01               	addlw	1
 13506  05D7  3194  244A  3185   	fcall	_setDimmerLights_SwOff
 13507  05DA                     l10836:	
 13508  05DA  3001               	movlw	1
 13509  05DB  0024               	movlb	4	; select bank4
 13510  05DC  07E7               	addwf	Exception_Main@i^(0+512),f
 13511  05DD  3000               	movlw	0
 13512  05DE  3DE8               	addwfc	(Exception_Main@i+1)^(0+512),f
 13513  05DF  2DB1               	goto	l10838
 13514  05E0                     u12460:	
 13515  05E0  0024               	movlb	4	; select bank4
 13516  05E1  0008               	return
 13517  05E2                     l10840:	
 13518                           ;Main_B1.c: 557: case 3:
 13519                           
 13520                           ;Main_B1.c: 554: }
 13521                           ;Main_B1.c: 555: }
 13522                           ;Main_B1.c: 556: break;
 13523                           
 13524                           
 13525                           ;Main_B1.c: 559: setBuz(5, 300);
 13526  05E2  302C               	movlw	44
 13527  05E3  0020               	movlb	0	; select bank0
 13528  05E4  00A4               	movwf	setBuz@time
 13529  05E5  3001               	movlw	1
 13530  05E6  00A5               	movwf	setBuz@time+1
 13531  05E7  3005               	movlw	5
 13532  05E8  3195  25DF  3185   	fcall	_setBuz
 13533                           
 13534                           ;Main_B1.c: 560: lights = getDimmerLights_Line();
 13535  05EB  319C  2436  3185   	fcall	_getDimmerLights_Line
 13536  05EE  0020               	movlb	0	; select bank0
 13537  05EF  00E6               	movwf	??_Exception_Main
 13538  05F0  0866               	movf	??_Exception_Main,w
 13539  05F1  0024               	movlb	4	; select bank4
 13540  05F2  00EB               	movwf	Exception_Main@lights^(0+512)
 13541                           
 13542                           ;Main_B1.c: 561: if (lights == 0) {
 13543  05F3  08EB               	movf	Exception_Main@lights^(0+512),f
 13544  05F4  1D03               	skipz
 13545  05F5  2E29               	goto	l10858
 13546                           
 13547                           ;Main_B1.c: 563: for (int i = 0; i < count; i++) {
 13548  05F6  01E9               	clrf	Exception_Main@i_3643^(0+512)
 13549  05F7  01EA               	clrf	(Exception_Main@i_3643+1)^(0+512)
 13550  05F8                     l10856:	
 13551  05F8  086A               	movf	(Exception_Main@i_3643+1)^(0+512),w
 13552  05F9  3A80               	xorlw	128
 13553  05FA  0020               	movlb	0	; select bank0
 13554  05FB  00E6               	movwf	??_Exception_Main
 13555  05FC  3080               	movlw	128
 13556  05FD  0266               	subwf	??_Exception_Main,w
 13557  05FE  1D03               	skipz
 13558  05FF  2E03               	goto	u12495
 13559  0600  0024               	movlb	4	; select bank4
 13560  0601  0865               	movf	Exception_Main@count^(0+512),w
 13561  0602  0269               	subwf	Exception_Main@i_3643^(0+512),w
 13562  0603                     u12495:	
 13563  0603  1803               	btfsc	3,0
 13564  0604  2E27               	goto	u12490
 13565                           
 13566                           ;Main_B1.c: 565: if (getDimmerLights_Status(i + 1) == 1) {
 13567  0605  0024               	movlb	4	; select bank4
 13568  0606  0869               	movf	Exception_Main@i_3643^(0+512),w
 13569  0607  3E01               	addlw	1
 13570  0608  319C  2406  3185   	fcall	_getDimmerLights_Status
 13571  060B  3A01               	xorlw	1
 13572  060C  1D03               	skipz
 13573  060D  2E21               	goto	l10854
 13574                           
 13575                           ;Main_B1.c: 566: DimmerLights->SwFlag = 1;
 13576  060E  0020               	movlb	0	; select bank0
 13577  060F  086D               	movf	_DimmerLights,w
 13578  0610  3E0B               	addlw	11
 13579  0611  0086               	movwf	6
 13580  0612  3001               	movlw	1	; select bank2/3
 13581  0613  0087               	movwf	7
 13582  0614  1481               	bsf	1,1
 13583                           
 13584                           ;Main_B1.c: 567: DimmerLights->Status = 0;
 13585  0615  086D               	movf	_DimmerLights,w
 13586  0616  3E02               	addlw	2
 13587  0617  0086               	movwf	6
 13588  0618  3001               	movlw	1	; select bank2/3
 13589  0619  0087               	movwf	7
 13590  061A  1081               	bcf	1,1
 13591                           
 13592                           ;Main_B1.c: 568: setDimmerLights_SwOff(i + 1);
 13593  061B  0024               	movlb	4	; select bank4
 13594  061C  0869               	movf	Exception_Main@i_3643^(0+512),w
 13595  061D  3E01               	addlw	1
 13596  061E  3194  244A  3185   	fcall	_setDimmerLights_SwOff
 13597  0621                     l10854:	
 13598  0621  3001               	movlw	1
 13599  0622  0024               	movlb	4	; select bank4
 13600  0623  07E9               	addwf	Exception_Main@i_3643^(0+512),f
 13601  0624  3000               	movlw	0
 13602  0625  3DEA               	addwfc	(Exception_Main@i_3643+1)^(0+512),f
 13603  0626  2DF8               	goto	l10856
 13604  0627                     u12490:	
 13605  0627  0024               	movlb	4	; select bank4
 13606  0628  0008               	return
 13607  0629                     l10858:	
 13608                           ;Main_B1.c: 569: }
 13609                           ;Main_B1.c: 570: }
 13610                           ;Main_B1.c: 571: } else {
 13611                           
 13612                           
 13613                           ;Main_B1.c: 573: if (getDimmerLights_Status(lights) == 1) {
 13614  0629  0024               	movlb	4	; select bank4
 13615  062A  086B               	movf	Exception_Main@lights^(0+512),w
 13616  062B  319C  2406  3185   	fcall	_getDimmerLights_Status
 13617  062E  3A01               	xorlw	1
 13618  062F  1903               	btfsc	3,2
 13619  0630  2E33               	goto	l10860
 13620  0631  0024               	movlb	4	; select bank4
 13621  0632  0008               	return
 13622  0633                     l10860:	
 13623                           
 13624                           ;Main_B1.c: 575: DimmerLights->SwFlag = 1;
 13625  0633  0020               	movlb	0	; select bank0
 13626  0634  086D               	movf	_DimmerLights,w
 13627  0635  3E0B               	addlw	11
 13628  0636  0086               	movwf	6
 13629  0637  3001               	movlw	1	; select bank2/3
 13630  0638  0087               	movwf	7
 13631  0639  1481               	bsf	1,1
 13632                           
 13633                           ;Main_B1.c: 576: DimmerLights->Status = 0;
 13634  063A  086D               	movf	_DimmerLights,w
 13635  063B  3E02               	addlw	2
 13636  063C  0086               	movwf	6
 13637  063D  3001               	movlw	1	; select bank2/3
 13638  063E  0087               	movwf	7
 13639  063F  1081               	bcf	1,1
 13640                           
 13641                           ;Main_B1.c: 577: setDimmerLights_SwOff(lights);
 13642  0640  0024               	movlb	4	; select bank4
 13643  0641  086B               	movf	Exception_Main@lights^(0+512),w
 13644  0642  3194  244A         	fcall	_setDimmerLights_SwOff
 13645  0644  0024               	movlb	4	; select bank4
 13646  0645  0008               	return
 13647  0646                     l10866:	
 13648                           ;Main_B1.c: 581: }
 13649                           
 13650                           ;Main_B1.c: 578: }
 13651                           ;Main_B1.c: 579: }
 13652                           ;Main_B1.c: 580: break;
 13653                           
 13654  0646  0024               	movlb	4	; select bank4
 13655  0647  0866               	movf	Exception_Main@error^(0+512),w
 13656                           
 13657                           ; Switch size 1, requested type "space"
 13658                           ; Number of cases is 2, Range of values is 2 to 3
 13659                           ; switch strategies available:
 13660                           ; Name         Instructions Cycles
 13661                           ; simple_byte            7     4 (average)
 13662                           ; direct_byte           13     9 (fixed)
 13663                           ; jumptable            263     9 (fixed)
 13664                           ;	Chosen strategy is simple_byte
 13665  0648  3A02               	xorlw	2	; case 2
 13666  0649  1903               	skipnz
 13667  064A  2D9F               	goto	l10824
 13668  064B  3A01               	xorlw	1	; case 3
 13669  064C  1903               	skipnz
 13670  064D  2DE2               	goto	l10840
 13671  064E  2E50               	goto	l1620
 13672  064F  0008               	return
 13673  0650                     l1620:	
 13674  0650  0008               	return
 13675  0651                     __end_of_Exception_Main:	
 13676                           
 13677                           	psect	text89
 13678  1C36                     __ptext89:	
 13679 ;; *************** function _getDimmerLights_Line *****************
 13680 ;; Defined at:
 13681 ;;		line 852 in file "../src/Dimmer_B1.c"
 13682 ;; Parameters:    Size  Location     Type
 13683 ;;		None
 13684 ;; Auto vars:     Size  Location     Type
 13685 ;;  line            1    4[COMMON] unsigned char 
 13686 ;; Return value:  Size  Location     Type
 13687 ;;                  1    wreg      unsigned char 
 13688 ;; Registers used:
 13689 ;;		wreg, status,2
 13690 ;; Tracked objects:
 13691 ;;		On entry : 0/0
 13692 ;;		On exit  : 0/0
 13693 ;;		Unchanged: 0/0
 13694 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13695 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13696 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13697 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13698 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13699 ;;Total ram usage:        2 bytes
 13700 ;; Hardware stack levels used:    1
 13701 ;; Hardware stack levels required when called:    3
 13702 ;; This function calls:
 13703 ;;		Nothing
 13704 ;; This function is called by:
 13705 ;;		_Exception_Main
 13706 ;; This function uses a non-reentrant model
 13707 ;;
 13708                           
 13709                           
 13710                           ;psect for function _getDimmerLights_Line
 13711  1C36                     _getDimmerLights_Line:	
 13712                           
 13713                           ;Dimmer_B1.c: 853: char line = 0;
 13714                           
 13715                           ;incstack = 0
 13716                           ; Regs used in _getDimmerLights_Line: [wreg+status,2]
 13717  1C36  01F4               	clrf	getDimmerLights_Line@line
 13718                           
 13719                           ;Dimmer_B1.c: 855: if (DimmerLights1.Line == 1) {
 13720  1C37  0022               	movlb	2	; select bank2
 13721  1C38  1F5D               	btfss	(_DimmerLights1^(0+256)+10),6
 13722  1C39  2C3D               	goto	l874
 13723                           
 13724                           ;Dimmer_B1.c: 856: line = 1;
 13725  1C3A  01F4               	clrf	getDimmerLights_Line@line
 13726  1C3B  0AF4               	incf	getDimmerLights_Line@line,f
 13727                           
 13728                           ;Dimmer_B1.c: 857: }
 13729  1C3C  2C44               	goto	l875
 13730  1C3D                     l874:	
 13731                           
 13732                           ;Dimmer_B1.c: 860: else if (DimmerLights2.Line == 1) {
 13733  1C3D  0023               	movlb	3	; select bank3
 13734  1C3E  1F48               	btfss	(_DimmerLights2^(0+384)+10),6
 13735  1C3F  2C44               	goto	l875
 13736                           
 13737                           ;Dimmer_B1.c: 861: line = 2;
 13738  1C40  3002               	movlw	2
 13739  1C41  00F3               	movwf	??_getDimmerLights_Line
 13740  1C42  0873               	movf	??_getDimmerLights_Line,w
 13741  1C43  00F4               	movwf	getDimmerLights_Line@line
 13742  1C44                     l875:	
 13743                           
 13744                           ;Dimmer_B1.c: 862: }
 13745                           ;Dimmer_B1.c: 869: return line;
 13746  1C44  0874               	movf	getDimmerLights_Line@line,w
 13747  1C45  0008               	return
 13748  1C46                     __end_of_getDimmerLights_Line:	
 13749                           
 13750                           	psect	text90
 13751  1E7B                     __ptext90:	
 13752 ;; *************** function _DimmerLights_Main *****************
 13753 ;; Defined at:
 13754 ;;		line 609 in file "../src/Dimmer_B1.c"
 13755 ;; Parameters:    Size  Location     Type
 13756 ;;		None
 13757 ;; Auto vars:     Size  Location     Type
 13758 ;;		None
 13759 ;; Return value:  Size  Location     Type
 13760 ;;		None               void
 13761 ;; Registers used:
 13762 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13763 ;; Tracked objects:
 13764 ;;		On entry : 0/0
 13765 ;;		On exit  : 0/0
 13766 ;;		Unchanged: 0/0
 13767 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13768 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13769 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13770 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13771 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13772 ;;Total ram usage:        0 bytes
 13773 ;; Hardware stack levels used:    1
 13774 ;; Hardware stack levels required when called:    8
 13775 ;; This function calls:
 13776 ;;		_getLoad_OK
 13777 ;;		_getMain_All_Error_Status
 13778 ;;		_getMain_LightsStatus
 13779 ;;		_setDimmerLights_Main
 13780 ;; This function is called by:
 13781 ;;		_main
 13782 ;; This function uses a non-reentrant model
 13783 ;;
 13784                           
 13785                           
 13786                           ;psect for function _DimmerLights_Main
 13787  1E7B                     _DimmerLights_Main:	
 13788                           
 13789                           ;Dimmer_B1.c: 621: if (Dimmer.LoadGO == 1) {
 13790                           
 13791                           ;incstack = 0
 13792                           ; Regs used in _DimmerLights_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13793  1E7B  0021               	movlb	1	; select bank1
 13794  1E7C  1D48               	btfss	_Dimmer^(0+128),2	;volatile
 13795  1E7D  2E93               	goto	l10474
 13796                           
 13797                           ;Dimmer_B1.c: 622: if (getLoad_OK() == 1 || getMain_All_Error_Status(0) != 0 || getMain_
      +                          LightsStatus() == 0) {
 13798  1E7E  319A  22FC  319E   	fcall	_getLoad_OK
 13799  1E81  3A01               	xorlw	1
 13800  1E82  1903               	skipnz
 13801  1E83  2E91               	goto	l821
 13802  1E84  3000               	movlw	0
 13803  1E85  3191  216E  319E   	fcall	_getMain_All_Error_Status
 13804  1E88  3800               	iorlw	0
 13805  1E89  1D03               	skipz
 13806  1E8A  2E91               	goto	l821
 13807  1E8B  319C  2416  319E   	fcall	_getMain_LightsStatus
 13808  1E8E  3800               	iorlw	0
 13809  1E8F  1D03               	skipz
 13810  1E90  2E93               	goto	l10474
 13811  1E91                     l821:	
 13812                           
 13813                           ;Dimmer_B1.c: 623: Dimmer.LoadGO = 0;
 13814  1E91  0021               	movlb	1	; select bank1
 13815  1E92  1148               	bcf	_Dimmer^(0+128),2	;volatile
 13816  1E93                     l10474:	
 13817                           
 13818                           ;Dimmer_B1.c: 624: }
 13819                           ;Dimmer_B1.c: 625: }
 13820                           ;Dimmer_B1.c: 629: setDimmerLights_Main(1);
 13821  1E93  3001               	movlw	1
 13822  1E94  318B  2376  319E   	fcall	_setDimmerLights_Main
 13823                           
 13824                           ;Dimmer_B1.c: 633: setDimmerLights_Main(2);
 13825  1E97  3002               	movlw	2
 13826  1E98  318B  2376         	fcall	_setDimmerLights_Main
 13827  1E9A  0008               	return
 13828  1E9B                     __end_of_DimmerLights_Main:	
 13829                           
 13830                           	psect	text91
 13831  0B76                     __ptext91:	
 13832 ;; *************** function _setDimmerLights_Main *****************
 13833 ;; Defined at:
 13834 ;;		line 643 in file "../src/Dimmer_B1.c"
 13835 ;; Parameters:    Size  Location     Type
 13836 ;;  lights          1    wreg     unsigned char 
 13837 ;; Auto vars:     Size  Location     Type
 13838 ;;  lights          1   73[BANK0 ] unsigned char 
 13839 ;; Return value:  Size  Location     Type
 13840 ;;		None               void
 13841 ;; Registers used:
 13842 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13843 ;; Tracked objects:
 13844 ;;		On entry : 0/0
 13845 ;;		On exit  : 0/0
 13846 ;;		Unchanged: 0/0
 13847 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13848 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13849 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13850 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13851 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13852 ;;Total ram usage:        1 bytes
 13853 ;; Hardware stack levels used:    1
 13854 ;; Hardware stack levels required when called:    7
 13855 ;; This function calls:
 13856 ;;		_DimmerLightsPointSelect
 13857 ;;		_getDimmerLights_Allow_Condition
 13858 ;;		_getMain_LightsStatus
 13859 ;;		_setDimmerLights
 13860 ;;		_setDimmerLights_Adj
 13861 ;; This function is called by:
 13862 ;;		_DimmerLights_Main
 13863 ;; This function uses a non-reentrant model
 13864 ;;
 13865                           
 13866                           
 13867                           ;psect for function _setDimmerLights_Main
 13868  0B76                     _setDimmerLights_Main:	
 13869                           
 13870                           ;incstack = 0
 13871                           ; Regs used in _setDimmerLights_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13872                           ;setDimmerLights_Main@lights stored from wreg
 13873  0B76  0020               	movlb	0	; select bank0
 13874  0B77  00E9               	movwf	setDimmerLights_Main@lights
 13875                           
 13876                           ;Dimmer_B1.c: 644: DimmerLightsPointSelect(lights);
 13877  0B78  0869               	movf	setDimmerLights_Main@lights,w
 13878  0B79  319D  25A8  318B   	fcall	_DimmerLightsPointSelect
 13879                           
 13880                           ;Dimmer_B1.c: 646: if (DimmerLights->Trigger == 1) {
 13881  0B7C  0020               	movlb	0	; select bank0
 13882  0B7D  086D               	movf	_DimmerLights,w
 13883  0B7E  3E0A               	addlw	10
 13884  0B7F  0086               	movwf	6
 13885  0B80  3001               	movlw	1	; select bank2/3
 13886  0B81  0087               	movwf	7
 13887  0B82  1C81               	btfss	1,1
 13888  0B83  2BA5               	goto	l10094
 13889                           
 13890                           ;Dimmer_B1.c: 647: if (getDimmerLights_Allow_Condition(lights) == 0) {
 13891  0B84  0869               	movf	setDimmerLights_Main@lights,w
 13892  0B85  3192  2242  318B   	fcall	_getDimmerLights_Allow_Condition
 13893  0B88  3800               	iorlw	0
 13894  0B89  1D03               	skipz
 13895  0B8A  0008               	return
 13896                           
 13897                           ;Dimmer_B1.c: 648: DimmerLights->Trigger = 0;
 13898  0B8B  0020               	movlb	0	; select bank0
 13899  0B8C  086D               	movf	_DimmerLights,w
 13900  0B8D  3E0A               	addlw	10
 13901  0B8E  0086               	movwf	6
 13902  0B8F  3001               	movlw	1	; select bank2/3
 13903  0B90  0087               	movwf	7
 13904  0B91  1081               	bcf	1,1
 13905                           
 13906                           ;Dimmer_B1.c: 649: if (DimmerLights->Switch == 1) {
 13907  0B92  086D               	movf	_DimmerLights,w
 13908  0B93  3E0A               	addlw	10
 13909  0B94  0086               	movwf	6
 13910  0B95  3001               	movlw	1	; select bank2/3
 13911  0B96  0087               	movwf	7
 13912  0B97  1C01               	btfss	1,0
 13913  0B98  2B9F               	goto	l10092
 13914                           
 13915                           ;Dimmer_B1.c: 650: setDimmerLights(lights, 1);
 13916  0B99  01E6               	clrf	setDimmerLights@status
 13917  0B9A  0AE6               	incf	setDimmerLights@status,f
 13918  0B9B  0869               	movf	setDimmerLights_Main@lights,w
 13919  0B9C  3195  253A         	fcall	_setDimmerLights
 13920                           
 13921                           ;Dimmer_B1.c: 651: } else {
 13922  0B9E  0008               	return
 13923  0B9F                     l10092:	
 13924                           
 13925                           ;Dimmer_B1.c: 652: setDimmerLights(lights, 0);
 13926  0B9F  0020               	movlb	0	; select bank0
 13927  0BA0  01E6               	clrf	setDimmerLights@status
 13928  0BA1  0869               	movf	setDimmerLights_Main@lights,w
 13929  0BA2  3195  253A         	fcall	_setDimmerLights
 13930                           
 13931                           ;Dimmer_B1.c: 653: }
 13932                           ;Dimmer_B1.c: 654: }
 13933                           ;Dimmer_B1.c: 655: } else {
 13934  0BA4  0008               	return
 13935  0BA5                     l10094:	
 13936                           
 13937                           ;Dimmer_B1.c: 656: if (getMain_LightsStatus() == 1) {
 13938  0BA5  319C  2416  318B   	fcall	_getMain_LightsStatus
 13939  0BA8  3A01               	xorlw	1
 13940  0BA9  1D03               	skipz
 13941  0BAA  2BD4               	goto	l10106
 13942                           
 13943                           ;Dimmer_B1.c: 657: if (DimmerLights->TriggerAdj == 1) {
 13944  0BAB  0020               	movlb	0	; select bank0
 13945  0BAC  086D               	movf	_DimmerLights,w
 13946  0BAD  3E0A               	addlw	10
 13947  0BAE  0086               	movwf	6
 13948  0BAF  3001               	movlw	1	; select bank2/3
 13949  0BB0  0087               	movwf	7
 13950  0BB1  1D81               	btfss	1,3
 13951  0BB2  0008               	return
 13952                           
 13953                           ;Dimmer_B1.c: 658: if (getDimmerLights_Allow_Condition(lights) == 0) {
 13954  0BB3  0869               	movf	setDimmerLights_Main@lights,w
 13955  0BB4  3192  2242  318B   	fcall	_getDimmerLights_Allow_Condition
 13956  0BB7  3800               	iorlw	0
 13957  0BB8  1D03               	skipz
 13958  0BB9  0008               	return
 13959                           
 13960                           ;Dimmer_B1.c: 659: DimmerLights->TriggerAdj = 0;
 13961  0BBA  0020               	movlb	0	; select bank0
 13962  0BBB  086D               	movf	_DimmerLights,w
 13963  0BBC  3E0A               	addlw	10
 13964  0BBD  0086               	movwf	6
 13965  0BBE  3001               	movlw	1	; select bank2/3
 13966  0BBF  0087               	movwf	7
 13967  0BC0  1181               	bcf	1,3
 13968                           
 13969                           ;Dimmer_B1.c: 660: if (DimmerLights->SwitchAdj == 1) {
 13970  0BC1  086D               	movf	_DimmerLights,w
 13971  0BC2  3E0A               	addlw	10
 13972  0BC3  0086               	movwf	6
 13973  0BC4  3001               	movlw	1	; select bank2/3
 13974  0BC5  0087               	movwf	7
 13975  0BC6  1D01               	btfss	1,2
 13976  0BC7  2BCE               	goto	l10104
 13977                           
 13978                           ;Dimmer_B1.c: 661: setDimmerLights_Adj(lights, 1);
 13979  0BC8  01E6               	clrf	setDimmerLights_Adj@status
 13980  0BC9  0AE6               	incf	setDimmerLights_Adj@status,f
 13981  0BCA  0869               	movf	setDimmerLights_Main@lights,w
 13982  0BCB  3197  2748         	fcall	_setDimmerLights_Adj
 13983                           
 13984                           ;Dimmer_B1.c: 662: } else {
 13985  0BCD  0008               	return
 13986  0BCE                     l10104:	
 13987                           
 13988                           ;Dimmer_B1.c: 663: setDimmerLights_Adj(lights, 0);
 13989  0BCE  0020               	movlb	0	; select bank0
 13990  0BCF  01E6               	clrf	setDimmerLights_Adj@status
 13991  0BD0  0869               	movf	setDimmerLights_Main@lights,w
 13992  0BD1  3197  2748         	fcall	_setDimmerLights_Adj
 13993                           
 13994                           ;Dimmer_B1.c: 664: }
 13995                           ;Dimmer_B1.c: 665: }
 13996                           ;Dimmer_B1.c: 666: }
 13997                           ;Dimmer_B1.c: 667: } else {
 13998  0BD3  0008               	return
 13999  0BD4                     l10106:	
 14000                           
 14001                           ;Dimmer_B1.c: 668: if (DimmerLights->TriggerAdj == 1) {
 14002  0BD4  0020               	movlb	0	; select bank0
 14003  0BD5  086D               	movf	_DimmerLights,w
 14004  0BD6  3E0A               	addlw	10
 14005  0BD7  0086               	movwf	6
 14006  0BD8  3001               	movlw	1	; select bank2/3
 14007  0BD9  0087               	movwf	7
 14008  0BDA  1D81               	btfss	1,3
 14009  0BDB  0008               	return
 14010                           
 14011                           ;Dimmer_B1.c: 669: DimmerLights->TriggerAdj = 0;
 14012  0BDC  086D               	movf	_DimmerLights,w
 14013  0BDD  3E0A               	addlw	10
 14014  0BDE  0086               	movwf	6
 14015  0BDF  3001               	movlw	1	; select bank2/3
 14016  0BE0  0087               	movwf	7
 14017  0BE1  1181               	bcf	1,3
 14018  0BE2  0008               	return
 14019  0BE3                     __end_of_setDimmerLights_Main:	
 14020                           
 14021                           	psect	text92
 14022  1748                     __ptext92:	
 14023 ;; *************** function _setDimmerLights_Adj *****************
 14024 ;; Defined at:
 14025 ;;		line 787 in file "../src/Dimmer_B1.c"
 14026 ;; Parameters:    Size  Location     Type
 14027 ;;  lights          1    wreg     unsigned char 
 14028 ;;  status          1   70[BANK0 ] unsigned char 
 14029 ;; Auto vars:     Size  Location     Type
 14030 ;;  lights          1   72[BANK0 ] unsigned char 
 14031 ;; Return value:  Size  Location     Type
 14032 ;;		None               void
 14033 ;; Registers used:
 14034 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14035 ;; Tracked objects:
 14036 ;;		On entry : 0/0
 14037 ;;		On exit  : 0/0
 14038 ;;		Unchanged: 0/0
 14039 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14040 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14041 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14042 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14043 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14044 ;;Total ram usage:        3 bytes
 14045 ;; Hardware stack levels used:    1
 14046 ;; Hardware stack levels required when called:    6
 14047 ;; This function calls:
 14048 ;;		_setBuz
 14049 ;;		_setDimmerLights_Line
 14050 ;;		_setPercentValue
 14051 ;;		_setProductData
 14052 ;;		_setRF_DimmerLights
 14053 ;;		_setRF_TransceiveGO
 14054 ;;		_setTxData
 14055 ;; This function is called by:
 14056 ;;		_setDimmerLights_Main
 14057 ;; This function uses a non-reentrant model
 14058 ;;
 14059                           
 14060                           
 14061                           ;psect for function _setDimmerLights_Adj
 14062  1748                     _setDimmerLights_Adj:	
 14063                           
 14064                           ;incstack = 0
 14065                           ; Regs used in _setDimmerLights_Adj: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14066                           ;setDimmerLights_Adj@lights stored from wreg
 14067  1748  0020               	movlb	0	; select bank0
 14068  1749  00E8               	movwf	setDimmerLights_Adj@lights
 14069                           
 14070                           ;Dimmer_B1.c: 789: if (status == 1) {
 14071  174A  0866               	movf	setDimmerLights_Adj@status,w
 14072  174B  3A01               	xorlw	1
 14073  174C  1D03               	skipz
 14074  174D  2F64               	goto	l9846
 14075                           
 14076                           ;Dimmer_B1.c: 790: DimmerLights->AdjSw = 1;
 14077  174E  0A6D               	incf	_DimmerLights,w
 14078  174F  0086               	movwf	6
 14079  1750  3001               	movlw	1	; select bank2/3
 14080  1751  0087               	movwf	7
 14081  1752  1701               	bsf	1,6
 14082                           
 14083                           ;Dimmer_B1.c: 791: DimmerLights->Signal = 1;
 14084  1753  0A6D               	incf	_DimmerLights,w
 14085  1754  0086               	movwf	6
 14086  1755  3001               	movlw	1	; select bank2/3
 14087  1756  0087               	movwf	7
 14088  1757  1681               	bsf	1,5
 14089                           
 14090                           ;Dimmer_B1.c: 792: setBuz(1, 100);
 14091  1758  3064               	movlw	100
 14092  1759  00A4               	movwf	setBuz@time
 14093  175A  3000               	movlw	0
 14094  175B  00A5               	movwf	setBuz@time+1
 14095  175C  3001               	movlw	1
 14096  175D  3195  25DF  3197   	fcall	_setBuz
 14097                           
 14098                           ;Dimmer_B1.c: 793: setRF_TransceiveGO(0);
 14099  1760  3000               	movlw	0
 14100  1761  319C  2426         	fcall	_setRF_TransceiveGO
 14101                           
 14102                           ;Dimmer_B1.c: 794: } else if (status == 0) {
 14103  1763  0008               	return
 14104  1764                     l9846:	
 14105  1764  0020               	movlb	0	; select bank0
 14106  1765  08E6               	movf	setDimmerLights_Adj@status,f
 14107  1766  1D03               	skipz
 14108  1767  0008               	return
 14109                           
 14110                           ;Dimmer_B1.c: 795: Dimmer.Load_Status = 0;
 14111  1768  0021               	movlb	1	; select bank1
 14112  1769  11C8               	bcf	_Dimmer^(0+128),3	;volatile
 14113                           
 14114                           ;Dimmer_B1.c: 796: setDimmerLights_Line(lights);
 14115  176A  0020               	movlb	0	; select bank0
 14116  176B  0868               	movf	setDimmerLights_Adj@lights,w
 14117  176C  319D  2514  3197   	fcall	_setDimmerLights_Line
 14118                           
 14119                           ;Dimmer_B1.c: 797: DimmerLights->AdjSw = 0;
 14120  176F  0020               	movlb	0	; select bank0
 14121  1770  0A6D               	incf	_DimmerLights,w
 14122  1771  0086               	movwf	6
 14123  1772  3001               	movlw	1	; select bank2/3
 14124  1773  0087               	movwf	7
 14125  1774  1301               	bcf	1,6
 14126                           
 14127                           ;Dimmer_B1.c: 798: DimmerLights->Signal = 0;
 14128  1775  0A6D               	incf	_DimmerLights,w
 14129  1776  0086               	movwf	6
 14130  1777  3001               	movlw	1	; select bank2/3
 14131  1778  0087               	movwf	7
 14132  1779  1281               	bcf	1,5
 14133                           
 14134                           ;Dimmer_B1.c: 800: DimmerLights->MaxmumValue = DimmerLights->DimmingValue;
 14135  177A  086D               	movf	_DimmerLights,w
 14136  177B  3E04               	addlw	4
 14137  177C  0086               	movwf	6
 14138  177D  3001               	movlw	1	; select bank2/3
 14139  177E  0087               	movwf	7
 14140  177F  0801               	movf	1,w
 14141  1780  00E7               	movwf	??_setDimmerLights_Adj
 14142  1781  086D               	movf	_DimmerLights,w
 14143  1782  3E06               	addlw	6
 14144  1783  0086               	movwf	6
 14145  1784  3001               	movlw	1	; select bank2/3
 14146  1785  0087               	movwf	7
 14147  1786  0867               	movf	??_setDimmerLights_Adj,w
 14148  1787  0081               	movwf	1
 14149                           
 14150                           ;Dimmer_B1.c: 801: setProductData((20 + lights), setPercentValue(DimmerLights->DimmingVa
      +                          lue));
 14151  1788  086D               	movf	_DimmerLights,w
 14152  1789  3E04               	addlw	4
 14153  178A  0086               	movwf	6
 14154  178B  3001               	movlw	1	; select bank2/3
 14155  178C  0087               	movwf	7
 14156  178D  0801               	movf	1,w
 14157  178E  3189  2176  3197   	fcall	_setPercentValue
 14158  1791  0020               	movlb	0	; select bank0
 14159  1792  00E7               	movwf	??_setDimmerLights_Adj
 14160  1793  0867               	movf	??_setDimmerLights_Adj,w
 14161  1794  00DD               	movwf	setProductData@value
 14162  1795  0868               	movf	setDimmerLights_Adj@lights,w
 14163  1796  3E14               	addlw	20
 14164  1797  319B  23DA  3197   	fcall	_setProductData
 14165                           
 14166                           ;Dimmer_B1.c: 816: setRF_DimmerLights(lights, 1);
 14167  179A  0020               	movlb	0	; select bank0
 14168  179B  01E1               	clrf	setRF_DimmerLights@on
 14169  179C  0AE1               	incf	setRF_DimmerLights@on,f
 14170  179D  0868               	movf	setDimmerLights_Adj@lights,w
 14171  179E  3196  2638  3197   	fcall	_setRF_DimmerLights
 14172                           
 14173                           ;Dimmer_B1.c: 817: setTxData();
 14174  17A1  318F  274C         	fcall	_setTxData
 14175  17A3  0008               	return
 14176  17A4                     __end_of_setDimmerLights_Adj:	
 14177                           
 14178                           	psect	text93
 14179  1C26                     __ptext93:	
 14180 ;; *************** function _setRF_TransceiveGO *****************
 14181 ;; Defined at:
 14182 ;;		line 449 in file "../src/RF_Control_B1.c"
 14183 ;; Parameters:    Size  Location     Type
 14184 ;;  command         1    wreg     unsigned char 
 14185 ;; Auto vars:     Size  Location     Type
 14186 ;;  command         1    4[COMMON] unsigned char 
 14187 ;; Return value:  Size  Location     Type
 14188 ;;		None               void
 14189 ;; Registers used:
 14190 ;;		wreg, status,2, status,0
 14191 ;; Tracked objects:
 14192 ;;		On entry : 0/0
 14193 ;;		On exit  : 0/0
 14194 ;;		Unchanged: 0/0
 14195 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14196 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14197 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14198 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14199 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14200 ;;Total ram usage:        2 bytes
 14201 ;; Hardware stack levels used:    1
 14202 ;; Hardware stack levels required when called:    3
 14203 ;; This function calls:
 14204 ;;		Nothing
 14205 ;; This function is called by:
 14206 ;;		_setDimmerLights_Adj
 14207 ;; This function uses a non-reentrant model
 14208 ;;
 14209                           
 14210                           
 14211                           ;psect for function _setRF_TransceiveGO
 14212  1C26                     _setRF_TransceiveGO:	
 14213                           
 14214                           ;incstack = 0
 14215                           ; Regs used in _setRF_TransceiveGO: [wreg+status,2+status,0]
 14216                           ;setRF_TransceiveGO@command stored from wreg
 14217  1C26  00F4               	movwf	setRF_TransceiveGO@command
 14218                           
 14219                           ;RF_Control_B1.c: 450: RF1.TransceiveGO = command == 1 ? 1 : 0;
 14220  1C27  0874               	movf	setRF_TransceiveGO@command,w
 14221  1C28  3A01               	xorlw	1
 14222  1C29  3000               	movlw	0
 14223  1C2A  1903               	skipnz
 14224  1C2B  3001               	movlw	1
 14225  1C2C  00F3               	movwf	??_setRF_TransceiveGO
 14226  1C2D  0DF3               	rlf	??_setRF_TransceiveGO,f
 14227  1C2E  0DF3               	rlf	??_setRF_TransceiveGO,f
 14228  1C2F  0021               	movlb	1	; select bank1
 14229  1C30  0820               	movf	_RF1^(0+128),w
 14230  1C31  0673               	xorwf	??_setRF_TransceiveGO,w
 14231  1C32  39FB               	andlw	-5
 14232  1C33  0673               	xorwf	??_setRF_TransceiveGO,w
 14233  1C34  00A0               	movwf	_RF1^(0+128)
 14234  1C35  0008               	return
 14235  1C36                     __end_of_setRF_TransceiveGO:	
 14236                           
 14237                           	psect	text94
 14238  153A                     __ptext94:	
 14239 ;; *************** function _setDimmerLights *****************
 14240 ;; Defined at:
 14241 ;;		line 745 in file "../src/Dimmer_B1.c"
 14242 ;; Parameters:    Size  Location     Type
 14243 ;;  lights          1    wreg     unsigned char 
 14244 ;;  status          1   70[BANK0 ] unsigned char 
 14245 ;; Auto vars:     Size  Location     Type
 14246 ;;  lights          1   72[BANK0 ] unsigned char 
 14247 ;; Return value:  Size  Location     Type
 14248 ;;		None               void
 14249 ;; Registers used:
 14250 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14251 ;; Tracked objects:
 14252 ;;		On entry : 0/0
 14253 ;;		On exit  : 0/0
 14254 ;;		Unchanged: 0/0
 14255 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14256 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14257 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14258 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14259 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14260 ;;Total ram usage:        3 bytes
 14261 ;; Hardware stack levels used:    1
 14262 ;; Hardware stack levels required when called:    6
 14263 ;; This function calls:
 14264 ;;		_setDimmerLights_Line
 14265 ;;		_setLED
 14266 ;;		_setPercentValue
 14267 ;;		_setProductData
 14268 ;;		_setRF_DimmerLights
 14269 ;;		_setTxData
 14270 ;; This function is called by:
 14271 ;;		_setDimmerLights_Main
 14272 ;; This function uses a non-reentrant model
 14273 ;;
 14274                           
 14275                           
 14276                           ;psect for function _setDimmerLights
 14277  153A                     _setDimmerLights:	
 14278                           
 14279                           ;incstack = 0
 14280                           ; Regs used in _setDimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14281                           ;setDimmerLights@lights stored from wreg
 14282  153A  0020               	movlb	0	; select bank0
 14283  153B  00E8               	movwf	setDimmerLights@lights
 14284                           
 14285                           ;Dimmer_B1.c: 753: if (status == 1) {
 14286  153C  0866               	movf	setDimmerLights@status,w
 14287  153D  3A01               	xorlw	1
 14288  153E  1D03               	skipz
 14289  153F  2D6A               	goto	l9824
 14290                           
 14291                           ;Dimmer_B1.c: 754: DimmerLights->StatusFlag = 1;
 14292  1540  0A6D               	incf	_DimmerLights,w
 14293  1541  0086               	movwf	6
 14294  1542  3001               	movlw	1	; select bank2/3
 14295  1543  0087               	movwf	7
 14296  1544  1501               	bsf	1,2
 14297                           
 14298                           ;Dimmer_B1.c: 757: Dimmer.Load_Status = 1;
 14299  1545  0021               	movlb	1	; select bank1
 14300  1546  15C8               	bsf	_Dimmer^(0+128),3	;volatile
 14301                           
 14302                           ;Dimmer_B1.c: 758: setDimmerLights_Line(lights);
 14303  1547  0020               	movlb	0	; select bank0
 14304  1548  0868               	movf	setDimmerLights@lights,w
 14305  1549  319D  2514  3195   	fcall	_setDimmerLights_Line
 14306                           
 14307                           ;Dimmer_B1.c: 760: setLED(lights, 0);
 14308  154C  01F5               	clrf	setLED@command
 14309  154D  0020               	movlb	0	; select bank0
 14310  154E  0868               	movf	setDimmerLights@lights,w
 14311  154F  3188  20B4  3195   	fcall	_setLED
 14312                           
 14313                           ;Dimmer_B1.c: 765: DimmerLights->DimmingValue = ((char)(70*0.8));
 14314  1552  3038               	movlw	56
 14315  1553  0020               	movlb	0	; select bank0
 14316  1554  00E7               	movwf	??_setDimmerLights
 14317  1555  086D               	movf	_DimmerLights,w
 14318  1556  3E04               	addlw	4
 14319  1557  0086               	movwf	6
 14320  1558  3001               	movlw	1	; select bank2/3
 14321  1559  0087               	movwf	7
 14322  155A  0867               	movf	??_setDimmerLights,w
 14323  155B  0081               	movwf	1
 14324                           
 14325                           ;Dimmer_B1.c: 767: setProductData((20 + lights), setPercentValue(((char)(70*0.8))));
 14326  155C  3038               	movlw	56
 14327  155D  3189  2176  3195   	fcall	_setPercentValue
 14328  1560  0020               	movlb	0	; select bank0
 14329  1561  00E7               	movwf	??_setDimmerLights
 14330  1562  0867               	movf	??_setDimmerLights,w
 14331  1563  00DD               	movwf	setProductData@value
 14332  1564  0868               	movf	setDimmerLights@lights,w
 14333  1565  3E14               	addlw	20
 14334  1566  319B  23DA  3195   	fcall	_setProductData
 14335                           
 14336                           ;Dimmer_B1.c: 769: } else if (status == 0) {
 14337  1569  2D80               	goto	l9834
 14338  156A                     l9824:	
 14339  156A  0020               	movlb	0	; select bank0
 14340  156B  08E6               	movf	setDimmerLights@status,f
 14341  156C  1D03               	skipz
 14342  156D  2D80               	goto	l9834
 14343                           
 14344                           ;Dimmer_B1.c: 770: DimmerLights->StatusFlag = 0;
 14345  156E  0A6D               	incf	_DimmerLights,w
 14346  156F  0086               	movwf	6
 14347  1570  3001               	movlw	1	; select bank2/3
 14348  1571  0087               	movwf	7
 14349  1572  1101               	bcf	1,2
 14350                           
 14351                           ;Dimmer_B1.c: 773: Dimmer.Load_Status = 0;
 14352  1573  0021               	movlb	1	; select bank1
 14353  1574  11C8               	bcf	_Dimmer^(0+128),3	;volatile
 14354                           
 14355                           ;Dimmer_B1.c: 774: setDimmerLights_Line(0);
 14356  1575  3000               	movlw	0
 14357  1576  319D  2514  3195   	fcall	_setDimmerLights_Line
 14358                           
 14359                           ;Dimmer_B1.c: 776: setLED(lights, 1);
 14360  1579  01F5               	clrf	setLED@command
 14361  157A  0AF5               	incf	setLED@command,f
 14362  157B  0020               	movlb	0	; select bank0
 14363  157C  0868               	movf	setDimmerLights@lights,w
 14364  157D  3188  20B4  3195   	fcall	_setLED
 14365  1580                     l9834:	
 14366                           
 14367                           ;Dimmer_B1.c: 778: }
 14368                           ;Dimmer_B1.c: 781: setRF_DimmerLights(lights, status);
 14369  1580  0020               	movlb	0	; select bank0
 14370  1581  0866               	movf	setDimmerLights@status,w
 14371  1582  00E7               	movwf	??_setDimmerLights
 14372  1583  0867               	movf	??_setDimmerLights,w
 14373  1584  00E1               	movwf	setRF_DimmerLights@on
 14374  1585  0868               	movf	setDimmerLights@lights,w
 14375  1586  3196  2638  3195   	fcall	_setRF_DimmerLights
 14376                           
 14377                           ;Dimmer_B1.c: 782: setTxData();
 14378  1589  318F  274C         	fcall	_setTxData
 14379  158B  0008               	return
 14380  158C                     __end_of_setDimmerLights:	
 14381                           
 14382                           	psect	text95
 14383  0F4C                     __ptext95:	
 14384 ;; *************** function _setTxData *****************
 14385 ;; Defined at:
 14386 ;;		line 167 in file "../src/RF_Control_B1.c"
 14387 ;; Parameters:    Size  Location     Type
 14388 ;;		None
 14389 ;; Auto vars:     Size  Location     Type
 14390 ;;  i               1    0        unsigned char 
 14391 ;; Return value:  Size  Location     Type
 14392 ;;		None               void
 14393 ;; Registers used:
 14394 ;;		wreg, fsr1l, fsr1h
 14395 ;; Tracked objects:
 14396 ;;		On entry : 0/0
 14397 ;;		On exit  : 0/0
 14398 ;;		Unchanged: 0/0
 14399 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14400 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14401 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14402 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14403 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14404 ;;Total ram usage:        1 bytes
 14405 ;; Hardware stack levels used:    1
 14406 ;; Hardware stack levels required when called:    3
 14407 ;; This function calls:
 14408 ;;		Nothing
 14409 ;; This function is called by:
 14410 ;;		_setDimmerLights
 14411 ;;		_setDimmerLights_Adj
 14412 ;;		_getRxData
 14413 ;;		_setControl_Lights_Table
 14414 ;;		_setRFSW_Control
 14415 ;;		_setRFSW_AdjControl
 14416 ;; This function uses a non-reentrant model
 14417 ;;
 14418                           
 14419                           
 14420                           ;psect for function _setTxData
 14421  0F4C                     _setTxData:	
 14422                           
 14423                           ;RF_Control_B1.c: 168: char i;
 14424                           ;RF_Control_B1.c: 169: if (RF1.Enable == 1) {
 14425                           
 14426                           ;incstack = 0
 14427                           ; Regs used in _setTxData: [wregfsr1]
 14428  0F4C  0021               	movlb	1	; select bank1
 14429  0F4D  1C20               	btfss	_RF1^(0+128),0
 14430  0F4E  0008               	return
 14431                           
 14432                           ;RF_Control_B1.c: 171: RF1.TransceiveGO = 1;
 14433  0F4F  1520               	bsf	_RF1^(0+128),2
 14434                           
 14435                           ;RF_Control_B1.c: 183: RF_Data[0] = 0x63;
 14436  0F50  3063               	movlw	99
 14437  0F51  00F3               	movwf	??_setTxData
 14438  0F52  0873               	movf	??_setTxData,w
 14439  0F53  0023               	movlb	3	; select bank3
 14440  0F54  00A0               	movwf	_RF_Data^(0+384)
 14441                           
 14442                           ;RF_Control_B1.c: 184: RF_Data[1] = 0x02;
 14443  0F55  3002               	movlw	2
 14444  0F56  00F3               	movwf	??_setTxData
 14445  0F57  0873               	movf	??_setTxData,w
 14446  0F58  00A1               	movwf	(_RF_Data^(0+384)+1)
 14447                           
 14448                           ;RF_Control_B1.c: 186: RF_Data[2] = product->Data[2];
 14449  0F59  0020               	movlb	0	; select bank0
 14450  0F5A  086F               	movf	_product,w
 14451  0F5B  0086               	movwf	6
 14452  0F5C  3002               	movlw	2	; select bank4/5
 14453  0F5D  0087               	movwf	7
 14454  0F5E  3002               	movlw	2	; select bank4/5
 14455  0F5F  3F42               	moviw [2]fsr1
 14456  0F60  0023               	movlb	3	; select bank3
 14457  0F61  00A2               	movwf	(_RF_Data^(0+384)+2)
 14458                           
 14459                           ;RF_Control_B1.c: 187: RF_Data[3] = product->Data[3];
 14460  0F62  0020               	movlb	0	; select bank0
 14461  0F63  086F               	movf	_product,w
 14462  0F64  0086               	movwf	6
 14463  0F65  3002               	movlw	2	; select bank4/5
 14464  0F66  0087               	movwf	7
 14465  0F67  3002               	movlw	2	; select bank4/5
 14466  0F68  3F43               	moviw [3]fsr1
 14467  0F69  0023               	movlb	3	; select bank3
 14468  0F6A  00A3               	movwf	(_RF_Data^(0+384)+3)
 14469                           
 14470                           ;RF_Control_B1.c: 188: RF_Data[4] = product->Data[4];
 14471  0F6B  0020               	movlb	0	; select bank0
 14472  0F6C  086F               	movf	_product,w
 14473  0F6D  0086               	movwf	6
 14474  0F6E  3002               	movlw	2	; select bank4/5
 14475  0F6F  0087               	movwf	7
 14476  0F70  3002               	movlw	2	; select bank4/5
 14477  0F71  3F44               	moviw [4]fsr1
 14478  0F72  0023               	movlb	3	; select bank3
 14479  0F73  00A4               	movwf	(_RF_Data^(0+384)+4)
 14480                           
 14481                           ;RF_Control_B1.c: 189: RF_Data[5] = product->Data[5];
 14482  0F74  0020               	movlb	0	; select bank0
 14483  0F75  086F               	movf	_product,w
 14484  0F76  0086               	movwf	6
 14485  0F77  3002               	movlw	2	; select bank4/5
 14486  0F78  0087               	movwf	7
 14487  0F79  3002               	movlw	2	; select bank4/5
 14488  0F7A  3F45               	moviw [5]fsr1
 14489  0F7B  0023               	movlb	3	; select bank3
 14490  0F7C  00A5               	movwf	(_RF_Data^(0+384)+5)
 14491                           
 14492                           ;RF_Control_B1.c: 190: RF_Data[6] = product->Data[6];
 14493  0F7D  0020               	movlb	0	; select bank0
 14494  0F7E  086F               	movf	_product,w
 14495  0F7F  0086               	movwf	6
 14496  0F80  3002               	movlw	2	; select bank4/5
 14497  0F81  0087               	movwf	7
 14498  0F82  3002               	movlw	2	; select bank4/5
 14499  0F83  3F46               	moviw [6]fsr1
 14500  0F84  0023               	movlb	3	; select bank3
 14501  0F85  00A6               	movwf	(_RF_Data^(0+384)+6)
 14502                           
 14503                           ;RF_Control_B1.c: 191: RF_Data[7] = product->Data[7];
 14504  0F86  0020               	movlb	0	; select bank0
 14505  0F87  086F               	movf	_product,w
 14506  0F88  0086               	movwf	6
 14507  0F89  3002               	movlw	2	; select bank4/5
 14508  0F8A  0087               	movwf	7
 14509  0F8B  3002               	movlw	2	; select bank4/5
 14510  0F8C  3F47               	moviw [7]fsr1
 14511  0F8D  0023               	movlb	3	; select bank3
 14512  0F8E  00A7               	movwf	(_RF_Data^(0+384)+7)
 14513                           
 14514                           ;RF_Control_B1.c: 192: RF_Data[8] = product->Data[8];
 14515  0F8F  0020               	movlb	0	; select bank0
 14516  0F90  086F               	movf	_product,w
 14517  0F91  0086               	movwf	6
 14518  0F92  3002               	movlw	2	; select bank4/5
 14519  0F93  0087               	movwf	7
 14520  0F94  3002               	movlw	2	; select bank4/5
 14521  0F95  3F48               	moviw [8]fsr1
 14522  0F96  0023               	movlb	3	; select bank3
 14523  0F97  00A8               	movwf	(_RF_Data^(0+384)+8)
 14524                           
 14525                           ;RF_Control_B1.c: 193: RF_Data[9] = product->Data[9];
 14526  0F98  0020               	movlb	0	; select bank0
 14527  0F99  086F               	movf	_product,w
 14528  0F9A  0086               	movwf	6
 14529  0F9B  3002               	movlw	2	; select bank4/5
 14530  0F9C  0087               	movwf	7
 14531  0F9D  3002               	movlw	2	; select bank4/5
 14532  0F9E  3F49               	moviw [9]fsr1
 14533  0F9F  0023               	movlb	3	; select bank3
 14534  0FA0  00A9               	movwf	(_RF_Data^(0+384)+9)
 14535                           
 14536                           ;RF_Control_B1.c: 194: RF_Data[10] = product->Data[10];
 14537  0FA1  0020               	movlb	0	; select bank0
 14538  0FA2  086F               	movf	_product,w
 14539  0FA3  0086               	movwf	6
 14540  0FA4  3002               	movlw	2	; select bank4/5
 14541  0FA5  0087               	movwf	7
 14542  0FA6  3002               	movlw	2	; select bank4/5
 14543  0FA7  3F4A               	moviw [10]fsr1
 14544  0FA8  0023               	movlb	3	; select bank3
 14545  0FA9  00AA               	movwf	(_RF_Data^(0+384)+10)
 14546                           
 14547                           ;RF_Control_B1.c: 195: RF_Data[11] = product->Data[11];
 14548  0FAA  0020               	movlb	0	; select bank0
 14549  0FAB  086F               	movf	_product,w
 14550  0FAC  0086               	movwf	6
 14551  0FAD  3002               	movlw	2	; select bank4/5
 14552  0FAE  0087               	movwf	7
 14553  0FAF  3002               	movlw	2	; select bank4/5
 14554  0FB0  3F4B               	moviw [11]fsr1
 14555  0FB1  0023               	movlb	3	; select bank3
 14556  0FB2  00AB               	movwf	(_RF_Data^(0+384)+11)
 14557                           
 14558                           ;RF_Control_B1.c: 196: RF_Data[12] = product->Data[12];
 14559  0FB3  0020               	movlb	0	; select bank0
 14560  0FB4  086F               	movf	_product,w
 14561  0FB5  0086               	movwf	6
 14562  0FB6  3002               	movlw	2	; select bank4/5
 14563  0FB7  0087               	movwf	7
 14564  0FB8  3002               	movlw	2	; select bank4/5
 14565  0FB9  3F4C               	moviw [12]fsr1
 14566  0FBA  0023               	movlb	3	; select bank3
 14567  0FBB  00AC               	movwf	(_RF_Data^(0+384)+12)
 14568                           
 14569                           ;RF_Control_B1.c: 197: RF_Data[13] = product->Data[13];
 14570  0FBC  0020               	movlb	0	; select bank0
 14571  0FBD  086F               	movf	_product,w
 14572  0FBE  0086               	movwf	6
 14573  0FBF  3002               	movlw	2	; select bank4/5
 14574  0FC0  0087               	movwf	7
 14575  0FC1  3002               	movlw	2	; select bank4/5
 14576  0FC2  3F4D               	moviw [13]fsr1
 14577  0FC3  0023               	movlb	3	; select bank3
 14578  0FC4  00AD               	movwf	(_RF_Data^(0+384)+13)
 14579                           
 14580                           ;RF_Control_B1.c: 198: RF_Data[14] = product->Data[14];
 14581  0FC5  0020               	movlb	0	; select bank0
 14582  0FC6  086F               	movf	_product,w
 14583  0FC7  0086               	movwf	6
 14584  0FC8  3002               	movlw	2	; select bank4/5
 14585  0FC9  0087               	movwf	7
 14586  0FCA  3002               	movlw	2	; select bank4/5
 14587  0FCB  3F4E               	moviw [14]fsr1
 14588  0FCC  0023               	movlb	3	; select bank3
 14589  0FCD  00AE               	movwf	(_RF_Data^(0+384)+14)
 14590                           
 14591                           ;RF_Control_B1.c: 199: RF_Data[15] = product->Data[15];
 14592  0FCE  0020               	movlb	0	; select bank0
 14593  0FCF  086F               	movf	_product,w
 14594  0FD0  0086               	movwf	6
 14595  0FD1  3002               	movlw	2	; select bank4/5
 14596  0FD2  0087               	movwf	7
 14597  0FD3  3002               	movlw	2	; select bank4/5
 14598  0FD4  3F4F               	moviw [15]fsr1
 14599  0FD5  0023               	movlb	3	; select bank3
 14600  0FD6  00AF               	movwf	(_RF_Data^(0+384)+15)
 14601                           
 14602                           ;RF_Control_B1.c: 200: RF_Data[16] = product->Data[16];
 14603  0FD7  0020               	movlb	0	; select bank0
 14604  0FD8  086F               	movf	_product,w
 14605  0FD9  0086               	movwf	6
 14606  0FDA  3002               	movlw	2	; select bank4/5
 14607  0FDB  0087               	movwf	7
 14608  0FDC  3002               	movlw	2	; select bank4/5
 14609  0FDD  3F50               	moviw [16]fsr1
 14610  0FDE  0023               	movlb	3	; select bank3
 14611  0FDF  00B0               	movwf	(_RF_Data^(0+384)+16)
 14612                           
 14613                           ;RF_Control_B1.c: 201: RF_Data[17] = product->Data[17];
 14614  0FE0  0020               	movlb	0	; select bank0
 14615  0FE1  086F               	movf	_product,w
 14616  0FE2  0086               	movwf	6
 14617  0FE3  3002               	movlw	2	; select bank4/5
 14618  0FE4  0087               	movwf	7
 14619  0FE5  3002               	movlw	2	; select bank4/5
 14620  0FE6  3F51               	moviw [17]fsr1
 14621  0FE7  0023               	movlb	3	; select bank3
 14622  0FE8  00B1               	movwf	(_RF_Data^(0+384)+17)
 14623                           
 14624                           ;RF_Control_B1.c: 202: RF_Data[18] = product->Data[18];
 14625  0FE9  0020               	movlb	0	; select bank0
 14626  0FEA  086F               	movf	_product,w
 14627  0FEB  0086               	movwf	6
 14628  0FEC  3002               	movlw	2	; select bank4/5
 14629  0FED  0087               	movwf	7
 14630  0FEE  3002               	movlw	2	; select bank4/5
 14631  0FEF  3F52               	moviw [18]fsr1
 14632  0FF0  0023               	movlb	3	; select bank3
 14633  0FF1  00B2               	movwf	(_RF_Data^(0+384)+18)
 14634                           
 14635                           ;RF_Control_B1.c: 203: RF_Data[19] = product->Data[19];
 14636  0FF2  0020               	movlb	0	; select bank0
 14637  0FF3  086F               	movf	_product,w
 14638  0FF4  0086               	movwf	6
 14639  0FF5  3002               	movlw	2	; select bank4/5
 14640  0FF6  0087               	movwf	7
 14641  0FF7  3002               	movlw	2	; select bank4/5
 14642  0FF8  3F53               	moviw [19]fsr1
 14643  0FF9  0023               	movlb	3	; select bank3
 14644  0FFA  00B3               	movwf	(_RF_Data^(0+384)+19)
 14645                           
 14646                           ;RF_Control_B1.c: 204: RF_Data[20] = 210;
 14647  0FFB  30D2               	movlw	210
 14648  0FFC  00F3               	movwf	??_setTxData
 14649  0FFD  0873               	movf	??_setTxData,w
 14650  0FFE  00B4               	movwf	(_RF_Data^(0+384)+20)
 14651  0FFF  0008               	return
 14652  1000                     __end_of_setTxData:	
 14653                           
 14654                           	psect	text96
 14655  1638                     __ptext96:	
 14656 ;; *************** function _setRF_DimmerLights *****************
 14657 ;; Defined at:
 14658 ;;		line 428 in file "../src/RF_Control_B1.c"
 14659 ;; Parameters:    Size  Location     Type
 14660 ;;  lights          1    wreg     unsigned char 
 14661 ;;  on              1   65[BANK0 ] unsigned char 
 14662 ;; Auto vars:     Size  Location     Type
 14663 ;;  lights          1   69[BANK0 ] unsigned char 
 14664 ;;  status          1   68[BANK0 ] unsigned char 
 14665 ;; Return value:  Size  Location     Type
 14666 ;;		None               void
 14667 ;; Registers used:
 14668 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14669 ;; Tracked objects:
 14670 ;;		On entry : 0/0
 14671 ;;		On exit  : 0/0
 14672 ;;		Unchanged: 0/0
 14673 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14674 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14675 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14676 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14677 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14678 ;;Total ram usage:        5 bytes
 14679 ;; Hardware stack levels used:    1
 14680 ;; Hardware stack levels required when called:    4
 14681 ;; This function calls:
 14682 ;;		_setProductData
 14683 ;; This function is called by:
 14684 ;;		_setDimmerLights
 14685 ;;		_setDimmerLights_Adj
 14686 ;;		_setRFSW_Control
 14687 ;; This function uses a non-reentrant model
 14688 ;;
 14689                           
 14690                           
 14691                           ;psect for function _setRF_DimmerLights
 14692  1638                     _setRF_DimmerLights:	
 14693                           
 14694                           ;incstack = 0
 14695                           ; Regs used in _setRF_DimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14696                           ;setRF_DimmerLights@lights stored from wreg
 14697  1638  0020               	movlb	0	; select bank0
 14698  1639  00E5               	movwf	setRF_DimmerLights@lights
 14699                           
 14700                           ;RF_Control_B1.c: 429: char status = 1;
 14701  163A  01E4               	clrf	setRF_DimmerLights@status
 14702  163B  0AE4               	incf	setRF_DimmerLights@status,f
 14703                           
 14704                           ;RF_Control_B1.c: 430: status <<= (lights - 1);
 14705  163C  0865               	movf	setRF_DimmerLights@lights,w
 14706  163D  3EFF               	addlw	-1
 14707  163E  0A89               	incf	9,f
 14708  163F  2E42               	goto	u9880
 14709  1640                     u9885:	
 14710  1640  1003               	clrc
 14711  1641  0DE4               	rlf	setRF_DimmerLights@status,f
 14712  1642                     u9880:	
 14713  1642  3EFF               	addlw	-1
 14714  1643  1D03               	skipz
 14715  1644  2E40               	goto	u9885
 14716                           
 14717                           ;RF_Control_B1.c: 431: setProductData(11, lights);
 14718  1645  0865               	movf	setRF_DimmerLights@lights,w
 14719  1646  00E2               	movwf	??_setRF_DimmerLights
 14720  1647  0862               	movf	??_setRF_DimmerLights,w
 14721  1648  00DD               	movwf	setProductData@value
 14722  1649  300B               	movlw	11
 14723  164A  319B  23DA  3196   	fcall	_setProductData
 14724                           
 14725                           ;RF_Control_B1.c: 433: setProductData(9, product->Data[20 + lights]);
 14726  164D  0020               	movlb	0	; select bank0
 14727  164E  0865               	movf	setRF_DimmerLights@lights,w
 14728  164F  3E14               	addlw	20
 14729  1650  076F               	addwf	_product,w
 14730  1651  00E2               	movwf	??_setRF_DimmerLights
 14731  1652  0862               	movf	??_setRF_DimmerLights,w
 14732  1653  0086               	movwf	6
 14733  1654  3002               	movlw	2	; select bank4/5
 14734  1655  0087               	movwf	7
 14735  1656  0801               	movf	1,w
 14736  1657  00E3               	movwf	??_setRF_DimmerLights+1
 14737  1658  0863               	movf	??_setRF_DimmerLights+1,w
 14738  1659  00DD               	movwf	setProductData@value
 14739  165A  3009               	movlw	9
 14740  165B  319B  23DA  3196   	fcall	_setProductData
 14741                           
 14742                           ;RF_Control_B1.c: 434: setProductData(17, product->Data[26 + lights]);
 14743  165E  0020               	movlb	0	; select bank0
 14744  165F  0865               	movf	setRF_DimmerLights@lights,w
 14745  1660  3E1A               	addlw	26
 14746  1661  076F               	addwf	_product,w
 14747  1662  00E2               	movwf	??_setRF_DimmerLights
 14748  1663  0862               	movf	??_setRF_DimmerLights,w
 14749  1664  0086               	movwf	6
 14750  1665  3002               	movlw	2	; select bank4/5
 14751  1666  0087               	movwf	7
 14752  1667  0801               	movf	1,w
 14753  1668  00E3               	movwf	??_setRF_DimmerLights+1
 14754  1669  0863               	movf	??_setRF_DimmerLights+1,w
 14755  166A  00DD               	movwf	setProductData@value
 14756  166B  3011               	movlw	17
 14757  166C  319B  23DA  3196   	fcall	_setProductData
 14758                           
 14759                           ;RF_Control_B1.c: 435: if (on == 1) {
 14760  166F  0020               	movlb	0	; select bank0
 14761  1670  0861               	movf	setRF_DimmerLights@on,w
 14762  1671  3A01               	xorlw	1
 14763  1672  1D03               	skipz
 14764  1673  2E82               	goto	l9222
 14765                           
 14766                           ;RF_Control_B1.c: 436: setProductData(15, (product->Data[15] | status));
 14767  1674  086F               	movf	_product,w
 14768  1675  3E0F               	addlw	15
 14769  1676  0086               	movwf	6
 14770  1677  3002               	movlw	2	; select bank4/5
 14771  1678  0087               	movwf	7
 14772  1679  0801               	movf	1,w
 14773  167A  0464               	iorwf	setRF_DimmerLights@status,w
 14774  167B  00E2               	movwf	??_setRF_DimmerLights
 14775  167C  0862               	movf	??_setRF_DimmerLights,w
 14776  167D  00DD               	movwf	setProductData@value
 14777  167E  300F               	movlw	15
 14778  167F  319B  23DA         	fcall	_setProductData
 14779                           
 14780                           ;RF_Control_B1.c: 437: } else {
 14781  1681  0008               	return
 14782  1682                     l9222:	
 14783                           
 14784                           ;RF_Control_B1.c: 438: setProductData(15, (product->Data[15]&(~status)));
 14785  1682  0020               	movlb	0	; select bank0
 14786  1683  086F               	movf	_product,w
 14787  1684  3E0F               	addlw	15
 14788  1685  0086               	movwf	6
 14789  1686  3002               	movlw	2	; select bank4/5
 14790  1687  0087               	movwf	7
 14791  1688  0964               	comf	setRF_DimmerLights@status,w
 14792  1689  0501               	andwf	1,w
 14793  168A  00E2               	movwf	??_setRF_DimmerLights
 14794  168B  0862               	movf	??_setRF_DimmerLights,w
 14795  168C  00DD               	movwf	setProductData@value
 14796  168D  300F               	movlw	15
 14797  168E  319B  23DA         	fcall	_setProductData
 14798  1690  0008               	return
 14799  1691                     __end_of_setRF_DimmerLights:	
 14800                           
 14801                           	psect	text97
 14802  0976                     __ptext97:	
 14803 ;; *************** function _setPercentValue *****************
 14804 ;; Defined at:
 14805 ;;		line 1150 in file "../src/Dimmer_B1.c"
 14806 ;; Parameters:    Size  Location     Type
 14807 ;;  value           1    wreg     unsigned char 
 14808 ;; Auto vars:     Size  Location     Type
 14809 ;;  value           1   57[BANK0 ] unsigned char 
 14810 ;;  i               3   58[BANK0 ] float 
 14811 ;; Return value:  Size  Location     Type
 14812 ;;                  1    wreg      unsigned char 
 14813 ;; Registers used:
 14814 ;;		wreg, status,2, status,0, pclath, cstack
 14815 ;; Tracked objects:
 14816 ;;		On entry : 0/0
 14817 ;;		On exit  : 0/0
 14818 ;;		Unchanged: 0/0
 14819 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14820 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14821 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14822 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14823 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14824 ;;Total ram usage:        6 bytes
 14825 ;; Hardware stack levels used:    1
 14826 ;; Hardware stack levels required when called:    5
 14827 ;; This function calls:
 14828 ;;		___awtoft
 14829 ;;		___ftadd
 14830 ;;		___ftdiv
 14831 ;;		___ftneg
 14832 ;;		___fttol
 14833 ;; This function is called by:
 14834 ;;		_setDimmerLights
 14835 ;;		_setDimmerLights_Adj
 14836 ;;		_Flash_Memory_Initialization
 14837 ;; This function uses a non-reentrant model
 14838 ;;
 14839                           
 14840                           
 14841                           ;psect for function _setPercentValue
 14842  0976                     _setPercentValue:	
 14843                           
 14844                           ;incstack = 0
 14845                           ; Regs used in _setPercentValue: [wreg+status,2+status,0+pclath+cstack]
 14846                           ;setPercentValue@value stored from wreg
 14847  0976  0020               	movlb	0	; select bank0
 14848  0977  00D9               	movwf	setPercentValue@value
 14849                           
 14850                           ;Dimmer_B1.c: 1158: float i = ((char)(70*0.8)) - ((char)(15*0.8));
 14851  0978  3000               	movlw	0
 14852  0979  00DA               	movwf	setPercentValue@i
 14853  097A  3030               	movlw	48
 14854  097B  00DB               	movwf	setPercentValue@i+1
 14855  097C  3042               	movlw	66
 14856  097D  00DC               	movwf	setPercentValue@i+2
 14857                           
 14858                           ;Dimmer_B1.c: 1159: i /= 100;
 14859  097E  3000               	movlw	0
 14860  097F  00A9               	movwf	___ftdiv@f2
 14861  0980  30C8               	movlw	200
 14862  0981  00AA               	movwf	___ftdiv@f2+1
 14863  0982  3042               	movlw	66
 14864  0983  00AB               	movwf	___ftdiv@f2+2
 14865  0984  085A               	movf	setPercentValue@i,w
 14866  0985  00AC               	movwf	___ftdiv@f1
 14867  0986  085B               	movf	setPercentValue@i+1,w
 14868  0987  00AD               	movwf	___ftdiv@f1+1
 14869  0988  085C               	movf	setPercentValue@i+2,w
 14870  0989  00AE               	movwf	___ftdiv@f1+2
 14871  098A  318D  25F3  3189   	fcall	___ftdiv
 14872  098D  0020               	movlb	0	; select bank0
 14873  098E  0829               	movf	?___ftdiv,w
 14874  098F  00DA               	movwf	setPercentValue@i
 14875  0990  082A               	movf	?___ftdiv+1,w
 14876  0991  00DB               	movwf	setPercentValue@i+1
 14877  0992  082B               	movf	?___ftdiv+2,w
 14878  0993  00DC               	movwf	setPercentValue@i+2
 14879                           
 14880                           ;Dimmer_B1.c: 1161: return (char) (100 - ((((char)(70*0.8)) - value) / i));
 14881  0994  0859               	movf	setPercentValue@value,w
 14882  0995  00D7               	movwf	??_setPercentValue
 14883  0996  01D8               	clrf	??_setPercentValue+1
 14884  0997  09D7               	comf	??_setPercentValue,f
 14885  0998  09D8               	comf	??_setPercentValue+1,f
 14886  0999  0AD7               	incf	??_setPercentValue,f
 14887  099A  1903               	skipnz
 14888  099B  0AD8               	incf	??_setPercentValue+1,f
 14889  099C  0857               	movf	??_setPercentValue,w
 14890  099D  3E38               	addlw	56
 14891  099E  00A3               	movwf	___awtoft@c
 14892  099F  3000               	movlw	0
 14893  09A0  3D58               	addwfc	??_setPercentValue+1,w
 14894  09A1  00A4               	movwf	___awtoft@c+1
 14895  09A2  319E  26FB  3189   	fcall	___awtoft
 14896  09A5  0020               	movlb	0	; select bank0
 14897  09A6  0823               	movf	?___awtoft,w
 14898  09A7  00AC               	movwf	___ftdiv@f1
 14899  09A8  0824               	movf	?___awtoft+1,w
 14900  09A9  00AD               	movwf	___ftdiv@f1+1
 14901  09AA  0825               	movf	?___awtoft+2,w
 14902  09AB  00AE               	movwf	___ftdiv@f1+2
 14903  09AC  085A               	movf	setPercentValue@i,w
 14904  09AD  00A9               	movwf	___ftdiv@f2
 14905  09AE  085B               	movf	setPercentValue@i+1,w
 14906  09AF  00AA               	movwf	___ftdiv@f2+1
 14907  09B0  085C               	movf	setPercentValue@i+2,w
 14908  09B1  00AB               	movwf	___ftdiv@f2+2
 14909  09B2  318D  25F3  3189   	fcall	___ftdiv
 14910  09B5  0020               	movlb	0	; select bank0
 14911  09B6  0829               	movf	?___ftdiv,w
 14912  09B7  00B9               	movwf	___ftneg@f1
 14913  09B8  082A               	movf	?___ftdiv+1,w
 14914  09B9  00BA               	movwf	___ftneg@f1+1
 14915  09BA  082B               	movf	?___ftdiv+2,w
 14916  09BB  00BB               	movwf	___ftneg@f1+2
 14917  09BC  319B  232F  3189   	fcall	___ftneg
 14918  09BF  0020               	movlb	0	; select bank0
 14919  09C0  0839               	movf	?___ftneg,w
 14920  09C1  00BF               	movwf	___ftadd@f2
 14921  09C2  083A               	movf	?___ftneg+1,w
 14922  09C3  00C0               	movwf	___ftadd@f2+1
 14923  09C4  083B               	movf	?___ftneg+2,w
 14924  09C5  00C1               	movwf	___ftadd@f2+2
 14925  09C6  3000               	movlw	0
 14926  09C7  00BC               	movwf	___ftadd@f1
 14927  09C8  30C8               	movlw	200
 14928  09C9  00BD               	movwf	___ftadd@f1+1
 14929  09CA  3042               	movlw	66
 14930  09CB  00BE               	movwf	___ftadd@f1+2
 14931  09CC  3184  2477  3189   	fcall	___ftadd
 14932  09CF  0020               	movlb	0	; select bank0
 14933  09D0  083C               	movf	?___ftadd,w
 14934  09D1  00C9               	movwf	___fttol@f1
 14935  09D2  083D               	movf	?___ftadd+1,w
 14936  09D3  00CA               	movwf	___fttol@f1+1
 14937  09D4  083E               	movf	?___ftadd+2,w
 14938  09D5  00CB               	movwf	___fttol@f1+2
 14939  09D6  318C  24E0         	fcall	___fttol
 14940  09D8  0020               	movlb	0	; select bank0
 14941  09D9  0849               	movf	?___fttol,w
 14942  09DA  0008               	return
 14943  09DB                     __end_of_setPercentValue:	
 14944                           
 14945                           	psect	text98
 14946  0CE0                     __ptext98:	
 14947 ;; *************** function ___fttol *****************
 14948 ;; Defined at:
 14949 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\fttol.c"
 14950 ;; Parameters:    Size  Location     Type
 14951 ;;  f1              3   41[BANK0 ] float 
 14952 ;; Auto vars:     Size  Location     Type
 14953 ;;  lval            4   50[BANK0 ] unsigned long 
 14954 ;;  exp1            1   54[BANK0 ] unsigned char 
 14955 ;;  sign1           1   49[BANK0 ] unsigned char 
 14956 ;; Return value:  Size  Location     Type
 14957 ;;                  4   41[BANK0 ] long 
 14958 ;; Registers used:
 14959 ;;		wreg, status,2, status,0
 14960 ;; Tracked objects:
 14961 ;;		On entry : 0/0
 14962 ;;		On exit  : 0/0
 14963 ;;		Unchanged: 0/0
 14964 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14965 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14966 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14967 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14968 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14969 ;;Total ram usage:       14 bytes
 14970 ;; Hardware stack levels used:    1
 14971 ;; Hardware stack levels required when called:    3
 14972 ;; This function calls:
 14973 ;;		Nothing
 14974 ;; This function is called by:
 14975 ;;		_getPercentValue
 14976 ;;		_setPercentValue
 14977 ;; This function uses a non-reentrant model
 14978 ;;
 14979                           
 14980                           
 14981                           ;psect for function ___fttol
 14982  0CE0                     ___fttol:	
 14983                           
 14984                           ;incstack = 0
 14985                           ; Regs used in ___fttol: [wreg+status,2+status,0]
 14986  0CE0  0020               	movlb	0	; select bank0
 14987  0CE1  0849               	movf	___fttol@f1,w
 14988  0CE2  00CD               	movwf	??___fttol
 14989  0CE3  084A               	movf	___fttol@f1+1,w
 14990  0CE4  00CE               	movwf	??___fttol+1
 14991  0CE5  084B               	movf	___fttol@f1+2,w
 14992  0CE6  00CF               	movwf	??___fttol+2
 14993  0CE7  1003               	clrc
 14994  0CE8  0D4E               	rlf	??___fttol+1,w
 14995  0CE9  0D4F               	rlf	??___fttol+2,w
 14996  0CEA  00D0               	movwf	??___fttol+3
 14997  0CEB  0850               	movf	??___fttol+3,w
 14998  0CEC  00D6               	movwf	___fttol@exp1
 14999  0CED  08D6               	movf	___fttol@exp1,f
 15000  0CEE  1D03               	skipz
 15001  0CEF  2CF9               	goto	l8932
 15002  0CF0  3000               	movlw	0
 15003  0CF1  00CC               	movwf	?___fttol+3
 15004  0CF2  3000               	movlw	0
 15005  0CF3  00CB               	movwf	?___fttol+2
 15006  0CF4  3000               	movlw	0
 15007  0CF5  00CA               	movwf	?___fttol+1
 15008  0CF6  3000               	movlw	0
 15009  0CF7  00C9               	movwf	?___fttol
 15010  0CF8  0008               	return
 15011  0CF9                     l8932:	
 15012  0CF9  0849               	movf	___fttol@f1,w
 15013  0CFA  00CD               	movwf	??___fttol
 15014  0CFB  084A               	movf	___fttol@f1+1,w
 15015  0CFC  00CE               	movwf	??___fttol+1
 15016  0CFD  084B               	movf	___fttol@f1+2,w
 15017  0CFE  00CF               	movwf	??___fttol+2
 15018  0CFF  3017               	movlw	23
 15019  0D00                     u9385:	
 15020  0D00  36CF               	lsrf	??___fttol+2,f
 15021  0D01  0CCE               	rrf	??___fttol+1,f
 15022  0D02  0CCD               	rrf	??___fttol,f
 15023  0D03  0B89               	decfsz	9,f
 15024  0D04  2D00               	goto	u9385
 15025  0D05  084D               	movf	??___fttol,w
 15026  0D06  00D0               	movwf	??___fttol+3
 15027  0D07  0850               	movf	??___fttol+3,w
 15028  0D08  00D1               	movwf	___fttol@sign1
 15029  0D09  17CA               	bsf	___fttol@f1+1,7
 15030  0D0A  30FF               	movlw	255
 15031  0D0B  05C9               	andwf	___fttol@f1,f
 15032  0D0C  30FF               	movlw	255
 15033  0D0D  05CA               	andwf	___fttol@f1+1,f
 15034  0D0E  3000               	movlw	0
 15035  0D0F  05CB               	andwf	___fttol@f1+2,f
 15036  0D10  0849               	movf	___fttol@f1,w
 15037  0D11  00D2               	movwf	___fttol@lval
 15038  0D12  084A               	movf	___fttol@f1+1,w
 15039  0D13  00D3               	movwf	___fttol@lval+1
 15040  0D14  084B               	movf	___fttol@f1+2,w
 15041  0D15  00D4               	movwf	___fttol@lval+2
 15042  0D16  01D5               	clrf	___fttol@lval+3
 15043  0D17  308E               	movlw	142
 15044  0D18  02D6               	subwf	___fttol@exp1,f
 15045  0D19  1FD6               	btfss	___fttol@exp1,7
 15046  0D1A  2D37               	goto	l8952
 15047  0D1B  0856               	movf	___fttol@exp1,w
 15048  0D1C  3A80               	xorlw	128
 15049  0D1D  3E8F               	addlw	143
 15050  0D1E  1803               	skipnc
 15051  0D1F  2D29               	goto	l8950
 15052  0D20  3000               	movlw	0
 15053  0D21  00CC               	movwf	?___fttol+3
 15054  0D22  3000               	movlw	0
 15055  0D23  00CB               	movwf	?___fttol+2
 15056  0D24  3000               	movlw	0
 15057  0D25  00CA               	movwf	?___fttol+1
 15058  0D26  3000               	movlw	0
 15059  0D27  00C9               	movwf	?___fttol
 15060  0D28  0008               	return
 15061  0D29                     l8950:	
 15062  0D29  3001               	movlw	1
 15063  0D2A                     u9415:	
 15064  0D2A  36D5               	lsrf	___fttol@lval+3,f
 15065  0D2B  0CD4               	rrf	___fttol@lval+2,f
 15066  0D2C  0CD3               	rrf	___fttol@lval+1,f
 15067  0D2D  0CD2               	rrf	___fttol@lval,f
 15068  0D2E  0B89               	decfsz	9,f
 15069  0D2F  2D2A               	goto	u9415
 15070  0D30  3001               	movlw	1
 15071  0D31  00CD               	movwf	??___fttol
 15072  0D32  084D               	movf	??___fttol,w
 15073  0D33  07D6               	addwf	___fttol@exp1,f
 15074  0D34  1903               	btfsc	3,2
 15075  0D35  2D50               	goto	l8962
 15076  0D36  2D29               	goto	l8950
 15077  0D37                     l8952:	
 15078  0D37  3018               	movlw	24
 15079  0D38  0256               	subwf	___fttol@exp1,w
 15080  0D39  1C03               	skipc
 15081  0D3A  2D4D               	goto	l8960
 15082  0D3B  3000               	movlw	0
 15083  0D3C  00CC               	movwf	?___fttol+3
 15084  0D3D  3000               	movlw	0
 15085  0D3E  00CB               	movwf	?___fttol+2
 15086  0D3F  3000               	movlw	0
 15087  0D40  00CA               	movwf	?___fttol+1
 15088  0D41  3000               	movlw	0
 15089  0D42  00C9               	movwf	?___fttol
 15090  0D43  0008               	return
 15091  0D44                     l8958:	
 15092  0D44  3001               	movlw	1
 15093  0D45                     u9445:	
 15094  0D45  35D2               	lslf	___fttol@lval,f
 15095  0D46  0DD3               	rlf	___fttol@lval+1,f
 15096  0D47  0DD4               	rlf	___fttol@lval+2,f
 15097  0D48  0DD5               	rlf	___fttol@lval+3,f
 15098  0D49  0B89               	decfsz	9,f
 15099  0D4A  2D45               	goto	u9445
 15100  0D4B  3001               	movlw	1
 15101  0D4C  02D6               	subwf	___fttol@exp1,f
 15102  0D4D                     l8960:	
 15103  0D4D  08D6               	movf	___fttol@exp1,f
 15104  0D4E  1D03               	skipz
 15105  0D4F  2D44               	goto	l8958
 15106  0D50                     l8962:	
 15107  0D50  0851               	movf	___fttol@sign1,w
 15108  0D51  1903               	btfsc	3,2
 15109  0D52  2D5E               	goto	l8966
 15110  0D53  09D2               	comf	___fttol@lval,f
 15111  0D54  09D3               	comf	___fttol@lval+1,f
 15112  0D55  09D4               	comf	___fttol@lval+2,f
 15113  0D56  09D5               	comf	___fttol@lval+3,f
 15114  0D57  0AD2               	incf	___fttol@lval,f
 15115  0D58  1903               	skipnz
 15116  0D59  0AD3               	incf	___fttol@lval+1,f
 15117  0D5A  1903               	skipnz
 15118  0D5B  0AD4               	incf	___fttol@lval+2,f
 15119  0D5C  1903               	skipnz
 15120  0D5D  0AD5               	incf	___fttol@lval+3,f
 15121  0D5E                     l8966:	
 15122  0D5E  0855               	movf	___fttol@lval+3,w
 15123  0D5F  00CC               	movwf	?___fttol+3
 15124  0D60  0854               	movf	___fttol@lval+2,w
 15125  0D61  00CB               	movwf	?___fttol+2
 15126  0D62  0853               	movf	___fttol@lval+1,w
 15127  0D63  00CA               	movwf	?___fttol+1
 15128  0D64  0852               	movf	___fttol@lval,w
 15129  0D65  00C9               	movwf	?___fttol
 15130  0D66  0008               	return
 15131  0D67                     __end_of___fttol:	
 15132                           
 15133                           	psect	text99
 15134  1B2F                     __ptext99:	
 15135 ;; *************** function ___ftneg *****************
 15136 ;; Defined at:
 15137 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftneg.c"
 15138 ;; Parameters:    Size  Location     Type
 15139 ;;  f1              3   25[BANK0 ] float 
 15140 ;; Auto vars:     Size  Location     Type
 15141 ;;		None
 15142 ;; Return value:  Size  Location     Type
 15143 ;;                  3   25[BANK0 ] float 
 15144 ;; Registers used:
 15145 ;;		wreg
 15146 ;; Tracked objects:
 15147 ;;		On entry : 0/0
 15148 ;;		On exit  : 0/0
 15149 ;;		Unchanged: 0/0
 15150 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15151 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15152 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15153 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15154 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15155 ;;Total ram usage:        3 bytes
 15156 ;; Hardware stack levels used:    1
 15157 ;; Hardware stack levels required when called:    3
 15158 ;; This function calls:
 15159 ;;		Nothing
 15160 ;; This function is called by:
 15161 ;;		_getPercentValue
 15162 ;;		_setPercentValue
 15163 ;; This function uses a non-reentrant model
 15164 ;;
 15165                           
 15166                           
 15167                           ;psect for function ___ftneg
 15168  1B2F                     ___ftneg:	
 15169                           
 15170                           ;incstack = 0
 15171                           ; Regs used in ___ftneg: [wreg]
 15172  1B2F  0020               	movlb	0	; select bank0
 15173  1B30  083B               	movf	___ftneg@f1+2,w
 15174  1B31  043A               	iorwf	___ftneg@f1+1,w
 15175  1B32  0439               	iorwf	___ftneg@f1,w
 15176  1B33  1903               	skipnz
 15177  1B34  0008               	return
 15178  1B35  3080               	movlw	128
 15179  1B36  06BB               	xorwf	___ftneg@f1+2,f
 15180  1B37  0008               	return
 15181  1B38                     __end_of___ftneg:	
 15182                           
 15183                           	psect	text100
 15184  0DF3                     __ptext100:	
 15185 ;; *************** function ___ftdiv *****************
 15186 ;; Defined at:
 15187 ;;		line 49 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\pic\ftdiv.c"
 15188 ;; Parameters:    Size  Location     Type
 15189 ;;  f2              3    9[BANK0 ] float 
 15190 ;;  f1              3   12[BANK0 ] float 
 15191 ;; Auto vars:     Size  Location     Type
 15192 ;;  f3              3   20[BANK0 ] float 
 15193 ;;  sign            1   24[BANK0 ] unsigned char 
 15194 ;;  exp             1   23[BANK0 ] unsigned char 
 15195 ;;  cntr            1   19[BANK0 ] unsigned char 
 15196 ;; Return value:  Size  Location     Type
 15197 ;;                  3    9[BANK0 ] float 
 15198 ;; Registers used:
 15199 ;;		wreg, status,2, status,0, pclath, cstack
 15200 ;; Tracked objects:
 15201 ;;		On entry : 0/0
 15202 ;;		On exit  : 0/0
 15203 ;;		Unchanged: 0/0
 15204 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15205 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15206 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15207 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15208 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15209 ;;Total ram usage:       16 bytes
 15210 ;; Hardware stack levels used:    1
 15211 ;; Hardware stack levels required when called:    4
 15212 ;; This function calls:
 15213 ;;		___ftpack
 15214 ;; This function is called by:
 15215 ;;		_getPercentValue
 15216 ;;		_setPercentValue
 15217 ;; This function uses a non-reentrant model
 15218 ;;
 15219                           
 15220                           
 15221                           ;psect for function ___ftdiv
 15222  0DF3                     ___ftdiv:	
 15223                           
 15224                           ;incstack = 0
 15225                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
 15226  0DF3  0020               	movlb	0	; select bank0
 15227  0DF4  082C               	movf	___ftdiv@f1,w
 15228  0DF5  00AF               	movwf	??___ftdiv
 15229  0DF6  082D               	movf	___ftdiv@f1+1,w
 15230  0DF7  00B0               	movwf	??___ftdiv+1
 15231  0DF8  082E               	movf	___ftdiv@f1+2,w
 15232  0DF9  00B1               	movwf	??___ftdiv+2
 15233  0DFA  1003               	clrc
 15234  0DFB  0D30               	rlf	??___ftdiv+1,w
 15235  0DFC  0D31               	rlf	??___ftdiv+2,w
 15236  0DFD  00B2               	movwf	??___ftdiv+3
 15237  0DFE  0832               	movf	??___ftdiv+3,w
 15238  0DFF  00B7               	movwf	___ftdiv@exp
 15239  0E00  08B7               	movf	___ftdiv@exp,f
 15240  0E01  1D03               	skipz
 15241  0E02  2E0A               	goto	l8832
 15242  0E03  3000               	movlw	0
 15243  0E04  00A9               	movwf	?___ftdiv
 15244  0E05  3000               	movlw	0
 15245  0E06  00AA               	movwf	?___ftdiv+1
 15246  0E07  3000               	movlw	0
 15247  0E08  00AB               	movwf	?___ftdiv+2
 15248  0E09  0008               	return
 15249  0E0A                     l8832:	
 15250  0E0A  0829               	movf	___ftdiv@f2,w
 15251  0E0B  00AF               	movwf	??___ftdiv
 15252  0E0C  082A               	movf	___ftdiv@f2+1,w
 15253  0E0D  00B0               	movwf	??___ftdiv+1
 15254  0E0E  082B               	movf	___ftdiv@f2+2,w
 15255  0E0F  00B1               	movwf	??___ftdiv+2
 15256  0E10  1003               	clrc
 15257  0E11  0D30               	rlf	??___ftdiv+1,w
 15258  0E12  0D31               	rlf	??___ftdiv+2,w
 15259  0E13  00B2               	movwf	??___ftdiv+3
 15260  0E14  0832               	movf	??___ftdiv+3,w
 15261  0E15  00B8               	movwf	___ftdiv@sign
 15262  0E16  08B8               	movf	___ftdiv@sign,f
 15263  0E17  1D03               	skipz
 15264  0E18  2E20               	goto	l8838
 15265  0E19  3000               	movlw	0
 15266  0E1A  00A9               	movwf	?___ftdiv
 15267  0E1B  3000               	movlw	0
 15268  0E1C  00AA               	movwf	?___ftdiv+1
 15269  0E1D  3000               	movlw	0
 15270  0E1E  00AB               	movwf	?___ftdiv+2
 15271  0E1F  0008               	return
 15272  0E20                     l8838:	
 15273  0E20  3000               	movlw	0
 15274  0E21  00B4               	movwf	___ftdiv@f3
 15275  0E22  3000               	movlw	0
 15276  0E23  00B5               	movwf	___ftdiv@f3+1
 15277  0E24  3000               	movlw	0
 15278  0E25  00B6               	movwf	___ftdiv@f3+2
 15279  0E26  3089               	movlw	137
 15280  0E27  0738               	addwf	___ftdiv@sign,w
 15281  0E28  00AF               	movwf	??___ftdiv
 15282  0E29  082F               	movf	??___ftdiv,w
 15283  0E2A  02B7               	subwf	___ftdiv@exp,f
 15284  0E2B  082C               	movf	___ftdiv@f1,w
 15285  0E2C  00AF               	movwf	??___ftdiv
 15286  0E2D  082D               	movf	___ftdiv@f1+1,w
 15287  0E2E  00B0               	movwf	??___ftdiv+1
 15288  0E2F  082E               	movf	___ftdiv@f1+2,w
 15289  0E30  00B1               	movwf	??___ftdiv+2
 15290  0E31  3010               	movlw	16
 15291  0E32                     u9185:	
 15292  0E32  36B1               	lsrf	??___ftdiv+2,f
 15293  0E33  0CB0               	rrf	??___ftdiv+1,f
 15294  0E34  0CAF               	rrf	??___ftdiv,f
 15295  0E35  0B89               	decfsz	9,f
 15296  0E36  2E32               	goto	u9185
 15297  0E37  082F               	movf	??___ftdiv,w
 15298  0E38  00B2               	movwf	??___ftdiv+3
 15299  0E39  0832               	movf	??___ftdiv+3,w
 15300  0E3A  00B8               	movwf	___ftdiv@sign
 15301  0E3B  0829               	movf	___ftdiv@f2,w
 15302  0E3C  00AF               	movwf	??___ftdiv
 15303  0E3D  082A               	movf	___ftdiv@f2+1,w
 15304  0E3E  00B0               	movwf	??___ftdiv+1
 15305  0E3F  082B               	movf	___ftdiv@f2+2,w
 15306  0E40  00B1               	movwf	??___ftdiv+2
 15307  0E41  3010               	movlw	16
 15308  0E42                     u9195:	
 15309  0E42  36B1               	lsrf	??___ftdiv+2,f
 15310  0E43  0CB0               	rrf	??___ftdiv+1,f
 15311  0E44  0CAF               	rrf	??___ftdiv,f
 15312  0E45  0B89               	decfsz	9,f
 15313  0E46  2E42               	goto	u9195
 15314  0E47  082F               	movf	??___ftdiv,w
 15315  0E48  00B2               	movwf	??___ftdiv+3
 15316  0E49  0832               	movf	??___ftdiv+3,w
 15317  0E4A  06B8               	xorwf	___ftdiv@sign,f
 15318  0E4B  3080               	movlw	128
 15319  0E4C  00AF               	movwf	??___ftdiv
 15320  0E4D  082F               	movf	??___ftdiv,w
 15321  0E4E  05B8               	andwf	___ftdiv@sign,f
 15322  0E4F  17AD               	bsf	___ftdiv@f1+1,7
 15323  0E50  30FF               	movlw	255
 15324  0E51  05AC               	andwf	___ftdiv@f1,f
 15325  0E52  30FF               	movlw	255
 15326  0E53  05AD               	andwf	___ftdiv@f1+1,f
 15327  0E54  3000               	movlw	0
 15328  0E55  05AE               	andwf	___ftdiv@f1+2,f
 15329  0E56  17AA               	bsf	___ftdiv@f2+1,7
 15330  0E57  30FF               	movlw	255
 15331  0E58  05A9               	andwf	___ftdiv@f2,f
 15332  0E59  30FF               	movlw	255
 15333  0E5A  05AA               	andwf	___ftdiv@f2+1,f
 15334  0E5B  3000               	movlw	0
 15335  0E5C  05AB               	andwf	___ftdiv@f2+2,f
 15336  0E5D  3018               	movlw	24
 15337  0E5E  00AF               	movwf	??___ftdiv
 15338  0E5F  082F               	movf	??___ftdiv,w
 15339  0E60  00B3               	movwf	___ftdiv@cntr
 15340  0E61                     l8852:	
 15341  0E61  3001               	movlw	1
 15342  0E62                     u9205:	
 15343  0E62  35B4               	lslf	___ftdiv@f3,f
 15344  0E63  0DB5               	rlf	___ftdiv@f3+1,f
 15345  0E64  0DB6               	rlf	___ftdiv@f3+2,f
 15346  0E65  0B89               	decfsz	9,f
 15347  0E66  2E62               	goto	u9205
 15348  0E67  082B               	movf	___ftdiv@f2+2,w
 15349  0E68  022E               	subwf	___ftdiv@f1+2,w
 15350  0E69  1D03               	skipz
 15351  0E6A  2E71               	goto	u9215
 15352  0E6B  082A               	movf	___ftdiv@f2+1,w
 15353  0E6C  022D               	subwf	___ftdiv@f1+1,w
 15354  0E6D  1D03               	skipz
 15355  0E6E  2E71               	goto	u9215
 15356  0E6F  0829               	movf	___ftdiv@f2,w
 15357  0E70  022C               	subwf	___ftdiv@f1,w
 15358  0E71                     u9215:	
 15359  0E71  1C03               	skipc
 15360  0E72  2E7A               	goto	l8860
 15361  0E73  0829               	movf	___ftdiv@f2,w
 15362  0E74  02AC               	subwf	___ftdiv@f1,f
 15363  0E75  082A               	movf	___ftdiv@f2+1,w
 15364  0E76  3BAD               	subwfb	___ftdiv@f1+1,f
 15365  0E77  082B               	movf	___ftdiv@f2+2,w
 15366  0E78  3BAE               	subwfb	___ftdiv@f1+2,f
 15367  0E79  1434               	bsf	___ftdiv@f3,0
 15368  0E7A                     l8860:	
 15369  0E7A  3001               	movlw	1
 15370  0E7B                     u9225:	
 15371  0E7B  35AC               	lslf	___ftdiv@f1,f
 15372  0E7C  0DAD               	rlf	___ftdiv@f1+1,f
 15373  0E7D  0DAE               	rlf	___ftdiv@f1+2,f
 15374  0E7E  0B89               	decfsz	9,f
 15375  0E7F  2E7B               	goto	u9225
 15376  0E80  3001               	movlw	1
 15377  0E81  02B3               	subwf	___ftdiv@cntr,f
 15378  0E82  1D03               	btfss	3,2
 15379  0E83  2E61               	goto	l8852
 15380  0E84  0834               	movf	___ftdiv@f3,w
 15381  0E85  00F3               	movwf	___ftpack@arg
 15382  0E86  0835               	movf	___ftdiv@f3+1,w
 15383  0E87  00F4               	movwf	___ftpack@arg+1
 15384  0E88  0836               	movf	___ftdiv@f3+2,w
 15385  0E89  00F5               	movwf	___ftpack@arg+2
 15386  0E8A  0837               	movf	___ftdiv@exp,w
 15387  0E8B  00AF               	movwf	??___ftdiv
 15388  0E8C  082F               	movf	??___ftdiv,w
 15389  0E8D  00F6               	movwf	___ftpack@exp
 15390  0E8E  0838               	movf	___ftdiv@sign,w
 15391  0E8F  00B0               	movwf	??___ftdiv+1
 15392  0E90  0830               	movf	??___ftdiv+1,w
 15393  0E91  00F7               	movwf	___ftpack@sign
 15394  0E92  3189  2113         	fcall	___ftpack
 15395  0E94  0873               	movf	?___ftpack,w
 15396  0E95  0020               	movlb	0	; select bank0
 15397  0E96  00A9               	movwf	?___ftdiv
 15398  0E97  0874               	movf	?___ftpack+1,w
 15399  0E98  00AA               	movwf	?___ftdiv+1
 15400  0E99  0875               	movf	?___ftpack+2,w
 15401  0E9A  00AB               	movwf	?___ftdiv+2
 15402  0E9B  0008               	return
 15403  0E9C                     __end_of___ftdiv:	
 15404                           
 15405                           	psect	text101
 15406  0477                     __ptext101:	
 15407 ;; *************** function ___ftadd *****************
 15408 ;; Defined at:
 15409 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftadd.c"
 15410 ;; Parameters:    Size  Location     Type
 15411 ;;  f1              3   28[BANK0 ] float 
 15412 ;;  f2              3   31[BANK0 ] float 
 15413 ;; Auto vars:     Size  Location     Type
 15414 ;;  exp1            1   40[BANK0 ] unsigned char 
 15415 ;;  exp2            1   39[BANK0 ] unsigned char 
 15416 ;;  sign            1   38[BANK0 ] unsigned char 
 15417 ;; Return value:  Size  Location     Type
 15418 ;;                  3   28[BANK0 ] float 
 15419 ;; Registers used:
 15420 ;;		wreg, status,2, status,0, pclath, cstack
 15421 ;; Tracked objects:
 15422 ;;		On entry : 0/0
 15423 ;;		On exit  : 0/0
 15424 ;;		Unchanged: 0/0
 15425 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15426 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15427 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15428 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15429 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15430 ;;Total ram usage:       13 bytes
 15431 ;; Hardware stack levels used:    1
 15432 ;; Hardware stack levels required when called:    4
 15433 ;; This function calls:
 15434 ;;		___ftpack
 15435 ;; This function is called by:
 15436 ;;		_getPercentValue
 15437 ;;		_setPercentValue
 15438 ;; This function uses a non-reentrant model
 15439 ;;
 15440                           
 15441                           
 15442                           ;psect for function ___ftadd
 15443  0477                     ___ftadd:	
 15444                           
 15445                           ;incstack = 0
 15446                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
 15447  0477  0020               	movlb	0	; select bank0
 15448  0478  083C               	movf	___ftadd@f1,w
 15449  0479  00C2               	movwf	??___ftadd
 15450  047A  083D               	movf	___ftadd@f1+1,w
 15451  047B  00C3               	movwf	??___ftadd+1
 15452  047C  083E               	movf	___ftadd@f1+2,w
 15453  047D  00C4               	movwf	??___ftadd+2
 15454  047E  1003               	clrc
 15455  047F  0D43               	rlf	??___ftadd+1,w
 15456  0480  0D44               	rlf	??___ftadd+2,w
 15457  0481  00C5               	movwf	??___ftadd+3
 15458  0482  0845               	movf	??___ftadd+3,w
 15459  0483  00C8               	movwf	___ftadd@exp1
 15460  0484  083F               	movf	___ftadd@f2,w
 15461  0485  00C2               	movwf	??___ftadd
 15462  0486  0840               	movf	___ftadd@f2+1,w
 15463  0487  00C3               	movwf	??___ftadd+1
 15464  0488  0841               	movf	___ftadd@f2+2,w
 15465  0489  00C4               	movwf	??___ftadd+2
 15466  048A  1003               	clrc
 15467  048B  0D43               	rlf	??___ftadd+1,w
 15468  048C  0D44               	rlf	??___ftadd+2,w
 15469  048D  00C5               	movwf	??___ftadd+3
 15470  048E  0845               	movf	??___ftadd+3,w
 15471  048F  00C7               	movwf	___ftadd@exp2
 15472  0490  0848               	movf	___ftadd@exp1,w
 15473  0491  1903               	btfsc	3,2
 15474  0492  2C9F               	goto	l8762
 15475  0493  0847               	movf	___ftadd@exp2,w
 15476  0494  0248               	subwf	___ftadd@exp1,w
 15477  0495  1803               	skipnc
 15478  0496  2CA6               	goto	l8766
 15479  0497  0348               	decf	___ftadd@exp1,w
 15480  0498  3AFF               	xorlw	255
 15481  0499  0747               	addwf	___ftadd@exp2,w
 15482  049A  00C2               	movwf	??___ftadd
 15483  049B  3019               	movlw	25
 15484  049C  0242               	subwf	??___ftadd,w
 15485  049D  1C03               	skipc
 15486  049E  2CA6               	goto	l8766
 15487  049F                     l8762:	
 15488  049F  083F               	movf	___ftadd@f2,w
 15489  04A0  00BC               	movwf	?___ftadd
 15490  04A1  0840               	movf	___ftadd@f2+1,w
 15491  04A2  00BD               	movwf	?___ftadd+1
 15492  04A3  0841               	movf	___ftadd@f2+2,w
 15493  04A4  00BE               	movwf	?___ftadd+2
 15494  04A5  0008               	return
 15495  04A6                     l8766:	
 15496  04A6  0847               	movf	___ftadd@exp2,w
 15497  04A7  1903               	btfsc	3,2
 15498  04A8  0008               	return
 15499  04A9  0848               	movf	___ftadd@exp1,w
 15500  04AA  0247               	subwf	___ftadd@exp2,w
 15501  04AB  1803               	skipnc
 15502  04AC  2CB5               	goto	l8772
 15503  04AD  0347               	decf	___ftadd@exp2,w
 15504  04AE  3AFF               	xorlw	255
 15505  04AF  0748               	addwf	___ftadd@exp1,w
 15506  04B0  00C2               	movwf	??___ftadd
 15507  04B1  3019               	movlw	25
 15508  04B2  0242               	subwf	??___ftadd,w
 15509  04B3  1803               	btfsc	3,0
 15510  04B4  0008               	return
 15511  04B5                     l8772:	
 15512  04B5  3006               	movlw	6
 15513  04B6  00C2               	movwf	??___ftadd
 15514  04B7  0842               	movf	??___ftadd,w
 15515  04B8  00C6               	movwf	___ftadd@sign
 15516  04B9  1BBE               	btfsc	___ftadd@f1+2,7
 15517  04BA  17C6               	bsf	___ftadd@sign,7
 15518  04BB  1BC1               	btfsc	___ftadd@f2+2,7
 15519  04BC  1746               	bsf	___ftadd@sign,6
 15520  04BD  17BD               	bsf	___ftadd@f1+1,7
 15521  04BE  30FF               	movlw	255
 15522  04BF  05BC               	andwf	___ftadd@f1,f
 15523  04C0  30FF               	movlw	255
 15524  04C1  05BD               	andwf	___ftadd@f1+1,f
 15525  04C2  3000               	movlw	0
 15526  04C3  05BE               	andwf	___ftadd@f1+2,f
 15527  04C4  17C0               	bsf	___ftadd@f2+1,7
 15528  04C5  30FF               	movlw	255
 15529  04C6  05BF               	andwf	___ftadd@f2,f
 15530  04C7  30FF               	movlw	255
 15531  04C8  05C0               	andwf	___ftadd@f2+1,f
 15532  04C9  3000               	movlw	0
 15533  04CA  05C1               	andwf	___ftadd@f2+2,f
 15534  04CB  0847               	movf	___ftadd@exp2,w
 15535  04CC  0248               	subwf	___ftadd@exp1,w
 15536  04CD  1803               	skipnc
 15537  04CE  2CF1               	goto	l8794
 15538  04CF                     l8784:	
 15539  04CF  3001               	movlw	1
 15540  04D0                     u9025:	
 15541  04D0  35BF               	lslf	___ftadd@f2,f
 15542  04D1  0DC0               	rlf	___ftadd@f2+1,f
 15543  04D2  0DC1               	rlf	___ftadd@f2+2,f
 15544  04D3  0B89               	decfsz	9,f
 15545  04D4  2CD0               	goto	u9025
 15546  04D5  3001               	movlw	1
 15547  04D6  02C7               	subwf	___ftadd@exp2,f
 15548  04D7  0847               	movf	___ftadd@exp2,w
 15549  04D8  0648               	xorwf	___ftadd@exp1,w
 15550  04D9  1903               	skipnz
 15551  04DA  2CEC               	goto	l8792
 15552  04DB  3001               	movlw	1
 15553  04DC  02C6               	subwf	___ftadd@sign,f
 15554  04DD  0846               	movf	___ftadd@sign,w
 15555  04DE  3907               	andlw	7
 15556  04DF  1903               	btfsc	3,2
 15557  04E0  2CEC               	goto	l8792
 15558  04E1  2CCF               	goto	l8784
 15559  04E2                     l8790:	
 15560  04E2  3001               	movlw	1
 15561  04E3                     u9055:	
 15562  04E3  36BE               	lsrf	___ftadd@f1+2,f
 15563  04E4  0CBD               	rrf	___ftadd@f1+1,f
 15564  04E5  0CBC               	rrf	___ftadd@f1,f
 15565  04E6  0B89               	decfsz	9,f
 15566  04E7  2CE3               	goto	u9055
 15567  04E8  3001               	movlw	1
 15568  04E9  00C2               	movwf	??___ftadd
 15569  04EA  0842               	movf	??___ftadd,w
 15570  04EB  07C8               	addwf	___ftadd@exp1,f
 15571  04EC                     l8792:	
 15572  04EC  0848               	movf	___ftadd@exp1,w
 15573  04ED  0647               	xorwf	___ftadd@exp2,w
 15574  04EE  1903               	btfsc	3,2
 15575  04EF  2D16               	goto	l3075
 15576  04F0  2CE2               	goto	l8790
 15577  04F1                     l8794:	
 15578  04F1  0848               	movf	___ftadd@exp1,w
 15579  04F2  0247               	subwf	___ftadd@exp2,w
 15580  04F3  1803               	skipnc
 15581  04F4  2D16               	goto	l3075
 15582  04F5                     l8796:	
 15583  04F5  3001               	movlw	1
 15584  04F6                     u9085:	
 15585  04F6  35BC               	lslf	___ftadd@f1,f
 15586  04F7  0DBD               	rlf	___ftadd@f1+1,f
 15587  04F8  0DBE               	rlf	___ftadd@f1+2,f
 15588  04F9  0B89               	decfsz	9,f
 15589  04FA  2CF6               	goto	u9085
 15590  04FB  3001               	movlw	1
 15591  04FC  02C8               	subwf	___ftadd@exp1,f
 15592  04FD  0847               	movf	___ftadd@exp2,w
 15593  04FE  0648               	xorwf	___ftadd@exp1,w
 15594  04FF  1903               	skipnz
 15595  0500  2D12               	goto	l8804
 15596  0501  3001               	movlw	1
 15597  0502  02C6               	subwf	___ftadd@sign,f
 15598  0503  0846               	movf	___ftadd@sign,w
 15599  0504  3907               	andlw	7
 15600  0505  1903               	btfsc	3,2
 15601  0506  2D12               	goto	l8804
 15602  0507  2CF5               	goto	l8796
 15603  0508                     l8802:	
 15604  0508  3001               	movlw	1
 15605  0509                     u9115:	
 15606  0509  36C1               	lsrf	___ftadd@f2+2,f
 15607  050A  0CC0               	rrf	___ftadd@f2+1,f
 15608  050B  0CBF               	rrf	___ftadd@f2,f
 15609  050C  0B89               	decfsz	9,f
 15610  050D  2D09               	goto	u9115
 15611  050E  3001               	movlw	1
 15612  050F  00C2               	movwf	??___ftadd
 15613  0510  0842               	movf	??___ftadd,w
 15614  0511  07C7               	addwf	___ftadd@exp2,f
 15615  0512                     l8804:	
 15616  0512  0848               	movf	___ftadd@exp1,w
 15617  0513  0647               	xorwf	___ftadd@exp2,w
 15618  0514  1D03               	skipz
 15619  0515  2D08               	goto	l8802
 15620  0516                     l3075:	
 15621  0516  1FC6               	btfss	___ftadd@sign,7
 15622  0517  2D28               	goto	l8808
 15623  0518  30FF               	movlw	255
 15624  0519  06BC               	xorwf	___ftadd@f1,f
 15625  051A  30FF               	movlw	255
 15626  051B  06BD               	xorwf	___ftadd@f1+1,f
 15627  051C  30FF               	movlw	255
 15628  051D  06BE               	xorwf	___ftadd@f1+2,f
 15629  051E  3001               	movlw	1
 15630  051F  07BC               	addwf	___ftadd@f1,f
 15631  0520  3000               	movlw	0
 15632  0521  1803               	skipnc
 15633  0522  3001               	movlw	1
 15634  0523  07BD               	addwf	___ftadd@f1+1,f
 15635  0524  3000               	movlw	0
 15636  0525  1803               	skipnc
 15637  0526  3001               	movlw	1
 15638  0527  07BE               	addwf	___ftadd@f1+2,f
 15639  0528                     l8808:	
 15640  0528  1F46               	btfss	___ftadd@sign,6
 15641  0529  2D3A               	goto	l8812
 15642  052A  30FF               	movlw	255
 15643  052B  06BF               	xorwf	___ftadd@f2,f
 15644  052C  30FF               	movlw	255
 15645  052D  06C0               	xorwf	___ftadd@f2+1,f
 15646  052E  30FF               	movlw	255
 15647  052F  06C1               	xorwf	___ftadd@f2+2,f
 15648  0530  3001               	movlw	1
 15649  0531  07BF               	addwf	___ftadd@f2,f
 15650  0532  3000               	movlw	0
 15651  0533  1803               	skipnc
 15652  0534  3001               	movlw	1
 15653  0535  07C0               	addwf	___ftadd@f2+1,f
 15654  0536  3000               	movlw	0
 15655  0537  1803               	skipnc
 15656  0538  3001               	movlw	1
 15657  0539  07C1               	addwf	___ftadd@f2+2,f
 15658  053A                     l8812:	
 15659  053A  01C6               	clrf	___ftadd@sign
 15660  053B  083C               	movf	___ftadd@f1,w
 15661  053C  07BF               	addwf	___ftadd@f2,f
 15662  053D  083D               	movf	___ftadd@f1+1,w
 15663  053E  3DC0               	addwfc	___ftadd@f2+1,f
 15664  053F  083E               	movf	___ftadd@f1+2,w
 15665  0540  3DC1               	addwfc	___ftadd@f2+2,f
 15666  0541  1FC1               	btfss	___ftadd@f2+2,7
 15667  0542  2D55               	goto	l8822
 15668  0543  30FF               	movlw	255
 15669  0544  06BF               	xorwf	___ftadd@f2,f
 15670  0545  30FF               	movlw	255
 15671  0546  06C0               	xorwf	___ftadd@f2+1,f
 15672  0547  30FF               	movlw	255
 15673  0548  06C1               	xorwf	___ftadd@f2+2,f
 15674  0549  3001               	movlw	1
 15675  054A  07BF               	addwf	___ftadd@f2,f
 15676  054B  3000               	movlw	0
 15677  054C  1803               	skipnc
 15678  054D  3001               	movlw	1
 15679  054E  07C0               	addwf	___ftadd@f2+1,f
 15680  054F  3000               	movlw	0
 15681  0550  1803               	skipnc
 15682  0551  3001               	movlw	1
 15683  0552  07C1               	addwf	___ftadd@f2+2,f
 15684  0553  01C6               	clrf	___ftadd@sign
 15685  0554  0AC6               	incf	___ftadd@sign,f
 15686  0555                     l8822:	
 15687  0555  083F               	movf	___ftadd@f2,w
 15688  0556  00F3               	movwf	___ftpack@arg
 15689  0557  0840               	movf	___ftadd@f2+1,w
 15690  0558  00F4               	movwf	___ftpack@arg+1
 15691  0559  0841               	movf	___ftadd@f2+2,w
 15692  055A  00F5               	movwf	___ftpack@arg+2
 15693  055B  0848               	movf	___ftadd@exp1,w
 15694  055C  00C2               	movwf	??___ftadd
 15695  055D  0842               	movf	??___ftadd,w
 15696  055E  00F6               	movwf	___ftpack@exp
 15697  055F  0846               	movf	___ftadd@sign,w
 15698  0560  00C3               	movwf	??___ftadd+1
 15699  0561  0843               	movf	??___ftadd+1,w
 15700  0562  00F7               	movwf	___ftpack@sign
 15701  0563  3189  2113         	fcall	___ftpack
 15702  0565  0873               	movf	?___ftpack,w
 15703  0566  0020               	movlb	0	; select bank0
 15704  0567  00BC               	movwf	?___ftadd
 15705  0568  0874               	movf	?___ftpack+1,w
 15706  0569  00BD               	movwf	?___ftadd+1
 15707  056A  0875               	movf	?___ftpack+2,w
 15708  056B  00BE               	movwf	?___ftadd+2
 15709  056C  0008               	return
 15710  056D                     __end_of___ftadd:	
 15711                           
 15712                           	psect	text102
 15713  1EFB                     __ptext102:	
 15714 ;; *************** function ___awtoft *****************
 15715 ;; Defined at:
 15716 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awtoft.c"
 15717 ;; Parameters:    Size  Location     Type
 15718 ;;  c               2    3[BANK0 ] int 
 15719 ;; Auto vars:     Size  Location     Type
 15720 ;;  sign            1    8[BANK0 ] unsigned char 
 15721 ;; Return value:  Size  Location     Type
 15722 ;;                  3    3[BANK0 ] float 
 15723 ;; Registers used:
 15724 ;;		wreg, status,2, status,0, pclath, cstack
 15725 ;; Tracked objects:
 15726 ;;		On entry : 0/0
 15727 ;;		On exit  : 0/0
 15728 ;;		Unchanged: 0/0
 15729 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15730 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15731 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15732 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15733 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15734 ;;Total ram usage:        6 bytes
 15735 ;; Hardware stack levels used:    1
 15736 ;; Hardware stack levels required when called:    4
 15737 ;; This function calls:
 15738 ;;		___ftpack
 15739 ;; This function is called by:
 15740 ;;		_getPercentValue
 15741 ;;		_setPercentValue
 15742 ;; This function uses a non-reentrant model
 15743 ;;
 15744                           
 15745                           
 15746                           ;psect for function ___awtoft
 15747  1EFB                     ___awtoft:	
 15748                           
 15749                           ;incstack = 0
 15750                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
 15751  1EFB  0020               	movlb	0	; select bank0
 15752  1EFC  01A8               	clrf	___awtoft@sign
 15753  1EFD  1FA4               	btfss	___awtoft@c+1,7
 15754  1EFE  2F06               	goto	l8750
 15755  1EFF  09A3               	comf	___awtoft@c,f
 15756  1F00  09A4               	comf	___awtoft@c+1,f
 15757  1F01  0AA3               	incf	___awtoft@c,f
 15758  1F02  1903               	skipnz
 15759  1F03  0AA4               	incf	___awtoft@c+1,f
 15760  1F04  01A8               	clrf	___awtoft@sign
 15761  1F05  0AA8               	incf	___awtoft@sign,f
 15762  1F06                     l8750:	
 15763  1F06  0823               	movf	___awtoft@c,w
 15764  1F07  00F3               	movwf	___ftpack@arg
 15765  1F08  0824               	movf	___awtoft@c+1,w
 15766  1F09  00F4               	movwf	___ftpack@arg+1
 15767  1F0A  01F5               	clrf	___ftpack@arg+2
 15768  1F0B  308E               	movlw	142
 15769  1F0C  00A6               	movwf	??___awtoft
 15770  1F0D  0826               	movf	??___awtoft,w
 15771  1F0E  00F6               	movwf	___ftpack@exp
 15772  1F0F  0828               	movf	___awtoft@sign,w
 15773  1F10  00A7               	movwf	??___awtoft+1
 15774  1F11  0827               	movf	??___awtoft+1,w
 15775  1F12  00F7               	movwf	___ftpack@sign
 15776  1F13  3189  2113         	fcall	___ftpack
 15777  1F15  0873               	movf	?___ftpack,w
 15778  1F16  0020               	movlb	0	; select bank0
 15779  1F17  00A3               	movwf	?___awtoft
 15780  1F18  0874               	movf	?___ftpack+1,w
 15781  1F19  00A4               	movwf	?___awtoft+1
 15782  1F1A  0875               	movf	?___ftpack+2,w
 15783  1F1B  00A5               	movwf	?___awtoft+2
 15784  1F1C  0008               	return
 15785  1F1D                     __end_of___awtoft:	
 15786                           
 15787                           	psect	text103
 15788  0913                     __ptext103:	
 15789 ;; *************** function ___ftpack *****************
 15790 ;; Defined at:
 15791 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\float.c"
 15792 ;; Parameters:    Size  Location     Type
 15793 ;;  arg             3    3[COMMON] unsigned um
 15794 ;;  exp             1    6[COMMON] unsigned char 
 15795 ;;  sign            1    7[COMMON] unsigned char 
 15796 ;; Auto vars:     Size  Location     Type
 15797 ;;		None
 15798 ;; Return value:  Size  Location     Type
 15799 ;;                  3    3[COMMON] float 
 15800 ;; Registers used:
 15801 ;;		wreg, status,2, status,0
 15802 ;; Tracked objects:
 15803 ;;		On entry : 0/0
 15804 ;;		On exit  : 0/0
 15805 ;;		Unchanged: 0/0
 15806 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15807 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15808 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15809 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15810 ;;      Totals:         5       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15811 ;;Total ram usage:        8 bytes
 15812 ;; Hardware stack levels used:    1
 15813 ;; Hardware stack levels required when called:    3
 15814 ;; This function calls:
 15815 ;;		Nothing
 15816 ;; This function is called by:
 15817 ;;		___awtoft
 15818 ;;		___ftadd
 15819 ;;		___ftdiv
 15820 ;;		___ftmul
 15821 ;; This function uses a non-reentrant model
 15822 ;;
 15823                           
 15824                           
 15825                           ;psect for function ___ftpack
 15826  0913                     ___ftpack:	
 15827                           
 15828                           ;incstack = 0
 15829                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 15830  0913  0876               	movf	___ftpack@exp,w
 15831  0914  1903               	btfsc	3,2
 15832  0915  291B               	goto	l8700
 15833  0916  0875               	movf	___ftpack@arg+2,w
 15834  0917  0474               	iorwf	___ftpack@arg+1,w
 15835  0918  0473               	iorwf	___ftpack@arg,w
 15836  0919  1D03               	skipz
 15837  091A  292D               	goto	l8706
 15838  091B                     l8700:	
 15839  091B  3000               	movlw	0
 15840  091C  00F3               	movwf	?___ftpack
 15841  091D  3000               	movlw	0
 15842  091E  00F4               	movwf	?___ftpack+1
 15843  091F  3000               	movlw	0
 15844  0920  00F5               	movwf	?___ftpack+2
 15845  0921  0008               	return
 15846  0922                     l8704:	
 15847  0922  3001               	movlw	1
 15848  0923  0020               	movlb	0	; select bank0
 15849  0924  00A0               	movwf	??___ftpack
 15850  0925  0820               	movf	??___ftpack,w
 15851  0926  07F6               	addwf	___ftpack@exp,f
 15852  0927  3001               	movlw	1
 15853  0928                     u8815:	
 15854  0928  36F5               	lsrf	___ftpack@arg+2,f
 15855  0929  0CF4               	rrf	___ftpack@arg+1,f
 15856  092A  0CF3               	rrf	___ftpack@arg,f
 15857  092B  0B89               	decfsz	9,f
 15858  092C  2928               	goto	u8815
 15859  092D                     l8706:	
 15860  092D  30FE               	movlw	254
 15861  092E  0575               	andwf	___ftpack@arg+2,w
 15862  092F  1903               	btfsc	3,2
 15863  0930  2947               	goto	l3046
 15864  0931  2922               	goto	l8704
 15865  0932                     l8708:	
 15866  0932  3001               	movlw	1
 15867  0933  0020               	movlb	0	; select bank0
 15868  0934  00A0               	movwf	??___ftpack
 15869  0935  0820               	movf	??___ftpack,w
 15870  0936  07F6               	addwf	___ftpack@exp,f
 15871  0937  3001               	movlw	1
 15872  0938  07F3               	addwf	___ftpack@arg,f
 15873  0939  3000               	movlw	0
 15874  093A  1803               	skipnc
 15875  093B  3001               	movlw	1
 15876  093C  07F4               	addwf	___ftpack@arg+1,f
 15877  093D  3000               	movlw	0
 15878  093E  1803               	skipnc
 15879  093F  3001               	movlw	1
 15880  0940  07F5               	addwf	___ftpack@arg+2,f
 15881  0941  3001               	movlw	1
 15882  0942                     u8835:	
 15883  0942  36F5               	lsrf	___ftpack@arg+2,f
 15884  0943  0CF4               	rrf	___ftpack@arg+1,f
 15885  0944  0CF3               	rrf	___ftpack@arg,f
 15886  0945  0B89               	decfsz	9,f
 15887  0946  2942               	goto	u8835
 15888  0947                     l3046:	
 15889  0947  30FF               	movlw	255
 15890  0948  0575               	andwf	___ftpack@arg+2,w
 15891  0949  1903               	btfsc	3,2
 15892  094A  2954               	goto	l8716
 15893  094B  2932               	goto	l8708
 15894  094C                     l8714:	
 15895  094C  3001               	movlw	1
 15896  094D  02F6               	subwf	___ftpack@exp,f
 15897  094E  3001               	movlw	1
 15898  094F                     u8855:	
 15899  094F  35F3               	lslf	___ftpack@arg,f
 15900  0950  0DF4               	rlf	___ftpack@arg+1,f
 15901  0951  0DF5               	rlf	___ftpack@arg+2,f
 15902  0952  0B89               	decfsz	9,f
 15903  0953  294F               	goto	u8855
 15904  0954                     l8716:	
 15905  0954  1FF4               	btfss	___ftpack@arg+1,7
 15906  0955  294C               	goto	l8714
 15907  0956  1876               	btfsc	___ftpack@exp,0
 15908  0957  295E               	goto	l3052
 15909  0958  30FF               	movlw	255
 15910  0959  05F3               	andwf	___ftpack@arg,f
 15911  095A  307F               	movlw	127
 15912  095B  05F4               	andwf	___ftpack@arg+1,f
 15913  095C  30FF               	movlw	255
 15914  095D  05F5               	andwf	___ftpack@arg+2,f
 15915  095E                     l3052:	
 15916  095E  1003               	clrc
 15917  095F  0CF6               	rrf	___ftpack@exp,f
 15918  0960  0876               	movf	___ftpack@exp,w
 15919  0961  0020               	movlb	0	; select bank0
 15920  0962  00A0               	movwf	??___ftpack
 15921  0963  01A1               	clrf	??___ftpack+1
 15922  0964  01A2               	clrf	??___ftpack+2
 15923  0965  3010               	movlw	16
 15924  0966                     u8885:	
 15925  0966  35A0               	lslf	??___ftpack,f
 15926  0967  0DA1               	rlf	??___ftpack+1,f
 15927  0968  0DA2               	rlf	??___ftpack+2,f
 15928  0969  0B89               	decfsz	9,f
 15929  096A  2966               	goto	u8885
 15930  096B  0820               	movf	??___ftpack,w
 15931  096C  04F3               	iorwf	___ftpack@arg,f
 15932  096D  0821               	movf	??___ftpack+1,w
 15933  096E  04F4               	iorwf	___ftpack@arg+1,f
 15934  096F  0822               	movf	??___ftpack+2,w
 15935  0970  04F5               	iorwf	___ftpack@arg+2,f
 15936  0971  0877               	movf	___ftpack@sign,w
 15937  0972  1903               	btfsc	3,2
 15938  0973  0008               	return
 15939  0974  17F5               	bsf	___ftpack@arg+2,7
 15940  0975  0008               	return
 15941  0976                     __end_of___ftpack:	
 15942                           
 15943                           	psect	text104
 15944  08B4                     __ptext104:	
 15945 ;; *************** function _setLED *****************
 15946 ;; Defined at:
 15947 ;;		line 76 in file "../src/LED_B1.c"
 15948 ;; Parameters:    Size  Location     Type
 15949 ;;  led             1    wreg     unsigned char 
 15950 ;;  command         1    5[COMMON] unsigned char 
 15951 ;; Auto vars:     Size  Location     Type
 15952 ;;  led             1    6[COMMON] unsigned char 
 15953 ;; Return value:  Size  Location     Type
 15954 ;;		None               void
 15955 ;; Registers used:
 15956 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15957 ;; Tracked objects:
 15958 ;;		On entry : 0/0
 15959 ;;		On exit  : 0/0
 15960 ;;		Unchanged: 0/0
 15961 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15962 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15963 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15964 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15965 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15966 ;;Total ram usage:        2 bytes
 15967 ;; Hardware stack levels used:    1
 15968 ;; Hardware stack levels required when called:    4
 15969 ;; This function calls:
 15970 ;;		_LedPointSelect
 15971 ;; This function is called by:
 15972 ;;		_setDimmerLights
 15973 ;;		_setLED_Initialization
 15974 ;;		_Exception_Main
 15975 ;;		_setSw_Initialization
 15976 ;; This function uses a non-reentrant model
 15977 ;;
 15978                           
 15979                           
 15980                           ;psect for function _setLED
 15981  08B4                     _setLED:	
 15982                           
 15983                           ;incstack = 0
 15984                           ; Regs used in _setLED: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15985                           ;setLED@led stored from wreg
 15986  08B4  00F6               	movwf	setLED@led
 15987                           
 15988                           ;LED_B1.c: 77: LedPointSelect(led);
 15989  08B5  0876               	movf	setLED@led,w
 15990  08B6  319E  265E  3188   	fcall	_LedPointSelect
 15991                           
 15992                           ;LED_B1.c: 78: if (command == 0) {
 15993  08B9  08F5               	movf	setLED@command,f
 15994  08BA  1D03               	skipz
 15995  08BB  28CE               	goto	l9562
 15996                           
 15997                           ;LED_B1.c: 80: if (led == 1) {
 15998  08BC  0876               	movf	setLED@led,w
 15999  08BD  3A01               	xorlw	1
 16000  08BE  1D03               	skipz
 16001  08BF  28C2               	goto	l9554
 16002                           
 16003                           ;LED_B1.c: 84: RA3 = 1;
 16004  08C0  0020               	movlb	0	; select bank0
 16005  08C1  158C               	bsf	12,3	;volatile
 16006  08C2                     l9554:	
 16007                           
 16008                           ;LED_B1.c: 86: }
 16009                           ;LED_B1.c: 89: if (led == 2) {
 16010  08C2  0876               	movf	setLED@led,w
 16011  08C3  3A02               	xorlw	2
 16012  08C4  1D03               	skipz
 16013  08C5  28C8               	goto	l9558
 16014                           
 16015                           ;LED_B1.c: 93: RC7 = 1;
 16016  08C6  0020               	movlb	0	; select bank0
 16017  08C7  178E               	bsf	14,7	;volatile
 16018  08C8                     l9558:	
 16019                           
 16020                           ;LED_B1.c: 95: }
 16021                           ;LED_B1.c: 107: if (led == 99) {
 16022  08C8  0876               	movf	setLED@led,w
 16023  08C9  3A63               	xorlw	99
 16024  08CA  1D03               	skipz
 16025  08CB  28CE               	goto	l9562
 16026                           
 16027                           ;LED_B1.c: 111: RB5 = 1;
 16028  08CC  0020               	movlb	0	; select bank0
 16029  08CD  168D               	bsf	13,5	;volatile
 16030  08CE                     l9562:	
 16031                           
 16032                           ;LED_B1.c: 113: }
 16033                           ;LED_B1.c: 115: }
 16034                           ;LED_B1.c: 116: if (command == 1) {
 16035  08CE  0875               	movf	setLED@command,w
 16036  08CF  3A01               	xorlw	1
 16037  08D0  1D03               	skipz
 16038  08D1  28E4               	goto	l9576
 16039                           
 16040                           ;LED_B1.c: 118: if (led == 1) {
 16041  08D2  0876               	movf	setLED@led,w
 16042  08D3  3A01               	xorlw	1
 16043  08D4  1D03               	skipz
 16044  08D5  28D8               	goto	l9568
 16045                           
 16046                           ;LED_B1.c: 122: RA3 = 0;
 16047  08D6  0020               	movlb	0	; select bank0
 16048  08D7  118C               	bcf	12,3	;volatile
 16049  08D8                     l9568:	
 16050                           
 16051                           ;LED_B1.c: 124: }
 16052                           ;LED_B1.c: 127: if (led == 2) {
 16053  08D8  0876               	movf	setLED@led,w
 16054  08D9  3A02               	xorlw	2
 16055  08DA  1D03               	skipz
 16056  08DB  28DE               	goto	l9572
 16057                           
 16058                           ;LED_B1.c: 131: RC7 = 0;
 16059  08DC  0020               	movlb	0	; select bank0
 16060  08DD  138E               	bcf	14,7	;volatile
 16061  08DE                     l9572:	
 16062                           
 16063                           ;LED_B1.c: 133: }
 16064                           ;LED_B1.c: 145: if (led == 99) {
 16065  08DE  0876               	movf	setLED@led,w
 16066  08DF  3A63               	xorlw	99
 16067  08E0  1D03               	skipz
 16068  08E1  28E4               	goto	l9576
 16069                           
 16070                           ;LED_B1.c: 149: RB5 = 0;
 16071  08E2  0020               	movlb	0	; select bank0
 16072  08E3  128D               	bcf	13,5	;volatile
 16073  08E4                     l9576:	
 16074                           
 16075                           ;LED_B1.c: 151: }
 16076                           ;LED_B1.c: 153: }
 16077                           ;LED_B1.c: 154: if (command == 10) {
 16078  08E4  0875               	movf	setLED@command,w
 16079  08E5  3A0A               	xorlw	10
 16080  08E6  1D03               	skipz
 16081  08E7  2908               	goto	l9592
 16082                           
 16083                           ;LED_B1.c: 155: LED->GO = 0;
 16084  08E8  0021               	movlb	1	; select bank1
 16085  08E9  0851               	movf	_LED^(0+128),w
 16086  08EA  0086               	movwf	6
 16087  08EB  3001               	movlw	1	; select bank2/3
 16088  08EC  0087               	movwf	7
 16089  08ED  1081               	bcf	1,1
 16090                           
 16091                           ;LED_B1.c: 156: LED->Time = 0;
 16092  08EE  0A51               	incf	_LED^(0+128),w
 16093  08EF  0086               	movwf	6
 16094  08F0  3001               	movlw	1	; select bank2/3
 16095  08F1  0087               	movwf	7
 16096  08F2  3000               	movlw	0
 16097  08F3  3FC0               	movwi [0]fsr1
 16098  08F4  3FC1               	movwi [1]fsr1
 16099                           
 16100                           ;LED_B1.c: 158: if (led == 1) {
 16101  08F5  0876               	movf	setLED@led,w
 16102  08F6  3A01               	xorlw	1
 16103  08F7  1D03               	skipz
 16104  08F8  28FC               	goto	l9584
 16105                           
 16106                           ;LED_B1.c: 162: RA3 = 1;
 16107  08F9  0020               	movlb	0	; select bank0
 16108  08FA  158C               	bsf	12,3	;volatile
 16109                           
 16110                           ;LED_B1.c: 164: }
 16111  08FB  2902               	goto	l9588
 16112  08FC                     l9584:	
 16113                           
 16114                           ;LED_B1.c: 167: else if (led == 2) {
 16115  08FC  0876               	movf	setLED@led,w
 16116  08FD  3A02               	xorlw	2
 16117  08FE  1D03               	skipz
 16118  08FF  2902               	goto	l9588
 16119                           
 16120                           ;LED_B1.c: 171: RC7 = 1;
 16121  0900  0020               	movlb	0	; select bank0
 16122  0901  178E               	bsf	14,7	;volatile
 16123  0902                     l9588:	
 16124                           
 16125                           ;LED_B1.c: 173: }
 16126                           ;LED_B1.c: 185: if (led == 99) {
 16127  0902  0876               	movf	setLED@led,w
 16128  0903  3A63               	xorlw	99
 16129  0904  1D03               	skipz
 16130  0905  2908               	goto	l9592
 16131                           
 16132                           ;LED_B1.c: 189: RB5 = 1;
 16133  0906  0020               	movlb	0	; select bank0
 16134  0907  168D               	bsf	13,5	;volatile
 16135  0908                     l9592:	
 16136                           
 16137                           ;LED_B1.c: 191: }
 16138                           ;LED_B1.c: 193: }
 16139                           ;LED_B1.c: 194: if (command == 11) {
 16140  0908  0875               	movf	setLED@command,w
 16141  0909  3A0B               	xorlw	11
 16142  090A  1D03               	skipz
 16143  090B  0008               	return
 16144                           
 16145                           ;LED_B1.c: 195: LED->GO = 1;
 16146  090C  0021               	movlb	1	; select bank1
 16147  090D  0851               	movf	_LED^(0+128),w
 16148  090E  0086               	movwf	6
 16149  090F  3001               	movlw	1	; select bank2/3
 16150  0910  0087               	movwf	7
 16151  0911  1481               	bsf	1,1
 16152  0912  0008               	return
 16153  0913                     __end_of_setLED:	
 16154                           
 16155                           	psect	text105
 16156  1E5E                     __ptext105:	
 16157 ;; *************** function _LedPointSelect *****************
 16158 ;; Defined at:
 16159 ;;		line 7 in file "../src/LED_B1.c"
 16160 ;; Parameters:    Size  Location     Type
 16161 ;;  led             1    wreg     unsigned char 
 16162 ;; Auto vars:     Size  Location     Type
 16163 ;;  led             1    4[COMMON] unsigned char 
 16164 ;; Return value:  Size  Location     Type
 16165 ;;		None               void
 16166 ;; Registers used:
 16167 ;;		wreg
 16168 ;; Tracked objects:
 16169 ;;		On entry : 0/0
 16170 ;;		On exit  : 0/0
 16171 ;;		Unchanged: 0/0
 16172 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16173 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16174 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16175 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16176 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16177 ;;Total ram usage:        2 bytes
 16178 ;; Hardware stack levels used:    1
 16179 ;; Hardware stack levels required when called:    3
 16180 ;; This function calls:
 16181 ;;		Nothing
 16182 ;; This function is called by:
 16183 ;;		_setLED_Initialization
 16184 ;;		_setLED
 16185 ;;		_setLED_Main
 16186 ;; This function uses a non-reentrant model
 16187 ;;
 16188                           
 16189                           
 16190                           ;psect for function _LedPointSelect
 16191  1E5E                     _LedPointSelect:	
 16192                           
 16193                           ;incstack = 0
 16194                           ; Regs used in _LedPointSelect: [wreg]
 16195                           ;LedPointSelect@led stored from wreg
 16196  1E5E  00F4               	movwf	LedPointSelect@led
 16197                           
 16198                           ;LED_B1.c: 9: if (led == 1) {
 16199  1E5F  0874               	movf	LedPointSelect@led,w
 16200  1E60  3A01               	xorlw	1
 16201  1E61  1D03               	skipz
 16202  1E62  2E68               	goto	l1043
 16203                           
 16204                           ;LED_B1.c: 10: LED = &VarLED1;
 16205  1E63  3068               	movlw	_VarLED1& (0+255)
 16206  1E64  00F3               	movwf	??_LedPointSelect
 16207  1E65  0873               	movf	??_LedPointSelect,w
 16208  1E66  0021               	movlb	1	; select bank1
 16209  1E67  00D1               	movwf	_LED^(0+128)
 16210  1E68                     l1043:	
 16211                           
 16212                           ;LED_B1.c: 11: }
 16213                           ;LED_B1.c: 14: if (led == 2) {
 16214  1E68  0874               	movf	LedPointSelect@led,w
 16215  1E69  3A02               	xorlw	2
 16216  1E6A  1D03               	skipz
 16217  1E6B  2E71               	goto	l1044
 16218                           
 16219                           ;LED_B1.c: 15: LED = &VarLED2;
 16220  1E6C  306C               	movlw	_VarLED2& (0+255)
 16221  1E6D  00F3               	movwf	??_LedPointSelect
 16222  1E6E  0873               	movf	??_LedPointSelect,w
 16223  1E6F  0021               	movlb	1	; select bank1
 16224  1E70  00D1               	movwf	_LED^(0+128)
 16225  1E71                     l1044:	
 16226                           
 16227                           ;LED_B1.c: 16: }
 16228                           ;LED_B1.c: 24: if (led == 99) {
 16229  1E71  0874               	movf	LedPointSelect@led,w
 16230  1E72  3A63               	xorlw	99
 16231  1E73  1D03               	skipz
 16232  1E74  0008               	return
 16233                           
 16234                           ;LED_B1.c: 25: LED = &VarErrLED;
 16235  1E75  3064               	movlw	_VarErrLED& (0+255)
 16236  1E76  00F3               	movwf	??_LedPointSelect
 16237  1E77  0873               	movf	??_LedPointSelect,w
 16238  1E78  0021               	movlb	1	; select bank1
 16239  1E79  00D1               	movwf	_LED^(0+128)
 16240  1E7A  0008               	return
 16241  1E7B                     __end_of_LedPointSelect:	
 16242                           
 16243                           	psect	text106
 16244  1D14                     __ptext106:	
 16245 ;; *************** function _setDimmerLights_Line *****************
 16246 ;; Defined at:
 16247 ;;		line 822 in file "../src/Dimmer_B1.c"
 16248 ;; Parameters:    Size  Location     Type
 16249 ;;  lights          1    wreg     unsigned char 
 16250 ;; Auto vars:     Size  Location     Type
 16251 ;;  lights          1    3[COMMON] unsigned char 
 16252 ;; Return value:  Size  Location     Type
 16253 ;;		None               void
 16254 ;; Registers used:
 16255 ;;		wreg
 16256 ;; Tracked objects:
 16257 ;;		On entry : 0/0
 16258 ;;		On exit  : 0/0
 16259 ;;		Unchanged: 0/0
 16260 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16261 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16262 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16263 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16264 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16265 ;;Total ram usage:        1 bytes
 16266 ;; Hardware stack levels used:    1
 16267 ;; Hardware stack levels required when called:    3
 16268 ;; This function calls:
 16269 ;;		Nothing
 16270 ;; This function is called by:
 16271 ;;		_setDimmerLights
 16272 ;;		_setDimmerLights_Adj
 16273 ;; This function uses a non-reentrant model
 16274 ;;
 16275                           
 16276                           
 16277                           ;psect for function _setDimmerLights_Line
 16278  1D14                     _setDimmerLights_Line:	
 16279                           
 16280                           ;incstack = 0
 16281                           ; Regs used in _setDimmerLights_Line: [wreg]
 16282                           ;setDimmerLights_Line@lights stored from wreg
 16283  1D14  00F3               	movwf	setDimmerLights_Line@lights
 16284                           
 16285                           ;Dimmer_B1.c: 823: Dimmer.LoadGO = 1;
 16286  1D15  0021               	movlb	1	; select bank1
 16287  1D16  1548               	bsf	_Dimmer^(0+128),2	;volatile
 16288                           
 16289                           ;Dimmer_B1.c: 825: DimmerLights1.Line = 0;
 16290  1D17  0022               	movlb	2	; select bank2
 16291  1D18  135D               	bcf	(_DimmerLights1^(0+256)+10),6
 16292                           
 16293                           ;Dimmer_B1.c: 828: DimmerLights2.Line = 0;
 16294  1D19  0023               	movlb	3	; select bank3
 16295  1D1A  1348               	bcf	(_DimmerLights2^(0+384)+10),6
 16296                           
 16297                           ;Dimmer_B1.c: 834: if (lights == 1) {
 16298  1D1B  0873               	movf	setDimmerLights_Line@lights,w
 16299  1D1C  3A01               	xorlw	1
 16300  1D1D  1D03               	skipz
 16301  1D1E  2D22               	goto	l6838
 16302                           
 16303                           ;Dimmer_B1.c: 835: DimmerLights1.Line = 1;
 16304  1D1F  0022               	movlb	2	; select bank2
 16305  1D20  175D               	bsf	(_DimmerLights1^(0+256)+10),6
 16306                           
 16307                           ;Dimmer_B1.c: 836: }
 16308  1D21  0008               	return
 16309  1D22                     l6838:	
 16310                           
 16311                           ;Dimmer_B1.c: 839: else if (lights == 2) {
 16312  1D22  0873               	movf	setDimmerLights_Line@lights,w
 16313  1D23  3A02               	xorlw	2
 16314  1D24  1D03               	skipz
 16315  1D25  0008               	return
 16316                           
 16317                           ;Dimmer_B1.c: 840: DimmerLights2.Line = 1;
 16318  1D26  0023               	movlb	3	; select bank3
 16319  1D27  1748               	bsf	(_DimmerLights2^(0+384)+10),6
 16320  1D28  0008               	return
 16321  1D29                     __end_of_setDimmerLights_Line:	
 16322                           
 16323                           	psect	text107
 16324  1C16                     __ptext107:	
 16325 ;; *************** function _getMain_LightsStatus *****************
 16326 ;; Defined at:
 16327 ;;		line 374 in file "../src/Main_B1.c"
 16328 ;; Parameters:    Size  Location     Type
 16329 ;;		None
 16330 ;; Auto vars:     Size  Location     Type
 16331 ;;  status          1    3[COMMON] unsigned char 
 16332 ;; Return value:  Size  Location     Type
 16333 ;;                  1    wreg      unsigned char 
 16334 ;; Registers used:
 16335 ;;		wreg, status,2, status,0
 16336 ;; Tracked objects:
 16337 ;;		On entry : 0/0
 16338 ;;		On exit  : 0/0
 16339 ;;		Unchanged: 0/0
 16340 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16341 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16342 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16343 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16344 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16345 ;;Total ram usage:        1 bytes
 16346 ;; Hardware stack levels used:    1
 16347 ;; Hardware stack levels required when called:    3
 16348 ;; This function calls:
 16349 ;;		Nothing
 16350 ;; This function is called by:
 16351 ;;		_DimmerLights_Main
 16352 ;;		_setDimmerLights_Main
 16353 ;;		_Flash_Memory_Main
 16354 ;;		_Exception_Main
 16355 ;;		_Load_Main
 16356 ;; This function uses a non-reentrant model
 16357 ;;
 16358                           
 16359                           
 16360                           ;psect for function _getMain_LightsStatus
 16361  1C16                     _getMain_LightsStatus:	
 16362                           
 16363                           ;Main_B1.c: 375: char status = 0;
 16364                           
 16365                           ;incstack = 0
 16366                           ; Regs used in _getMain_LightsStatus: [wreg+status,2+status,0]
 16367  1C16  01F3               	clrf	getMain_LightsStatus@status
 16368                           
 16369                           ;Main_B1.c: 394: status = DimmerLights1.Status == 1 ? 1 : 0;
 16370  1C17  3000               	movlw	0
 16371  1C18  0022               	movlb	2	; select bank2
 16372  1C19  18D5               	btfsc	(_DimmerLights1^(0+256)+2),1
 16373  1C1A  3001               	movlw	1
 16374  1C1B  00F3               	movwf	getMain_LightsStatus@status
 16375                           
 16376                           ;Main_B1.c: 395: if (status == 0) {
 16377  1C1C  08F3               	movf	getMain_LightsStatus@status,f
 16378  1C1D  1D03               	skipz
 16379  1C1E  2C24               	goto	l9768
 16380                           
 16381                           ;Main_B1.c: 396: status = DimmerLights2.Status == 1 ? 1 : 0;
 16382  1C1F  3000               	movlw	0
 16383  1C20  0023               	movlb	3	; select bank3
 16384  1C21  18C0               	btfsc	(_DimmerLights2^(0+384)+2),1
 16385  1C22  3001               	movlw	1
 16386  1C23  00F3               	movwf	getMain_LightsStatus@status
 16387  1C24                     l9768:	
 16388                           
 16389                           ;Main_B1.c: 397: }
 16390                           ;Main_B1.c: 421: return status;
 16391  1C24  0873               	movf	getMain_LightsStatus@status,w
 16392  1C25  0008               	return
 16393  1C26                     __end_of_getMain_LightsStatus:	
 16394                           
 16395                           	psect	text108
 16396  1242                     __ptext108:	
 16397 ;; *************** function _getDimmerLights_Allow_Condition *****************
 16398 ;; Defined at:
 16399 ;;		line 701 in file "../src/Dimmer_B1.c"
 16400 ;; Parameters:    Size  Location     Type
 16401 ;;  lights          1    wreg     unsigned char 
 16402 ;; Auto vars:     Size  Location     Type
 16403 ;;  lights          1    3[BANK0 ] unsigned char 
 16404 ;;  allow           1    4[BANK0 ] unsigned char 
 16405 ;; Return value:  Size  Location     Type
 16406 ;;                  1    wreg      unsigned char 
 16407 ;; Registers used:
 16408 ;;		wreg, status,2, status,0, pclath, cstack
 16409 ;; Tracked objects:
 16410 ;;		On entry : 0/0
 16411 ;;		On exit  : 0/0
 16412 ;;		Unchanged: 0/0
 16413 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16414 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16415 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16416 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16417 ;;      Totals:         1       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16418 ;;Total ram usage:        6 bytes
 16419 ;; Hardware stack levels used:    1
 16420 ;; Hardware stack levels required when called:    4
 16421 ;; This function calls:
 16422 ;;		_getLoad_OK
 16423 ;; This function is called by:
 16424 ;;		_setDimmerLights_Main
 16425 ;; This function uses a non-reentrant model
 16426 ;;
 16427                           
 16428                           
 16429                           ;psect for function _getDimmerLights_Allow_Condition
 16430  1242                     _getDimmerLights_Allow_Condition:	
 16431                           
 16432                           ;incstack = 0
 16433                           ; Regs used in _getDimmerLights_Allow_Condition: [wreg+status,2+status,0+pclath+cstack]
 16434                           ;getDimmerLights_Allow_Condition@lights stored from wreg
 16435  1242  0020               	movlb	0	; select bank0
 16436  1243  00A3               	movwf	getDimmerLights_Allow_Condition@lights
 16437                           
 16438                           ;Dimmer_B1.c: 702: char allow = 0;
 16439  1244  01A4               	clrf	getDimmerLights_Allow_Condition@allow
 16440                           
 16441                           ;Dimmer_B1.c: 709: allow = getLoad_OK() == 0 && Dimmer.LoadGO == 0 ? 0 : 1;
 16442  1245  01A0               	clrf	_getDimmerLights_Allow_Condition$2349
 16443  1246  0AA0               	incf	_getDimmerLights_Allow_Condition$2349,f
 16444  1247  319A  22FC  3192   	fcall	_getLoad_OK
 16445  124A  3800               	iorlw	0
 16446  124B  1D03               	skipz
 16447  124C  2A52               	goto	l9782
 16448  124D  0021               	movlb	1	; select bank1
 16449  124E  1948               	btfsc	_Dimmer^(0+128),2	;volatile
 16450  124F  2A52               	goto	l9782
 16451  1250  0020               	movlb	0	; select bank0
 16452  1251  01A0               	clrf	_getDimmerLights_Allow_Condition$2349
 16453  1252                     l9782:	
 16454  1252  0020               	movlb	0	; select bank0
 16455  1253  0820               	movf	_getDimmerLights_Allow_Condition$2349,w
 16456  1254  00F4               	movwf	??_getDimmerLights_Allow_Condition
 16457  1255  0874               	movf	??_getDimmerLights_Allow_Condition,w
 16458  1256  00A4               	movwf	getDimmerLights_Allow_Condition@allow
 16459                           
 16460                           ;Dimmer_B1.c: 714: if (allow == 0) {
 16461  1257  08A4               	movf	getDimmerLights_Allow_Condition@allow,f
 16462  1258  1D03               	skipz
 16463  1259  2A7A               	goto	l9806
 16464                           
 16465                           ;Dimmer_B1.c: 715: if (lights == 1) {
 16466  125A  0823               	movf	getDimmerLights_Allow_Condition@lights,w
 16467  125B  3A01               	xorlw	1
 16468  125C  1D03               	skipz
 16469  125D  2A69               	goto	l9796
 16470                           
 16471                           ;Dimmer_B1.c: 716: allow = DimmerLights2.TriggerAdj == 1 || DimmerLights2.AdjSw == 1 ? 1
      +                           : 0;
 16472  125E  01A1               	clrf	_getDimmerLights_Allow_Condition$2350
 16473  125F  0AA1               	incf	_getDimmerLights_Allow_Condition$2350,f
 16474  1260  0023               	movlb	3	; select bank3
 16475  1261  1DC8               	btfss	(_DimmerLights2^(0+384)+10),3
 16476  1262  1B3F               	btfsc	(_DimmerLights2^(0+384)+1),6
 16477  1263  2A66               	goto	l9794
 16478  1264  0020               	movlb	0	; select bank0
 16479  1265  01A1               	clrf	_getDimmerLights_Allow_Condition$2350
 16480  1266                     l9794:	
 16481  1266  0020               	movlb	0	; select bank0
 16482  1267  0821               	movf	_getDimmerLights_Allow_Condition$2350,w
 16483  1268  2A77               	goto	L10
 16484  1269                     l9796:	
 16485                           ;Dimmer_B1.c: 717: } else if (lights == 2) {
 16486                           
 16487  1269  0823               	movf	getDimmerLights_Allow_Condition@lights,w
 16488  126A  3A02               	xorlw	2
 16489  126B  1D03               	skipz
 16490  126C  2A7A               	goto	l9806
 16491                           
 16492                           ;Dimmer_B1.c: 718: allow = DimmerLights1.TriggerAdj == 1 || DimmerLights1.AdjSw == 1 ? 1
      +                           : 0;
 16493  126D  01A2               	clrf	_getDimmerLights_Allow_Condition$2351
 16494  126E  0AA2               	incf	_getDimmerLights_Allow_Condition$2351,f
 16495  126F  0022               	movlb	2	; select bank2
 16496  1270  1DDD               	btfss	(_DimmerLights1^(0+256)+10),3
 16497  1271  1B54               	btfsc	(_DimmerLights1^(0+256)+1),6
 16498  1272  2A75               	goto	l9804
 16499  1273  0020               	movlb	0	; select bank0
 16500  1274  01A2               	clrf	_getDimmerLights_Allow_Condition$2351
 16501  1275                     l9804:	
 16502  1275  0020               	movlb	0	; select bank0
 16503  1276  0822               	movf	_getDimmerLights_Allow_Condition$2351,w
 16504  1277                     L10:	
 16505  1277  00F4               	movwf	??_getDimmerLights_Allow_Condition
 16506  1278  0874               	movf	??_getDimmerLights_Allow_Condition,w
 16507  1279  00A4               	movwf	getDimmerLights_Allow_Condition@allow
 16508  127A                     l9806:	
 16509                           
 16510                           ;Dimmer_B1.c: 719: }
 16511                           ;Dimmer_B1.c: 720: }
 16512                           ;Dimmer_B1.c: 734: return allow;
 16513  127A  0824               	movf	getDimmerLights_Allow_Condition@allow,w
 16514  127B  0008               	return
 16515  127C                     __end_of_getDimmerLights_Allow_Condition:	
 16516                           
 16517                           	psect	text109
 16518  1AFC                     __ptext109:	
 16519 ;; *************** function _getLoad_OK *****************
 16520 ;; Defined at:
 16521 ;;		line 265 in file "../src/OverLoad_B1.c"
 16522 ;; Parameters:    Size  Location     Type
 16523 ;;		None
 16524 ;; Auto vars:     Size  Location     Type
 16525 ;;  ok              1    3[COMMON] unsigned char 
 16526 ;; Return value:  Size  Location     Type
 16527 ;;                  1    wreg      unsigned char 
 16528 ;; Registers used:
 16529 ;;		wreg, status,2
 16530 ;; Tracked objects:
 16531 ;;		On entry : 0/0
 16532 ;;		On exit  : 0/0
 16533 ;;		Unchanged: 0/0
 16534 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16535 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16536 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16537 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16538 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16539 ;;Total ram usage:        1 bytes
 16540 ;; Hardware stack levels used:    1
 16541 ;; Hardware stack levels required when called:    3
 16542 ;; This function calls:
 16543 ;;		Nothing
 16544 ;; This function is called by:
 16545 ;;		_DimmerLights_Main
 16546 ;;		_getDimmerLights_Allow_Condition
 16547 ;; This function uses a non-reentrant model
 16548 ;;
 16549                           
 16550                           
 16551                           ;psect for function _getLoad_OK
 16552  1AFC                     _getLoad_OK:	
 16553                           
 16554                           ;OverLoad_B1.c: 266: char ok = Load.OK == 1 ? 1 : 0;
 16555                           
 16556                           ;incstack = 0
 16557                           ; Regs used in _getLoad_OK: [wreg+status,2]
 16558  1AFC  3000               	movlw	0
 16559  1AFD  0022               	movlb	2	; select bank2
 16560  1AFE  1BA5               	btfsc	_Load^(0+256),7
 16561  1AFF  3001               	movlw	1
 16562  1B00  00F3               	movwf	getLoad_OK@ok
 16563                           
 16564                           ;OverLoad_B1.c: 267: return ok;
 16565  1B01  0873               	movf	getLoad_OK@ok,w
 16566  1B02  0008               	return
 16567  1B03                     __end_of_getLoad_OK:	
 16568                           
 16569                           	psect	text110
 16570  116E                     __ptext110:	
 16571 ;; *************** function _getMain_All_Error_Status *****************
 16572 ;; Defined at:
 16573 ;;		line 425 in file "../src/Main_B1.c"
 16574 ;; Parameters:    Size  Location     Type
 16575 ;;  command         1    wreg     unsigned char 
 16576 ;; Auto vars:     Size  Location     Type
 16577 ;;  command         1    4[BANK0 ] unsigned char 
 16578 ;;  status          1    5[BANK0 ] unsigned char 
 16579 ;; Return value:  Size  Location     Type
 16580 ;;                  1    wreg      unsigned char 
 16581 ;; Registers used:
 16582 ;;		wreg, status,2, status,0
 16583 ;; Tracked objects:
 16584 ;;		On entry : 0/0
 16585 ;;		On exit  : 0/0
 16586 ;;		Unchanged: 0/0
 16587 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16588 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16589 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16590 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16591 ;;      Totals:         1       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16592 ;;Total ram usage:        7 bytes
 16593 ;; Hardware stack levels used:    1
 16594 ;; Hardware stack levels required when called:    3
 16595 ;; This function calls:
 16596 ;;		Nothing
 16597 ;; This function is called by:
 16598 ;;		_DimmerLights_Main
 16599 ;;		_Exception_Main
 16600 ;;		_Load_Main
 16601 ;;		_setTemp_Main
 16602 ;;		_getRxData
 16603 ;;		_setSw_Main
 16604 ;; This function uses a non-reentrant model
 16605 ;;
 16606                           
 16607                           
 16608                           ;psect for function _getMain_All_Error_Status
 16609  116E                     _getMain_All_Error_Status:	
 16610                           
 16611                           ;incstack = 0
 16612                           ; Regs used in _getMain_All_Error_Status: [wreg+status,2+status,0]
 16613                           ;getMain_All_Error_Status@command stored from wreg
 16614  116E  0020               	movlb	0	; select bank0
 16615  116F  00A4               	movwf	getMain_All_Error_Status@command
 16616                           
 16617                           ;Main_B1.c: 426: char status = 0;
 16618  1170  01A5               	clrf	getMain_All_Error_Status@status
 16619                           
 16620                           ;Main_B1.c: 437: if (status == 0 && command != 2) {
 16621  1171  08A5               	movf	getMain_All_Error_Status@status,f
 16622  1172  1D03               	skipz
 16623  1173  2988               	goto	l9534
 16624  1174  0824               	movf	getMain_All_Error_Status@command,w
 16625  1175  3A02               	xorlw	2
 16626  1176  1903               	skipnz
 16627  1177  2988               	goto	l9534
 16628                           
 16629                           ;Main_B1.c: 438: status = Temp.ERROR == 1 ? 2 : 0;
 16630  1178  0021               	movlb	1	; select bank1
 16631  1179  18DA               	btfsc	_Temp^(0+128),1
 16632  117A  297F               	goto	l9532
 16633  117B  0020               	movlb	0	; select bank0
 16634  117C  01A0               	clrf	_getMain_All_Error_Status$3628
 16635  117D  01A1               	clrf	_getMain_All_Error_Status$3628+1
 16636  117E  2984               	goto	l1585
 16637  117F                     l9532:	
 16638  117F  3002               	movlw	2
 16639  1180  0020               	movlb	0	; select bank0
 16640  1181  00A0               	movwf	_getMain_All_Error_Status$3628
 16641  1182  3000               	movlw	0
 16642  1183  00A1               	movwf	_getMain_All_Error_Status$3628+1
 16643  1184                     l1585:	
 16644  1184  0820               	movf	_getMain_All_Error_Status$3628,w
 16645  1185  00F3               	movwf	??_getMain_All_Error_Status
 16646  1186  0873               	movf	??_getMain_All_Error_Status,w
 16647  1187  00A5               	movwf	getMain_All_Error_Status@status
 16648  1188                     l9534:	
 16649                           
 16650                           ;Main_B1.c: 439: }
 16651                           ;Main_B1.c: 444: if (status == 0 && command != 3) {
 16652  1188  08A5               	movf	getMain_All_Error_Status@status,f
 16653  1189  1D03               	skipz
 16654  118A  299F               	goto	l1586
 16655  118B  0824               	movf	getMain_All_Error_Status@command,w
 16656  118C  3A03               	xorlw	3
 16657  118D  1903               	skipnz
 16658  118E  299F               	goto	l1586
 16659                           
 16660                           ;Main_B1.c: 445: status = Load.ERROR == 1 ? 3 : 0;
 16661  118F  0022               	movlb	2	; select bank2
 16662  1190  1AA5               	btfsc	_Load^(0+256),5
 16663  1191  2996               	goto	l9542
 16664  1192  0020               	movlb	0	; select bank0
 16665  1193  01A2               	clrf	_getMain_All_Error_Status$3629
 16666  1194  01A3               	clrf	_getMain_All_Error_Status$3629+1
 16667  1195  299B               	goto	l1590
 16668  1196                     l9542:	
 16669  1196  3003               	movlw	3
 16670  1197  0020               	movlb	0	; select bank0
 16671  1198  00A2               	movwf	_getMain_All_Error_Status$3629
 16672  1199  3000               	movlw	0
 16673  119A  00A3               	movwf	_getMain_All_Error_Status$3629+1
 16674  119B                     l1590:	
 16675  119B  0822               	movf	_getMain_All_Error_Status$3629,w
 16676  119C  00F3               	movwf	??_getMain_All_Error_Status
 16677  119D  0873               	movf	??_getMain_All_Error_Status,w
 16678  119E  00A5               	movwf	getMain_All_Error_Status@status
 16679  119F                     l1586:	
 16680                           
 16681                           ;Main_B1.c: 446: }
 16682                           ;Main_B1.c: 462: return status;
 16683  119F  0825               	movf	getMain_All_Error_Status@status,w
 16684  11A0  0008               	return
 16685  11A1                     __end_of_getMain_All_Error_Status:	
 16686                           
 16687                           	psect	text111
 16688  1D92                     __ptext111:	
 16689 ;; *************** function _DimmerLights_Initialization *****************
 16690 ;; Defined at:
 16691 ;;		line 442 in file "../src/Dimmer_B1.c"
 16692 ;; Parameters:    Size  Location     Type
 16693 ;;		None
 16694 ;; Auto vars:     Size  Location     Type
 16695 ;;		None
 16696 ;; Return value:  Size  Location     Type
 16697 ;;		None               void
 16698 ;; Registers used:
 16699 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16700 ;; Tracked objects:
 16701 ;;		On entry : 0/0
 16702 ;;		On exit  : 0/0
 16703 ;;		Unchanged: 0/0
 16704 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16705 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16706 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16707 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16708 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16709 ;;Total ram usage:        1 bytes
 16710 ;; Hardware stack levels used:    1
 16711 ;; Hardware stack levels required when called:    5
 16712 ;; This function calls:
 16713 ;;		_setDimmerLights_Initialization
 16714 ;; This function is called by:
 16715 ;;		_main
 16716 ;; This function uses a non-reentrant model
 16717 ;;
 16718                           
 16719                           
 16720                           ;psect for function _DimmerLights_Initialization
 16721  1D92                     _DimmerLights_Initialization:	
 16722                           
 16723                           ;Dimmer_B1.c: 445: DimmerLights11 = &DimmerLights1;
 16724                           
 16725                           ;incstack = 0
 16726                           ; Regs used in _DimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 16727  1D92  3053               	movlw	_DimmerLights1& (0+255)
 16728  1D93  00F7               	movwf	??_DimmerLights_Initialization
 16729  1D94  0877               	movf	??_DimmerLights_Initialization,w
 16730  1D95  0021               	movlb	1	; select bank1
 16731  1D96  00CE               	movwf	_DimmerLights11^(0+128)
 16732                           
 16733                           ;Dimmer_B1.c: 446: __nop();
 16734  1D97  0000               	nop
 16735                           
 16736                           ;Dimmer_B1.c: 447: __nop();
 16737  1D98  0000               	nop
 16738                           
 16739                           ;Dimmer_B1.c: 448: setDimmerLights_Initialization(1);
 16740  1D99  3001               	movlw	1
 16741  1D9A  3191  213E  319D   	fcall	_setDimmerLights_Initialization
 16742                           
 16743                           ;Dimmer_B1.c: 452: DimmerLights22 = &DimmerLights2;
 16744  1D9D  30BE               	movlw	_DimmerLights2& (0+255)
 16745  1D9E  00F7               	movwf	??_DimmerLights_Initialization
 16746  1D9F  0877               	movf	??_DimmerLights_Initialization,w
 16747  1DA0  0021               	movlb	1	; select bank1
 16748  1DA1  00CF               	movwf	_DimmerLights22^(0+128)
 16749                           
 16750                           ;Dimmer_B1.c: 453: __nop();
 16751  1DA2  0000               	nop
 16752                           
 16753                           ;Dimmer_B1.c: 454: __nop();
 16754  1DA3  0000               	nop
 16755                           
 16756                           ;Dimmer_B1.c: 455: setDimmerLights_Initialization(2);
 16757  1DA4  3002               	movlw	2
 16758  1DA5  3191  213E         	fcall	_setDimmerLights_Initialization
 16759  1DA7  0008               	return
 16760  1DA8                     __end_of_DimmerLights_Initialization:	
 16761                           
 16762                           	psect	text112
 16763  113E                     __ptext112:	
 16764 ;; *************** function _setDimmerLights_Initialization *****************
 16765 ;; Defined at:
 16766 ;;		line 472 in file "../src/Dimmer_B1.c"
 16767 ;; Parameters:    Size  Location     Type
 16768 ;;  lights          1    wreg     unsigned char 
 16769 ;; Auto vars:     Size  Location     Type
 16770 ;;  lights          1    6[COMMON] unsigned char 
 16771 ;; Return value:  Size  Location     Type
 16772 ;;		None               void
 16773 ;; Registers used:
 16774 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16775 ;; Tracked objects:
 16776 ;;		On entry : 0/0
 16777 ;;		On exit  : 0/0
 16778 ;;		Unchanged: 0/0
 16779 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16780 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16781 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16782 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16783 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16784 ;;Total ram usage:        2 bytes
 16785 ;; Hardware stack levels used:    1
 16786 ;; Hardware stack levels required when called:    4
 16787 ;; This function calls:
 16788 ;;		_DimmerLightsPointSelect
 16789 ;; This function is called by:
 16790 ;;		_DimmerLights_Initialization
 16791 ;; This function uses a non-reentrant model
 16792 ;;
 16793                           
 16794                           
 16795                           ;psect for function _setDimmerLights_Initialization
 16796  113E                     _setDimmerLights_Initialization:	
 16797                           
 16798                           ;incstack = 0
 16799                           ; Regs used in _setDimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pcla
      +                          th+cstack]
 16800                           ;setDimmerLights_Initialization@lights stored from wreg
 16801  113E  00F6               	movwf	setDimmerLights_Initialization@lights
 16802                           
 16803                           ;Dimmer_B1.c: 474: DimmerLightsPointSelect(lights);
 16804  113F  0876               	movf	setDimmerLights_Initialization@lights,w
 16805  1140  319D  25A8  3191   	fcall	_DimmerLightsPointSelect
 16806                           
 16807                           ;Dimmer_B1.c: 476: DimmerLights->DimmingTimeValue = 7;
 16808  1143  3007               	movlw	7
 16809  1144  00F5               	movwf	??_setDimmerLights_Initialization
 16810  1145  0020               	movlb	0	; select bank0
 16811  1146  086D               	movf	_DimmerLights,w
 16812  1147  3E08               	addlw	8
 16813  1148  0086               	movwf	6
 16814  1149  3001               	movlw	1	; select bank2/3
 16815  114A  0087               	movwf	7
 16816  114B  0875               	movf	??_setDimmerLights_Initialization,w
 16817  114C  0081               	movwf	1
 16818                           
 16819                           ;Dimmer_B1.c: 481: DimmerLights->MaxmumValue = ((char)(70*0.8));
 16820  114D  3038               	movlw	56
 16821  114E  00F5               	movwf	??_setDimmerLights_Initialization
 16822  114F  086D               	movf	_DimmerLights,w
 16823  1150  3E06               	addlw	6
 16824  1151  0086               	movwf	6
 16825  1152  3001               	movlw	1	; select bank2/3
 16826  1153  0087               	movwf	7
 16827  1154  0875               	movf	??_setDimmerLights_Initialization,w
 16828  1155  0081               	movwf	1
 16829                           
 16830                           ;Dimmer_B1.c: 482: DimmerLights->MinimumValue = ((char)(15*0.8));
 16831  1156  300C               	movlw	12
 16832  1157  00F5               	movwf	??_setDimmerLights_Initialization
 16833  1158  086D               	movf	_DimmerLights,w
 16834  1159  3E09               	addlw	9
 16835  115A  0086               	movwf	6
 16836  115B  3001               	movlw	1	; select bank2/3
 16837  115C  0087               	movwf	7
 16838  115D  0875               	movf	??_setDimmerLights_Initialization,w
 16839  115E  0081               	movwf	1
 16840                           
 16841                           ;Dimmer_B1.c: 496: DimmerLights->DimmingValue = DimmerLights->MaxmumValue;
 16842  115F  086D               	movf	_DimmerLights,w
 16843  1160  3E06               	addlw	6
 16844  1161  0086               	movwf	6
 16845  1162  3001               	movlw	1	; select bank2/3
 16846  1163  0087               	movwf	7
 16847  1164  0801               	movf	1,w
 16848  1165  00F5               	movwf	??_setDimmerLights_Initialization
 16849  1166  086D               	movf	_DimmerLights,w
 16850  1167  3E04               	addlw	4
 16851  1168  0086               	movwf	6
 16852  1169  3001               	movlw	1	; select bank2/3
 16853  116A  0087               	movwf	7
 16854  116B  0875               	movf	??_setDimmerLights_Initialization,w
 16855  116C  0081               	movwf	1
 16856  116D  0008               	return
 16857  116E                     __end_of_setDimmerLights_Initialization:	
 16858                           
 16859                           	psect	text113
 16860  1B27                     __ptext113:	
 16861 ;; *************** function _DelayOff_Main *****************
 16862 ;; Defined at:
 16863 ;;		line 41 in file "../src/DelayOff_B1.c"
 16864 ;; Parameters:    Size  Location     Type
 16865 ;;		None
 16866 ;; Auto vars:     Size  Location     Type
 16867 ;;		None
 16868 ;; Return value:  Size  Location     Type
 16869 ;;		None               void
 16870 ;; Registers used:
 16871 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16872 ;; Tracked objects:
 16873 ;;		On entry : 0/0
 16874 ;;		On exit  : 0/0
 16875 ;;		Unchanged: 0/0
 16876 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16877 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16878 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16879 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16880 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16881 ;;Total ram usage:        0 bytes
 16882 ;; Hardware stack levels used:    1
 16883 ;; Hardware stack levels required when called:    9
 16884 ;; This function calls:
 16885 ;;		_DlyOff_Main
 16886 ;; This function is called by:
 16887 ;;		_main
 16888 ;; This function uses a non-reentrant model
 16889 ;;
 16890                           
 16891                           
 16892                           ;psect for function _DelayOff_Main
 16893  1B27                     _DelayOff_Main:	
 16894                           
 16895                           ;DelayOff_B1.c: 43: DlyOff_Main(1);
 16896                           
 16897                           ;incstack = 0
 16898                           ; Regs used in _DelayOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 16899  1B27  3001               	movlw	1
 16900  1B28  3188  2057  319B   	fcall	_DlyOff_Main
 16901                           
 16902                           ;DelayOff_B1.c: 47: DlyOff_Main(2);
 16903  1B2B  3002               	movlw	2
 16904  1B2C  3188  2057         	fcall	_DlyOff_Main
 16905  1B2E  0008               	return
 16906  1B2F                     __end_of_DelayOff_Main:	
 16907                           
 16908                           	psect	text114
 16909  0857                     __ptext114:	
 16910 ;; *************** function _DlyOff_Main *****************
 16911 ;; Defined at:
 16912 ;;		line 61 in file "../src/DelayOff_B1.c"
 16913 ;; Parameters:    Size  Location     Type
 16914 ;;  sw              1    wreg     unsigned char 
 16915 ;; Auto vars:     Size  Location     Type
 16916 ;;  sw              1    0[BANK1 ] unsigned char 
 16917 ;; Return value:  Size  Location     Type
 16918 ;;		None               void
 16919 ;; Registers used:
 16920 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16921 ;; Tracked objects:
 16922 ;;		On entry : 0/0
 16923 ;;		On exit  : 0/0
 16924 ;;		Unchanged: 0/0
 16925 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16926 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16927 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
 16928 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16929 ;;      Totals:         0       2       1       0       0       0       0       0       0       0       0       0       
      +0       0
 16930 ;;Total ram usage:        3 bytes
 16931 ;; Hardware stack levels used:    1
 16932 ;; Hardware stack levels required when called:    8
 16933 ;; This function calls:
 16934 ;;		_DelayOffPointSelect
 16935 ;;		_setBuz
 16936 ;;		_setDimmerLights_ErrorClose
 16937 ;; This function is called by:
 16938 ;;		_DelayOff_Main
 16939 ;; This function uses a non-reentrant model
 16940 ;;
 16941                           
 16942                           
 16943                           ;psect for function _DlyOff_Main
 16944  0857                     _DlyOff_Main:	
 16945                           
 16946                           ;incstack = 0
 16947                           ; Regs used in _DlyOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 16948                           ;DlyOff_Main@sw stored from wreg
 16949  0857  0021               	movlb	1	; select bank1
 16950  0858  00EC               	movwf	DlyOff_Main@sw^(0+128)
 16951                           
 16952                           ;DelayOff_B1.c: 63: DelayOffPointSelect(sw);
 16953  0859  086C               	movf	DlyOff_Main@sw^(0+128),w
 16954  085A  319C  24ED  3188   	fcall	_DelayOffPointSelect
 16955                           
 16956                           ;DelayOff_B1.c: 64: if (DelayOff->GO == 1) {
 16957  085D  0879               	movf	_DelayOff,w
 16958  085E  0086               	movwf	6
 16959  085F  3001               	movlw	1	; select bank2/3
 16960  0860  0087               	movwf	7
 16961  0861  1C81               	btfss	1,1
 16962  0862  0008               	return
 16963                           
 16964                           ;DelayOff_B1.c: 65: DelayOff->SecondTime++;
 16965  0863  0879               	movf	_DelayOff,w
 16966  0864  3E02               	addlw	2
 16967  0865  0086               	movwf	6
 16968  0866  3001               	movlw	1	; select bank2/3
 16969  0867  0087               	movwf	7
 16970  0868  3001               	movlw	1
 16971  0869  0781               	addwf	1,f
 16972  086A  3141               	addfsr 1,1
 16973  086B  1803               	skipnc
 16974  086C  0A81               	incf	1,f
 16975                           
 16976                           ;DelayOff_B1.c: 66: if (DelayOff->SecondTime >= 60000/20) {
 16977  086D  0879               	movf	_DelayOff,w
 16978  086E  3E02               	addlw	2
 16979  086F  0086               	movwf	6
 16980  0870  3001               	movlw	1	; select bank2/3
 16981  0871  0087               	movwf	7
 16982  0872  3F40               	moviw [0]fsr1
 16983  0873  0020               	movlb	0	; select bank0
 16984  0874  00EB               	movwf	??_DlyOff_Main
 16985  0875  3F41               	moviw [1]fsr1
 16986  0876  00EC               	movwf	??_DlyOff_Main+1
 16987  0877  300B               	movlw	11
 16988  0878  026C               	subwf	??_DlyOff_Main+1,w
 16989  0879  30B8               	movlw	184
 16990  087A  1903               	skipnz
 16991  087B  026B               	subwf	??_DlyOff_Main,w
 16992  087C  1C03               	skipc
 16993  087D  0008               	return
 16994                           
 16995                           ;DelayOff_B1.c: 67: DelayOff->SecondTime = 0;
 16996  087E  0879               	movf	_DelayOff,w
 16997  087F  3E02               	addlw	2
 16998  0880  0086               	movwf	6
 16999  0881  3001               	movlw	1	; select bank2/3
 17000  0882  0087               	movwf	7
 17001  0883  3000               	movlw	0
 17002  0884  3FC0               	movwi [0]fsr1
 17003  0885  3FC1               	movwi [1]fsr1
 17004                           
 17005                           ;DelayOff_B1.c: 68: DelayOff->MinuteTime++;
 17006  0886  3001               	movlw	1
 17007  0887  00EB               	movwf	??_DlyOff_Main
 17008  0888  0879               	movf	_DelayOff,w
 17009  0889  3E04               	addlw	4
 17010  088A  0086               	movwf	6
 17011  088B  3001               	movlw	1	; select bank2/3
 17012  088C  0087               	movwf	7
 17013  088D  086B               	movf	??_DlyOff_Main,w
 17014  088E  0781               	addwf	1,f
 17015                           
 17016                           ;DelayOff_B1.c: 69: if (DelayOff->MinuteTime >= DelayOff->Value) {
 17017  088F  0879               	movf	_DelayOff,w
 17018  0890  3E04               	addlw	4
 17019  0891  0086               	movwf	6
 17020  0892  3001               	movlw	1	; select bank2/3
 17021  0893  0087               	movwf	7
 17022  0894  0A79               	incf	_DelayOff,w
 17023  0895  0084               	movwf	4
 17024  0896  3001               	movlw	1	; select bank2/3
 17025  0897  0085               	movwf	5
 17026  0898  0800               	movf	0,w
 17027  0899  0201               	subwf	1,w
 17028  089A  1C03               	skipc
 17029  089B  0008               	return
 17030                           
 17031                           ;DelayOff_B1.c: 70: DelayOff->MinuteTime = 0;
 17032  089C  0879               	movf	_DelayOff,w
 17033  089D  3E04               	addlw	4
 17034  089E  0086               	movwf	6
 17035  089F  3001               	movlw	1	; select bank2/3
 17036  08A0  0087               	movwf	7
 17037  08A1  0181               	clrf	1
 17038                           
 17039                           ;DelayOff_B1.c: 71: DelayOff->GO = 0;
 17040  08A2  0879               	movf	_DelayOff,w
 17041  08A3  0086               	movwf	6
 17042  08A4  3001               	movlw	1	; select bank2/3
 17043  08A5  0087               	movwf	7
 17044  08A6  1081               	bcf	1,1
 17045                           
 17046                           ;DelayOff_B1.c: 72: setBuz(1, 100);
 17047  08A7  3064               	movlw	100
 17048  08A8  00A4               	movwf	setBuz@time
 17049  08A9  3000               	movlw	0
 17050  08AA  00A5               	movwf	setBuz@time+1
 17051  08AB  3001               	movlw	1
 17052  08AC  3195  25DF  3188   	fcall	_setBuz
 17053                           
 17054                           ;DelayOff_B1.c: 75: setDimmerLights_ErrorClose(sw);
 17055  08AF  0021               	movlb	1	; select bank1
 17056  08B0  086C               	movf	DlyOff_Main@sw^(0+128),w
 17057  08B1  3196  26EC         	fcall	_setDimmerLights_ErrorClose
 17058  08B3  0008               	return
 17059  08B4                     __end_of_DlyOff_Main:	
 17060                           
 17061                           	psect	text115
 17062  16EC                     __ptext115:	
 17063 ;; *************** function _setDimmerLights_ErrorClose *****************
 17064 ;; Defined at:
 17065 ;;		line 962 in file "../src/Dimmer_B1.c"
 17066 ;; Parameters:    Size  Location     Type
 17067 ;;  lights          1    wreg     unsigned char 
 17068 ;; Auto vars:     Size  Location     Type
 17069 ;;  lights          1   72[BANK0 ] unsigned char 
 17070 ;;  i               2   73[BANK0 ] int 
 17071 ;;  count           1   71[BANK0 ] unsigned char 
 17072 ;; Return value:  Size  Location     Type
 17073 ;;		None               void
 17074 ;; Registers used:
 17075 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17076 ;; Tracked objects:
 17077 ;;		On entry : 0/0
 17078 ;;		On exit  : 0/0
 17079 ;;		Unchanged: 0/0
 17080 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17081 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17082 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17083 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17084 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17085 ;;Total ram usage:        5 bytes
 17086 ;; Hardware stack levels used:    1
 17087 ;; Hardware stack levels required when called:    7
 17088 ;; This function calls:
 17089 ;;		_DimmerLightsPointSelect
 17090 ;;		_getDimmerLights_Status
 17091 ;;		_setDimmerLights_SwOff
 17092 ;; This function is called by:
 17093 ;;		_DlyOff_Main
 17094 ;;		_setControl_Lights_Table
 17095 ;; This function uses a non-reentrant model
 17096 ;;
 17097                           
 17098                           
 17099                           ;psect for function _setDimmerLights_ErrorClose
 17100  16EC                     _setDimmerLights_ErrorClose:	
 17101                           
 17102                           ;incstack = 0
 17103                           ; Regs used in _setDimmerLights_ErrorClose: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 17104                           ;setDimmerLights_ErrorClose@lights stored from wreg
 17105  16EC  0020               	movlb	0	; select bank0
 17106  16ED  00E8               	movwf	setDimmerLights_ErrorClose@lights
 17107                           
 17108                           ;Dimmer_B1.c: 963: if (lights == 255) {
 17109  16EE  0868               	movf	setDimmerLights_ErrorClose@lights,w
 17110  16EF  3AFF               	xorlw	255
 17111  16F0  1D03               	skipz
 17112  16F1  2F2A               	goto	l9372
 17113                           
 17114                           ;Dimmer_B1.c: 968: char count = 2;
 17115  16F2  3002               	movlw	2
 17116  16F3  00E6               	movwf	??_setDimmerLights_ErrorClose
 17117  16F4  0866               	movf	??_setDimmerLights_ErrorClose,w
 17118  16F5  00E7               	movwf	setDimmerLights_ErrorClose@count
 17119                           
 17120                           ;Dimmer_B1.c: 973: for (int i = 0; i < count; i++) {
 17121  16F6  01E9               	clrf	setDimmerLights_ErrorClose@i
 17122  16F7  01EA               	clrf	setDimmerLights_ErrorClose@i+1
 17123  16F8                     l9370:	
 17124  16F8  086A               	movf	setDimmerLights_ErrorClose@i+1,w
 17125  16F9  3A80               	xorlw	128
 17126  16FA  00E6               	movwf	??_setDimmerLights_ErrorClose
 17127  16FB  3080               	movlw	128
 17128  16FC  0266               	subwf	??_setDimmerLights_ErrorClose,w
 17129  16FD  1D03               	skipz
 17130  16FE  2F01               	goto	u10045
 17131  16FF  0867               	movf	setDimmerLights_ErrorClose@count,w
 17132  1700  0269               	subwf	setDimmerLights_ErrorClose@i,w
 17133  1701                     u10045:	
 17134  1701  1803               	btfsc	3,0
 17135  1702  0008               	return
 17136                           
 17137                           ;Dimmer_B1.c: 974: DimmerLightsPointSelect(i + 1);
 17138  1703  0020               	movlb	0	; select bank0
 17139  1704  0869               	movf	setDimmerLights_ErrorClose@i,w
 17140  1705  3E01               	addlw	1
 17141  1706  319D  25A8  3196   	fcall	_DimmerLightsPointSelect
 17142                           
 17143                           ;Dimmer_B1.c: 975: if (getDimmerLights_Status(i + 1) == 1) {
 17144  1709  0020               	movlb	0	; select bank0
 17145  170A  0869               	movf	setDimmerLights_ErrorClose@i,w
 17146  170B  3E01               	addlw	1
 17147  170C  319C  2406  3196   	fcall	_getDimmerLights_Status
 17148  170F  3A01               	xorlw	1
 17149  1710  1D03               	skipz
 17150  1711  2F24               	goto	l9368
 17151                           
 17152                           ;Dimmer_B1.c: 976: DimmerLights->SwFlag = 1;
 17153  1712  0020               	movlb	0	; select bank0
 17154  1713  086D               	movf	_DimmerLights,w
 17155  1714  3E0B               	addlw	11
 17156  1715  0086               	movwf	6
 17157  1716  3001               	movlw	1	; select bank2/3
 17158  1717  0087               	movwf	7
 17159  1718  1481               	bsf	1,1
 17160                           
 17161                           ;Dimmer_B1.c: 977: DimmerLights->Status = 0;
 17162  1719  086D               	movf	_DimmerLights,w
 17163  171A  3E02               	addlw	2
 17164  171B  0086               	movwf	6
 17165  171C  3001               	movlw	1	; select bank2/3
 17166  171D  0087               	movwf	7
 17167  171E  1081               	bcf	1,1
 17168                           
 17169                           ;Dimmer_B1.c: 978: setDimmerLights_SwOff(i + 1);
 17170  171F  0869               	movf	setDimmerLights_ErrorClose@i,w
 17171  1720  3E01               	addlw	1
 17172  1721  3194  244A  3196   	fcall	_setDimmerLights_SwOff
 17173  1724                     l9368:	
 17174  1724  3001               	movlw	1
 17175  1725  0020               	movlb	0	; select bank0
 17176  1726  07E9               	addwf	setDimmerLights_ErrorClose@i,f
 17177  1727  3000               	movlw	0
 17178  1728  3DEA               	addwfc	setDimmerLights_ErrorClose@i+1,f
 17179  1729  2EF8               	goto	l9370
 17180  172A                     l9372:	
 17181                           ;Dimmer_B1.c: 979: }
 17182                           ;Dimmer_B1.c: 980: }
 17183                           ;Dimmer_B1.c: 981: } else {
 17184                           
 17185                           
 17186                           ;Dimmer_B1.c: 982: DimmerLightsPointSelect(lights);
 17187  172A  0020               	movlb	0	; select bank0
 17188  172B  0868               	movf	setDimmerLights_ErrorClose@lights,w
 17189  172C  319D  25A8  3196   	fcall	_DimmerLightsPointSelect
 17190                           
 17191                           ;Dimmer_B1.c: 983: if (getDimmerLights_Status(lights) == 1) {
 17192  172F  0020               	movlb	0	; select bank0
 17193  1730  0868               	movf	setDimmerLights_ErrorClose@lights,w
 17194  1731  319C  2406  3196   	fcall	_getDimmerLights_Status
 17195  1734  3A01               	xorlw	1
 17196  1735  1D03               	skipz
 17197  1736  0008               	return
 17198                           
 17199                           ;Dimmer_B1.c: 984: DimmerLights->SwFlag = 1;
 17200  1737  0020               	movlb	0	; select bank0
 17201  1738  086D               	movf	_DimmerLights,w
 17202  1739  3E0B               	addlw	11
 17203  173A  0086               	movwf	6
 17204  173B  3001               	movlw	1	; select bank2/3
 17205  173C  0087               	movwf	7
 17206  173D  1481               	bsf	1,1
 17207                           
 17208                           ;Dimmer_B1.c: 985: DimmerLights->Status = 0;
 17209  173E  086D               	movf	_DimmerLights,w
 17210  173F  3E02               	addlw	2
 17211  1740  0086               	movwf	6
 17212  1741  3001               	movlw	1	; select bank2/3
 17213  1742  0087               	movwf	7
 17214  1743  1081               	bcf	1,1
 17215                           
 17216                           ;Dimmer_B1.c: 986: setDimmerLights_SwOff(lights);
 17217  1744  0868               	movf	setDimmerLights_ErrorClose@lights,w
 17218  1745  3194  244A         	fcall	_setDimmerLights_SwOff
 17219  1747  0008               	return
 17220  1748                     __end_of_setDimmerLights_ErrorClose:	
 17221                           
 17222                           	psect	text116
 17223  144A                     __ptext116:	
 17224 ;; *************** function _setDimmerLights_SwOff *****************
 17225 ;; Defined at:
 17226 ;;		line 557 in file "../src/Dimmer_B1.c"
 17227 ;; Parameters:    Size  Location     Type
 17228 ;;  sw              1    wreg     unsigned char 
 17229 ;; Auto vars:     Size  Location     Type
 17230 ;;  sw              1   69[BANK0 ] unsigned char 
 17231 ;; Return value:  Size  Location     Type
 17232 ;;		None               void
 17233 ;; Registers used:
 17234 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17235 ;; Tracked objects:
 17236 ;;		On entry : 0/0
 17237 ;;		On exit  : 0/0
 17238 ;;		Unchanged: 0/0
 17239 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17240 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17241 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17242 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17243 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17244 ;;Total ram usage:        1 bytes
 17245 ;; Hardware stack levels used:    1
 17246 ;; Hardware stack levels required when called:    6
 17247 ;; This function calls:
 17248 ;;		_DimmerLightsPointSelect
 17249 ;;		_getDelayOff_GO
 17250 ;;		_setDelayOff_GO
 17251 ;; This function is called by:
 17252 ;;		_setDimmerLights_ErrorClose
 17253 ;;		_Exception_Main
 17254 ;;		_setRFSW_Control
 17255 ;;		_setSw_Main
 17256 ;; This function uses a non-reentrant model
 17257 ;;
 17258                           
 17259                           
 17260                           ;psect for function _setDimmerLights_SwOff
 17261  144A                     _setDimmerLights_SwOff:	
 17262                           
 17263                           ;incstack = 0
 17264                           ; Regs used in _setDimmerLights_SwOff: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 17265                           ;setDimmerLights_SwOff@sw stored from wreg
 17266  144A  0020               	movlb	0	; select bank0
 17267  144B  00E5               	movwf	setDimmerLights_SwOff@sw
 17268                           
 17269                           ;Dimmer_B1.c: 558: DimmerLightsPointSelect(sw);
 17270  144C  0865               	movf	setDimmerLights_SwOff@sw,w
 17271  144D  319D  25A8  3194   	fcall	_DimmerLightsPointSelect
 17272                           
 17273                           ;Dimmer_B1.c: 560: if (DimmerLights->SwFlag == 1) {
 17274  1450  0020               	movlb	0	; select bank0
 17275  1451  086D               	movf	_DimmerLights,w
 17276  1452  3E0B               	addlw	11
 17277  1453  0086               	movwf	6
 17278  1454  3001               	movlw	1	; select bank2/3
 17279  1455  0087               	movwf	7
 17280  1456  1C81               	btfss	1,1
 17281  1457  0008               	return
 17282                           
 17283                           ;Dimmer_B1.c: 561: DimmerLights->SwFlag = 0;
 17284  1458  086D               	movf	_DimmerLights,w
 17285  1459  3E0B               	addlw	11
 17286  145A  0086               	movwf	6
 17287  145B  3001               	movlw	1	; select bank2/3
 17288  145C  0087               	movwf	7
 17289  145D  1081               	bcf	1,1
 17290                           
 17291                           ;Dimmer_B1.c: 562: if (DimmerLights->Status == 1) {
 17292  145E  086D               	movf	_DimmerLights,w
 17293  145F  3E02               	addlw	2
 17294  1460  0086               	movwf	6
 17295  1461  3001               	movlw	1	; select bank2/3
 17296  1462  0087               	movwf	7
 17297  1463  1C81               	btfss	1,1
 17298  1464  2C7F               	goto	l9202
 17299                           
 17300                           ;Dimmer_B1.c: 564: if (DimmerLights->SwAdj == 1) {
 17301  1465  086D               	movf	_DimmerLights,w
 17302  1466  3E0B               	addlw	11
 17303  1467  0086               	movwf	6
 17304  1468  3001               	movlw	1	; select bank2/3
 17305  1469  0087               	movwf	7
 17306  146A  1D01               	btfss	1,2
 17307  146B  0008               	return
 17308                           
 17309                           ;Dimmer_B1.c: 565: DimmerLights->SwAdj = 0;
 17310  146C  086D               	movf	_DimmerLights,w
 17311  146D  3E0B               	addlw	11
 17312  146E  0086               	movwf	6
 17313  146F  3001               	movlw	1	; select bank2/3
 17314  1470  0087               	movwf	7
 17315  1471  1101               	bcf	1,2
 17316                           
 17317                           ;Dimmer_B1.c: 567: DimmerLights->TriggerAdj = 1;
 17318  1472  086D               	movf	_DimmerLights,w
 17319  1473  3E0A               	addlw	10
 17320  1474  0086               	movwf	6
 17321  1475  3001               	movlw	1	; select bank2/3
 17322  1476  0087               	movwf	7
 17323  1477  1581               	bsf	1,3
 17324                           
 17325                           ;Dimmer_B1.c: 568: DimmerLights->SwitchAdj = 0;
 17326  1478  086D               	movf	_DimmerLights,w
 17327  1479  3E0A               	addlw	10
 17328  147A  0086               	movwf	6
 17329  147B  3001               	movlw	1	; select bank2/3
 17330  147C  0087               	movwf	7
 17331  147D  1101               	bcf	1,2
 17332                           
 17333                           ;Dimmer_B1.c: 569: }
 17334                           ;Dimmer_B1.c: 570: } else {
 17335  147E  0008               	return
 17336  147F                     l9202:	
 17337                           
 17338                           ;Dimmer_B1.c: 571: DimmerLights->Trigger = 1;
 17339  147F  086D               	movf	_DimmerLights,w
 17340  1480  3E0A               	addlw	10
 17341  1481  0086               	movwf	6
 17342  1482  3001               	movlw	1	; select bank2/3
 17343  1483  0087               	movwf	7
 17344  1484  1481               	bsf	1,1
 17345                           
 17346                           ;Dimmer_B1.c: 572: DimmerLights->Switch = 0;
 17347  1485  086D               	movf	_DimmerLights,w
 17348  1486  3E0A               	addlw	10
 17349  1487  0086               	movwf	6
 17350  1488  3001               	movlw	1	; select bank2/3
 17351  1489  0087               	movwf	7
 17352  148A  1001               	bcf	1,0
 17353                           
 17354                           ;Dimmer_B1.c: 575: if (getDelayOff_GO(sw) == 1) {
 17355  148B  0865               	movf	setDimmerLights_SwOff@sw,w
 17356  148C  319B  23CC  3194   	fcall	_getDelayOff_GO
 17357  148F  3A01               	xorlw	1
 17358  1490  1D03               	skipz
 17359  1491  0008               	return
 17360                           
 17361                           ;Dimmer_B1.c: 576: setDelayOff_GO(sw, 0, 0);
 17362  1492  0020               	movlb	0	; select bank0
 17363  1493  01E1               	clrf	setDelayOff_GO@command
 17364  1494  01E2               	clrf	setDelayOff_GO@value
 17365  1495  0865               	movf	setDimmerLights_SwOff@sw,w
 17366  1496  3195  258C         	fcall	_setDelayOff_GO
 17367  1498  0008               	return
 17368  1499                     __end_of_setDimmerLights_SwOff:	
 17369                           
 17370                           	psect	text117
 17371  158C                     __ptext117:	
 17372 ;; *************** function _setDelayOff_GO *****************
 17373 ;; Defined at:
 17374 ;;		line 83 in file "../src/DelayOff_B1.c"
 17375 ;; Parameters:    Size  Location     Type
 17376 ;;  sw              1    wreg     unsigned char 
 17377 ;;  command         1   65[BANK0 ] unsigned char 
 17378 ;;  value           1   66[BANK0 ] unsigned char 
 17379 ;; Auto vars:     Size  Location     Type
 17380 ;;  sw              1   68[BANK0 ] unsigned char 
 17381 ;; Return value:  Size  Location     Type
 17382 ;;		None               void
 17383 ;; Registers used:
 17384 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17385 ;; Tracked objects:
 17386 ;;		On entry : 0/0
 17387 ;;		On exit  : 0/0
 17388 ;;		Unchanged: 0/0
 17389 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17390 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17391 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17392 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17393 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17394 ;;Total ram usage:        4 bytes
 17395 ;; Hardware stack levels used:    1
 17396 ;; Hardware stack levels required when called:    5
 17397 ;; This function calls:
 17398 ;;		_DelayOffPointSelect
 17399 ;;		_DelayTimejudge
 17400 ;;		_setProductData
 17401 ;; This function is called by:
 17402 ;;		_setDimmerLights_SwOff
 17403 ;;		_setRFSW_Control
 17404 ;; This function uses a non-reentrant model
 17405 ;;
 17406                           
 17407                           
 17408                           ;psect for function _setDelayOff_GO
 17409  158C                     _setDelayOff_GO:	
 17410                           
 17411                           ;incstack = 0
 17412                           ; Regs used in _setDelayOff_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17413                           ;setDelayOff_GO@sw stored from wreg
 17414  158C  0020               	movlb	0	; select bank0
 17415  158D  00E4               	movwf	setDelayOff_GO@sw
 17416                           
 17417                           ;DelayOff_B1.c: 86: DelayOffPointSelect(sw);
 17418  158E  0864               	movf	setDelayOff_GO@sw,w
 17419  158F  319C  24ED  3195   	fcall	_DelayOffPointSelect
 17420                           
 17421                           ;DelayOff_B1.c: 87: DelayOff->GO = command == 1 ? 1 : 0;
 17422  1592  0020               	movlb	0	; select bank0
 17423  1593  0861               	movf	setDelayOff_GO@command,w
 17424  1594  3A01               	xorlw	1
 17425  1595  3000               	movlw	0
 17426  1596  1903               	skipnz
 17427  1597  3001               	movlw	1
 17428  1598  00E3               	movwf	??_setDelayOff_GO
 17429  1599  0879               	movf	_DelayOff,w
 17430  159A  0086               	movwf	6
 17431  159B  3001               	movlw	1	; select bank2/3
 17432  159C  0087               	movwf	7
 17433  159D  0DE3               	rlf	??_setDelayOff_GO,f
 17434  159E  0801               	movf	1,w
 17435  159F  0663               	xorwf	??_setDelayOff_GO,w
 17436  15A0  39FD               	andlw	-3
 17437  15A1  0663               	xorwf	??_setDelayOff_GO,w
 17438  15A2  0081               	movwf	1
 17439                           
 17440                           ;DelayOff_B1.c: 89: if (command == 1) {
 17441  15A3  0861               	movf	setDelayOff_GO@command,w
 17442  15A4  3A01               	xorlw	1
 17443  15A5  1D03               	skipz
 17444  15A6  2DCA               	goto	l9108
 17445                           
 17446                           ;DelayOff_B1.c: 90: DelayOff->Value = DelayTimejudge(value);
 17447  15A7  0862               	movf	setDelayOff_GO@value,w
 17448  15A8  319F  27AC  3195   	fcall	_DelayTimejudge
 17449  15AB  0020               	movlb	0	; select bank0
 17450  15AC  00E3               	movwf	??_setDelayOff_GO
 17451  15AD  0A79               	incf	_DelayOff,w
 17452  15AE  0086               	movwf	6
 17453  15AF  3001               	movlw	1	; select bank2/3
 17454  15B0  0087               	movwf	7
 17455  15B1  0863               	movf	??_setDelayOff_GO,w
 17456  15B2  0081               	movwf	1
 17457                           
 17458                           ;DelayOff_B1.c: 91: if (((value % 16) == 5 || (value % 16) == 0) && value <= 0x25) {
 17459  15B3  300F               	movlw	15
 17460  15B4  0562               	andwf	setDelayOff_GO@value,w
 17461  15B5  00E3               	movwf	??_setDelayOff_GO
 17462  15B6  0863               	movf	??_setDelayOff_GO,w
 17463  15B7  3A05               	xorlw	5
 17464  15B8  1903               	skipnz
 17465  15B9  2DBE               	goto	l9102
 17466  15BA  0862               	movf	setDelayOff_GO@value,w
 17467  15BB  390F               	andlw	15
 17468  15BC  1D03               	btfss	3,2
 17469  15BD  2DC4               	goto	l9106
 17470  15BE                     l9102:	
 17471  15BE  3026               	movlw	38
 17472  15BF  0262               	subwf	setDelayOff_GO@value,w
 17473  15C0  1803               	skipnc
 17474  15C1  2DC4               	goto	l9106
 17475                           
 17476                           ;DelayOff_B1.c: 92: setProductData(26 + sw, value);
 17477  15C2  0862               	movf	setDelayOff_GO@value,w
 17478  15C3  2DC6               	goto	L12
 17479  15C4                     l9106:	
 17480                           ;DelayOff_B1.c: 93: } else {
 17481                           
 17482                           
 17483                           ;DelayOff_B1.c: 94: setProductData(26 + sw, 0x05);
 17484  15C4  3005               	movlw	5
 17485  15C5  0020               	movlb	0	; select bank0
 17486  15C6                     L12:	
 17487  15C6  00E3               	movwf	??_setDelayOff_GO
 17488  15C7  0863               	movf	??_setDelayOff_GO,w
 17489  15C8  00DD               	movwf	setProductData@value
 17490  15C9  2DCC               	goto	L11
 17491  15CA                     l9108:	
 17492                           ;DelayOff_B1.c: 95: }
 17493                           ;DelayOff_B1.c: 96: } else {
 17494                           
 17495                           
 17496                           ;DelayOff_B1.c: 97: setProductData(sw + 26, 0);
 17497  15CA  0020               	movlb	0	; select bank0
 17498  15CB  01DD               	clrf	setProductData@value
 17499  15CC                     L11:	
 17500  15CC  0864               	movf	setDelayOff_GO@sw,w
 17501  15CD  3E1A               	addlw	26
 17502  15CE  319B  23DA         	fcall	_setProductData
 17503                           
 17504                           ;DelayOff_B1.c: 98: }
 17505                           ;DelayOff_B1.c: 99: DelayOff->SecondTime = 0;
 17506  15D0  0879               	movf	_DelayOff,w
 17507  15D1  3E02               	addlw	2
 17508  15D2  0086               	movwf	6
 17509  15D3  3001               	movlw	1	; select bank2/3
 17510  15D4  0087               	movwf	7
 17511  15D5  3000               	movlw	0
 17512  15D6  3FC0               	movwi [0]fsr1
 17513  15D7  3FC1               	movwi [1]fsr1
 17514                           
 17515                           ;DelayOff_B1.c: 100: DelayOff->MinuteTime = 0;
 17516  15D8  0879               	movf	_DelayOff,w
 17517  15D9  3E04               	addlw	4
 17518  15DA  0086               	movwf	6
 17519  15DB  3001               	movlw	1	; select bank2/3
 17520  15DC  0087               	movwf	7
 17521  15DD  0181               	clrf	1
 17522  15DE  0008               	return
 17523  15DF                     __end_of_setDelayOff_GO:	
 17524                           
 17525                           	psect	text118
 17526  1BDA                     __ptext118:	
 17527 ;; *************** function _setProductData *****************
 17528 ;; Defined at:
 17529 ;;		line 604 in file "../src/Main_B1.c"
 17530 ;; Parameters:    Size  Location     Type
 17531 ;;  address         1    wreg     unsigned char 
 17532 ;;  value           1   61[BANK0 ] unsigned char 
 17533 ;; Auto vars:     Size  Location     Type
 17534 ;;  address         1   64[BANK0 ] unsigned char 
 17535 ;; Return value:  Size  Location     Type
 17536 ;;		None               void
 17537 ;; Registers used:
 17538 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 17539 ;; Tracked objects:
 17540 ;;		On entry : 0/0
 17541 ;;		On exit  : 0/0
 17542 ;;		Unchanged: 0/0
 17543 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17544 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17545 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17546 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17547 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17548 ;;Total ram usage:        4 bytes
 17549 ;; Hardware stack levels used:    1
 17550 ;; Hardware stack levels required when called:    3
 17551 ;; This function calls:
 17552 ;;		Nothing
 17553 ;; This function is called by:
 17554 ;;		_setDelayOff_GO
 17555 ;;		_setDimmerLights
 17556 ;;		_setDimmerLights_Adj
 17557 ;;		_setTemp_Main
 17558 ;;		_setLog_Code
 17559 ;;		_setControl_Lights_Table
 17560 ;;		_setRFSW_AdjControl
 17561 ;;		_setRF_DimmerValue
 17562 ;;		_setRF_DimmerLights
 17563 ;; This function uses a non-reentrant model
 17564 ;;
 17565                           
 17566                           
 17567                           ;psect for function _setProductData
 17568  1BDA                     _setProductData:	
 17569                           
 17570                           ;incstack = 0
 17571                           ; Regs used in _setProductData: [wreg+fsr1l+fsr1h+status,2+status,0]
 17572                           ;setProductData@address stored from wreg
 17573  1BDA  0020               	movlb	0	; select bank0
 17574  1BDB  00E0               	movwf	setProductData@address
 17575                           
 17576                           ;Main_B1.c: 605: product->Data[address] = value;
 17577  1BDC  085D               	movf	setProductData@value,w
 17578  1BDD  00DE               	movwf	??_setProductData
 17579  1BDE  0860               	movf	setProductData@address,w
 17580  1BDF  076F               	addwf	_product,w
 17581  1BE0  00DF               	movwf	??_setProductData+1
 17582  1BE1  085F               	movf	??_setProductData+1,w
 17583  1BE2  0086               	movwf	6
 17584  1BE3  3002               	movlw	2	; select bank4/5
 17585  1BE4  0087               	movwf	7
 17586  1BE5  085E               	movf	??_setProductData,w
 17587  1BE6  0081               	movwf	1
 17588  1BE7  0008               	return
 17589  1BE8                     __end_of_setProductData:	
 17590                           
 17591                           	psect	text119
 17592  1FAC                     __ptext119:	
 17593 ;; *************** function _DelayTimejudge *****************
 17594 ;; Defined at:
 17595 ;;		line 112 in file "../src/DelayOff_B1.c"
 17596 ;; Parameters:    Size  Location     Type
 17597 ;;  value           1    wreg     unsigned char 
 17598 ;; Auto vars:     Size  Location     Type
 17599 ;;  value           1    5[BANK0 ] unsigned char 
 17600 ;;  k               1    4[BANK0 ] unsigned char 
 17601 ;;  j               1    3[BANK0 ] unsigned char 
 17602 ;;  i               1    2[BANK0 ] unsigned char 
 17603 ;; Return value:  Size  Location     Type
 17604 ;;                  1    wreg      unsigned char 
 17605 ;; Registers used:
 17606 ;;		wreg, status,2, status,0, pclath, cstack
 17607 ;; Tracked objects:
 17608 ;;		On entry : 0/0
 17609 ;;		On exit  : 0/0
 17610 ;;		Unchanged: 0/0
 17611 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17612 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17613 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17614 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17615 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17616 ;;Total ram usage:        6 bytes
 17617 ;; Hardware stack levels used:    1
 17618 ;; Hardware stack levels required when called:    4
 17619 ;; This function calls:
 17620 ;;		___bmul
 17621 ;; This function is called by:
 17622 ;;		_setDelayOff_GO
 17623 ;; This function uses a non-reentrant model
 17624 ;;
 17625                           
 17626                           
 17627                           ;psect for function _DelayTimejudge
 17628  1FAC                     _DelayTimejudge:	
 17629                           
 17630                           ;incstack = 0
 17631                           ; Regs used in _DelayTimejudge: [wreg+status,2+status,0+pclath+cstack]
 17632                           ;DelayTimejudge@value stored from wreg
 17633  1FAC  0020               	movlb	0	; select bank0
 17634  1FAD  00A5               	movwf	DelayTimejudge@value
 17635                           
 17636                           ;DelayOff_B1.c: 113: char i = 5, j = 0, k = 0;
 17637  1FAE  3005               	movlw	5
 17638  1FAF  00A0               	movwf	??_DelayTimejudge
 17639  1FB0  0820               	movf	??_DelayTimejudge,w
 17640  1FB1  00A2               	movwf	DelayTimejudge@i
 17641  1FB2  01A3               	clrf	DelayTimejudge@j
 17642  1FB3  01A4               	clrf	DelayTimejudge@k
 17643                           
 17644                           ;DelayOff_B1.c: 114: if (value <= 0x30) {
 17645  1FB4  3031               	movlw	49
 17646  1FB5  0225               	subwf	DelayTimejudge@value,w
 17647  1FB6  1803               	skipnc
 17648  1FB7  2FD4               	goto	l8990
 17649                           
 17650                           ;DelayOff_B1.c: 115: j = value & 0x0f;
 17651  1FB8  0825               	movf	DelayTimejudge@value,w
 17652  1FB9  390F               	andlw	15
 17653  1FBA  00A0               	movwf	??_DelayTimejudge
 17654  1FBB  0820               	movf	??_DelayTimejudge,w
 17655  1FBC  00A3               	movwf	DelayTimejudge@j
 17656                           
 17657                           ;DelayOff_B1.c: 116: k = (value >> 4) & 0x0f;
 17658  1FBD  0825               	movf	DelayTimejudge@value,w
 17659  1FBE  00A0               	movwf	??_DelayTimejudge
 17660  1FBF  3004               	movlw	4
 17661  1FC0                     u9505:	
 17662  1FC0  36A0               	lsrf	??_DelayTimejudge,f
 17663  1FC1  0B89               	decfsz	9,f
 17664  1FC2  2FC0               	goto	u9505
 17665  1FC3  0820               	movf	??_DelayTimejudge,w
 17666  1FC4  390F               	andlw	15
 17667  1FC5  00A1               	movwf	??_DelayTimejudge+1
 17668  1FC6  0821               	movf	??_DelayTimejudge+1,w
 17669  1FC7  00A4               	movwf	DelayTimejudge@k
 17670                           
 17671                           ;DelayOff_B1.c: 117: i = j + (k * 10);
 17672  1FC8  300A               	movlw	10
 17673  1FC9  00A0               	movwf	??_DelayTimejudge
 17674  1FCA  0820               	movf	??_DelayTimejudge,w
 17675  1FCB  00F3               	movwf	___bmul@multiplicand
 17676  1FCC  0824               	movf	DelayTimejudge@k,w
 17677  1FCD  319C  2486         	fcall	___bmul
 17678  1FCF  0020               	movlb	0	; select bank0
 17679  1FD0  0723               	addwf	DelayTimejudge@j,w
 17680  1FD1  00A1               	movwf	??_DelayTimejudge+1
 17681  1FD2  0821               	movf	??_DelayTimejudge+1,w
 17682  1FD3  00A2               	movwf	DelayTimejudge@i
 17683  1FD4                     l8990:	
 17684                           
 17685                           ;DelayOff_B1.c: 118: }
 17686                           ;DelayOff_B1.c: 139: return i;
 17687  1FD4  0822               	movf	DelayTimejudge@i,w
 17688  1FD5  0008               	return
 17689  1FD6                     __end_of_DelayTimejudge:	
 17690                           
 17691                           	psect	text120
 17692  1C86                     __ptext120:	
 17693 ;; *************** function ___bmul *****************
 17694 ;; Defined at:
 17695 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul8.c"
 17696 ;; Parameters:    Size  Location     Type
 17697 ;;  multiplier      1    wreg     unsigned char 
 17698 ;;  multiplicand    1    3[COMMON] unsigned char 
 17699 ;; Auto vars:     Size  Location     Type
 17700 ;;  multiplier      1    6[COMMON] unsigned char 
 17701 ;;  product         1    5[COMMON] unsigned char 
 17702 ;; Return value:  Size  Location     Type
 17703 ;;                  1    wreg      unsigned char 
 17704 ;; Registers used:
 17705 ;;		wreg, status,2, status,0
 17706 ;; Tracked objects:
 17707 ;;		On entry : 0/0
 17708 ;;		On exit  : 0/0
 17709 ;;		Unchanged: 0/0
 17710 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17711 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17712 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17713 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17714 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17715 ;;Total ram usage:        4 bytes
 17716 ;; Hardware stack levels used:    1
 17717 ;; Hardware stack levels required when called:    3
 17718 ;; This function calls:
 17719 ;;		Nothing
 17720 ;; This function is called by:
 17721 ;;		_DelayTimejudge
 17722 ;; This function uses a non-reentrant model
 17723 ;;
 17724                           
 17725                           
 17726                           ;psect for function ___bmul
 17727  1C86                     ___bmul:	
 17728                           
 17729                           ;incstack = 0
 17730                           ; Regs used in ___bmul: [wreg+status,2+status,0]
 17731                           ;___bmul@multiplier stored from wreg
 17732  1C86  00F6               	movwf	___bmul@multiplier
 17733  1C87  01F5               	clrf	___bmul@product
 17734  1C88                     l8728:	
 17735  1C88  1C76               	btfss	___bmul@multiplier,0
 17736  1C89  2C8E               	goto	l8732
 17737  1C8A  0873               	movf	___bmul@multiplicand,w
 17738  1C8B  00F4               	movwf	??___bmul
 17739  1C8C  0874               	movf	??___bmul,w
 17740  1C8D  07F5               	addwf	___bmul@product,f
 17741  1C8E                     l8732:	
 17742  1C8E  1003               	clrc
 17743  1C8F  0DF3               	rlf	___bmul@multiplicand,f
 17744  1C90  1003               	clrc
 17745  1C91  0CF6               	rrf	___bmul@multiplier,f
 17746  1C92  08F6               	movf	___bmul@multiplier,f
 17747  1C93  1D03               	skipz
 17748  1C94  2C88               	goto	l8728
 17749  1C95  0875               	movf	___bmul@product,w
 17750  1C96  0008               	return
 17751  1C97                     __end_of___bmul:	
 17752                           
 17753                           	psect	text121
 17754  1BCC                     __ptext121:	
 17755 ;; *************** function _getDelayOff_GO *****************
 17756 ;; Defined at:
 17757 ;;		line 105 in file "../src/DelayOff_B1.c"
 17758 ;; Parameters:    Size  Location     Type
 17759 ;;  sw              1    wreg     unsigned char 
 17760 ;; Auto vars:     Size  Location     Type
 17761 ;;  sw              1    5[COMMON] unsigned char 
 17762 ;;  go              1    6[COMMON] unsigned char 
 17763 ;; Return value:  Size  Location     Type
 17764 ;;                  1    wreg      unsigned char 
 17765 ;; Registers used:
 17766 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17767 ;; Tracked objects:
 17768 ;;		On entry : 0/0
 17769 ;;		On exit  : 0/0
 17770 ;;		Unchanged: 0/0
 17771 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17772 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17773 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17774 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17775 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17776 ;;Total ram usage:        2 bytes
 17777 ;; Hardware stack levels used:    1
 17778 ;; Hardware stack levels required when called:    4
 17779 ;; This function calls:
 17780 ;;		_DelayOffPointSelect
 17781 ;; This function is called by:
 17782 ;;		_setDimmerLights_SwOff
 17783 ;;		_setRFSW_Control
 17784 ;; This function uses a non-reentrant model
 17785 ;;
 17786                           
 17787                           
 17788                           ;psect for function _getDelayOff_GO
 17789  1BCC                     _getDelayOff_GO:	
 17790                           
 17791                           ;incstack = 0
 17792                           ; Regs used in _getDelayOff_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17793                           ;getDelayOff_GO@sw stored from wreg
 17794  1BCC  00F5               	movwf	getDelayOff_GO@sw
 17795                           
 17796                           ;DelayOff_B1.c: 106: DelayOffPointSelect(sw);
 17797  1BCD  0875               	movf	getDelayOff_GO@sw,w
 17798  1BCE  319C  24ED         	fcall	_DelayOffPointSelect
 17799                           
 17800                           ;DelayOff_B1.c: 107: char go = DelayOff->GO == 1 ? 1 : 0;
 17801  1BD0  0879               	movf	_DelayOff,w
 17802  1BD1  0086               	movwf	6
 17803  1BD2  3001               	movlw	1	; select bank2/3
 17804  1BD3  0087               	movwf	7
 17805  1BD4  3000               	movlw	0
 17806  1BD5  1881               	btfsc	1,1
 17807  1BD6  3001               	movlw	1
 17808  1BD7  00F6               	movwf	getDelayOff_GO@go
 17809                           
 17810                           ;DelayOff_B1.c: 108: return go;
 17811  1BD8  0876               	movf	getDelayOff_GO@go,w
 17812  1BD9  0008               	return
 17813  1BDA                     __end_of_getDelayOff_GO:	
 17814                           
 17815                           	psect	text122
 17816  1C06                     __ptext122:	
 17817 ;; *************** function _getDimmerLights_Status *****************
 17818 ;; Defined at:
 17819 ;;		line 873 in file "../src/Dimmer_B1.c"
 17820 ;; Parameters:    Size  Location     Type
 17821 ;;  lights          1    wreg     unsigned char 
 17822 ;; Auto vars:     Size  Location     Type
 17823 ;;  lights          1    5[COMMON] unsigned char 
 17824 ;;  status          1    6[COMMON] unsigned char 
 17825 ;; Return value:  Size  Location     Type
 17826 ;;                  1    wreg      unsigned char 
 17827 ;; Registers used:
 17828 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17829 ;; Tracked objects:
 17830 ;;		On entry : 0/0
 17831 ;;		On exit  : 0/0
 17832 ;;		Unchanged: 0/0
 17833 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17834 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17835 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17836 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17837 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17838 ;;Total ram usage:        2 bytes
 17839 ;; Hardware stack levels used:    1
 17840 ;; Hardware stack levels required when called:    4
 17841 ;; This function calls:
 17842 ;;		_DimmerLightsPointSelect
 17843 ;; This function is called by:
 17844 ;;		_setDimmerLights_ErrorClose
 17845 ;;		_Exception_Main
 17846 ;;		_setRFSW_Control
 17847 ;;		_setRFSW_AdjControl
 17848 ;; This function uses a non-reentrant model
 17849 ;;
 17850                           
 17851                           
 17852                           ;psect for function _getDimmerLights_Status
 17853  1C06                     _getDimmerLights_Status:	
 17854                           
 17855                           ;incstack = 0
 17856                           ; Regs used in _getDimmerLights_Status: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
 17857                           ;getDimmerLights_Status@lights stored from wreg
 17858  1C06  00F5               	movwf	getDimmerLights_Status@lights
 17859                           
 17860                           ;Dimmer_B1.c: 874: DimmerLightsPointSelect(lights);
 17861  1C07  0875               	movf	getDimmerLights_Status@lights,w
 17862  1C08  319D  25A8         	fcall	_DimmerLightsPointSelect
 17863                           
 17864                           ;Dimmer_B1.c: 875: char status = DimmerLights->Status == 1 ? 1 : 0;
 17865  1C0A  0020               	movlb	0	; select bank0
 17866  1C0B  086D               	movf	_DimmerLights,w
 17867  1C0C  3E02               	addlw	2
 17868  1C0D  0086               	movwf	6
 17869  1C0E  3001               	movlw	1	; select bank2/3
 17870  1C0F  0087               	movwf	7
 17871  1C10  3000               	movlw	0
 17872  1C11  1881               	btfsc	1,1
 17873  1C12  3001               	movlw	1
 17874  1C13  00F6               	movwf	getDimmerLights_Status@status
 17875                           
 17876                           ;Dimmer_B1.c: 876: return status;
 17877  1C14  0876               	movf	getDimmerLights_Status@status,w
 17878  1C15  0008               	return
 17879  1C16                     __end_of_getDimmerLights_Status:	
 17880                           
 17881                           	psect	text123
 17882  1DA8                     __ptext123:	
 17883 ;; *************** function _DimmerLightsPointSelect *****************
 17884 ;; Defined at:
 17885 ;;		line 417 in file "../src/Dimmer_B1.c"
 17886 ;; Parameters:    Size  Location     Type
 17887 ;;  lights          1    wreg     unsigned char 
 17888 ;; Auto vars:     Size  Location     Type
 17889 ;;  lights          1    4[COMMON] unsigned char 
 17890 ;; Return value:  Size  Location     Type
 17891 ;;		None               void
 17892 ;; Registers used:
 17893 ;;		wreg
 17894 ;; Tracked objects:
 17895 ;;		On entry : 0/0
 17896 ;;		On exit  : 0/0
 17897 ;;		Unchanged: 0/0
 17898 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17899 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17900 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17901 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17902 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17903 ;;Total ram usage:        2 bytes
 17904 ;; Hardware stack levels used:    1
 17905 ;; Hardware stack levels required when called:    3
 17906 ;; This function calls:
 17907 ;;		Nothing
 17908 ;; This function is called by:
 17909 ;;		_setDimmerLights_Initialization
 17910 ;;		_setDimmerLights_SwOn
 17911 ;;		_setDimmerLights_SwOff
 17912 ;;		_setDimmerLights_AdjOn
 17913 ;;		_setDimmerLights_Main
 17914 ;;		_getDimmerLights_Status
 17915 ;;		_getAll_DimmerLights_AdjSw
 17916 ;;		_setDimmerLights_ErrorClose
 17917 ;;		_setDimmerLights_AdjRF
 17918 ;;		_setDimmerLights_Status
 17919 ;;		_setDimmerLights_GO
 17920 ;;		_setDimmerLights_MaxmumValue
 17921 ;;		_setDimmerLights_Trigger
 17922 ;; This function uses a non-reentrant model
 17923 ;;
 17924                           
 17925                           
 17926                           ;psect for function _DimmerLightsPointSelect
 17927  1DA8                     _DimmerLightsPointSelect:	
 17928                           
 17929                           ;incstack = 0
 17930                           ; Regs used in _DimmerLightsPointSelect: [wreg]
 17931                           ;DimmerLightsPointSelect@lights stored from wreg
 17932  1DA8  00F4               	movwf	DimmerLightsPointSelect@lights
 17933                           
 17934                           ;Dimmer_B1.c: 419: if (lights == 1) {
 17935  1DA9  0874               	movf	DimmerLightsPointSelect@lights,w
 17936  1DAA  3A01               	xorlw	1
 17937  1DAB  1D03               	skipz
 17938  1DAC  2DB4               	goto	l780
 17939                           
 17940                           ;Dimmer_B1.c: 420: DimmerLights = &DimmerLights1;
 17941  1DAD  3053               	movlw	_DimmerLights1& (0+255)
 17942  1DAE  00F3               	movwf	??_DimmerLightsPointSelect
 17943  1DAF  0873               	movf	??_DimmerLightsPointSelect,w
 17944  1DB0  0020               	movlb	0	; select bank0
 17945  1DB1  00ED               	movwf	_DimmerLights
 17946                           
 17947                           ;Dimmer_B1.c: 421: __nop();
 17948  1DB2  0000               	nop
 17949                           
 17950                           ;Dimmer_B1.c: 422: __nop();
 17951  1DB3  0000               	nop
 17952  1DB4                     l780:	
 17953                           
 17954                           ;Dimmer_B1.c: 423: }
 17955                           ;Dimmer_B1.c: 426: if (lights == 2) {
 17956  1DB4  0874               	movf	DimmerLightsPointSelect@lights,w
 17957  1DB5  3A02               	xorlw	2
 17958  1DB6  1D03               	skipz
 17959  1DB7  0008               	return
 17960                           
 17961                           ;Dimmer_B1.c: 427: DimmerLights = &DimmerLights2;
 17962  1DB8  30BE               	movlw	_DimmerLights2& (0+255)
 17963  1DB9  00F3               	movwf	??_DimmerLightsPointSelect
 17964  1DBA  0873               	movf	??_DimmerLightsPointSelect,w
 17965  1DBB  0020               	movlb	0	; select bank0
 17966  1DBC  00ED               	movwf	_DimmerLights
 17967                           
 17968                           ;Dimmer_B1.c: 428: __nop();
 17969  1DBD  0000               	nop
 17970                           
 17971                           ;Dimmer_B1.c: 429: __nop();
 17972  1DBE  0000               	nop
 17973  1DBF  0008               	return
 17974  1DC0                     __end_of_DimmerLightsPointSelect:	
 17975                           
 17976                           	psect	text124
 17977  15DF                     __ptext124:	
 17978 ;; *************** function _setBuz *****************
 17979 ;; Defined at:
 17980 ;;		line 22 in file "../src/Buzzer_B1.c"
 17981 ;; Parameters:    Size  Location     Type
 17982 ;;  count           1    wreg     unsigned char 
 17983 ;;  time            2    4[BANK0 ] int 
 17984 ;; Auto vars:     Size  Location     Type
 17985 ;;  count           1    7[BANK0 ] unsigned char 
 17986 ;; Return value:  Size  Location     Type
 17987 ;;		None               void
 17988 ;; Registers used:
 17989 ;;		wreg, status,2, status,0, pclath, cstack
 17990 ;; Tracked objects:
 17991 ;;		On entry : 0/0
 17992 ;;		On exit  : 0/0
 17993 ;;		Unchanged: 0/0
 17994 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17995 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17996 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17997 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17998 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17999 ;;Total ram usage:        4 bytes
 18000 ;; Hardware stack levels used:    1
 18001 ;; Hardware stack levels required when called:    4
 18002 ;; This function calls:
 18003 ;;		___awdiv
 18004 ;; This function is called by:
 18005 ;;		_DlyOff_Main
 18006 ;;		_setDimmerLights_SwOn
 18007 ;;		_setDimmerLights_Adj
 18008 ;;		_my_MainTimer
 18009 ;;		_Exception_Main
 18010 ;;		_setTemp_Main
 18011 ;;		_setLog_Code
 18012 ;;		_setControl_Lights_Table
 18013 ;;		_setRFSW_Control
 18014 ;;		_setSw_Main
 18015 ;; This function uses a non-reentrant model
 18016 ;;
 18017                           
 18018                           
 18019                           ;psect for function _setBuz
 18020  15DF                     _setBuz:	
 18021                           
 18022                           ;incstack = 0
 18023                           ; Regs used in _setBuz: [wreg+status,2+status,0+pclath+cstack]
 18024                           ;setBuz@count stored from wreg
 18025  15DF  0020               	movlb	0	; select bank0
 18026  15E0  00A7               	movwf	setBuz@count
 18027                           
 18028                           ;Buzzer_B1.c: 23: time /= 20;
 18029  15E1  3014               	movlw	20
 18030  15E2  00F3               	movwf	___awdiv@divisor
 18031  15E3  3000               	movlw	0
 18032  15E4  00F4               	movwf	___awdiv@divisor+1
 18033  15E5  0825               	movf	setBuz@time+1,w
 18034  15E6  01F6               	clrf	___awdiv@dividend+1
 18035  15E7  07F6               	addwf	___awdiv@dividend+1,f
 18036  15E8  0824               	movf	setBuz@time,w
 18037  15E9  01F5               	clrf	___awdiv@dividend
 18038  15EA  07F5               	addwf	___awdiv@dividend,f
 18039  15EB  3188  2003  3195   	fcall	___awdiv
 18040  15EE  0874               	movf	?___awdiv+1,w
 18041  15EF  0020               	movlb	0	; select bank0
 18042  15F0  01A5               	clrf	setBuz@time+1
 18043  15F1  07A5               	addwf	setBuz@time+1,f
 18044  15F2  0873               	movf	?___awdiv,w
 18045  15F3  01A4               	clrf	setBuz@time
 18046  15F4  07A4               	addwf	setBuz@time,f
 18047                           
 18048                           ;Buzzer_B1.c: 24: if (Buz1.Enable == 1) {
 18049  15F5  0021               	movlb	1	; select bank1
 18050  15F6  1C3C               	btfss	_Buz1^(0+128),0
 18051  15F7  0008               	return
 18052                           
 18053                           ;Buzzer_B1.c: 25: if (Buz1.GO == 0) {
 18054  15F8  18BC               	btfsc	_Buz1^(0+128),1
 18055  15F9  2E10               	goto	l96
 18056                           
 18057                           ;Buzzer_B1.c: 26: Buz1.GO = 1;
 18058  15FA  14BC               	bsf	_Buz1^(0+128),1
 18059                           
 18060                           ;Buzzer_B1.c: 27: Buz1.Counter = 0;
 18061  15FB  01BD               	clrf	(_Buz1^(0+128)+1)
 18062  15FC  01BE               	clrf	((_Buz1+1)^(0+128)+1)
 18063                           
 18064                           ;Buzzer_B1.c: 28: Buz1.Count = count;
 18065  15FD  0020               	movlb	0	; select bank0
 18066  15FE  0827               	movf	setBuz@count,w
 18067  15FF  00A6               	movwf	??_setBuz
 18068  1600  0826               	movf	??_setBuz,w
 18069  1601  0021               	movlb	1	; select bank1
 18070  1602  00BF               	movwf	(_Buz1^(0+128)+3)
 18071                           
 18072                           ;Buzzer_B1.c: 29: Buz1.TimeValue = time;
 18073  1603  0020               	movlb	0	; select bank0
 18074  1604  0825               	movf	setBuz@time+1,w
 18075  1605  0021               	movlb	1	; select bank1
 18076  1606  01C3               	clrf	((_Buz1+1)^(0+128)+6)
 18077  1607  07C3               	addwf	((_Buz1+1)^(0+128)+6),f
 18078  1608  0020               	movlb	0	; select bank0
 18079  1609  0824               	movf	setBuz@time,w
 18080  160A  0021               	movlb	1	; select bank1
 18081  160B  01C2               	clrf	(_Buz1^(0+128)+6)
 18082  160C  07C2               	addwf	(_Buz1^(0+128)+6),f
 18083                           
 18084                           ;Buzzer_B1.c: 30: RB3 = 1;
 18085  160D  0020               	movlb	0	; select bank0
 18086  160E  158D               	bsf	13,3	;volatile
 18087                           
 18088                           ;Buzzer_B1.c: 31: } else {
 18089  160F  0008               	return
 18090  1610                     l96:	
 18091                           
 18092                           ;Buzzer_B1.c: 32: if (Buz1.BufferStatus1 == 0) {
 18093  1610  19BC               	btfsc	_Buz1^(0+128),3
 18094  1611  2E24               	goto	l98
 18095                           
 18096                           ;Buzzer_B1.c: 33: Buz1.BufferStatus1 = 1;
 18097  1612  15BC               	bsf	_Buz1^(0+128),3
 18098                           
 18099                           ;Buzzer_B1.c: 34: Buz1.CountBuffer1 = count;
 18100  1613  0020               	movlb	0	; select bank0
 18101  1614  0827               	movf	setBuz@count,w
 18102  1615  00A6               	movwf	??_setBuz
 18103  1616  0826               	movf	??_setBuz,w
 18104  1617  0021               	movlb	1	; select bank1
 18105  1618  00C0               	movwf	(_Buz1^(0+128)+4)
 18106                           
 18107                           ;Buzzer_B1.c: 35: Buz1.TimeValueBuffer1 = time;
 18108  1619  0020               	movlb	0	; select bank0
 18109  161A  0825               	movf	setBuz@time+1,w
 18110  161B  0021               	movlb	1	; select bank1
 18111  161C  01C5               	clrf	((_Buz1+1)^(0+128)+8)
 18112  161D  07C5               	addwf	((_Buz1+1)^(0+128)+8),f
 18113  161E  0020               	movlb	0	; select bank0
 18114  161F  0824               	movf	setBuz@time,w
 18115  1620  0021               	movlb	1	; select bank1
 18116  1621  01C4               	clrf	(_Buz1^(0+128)+8)
 18117  1622  07C4               	addwf	(_Buz1^(0+128)+8),f
 18118                           
 18119                           ;Buzzer_B1.c: 36: } else if (Buz1.BufferStatus2 == 0) {
 18120  1623  0008               	return
 18121  1624                     l98:	
 18122  1624  1A3C               	btfsc	_Buz1^(0+128),4
 18123  1625  0008               	return
 18124                           
 18125                           ;Buzzer_B1.c: 37: Buz1.BufferStatus2 = 1;
 18126  1626  163C               	bsf	_Buz1^(0+128),4
 18127                           
 18128                           ;Buzzer_B1.c: 38: Buz1.CountBuffer2 = count;
 18129  1627  0020               	movlb	0	; select bank0
 18130  1628  0827               	movf	setBuz@count,w
 18131  1629  00A6               	movwf	??_setBuz
 18132  162A  0826               	movf	??_setBuz,w
 18133  162B  0021               	movlb	1	; select bank1
 18134  162C  00C1               	movwf	(_Buz1^(0+128)+5)
 18135                           
 18136                           ;Buzzer_B1.c: 39: Buz1.TimeValueBuffer2 = time;
 18137  162D  0020               	movlb	0	; select bank0
 18138  162E  0825               	movf	setBuz@time+1,w
 18139  162F  0021               	movlb	1	; select bank1
 18140  1630  01C7               	clrf	((_Buz1+1)^(0+128)+10)
 18141  1631  07C7               	addwf	((_Buz1+1)^(0+128)+10),f
 18142  1632  0020               	movlb	0	; select bank0
 18143  1633  0824               	movf	setBuz@time,w
 18144  1634  0021               	movlb	1	; select bank1
 18145  1635  01C6               	clrf	(_Buz1^(0+128)+10)
 18146  1636  07C6               	addwf	(_Buz1^(0+128)+10),f
 18147  1637  0008               	return
 18148  1638                     __end_of_setBuz:	
 18149                           
 18150                           	psect	text125
 18151  0803                     __ptext125:	
 18152 ;; *************** function ___awdiv *****************
 18153 ;; Defined at:
 18154 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awdiv.c"
 18155 ;; Parameters:    Size  Location     Type
 18156 ;;  divisor         2    3[COMMON] int 
 18157 ;;  dividend        2    5[COMMON] int 
 18158 ;; Auto vars:     Size  Location     Type
 18159 ;;  quotient        2    2[BANK0 ] int 
 18160 ;;  sign            1    1[BANK0 ] unsigned char 
 18161 ;;  counter         1    0[BANK0 ] unsigned char 
 18162 ;; Return value:  Size  Location     Type
 18163 ;;                  2    3[COMMON] int 
 18164 ;; Registers used:
 18165 ;;		wreg, status,2, status,0
 18166 ;; Tracked objects:
 18167 ;;		On entry : 0/0
 18168 ;;		On exit  : 0/0
 18169 ;;		Unchanged: 0/0
 18170 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18171 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18172 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18173 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18174 ;;      Totals:         5       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18175 ;;Total ram usage:        9 bytes
 18176 ;; Hardware stack levels used:    1
 18177 ;; Hardware stack levels required when called:    3
 18178 ;; This function calls:
 18179 ;;		Nothing
 18180 ;; This function is called by:
 18181 ;;		_setBuz
 18182 ;; This function uses a non-reentrant model
 18183 ;;
 18184                           
 18185                           
 18186                           ;psect for function ___awdiv
 18187  0803                     ___awdiv:	
 18188                           
 18189                           ;incstack = 0
 18190                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 18191  0803  0020               	movlb	0	; select bank0
 18192  0804  01A1               	clrf	___awdiv@sign
 18193  0805  1FF4               	btfss	___awdiv@divisor+1,7
 18194  0806  280E               	goto	l9026
 18195  0807  09F3               	comf	___awdiv@divisor,f
 18196  0808  09F4               	comf	___awdiv@divisor+1,f
 18197  0809  0AF3               	incf	___awdiv@divisor,f
 18198  080A  1903               	skipnz
 18199  080B  0AF4               	incf	___awdiv@divisor+1,f
 18200  080C  01A1               	clrf	___awdiv@sign
 18201  080D  0AA1               	incf	___awdiv@sign,f
 18202  080E                     l9026:	
 18203  080E  1FF6               	btfss	___awdiv@dividend+1,7
 18204  080F  2819               	goto	l9032
 18205  0810  09F5               	comf	___awdiv@dividend,f
 18206  0811  09F6               	comf	___awdiv@dividend+1,f
 18207  0812  0AF5               	incf	___awdiv@dividend,f
 18208  0813  1903               	skipnz
 18209  0814  0AF6               	incf	___awdiv@dividend+1,f
 18210  0815  3001               	movlw	1
 18211  0816  00F7               	movwf	??___awdiv
 18212  0817  0877               	movf	??___awdiv,w
 18213  0818  06A1               	xorwf	___awdiv@sign,f
 18214  0819                     l9032:	
 18215  0819  01A2               	clrf	___awdiv@quotient
 18216  081A  01A3               	clrf	___awdiv@quotient+1
 18217  081B  0874               	movf	___awdiv@divisor+1,w
 18218  081C  0473               	iorwf	___awdiv@divisor,w
 18219  081D  1903               	skipnz
 18220  081E  2848               	goto	l9054
 18221  081F  01A0               	clrf	___awdiv@counter
 18222  0820  0AA0               	incf	___awdiv@counter,f
 18223  0821                     l9042:	
 18224  0821  1BF4               	btfsc	___awdiv@divisor+1,7
 18225  0822  282D               	goto	l9044
 18226  0823  3001               	movlw	1
 18227  0824                     u9565:	
 18228  0824  35F3               	lslf	___awdiv@divisor,f
 18229  0825  0DF4               	rlf	___awdiv@divisor+1,f
 18230  0826  0B89               	decfsz	9,f
 18231  0827  2824               	goto	u9565
 18232  0828  3001               	movlw	1
 18233  0829  00F7               	movwf	??___awdiv
 18234  082A  0877               	movf	??___awdiv,w
 18235  082B  07A0               	addwf	___awdiv@counter,f
 18236  082C  2821               	goto	l9042
 18237  082D                     l9044:	
 18238  082D  3001               	movlw	1
 18239  082E                     u9585:	
 18240  082E  35A2               	lslf	___awdiv@quotient,f
 18241  082F  0DA3               	rlf	___awdiv@quotient+1,f
 18242  0830  0B89               	decfsz	9,f
 18243  0831  282E               	goto	u9585
 18244  0832  0874               	movf	___awdiv@divisor+1,w
 18245  0833  0276               	subwf	___awdiv@dividend+1,w
 18246  0834  1D03               	skipz
 18247  0835  2838               	goto	u9595
 18248  0836  0873               	movf	___awdiv@divisor,w
 18249  0837  0275               	subwf	___awdiv@dividend,w
 18250  0838                     u9595:	
 18251  0838  1C03               	skipc
 18252  0839  283F               	goto	l9050
 18253  083A  0873               	movf	___awdiv@divisor,w
 18254  083B  02F5               	subwf	___awdiv@dividend,f
 18255  083C  0874               	movf	___awdiv@divisor+1,w
 18256  083D  3BF6               	subwfb	___awdiv@dividend+1,f
 18257  083E  1422               	bsf	___awdiv@quotient,0
 18258  083F                     l9050:	
 18259  083F  3001               	movlw	1
 18260  0840                     u9605:	
 18261  0840  36F4               	lsrf	___awdiv@divisor+1,f
 18262  0841  0CF3               	rrf	___awdiv@divisor,f
 18263  0842  0B89               	decfsz	9,f
 18264  0843  2840               	goto	u9605
 18265  0844  3001               	movlw	1
 18266  0845  02A0               	subwf	___awdiv@counter,f
 18267  0846  1D03               	btfss	3,2
 18268  0847  282D               	goto	l9044
 18269  0848                     l9054:	
 18270  0848  0821               	movf	___awdiv@sign,w
 18271  0849  1903               	btfsc	3,2
 18272  084A  2850               	goto	l9058
 18273  084B  09A2               	comf	___awdiv@quotient,f
 18274  084C  09A3               	comf	___awdiv@quotient+1,f
 18275  084D  0AA2               	incf	___awdiv@quotient,f
 18276  084E  1903               	skipnz
 18277  084F  0AA3               	incf	___awdiv@quotient+1,f
 18278  0850                     l9058:	
 18279  0850  0823               	movf	___awdiv@quotient+1,w
 18280  0851  01F4               	clrf	?___awdiv+1
 18281  0852  07F4               	addwf	?___awdiv+1,f
 18282  0853  0822               	movf	___awdiv@quotient,w
 18283  0854  01F3               	clrf	?___awdiv
 18284  0855  07F3               	addwf	?___awdiv,f
 18285  0856  0008               	return
 18286  0857                     __end_of___awdiv:	
 18287                           
 18288                           	psect	text126
 18289  1B1F                     __ptext126:	
 18290 ;; *************** function _DelayOff_Initialization *****************
 18291 ;; Defined at:
 18292 ;;		line 26 in file "../src/DelayOff_B1.c"
 18293 ;; Parameters:    Size  Location     Type
 18294 ;;		None
 18295 ;; Auto vars:     Size  Location     Type
 18296 ;;		None
 18297 ;; Return value:  Size  Location     Type
 18298 ;;		None               void
 18299 ;; Registers used:
 18300 ;;		wreg, status,2, status,0, pclath, cstack
 18301 ;; Tracked objects:
 18302 ;;		On entry : 0/0
 18303 ;;		On exit  : 0/0
 18304 ;;		Unchanged: 0/0
 18305 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18306 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18307 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18308 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18309 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18310 ;;Total ram usage:        0 bytes
 18311 ;; Hardware stack levels used:    1
 18312 ;; Hardware stack levels required when called:    5
 18313 ;; This function calls:
 18314 ;;		_DlyOff_Initialization
 18315 ;; This function is called by:
 18316 ;;		_main
 18317 ;; This function uses a non-reentrant model
 18318 ;;
 18319                           
 18320                           
 18321                           ;psect for function _DelayOff_Initialization
 18322  1B1F                     _DelayOff_Initialization:	
 18323                           
 18324                           ;DelayOff_B1.c: 28: DlyOff_Initialization(1);
 18325                           
 18326                           ;incstack = 0
 18327                           ; Regs used in _DelayOff_Initialization: [wreg+status,2+status,0+pclath+cstack]
 18328  1B1F  3001               	movlw	1
 18329  1B20  319A  22E6  319B   	fcall	_DlyOff_Initialization
 18330                           
 18331                           ;DelayOff_B1.c: 32: DlyOff_Initialization(2);
 18332  1B23  3002               	movlw	2
 18333  1B24  319A  22E6         	fcall	_DlyOff_Initialization
 18334  1B26  0008               	return
 18335  1B27                     __end_of_DelayOff_Initialization:	
 18336                           
 18337                           	psect	text127
 18338  1AE6                     __ptext127:	
 18339 ;; *************** function _DlyOff_Initialization *****************
 18340 ;; Defined at:
 18341 ;;		line 56 in file "../src/DelayOff_B1.c"
 18342 ;; Parameters:    Size  Location     Type
 18343 ;;  sw              1    wreg     unsigned char 
 18344 ;; Auto vars:     Size  Location     Type
 18345 ;;  sw              1    5[COMMON] unsigned char 
 18346 ;; Return value:  Size  Location     Type
 18347 ;;		None               void
 18348 ;; Registers used:
 18349 ;;		wreg, status,2, status,0, pclath, cstack
 18350 ;; Tracked objects:
 18351 ;;		On entry : 0/0
 18352 ;;		On exit  : 0/0
 18353 ;;		Unchanged: 0/0
 18354 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18355 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18356 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18357 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18358 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18359 ;;Total ram usage:        1 bytes
 18360 ;; Hardware stack levels used:    1
 18361 ;; Hardware stack levels required when called:    4
 18362 ;; This function calls:
 18363 ;;		_DelayOffPointSelect
 18364 ;; This function is called by:
 18365 ;;		_DelayOff_Initialization
 18366 ;; This function uses a non-reentrant model
 18367 ;;
 18368                           
 18369                           
 18370                           ;psect for function _DlyOff_Initialization
 18371  1AE6                     _DlyOff_Initialization:	
 18372                           
 18373                           ;incstack = 0
 18374                           ; Regs used in _DlyOff_Initialization: [wreg+status,2+status,0+pclath+cstack]
 18375                           ;DlyOff_Initialization@sw stored from wreg
 18376  1AE6  00F5               	movwf	DlyOff_Initialization@sw
 18377                           
 18378                           ;DelayOff_B1.c: 57: DelayOffPointSelect(sw);
 18379  1AE7  0875               	movf	DlyOff_Initialization@sw,w
 18380  1AE8  319C  24ED         	fcall	_DelayOffPointSelect
 18381  1AEA  0008               	return
 18382  1AEB                     __end_of_DlyOff_Initialization:	
 18383                           
 18384                           	psect	text128
 18385  1CED                     __ptext128:	
 18386 ;; *************** function _DelayOffPointSelect *****************
 18387 ;; Defined at:
 18388 ;;		line 7 in file "../src/DelayOff_B1.c"
 18389 ;; Parameters:    Size  Location     Type
 18390 ;;  sw              1    wreg     unsigned char 
 18391 ;; Auto vars:     Size  Location     Type
 18392 ;;  sw              1    4[COMMON] unsigned char 
 18393 ;; Return value:  Size  Location     Type
 18394 ;;		None               void
 18395 ;; Registers used:
 18396 ;;		wreg
 18397 ;; Tracked objects:
 18398 ;;		On entry : 0/0
 18399 ;;		On exit  : 0/0
 18400 ;;		Unchanged: 0/0
 18401 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18402 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18403 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18404 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18405 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18406 ;;Total ram usage:        2 bytes
 18407 ;; Hardware stack levels used:    1
 18408 ;; Hardware stack levels required when called:    3
 18409 ;; This function calls:
 18410 ;;		Nothing
 18411 ;; This function is called by:
 18412 ;;		_DlyOff_Initialization
 18413 ;;		_DlyOff_Main
 18414 ;;		_setDelayOff_GO
 18415 ;;		_getDelayOff_GO
 18416 ;; This function uses a non-reentrant model
 18417 ;;
 18418                           
 18419                           
 18420                           ;psect for function _DelayOffPointSelect
 18421  1CED                     _DelayOffPointSelect:	
 18422                           
 18423                           ;incstack = 0
 18424                           ; Regs used in _DelayOffPointSelect: [wreg]
 18425                           ;DelayOffPointSelect@sw stored from wreg
 18426  1CED  00F4               	movwf	DelayOffPointSelect@sw
 18427                           
 18428                           ;DelayOff_B1.c: 9: if (sw == 1) {
 18429  1CEE  0874               	movf	DelayOffPointSelect@sw,w
 18430  1CEF  3A01               	xorlw	1
 18431  1CF0  1D03               	skipz
 18432  1CF1  2CF7               	goto	l8974
 18433                           
 18434                           ;DelayOff_B1.c: 10: DelayOff = &DlySw1;
 18435  1CF2  30E1               	movlw	_DlySw1& (0+255)
 18436  1CF3  00F3               	movwf	??_DelayOffPointSelect
 18437  1CF4  0873               	movf	??_DelayOffPointSelect,w
 18438  1CF5  00F9               	movwf	_DelayOff
 18439                           
 18440                           ;DelayOff_B1.c: 11: }
 18441  1CF6  0008               	return
 18442  1CF7                     l8974:	
 18443                           
 18444                           ;DelayOff_B1.c: 14: else if (sw == 2) {
 18445  1CF7  0874               	movf	DelayOffPointSelect@sw,w
 18446  1CF8  3A02               	xorlw	2
 18447  1CF9  1D03               	skipz
 18448  1CFA  0008               	return
 18449                           
 18450                           ;DelayOff_B1.c: 15: DelayOff = &DlySw2;
 18451  1CFB  30E6               	movlw	_DlySw2& (0+255)
 18452  1CFC  00F3               	movwf	??_DelayOffPointSelect
 18453  1CFD  0873               	movf	??_DelayOffPointSelect,w
 18454  1CFE  00F9               	movwf	_DelayOff
 18455  1CFF  0008               	return
 18456  1D00                     __end_of_DelayOffPointSelect:	
 18457                           
 18458                           	psect	text129
 18459  13B6                     __ptext129:	
 18460 ;; *************** function _Buzzer_Main *****************
 18461 ;; Defined at:
 18462 ;;		line 46 in file "../src/Buzzer_B1.c"
 18463 ;; Parameters:    Size  Location     Type
 18464 ;;		None
 18465 ;; Auto vars:     Size  Location     Type
 18466 ;;		None
 18467 ;; Return value:  Size  Location     Type
 18468 ;;		None               void
 18469 ;; Registers used:
 18470 ;;		wreg, status,2, status,0
 18471 ;; Tracked objects:
 18472 ;;		On entry : 0/0
 18473 ;;		On exit  : 0/0
 18474 ;;		Unchanged: 0/0
 18475 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18476 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18477 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18478 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18479 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18480 ;;Total ram usage:        1 bytes
 18481 ;; Hardware stack levels used:    1
 18482 ;; Hardware stack levels required when called:    3
 18483 ;; This function calls:
 18484 ;;		Nothing
 18485 ;; This function is called by:
 18486 ;;		_main
 18487 ;; This function uses a non-reentrant model
 18488 ;;
 18489                           
 18490                           
 18491                           ;psect for function _Buzzer_Main
 18492  13B6                     _Buzzer_Main:	
 18493                           
 18494                           ;Buzzer_B1.c: 47: if (Buz1.GO == 1) {
 18495                           
 18496                           ;incstack = 0
 18497                           ; Regs used in _Buzzer_Main: [wreg+status,2+status,0]
 18498  13B6  0021               	movlb	1	; select bank1
 18499  13B7  1CBC               	btfss	_Buz1^(0+128),1
 18500  13B8  0008               	return
 18501                           
 18502                           ;Buzzer_B1.c: 48: Buz1.Counter++;
 18503  13B9  3001               	movlw	1
 18504  13BA  07BD               	addwf	(_Buz1^(0+128)+1),f
 18505  13BB  3000               	movlw	0
 18506  13BC  3DBE               	addwfc	((_Buz1+1)^(0+128)+1),f
 18507                           
 18508                           ;Buzzer_B1.c: 49: if (Buz1.Counter >= Buz1.TimeValue) {
 18509  13BD  0843               	movf	((_Buz1+1)^(0+128)+6),w
 18510  13BE  023E               	subwf	((_Buz1+1)^(0+128)+1),w
 18511  13BF  1D03               	skipz
 18512  13C0  2BC3               	goto	u7795
 18513  13C1  0842               	movf	(_Buz1^(0+128)+6),w
 18514  13C2  023D               	subwf	(_Buz1^(0+128)+1),w
 18515  13C3                     u7795:	
 18516  13C3  1C03               	skipc
 18517  13C4  0008               	return
 18518                           
 18519                           ;Buzzer_B1.c: 50: Buz1.Counter = 0;
 18520  13C5  01BD               	clrf	(_Buz1^(0+128)+1)
 18521  13C6  01BE               	clrf	((_Buz1+1)^(0+128)+1)
 18522                           
 18523                           ;Buzzer_B1.c: 51: Buz1.Switch = (RB3 == 1) ? 1 : 0;
 18524  13C7  12BC               	bcf	_Buz1^(0+128),5
 18525  13C8  0020               	movlb	0	; select bank0
 18526  13C9  1D8D               	btfss	13,3	;volatile
 18527  13CA  2BCD               	goto	l7996
 18528  13CB  0021               	movlb	1	; select bank1
 18529  13CC  16BC               	bsf	_Buz1^(0+128),5
 18530  13CD                     l7996:	
 18531                           
 18532                           ;Buzzer_B1.c: 52: if (Buz1.Switch == 0) {
 18533  13CD  0021               	movlb	1	; select bank1
 18534  13CE  1ABC               	btfsc	_Buz1^(0+128),5
 18535  13CF  2BF5               	goto	l106
 18536                           
 18537                           ;Buzzer_B1.c: 53: if (Buz1.Count == 0) {
 18538  13D0  08BF               	movf	(_Buz1^(0+128)+3),f
 18539  13D1  1D03               	skipz
 18540  13D2  2BF1               	goto	l107
 18541                           
 18542                           ;Buzzer_B1.c: 54: if (Buz1.BufferStatus1 == 1) {
 18543  13D3  1DBC               	btfss	_Buz1^(0+128),3
 18544  13D4  2BE1               	goto	l108
 18545                           
 18546                           ;Buzzer_B1.c: 55: Buz1.BufferStatus1 = 0;
 18547  13D5  11BC               	bcf	_Buz1^(0+128),3
 18548                           
 18549                           ;Buzzer_B1.c: 56: Buz1.Count = Buz1.CountBuffer1;
 18550  13D6  0840               	movf	(_Buz1^(0+128)+4),w
 18551  13D7  00F3               	movwf	??_Buzzer_Main
 18552  13D8  0873               	movf	??_Buzzer_Main,w
 18553  13D9  00BF               	movwf	(_Buz1^(0+128)+3)
 18554                           
 18555                           ;Buzzer_B1.c: 57: Buz1.TimeValue = Buz1.TimeValueBuffer1;
 18556  13DA  0845               	movf	((_Buz1+1)^(0+128)+8),w
 18557  13DB  01C3               	clrf	((_Buz1+1)^(0+128)+6)
 18558  13DC  07C3               	addwf	((_Buz1+1)^(0+128)+6),f
 18559  13DD  0844               	movf	(_Buz1^(0+128)+8),w
 18560  13DE  01C2               	clrf	(_Buz1^(0+128)+6)
 18561  13DF  07C2               	addwf	(_Buz1^(0+128)+6),f
 18562                           
 18563                           ;Buzzer_B1.c: 58: } else if (Buz1.BufferStatus2 == 1) {
 18564  13E0  0008               	return
 18565  13E1                     l108:	
 18566  13E1  1E3C               	btfss	_Buz1^(0+128),4
 18567  13E2  2BEF               	goto	l110
 18568                           
 18569                           ;Buzzer_B1.c: 59: Buz1.BufferStatus2 = 0;
 18570  13E3  123C               	bcf	_Buz1^(0+128),4
 18571                           
 18572                           ;Buzzer_B1.c: 60: Buz1.Count = Buz1.CountBuffer2;
 18573  13E4  0841               	movf	(_Buz1^(0+128)+5),w
 18574  13E5  00F3               	movwf	??_Buzzer_Main
 18575  13E6  0873               	movf	??_Buzzer_Main,w
 18576  13E7  00BF               	movwf	(_Buz1^(0+128)+3)
 18577                           
 18578                           ;Buzzer_B1.c: 61: Buz1.TimeValue = Buz1.TimeValueBuffer2;
 18579  13E8  0847               	movf	((_Buz1+1)^(0+128)+10),w
 18580  13E9  01C3               	clrf	((_Buz1+1)^(0+128)+6)
 18581  13EA  07C3               	addwf	((_Buz1+1)^(0+128)+6),f
 18582  13EB  0846               	movf	(_Buz1^(0+128)+10),w
 18583  13EC  01C2               	clrf	(_Buz1^(0+128)+6)
 18584  13ED  07C2               	addwf	(_Buz1^(0+128)+6),f
 18585                           
 18586                           ;Buzzer_B1.c: 62: } else {
 18587  13EE  0008               	return
 18588  13EF                     l110:	
 18589                           
 18590                           ;Buzzer_B1.c: 63: Buz1.GO = 0;
 18591  13EF  10BC               	bcf	_Buz1^(0+128),1
 18592                           
 18593                           ;Buzzer_B1.c: 64: }
 18594                           ;Buzzer_B1.c: 65: } else {
 18595  13F0  0008               	return
 18596  13F1                     l107:	
 18597                           
 18598                           ;Buzzer_B1.c: 66: Buz1.Switch = 1;
 18599  13F1  16BC               	bsf	_Buz1^(0+128),5
 18600                           
 18601                           ;Buzzer_B1.c: 68: RB3 = 1;
 18602  13F2  0020               	movlb	0	; select bank0
 18603  13F3  158D               	bsf	13,3	;volatile
 18604                           
 18605                           ;Buzzer_B1.c: 69: }
 18606                           ;Buzzer_B1.c: 70: } else {
 18607  13F4  0008               	return
 18608  13F5                     l106:	
 18609                           
 18610                           ;Buzzer_B1.c: 71: Buz1.Switch = 0;
 18611  13F5  12BC               	bcf	_Buz1^(0+128),5
 18612                           
 18613                           ;Buzzer_B1.c: 73: RB3 = 0;
 18614  13F6  0020               	movlb	0	; select bank0
 18615  13F7  118D               	bcf	13,3	;volatile
 18616                           
 18617                           ;Buzzer_B1.c: 75: Buz1.Count--;
 18618  13F8  3001               	movlw	1
 18619  13F9  0021               	movlb	1	; select bank1
 18620  13FA  02BF               	subwf	(_Buz1^(0+128)+3),f
 18621  13FB  0008               	return
 18622  13FC                     __end_of_Buzzer_Main:	
 18623                           
 18624                           	psect	text130
 18625  1AC3                     __ptext130:	
 18626 ;; *************** function _Buzzer_Initialization *****************
 18627 ;; Defined at:
 18628 ;;		line 11 in file "../src/Buzzer_B1.c"
 18629 ;; Parameters:    Size  Location     Type
 18630 ;;		None
 18631 ;; Auto vars:     Size  Location     Type
 18632 ;;		None
 18633 ;; Return value:  Size  Location     Type
 18634 ;;		None               void
 18635 ;; Registers used:
 18636 ;;		None
 18637 ;; Tracked objects:
 18638 ;;		On entry : 0/0
 18639 ;;		On exit  : 0/0
 18640 ;;		Unchanged: 0/0
 18641 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18642 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18643 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18644 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18645 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18646 ;;Total ram usage:        0 bytes
 18647 ;; Hardware stack levels used:    1
 18648 ;; Hardware stack levels required when called:    3
 18649 ;; This function calls:
 18650 ;;		Nothing
 18651 ;; This function is called by:
 18652 ;;		_main
 18653 ;; This function uses a non-reentrant model
 18654 ;;
 18655                           
 18656                           
 18657                           ;psect for function _Buzzer_Initialization
 18658  1AC3                     _Buzzer_Initialization:	
 18659                           
 18660                           ;Buzzer_B1.c: 13: Buz1.Enable = 1;
 18661                           
 18662                           ;incstack = 0
 18663                           ; Regs used in _Buzzer_Initialization: []
 18664  1AC3  0021               	movlb	1	; select bank1
 18665  1AC4  143C               	bsf	_Buz1^(0+128),0
 18666  1AC5  0008               	return
 18667  1AC6                     __end_of_Buzzer_Initialization:	
 18668                           
 18669                           	psect	intentry
 18670  0004                     __pintentry:	
 18671 ;; *************** function _ISR *****************
 18672 ;; Defined at:
 18673 ;;		line 112 in file "../src/MCU_B1.c"
 18674 ;; Parameters:    Size  Location     Type
 18675 ;;		None
 18676 ;; Auto vars:     Size  Location     Type
 18677 ;;		None
 18678 ;; Return value:  Size  Location     Type
 18679 ;;		None               void
 18680 ;; Registers used:
 18681 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18682 ;; Tracked objects:
 18683 ;;		On entry : 0/0
 18684 ;;		On exit  : 0/0
 18685 ;;		Unchanged: 0/0
 18686 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18687 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18688 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18689 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18690 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18691 ;;Total ram usage:        1 bytes
 18692 ;; Hardware stack levels used:    1
 18693 ;; Hardware stack levels required when called:    2
 18694 ;; This function calls:
 18695 ;;		_IOC_ISR
 18696 ;;		_TMR1_ISR
 18697 ;; This function is called by:
 18698 ;;		Interrupt level 1
 18699 ;; This function uses a non-reentrant model
 18700 ;;
 18701                           
 18702  0004                     _ISR:	
 18703                           
 18704                           ;incstack = 0
 18705                           ; Regs used in _ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 18706  0004  147E               	bsf	126,0	;set compiler interrupt flag
 18707  0005  3180               	pagesel	$
 18708  0006  0020               	movlb	0	; select bank0
 18709  0007  087F               	movf	127,w
 18710  0008  00F2               	movwf	??_ISR
 18711                           
 18712                           ;MCU_B1.c: 115: if (IOCIE == 1 && IOCIF == 1 && IOCBF2 == 1) {
 18713  0009  198B               	btfsc	11,3	;volatile
 18714  000A  1C0B               	btfss	11,0	;volatile
 18715  000B  2813               	goto	i1l1308
 18716  000C  0027               	movlb	7	; select bank7
 18717  000D  1D16               	btfss	22,2	;volatile
 18718  000E  2813               	goto	i1l1308
 18719                           
 18720                           ;MCU_B1.c: 116: IOC_ISR();
 18721  000F  319B  23BE  3180   	fcall	_IOC_ISR
 18722                           
 18723                           ;MCU_B1.c: 117: }
 18724  0012  281B               	goto	i1l1311
 18725  0013                     i1l1308:	
 18726                           
 18727                           ;MCU_B1.c: 125: else if (TMR1IE == 1 && TMR1IF == 1) {
 18728  0013  0021               	movlb	1	; select bank1
 18729  0014  1C11               	btfss	17,0	;volatile
 18730  0015  281B               	goto	i1l1311
 18731  0016  0020               	movlb	0	; select bank0
 18732  0017  1C11               	btfss	17,0	;volatile
 18733  0018  281B               	goto	i1l1311
 18734                           
 18735                           ;MCU_B1.c: 126: TMR1_ISR();
 18736  0019  319F  2762         	fcall	_TMR1_ISR
 18737  001B                     i1l1311:	
 18738                           ;MCU_B1.c: 127: }
 18739                           ;MCU_B1.c: 143: return;
 18740                           
 18741  001B  0872               	movf	??_ISR,w
 18742  001C  0020               	movlb	0	; select bank0
 18743  001D  00FF               	movwf	127
 18744  001E  107E               	bcf	126,0	;clear compiler interrupt flag
 18745  001F  0009               	retfie
 18746  0020                     __end_of_ISR:	
 18747                           
 18748                           	psect	text132
 18749  1F62                     __ptext132:	
 18750 ;; *************** function _TMR1_ISR *****************
 18751 ;; Defined at:
 18752 ;;		line 231 in file "../src/MCU_B1.c"
 18753 ;; Parameters:    Size  Location     Type
 18754 ;;		None
 18755 ;; Auto vars:     Size  Location     Type
 18756 ;;		None
 18757 ;; Return value:  Size  Location     Type
 18758 ;;		None               void
 18759 ;; Registers used:
 18760 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18761 ;; Tracked objects:
 18762 ;;		On entry : 0/0
 18763 ;;		On exit  : 0/0
 18764 ;;		Unchanged: 0/0
 18765 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18766 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18767 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18768 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18769 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18770 ;;Total ram usage:        0 bytes
 18771 ;; Hardware stack levels used:    1
 18772 ;; Hardware stack levels required when called:    1
 18773 ;; This function calls:
 18774 ;;		_setDimmerLights_IntrControl
 18775 ;; This function is called by:
 18776 ;;		_ISR
 18777 ;; This function uses a non-reentrant model
 18778 ;;
 18779                           
 18780                           
 18781                           ;psect for function _TMR1_ISR
 18782  1F62                     _TMR1_ISR:	
 18783                           
 18784                           ;MCU_B1.c: 236: setDimmerLights_IntrControl(1);
 18785                           
 18786                           ;incstack = 0
 18787                           ; Regs used in _TMR1_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 18788  1F62  3001               	movlw	1
 18789  1F63  3183  2361  319F   	fcall	_setDimmerLights_IntrControl
 18790                           
 18791                           ;MCU_B1.c: 240: setDimmerLights_IntrControl(2);
 18792  1F66  3002               	movlw	2
 18793  1F67  3183  2361  319F   	fcall	_setDimmerLights_IntrControl
 18794                           
 18795                           ;MCU_B1.c: 249: Timer1.Count++;
 18796  1F6A  3001               	movlw	1
 18797  1F6B  0022               	movlb	2	; select bank2
 18798  1F6C  07A1               	addwf	(_Timer1^(0+256)+1),f
 18799  1F6D  3000               	movlw	0
 18800  1F6E  3DA2               	addwfc	((_Timer1+1)^(0+256)+1),f
 18801                           
 18802                           ;MCU_B1.c: 250: if (Timer1.Count == (int)(20*10)) {
 18803  1F6F  3001               	movlw	1
 18804  1F70  3E20               	addlw	_Timer1& (0+255)
 18805  1F71  0086               	movwf	6
 18806  1F72  3001               	movlw	1	; select bank2/3
 18807  1F73  0087               	movwf	7
 18808  1F74  3F40               	moviw [0]fsr1
 18809  1F75  3AC8               	xorlw	200
 18810  1F76  1D03               	skipz
 18811  1F77  2F7A               	goto	u790_25
 18812  1F78  3F41               	moviw [1]fsr1
 18813  1F79  3A00               	xorlw	0
 18814  1F7A                     u790_25:	
 18815  1F7A  1D03               	skipz
 18816  1F7B  2F7F               	goto	i1l8074
 18817                           
 18818                           ;MCU_B1.c: 251: Timer1.Count = 0;
 18819  1F7C  01A1               	clrf	(_Timer1^(0+256)+1)
 18820  1F7D  01A2               	clrf	((_Timer1+1)^(0+256)+1)
 18821                           
 18822                           ;MCU_B1.c: 252: Timer1.Timeout = 1;
 18823  1F7E  1420               	bsf	_Timer1^(0+256),0
 18824  1F7F                     i1l8074:	
 18825                           
 18826                           ;MCU_B1.c: 253: }
 18827                           ;MCU_B1.c: 255: TMR1H = (int)((65536-1480)/256);
 18828  1F7F  30FA               	movlw	250
 18829  1F80  0020               	movlb	0	; select bank0
 18830  1F81  0097               	movwf	23	;volatile
 18831                           
 18832                           ;MCU_B1.c: 256: TMR1L = (int)((65536-1480)%256);
 18833  1F82  3038               	movlw	56
 18834  1F83  0096               	movwf	22	;volatile
 18835                           
 18836                           ;MCU_B1.c: 257: TMR1IF = 0;
 18837  1F84  1011               	bcf	17,0	;volatile
 18838  1F85  0008               	return
 18839  1F86                     __end_of_TMR1_ISR:	
 18840                           
 18841                           	psect	text133
 18842  0361                     __ptext133:	
 18843 ;; *************** function _setDimmerLights_IntrControl *****************
 18844 ;; Defined at:
 18845 ;;		line 154 in file "../src/Dimmer_B1.c"
 18846 ;; Parameters:    Size  Location     Type
 18847 ;;  lights          1    wreg     unsigned char 
 18848 ;; Auto vars:     Size  Location     Type
 18849 ;;  lights          1    1[COMMON] unsigned char 
 18850 ;; Return value:  Size  Location     Type
 18851 ;;		None               void
 18852 ;; Registers used:
 18853 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
 18854 ;; Tracked objects:
 18855 ;;		On entry : 0/0
 18856 ;;		On exit  : 0/0
 18857 ;;		Unchanged: 0/0
 18858 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18859 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18860 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18861 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18862 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18863 ;;Total ram usage:        2 bytes
 18864 ;; Hardware stack levels used:    1
 18865 ;; This function calls:
 18866 ;;		Nothing
 18867 ;; This function is called by:
 18868 ;;		_TMR1_ISR
 18869 ;; This function uses a non-reentrant model
 18870 ;;
 18871                           
 18872                           
 18873                           ;psect for function _setDimmerLights_IntrControl
 18874  0361                     _setDimmerLights_IntrControl:	
 18875                           
 18876                           ;incstack = 0
 18877                           ; Regs used in _setDimmerLights_IntrControl: [wreg-fsr1h+status,2+status,0]
 18878                           ;setDimmerLights_IntrControl@lights stored from wreg
 18879  0361  00F1               	movwf	setDimmerLights_IntrControl@lights
 18880                           
 18881                           ;Dimmer_B1.c: 307: if (lights == 1) {
 18882  0362  0871               	movf	setDimmerLights_IntrControl@lights,w
 18883  0363  3A01               	xorlw	1
 18884  0364  1D03               	skipz
 18885  0365  2B6D               	goto	i1l7450
 18886                           
 18887                           ;Dimmer_B1.c: 308: DimmerLightsIntr = &DimmerLights1;
 18888  0366  3053               	movlw	_DimmerLights1& (0+255)
 18889  0367  00F0               	movwf	??_setDimmerLights_IntrControl
 18890  0368  0870               	movf	??_setDimmerLights_IntrControl,w
 18891  0369  00FA               	movwf	_DimmerLightsIntr
 18892                           
 18893                           ;Dimmer_B1.c: 309: __nop();
 18894  036A  0000               	nop
 18895                           
 18896                           ;Dimmer_B1.c: 310: __nop();
 18897  036B  0000               	nop
 18898                           
 18899                           ;Dimmer_B1.c: 311: }
 18900  036C  2B77               	goto	i1l7458
 18901  036D                     i1l7450:	
 18902                           
 18903                           ;Dimmer_B1.c: 314: else if (lights == 2) {
 18904  036D  0871               	movf	setDimmerLights_IntrControl@lights,w
 18905  036E  3A02               	xorlw	2
 18906  036F  1D03               	skipz
 18907  0370  2B77               	goto	i1l7458
 18908                           
 18909                           ;Dimmer_B1.c: 315: DimmerLightsIntr = &DimmerLights2;
 18910  0371  30BE               	movlw	_DimmerLights2& (0+255)
 18911  0372  00F0               	movwf	??_setDimmerLights_IntrControl
 18912  0373  0870               	movf	??_setDimmerLights_IntrControl,w
 18913  0374  00FA               	movwf	_DimmerLightsIntr
 18914                           
 18915                           ;Dimmer_B1.c: 316: __nop();
 18916  0375  0000               	nop
 18917                           
 18918                           ;Dimmer_B1.c: 317: __nop();
 18919  0376  0000               	nop
 18920  0377                     i1l7458:	
 18921                           
 18922                           ;Dimmer_B1.c: 318: }
 18923                           ;Dimmer_B1.c: 328: if (DimmerLightsIntr->IntrStart == 1) {
 18924  0377  087A               	movf	_DimmerLightsIntr,w
 18925  0378  3E02               	addlw	2
 18926  0379  0086               	movwf	6
 18927  037A  3001               	movlw	1	; select bank2/3
 18928  037B  0087               	movwf	7
 18929  037C  1D01               	btfss	1,2
 18930  037D  2B9C               	goto	i1l7468
 18931                           
 18932                           ;Dimmer_B1.c: 329: DimmerLightsIntr->Count++;
 18933  037E  3001               	movlw	1
 18934  037F  00F0               	movwf	??_setDimmerLights_IntrControl
 18935  0380  087A               	movf	_DimmerLightsIntr,w
 18936  0381  3E03               	addlw	3
 18937  0382  0086               	movwf	6
 18938  0383  3001               	movlw	1	; select bank2/3
 18939  0384  0087               	movwf	7
 18940  0385  0870               	movf	??_setDimmerLights_IntrControl,w
 18941  0386  0781               	addwf	1,f
 18942                           
 18943                           ;Dimmer_B1.c: 330: if (DimmerLightsIntr->Count >= ((char)(70*0.8)) + 1) {
 18944  0387  087A               	movf	_DimmerLightsIntr,w
 18945  0388  3E03               	addlw	3
 18946  0389  0086               	movwf	6
 18947  038A  3001               	movlw	1	; select bank2/3
 18948  038B  0087               	movwf	7
 18949  038C  3039               	movlw	57
 18950  038D  0201               	subwf	1,w
 18951  038E  1C03               	skipc
 18952  038F  2B9C               	goto	i1l7468
 18953                           
 18954                           ;Dimmer_B1.c: 331: DimmerLightsIntr->Count = 0;
 18955  0390  087A               	movf	_DimmerLightsIntr,w
 18956  0391  3E03               	addlw	3
 18957  0392  0086               	movwf	6
 18958  0393  3001               	movlw	1	; select bank2/3
 18959  0394  0087               	movwf	7
 18960  0395  0181               	clrf	1
 18961                           
 18962                           ;Dimmer_B1.c: 332: DimmerLightsIntr->IntrStart = 0;
 18963  0396  087A               	movf	_DimmerLightsIntr,w
 18964  0397  3E02               	addlw	2
 18965  0398  0086               	movwf	6
 18966  0399  3001               	movlw	1	; select bank2/3
 18967  039A  0087               	movwf	7
 18968  039B  1101               	bcf	1,2
 18969  039C                     i1l7468:	
 18970                           
 18971                           ;Dimmer_B1.c: 333: }
 18972                           ;Dimmer_B1.c: 334: }
 18973                           ;Dimmer_B1.c: 336: if (DimmerLightsIntr->GO == 1) {
 18974  039C  0A7A               	incf	_DimmerLightsIntr,w
 18975  039D  0086               	movwf	6
 18976  039E  3001               	movlw	1	; select bank2/3
 18977  039F  0087               	movwf	7
 18978  03A0  1C01               	btfss	1,0
 18979  03A1  2BD7               	goto	i1l7484
 18980                           
 18981                           ;Dimmer_B1.c: 337: if (DimmerLightsIntr->Count >= DimmerLightsIntr->DimmingValue) {
 18982  03A2  087A               	movf	_DimmerLightsIntr,w
 18983  03A3  3E03               	addlw	3
 18984  03A4  0086               	movwf	6
 18985  03A5  3001               	movlw	1	; select bank2/3
 18986  03A6  0087               	movwf	7
 18987  03A7  087A               	movf	_DimmerLightsIntr,w
 18988  03A8  3E04               	addlw	4
 18989  03A9  0084               	movwf	4
 18990  03AA  3001               	movlw	1	; select bank2/3
 18991  03AB  0085               	movwf	5
 18992  03AC  0800               	movf	0,w
 18993  03AD  0201               	subwf	1,w
 18994  03AE  1C03               	skipc
 18995  03AF  0008               	return
 18996                           
 18997                           ;Dimmer_B1.c: 338: DimmerLightsIntr->GO = 0;
 18998  03B0  0A7A               	incf	_DimmerLightsIntr,w
 18999  03B1  0086               	movwf	6
 19000  03B2  3001               	movlw	1	; select bank2/3
 19001  03B3  0087               	movwf	7
 19002  03B4  1001               	bcf	1,0
 19003                           
 19004                           ;Dimmer_B1.c: 339: DimmerLightsIntr->Flag = 1;
 19005  03B5  0A7A               	incf	_DimmerLightsIntr,w
 19006  03B6  0086               	movwf	6
 19007  03B7  3001               	movlw	1	; select bank2/3
 19008  03B8  0087               	movwf	7
 19009  03B9  1581               	bsf	1,3
 19010                           
 19011                           ;Dimmer_B1.c: 341: if (DimmerLightsIntr->MOSFET == 1) {
 19012  03BA  087A               	movf	_DimmerLightsIntr,w
 19013  03BB  0086               	movwf	6
 19014  03BC  3001               	movlw	1	; select bank2/3
 19015  03BD  0087               	movwf	7
 19016  03BE  1C01               	btfss	1,0
 19017  03BF  0008               	return
 19018                           
 19019                           ;Dimmer_B1.c: 342: DimmerLightsIntr->MOSFET = 0;
 19020  03C0  087A               	movf	_DimmerLightsIntr,w
 19021  03C1  0086               	movwf	6
 19022  03C2  3001               	movlw	1	; select bank2/3
 19023  03C3  0087               	movwf	7
 19024  03C4  1001               	bcf	1,0
 19025                           
 19026                           ;Dimmer_B1.c: 344: if (lights == 1) {
 19027  03C5  0871               	movf	setDimmerLights_IntrControl@lights,w
 19028  03C6  3A01               	xorlw	1
 19029  03C7  1D03               	skipz
 19030  03C8  2BCE               	goto	i1l7480
 19031                           
 19032                           ;Dimmer_B1.c: 345: RA7 = 0;
 19033  03C9  0020               	movlb	0	; select bank0
 19034  03CA  138C               	bcf	12,7	;volatile
 19035                           
 19036                           ;Dimmer_B1.c: 346: __nop();
 19037  03CB  0000               	nop
 19038                           
 19039                           ;Dimmer_B1.c: 347: __nop();
 19040  03CC  0000               	nop
 19041                           
 19042                           ;Dimmer_B1.c: 349: }
 19043  03CD  0008               	return
 19044  03CE                     i1l7480:	
 19045                           
 19046                           ;Dimmer_B1.c: 352: else if (lights == 2) {
 19047  03CE  0871               	movf	setDimmerLights_IntrControl@lights,w
 19048  03CF  3A02               	xorlw	2
 19049  03D0  1D03               	skipz
 19050  03D1  0008               	return
 19051                           
 19052                           ;Dimmer_B1.c: 353: RB4 = 0;
 19053  03D2  0020               	movlb	0	; select bank0
 19054  03D3  120D               	bcf	13,4	;volatile
 19055                           
 19056                           ;Dimmer_B1.c: 354: __nop();
 19057  03D4  0000               	nop
 19058                           
 19059                           ;Dimmer_B1.c: 355: __nop();
 19060  03D5  0000               	nop
 19061                           
 19062                           ;Dimmer_B1.c: 356: }
 19063                           ;Dimmer_B1.c: 358: }
 19064                           ;Dimmer_B1.c: 359: }
 19065                           ;Dimmer_B1.c: 360: } else {
 19066  03D6  0008               	return
 19067  03D7                     i1l7484:	
 19068                           
 19069                           ;Dimmer_B1.c: 361: if (DimmerLightsIntr->Flag == 1) {
 19070  03D7  0A7A               	incf	_DimmerLightsIntr,w
 19071  03D8  0086               	movwf	6
 19072  03D9  3001               	movlw	1	; select bank2/3
 19073  03DA  0087               	movwf	7
 19074  03DB  1D81               	btfss	1,3
 19075  03DC  0008               	return
 19076                           
 19077                           ;Dimmer_B1.c: 362: DimmerLightsIntr->Flag = 0;
 19078  03DD  0A7A               	incf	_DimmerLightsIntr,w
 19079  03DE  0086               	movwf	6
 19080  03DF  3001               	movlw	1	; select bank2/3
 19081  03E0  0087               	movwf	7
 19082  03E1  1181               	bcf	1,3
 19083                           
 19084                           ;Dimmer_B1.c: 363: DimmerLightsIntr->DimmingTime++;
 19085  03E2  3001               	movlw	1
 19086  03E3  00F0               	movwf	??_setDimmerLights_IntrControl
 19087  03E4  087A               	movf	_DimmerLightsIntr,w
 19088  03E5  3E05               	addlw	5
 19089  03E6  0086               	movwf	6
 19090  03E7  3001               	movlw	1	; select bank2/3
 19091  03E8  0087               	movwf	7
 19092  03E9  0870               	movf	??_setDimmerLights_IntrControl,w
 19093  03EA  0781               	addwf	1,f
 19094                           
 19095                           ;Dimmer_B1.c: 364: if (DimmerLightsIntr->DimmingTime >= DimmerLightsIntr->DimmingTimeVal
      +                          ue) {
 19096  03EB  087A               	movf	_DimmerLightsIntr,w
 19097  03EC  3E05               	addlw	5
 19098  03ED  0086               	movwf	6
 19099  03EE  3001               	movlw	1	; select bank2/3
 19100  03EF  0087               	movwf	7
 19101  03F0  087A               	movf	_DimmerLightsIntr,w
 19102  03F1  3E08               	addlw	8
 19103  03F2  0084               	movwf	4
 19104  03F3  3001               	movlw	1	; select bank2/3
 19105  03F4  0085               	movwf	5
 19106  03F5  0800               	movf	0,w
 19107  03F6  0201               	subwf	1,w
 19108  03F7  1C03               	skipc
 19109  03F8  2C3B               	goto	i1l7510
 19110                           
 19111                           ;Dimmer_B1.c: 365: DimmerLightsIntr->DimmingTime = 0;
 19112  03F9  087A               	movf	_DimmerLightsIntr,w
 19113  03FA  3E05               	addlw	5
 19114  03FB  0086               	movwf	6
 19115  03FC  3001               	movlw	1	; select bank2/3
 19116  03FD  0087               	movwf	7
 19117  03FE  0181               	clrf	1
 19118                           
 19119                           ;Dimmer_B1.c: 366: if (DimmerLightsIntr->AdjSw == 1) {
 19120  03FF  0A7A               	incf	_DimmerLightsIntr,w
 19121  0400  0086               	movwf	6
 19122  0401  3001               	movlw	1	; select bank2/3
 19123  0402  0087               	movwf	7
 19124  0403  1F01               	btfss	1,6
 19125  0404  0008               	return
 19126                           
 19127                           ;Dimmer_B1.c: 367: if (DimmerLightsIntr->AdjStatus == 0) {
 19128  0405  0A7A               	incf	_DimmerLightsIntr,w
 19129  0406  0086               	movwf	6
 19130  0407  3001               	movlw	1	; select bank2/3
 19131  0408  0087               	movwf	7
 19132  0409  1B81               	btfsc	1,7
 19133  040A  2C24               	goto	i1l7504
 19134                           
 19135                           ;Dimmer_B1.c: 368: if (DimmerLightsIntr->DimmingValue < ((char)(70*0.8))) {
 19136  040B  087A               	movf	_DimmerLightsIntr,w
 19137  040C  3E04               	addlw	4
 19138  040D  0086               	movwf	6
 19139  040E  3001               	movlw	1	; select bank2/3
 19140  040F  0087               	movwf	7
 19141  0410  3038               	movlw	56
 19142  0411  0201               	subwf	1,w
 19143  0412  1803               	skipnc
 19144  0413  2C1E               	goto	i1l7502
 19145                           
 19146                           ;Dimmer_B1.c: 369: DimmerLightsIntr->DimmingValue++;
 19147  0414  3001               	movlw	1
 19148  0415  00F0               	movwf	??_setDimmerLights_IntrControl
 19149  0416  087A               	movf	_DimmerLightsIntr,w
 19150  0417  3E04               	addlw	4
 19151  0418  0086               	movwf	6
 19152  0419  3001               	movlw	1	; select bank2/3
 19153  041A  0087               	movwf	7
 19154  041B  0870               	movf	??_setDimmerLights_IntrControl,w
 19155  041C  0781               	addwf	1,f
 19156                           
 19157                           ;Dimmer_B1.c: 370: } else {
 19158  041D  0008               	return
 19159  041E                     i1l7502:	
 19160                           
 19161                           ;Dimmer_B1.c: 371: DimmerLightsIntr->AdjStatus = 1;
 19162  041E  0A7A               	incf	_DimmerLightsIntr,w
 19163  041F  0086               	movwf	6
 19164  0420  3001               	movlw	1	; select bank2/3
 19165  0421  0087               	movwf	7
 19166  0422  1781               	bsf	1,7
 19167                           
 19168                           ;Dimmer_B1.c: 372: }
 19169                           ;Dimmer_B1.c: 373: } else {
 19170  0423  0008               	return
 19171  0424                     i1l7504:	
 19172                           
 19173                           ;Dimmer_B1.c: 374: if (DimmerLightsIntr->DimmingValue > ((char)(15*0.8))) {
 19174  0424  087A               	movf	_DimmerLightsIntr,w
 19175  0425  3E04               	addlw	4
 19176  0426  0086               	movwf	6
 19177  0427  3001               	movlw	1	; select bank2/3
 19178  0428  0087               	movwf	7
 19179  0429  300D               	movlw	13
 19180  042A  0201               	subwf	1,w
 19181  042B  1C03               	skipc
 19182  042C  2C35               	goto	i1l7508
 19183                           
 19184                           ;Dimmer_B1.c: 375: DimmerLightsIntr->DimmingValue--;
 19185  042D  087A               	movf	_DimmerLightsIntr,w
 19186  042E  3E04               	addlw	4
 19187  042F  0086               	movwf	6
 19188  0430  3001               	movlw	1	; select bank2/3
 19189  0431  0087               	movwf	7
 19190  0432  3001               	movlw	1
 19191  0433  0281               	subwf	1,f
 19192                           
 19193                           ;Dimmer_B1.c: 376: } else
 19194  0434  0008               	return
 19195  0435                     i1l7508:	
 19196                           
 19197                           ;Dimmer_B1.c: 377: DimmerLightsIntr->AdjStatus = 0;
 19198  0435  0A7A               	incf	_DimmerLightsIntr,w
 19199  0436  0086               	movwf	6
 19200  0437  3001               	movlw	1	; select bank2/3
 19201  0438  0087               	movwf	7
 19202  0439  1381               	bcf	1,7
 19203                           
 19204                           ;Dimmer_B1.c: 378: }
 19205                           ;Dimmer_B1.c: 379: }
 19206                           ;Dimmer_B1.c: 380: } else if (DimmerLightsIntr->AdjRF == 1) {
 19207  043A  0008               	return
 19208  043B                     i1l7510:	
 19209  043B  087A               	movf	_DimmerLightsIntr,w
 19210  043C  3E02               	addlw	2
 19211  043D  0086               	movwf	6
 19212  043E  3001               	movlw	1	; select bank2/3
 19213  043F  0087               	movwf	7
 19214  0440  1C01               	btfss	1,0
 19215  0441  0008               	return
 19216                           
 19217                           ;Dimmer_B1.c: 381: if (DimmerLightsIntr->DimmingValue < DimmerLightsIntr->MaxmumValue) {
 19218  0442  087A               	movf	_DimmerLightsIntr,w
 19219  0443  3E04               	addlw	4
 19220  0444  0086               	movwf	6
 19221  0445  3001               	movlw	1	; select bank2/3
 19222  0446  0087               	movwf	7
 19223  0447  087A               	movf	_DimmerLightsIntr,w
 19224  0448  3E06               	addlw	6
 19225  0449  0084               	movwf	4
 19226  044A  3001               	movlw	1	; select bank2/3
 19227  044B  0085               	movwf	5
 19228  044C  0800               	movf	0,w
 19229  044D  0201               	subwf	1,w
 19230  044E  1803               	skipnc
 19231  044F  2C5A               	goto	i1l7516
 19232                           
 19233                           ;Dimmer_B1.c: 382: DimmerLightsIntr->DimmingValue++;
 19234  0450  3001               	movlw	1
 19235  0451  00F0               	movwf	??_setDimmerLights_IntrControl
 19236  0452  087A               	movf	_DimmerLightsIntr,w
 19237  0453  3E04               	addlw	4
 19238  0454  0086               	movwf	6
 19239  0455  3001               	movlw	1	; select bank2/3
 19240  0456  0087               	movwf	7
 19241  0457  0870               	movf	??_setDimmerLights_IntrControl,w
 19242  0458  0781               	addwf	1,f
 19243                           
 19244                           ;Dimmer_B1.c: 383: } else if (DimmerLightsIntr->DimmingValue > DimmerLightsIntr->MaxmumV
      +                          alue) {
 19245  0459  0008               	return
 19246  045A                     i1l7516:	
 19247  045A  087A               	movf	_DimmerLightsIntr,w
 19248  045B  3E06               	addlw	6
 19249  045C  0086               	movwf	6
 19250  045D  3001               	movlw	1	; select bank2/3
 19251  045E  0087               	movwf	7
 19252  045F  087A               	movf	_DimmerLightsIntr,w
 19253  0460  3E04               	addlw	4
 19254  0461  0084               	movwf	4
 19255  0462  3001               	movlw	1	; select bank2/3
 19256  0463  0085               	movwf	5
 19257  0464  0800               	movf	0,w
 19258  0465  0201               	subwf	1,w
 19259  0466  1803               	skipnc
 19260  0467  2C70               	goto	i1l7520
 19261                           
 19262                           ;Dimmer_B1.c: 384: DimmerLightsIntr->DimmingValue--;
 19263  0468  087A               	movf	_DimmerLightsIntr,w
 19264  0469  3E04               	addlw	4
 19265  046A  0086               	movwf	6
 19266  046B  3001               	movlw	1	; select bank2/3
 19267  046C  0087               	movwf	7
 19268  046D  3001               	movlw	1
 19269  046E  0281               	subwf	1,f
 19270                           
 19271                           ;Dimmer_B1.c: 385: } else {
 19272  046F  0008               	return
 19273  0470                     i1l7520:	
 19274                           
 19275                           ;Dimmer_B1.c: 386: DimmerLightsIntr->AdjRF = 0;
 19276  0470  087A               	movf	_DimmerLightsIntr,w
 19277  0471  3E02               	addlw	2
 19278  0472  0086               	movwf	6
 19279  0473  3001               	movlw	1	; select bank2/3
 19280  0474  0087               	movwf	7
 19281  0475  1001               	bcf	1,0
 19282  0476  0008               	return
 19283  0477                     __end_of_setDimmerLights_IntrControl:	
 19284                           
 19285                           	psect	text134
 19286  1BBE                     __ptext134:	
 19287 ;; *************** function _IOC_ISR *****************
 19288 ;; Defined at:
 19289 ;;		line 396 in file "../src/MCU_B1.c"
 19290 ;; Parameters:    Size  Location     Type
 19291 ;;		None
 19292 ;; Auto vars:     Size  Location     Type
 19293 ;;		None
 19294 ;; Return value:  Size  Location     Type
 19295 ;;		None               void
 19296 ;; Registers used:
 19297 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19298 ;; Tracked objects:
 19299 ;;		On entry : 0/0
 19300 ;;		On exit  : 0/0
 19301 ;;		Unchanged: 0/0
 19302 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19303 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19304 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19305 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19306 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19307 ;;Total ram usage:        0 bytes
 19308 ;; Hardware stack levels used:    1
 19309 ;; Hardware stack levels required when called:    1
 19310 ;; This function calls:
 19311 ;;		_setDimmerLights_IntrIOC_GO
 19312 ;; This function is called by:
 19313 ;;		_ISR
 19314 ;; This function uses a non-reentrant model
 19315 ;;
 19316                           
 19317                           
 19318                           ;psect for function _IOC_ISR
 19319  1BBE                     _IOC_ISR:	
 19320                           
 19321                           ;MCU_B1.c: 398: if (myMain.PowerON == 1) {
 19322                           
 19323                           ;incstack = 0
 19324                           ; Regs used in _IOC_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 19325  1BBE  0021               	movlb	1	; select bank1
 19326  1BBF  1C2E               	btfss	_myMain^(0+128),0
 19327  1BC0  2BC8               	goto	i1l8060
 19328                           
 19329                           ;MCU_B1.c: 403: setDimmerLights_IntrIOC_GO(1);
 19330  1BC1  3001               	movlw	1
 19331  1BC2  3194  24E8  319B   	fcall	_setDimmerLights_IntrIOC_GO
 19332                           
 19333                           ;MCU_B1.c: 407: setDimmerLights_IntrIOC_GO(2);
 19334  1BC5  3002               	movlw	2
 19335  1BC6  3194  24E8         	fcall	_setDimmerLights_IntrIOC_GO
 19336  1BC8                     i1l8060:	
 19337                           
 19338                           ;MCU_B1.c: 415: }
 19339                           ;MCU_B1.c: 417: IOCBF2 = 0;
 19340  1BC8  0027               	movlb	7	; select bank7
 19341  1BC9  1116               	bcf	22,2	;volatile
 19342                           
 19343                           ;MCU_B1.c: 418: IOCIF = 0;
 19344  1BCA  100B               	bcf	11,0	;volatile
 19345  1BCB  0008               	return
 19346  1BCC                     __end_of_IOC_ISR:	
 19347                           
 19348                           	psect	text135
 19349  14E8                     __ptext135:	
 19350 ;; *************** function _setDimmerLights_IntrIOC_GO *****************
 19351 ;; Defined at:
 19352 ;;		line 55 in file "../src/Dimmer_B1.c"
 19353 ;; Parameters:    Size  Location     Type
 19354 ;;  lights          1    wreg     unsigned char 
 19355 ;; Auto vars:     Size  Location     Type
 19356 ;;  lights          1    1[COMMON] unsigned char 
 19357 ;; Return value:  Size  Location     Type
 19358 ;;		None               void
 19359 ;; Registers used:
 19360 ;;		wreg, fsr1l, fsr1h, status,2
 19361 ;; Tracked objects:
 19362 ;;		On entry : 0/0
 19363 ;;		On exit  : 0/0
 19364 ;;		Unchanged: 0/0
 19365 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19366 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19367 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19368 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19369 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19370 ;;Total ram usage:        2 bytes
 19371 ;; Hardware stack levels used:    1
 19372 ;; This function calls:
 19373 ;;		Nothing
 19374 ;; This function is called by:
 19375 ;;		_IOC_ISR
 19376 ;;		_setDimmerLights_IOC_Main
 19377 ;; This function uses a non-reentrant model
 19378 ;;
 19379                           
 19380                           
 19381                           ;psect for function _setDimmerLights_IntrIOC_GO
 19382  14E8                     _setDimmerLights_IntrIOC_GO:	
 19383                           
 19384                           ;incstack = 0
 19385                           ; Regs used in _setDimmerLights_IntrIOC_GO: [wreg+fsr1l+fsr1h+status,2]
 19386                           ;setDimmerLights_IntrIOC_GO@lights stored from wreg
 19387  14E8  00F1               	movwf	setDimmerLights_IntrIOC_GO@lights
 19388                           
 19389                           ;Dimmer_B1.c: 58: if (lights == 1) {
 19390  14E9  0871               	movf	setDimmerLights_IntrIOC_GO@lights,w
 19391  14EA  3A01               	xorlw	1
 19392  14EB  1D03               	skipz
 19393  14EC  2CF5               	goto	i1l7414
 19394                           
 19395                           ;Dimmer_B1.c: 59: DimmerLightsIntrIOC = &DimmerLights1;
 19396  14ED  3053               	movlw	_DimmerLights1& (0+255)
 19397  14EE  00F0               	movwf	??_setDimmerLights_IntrIOC_GO
 19398  14EF  0870               	movf	??_setDimmerLights_IntrIOC_GO,w
 19399  14F0  0021               	movlb	1	; select bank1
 19400  14F1  00D0               	movwf	_DimmerLightsIntrIOC^(0+128)
 19401                           
 19402                           ;Dimmer_B1.c: 60: __nop();
 19403  14F2  0000               	nop
 19404                           
 19405                           ;Dimmer_B1.c: 61: __nop();
 19406  14F3  0000               	nop
 19407                           
 19408                           ;Dimmer_B1.c: 62: }
 19409  14F4  2D00               	goto	i1l7422
 19410  14F5                     i1l7414:	
 19411                           
 19412                           ;Dimmer_B1.c: 65: else if (lights == 2) {
 19413  14F5  0871               	movf	setDimmerLights_IntrIOC_GO@lights,w
 19414  14F6  3A02               	xorlw	2
 19415  14F7  1D03               	skipz
 19416  14F8  2D00               	goto	i1l7422
 19417                           
 19418                           ;Dimmer_B1.c: 66: DimmerLightsIntrIOC = &DimmerLights2;
 19419  14F9  30BE               	movlw	_DimmerLights2& (0+255)
 19420  14FA  00F0               	movwf	??_setDimmerLights_IntrIOC_GO
 19421  14FB  0870               	movf	??_setDimmerLights_IntrIOC_GO,w
 19422  14FC  0021               	movlb	1	; select bank1
 19423  14FD  00D0               	movwf	_DimmerLightsIntrIOC^(0+128)
 19424                           
 19425                           ;Dimmer_B1.c: 67: __nop();
 19426  14FE  0000               	nop
 19427                           
 19428                           ;Dimmer_B1.c: 68: __nop();
 19429  14FF  0000               	nop
 19430  1500                     i1l7422:	
 19431                           
 19432                           ;Dimmer_B1.c: 69: }
 19433                           ;Dimmer_B1.c: 94: if (DimmerLightsIntrIOC->IntrStart == 0 && RB2 == 1) {
 19434  1500  0021               	movlb	1	; select bank1
 19435  1501  0850               	movf	_DimmerLightsIntrIOC^(0+128),w
 19436  1502  3E02               	addlw	2
 19437  1503  0086               	movwf	6
 19438  1504  3001               	movlw	1	; select bank2/3
 19439  1505  0087               	movwf	7
 19440  1506  1901               	btfsc	1,2
 19441  1507  0008               	return
 19442  1508  0020               	movlb	0	; select bank0
 19443  1509  1D0D               	btfss	13,2	;volatile
 19444  150A  0008               	return
 19445                           
 19446                           ;Dimmer_B1.c: 95: DimmerLightsIntrIOC->IntrStart = 1;
 19447  150B  0021               	movlb	1	; select bank1
 19448  150C  0850               	movf	_DimmerLightsIntrIOC^(0+128),w
 19449  150D  3E02               	addlw	2
 19450  150E  0086               	movwf	6
 19451  150F  3001               	movlw	1	; select bank2/3
 19452  1510  0087               	movwf	7
 19453  1511  1501               	bsf	1,2
 19454                           
 19455                           ;Dimmer_B1.c: 96: DimmerLightsIntrIOC->GO = 1;
 19456  1512  0A50               	incf	_DimmerLightsIntrIOC^(0+128),w
 19457  1513  0086               	movwf	6
 19458  1514  3001               	movlw	1	; select bank2/3
 19459  1515  0087               	movwf	7
 19460  1516  1401               	bsf	1,0
 19461                           
 19462                           ;Dimmer_B1.c: 97: DimmerLightsIntrIOC->MosfetSignal = 1;
 19463  1517  0A50               	incf	_DimmerLightsIntrIOC^(0+128),w
 19464  1518  0086               	movwf	6
 19465  1519  3001               	movlw	1	; select bank2/3
 19466  151A  0087               	movwf	7
 19467  151B  1481               	bsf	1,1
 19468                           
 19469                           ;Dimmer_B1.c: 98: Dimmer.Correction = 0;
 19470  151C  01CA               	clrf	(_Dimmer^(0+128)+2)	;volatile
 19471                           
 19472                           ;Dimmer_B1.c: 100: if (DimmerLightsIntrIOC->StatusFlag == 1) {
 19473  151D  0A50               	incf	_DimmerLightsIntrIOC^(0+128),w
 19474  151E  0086               	movwf	6
 19475  151F  3001               	movlw	1	; select bank2/3
 19476  1520  0087               	movwf	7
 19477  1521  1D01               	btfss	1,2
 19478  1522  0008               	return
 19479                           
 19480                           ;Dimmer_B1.c: 101: DimmerLightsIntrIOC->MOSFET = 1;
 19481  1523  0850               	movf	_DimmerLightsIntrIOC^(0+128),w
 19482  1524  0086               	movwf	6
 19483  1525  3001               	movlw	1	; select bank2/3
 19484  1526  0087               	movwf	7
 19485  1527  1401               	bsf	1,0
 19486                           
 19487                           ;Dimmer_B1.c: 103: if (lights == 1) {
 19488  1528  0871               	movf	setDimmerLights_IntrIOC_GO@lights,w
 19489  1529  3A01               	xorlw	1
 19490  152A  1D03               	skipz
 19491  152B  2D31               	goto	i1l7438
 19492                           
 19493                           ;Dimmer_B1.c: 104: RA7 = 1;
 19494  152C  0020               	movlb	0	; select bank0
 19495  152D  178C               	bsf	12,7	;volatile
 19496                           
 19497                           ;Dimmer_B1.c: 105: __nop();
 19498  152E  0000               	nop
 19499                           
 19500                           ;Dimmer_B1.c: 106: __nop();
 19501  152F  0000               	nop
 19502                           
 19503                           ;Dimmer_B1.c: 108: }
 19504  1530  0008               	return
 19505  1531                     i1l7438:	
 19506                           
 19507                           ;Dimmer_B1.c: 111: else if (lights == 2) {
 19508  1531  0871               	movf	setDimmerLights_IntrIOC_GO@lights,w
 19509  1532  3A02               	xorlw	2
 19510  1533  1D03               	skipz
 19511  1534  0008               	return
 19512                           
 19513                           ;Dimmer_B1.c: 112: RB4 = 1;
 19514  1535  0020               	movlb	0	; select bank0
 19515  1536  160D               	bsf	13,4	;volatile
 19516                           
 19517                           ;Dimmer_B1.c: 113: __nop();
 19518  1537  0000               	nop
 19519                           
 19520                           ;Dimmer_B1.c: 114: __nop();
 19521  1538  0000               	nop
 19522  1539  0008               	return
 19523  153A                     __end_of_setDimmerLights_IntrIOC_GO:	
 19524  007E                     btemp	set	126	;btemp
 19525  007E                     pic14e$flags	set	126
 19526  007E                     wtemp	set	126
 19527  007E                     wtemp0	set	126
 19528  0080                     wtemp1	set	128
 19529  0082                     wtemp2	set	130
 19530  0084                     wtemp3	set	132
 19531  0086                     wtemp4	set	134
 19532  0088                     wtemp5	set	136
 19533  007F                     wtemp6	set	127
 19534  007E                     ttemp	set	126
 19535  007E                     ttemp0	set	126
 19536  0081                     ttemp1	set	129
 19537  0084                     ttemp2	set	132
 19538  0087                     ttemp3	set	135
 19539  007F                     ttemp4	set	127
 19540  007E                     ltemp	set	126
 19541  007E                     ltemp0	set	126
 19542  0082                     ltemp1	set	130
 19543  0086                     ltemp2	set	134
 19544  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    102
    Data        32
    BSS         272
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      8      11
    BANK0            80     77      80
    BANK1            80      3      79
    BANK2            80      0      80
    BANK3            80      4      79
    BANK4            80      7      76
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    Sw	PTR struct Switch size(1) Largest target is 9
		 -> NULL(NULL[0]), Sw2(BANK3[9]), Sw1(BANK3[9]), 

    LED	PTR struct LED size(1) Largest target is 4
		 -> NULL(NULL[0]), VarErrLED(BANK2[4]), VarLED2(BANK2[4]), VarLED1(BANK2[4]), 

    product	PTR struct Product size(1) Largest target is 32
		 -> NULL(NULL[0]), _product(BANK4[32]), 

    DimmerLights22	PTR struct DimmerLights size(1) Largest target is 17
		 -> NULL(NULL[0]), DimmerLights2(BANK3[17]), 

    DimmerLights11	PTR struct DimmerLights size(1) Largest target is 17
		 -> NULL(NULL[0]), DimmerLights1(BANK2[17]), 

    DimmerLights	PTR struct DimmerLights size(1) Largest target is 17
		 -> NULL(NULL[0]), DimmerLights2(BANK3[17]), DimmerLights1(BANK2[17]), 

    DimmerLightsIntr	PTR struct DimmerLights size(1) Largest target is 17
		 -> NULL(NULL[0]), DimmerLights2(BANK3[17]), DimmerLights1(BANK2[17]), 

    DimmerLightsIntrIOC	PTR struct DimmerLights size(1) Largest target is 17
		 -> NULL(NULL[0]), DimmerLights2(BANK3[17]), DimmerLights1(BANK2[17]), 

    DelayOff	PTR struct DelayOff size(1) Largest target is 5
		 -> NULL(NULL[0]), DlySw2(BANK3[5]), DlySw1(BANK3[5]), 


Critical Paths under _main in COMMON

    _main->_DimmerLights_Initialization
    _main->_getTemp_AD
    _getTemp_AD->_getAD
    _getLoad_AD->_getAD
    _setSw_Main->_getSw_KeyStatus
    _setDimmerLights_AdjOn->_DimmerLightsPointSelect
    _Switch_Initialization->_setSw_Initialization
    _setSw_Initialization->_setLED
    _setRF_Main->_CC2500_RxData
    _setRF_Main->_CC2500_TxData
    _setRF_Main->___lwdiv
    ___ftmul->___ftpack
    _RF_RxDisable->_CC2500_WriteCommand
    _CC2500_TxData->_CC2500_WriteCommand
    _CC2500_RxData->_CC2500_ReadStatus
    _CC2500_RxData->_CC2500_WriteCommand
    _CC2500_ReadStatus->_CC2500_ReadByte
    _CC2500_ReadStatus->_CC2500_WriteByte
    _CC2500_SIDLEMode->_CC2500_WriteCommand
    _CC2500_PowerRST->_CC2500_WriteByte
    _CC2500_PowerRST->_DelayTime_1us
    _CC2500_InitSetREG->_CC2500_WriteREG
    _CC2500_InitPATable->_CC2500_WriteREG
    _CC2500_WriteREG->_CC2500_WriteByte
    _CC2500_FrequencyCabr->_CC2500_WriteCommand
    _CC2500_ClearTXFIFO->_CC2500_WriteCommand
    _CC2500_ClearRXFIFO->_CC2500_WriteCommand
    _CC2500_WriteCommand->_CC2500_WriteByte
    _RF_Initialization->_setRF_Initialization
    _Mcu_Initialization->_WDT_Set
    _Load_Main->___lwdiv
    _getAll_DimmerLights_AdjSw->_DimmerLightsPointSelect
    _Load_Initialization->_setLoad_AH_AL_Restore
    _LED_Main->_setLED_Main
    _setLED_Main->_LedPointSelect
    _LED_Initialization->_setLED_Initialization
    _setLED_Initialization->_setLED
    _Flash_Memory_Main->_Flash_Memory_Modify
    _Flash_Memory_Modify->_Flash_Memory_Read
    ___ftdiv->___ftpack
    ___ftadd->___ftpack
    ___awtoft->___ftpack
    _setLED->_LedPointSelect
    _getDimmerLights_Allow_Condition->_getLoad_OK
    _DimmerLights_Initialization->_setDimmerLights_Initialization
    _setDimmerLights_Initialization->_DimmerLightsPointSelect
    _DelayTimejudge->___bmul
    _getDelayOff_GO->_DelayOffPointSelect
    _getDimmerLights_Status->_DimmerLightsPointSelect
    _setBuz->___awdiv
    _DelayOff_Initialization->_DlyOff_Initialization
    _DlyOff_Initialization->_DelayOffPointSelect

Critical Paths under _ISR in COMMON

    _TMR1_ISR->_setDimmerLights_IntrControl
    _IOC_ISR->_setDimmerLights_IntrIOC_GO

Critical Paths under _main in BANK0

    _my_MainTimer->_setBuz
    _Temp_Main->_setTemp_Main
    _setTemp_Main->_setProductData
    _Switch_Main->_setSw_Main
    _setSw_Main->_setDimmerLights_SwOff
    _setRF_Main->_getRxData
    _setLog_Code->_setProductData
    _setControl_Lights_Table->_setDimmerLights_ErrorClose
    _setRFSW_Control->_setDimmerLights_SwOff
    _setRFSW_Control->_setRF_DimmerLights
    _setDimmerLights_SwOn->_setBuz
    _setRFSW_AdjControl->_setRF_DimmerValue
    _setRF_DimmerValue->_setProductData
    _setDimmerLights_AdjRF->_getPercentValue
    _getPercentValue->___fttol
    ___ftmul->___awtoft
    _CC2500_PowerOnInitial->_CC2500_InitSetREG
    _CC2500_PowerRST->_DelayTime_1us
    _CC2500_FrequencyCabr->_DelayTime_1us
    _Load_Main->_getMain_All_Error_Status
    _Flash_Memory_Main->_Flash_Memory_Modify
    _Flash_Memory_Initialization->_setPercentValue
    _Exception_Main->_setDimmerLights_SwOff
    _DimmerLights_Main->_setDimmerLights_Main
    _setDimmerLights_Main->_setDimmerLights
    _setDimmerLights_Main->_setDimmerLights_Adj
    _setDimmerLights_Adj->_setRF_DimmerLights
    _setDimmerLights->_setRF_DimmerLights
    _setRF_DimmerLights->_setProductData
    _setPercentValue->___fttol
    ___fttol->___ftadd
    ___ftneg->___ftdiv
    ___ftneg->___ftmul
    ___ftdiv->___awtoft
    ___ftadd->___ftneg
    ___awtoft->___ftpack
    _DelayOff_Main->_DlyOff_Main
    _DlyOff_Main->_setDimmerLights_ErrorClose
    _setDimmerLights_ErrorClose->_setDimmerLights_SwOff
    _setDimmerLights_SwOff->_setDelayOff_GO
    _setDelayOff_GO->_setProductData
    _setProductData->_setPercentValue
    _setBuz->___awdiv

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    _RF_Main->_setRF_Main
    _DelayOff_Main->_DlyOff_Main

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    _main->_Exception_Main

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     0      4  132765
                                              0 BANK3      4     0      4
              _Buzzer_Initialization
                        _Buzzer_Main
              _CC2500_PowerOnInitial
            _DelayOff_Initialization
                      _DelayOff_Main
        _DimmerLights_Initialization
                  _DimmerLights_Main
                     _Exception_Main
        _Flash_Memory_Initialization
                  _Flash_Memory_Main
                 _LED_Initialization
                           _LED_Main
                _Load_Initialization
                          _Load_Main
                 _Mcu_Initialization
                  _RF_Initialization
                            _RF_Main
              _Switch_Initialization
                        _Switch_Main
                _Temp_Initialization
                          _Temp_Main
                           _WDT_Main
                         _getLoad_AD
                         _getTemp_AD
              _myMain_Initialization
                       _my_MainTimer
 ---------------------------------------------------------------------------------
 (1) _my_MainTimer                                         1     1      0    1666
                                              8 BANK0      1     1      0
                             _setBuz
 ---------------------------------------------------------------------------------
 (1) _myMain_Initialization                                1     1      0       0
                                              3 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _getTemp_AD                                           2     2      0     247
                                              7 COMMON     1     1      0
                                              0 BANK0      1     1      0
                              _getAD
 ---------------------------------------------------------------------------------
 (1) _getLoad_AD                                           6     6      0     615
                                              0 BANK0      6     6      0
                              _getAD
 ---------------------------------------------------------------------------------
 (2) _getAD                                                4     1      3     216
                                              3 COMMON     4     1      3
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (1) _WDT_Main                                             1     1      0       0
                                              3 COMMON     1     1      0
                       _WDT_Clearing
 ---------------------------------------------------------------------------------
 (2) _WDT_Clearing                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Temp_Main                                            0     0      0    4048
                       _setTemp_Main
 ---------------------------------------------------------------------------------
 (2) _setTemp_Main                                         3     3      0    4048
                                             65 BANK0      3     3      0
           _getMain_All_Error_Status
                             _setBuz
                     _setProductData
 ---------------------------------------------------------------------------------
 (1) _Temp_Initialization                                  0     0      0       0
             _setTemp_Initialization
 ---------------------------------------------------------------------------------
 (2) _setTemp_Initialization                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Switch_Main                                          0     0      0    8006
                         _TouchPower
                         _setSw_Main
 ---------------------------------------------------------------------------------
 (2) _setSw_Main                                           3     3      0    8006
                                             70 BANK0      3     3      0
                      _SwPointSelect
           _getMain_All_Error_Status
                    _getSw_KeyStatus
                             _setBuz
              _setDimmerLights_AdjOn
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                        _setRF_Learn
 ---------------------------------------------------------------------------------
 (3) _setRF_Learn                                          2     2      0      22
                                              3 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_AdjOn                                1     1      0      93
                                              5 COMMON     1     1      0
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (3) _getSw_KeyStatus                                      5     5      0     117
                                              3 COMMON     5     5      0
 ---------------------------------------------------------------------------------
 (3) _SwPointSelect                                        2     2      0      44
                                              3 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _Switch_Initialization                                0     0      0    1020
                         _TouchPower
               _setSw_Initialization
 ---------------------------------------------------------------------------------
 (2) _setSw_Initialization                                 1     1      0    1020
                                              7 COMMON     1     1      0
                             _setLED
 ---------------------------------------------------------------------------------
 (2) _TouchPower                                           0     0      0       0
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _set_TimeoutCleared                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Timeout_Counter                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _RF_Main                                              0     0      0   48784
                         _setRF_Main
 ---------------------------------------------------------------------------------
 (2) _setRF_Main                                           3     3      0   48784
                                              0 BANK1      3     3      0
              _CC2500_PowerOnInitial
                      _CC2500_RxData
                      _CC2500_TxData
                _CC2500_WriteCommand
                       _RF_RxDisable
                            ___lwdiv
                          _getBuz_GO
                    _getRF_KeyStatus
                          _getRxData
 ---------------------------------------------------------------------------------
 (3) _getRxData                                            2     2      0   44813
                                             75 BANK0      2     2      0
           _getMain_All_Error_Status
            _setControl_Lights_Table
                        _setLog_Code
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setLog_Code                                          1     1      0    3869
                                             65 BANK0      1     1      0
                             _setBuz
                 _setMemory_LoopSave
                   _setMemory_Modify
                     _setProductData
 ---------------------------------------------------------------------------------
 (5) _setMemory_LoopSave                                   2     2      0      31
                                              3 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (4) _setControl_Lights_Table                              0     0      0   40672
                             _setBuz
         _setDimmerLights_ErrorClose
                     _setProductData
                 _setRFSW_AdjControl
                    _setRFSW_Control
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setRFSW_Control                                      3     3      0   13863
                                             70 BANK0      3     3      0
                     _getDelayOff_GO
             _getDimmerLights_Status
                             _setBuz
                     _setDelayOff_GO
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_SwOn                                 5     5      0    1966
                                              8 BANK0      5     5      0
            _DimmerLightsPointSelect
                             _setBuz
 ---------------------------------------------------------------------------------
 (5) _setRFSW_AdjControl                                   4     4      0   18820
                                             67 BANK0      4     4      0
             _getDimmerLights_Status
                   _setMemory_Modify
                     _setProductData
                  _setRF_DimmerValue
                          _setTxData
 ---------------------------------------------------------------------------------
 (6) _setRF_DimmerValue                                    2     2      0   16360
                                             65 BANK0      2     2      0
              _setDimmerLights_AdjRF
                     _setProductData
 ---------------------------------------------------------------------------------
 (7) _setDimmerLights_AdjRF                                2     2      0   14126
                                             61 BANK0      2     2      0
            _DimmerLightsPointSelect
                    _getPercentValue
 ---------------------------------------------------------------------------------
 (8) _getPercentValue                                      6     6      0   14033
                                             55 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftneg
                            ___fttol
 ---------------------------------------------------------------------------------
 (9) ___ftmul                                             16    10      6    3075
                                              9 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (5) _setMemory_Modify                                     2     2      0      31
                                              3 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (3) _getRF_KeyStatus                                      3     3      0      74
                                              3 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (3) _getBuz_GO                                            6     4      2      34
                                              3 COMMON     4     2      2
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _RF_RxDisable                                         0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (3) _CC2500_TxData                                        2     2      0     235
                                              7 COMMON     1     1      0
                                              0 BANK0      1     1      0
                   _CC2500_WriteByte
                _CC2500_WriteCommand
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _CC2500_RxData                                        2     2      0     470
                                              7 COMMON     1     1      0
                                              0 BANK0      1     1      0
                    _CC2500_ReadByte
                  _CC2500_ReadStatus
                   _CC2500_WriteByte
                _CC2500_WriteCommand
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _CC2500_ReadStatus                                    2     2      0     167
                                              5 COMMON     2     2      0
                    _CC2500_ReadByte
                   _CC2500_WriteByte
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (5) _CC2500_ReadByte                                      2     2      0      68
                                              3 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (3) _CC2500_PowerOnInitial                                0     0      0    2251
                 _CC2500_ClearRXFIFO
                 _CC2500_ClearTXFIFO
               _CC2500_FrequencyCabr
                 _CC2500_InitPATable
                  _CC2500_InitSetREG
                    _CC2500_PowerRST
                   _CC2500_SIDLEMode
 ---------------------------------------------------------------------------------
 (4) _CC2500_SIDLEMode                                     0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (4) _CC2500_PowerRST                                      1     1      0     512
                                              5 COMMON     1     1      0
                   _CC2500_WriteByte
                      _DelayTime_1us
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _CC2500_InitSetREG                                    4     4      0     482
                                              0 BANK0      4     4      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (4) _CC2500_InitPATable                                   3     3      0     417
                                              0 BANK0      3     3      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (5) _CC2500_WriteREG                                      3     2      1     284
                                              5 COMMON     3     2      1
                   _CC2500_WriteByte
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _CC2500_FrequencyCabr                                 0     0      0     543
                _CC2500_WriteCommand
                      _DelayTime_1us
 ---------------------------------------------------------------------------------
 (5) _DelayTime_1us                                        6     4      2     444
                                              3 COMMON     2     0      2
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (4) _CC2500_ClearTXFIFO                                   0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (4) _CC2500_ClearRXFIFO                                   0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (4) _CC2500_WriteCommand                                  2     2      0      99
                                              5 COMMON     2     2      0
                   _CC2500_WriteByte
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (5) _setRF_TimeoutCleared                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _RF_Timeout_Counter                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _CC2500_WriteByte                                     2     2      0      68
                                              3 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _RF_Initialization                                    0     0      0       0
               _setRF_Initialization
 ---------------------------------------------------------------------------------
 (2) _setRF_Initialization                                 1     1      0       0
                                              3 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Mcu_Initialization                                   0     0      0       0
                            _ADC_Set
                           _Fosc_Set
                            _IOC_Set
                             _IO_Set
                           _TMR1_Set
                            _WDT_Set
 ---------------------------------------------------------------------------------
 (2) _WDT_Set                                              1     1      0       0
                                              3 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _TMR1_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IO_Set                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IOC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Fosc_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Load_Main                                            6     6      0    1952
                                              6 BANK0      6     6      0
                            ___lwdiv
                             ___wmul
          _getAll_DimmerLights_AdjSw
                   _getDimmer_LoadGO
              _getDimmer_Load_Status
           _getMain_All_Error_Status
               _getMain_LightsStatus
               _getMain_Lights_Count
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _getMain_Lights_Count                                 3     3      0      50
                                              3 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (2) _getDimmer_Load_Status                                1     1      0      23
                                              3 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _getDimmer_LoadGO                                     1     1      0      23
                                              3 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _getAll_DimmerLights_AdjSw                            5     5      0     232
                                              5 COMMON     1     1      0
                                              0 BANK0      4     4      0
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     290
                                              3 COMMON     4     0      4
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              8     4      4     703
                                              3 COMMON     5     1      4
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _Load_Initialization                                  0     0      0      90
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _setLoad_AH_AL_Restore                                2     2      0      90
                                              3 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _LED_Main                                             0     0      0     217
                        _setLED_Main
 ---------------------------------------------------------------------------------
 (2) _setLED_Main                                          3     3      0     217
                                              5 COMMON     3     3      0
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (1) _LED_Initialization                                   0     0      0    1144
              _setLED_Initialization
 ---------------------------------------------------------------------------------
 (2) _setLED_Initialization                                1     1      0    1144
                                              7 COMMON     1     1      0
                     _LedPointSelect
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Main                                    1     1      0    1243
                                              1 BANK0      1     1      0
                _Flash_Memory_Modify
               _getMain_LightsStatus
 ---------------------------------------------------------------------------------
 (2) _Flash_Memory_Modify                                  2     2      0    1172
                                              7 COMMON     1     1      0
                                              0 BANK0      1     1      0
               _Flash_Memory_Erasing
                  _Flash_Memory_Read
                 _Flash_Memory_Write
                     _setMemory_Data
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Erasing                                 0     0      0       0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Initialization                          2     2      0   12192
                                             61 BANK0      2     2      0
                  _Flash_Memory_Read
                 _Flash_Memory_Write
                     _setMemory_Data
                    _setPercentValue
 ---------------------------------------------------------------------------------
 (3) _setMemory_Data                                       3     2      1     832
                                              3 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Write                                   2     2      0     133
                                              3 COMMON     2     2      0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (4) _Flash_Memory_Unlock                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Read                                    4     4      0      74
                                              3 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 (1) _Exception_Main                                       8     8      0    7294
                                             70 BANK0      1     1      0
                                              0 BANK4      7     7      0
               _getDimmerLights_Line
             _getDimmerLights_Status
           _getMain_All_Error_Status
               _getMain_LightsStatus
                             _setBuz
              _setDimmerLights_SwOff
                             _setLED
 ---------------------------------------------------------------------------------
 (2) _getDimmerLights_Line                                 2     2      0      40
                                              3 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Main                                    0     0      0   35838
                         _getLoad_OK
           _getMain_All_Error_Status
               _getMain_LightsStatus
               _setDimmerLights_Main
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Main                                 1     1      0   35495
                                             73 BANK0      1     1      0
            _DimmerLightsPointSelect
    _getDimmerLights_Allow_Condition
               _getMain_LightsStatus
                    _setDimmerLights
                _setDimmerLights_Adj
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_Adj                                  3     2      1   17735
                                             70 BANK0      3     2      1
                             _setBuz
               _setDimmerLights_Line
                    _setPercentValue
                     _setProductData
                 _setRF_DimmerLights
                 _setRF_TransceiveGO
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setRF_TransceiveGO                                   2     2      0      22
                                              3 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights                                      3     2      1   17129
                                             70 BANK0      3     2      1
               _setDimmerLights_Line
                             _setLED
                    _setPercentValue
                     _setProductData
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setTxData                                            2     2      0       0
                                              3 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (6) _setRF_DimmerLights                                   5     4      1    2595
                                             65 BANK0      5     4      1
                     _setProductData
 ---------------------------------------------------------------------------------
 (2) _setPercentValue                                      6     6      0   10958
                                             55 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftneg
                            ___fttol
 ---------------------------------------------------------------------------------
 (9) ___fttol                                             14    10      4     525
                                             41 BANK0     14    10      4
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
 ---------------------------------------------------------------------------------
 (9) ___ftneg                                              3     0      3     219
                                             25 BANK0      3     0      3
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (9) ___ftdiv                                             16    10      6    3315
                                              9 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (9) ___ftadd                                             13     7      6    4080
                                             28 BANK0     13     7      6
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (9) ___awtoft                                             6     3      3    2720
                                              3 BANK0      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (10) ___ftpack                                            8     3      5    2433
                                              3 COMMON     5     0      5
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _setLED                                               2     1      1     989
                                              5 COMMON     2     1      1
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (4) _LedPointSelect                                       2     2      0      93
                                              3 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_Line                                 1     1      0      44
                                              3 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _getMain_LightsStatus                                 1     1      0      71
                                              3 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (3) _getDimmerLights_Allow_Condition                      6     6      0     281
                                              4 COMMON     1     1      0
                                              0 BANK0      5     5      0
                         _getLoad_OK
 ---------------------------------------------------------------------------------
 (4) _getLoad_OK                                           1     1      0      34
                                              3 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (3) _getMain_All_Error_Status                             7     7      0     238
                                              3 COMMON     1     1      0
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Initialization                          1     1      0      93
                                              7 COMMON     1     1      0
     _setDimmerLights_Initialization
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Initialization                       2     2      0      93
                                              5 COMMON     2     2      0
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Main                                        0     0      0    5972
                        _DlyOff_Main
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Main                                          3     3      0    5972
                                             75 BANK0      2     2      0
                                              0 BANK1      1     1      0
                _DelayOffPointSelect
                             _setBuz
         _setDimmerLights_ErrorClose
 ---------------------------------------------------------------------------------
 (5) _setDimmerLights_ErrorClose                           5     5      0    4182
                                             70 BANK0      5     5      0
            _DimmerLightsPointSelect
             _getDimmerLights_Status
              _setDimmerLights_SwOff
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_SwOff                                1     1      0    3705
                                             69 BANK0      1     1      0
            _DimmerLightsPointSelect
                     _getDelayOff_GO
                     _setDelayOff_GO
 ---------------------------------------------------------------------------------
 (4) _setDelayOff_GO                                       4     2      2    3423
                                             65 BANK0      4     2      2
                _DelayOffPointSelect
                     _DelayTimejudge
                     _setProductData
 ---------------------------------------------------------------------------------
 (3) _setProductData                                       4     3      1    2141
                                             61 BANK0      4     3      1
                    _setPercentValue (ARG)
 ---------------------------------------------------------------------------------
 (5) _DelayTimejudge                                       6     6      0     417
                                              0 BANK0      6     6      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (6) ___bmul                                               4     3      1     213
                                              3 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (4) _getDelayOff_GO                                       2     2      0     127
                                              5 COMMON     2     2      0
                _DelayOffPointSelect
 ---------------------------------------------------------------------------------
 (6) _getDimmerLights_Status                               2     2      0     127
                                              5 COMMON     2     2      0
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (4) _DimmerLightsPointSelect                              2     2      0      62
                                              3 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (2) _setBuz                                               4     2      2    1666
                                              4 BANK0      4     2      2
                            ___awdiv
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4     599
                                              3 COMMON     5     1      4
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Initialization                              0     0      0      93
              _DlyOff_Initialization
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Initialization                                1     1      0      93
                                              5 COMMON     1     1      0
                _DelayOffPointSelect
 ---------------------------------------------------------------------------------
 (5) _DelayOffPointSelect                                  2     2      0      62
                                              3 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Main                                          1     1      0       0
                                              3 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Initialization                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _ISR                                                 1     1      0     176
                                              2 COMMON     1     1      0
                            _IOC_ISR
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (12) _TMR1_ISR                                            0     0      0      88
        _setDimmerLights_IntrControl
 ---------------------------------------------------------------------------------
 (13) _setDimmerLights_IntrControl                         2     2      0      88
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (12) _IOC_ISR                                             0     0      0      88
         _setDimmerLights_IntrIOC_GO
 ---------------------------------------------------------------------------------
 (13) _setDimmerLights_IntrIOC_GO                          2     2      0      88
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Buzzer_Initialization
   _Buzzer_Main
   _CC2500_PowerOnInitial
     _CC2500_ClearRXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
     _CC2500_ClearTXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
     _CC2500_FrequencyCabr
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
       _DelayTime_1us
     _CC2500_InitPATable
       _CC2500_WriteREG
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
     _CC2500_InitSetREG
       _CC2500_WriteREG
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
     _CC2500_PowerRST
       _CC2500_WriteByte
       _DelayTime_1us
       _RF_Timeout_Counter
       _setRF_TimeoutCleared
     _CC2500_SIDLEMode
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
   _DelayOff_Initialization
     _DlyOff_Initialization
       _DelayOffPointSelect
   _DelayOff_Main
     _DlyOff_Main
       _DelayOffPointSelect
       _setBuz
         ___awdiv
       _setDimmerLights_ErrorClose
         _DimmerLightsPointSelect
         _getDimmerLights_Status
           _DimmerLightsPointSelect
         _setDimmerLights_SwOff
           _DimmerLightsPointSelect
           _getDelayOff_GO
             _DelayOffPointSelect
           _setDelayOff_GO
             _DelayOffPointSelect
             _DelayTimejudge
               ___bmul
             _setProductData
               _setPercentValue (ARG)
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
   _DimmerLights_Initialization
     _setDimmerLights_Initialization
       _DimmerLightsPointSelect
   _DimmerLights_Main
     _getLoad_OK
     _getMain_All_Error_Status
     _getMain_LightsStatus
     _setDimmerLights_Main
       _DimmerLightsPointSelect
       _getDimmerLights_Allow_Condition
         _getLoad_OK
       _getMain_LightsStatus
       _setDimmerLights
         _setDimmerLights_Line
         _setLED
           _LedPointSelect
         _setPercentValue
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setProductData
           _setPercentValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setRF_DimmerLights
           _setProductData
             _setPercentValue (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
         _setTxData
       _setDimmerLights_Adj
         _setBuz
           ___awdiv
         _setDimmerLights_Line
         _setPercentValue
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setProductData
           _setPercentValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setRF_DimmerLights
           _setProductData
             _setPercentValue (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
         _setRF_TransceiveGO
         _setTxData
   _Exception_Main
     _getDimmerLights_Line
     _getDimmerLights_Status
       _DimmerLightsPointSelect
     _getMain_All_Error_Status
     _getMain_LightsStatus
     _setBuz
       ___awdiv
     _setDimmerLights_SwOff
       _DimmerLightsPointSelect
       _getDelayOff_GO
         _DelayOffPointSelect
       _setDelayOff_GO
         _DelayOffPointSelect
         _DelayTimejudge
           ___bmul
         _setProductData
           _setPercentValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
     _setLED
       _LedPointSelect
   _Flash_Memory_Initialization
     _Flash_Memory_Read
     _Flash_Memory_Write
       _Flash_Memory_Unlock
     _setMemory_Data
     _setPercentValue
       ___awtoft
         ___ftpack
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___ftneg
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
   _Flash_Memory_Main
     _Flash_Memory_Modify
       _Flash_Memory_Erasing
         _Flash_Memory_Unlock
       _Flash_Memory_Read
       _Flash_Memory_Write
         _Flash_Memory_Unlock
       _setMemory_Data
     _getMain_LightsStatus
   _LED_Initialization
     _setLED_Initialization
       _LedPointSelect
       _setLED
         _LedPointSelect
   _LED_Main
     _setLED_Main
       _LedPointSelect
   _Load_Initialization
     _setLoad_AH_AL_Restore
   _Load_Main
     ___lwdiv
     ___wmul
     _getAll_DimmerLights_AdjSw
       _DimmerLightsPointSelect
     _getDimmer_LoadGO
     _getDimmer_Load_Status
     _getMain_All_Error_Status
     _getMain_LightsStatus
     _getMain_Lights_Count
     _setLoad_AH_AL_Restore
   _Mcu_Initialization
     _ADC_Set
     _Fosc_Set
     _IOC_Set
     _IO_Set
     _TMR1_Set
     _WDT_Set
   _RF_Initialization
     _setRF_Initialization
   _RF_Main
     _setRF_Main
       _CC2500_PowerOnInitial
         _CC2500_ClearRXFIFO
           _CC2500_WriteCommand
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
         _CC2500_ClearTXFIFO
           _CC2500_WriteCommand
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
         _CC2500_FrequencyCabr
           _CC2500_WriteCommand
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
           _DelayTime_1us
         _CC2500_InitPATable
           _CC2500_WriteREG
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
         _CC2500_InitSetREG
           _CC2500_WriteREG
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
         _CC2500_PowerRST
           _CC2500_WriteByte
           _DelayTime_1us
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
         _CC2500_SIDLEMode
           _CC2500_WriteCommand
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
       _CC2500_RxData
         _CC2500_ReadByte
         _CC2500_ReadStatus
           _CC2500_ReadByte
           _CC2500_WriteByte
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
       _CC2500_TxData
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
       _RF_RxDisable
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
       ___lwdiv
       _getBuz_GO
       _getRF_KeyStatus
       _getRxData
         _getMain_All_Error_Status
         _setControl_Lights_Table
           _setBuz
             ___awdiv
           _setDimmerLights_ErrorClose
             _DimmerLightsPointSelect
             _getDimmerLights_Status
               _DimmerLightsPointSelect
             _setDimmerLights_SwOff
               _DimmerLightsPointSelect
               _getDelayOff_GO
                 _DelayOffPointSelect
               _setDelayOff_GO
                 _DelayOffPointSelect
                 _DelayTimejudge
                   ___bmul
                 _setProductData
                   _setPercentValue (ARG)
                     ___awtoft
                       ___ftpack
                     ___ftadd
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___fttol
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftadd (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftneg (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftdiv (ARG)
                             ___awtoft (ARG)
                               ___ftpack
                             ___ftpack (ARG)
                           ___ftmul (ARG)
                             ___awtoft (ARG)
                               ___ftpack
                             ___ftpack (ARG)
                         ___ftpack (ARG)
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
           _setProductData
             _setPercentValue (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
           _setRFSW_AdjControl
             _getDimmerLights_Status
               _DimmerLightsPointSelect
             _setMemory_Modify
             _setProductData
               _setPercentValue (ARG)
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
             _setRF_DimmerValue
               _setDimmerLights_AdjRF
                 _DimmerLightsPointSelect
                 _getPercentValue
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
               _setProductData
                 _setPercentValue (ARG)
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
             _setTxData
           _setRFSW_Control
             _getDelayOff_GO
               _DelayOffPointSelect
             _getDimmerLights_Status
               _DimmerLightsPointSelect
             _setBuz
               ___awdiv
             _setDelayOff_GO
               _DelayOffPointSelect
               _DelayTimejudge
                 ___bmul
               _setProductData
                 _setPercentValue (ARG)
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
             _setDimmerLights_SwOff
               _DimmerLightsPointSelect
               _getDelayOff_GO
                 _DelayOffPointSelect
               _setDelayOff_GO
                 _DelayOffPointSelect
                 _DelayTimejudge
                   ___bmul
                 _setProductData
                   _setPercentValue (ARG)
                     ___awtoft
                       ___ftpack
                     ___ftadd
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___fttol
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftadd (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftneg (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftdiv (ARG)
                             ___awtoft (ARG)
                               ___ftpack
                             ___ftpack (ARG)
                           ___ftmul (ARG)
                             ___awtoft (ARG)
                               ___ftpack
                             ___ftpack (ARG)
                         ___ftpack (ARG)
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
             _setDimmerLights_SwOn
               _DimmerLightsPointSelect
               _setBuz
                 ___awdiv
             _setRF_DimmerLights
               _setProductData
                 _setPercentValue (ARG)
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
             _setTxData
           _setTxData
         _setLog_Code
           _setBuz
             ___awdiv
           _setMemory_LoopSave
           _setMemory_Modify
           _setProductData
             _setPercentValue (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
         _setTxData
   _Switch_Initialization
     _TouchPower
       _Timeout_Counter
       _set_TimeoutCleared
     _setSw_Initialization
       _setLED
         _LedPointSelect
   _Switch_Main
     _TouchPower
       _Timeout_Counter
       _set_TimeoutCleared
     _setSw_Main
       _SwPointSelect
       _getMain_All_Error_Status
       _getSw_KeyStatus
       _setBuz
         ___awdiv
       _setDimmerLights_AdjOn
         _DimmerLightsPointSelect
       _setDimmerLights_SwOff
         _DimmerLightsPointSelect
         _getDelayOff_GO
           _DelayOffPointSelect
         _setDelayOff_GO
           _DelayOffPointSelect
           _DelayTimejudge
             ___bmul
           _setProductData
             _setPercentValue (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
       _setDimmerLights_SwOn
         _DimmerLightsPointSelect
         _setBuz
           ___awdiv
       _setRF_Learn
   _Temp_Initialization
     _setTemp_Initialization
   _Temp_Main
     _setTemp_Main
       _getMain_All_Error_Status
       _setBuz
         ___awdiv
       _setProductData
         _setPercentValue (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
   _WDT_Main
     _WDT_Clearing
   _getLoad_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _getTemp_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _myMain_Initialization
   _my_MainTimer
     _setBuz
       ___awdiv

 _ISR (ROOT)
   _IOC_ISR
     _setDimmerLights_IntrIOC_GO
   _TMR1_ISR
     _setDimmerLights_IntrControl

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       1       1        7.1%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      8       B       2       78.6%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     4D      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      3      4F       7       98.8%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      50       9      100.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      4      4F      11       98.8%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      7      4C      13       95.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     195      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     195      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.32 build 58300 
Symbol Table                                                                                   Thu Dec 25 17:01:48 2014

                    __size_of_Switch_Main 000B                     ?_Flash_Memory_Erasing 0070  
                            _WDT_Clearing 0002                            ___bmul@product 0075  
               getMain_Lights_Count@count 0073                                        l96 1610  
                                      l98 1624                                        _RD 0CA8  
                 __end_of_CC2500_WriteREG 1F3F                                        _WR 0CA9  
                            ___awdiv@sign 0021                                        _Sw 006E  
                     ___wmul@multiplicand 0075                      _getDimmerLights_Line 1C36  
                  __end_of_setDelayOff_GO 15DF                              ___ftadd@exp1 0048  
                            ___ftadd@exp2 0047                 setDimmerLights_Adj@lights 0068  
                __size_of_getRF_KeyStatus 0011                      _setDimmerLights_Main 0B76  
                    _setDimmerLights_Line 1D14                              ___ftadd@sign 0046  
                                     l110 13EF                                       l106 13F5  
                                     l107 13F1                                       l108 13E1  
                                     l323 1DCB                      _setDimmerLights_SwOn 17A4  
                                     l324 1DCD                                       l255 0B4E  
                                     l367 1F8B                                       l821 1E91  
                                     l780 1DB4                                       l874 1C3D  
                                     l875 1C44                                       _GIE 005F  
                                     _CRC 00CD                                       _RA0 0060  
                                     _RB0 0068      __size_of_DimmerLights_Initialization 0016  
                                     _RB1 0069                                       _RA3 0063  
                                     _RC0 0070                                       _RB2 006A  
                                     _RA4 0064                                       _LED 00D1  
                                     _RC1 0071                                       _RB3 006B  
                                     _RC2 0072                                       _RB4 006C  
                                     _RA6 0066                                       _RB5 006D  
                                     _RA7 0067                                       _RC4 0074  
                                     _RC5 0075                                       _RC7 0077  
                                     _RF1 00A0                                       _ISR 0004  
                                     _WDT 00CB              getDimmerLights_Status@lights 0075  
                                     _Sw1 01CF                                       _Sw2 01D8  
               setDimmerLights_Adj@status 0066                  __end_of_CC2500_WriteByte 1DD8  
                   _Buzzer_Initialization 1AC3                           __end_of_ADC_Set 1B18  
                         ?_DelayTimejudge 0070                                       wreg 0009  
    setDimmerLights_Initialization@lights 0076              getDimmerLights_Status@status 0076  
                         _setDimmerLights 153A                         ??_getSw_KeyStatus 0073  
                   _setDimmerLights_AdjRF 1067                     _setDimmerLights_AdjOn 10E2  
                                    ?_ISR 0070           setDimmerLights_ErrorClose@count 0067  
                            ___ftdiv@cntr 0033                           __end_of_IOC_ISR 1BCC  
                              Load_Main@i 002A                              ___ftdiv@sign 0038  
                                    l1043 1E68                                      l1044 1E71  
                                    l1077 1363                                      l1078 136A  
                                    l1360 1FF9                                      l2304 1BED  
                                    l1346 1205                  ?_DimmerLightsPointSelect 0070  
                                    l3052 095E                                      l1620 0650  
                                    l2340 0B0B                                      l3046 0947  
                                    l2326 11D1                                      l2352 131D  
                                    l2264 0DEF                                      l1369 1442  
                                    l3075 0516                                      l1740 01EA  
                                    l2268 0D87                           __end_of_IOC_Set 1BA5  
                                    l2269 0D97                                      l1590 119B  
                                    l1750 01C6                                      l1742 008C  
                                    l1558 12F1                                      l1751 01C4  
                                    l1743 0088                                      l1744 0083  
                                    l1585 1184                                      l1913 0F42  
                                    l1586 119F                                      l1908 0F48  
                                    l2681 0357                                      l2659 1D6F  
                                    l2683 0235                                      l2885 1EA5  
                                    l7340 1EC8                     _setDimmerLights_SwOff 144A  
                                    l9102 15BE                                      l7326 1D88  
                                    l7350 1ED5                                      l7342 1ECA  
                                    l9032 0819                                      l7352 1ED9  
                                    l9050 083F                                      l9042 0821  
                                    l9026 080E                                      l9106 15C4  
                                    l9202 147F                                      l9044 082D  
                                    l9108 15CA                                      l9300 1DEA  
                                    l9054 0848                                      l9222 1682  
                                    l9320 1E57                                      l9058 0850  
                                    l9170 17BB                                      l8700 091B  
                                    l9332 1F9C                                      l9340 1F26  
                                    l9180 17CA                                      l9172 17BE  
                                    l9404 14CC                                      l6838 1D22  
                                    l9334 1FA7                                      l9342 1F29  
                                    l9318 1E52                                      l9430 1F4C  
                                    l9422 130C                                      l9190 17F8  
                                    l9182 17CF                                      l8704 0922  
                                    l9408 14DB                                      l9370 16F8  
                                    l8714 094C                                      l8706 092D  
                                    l8802 0508                                      l9346 1F2F  
                                    l9434 1F52                                      l9282 111C  
                                    l8732 1C8E                                      l9372 172A  
                                    l9532 117F                                      l8716 0954  
                                    l8708 0932                                      l8812 053A  
                                    l8804 0512                                      l9428 1F49  
                                    l9188 17F2                     _myMain_Initialization 1BF7  
                                    l9542 1196                                      l9534 1188  
                                    l8750 1F06                                      l8822 0555  
                                    l9294 1DE1                                      l9462 13A0  
                                    l9710 09F1                                      l9630 0AE0  
                                    l8728 1C88                                      l9368 1724  
                                    l8808 0528                                      l8832 0E0A  
                                    l9296 1DE4                                      l9472 13B0  
                                    l9456 1397                                      l8904 07B1  
                                    l9632 0AE4                                      l9624 0AA6  
                                    l9640 0AF0                                      l9554 08C2  
                                    l9562 08CE                                      l8762 049F  
                                    l9466 13A7                                      l9458 139A  
                                    l9730 0A07                                      l9714 09F7  
                                    l9634 0AE8                                      l9804 1275  
                                    l9572 08DE                                      l8772 04B5  
                                    l8860 0E7A                                      l8852 0E61  
                                    l8932 0CF9                                      l9468 13AA  
                                    l9732 0A20                                      l9708 09EE  
                                    l9652 0B1C                                      l8908 07B9  
                                    l9636 0AEC                                      l9628 0ACB  
                                    l9806 127A                                      l9558 08C8  
                                    l8790 04E2                                      l8766 04A6  
                                    l8838 0E20                                      l8950 0D29  
                                    l9654 0B1F                                      l9584 08FC  
                                    l9592 0908                                      l9568 08D8  
                                    l9576 08E4                                      l8792 04EC  
                                    l8784 04CF                                      l8960 0D4D  
                                    l8952 0D37                                      l9824 156A  
                                    l9672 0B35                                      l8880 075A  
                                    _CFGS 0CAE                                      l8794 04F1  
                                    l8962 0D50                                      l9834 1580  
                                    l9690 0B6A                                      l9682 0B5D  
                                    l9658 0B25                                      l8874 0744  
                                    l7996 13CD                                      l9588 0902  
                                    l8796 04F5                                      l9916 1FE4  
                                    l9684 0B61                                      l9676 0B54  
                                    l8892 0795                                      l8974 1CF7  
                                    l8990 1FD4                                      l9782 1252  
                                    l8966 0D5E                                      l8958 0D44  
                                    l9846 1764                                      l9686 0B64  
                                    l9678 0B57                                      l9768 1C24  
                                    l8896 079D                              __CFG_WDTE$ON 0000  
                                    l9794 1266                                      l9796 1269  
                                    l9980 0C7F                                      l9958 1CC4  
                                    l9990 0C91                                      _FREE 0CAC  
                                    _LATA 010C                                      _LATB 010D  
                                    _LATC 010E                                      _PEIE 005E  
                                    u9025 04D0                                      u9115 0509  
                                    u9205 0E62                                      u9055 04E3  
                                    u9215 0E71                                      u9225 0E7B  
                                    u9305 07A4                                      u9085 04F6  
                                    u9415 0D2A                                      u9335 07BA  
                                    u9505 1FC0                                      u9185 0E32  
                                    u9345 07C0                                      u9265 0766  
                                    u9195 0E42                                      u9275 0776  
                                    u9605 0840                                      u9445 0D45  
                                    u8815 0928                                      u9295 079E  
                                    u9385 0D00                                      u7795 13C3  
                                    u8835 0942                                      u9715 1D38  
                                    u9565 0824                                      u8855 094F  
                                    u9585 082E                                      u9595 0838  
                                    _LWLO 0CAD                                      u8885 0966  
                                    u9880 1642                                      u9885 1640  
                                    u9995 1F91                                      _RSSI 00D2  
                                    _WREN 0CAA                                      _WPUB 020D  
                                    _Buz1 00BC                                      _Load 0125  
                                    _Temp 00DA                                      _main 1691  
                            ___ftpack@arg 0073                       __end_of_DlyOff_Main 08B4  
                         __end_of_RF_Main 1ACF                              ___ftpack@exp 0076  
                                    fsr0h 0005                                      fsr1h 0007  
                                    fsr0l 0004                                      indf0 0000  
                                    indf1 0001                                      fsr1l 0006  
                                    btemp 007E                           __end_of_WDT_Set 1B4A  
                                    ltemp 007E             __size_of_setRF_Initialization 000A  
                                    start 0020                                      ttemp 007E  
                                    wtemp 007E                       DelayTimejudge@value 0025  
              __end_of_setRFSW_AdjControl 1331                         ___bmul@multiplier 0076  
                            ___ftmul@cntr 0037                              ___ftmul@sign 0038  
          getAll_DimmerLights_AdjSw@adjsw 0023              __size_of_Temp_Initialization 0003  
    _getDimmerLights_Allow_Condition$2350 0021      _getDimmerLights_Allow_Condition$2351 0022  
    _getDimmerLights_Allow_Condition$2349 0020                         ?_getDimmer_LoadGO 0070  
          getAll_DimmerLights_AdjSw@count 0020                                     ??_ISR 0072  
                            ___fttol@exp1 0056                              ___fttol@lval 0052  
 __end_of_getDimmerLights_Allow_Condition 127C  __size_of_getDimmerLights_Allow_Condition 003A  
       ??_getDimmerLights_Allow_Condition 0074          ?_getDimmerLights_Allow_Condition 0070  
         _getDimmerLights_Allow_Condition 1242                    _getDimmerLights_Status 1C06  
                      ??_getDimmer_LoadGO 0073                          __end_of_LED_Main 1B99  
        setDimmerLights_ErrorClose@lights 0068                     ?_getDimmerLights_Line 0070  
                                   l10002 0CA7                                     l10010 0CCB  
                                   l10104 0BCE                                     l10040 1232  
                                   l10032 1214                                     l10016 0CD6  
                                   l10106 0BD4                                     l10034 1220  
                                   l10044 123B                                     l10132 10DA  
                                   l10134 10BD                                     l10310 0DD0  
                                   l10136 10DF                                     l10216 0EB8  
                                   l10170 1DFD                                     l10092 0B9F  
                                   l10324 0DE8                                     l10340 1D74  
                                   l10260 0F2F                                     l10094 0BA5  
                                   l10502 06C3                                     l10246 0F17  
                                   l10174 1E02                                     l10192 1418  
                                   l10344 1D7A                                     l10408 0304  
                                   l10248 0F19                                     l10168 1DFA  
                                   l10186 1403                                     l10258 0F2E  
                                   l10602 0C5B                                     l10438 1E9E  
                                   l10702 00E1                                     l10374 0262  
                                   l10358 021F                                     l10296 0DA6  
                                   l10384 0294                                     l10616 12A8  
                                   l10474 1E93                                     l10634 12D1  
                                   l10734 0168                                     l10742 0190  
                                   l10662 006A                                     l10398 02D2  
                                   l10582 0C26                                     l10574 0C01  
                   ?_setDimmerLights_Main 0070                                     l10840 05E2  
                                   l10824 059F                                     l10752 01A6  
                                   l10728 015B                                     l10680 008B  
                                   l10818 058F                                     l10738 0184  
                                   l10586 0C2E                                     l10930 16C0  
                                   l10860 0633                                     l10836 05DA  
                                   l10828 05AE                                     l10854 0621  
                                   l10838 05B1                                     l10790 01D9  
                                   l10926 16B5                                     l10856 05F8  
                                   l10696 00AF                                     l10858 0629  
                                   l10866 0646                     ?_setDimmerLights_Line 0070  
                         ?_setDelayOff_GO 0061                     ?_setDimmerLights_SwOn 0070  
                                   ?_main 01EB                           __end_of___awdiv 0857  
                         __end_of___ftadd 056D                           __end_of___ftdiv 0E9C  
                         __end_of___ftneg 1B38                                     u10045 1701  
                                   u11015 1217                                     u11035 1221  
                                   u11045 122B                           __end_of___ftmul 07E1  
                                   u11055 1233                                     u11215 10C6  
                         ___awdiv@divisor 0073                                     u12045 129F  
                                   u11415 0F1F                                     u12055 12AE  
                                   _T1CON 0018                                     u12235 00AD  
                         __end_of___fttol 0D67                                     u12245 00DF  
                                   u11525 0DBF                                     u12335 0197  
                                   u12255 0114                                     u10735 1D62  
                                   u12095 12E9                                     u11395 0EFF  
                                   u12460 05E0                                     u12465 05BC  
                                   u11905 11FC                                     u12490 0627  
                                   u12495 0603                                     u11775 1EA6  
                                   u11785 1EAB                                     u11945 0C14  
                                   _IOCBF 0396                                     u11995 0C48  
                                   _IOCBN 0395                                     _IOCBP 0394  
                                   _IOCIE 005B                                     _IOCIF 0058  
                         __end_of___lwdiv 1242                           ___awdiv@counter 0020  
           __size_of_CC2500_FrequencyCabr 000B                                     _TMR1H 0017  
                                   _TMR1L 0016                                     _PORTA 000C  
                                   _PORTB 000D                                     _PORTC 000E  
                            ?_setLED_Main 0070                        setRF_Learn@command 0074  
                                   _TRISA 008C                                     _TRISB 008D  
                                   _TRISC 008E                                     _WPUB1 1069  
                                   _WPUB2 106A                   __end_of_Timeout_Counter 1D68  
                           __CFG_WRT$HALF 0000        __end_of_setDimmerLights_IntrIOC_GO 153A  
              _setDimmerLights_IntrIOC_GO 14E8                          __end_of_TMR1_ISR 1F86  
                 __size_of_setProductData 000E              __size_of_CC2500_WriteCommand 001A  
      __end_of_setDimmerLights_ErrorClose 1748                _setDimmerLights_ErrorClose 16EC  
                        __end_of_TMR1_Set 1BB1                                     _getAD 1DF2  
                           ___awtoft@sign 0028                             ___ftpack@sign 0077  
             __size_of_CC2500_ClearRXFIFO 0004                             ??_Buzzer_Main 0073  
                        __end_of_WDT_Main 1C86               __size_of_CC2500_ClearTXFIFO 0004  
                     CC2500_RxData@loop_f 0020                            __pbitbssCOMMON 03C0  
                          __CFG_BOREN$OFF 0000              __end_of_getMain_Lights_Count 1CA8  
                      Flash_Memory_Read@i 0074                          ?_CC2500_ReadByte 0070  
                                   ltemp0 007E                                     ltemp1 0082  
                                   ltemp2 0086                                     ltemp3 0080  
          __size_of_setLED_Initialization 0010              __end_of_getMain_LightsStatus 1C26  
           __end_of_setLED_Initialization 1C56                                     ttemp0 007E  
                                   ttemp1 0081                                     ttemp2 0084  
                                   ttemp3 0087                                     ttemp4 007F  
                            ?_setRF_Learn 0070                                     status 0003  
                                   wtemp0 007E                                     wtemp1 0080  
                                   wtemp2 0082                                     wtemp3 0084  
                                   wtemp4 0086                                     wtemp5 0088  
                                   wtemp6 007F                        _setRF_DimmerLights 1638  
             __size_of_Flash_Memory_Write 002A                         ?_CC2500_SIDLEMode 0070  
              __size_of_RF_Initialization 0003          __size_of_DelayOff_Initialization 0008  
                  ?_setLoad_AH_AL_Restore 0070                         setTemp_Main@error 0063  
             __size_of_setRF_TransceiveGO 0010                    ??_Flash_Memory_Erasing 0073  
                         _getPercentValue 0A40                        ??_CC2500_SIDLEMode 0077  
                         __initialization 0022                          ?_CC2500_PowerRST 0070  
                       ?_setMemory_Modify 0070                   __size_of_getDelayOff_GO 000E  
                       ??_setPercentValue 0057                              __end_of_main 16EC  
                     ?_setRF_DimmerLights 0061                          __end_of_Fosc_Set 1AD6  
                      ??_setMemory_Modify 0073                            _Exception_Main 056D  
                        ?_CC2500_WriteREG 0075                                 ??_ADC_Set 0073  
                 __end_of_setDimmerLights 158C                      _setSw_Initialization 1B18  
                                  ??_main 0078                             ___fttol@sign1 0051  
                            ?_setLog_Code 0070                   _setControl_Lights_Table 0AA5  
                          _setMemory_Data 1B54                    ?_Buzzer_Initialization 0070  
                 ??_DlyOff_Initialization 0075                                _Receive_OK 03C0  
                               ??_IOC_ISR 0072                                 ??_IOC_Set 0073  
         __end_of_DimmerLightsPointSelect 1DC0                    ?_setDimmerLights_AdjRF 0070  
                  ?_setDimmerLights_AdjOn 0070                  __size_of_setRFSW_Control 004F  
                      _RF_Timeout_Counter 1D29                   ??_Switch_Initialization 0078  
                    ??_setRF_DimmerLights 0062                                    ?_getAD 0073  
                       ??_getRF_KeyStatus 0073                    ?_setDimmerLights_SwOff 0070  
                             _DlyOff_Main 0857                    ?_myMain_Initialization 0070  
                                  _ADCON0 009D                                    _ADCON1 009E  
                               ??_RF_Main 0078                                    _ADRESH 009C  
                                  _ADRESL 009B                          ___awdiv@dividend 0075  
                   _getDimmer_Load_Status 1B0A                                 ??_WDT_Set 0073  
                        __end_of___awtoft 1F1D                                    _ANSELA 018C  
                                  _ANSELB 018D                                    _ANSELC 018E  
                        __end_of___ftpack 0976                  _getMain_All_Error_Status 116E  
                                  _IOCBF2 1CB2                                    i1l1311 001B  
                                  i1l1308 0013                                    i1l8060 1BC8  
                                  i1l7422 1500                                    i1l7414 14F5  
                                  i1l7502 041E                                    i1l7510 043B  
                                  i1l7520 0470                                    i1l7504 0424  
                                  i1l7450 036D                                    i1l8074 1F7F  
                                  i1l7516 045A                                    i1l7508 0435  
                                  i1l7438 1531                                    i1l7480 03CE  
                                  i1l7458 0377                                    i1l7484 03D7  
                                  i1l7468 039C                                    _FVRCON 0117  
    getDimmerLights_Allow_Condition@allow 0024                                    _PMADRH 0192  
                                  _PMADRL 0191                                    _PMDATH 0194  
                                  _PMDATL 0193                       ?_RF_Timeout_Counter 0070  
                                  _PMCON2 0196                                    _OSCCON 0099  
                      __size_of_Load_Main 019A                                    _TMR1IE 0488  
                                  _TMR1IF 0088                                    u790_25 1F7A  
                                  _IO_Set 1E27                                    _WDTCON 0097  
                    Exception_Main@i_3643 0269                        DelayTime_1us@count 0073  
          __size_of_CC2500_PowerOnInitial 0015             __end_of_CC2500_PowerOnInitial 1D53  
                                  _Dimmer 00C8                                    _DlySw1 01E1  
                                  _DlySw2 01E6             __size_of_setRF_TimeoutCleared 0004  
              __end_of_Mcu_Initialization 1CED                       __end_of_Buzzer_Main 13FC  
                                  _Memory 0220                                    _Timer1 0120  
                                  ___bmul 1C86                    __end_of_Exception_Main 0651  
                    Load_Main@Load_Status 0029                      Exception_Main@lights 026B  
                                  ___wmul 1E9B                                 ??___awdiv 0077  
                               ??___ftadd 0042              __size_of_DelayOffPointSelect 0013  
                               ??___ftdiv 002F                                 ??___ftneg 0078  
                   setDimmerLights@lights 0068                                 ??___ftmul 002F  
                               ??___fttol 004D              ?_Flash_Memory_Initialization 0070  
                  ??_getDimmerLights_Line 0073                                 ??___lwdiv 0077  
             setDimmerLights_AdjRF@lights 005E                    ??_setDimmerLights_Main 0078  
                  ??_setDimmerLights_Line 0073                                    _r_data 00D8  
                                  _s_data 00D9                    ??_setDimmerLights_SwOn 0028  
                                  _setLED 08B4                                    _myMain 00AE  
                    ??_RF_Timeout_Counter 0073                    __end_of_setMemory_Data 1B5F  
                        _DimmerLightsIntr 007A                     ?_setSw_Initialization 0070  
                   setDimmerLights@status 0066                          ___awdiv@quotient 0022  
                                  _setBuz 15DF                        __size_of_Temp_Main 0003  
             __end_of_Load_Initialization 1AC9          ??_setDimmerLights_Initialization 0075  
         ?_setDimmerLights_Initialization 0070                     ___ftmul@f3_as_product 0034  
     __end_of_setDimmerLights_IntrControl 0477               _setDimmerLights_IntrControl 0361  
                Flash_Memory_Read@address 0075                          ?_Timeout_Counter 0070  
              __end_of_setMemory_LoopSave 1C76               getMain_Lights_Count@status1 0074  
             getMain_Lights_Count@status2 0075                     __end_of_SwPointSelect 1D92  
            __size_of_Flash_Memory_Modify 004E         setDimmerLights_IntrControl@lights 0071  
                 __size_of_LedPointSelect 001D                       Flash_Memory_Write@i 0074  
            __size_of_Flash_Memory_Unlock 0009                getMain_LightsStatus@status 0073  
                              _TouchPower 1D68               __size_of_CC2500_InitPATable 001F  
                     CC2500_TxData@loop_e 0020                ?_getAll_DimmerLights_AdjSw 0070  
                 __end_of_getPercentValue 0AA5          __end_of_CC2500_registers_address 102F  
                 __end_of__initialization 0052                                 ?_LED_Main 0070  
                              ___ftadd@f1 003C                                ___ftadd@f2 003F  
                    _getRF_KeyStatus$5308 0075                             ?_my_MainTimer 0070  
               _setDimmerLights_SwOn$2330 0029                 _setDimmerLights_SwOn$2331 002A  
                              ___ftdiv@f1 002C                                ___ftdiv@f2 0029  
                              ___ftdiv@f3 0034                                ___ftneg@f1 0039  
                              ___awtoft@c 0023                       ___bmul@multiplicand 0073  
            ?_DimmerLights_Initialization 0070                                ___ftmul@f1 0029  
                              ___ftmul@f2 002C                                ___fttol@f1 0049  
                          __pcstackCOMMON 0070                           ?_Exception_Main 0070  
                            __pidataBANK4 1EDB                             __end_of_getAD 1E0C  
                               ?_TMR1_ISR 0070                                 ?_TMR1_Set 0070  
                  setLoad_AH_AL_Restore@i 0074                 setMemory_LoopSave@command 0074  
            __size_of_setDimmerLights_Adj 005C                        _LED_Initialization 1B81  
                         _getSw_KeyStatus 1EBB                 ??_setControl_Lights_Table 0078  
                      getRF_KeyStatus@key 0074                          ??_DelayTimejudge 0020  
                         ?_setMemory_Data 0073             ??_Flash_Memory_Initialization 005D  
                        ?_setDimmerLights 0066                      _getMain_Lights_Count 1C97  
                               ?_WDT_Main 0070                         __end_of_Load_Main 01F0  
                      __size_of_getBuz_GO 0011                      _getMain_LightsStatus 1C16  
              __end_of_set_TimeoutCleared 1AF0                        __size_of_getRxData 007F  
                     ?_LED_Initialization 0070                         ?_CC2500_WriteByte 0070  
                          _setProductData 1BDA                            _DimmerLights11 00CE  
                          _DimmerLights22 00CF                      __size_of_setLED_Main 0041  
                  ?_getDimmer_Load_Status 0070                                   ??_getAD 0076  
                     _Temp_Initialization 1ACF                        ??_CC2500_WriteByte 0073  
                              __pbssBANK0 006D                                __pbssBANK1 00A0  
                              __pbssBANK2 0120                                __pbssBANK3 01A0  
                              __pbssBANK4 0220                                 ?_Fosc_Set 0070  
                             _Buzzer_Main 13B6                         ??_setRFSW_Control 0066  
                       __end_of_Temp_Main 0803                                   ?_IO_Set 0070  
                          ??_my_MainTimer 0028                                ??_LED_Main 0078  
                         __CFG_VCAPEN$OFF 0000                   _DelayOff_Initialization 1B1F  
                           ??_Switch_Main 0078                            DelayTime_1us@i 0020  
                          DelayTime_1us@j 0022                      ??_LED_Initialization 0078  
                            _DimmerLights 006D                         LedPointSelect@led 0074  
                  __size_of_DelayOff_Main 0008                      __size_of_setRF_Learn 0011  
                             setBuz@count 0027                   ?_getDimmerLights_Status 0070  
                              __pmaintext 1691                            _getDelayOff_GO 1BCC  
                     _CC2500_WriteCommand 1DD8                      ?_Temp_Initialization 0070  
                                 ?___bmul 0073          __size_of_DimmerLightsPointSelect 0018  
                        ??_setDelayOff_GO 0063             ??_DimmerLights_Initialization 0077  
                                 ?___wmul 0073                                ??_TMR1_ISR 0072  
                           ?_setTemp_Main 0070                                _getLoad_AD 0BE3  
                              ??_TMR1_Set 0073                                __pintentry 0004  
                  ??_setSw_Initialization 0077                                _getLoad_OK 1AFC  
                      __size_of_setTxData 00B4                                   ?_setLED 0075  
                  __size_of_DelayTime_1us 0026                     ?_getMain_Lights_Count 0070  
                                 _ADC_Set 1B11                                   ?_setBuz 0024  
                               ?___awtoft 0023                                 ?___ftpack 0073  
                              _getTemp_AD 127C                                ??_WDT_Main 0073  
                   ?_getMain_LightsStatus 0070              __end_of_setRF_Initialization 1B54  
                      _setRFSW_AdjControl 12F3                    __end_of_setProductData 1BE8  
                                 _IOC_ISR 1BBE                                   _IOC_Set 1B99  
                    __size_of_setLog_Code 0034     getDimmerLights_Allow_Condition@lights 0023  
                    ?_CC2500_WriteCommand 0070                         _Flash_Memory_Main 11D5  
               __size_of_getDimmer_LoadGO 0007                         _Flash_Memory_Read 1D00  
              getAll_DimmerLights_AdjSw@i 0021               ?_setDimmerLights_IntrIOC_GO 0070  
                  __size_of_CC2500_RxData 0065                    __size_of_CC2500_TxData 006A  
             ?_setDimmerLights_ErrorClose 0070                       ?_setRFSW_AdjControl 0070  
                                 _RF_Data 01A0                                   _RF_Main 1ACC  
                      ?_Flash_Memory_Main 0070                        ?_Flash_Memory_Read 0070  
                                 _WDT_Set 1B41           __end_of_setControl_Lights_Table 0B0C  
                         setRF_Main@error 00EE                                ??_Fosc_Set 0073  
                             ?_TouchPower 0070                           _setPercentValue 0976  
                 ??_setLoad_AH_AL_Restore 0073                          ?_getPercentValue 0070  
            __end_of_CC2500_FrequencyCabr 1B6A                           __size_of_IO_Set 001B  
                       __end_of_getBuz_GO 1CB9                       ??_Flash_Memory_Main 0021  
                     ??_Flash_Memory_Read 0073                    __end_of_getDelayOff_GO 1BDA  
                                 _VarLED1 0168                                   _VarLED2 016C  
          __end_of_getDimmerLights_Status 1C16                         __end_of_getRxData 0CE0  
                 __end_of_getSw_KeyStatus 1EDB                  _CC2500_registers_address 1000  
                   ??_Temp_Initialization 0073                      ??_setRFSW_AdjControl 0063  
                          ??_setTemp_Main 0061                           __size_of___bmul 0011  
                     setProductData@value 005D                                   ___awdiv 0803  
                                 ___ftadd 0477                                   ___ftdiv 0DF3  
                                 ___ftneg 1B2F                           __size_of___wmul 0020  
                                 ___ftmul 072D                                   ___fttol 0CE0  
                     __end_of_Switch_Main 1B75                                   ___lwdiv 120B  
                 ??_Buzzer_Initialization 0073                           _getRF_KeyStatus 1CB9  
                              ??___awtoft 0026                                ??___ftpack 0020  
                         __size_of_setLED 005F                      setRFSW_AdjControl@sw 0066  
                         __size_of_setBuz 0059                                   __ptext1 12B7  
                                 __ptext2 1BF7                                   __ptext3 127C  
                                 __ptext4 0BE3                                   __ptext5 1DF2  
                                 __ptext6 1C76                                   __ptext7 0002  
                                 __ptext8 0800                                   __ptext9 0E9C  
                 ??_setDimmerLights_AdjRF 005D                   ??_setDimmerLights_AdjOn 0075  
               __size_of_CC2500_SIDLEMode 0004                              __size_of_ISR 001C  
              ??_getMain_All_Error_Status 0073                           ?_setProductData 005D  
               __end_of_Flash_Memory_Main 120B                 __end_of_Flash_Memory_Read 1D14  
                 ??_setDimmerLights_SwOff 0078                                _setRF_Main 0D67  
                 ??_myMain_Initialization 0073                             _DelayOff_Main 1B27  
                       _DimmerLights_Main 1E7B            __size_of_DlyOff_Initialization 0005  
                   ??_CC2500_WriteCommand 0075                 __size_of_setMemory_Modify 0010  
           __end_of_DlyOff_Initialization 1AEB                __end_of_CC2500_ClearRXFIFO 1ADE  
                ??_setTemp_Initialization 0073                __end_of_CC2500_ClearTXFIFO 1AE2  
           DimmerLightsPointSelect@lights 0074                              ?_DlyOff_Main 0070  
                      ?_DimmerLights_Main 0070                                   _product 006F  
                          _LedPointSelect 1E5E                       _DelayOffPointSelect 1CED  
                                 clrloop0 1AF7            __size_of_Switch_Initialization 000D  
           __end_of_Switch_Initialization 1BBE                      end_of_initialization 0052  
               ??_DelayOff_Initialization 0076                         _CC2500_InitSetREG 108B  
                           _DelayTime_1us 1F86                         __end_of_setTxData 1000  
              __end_of_Flash_Memory_Write 2000                                   init_ram 1AF0  
              __end_of_setRF_TransceiveGO 1C36                        ?_CC2500_InitSetREG 0070  
                     ??_DimmerLights_Main 0078                      Flash_Memory_Read@ret 0076  
                                 initloop 1AF1                                _setSw_Main 01F0  
                   CC2500_ReadByte@loop_b 0074                    setDimmerLights_SwOn@sw 002C  
                       _CC2500_ReadStatus 1F3F                      Flash_Memory_Modify@i 0020  
                   _setLED_Initialization 1C46                           ?_getDelayOff_GO 0070  
                              getBuz_GO@i 0020                        ?_CC2500_ReadStatus 0070  
                __size_of_CC2500_ReadByte 001C                             _CC2500_RxData 09DB  
                           _CC2500_TxData 0B0C                       ??_CC2500_InitSetREG 0020  
           __size_of_Flash_Memory_Erasing 000C                      ?_DelayOffPointSelect 0070  
                     _Flash_Memory_Modify 13FC                               ?_getLoad_AD 0070  
                             ?_getLoad_OK 0070                    ??_getMain_Lights_Count 0073  
                            __pstringtext 1000                       _Flash_Memory_Unlock 1B38  
                     ??_CC2500_ReadStatus 0075                    ??_getMain_LightsStatus 0073  
                 CC2500_InitSetREG@loop_c 0023                               ?_getTemp_AD 0070  
                     __size_of_TouchPower 0015                  setLED_Initialization@led 0077  
                  setSw_Initialization@sw 0077                 __end_of_DimmerLights_Main 1E9B  
                      _Mcu_Initialization 1CDB                  __size_of_CC2500_PowerRST 0044  
            __end_of_setRF_TimeoutCleared 1ADA                      __end_of_my_MainTimer 12F3  
                          ?_DelayOff_Main 0070                          __CFG_FOSC$INTOSC 0000  
                  __end_of_LedPointSelect 1E7B                   __end_of_setPercentValue 09DB  
                __size_of_CC2500_WriteREG 0022                 __end_of_CC2500_InitSetREG 10B5  
                     ?_Mcu_Initialization 0070                      ?_Flash_Memory_Modify 0070  
             __size_of_setRF_DimmerLights 0059                            ?_DelayTime_1us 0073  
                     _setDimmerLights_Adj 1748                      ?_Flash_Memory_Unlock 0070  
               __end_of_CC2500_ReadStatus 1F62                             ?_RF_RxDisable 0070  
         getMain_All_Error_Status@command 0024               ??_getAll_DimmerLights_AdjSw 0075  
                             ___ftdiv@exp 0037                          ??_Exception_Main 0066  
                          __end_of_IO_Set 1E42                      _setRF_Initialization 1B4A  
                      _setMemory_LoopSave 1C66                               _Switch_Main 1B6A  
                       __size_of_LED_Main 000C                          ?_getSw_KeyStatus 0070  
                          ?_CC2500_RxData 0070                            ?_CC2500_TxData 0070  
                 _DimmerLightsPointSelect 1DA8                   __end_of_getRF_KeyStatus 1CCA  
                        ??_setMemory_Data 0074                               ___ftmul@exp 0033  
                   _CC2500_PowerOnInitial 1D3E                      ??_Mcu_Initialization 0074  
                   ??_DelayOffPointSelect 0073                             ?_WDT_Clearing 0070  
                     ?_setMemory_LoopSave 0070                      ?_setDimmerLights_Adj 0066  
                          __end_of___bmul 1C97                      setRF_DimmerLights@on 0061  
                          __end_of___wmul 1EBB                         getSw_KeyStatus@sw 0077  
             __size_of_RF_Timeout_Counter 0015                         __size_of_TMR1_ISR 0024  
           __size_of_getDimmerLights_Line 0010                         __size_of_TMR1_Set 000C  
           __size_of_setDimmerLights_Main 006D                            __end_of_setLED 0913  
           __size_of_setDimmerLights_Line 0015             __size_of_setDimmerLights_SwOn 005C  
                          __end_of_setBuz 1638                      _CC2500_FrequencyCabr 1B5F  
                 ??_getDimmer_Load_Status 0073                __size_of_Flash_Memory_Main 0036  
              __size_of_Flash_Memory_Read 0014                               ?_setRF_Main 0070  
                         _setRFSW_Control 1499                         __size_of_WDT_Main 0010  
                     start_initialization 0022                         _setRF_DimmerValue 110F  
                         ?_LedPointSelect 0070                                 _Load_Main 0056  
                             __end_of_ISR 0020                          _getDimmer_LoadGO 1B03  
                   ??_Flash_Memory_Modify 0077              __size_of_Load_Initialization 0003  
                      ?_setRF_DimmerValue 0070                __end_of_CC2500_InitPATable 0800  
         __size_of_setTemp_Initialization 0001                      ??_setMemory_LoopSave 0073  
                   ??_Flash_Memory_Unlock 0073                      __end_of_setTemp_Main 0F4C  
                          ??_RF_RxDisable 0077                       __size_of_getLoad_AD 007E  
                            ?_Buzzer_Main 0070                       __size_of_getLoad_OK 0007  
                      _set_TimeoutCleared 1AEB                                  ??_IO_Set 0073  
                __size_of_Timeout_Counter 0015                                 _VarErrLED 0164  
                             ?_setSw_Main 0070                       ??_setRF_DimmerValue 0061  
                     __size_of_getTemp_AD 003B                    ?_setLED_Initialization 0070  
                   ?_setRF_Initialization 0070                         __size_of_Fosc_Set 0004  
               __size_of_CC2500_WriteByte 0018                                 _Temp_Main 0800  
                     ?_set_TimeoutCleared 0070                            ??_WDT_Clearing 0073  
                               _Rx_Length 00D3                     setProductData@address 0060  
                     Exception_Main@count 0265                   setRF_DimmerValue@lights 0062  
                     Exception_Main@error 0266                                  ??___bmul 0074  
                   ??_setDimmerLights_Adj 0067                                  ??___wmul 0077  
                  __size_of_SwPointSelect 0015                                 _Tx_Length 00D6  
                             __pdataBANK4 0245                                  ??_setLED 0076  
               _getAll_DimmerLights_AdjSw 10B5                                  ?_ADC_Set 0070  
                                ??_setBuz 0026                           ??_DelayOff_Main 0078  
                       ??_CC2500_ReadByte 0073          __end_of_getMain_All_Error_Status 11A1  
                        _CC2500_SIDLEMode 1AE2                __size_of_DimmerLights_Main 0020  
               __end_of_setRF_DimmerValue 113E                        setMemory_Data@data 0073  
                   ?_CC2500_FrequencyCabr 0070                             ??_setLED_Main 0075  
                       __size_of___awtoft 0022                         __size_of___ftpack 0063  
                                ?_IOC_ISR 0070                               __pbssCOMMON 0079  
                                ?_IOC_Set 0070                                 ___latbits 0003  
                        _setMemory_Modify 1C56                                ?_Load_Main 0070  
                           __pcstackBANK0 0020                             __pcstackBANK1 00EC  
               setRF_TransceiveGO@command 0074                             __pcstackBANK3 01EB  
                           __pcstackBANK4 0265                      ??_set_TimeoutCleared 0073  
                        ?_setPercentValue 0070                           ??_DelayTime_1us 0075  
              __size_of_CC2500_InitSetREG 002A                  __size_of_setDimmerLights 0052  
                           DlyOff_Main@sw 00EC                         ??_CC2500_PowerRST 0075  
                                ?_RF_Main 0070                                  ?_WDT_Set 0070  
                            ??_TouchPower 0073                      __size_of_DlyOff_Main 005D  
              __size_of_CC2500_ReadStatus 0023                         ??_CC2500_WriteREG 0076  
                           ??_setRF_Learn 0073                             _DimmerLights1 0153  
                           _DimmerLights2 01BE                     CC2500_WriteREG@w_addr 0077  
                   setDelayOff_GO@command 0061                 ??_DimmerLightsPointSelect 0073  
          __size_of_setLoad_AH_AL_Restore 001B                           ??_CC2500_RxData 0077  
           __end_of_setLoad_AH_AL_Restore 1E27                  setRFSW_AdjControl@status 0065  
                         ??_CC2500_TxData 0077                                 __pnvBANK0 006F  
                          getRxData@error 006C               __size_of_LED_Initialization 000C  
                    _setRF_TimeoutCleared 1AD6                    ?_CC2500_PowerOnInitial 0070  
                         Exception_Main@i 0267                                ?_Temp_Main 0070  
                     __size_of_setRF_Main 008C                          ___lwdiv@dividend 0075  
                   DelayOffPointSelect@sw 0074                                setBuz@time 0024  
                     setDelayOff_GO@value 0062                  ?_setControl_Lights_Table 0070  
                        ?_getRF_KeyStatus 0070                            Load_Main@error 0028  
                  _setTemp_Initialization 1066                                 _getBuz_GO 1CA8  
     __end_of_Flash_Memory_Initialization 072D               _Flash_Memory_Initialization 0651  
                                ?___awdiv 0073                                 __ptext100 0DF3  
                               __ptext101 0477                                 __ptext110 116E  
                               __ptext102 1EFB                                 __ptext111 1D92  
                               __ptext103 0913                                 __ptext120 1C86  
                               __ptext112 113E                                 __ptext104 08B4  
                               __ptext121 1BCC                                 __ptext113 1B27  
                               __ptext105 1E5E                                 __ptext130 1AC3  
                               __ptext122 1C06                                 __ptext114 0857  
                               __ptext106 1D14                                 __ptext123 1DA8  
                               __ptext115 16EC                                 __ptext107 1C16  
                               __ptext132 1F62                                 __ptext124 15DF  
                               __ptext116 144A                                 __ptext108 1242  
                               __ptext133 0361                                 __ptext125 0803  
                               __ptext117 158C                                 __ptext109 1AFC  
                                ?___ftadd 003C                                 __ptext134 1BBE  
                               __ptext126 1B1F                                 __ptext118 1BDA  
                               __ptext135 14E8                                 __ptext127 1AE6  
                               __ptext119 1FAC                                 __ptext128 1CED  
                               __ptext129 13B6                                 _getRxData 0C61  
                                ?___ftdiv 0029                                  ?___ftneg 0039  
                                ?___ftmul 0029                                  ?___fttol 0049  
                   __size_of_my_MainTimer 003C                                  ?___lwdiv 0073  
                 __end_of_setRFSW_Control 14E8                          ??_setProductData 005E  
           __size_of_setSw_Initialization 0007            __size_of_Buzzer_Initialization 0003  
           __end_of_Buzzer_Initialization 1AC6                          getPercentValue@i 005A  
                        setPercentValue@i 005A                             ??_setLog_Code 0061  
                getDimmerLights_Line@line 0074                        __end_of_TouchPower 1D7D  
                         DelayTimejudge@i 0022                           DelayTimejudge@j 0023  
                         DelayTimejudge@k 0024                       __size_of_setSw_Main 0171  
            CC2500_ReadStatus@status_addr 0076            __size_of_setDimmerLights_AdjRF 0024  
          __size_of_setDimmerLights_AdjOn 002D             __end_of_setDimmerLights_AdjRF 108B  
           __end_of_setDimmerLights_AdjOn 110F                    CC2500_WriteByte@loop_a 0074  
                               _r_address 00D7            __size_of_setDimmerLights_SwOff 004F  
          __size_of_myMain_Initialization 000F             __end_of_setDimmerLights_SwOff 1499  
            __end_of_CC2500_patable_vaule 1066             __end_of_myMain_Initialization 1C06  
                          __size_of_getAD 001A                          ___lwdiv@quotient 0021  
                 __size_of_DelayTimejudge 002A                             _SwPointSelect 1D7D  
                     __end_of_setLED_Main 1372                          ??_getDelayOff_GO 0075  
                     _DimmerLightsIntrIOC 00D0                    ??_setRF_Initialization 0073  
             __end_of_Temp_Initialization 1AD2                         _CC2500_rfSettings 102F  
                          ___wmul@product 0020                                  _LED_Main 1B8D  
                         SwPointSelect@sw 0074                                 clear_ram0 1AF6  
                CC2500_InitPATable@loop_d 0022                     ?_setRF_TimeoutCleared 0070  
                            _my_MainTimer 12B7                                 _setTxData 0F4C  
     __end_of_DimmerLights_Initialization 1DA8               _DimmerLights_Initialization 1D92  
                      _CC2500_ClearRXFIFO 1ADA                        _CC2500_ClearTXFIFO 1ADE  
                setRF_DimmerLights@lights 0065                                  _GO_nDONE 04E9  
                     __end_of_setRF_Learn 1CDB                         ??_Timeout_Counter 0073  
                              ?_getBuz_GO 0073                  __size_of_getPercentValue 0065  
                setRF_DimmerLights@status 0064               __size_of_setRFSW_AdjControl 003E  
                      _Flash_Memory_Write 1FD6                                ?_getRxData 0070  
                            ??_getLoad_AD 0020                                  _TMR1_ISR 1F62  
                  CC2500_InitSetREG@temp1 0021                    CC2500_InitSetREG@temp2 0022  
                            ??_getLoad_OK 0073                                  _TMR1_Set 1BA5  
                     ?_CC2500_ClearRXFIFO 0070                       ?_CC2500_ClearTXFIFO 0070  
                      _setRF_TransceiveGO 1C26                                  _RF_Count 0123  
                    __end_of_RF_RxDisable 1BF7                              ??_getTemp_AD 0077  
             __end_of_CC2500_WriteCommand 1DF2                    ??_CC2500_FrequencyCabr 0077  
                                _WDT_Main 1C76                   DlyOff_Initialization@sw 0075  
                   getSw_KeyStatus@status 0076                          __size_of_ADC_Set 0007  
                       ___wmul@multiplier 0073                __size_of_setRF_DimmerValue 002F  
                     ?_Flash_Memory_Write 0070                          setRF_Main@loop_f 00ED  
                   __size_of_setTemp_Main 00B0                       ?_setRF_TransceiveGO 0070  
                 __size_of_setDelayOff_GO 0053                                  _DelayOff 0079  
                            setSw_Main@sw 0068          setDimmerLights_IntrIOC_GO@lights 0071  
                             ??_Load_Main 0026                          __size_of_IOC_ISR 000E  
            ?_setDimmerLights_IntrControl 0070            getMain_All_Error_Status@status 0025  
                        __size_of_IOC_Set 000C              __end_of_Flash_Memory_Erasing 1B81  
                          ?_SwPointSelect 0070                               getAD@adcon0 0076  
                             getAD@adcon1 0073                            setLED_Main@led 0077  
                    __end_of_WDT_Clearing 0004                       __end_of_setLog_Code 11D5  
                   _DlyOff_Initialization 1AE6                      ??_CC2500_ClearRXFIFO 0077  
                    ??_CC2500_ClearTXFIFO 0077                 __end_of_CC2500_rfSettings 105E  
                        __size_of_RF_Main 0003                                  _Fosc_Set 1AD2  
                        __size_of_WDT_Set 0009                     setRFSW_Control@status 0067  
                      __end_of_getLoad_AD 0C61                        __end_of_getLoad_OK 1B03  
                   _Switch_Initialization 1BB1         __size_of_getMain_All_Error_Status 0033  
                    ??_Flash_Memory_Write 0073                         ??_setDimmerLights 0067  
               ?_getMain_All_Error_Status 0070                      __size_of_Buzzer_Main 0046  
                      __end_of_getTemp_AD 12B7                                ?_setTxData 0070  
                            ?_Switch_Main 0070                          _CC2500_WriteByte 1DC0  
                       getLoad_AD@channel 0022                      ??_setRF_TransceiveGO 0073  
            Flash_Memory_Initialization@i 005E                                  _SwDetect 00D5  
                             ??_Temp_Main 0078                         setRFSW_Control@sw 0068  
           _getMain_All_Error_Status$3628 0020             _getMain_All_Error_Status$3629 0022  
                __end_of_getDimmer_LoadGO 1B0A                       _Load_Initialization 1AC6  
                               setLED@led 0076                              _setTemp_Main 0E9C  
                        __size_of___awdiv 0054                          __size_of___ftadd 00F6  
                        ?_setRFSW_Control 0070                          __size_of___ftdiv 00A9  
                        __size_of___ftneg 0009                          __size_of___ftmul 00B4  
                        __size_of___fttol 0087                          __size_of___lwdiv 0037  
                setDimmerLights_SwOn@idle 002B                                  ___awtoft 1EFB  
                        ??_LedPointSelect 0073                                  ___ftpack 0913  
           __size_of_getMain_Lights_Count 0011                    getDimmer_LoadGO@loadgo 0073  
           __size_of_getMain_LightsStatus 0010                         getTemp_AD@channel 0020  
                            ??_setRF_Main 00EC                      CC2500_WriteREG@value 0075  
                             _setLED_Main 1331                __end_of_setRF_DimmerLights 1691  
          __size_of_getDimmer_Load_Status 0007                  ?_DelayOff_Initialization 0070  
                        getDelayOff_GO@go 0076                          getDelayOff_GO@sw 0075  
           __end_of_getDimmer_Load_Status 1B11                          setDelayOff_GO@sw 0064  
                         ___lwdiv@divisor 0073                      ?_Load_Initialization 0070  
      __size_of_getAll_DimmerLights_AdjSw 002D                           ___lwdiv@counter 0020  
                                __ptext10 1ACF                                  __ptext11 1066  
                                __ptext20 1D68                                  __ptext12 1B6A  
                                __ptext21 1AEB                                  __ptext13 01F0  
                                __ptext30 17A4                                  __ptext22 1D53  
                                __ptext14 1CCA                                  __ptext31 12F3  
                                __ptext23 1ACC                                  __ptext15 10E2  
                                __ptext40 0B0C                                  __ptext32 110F  
                                __ptext24 0D67                                  __ptext16 1EBB  
                                __ptext41 09DB                                  __ptext33 1067  
                                __ptext25 0C61                                  __ptext17 1D7D  
                                __ptext50 1B5F                                  __ptext42 1F3F  
                                __ptext34 0A40                                  __ptext26 11A1  
                                __ptext18 1BB1                                  __ptext51 1F86  
                                __ptext43 1E42                                  __ptext35 072D  
                                __ptext27 1C66                                  __ptext19 1B18  
                                __ptext60 1CDB                                  __ptext52 1ADE  
                                __ptext44 1D3E                                  __ptext36 1C56  
                                __ptext28 0AA5                                  __ptext61 1B41  
                                __ptext53 1ADA                                  __ptext45 1AE2  
                                __ptext37 1CB9                                  __ptext29 1499  
                                __ptext70 1B03                                  __ptext62 1BA5  
                                __ptext54 1DD8                                  __ptext46 1372  
                                __ptext38 1CA8                                  __ptext71 10B5  
                                __ptext63 1E27                                  __ptext55 1AD6  
                                __ptext47 108B                                  __ptext39 1BE8  
                                __ptext80 11D5                                  __ptext72 1E9B  
                                __ptext64 1B99                                  __ptext56 1D29  
                                __ptext48 07E1                                  __ptext81 13FC  
                                __ptext73 120B                                  __ptext65 1AD2  
                                __ptext57 1DC0                                  __ptext49 1F1D  
                                __ptext90 1E7B                                  __ptext82 1B75  
                                __ptext74 1AC6                                  __ptext66 1B11  
                                __ptext58 1AC9                                  __ptext91 0B76  
                                __ptext83 0651                                  __ptext75 1E0C  
                                __ptext67 0056                                  __ptext59 1B4A  
                                __ptext92 1748                                  __ptext84 1B54  
                                __ptext76 1B8D                                  __ptext68 1C97  
                                __ptext93 1C26                                  __ptext85 1FD6  
                                __ptext77 1331                                  __ptext69 1B0A  
                                __ptext94 153A                                  __ptext86 1B38  
                                __ptext78 1B81                                  __ptext95 0F4C  
                                __ptext87 1D00                                  __ptext79 1C46  
                                __ptext96 1638                                  __ptext88 056D  
                                __ptext97 0976                                  __ptext89 1C36  
                                __ptext98 0CE0                                  __ptext99 1B2F  
                                __product 0245             ??_setDimmerLights_IntrControl 0070  
                 ??_setLED_Initialization 0077                  ??_getDimmerLights_Status 0075  
            __end_of_getDimmerLights_Line 1C46              __end_of_setDimmerLights_Main 0BE3  
            __end_of_setDimmerLights_Line 1D29              __end_of_setDimmerLights_SwOn 1800  
                            ??_setSw_Main 0066                    ??_setRF_TimeoutCleared 0073  
                           setLED@command 0075                             __size_of_main 005B  
                             _setRF_Learn 1CCA                  __end_of_CC2500_SIDLEMode 1AE6  
              setDimmerLights_Main@lights 0069               __end_of_DelayOffPointSelect 1D00  
              CC2500_WriteCommand@command 0076                   setDimmerLights_AdjOn@sw 0075  
                         _CC2500_ReadByte 1E42                        _CC2500_InitPATable 07E1  
                __end_of_setMemory_Modify 1C66                        __end_of_setRF_Main 0DF3  
                             ??_getBuz_GO 0075               __size_of_Mcu_Initialization 0012  
             setDimmerLights_ErrorClose@i 0069                      _CC2500_patable_vaule 105E  
                             ??_getRxData 006B                              getLoad_OK@ok 0073  
              __end_of_RF_Timeout_Counter 1D3E                                  main@argc 01EB  
                                main@argv 01ED                       ?_CC2500_InitPATable 0070  
                    _getSw_KeyStatus$6304 0074                      _getSw_KeyStatus$6305 0075  
                         _CC2500_PowerRST 1372                  __size_of_getSw_KeyStatus 0020  
             __end_of_Flash_Memory_Modify 144A                         ??_getPercentValue 0057  
                             _setLog_Code 11A1               __end_of_Flash_Memory_Unlock 1B41  
                         ??_SwPointSelect 0073                           _CC2500_WriteREG 1F1D  
                      __end_of_setSw_Main 0361                     ??_Load_Initialization 0075  
                           _Transceive_OK 03C1                    ?_DlyOff_Initialization 0070  
                          _DelayTimejudge 1FAC                               pic14e$flags 007E  
            ??_setDimmerLights_IntrIOC_GO 0070                setDimmerLights_Line@lights 0073  
            ??_setDimmerLights_ErrorClose 0066                   setDimmerLights_SwOff@sw 0065  
             __size_of_setMemory_LoopSave 0010         __end_of_getAll_DimmerLights_AdjSw 10E2  
                                intlevel1 0000                      ??_CC2500_InitPATable 0020  
                  ?_Switch_Initialization 0070                   ??_CC2500_PowerOnInitial 0078  
  __end_of_setDimmerLights_Initialization 116E   __size_of_setDimmerLights_Initialization 0030  
          _setDimmerLights_Initialization 113E               __end_of_setDimmerLights_Adj 17A4  
                 ?_setTemp_Initialization 0070                               ??_setTxData 0073  
                  CC2500_InitPATable@temp 0021                     __size_of_RF_RxDisable 000F  
                       _RF_Initialization 1AC9      __size_of_setDimmerLights_IntrControl 0116  
                             getLoad_AD@i 0025                               getLoad_AD@j 0024  
                             getLoad_AD@k 0023                      _Flash_Memory_Erasing 1B75  
                      ?_RF_Initialization 0070                                _SPI0Buffer 00D4  
                 __size_of_Exception_Main 00E4           __end_of_DelayOff_Initialization 1B27  
     __size_of_setDimmerLights_IntrIOC_GO 0052       __size_of_setDimmerLights_ErrorClose 005C  
                   __size_of_WDT_Clearing 0002                     __end_of_DelayOff_Main 1B2F  
                     ??_RF_Initialization 0074                   __size_of_setMemory_Data 000B  
                          _setDelayOff_GO 158C          __size_of_setControl_Lights_Table 0067  
                  __end_of_DelayTimejudge 1FD6               getDimmer_Load_Status@status 0073  
    __size_of_Flash_Memory_Initialization 00DC               __size_of_set_TimeoutCleared 0005  
                           ??_DlyOff_Main 006B                     setMemory_Data@address 0075  
                   __end_of_DelayTime_1us 1FAC                   __end_of_CC2500_ReadByte 1E5E  
            __end_of_setSw_Initialization 1B1F                           _Timeout_Counter 1D53  
         __size_of_getDimmerLights_Status 0010                      getPercentValue@value 0059  
                            _RF_RxDisable 1BE8                __end_of_LED_Initialization 1B8D  
          __end_of_setTemp_Initialization 1067                  __size_of_setPercentValue 0065  
                 setMemory_Modify@command 0074                      setPercentValue@value 0059  
               __end_of_RF_Initialization 1ACC                     __end_of_CC2500_RxData 0A40  
                   __end_of_CC2500_TxData 0B76                     _setLoad_AH_AL_Restore 1E0C  
                 __end_of_CC2500_PowerRST 13B6  
