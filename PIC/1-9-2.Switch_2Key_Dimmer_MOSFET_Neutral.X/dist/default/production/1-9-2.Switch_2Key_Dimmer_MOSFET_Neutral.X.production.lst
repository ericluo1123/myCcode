

Microchip Technology PIC LITE Macro Assembler V1.32 build 58300 
                                                                                               Wed Jan 07 09:22:54 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 58300
     1                           	processor	16F1518
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK4,global,class=CODE,delta=2
     5                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     6                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
     9                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    13                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    14                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    15                           	psect	dataBANK4,global,class=BANK4,space=1,delta=1
    16                           	psect	clrtext,global,class=CODE,delta=2
    17                           	psect	inittext,global,class=CODE,delta=2
    18                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1
    19                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    20                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    21                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    22                           	psect	text1,local,class=CODE,merge=1,inline,delta=2
    23                           	psect	text2,local,class=CODE,merge=1,delta=2
    24                           	psect	text3,local,class=CODE,merge=1,inline,delta=2
    25                           	psect	text4,local,class=CODE,merge=1,inline,delta=2
    26                           	psect	text5,local,class=CODE,merge=1,inline,delta=2
    27                           	psect	text6,local,class=CODE,merge=1,delta=2
    28                           	psect	text7,local,class=CODE,merge=1,delta=2
    29                           	psect	text8,local,class=CODE,merge=1,inline,delta=2
    30                           	psect	text9,local,class=CODE,merge=1,delta=2
    31                           	psect	text10,local,class=CODE,merge=1,inline,delta=2
    32                           	psect	text11,local,class=CODE,merge=1,delta=2
    33                           	psect	text12,local,class=CODE,merge=1,inline,delta=2
    34                           	psect	text13,local,class=CODE,merge=1,delta=2
    35                           	psect	text14,local,class=CODE,merge=1,inline,delta=2
    36                           	psect	text15,local,class=CODE,merge=1,delta=2
    37                           	psect	text16,local,class=CODE,merge=1,delta=2
    38                           	psect	text17,local,class=CODE,merge=1,delta=2
    39                           	psect	text18,local,class=CODE,merge=1,inline,delta=2
    40                           	psect	text19,local,class=CODE,merge=1,delta=2
    41                           	psect	text20,local,class=CODE,merge=1,delta=2
    42                           	psect	text21,local,class=CODE,merge=1,inline,delta=2
    43                           	psect	text22,local,class=CODE,merge=1,inline,delta=2
    44                           	psect	text23,local,class=CODE,merge=1,inline,delta=2
    45                           	psect	text24,local,class=CODE,merge=1,inline,delta=2
    46                           	psect	text25,local,class=CODE,merge=1,inline,delta=2
    47                           	psect	text26,local,class=CODE,merge=1,inline,delta=2
    48                           	psect	text27,local,class=CODE,merge=1,delta=2
    49                           	psect	text28,local,class=CODE,merge=1,inline,delta=2
    50                           	psect	text29,local,class=CODE,merge=1,delta=2
    51                           	psect	text30,local,class=CODE,merge=1,delta=2
    52                           	psect	text31,local,class=CODE,merge=1,delta=2
    53                           	psect	text32,local,class=CODE,merge=1,delta=2
    54                           	psect	text33,local,class=CODE,merge=1,inline,delta=2
    55                           	psect	text34,local,class=CODE,merge=1,delta=2
    56                           	psect	text35,local,class=CODE,merge=1,inline,delta=2
    57                           	psect	text36,local,class=CODE,merge=1,delta=2
    58                           	psect	text37,local,class=CODE,merge=1,delta=2
    59                           	psect	text38,local,class=CODE,merge=1,delta=2
    60                           	psect	text39,local,class=CODE,merge=1,delta=2
    61                           	psect	text40,local,class=CODE,merge=1,delta=2
    62                           	psect	text41,local,class=CODE,merge=1,delta=2
    63                           	psect	text42,local,class=CODE,merge=1,delta=2
    64                           	psect	text43,local,class=CODE,merge=1,delta=2
    65                           	psect	text44,local,class=CODE,merge=1,delta=2
    66                           	psect	text45,local,class=CODE,merge=1,delta=2
    67                           	psect	text46,local,class=CODE,merge=1,delta=2
    68                           	psect	text47,local,class=CODE,merge=1,delta=2
    69                           	psect	text48,local,class=CODE,merge=1,delta=2
    70                           	psect	text49,local,class=CODE,merge=1,delta=2
    71                           	psect	text50,local,class=CODE,merge=1,delta=2
    72                           	psect	text51,local,class=CODE,merge=1,inline,delta=2
    73                           	psect	text52,local,class=CODE,merge=1,inline,delta=2
    74                           	psect	text53,local,class=CODE,merge=1,delta=2
    75                           	psect	text54,local,class=CODE,merge=1,inline,delta=2
    76                           	psect	text55,local,class=CODE,merge=1,inline,delta=2
    77                           	psect	text56,local,class=CODE,merge=1,delta=2
    78                           	psect	text57,local,class=CODE,merge=1,delta=2
    79                           	psect	text58,local,class=CODE,merge=1,inline,delta=2
    80                           	psect	text59,local,class=CODE,merge=1,delta=2
    81                           	psect	text60,local,class=CODE,merge=1,delta=2
    82                           	psect	text61,local,class=CODE,merge=1,delta=2
    83                           	psect	text62,local,class=CODE,merge=1,delta=2
    84                           	psect	text63,local,class=CODE,merge=1,inline,delta=2
    85                           	psect	text64,local,class=CODE,merge=1,delta=2
    86                           	psect	text65,local,class=CODE,merge=1,delta=2
    87                           	psect	text66,local,class=CODE,merge=1,delta=2
    88                           	psect	text67,local,class=CODE,merge=1,delta=2
    89                           	psect	text68,local,class=CODE,merge=1,delta=2
    90                           	psect	text69,local,class=CODE,merge=1,delta=2
    91                           	psect	text70,local,class=CODE,merge=1,inline,delta=2
    92                           	psect	text71,local,class=CODE,merge=1,delta=2
    93                           	psect	text72,local,class=CODE,merge=1,inline,delta=2
    94                           	psect	text73,local,class=CODE,merge=1,delta=2
    95                           	psect	text74,local,class=CODE,merge=1,inline,delta=2
    96                           	psect	text75,local,class=CODE,merge=1,delta=2
    97                           	psect	text76,local,class=CODE,merge=1,delta=2
    98                           	psect	text77,local,class=CODE,merge=1,delta=2
    99                           	psect	text78,local,class=CODE,merge=1,delta=2
   100                           	psect	text79,local,class=CODE,merge=1,delta=2
   101                           	psect	text80,local,class=CODE,merge=1,delta=2
   102                           	psect	text81,local,class=CODE,merge=1,delta=2
   103                           	psect	text82,local,class=CODE,merge=1,delta=2
   104                           	psect	text83,local,class=CODE,merge=1,delta=2
   105                           	psect	text84,local,class=CODE,merge=1,delta=2
   106                           	psect	text85,local,class=CODE,merge=1,delta=2
   107                           	psect	text86,local,class=CODE,merge=1,delta=2
   108                           	psect	text87,local,class=CODE,merge=1,delta=2
   109                           	psect	text88,local,class=CODE,merge=1,delta=2
   110                           	psect	text89,local,class=CODE,merge=1,delta=2
   111                           	psect	text90,local,class=CODE,merge=1,delta=2
   112                           	psect	text91,local,class=CODE,merge=1,delta=2
   113                           	psect	text92,local,class=CODE,merge=1,delta=2
   114                           	psect	text93,local,class=CODE,merge=1,delta=2
   115                           	psect	text94,local,class=CODE,merge=1,delta=2
   116                           	psect	text95,local,class=CODE,merge=1,delta=2
   117                           	psect	text96,local,class=CODE,merge=1,delta=2
   118                           	psect	text97,local,class=CODE,merge=1,delta=2
   119                           	psect	text98,local,class=CODE,merge=1,delta=2
   120                           	psect	text99,local,class=CODE,merge=1,delta=2
   121                           	psect	text100,local,class=CODE,merge=1,delta=2
   122                           	psect	text101,local,class=CODE,merge=1,delta=2
   123                           	psect	text102,local,class=CODE,merge=1,delta=2
   124                           	psect	text103,local,class=CODE,merge=1,inline,delta=2
   125                           	psect	text104,local,class=CODE,merge=1,inline,delta=2
   126                           	psect	text105,local,class=CODE,merge=1,inline,delta=2
   127                           	psect	text106,local,class=CODE,merge=1,delta=2
   128                           	psect	text107,local,class=CODE,merge=1,delta=2
   129                           	psect	text108,local,class=CODE,merge=1,delta=2
   130                           	psect	text109,local,class=CODE,merge=1,delta=2
   131                           	psect	text110,local,class=CODE,merge=1,delta=2
   132                           	psect	text111,local,class=CODE,merge=1,delta=2
   133                           	psect	text112,local,class=CODE,merge=1,delta=2
   134                           	psect	text113,local,class=CODE,merge=1,delta=2
   135                           	psect	text114,local,class=CODE,merge=1,delta=2
   136                           	psect	text115,local,class=CODE,merge=1,delta=2
   137                           	psect	text116,local,class=CODE,merge=1,delta=2
   138                           	psect	text117,local,class=CODE,merge=1,delta=2
   139                           	psect	text118,local,class=CODE,merge=1,delta=2
   140                           	psect	text119,local,class=CODE,merge=1,delta=2
   141                           	psect	text120,local,class=CODE,merge=1,delta=2
   142                           	psect	text121,local,class=CODE,merge=1,delta=2
   143                           	psect	text122,local,class=CODE,merge=1,delta=2
   144                           	psect	text123,local,class=CODE,merge=1,inline,delta=2
   145                           	psect	text124,local,class=CODE,merge=1,delta=2
   146                           	psect	text125,local,class=CODE,merge=1,inline,delta=2
   147                           	psect	text126,local,class=CODE,merge=1,delta=2
   148                           	psect	text127,local,class=CODE,merge=1,delta=2
   149                           	psect	text128,local,class=CODE,merge=1,delta=2
   150                           	psect	text129,local,class=CODE,merge=1,delta=2
   151                           	psect	text130,local,class=CODE,merge=1,delta=2
   152                           	psect	text131,local,class=CODE,merge=1,inline,delta=2
   153                           	psect	text132,local,class=CODE,merge=1,inline,delta=2
   154                           	psect	text133,local,class=CODE,merge=1,delta=2
   155                           	psect	text134,local,class=CODE,merge=1,delta=2
   156                           	psect	text135,local,class=CODE,merge=1,inline,delta=2
   157                           	psect	text136,local,class=CODE,merge=1,inline,delta=2
   158                           	psect	intentry,global,class=CODE,delta=2
   159                           	psect	text138,local,class=CODE,merge=1,inline,delta=2
   160                           	psect	text139,local,class=CODE,merge=1,inline,delta=2
   161                           	psect	text140,local,class=CODE,merge=1,inline,delta=2
   162                           	psect	text141,local,class=CODE,merge=1,inline,delta=2
   163                           	psect	text142,local,class=CODE,merge=1,inline,delta=2
   164                           	psect	text143,local,class=CODE,merge=1,inline,delta=2
   165                           	dabs	1,0x7E,2
   166  0000                     	;# 
   167  0001                     	;# 
   168  0002                     	;# 
   169  0003                     	;# 
   170  0004                     	;# 
   171  0005                     	;# 
   172  0006                     	;# 
   173  0007                     	;# 
   174  0008                     	;# 
   175  0009                     	;# 
   176  000A                     	;# 
   177  000B                     	;# 
   178  000C                     	;# 
   179  000D                     	;# 
   180  000E                     	;# 
   181  0010                     	;# 
   182  0011                     	;# 
   183  0012                     	;# 
   184  0015                     	;# 
   185  0016                     	;# 
   186  0016                     	;# 
   187  0017                     	;# 
   188  0018                     	;# 
   189  0019                     	;# 
   190  001A                     	;# 
   191  001B                     	;# 
   192  001C                     	;# 
   193  008C                     	;# 
   194  008D                     	;# 
   195  008E                     	;# 
   196  0090                     	;# 
   197  0091                     	;# 
   198  0092                     	;# 
   199  0095                     	;# 
   200  0096                     	;# 
   201  0097                     	;# 
   202  0099                     	;# 
   203  009A                     	;# 
   204  009B                     	;# 
   205  009B                     	;# 
   206  009C                     	;# 
   207  009D                     	;# 
   208  009E                     	;# 
   209  010C                     	;# 
   210  010D                     	;# 
   211  010E                     	;# 
   212  0116                     	;# 
   213  0117                     	;# 
   214  011D                     	;# 
   215  018C                     	;# 
   216  018D                     	;# 
   217  018E                     	;# 
   218  0191                     	;# 
   219  0191                     	;# 
   220  0192                     	;# 
   221  0193                     	;# 
   222  0193                     	;# 
   223  0194                     	;# 
   224  0195                     	;# 
   225  0196                     	;# 
   226  0197                     	;# 
   227  0199                     	;# 
   228  019A                     	;# 
   229  019B                     	;# 
   230  019B                     	;# 
   231  019B                     	;# 
   232  019B                     	;# 
   233  019C                     	;# 
   234  019C                     	;# 
   235  019D                     	;# 
   236  019E                     	;# 
   237  019F                     	;# 
   238  020D                     	;# 
   239  0210                     	;# 
   240  0211                     	;# 
   241  0211                     	;# 
   242  0212                     	;# 
   243  0212                     	;# 
   244  0213                     	;# 
   245  0213                     	;# 
   246  0214                     	;# 
   247  0214                     	;# 
   248  0215                     	;# 
   249  0215                     	;# 
   250  0215                     	;# 
   251  0216                     	;# 
   252  0216                     	;# 
   253  0217                     	;# 
   254  0217                     	;# 
   255  0291                     	;# 
   256  0291                     	;# 
   257  0292                     	;# 
   258  0293                     	;# 
   259  0298                     	;# 
   260  0298                     	;# 
   261  0299                     	;# 
   262  029A                     	;# 
   263  0394                     	;# 
   264  0395                     	;# 
   265  0396                     	;# 
   266  0FE4                     	;# 
   267  0FE5                     	;# 
   268  0FE6                     	;# 
   269  0FE7                     	;# 
   270  0FE8                     	;# 
   271  0FE9                     	;# 
   272  0FEA                     	;# 
   273  0FEB                     	;# 
   274  0FED                     	;# 
   275  0FEE                     	;# 
   276  0FEF                     	;# 
   277  0000                     	;# 
   278  0001                     	;# 
   279  0002                     	;# 
   280  0003                     	;# 
   281  0004                     	;# 
   282  0005                     	;# 
   283  0006                     	;# 
   284  0007                     	;# 
   285  0008                     	;# 
   286  0009                     	;# 
   287  000A                     	;# 
   288  000B                     	;# 
   289  000C                     	;# 
   290  000D                     	;# 
   291  000E                     	;# 
   292  0010                     	;# 
   293  0011                     	;# 
   294  0012                     	;# 
   295  0015                     	;# 
   296  0016                     	;# 
   297  0016                     	;# 
   298  0017                     	;# 
   299  0018                     	;# 
   300  0019                     	;# 
   301  001A                     	;# 
   302  001B                     	;# 
   303  001C                     	;# 
   304  008C                     	;# 
   305  008D                     	;# 
   306  008E                     	;# 
   307  0090                     	;# 
   308  0091                     	;# 
   309  0092                     	;# 
   310  0095                     	;# 
   311  0096                     	;# 
   312  0097                     	;# 
   313  0099                     	;# 
   314  009A                     	;# 
   315  009B                     	;# 
   316  009B                     	;# 
   317  009C                     	;# 
   318  009D                     	;# 
   319  009E                     	;# 
   320  010C                     	;# 
   321  010D                     	;# 
   322  010E                     	;# 
   323  0116                     	;# 
   324  0117                     	;# 
   325  011D                     	;# 
   326  018C                     	;# 
   327  018D                     	;# 
   328  018E                     	;# 
   329  0191                     	;# 
   330  0191                     	;# 
   331  0192                     	;# 
   332  0193                     	;# 
   333  0193                     	;# 
   334  0194                     	;# 
   335  0195                     	;# 
   336  0196                     	;# 
   337  0197                     	;# 
   338  0199                     	;# 
   339  019A                     	;# 
   340  019B                     	;# 
   341  019B                     	;# 
   342  019B                     	;# 
   343  019B                     	;# 
   344  019C                     	;# 
   345  019C                     	;# 
   346  019D                     	;# 
   347  019E                     	;# 
   348  019F                     	;# 
   349  020D                     	;# 
   350  0210                     	;# 
   351  0211                     	;# 
   352  0211                     	;# 
   353  0212                     	;# 
   354  0212                     	;# 
   355  0213                     	;# 
   356  0213                     	;# 
   357  0214                     	;# 
   358  0214                     	;# 
   359  0215                     	;# 
   360  0215                     	;# 
   361  0215                     	;# 
   362  0216                     	;# 
   363  0216                     	;# 
   364  0217                     	;# 
   365  0217                     	;# 
   366  0291                     	;# 
   367  0291                     	;# 
   368  0292                     	;# 
   369  0293                     	;# 
   370  0298                     	;# 
   371  0298                     	;# 
   372  0299                     	;# 
   373  029A                     	;# 
   374  0394                     	;# 
   375  0395                     	;# 
   376  0396                     	;# 
   377  0FE4                     	;# 
   378  0FE5                     	;# 
   379  0FE6                     	;# 
   380  0FE7                     	;# 
   381  0FE8                     	;# 
   382  0FE9                     	;# 
   383  0FEA                     	;# 
   384  0FEB                     	;# 
   385  0FED                     	;# 
   386  0FEE                     	;# 
   387  0FEF                     	;# 
   388  0000                     	;# 
   389  0001                     	;# 
   390  0002                     	;# 
   391  0003                     	;# 
   392  0004                     	;# 
   393  0005                     	;# 
   394  0006                     	;# 
   395  0007                     	;# 
   396  0008                     	;# 
   397  0009                     	;# 
   398  000A                     	;# 
   399  000B                     	;# 
   400  000C                     	;# 
   401  000D                     	;# 
   402  000E                     	;# 
   403  0010                     	;# 
   404  0011                     	;# 
   405  0012                     	;# 
   406  0015                     	;# 
   407  0016                     	;# 
   408  0016                     	;# 
   409  0017                     	;# 
   410  0018                     	;# 
   411  0019                     	;# 
   412  001A                     	;# 
   413  001B                     	;# 
   414  001C                     	;# 
   415  008C                     	;# 
   416  008D                     	;# 
   417  008E                     	;# 
   418  0090                     	;# 
   419  0091                     	;# 
   420  0092                     	;# 
   421  0095                     	;# 
   422  0096                     	;# 
   423  0097                     	;# 
   424  0099                     	;# 
   425  009A                     	;# 
   426  009B                     	;# 
   427  009B                     	;# 
   428  009C                     	;# 
   429  009D                     	;# 
   430  009E                     	;# 
   431  010C                     	;# 
   432  010D                     	;# 
   433  010E                     	;# 
   434  0116                     	;# 
   435  0117                     	;# 
   436  011D                     	;# 
   437  018C                     	;# 
   438  018D                     	;# 
   439  018E                     	;# 
   440  0191                     	;# 
   441  0191                     	;# 
   442  0192                     	;# 
   443  0193                     	;# 
   444  0193                     	;# 
   445  0194                     	;# 
   446  0195                     	;# 
   447  0196                     	;# 
   448  0197                     	;# 
   449  0199                     	;# 
   450  019A                     	;# 
   451  019B                     	;# 
   452  019B                     	;# 
   453  019B                     	;# 
   454  019B                     	;# 
   455  019C                     	;# 
   456  019C                     	;# 
   457  019D                     	;# 
   458  019E                     	;# 
   459  019F                     	;# 
   460  020D                     	;# 
   461  0210                     	;# 
   462  0211                     	;# 
   463  0211                     	;# 
   464  0212                     	;# 
   465  0212                     	;# 
   466  0213                     	;# 
   467  0213                     	;# 
   468  0214                     	;# 
   469  0214                     	;# 
   470  0215                     	;# 
   471  0215                     	;# 
   472  0215                     	;# 
   473  0216                     	;# 
   474  0216                     	;# 
   475  0217                     	;# 
   476  0217                     	;# 
   477  0291                     	;# 
   478  0291                     	;# 
   479  0292                     	;# 
   480  0293                     	;# 
   481  0298                     	;# 
   482  0298                     	;# 
   483  0299                     	;# 
   484  029A                     	;# 
   485  0394                     	;# 
   486  0395                     	;# 
   487  0396                     	;# 
   488  0FE4                     	;# 
   489  0FE5                     	;# 
   490  0FE6                     	;# 
   491  0FE7                     	;# 
   492  0FE8                     	;# 
   493  0FE9                     	;# 
   494  0FEA                     	;# 
   495  0FEB                     	;# 
   496  0FED                     	;# 
   497  0FEE                     	;# 
   498  0FEF                     	;# 
   499  0000                     	;# 
   500  0001                     	;# 
   501  0002                     	;# 
   502  0003                     	;# 
   503  0004                     	;# 
   504  0005                     	;# 
   505  0006                     	;# 
   506  0007                     	;# 
   507  0008                     	;# 
   508  0009                     	;# 
   509  000A                     	;# 
   510  000B                     	;# 
   511  000C                     	;# 
   512  000D                     	;# 
   513  000E                     	;# 
   514  0010                     	;# 
   515  0011                     	;# 
   516  0012                     	;# 
   517  0015                     	;# 
   518  0016                     	;# 
   519  0016                     	;# 
   520  0017                     	;# 
   521  0018                     	;# 
   522  0019                     	;# 
   523  001A                     	;# 
   524  001B                     	;# 
   525  001C                     	;# 
   526  008C                     	;# 
   527  008D                     	;# 
   528  008E                     	;# 
   529  0090                     	;# 
   530  0091                     	;# 
   531  0092                     	;# 
   532  0095                     	;# 
   533  0096                     	;# 
   534  0097                     	;# 
   535  0099                     	;# 
   536  009A                     	;# 
   537  009B                     	;# 
   538  009B                     	;# 
   539  009C                     	;# 
   540  009D                     	;# 
   541  009E                     	;# 
   542  010C                     	;# 
   543  010D                     	;# 
   544  010E                     	;# 
   545  0116                     	;# 
   546  0117                     	;# 
   547  011D                     	;# 
   548  018C                     	;# 
   549  018D                     	;# 
   550  018E                     	;# 
   551  0191                     	;# 
   552  0191                     	;# 
   553  0192                     	;# 
   554  0193                     	;# 
   555  0193                     	;# 
   556  0194                     	;# 
   557  0195                     	;# 
   558  0196                     	;# 
   559  0197                     	;# 
   560  0199                     	;# 
   561  019A                     	;# 
   562  019B                     	;# 
   563  019B                     	;# 
   564  019B                     	;# 
   565  019B                     	;# 
   566  019C                     	;# 
   567  019C                     	;# 
   568  019D                     	;# 
   569  019E                     	;# 
   570  019F                     	;# 
   571  020D                     	;# 
   572  0210                     	;# 
   573  0211                     	;# 
   574  0211                     	;# 
   575  0212                     	;# 
   576  0212                     	;# 
   577  0213                     	;# 
   578  0213                     	;# 
   579  0214                     	;# 
   580  0214                     	;# 
   581  0215                     	;# 
   582  0215                     	;# 
   583  0215                     	;# 
   584  0216                     	;# 
   585  0216                     	;# 
   586  0217                     	;# 
   587  0217                     	;# 
   588  0291                     	;# 
   589  0291                     	;# 
   590  0292                     	;# 
   591  0293                     	;# 
   592  0298                     	;# 
   593  0298                     	;# 
   594  0299                     	;# 
   595  029A                     	;# 
   596  0394                     	;# 
   597  0395                     	;# 
   598  0396                     	;# 
   599  0FE4                     	;# 
   600  0FE5                     	;# 
   601  0FE6                     	;# 
   602  0FE7                     	;# 
   603  0FE8                     	;# 
   604  0FE9                     	;# 
   605  0FEA                     	;# 
   606  0FEB                     	;# 
   607  0FED                     	;# 
   608  0FEE                     	;# 
   609  0FEF                     	;# 
   610  0000                     	;# 
   611  0001                     	;# 
   612  0002                     	;# 
   613  0003                     	;# 
   614  0004                     	;# 
   615  0005                     	;# 
   616  0006                     	;# 
   617  0007                     	;# 
   618  0008                     	;# 
   619  0009                     	;# 
   620  000A                     	;# 
   621  000B                     	;# 
   622  000C                     	;# 
   623  000D                     	;# 
   624  000E                     	;# 
   625  0010                     	;# 
   626  0011                     	;# 
   627  0012                     	;# 
   628  0015                     	;# 
   629  0016                     	;# 
   630  0016                     	;# 
   631  0017                     	;# 
   632  0018                     	;# 
   633  0019                     	;# 
   634  001A                     	;# 
   635  001B                     	;# 
   636  001C                     	;# 
   637  008C                     	;# 
   638  008D                     	;# 
   639  008E                     	;# 
   640  0090                     	;# 
   641  0091                     	;# 
   642  0092                     	;# 
   643  0095                     	;# 
   644  0096                     	;# 
   645  0097                     	;# 
   646  0099                     	;# 
   647  009A                     	;# 
   648  009B                     	;# 
   649  009B                     	;# 
   650  009C                     	;# 
   651  009D                     	;# 
   652  009E                     	;# 
   653  010C                     	;# 
   654  010D                     	;# 
   655  010E                     	;# 
   656  0116                     	;# 
   657  0117                     	;# 
   658  011D                     	;# 
   659  018C                     	;# 
   660  018D                     	;# 
   661  018E                     	;# 
   662  0191                     	;# 
   663  0191                     	;# 
   664  0192                     	;# 
   665  0193                     	;# 
   666  0193                     	;# 
   667  0194                     	;# 
   668  0195                     	;# 
   669  0196                     	;# 
   670  0197                     	;# 
   671  0199                     	;# 
   672  019A                     	;# 
   673  019B                     	;# 
   674  019B                     	;# 
   675  019B                     	;# 
   676  019B                     	;# 
   677  019C                     	;# 
   678  019C                     	;# 
   679  019D                     	;# 
   680  019E                     	;# 
   681  019F                     	;# 
   682  020D                     	;# 
   683  0210                     	;# 
   684  0211                     	;# 
   685  0211                     	;# 
   686  0212                     	;# 
   687  0212                     	;# 
   688  0213                     	;# 
   689  0213                     	;# 
   690  0214                     	;# 
   691  0214                     	;# 
   692  0215                     	;# 
   693  0215                     	;# 
   694  0215                     	;# 
   695  0216                     	;# 
   696  0216                     	;# 
   697  0217                     	;# 
   698  0217                     	;# 
   699  0291                     	;# 
   700  0291                     	;# 
   701  0292                     	;# 
   702  0293                     	;# 
   703  0298                     	;# 
   704  0298                     	;# 
   705  0299                     	;# 
   706  029A                     	;# 
   707  0394                     	;# 
   708  0395                     	;# 
   709  0396                     	;# 
   710  0FE4                     	;# 
   711  0FE5                     	;# 
   712  0FE6                     	;# 
   713  0FE7                     	;# 
   714  0FE8                     	;# 
   715  0FE9                     	;# 
   716  0FEA                     	;# 
   717  0FEB                     	;# 
   718  0FED                     	;# 
   719  0FEE                     	;# 
   720  0FEF                     	;# 
   721  0000                     	;# 
   722  0001                     	;# 
   723  0002                     	;# 
   724  0003                     	;# 
   725  0004                     	;# 
   726  0005                     	;# 
   727  0006                     	;# 
   728  0007                     	;# 
   729  0008                     	;# 
   730  0009                     	;# 
   731  000A                     	;# 
   732  000B                     	;# 
   733  000C                     	;# 
   734  000D                     	;# 
   735  000E                     	;# 
   736  0010                     	;# 
   737  0011                     	;# 
   738  0012                     	;# 
   739  0015                     	;# 
   740  0016                     	;# 
   741  0016                     	;# 
   742  0017                     	;# 
   743  0018                     	;# 
   744  0019                     	;# 
   745  001A                     	;# 
   746  001B                     	;# 
   747  001C                     	;# 
   748  008C                     	;# 
   749  008D                     	;# 
   750  008E                     	;# 
   751  0090                     	;# 
   752  0091                     	;# 
   753  0092                     	;# 
   754  0095                     	;# 
   755  0096                     	;# 
   756  0097                     	;# 
   757  0099                     	;# 
   758  009A                     	;# 
   759  009B                     	;# 
   760  009B                     	;# 
   761  009C                     	;# 
   762  009D                     	;# 
   763  009E                     	;# 
   764  010C                     	;# 
   765  010D                     	;# 
   766  010E                     	;# 
   767  0116                     	;# 
   768  0117                     	;# 
   769  011D                     	;# 
   770  018C                     	;# 
   771  018D                     	;# 
   772  018E                     	;# 
   773  0191                     	;# 
   774  0191                     	;# 
   775  0192                     	;# 
   776  0193                     	;# 
   777  0193                     	;# 
   778  0194                     	;# 
   779  0195                     	;# 
   780  0196                     	;# 
   781  0197                     	;# 
   782  0199                     	;# 
   783  019A                     	;# 
   784  019B                     	;# 
   785  019B                     	;# 
   786  019B                     	;# 
   787  019B                     	;# 
   788  019C                     	;# 
   789  019C                     	;# 
   790  019D                     	;# 
   791  019E                     	;# 
   792  019F                     	;# 
   793  020D                     	;# 
   794  0210                     	;# 
   795  0211                     	;# 
   796  0211                     	;# 
   797  0212                     	;# 
   798  0212                     	;# 
   799  0213                     	;# 
   800  0213                     	;# 
   801  0214                     	;# 
   802  0214                     	;# 
   803  0215                     	;# 
   804  0215                     	;# 
   805  0215                     	;# 
   806  0216                     	;# 
   807  0216                     	;# 
   808  0217                     	;# 
   809  0217                     	;# 
   810  0291                     	;# 
   811  0291                     	;# 
   812  0292                     	;# 
   813  0293                     	;# 
   814  0298                     	;# 
   815  0298                     	;# 
   816  0299                     	;# 
   817  029A                     	;# 
   818  0394                     	;# 
   819  0395                     	;# 
   820  0396                     	;# 
   821  0FE4                     	;# 
   822  0FE5                     	;# 
   823  0FE6                     	;# 
   824  0FE7                     	;# 
   825  0FE8                     	;# 
   826  0FE9                     	;# 
   827  0FEA                     	;# 
   828  0FEB                     	;# 
   829  0FED                     	;# 
   830  0FEE                     	;# 
   831  0FEF                     	;# 
   832  0000                     	;# 
   833  0001                     	;# 
   834  0002                     	;# 
   835  0003                     	;# 
   836  0004                     	;# 
   837  0005                     	;# 
   838  0006                     	;# 
   839  0007                     	;# 
   840  0008                     	;# 
   841  0009                     	;# 
   842  000A                     	;# 
   843  000B                     	;# 
   844  000C                     	;# 
   845  000D                     	;# 
   846  000E                     	;# 
   847  0010                     	;# 
   848  0011                     	;# 
   849  0012                     	;# 
   850  0015                     	;# 
   851  0016                     	;# 
   852  0016                     	;# 
   853  0017                     	;# 
   854  0018                     	;# 
   855  0019                     	;# 
   856  001A                     	;# 
   857  001B                     	;# 
   858  001C                     	;# 
   859  008C                     	;# 
   860  008D                     	;# 
   861  008E                     	;# 
   862  0090                     	;# 
   863  0091                     	;# 
   864  0092                     	;# 
   865  0095                     	;# 
   866  0096                     	;# 
   867  0097                     	;# 
   868  0099                     	;# 
   869  009A                     	;# 
   870  009B                     	;# 
   871  009B                     	;# 
   872  009C                     	;# 
   873  009D                     	;# 
   874  009E                     	;# 
   875  010C                     	;# 
   876  010D                     	;# 
   877  010E                     	;# 
   878  0116                     	;# 
   879  0117                     	;# 
   880  011D                     	;# 
   881  018C                     	;# 
   882  018D                     	;# 
   883  018E                     	;# 
   884  0191                     	;# 
   885  0191                     	;# 
   886  0192                     	;# 
   887  0193                     	;# 
   888  0193                     	;# 
   889  0194                     	;# 
   890  0195                     	;# 
   891  0196                     	;# 
   892  0197                     	;# 
   893  0199                     	;# 
   894  019A                     	;# 
   895  019B                     	;# 
   896  019B                     	;# 
   897  019B                     	;# 
   898  019B                     	;# 
   899  019C                     	;# 
   900  019C                     	;# 
   901  019D                     	;# 
   902  019E                     	;# 
   903  019F                     	;# 
   904  020D                     	;# 
   905  0210                     	;# 
   906  0211                     	;# 
   907  0211                     	;# 
   908  0212                     	;# 
   909  0212                     	;# 
   910  0213                     	;# 
   911  0213                     	;# 
   912  0214                     	;# 
   913  0214                     	;# 
   914  0215                     	;# 
   915  0215                     	;# 
   916  0215                     	;# 
   917  0216                     	;# 
   918  0216                     	;# 
   919  0217                     	;# 
   920  0217                     	;# 
   921  0291                     	;# 
   922  0291                     	;# 
   923  0292                     	;# 
   924  0293                     	;# 
   925  0298                     	;# 
   926  0298                     	;# 
   927  0299                     	;# 
   928  029A                     	;# 
   929  0394                     	;# 
   930  0395                     	;# 
   931  0396                     	;# 
   932  0FE4                     	;# 
   933  0FE5                     	;# 
   934  0FE6                     	;# 
   935  0FE7                     	;# 
   936  0FE8                     	;# 
   937  0FE9                     	;# 
   938  0FEA                     	;# 
   939  0FEB                     	;# 
   940  0FED                     	;# 
   941  0FEE                     	;# 
   942  0FEF                     	;# 
   943  0000                     	;# 
   944  0001                     	;# 
   945  0002                     	;# 
   946  0003                     	;# 
   947  0004                     	;# 
   948  0005                     	;# 
   949  0006                     	;# 
   950  0007                     	;# 
   951  0008                     	;# 
   952  0009                     	;# 
   953  000A                     	;# 
   954  000B                     	;# 
   955  000C                     	;# 
   956  000D                     	;# 
   957  000E                     	;# 
   958  0010                     	;# 
   959  0011                     	;# 
   960  0012                     	;# 
   961  0015                     	;# 
   962  0016                     	;# 
   963  0016                     	;# 
   964  0017                     	;# 
   965  0018                     	;# 
   966  0019                     	;# 
   967  001A                     	;# 
   968  001B                     	;# 
   969  001C                     	;# 
   970  008C                     	;# 
   971  008D                     	;# 
   972  008E                     	;# 
   973  0090                     	;# 
   974  0091                     	;# 
   975  0092                     	;# 
   976  0095                     	;# 
   977  0096                     	;# 
   978  0097                     	;# 
   979  0099                     	;# 
   980  009A                     	;# 
   981  009B                     	;# 
   982  009B                     	;# 
   983  009C                     	;# 
   984  009D                     	;# 
   985  009E                     	;# 
   986  010C                     	;# 
   987  010D                     	;# 
   988  010E                     	;# 
   989  0116                     	;# 
   990  0117                     	;# 
   991  011D                     	;# 
   992  018C                     	;# 
   993  018D                     	;# 
   994  018E                     	;# 
   995  0191                     	;# 
   996  0191                     	;# 
   997  0192                     	;# 
   998  0193                     	;# 
   999  0193                     	;# 
  1000  0194                     	;# 
  1001  0195                     	;# 
  1002  0196                     	;# 
  1003  0197                     	;# 
  1004  0199                     	;# 
  1005  019A                     	;# 
  1006  019B                     	;# 
  1007  019B                     	;# 
  1008  019B                     	;# 
  1009  019B                     	;# 
  1010  019C                     	;# 
  1011  019C                     	;# 
  1012  019D                     	;# 
  1013  019E                     	;# 
  1014  019F                     	;# 
  1015  020D                     	;# 
  1016  0210                     	;# 
  1017  0211                     	;# 
  1018  0211                     	;# 
  1019  0212                     	;# 
  1020  0212                     	;# 
  1021  0213                     	;# 
  1022  0213                     	;# 
  1023  0214                     	;# 
  1024  0214                     	;# 
  1025  0215                     	;# 
  1026  0215                     	;# 
  1027  0215                     	;# 
  1028  0216                     	;# 
  1029  0216                     	;# 
  1030  0217                     	;# 
  1031  0217                     	;# 
  1032  0291                     	;# 
  1033  0291                     	;# 
  1034  0292                     	;# 
  1035  0293                     	;# 
  1036  0298                     	;# 
  1037  0298                     	;# 
  1038  0299                     	;# 
  1039  029A                     	;# 
  1040  0394                     	;# 
  1041  0395                     	;# 
  1042  0396                     	;# 
  1043  0FE4                     	;# 
  1044  0FE5                     	;# 
  1045  0FE6                     	;# 
  1046  0FE7                     	;# 
  1047  0FE8                     	;# 
  1048  0FE9                     	;# 
  1049  0FEA                     	;# 
  1050  0FEB                     	;# 
  1051  0FED                     	;# 
  1052  0FEE                     	;# 
  1053  0FEF                     	;# 
  1054  0000                     	;# 
  1055  0001                     	;# 
  1056  0002                     	;# 
  1057  0003                     	;# 
  1058  0004                     	;# 
  1059  0005                     	;# 
  1060  0006                     	;# 
  1061  0007                     	;# 
  1062  0008                     	;# 
  1063  0009                     	;# 
  1064  000A                     	;# 
  1065  000B                     	;# 
  1066  000C                     	;# 
  1067  000D                     	;# 
  1068  000E                     	;# 
  1069  0010                     	;# 
  1070  0011                     	;# 
  1071  0012                     	;# 
  1072  0015                     	;# 
  1073  0016                     	;# 
  1074  0016                     	;# 
  1075  0017                     	;# 
  1076  0018                     	;# 
  1077  0019                     	;# 
  1078  001A                     	;# 
  1079  001B                     	;# 
  1080  001C                     	;# 
  1081  008C                     	;# 
  1082  008D                     	;# 
  1083  008E                     	;# 
  1084  0090                     	;# 
  1085  0091                     	;# 
  1086  0092                     	;# 
  1087  0095                     	;# 
  1088  0096                     	;# 
  1089  0097                     	;# 
  1090  0099                     	;# 
  1091  009A                     	;# 
  1092  009B                     	;# 
  1093  009B                     	;# 
  1094  009C                     	;# 
  1095  009D                     	;# 
  1096  009E                     	;# 
  1097  010C                     	;# 
  1098  010D                     	;# 
  1099  010E                     	;# 
  1100  0116                     	;# 
  1101  0117                     	;# 
  1102  011D                     	;# 
  1103  018C                     	;# 
  1104  018D                     	;# 
  1105  018E                     	;# 
  1106  0191                     	;# 
  1107  0191                     	;# 
  1108  0192                     	;# 
  1109  0193                     	;# 
  1110  0193                     	;# 
  1111  0194                     	;# 
  1112  0195                     	;# 
  1113  0196                     	;# 
  1114  0197                     	;# 
  1115  0199                     	;# 
  1116  019A                     	;# 
  1117  019B                     	;# 
  1118  019B                     	;# 
  1119  019B                     	;# 
  1120  019B                     	;# 
  1121  019C                     	;# 
  1122  019C                     	;# 
  1123  019D                     	;# 
  1124  019E                     	;# 
  1125  019F                     	;# 
  1126  020D                     	;# 
  1127  0210                     	;# 
  1128  0211                     	;# 
  1129  0211                     	;# 
  1130  0212                     	;# 
  1131  0212                     	;# 
  1132  0213                     	;# 
  1133  0213                     	;# 
  1134  0214                     	;# 
  1135  0214                     	;# 
  1136  0215                     	;# 
  1137  0215                     	;# 
  1138  0215                     	;# 
  1139  0216                     	;# 
  1140  0216                     	;# 
  1141  0217                     	;# 
  1142  0217                     	;# 
  1143  0291                     	;# 
  1144  0291                     	;# 
  1145  0292                     	;# 
  1146  0293                     	;# 
  1147  0298                     	;# 
  1148  0298                     	;# 
  1149  0299                     	;# 
  1150  029A                     	;# 
  1151  0394                     	;# 
  1152  0395                     	;# 
  1153  0396                     	;# 
  1154  0FE4                     	;# 
  1155  0FE5                     	;# 
  1156  0FE6                     	;# 
  1157  0FE7                     	;# 
  1158  0FE8                     	;# 
  1159  0FE9                     	;# 
  1160  0FEA                     	;# 
  1161  0FEB                     	;# 
  1162  0FED                     	;# 
  1163  0FEE                     	;# 
  1164  0FEF                     	;# 
  1165  0000                     	;# 
  1166  0001                     	;# 
  1167  0002                     	;# 
  1168  0003                     	;# 
  1169  0004                     	;# 
  1170  0005                     	;# 
  1171  0006                     	;# 
  1172  0007                     	;# 
  1173  0008                     	;# 
  1174  0009                     	;# 
  1175  000A                     	;# 
  1176  000B                     	;# 
  1177  000C                     	;# 
  1178  000D                     	;# 
  1179  000E                     	;# 
  1180  0010                     	;# 
  1181  0011                     	;# 
  1182  0012                     	;# 
  1183  0015                     	;# 
  1184  0016                     	;# 
  1185  0016                     	;# 
  1186  0017                     	;# 
  1187  0018                     	;# 
  1188  0019                     	;# 
  1189  001A                     	;# 
  1190  001B                     	;# 
  1191  001C                     	;# 
  1192  008C                     	;# 
  1193  008D                     	;# 
  1194  008E                     	;# 
  1195  0090                     	;# 
  1196  0091                     	;# 
  1197  0092                     	;# 
  1198  0095                     	;# 
  1199  0096                     	;# 
  1200  0097                     	;# 
  1201  0099                     	;# 
  1202  009A                     	;# 
  1203  009B                     	;# 
  1204  009B                     	;# 
  1205  009C                     	;# 
  1206  009D                     	;# 
  1207  009E                     	;# 
  1208  010C                     	;# 
  1209  010D                     	;# 
  1210  010E                     	;# 
  1211  0116                     	;# 
  1212  0117                     	;# 
  1213  011D                     	;# 
  1214  018C                     	;# 
  1215  018D                     	;# 
  1216  018E                     	;# 
  1217  0191                     	;# 
  1218  0191                     	;# 
  1219  0192                     	;# 
  1220  0193                     	;# 
  1221  0193                     	;# 
  1222  0194                     	;# 
  1223  0195                     	;# 
  1224  0196                     	;# 
  1225  0197                     	;# 
  1226  0199                     	;# 
  1227  019A                     	;# 
  1228  019B                     	;# 
  1229  019B                     	;# 
  1230  019B                     	;# 
  1231  019B                     	;# 
  1232  019C                     	;# 
  1233  019C                     	;# 
  1234  019D                     	;# 
  1235  019E                     	;# 
  1236  019F                     	;# 
  1237  020D                     	;# 
  1238  0210                     	;# 
  1239  0211                     	;# 
  1240  0211                     	;# 
  1241  0212                     	;# 
  1242  0212                     	;# 
  1243  0213                     	;# 
  1244  0213                     	;# 
  1245  0214                     	;# 
  1246  0214                     	;# 
  1247  0215                     	;# 
  1248  0215                     	;# 
  1249  0215                     	;# 
  1250  0216                     	;# 
  1251  0216                     	;# 
  1252  0217                     	;# 
  1253  0217                     	;# 
  1254  0291                     	;# 
  1255  0291                     	;# 
  1256  0292                     	;# 
  1257  0293                     	;# 
  1258  0298                     	;# 
  1259  0298                     	;# 
  1260  0299                     	;# 
  1261  029A                     	;# 
  1262  0394                     	;# 
  1263  0395                     	;# 
  1264  0396                     	;# 
  1265  0FE4                     	;# 
  1266  0FE5                     	;# 
  1267  0FE6                     	;# 
  1268  0FE7                     	;# 
  1269  0FE8                     	;# 
  1270  0FE9                     	;# 
  1271  0FEA                     	;# 
  1272  0FEB                     	;# 
  1273  0FED                     	;# 
  1274  0FEE                     	;# 
  1275  0FEF                     	;# 
  1276  0000                     	;# 
  1277  0001                     	;# 
  1278  0002                     	;# 
  1279  0003                     	;# 
  1280  0004                     	;# 
  1281  0005                     	;# 
  1282  0006                     	;# 
  1283  0007                     	;# 
  1284  0008                     	;# 
  1285  0009                     	;# 
  1286  000A                     	;# 
  1287  000B                     	;# 
  1288  000C                     	;# 
  1289  000D                     	;# 
  1290  000E                     	;# 
  1291  0010                     	;# 
  1292  0011                     	;# 
  1293  0012                     	;# 
  1294  0015                     	;# 
  1295  0016                     	;# 
  1296  0016                     	;# 
  1297  0017                     	;# 
  1298  0018                     	;# 
  1299  0019                     	;# 
  1300  001A                     	;# 
  1301  001B                     	;# 
  1302  001C                     	;# 
  1303  008C                     	;# 
  1304  008D                     	;# 
  1305  008E                     	;# 
  1306  0090                     	;# 
  1307  0091                     	;# 
  1308  0092                     	;# 
  1309  0095                     	;# 
  1310  0096                     	;# 
  1311  0097                     	;# 
  1312  0099                     	;# 
  1313  009A                     	;# 
  1314  009B                     	;# 
  1315  009B                     	;# 
  1316  009C                     	;# 
  1317  009D                     	;# 
  1318  009E                     	;# 
  1319  010C                     	;# 
  1320  010D                     	;# 
  1321  010E                     	;# 
  1322  0116                     	;# 
  1323  0117                     	;# 
  1324  011D                     	;# 
  1325  018C                     	;# 
  1326  018D                     	;# 
  1327  018E                     	;# 
  1328  0191                     	;# 
  1329  0191                     	;# 
  1330  0192                     	;# 
  1331  0193                     	;# 
  1332  0193                     	;# 
  1333  0194                     	;# 
  1334  0195                     	;# 
  1335  0196                     	;# 
  1336  0197                     	;# 
  1337  0199                     	;# 
  1338  019A                     	;# 
  1339  019B                     	;# 
  1340  019B                     	;# 
  1341  019B                     	;# 
  1342  019B                     	;# 
  1343  019C                     	;# 
  1344  019C                     	;# 
  1345  019D                     	;# 
  1346  019E                     	;# 
  1347  019F                     	;# 
  1348  020D                     	;# 
  1349  0210                     	;# 
  1350  0211                     	;# 
  1351  0211                     	;# 
  1352  0212                     	;# 
  1353  0212                     	;# 
  1354  0213                     	;# 
  1355  0213                     	;# 
  1356  0214                     	;# 
  1357  0214                     	;# 
  1358  0215                     	;# 
  1359  0215                     	;# 
  1360  0215                     	;# 
  1361  0216                     	;# 
  1362  0216                     	;# 
  1363  0217                     	;# 
  1364  0217                     	;# 
  1365  0291                     	;# 
  1366  0291                     	;# 
  1367  0292                     	;# 
  1368  0293                     	;# 
  1369  0298                     	;# 
  1370  0298                     	;# 
  1371  0299                     	;# 
  1372  029A                     	;# 
  1373  0394                     	;# 
  1374  0395                     	;# 
  1375  0396                     	;# 
  1376  0FE4                     	;# 
  1377  0FE5                     	;# 
  1378  0FE6                     	;# 
  1379  0FE7                     	;# 
  1380  0FE8                     	;# 
  1381  0FE9                     	;# 
  1382  0FEA                     	;# 
  1383  0FEB                     	;# 
  1384  0FED                     	;# 
  1385  0FEE                     	;# 
  1386  0FEF                     	;# 
  1387  0000                     	;# 
  1388  0001                     	;# 
  1389  0002                     	;# 
  1390  0003                     	;# 
  1391  0004                     	;# 
  1392  0005                     	;# 
  1393  0006                     	;# 
  1394  0007                     	;# 
  1395  0008                     	;# 
  1396  0009                     	;# 
  1397  000A                     	;# 
  1398  000B                     	;# 
  1399  000C                     	;# 
  1400  000D                     	;# 
  1401  000E                     	;# 
  1402  0010                     	;# 
  1403  0011                     	;# 
  1404  0012                     	;# 
  1405  0015                     	;# 
  1406  0016                     	;# 
  1407  0016                     	;# 
  1408  0017                     	;# 
  1409  0018                     	;# 
  1410  0019                     	;# 
  1411  001A                     	;# 
  1412  001B                     	;# 
  1413  001C                     	;# 
  1414  008C                     	;# 
  1415  008D                     	;# 
  1416  008E                     	;# 
  1417  0090                     	;# 
  1418  0091                     	;# 
  1419  0092                     	;# 
  1420  0095                     	;# 
  1421  0096                     	;# 
  1422  0097                     	;# 
  1423  0099                     	;# 
  1424  009A                     	;# 
  1425  009B                     	;# 
  1426  009B                     	;# 
  1427  009C                     	;# 
  1428  009D                     	;# 
  1429  009E                     	;# 
  1430  010C                     	;# 
  1431  010D                     	;# 
  1432  010E                     	;# 
  1433  0116                     	;# 
  1434  0117                     	;# 
  1435  011D                     	;# 
  1436  018C                     	;# 
  1437  018D                     	;# 
  1438  018E                     	;# 
  1439  0191                     	;# 
  1440  0191                     	;# 
  1441  0192                     	;# 
  1442  0193                     	;# 
  1443  0193                     	;# 
  1444  0194                     	;# 
  1445  0195                     	;# 
  1446  0196                     	;# 
  1447  0197                     	;# 
  1448  0199                     	;# 
  1449  019A                     	;# 
  1450  019B                     	;# 
  1451  019B                     	;# 
  1452  019B                     	;# 
  1453  019B                     	;# 
  1454  019C                     	;# 
  1455  019C                     	;# 
  1456  019D                     	;# 
  1457  019E                     	;# 
  1458  019F                     	;# 
  1459  020D                     	;# 
  1460  0210                     	;# 
  1461  0211                     	;# 
  1462  0211                     	;# 
  1463  0212                     	;# 
  1464  0212                     	;# 
  1465  0213                     	;# 
  1466  0213                     	;# 
  1467  0214                     	;# 
  1468  0214                     	;# 
  1469  0215                     	;# 
  1470  0215                     	;# 
  1471  0215                     	;# 
  1472  0216                     	;# 
  1473  0216                     	;# 
  1474  0217                     	;# 
  1475  0217                     	;# 
  1476  0291                     	;# 
  1477  0291                     	;# 
  1478  0292                     	;# 
  1479  0293                     	;# 
  1480  0298                     	;# 
  1481  0298                     	;# 
  1482  0299                     	;# 
  1483  029A                     	;# 
  1484  0394                     	;# 
  1485  0395                     	;# 
  1486  0396                     	;# 
  1487  0FE4                     	;# 
  1488  0FE5                     	;# 
  1489  0FE6                     	;# 
  1490  0FE7                     	;# 
  1491  0FE8                     	;# 
  1492  0FE9                     	;# 
  1493  0FEA                     	;# 
  1494  0FEB                     	;# 
  1495  0FED                     	;# 
  1496  0FEE                     	;# 
  1497  0FEF                     	;# 
  1498  0000                     	;# 
  1499  0001                     	;# 
  1500  0002                     	;# 
  1501  0003                     	;# 
  1502  0004                     	;# 
  1503  0005                     	;# 
  1504  0006                     	;# 
  1505  0007                     	;# 
  1506  0008                     	;# 
  1507  0009                     	;# 
  1508  000A                     	;# 
  1509  000B                     	;# 
  1510  000C                     	;# 
  1511  000D                     	;# 
  1512  000E                     	;# 
  1513  0010                     	;# 
  1514  0011                     	;# 
  1515  0012                     	;# 
  1516  0015                     	;# 
  1517  0016                     	;# 
  1518  0016                     	;# 
  1519  0017                     	;# 
  1520  0018                     	;# 
  1521  0019                     	;# 
  1522  001A                     	;# 
  1523  001B                     	;# 
  1524  001C                     	;# 
  1525  008C                     	;# 
  1526  008D                     	;# 
  1527  008E                     	;# 
  1528  0090                     	;# 
  1529  0091                     	;# 
  1530  0092                     	;# 
  1531  0095                     	;# 
  1532  0096                     	;# 
  1533  0097                     	;# 
  1534  0099                     	;# 
  1535  009A                     	;# 
  1536  009B                     	;# 
  1537  009B                     	;# 
  1538  009C                     	;# 
  1539  009D                     	;# 
  1540  009E                     	;# 
  1541  010C                     	;# 
  1542  010D                     	;# 
  1543  010E                     	;# 
  1544  0116                     	;# 
  1545  0117                     	;# 
  1546  011D                     	;# 
  1547  018C                     	;# 
  1548  018D                     	;# 
  1549  018E                     	;# 
  1550  0191                     	;# 
  1551  0191                     	;# 
  1552  0192                     	;# 
  1553  0193                     	;# 
  1554  0193                     	;# 
  1555  0194                     	;# 
  1556  0195                     	;# 
  1557  0196                     	;# 
  1558  0197                     	;# 
  1559  0199                     	;# 
  1560  019A                     	;# 
  1561  019B                     	;# 
  1562  019B                     	;# 
  1563  019B                     	;# 
  1564  019B                     	;# 
  1565  019C                     	;# 
  1566  019C                     	;# 
  1567  019D                     	;# 
  1568  019E                     	;# 
  1569  019F                     	;# 
  1570  020D                     	;# 
  1571  0210                     	;# 
  1572  0211                     	;# 
  1573  0211                     	;# 
  1574  0212                     	;# 
  1575  0212                     	;# 
  1576  0213                     	;# 
  1577  0213                     	;# 
  1578  0214                     	;# 
  1579  0214                     	;# 
  1580  0215                     	;# 
  1581  0215                     	;# 
  1582  0215                     	;# 
  1583  0216                     	;# 
  1584  0216                     	;# 
  1585  0217                     	;# 
  1586  0217                     	;# 
  1587  0291                     	;# 
  1588  0291                     	;# 
  1589  0292                     	;# 
  1590  0293                     	;# 
  1591  0298                     	;# 
  1592  0298                     	;# 
  1593  0299                     	;# 
  1594  029A                     	;# 
  1595  0394                     	;# 
  1596  0395                     	;# 
  1597  0396                     	;# 
  1598  0FE4                     	;# 
  1599  0FE5                     	;# 
  1600  0FE6                     	;# 
  1601  0FE7                     	;# 
  1602  0FE8                     	;# 
  1603  0FE9                     	;# 
  1604  0FEA                     	;# 
  1605  0FEB                     	;# 
  1606  0FED                     	;# 
  1607  0FEE                     	;# 
  1608  0FEF                     	;# 
  1609  0000                     	;# 
  1610  0001                     	;# 
  1611  0002                     	;# 
  1612  0003                     	;# 
  1613  0004                     	;# 
  1614  0005                     	;# 
  1615  0006                     	;# 
  1616  0007                     	;# 
  1617  0008                     	;# 
  1618  0009                     	;# 
  1619  000A                     	;# 
  1620  000B                     	;# 
  1621  000C                     	;# 
  1622  000D                     	;# 
  1623  000E                     	;# 
  1624  0010                     	;# 
  1625  0011                     	;# 
  1626  0012                     	;# 
  1627  0015                     	;# 
  1628  0016                     	;# 
  1629  0016                     	;# 
  1630  0017                     	;# 
  1631  0018                     	;# 
  1632  0019                     	;# 
  1633  001A                     	;# 
  1634  001B                     	;# 
  1635  001C                     	;# 
  1636  008C                     	;# 
  1637  008D                     	;# 
  1638  008E                     	;# 
  1639  0090                     	;# 
  1640  0091                     	;# 
  1641  0092                     	;# 
  1642  0095                     	;# 
  1643  0096                     	;# 
  1644  0097                     	;# 
  1645  0099                     	;# 
  1646  009A                     	;# 
  1647  009B                     	;# 
  1648  009B                     	;# 
  1649  009C                     	;# 
  1650  009D                     	;# 
  1651  009E                     	;# 
  1652  010C                     	;# 
  1653  010D                     	;# 
  1654  010E                     	;# 
  1655  0116                     	;# 
  1656  0117                     	;# 
  1657  011D                     	;# 
  1658  018C                     	;# 
  1659  018D                     	;# 
  1660  018E                     	;# 
  1661  0191                     	;# 
  1662  0191                     	;# 
  1663  0192                     	;# 
  1664  0193                     	;# 
  1665  0193                     	;# 
  1666  0194                     	;# 
  1667  0195                     	;# 
  1668  0196                     	;# 
  1669  0197                     	;# 
  1670  0199                     	;# 
  1671  019A                     	;# 
  1672  019B                     	;# 
  1673  019B                     	;# 
  1674  019B                     	;# 
  1675  019B                     	;# 
  1676  019C                     	;# 
  1677  019C                     	;# 
  1678  019D                     	;# 
  1679  019E                     	;# 
  1680  019F                     	;# 
  1681  020D                     	;# 
  1682  0210                     	;# 
  1683  0211                     	;# 
  1684  0211                     	;# 
  1685  0212                     	;# 
  1686  0212                     	;# 
  1687  0213                     	;# 
  1688  0213                     	;# 
  1689  0214                     	;# 
  1690  0214                     	;# 
  1691  0215                     	;# 
  1692  0215                     	;# 
  1693  0215                     	;# 
  1694  0216                     	;# 
  1695  0216                     	;# 
  1696  0217                     	;# 
  1697  0217                     	;# 
  1698  0291                     	;# 
  1699  0291                     	;# 
  1700  0292                     	;# 
  1701  0293                     	;# 
  1702  0298                     	;# 
  1703  0298                     	;# 
  1704  0299                     	;# 
  1705  029A                     	;# 
  1706  0394                     	;# 
  1707  0395                     	;# 
  1708  0396                     	;# 
  1709  0FE4                     	;# 
  1710  0FE5                     	;# 
  1711  0FE6                     	;# 
  1712  0FE7                     	;# 
  1713  0FE8                     	;# 
  1714  0FE9                     	;# 
  1715  0FEA                     	;# 
  1716  0FEB                     	;# 
  1717  0FED                     	;# 
  1718  0FEE                     	;# 
  1719  0FEF                     	;# 
  1720  0000                     	;# 
  1721  0001                     	;# 
  1722  0002                     	;# 
  1723  0003                     	;# 
  1724  0004                     	;# 
  1725  0005                     	;# 
  1726  0006                     	;# 
  1727  0007                     	;# 
  1728  0008                     	;# 
  1729  0009                     	;# 
  1730  000A                     	;# 
  1731  000B                     	;# 
  1732  000C                     	;# 
  1733  000D                     	;# 
  1734  000E                     	;# 
  1735  0010                     	;# 
  1736  0011                     	;# 
  1737  0012                     	;# 
  1738  0015                     	;# 
  1739  0016                     	;# 
  1740  0016                     	;# 
  1741  0017                     	;# 
  1742  0018                     	;# 
  1743  0019                     	;# 
  1744  001A                     	;# 
  1745  001B                     	;# 
  1746  001C                     	;# 
  1747  008C                     	;# 
  1748  008D                     	;# 
  1749  008E                     	;# 
  1750  0090                     	;# 
  1751  0091                     	;# 
  1752  0092                     	;# 
  1753  0095                     	;# 
  1754  0096                     	;# 
  1755  0097                     	;# 
  1756  0099                     	;# 
  1757  009A                     	;# 
  1758  009B                     	;# 
  1759  009B                     	;# 
  1760  009C                     	;# 
  1761  009D                     	;# 
  1762  009E                     	;# 
  1763  010C                     	;# 
  1764  010D                     	;# 
  1765  010E                     	;# 
  1766  0116                     	;# 
  1767  0117                     	;# 
  1768  011D                     	;# 
  1769  018C                     	;# 
  1770  018D                     	;# 
  1771  018E                     	;# 
  1772  0191                     	;# 
  1773  0191                     	;# 
  1774  0192                     	;# 
  1775  0193                     	;# 
  1776  0193                     	;# 
  1777  0194                     	;# 
  1778  0195                     	;# 
  1779  0196                     	;# 
  1780  0197                     	;# 
  1781  0199                     	;# 
  1782  019A                     	;# 
  1783  019B                     	;# 
  1784  019B                     	;# 
  1785  019B                     	;# 
  1786  019B                     	;# 
  1787  019C                     	;# 
  1788  019C                     	;# 
  1789  019D                     	;# 
  1790  019E                     	;# 
  1791  019F                     	;# 
  1792  020D                     	;# 
  1793  0210                     	;# 
  1794  0211                     	;# 
  1795  0211                     	;# 
  1796  0212                     	;# 
  1797  0212                     	;# 
  1798  0213                     	;# 
  1799  0213                     	;# 
  1800  0214                     	;# 
  1801  0214                     	;# 
  1802  0215                     	;# 
  1803  0215                     	;# 
  1804  0215                     	;# 
  1805  0216                     	;# 
  1806  0216                     	;# 
  1807  0217                     	;# 
  1808  0217                     	;# 
  1809  0291                     	;# 
  1810  0291                     	;# 
  1811  0292                     	;# 
  1812  0293                     	;# 
  1813  0298                     	;# 
  1814  0298                     	;# 
  1815  0299                     	;# 
  1816  029A                     	;# 
  1817  0394                     	;# 
  1818  0395                     	;# 
  1819  0396                     	;# 
  1820  0FE4                     	;# 
  1821  0FE5                     	;# 
  1822  0FE6                     	;# 
  1823  0FE7                     	;# 
  1824  0FE8                     	;# 
  1825  0FE9                     	;# 
  1826  0FEA                     	;# 
  1827  0FEB                     	;# 
  1828  0FED                     	;# 
  1829  0FEE                     	;# 
  1830  0FEF                     	;# 
  1831  0000                     	;# 
  1832  0001                     	;# 
  1833  0002                     	;# 
  1834  0003                     	;# 
  1835  0004                     	;# 
  1836  0005                     	;# 
  1837  0006                     	;# 
  1838  0007                     	;# 
  1839  0008                     	;# 
  1840  0009                     	;# 
  1841  000A                     	;# 
  1842  000B                     	;# 
  1843  000C                     	;# 
  1844  000D                     	;# 
  1845  000E                     	;# 
  1846  0010                     	;# 
  1847  0011                     	;# 
  1848  0012                     	;# 
  1849  0015                     	;# 
  1850  0016                     	;# 
  1851  0016                     	;# 
  1852  0017                     	;# 
  1853  0018                     	;# 
  1854  0019                     	;# 
  1855  001A                     	;# 
  1856  001B                     	;# 
  1857  001C                     	;# 
  1858  008C                     	;# 
  1859  008D                     	;# 
  1860  008E                     	;# 
  1861  0090                     	;# 
  1862  0091                     	;# 
  1863  0092                     	;# 
  1864  0095                     	;# 
  1865  0096                     	;# 
  1866  0097                     	;# 
  1867  0099                     	;# 
  1868  009A                     	;# 
  1869  009B                     	;# 
  1870  009B                     	;# 
  1871  009C                     	;# 
  1872  009D                     	;# 
  1873  009E                     	;# 
  1874  010C                     	;# 
  1875  010D                     	;# 
  1876  010E                     	;# 
  1877  0116                     	;# 
  1878  0117                     	;# 
  1879  011D                     	;# 
  1880  018C                     	;# 
  1881  018D                     	;# 
  1882  018E                     	;# 
  1883  0191                     	;# 
  1884  0191                     	;# 
  1885  0192                     	;# 
  1886  0193                     	;# 
  1887  0193                     	;# 
  1888  0194                     	;# 
  1889  0195                     	;# 
  1890  0196                     	;# 
  1891  0197                     	;# 
  1892  0199                     	;# 
  1893  019A                     	;# 
  1894  019B                     	;# 
  1895  019B                     	;# 
  1896  019B                     	;# 
  1897  019B                     	;# 
  1898  019C                     	;# 
  1899  019C                     	;# 
  1900  019D                     	;# 
  1901  019E                     	;# 
  1902  019F                     	;# 
  1903  020D                     	;# 
  1904  0210                     	;# 
  1905  0211                     	;# 
  1906  0211                     	;# 
  1907  0212                     	;# 
  1908  0212                     	;# 
  1909  0213                     	;# 
  1910  0213                     	;# 
  1911  0214                     	;# 
  1912  0214                     	;# 
  1913  0215                     	;# 
  1914  0215                     	;# 
  1915  0215                     	;# 
  1916  0216                     	;# 
  1917  0216                     	;# 
  1918  0217                     	;# 
  1919  0217                     	;# 
  1920  0291                     	;# 
  1921  0291                     	;# 
  1922  0292                     	;# 
  1923  0293                     	;# 
  1924  0298                     	;# 
  1925  0298                     	;# 
  1926  0299                     	;# 
  1927  029A                     	;# 
  1928  0394                     	;# 
  1929  0395                     	;# 
  1930  0396                     	;# 
  1931  0FE4                     	;# 
  1932  0FE5                     	;# 
  1933  0FE6                     	;# 
  1934  0FE7                     	;# 
  1935  0FE8                     	;# 
  1936  0FE9                     	;# 
  1937  0FEA                     	;# 
  1938  0FEB                     	;# 
  1939  0FED                     	;# 
  1940  0FEE                     	;# 
  1941  0FEF                     	;# 
  1942  0000                     	;# 
  1943  0001                     	;# 
  1944  0002                     	;# 
  1945  0003                     	;# 
  1946  0004                     	;# 
  1947  0005                     	;# 
  1948  0006                     	;# 
  1949  0007                     	;# 
  1950  0008                     	;# 
  1951  0009                     	;# 
  1952  000A                     	;# 
  1953  000B                     	;# 
  1954  000C                     	;# 
  1955  000D                     	;# 
  1956  000E                     	;# 
  1957  0010                     	;# 
  1958  0011                     	;# 
  1959  0012                     	;# 
  1960  0015                     	;# 
  1961  0016                     	;# 
  1962  0016                     	;# 
  1963  0017                     	;# 
  1964  0018                     	;# 
  1965  0019                     	;# 
  1966  001A                     	;# 
  1967  001B                     	;# 
  1968  001C                     	;# 
  1969  008C                     	;# 
  1970  008D                     	;# 
  1971  008E                     	;# 
  1972  0090                     	;# 
  1973  0091                     	;# 
  1974  0092                     	;# 
  1975  0095                     	;# 
  1976  0096                     	;# 
  1977  0097                     	;# 
  1978  0099                     	;# 
  1979  009A                     	;# 
  1980  009B                     	;# 
  1981  009B                     	;# 
  1982  009C                     	;# 
  1983  009D                     	;# 
  1984  009E                     	;# 
  1985  010C                     	;# 
  1986  010D                     	;# 
  1987  010E                     	;# 
  1988  0116                     	;# 
  1989  0117                     	;# 
  1990  011D                     	;# 
  1991  018C                     	;# 
  1992  018D                     	;# 
  1993  018E                     	;# 
  1994  0191                     	;# 
  1995  0191                     	;# 
  1996  0192                     	;# 
  1997  0193                     	;# 
  1998  0193                     	;# 
  1999  0194                     	;# 
  2000  0195                     	;# 
  2001  0196                     	;# 
  2002  0197                     	;# 
  2003  0199                     	;# 
  2004  019A                     	;# 
  2005  019B                     	;# 
  2006  019B                     	;# 
  2007  019B                     	;# 
  2008  019B                     	;# 
  2009  019C                     	;# 
  2010  019C                     	;# 
  2011  019D                     	;# 
  2012  019E                     	;# 
  2013  019F                     	;# 
  2014  020D                     	;# 
  2015  0210                     	;# 
  2016  0211                     	;# 
  2017  0211                     	;# 
  2018  0212                     	;# 
  2019  0212                     	;# 
  2020  0213                     	;# 
  2021  0213                     	;# 
  2022  0214                     	;# 
  2023  0214                     	;# 
  2024  0215                     	;# 
  2025  0215                     	;# 
  2026  0215                     	;# 
  2027  0216                     	;# 
  2028  0216                     	;# 
  2029  0217                     	;# 
  2030  0217                     	;# 
  2031  0291                     	;# 
  2032  0291                     	;# 
  2033  0292                     	;# 
  2034  0293                     	;# 
  2035  0298                     	;# 
  2036  0298                     	;# 
  2037  0299                     	;# 
  2038  029A                     	;# 
  2039  0394                     	;# 
  2040  0395                     	;# 
  2041  0396                     	;# 
  2042  0FE4                     	;# 
  2043  0FE5                     	;# 
  2044  0FE6                     	;# 
  2045  0FE7                     	;# 
  2046  0FE8                     	;# 
  2047  0FE9                     	;# 
  2048  0FEA                     	;# 
  2049  0FEB                     	;# 
  2050  0FED                     	;# 
  2051  0FEE                     	;# 
  2052  0FEF                     	;# 
  2053  0000                     	;# 
  2054  0001                     	;# 
  2055  0002                     	;# 
  2056  0003                     	;# 
  2057  0004                     	;# 
  2058  0005                     	;# 
  2059  0006                     	;# 
  2060  0007                     	;# 
  2061  0008                     	;# 
  2062  0009                     	;# 
  2063  000A                     	;# 
  2064  000B                     	;# 
  2065  000C                     	;# 
  2066  000D                     	;# 
  2067  000E                     	;# 
  2068  0010                     	;# 
  2069  0011                     	;# 
  2070  0012                     	;# 
  2071  0015                     	;# 
  2072  0016                     	;# 
  2073  0016                     	;# 
  2074  0017                     	;# 
  2075  0018                     	;# 
  2076  0019                     	;# 
  2077  001A                     	;# 
  2078  001B                     	;# 
  2079  001C                     	;# 
  2080  008C                     	;# 
  2081  008D                     	;# 
  2082  008E                     	;# 
  2083  0090                     	;# 
  2084  0091                     	;# 
  2085  0092                     	;# 
  2086  0095                     	;# 
  2087  0096                     	;# 
  2088  0097                     	;# 
  2089  0099                     	;# 
  2090  009A                     	;# 
  2091  009B                     	;# 
  2092  009B                     	;# 
  2093  009C                     	;# 
  2094  009D                     	;# 
  2095  009E                     	;# 
  2096  010C                     	;# 
  2097  010D                     	;# 
  2098  010E                     	;# 
  2099  0116                     	;# 
  2100  0117                     	;# 
  2101  011D                     	;# 
  2102  018C                     	;# 
  2103  018D                     	;# 
  2104  018E                     	;# 
  2105  0191                     	;# 
  2106  0191                     	;# 
  2107  0192                     	;# 
  2108  0193                     	;# 
  2109  0193                     	;# 
  2110  0194                     	;# 
  2111  0195                     	;# 
  2112  0196                     	;# 
  2113  0197                     	;# 
  2114  0199                     	;# 
  2115  019A                     	;# 
  2116  019B                     	;# 
  2117  019B                     	;# 
  2118  019B                     	;# 
  2119  019B                     	;# 
  2120  019C                     	;# 
  2121  019C                     	;# 
  2122  019D                     	;# 
  2123  019E                     	;# 
  2124  019F                     	;# 
  2125  020D                     	;# 
  2126  0210                     	;# 
  2127  0211                     	;# 
  2128  0211                     	;# 
  2129  0212                     	;# 
  2130  0212                     	;# 
  2131  0213                     	;# 
  2132  0213                     	;# 
  2133  0214                     	;# 
  2134  0214                     	;# 
  2135  0215                     	;# 
  2136  0215                     	;# 
  2137  0215                     	;# 
  2138  0216                     	;# 
  2139  0216                     	;# 
  2140  0217                     	;# 
  2141  0217                     	;# 
  2142  0291                     	;# 
  2143  0291                     	;# 
  2144  0292                     	;# 
  2145  0293                     	;# 
  2146  0298                     	;# 
  2147  0298                     	;# 
  2148  0299                     	;# 
  2149  029A                     	;# 
  2150  0394                     	;# 
  2151  0395                     	;# 
  2152  0396                     	;# 
  2153  0FE4                     	;# 
  2154  0FE5                     	;# 
  2155  0FE6                     	;# 
  2156  0FE7                     	;# 
  2157  0FE8                     	;# 
  2158  0FE9                     	;# 
  2159  0FEA                     	;# 
  2160  0FEB                     	;# 
  2161  0FED                     	;# 
  2162  0FEE                     	;# 
  2163  0FEF                     	;# 
  2164                           
  2165                           	psect	idataBANK4
  2166  1F7B                     __pidataBANK4:	
  2167                           
  2168                           ;initializer for __product
  2169  1F7B  3463               	retlw	99
  2170  1F7C  3402               	retlw	2
  2171  1F7D  3400               	retlw	0
  2172  1F7E  3400               	retlw	0
  2173  1F7F  3400               	retlw	0
  2174  1F80  3400               	retlw	0
  2175  1F81  3400               	retlw	0
  2176  1F82  3400               	retlw	0
  2177  1F83  3400               	retlw	0
  2178  1F84  3400               	retlw	0
  2179  1F85  3400               	retlw	0
  2180  1F86  3400               	retlw	0
  2181  1F87  34FF               	retlw	255
  2182  1F88  34FF               	retlw	255
  2183  1F89  34FF               	retlw	255
  2184  1F8A  3400               	retlw	0
  2185  1F8B  3400               	retlw	0
  2186  1F8C  3400               	retlw	0
  2187  1F8D  3400               	retlw	0
  2188  1F8E  3400               	retlw	0
  2189  1F8F  3400               	retlw	0
  2190  1F90  3400               	retlw	0
  2191  1F91  3400               	retlw	0
  2192  1F92  3400               	retlw	0
  2193  1F93  3400               	retlw	0
  2194  1F94  3400               	retlw	0
  2195  1F95  3400               	retlw	0
  2196  1F96  3400               	retlw	0
  2197  1F97  3400               	retlw	0
  2198  1F98  3400               	retlw	0
  2199  1F99  3400               	retlw	0
  2200  1F9A  3400               	retlw	0
  2201                           
  2202                           	psect	stringtext
  2203  1000                     __pstringtext:	
  2204  1000                     _CC2500_registers_address:	
  2205  1000  3403               	retlw	3
  2206  1001  3416               	retlw	22
  2207  1002  3417               	retlw	23
  2208  1003  341E               	retlw	30
  2209  1004  341F               	retlw	31
  2210  1005  3420               	retlw	32
  2211  1006  342A               	retlw	42
  2212  1007  342B               	retlw	43
  2213  1008  340B               	retlw	11
  2214  1009  340C               	retlw	12
  2215  100A  340D               	retlw	13
  2216  100B  340E               	retlw	14
  2217  100C  340F               	retlw	15
  2218  100D  3410               	retlw	16
  2219  100E  3411               	retlw	17
  2220  100F  3412               	retlw	18
  2221  1010  3413               	retlw	19
  2222  1011  3414               	retlw	20
  2223  1012  340A               	retlw	10
  2224  1013  3415               	retlw	21
  2225  1014  3421               	retlw	33
  2226  1015  3422               	retlw	34
  2227  1016  3418               	retlw	24
  2228  1017  3419               	retlw	25
  2229  1018  341A               	retlw	26
  2230  1019  341B               	retlw	27
  2231  101A  341C               	retlw	28
  2232  101B  341D               	retlw	29
  2233  101C  3423               	retlw	35
  2234  101D  3424               	retlw	36
  2235  101E  3425               	retlw	37
  2236  101F  3426               	retlw	38
  2237  1020  3429               	retlw	41
  2238  1021  342C               	retlw	44
  2239  1022  342D               	retlw	45
  2240  1023  342E               	retlw	46
  2241  1024  3400               	retlw	0
  2242  1025  3401               	retlw	1
  2243  1026  3402               	retlw	2
  2244  1027  3407               	retlw	7
  2245  1028  3408               	retlw	8
  2246  1029  3409               	retlw	9
  2247  102A  3406               	retlw	6
  2248  102B  3404               	retlw	4
  2249  102C  3405               	retlw	5
  2250  102D  3427               	retlw	39
  2251  102E  3428               	retlw	40
  2252  102F                     __end_of_CC2500_registers_address:	
  2253  102F                     _CC2500_rfSettings:	
  2254  102F  3407               	retlw	7
  2255  1030  3407               	retlw	7
  2256  1031  3430               	retlw	48
  2257  1032  3487               	retlw	135
  2258  1033  346B               	retlw	107
  2259  1034  34F8               	retlw	248
  2260  1035  347F               	retlw	127
  2261  1036  343F               	retlw	63
  2262  1037  3409               	retlw	9
  2263  1038  3400               	retlw	0
  2264  1039  345C               	retlw	92
  2265  103A  34A7               	retlw	167
  2266  103B  3462               	retlw	98
  2267  103C  3486               	retlw	134
  2268  103D  3483               	retlw	131
  2269  103E  3403               	retlw	3
  2270  103F  3422               	retlw	34
  2271  1040  34F8               	retlw	248
  2272  1041  3400               	retlw	0
  2273  1042  3444               	retlw	68
  2274  1043  34B6               	retlw	182
  2275  1044  3410               	retlw	16
  2276  1045  3418               	retlw	24
  2277  1046  341D               	retlw	29
  2278  1047  341C               	retlw	28
  2279  1048  34C7               	retlw	199
  2280  1049  3400               	retlw	0
  2281  104A  34B2               	retlw	178
  2282  104B  34EA               	retlw	234
  2283  104C  340A               	retlw	10
  2284  104D  3400               	retlw	0
  2285  104E  3411               	retlw	17
  2286  104F  3459               	retlw	89
  2287  1050  3488               	retlw	136
  2288  1051  3431               	retlw	49
  2289  1052  340B               	retlw	11
  2290  1053  342F               	retlw	47
  2291  1054  342E               	retlw	46
  2292  1055  3406               	retlw	6
  2293  1056  3404               	retlw	4
  2294  1057  3405               	retlw	5
  2295  1058  3400               	retlw	0
  2296  1059  3430               	retlw	48
  2297  105A  34D3               	retlw	211
  2298  105B  3491               	retlw	145
  2299  105C  3441               	retlw	65
  2300  105D  3400               	retlw	0
  2301  105E                     __end_of_CC2500_rfSettings:	
  2302  105E                     _CC2500_patable_vaule:	
  2303  105E  34FE               	retlw	254
  2304  105F  34FE               	retlw	254
  2305  1060  34FE               	retlw	254
  2306  1061  34FE               	retlw	254
  2307  1062  34FE               	retlw	254
  2308  1063  34FE               	retlw	254
  2309  1064  34FE               	retlw	254
  2310  1065  34FE               	retlw	254
  2311  1066                     __end_of_CC2500_patable_vaule:	
  2312                           
  2313                           	psect	nvBANK0
  2314  006C                     __pnvBANK0:	
  2315  006C                     _product:	
  2316  006C                     	ds	1
  2317  000C                     _PORTA	set	12
  2318  000D                     _PORTB	set	13
  2319  000E                     _PORTC	set	14
  2320  0018                     _T1CON	set	24
  2321  0017                     _TMR1H	set	23
  2322  0016                     _TMR1L	set	22
  2323  005F                     _GIE	set	95
  2324  005B                     _IOCIE	set	91
  2325  0058                     _IOCIF	set	88
  2326  005E                     _PEIE	set	94
  2327  0060                     _RA0	set	96
  2328  0063                     _RA3	set	99
  2329  0064                     _RA4	set	100
  2330  0066                     _RA6	set	102
  2331  0067                     _RA7	set	103
  2332  0068                     _RB0	set	104
  2333  0069                     _RB1	set	105
  2334  006A                     _RB2	set	106
  2335  006B                     _RB3	set	107
  2336  006C                     _RB4	set	108
  2337  006D                     _RB5	set	109
  2338  0070                     _RC0	set	112
  2339  0071                     _RC1	set	113
  2340  0072                     _RC2	set	114
  2341  0074                     _RC4	set	116
  2342  0075                     _RC5	set	117
  2343  0077                     _RC7	set	119
  2344  0088                     _TMR1IF	set	136
  2345  009D                     _ADCON0	set	157
  2346  009E                     _ADCON1	set	158
  2347  009C                     _ADRESH	set	156
  2348  009B                     _ADRESL	set	155
  2349  0099                     _OSCCON	set	153
  2350  008C                     _TRISA	set	140
  2351  008D                     _TRISB	set	141
  2352  008E                     _TRISC	set	142
  2353  0097                     _WDTCON	set	151
  2354  04E9                     _GO_nDONE	set	1257
  2355  0488                     _TMR1IE	set	1160
  2356  0117                     _FVRCON	set	279
  2357  010C                     _LATA	set	268
  2358  010D                     _LATB	set	269
  2359  010E                     _LATC	set	270
  2360  018C                     _ANSELA	set	396
  2361  018D                     _ANSELB	set	397
  2362  018E                     _ANSELC	set	398
  2363  0192                     _PMADRH	set	402
  2364  0191                     _PMADRL	set	401
  2365  0196                     _PMCON2	set	406
  2366  0194                     _PMDATH	set	404
  2367  0193                     _PMDATL	set	403
  2368  0CAE                     _CFGS	set	3246
  2369  0CAC                     _FREE	set	3244
  2370  0CAD                     _LWLO	set	3245
  2371  0CA8                     _RD	set	3240
  2372  0CA9                     _WR	set	3241
  2373  0CAA                     _WREN	set	3242
  2374  020D                     _WPUB	set	525
  2375  1069                     _WPUB1	set	4201
  2376  0396                     _IOCBF	set	918
  2377  0395                     _IOCBN	set	917
  2378  0394                     _IOCBP	set	916
  2379  1CB2                     _IOCBF2	set	7346
  2380                           
  2381                           ; #config settings
  2382  0000                     
  2383                           	psect	cinit
  2384  0022                     start_initialization:	
  2385  0022                     __initialization:	
  2386                           
  2387                           ; Clear objects allocated to BITCOMMON
  2388  0022  01FA               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
  2389                           
  2390                           ; Clear objects allocated to COMMON
  2391  0023  01FB               	clrf	__pbssCOMMON& (0+127)
  2392                           
  2393                           ; Clear objects allocated to BANK0
  2394  0024  01ED               	clrf	__pbssBANK0& (0+127)
  2395                           
  2396                           ; Clear objects allocated to BANK1
  2397  0025  30A0               	movlw	low __pbssBANK1
  2398  0026  0084               	movwf	4
  2399  0027  3000               	movlw	high __pbssBANK1
  2400  0028  0085               	movwf	5
  2401  0029  3050               	movlw	80
  2402  002A  319A  22F4  3180   	fcall	clear_ram0
  2403                           
  2404                           ; Clear objects allocated to BANK2
  2405  002D  3020               	movlw	low __pbssBANK2
  2406  002E  0084               	movwf	4
  2407  002F  3001               	movlw	high __pbssBANK2
  2408  0030  0085               	movwf	5
  2409  0031  304E               	movlw	78
  2410  0032  319A  22F4  3180   	fcall	clear_ram0
  2411                           
  2412                           ; Clear objects allocated to BANK3
  2413  0035  30A0               	movlw	low __pbssBANK3
  2414  0036  0084               	movwf	4
  2415  0037  3001               	movlw	high __pbssBANK3
  2416  0038  0085               	movwf	5
  2417  0039  3046               	movlw	70
  2418  003A  319A  22F4  3180   	fcall	clear_ram0
  2419                           
  2420                           ; Clear objects allocated to BANK4
  2421  003D  3020               	movlw	low __pbssBANK4
  2422  003E  0084               	movwf	4
  2423  003F  3002               	movlw	high __pbssBANK4
  2424  0040  0085               	movwf	5
  2425  0041  3025               	movlw	37
  2426  0042  319A  22F4  3180   	fcall	clear_ram0
  2427                           
  2428                           ; Initialize objects allocated to BANK4
  2429  0045  307B               	movlw	low __pidataBANK4
  2430  0046  0084               	movwf	4
  2431  0047  309F               	movlw	(high __pidataBANK4)| (0+128)
  2432  0048  0085               	movwf	5
  2433  0049  3045               	movlw	low __pdataBANK4
  2434  004A  0086               	movwf	6
  2435  004B  3002               	movlw	high __pdataBANK4
  2436  004C  0087               	movwf	7
  2437  004D  3020               	movlw	32
  2438  004E  319A  22EE         	fcall	init_ram
  2439  0050                     end_of_initialization:	
  2440                           ;End of C runtime variable initialization code
  2441                           
  2442  0050                     __end_of__initialization:	
  2443  0050  107E               	bcf	pic14e$flags,0	;clear compiler interrupt flag
  2444  0051  0020               	movlb	0
  2445  0052  3196  2E87         	ljmp	_main	;jump to C main() function
  2446                           
  2447                           	psect	bitbssCOMMON
  2448  03D0                     __pbitbssCOMMON:	
  2449  03D0                     _Receive_OK:	
  2450  03D0                     	ds	1
  2451  03D1                     _Transceive_OK:	
  2452  03D1                     	ds	1
  2453                           
  2454                           	psect	bssCOMMON
  2455  007B                     __pbssCOMMON:	
  2456  007B                     _DimmerLights:	
  2457  007B                     	ds	1
  2458                           
  2459                           	psect	bssBANK0
  2460  006D                     __pbssBANK0:	
  2461  006D                     _Sw:	
  2462  006D                     	ds	1
  2463                           
  2464                           	psect	bssBANK1
  2465  00A0                     __pbssBANK1:	
  2466  00A0                     _RF1:	
  2467  00A0                     	ds	14
  2468  00AE                     _Buz1:	
  2469  00AE                     	ds	12
  2470  00BA                     _Dimmer:	
  2471  00BA                     	ds	3
  2472  00BD                     _Timer1:	
  2473  00BD                     	ds	3
  2474  00C0                     _WDT:	
  2475  00C0                     	ds	2
  2476  00C2                     _CRC:	
  2477  00C2                     	ds	1
  2478  00C3                     _Cmd:	
  2479  00C3                     	ds	1
  2480  00C4                     _DelayOff:	
  2481  00C4                     	ds	1
  2482  00C5                     _DimmerIntr:	
  2483  00C5                     	ds	1
  2484  00C6                     _LED:	
  2485  00C6                     	ds	1
  2486  00C7                     _Light:	
  2487  00C7                     	ds	1
  2488  00C8                     _RSSI:	
  2489  00C8                     	ds	1
  2490  00C9                     _Rx_Length:	
  2491  00C9                     	ds	1
  2492  00CA                     _SPI0Buffer:	
  2493  00CA                     	ds	1
  2494  00CB                     _SwDetect:	
  2495  00CB                     	ds	1
  2496  00CC                     _Tx_Length:	
  2497  00CC                     	ds	1
  2498  00CD                     _r_address:	
  2499  00CD                     	ds	1
  2500  00CE                     _r_data:	
  2501  00CE                     	ds	1
  2502  00CF                     _s_data:	
  2503  00CF                     	ds	1
  2504  00D0                     _Temp:	
  2505  00D0                     	ds	18
  2506  00E2                     _DimmerIntr1:	
  2507  00E2                     	ds	7
  2508  00E9                     _DimmerIntr2:	
  2509  00E9                     	ds	7
  2510                           
  2511                           	psect	bssBANK2
  2512  0120                     __pbssBANK2:	
  2513  0120                     _myMain:	
  2514  0120                     	ds	14
  2515  012E                     _RF_Count:	
  2516  012E                     	ds	2
  2517  0130                     _Load:	
  2518  0130                     	ds	46
  2519  015E                     _DimmerLights1:	
  2520  015E                     	ds	8
  2521  0166                     _DimmerLights2:	
  2522  0166                     	ds	8
  2523                           
  2524                           	psect	bssBANK3
  2525  01A0                     __pbssBANK3:	
  2526  01A0                     _RF_Data:	
  2527  01A0                     	ds	30
  2528  01BE                     _Sw1:	
  2529  01BE                     	ds	9
  2530  01C7                     _Sw2:	
  2531  01C7                     	ds	9
  2532  01D0                     _DlySw1:	
  2533  01D0                     	ds	5
  2534  01D5                     _DlySw2:	
  2535  01D5                     	ds	5
  2536  01DA                     _VarErrLED:	
  2537  01DA                     	ds	4
  2538  01DE                     _VarLED1:	
  2539  01DE                     	ds	4
  2540  01E2                     _VarLED2:	
  2541  01E2                     	ds	4
  2542                           
  2543                           	psect	bssBANK4
  2544  0220                     __pbssBANK4:	
  2545  0220                     _Memory:	
  2546  0220                     	ds	37
  2547                           
  2548                           	psect	dataBANK4
  2549  0245                     __pdataBANK4:	
  2550  0245                     __product:	
  2551  0245                     	ds	32
  2552                           
  2553                           	psect	clrtext
  2554  1AF4                     clear_ram0:	
  2555                           ;	Called with FSR0 containing the base address, and
  2556                           ;	WREG with the size to clear
  2557                           
  2558  1AF4  0064               	clrwdt	;clear the watchdog before getting into this loop
  2559  1AF5                     clrloop0:	
  2560  1AF5  0180               	clrf	0	;clear RAM location pointed to by FSR
  2561  1AF6  3101               	addfsr 0,1
  2562  1AF7  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2563  1AF8  2AF5               	goto	clrloop0	;have we reached the end yet?
  2564  1AF9  3400               	retlw	0	;all done for this memory range, return
  2565                           
  2566                           	psect	inittext
  2567  1AEE                     init_ram:	
  2568  1AEE  00FE               	movwf	126
  2569  1AEF                     initloop:	
  2570  1AEF  0012               	moviw fsr0++
  2571  1AF0  001E               	movwi fsr1++
  2572  1AF1  0BFE               	decfsz	126,f
  2573  1AF2  2AEF               	goto	initloop
  2574  1AF3  3400               	retlw	0
  2575                           
  2576                           	psect	cstackBANK3
  2577  01E6                     __pcstackBANK3:	
  2578  01E6                     ?_main:	
  2579  01E6                     main@argc:	
  2580                           ; 2 bytes @ 0x0
  2581                           
  2582                           
  2583                           ; 2 bytes @ 0x0
  2584  01E6                     	ds	2
  2585  01E8                     main@argv:	
  2586                           
  2587                           ; 2 bytes @ 0x2
  2588  01E8                     	ds	2
  2589                           
  2590                           	psect	cstackCOMMON
  2591  0070                     __pcstackCOMMON:	
  2592  0070                     ?_CC2500_WriteCommand:	
  2593  0070                     ?_RF_Timeout_Counter:	
  2594                           ; 0 bytes @ 0x0
  2595                           
  2596  0070                     ?_setRF_TimeoutCleared:	
  2597                           ; 0 bytes @ 0x0
  2598                           
  2599  0070                     ?_CC2500_WriteByte:	
  2600                           ; 0 bytes @ 0x0
  2601                           
  2602  0070                     ?_CC2500_ReadStatus:	
  2603                           ; 0 bytes @ 0x0
  2604                           
  2605  0070                     ?_CC2500_ReadByte:	
  2606                           ; 0 bytes @ 0x0
  2607                           
  2608  0070                     ?_CC2500_PowerRST:	
  2609                           ; 0 bytes @ 0x0
  2610                           
  2611  0070                     ?_CC2500_InitSetREG:	
  2612                           ; 0 bytes @ 0x0
  2613                           
  2614  0070                     ?_CC2500_InitPATable:	
  2615                           ; 0 bytes @ 0x0
  2616                           
  2617  0070                     ?_CC2500_ClearTXFIFO:	
  2618                           ; 0 bytes @ 0x0
  2619                           
  2620  0070                     ?_CC2500_ClearRXFIFO:	
  2621                           ; 0 bytes @ 0x0
  2622                           
  2623  0070                     ?_CC2500_FrequencyCabr:	
  2624                           ; 0 bytes @ 0x0
  2625                           
  2626  0070                     ?_CC2500_SIDLEMode:	
  2627                           ; 0 bytes @ 0x0
  2628                           
  2629  0070                     ?_DlyOff_Initialization:	
  2630                           ; 0 bytes @ 0x0
  2631                           
  2632  0070                     ?_DlyOff_Main:	
  2633                           ; 0 bytes @ 0x0
  2634                           
  2635  0070                     ?_setDimmerLights_SwOn:	
  2636                           ; 0 bytes @ 0x0
  2637                           
  2638  0070                     ?_setDimmerLights_SwOff:	
  2639                           ; 0 bytes @ 0x0
  2640                           
  2641  0070                     ?_setDimmerLights_Initialization:	
  2642                           ; 0 bytes @ 0x0
  2643                           
  2644  0070                     ?_setDimmerLights_Main:	
  2645                           ; 0 bytes @ 0x0
  2646                           
  2647  0070                     ?_setDimmerLights_Line:	
  2648                           ; 0 bytes @ 0x0
  2649                           
  2650  0070                     ?_setTxData:	
  2651                           ; 0 bytes @ 0x0
  2652                           
  2653  0070                     ?_setRF_TransceiveGO:	
  2654                           ; 0 bytes @ 0x0
  2655                           
  2656  0070                     ?_setLED_Initialization:	
  2657                           ; 0 bytes @ 0x0
  2658                           
  2659  0070                     ?_setLED_Main:	
  2660                           ; 0 bytes @ 0x0
  2661                           
  2662  0070                     ?_Fosc_Set:	
  2663                           ; 0 bytes @ 0x0
  2664                           
  2665  0070                     ?_IO_Set:	
  2666                           ; 0 bytes @ 0x0
  2667                           
  2668  0070                     ?_TMR1_Set:	
  2669                           ; 0 bytes @ 0x0
  2670                           
  2671  0070                     ?_ADC_Set:	
  2672                           ; 0 bytes @ 0x0
  2673                           
  2674  0070                     ?_IOC_Set:	
  2675                           ; 0 bytes @ 0x0
  2676                           
  2677  0070                     ?_WDT_Set:	
  2678                           ; 0 bytes @ 0x0
  2679                           
  2680  0070                     ?_TMR1_ISR:	
  2681                           ; 0 bytes @ 0x0
  2682                           
  2683  0070                     ?_IOC_ISR:	
  2684                           ; 0 bytes @ 0x0
  2685                           
  2686  0070                     ??_IOC_ISR:	
  2687                           ; 0 bytes @ 0x0
  2688                           
  2689  0070                     ?_Timeout_Counter:	
  2690                           ; 0 bytes @ 0x0
  2691                           
  2692  0070                     ?_set_TimeoutCleared:	
  2693                           ; 0 bytes @ 0x0
  2694                           
  2695  0070                     ?_Flash_Memory_Write:	
  2696                           ; 0 bytes @ 0x0
  2697                           
  2698  0070                     ?_Flash_Memory_Modify:	
  2699                           ; 0 bytes @ 0x0
  2700                           
  2701  0070                     ?_WDT_Clearing:	
  2702                           ; 0 bytes @ 0x0
  2703                           
  2704  0070                     ?_myMain_Initialization:	
  2705                           ; 0 bytes @ 0x0
  2706                           
  2707  0070                     ?_Temp_Initialization:	
  2708                           ; 0 bytes @ 0x0
  2709                           
  2710  0070                     ?_Load_Initialization:	
  2711                           ; 0 bytes @ 0x0
  2712                           
  2713  0070                     ?_Switch_Initialization:	
  2714                           ; 0 bytes @ 0x0
  2715                           
  2716  0070                     ?_RF_Initialization:	
  2717                           ; 0 bytes @ 0x0
  2718                           
  2719  0070                     ?_getLoad_AD:	
  2720                           ; 0 bytes @ 0x0
  2721                           
  2722  0070                     ?_getTemp_AD:	
  2723                           ; 0 bytes @ 0x0
  2724                           
  2725  0070                     ?_my_MainTimer:	
  2726                           ; 0 bytes @ 0x0
  2727                           
  2728  0070                     ?_Temp_Main:	
  2729                           ; 0 bytes @ 0x0
  2730                           
  2731  0070                     ?_Load_Main:	
  2732                           ; 0 bytes @ 0x0
  2733                           
  2734  0070                     ?_Switch_Main:	
  2735                           ; 0 bytes @ 0x0
  2736                           
  2737  0070                     ?_RF_Main:	
  2738                           ; 0 bytes @ 0x0
  2739                           
  2740  0070                     ?_Exception_Main:	
  2741                           ; 0 bytes @ 0x0
  2742                           
  2743  0070                     ?_setLoad_AH_AL_Restore:	
  2744                           ; 0 bytes @ 0x0
  2745                           
  2746  0070                     ?_setTemp_Initialization:	
  2747                           ; 0 bytes @ 0x0
  2748                           
  2749  0070                     ?_setTemp_Main:	
  2750                           ; 0 bytes @ 0x0
  2751                           
  2752  0070                     ?_setRF_Initialization:	
  2753                           ; 0 bytes @ 0x0
  2754                           
  2755  0070                     ?_setRF_Main:	
  2756                           ; 0 bytes @ 0x0
  2757                           
  2758  0070                     ?_RF_RxDisable:	
  2759                           ; 0 bytes @ 0x0
  2760                           
  2761  0070                     ?_getRxData:	
  2762                           ; 0 bytes @ 0x0
  2763                           
  2764  0070                     ?_setLog_Code:	
  2765                           ; 0 bytes @ 0x0
  2766                           
  2767  0070                     ?_setControl_Lights_Table:	
  2768                           ; 0 bytes @ 0x0
  2769                           
  2770  0070                     ?_setRFSW_Control:	
  2771                           ; 0 bytes @ 0x0
  2772                           
  2773  0070                     ?_setRFSW_AdjControl:	
  2774                           ; 0 bytes @ 0x0
  2775                           
  2776  0070                     ?_setSw_Initialization:	
  2777                           ; 0 bytes @ 0x0
  2778                           
  2779  0070                     ?_setSw_Main:	
  2780                           ; 0 bytes @ 0x0
  2781                           
  2782  0070                     ?_Buzzer_Initialization:	
  2783                           ; 0 bytes @ 0x0
  2784                           
  2785  0070                     ?_Buzzer_Main:	
  2786                           ; 0 bytes @ 0x0
  2787                           
  2788  0070                     ?_CC2500_TxData:	
  2789                           ; 0 bytes @ 0x0
  2790                           
  2791  0070                     ?_CC2500_RxData:	
  2792                           ; 0 bytes @ 0x0
  2793                           
  2794  0070                     ?_CC2500_PowerOnInitial:	
  2795                           ; 0 bytes @ 0x0
  2796                           
  2797  0070                     ?_DelayOffPointSelect:	
  2798                           ; 0 bytes @ 0x0
  2799                           
  2800  0070                     ?_DelayOff_Initialization:	
  2801                           ; 0 bytes @ 0x0
  2802                           
  2803  0070                     ?_DelayOff_Main:	
  2804                           ; 0 bytes @ 0x0
  2805                           
  2806  0070                     ?_DimmerIntr_Initialization:	
  2807                           ; 0 bytes @ 0x0
  2808                           
  2809  0070                     ?_DimmerLights_SelectPointer:	
  2810                           ; 0 bytes @ 0x0
  2811                           
  2812  0070                     ?_DimmerLights_Initialization:	
  2813                           ; 0 bytes @ 0x0
  2814                           
  2815  0070                     ?_setDimmerLights_DimmingOn:	
  2816                           ; 0 bytes @ 0x0
  2817                           
  2818  0070                     ?_DimmerLights_Main:	
  2819                           ; 0 bytes @ 0x0
  2820                           
  2821  0070                     ?_DimmerLights_MOSFET_TMR_1:	
  2822                           ; 0 bytes @ 0x0
  2823                           
  2824  0070                     ??_DimmerLights_MOSFET_TMR_1:	
  2825                           ; 0 bytes @ 0x0
  2826                           
  2827  0070                     ?_DimmerLights_MOSFET_IOC_1:	
  2828                           ; 0 bytes @ 0x0
  2829                           
  2830  0070                     ??_DimmerLights_MOSFET_IOC_1:	
  2831                           ; 0 bytes @ 0x0
  2832                           
  2833  0070                     ?_DimmerLights_MOSFET_TMR_2:	
  2834                           ; 0 bytes @ 0x0
  2835                           
  2836  0070                     ??_DimmerLights_MOSFET_TMR_2:	
  2837                           ; 0 bytes @ 0x0
  2838                           
  2839  0070                     ?_DimmerLights_MOSFET_IOC_2:	
  2840                           ; 0 bytes @ 0x0
  2841                           
  2842  0070                     ??_DimmerLights_MOSFET_IOC_2:	
  2843                           ; 0 bytes @ 0x0
  2844                           
  2845  0070                     ?_LedPointSelect:	
  2846                           ; 0 bytes @ 0x0
  2847                           
  2848  0070                     ?_LED_Initialization:	
  2849                           ; 0 bytes @ 0x0
  2850                           
  2851  0070                     ?_LED_Main:	
  2852                           ; 0 bytes @ 0x0
  2853                           
  2854  0070                     ?_Mcu_Initialization:	
  2855                           ; 0 bytes @ 0x0
  2856                           
  2857  0070                     ?_ISR:	
  2858                           ; 0 bytes @ 0x0
  2859                           
  2860  0070                     ?_Flash_Memory_Initialization:	
  2861                           ; 0 bytes @ 0x0
  2862                           
  2863  0070                     ?_Flash_Memory_Main:	
  2864                           ; 0 bytes @ 0x0
  2865                           
  2866  0070                     ?_Flash_Memory_Unlock:	
  2867                           ; 0 bytes @ 0x0
  2868                           
  2869  0070                     ?_Flash_Memory_Erasing:	
  2870                           ; 0 bytes @ 0x0
  2871                           
  2872  0070                     ?_setMemory_Modify:	
  2873                           ; 0 bytes @ 0x0
  2874                           
  2875  0070                     ?_setMemory_LoopSave:	
  2876                           ; 0 bytes @ 0x0
  2877                           
  2878  0070                     ?_WDT_Main:	
  2879                           ; 0 bytes @ 0x0
  2880                           
  2881  0070                     ?_setRF_Learn:	
  2882                           ; 0 bytes @ 0x0
  2883                           
  2884  0070                     ?_TouchPower:	
  2885                           ; 0 bytes @ 0x0
  2886                           
  2887  0070                     ?_SwPointSelect:	
  2888                           ; 0 bytes @ 0x0
  2889                           
  2890  0070                     ?_getDimmerLights_Status:	
  2891                           ; 0 bytes @ 0x0
  2892                           
  2893  0070                     ?_getLoad_OK:	
  2894                           ; 1 bytes @ 0x0
  2895                           
  2896  0070                     ?_getMain_All_Error_Status:	
  2897                           ; 1 bytes @ 0x0
  2898                           
  2899  0070                     ?_getMain_All_LightsStatus:	
  2900                           ; 1 bytes @ 0x0
  2901                           
  2902  0070                     ?_getDimmerLights_Allow_Condition:	
  2903                           ; 1 bytes @ 0x0
  2904                           
  2905  0070                     ?_getDimmerLights_PercentToValue:	
  2906                           ; 1 bytes @ 0x0
  2907                           
  2908  0070                     ?_getDimmerLights_ValueToPercent:	
  2909                           ; 1 bytes @ 0x0
  2910                           
  2911  0070                     ?_getCmd_Status:	
  2912                           ; 1 bytes @ 0x0
  2913                           
  2914  0070                     ?_Flash_Memory_Read:	
  2915                           ; 1 bytes @ 0x0
  2916                           
  2917  0070                     ?_getRF_KeyStatus:	
  2918                           ; 1 bytes @ 0x0
  2919                           
  2920  0070                     ?_getSw_KeyStatus:	
  2921                           ; 1 bytes @ 0x0
  2922                           
  2923  0070                     ?_getDelayOff_GO:	
  2924                           ; 1 bytes @ 0x0
  2925                           
  2926  0070                     ?_getDimmerIntr_DimmingValue:	
  2927                           ; 1 bytes @ 0x0
  2928                           
  2929  0070                     ?_getAll_DimmerIntr_Dimming_Sw_RF:	
  2930                           ; 1 bytes @ 0x0
  2931                           
  2932  0070                     ?_getDimmerLights_Line:	
  2933                           ; 1 bytes @ 0x0
  2934                           
  2935  0070                     ?_getDimmer_LoadGO:	
  2936                           ; 1 bytes @ 0x0
  2937                           
  2938  0070                     ?_getDimmer_Load_Status:	
  2939                           ; 1 bytes @ 0x0
  2940                           
  2941  0070                     ?_getMain_Lights_Count:	
  2942                           ; 1 bytes @ 0x0
  2943                           
  2944  0070                     setDimmerLights_Initialization@lights:	
  2945                           ; 1 bytes @ 0x0
  2946                           
  2947                           
  2948                           ; 1 bytes @ 0x0
  2949  0070                     	ds	1
  2950  0071                     ??_TMR1_ISR:	
  2951  0071                     ??_ISR:	
  2952                           ; 0 bytes @ 0x1
  2953                           
  2954                           
  2955                           ; 0 bytes @ 0x1
  2956  0071                     	ds	1
  2957  0072                     ??_RF_Timeout_Counter:	
  2958  0072                     ??_setRF_TimeoutCleared:	
  2959                           ; 0 bytes @ 0x2
  2960                           
  2961  0072                     ??_CC2500_WriteByte:	
  2962                           ; 0 bytes @ 0x2
  2963                           
  2964  0072                     ??_CC2500_ReadByte:	
  2965                           ; 0 bytes @ 0x2
  2966                           
  2967  0072                     ?_DelayTime_1us:	
  2968                           ; 0 bytes @ 0x2
  2969                           
  2970  0072                     ??_setDimmerLights_Initialization:	
  2971                           ; 0 bytes @ 0x2
  2972                           
  2973  0072                     ??_getLoad_OK:	
  2974                           ; 0 bytes @ 0x2
  2975                           
  2976  0072                     ??_getMain_All_Error_Status:	
  2977                           ; 0 bytes @ 0x2
  2978                           
  2979  0072                     ??_getMain_All_LightsStatus:	
  2980                           ; 0 bytes @ 0x2
  2981                           
  2982  0072                     ??_setDimmerLights_Line:	
  2983                           ; 0 bytes @ 0x2
  2984                           
  2985  0072                     ??_getCmd_Status:	
  2986                           ; 0 bytes @ 0x2
  2987                           
  2988  0072                     ?_setCmd_Status:	
  2989                           ; 0 bytes @ 0x2
  2990                           
  2991  0072                     ??_setTxData:	
  2992                           ; 0 bytes @ 0x2
  2993                           
  2994  0072                     ??_setRF_TransceiveGO:	
  2995                           ; 0 bytes @ 0x2
  2996                           
  2997  0072                     ??_Fosc_Set:	
  2998                           ; 0 bytes @ 0x2
  2999                           
  3000  0072                     ??_IO_Set:	
  3001                           ; 0 bytes @ 0x2
  3002                           
  3003  0072                     ??_TMR1_Set:	
  3004                           ; 0 bytes @ 0x2
  3005                           
  3006  0072                     ??_ADC_Set:	
  3007                           ; 0 bytes @ 0x2
  3008                           
  3009  0072                     ??_IOC_Set:	
  3010                           ; 0 bytes @ 0x2
  3011                           
  3012  0072                     ??_WDT_Set:	
  3013                           ; 0 bytes @ 0x2
  3014                           
  3015  0072                     ??_Timeout_Counter:	
  3016                           ; 0 bytes @ 0x2
  3017                           
  3018  0072                     ??_set_TimeoutCleared:	
  3019                           ; 0 bytes @ 0x2
  3020                           
  3021  0072                     ??_Flash_Memory_Read:	
  3022                           ; 0 bytes @ 0x2
  3023                           
  3024  0072                     ?_setMemory_Data:	
  3025                           ; 0 bytes @ 0x2
  3026                           
  3027  0072                     ??_Flash_Memory_Write:	
  3028                           ; 0 bytes @ 0x2
  3029                           
  3030  0072                     ??_WDT_Clearing:	
  3031                           ; 0 bytes @ 0x2
  3032                           
  3033  0072                     ??_myMain_Initialization:	
  3034                           ; 0 bytes @ 0x2
  3035                           
  3036  0072                     ??_Temp_Initialization:	
  3037                           ; 0 bytes @ 0x2
  3038                           
  3039  0072                     ??_setLoad_AH_AL_Restore:	
  3040                           ; 0 bytes @ 0x2
  3041                           
  3042  0072                     ??_setTemp_Initialization:	
  3043                           ; 0 bytes @ 0x2
  3044                           
  3045  0072                     ??_setRF_Initialization:	
  3046                           ; 0 bytes @ 0x2
  3047                           
  3048  0072                     ??_getRF_KeyStatus:	
  3049                           ; 0 bytes @ 0x2
  3050                           
  3051  0072                     ??_getSw_KeyStatus:	
  3052                           ; 0 bytes @ 0x2
  3053                           
  3054  0072                     ??_Buzzer_Initialization:	
  3055                           ; 0 bytes @ 0x2
  3056                           
  3057  0072                     ??_Buzzer_Main:	
  3058                           ; 0 bytes @ 0x2
  3059                           
  3060  0072                     ??_DelayOffPointSelect:	
  3061                           ; 0 bytes @ 0x2
  3062                           
  3063  0072                     ??_DimmerIntr_Initialization:	
  3064                           ; 0 bytes @ 0x2
  3065                           
  3066  0072                     ?_setDimmerIntr_ControlStatus:	
  3067                           ; 0 bytes @ 0x2
  3068                           
  3069  0072                     ?_setDimmerIntr_DimmingValue:	
  3070                           ; 0 bytes @ 0x2
  3071                           
  3072  0072                     ??_getDimmerIntr_DimmingValue:	
  3073                           ; 0 bytes @ 0x2
  3074                           
  3075  0072                     ?_setDimmerIntr_Dimming_Sw:	
  3076                           ; 0 bytes @ 0x2
  3077                           
  3078  0072                     ?_setDimmerIntr_Dimming_RF:	
  3079                           ; 0 bytes @ 0x2
  3080                           
  3081  0072                     ??_getAll_DimmerIntr_Dimming_Sw_RF:	
  3082                           ; 0 bytes @ 0x2
  3083                           
  3084  0072                     ??_DimmerLights_SelectPointer:	
  3085                           ; 0 bytes @ 0x2
  3086                           
  3087  0072                     ??_getDimmerLights_Line:	
  3088                           ; 0 bytes @ 0x2
  3089                           
  3090  0072                     ??_getDimmer_LoadGO:	
  3091                           ; 0 bytes @ 0x2
  3092                           
  3093  0072                     ??_getDimmer_Load_Status:	
  3094                           ; 0 bytes @ 0x2
  3095                           
  3096  0072                     ??_LedPointSelect:	
  3097                           ; 0 bytes @ 0x2
  3098                           
  3099  0072                     ??_Flash_Memory_Unlock:	
  3100                           ; 0 bytes @ 0x2
  3101                           
  3102  0072                     ??_Flash_Memory_Erasing:	
  3103                           ; 0 bytes @ 0x2
  3104                           
  3105  0072                     ??_setMemory_Modify:	
  3106                           ; 0 bytes @ 0x2
  3107                           
  3108  0072                     ??_setMemory_LoopSave:	
  3109                           ; 0 bytes @ 0x2
  3110                           
  3111  0072                     ??_WDT_Main:	
  3112                           ; 0 bytes @ 0x2
  3113                           
  3114  0072                     ??_getMain_Lights_Count:	
  3115                           ; 0 bytes @ 0x2
  3116                           
  3117  0072                     ??_setRF_Learn:	
  3118                           ; 0 bytes @ 0x2
  3119                           
  3120  0072                     ??_TouchPower:	
  3121                           ; 0 bytes @ 0x2
  3122                           
  3123  0072                     ??_SwPointSelect:	
  3124                           ; 0 bytes @ 0x2
  3125                           
  3126  0072                     ?___bmul:	
  3127                           ; 0 bytes @ 0x2
  3128                           
  3129  0072                     ?_getBuz_GO:	
  3130                           ; 1 bytes @ 0x2
  3131                           
  3132  0072                     ?_getAD:	
  3133                           ; 2 bytes @ 0x2
  3134                           
  3135  0072                     ?___wmul:	
  3136                           ; 2 bytes @ 0x2
  3137                           
  3138  0072                     ?___awdiv:	
  3139                           ; 2 bytes @ 0x2
  3140                           
  3141  0072                     ?___lwdiv:	
  3142                           ; 2 bytes @ 0x2
  3143                           
  3144  0072                     ?___ftpack:	
  3145                           ; 2 bytes @ 0x2
  3146                           
  3147  0072                     setDimmerIntr_ControlStatus@command:	
  3148                           ; 3 bytes @ 0x2
  3149                           
  3150  0072                     setDimmerIntr_DimmingValue@value:	
  3151                           ; 1 bytes @ 0x2
  3152                           
  3153  0072                     setDimmerIntr_Dimming_Sw@command:	
  3154                           ; 1 bytes @ 0x2
  3155                           
  3156  0072                     setDimmerIntr_Dimming_RF@command:	
  3157                           ; 1 bytes @ 0x2
  3158                           
  3159  0072                     setDimmerLights_Line@lights:	
  3160                           ; 1 bytes @ 0x2
  3161                           
  3162  0072                     getDimmer_LoadGO@loadgo:	
  3163                           ; 1 bytes @ 0x2
  3164                           
  3165  0072                     getDimmer_Load_Status@status:	
  3166                           ; 1 bytes @ 0x2
  3167                           
  3168  0072                     getAD@adcon1:	
  3169                           ; 1 bytes @ 0x2
  3170                           
  3171  0072                     setMemory_Data@data:	
  3172                           ; 1 bytes @ 0x2
  3173                           
  3174  0072                     getMain_All_LightsStatus@status:	
  3175                           ; 1 bytes @ 0x2
  3176                           
  3177  0072                     getMain_Lights_Count@count:	
  3178                           ; 1 bytes @ 0x2
  3179                           
  3180  0072                     setCmd_Status@cmd:	
  3181                           ; 1 bytes @ 0x2
  3182                           
  3183  0072                     getCmd_Status@number:	
  3184                           ; 1 bytes @ 0x2
  3185                           
  3186  0072                     getLoad_OK@ok:	
  3187                           ; 1 bytes @ 0x2
  3188                           
  3189  0072                     ___bmul@multiplicand:	
  3190                           ; 1 bytes @ 0x2
  3191                           
  3192  0072                     DelayTime_1us@count:	
  3193                           ; 1 bytes @ 0x2
  3194                           
  3195  0072                     ___wmul@multiplier:	
  3196                           ; 2 bytes @ 0x2
  3197                           
  3198  0072                     ___awdiv@divisor:	
  3199                           ; 2 bytes @ 0x2
  3200                           
  3201  0072                     ___lwdiv@divisor:	
  3202                           ; 2 bytes @ 0x2
  3203                           
  3204  0072                     ___ftpack@arg:	
  3205                           ; 2 bytes @ 0x2
  3206                           
  3207                           
  3208                           ; 3 bytes @ 0x2
  3209  0072                     	ds	1
  3210  0073                     ??_getDimmerLights_Allow_Condition:	
  3211  0073                     ??_setCmd_Status:	
  3212                           ; 0 bytes @ 0x3
  3213                           
  3214  0073                     ??_setMemory_Data:	
  3215                           ; 0 bytes @ 0x3
  3216                           
  3217  0073                     ??_RF_Initialization:	
  3218                           ; 0 bytes @ 0x3
  3219                           
  3220  0073                     ??_setDimmerIntr_ControlStatus:	
  3221                           ; 0 bytes @ 0x3
  3222                           
  3223  0073                     ??_setDimmerIntr_DimmingValue:	
  3224                           ; 0 bytes @ 0x3
  3225                           
  3226  0073                     ??_setDimmerIntr_Dimming_Sw:	
  3227                           ; 0 bytes @ 0x3
  3228                           
  3229  0073                     ??_setDimmerIntr_Dimming_RF:	
  3230                           ; 0 bytes @ 0x3
  3231                           
  3232  0073                     ??_DimmerLights_Initialization:	
  3233                           ; 0 bytes @ 0x3
  3234                           
  3235  0073                     ??_Mcu_Initialization:	
  3236                           ; 0 bytes @ 0x3
  3237                           
  3238  0073                     ??___bmul:	
  3239                           ; 0 bytes @ 0x3
  3240                           
  3241  0073                     CC2500_WriteByte@loop_a:	
  3242                           ; 0 bytes @ 0x3
  3243                           
  3244  0073                     CC2500_ReadByte@loop_b:	
  3245                           ; 1 bytes @ 0x3
  3246                           
  3247  0073                     DelayOffPointSelect@sw:	
  3248                           ; 1 bytes @ 0x3
  3249                           
  3250  0073                     getDimmerIntr_DimmingValue@value:	
  3251                           ; 1 bytes @ 0x3
  3252                           
  3253  0073                     _getAll_DimmerIntr_Dimming_Sw_RF$2204:	
  3254                           ; 1 bytes @ 0x3
  3255                           
  3256  0073                     DimmerLights_SelectPointer@lights:	
  3257                           ; 1 bytes @ 0x3
  3258                           
  3259  0073                     getDimmerLights_Line@line:	
  3260                           ; 1 bytes @ 0x3
  3261                           
  3262  0073                     LedPointSelect@led:	
  3263                           ; 1 bytes @ 0x3
  3264                           
  3265  0073                     Flash_Memory_Read@i:	
  3266                           ; 1 bytes @ 0x3
  3267                           
  3268  0073                     Flash_Memory_Write@i:	
  3269                           ; 1 bytes @ 0x3
  3270                           
  3271  0073                     setMemory_Modify@command:	
  3272                           ; 1 bytes @ 0x3
  3273                           
  3274  0073                     setMemory_LoopSave@command:	
  3275                           ; 1 bytes @ 0x3
  3276                           
  3277  0073                     getMain_Lights_Count@status1:	
  3278                           ; 1 bytes @ 0x3
  3279                           
  3280  0073                     getCmd_Status@cmd:	
  3281                           ; 1 bytes @ 0x3
  3282                           
  3283  0073                     setLoad_AH_AL_Restore@i:	
  3284                           ; 1 bytes @ 0x3
  3285                           
  3286  0073                     setRF_Learn@command:	
  3287                           ; 1 bytes @ 0x3
  3288                           
  3289  0073                     getRF_KeyStatus@key:	
  3290                           ; 1 bytes @ 0x3
  3291                           
  3292  0073                     setRF_TransceiveGO@command:	
  3293                           ; 1 bytes @ 0x3
  3294                           
  3295  0073                     SwPointSelect@sw:	
  3296                           ; 1 bytes @ 0x3
  3297                           
  3298  0073                     _getSw_KeyStatus$6400:	
  3299                           ; 1 bytes @ 0x3
  3300                           
  3301  0073                     _getMain_All_Error_Status$3648:	
  3302                           ; 1 bytes @ 0x3
  3303                           
  3304                           
  3305                           ; 2 bytes @ 0x3
  3306  0073                     	ds	1
  3307  0074                     ??_CC2500_WriteCommand:	
  3308  0074                     ??_CC2500_ReadStatus:	
  3309                           ; 0 bytes @ 0x4
  3310                           
  3311  0074                     ??_DelayTime_1us:	
  3312                           ; 0 bytes @ 0x4
  3313                           
  3314  0074                     ?_CC2500_WriteREG:	
  3315                           ; 0 bytes @ 0x4
  3316                           
  3317  0074                     ??_DlyOff_Initialization:	
  3318                           ; 0 bytes @ 0x4
  3319                           
  3320  0074                     ??_getDimmerLights_Status:	
  3321                           ; 0 bytes @ 0x4
  3322                           
  3323  0074                     ??_setDimmerLights_SwOff:	
  3324                           ; 0 bytes @ 0x4
  3325                           
  3326  0074                     ?_setLED:	
  3327                           ; 0 bytes @ 0x4
  3328                           
  3329  0074                     ??_setLED_Main:	
  3330                           ; 0 bytes @ 0x4
  3331                           
  3332  0074                     ??_Load_Initialization:	
  3333                           ; 0 bytes @ 0x4
  3334                           
  3335  0074                     ??_getBuz_GO:	
  3336                           ; 0 bytes @ 0x4
  3337                           
  3338  0074                     ??_getDelayOff_GO:	
  3339                           ; 0 bytes @ 0x4
  3340                           
  3341  0074                     ??_setDimmerLights_DimmingOn:	
  3342                           ; 0 bytes @ 0x4
  3343                           
  3344  0074                     ?_setDimmerLights_DimmingRun:	
  3345                           ; 0 bytes @ 0x4
  3346                           
  3347  0074                     CC2500_WriteREG@value:	
  3348                           ; 0 bytes @ 0x4
  3349                           
  3350  0074                     DlyOff_Initialization@sw:	
  3351                           ; 1 bytes @ 0x4
  3352                           
  3353  0074                     getDelayOff_GO@sw:	
  3354                           ; 1 bytes @ 0x4
  3355                           
  3356  0074                     setDimmerIntr_ControlStatus@lights:	
  3357                           ; 1 bytes @ 0x4
  3358                           
  3359  0074                     setDimmerIntr_DimmingValue@lights:	
  3360                           ; 1 bytes @ 0x4
  3361                           
  3362  0074                     getDimmerIntr_DimmingValue@lights:	
  3363                           ; 1 bytes @ 0x4
  3364                           
  3365  0074                     setDimmerIntr_Dimming_Sw@lights:	
  3366                           ; 1 bytes @ 0x4
  3367                           
  3368  0074                     setDimmerIntr_Dimming_RF@lights:	
  3369                           ; 1 bytes @ 0x4
  3370                           
  3371  0074                     _getAll_DimmerIntr_Dimming_Sw_RF$2205:	
  3372                           ; 1 bytes @ 0x4
  3373                           
  3374  0074                     setDimmerLights_SwOff@sw:	
  3375                           ; 1 bytes @ 0x4
  3376                           
  3377  0074                     setDimmerLights_DimmingOn@sw:	
  3378                           ; 1 bytes @ 0x4
  3379                           
  3380  0074                     _getDimmerLights_Allow_Condition$2337:	
  3381                           ; 1 bytes @ 0x4
  3382                           
  3383  0074                     getDimmerLights_Status@lights:	
  3384                           ; 1 bytes @ 0x4
  3385                           
  3386  0074                     setDimmerLights_DimmingRun@command:	
  3387                           ; 1 bytes @ 0x4
  3388                           
  3389  0074                     setLED@command:	
  3390                           ; 1 bytes @ 0x4
  3391                           
  3392  0074                     Flash_Memory_Read@address:	
  3393                           ; 1 bytes @ 0x4
  3394                           
  3395  0074                     setMemory_Data@address:	
  3396                           ; 1 bytes @ 0x4
  3397                           
  3398  0074                     getMain_Lights_Count@status2:	
  3399                           ; 1 bytes @ 0x4
  3400                           
  3401  0074                     setCmd_Status@number:	
  3402                           ; 1 bytes @ 0x4
  3403                           
  3404  0074                     _getRF_KeyStatus$5378:	
  3405                           ; 1 bytes @ 0x4
  3406                           
  3407  0074                     _getSw_KeyStatus$6401:	
  3408                           ; 1 bytes @ 0x4
  3409                           
  3410  0074                     ___bmul@product:	
  3411                           ; 1 bytes @ 0x4
  3412                           
  3413  0074                     DelayTime_1us@i:	
  3414                           ; 1 bytes @ 0x4
  3415                           
  3416  0074                     ___wmul@multiplicand:	
  3417                           ; 2 bytes @ 0x4
  3418                           
  3419  0074                     ___awdiv@dividend:	
  3420                           ; 2 bytes @ 0x4
  3421                           
  3422  0074                     ___lwdiv@dividend:	
  3423                           ; 2 bytes @ 0x4
  3424                           
  3425                           
  3426                           ; 2 bytes @ 0x4
  3427  0074                     	ds	1
  3428  0075                     ??_CC2500_WriteREG:	
  3429  0075                     ??_setLED:	
  3430                           ; 0 bytes @ 0x5
  3431                           
  3432  0075                     ??_DelayOff_Initialization:	
  3433                           ; 0 bytes @ 0x5
  3434                           
  3435  0075                     ??_setDimmerLights_DimmingRun:	
  3436                           ; 0 bytes @ 0x5
  3437                           
  3438  0075                     ??_getAD:	
  3439                           ; 0 bytes @ 0x5
  3440                           
  3441  0075                     CC2500_WriteCommand@command:	
  3442                           ; 0 bytes @ 0x5
  3443                           
  3444  0075                     CC2500_ReadStatus@status_addr:	
  3445                           ; 1 bytes @ 0x5
  3446                           
  3447  0075                     getDelayOff_GO@go:	
  3448                           ; 1 bytes @ 0x5
  3449                           
  3450  0075                     getAll_DimmerIntr_Dimming_Sw_RF@status:	
  3451                           ; 1 bytes @ 0x5
  3452                           
  3453  0075                     _getDimmerLights_Allow_Condition$2338:	
  3454                           ; 1 bytes @ 0x5
  3455                           
  3456  0075                     getDimmerLights_Status@status:	
  3457                           ; 1 bytes @ 0x5
  3458                           
  3459  0075                     setLED@led:	
  3460                           ; 1 bytes @ 0x5
  3461                           
  3462  0075                     getAD@adcon0:	
  3463                           ; 1 bytes @ 0x5
  3464                           
  3465  0075                     Flash_Memory_Read@ret:	
  3466                           ; 1 bytes @ 0x5
  3467                           
  3468  0075                     getSw_KeyStatus@status:	
  3469                           ; 1 bytes @ 0x5
  3470                           
  3471  0075                     ___bmul@multiplier:	
  3472                           ; 1 bytes @ 0x5
  3473                           
  3474  0075                     ___ftpack@exp:	
  3475                           ; 1 bytes @ 0x5
  3476                           
  3477  0075                     _getMain_All_Error_Status$3649:	
  3478                           ; 1 bytes @ 0x5
  3479                           
  3480                           
  3481                           ; 2 bytes @ 0x5
  3482  0075                     	ds	1
  3483  0076                     ??_CC2500_ClearTXFIFO:	
  3484  0076                     ??_CC2500_ClearRXFIFO:	
  3485                           ; 0 bytes @ 0x6
  3486                           
  3487  0076                     ??_CC2500_SIDLEMode:	
  3488                           ; 0 bytes @ 0x6
  3489                           
  3490  0076                     ??_setLED_Initialization:	
  3491                           ; 0 bytes @ 0x6
  3492                           
  3493  0076                     ??_Flash_Memory_Modify:	
  3494                           ; 0 bytes @ 0x6
  3495                           
  3496  0076                     ??_getLoad_AD:	
  3497                           ; 0 bytes @ 0x6
  3498                           
  3499  0076                     ??_getTemp_AD:	
  3500                           ; 0 bytes @ 0x6
  3501                           
  3502  0076                     ??_RF_RxDisable:	
  3503                           ; 0 bytes @ 0x6
  3504                           
  3505  0076                     ??_setSw_Initialization:	
  3506                           ; 0 bytes @ 0x6
  3507                           
  3508  0076                     ??_CC2500_TxData:	
  3509                           ; 0 bytes @ 0x6
  3510                           
  3511  0076                     ??_CC2500_RxData:	
  3512                           ; 0 bytes @ 0x6
  3513                           
  3514  0076                     ??___wmul:	
  3515                           ; 0 bytes @ 0x6
  3516                           
  3517  0076                     ??___awdiv:	
  3518                           ; 0 bytes @ 0x6
  3519                           
  3520  0076                     ??___lwdiv:	
  3521                           ; 0 bytes @ 0x6
  3522                           
  3523  0076                     CC2500_WriteREG@w_addr:	
  3524                           ; 0 bytes @ 0x6
  3525                           
  3526  0076                     _getDimmerLights_Allow_Condition$2339:	
  3527                           ; 1 bytes @ 0x6
  3528                           
  3529  0076                     setDimmerLights_DimmingRun@lights:	
  3530                           ; 1 bytes @ 0x6
  3531                           
  3532  0076                     setLED_Initialization@led:	
  3533                           ; 1 bytes @ 0x6
  3534                           
  3535  0076                     setLED_Main@led:	
  3536                           ; 1 bytes @ 0x6
  3537                           
  3538  0076                     setSw_Initialization@sw:	
  3539                           ; 1 bytes @ 0x6
  3540                           
  3541  0076                     getSw_KeyStatus@sw:	
  3542                           ; 1 bytes @ 0x6
  3543                           
  3544  0076                     ___ftpack@sign:	
  3545                           ; 1 bytes @ 0x6
  3546                           
  3547  0076                     getBuz_GO@i:	
  3548                           ; 1 bytes @ 0x6
  3549                           
  3550  0076                     DelayTime_1us@j:	
  3551                           ; 2 bytes @ 0x6
  3552                           
  3553  0076                     ___wmul@product:	
  3554                           ; 2 bytes @ 0x6
  3555                           
  3556                           
  3557                           ; 2 bytes @ 0x6
  3558  0076                     	ds	1
  3559  0077                     ??_CC2500_InitSetREG:	
  3560  0077                     ??_CC2500_InitPATable:	
  3561                           ; 0 bytes @ 0x7
  3562                           
  3563  0077                     ??_Switch_Initialization:	
  3564                           ; 0 bytes @ 0x7
  3565                           
  3566  0077                     ??___ftpack:	
  3567                           ; 0 bytes @ 0x7
  3568                           
  3569  0077                     ??_setBuz:	
  3570                           ; 0 bytes @ 0x7
  3571                           
  3572  0077                     ??_LED_Initialization:	
  3573                           ; 0 bytes @ 0x7
  3574                           
  3575  0077                     ??_LED_Main:	
  3576                           ; 0 bytes @ 0x7
  3577                           
  3578  0077                     CC2500_TxData@loop_e:	
  3579                           ; 0 bytes @ 0x7
  3580                           
  3581  0077                     CC2500_RxData@loop_f:	
  3582                           ; 1 bytes @ 0x7
  3583                           
  3584  0077                     getDimmerLights_Allow_Condition@lights:	
  3585                           ; 1 bytes @ 0x7
  3586                           
  3587  0077                     Flash_Memory_Modify@i:	
  3588                           ; 1 bytes @ 0x7
  3589                           
  3590  0077                     getMain_All_Error_Status@command:	
  3591                           ; 1 bytes @ 0x7
  3592                           
  3593  0077                     getTemp_AD@channel:	
  3594                           ; 1 bytes @ 0x7
  3595                           
  3596  0077                     ___lwdiv@quotient:	
  3597                           ; 1 bytes @ 0x7
  3598                           
  3599                           
  3600                           ; 2 bytes @ 0x7
  3601  0077                     	ds	1
  3602  0078                     ??_CC2500_PowerRST:	
  3603  0078                     ??_CC2500_FrequencyCabr:	
  3604                           ; 0 bytes @ 0x8
  3605                           
  3606  0078                     ??_Flash_Memory_Main:	
  3607                           ; 0 bytes @ 0x8
  3608                           
  3609  0078                     setBuz@count:	
  3610                           ; 0 bytes @ 0x8
  3611                           
  3612  0078                     CC2500_InitPATable@temp:	
  3613                           ; 1 bytes @ 0x8
  3614                           
  3615  0078                     getDimmerLights_Allow_Condition@allow:	
  3616                           ; 1 bytes @ 0x8
  3617                           
  3618  0078                     getMain_All_Error_Status@status:	
  3619                           ; 1 bytes @ 0x8
  3620                           
  3621                           
  3622                           ; 1 bytes @ 0x8
  3623  0078                     	ds	1
  3624  0079                     ??_setDimmerLights_SwOn:	
  3625  0079                     ??_my_MainTimer:	
  3626                           ; 0 bytes @ 0x9
  3627                           
  3628  0079                     ??_Exception_Main:	
  3629                           ; 0 bytes @ 0x9
  3630                           
  3631  0079                     CC2500_InitPATable@loop_d:	
  3632                           ; 0 bytes @ 0x9
  3633                           
  3634  0079                     ___lwdiv@counter:	
  3635                           ; 1 bytes @ 0x9
  3636                           
  3637                           
  3638                           ; 1 bytes @ 0x9
  3639  0079                     	ds	1
  3640  007A                     ??_setDimmerLights_Main:	
  3641  007A                     ??_Temp_Main:	
  3642                           ; 0 bytes @ 0xA
  3643                           
  3644  007A                     ??_Switch_Main:	
  3645                           ; 0 bytes @ 0xA
  3646                           
  3647  007A                     ??_RF_Main:	
  3648                           ; 0 bytes @ 0xA
  3649                           
  3650  007A                     ??_setControl_Lights_Table:	
  3651                           ; 0 bytes @ 0xA
  3652                           
  3653  007A                     ??_CC2500_PowerOnInitial:	
  3654                           ; 0 bytes @ 0xA
  3655                           
  3656  007A                     ??_DelayOff_Main:	
  3657                           ; 0 bytes @ 0xA
  3658                           
  3659  007A                     ??_DimmerLights_Main:	
  3660                           ; 0 bytes @ 0xA
  3661                           
  3662  007A                     ??_main:	
  3663                           ; 0 bytes @ 0xA
  3664                           
  3665  007A                     ??___ftneg:	
  3666                           ; 0 bytes @ 0xA
  3667                           
  3668                           
  3669                           	psect	cstackBANK0
  3670  0020                     __pcstackBANK0:	
  3671                           ; 0 bytes @ 0xA
  3672                           
  3673  0020                     ??_Load_Main:	
  3674  0020                     ?___awtoft:	
  3675                           ; 0 bytes @ 0x0
  3676                           
  3677  0020                     CC2500_InitSetREG@temp1:	
  3678                           ; 3 bytes @ 0x0
  3679                           
  3680  0020                     getLoad_AD@channel:	
  3681                           ; 1 bytes @ 0x0
  3682                           
  3683  0020                     ___awdiv@counter:	
  3684                           ; 1 bytes @ 0x0
  3685                           
  3686  0020                     ___awtoft@c:	
  3687                           ; 1 bytes @ 0x0
  3688                           
  3689                           
  3690                           ; 2 bytes @ 0x0
  3691  0020                     	ds	1
  3692  0021                     CC2500_InitSetREG@temp2:	
  3693  0021                     getLoad_AD@k:	
  3694                           ; 1 bytes @ 0x1
  3695                           
  3696  0021                     ___awdiv@sign:	
  3697                           ; 1 bytes @ 0x1
  3698                           
  3699                           
  3700                           ; 1 bytes @ 0x1
  3701  0021                     	ds	1
  3702  0022                     CC2500_InitSetREG@loop_c:	
  3703  0022                     getLoad_AD@j:	
  3704                           ; 1 bytes @ 0x2
  3705                           
  3706  0022                     Load_Main@error:	
  3707                           ; 1 bytes @ 0x2
  3708                           
  3709  0022                     ___awdiv@quotient:	
  3710                           ; 1 bytes @ 0x2
  3711                           
  3712                           
  3713                           ; 2 bytes @ 0x2
  3714  0022                     	ds	1
  3715  0023                     ??___awtoft:	
  3716  0023                     getLoad_AD@i:	
  3717                           ; 0 bytes @ 0x3
  3718                           
  3719  0023                     Load_Main@Load_Status:	
  3720                           ; 1 bytes @ 0x3
  3721                           
  3722                           
  3723                           ; 1 bytes @ 0x3
  3724  0023                     	ds	1
  3725  0024                     ?_setBuz:	
  3726  0024                     setBuz@time:	
  3727                           ; 0 bytes @ 0x4
  3728                           
  3729  0024                     Load_Main@i:	
  3730                           ; 2 bytes @ 0x4
  3731                           
  3732                           
  3733                           ; 2 bytes @ 0x4
  3734  0024                     	ds	1
  3735  0025                     ___awtoft@sign:	
  3736                           
  3737                           ; 1 bytes @ 0x5
  3738  0025                     	ds	1
  3739  0026                     ?___ftdiv:	
  3740  0026                     ?___ftmul:	
  3741                           ; 3 bytes @ 0x6
  3742                           
  3743  0026                     _setDimmerLights_SwOn$2280:	
  3744                           ; 3 bytes @ 0x6
  3745                           
  3746  0026                     Exception_Main@count:	
  3747                           ; 1 bytes @ 0x6
  3748                           
  3749  0026                     ___ftdiv@f2:	
  3750                           ; 1 bytes @ 0x6
  3751                           
  3752  0026                     ___ftmul@f1:	
  3753                           ; 3 bytes @ 0x6
  3754                           
  3755                           
  3756                           ; 3 bytes @ 0x6
  3757  0026                     	ds	1
  3758  0027                     _setDimmerLights_SwOn$2289:	
  3759  0027                     Exception_Main@error:	
  3760                           ; 1 bytes @ 0x7
  3761                           
  3762                           
  3763                           ; 1 bytes @ 0x7
  3764  0027                     	ds	1
  3765  0028                     setDimmerLights_SwOn@idle:	
  3766  0028                     Exception_Main@i:	
  3767                           ; 1 bytes @ 0x8
  3768                           
  3769                           
  3770                           ; 2 bytes @ 0x8
  3771  0028                     	ds	1
  3772  0029                     setDimmerLights_SwOn@sw:	
  3773  0029                     ___ftdiv@f1:	
  3774                           ; 1 bytes @ 0x9
  3775                           
  3776  0029                     ___ftmul@f2:	
  3777                           ; 3 bytes @ 0x9
  3778                           
  3779                           
  3780                           ; 3 bytes @ 0x9
  3781  0029                     	ds	1
  3782  002A                     ??_setSw_Main:	
  3783  002A                     Exception_Main@i_3660:	
  3784                           ; 0 bytes @ 0xA
  3785                           
  3786                           
  3787                           ; 2 bytes @ 0xA
  3788  002A                     	ds	2
  3789  002C                     ??___ftdiv:	
  3790  002C                     ??___ftmul:	
  3791                           ; 0 bytes @ 0xC
  3792                           
  3793  002C                     Exception_Main@lights:	
  3794                           ; 0 bytes @ 0xC
  3795                           
  3796  002C                     setSw_Main@sw:	
  3797                           ; 1 bytes @ 0xC
  3798                           
  3799                           
  3800                           ; 1 bytes @ 0xC
  3801  002C                     	ds	4
  3802  0030                     ___ftdiv@cntr:	
  3803  0030                     ___ftmul@exp:	
  3804                           ; 1 bytes @ 0x10
  3805                           
  3806                           
  3807                           ; 1 bytes @ 0x10
  3808  0030                     	ds	1
  3809  0031                     ___ftdiv@f3:	
  3810  0031                     ___ftmul@f3_as_product:	
  3811                           ; 3 bytes @ 0x11
  3812                           
  3813                           
  3814                           ; 3 bytes @ 0x11
  3815  0031                     	ds	3
  3816  0034                     ___ftdiv@exp:	
  3817  0034                     ___ftmul@cntr:	
  3818                           ; 1 bytes @ 0x14
  3819                           
  3820                           
  3821                           ; 1 bytes @ 0x14
  3822  0034                     	ds	1
  3823  0035                     ___ftdiv@sign:	
  3824  0035                     ___ftmul@sign:	
  3825                           ; 1 bytes @ 0x15
  3826                           
  3827                           
  3828                           ; 1 bytes @ 0x15
  3829  0035                     	ds	1
  3830  0036                     ?___ftneg:	
  3831  0036                     ___ftneg@f1:	
  3832                           ; 3 bytes @ 0x16
  3833                           
  3834                           
  3835                           ; 3 bytes @ 0x16
  3836  0036                     	ds	3
  3837  0039                     ?___ftadd:	
  3838  0039                     ___ftadd@f1:	
  3839                           ; 3 bytes @ 0x19
  3840                           
  3841                           
  3842                           ; 3 bytes @ 0x19
  3843  0039                     	ds	3
  3844  003C                     ___ftadd@f2:	
  3845                           
  3846                           ; 3 bytes @ 0x1C
  3847  003C                     	ds	3
  3848  003F                     ??___ftadd:	
  3849                           
  3850                           ; 0 bytes @ 0x1F
  3851  003F                     	ds	4
  3852  0043                     ___ftadd@sign:	
  3853                           
  3854                           ; 1 bytes @ 0x23
  3855  0043                     	ds	1
  3856  0044                     ___ftadd@exp2:	
  3857                           
  3858                           ; 1 bytes @ 0x24
  3859  0044                     	ds	1
  3860  0045                     ___ftadd@exp1:	
  3861                           
  3862                           ; 1 bytes @ 0x25
  3863  0045                     	ds	1
  3864  0046                     ?___fttol:	
  3865  0046                     ___fttol@f1:	
  3866                           ; 4 bytes @ 0x26
  3867                           
  3868                           
  3869                           ; 3 bytes @ 0x26
  3870  0046                     	ds	4
  3871  004A                     ??___fttol:	
  3872                           
  3873                           ; 0 bytes @ 0x2A
  3874  004A                     	ds	4
  3875  004E                     ___fttol@sign1:	
  3876                           
  3877                           ; 1 bytes @ 0x2E
  3878  004E                     	ds	1
  3879  004F                     ___fttol@lval:	
  3880                           
  3881                           ; 4 bytes @ 0x2F
  3882  004F                     	ds	4
  3883  0053                     ___fttol@exp1:	
  3884                           
  3885                           ; 1 bytes @ 0x33
  3886  0053                     	ds	1
  3887  0054                     ??_getDimmerLights_PercentToValue:	
  3888  0054                     ??_getDimmerLights_ValueToPercent:	
  3889                           ; 0 bytes @ 0x34
  3890                           
  3891                           
  3892                           ; 0 bytes @ 0x34
  3893  0054                     	ds	2
  3894  0056                     getDimmerLights_PercentToValue@value:	
  3895  0056                     getDimmerLights_ValueToPercent@value:	
  3896                           ; 1 bytes @ 0x36
  3897                           
  3898                           
  3899                           ; 1 bytes @ 0x36
  3900  0056                     	ds	1
  3901  0057                     getDimmerLights_PercentToValue@i:	
  3902  0057                     getDimmerLights_ValueToPercent@i:	
  3903                           ; 3 bytes @ 0x37
  3904                           
  3905                           
  3906                           ; 3 bytes @ 0x37
  3907  0057                     	ds	3
  3908  005A                     ?_setProductData:	
  3909  005A                     ?_setDimmerIntr_MaxmumValue:	
  3910                           ; 0 bytes @ 0x3A
  3911                           
  3912  005A                     ??_Flash_Memory_Initialization:	
  3913                           ; 0 bytes @ 0x3A
  3914                           
  3915  005A                     setDimmerIntr_MaxmumValue@value:	
  3916                           ; 0 bytes @ 0x3A
  3917                           
  3918  005A                     setProductData@value:	
  3919                           ; 1 bytes @ 0x3A
  3920                           
  3921                           
  3922                           ; 1 bytes @ 0x3A
  3923  005A                     	ds	1
  3924  005B                     ??_setProductData:	
  3925  005B                     ??_setDimmerIntr_MaxmumValue:	
  3926                           ; 0 bytes @ 0x3B
  3927                           
  3928  005B                     Flash_Memory_Initialization@i:	
  3929                           ; 0 bytes @ 0x3B
  3930                           
  3931                           
  3932                           ; 1 bytes @ 0x3B
  3933  005B                     	ds	1
  3934  005C                     setDimmerIntr_MaxmumValue@lights:	
  3935  005C                     setProductData@address:	
  3936                           ; 1 bytes @ 0x3C
  3937                           
  3938                           
  3939                           ; 1 bytes @ 0x3C
  3940  005C                     	ds	1
  3941  005D                     ??_DlyOff_Main:	
  3942  005D                     ?_setRF_DimmerLights:	
  3943                           ; 0 bytes @ 0x3D
  3944                           
  3945  005D                     ??_setTemp_Main:	
  3946                           ; 0 bytes @ 0x3D
  3947                           
  3948  005D                     ??_setLog_Code:	
  3949                           ; 0 bytes @ 0x3D
  3950                           
  3951  005D                     ??_setRFSW_AdjControl:	
  3952                           ; 0 bytes @ 0x3D
  3953                           
  3954  005D                     ?_setDelayOff_GO:	
  3955                           ; 0 bytes @ 0x3D
  3956                           
  3957  005D                     setDelayOff_GO@command:	
  3958                           ; 0 bytes @ 0x3D
  3959                           
  3960  005D                     setRF_DimmerLights@on:	
  3961                           ; 1 bytes @ 0x3D
  3962                           
  3963                           
  3964                           ; 1 bytes @ 0x3D
  3965  005D                     	ds	1
  3966  005E                     ??_setRF_DimmerLights:	
  3967  005E                     setDelayOff_GO@value:	
  3968                           ; 0 bytes @ 0x3E
  3969                           
  3970                           
  3971                           ; 1 bytes @ 0x3E
  3972  005E                     	ds	1
  3973  005F                     ??_setDelayOff_GO:	
  3974  005F                     DlyOff_Main@sw:	
  3975                           ; 0 bytes @ 0x3F
  3976                           
  3977  005F                     setTemp_Main@error:	
  3978                           ; 1 bytes @ 0x3F
  3979                           
  3980  005F                     setRFSW_AdjControl@status:	
  3981                           ; 1 bytes @ 0x3F
  3982                           
  3983                           
  3984                           ; 1 bytes @ 0x3F
  3985  005F                     	ds	1
  3986  0060                     setRFSW_AdjControl@sw:	
  3987  0060                     setRF_DimmerLights@status:	
  3988                           ; 1 bytes @ 0x40
  3989                           
  3990                           
  3991                           ; 1 bytes @ 0x40
  3992  0060                     	ds	1
  3993  0061                     setDelayOff_GO@i:	
  3994  0061                     setRF_DimmerLights@lights:	
  3995                           ; 1 bytes @ 0x41
  3996                           
  3997                           
  3998                           ; 1 bytes @ 0x41
  3999  0061                     	ds	1
  4000  0062                     ?_setDimmerLights_Dimming:	
  4001  0062                     setDelayOff_GO@j:	
  4002                           ; 0 bytes @ 0x42
  4003                           
  4004  0062                     setDimmerLights_Dimming@status:	
  4005                           ; 1 bytes @ 0x42
  4006                           
  4007                           
  4008                           ; 1 bytes @ 0x42
  4009  0062                     	ds	1
  4010  0063                     ??_setDimmerLights_Dimming:	
  4011  0063                     setDelayOff_GO@k:	
  4012                           ; 0 bytes @ 0x43
  4013                           
  4014                           
  4015                           ; 1 bytes @ 0x43
  4016  0063                     	ds	1
  4017  0064                     setDelayOff_GO@sw:	
  4018  0064                     setDimmerLights_Dimming@lights:	
  4019                           ; 1 bytes @ 0x44
  4020                           
  4021                           
  4022                           ; 1 bytes @ 0x44
  4023  0064                     	ds	1
  4024  0065                     ?_setDimmerLights_OnOff:	
  4025  0065                     ??_setRFSW_Control:	
  4026                           ; 0 bytes @ 0x45
  4027                           
  4028  0065                     setDimmerLights_OnOff@command:	
  4029                           ; 0 bytes @ 0x45
  4030                           
  4031                           
  4032                           ; 1 bytes @ 0x45
  4033  0065                     	ds	1
  4034  0066                     ??_setDimmerLights_OnOff:	
  4035  0066                     setRFSW_Control@status:	
  4036                           ; 0 bytes @ 0x46
  4037                           
  4038                           
  4039                           ; 1 bytes @ 0x46
  4040  0066                     	ds	1
  4041  0067                     setRFSW_Control@sw:	
  4042                           
  4043                           ; 1 bytes @ 0x47
  4044  0067                     	ds	1
  4045  0068                     ??_getRxData:	
  4046  0068                     setDimmerLights_OnOff@lights:	
  4047                           ; 0 bytes @ 0x48
  4048                           
  4049                           
  4050                           ; 1 bytes @ 0x48
  4051  0068                     	ds	1
  4052  0069                     setDimmerLights_Main@lights:	
  4053  0069                     getRxData@error:	
  4054                           ; 1 bytes @ 0x49
  4055                           
  4056                           
  4057                           ; 1 bytes @ 0x49
  4058  0069                     	ds	1
  4059  006A                     ??_setRF_Main:	
  4060                           
  4061                           ; 0 bytes @ 0x4A
  4062  006A                     	ds	1
  4063  006B                     setRF_Main@error:	
  4064                           
  4065                           ; 1 bytes @ 0x4B
  4066  006B                     	ds	1
  4067                           
  4068                           	psect	maintext
  4069  1687                     __pmaintext:	
  4070 ;;
  4071 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  4072 ;;
  4073 ;; *************** function _main *****************
  4074 ;; Defined at:
  4075 ;;		line 7 in file "../src/Main_B1.c"
  4076 ;; Parameters:    Size  Location     Type
  4077 ;;  argc            2    0[BANK3 ] int 
  4078 ;;  argv            2    2[BANK3 ] PTR PTR unsigned char 
  4079 ;; Auto vars:     Size  Location     Type
  4080 ;;		None
  4081 ;; Return value:  Size  Location     Type
  4082 ;;                  2    0[BANK3 ] int 
  4083 ;; Registers used:
  4084 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4085 ;; Tracked objects:
  4086 ;;		On entry : 17F/0
  4087 ;;		On exit  : 0/0
  4088 ;;		Unchanged: 0/0
  4089 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4090 ;;      Params:         0       0       0       0       4       0       0       0       0       0       0       0       
      +0       0
  4091 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4092 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4093 ;;      Totals:         0       0       0       0       4       0       0       0       0       0       0       0       
      +0       0
  4094 ;;Total ram usage:        4 bytes
  4095 ;; Hardware stack levels required when called:   11
  4096 ;; This function calls:
  4097 ;;		_Buzzer_Initialization
  4098 ;;		_Buzzer_Main
  4099 ;;		_CC2500_PowerOnInitial
  4100 ;;		_DelayOff_Initialization
  4101 ;;		_DelayOff_Main
  4102 ;;		_DimmerLights_Initialization
  4103 ;;		_DimmerLights_Main
  4104 ;;		_Exception_Main
  4105 ;;		_Flash_Memory_Initialization
  4106 ;;		_Flash_Memory_Main
  4107 ;;		_LED_Initialization
  4108 ;;		_LED_Main
  4109 ;;		_Load_Initialization
  4110 ;;		_Load_Main
  4111 ;;		_Mcu_Initialization
  4112 ;;		_RF_Initialization
  4113 ;;		_RF_Main
  4114 ;;		_Switch_Initialization
  4115 ;;		_Switch_Main
  4116 ;;		_Temp_Initialization
  4117 ;;		_Temp_Main
  4118 ;;		_WDT_Main
  4119 ;;		_getLoad_AD
  4120 ;;		_getTemp_AD
  4121 ;;		_myMain_Initialization
  4122 ;;		_my_MainTimer
  4123 ;; This function is called by:
  4124 ;;		Startup code after reset
  4125 ;; This function uses a non-reentrant model
  4126 ;;
  4127                           
  4128                           
  4129                           ;psect for function _main
  4130  1687                     _main:	
  4131                           
  4132                           ;Main_B1.c: 8: myMain_Initialization();
  4133                           
  4134                           ;incstack = 0
  4135                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4136  1687  319C  2451  3196   	fcall	_myMain_Initialization
  4137                           
  4138                           ;Main_B1.c: 9: Mcu_Initialization();
  4139  168A  319D  2503  3196   	fcall	_Mcu_Initialization
  4140                           
  4141                           ;Main_B1.c: 10: Flash_Memory_Initialization();
  4142  168D  3184  2453  3196   	fcall	_Flash_Memory_Initialization
  4143                           
  4144                           ;Main_B1.c: 11: LED_Initialization();
  4145  1690  319B  23AC  3196   	fcall	_LED_Initialization
  4146                           
  4147                           ;Main_B1.c: 12: Buzzer_Initialization();
  4148  1693  319A  22BE  3196   	fcall	_Buzzer_Initialization
  4149                           
  4150                           ;Main_B1.c: 14: ;;
  4151                           ;Main_B1.c: 15: Temp_Initialization();
  4152  1696  319A  22CA  3196   	fcall	_Temp_Initialization
  4153                           
  4154                           ;Main_B1.c: 16: Load_Initialization();
  4155  1699  319A  22C1  3196   	fcall	_Load_Initialization
  4156                           
  4157                           ;Main_B1.c: 17: ;;
  4158                           ;Main_B1.c: 18: DelayOff_Initialization();
  4159  169C  319B  231D  3196   	fcall	_DelayOff_Initialization
  4160                           
  4161                           ;Main_B1.c: 20: DimmerLights_Initialization();
  4162  169F  319B  235C  3196   	fcall	_DimmerLights_Initialization
  4163                           
  4164                           ;Main_B1.c: 21: ;;
  4165                           ;Main_B1.c: 22: ;;
  4166                           ;Main_B1.c: 23: ;;
  4167                           ;Main_B1.c: 24: Switch_Initialization();
  4168  16A2  319B  23D0  3196   	fcall	_Switch_Initialization
  4169                           
  4170                           ;Main_B1.c: 25: RF_Initialization();
  4171  16A5  319A  22C4  3196   	fcall	_RF_Initialization
  4172                           
  4173                           ;Main_B1.c: 26: CC2500_PowerOnInitial();
  4174  16A8  319D  2591  3196   	fcall	_CC2500_PowerOnInitial
  4175  16AB                     l10399:	
  4176                           ;Main_B1.c: 27: ;;
  4177                           ;Main_B1.c: 28: ;;
  4178                           ;Main_B1.c: 30: while (1) {
  4179                           
  4180                           
  4181                           ;Main_B1.c: 32: if (myMain.PowerON == 1) {
  4182  16AB  0022               	movlb	2	; select bank2
  4183  16AC  1C20               	btfss	_myMain^(0+256),0
  4184  16AD  2EB6               	goto	l10403
  4185                           
  4186                           ;Main_B1.c: 38: getLoad_AD(0x05);
  4187  16AE  3005               	movlw	5
  4188  16AF  318B  2320  3196   	fcall	_getLoad_AD
  4189                           
  4190                           ;Main_B1.c: 42: getTemp_AD(0x09);
  4191  16B2  3009               	movlw	9
  4192  16B3  3193  230D  3196   	fcall	_getTemp_AD
  4193  16B6                     l10403:	
  4194                           
  4195                           ;Main_B1.c: 57: }
  4196                           ;Main_B1.c: 93: if (Timer1.Timeout == 1) {
  4197  16B6  0021               	movlb	1	; select bank1
  4198  16B7  1C3D               	btfss	_Timer1^(0+128),0
  4199  16B8  2EAB               	goto	l10399
  4200                           
  4201                           ;Main_B1.c: 94: Timer1.Timeout = 0;
  4202  16B9  103D               	bcf	_Timer1^(0+128),0
  4203                           
  4204                           ;Main_B1.c: 96: my_MainTimer();
  4205  16BA  3193  2346  3196   	fcall	_my_MainTimer
  4206                           
  4207                           ;Main_B1.c: 97: WDT_Main();
  4208  16BD  319C  24C0  3196   	fcall	_WDT_Main
  4209                           
  4210                           ;Main_B1.c: 98: ;;
  4211                           ;Main_B1.c: 99: ;;
  4212                           ;Main_B1.c: 100: if (myMain.PowerON == 1) {
  4213  16C0  0022               	movlb	2	; select bank2
  4214  16C1  1C20               	btfss	_myMain^(0+256),0
  4215  16C2  2EAB               	goto	l10399
  4216                           
  4217                           ;Main_B1.c: 101: Flash_Memory_Main();
  4218  16C3  3192  2202  3196   	fcall	_Flash_Memory_Main
  4219                           
  4220                           ;Main_B1.c: 103: LED_Main();
  4221  16C6  319B  23B8  3196   	fcall	_LED_Main
  4222                           
  4223                           ;Main_B1.c: 104: Buzzer_Main();
  4224  16C9  3188  2001  3196   	fcall	_Buzzer_Main
  4225                           
  4226                           ;Main_B1.c: 106: ;;
  4227                           ;Main_B1.c: 107: Temp_Main();
  4228  16CC  319A  22CD  3196   	fcall	_Temp_Main
  4229                           
  4230                           ;Main_B1.c: 108: Load_Main();
  4231  16CF  3180  2054  3196   	fcall	_Load_Main
  4232                           
  4233                           ;Main_B1.c: 109: ;;
  4234                           ;Main_B1.c: 111: ;;
  4235                           ;Main_B1.c: 112: DimmerLights_Main();
  4236  16D2  319F  273B  3196   	fcall	_DimmerLights_Main
  4237                           
  4238                           ;Main_B1.c: 113: Switch_Main();
  4239  16D5  319B  237D  3196   	fcall	_Switch_Main
  4240                           
  4241                           ;Main_B1.c: 114: ;;
  4242                           ;Main_B1.c: 115: ;;
  4243                           ;Main_B1.c: 117: RF_Main();
  4244  16D8  319A  22C7  3196   	fcall	_RF_Main
  4245                           
  4246                           ;Main_B1.c: 118: DelayOff_Main();
  4247  16DB  319B  2325  3196   	fcall	_DelayOff_Main
  4248                           
  4249                           ;Main_B1.c: 119: ;;
  4250                           ;Main_B1.c: 120: ;;
  4251                           ;Main_B1.c: 121: Exception_Main();
  4252  16DE  3185  252F  3196   	fcall	_Exception_Main
  4253  16E1  2EAB               	goto	l10399
  4254  16E2                     __end_of_main:	
  4255                           ;Main_B1.c: 128: }
  4256                           ;Main_B1.c: 129: }
  4257                           ;Main_B1.c: 163: }
  4258                           ;Main_B1.c: 164: return (0);
  4259                           ;	Return value of _main is never used
  4260                           
  4261                           
  4262                           	psect	text1
  4263  1346                     __ptext1:	
  4264 ;; *************** function _my_MainTimer *****************
  4265 ;; Defined at:
  4266 ;;		line 185 in file "../src/Main_B1.c"
  4267 ;; Parameters:    Size  Location     Type
  4268 ;;		None
  4269 ;; Auto vars:     Size  Location     Type
  4270 ;;		None
  4271 ;; Return value:  Size  Location     Type
  4272 ;;		None               void
  4273 ;; Registers used:
  4274 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4275 ;; Tracked objects:
  4276 ;;		On entry : 0/0
  4277 ;;		On exit  : 0/0
  4278 ;;		Unchanged: 0/0
  4279 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4280 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4281 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4282 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4283 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4284 ;;Total ram usage:        1 bytes
  4285 ;; Hardware stack levels used:    1
  4286 ;; Hardware stack levels required when called:    5
  4287 ;; This function calls:
  4288 ;;		_setBuz
  4289 ;; This function is called by:
  4290 ;;		_main
  4291 ;; This function uses a non-reentrant model
  4292 ;;
  4293                           
  4294                           
  4295                           ;psect for function _my_MainTimer
  4296  1346                     _my_MainTimer:	
  4297                           
  4298                           ;Main_B1.c: 188: if (myMain.PowerON == 0) {
  4299                           
  4300                           ;incstack = 0
  4301                           ; Regs used in _my_MainTimer: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4302  1346  0022               	movlb	2	; select bank2
  4303  1347  1820               	btfsc	_myMain^(0+256),0
  4304  1348  2B5E               	goto	l10125
  4305                           
  4306                           ;Main_B1.c: 189: myMain.PowerCount++;
  4307  1349  3001               	movlw	1
  4308  134A  00F9               	movwf	??_my_MainTimer
  4309  134B  0879               	movf	??_my_MainTimer,w
  4310  134C  07A1               	addwf	(_myMain^(0+256)+1),f
  4311                           
  4312                           ;Main_B1.c: 190: if (myMain.PowerCount == (1500 / 20)) {
  4313  134D  0821               	movf	(_myMain^(0+256)+1),w
  4314  134E  3A4B               	xorlw	75
  4315  134F  1D03               	skipz
  4316  1350  0008               	return
  4317                           
  4318                           ;Main_B1.c: 191: myMain.PowerCount = 0;
  4319  1351  01A1               	clrf	(_myMain^(0+256)+1)
  4320                           
  4321                           ;Main_B1.c: 192: myMain.PowerON = 1;
  4322  1352  1420               	bsf	_myMain^(0+256),0
  4323                           
  4324                           ;Main_B1.c: 197: setBuz(3, 50);
  4325  1353  3032               	movlw	50
  4326  1354  0020               	movlb	0	; select bank0
  4327  1355  00A4               	movwf	setBuz@time
  4328  1356  3000               	movlw	0
  4329  1357  00A5               	movwf	setBuz@time+1
  4330  1358  3003               	movlw	3
  4331  1359  3195  2586         	fcall	_setBuz
  4332                           
  4333                           ;Main_B1.c: 198: myMain.SelfTest = 1;
  4334  135B  0022               	movlb	2	; select bank2
  4335  135C  1620               	bsf	_myMain^(0+256),4
  4336                           
  4337                           ;Main_B1.c: 207: }
  4338                           ;Main_B1.c: 208: } else {
  4339  135D  0008               	return
  4340  135E                     l10125:	
  4341                           
  4342                           ;Main_B1.c: 209: myMain.PowerCount++;
  4343  135E  3001               	movlw	1
  4344  135F  00F9               	movwf	??_my_MainTimer
  4345  1360  0879               	movf	??_my_MainTimer,w
  4346  1361  07A1               	addwf	(_myMain^(0+256)+1),f
  4347                           
  4348                           ;Main_B1.c: 210: if (myMain.PowerCount == (1000 / 20)) {
  4349  1362  0821               	movf	(_myMain^(0+256)+1),w
  4350  1363  3A32               	xorlw	50
  4351  1364  1903               	btfsc	3,2
  4352                           
  4353                           ;Main_B1.c: 211: myMain.PowerCount = 0;
  4354  1365  01A1               	clrf	(_myMain^(0+256)+1)
  4355                           
  4356                           ;Main_B1.c: 226: }
  4357                           ;Main_B1.c: 228: myMain.Count1++;
  4358  1366  3001               	movlw	1
  4359  1367  07A4               	addwf	(_myMain^(0+256)+4),f
  4360  1368  3000               	movlw	0
  4361  1369  3DA5               	addwfc	((_myMain+1)^(0+256)+4),f
  4362                           
  4363                           ;Main_B1.c: 229: if (myMain.Count1 == (1000 / 20)) {
  4364  136A  3004               	movlw	4
  4365  136B  3E20               	addlw	_myMain& (0+255)
  4366  136C  0086               	movwf	6
  4367  136D  3001               	movlw	1	; select bank2/3
  4368  136E  0087               	movwf	7
  4369  136F  3F40               	moviw [0]fsr1
  4370  1370  3A32               	xorlw	50
  4371  1371  1D03               	skipz
  4372  1372  2B75               	goto	u11845
  4373  1373  3F41               	moviw [1]fsr1
  4374  1374  3A00               	xorlw	0
  4375  1375                     u11845:	
  4376  1375  1D03               	skipz
  4377  1376  0008               	return
  4378                           
  4379                           ;Main_B1.c: 230: myMain.Count1 = 0;
  4380  1377  01A4               	clrf	(_myMain^(0+256)+4)
  4381  1378  01A5               	clrf	((_myMain+1)^(0+256)+4)
  4382                           
  4383                           ;Main_B1.c: 242: if (myMain.Flag) {
  4384  1379  1CA0               	btfss	_myMain^(0+256),1
  4385  137A  2B7D               	goto	l1664
  4386                           
  4387                           ;Main_B1.c: 243: myMain.Flag = 0;
  4388  137B  10A0               	bcf	_myMain^(0+256),1
  4389                           
  4390                           ;Main_B1.c: 252: } else {
  4391  137C  0008               	return
  4392  137D                     l1664:	
  4393                           
  4394                           ;Main_B1.c: 253: myMain.Flag = 1;
  4395  137D  14A0               	bsf	_myMain^(0+256),1
  4396  137E  0008               	return
  4397  137F                     __end_of_my_MainTimer:	
  4398                           
  4399                           	psect	text2
  4400  1C51                     __ptext2:	
  4401 ;; *************** function _myMain_Initialization *****************
  4402 ;; Defined at:
  4403 ;;		line 170 in file "../src/Main_B1.c"
  4404 ;; Parameters:    Size  Location     Type
  4405 ;;		None
  4406 ;; Auto vars:     Size  Location     Type
  4407 ;;		None
  4408 ;; Return value:  Size  Location     Type
  4409 ;;		None               void
  4410 ;; Registers used:
  4411 ;;		wreg, fsr1l, fsr1h
  4412 ;; Tracked objects:
  4413 ;;		On entry : 0/0
  4414 ;;		On exit  : 0/0
  4415 ;;		Unchanged: 0/0
  4416 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4417 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4418 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4419 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4420 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4421 ;;Total ram usage:        1 bytes
  4422 ;; Hardware stack levels used:    1
  4423 ;; Hardware stack levels required when called:    3
  4424 ;; This function calls:
  4425 ;;		Nothing
  4426 ;; This function is called by:
  4427 ;;		_main
  4428 ;; This function uses a non-reentrant model
  4429 ;;
  4430                           
  4431                           
  4432                           ;psect for function _myMain_Initialization
  4433  1C51                     _myMain_Initialization:	
  4434                           
  4435                           ;Main_B1.c: 173: product = &_product;
  4436                           
  4437                           ;incstack = 0
  4438                           ; Regs used in _myMain_Initialization: [wregfsr1]
  4439  1C51  3045               	movlw	__product& (0+255)
  4440  1C52  00F2               	movwf	??_myMain_Initialization
  4441  1C53  0872               	movf	??_myMain_Initialization,w
  4442  1C54  0020               	movlb	0	; select bank0
  4443  1C55  00EC               	movwf	_product
  4444                           
  4445                           ;Main_B1.c: 174: product->Data[20] = 210;
  4446  1C56  30D2               	movlw	210
  4447  1C57  00F2               	movwf	??_myMain_Initialization
  4448  1C58  086C               	movf	_product,w
  4449  1C59  3E14               	addlw	20
  4450  1C5A  0086               	movwf	6
  4451  1C5B  3002               	movlw	2	; select bank4/5
  4452  1C5C  0087               	movwf	7
  4453  1C5D  0872               	movf	??_myMain_Initialization,w
  4454  1C5E  0081               	movwf	1
  4455  1C5F  0008               	return
  4456  1C60                     __end_of_myMain_Initialization:	
  4457                           
  4458                           	psect	text3
  4459  130D                     __ptext3:	
  4460 ;; *************** function _getTemp_AD *****************
  4461 ;; Defined at:
  4462 ;;		line 15 in file "../src/OverTemperature_B1.c"
  4463 ;; Parameters:    Size  Location     Type
  4464 ;;  channel         1    wreg     unsigned char 
  4465 ;; Auto vars:     Size  Location     Type
  4466 ;;  channel         1    7[COMMON] unsigned char 
  4467 ;; Return value:  Size  Location     Type
  4468 ;;		None               void
  4469 ;; Registers used:
  4470 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4471 ;; Tracked objects:
  4472 ;;		On entry : 0/0
  4473 ;;		On exit  : 0/0
  4474 ;;		Unchanged: 0/0
  4475 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4476 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4477 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4478 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4479 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4480 ;;Total ram usage:        2 bytes
  4481 ;; Hardware stack levels used:    1
  4482 ;; Hardware stack levels required when called:    5
  4483 ;; This function calls:
  4484 ;;		_getAD
  4485 ;; This function is called by:
  4486 ;;		_main
  4487 ;; This function uses a non-reentrant model
  4488 ;;
  4489                           
  4490                           
  4491                           ;psect for function _getTemp_AD
  4492  130D                     _getTemp_AD:	
  4493                           
  4494                           ;incstack = 0
  4495                           ; Regs used in _getTemp_AD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4496                           ;getTemp_AD@channel stored from wreg
  4497  130D  00F7               	movwf	getTemp_AD@channel
  4498                           
  4499                           ;OverTemperature_B1.c: 18: if (Temp.ADtoGO == 1) {
  4500  130E  0021               	movlb	1	; select bank1
  4501  130F  1D50               	btfss	_Temp^(0+128),2
  4502  1310  0008               	return
  4503                           
  4504                           ;OverTemperature_B1.c: 19: Temp.ADRES = getAD(channel, 0xf0);
  4505  1311  30F0               	movlw	240
  4506  1312  00F6               	movwf	??_getTemp_AD
  4507  1313  0876               	movf	??_getTemp_AD,w
  4508  1314  00F2               	movwf	getAD@adcon1
  4509  1315  0877               	movf	getTemp_AD@channel,w
  4510  1316  319E  26AD  3193   	fcall	_getAD
  4511  1319  0873               	movf	?_getAD+1,w
  4512  131A  0021               	movlb	1	; select bank1
  4513  131B  01DD               	clrf	((_Temp+1)^(0+128)+12)
  4514  131C  07DD               	addwf	((_Temp+1)^(0+128)+12),f
  4515  131D  0872               	movf	?_getAD,w
  4516  131E  01DC               	clrf	(_Temp^(0+128)+12)
  4517  131F  07DC               	addwf	(_Temp^(0+128)+12),f
  4518                           
  4519                           ;OverTemperature_B1.c: 20: if (Temp.ADRES > 0) {
  4520  1320  300C               	movlw	12
  4521  1321  3ED0               	addlw	_Temp& (0+255)
  4522  1322  0086               	movwf	6
  4523  1323  0187               	clrf	7
  4524  1324  0016               	moviw fsr1++
  4525  1325  0401               	iorwf	1,w
  4526  1326  1903               	skipnz
  4527  1327  0008               	return
  4528                           
  4529                           ;OverTemperature_B1.c: 21: if (Temp.ADH[0] < Temp.ADRES) {
  4530  1328  085D               	movf	((_Temp+1)^(0+128)+12),w
  4531  1329  0259               	subwf	((_Temp+1)^(0+128)+8),w
  4532  132A  1D03               	skipz
  4533  132B  2B2E               	goto	u11795
  4534  132C  085C               	movf	(_Temp^(0+128)+12),w
  4535  132D  0258               	subwf	(_Temp^(0+128)+8),w
  4536  132E                     u11795:	
  4537  132E  1803               	skipnc
  4538  132F  2B37               	goto	l10107
  4539                           
  4540                           ;OverTemperature_B1.c: 22: Temp.ADH[0] = Temp.ADRES;
  4541  1330  085D               	movf	((_Temp+1)^(0+128)+12),w
  4542  1331  01D9               	clrf	((_Temp+1)^(0+128)+8)
  4543  1332  07D9               	addwf	((_Temp+1)^(0+128)+8),f
  4544  1333  085C               	movf	(_Temp^(0+128)+12),w
  4545  1334  01D8               	clrf	(_Temp^(0+128)+8)
  4546  1335  07D8               	addwf	(_Temp^(0+128)+8),f
  4547                           
  4548                           ;OverTemperature_B1.c: 23: } else if (Temp.ADH[1] < Temp.ADRES) {
  4549  1336  0008               	return
  4550  1337                     l10107:	
  4551  1337  085D               	movf	((_Temp+1)^(0+128)+12),w
  4552  1338  025B               	subwf	((_Temp+1)^(0+128)+10),w
  4553  1339  1D03               	skipz
  4554  133A  2B3D               	goto	u11805
  4555  133B  085C               	movf	(_Temp^(0+128)+12),w
  4556  133C  025A               	subwf	(_Temp^(0+128)+10),w
  4557  133D                     u11805:	
  4558  133D  1803               	skipnc
  4559  133E  0008               	return
  4560                           
  4561                           ;OverTemperature_B1.c: 24: Temp.ADH[1] = Temp.ADRES;
  4562  133F  085D               	movf	((_Temp+1)^(0+128)+12),w
  4563  1340  01DB               	clrf	((_Temp+1)^(0+128)+10)
  4564  1341  07DB               	addwf	((_Temp+1)^(0+128)+10),f
  4565  1342  085C               	movf	(_Temp^(0+128)+12),w
  4566  1343  01DA               	clrf	(_Temp^(0+128)+10)
  4567  1344  07DA               	addwf	(_Temp^(0+128)+10),f
  4568  1345  0008               	return
  4569  1346                     __end_of_getTemp_AD:	
  4570                           
  4571                           	psect	text4
  4572  0B20                     __ptext4:	
  4573 ;; *************** function _getLoad_AD *****************
  4574 ;; Defined at:
  4575 ;;		line 15 in file "../src/OverLoad_B1.c"
  4576 ;; Parameters:    Size  Location     Type
  4577 ;;  channel         1    wreg     unsigned char 
  4578 ;; Auto vars:     Size  Location     Type
  4579 ;;  channel         1    0[BANK0 ] unsigned char 
  4580 ;;  i               1    3[BANK0 ] unsigned char 
  4581 ;;  j               1    2[BANK0 ] unsigned char 
  4582 ;;  k               1    1[BANK0 ] unsigned char 
  4583 ;; Return value:  Size  Location     Type
  4584 ;;		None               void
  4585 ;; Registers used:
  4586 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4587 ;; Tracked objects:
  4588 ;;		On entry : 0/0
  4589 ;;		On exit  : 0/0
  4590 ;;		Unchanged: 0/0
  4591 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4592 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4593 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4594 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4595 ;;      Totals:         2       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4596 ;;Total ram usage:        6 bytes
  4597 ;; Hardware stack levels used:    1
  4598 ;; Hardware stack levels required when called:    5
  4599 ;; This function calls:
  4600 ;;		_getAD
  4601 ;; This function is called by:
  4602 ;;		_main
  4603 ;; This function uses a non-reentrant model
  4604 ;;
  4605                           
  4606                           
  4607                           ;psect for function _getLoad_AD
  4608  0B20                     _getLoad_AD:	
  4609                           
  4610                           ;incstack = 0
  4611                           ; Regs used in _getLoad_AD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4612                           ;getLoad_AD@channel stored from wreg
  4613  0B20  0020               	movlb	0	; select bank0
  4614  0B21  00A0               	movwf	getLoad_AD@channel
  4615                           
  4616                           ;OverLoad_B1.c: 16: char i = 0, j = 0, k = 0;
  4617  0B22  01A3               	clrf	getLoad_AD@i
  4618  0B23  01A2               	clrf	getLoad_AD@j
  4619  0B24  01A1               	clrf	getLoad_AD@k
  4620                           
  4621                           ;OverLoad_B1.c: 18: if (Load.ADtoGO == 1) {
  4622  0B25  0022               	movlb	2	; select bank2
  4623  0B26  1E30               	btfss	_Load^(0+256),4
  4624  0B27  0008               	return
  4625                           
  4626                           ;OverLoad_B1.c: 19: Load.ADRES = getAD(channel, 0xf3);
  4627  0B28  30F3               	movlw	243
  4628  0B29  00F6               	movwf	??_getLoad_AD
  4629  0B2A  0876               	movf	??_getLoad_AD,w
  4630  0B2B  00F2               	movwf	getAD@adcon1
  4631  0B2C  0020               	movlb	0	; select bank0
  4632  0B2D  0820               	movf	getLoad_AD@channel,w
  4633  0B2E  319E  26AD  318B   	fcall	_getAD
  4634  0B31  0873               	movf	?_getAD+1,w
  4635  0B32  0022               	movlb	2	; select bank2
  4636  0B33  01D2               	clrf	((_Load+1)^(0+256)+33)
  4637  0B34  07D2               	addwf	((_Load+1)^(0+256)+33),f
  4638  0B35  0872               	movf	?_getAD,w
  4639  0B36  01D1               	clrf	(_Load^(0+256)+33)
  4640  0B37  07D1               	addwf	(_Load^(0+256)+33),f
  4641                           
  4642                           ;OverLoad_B1.c: 21: for (i = 0; i < 4; i++) {
  4643  0B38  0020               	movlb	0	; select bank0
  4644  0B39  01A3               	clrf	getLoad_AD@i
  4645  0B3A  3004               	movlw	4
  4646  0B3B  0223               	subwf	getLoad_AD@i,w
  4647  0B3C  1803               	btfsc	3,0
  4648  0B3D  2B6A               	goto	l10077
  4649  0B3E                     l10065:	
  4650                           
  4651                           ;OverLoad_B1.c: 22: if (Load.AH[i] < Load.ADRES && j == 0) {
  4652  0B3E  3523               	lslf	getLoad_AD@i,w
  4653  0B3F  3E3B               	addlw	(_Load+11)& (0+255)
  4654  0B40  0086               	movwf	6
  4655  0B41  3001               	movlw	1	; select bank2/3
  4656  0B42  0087               	movwf	7
  4657  0B43  3F40               	moviw [0]fsr1
  4658  0B44  00F6               	movwf	??_getLoad_AD
  4659  0B45  3F41               	moviw [1]fsr1
  4660  0B46  00F7               	movwf	??_getLoad_AD+1
  4661  0B47  0022               	movlb	2	; select bank2
  4662  0B48  0852               	movf	((_Load+1)^(0+256)+33),w
  4663  0B49  0277               	subwf	??_getLoad_AD+1,w
  4664  0B4A  1D03               	skipz
  4665  0B4B  2B4E               	goto	u11695
  4666  0B4C  0851               	movf	(_Load^(0+256)+33),w
  4667  0B4D  0276               	subwf	??_getLoad_AD,w
  4668  0B4E                     u11695:	
  4669  0B4E  1803               	skipnc
  4670  0B4F  2B61               	goto	l10073
  4671  0B50  0020               	movlb	0	; select bank0
  4672  0B51  08A2               	movf	getLoad_AD@j,f
  4673  0B52  1D03               	skipz
  4674  0B53  2B61               	goto	l10073
  4675                           
  4676                           ;OverLoad_B1.c: 23: Load.AH[i] = Load.ADRES;
  4677  0B54  3523               	lslf	getLoad_AD@i,w
  4678  0B55  3E3B               	addlw	(_Load+11)& (0+255)
  4679  0B56  0086               	movwf	6
  4680  0B57  3001               	movlw	1	; select bank2/3
  4681  0B58  0087               	movwf	7
  4682  0B59  0022               	movlb	2	; select bank2
  4683  0B5A  0851               	movf	(_Load^(0+256)+33),w
  4684  0B5B  3FC0               	movwi [0]fsr1
  4685  0B5C  0852               	movf	((_Load+1)^(0+256)+33),w
  4686  0B5D  3FC1               	movwi [1]fsr1
  4687                           
  4688                           ;OverLoad_B1.c: 24: j = 1;
  4689  0B5E  0020               	movlb	0	; select bank0
  4690  0B5F  01A2               	clrf	getLoad_AD@j
  4691  0B60  0AA2               	incf	getLoad_AD@j,f
  4692  0B61                     l10073:	
  4693  0B61  3001               	movlw	1
  4694  0B62  00F6               	movwf	??_getLoad_AD
  4695  0B63  0876               	movf	??_getLoad_AD,w
  4696  0B64  0020               	movlb	0	; select bank0
  4697  0B65  07A3               	addwf	getLoad_AD@i,f
  4698  0B66  3004               	movlw	4
  4699  0B67  0223               	subwf	getLoad_AD@i,w
  4700  0B68  1C03               	skipc
  4701  0B69  2B3E               	goto	l10065
  4702  0B6A                     l10077:	
  4703                           
  4704                           ;OverLoad_B1.c: 25: }
  4705                           ;OverLoad_B1.c: 26: }
  4706                           ;OverLoad_B1.c: 27: if (j == 0) {
  4707  0B6A  08A2               	movf	getLoad_AD@j,f
  4708  0B6B  1D03               	skipz
  4709  0B6C  0008               	return
  4710                           
  4711                           ;OverLoad_B1.c: 28: for (i = 0; i < 4; i++) {
  4712  0B6D  01A3               	clrf	getLoad_AD@i
  4713  0B6E                     L1:	
  4714  0B6E  3004               	movlw	4
  4715  0B6F  0223               	subwf	getLoad_AD@i,w
  4716  0B70  1803               	btfsc	3,0
  4717  0B71  0008               	return
  4718                           
  4719                           ;OverLoad_B1.c: 29: if (Load.AL[i] > Load.ADRES && k == 0) {
  4720  0B72  3523               	lslf	getLoad_AD@i,w
  4721  0B73  3E45               	addlw	(_Load+21)& (0+255)
  4722  0B74  0086               	movwf	6
  4723  0B75  3001               	movlw	1	; select bank2/3
  4724  0B76  0087               	movwf	7
  4725  0B77  3F40               	moviw [0]fsr1
  4726  0B78  00F6               	movwf	??_getLoad_AD
  4727  0B79  3F41               	moviw [1]fsr1
  4728  0B7A  00F7               	movwf	??_getLoad_AD+1
  4729  0B7B  0877               	movf	??_getLoad_AD+1,w
  4730  0B7C  0022               	movlb	2	; select bank2
  4731  0B7D  0252               	subwf	((_Load+1)^(0+256)+33),w
  4732  0B7E  1D03               	skipz
  4733  0B7F  2B82               	goto	u11745
  4734  0B80  0876               	movf	??_getLoad_AD,w
  4735  0B81  0251               	subwf	(_Load^(0+256)+33),w
  4736  0B82                     u11745:	
  4737  0B82  1803               	skipnc
  4738  0B83  2B95               	goto	l10093
  4739  0B84  0020               	movlb	0	; select bank0
  4740  0B85  08A1               	movf	getLoad_AD@k,f
  4741  0B86  1D03               	skipz
  4742  0B87  2B95               	goto	l10093
  4743                           
  4744                           ;OverLoad_B1.c: 30: Load.AL[i] = Load.ADRES;
  4745  0B88  3523               	lslf	getLoad_AD@i,w
  4746  0B89  3E45               	addlw	(_Load+21)& (0+255)
  4747  0B8A  0086               	movwf	6
  4748  0B8B  3001               	movlw	1	; select bank2/3
  4749  0B8C  0087               	movwf	7
  4750  0B8D  0022               	movlb	2	; select bank2
  4751  0B8E  0851               	movf	(_Load^(0+256)+33),w
  4752  0B8F  3FC0               	movwi [0]fsr1
  4753  0B90  0852               	movf	((_Load+1)^(0+256)+33),w
  4754  0B91  3FC1               	movwi [1]fsr1
  4755                           
  4756                           ;OverLoad_B1.c: 31: k = 1;
  4757  0B92  0020               	movlb	0	; select bank0
  4758  0B93  01A1               	clrf	getLoad_AD@k
  4759  0B94  0AA1               	incf	getLoad_AD@k,f
  4760  0B95                     l10093:	
  4761  0B95  3001               	movlw	1
  4762  0B96  00F6               	movwf	??_getLoad_AD
  4763  0B97  0876               	movf	??_getLoad_AD,w
  4764  0B98  0020               	movlb	0	; select bank0
  4765  0B99  07A3               	addwf	getLoad_AD@i,f
  4766  0B9A  2B6E               	goto	L1
  4767  0B9B                     __end_of_getLoad_AD:	
  4768                           
  4769                           	psect	text5
  4770  1EAD                     __ptext5:	
  4771 ;; *************** function _getAD *****************
  4772 ;; Defined at:
  4773 ;;		line 443 in file "../src/MCU_B1.c"
  4774 ;; Parameters:    Size  Location     Type
  4775 ;;  adcon0          1    wreg     unsigned char 
  4776 ;;  adcon1          1    2[COMMON] unsigned char 
  4777 ;; Auto vars:     Size  Location     Type
  4778 ;;  adcon0          1    5[COMMON] unsigned char 
  4779 ;; Return value:  Size  Location     Type
  4780 ;;                  2    2[COMMON] int 
  4781 ;; Registers used:
  4782 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4783 ;; Tracked objects:
  4784 ;;		On entry : 0/0
  4785 ;;		On exit  : 0/0
  4786 ;;		Unchanged: 0/0
  4787 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4788 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4789 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4790 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4791 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4792 ;;Total ram usage:        4 bytes
  4793 ;; Hardware stack levels used:    1
  4794 ;; Hardware stack levels required when called:    4
  4795 ;; This function calls:
  4796 ;;		_Timeout_Counter
  4797 ;;		_set_TimeoutCleared
  4798 ;; This function is called by:
  4799 ;;		_getLoad_AD
  4800 ;;		_getTemp_AD
  4801 ;; This function uses a non-reentrant model
  4802 ;;
  4803                           
  4804                           
  4805                           ;psect for function _getAD
  4806  1EAD                     _getAD:	
  4807                           
  4808                           ;incstack = 0
  4809                           ; Regs used in _getAD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4810                           ;getAD@adcon0 stored from wreg
  4811  1EAD  00F5               	movwf	getAD@adcon0
  4812                           
  4813                           ;MCU_B1.c: 444: ADCON0 = adcon0;
  4814  1EAE  0875               	movf	getAD@adcon0,w
  4815  1EAF  0021               	movlb	1	; select bank1
  4816  1EB0  009D               	movwf	29	;volatile
  4817                           
  4818                           ;MCU_B1.c: 445: ADCON1 = adcon1;
  4819  1EB1  0872               	movf	getAD@adcon1,w
  4820  1EB2  009E               	movwf	30	;volatile
  4821                           
  4822                           ;MCU_B1.c: 446: GO_nDONE = 1;
  4823  1EB3  149D               	bsf	29,1	;volatile
  4824                           
  4825                           ;MCU_B1.c: 447: while (GO_nDONE == 1 && myMain.Timeout == 0) {
  4826  1EB4  2EB8               	goto	l9731
  4827  1EB5                     l9729:	
  4828                           
  4829                           ;MCU_B1.c: 448: Timeout_Counter();
  4830  1EB5  319D  25D0  319E   	fcall	_Timeout_Counter
  4831  1EB8                     l9731:	
  4832  1EB8  0021               	movlb	1	; select bank1
  4833  1EB9  1C9D               	btfss	29,1	;volatile
  4834  1EBA  2EBE               	goto	l9735
  4835  1EBB  0022               	movlb	2	; select bank2
  4836  1EBC  1D2B               	btfss	(_myMain^(0+256)+11),2
  4837  1EBD  2EB5               	goto	l9729
  4838  1EBE                     l9735:	
  4839                           
  4840                           ;MCU_B1.c: 449: };
  4841                           ;MCU_B1.c: 450: set_TimeoutCleared();
  4842  1EBE  319A  22E9         	fcall	_set_TimeoutCleared
  4843                           
  4844                           ;MCU_B1.c: 451: return ((ADRESH*256)+ADRESL);
  4845  1EC0  0021               	movlb	1	; select bank1
  4846  1EC1  081C               	movf	28,w	;volatile
  4847  1EC2  01F3               	clrf	?_getAD+1
  4848  1EC3  07F3               	addwf	?_getAD+1,f
  4849  1EC4  081B               	movf	27,w	;volatile
  4850  1EC5  01F2               	clrf	?_getAD
  4851  1EC6  07F2               	addwf	?_getAD,f
  4852  1EC7  0008               	return
  4853  1EC8                     __end_of_getAD:	
  4854                           
  4855                           	psect	text6
  4856  1CC0                     __ptext6:	
  4857 ;; *************** function _WDT_Main *****************
  4858 ;; Defined at:
  4859 ;;		line 1087 in file "../src/MCU_B1.c"
  4860 ;; Parameters:    Size  Location     Type
  4861 ;;		None
  4862 ;; Auto vars:     Size  Location     Type
  4863 ;;		None
  4864 ;; Return value:  Size  Location     Type
  4865 ;;		None               void
  4866 ;; Registers used:
  4867 ;;		wreg, status,2, status,0, pclath, cstack
  4868 ;; Tracked objects:
  4869 ;;		On entry : 0/0
  4870 ;;		On exit  : 0/0
  4871 ;;		Unchanged: 0/0
  4872 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4873 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4874 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4875 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4876 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4877 ;;Total ram usage:        1 bytes
  4878 ;; Hardware stack levels used:    1
  4879 ;; Hardware stack levels required when called:    4
  4880 ;; This function calls:
  4881 ;;		_WDT_Clearing
  4882 ;; This function is called by:
  4883 ;;		_main
  4884 ;; This function uses a non-reentrant model
  4885 ;;
  4886                           
  4887                           
  4888                           ;psect for function _WDT_Main
  4889  1CC0                     _WDT_Main:	
  4890                           
  4891                           ;MCU_B1.c: 1088: if (WDT.Enable == 1) {
  4892                           
  4893                           ;incstack = 0
  4894                           ; Regs used in _WDT_Main: [wreg+status,2+status,0+pclath+cstack]
  4895  1CC0  0021               	movlb	1	; select bank1
  4896  1CC1  1C40               	btfss	_WDT^(0+128),0
  4897  1CC2  0008               	return
  4898                           
  4899                           ;MCU_B1.c: 1089: if (WDT.Timer-- > 0) {
  4900  1CC3  3001               	movlw	1
  4901  1CC4  02C1               	subwf	(_WDT^(0+128)+1),f
  4902  1CC5  0841               	movf	(_WDT^(0+128)+1),w
  4903  1CC6  3AFF               	xorlw	255
  4904  1CC7  1903               	skipnz
  4905  1CC8  0008               	return
  4906                           
  4907                           ;MCU_B1.c: 1090: WDT.Timer = 100;
  4908  1CC9  3064               	movlw	100
  4909  1CCA  00F2               	movwf	??_WDT_Main
  4910  1CCB  0872               	movf	??_WDT_Main,w
  4911  1CCC  00C1               	movwf	(_WDT^(0+128)+1)
  4912                           
  4913                           ;MCU_B1.c: 1091: WDT_Clearing();
  4914  1CCD  3187  27FE         	fcall	_WDT_Clearing
  4915  1CCF  0008               	return
  4916  1CD0                     __end_of_WDT_Main:	
  4917                           
  4918                           	psect	text7
  4919  07FE                     __ptext7:	
  4920 ;; *************** function _WDT_Clearing *****************
  4921 ;; Defined at:
  4922 ;;		line 1097 in file "../src/MCU_B1.c"
  4923 ;; Parameters:    Size  Location     Type
  4924 ;;		None
  4925 ;; Auto vars:     Size  Location     Type
  4926 ;;		None
  4927 ;; Return value:  Size  Location     Type
  4928 ;;		None               void
  4929 ;; Registers used:
  4930 ;;		None
  4931 ;; Tracked objects:
  4932 ;;		On entry : 0/0
  4933 ;;		On exit  : 0/0
  4934 ;;		Unchanged: 0/0
  4935 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4936 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4937 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4938 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4939 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4940 ;;Total ram usage:        0 bytes
  4941 ;; Hardware stack levels used:    1
  4942 ;; Hardware stack levels required when called:    3
  4943 ;; This function calls:
  4944 ;;		Nothing
  4945 ;; This function is called by:
  4946 ;;		_WDT_Main
  4947 ;; This function uses a non-reentrant model
  4948 ;;
  4949                           
  4950                           
  4951                           ;psect for function _WDT_Clearing
  4952  07FE                     _WDT_Clearing:	
  4953                           
  4954                           ;incstack = 0
  4955                           ; Regs used in _WDT_Clearing: []
  4956  07FE  0064               	clrwdt	;# 
  4957  07FF  0008               	return
  4958  0800                     __end_of_WDT_Clearing:	
  4959                           
  4960                           	psect	text8
  4961  1ACD                     __ptext8:	
  4962 ;; *************** function _Temp_Main *****************
  4963 ;; Defined at:
  4964 ;;		line 49 in file "../src/OverTemperature_B1.c"
  4965 ;; Parameters:    Size  Location     Type
  4966 ;;		None
  4967 ;; Auto vars:     Size  Location     Type
  4968 ;;		None
  4969 ;; Return value:  Size  Location     Type
  4970 ;;		None               void
  4971 ;; Registers used:
  4972 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4973 ;; Tracked objects:
  4974 ;;		On entry : 0/0
  4975 ;;		On exit  : 0/0
  4976 ;;		Unchanged: 0/0
  4977 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4978 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4979 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4980 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4981 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4982 ;;Total ram usage:        0 bytes
  4983 ;; Hardware stack levels used:    1
  4984 ;; Hardware stack levels required when called:    6
  4985 ;; This function calls:
  4986 ;;		_setTemp_Main
  4987 ;; This function is called by:
  4988 ;;		_main
  4989 ;; This function uses a non-reentrant model
  4990 ;;
  4991                           
  4992                           
  4993                           ;psect for function _Temp_Main
  4994  1ACD                     _Temp_Main:	
  4995                           
  4996                           ;OverTemperature_B1.c: 51: setTemp_Main();
  4997                           
  4998                           ;incstack = 0
  4999                           ; Regs used in _Temp_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5000  1ACD  318D  25E4         	fcall	_setTemp_Main
  5001  1ACF  0008               	return
  5002  1AD0                     __end_of_Temp_Main:	
  5003                           
  5004                           	psect	text9
  5005  0DE4                     __ptext9:	
  5006 ;; *************** function _setTemp_Main *****************
  5007 ;; Defined at:
  5008 ;;		line 56 in file "../src/OverTemperature_B1.c"
  5009 ;; Parameters:    Size  Location     Type
  5010 ;;		None
  5011 ;; Auto vars:     Size  Location     Type
  5012 ;;  error           1   63[BANK0 ] unsigned char 
  5013 ;; Return value:  Size  Location     Type
  5014 ;;		None               void
  5015 ;; Registers used:
  5016 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5017 ;; Tracked objects:
  5018 ;;		On entry : 0/0
  5019 ;;		On exit  : 0/0
  5020 ;;		Unchanged: 0/0
  5021 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5022 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5023 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5024 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5025 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5026 ;;Total ram usage:        3 bytes
  5027 ;; Hardware stack levels used:    1
  5028 ;; Hardware stack levels required when called:    5
  5029 ;; This function calls:
  5030 ;;		_getMain_All_Error_Status
  5031 ;;		_setBuz
  5032 ;;		_setProductData
  5033 ;; This function is called by:
  5034 ;;		_Temp_Main
  5035 ;; This function uses a non-reentrant model
  5036 ;;
  5037                           
  5038                           
  5039                           ;psect for function _setTemp_Main
  5040  0DE4                     _setTemp_Main:	
  5041                           
  5042                           ;OverTemperature_B1.c: 57: char error = getMain_All_Error_Status(0);
  5043                           
  5044                           ;incstack = 0
  5045                           ; Regs used in _setTemp_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5046  0DE4  3000               	movlw	0
  5047  0DE5  3191  21D4  318D   	fcall	_getMain_All_Error_Status
  5048  0DE8  0020               	movlb	0	; select bank0
  5049  0DE9  00DD               	movwf	??_setTemp_Main
  5050  0DEA  085D               	movf	??_setTemp_Main,w
  5051  0DEB  00DF               	movwf	setTemp_Main@error
  5052                           
  5053                           ;OverTemperature_B1.c: 58: if (Temp.Enable == 1) {
  5054  0DEC  0021               	movlb	1	; select bank1
  5055  0DED  1C50               	btfss	_Temp^(0+128),0
  5056  0DEE  2E90               	goto	l2027
  5057                           
  5058                           ;OverTemperature_B1.c: 65: if (Temp.ADtoGO == 0) {
  5059  0DEF  1950               	btfsc	_Temp^(0+128),2
  5060  0DF0  2E00               	goto	l9753
  5061                           
  5062                           ;OverTemperature_B1.c: 66: Temp.Time++;
  5063  0DF1  3001               	movlw	1
  5064  0DF2  07D1               	addwf	(_Temp^(0+128)+1),f
  5065  0DF3  3000               	movlw	0
  5066  0DF4  3DD2               	addwfc	((_Temp+1)^(0+128)+1),f
  5067                           
  5068                           ;OverTemperature_B1.c: 67: if (Temp.Time >= (5000 / 20)) {
  5069  0DF5  3000               	movlw	0
  5070  0DF6  0252               	subwf	((_Temp+1)^(0+128)+1),w
  5071  0DF7  30FA               	movlw	250
  5072  0DF8  1903               	skipnz
  5073  0DF9  0251               	subwf	(_Temp^(0+128)+1),w
  5074  0DFA  1C03               	skipc
  5075  0DFB  0008               	return
  5076                           
  5077                           ;OverTemperature_B1.c: 68: Temp.Time = 0;
  5078  0DFC  01D1               	clrf	(_Temp^(0+128)+1)
  5079  0DFD  01D2               	clrf	((_Temp+1)^(0+128)+1)
  5080                           
  5081                           ;OverTemperature_B1.c: 69: Temp.ADtoGO = 1;
  5082  0DFE  1550               	bsf	_Temp^(0+128),2
  5083                           
  5084                           ;OverTemperature_B1.c: 70: }
  5085                           ;OverTemperature_B1.c: 71: } else {
  5086  0DFF  0008               	return
  5087  0E00                     l9753:	
  5088                           
  5089                           ;OverTemperature_B1.c: 72: Temp.Time++;
  5090  0E00  3001               	movlw	1
  5091  0E01  07D1               	addwf	(_Temp^(0+128)+1),f
  5092  0E02  3000               	movlw	0
  5093  0E03  3DD2               	addwfc	((_Temp+1)^(0+128)+1),f
  5094                           
  5095                           ;OverTemperature_B1.c: 73: if (Temp.Time >= (40 / 20)) {
  5096  0E04  3000               	movlw	0
  5097  0E05  0252               	subwf	((_Temp+1)^(0+128)+1),w
  5098  0E06  3002               	movlw	2
  5099  0E07  1903               	skipnz
  5100  0E08  0251               	subwf	(_Temp^(0+128)+1),w
  5101  0E09  1C03               	skipc
  5102  0E0A  0008               	return
  5103                           
  5104                           ;OverTemperature_B1.c: 74: Temp.Time = 0;
  5105  0E0B  01D1               	clrf	(_Temp^(0+128)+1)
  5106  0E0C  01D2               	clrf	((_Temp+1)^(0+128)+1)
  5107                           
  5108                           ;OverTemperature_B1.c: 76: if (Temp.ADH[0] > 0 && Temp.ADH[1] > 0) {
  5109  0E0D  3008               	movlw	8
  5110  0E0E  3ED0               	addlw	_Temp& (0+255)
  5111  0E0F  0086               	movwf	6
  5112  0E10  0187               	clrf	7
  5113  0E11  0016               	moviw fsr1++
  5114  0E12  0401               	iorwf	1,w
  5115  0E13  1903               	skipnz
  5116  0E14  2E8A               	goto	l2032
  5117  0E15  300A               	movlw	10
  5118  0E16  3ED0               	addlw	_Temp& (0+255)
  5119  0E17  0086               	movwf	6
  5120  0E18  0187               	clrf	7
  5121  0E19  0016               	moviw fsr1++
  5122  0E1A  0401               	iorwf	1,w
  5123  0E1B  1903               	skipnz
  5124  0E1C  2E8A               	goto	l2032
  5125                           
  5126                           ;OverTemperature_B1.c: 77: Temp.ADtoGO = 0;
  5127  0E1D  1150               	bcf	_Temp^(0+128),2
  5128                           
  5129                           ;OverTemperature_B1.c: 78: Temp.AD = (Temp.ADH[0] + Temp.ADH[1]) / 2;
  5130  0E1E  300A               	movlw	10
  5131  0E1F  3ED0               	addlw	_Temp& (0+255)
  5132  0E20  0086               	movwf	6
  5133  0E21  0187               	clrf	7
  5134  0E22  3008               	movlw	8
  5135  0E23  3ED0               	addlw	_Temp& (0+255)
  5136  0E24  0084               	movwf	4
  5137  0E25  0185               	clrf	5
  5138  0E26  3F40               	moviw [0]fsr1
  5139  0E27  0700               	addwf	0,w
  5140  0E28  0020               	movlb	0	; select bank0
  5141  0E29  00DD               	movwf	??_setTemp_Main
  5142  0E2A  3101               	addfsr 0,1
  5143  0E2B  3F41               	moviw [1]fsr1
  5144  0E2C  3D00               	addwfc	0,w
  5145  0E2D  00DE               	movwf	??_setTemp_Main+1
  5146  0E2E  36DE               	lsrf	??_setTemp_Main+1,f
  5147  0E2F  0CDD               	rrf	??_setTemp_Main,f
  5148  0E30  085D               	movf	??_setTemp_Main,w
  5149  0E31  0021               	movlb	1	; select bank1
  5150  0E32  00D6               	movwf	(_Temp^(0+128)+6)
  5151  0E33  0020               	movlb	0	; select bank0
  5152  0E34  085E               	movf	??_setTemp_Main+1,w
  5153  0E35  0021               	movlb	1	; select bank1
  5154  0E36  00D7               	movwf	((_Temp+1)^(0+128)+6)
  5155                           
  5156                           ;OverTemperature_B1.c: 89: Temp.SafeValue = 455;
  5157  0E37  30C7               	movlw	199
  5158  0E38  00DE               	movwf	(_Temp^(0+128)+14)
  5159  0E39  3001               	movlw	1
  5160  0E3A  00DF               	movwf	(_Temp^(0+128)+15)
  5161                           
  5162                           ;OverTemperature_B1.c: 90: Temp.DangerValue = 415;
  5163  0E3B  309F               	movlw	159
  5164  0E3C  00E0               	movwf	(_Temp^(0+128)+16)
  5165  0E3D  3001               	movlw	1
  5166  0E3E  00E1               	movwf	(_Temp^(0+128)+17)
  5167                           
  5168                           ;OverTemperature_B1.c: 96: if (Temp.ERROR == 1) {
  5169  0E3F  1CD0               	btfss	_Temp^(0+128),1
  5170  0E40  2E61               	goto	l9785
  5171                           
  5172                           ;OverTemperature_B1.c: 97: if (Temp.AD >= Temp.SafeValue) {
  5173  0E41  085F               	movf	((_Temp+1)^(0+128)+14),w
  5174  0E42  0257               	subwf	((_Temp+1)^(0+128)+6),w
  5175  0E43  1D03               	skipz
  5176  0E44  2E47               	goto	u11215
  5177  0E45  085E               	movf	(_Temp^(0+128)+14),w
  5178  0E46  0256               	subwf	(_Temp^(0+128)+6),w
  5179  0E47                     u11215:	
  5180  0E47  1C03               	skipc
  5181  0E48  2E5F               	goto	l9783
  5182                           
  5183                           ;OverTemperature_B1.c: 98: Temp.Count++;
  5184  0E49  3001               	movlw	1
  5185  0E4A  0020               	movlb	0	; select bank0
  5186  0E4B  00DD               	movwf	??_setTemp_Main
  5187  0E4C  085D               	movf	??_setTemp_Main,w
  5188  0E4D  0021               	movlb	1	; select bank1
  5189  0E4E  07D3               	addwf	(_Temp^(0+128)+3),f
  5190                           
  5191                           ;OverTemperature_B1.c: 99: if (Temp.Count >= 3) {
  5192  0E4F  3003               	movlw	3
  5193  0E50  0253               	subwf	(_Temp^(0+128)+3),w
  5194  0E51  1C03               	skipc
  5195  0E52  2E77               	goto	l9797
  5196                           
  5197                           ;OverTemperature_B1.c: 100: Temp.Count = 0;
  5198  0E53  01D3               	clrf	(_Temp^(0+128)+3)
  5199                           
  5200                           ;OverTemperature_B1.c: 101: Temp.ERROR = 0;
  5201  0E54  10D0               	bcf	_Temp^(0+128),1
  5202                           
  5203                           ;OverTemperature_B1.c: 102: setBuz(2, 100);
  5204  0E55  3064               	movlw	100
  5205  0E56  0020               	movlb	0	; select bank0
  5206  0E57  00A4               	movwf	setBuz@time
  5207  0E58  3000               	movlw	0
  5208  0E59  00A5               	movwf	setBuz@time+1
  5209  0E5A  3002               	movlw	2
  5210  0E5B  3195  2586  318D   	fcall	_setBuz
  5211                           
  5212                           ;OverTemperature_B1.c: 103: }
  5213                           ;OverTemperature_B1.c: 104: } else {
  5214  0E5E  2E77               	goto	l9797
  5215  0E5F                     l9783:	
  5216                           
  5217                           ;OverTemperature_B1.c: 105: Temp.Count = 0;
  5218  0E5F  0021               	movlb	1	; select bank1
  5219  0E60  2E76               	goto	l9795
  5220  0E61                     l9785:	
  5221                           ;OverTemperature_B1.c: 106: }
  5222                           ;OverTemperature_B1.c: 107: } else {
  5223                           
  5224                           
  5225                           ;OverTemperature_B1.c: 108: if (Temp.AD <= Temp.DangerValue) {
  5226  0E61  0857               	movf	((_Temp+1)^(0+128)+6),w
  5227  0E62  0261               	subwf	((_Temp+1)^(0+128)+16),w
  5228  0E63  1D03               	skipz
  5229  0E64  2E67               	goto	u11235
  5230  0E65  0856               	movf	(_Temp^(0+128)+6),w
  5231  0E66  0260               	subwf	(_Temp^(0+128)+16),w
  5232  0E67                     u11235:	
  5233  0E67  1C03               	skipc
  5234  0E68  2E76               	goto	l9795
  5235                           
  5236                           ;OverTemperature_B1.c: 109: Temp.Count++;
  5237  0E69  3001               	movlw	1
  5238  0E6A  0020               	movlb	0	; select bank0
  5239  0E6B  00DD               	movwf	??_setTemp_Main
  5240  0E6C  085D               	movf	??_setTemp_Main,w
  5241  0E6D  0021               	movlb	1	; select bank1
  5242  0E6E  07D3               	addwf	(_Temp^(0+128)+3),f
  5243                           
  5244                           ;OverTemperature_B1.c: 110: if (Temp.Count >= 3) {
  5245  0E6F  3003               	movlw	3
  5246  0E70  0253               	subwf	(_Temp^(0+128)+3),w
  5247  0E71  1C03               	skipc
  5248  0E72  2E77               	goto	l9797
  5249                           
  5250                           ;OverTemperature_B1.c: 111: Temp.Count = 0;
  5251  0E73  01D3               	clrf	(_Temp^(0+128)+3)
  5252                           
  5253                           ;OverTemperature_B1.c: 112: Temp.ERROR = 1;
  5254  0E74  14D0               	bsf	_Temp^(0+128),1
  5255                           
  5256                           ;OverTemperature_B1.c: 113: }
  5257                           ;OverTemperature_B1.c: 114: } else {
  5258  0E75  2E77               	goto	l9797
  5259  0E76                     l9795:	
  5260                           
  5261                           ;OverTemperature_B1.c: 115: Temp.Count = 0;
  5262  0E76  01D3               	clrf	(_Temp^(0+128)+3)
  5263  0E77                     l9797:	
  5264                           
  5265                           ;OverTemperature_B1.c: 116: }
  5266                           ;OverTemperature_B1.c: 117: }
  5267                           ;OverTemperature_B1.c: 118: setProductData(24, Temp.AD >> 8);
  5268  0E77  0021               	movlb	1	; select bank1
  5269  0E78  0857               	movf	((_Temp+1)^(0+128)+6),w
  5270  0E79  0020               	movlb	0	; select bank0
  5271  0E7A  00DD               	movwf	??_setTemp_Main
  5272  0E7B  085D               	movf	??_setTemp_Main,w
  5273  0E7C  00DA               	movwf	setProductData@value
  5274  0E7D  3018               	movlw	24
  5275  0E7E  319B  2394  318D   	fcall	_setProductData
  5276                           
  5277                           ;OverTemperature_B1.c: 119: setProductData(25, Temp.AD);
  5278  0E81  0021               	movlb	1	; select bank1
  5279  0E82  0856               	movf	(_Temp^(0+128)+6),w
  5280  0E83  0020               	movlb	0	; select bank0
  5281  0E84  00DD               	movwf	??_setTemp_Main
  5282  0E85  085D               	movf	??_setTemp_Main,w
  5283  0E86  00DA               	movwf	setProductData@value
  5284  0E87  3019               	movlw	25
  5285  0E88  319B  2394         	fcall	_setProductData
  5286  0E8A                     l2032:	
  5287                           
  5288                           ;OverTemperature_B1.c: 135: }
  5289                           ;OverTemperature_B1.c: 136: Temp.ADH[0] = 0;
  5290  0E8A  0021               	movlb	1	; select bank1
  5291  0E8B  01D8               	clrf	(_Temp^(0+128)+8)
  5292  0E8C  01D9               	clrf	((_Temp+1)^(0+128)+8)
  5293                           
  5294                           ;OverTemperature_B1.c: 137: Temp.ADH[1] = 0;
  5295  0E8D  01DA               	clrf	(_Temp^(0+128)+10)
  5296  0E8E  01DB               	clrf	((_Temp+1)^(0+128)+10)
  5297                           
  5298                           ;OverTemperature_B1.c: 138: }
  5299                           ;OverTemperature_B1.c: 139: }
  5300                           ;OverTemperature_B1.c: 141: } else {
  5301  0E8F  0008               	return
  5302  0E90                     l2027:	
  5303                           
  5304                           ;OverTemperature_B1.c: 142: if (myMain.PowerON == 1) {
  5305  0E90  0022               	movlb	2	; select bank2
  5306  0E91  1C20               	btfss	_myMain^(0+256),0
  5307  0E92  0008               	return
  5308                           
  5309                           ;OverTemperature_B1.c: 143: Temp.Enable = 1;
  5310  0E93  0021               	movlb	1	; select bank1
  5311  0E94  1450               	bsf	_Temp^(0+128),0
  5312  0E95  0008               	return
  5313  0E96                     __end_of_setTemp_Main:	
  5314                           
  5315                           	psect	text10
  5316  1ACA                     __ptext10:	
  5317 ;; *************** function _Temp_Initialization *****************
  5318 ;; Defined at:
  5319 ;;		line 8 in file "../src/OverTemperature_B1.c"
  5320 ;; Parameters:    Size  Location     Type
  5321 ;;		None
  5322 ;; Auto vars:     Size  Location     Type
  5323 ;;		None
  5324 ;; Return value:  Size  Location     Type
  5325 ;;		None               void
  5326 ;; Registers used:
  5327 ;;		status,2, status,0, pclath, cstack
  5328 ;; Tracked objects:
  5329 ;;		On entry : 0/0
  5330 ;;		On exit  : 0/0
  5331 ;;		Unchanged: 0/0
  5332 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5333 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5334 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5335 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5336 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5337 ;;Total ram usage:        0 bytes
  5338 ;; Hardware stack levels used:    1
  5339 ;; Hardware stack levels required when called:    4
  5340 ;; This function calls:
  5341 ;;		_setTemp_Initialization
  5342 ;; This function is called by:
  5343 ;;		_main
  5344 ;; This function uses a non-reentrant model
  5345 ;;
  5346                           
  5347                           
  5348                           ;psect for function _Temp_Initialization
  5349  1ACA                     _Temp_Initialization:	
  5350                           
  5351                           ;OverTemperature_B1.c: 10: setTemp_Initialization();
  5352                           
  5353                           ;incstack = 0
  5354                           ; Regs used in _Temp_Initialization: [status,2+status,0+pclath+cstack]
  5355  1ACA  3180  2003         	fcall	_setTemp_Initialization
  5356  1ACC  0008               	return
  5357  1ACD                     __end_of_Temp_Initialization:	
  5358                           
  5359                           	psect	text11
  5360  0003                     __ptext11:	
  5361 ;; *************** function _setTemp_Initialization *****************
  5362 ;; Defined at:
  5363 ;;		line 44 in file "../src/OverTemperature_B1.c"
  5364 ;; Parameters:    Size  Location     Type
  5365 ;;		None
  5366 ;; Auto vars:     Size  Location     Type
  5367 ;;		None
  5368 ;; Return value:  Size  Location     Type
  5369 ;;		None               void
  5370 ;; Registers used:
  5371 ;;		None
  5372 ;; Tracked objects:
  5373 ;;		On entry : 0/0
  5374 ;;		On exit  : 0/0
  5375 ;;		Unchanged: 0/0
  5376 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5377 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5378 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5379 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5380 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5381 ;;Total ram usage:        0 bytes
  5382 ;; Hardware stack levels used:    1
  5383 ;; Hardware stack levels required when called:    3
  5384 ;; This function calls:
  5385 ;;		Nothing
  5386 ;; This function is called by:
  5387 ;;		_Temp_Initialization
  5388 ;; This function uses a non-reentrant model
  5389 ;;
  5390                           
  5391                           
  5392                           ;psect for function _setTemp_Initialization
  5393  0003                     _setTemp_Initialization:	
  5394                           
  5395                           ;incstack = 0
  5396                           ; Regs used in _setTemp_Initialization: []
  5397  0003  0008               	return
  5398  0004                     __end_of_setTemp_Initialization:	
  5399                           
  5400                           	psect	text12
  5401  1B7D                     __ptext12:	
  5402 ;; *************** function _Switch_Main *****************
  5403 ;; Defined at:
  5404 ;;		line 72 in file "../src/Switch_B1.c"
  5405 ;; Parameters:    Size  Location     Type
  5406 ;;		None
  5407 ;; Auto vars:     Size  Location     Type
  5408 ;;		None
  5409 ;; Return value:  Size  Location     Type
  5410 ;;		None               void
  5411 ;; Registers used:
  5412 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5413 ;; Tracked objects:
  5414 ;;		On entry : 0/0
  5415 ;;		On exit  : 0/0
  5416 ;;		Unchanged: 0/0
  5417 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5418 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5419 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5420 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5421 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5422 ;;Total ram usage:        0 bytes
  5423 ;; Hardware stack levels used:    1
  5424 ;; Hardware stack levels required when called:    7
  5425 ;; This function calls:
  5426 ;;		_TouchPower
  5427 ;;		_setSw_Main
  5428 ;; This function is called by:
  5429 ;;		_main
  5430 ;; This function uses a non-reentrant model
  5431 ;;
  5432                           
  5433                           
  5434                           ;psect for function _Switch_Main
  5435  1B7D                     _Switch_Main:	
  5436                           
  5437                           ;Switch_B1.c: 75: setSw_Main(1);
  5438                           
  5439                           ;incstack = 0
  5440                           ; Regs used in _Switch_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5441  1B7D  3001               	movlw	1
  5442  1B7E  3181  21EC  319B   	fcall	_setSw_Main
  5443                           
  5444                           ;Switch_B1.c: 79: setSw_Main(2);
  5445  1B81  3002               	movlw	2
  5446  1B82  3181  21EC  319B   	fcall	_setSw_Main
  5447                           
  5448                           ;Switch_B1.c: 87: TouchPower();
  5449  1B85  319D  25A6         	fcall	_TouchPower
  5450  1B87  0008               	return
  5451  1B88                     __end_of_Switch_Main:	
  5452                           
  5453                           	psect	text13
  5454  01EC                     __ptext13:	
  5455 ;; *************** function _setSw_Main *****************
  5456 ;; Defined at:
  5457 ;;		line 121 in file "../src/Switch_B1.c"
  5458 ;; Parameters:    Size  Location     Type
  5459 ;;  sw              1    wreg     unsigned char 
  5460 ;; Auto vars:     Size  Location     Type
  5461 ;;  sw              1   12[BANK0 ] unsigned char 
  5462 ;; Return value:  Size  Location     Type
  5463 ;;		None               void
  5464 ;; Registers used:
  5465 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5466 ;; Tracked objects:
  5467 ;;		On entry : 0/0
  5468 ;;		On exit  : 0/0
  5469 ;;		Unchanged: 0/0
  5470 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5471 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5472 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5473 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5474 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5475 ;;Total ram usage:        3 bytes
  5476 ;; Hardware stack levels used:    1
  5477 ;; Hardware stack levels required when called:    6
  5478 ;; This function calls:
  5479 ;;		_SwPointSelect
  5480 ;;		_getMain_All_Error_Status
  5481 ;;		_getSw_KeyStatus
  5482 ;;		_setBuz
  5483 ;;		_setDimmerLights_DimmingOn
  5484 ;;		_setDimmerLights_SwOff
  5485 ;;		_setDimmerLights_SwOn
  5486 ;;		_setRF_Learn
  5487 ;; This function is called by:
  5488 ;;		_Switch_Main
  5489 ;; This function uses a non-reentrant model
  5490 ;;
  5491                           
  5492                           
  5493                           ;psect for function _setSw_Main
  5494  01EC                     _setSw_Main:	
  5495                           
  5496                           ;incstack = 0
  5497                           ; Regs used in _setSw_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5498                           ;setSw_Main@sw stored from wreg
  5499  01EC  0020               	movlb	0	; select bank0
  5500  01ED  00AC               	movwf	setSw_Main@sw
  5501                           
  5502                           ;Switch_B1.c: 122: SwPointSelect(sw);
  5503  01EE  082C               	movf	setSw_Main@sw,w
  5504  01EF  319D  25BB  3181   	fcall	_SwPointSelect
  5505                           
  5506                           ;Switch_B1.c: 123: if (Sw->Enable == 1) {
  5507  01F2  0020               	movlb	0	; select bank0
  5508  01F3  086D               	movf	_Sw,w
  5509  01F4  0086               	movwf	6
  5510  01F5  3001               	movlw	1	; select bank2/3
  5511  01F6  0087               	movwf	7
  5512  01F7  1C01               	btfss	1,0
  5513  01F8  2B53               	goto	l2810
  5514                           
  5515                           ;Switch_B1.c: 125: if (getMain_All_Error_Status(0) == 0) {
  5516  01F9  3000               	movlw	0
  5517  01FA  3191  21D4  3181   	fcall	_getMain_All_Error_Status
  5518  01FD  3800               	iorlw	0
  5519  01FE  1D03               	skipz
  5520  01FF  2A1B               	goto	l9905
  5521                           
  5522                           ;Switch_B1.c: 126: Sw->Detect = 0;
  5523  0200  0020               	movlb	0	; select bank0
  5524  0201  0A6D               	incf	_Sw,w
  5525  0202  0086               	movwf	6
  5526  0203  3001               	movlw	1	; select bank2/3
  5527  0204  0087               	movwf	7
  5528  0205  1081               	bcf	1,1
  5529                           
  5530                           ;Switch_B1.c: 127: Sw->Touch = getSw_KeyStatus(sw) == 1 ? 1 : 0;
  5531  0206  082C               	movf	setSw_Main@sw,w
  5532  0207  319F  275B  3181   	fcall	_getSw_KeyStatus
  5533  020A  3A01               	xorlw	1
  5534  020B  3000               	movlw	0
  5535  020C  1903               	skipnz
  5536  020D  3001               	movlw	1
  5537  020E  0020               	movlb	0	; select bank0
  5538  020F  00AA               	movwf	??_setSw_Main
  5539  0210  086D               	movf	_Sw,w
  5540  0211  0086               	movwf	6
  5541  0212  3001               	movlw	1	; select bank2/3
  5542  0213  0087               	movwf	7
  5543  0214  0DAA               	rlf	??_setSw_Main,f
  5544  0215  0801               	movf	1,w
  5545  0216  062A               	xorwf	??_setSw_Main,w
  5546  0217  39FD               	andlw	-3
  5547  0218  062A               	xorwf	??_setSw_Main,w
  5548  0219  0081               	movwf	1
  5549                           
  5550                           ;Switch_B1.c: 128: } else {
  5551  021A  2A31               	goto	l2812
  5552  021B                     l9905:	
  5553                           
  5554                           ;Switch_B1.c: 129: if (Sw->Detect == 0) {
  5555  021B  0020               	movlb	0	; select bank0
  5556  021C  0A6D               	incf	_Sw,w
  5557  021D  0086               	movwf	6
  5558  021E  3001               	movlw	1	; select bank2/3
  5559  021F  0087               	movwf	7
  5560  0220  1881               	btfsc	1,1
  5561  0221  2A31               	goto	l2812
  5562                           
  5563                           ;Switch_B1.c: 130: Sw->Detect = 1;
  5564  0222  0A6D               	incf	_Sw,w
  5565  0223  0086               	movwf	6
  5566  0224  3001               	movlw	1	; select bank2/3
  5567  0225  0087               	movwf	7
  5568  0226  1481               	bsf	1,1
  5569                           
  5570                           ;Switch_B1.c: 132: Sw->Touch = 0;
  5571  0227  086D               	movf	_Sw,w
  5572  0228  0086               	movwf	6
  5573  0229  3001               	movlw	1	; select bank2/3
  5574  022A  0087               	movwf	7
  5575  022B  1081               	bcf	1,1
  5576                           
  5577                           ;Switch_B1.c: 133: Sw->Debounce = 1;
  5578  022C  086D               	movf	_Sw,w
  5579  022D  0086               	movwf	6
  5580  022E  3001               	movlw	1	; select bank2/3
  5581  022F  0087               	movwf	7
  5582  0230  1501               	bsf	1,2
  5583  0231                     l2812:	
  5584                           
  5585                           ;Switch_B1.c: 134: }
  5586                           ;Switch_B1.c: 135: }
  5587                           ;Switch_B1.c: 137: if (Sw->Touch == 1) {
  5588  0231  086D               	movf	_Sw,w
  5589  0232  0086               	movwf	6
  5590  0233  3001               	movlw	1	; select bank2/3
  5591  0234  0087               	movwf	7
  5592  0235  1C81               	btfss	1,1
  5593  0236  2B00               	goto	l9955
  5594                           
  5595                           ;Switch_B1.c: 138: if (Sw->Debounce == 0) {
  5596  0237  086D               	movf	_Sw,w
  5597  0238  0086               	movwf	6
  5598  0239  3001               	movlw	1	; select bank2/3
  5599  023A  0087               	movwf	7
  5600  023B  1901               	btfsc	1,2
  5601  023C  2A5E               	goto	l9921
  5602                           
  5603                           ;Switch_B1.c: 139: Sw->DebounceTime++;
  5604  023D  3001               	movlw	1
  5605  023E  00AA               	movwf	??_setSw_Main
  5606  023F  086D               	movf	_Sw,w
  5607  0240  3E02               	addlw	2
  5608  0241  0086               	movwf	6
  5609  0242  3001               	movlw	1	; select bank2/3
  5610  0243  0087               	movwf	7
  5611  0244  082A               	movf	??_setSw_Main,w
  5612  0245  0781               	addwf	1,f
  5613                           
  5614                           ;Switch_B1.c: 140: if (Sw->DebounceTime >= (60 / 20)) {
  5615  0246  086D               	movf	_Sw,w
  5616  0247  3E02               	addlw	2
  5617  0248  0086               	movwf	6
  5618  0249  3001               	movlw	1	; select bank2/3
  5619  024A  0087               	movwf	7
  5620  024B  3003               	movlw	3
  5621  024C  0201               	subwf	1,w
  5622  024D  1C03               	skipc
  5623  024E  0008               	return
  5624                           
  5625                           ;Switch_B1.c: 141: Sw->DebounceTime = 0;
  5626  024F  086D               	movf	_Sw,w
  5627  0250  3E02               	addlw	2
  5628  0251  0086               	movwf	6
  5629  0252  3001               	movlw	1	; select bank2/3
  5630  0253  0087               	movwf	7
  5631  0254  0181               	clrf	1
  5632                           
  5633                           ;Switch_B1.c: 142: Sw->Debounce = 1;
  5634  0255  086D               	movf	_Sw,w
  5635  0256  0086               	movwf	6
  5636  0257  3001               	movlw	1	; select bank2/3
  5637  0258  0087               	movwf	7
  5638  0259  1501               	bsf	1,2
  5639                           
  5640                           ;Switch_B1.c: 145: setDimmerLights_SwOn(sw);
  5641  025A  082C               	movf	setSw_Main@sw,w
  5642  025B  3196  262D         	fcall	_setDimmerLights_SwOn
  5643                           
  5644                           ;Switch_B1.c: 148: }
  5645                           ;Switch_B1.c: 149: } else {
  5646  025D  0008               	return
  5647  025E                     l9921:	
  5648                           
  5649                           ;Switch_B1.c: 150: if (Sw->Hold1 == 0) {
  5650  025E  0020               	movlb	0	; select bank0
  5651  025F  086D               	movf	_Sw,w
  5652  0260  0086               	movwf	6
  5653  0261  3001               	movlw	1	; select bank2/3
  5654  0262  0087               	movwf	7
  5655  0263  1981               	btfsc	1,3
  5656  0264  2A90               	goto	l9931
  5657                           
  5658                           ;Switch_B1.c: 151: Sw->Hold1Time++;
  5659  0265  086D               	movf	_Sw,w
  5660  0266  3E03               	addlw	3
  5661  0267  0086               	movwf	6
  5662  0268  3001               	movlw	1	; select bank2/3
  5663  0269  0087               	movwf	7
  5664  026A  3001               	movlw	1
  5665  026B  0781               	addwf	1,f
  5666  026C  3141               	addfsr 1,1
  5667  026D  1803               	skipnc
  5668  026E  0A81               	incf	1,f
  5669                           
  5670                           ;Switch_B1.c: 152: if (Sw->Hold1Time >= (1500 / 20)) {
  5671  026F  086D               	movf	_Sw,w
  5672  0270  3E03               	addlw	3
  5673  0271  0086               	movwf	6
  5674  0272  3001               	movlw	1	; select bank2/3
  5675  0273  0087               	movwf	7
  5676  0274  3F40               	moviw [0]fsr1
  5677  0275  00AA               	movwf	??_setSw_Main
  5678  0276  3F41               	moviw [1]fsr1
  5679  0277  00AB               	movwf	??_setSw_Main+1
  5680  0278  3000               	movlw	0
  5681  0279  022B               	subwf	??_setSw_Main+1,w
  5682  027A  304B               	movlw	75
  5683  027B  1903               	skipnz
  5684  027C  022A               	subwf	??_setSw_Main,w
  5685  027D  1C03               	skipc
  5686  027E  0008               	return
  5687                           
  5688                           ;Switch_B1.c: 153: Sw->Hold1Time = 0;
  5689  027F  086D               	movf	_Sw,w
  5690  0280  3E03               	addlw	3
  5691  0281  0086               	movwf	6
  5692  0282  3001               	movlw	1	; select bank2/3
  5693  0283  0087               	movwf	7
  5694  0284  3000               	movlw	0
  5695  0285  3FC0               	movwi [0]fsr1
  5696  0286  3FC1               	movwi [1]fsr1
  5697                           
  5698                           ;Switch_B1.c: 156: Sw->Hold1 = 1;
  5699  0287  086D               	movf	_Sw,w
  5700  0288  0086               	movwf	6
  5701  0289  3001               	movlw	1	; select bank2/3
  5702  028A  0087               	movwf	7
  5703  028B  1581               	bsf	1,3
  5704                           
  5705                           ;Switch_B1.c: 157: setDimmerLights_DimmingOn(sw);
  5706  028C  082C               	movf	setSw_Main@sw,w
  5707  028D  3191  2108         	fcall	_setDimmerLights_DimmingOn
  5708                           
  5709                           ;Switch_B1.c: 160: }
  5710                           ;Switch_B1.c: 161: } else {
  5711  028F  0008               	return
  5712  0290                     l9931:	
  5713                           
  5714                           ;Switch_B1.c: 162: if (Sw->Hold2 == 0) {
  5715  0290  0020               	movlb	0	; select bank0
  5716  0291  086D               	movf	_Sw,w
  5717  0292  0086               	movwf	6
  5718  0293  3001               	movlw	1	; select bank2/3
  5719  0294  0087               	movwf	7
  5720  0295  1A01               	btfsc	1,4
  5721  0296  2ACE               	goto	l9945
  5722                           
  5723                           ;Switch_B1.c: 163: Sw->Hold2Time++;
  5724  0297  086D               	movf	_Sw,w
  5725  0298  3E05               	addlw	5
  5726  0299  0086               	movwf	6
  5727  029A  3001               	movlw	1	; select bank2/3
  5728  029B  0087               	movwf	7
  5729  029C  3001               	movlw	1
  5730  029D  0781               	addwf	1,f
  5731  029E  3141               	addfsr 1,1
  5732  029F  1803               	skipnc
  5733  02A0  0A81               	incf	1,f
  5734                           
  5735                           ;Switch_B1.c: 164: if (Sw->Hold2Time >= (1500 / 20)) {
  5736  02A1  086D               	movf	_Sw,w
  5737  02A2  3E05               	addlw	5
  5738  02A3  0086               	movwf	6
  5739  02A4  3001               	movlw	1	; select bank2/3
  5740  02A5  0087               	movwf	7
  5741  02A6  3F40               	moviw [0]fsr1
  5742  02A7  00AA               	movwf	??_setSw_Main
  5743  02A8  3F41               	moviw [1]fsr1
  5744  02A9  00AB               	movwf	??_setSw_Main+1
  5745  02AA  3000               	movlw	0
  5746  02AB  022B               	subwf	??_setSw_Main+1,w
  5747  02AC  304B               	movlw	75
  5748  02AD  1903               	skipnz
  5749  02AE  022A               	subwf	??_setSw_Main,w
  5750  02AF  1C03               	skipc
  5751  02B0  0008               	return
  5752                           
  5753                           ;Switch_B1.c: 165: Sw->Hold2Time = 0;
  5754  02B1  086D               	movf	_Sw,w
  5755  02B2  3E05               	addlw	5
  5756  02B3  0086               	movwf	6
  5757  02B4  3001               	movlw	1	; select bank2/3
  5758  02B5  0087               	movwf	7
  5759  02B6  3000               	movlw	0
  5760  02B7  3FC0               	movwi [0]fsr1
  5761  02B8  3FC1               	movwi [1]fsr1
  5762                           
  5763                           ;Switch_B1.c: 166: Sw->Hold2 = 1;
  5764  02B9  086D               	movf	_Sw,w
  5765  02BA  0086               	movwf	6
  5766  02BB  3001               	movlw	1	; select bank2/3
  5767  02BC  0087               	movwf	7
  5768  02BD  1601               	bsf	1,4
  5769                           
  5770                           ;Switch_B1.c: 169: setRF_Learn(1);
  5771  02BE  3001               	movlw	1
  5772  02BF  319C  24F2  3181   	fcall	_setRF_Learn
  5773                           
  5774                           ;Switch_B1.c: 170: if (myMain.First == 1) {
  5775  02C2  0022               	movlb	2	; select bank2
  5776  02C3  1EA0               	btfss	_myMain^(0+256),5
  5777  02C4  0008               	return
  5778                           
  5779                           ;Switch_B1.c: 171: setBuz(2, 100);
  5780  02C5  3064               	movlw	100
  5781  02C6  0020               	movlb	0	; select bank0
  5782  02C7  00A4               	movwf	setBuz@time
  5783  02C8  3000               	movlw	0
  5784  02C9  00A5               	movwf	setBuz@time+1
  5785  02CA  3002               	movlw	2
  5786  02CB  3195  2586         	fcall	_setBuz
  5787                           
  5788                           ;Switch_B1.c: 172: }
  5789                           ;Switch_B1.c: 176: }
  5790                           ;Switch_B1.c: 177: } else {
  5791  02CD  0008               	return
  5792  02CE                     l9945:	
  5793                           
  5794                           ;Switch_B1.c: 178: if (Sw->Hold3 == 0) {
  5795  02CE  0020               	movlb	0	; select bank0
  5796  02CF  086D               	movf	_Sw,w
  5797  02D0  0086               	movwf	6
  5798  02D1  3001               	movlw	1	; select bank2/3
  5799  02D2  0087               	movwf	7
  5800  02D3  1A81               	btfsc	1,5
  5801  02D4  0008               	return
  5802                           
  5803                           ;Switch_B1.c: 179: Sw->Hold3Time++;
  5804  02D5  086D               	movf	_Sw,w
  5805  02D6  3E07               	addlw	7
  5806  02D7  0086               	movwf	6
  5807  02D8  3001               	movlw	1	; select bank2/3
  5808  02D9  0087               	movwf	7
  5809  02DA  3001               	movlw	1
  5810  02DB  0781               	addwf	1,f
  5811  02DC  3141               	addfsr 1,1
  5812  02DD  1803               	skipnc
  5813  02DE  0A81               	incf	1,f
  5814                           
  5815                           ;Switch_B1.c: 180: if (Sw->Hold3Time >= (3000/ 20)) {
  5816  02DF  086D               	movf	_Sw,w
  5817  02E0  3E07               	addlw	7
  5818  02E1  0086               	movwf	6
  5819  02E2  3001               	movlw	1	; select bank2/3
  5820  02E3  0087               	movwf	7
  5821  02E4  3F40               	moviw [0]fsr1
  5822  02E5  00AA               	movwf	??_setSw_Main
  5823  02E6  3F41               	moviw [1]fsr1
  5824  02E7  00AB               	movwf	??_setSw_Main+1
  5825  02E8  3000               	movlw	0
  5826  02E9  022B               	subwf	??_setSw_Main+1,w
  5827  02EA  3096               	movlw	150
  5828  02EB  1903               	skipnz
  5829  02EC  022A               	subwf	??_setSw_Main,w
  5830  02ED  1C03               	skipc
  5831  02EE  0008               	return
  5832                           
  5833                           ;Switch_B1.c: 181: Sw->Hold3Time = 0;
  5834  02EF  086D               	movf	_Sw,w
  5835  02F0  3E07               	addlw	7
  5836  02F1  0086               	movwf	6
  5837  02F2  3001               	movlw	1	; select bank2/3
  5838  02F3  0087               	movwf	7
  5839  02F4  3000               	movlw	0
  5840  02F5  3FC0               	movwi [0]fsr1
  5841  02F6  3FC1               	movwi [1]fsr1
  5842                           
  5843                           ;Switch_B1.c: 182: Sw->Hold3 = 1;
  5844  02F7  086D               	movf	_Sw,w
  5845  02F8  0086               	movwf	6
  5846  02F9  3001               	movlw	1	; select bank2/3
  5847  02FA  0087               	movwf	7
  5848  02FB  1681               	bsf	1,5
  5849                           
  5850                           ;Switch_B1.c: 185: setRF_Learn(0);
  5851  02FC  3000               	movlw	0
  5852  02FD  319C  24F2         	fcall	_setRF_Learn
  5853                           
  5854                           ;Switch_B1.c: 188: }
  5855                           ;Switch_B1.c: 189: }
  5856                           ;Switch_B1.c: 190: }
  5857                           ;Switch_B1.c: 191: }
  5858                           ;Switch_B1.c: 192: }
  5859                           ;Switch_B1.c: 193: } else {
  5860  02FF  0008               	return
  5861  0300                     l9955:	
  5862                           
  5863                           ;Switch_B1.c: 194: if (Sw->Debounce == 1) {
  5864  0300  0020               	movlb	0	; select bank0
  5865  0301  086D               	movf	_Sw,w
  5866  0302  0086               	movwf	6
  5867  0303  3001               	movlw	1	; select bank2/3
  5868  0304  0087               	movwf	7
  5869  0305  1D01               	btfss	1,2
  5870  0306  0008               	return
  5871                           
  5872                           ;Switch_B1.c: 195: Sw->DebounceTime++;
  5873  0307  3001               	movlw	1
  5874  0308  00AA               	movwf	??_setSw_Main
  5875  0309  086D               	movf	_Sw,w
  5876  030A  3E02               	addlw	2
  5877  030B  0086               	movwf	6
  5878  030C  3001               	movlw	1	; select bank2/3
  5879  030D  0087               	movwf	7
  5880  030E  082A               	movf	??_setSw_Main,w
  5881  030F  0781               	addwf	1,f
  5882                           
  5883                           ;Switch_B1.c: 196: if (Sw->DebounceTime >= (60 / 20)) {
  5884  0310  086D               	movf	_Sw,w
  5885  0311  3E02               	addlw	2
  5886  0312  0086               	movwf	6
  5887  0313  3001               	movlw	1	; select bank2/3
  5888  0314  0087               	movwf	7
  5889  0315  3003               	movlw	3
  5890  0316  0201               	subwf	1,w
  5891  0317  1C03               	skipc
  5892  0318  0008               	return
  5893                           
  5894                           ;Switch_B1.c: 197: Sw->DebounceTime = 0;
  5895  0319  086D               	movf	_Sw,w
  5896  031A  3E02               	addlw	2
  5897  031B  0086               	movwf	6
  5898  031C  3001               	movlw	1	; select bank2/3
  5899  031D  0087               	movwf	7
  5900  031E  0181               	clrf	1
  5901                           
  5902                           ;Switch_B1.c: 198: Sw->Debounce = 0;
  5903  031F  086D               	movf	_Sw,w
  5904  0320  0086               	movwf	6
  5905  0321  3001               	movlw	1	; select bank2/3
  5906  0322  0087               	movwf	7
  5907  0323  1101               	bcf	1,2
  5908                           
  5909                           ;Switch_B1.c: 199: Sw->Hold1Time = 0;
  5910  0324  086D               	movf	_Sw,w
  5911  0325  3E03               	addlw	3
  5912  0326  0086               	movwf	6
  5913  0327  3001               	movlw	1	; select bank2/3
  5914  0328  0087               	movwf	7
  5915  0329  3000               	movlw	0
  5916  032A  3FC0               	movwi [0]fsr1
  5917  032B  3FC1               	movwi [1]fsr1
  5918                           
  5919                           ;Switch_B1.c: 200: Sw->Hold1 = 0;
  5920  032C  086D               	movf	_Sw,w
  5921  032D  0086               	movwf	6
  5922  032E  3001               	movlw	1	; select bank2/3
  5923  032F  0087               	movwf	7
  5924  0330  1181               	bcf	1,3
  5925                           
  5926                           ;Switch_B1.c: 201: Sw->Hold2Time = 0;
  5927  0331  086D               	movf	_Sw,w
  5928  0332  3E05               	addlw	5
  5929  0333  0086               	movwf	6
  5930  0334  3001               	movlw	1	; select bank2/3
  5931  0335  0087               	movwf	7
  5932  0336  3000               	movlw	0
  5933  0337  3FC0               	movwi [0]fsr1
  5934  0338  3FC1               	movwi [1]fsr1
  5935                           
  5936                           ;Switch_B1.c: 202: Sw->Hold2 = 0;
  5937  0339  086D               	movf	_Sw,w
  5938  033A  0086               	movwf	6
  5939  033B  3001               	movlw	1	; select bank2/3
  5940  033C  0087               	movwf	7
  5941  033D  1201               	bcf	1,4
  5942                           
  5943                           ;Switch_B1.c: 203: Sw->Hold3Time = 0;
  5944  033E  086D               	movf	_Sw,w
  5945  033F  3E07               	addlw	7
  5946  0340  0086               	movwf	6
  5947  0341  3001               	movlw	1	; select bank2/3
  5948  0342  0087               	movwf	7
  5949  0343  3000               	movlw	0
  5950  0344  3FC0               	movwi [0]fsr1
  5951  0345  3FC1               	movwi [1]fsr1
  5952                           
  5953                           ;Switch_B1.c: 204: Sw->Hold3 = 0;
  5954  0346  086D               	movf	_Sw,w
  5955  0347  0086               	movwf	6
  5956  0348  3001               	movlw	1	; select bank2/3
  5957  0349  0087               	movwf	7
  5958  034A  1281               	bcf	1,5
  5959                           
  5960                           ;Switch_B1.c: 206: setDimmerLights_SwOff(sw);
  5961  034B  082C               	movf	setSw_Main@sw,w
  5962  034C  3192  229F  3181   	fcall	_setDimmerLights_SwOff
  5963                           
  5964                           ;Switch_B1.c: 210: setRF_Learn(0);
  5965  034F  3000               	movlw	0
  5966  0350  319C  24F2         	fcall	_setRF_Learn
  5967                           
  5968                           ;Switch_B1.c: 212: }
  5969                           ;Switch_B1.c: 213: }
  5970                           ;Switch_B1.c: 214: }
  5971                           ;Switch_B1.c: 215: } else {
  5972  0352  0008               	return
  5973  0353                     l2810:	
  5974                           
  5975                           ;Switch_B1.c: 216: if (myMain.PowerON == 1) {
  5976  0353  0022               	movlb	2	; select bank2
  5977  0354  1C20               	btfss	_myMain^(0+256),0
  5978  0355  0008               	return
  5979                           
  5980                           ;Switch_B1.c: 217: Sw->Enable = 1;
  5981  0356  0020               	movlb	0	; select bank0
  5982  0357  086D               	movf	_Sw,w
  5983  0358  0086               	movwf	6
  5984  0359  3001               	movlw	1	; select bank2/3
  5985  035A  0087               	movwf	7
  5986  035B  1401               	bsf	1,0
  5987  035C  0008               	return
  5988  035D                     __end_of_setSw_Main:	
  5989                           
  5990                           	psect	text14
  5991  1CF2                     __ptext14:	
  5992 ;; *************** function _setRF_Learn *****************
  5993 ;; Defined at:
  5994 ;;		line 33 in file "../src/RF_Control_B1.c"
  5995 ;; Parameters:    Size  Location     Type
  5996 ;;  command         1    wreg     unsigned char 
  5997 ;; Auto vars:     Size  Location     Type
  5998 ;;  command         1    3[COMMON] unsigned char 
  5999 ;; Return value:  Size  Location     Type
  6000 ;;		None               void
  6001 ;; Registers used:
  6002 ;;		wreg, status,2, status,0
  6003 ;; Tracked objects:
  6004 ;;		On entry : 0/0
  6005 ;;		On exit  : 0/0
  6006 ;;		Unchanged: 0/0
  6007 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6008 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6009 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6010 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6011 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6012 ;;Total ram usage:        2 bytes
  6013 ;; Hardware stack levels used:    1
  6014 ;; Hardware stack levels required when called:    3
  6015 ;; This function calls:
  6016 ;;		Nothing
  6017 ;; This function is called by:
  6018 ;;		_setSw_Main
  6019 ;; This function uses a non-reentrant model
  6020 ;;
  6021                           
  6022                           
  6023                           ;psect for function _setRF_Learn
  6024  1CF2                     _setRF_Learn:	
  6025                           
  6026                           ;incstack = 0
  6027                           ; Regs used in _setRF_Learn: [wreg+status,2+status,0]
  6028                           ;setRF_Learn@command stored from wreg
  6029  1CF2  00F3               	movwf	setRF_Learn@command
  6030                           
  6031                           ;RF_Control_B1.c: 34: RF1.Learn = command == 1 ? 1 : 0;
  6032  1CF3  0873               	movf	setRF_Learn@command,w
  6033  1CF4  3A01               	xorlw	1
  6034  1CF5  3000               	movlw	0
  6035  1CF6  1903               	skipnz
  6036  1CF7  3001               	movlw	1
  6037  1CF8  00F2               	movwf	??_setRF_Learn
  6038  1CF9  0EF2               	swapf	??_setRF_Learn,f
  6039  1CFA  0DF2               	rlf	??_setRF_Learn,f
  6040  1CFB  0DF2               	rlf	??_setRF_Learn,f
  6041  1CFC  0021               	movlb	1	; select bank1
  6042  1CFD  0820               	movf	_RF1^(0+128),w
  6043  1CFE  0672               	xorwf	??_setRF_Learn,w
  6044  1CFF  39BF               	andlw	-65
  6045  1D00  0672               	xorwf	??_setRF_Learn,w
  6046  1D01  00A0               	movwf	_RF1^(0+128)
  6047  1D02  0008               	return
  6048  1D03                     __end_of_setRF_Learn:	
  6049                           
  6050                           	psect	text15
  6051  1108                     __ptext15:	
  6052 ;; *************** function _setDimmerLights_DimmingOn *****************
  6053 ;; Defined at:
  6054 ;;		line 711 in file "../src/Dimmer_B1.c"
  6055 ;; Parameters:    Size  Location     Type
  6056 ;;  sw              1    wreg     unsigned char 
  6057 ;; Auto vars:     Size  Location     Type
  6058 ;;  sw              1    4[COMMON] unsigned char 
  6059 ;; Return value:  Size  Location     Type
  6060 ;;		None               void
  6061 ;; Registers used:
  6062 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6063 ;; Tracked objects:
  6064 ;;		On entry : 0/0
  6065 ;;		On exit  : 0/0
  6066 ;;		Unchanged: 0/0
  6067 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6068 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6069 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6070 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6071 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6072 ;;Total ram usage:        1 bytes
  6073 ;; Hardware stack levels used:    1
  6074 ;; Hardware stack levels required when called:    4
  6075 ;; This function calls:
  6076 ;;		_DimmerLights_SelectPointer
  6077 ;; This function is called by:
  6078 ;;		_setSw_Main
  6079 ;; This function uses a non-reentrant model
  6080 ;;
  6081                           
  6082                           
  6083                           ;psect for function _setDimmerLights_DimmingOn
  6084  1108                     _setDimmerLights_DimmingOn:	
  6085                           
  6086                           ;incstack = 0
  6087                           ; Regs used in _setDimmerLights_DimmingOn: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cs
      +                          tack]
  6088                           ;setDimmerLights_DimmingOn@sw stored from wreg
  6089  1108  00F4               	movwf	setDimmerLights_DimmingOn@sw
  6090                           
  6091                           ;Dimmer_B1.c: 717: DimmerLights_SelectPointer(sw);
  6092  1109  0874               	movf	setDimmerLights_DimmingOn@sw,w
  6093  110A  3190  2066  3191   	fcall	_DimmerLights_SelectPointer
  6094                           
  6095                           ;Dimmer_B1.c: 718: if (DimmerLights->Trigger == 0) {
  6096  110D  087B               	movf	_DimmerLights,w
  6097  110E  0086               	movwf	6
  6098  110F  3001               	movlw	1	; select bank2/3
  6099  1110  0087               	movwf	7
  6100  1111  1881               	btfsc	1,1
  6101  1112  0008               	return
  6102                           
  6103                           ;Dimmer_B1.c: 719: if (DimmerLights->SwFlag == 1) {
  6104  1113  087B               	movf	_DimmerLights,w
  6105  1114  0086               	movwf	6
  6106  1115  3001               	movlw	1	; select bank2/3
  6107  1116  0087               	movwf	7
  6108  1117  1C01               	btfss	1,0
  6109  1118  0008               	return
  6110                           
  6111                           ;Dimmer_B1.c: 720: DimmerLights->Status = 1;
  6112  1119  0A7B               	incf	_DimmerLights,w
  6113  111A  0086               	movwf	6
  6114  111B  3001               	movlw	1	; select bank2/3
  6115  111C  0087               	movwf	7
  6116  111D  1401               	bsf	1,0
  6117                           
  6118                           ;Dimmer_B1.c: 722: DimmerLights->DimmingSwFlag = 1;
  6119  111E  087B               	movf	_DimmerLights,w
  6120  111F  0086               	movwf	6
  6121  1120  3001               	movlw	1	; select bank2/3
  6122  1121  0087               	movwf	7
  6123  1122  1581               	bsf	1,3
  6124                           
  6125                           ;Dimmer_B1.c: 723: DimmerLights->DimmingTrigger = 1;
  6126  1123  087B               	movf	_DimmerLights,w
  6127  1124  0086               	movwf	6
  6128  1125  3001               	movlw	1	; select bank2/3
  6129  1126  0087               	movwf	7
  6130  1127  1601               	bsf	1,4
  6131                           
  6132                           ;Dimmer_B1.c: 724: DimmerLights->DimmingSwitch = 1;
  6133  1128  087B               	movf	_DimmerLights,w
  6134  1129  0086               	movwf	6
  6135  112A  3001               	movlw	1	; select bank2/3
  6136  112B  0087               	movwf	7
  6137  112C  1681               	bsf	1,5
  6138  112D  0008               	return
  6139  112E                     __end_of_setDimmerLights_DimmingOn:	
  6140                           
  6141                           	psect	text16
  6142  1F5B                     __ptext16:	
  6143 ;; *************** function _getSw_KeyStatus *****************
  6144 ;; Defined at:
  6145 ;;		line 223 in file "../src/Switch_B1.c"
  6146 ;; Parameters:    Size  Location     Type
  6147 ;;  sw              1    wreg     unsigned char 
  6148 ;; Auto vars:     Size  Location     Type
  6149 ;;  sw              1    6[COMMON] unsigned char 
  6150 ;;  status          1    5[COMMON] unsigned char 
  6151 ;; Return value:  Size  Location     Type
  6152 ;;                  1    wreg      unsigned char 
  6153 ;; Registers used:
  6154 ;;		wreg, status,2
  6155 ;; Tracked objects:
  6156 ;;		On entry : 0/0
  6157 ;;		On exit  : 0/0
  6158 ;;		Unchanged: 0/0
  6159 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6160 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6161 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6162 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6163 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6164 ;;Total ram usage:        5 bytes
  6165 ;; Hardware stack levels used:    1
  6166 ;; Hardware stack levels required when called:    3
  6167 ;; This function calls:
  6168 ;;		Nothing
  6169 ;; This function is called by:
  6170 ;;		_setSw_Main
  6171 ;; This function uses a non-reentrant model
  6172 ;;
  6173                           
  6174                           
  6175                           ;psect for function _getSw_KeyStatus
  6176  1F5B                     _getSw_KeyStatus:	
  6177                           
  6178                           ;incstack = 0
  6179                           ; Regs used in _getSw_KeyStatus: [wreg+status,2]
  6180                           ;getSw_KeyStatus@sw stored from wreg
  6181  1F5B  00F6               	movwf	getSw_KeyStatus@sw
  6182                           
  6183                           ;Switch_B1.c: 224: char status = 0;
  6184  1F5C  01F5               	clrf	getSw_KeyStatus@status
  6185                           
  6186                           ;Switch_B1.c: 236: if (sw == 1) {
  6187  1F5D  0876               	movf	getSw_KeyStatus@sw,w
  6188  1F5E  3A01               	xorlw	1
  6189  1F5F  1D03               	skipz
  6190  1F60  2F6A               	goto	l7653
  6191                           
  6192                           ;Switch_B1.c: 237: status = RA6 == 1 || RA4 == 1 ? 1 : 0;
  6193  1F61  01F3               	clrf	_getSw_KeyStatus$6400
  6194  1F62  0AF3               	incf	_getSw_KeyStatus$6400,f
  6195  1F63  0020               	movlb	0	; select bank0
  6196  1F64  1F0C               	btfss	12,6	;volatile
  6197  1F65  1A0C               	btfsc	12,4	;volatile
  6198  1F66  2F68               	goto	l7651
  6199  1F67  01F3               	clrf	_getSw_KeyStatus$6400
  6200  1F68                     l7651:	
  6201  1F68  0873               	movf	_getSw_KeyStatus$6400,w
  6202  1F69  2F76               	goto	L2
  6203  1F6A                     l7653:	
  6204                           ;Switch_B1.c: 238: } else if (sw == 2) {
  6205                           
  6206  1F6A  0876               	movf	getSw_KeyStatus@sw,w
  6207  1F6B  3A02               	xorlw	2
  6208  1F6C  1D03               	skipz
  6209  1F6D  2F79               	goto	l7663
  6210                           
  6211                           ;Switch_B1.c: 239: status = RA0 == 1 || RB1 == 1 ? 1 : 0;
  6212  1F6E  01F4               	clrf	_getSw_KeyStatus$6401
  6213  1F6F  0AF4               	incf	_getSw_KeyStatus$6401,f
  6214  1F70  0020               	movlb	0	; select bank0
  6215  1F71  1C0C               	btfss	12,0	;volatile
  6216  1F72  188D               	btfsc	13,1	;volatile
  6217  1F73  2F75               	goto	l7661
  6218  1F74  01F4               	clrf	_getSw_KeyStatus$6401
  6219  1F75                     l7661:	
  6220  1F75  0874               	movf	_getSw_KeyStatus$6401,w
  6221  1F76                     L2:	
  6222  1F76  00F2               	movwf	??_getSw_KeyStatus
  6223  1F77  0872               	movf	??_getSw_KeyStatus,w
  6224  1F78  00F5               	movwf	getSw_KeyStatus@status
  6225  1F79                     l7663:	
  6226                           
  6227                           ;Switch_B1.c: 240: }
  6228                           ;Switch_B1.c: 247: return status;
  6229  1F79  0875               	movf	getSw_KeyStatus@status,w
  6230  1F7A  0008               	return
  6231  1F7B                     __end_of_getSw_KeyStatus:	
  6232                           
  6233                           	psect	text17
  6234  1DBB                     __ptext17:	
  6235 ;; *************** function _SwPointSelect *****************
  6236 ;; Defined at:
  6237 ;;		line 25 in file "../src/Switch_B1.c"
  6238 ;; Parameters:    Size  Location     Type
  6239 ;;  sw              1    wreg     unsigned char 
  6240 ;; Auto vars:     Size  Location     Type
  6241 ;;  sw              1    3[COMMON] unsigned char 
  6242 ;; Return value:  Size  Location     Type
  6243 ;;		None               void
  6244 ;; Registers used:
  6245 ;;		wreg
  6246 ;; Tracked objects:
  6247 ;;		On entry : 0/0
  6248 ;;		On exit  : 0/0
  6249 ;;		Unchanged: 0/0
  6250 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6251 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6252 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6253 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6254 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6255 ;;Total ram usage:        2 bytes
  6256 ;; Hardware stack levels used:    1
  6257 ;; Hardware stack levels required when called:    3
  6258 ;; This function calls:
  6259 ;;		Nothing
  6260 ;; This function is called by:
  6261 ;;		_setSw_Main
  6262 ;; This function uses a non-reentrant model
  6263 ;;
  6264                           
  6265                           
  6266                           ;psect for function _SwPointSelect
  6267  1DBB                     _SwPointSelect:	
  6268                           
  6269                           ;incstack = 0
  6270                           ; Regs used in _SwPointSelect: [wreg]
  6271                           ;SwPointSelect@sw stored from wreg
  6272  1DBB  00F3               	movwf	SwPointSelect@sw
  6273                           
  6274                           ;Switch_B1.c: 28: if (sw == 1) {
  6275  1DBC  0873               	movf	SwPointSelect@sw,w
  6276  1DBD  3A01               	xorlw	1
  6277  1DBE  1D03               	skipz
  6278  1DBF  2DC6               	goto	l7637
  6279                           
  6280                           ;Switch_B1.c: 29: Sw = &Sw1;
  6281  1DC0  30BE               	movlw	_Sw1& (0+255)
  6282  1DC1  00F2               	movwf	??_SwPointSelect
  6283  1DC2  0872               	movf	??_SwPointSelect,w
  6284  1DC3  0020               	movlb	0	; select bank0
  6285  1DC4  00ED               	movwf	_Sw
  6286                           
  6287                           ;Switch_B1.c: 30: }
  6288  1DC5  0008               	return
  6289  1DC6                     l7637:	
  6290                           
  6291                           ;Switch_B1.c: 33: else if (sw == 2) {
  6292  1DC6  0873               	movf	SwPointSelect@sw,w
  6293  1DC7  3A02               	xorlw	2
  6294  1DC8  1D03               	skipz
  6295  1DC9  0008               	return
  6296                           
  6297                           ;Switch_B1.c: 34: Sw = &Sw2;
  6298  1DCA  30C7               	movlw	_Sw2& (0+255)
  6299  1DCB  00F2               	movwf	??_SwPointSelect
  6300  1DCC  0872               	movf	??_SwPointSelect,w
  6301  1DCD  0020               	movlb	0	; select bank0
  6302  1DCE  00ED               	movwf	_Sw
  6303  1DCF  0008               	return
  6304  1DD0                     __end_of_SwPointSelect:	
  6305                           
  6306                           	psect	text18
  6307  1BD0                     __ptext18:	
  6308 ;; *************** function _Switch_Initialization *****************
  6309 ;; Defined at:
  6310 ;;		line 46 in file "../src/Switch_B1.c"
  6311 ;; Parameters:    Size  Location     Type
  6312 ;;		None
  6313 ;; Auto vars:     Size  Location     Type
  6314 ;;		None
  6315 ;; Return value:  Size  Location     Type
  6316 ;;		None               void
  6317 ;; Registers used:
  6318 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6319 ;; Tracked objects:
  6320 ;;		On entry : 0/0
  6321 ;;		On exit  : 0/0
  6322 ;;		Unchanged: 0/0
  6323 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6324 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6325 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6326 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6327 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6328 ;;Total ram usage:        0 bytes
  6329 ;; Hardware stack levels used:    1
  6330 ;; Hardware stack levels required when called:    6
  6331 ;; This function calls:
  6332 ;;		_TouchPower
  6333 ;;		_setSw_Initialization
  6334 ;; This function is called by:
  6335 ;;		_main
  6336 ;; This function uses a non-reentrant model
  6337 ;;
  6338                           
  6339                           
  6340                           ;psect for function _Switch_Initialization
  6341  1BD0                     _Switch_Initialization:	
  6342                           
  6343                           ;Switch_B1.c: 47: TouchPower();
  6344                           
  6345                           ;incstack = 0
  6346                           ; Regs used in _Switch_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  6347  1BD0  319D  25A6  319B   	fcall	_TouchPower
  6348                           
  6349                           ;Switch_B1.c: 49: WPUB1 = 0;
  6350  1BD3  0024               	movlb	4	; select bank4
  6351  1BD4  108D               	bcf	13,1	;volatile
  6352                           
  6353                           ;Switch_B1.c: 58: setSw_Initialization(1);
  6354  1BD5  3001               	movlw	1
  6355  1BD6  319B  2316  319B   	fcall	_setSw_Initialization
  6356                           
  6357                           ;Switch_B1.c: 62: setSw_Initialization(2);
  6358  1BD9  3002               	movlw	2
  6359  1BDA  319B  2316         	fcall	_setSw_Initialization
  6360  1BDC  0008               	return
  6361  1BDD                     __end_of_Switch_Initialization:	
  6362                           
  6363                           	psect	text19
  6364  1B16                     __ptext19:	
  6365 ;; *************** function _setSw_Initialization *****************
  6366 ;; Defined at:
  6367 ;;		line 93 in file "../src/Switch_B1.c"
  6368 ;; Parameters:    Size  Location     Type
  6369 ;;  sw              1    wreg     unsigned char 
  6370 ;; Auto vars:     Size  Location     Type
  6371 ;;  sw              1    6[COMMON] unsigned char 
  6372 ;; Return value:  Size  Location     Type
  6373 ;;		None               void
  6374 ;; Registers used:
  6375 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6376 ;; Tracked objects:
  6377 ;;		On entry : 0/0
  6378 ;;		On exit  : 0/0
  6379 ;;		Unchanged: 0/0
  6380 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6381 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6382 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6383 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6384 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6385 ;;Total ram usage:        1 bytes
  6386 ;; Hardware stack levels used:    1
  6387 ;; Hardware stack levels required when called:    5
  6388 ;; This function calls:
  6389 ;;		_setLED
  6390 ;; This function is called by:
  6391 ;;		_Switch_Initialization
  6392 ;; This function uses a non-reentrant model
  6393 ;;
  6394                           
  6395                           
  6396                           ;psect for function _setSw_Initialization
  6397  1B16                     _setSw_Initialization:	
  6398                           
  6399                           ;incstack = 0
  6400                           ; Regs used in _setSw_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6401                           ;setSw_Initialization@sw stored from wreg
  6402  1B16  00F6               	movwf	setSw_Initialization@sw
  6403                           
  6404                           ;Switch_B1.c: 94: setLED(sw, 1);
  6405  1B17  01F4               	clrf	setLED@command
  6406  1B18  0AF4               	incf	setLED@command,f
  6407  1B19  0876               	movf	setSw_Initialization@sw,w
  6408  1B1A  3197  2741         	fcall	_setLED
  6409  1B1C  0008               	return
  6410  1B1D                     __end_of_setSw_Initialization:	
  6411                           
  6412                           	psect	text20
  6413  1DA6                     __ptext20:	
  6414 ;; *************** function _TouchPower *****************
  6415 ;; Defined at:
  6416 ;;		line 10 in file "../src/Switch_B1.c"
  6417 ;; Parameters:    Size  Location     Type
  6418 ;;		None
  6419 ;; Auto vars:     Size  Location     Type
  6420 ;;		None
  6421 ;; Return value:  Size  Location     Type
  6422 ;;		None               void
  6423 ;; Registers used:
  6424 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6425 ;; Tracked objects:
  6426 ;;		On entry : 0/0
  6427 ;;		On exit  : 0/0
  6428 ;;		Unchanged: 0/0
  6429 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6430 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6431 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6432 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6433 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6434 ;;Total ram usage:        0 bytes
  6435 ;; Hardware stack levels used:    1
  6436 ;; Hardware stack levels required when called:    4
  6437 ;; This function calls:
  6438 ;;		_Timeout_Counter
  6439 ;;		_set_TimeoutCleared
  6440 ;; This function is called by:
  6441 ;;		_Switch_Initialization
  6442 ;;		_Switch_Main
  6443 ;; This function uses a non-reentrant model
  6444 ;;
  6445                           
  6446                           
  6447                           ;psect for function _TouchPower
  6448  1DA6                     _TouchPower:	
  6449                           
  6450                           ;Switch_B1.c: 11: if (myMain.PowerON == 1) {
  6451                           
  6452                           ;incstack = 0
  6453                           ; Regs used in _TouchPower: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6454  1DA6  0022               	movlb	2	; select bank2
  6455  1DA7  1C20               	btfss	_myMain^(0+256),0
  6456  1DA8  0008               	return
  6457                           
  6458                           ;Switch_B1.c: 12: if (RC5 == 0) {
  6459  1DA9  0020               	movlb	0	; select bank0
  6460  1DAA  1A8E               	btfsc	14,5	;volatile
  6461  1DAB  0008               	return
  6462  1DAC  2DB2               	goto	l9889
  6463  1DAD                     l2788:	
  6464                           ;Switch_B1.c: 13: while (RC5 == 0 && myMain.Timeout == 0) {
  6465                           
  6466                           
  6467                           ;Switch_B1.c: 14: RC5 = 1;
  6468  1DAD  0020               	movlb	0	; select bank0
  6469  1DAE  168E               	bsf	14,5	;volatile
  6470                           
  6471                           ;Switch_B1.c: 15: Timeout_Counter();
  6472  1DAF  319D  25D0  319D   	fcall	_Timeout_Counter
  6473  1DB2                     l9889:	
  6474  1DB2  0020               	movlb	0	; select bank0
  6475  1DB3  1A8E               	btfsc	14,5	;volatile
  6476  1DB4  2DB8               	goto	l9893
  6477  1DB5  0022               	movlb	2	; select bank2
  6478  1DB6  1D2B               	btfss	(_myMain^(0+256)+11),2
  6479  1DB7  2DAD               	goto	l2788
  6480  1DB8                     l9893:	
  6481                           
  6482                           ;Switch_B1.c: 16: }
  6483                           ;Switch_B1.c: 17: set_TimeoutCleared();
  6484  1DB8  319A  22E9         	fcall	_set_TimeoutCleared
  6485  1DBA  0008               	return
  6486  1DBB                     __end_of_TouchPower:	
  6487                           
  6488                           	psect	text21
  6489  1AE9                     __ptext21:	
  6490 ;; *************** function _set_TimeoutCleared *****************
  6491 ;; Defined at:
  6492 ;;		line 282 in file "../src/Main_B1.c"
  6493 ;; Parameters:    Size  Location     Type
  6494 ;;		None
  6495 ;; Auto vars:     Size  Location     Type
  6496 ;;		None
  6497 ;; Return value:  Size  Location     Type
  6498 ;;		None               void
  6499 ;; Registers used:
  6500 ;;		status,2
  6501 ;; Tracked objects:
  6502 ;;		On entry : 0/0
  6503 ;;		On exit  : 0/0
  6504 ;;		Unchanged: 0/0
  6505 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6506 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6507 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6508 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6509 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6510 ;;Total ram usage:        0 bytes
  6511 ;; Hardware stack levels used:    1
  6512 ;; Hardware stack levels required when called:    3
  6513 ;; This function calls:
  6514 ;;		Nothing
  6515 ;; This function is called by:
  6516 ;;		_getAD
  6517 ;;		_TouchPower
  6518 ;; This function uses a non-reentrant model
  6519 ;;
  6520                           
  6521                           
  6522                           ;psect for function _set_TimeoutCleared
  6523  1AE9                     _set_TimeoutCleared:	
  6524                           
  6525                           ;Main_B1.c: 283: myMain.Timeout = 0;
  6526                           
  6527                           ;incstack = 0
  6528                           ; Regs used in _set_TimeoutCleared: [status,2]
  6529  1AE9  0022               	movlb	2	; select bank2
  6530  1AEA  112B               	bcf	(_myMain^(0+256)+11),2
  6531                           
  6532                           ;Main_B1.c: 284: myMain.Timeout_Counter = 0;
  6533  1AEB  01AC               	clrf	(_myMain^(0+256)+12)
  6534  1AEC  01AD               	clrf	((_myMain+1)^(0+256)+12)
  6535  1AED  0008               	return
  6536  1AEE                     __end_of_set_TimeoutCleared:	
  6537                           
  6538                           	psect	text22
  6539  1DD0                     __ptext22:	
  6540 ;; *************** function _Timeout_Counter *****************
  6541 ;; Defined at:
  6542 ;;		line 273 in file "../src/Main_B1.c"
  6543 ;; Parameters:    Size  Location     Type
  6544 ;;		None
  6545 ;; Auto vars:     Size  Location     Type
  6546 ;;		None
  6547 ;; Return value:  Size  Location     Type
  6548 ;;		None               void
  6549 ;; Registers used:
  6550 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6551 ;; Tracked objects:
  6552 ;;		On entry : 0/0
  6553 ;;		On exit  : 0/0
  6554 ;;		Unchanged: 0/0
  6555 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6556 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6557 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6558 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6559 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6560 ;;Total ram usage:        0 bytes
  6561 ;; Hardware stack levels used:    1
  6562 ;; Hardware stack levels required when called:    3
  6563 ;; This function calls:
  6564 ;;		Nothing
  6565 ;; This function is called by:
  6566 ;;		_getAD
  6567 ;;		_TouchPower
  6568 ;; This function uses a non-reentrant model
  6569 ;;
  6570                           
  6571                           
  6572                           ;psect for function _Timeout_Counter
  6573  1DD0                     _Timeout_Counter:	
  6574                           
  6575                           ;Main_B1.c: 274: myMain.Timeout_Counter++;
  6576                           
  6577                           ;incstack = 0
  6578                           ; Regs used in _Timeout_Counter: [wreg+fsr1l+fsr1h+status,2+status,0]
  6579  1DD0  3001               	movlw	1
  6580  1DD1  0022               	movlb	2	; select bank2
  6581  1DD2  07AC               	addwf	(_myMain^(0+256)+12),f
  6582  1DD3  3000               	movlw	0
  6583  1DD4  3DAD               	addwfc	((_myMain+1)^(0+256)+12),f
  6584                           
  6585                           ;Main_B1.c: 275: if (myMain.Timeout_Counter == 25000) {
  6586  1DD5  300C               	movlw	12
  6587  1DD6  3E20               	addlw	_myMain& (0+255)
  6588  1DD7  0086               	movwf	6
  6589  1DD8  3001               	movlw	1	; select bank2/3
  6590  1DD9  0087               	movwf	7
  6591  1DDA  3F40               	moviw [0]fsr1
  6592  1DDB  3AA8               	xorlw	168
  6593  1DDC  1D03               	skipz
  6594  1DDD  2DE0               	goto	u10815
  6595  1DDE  3F41               	moviw [1]fsr1
  6596  1DDF  3A61               	xorlw	97
  6597  1DE0                     u10815:	
  6598  1DE0  1D03               	skipz
  6599  1DE1  0008               	return
  6600                           
  6601                           ;Main_B1.c: 276: myMain.Timeout_Counter = 0;
  6602  1DE2  01AC               	clrf	(_myMain^(0+256)+12)
  6603  1DE3  01AD               	clrf	((_myMain+1)^(0+256)+12)
  6604                           
  6605                           ;Main_B1.c: 277: myMain.Timeout = 1;
  6606  1DE4  152B               	bsf	(_myMain^(0+256)+11),2
  6607  1DE5  0008               	return
  6608  1DE6                     __end_of_Timeout_Counter:	
  6609                           
  6610                           	psect	text23
  6611  1AC7                     __ptext23:	
  6612 ;; *************** function _RF_Main *****************
  6613 ;; Defined at:
  6614 ;;		line 26 in file "../src/RF_Control_B1.c"
  6615 ;; Parameters:    Size  Location     Type
  6616 ;;		None
  6617 ;; Auto vars:     Size  Location     Type
  6618 ;;		None
  6619 ;; Return value:  Size  Location     Type
  6620 ;;		None               void
  6621 ;; Registers used:
  6622 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6623 ;; Tracked objects:
  6624 ;;		On entry : 0/0
  6625 ;;		On exit  : 0/0
  6626 ;;		Unchanged: 0/0
  6627 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6628 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6629 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6630 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6631 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6632 ;;Total ram usage:        0 bytes
  6633 ;; Hardware stack levels used:    1
  6634 ;; Hardware stack levels required when called:   10
  6635 ;; This function calls:
  6636 ;;		_setRF_Main
  6637 ;; This function is called by:
  6638 ;;		_main
  6639 ;; This function uses a non-reentrant model
  6640 ;;
  6641                           
  6642                           
  6643                           ;psect for function _RF_Main
  6644  1AC7                     _RF_Main:	
  6645                           
  6646                           ;RF_Control_B1.c: 28: setRF_Main();
  6647                           
  6648                           ;incstack = 0
  6649                           ; Regs used in _RF_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6650  1AC7  3186  2600         	fcall	_setRF_Main
  6651  1AC9  0008               	return
  6652  1ACA                     __end_of_RF_Main:	
  6653                           
  6654                           	psect	text24
  6655  0600                     __ptext24:	
  6656 ;; *************** function _setRF_Main *****************
  6657 ;; Defined at:
  6658 ;;		line 53 in file "../src/RF_Control_B1.c"
  6659 ;; Parameters:    Size  Location     Type
  6660 ;;		None
  6661 ;; Auto vars:     Size  Location     Type
  6662 ;;  error           1   75[BANK0 ] unsigned char 
  6663 ;; Return value:  Size  Location     Type
  6664 ;;		None               void
  6665 ;; Registers used:
  6666 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6667 ;; Tracked objects:
  6668 ;;		On entry : 0/0
  6669 ;;		On exit  : 0/0
  6670 ;;		Unchanged: 0/0
  6671 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6672 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6673 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6674 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6675 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6676 ;;Total ram usage:        2 bytes
  6677 ;; Hardware stack levels used:    1
  6678 ;; Hardware stack levels required when called:    9
  6679 ;; This function calls:
  6680 ;;		_CC2500_PowerOnInitial
  6681 ;;		_CC2500_RxData
  6682 ;;		_CC2500_TxData
  6683 ;;		_CC2500_WriteCommand
  6684 ;;		_RF_RxDisable
  6685 ;;		___lwdiv
  6686 ;;		_getBuz_GO
  6687 ;;		_getRF_KeyStatus
  6688 ;;		_getRxData
  6689 ;; This function is called by:
  6690 ;;		_RF_Main
  6691 ;; This function uses a non-reentrant model
  6692 ;;
  6693                           
  6694                           
  6695                           ;psect for function _setRF_Main
  6696  0600                     _setRF_Main:	
  6697                           
  6698                           ;RF_Control_B1.c: 54: char error = 0;
  6699                           
  6700                           ;incstack = 0
  6701                           ; Regs used in _setRF_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6702  0600  0020               	movlb	0	; select bank0
  6703  0601  01EB               	clrf	setRF_Main@error
  6704                           
  6705                           ;RF_Control_B1.c: 55: if (RF1.Enable == 1) {
  6706  0602  0021               	movlb	1	; select bank1
  6707  0603  1C20               	btfss	_RF1^(0+128),0
  6708  0604  2EBC               	goto	l2389
  6709                           
  6710                           ;RF_Control_B1.c: 56: if (getBuz_GO() == 0) {
  6711  0605  319C  2490  3186   	fcall	_getBuz_GO
  6712  0608  0873               	movf	?_getBuz_GO+1,w
  6713  0609  0472               	iorwf	?_getBuz_GO,w
  6714  060A  1D03               	skipz
  6715  060B  2E9D               	goto	l9859
  6716                           
  6717                           ;RF_Control_B1.c: 59: RF1.Key = getRF_KeyStatus() == 1 ? 1 : 0;
  6718  060C  319C  24E1  3186   	fcall	_getRF_KeyStatus
  6719  060F  3A01               	xorlw	1
  6720  0610  3000               	movlw	0
  6721  0611  1903               	skipnz
  6722  0612  3001               	movlw	1
  6723  0613  0020               	movlb	0	; select bank0
  6724  0614  00EA               	movwf	??_setRF_Main
  6725  0615  0CEA               	rrf	??_setRF_Main,f
  6726  0616  0CEA               	rrf	??_setRF_Main,f
  6727  0617  0021               	movlb	1	; select bank1
  6728  0618  0820               	movf	_RF1^(0+128),w
  6729  0619  0020               	movlb	0	; select bank0
  6730  061A  066A               	xorwf	??_setRF_Main,w
  6731  061B  397F               	andlw	-129
  6732  061C  066A               	xorwf	??_setRF_Main,w
  6733  061D  0021               	movlb	1	; select bank1
  6734  061E  00A0               	movwf	_RF1^(0+128)
  6735                           
  6736                           ;RF_Control_B1.c: 64: if (RF1.Key == 0 || RF1.Learn == 1) {
  6737  061F  1FA0               	btfss	_RF1^(0+128),7
  6738  0620  2E23               	goto	l2393
  6739  0621  1F20               	btfss	_RF1^(0+128),6
  6740  0622  2E9D               	goto	l9859
  6741  0623                     l2393:	
  6742                           
  6743                           ;RF_Control_B1.c: 66: if (RF1.TransceiveGO == 1) {
  6744  0623  1D20               	btfss	_RF1^(0+128),2
  6745  0624  2E64               	goto	l2394
  6746                           
  6747                           ;RF_Control_B1.c: 67: if (RF1.Learn == 0) {
  6748  0625  1B20               	btfsc	_RF1^(0+128),6
  6749  0626  2E5F               	goto	l9831
  6750                           
  6751                           ;RF_Control_B1.c: 68: RF1.Count++;
  6752  0627  3001               	movlw	1
  6753  0628  07A2               	addwf	(_RF1^(0+128)+2),f
  6754  0629  3000               	movlw	0
  6755  062A  3DA3               	addwfc	((_RF1+1)^(0+128)+2),f
  6756                           
  6757                           ;RF_Control_B1.c: 69: if (RF1.Count >= (RF1.RunTime / 20)) {
  6758  062B  3014               	movlw	20
  6759  062C  00F2               	movwf	___lwdiv@divisor
  6760  062D  3000               	movlw	0
  6761  062E  00F3               	movwf	___lwdiv@divisor+1
  6762  062F  0828               	movf	((_RF1+1)^(0+128)+7),w
  6763  0630  01F5               	clrf	___lwdiv@dividend+1
  6764  0631  07F5               	addwf	___lwdiv@dividend+1,f
  6765  0632  0827               	movf	(_RF1^(0+128)+7),w
  6766  0633  01F4               	clrf	___lwdiv@dividend
  6767  0634  07F4               	addwf	___lwdiv@dividend,f
  6768  0635  3192  2269  3186   	fcall	___lwdiv
  6769  0638  0873               	movf	?___lwdiv+1,w
  6770  0639  0021               	movlb	1	; select bank1
  6771  063A  0223               	subwf	((_RF1+1)^(0+128)+2),w
  6772  063B  1D03               	skipz
  6773  063C  2E3F               	goto	u11325
  6774  063D  0872               	movf	?___lwdiv,w
  6775  063E  0222               	subwf	(_RF1^(0+128)+2),w
  6776  063F                     u11325:	
  6777  063F  1C03               	skipc
  6778  0640  2E9D               	goto	l9859
  6779                           
  6780                           ;RF_Control_B1.c: 70: RF1.Count = (RF1.RunTime / 20);
  6781  0641  3014               	movlw	20
  6782  0642  00F2               	movwf	___lwdiv@divisor
  6783  0643  3000               	movlw	0
  6784  0644  00F3               	movwf	___lwdiv@divisor+1
  6785  0645  0828               	movf	((_RF1+1)^(0+128)+7),w
  6786  0646  01F5               	clrf	___lwdiv@dividend+1
  6787  0647  07F5               	addwf	___lwdiv@dividend+1,f
  6788  0648  0827               	movf	(_RF1^(0+128)+7),w
  6789  0649  01F4               	clrf	___lwdiv@dividend
  6790  064A  07F4               	addwf	___lwdiv@dividend,f
  6791  064B  3192  2269  3186   	fcall	___lwdiv
  6792  064E  0873               	movf	?___lwdiv+1,w
  6793  064F  0021               	movlb	1	; select bank1
  6794  0650  01A3               	clrf	((_RF1+1)^(0+128)+2)
  6795  0651  07A3               	addwf	((_RF1+1)^(0+128)+2),f
  6796  0652  0872               	movf	?___lwdiv,w
  6797  0653  01A2               	clrf	(_RF1^(0+128)+2)
  6798  0654  07A2               	addwf	(_RF1^(0+128)+2),f
  6799                           
  6800                           ;RF_Control_B1.c: 72: RF1.TransceiveGO = 0;
  6801  0655  1120               	bcf	_RF1^(0+128),2
  6802                           
  6803                           ;RF_Control_B1.c: 73: RF1.CorrectionCounter = 0;
  6804  0656  01AA               	clrf	(_RF1^(0+128)+10)
  6805  0657  01AB               	clrf	((_RF1+1)^(0+128)+10)
  6806                           
  6807                           ;RF_Control_B1.c: 74: RF_RxDisable();
  6808  0658  319C  2442  3186   	fcall	_RF_RxDisable
  6809                           
  6810                           ;RF_Control_B1.c: 75: CC2500_TxData();
  6811  065B  3189  21D6  3186   	fcall	_CC2500_TxData
  6812                           
  6813                           ;RF_Control_B1.c: 77: }
  6814                           ;RF_Control_B1.c: 78: } else {
  6815  065E  2E9D               	goto	l9859
  6816  065F                     l9831:	
  6817                           
  6818                           ;RF_Control_B1.c: 79: RF1.Count = 0;
  6819  065F  0021               	movlb	1	; select bank1
  6820  0660  01A2               	clrf	(_RF1^(0+128)+2)
  6821  0661  01A3               	clrf	((_RF1+1)^(0+128)+2)
  6822                           
  6823                           ;RF_Control_B1.c: 80: RF1.TransceiveGO = 0;
  6824  0662  1120               	bcf	_RF1^(0+128),2
  6825                           
  6826                           ;RF_Control_B1.c: 81: }
  6827                           ;RF_Control_B1.c: 82: } else {
  6828  0663  2E9D               	goto	l9859
  6829  0664                     l2394:	
  6830                           
  6831                           ;RF_Control_B1.c: 83: if (RF1.RxStatus == 1) {
  6832  0664  1DA0               	btfss	_RF1^(0+128),3
  6833  0665  2E73               	goto	l9845
  6834                           
  6835                           ;RF_Control_B1.c: 85: CC2500_RxData();
  6836  0666  3188  2047  3186   	fcall	_CC2500_RxData
  6837                           
  6838                           ;RF_Control_B1.c: 87: if (RF1.ReceiveGO == 1) {
  6839  0669  0021               	movlb	1	; select bank1
  6840  066A  1CA0               	btfss	_RF1^(0+128),1
  6841  066B  2E9D               	goto	l9859
  6842                           
  6843                           ;RF_Control_B1.c: 88: RF1.ReceiveGO = 0;
  6844  066C  10A0               	bcf	_RF1^(0+128),1
  6845                           
  6846                           ;RF_Control_B1.c: 89: RF1.CorrectionCounter = 0;
  6847  066D  01AA               	clrf	(_RF1^(0+128)+10)
  6848  066E  01AB               	clrf	((_RF1+1)^(0+128)+10)
  6849                           
  6850                           ;RF_Control_B1.c: 97: getRxData();
  6851  066F  318A  22AD  3186   	fcall	_getRxData
  6852                           
  6853                           ;RF_Control_B1.c: 100: }
  6854                           ;RF_Control_B1.c: 101: } else {
  6855  0672  2E9D               	goto	l9859
  6856  0673                     l9845:	
  6857                           
  6858                           ;RF_Control_B1.c: 102: RF1.Count++;
  6859  0673  3001               	movlw	1
  6860  0674  0021               	movlb	1	; select bank1
  6861  0675  07A2               	addwf	(_RF1^(0+128)+2),f
  6862  0676  3000               	movlw	0
  6863  0677  3DA3               	addwfc	((_RF1+1)^(0+128)+2),f
  6864                           
  6865                           ;RF_Control_B1.c: 103: if (RF1.Count >= (RF1.RunTime / 20)) {
  6866  0678  3014               	movlw	20
  6867  0679  00F2               	movwf	___lwdiv@divisor
  6868  067A  3000               	movlw	0
  6869  067B  00F3               	movwf	___lwdiv@divisor+1
  6870  067C  0828               	movf	((_RF1+1)^(0+128)+7),w
  6871  067D  01F5               	clrf	___lwdiv@dividend+1
  6872  067E  07F5               	addwf	___lwdiv@dividend+1,f
  6873  067F  0827               	movf	(_RF1^(0+128)+7),w
  6874  0680  01F4               	clrf	___lwdiv@dividend
  6875  0681  07F4               	addwf	___lwdiv@dividend,f
  6876  0682  3192  2269  3186   	fcall	___lwdiv
  6877  0685  0873               	movf	?___lwdiv+1,w
  6878  0686  0021               	movlb	1	; select bank1
  6879  0687  0223               	subwf	((_RF1+1)^(0+128)+2),w
  6880  0688  1D03               	skipz
  6881  0689  2E8C               	goto	u11355
  6882  068A  0872               	movf	?___lwdiv,w
  6883  068B  0222               	subwf	(_RF1^(0+128)+2),w
  6884  068C                     u11355:	
  6885  068C  1C03               	skipc
  6886  068D  2E9D               	goto	l9859
  6887                           
  6888                           ;RF_Control_B1.c: 104: RF1.Count = 0;
  6889  068E  01A2               	clrf	(_RF1^(0+128)+2)
  6890  068F  01A3               	clrf	((_RF1+1)^(0+128)+2)
  6891                           
  6892                           ;RF_Control_B1.c: 106: RF1.RxStatus = 1;
  6893  0690  15A0               	bsf	_RF1^(0+128),3
  6894                           
  6895                           ;RF_Control_B1.c: 107: CC2500_WriteCommand(0x36);
  6896  0691  3036               	movlw	54
  6897  0692  319E  265D  3186   	fcall	_CC2500_WriteCommand
  6898                           
  6899                           ;RF_Control_B1.c: 108: CC2500_WriteCommand(0x3A);
  6900  0695  303A               	movlw	58
  6901  0696  319E  265D  3186   	fcall	_CC2500_WriteCommand
  6902                           
  6903                           ;RF_Control_B1.c: 109: CC2500_WriteCommand(0x34);
  6904  0699  3034               	movlw	52
  6905  069A  319E  265D  3186   	fcall	_CC2500_WriteCommand
  6906  069D                     l9859:	
  6907                           
  6908                           ;RF_Control_B1.c: 111: }
  6909                           ;RF_Control_B1.c: 112: }
  6910                           ;RF_Control_B1.c: 113: }
  6911                           ;RF_Control_B1.c: 114: }
  6912                           ;RF_Control_B1.c: 115: }
  6913                           ;RF_Control_B1.c: 117: RF1.CorrectionCounter++;
  6914  069D  3001               	movlw	1
  6915  069E  0021               	movlb	1	; select bank1
  6916  069F  07AA               	addwf	(_RF1^(0+128)+10),f
  6917  06A0  3000               	movlw	0
  6918  06A1  3DAB               	addwfc	((_RF1+1)^(0+128)+10),f
  6919                           
  6920                           ;RF_Control_B1.c: 118: if (RF1.CorrectionCounter > (60000 / 20)) {
  6921  06A2  300B               	movlw	11
  6922  06A3  022B               	subwf	((_RF1+1)^(0+128)+10),w
  6923  06A4  30B9               	movlw	185
  6924  06A5  1903               	skipnz
  6925  06A6  022A               	subwf	(_RF1^(0+128)+10),w
  6926  06A7  1C03               	skipc
  6927  06A8  2EB5               	goto	l9873
  6928                           
  6929                           ;RF_Control_B1.c: 119: RF1.CorrectionCounter = 0;
  6930  06A9  01AA               	clrf	(_RF1^(0+128)+10)
  6931  06AA  01AB               	clrf	((_RF1+1)^(0+128)+10)
  6932                           
  6933                           ;RF_Control_B1.c: 121: RF1.RxStatus = 0;
  6934  06AB  11A0               	bcf	_RF1^(0+128),3
  6935                           
  6936                           ;RF_Control_B1.c: 122: RF1.ReceiveGO = 0;
  6937  06AC  10A0               	bcf	_RF1^(0+128),1
  6938                           
  6939                           ;RF_Control_B1.c: 123: CC2500_WriteCommand(0x36);
  6940  06AD  3036               	movlw	54
  6941  06AE  319E  265D  3186   	fcall	_CC2500_WriteCommand
  6942                           
  6943                           ;RF_Control_B1.c: 124: CC2500_WriteCommand(0x3A);
  6944  06B1  303A               	movlw	58
  6945  06B2  319E  265D  3186   	fcall	_CC2500_WriteCommand
  6946  06B5                     l9873:	
  6947                           
  6948                           ;RF_Control_B1.c: 125: }
  6949                           ;RF_Control_B1.c: 127: if (RF1.Timeout == 1) {
  6950  06B5  0021               	movlb	1	; select bank1
  6951  06B6  1F21               	btfss	(_RF1^(0+128)+1),6
  6952  06B7  0008               	return
  6953                           
  6954                           ;RF_Control_B1.c: 128: RF1.Timeout = 0;
  6955  06B8  1321               	bcf	(_RF1^(0+128)+1),6
  6956                           
  6957                           ;RF_Control_B1.c: 129: CC2500_PowerOnInitial();
  6958  06B9  319D  2591         	fcall	_CC2500_PowerOnInitial
  6959                           
  6960                           ;RF_Control_B1.c: 130: }
  6961                           ;RF_Control_B1.c: 132: } else {
  6962  06BB  0008               	return
  6963  06BC                     l2389:	
  6964                           
  6965                           ;RF_Control_B1.c: 133: if (myMain.PowerON == 1) {
  6966  06BC  0022               	movlb	2	; select bank2
  6967  06BD  1C20               	btfss	_myMain^(0+256),0
  6968  06BE  0008               	return
  6969                           
  6970                           ;RF_Control_B1.c: 134: RF1.Enable = 1;
  6971  06BF  0021               	movlb	1	; select bank1
  6972  06C0  1420               	bsf	_RF1^(0+128),0
  6973  06C1  0008               	return
  6974  06C2                     __end_of_setRF_Main:	
  6975                           
  6976                           	psect	text25
  6977  0AAD                     __ptext25:	
  6978 ;; *************** function _getRxData *****************
  6979 ;; Defined at:
  6980 ;;		line 227 in file "../src/RF_Control_B1.c"
  6981 ;; Parameters:    Size  Location     Type
  6982 ;;		None
  6983 ;; Auto vars:     Size  Location     Type
  6984 ;;  error           1   73[BANK0 ] unsigned char 
  6985 ;; Return value:  Size  Location     Type
  6986 ;;		None               void
  6987 ;; Registers used:
  6988 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6989 ;; Tracked objects:
  6990 ;;		On entry : 0/0
  6991 ;;		On exit  : 0/0
  6992 ;;		Unchanged: 0/0
  6993 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6994 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6995 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6996 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6997 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6998 ;;Total ram usage:        2 bytes
  6999 ;; Hardware stack levels used:    1
  7000 ;; Hardware stack levels required when called:    8
  7001 ;; This function calls:
  7002 ;;		_getMain_All_Error_Status
  7003 ;;		_setControl_Lights_Table
  7004 ;;		_setLog_Code
  7005 ;;		_setTxData
  7006 ;; This function is called by:
  7007 ;;		_setRF_Main
  7008 ;; This function uses a non-reentrant model
  7009 ;;
  7010                           
  7011                           
  7012                           ;psect for function _getRxData
  7013  0AAD                     _getRxData:	
  7014                           
  7015                           ;RF_Control_B1.c: 229: if (RF_Data[0] == 0xaa && RF_Data[1] == 0x01) {
  7016                           
  7017                           ;incstack = 0
  7018                           ; Regs used in _getRxData: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7019  0AAD  0023               	movlb	3	; select bank3
  7020  0AAE  0820               	movf	_RF_Data^(0+384),w
  7021  0AAF  3AAA               	xorlw	170
  7022  0AB0  1D03               	skipz
  7023  0AB1  2AC3               	goto	l9639
  7024  0AB2  0821               	movf	(_RF_Data^(0+384)+1),w
  7025  0AB3  3A01               	xorlw	1
  7026  0AB4  1D03               	skipz
  7027  0AB5  2AC3               	goto	l9639
  7028                           
  7029                           ;RF_Control_B1.c: 230: product->Data[2] = 0x55;
  7030  0AB6  3055               	movlw	85
  7031  0AB7  0020               	movlb	0	; select bank0
  7032  0AB8  00E8               	movwf	??_getRxData
  7033  0AB9  086C               	movf	_product,w
  7034  0ABA  3E02               	addlw	2
  7035  0ABB  0086               	movwf	6
  7036  0ABC  3002               	movlw	2	; select bank4/5
  7037  0ABD  0087               	movwf	7
  7038  0ABE  0868               	movf	??_getRxData,w
  7039  0ABF  0081               	movwf	1
  7040                           
  7041                           ;RF_Control_B1.c: 231: setTxData();
  7042  0AC0  318F  274A         	fcall	_setTxData
  7043                           
  7044                           ;RF_Control_B1.c: 235: } else {
  7045  0AC2  0008               	return
  7046  0AC3                     l9639:	
  7047                           
  7048                           ;RF_Control_B1.c: 236: char error = getMain_All_Error_Status(0);
  7049  0AC3  3000               	movlw	0
  7050  0AC4  3191  21D4  318A   	fcall	_getMain_All_Error_Status
  7051  0AC7  0020               	movlb	0	; select bank0
  7052  0AC8  00E8               	movwf	??_getRxData
  7053  0AC9  0868               	movf	??_getRxData,w
  7054  0ACA  00E9               	movwf	getRxData@error
  7055                           
  7056                           ;RF_Control_B1.c: 237: if (error == 0) {
  7057  0ACB  08E9               	movf	getRxData@error,f
  7058  0ACC  1D03               	skipz
  7059  0ACD  2B1E               	goto	l2434
  7060                           
  7061                           ;RF_Control_B1.c: 238: if (RF1.Learn == 1) {
  7062  0ACE  0021               	movlb	1	; select bank1
  7063  0ACF  1F20               	btfss	_RF1^(0+128),6
  7064  0AD0  2ADC               	goto	l9651
  7065                           
  7066                           ;RF_Control_B1.c: 240: if (RF_Data[0] == 0x00 && RF_Data[1] == 0x64) {
  7067  0AD1  0023               	movlb	3	; select bank3
  7068  0AD2  08A0               	movf	_RF_Data^(0+384),f
  7069  0AD3  1D03               	skipz
  7070  0AD4  0008               	return
  7071  0AD5  0821               	movf	(_RF_Data^(0+384)+1),w
  7072  0AD6  3A64               	xorlw	100
  7073  0AD7  1D03               	skipz
  7074  0AD8  0008               	return
  7075                           
  7076                           ;RF_Control_B1.c: 241: setLog_Code();
  7077  0AD9  3192  2235         	fcall	_setLog_Code
  7078                           
  7079                           ;RF_Control_B1.c: 242: }
  7080                           ;RF_Control_B1.c: 243: } else {
  7081  0ADB  0008               	return
  7082  0ADC                     l9651:	
  7083                           
  7084                           ;RF_Control_B1.c: 244: if (RF_Data[20] == 210 || RF_Data[20] == 0x0a) {
  7085  0ADC  0023               	movlb	3	; select bank3
  7086  0ADD  0834               	movf	(_RF_Data^(0+384)+20),w
  7087  0ADE  3AD2               	xorlw	210
  7088  0ADF  1903               	skipnz
  7089  0AE0  2AE5               	goto	l9655
  7090  0AE1  0834               	movf	(_RF_Data^(0+384)+20),w
  7091  0AE2  3A0A               	xorlw	10
  7092  0AE3  1D03               	skipz
  7093  0AE4  0008               	return
  7094  0AE5                     l9655:	
  7095                           
  7096                           ;RF_Control_B1.c: 246: if (RF_Data[0] == 0x00 && RF_Data[1] == 0x02) {
  7097  0AE5  08A0               	movf	_RF_Data^(0+384),f
  7098  0AE6  1D03               	skipz
  7099  0AE7  0008               	return
  7100  0AE8  0821               	movf	(_RF_Data^(0+384)+1),w
  7101  0AE9  3A02               	xorlw	2
  7102  0AEA  1D03               	skipz
  7103  0AEB  0008               	return
  7104                           
  7105                           ;RF_Control_B1.c: 248: if (RF_Data[12] == 0xff && RF_Data[13] == 0xff && RF_Data[14] == 
      +                          0xff) {
  7106  0AEC  082C               	movf	(_RF_Data^(0+384)+12),w
  7107  0AED  3AFF               	xorlw	255
  7108  0AEE  1D03               	skipz
  7109  0AEF  2AFA               	goto	l9667
  7110  0AF0  082D               	movf	(_RF_Data^(0+384)+13),w
  7111  0AF1  3AFF               	xorlw	255
  7112  0AF2  1D03               	skipz
  7113  0AF3  2AFA               	goto	l9667
  7114  0AF4  082E               	movf	(_RF_Data^(0+384)+14),w
  7115  0AF5  3AFF               	xorlw	255
  7116  0AF6  1D03               	skipz
  7117  0AF7  2AFA               	goto	l9667
  7118                           
  7119                           ;RF_Control_B1.c: 249: __nop();
  7120  0AF8  0000               	nop
  7121                           
  7122                           ;RF_Control_B1.c: 250: } else {
  7123  0AF9  0008               	return
  7124  0AFA                     l9667:	
  7125                           
  7126                           ;RF_Control_B1.c: 251: if (RF_Data[12] == product->Data[12] && RF_Data[13] == product->D
      +                          ata[13] && RF_Data[14] == product->Data[14]) {
  7127  0AFA  0020               	movlb	0	; select bank0
  7128  0AFB  086C               	movf	_product,w
  7129  0AFC  3E0C               	addlw	12
  7130  0AFD  0086               	movwf	6
  7131  0AFE  3002               	movlw	2	; select bank4/5
  7132  0AFF  0087               	movwf	7
  7133  0B00  0023               	movlb	3	; select bank3
  7134  0B01  082C               	movf	(_RF_Data^(0+384)+12),w
  7135  0B02  0601               	xorwf	1,w
  7136  0B03  1D03               	skipz
  7137  0B04  0008               	return
  7138  0B05  0020               	movlb	0	; select bank0
  7139  0B06  086C               	movf	_product,w
  7140  0B07  3E0D               	addlw	13
  7141  0B08  0086               	movwf	6
  7142  0B09  3002               	movlw	2	; select bank4/5
  7143  0B0A  0087               	movwf	7
  7144  0B0B  0023               	movlb	3	; select bank3
  7145  0B0C  082D               	movf	(_RF_Data^(0+384)+13),w
  7146  0B0D  0601               	xorwf	1,w
  7147  0B0E  1D03               	skipz
  7148  0B0F  0008               	return
  7149  0B10  0020               	movlb	0	; select bank0
  7150  0B11  086C               	movf	_product,w
  7151  0B12  3E0E               	addlw	14
  7152  0B13  0086               	movwf	6
  7153  0B14  3002               	movlw	2	; select bank4/5
  7154  0B15  0087               	movwf	7
  7155  0B16  0023               	movlb	3	; select bank3
  7156  0B17  082E               	movf	(_RF_Data^(0+384)+14),w
  7157  0B18  0601               	xorwf	1,w
  7158  0B19  1D03               	skipz
  7159  0B1A  0008               	return
  7160                           
  7161                           ;RF_Control_B1.c: 252: setControl_Lights_Table();
  7162  0B1B  318C  24AE         	fcall	_setControl_Lights_Table
  7163                           
  7164                           ;RF_Control_B1.c: 253: }
  7165                           ;RF_Control_B1.c: 254: }
  7166                           ;RF_Control_B1.c: 256: }
  7167                           ;RF_Control_B1.c: 267: }
  7168                           ;RF_Control_B1.c: 268: }
  7169                           ;RF_Control_B1.c: 269: } else {
  7170  0B1D  0008               	return
  7171  0B1E                     l2434:	
  7172                           
  7173                           ;RF_Control_B1.c: 270: __nop();
  7174  0B1E  0000               	nop
  7175  0B1F  0008               	return
  7176  0B20                     __end_of_getRxData:	
  7177                           
  7178                           	psect	text26
  7179  1235                     __ptext26:	
  7180 ;; *************** function _setLog_Code *****************
  7181 ;; Defined at:
  7182 ;;		line 276 in file "../src/RF_Control_B1.c"
  7183 ;; Parameters:    Size  Location     Type
  7184 ;;		None
  7185 ;; Auto vars:     Size  Location     Type
  7186 ;;		None
  7187 ;; Return value:  Size  Location     Type
  7188 ;;		None               void
  7189 ;; Registers used:
  7190 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7191 ;; Tracked objects:
  7192 ;;		On entry : 0/0
  7193 ;;		On exit  : 0/0
  7194 ;;		Unchanged: 0/0
  7195 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7196 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7197 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7198 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7199 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7200 ;;Total ram usage:        1 bytes
  7201 ;; Hardware stack levels used:    1
  7202 ;; Hardware stack levels required when called:    5
  7203 ;; This function calls:
  7204 ;;		_setBuz
  7205 ;;		_setMemory_LoopSave
  7206 ;;		_setMemory_Modify
  7207 ;;		_setProductData
  7208 ;; This function is called by:
  7209 ;;		_getRxData
  7210 ;; This function uses a non-reentrant model
  7211 ;;
  7212                           
  7213                           
  7214                           ;psect for function _setLog_Code
  7215  1235                     _setLog_Code:	
  7216                           
  7217                           ;RF_Control_B1.c: 277: RF1.Learn = 0;
  7218                           
  7219                           ;incstack = 0
  7220                           ; Regs used in _setLog_Code: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7221  1235  0021               	movlb	1	; select bank1
  7222  1236  1320               	bcf	_RF1^(0+128),6
  7223                           
  7224                           ;RF_Control_B1.c: 278: setProductData(12, RF_Data[12]);
  7225  1237  0023               	movlb	3	; select bank3
  7226  1238  082C               	movf	(_RF_Data^(0+384)+12),w
  7227  1239  0020               	movlb	0	; select bank0
  7228  123A  00DD               	movwf	??_setLog_Code
  7229  123B  085D               	movf	??_setLog_Code,w
  7230  123C  00DA               	movwf	setProductData@value
  7231  123D  300C               	movlw	12
  7232  123E  319B  2394  3192   	fcall	_setProductData
  7233                           
  7234                           ;RF_Control_B1.c: 279: setProductData(13, RF_Data[13]);
  7235  1241  0023               	movlb	3	; select bank3
  7236  1242  082D               	movf	(_RF_Data^(0+384)+13),w
  7237  1243  0020               	movlb	0	; select bank0
  7238  1244  00DD               	movwf	??_setLog_Code
  7239  1245  085D               	movf	??_setLog_Code,w
  7240  1246  00DA               	movwf	setProductData@value
  7241  1247  300D               	movlw	13
  7242  1248  319B  2394  3192   	fcall	_setProductData
  7243                           
  7244                           ;RF_Control_B1.c: 280: setProductData(14, RF_Data[14]);
  7245  124B  0023               	movlb	3	; select bank3
  7246  124C  082E               	movf	(_RF_Data^(0+384)+14),w
  7247  124D  0020               	movlb	0	; select bank0
  7248  124E  00DD               	movwf	??_setLog_Code
  7249  124F  085D               	movf	??_setLog_Code,w
  7250  1250  00DA               	movwf	setProductData@value
  7251  1251  300E               	movlw	14
  7252  1252  319B  2394  3192   	fcall	_setProductData
  7253                           
  7254                           ;RF_Control_B1.c: 281: setBuz(1, 100);
  7255  1255  3064               	movlw	100
  7256  1256  0020               	movlb	0	; select bank0
  7257  1257  00A4               	movwf	setBuz@time
  7258  1258  3000               	movlw	0
  7259  1259  00A5               	movwf	setBuz@time+1
  7260  125A  3001               	movlw	1
  7261  125B  3195  2586  3192   	fcall	_setBuz
  7262                           
  7263                           ;RF_Control_B1.c: 282: if (myMain.First == 1) {
  7264  125E  0022               	movlb	2	; select bank2
  7265  125F  1EA0               	btfss	_myMain^(0+256),5
  7266  1260  2A65               	goto	l2449
  7267                           
  7268                           ;RF_Control_B1.c: 283: setMemory_LoopSave(1);
  7269  1261  3001               	movlw	1
  7270  1262  319C  24B0  3192   	fcall	_setMemory_LoopSave
  7271  1265                     l2449:	
  7272                           
  7273                           ;RF_Control_B1.c: 284: }
  7274                           ;RF_Control_B1.c: 285: setMemory_Modify(1);
  7275  1265  3001               	movlw	1
  7276  1266  319C  24A0         	fcall	_setMemory_Modify
  7277  1268  0008               	return
  7278  1269                     __end_of_setLog_Code:	
  7279                           
  7280                           	psect	text27
  7281  1CB0                     __ptext27:	
  7282 ;; *************** function _setMemory_LoopSave *****************
  7283 ;; Defined at:
  7284 ;;		line 1060 in file "../src/MCU_B1.c"
  7285 ;; Parameters:    Size  Location     Type
  7286 ;;  command         1    wreg     unsigned char 
  7287 ;; Auto vars:     Size  Location     Type
  7288 ;;  command         1    3[COMMON] unsigned char 
  7289 ;; Return value:  Size  Location     Type
  7290 ;;		None               void
  7291 ;; Registers used:
  7292 ;;		wreg, status,2, status,0
  7293 ;; Tracked objects:
  7294 ;;		On entry : 0/0
  7295 ;;		On exit  : 0/0
  7296 ;;		Unchanged: 0/0
  7297 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7298 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7299 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7300 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7301 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7302 ;;Total ram usage:        2 bytes
  7303 ;; Hardware stack levels used:    1
  7304 ;; Hardware stack levels required when called:    3
  7305 ;; This function calls:
  7306 ;;		Nothing
  7307 ;; This function is called by:
  7308 ;;		_setLog_Code
  7309 ;; This function uses a non-reentrant model
  7310 ;;
  7311                           
  7312                           
  7313                           ;psect for function _setMemory_LoopSave
  7314  1CB0                     _setMemory_LoopSave:	
  7315                           
  7316                           ;incstack = 0
  7317                           ; Regs used in _setMemory_LoopSave: [wreg+status,2+status,0]
  7318                           ;setMemory_LoopSave@command stored from wreg
  7319  1CB0  00F3               	movwf	setMemory_LoopSave@command
  7320                           
  7321                           ;MCU_B1.c: 1061: Memory.LoopSave = command == 1 ? 1 : 0;
  7322  1CB1  0873               	movf	setMemory_LoopSave@command,w
  7323  1CB2  3A01               	xorlw	1
  7324  1CB3  3000               	movlw	0
  7325  1CB4  1903               	skipnz
  7326  1CB5  3001               	movlw	1
  7327  1CB6  00F2               	movwf	??_setMemory_LoopSave
  7328  1CB7  0DF2               	rlf	??_setMemory_LoopSave,f
  7329  1CB8  0DF2               	rlf	??_setMemory_LoopSave,f
  7330  1CB9  0024               	movlb	4	; select bank4
  7331  1CBA  0844               	movf	(_Memory^(0+512)+36),w
  7332  1CBB  0672               	xorwf	??_setMemory_LoopSave,w
  7333  1CBC  39FB               	andlw	-5
  7334  1CBD  0672               	xorwf	??_setMemory_LoopSave,w
  7335  1CBE  00C4               	movwf	(_Memory^(0+512)+36)
  7336  1CBF  0008               	return
  7337  1CC0                     __end_of_setMemory_LoopSave:	
  7338                           
  7339                           	psect	text28
  7340  0CAE                     __ptext28:	
  7341 ;; *************** function _setControl_Lights_Table *****************
  7342 ;; Defined at:
  7343 ;;		line 289 in file "../src/RF_Control_B1.c"
  7344 ;; Parameters:    Size  Location     Type
  7345 ;;		None
  7346 ;; Auto vars:     Size  Location     Type
  7347 ;;		None
  7348 ;; Return value:  Size  Location     Type
  7349 ;;		None               void
  7350 ;; Registers used:
  7351 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7352 ;; Tracked objects:
  7353 ;;		On entry : 0/0
  7354 ;;		On exit  : 0/0
  7355 ;;		Unchanged: 0/0
  7356 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7357 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7358 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7359 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7360 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7361 ;;Total ram usage:        0 bytes
  7362 ;; Hardware stack levels used:    1
  7363 ;; Hardware stack levels required when called:    7
  7364 ;; This function calls:
  7365 ;;		_getDimmerLights_Status
  7366 ;;		_getMain_All_LightsStatus
  7367 ;;		_setCmd_Status
  7368 ;;		_setDimmerLights_SwOff
  7369 ;;		_setDimmerLights_SwOn
  7370 ;;		_setProductData
  7371 ;;		_setRFSW_AdjControl
  7372 ;;		_setRFSW_Control
  7373 ;;		_setTxData
  7374 ;; This function is called by:
  7375 ;;		_getRxData
  7376 ;; This function uses a non-reentrant model
  7377 ;;
  7378                           
  7379                           
  7380                           ;psect for function _setControl_Lights_Table
  7381  0CAE                     _setControl_Lights_Table:	
  7382                           
  7383                           ;RF_Control_B1.c: 290: switch (RF_Data[15]) {
  7384                           
  7385                           ;incstack = 0
  7386                           ; Regs used in _setControl_Lights_Table: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7387  0CAE  2D25               	goto	l9429
  7388  0CAF                     l9405:	
  7389                           ;RF_Control_B1.c: 292: case 0x00:
  7390                           
  7391                           
  7392                           ;RF_Control_B1.c: 293: if (getMain_All_LightsStatus() == 1) {
  7393  0CAF  319C  2424  318C   	fcall	_getMain_All_LightsStatus
  7394  0CB2  3A01               	xorlw	1
  7395  0CB3  1D03               	skipz
  7396  0CB4  2CD9               	goto	l9415
  7397                           
  7398                           ;RF_Control_B1.c: 296: if (getDimmerLights_Status(1) == 1) {
  7399  0CB5  3001               	movlw	1
  7400  0CB6  319B  23F9  318C   	fcall	_getDimmerLights_Status
  7401  0CB9  3A01               	xorlw	1
  7402  0CBA  1D03               	skipz
  7403  0CBB  2CC4               	goto	l2456
  7404                           
  7405                           ;RF_Control_B1.c: 297: setDimmerLights_SwOn(1);
  7406  0CBC  3001               	movlw	1
  7407  0CBD  3196  262D  318C   	fcall	_setDimmerLights_SwOn
  7408                           
  7409                           ;RF_Control_B1.c: 298: setDimmerLights_SwOff(1);
  7410  0CC0  3001               	movlw	1
  7411  0CC1  3192  229F  318C   	fcall	_setDimmerLights_SwOff
  7412  0CC4                     l2456:	
  7413                           
  7414                           ;RF_Control_B1.c: 299: }
  7415                           ;RF_Control_B1.c: 302: if (getDimmerLights_Status(2) == 1) {
  7416  0CC4  3002               	movlw	2
  7417  0CC5  319B  23F9  318C   	fcall	_getDimmerLights_Status
  7418  0CC8  3A01               	xorlw	1
  7419  0CC9  1D03               	skipz
  7420  0CCA  2CD3               	goto	l9413
  7421                           
  7422                           ;RF_Control_B1.c: 303: setDimmerLights_SwOn(2);
  7423  0CCB  3002               	movlw	2
  7424  0CCC  3196  262D  318C   	fcall	_setDimmerLights_SwOn
  7425                           
  7426                           ;RF_Control_B1.c: 304: setDimmerLights_SwOff(2);
  7427  0CCF  3002               	movlw	2
  7428  0CD0  3192  229F  318C   	fcall	_setDimmerLights_SwOff
  7429  0CD3                     l9413:	
  7430                           
  7431                           ;RF_Control_B1.c: 305: }
  7432                           ;RF_Control_B1.c: 314: setCmd_Status(1, 1);
  7433  0CD3  01F2               	clrf	setCmd_Status@cmd
  7434  0CD4  0AF2               	incf	setCmd_Status@cmd,f
  7435  0CD5  3001               	movlw	1
  7436  0CD6  319D  2552         	fcall	_setCmd_Status
  7437                           
  7438                           ;RF_Control_B1.c: 315: } else {
  7439  0CD8  0008               	return
  7440  0CD9                     l9415:	
  7441                           
  7442                           ;RF_Control_B1.c: 316: setProductData(9, 0);
  7443  0CD9  0020               	movlb	0	; select bank0
  7444  0CDA  01DA               	clrf	setProductData@value
  7445  0CDB  3009               	movlw	9
  7446  0CDC  319B  2394  318C   	fcall	_setProductData
  7447                           
  7448                           ;RF_Control_B1.c: 317: setProductData(11, 0);
  7449  0CDF  0020               	movlb	0	; select bank0
  7450  0CE0  01DA               	clrf	setProductData@value
  7451  0CE1  300B               	movlw	11
  7452  0CE2  319B  2394  318C   	fcall	_setProductData
  7453                           
  7454                           ;RF_Control_B1.c: 318: setProductData(15, 0);
  7455  0CE5  0020               	movlb	0	; select bank0
  7456  0CE6  01DA               	clrf	setProductData@value
  7457  0CE7  300F               	movlw	15
  7458  0CE8  319B  2394  318C   	fcall	_setProductData
  7459                           
  7460                           ;RF_Control_B1.c: 319: setProductData(17, 0);
  7461  0CEB  0020               	movlb	0	; select bank0
  7462  0CEC  01DA               	clrf	setProductData@value
  7463  0CED  3011               	movlw	17
  7464  0CEE  319B  2394  318C   	fcall	_setProductData
  7465                           
  7466                           ;RF_Control_B1.c: 320: setTxData();
  7467  0CF1  318F  274A         	fcall	_setTxData
  7468                           
  7469                           ;RF_Control_B1.c: 321: }
  7470                           ;RF_Control_B1.c: 322: break;
  7471  0CF3  0008               	return
  7472  0CF4                     l9417:	
  7473                           ;RF_Control_B1.c: 324: case 0x20:
  7474                           
  7475                           
  7476                           ;RF_Control_B1.c: 325: setProductData(9, 0);
  7477  0CF4  0020               	movlb	0	; select bank0
  7478  0CF5  01DA               	clrf	setProductData@value
  7479  0CF6  3009               	movlw	9
  7480  0CF7  319B  2394  318C   	fcall	_setProductData
  7481                           
  7482                           ;RF_Control_B1.c: 326: setProductData(11, 0);
  7483  0CFA  0020               	movlb	0	; select bank0
  7484  0CFB  01DA               	clrf	setProductData@value
  7485  0CFC  300B               	movlw	11
  7486  0CFD  319B  2394  318C   	fcall	_setProductData
  7487                           
  7488                           ;RF_Control_B1.c: 327: setProductData(15, product->Data[15]);
  7489  0D00  0020               	movlb	0	; select bank0
  7490  0D01  086C               	movf	_product,w
  7491  0D02  0086               	movwf	6
  7492  0D03  3002               	movlw	2	; select bank4/5
  7493  0D04  0087               	movwf	7
  7494  0D05  3002               	movlw	2	; select bank4/5
  7495  0D06  3F4F               	moviw [15]fsr1
  7496  0D07  00DA               	movwf	setProductData@value
  7497  0D08  300F               	movlw	15
  7498  0D09  319B  2394  318C   	fcall	_setProductData
  7499                           
  7500                           ;RF_Control_B1.c: 328: setProductData(17, 0);
  7501  0D0C  0020               	movlb	0	; select bank0
  7502  0D0D  01DA               	clrf	setProductData@value
  7503  0D0E  3011               	movlw	17
  7504  0D0F  319B  2394  318C   	fcall	_setProductData
  7505                           
  7506                           ;RF_Control_B1.c: 329: setTxData();
  7507  0D12  318F  274A         	fcall	_setTxData
  7508                           
  7509                           ;RF_Control_B1.c: 330: break;
  7510  0D14  0008               	return
  7511  0D15                     l9419:	
  7512                           ;RF_Control_B1.c: 333: case 0x01:
  7513                           
  7514                           
  7515                           ;RF_Control_B1.c: 334: setRFSW_Control(1);
  7516  0D15  3001               	movlw	1
  7517  0D16  3193  237F         	fcall	_setRFSW_Control
  7518                           
  7519                           ;RF_Control_B1.c: 335: break;
  7520  0D18  0008               	return
  7521  0D19                     l9421:	
  7522                           ;RF_Control_B1.c: 339: case 0x11:
  7523                           
  7524                           
  7525                           ;RF_Control_B1.c: 340: setRFSW_AdjControl(1);
  7526  0D19  3001               	movlw	1
  7527  0D1A  3187  2780         	fcall	_setRFSW_AdjControl
  7528                           
  7529                           ;RF_Control_B1.c: 341: break;
  7530  0D1C  0008               	return
  7531  0D1D                     l9423:	
  7532                           ;RF_Control_B1.c: 346: case 0x02:
  7533                           
  7534                           
  7535                           ;RF_Control_B1.c: 347: setRFSW_Control(2);
  7536  0D1D  3002               	movlw	2
  7537  0D1E  3193  237F         	fcall	_setRFSW_Control
  7538                           
  7539                           ;RF_Control_B1.c: 348: break;
  7540  0D20  0008               	return
  7541  0D21                     l9425:	
  7542                           ;RF_Control_B1.c: 351: case 0x21:
  7543                           
  7544                           
  7545                           ;RF_Control_B1.c: 352: setRFSW_AdjControl(2);
  7546  0D21  3002               	movlw	2
  7547  0D22  3187  2780         	fcall	_setRFSW_AdjControl
  7548                           
  7549                           ;RF_Control_B1.c: 370: }
  7550                           
  7551                           ;RF_Control_B1.c: 353: break;
  7552  0D24  0008               	return
  7553  0D25                     l9429:	
  7554  0D25  0023               	movlb	3	; select bank3
  7555  0D26  082F               	movf	(_RF_Data^(0+384)+15),w
  7556                           
  7557                           ; Switch size 1, requested type "space"
  7558                           ; Number of cases is 6, Range of values is 0 to 33
  7559                           ; switch strategies available:
  7560                           ; Name         Instructions Cycles
  7561                           ; simple_byte           19    10 (average)
  7562                           ; direct_byte           74     6 (fixed)
  7563                           ; jumptable            260     6 (fixed)
  7564                           ;	Chosen strategy is simple_byte
  7565  0D27  3A00               	xorlw	0	; case 0
  7566  0D28  1903               	skipnz
  7567  0D29  2CAF               	goto	l9405
  7568  0D2A  3A01               	xorlw	1	; case 1
  7569  0D2B  1903               	skipnz
  7570  0D2C  2D15               	goto	l9419
  7571  0D2D  3A03               	xorlw	3	; case 2
  7572  0D2E  1903               	skipnz
  7573  0D2F  2D1D               	goto	l9423
  7574  0D30  3A13               	xorlw	19	; case 17
  7575  0D31  1903               	skipnz
  7576  0D32  2D19               	goto	l9421
  7577  0D33  3A31               	xorlw	49	; case 32
  7578  0D34  1903               	skipnz
  7579  0D35  2CF4               	goto	l9417
  7580  0D36  3A01               	xorlw	1	; case 33
  7581  0D37  1903               	skipnz
  7582  0D38  2D21               	goto	l9425
  7583  0D39  2D3A               	goto	l2465
  7584  0D3A                     l2465:	
  7585  0D3A  0008               	return
  7586  0D3B                     __end_of_setControl_Lights_Table:	
  7587                           
  7588                           	psect	text29
  7589  137F                     __ptext29:	
  7590 ;; *************** function _setRFSW_Control *****************
  7591 ;; Defined at:
  7592 ;;		line 378 in file "../src/RF_Control_B1.c"
  7593 ;; Parameters:    Size  Location     Type
  7594 ;;  sw              1    wreg     unsigned char 
  7595 ;; Auto vars:     Size  Location     Type
  7596 ;;  sw              1   71[BANK0 ] unsigned char 
  7597 ;;  status          1   70[BANK0 ] unsigned char 
  7598 ;; Return value:  Size  Location     Type
  7599 ;;		None               void
  7600 ;; Registers used:
  7601 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7602 ;; Tracked objects:
  7603 ;;		On entry : 0/0
  7604 ;;		On exit  : 0/0
  7605 ;;		Unchanged: 0/0
  7606 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7607 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7608 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7609 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7610 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7611 ;;Total ram usage:        3 bytes
  7612 ;; Hardware stack levels used:    1
  7613 ;; Hardware stack levels required when called:    6
  7614 ;; This function calls:
  7615 ;;		_getDimmerLights_Status
  7616 ;;		_setBuz
  7617 ;;		_setDelayOff_GO
  7618 ;;		_setDimmerLights_SwOff
  7619 ;;		_setDimmerLights_SwOn
  7620 ;;		_setRF_DimmerLights
  7621 ;;		_setTxData
  7622 ;; This function is called by:
  7623 ;;		_setControl_Lights_Table
  7624 ;; This function uses a non-reentrant model
  7625 ;;
  7626                           
  7627                           
  7628                           ;psect for function _setRFSW_Control
  7629  137F                     _setRFSW_Control:	
  7630                           
  7631                           ;incstack = 0
  7632                           ; Regs used in _setRFSW_Control: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7633                           ;setRFSW_Control@sw stored from wreg
  7634  137F  0020               	movlb	0	; select bank0
  7635  1380  00E7               	movwf	setRFSW_Control@sw
  7636                           
  7637                           ;RF_Control_B1.c: 379: char status = 0;
  7638  1381  01E6               	clrf	setRFSW_Control@status
  7639                           
  7640                           ;RF_Control_B1.c: 381: if (RF_Data[16] == 0x80) {
  7641  1382  0023               	movlb	3	; select bank3
  7642  1383  0830               	movf	(_RF_Data^(0+384)+16),w
  7643  1384  3A80               	xorlw	128
  7644  1385  1D03               	skipz
  7645  1386  2BB2               	goto	l9263
  7646                           
  7647                           ;RF_Control_B1.c: 382: setDelayOff_GO(sw, 1, RF_Data[17]);
  7648  1387  0020               	movlb	0	; select bank0
  7649  1388  01DD               	clrf	setDelayOff_GO@command
  7650  1389  0ADD               	incf	setDelayOff_GO@command,f
  7651  138A  0023               	movlb	3	; select bank3
  7652  138B  0831               	movf	(_RF_Data^(0+384)+17),w
  7653  138C  0020               	movlb	0	; select bank0
  7654  138D  00E5               	movwf	??_setRFSW_Control
  7655  138E  0865               	movf	??_setRFSW_Control,w
  7656  138F  00DE               	movwf	setDelayOff_GO@value
  7657  1390  0867               	movf	setRFSW_Control@sw,w
  7658  1391  318C  2422  3193   	fcall	_setDelayOff_GO
  7659                           
  7660                           ;RF_Control_B1.c: 383: if (getDimmerLights_Status(sw) == 1) {
  7661  1394  0020               	movlb	0	; select bank0
  7662  1395  0867               	movf	setRFSW_Control@sw,w
  7663  1396  319B  23F9  3193   	fcall	_getDimmerLights_Status
  7664  1399  3A01               	xorlw	1
  7665  139A  1D03               	skipz
  7666  139B  2BB2               	goto	l9263
  7667                           
  7668                           ;RF_Control_B1.c: 384: setBuz(1, 100);
  7669  139C  3064               	movlw	100
  7670  139D  0020               	movlb	0	; select bank0
  7671  139E  00A4               	movwf	setBuz@time
  7672  139F  3000               	movlw	0
  7673  13A0  00A5               	movwf	setBuz@time+1
  7674  13A1  3001               	movlw	1
  7675  13A2  3195  2586  3193   	fcall	_setBuz
  7676                           
  7677                           ;RF_Control_B1.c: 385: setRF_DimmerLights(sw, 1);
  7678  13A5  0020               	movlb	0	; select bank0
  7679  13A6  01DD               	clrf	setRF_DimmerLights@on
  7680  13A7  0ADD               	incf	setRF_DimmerLights@on,f
  7681  13A8  0867               	movf	setRFSW_Control@sw,w
  7682  13A9  3196  26E2  3193   	fcall	_setRF_DimmerLights
  7683                           
  7684                           ;RF_Control_B1.c: 386: setTxData();
  7685  13AC  318F  274A  3193   	fcall	_setTxData
  7686                           
  7687                           ;RF_Control_B1.c: 387: status = 1;
  7688  13AF  0020               	movlb	0	; select bank0
  7689  13B0  01E6               	clrf	setRFSW_Control@status
  7690  13B1  0AE6               	incf	setRFSW_Control@status,f
  7691  13B2                     l9263:	
  7692                           
  7693                           ;RF_Control_B1.c: 388: }
  7694                           ;RF_Control_B1.c: 389: }
  7695                           ;RF_Control_B1.c: 391: if (status == 0) {
  7696  13B2  0020               	movlb	0	; select bank0
  7697  13B3  08E6               	movf	setRFSW_Control@status,f
  7698  13B4  1D03               	skipz
  7699  13B5  0008               	return
  7700                           
  7701                           ;RF_Control_B1.c: 393: setDimmerLights_SwOn(sw);
  7702  13B6  0867               	movf	setRFSW_Control@sw,w
  7703  13B7  3196  262D  3193   	fcall	_setDimmerLights_SwOn
  7704                           
  7705                           ;RF_Control_B1.c: 394: setDimmerLights_SwOff(sw);
  7706  13BA  0020               	movlb	0	; select bank0
  7707  13BB  0867               	movf	setRFSW_Control@sw,w
  7708  13BC  3192  229F         	fcall	_setDimmerLights_SwOff
  7709  13BE  0008               	return
  7710  13BF                     __end_of_setRFSW_Control:	
  7711                           
  7712                           	psect	text30
  7713  0780                     __ptext30:	
  7714 ;; *************** function _setRFSW_AdjControl *****************
  7715 ;; Defined at:
  7716 ;;		line 400 in file "../src/RF_Control_B1.c"
  7717 ;; Parameters:    Size  Location     Type
  7718 ;;  sw              1    wreg     unsigned char 
  7719 ;; Auto vars:     Size  Location     Type
  7720 ;;  sw              1   64[BANK0 ] unsigned char 
  7721 ;;  status          1   63[BANK0 ] unsigned char 
  7722 ;; Return value:  Size  Location     Type
  7723 ;;		None               void
  7724 ;; Registers used:
  7725 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7726 ;; Tracked objects:
  7727 ;;		On entry : 0/0
  7728 ;;		On exit  : 0/0
  7729 ;;		Unchanged: 0/0
  7730 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7731 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7732 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7733 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7734 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7735 ;;Total ram usage:        4 bytes
  7736 ;; Hardware stack levels used:    1
  7737 ;; Hardware stack levels required when called:    6
  7738 ;; This function calls:
  7739 ;;		_getDimmerLights_PercentToValue
  7740 ;;		_getDimmerLights_Status
  7741 ;;		_setDimmerIntr_Dimming_RF
  7742 ;;		_setDimmerIntr_MaxmumValue
  7743 ;;		_setDimmerLights_DimmingRun
  7744 ;;		_setDimmerLights_SwOff
  7745 ;;		_setDimmerLights_SwOn
  7746 ;;		_setMemory_Modify
  7747 ;;		_setProductData
  7748 ;;		_setTxData
  7749 ;; This function is called by:
  7750 ;;		_setControl_Lights_Table
  7751 ;; This function uses a non-reentrant model
  7752 ;;
  7753                           
  7754                           
  7755                           ;psect for function _setRFSW_AdjControl
  7756  0780                     _setRFSW_AdjControl:	
  7757                           
  7758                           ;incstack = 0
  7759                           ; Regs used in _setRFSW_AdjControl: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7760                           ;setRFSW_AdjControl@sw stored from wreg
  7761  0780  0020               	movlb	0	; select bank0
  7762  0781  00E0               	movwf	setRFSW_AdjControl@sw
  7763                           
  7764                           ;RF_Control_B1.c: 401: char status = 0;
  7765  0782  01DF               	clrf	setRFSW_AdjControl@status
  7766                           
  7767                           ;RF_Control_B1.c: 403: status = getDimmerLights_Status(sw);
  7768  0783  0860               	movf	setRFSW_AdjControl@sw,w
  7769  0784  319B  23F9  3187   	fcall	_getDimmerLights_Status
  7770  0787  0020               	movlb	0	; select bank0
  7771  0788  00DD               	movwf	??_setRFSW_AdjControl
  7772  0789  085D               	movf	??_setRFSW_AdjControl,w
  7773  078A  00DF               	movwf	setRFSW_AdjControl@status
  7774                           
  7775                           ;RF_Control_B1.c: 405: if (RF_Data[9] > 0x64) {
  7776  078B  3065               	movlw	101
  7777  078C  0023               	movlb	3	; select bank3
  7778  078D  0229               	subwf	(_RF_Data^(0+384)+9),w
  7779  078E  1C03               	skipc
  7780  078F  2F97               	goto	l9275
  7781                           
  7782                           ;RF_Control_B1.c: 406: RF_Data[9] = 0x64;
  7783  0790  3064               	movlw	100
  7784  0791  0020               	movlb	0	; select bank0
  7785  0792  00DD               	movwf	??_setRFSW_AdjControl
  7786  0793  085D               	movf	??_setRFSW_AdjControl,w
  7787  0794  0023               	movlb	3	; select bank3
  7788  0795  00A9               	movwf	(_RF_Data^(0+384)+9)
  7789                           
  7790                           ;RF_Control_B1.c: 407: } else if (RF_Data[9] < 0x01) {
  7791  0796  2F9C               	goto	l9279
  7792  0797                     l9275:	
  7793  0797  08A9               	movf	(_RF_Data^(0+384)+9),f
  7794  0798  1D03               	skipz
  7795  0799  2F9C               	goto	l9279
  7796                           
  7797                           ;RF_Control_B1.c: 408: RF_Data[9] = 0x01;
  7798  079A  01A9               	clrf	(_RF_Data^(0+384)+9)
  7799  079B  0AA9               	incf	(_RF_Data^(0+384)+9),f
  7800  079C                     l9279:	
  7801                           
  7802                           ;RF_Control_B1.c: 409: }
  7803                           ;RF_Control_B1.c: 410: setProductData(9, RF_Data[9]);
  7804  079C  0829               	movf	(_RF_Data^(0+384)+9),w
  7805  079D  0020               	movlb	0	; select bank0
  7806  079E  00DD               	movwf	??_setRFSW_AdjControl
  7807  079F  085D               	movf	??_setRFSW_AdjControl,w
  7808  07A0  00DA               	movwf	setProductData@value
  7809  07A1  3009               	movlw	9
  7810  07A2  319B  2394  3187   	fcall	_setProductData
  7811                           
  7812                           ;RF_Control_B1.c: 411: setProductData(11, sw);
  7813  07A5  0020               	movlb	0	; select bank0
  7814  07A6  0860               	movf	setRFSW_AdjControl@sw,w
  7815  07A7  00DD               	movwf	??_setRFSW_AdjControl
  7816  07A8  085D               	movf	??_setRFSW_AdjControl,w
  7817  07A9  00DA               	movwf	setProductData@value
  7818  07AA  300B               	movlw	11
  7819  07AB  319B  2394  3187   	fcall	_setProductData
  7820                           
  7821                           ;RF_Control_B1.c: 412: setProductData(17, product->Data[26 + sw]);
  7822  07AE  0020               	movlb	0	; select bank0
  7823  07AF  0860               	movf	setRFSW_AdjControl@sw,w
  7824  07B0  3E1A               	addlw	26
  7825  07B1  076C               	addwf	_product,w
  7826  07B2  00DD               	movwf	??_setRFSW_AdjControl
  7827  07B3  085D               	movf	??_setRFSW_AdjControl,w
  7828  07B4  0086               	movwf	6
  7829  07B5  3002               	movlw	2	; select bank4/5
  7830  07B6  0087               	movwf	7
  7831  07B7  0801               	movf	1,w
  7832  07B8  00DE               	movwf	??_setRFSW_AdjControl+1
  7833  07B9  085E               	movf	??_setRFSW_AdjControl+1,w
  7834  07BA  00DA               	movwf	setProductData@value
  7835  07BB  3011               	movlw	17
  7836  07BC  319B  2394  3187   	fcall	_setProductData
  7837                           
  7838                           ;RF_Control_B1.c: 413: setProductData((20 + sw), RF_Data[9]);
  7839  07BF  0023               	movlb	3	; select bank3
  7840  07C0  0829               	movf	(_RF_Data^(0+384)+9),w
  7841  07C1  0020               	movlb	0	; select bank0
  7842  07C2  00DD               	movwf	??_setRFSW_AdjControl
  7843  07C3  085D               	movf	??_setRFSW_AdjControl,w
  7844  07C4  00DA               	movwf	setProductData@value
  7845  07C5  0860               	movf	setRFSW_AdjControl@sw,w
  7846  07C6  3E14               	addlw	20
  7847  07C7  319B  2394  3187   	fcall	_setProductData
  7848                           
  7849                           ;RF_Control_B1.c: 414: setMemory_Modify(1);
  7850  07CA  3001               	movlw	1
  7851  07CB  319C  24A0  3187   	fcall	_setMemory_Modify
  7852                           
  7853                           ;RF_Control_B1.c: 416: if (status == 1) {
  7854  07CE  0020               	movlb	0	; select bank0
  7855  07CF  085F               	movf	setRFSW_AdjControl@status,w
  7856  07D0  3A01               	xorlw	1
  7857  07D1  1D03               	skipz
  7858  07D2  2FEA               	goto	l9289
  7859                           
  7860                           ;RF_Control_B1.c: 417: setDimmerIntr_MaxmumValue(sw, getDimmerLights_PercentToValue(RF_D
      +                          ata[9]));
  7861  07D3  0023               	movlb	3	; select bank3
  7862  07D4  0829               	movf	(_RF_Data^(0+384)+9),w
  7863  07D5  3189  2171  3187   	fcall	_getDimmerLights_PercentToValue
  7864  07D8  0020               	movlb	0	; select bank0
  7865  07D9  00DD               	movwf	??_setRFSW_AdjControl
  7866  07DA  085D               	movf	??_setRFSW_AdjControl,w
  7867  07DB  00DA               	movwf	setDimmerIntr_MaxmumValue@value
  7868  07DC  0860               	movf	setRFSW_AdjControl@sw,w
  7869  07DD  319D  25E6  3187   	fcall	_setDimmerIntr_MaxmumValue
  7870                           
  7871                           ;RF_Control_B1.c: 418: setDimmerIntr_Dimming_RF(sw, 1);
  7872  07E0  01F2               	clrf	setDimmerIntr_Dimming_RF@command
  7873  07E1  0AF2               	incf	setDimmerIntr_Dimming_RF@command,f
  7874  07E2  0020               	movlb	0	; select bank0
  7875  07E3  0860               	movf	setRFSW_AdjControl@sw,w
  7876  07E4  3191  2157  3187   	fcall	_setDimmerIntr_Dimming_RF
  7877                           
  7878                           ;RF_Control_B1.c: 419: setTxData();
  7879  07E7  318F  274A         	fcall	_setTxData
  7880                           
  7881                           ;RF_Control_B1.c: 421: } else if (status == 0) {
  7882  07E9  0008               	return
  7883  07EA                     l9289:	
  7884  07EA  0020               	movlb	0	; select bank0
  7885  07EB  08DF               	movf	setRFSW_AdjControl@status,f
  7886  07EC  1D03               	skipz
  7887  07ED  0008               	return
  7888                           
  7889                           ;RF_Control_B1.c: 425: setDimmerLights_DimmingRun(sw, 1);
  7890  07EE  01F4               	clrf	setDimmerLights_DimmingRun@command
  7891  07EF  0AF4               	incf	setDimmerLights_DimmingRun@command,f
  7892  07F0  0860               	movf	setRFSW_AdjControl@sw,w
  7893  07F1  319E  2614  3187   	fcall	_setDimmerLights_DimmingRun
  7894                           
  7895                           ;RF_Control_B1.c: 426: setDimmerLights_SwOn(sw);
  7896  07F4  0020               	movlb	0	; select bank0
  7897  07F5  0860               	movf	setRFSW_AdjControl@sw,w
  7898  07F6  3196  262D  3187   	fcall	_setDimmerLights_SwOn
  7899                           
  7900                           ;RF_Control_B1.c: 427: setDimmerLights_SwOff(sw);
  7901  07F9  0020               	movlb	0	; select bank0
  7902  07FA  0860               	movf	setRFSW_AdjControl@sw,w
  7903  07FB  3192  229F         	fcall	_setDimmerLights_SwOff
  7904  07FD  0008               	return
  7905  07FE                     __end_of_setRFSW_AdjControl:	
  7906                           
  7907                           	psect	text31
  7908  1CA0                     __ptext31:	
  7909 ;; *************** function _setMemory_Modify *****************
  7910 ;; Defined at:
  7911 ;;		line 1054 in file "../src/MCU_B1.c"
  7912 ;; Parameters:    Size  Location     Type
  7913 ;;  command         1    wreg     unsigned char 
  7914 ;; Auto vars:     Size  Location     Type
  7915 ;;  command         1    3[COMMON] unsigned char 
  7916 ;; Return value:  Size  Location     Type
  7917 ;;		None               void
  7918 ;; Registers used:
  7919 ;;		wreg, status,2, status,0
  7920 ;; Tracked objects:
  7921 ;;		On entry : 0/0
  7922 ;;		On exit  : 0/0
  7923 ;;		Unchanged: 0/0
  7924 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7925 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7926 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7927 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7928 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7929 ;;Total ram usage:        2 bytes
  7930 ;; Hardware stack levels used:    1
  7931 ;; Hardware stack levels required when called:    3
  7932 ;; This function calls:
  7933 ;;		Nothing
  7934 ;; This function is called by:
  7935 ;;		_setLog_Code
  7936 ;;		_setRFSW_AdjControl
  7937 ;; This function uses a non-reentrant model
  7938 ;;
  7939                           
  7940                           
  7941                           ;psect for function _setMemory_Modify
  7942  1CA0                     _setMemory_Modify:	
  7943                           
  7944                           ;incstack = 0
  7945                           ; Regs used in _setMemory_Modify: [wreg+status,2+status,0]
  7946                           ;setMemory_Modify@command stored from wreg
  7947  1CA0  00F3               	movwf	setMemory_Modify@command
  7948                           
  7949                           ;MCU_B1.c: 1055: Memory.Modify = command == 1 ? 1 : 0;
  7950  1CA1  0873               	movf	setMemory_Modify@command,w
  7951  1CA2  3A01               	xorlw	1
  7952  1CA3  3000               	movlw	0
  7953  1CA4  1903               	skipnz
  7954  1CA5  3001               	movlw	1
  7955  1CA6  00F2               	movwf	??_setMemory_Modify
  7956  1CA7  0024               	movlb	4	; select bank4
  7957  1CA8  0844               	movf	(_Memory^(0+512)+36),w
  7958  1CA9  0672               	xorwf	??_setMemory_Modify,w
  7959  1CAA  39FE               	andlw	-2
  7960  1CAB  0672               	xorwf	??_setMemory_Modify,w
  7961  1CAC  00C4               	movwf	(_Memory^(0+512)+36)
  7962                           
  7963                           ;MCU_B1.c: 1056: Memory.Time = 0;
  7964  1CAD  01C2               	clrf	(_Memory^(0+512)+34)
  7965  1CAE  01C3               	clrf	((_Memory+1)^(0+512)+34)
  7966  1CAF  0008               	return
  7967  1CB0                     __end_of_setMemory_Modify:	
  7968                           
  7969                           	psect	text32
  7970  1E14                     __ptext32:	
  7971 ;; *************** function _setDimmerLights_DimmingRun *****************
  7972 ;; Defined at:
  7973 ;;		line 993 in file "../src/Dimmer_B1.c"
  7974 ;; Parameters:    Size  Location     Type
  7975 ;;  lights          1    wreg     unsigned char 
  7976 ;;  command         1    4[COMMON] unsigned char 
  7977 ;; Auto vars:     Size  Location     Type
  7978 ;;  lights          1    6[COMMON] unsigned char 
  7979 ;; Return value:  Size  Location     Type
  7980 ;;		None               void
  7981 ;; Registers used:
  7982 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7983 ;; Tracked objects:
  7984 ;;		On entry : 0/0
  7985 ;;		On exit  : 0/0
  7986 ;;		Unchanged: 0/0
  7987 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7988 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7989 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7990 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7991 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7992 ;;Total ram usage:        3 bytes
  7993 ;; Hardware stack levels used:    1
  7994 ;; Hardware stack levels required when called:    4
  7995 ;; This function calls:
  7996 ;;		_DimmerLights_SelectPointer
  7997 ;; This function is called by:
  7998 ;;		_setRFSW_AdjControl
  7999 ;; This function uses a non-reentrant model
  8000 ;;
  8001                           
  8002                           
  8003                           ;psect for function _setDimmerLights_DimmingRun
  8004  1E14                     _setDimmerLights_DimmingRun:	
  8005                           
  8006                           ;incstack = 0
  8007                           ; Regs used in _setDimmerLights_DimmingRun: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  8008                           ;setDimmerLights_DimmingRun@lights stored from wreg
  8009  1E14  00F6               	movwf	setDimmerLights_DimmingRun@lights
  8010                           
  8011                           ;Dimmer_B1.c: 994: DimmerLights_SelectPointer(lights);
  8012  1E15  0876               	movf	setDimmerLights_DimmingRun@lights,w
  8013  1E16  3190  2066         	fcall	_DimmerLights_SelectPointer
  8014                           
  8015                           ;Dimmer_B1.c: 995: DimmerLights->DimmingRun = command == 1 ? 1 : 0;
  8016  1E18  0874               	movf	setDimmerLights_DimmingRun@command,w
  8017  1E19  3A01               	xorlw	1
  8018  1E1A  3000               	movlw	0
  8019  1E1B  1903               	skipnz
  8020  1E1C  3001               	movlw	1
  8021  1E1D  00F5               	movwf	??_setDimmerLights_DimmingRun
  8022  1E1E  0A7B               	incf	_DimmerLights,w
  8023  1E1F  0086               	movwf	6
  8024  1E20  3001               	movlw	1	; select bank2/3
  8025  1E21  0087               	movwf	7
  8026  1E22  0EF5               	swapf	??_setDimmerLights_DimmingRun,f
  8027  1E23  0DF5               	rlf	??_setDimmerLights_DimmingRun,f
  8028  1E24  0DF5               	rlf	??_setDimmerLights_DimmingRun,f
  8029  1E25  0801               	movf	1,w
  8030  1E26  0675               	xorwf	??_setDimmerLights_DimmingRun,w
  8031  1E27  39BF               	andlw	-65
  8032  1E28  0675               	xorwf	??_setDimmerLights_DimmingRun,w
  8033  1E29  0081               	movwf	1
  8034  1E2A  0008               	return
  8035  1E2B                     __end_of_setDimmerLights_DimmingRun:	
  8036                           
  8037                           	psect	text33
  8038  1CE1                     __ptext33:	
  8039 ;; *************** function _getRF_KeyStatus *****************
  8040 ;; Defined at:
  8041 ;;		line 166 in file "../src/RF_Control_B1.c"
  8042 ;; Parameters:    Size  Location     Type
  8043 ;;		None
  8044 ;; Auto vars:     Size  Location     Type
  8045 ;;  key             1    3[COMMON] unsigned char 
  8046 ;; Return value:  Size  Location     Type
  8047 ;;                  1    wreg      unsigned char 
  8048 ;; Registers used:
  8049 ;;		wreg, status,2
  8050 ;; Tracked objects:
  8051 ;;		On entry : 0/0
  8052 ;;		On exit  : 0/0
  8053 ;;		Unchanged: 0/0
  8054 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8055 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8056 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8057 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8058 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8059 ;;Total ram usage:        3 bytes
  8060 ;; Hardware stack levels used:    1
  8061 ;; Hardware stack levels required when called:    3
  8062 ;; This function calls:
  8063 ;;		Nothing
  8064 ;; This function is called by:
  8065 ;;		_setRF_Main
  8066 ;; This function uses a non-reentrant model
  8067 ;;
  8068                           
  8069                           
  8070                           ;psect for function _getRF_KeyStatus
  8071  1CE1                     _getRF_KeyStatus:	
  8072                           
  8073                           ;RF_Control_B1.c: 167: char key = 0;
  8074                           
  8075                           ;incstack = 0
  8076                           ; Regs used in _getRF_KeyStatus: [wreg+status,2]
  8077  1CE1  01F3               	clrf	getRF_KeyStatus@key
  8078                           
  8079                           ;RF_Control_B1.c: 173: key = (RA6 == 1 || RA4 == 1 || RA0 == 1 || RB1 == 1) ? 1 : 0;
  8080  1CE2  01F4               	clrf	_getRF_KeyStatus$5378
  8081  1CE3  0AF4               	incf	_getRF_KeyStatus$5378,f
  8082  1CE4  0020               	movlb	0	; select bank0
  8083  1CE5  1F0C               	btfss	12,6	;volatile
  8084  1CE6  1A0C               	btfsc	12,4	;volatile
  8085  1CE7  2CEC               	goto	l7577
  8086  1CE8  1C0C               	btfss	12,0	;volatile
  8087  1CE9  188D               	btfsc	13,1	;volatile
  8088  1CEA  2CEC               	goto	l7577
  8089  1CEB  01F4               	clrf	_getRF_KeyStatus$5378
  8090  1CEC                     l7577:	
  8091  1CEC  0874               	movf	_getRF_KeyStatus$5378,w
  8092  1CED  00F2               	movwf	??_getRF_KeyStatus
  8093  1CEE  0872               	movf	??_getRF_KeyStatus,w
  8094  1CEF  00F3               	movwf	getRF_KeyStatus@key
  8095                           
  8096                           ;RF_Control_B1.c: 179: return key;
  8097  1CF0  0873               	movf	getRF_KeyStatus@key,w
  8098  1CF1  0008               	return
  8099  1CF2                     __end_of_getRF_KeyStatus:	
  8100                           
  8101                           	psect	text34
  8102  1C90                     __ptext34:	
  8103 ;; *************** function _getBuz_GO *****************
  8104 ;; Defined at:
  8105 ;;		line 82 in file "../src/Buzzer_B1.c"
  8106 ;; Parameters:    Size  Location     Type
  8107 ;;		None
  8108 ;; Auto vars:     Size  Location     Type
  8109 ;;  i               2    6[COMMON] int 
  8110 ;; Return value:  Size  Location     Type
  8111 ;;                  2    2[COMMON] int 
  8112 ;; Registers used:
  8113 ;;		wreg, status,2, status,0
  8114 ;; Tracked objects:
  8115 ;;		On entry : 0/0
  8116 ;;		On exit  : 0/0
  8117 ;;		Unchanged: 0/0
  8118 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8119 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8120 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8121 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8122 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8123 ;;Total ram usage:        6 bytes
  8124 ;; Hardware stack levels used:    1
  8125 ;; Hardware stack levels required when called:    3
  8126 ;; This function calls:
  8127 ;;		Nothing
  8128 ;; This function is called by:
  8129 ;;		_setRF_Main
  8130 ;; This function uses a non-reentrant model
  8131 ;;
  8132                           
  8133                           
  8134                           ;psect for function _getBuz_GO
  8135  1C90                     _getBuz_GO:	
  8136                           
  8137                           ;Buzzer_B1.c: 83: int i = Buz1.GO;
  8138                           
  8139                           ;incstack = 0
  8140                           ; Regs used in _getBuz_GO: [wreg+status,2+status,0]
  8141  1C90  0021               	movlb	1	; select bank1
  8142  1C91  0C2E               	rrf	_Buz1^(0+128),w
  8143  1C92  3901               	andlw	1
  8144  1C93  00F4               	movwf	??_getBuz_GO
  8145  1C94  01F5               	clrf	??_getBuz_GO+1
  8146  1C95  0874               	movf	??_getBuz_GO,w
  8147  1C96  00F6               	movwf	getBuz_GO@i
  8148  1C97  0875               	movf	??_getBuz_GO+1,w
  8149  1C98  00F7               	movwf	getBuz_GO@i+1
  8150                           
  8151                           ;Buzzer_B1.c: 84: return i;
  8152  1C99  0877               	movf	getBuz_GO@i+1,w
  8153  1C9A  01F3               	clrf	?_getBuz_GO+1
  8154  1C9B  07F3               	addwf	?_getBuz_GO+1,f
  8155  1C9C  0876               	movf	getBuz_GO@i,w
  8156  1C9D  01F2               	clrf	?_getBuz_GO
  8157  1C9E  07F2               	addwf	?_getBuz_GO,f
  8158  1C9F  0008               	return
  8159  1CA0                     __end_of_getBuz_GO:	
  8160                           
  8161                           	psect	text35
  8162  1C42                     __ptext35:	
  8163 ;; *************** function _RF_RxDisable *****************
  8164 ;; Defined at:
  8165 ;;		line 154 in file "../src/RF_Control_B1.c"
  8166 ;; Parameters:    Size  Location     Type
  8167 ;;		None
  8168 ;; Auto vars:     Size  Location     Type
  8169 ;;		None
  8170 ;; Return value:  Size  Location     Type
  8171 ;;		None               void
  8172 ;; Registers used:
  8173 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8174 ;; Tracked objects:
  8175 ;;		On entry : 0/0
  8176 ;;		On exit  : 0/0
  8177 ;;		Unchanged: 0/0
  8178 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8179 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8180 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8181 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8182 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8183 ;;Total ram usage:        0 bytes
  8184 ;; Hardware stack levels used:    1
  8185 ;; Hardware stack levels required when called:    5
  8186 ;; This function calls:
  8187 ;;		_CC2500_WriteCommand
  8188 ;; This function is called by:
  8189 ;;		_setRF_Main
  8190 ;; This function uses a non-reentrant model
  8191 ;;
  8192                           
  8193                           
  8194                           ;psect for function _RF_RxDisable
  8195  1C42                     _RF_RxDisable:	
  8196                           
  8197                           ;RF_Control_B1.c: 155: if (RF1.ReceiveGO == 1 || RF1.RxStatus == 1) {
  8198                           
  8199                           ;incstack = 0
  8200                           ; Regs used in _RF_RxDisable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8201  1C42  0021               	movlb	1	; select bank1
  8202  1C43  18A0               	btfsc	_RF1^(0+128),1
  8203  1C44  2C47               	goto	l2419
  8204  1C45  1DA0               	btfss	_RF1^(0+128),3
  8205  1C46  0008               	return
  8206  1C47                     l2419:	
  8207                           
  8208                           ;RF_Control_B1.c: 156: RF1.RxStatus = 0;
  8209  1C47  11A0               	bcf	_RF1^(0+128),3
  8210                           
  8211                           ;RF_Control_B1.c: 157: RF1.ReceiveGO = 0;
  8212  1C48  10A0               	bcf	_RF1^(0+128),1
  8213                           
  8214                           ;RF_Control_B1.c: 158: CC2500_WriteCommand(0x36);
  8215  1C49  3036               	movlw	54
  8216  1C4A  319E  265D  319C   	fcall	_CC2500_WriteCommand
  8217                           
  8218                           ;RF_Control_B1.c: 159: CC2500_WriteCommand(0x3A);
  8219  1C4D  303A               	movlw	58
  8220  1C4E  319E  265D         	fcall	_CC2500_WriteCommand
  8221  1C50  0008               	return
  8222  1C51                     __end_of_RF_RxDisable:	
  8223                           
  8224                           	psect	text36
  8225  09D6                     __ptext36:	
  8226 ;; *************** function _CC2500_TxData *****************
  8227 ;; Defined at:
  8228 ;;		line 32 in file "../src/CC2500_B1.c"
  8229 ;; Parameters:    Size  Location     Type
  8230 ;;		None
  8231 ;; Auto vars:     Size  Location     Type
  8232 ;;  loop_e          1    7[COMMON] unsigned char 
  8233 ;; Return value:  Size  Location     Type
  8234 ;;		None               void
  8235 ;; Registers used:
  8236 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8237 ;; Tracked objects:
  8238 ;;		On entry : 0/0
  8239 ;;		On exit  : 0/0
  8240 ;;		Unchanged: 0/0
  8241 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8242 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8243 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8244 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8245 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8246 ;;Total ram usage:        2 bytes
  8247 ;; Hardware stack levels used:    1
  8248 ;; Hardware stack levels required when called:    5
  8249 ;; This function calls:
  8250 ;;		_CC2500_WriteByte
  8251 ;;		_CC2500_WriteCommand
  8252 ;;		_RF_Timeout_Counter
  8253 ;;		_setRF_TimeoutCleared
  8254 ;; This function is called by:
  8255 ;;		_setRF_Main
  8256 ;; This function uses a non-reentrant model
  8257 ;;
  8258                           
  8259                           
  8260                           ;psect for function _CC2500_TxData
  8261  09D6                     _CC2500_TxData:	
  8262                           
  8263                           ;CC2500_B1.c: 33: unsigned char loop_e;
  8264                           ;CC2500_B1.c: 35: CC2500_WriteCommand(0x36);
  8265                           
  8266                           ;incstack = 0
  8267                           ; Regs used in _CC2500_TxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8268  09D6  3036               	movlw	54
  8269  09D7  319E  265D  3189   	fcall	_CC2500_WriteCommand
  8270                           
  8271                           ;CC2500_B1.c: 36: CC2500_WriteCommand(0x3B);
  8272  09DA  303B               	movlw	59
  8273  09DB  319E  265D  3189   	fcall	_CC2500_WriteCommand
  8274                           
  8275                           ;CC2500_B1.c: 38: RC4 = 0;
  8276  09DE  0020               	movlb	0	; select bank0
  8277  09DF  120E               	bcf	14,4	;volatile
  8278                           
  8279                           ;CC2500_B1.c: 39: SPI0Buffer = 0x3F + 0x40;
  8280  09E0  307F               	movlw	127
  8281  09E1  00F6               	movwf	??_CC2500_TxData
  8282  09E2  0876               	movf	??_CC2500_TxData,w
  8283  09E3  0021               	movlb	1	; select bank1
  8284  09E4  00CA               	movwf	_SPI0Buffer^(0+128)
  8285                           
  8286                           ;CC2500_B1.c: 40: while (RC2 == 1 && RF1.Timeout == 0) {
  8287  09E5  29E9               	goto	l9439
  8288  09E6                     l9437:	
  8289                           
  8290                           ;CC2500_B1.c: 41: RF_Timeout_Counter();
  8291  09E6  319D  257C  3189   	fcall	_RF_Timeout_Counter
  8292  09E9                     l9439:	
  8293  09E9  0020               	movlb	0	; select bank0
  8294  09EA  1D0E               	btfss	14,2	;volatile
  8295  09EB  29EF               	goto	l9443
  8296  09EC  0021               	movlb	1	; select bank1
  8297  09ED  1F21               	btfss	(_RF1^(0+128)+1),6
  8298  09EE  29E6               	goto	l9437
  8299  09EF                     l9443:	
  8300                           
  8301                           ;CC2500_B1.c: 42: };
  8302                           ;CC2500_B1.c: 43: setRF_TimeoutCleared();
  8303  09EF  319A  22D4  3189   	fcall	_setRF_TimeoutCleared
  8304                           
  8305                           ;CC2500_B1.c: 45: CC2500_WriteByte();
  8306  09F2  319E  262B  3189   	fcall	_CC2500_WriteByte
  8307                           
  8308                           ;CC2500_B1.c: 46: SPI0Buffer = Tx_Length;
  8309  09F5  0021               	movlb	1	; select bank1
  8310  09F6  084C               	movf	_Tx_Length^(0+128),w
  8311  09F7  00F6               	movwf	??_CC2500_TxData
  8312  09F8  0876               	movf	??_CC2500_TxData,w
  8313  09F9  00CA               	movwf	_SPI0Buffer^(0+128)
  8314                           
  8315                           ;CC2500_B1.c: 47: CC2500_WriteByte();
  8316  09FA  319E  262B  3189   	fcall	_CC2500_WriteByte
  8317                           
  8318                           ;CC2500_B1.c: 48: for (loop_e = 0; loop_e < Tx_Length; loop_e++) {
  8319  09FD  01F7               	clrf	CC2500_TxData@loop_e
  8320  09FE                     l9457:	
  8321  09FE  0021               	movlb	1	; select bank1
  8322  09FF  084C               	movf	_Tx_Length^(0+128),w
  8323  0A00  0277               	subwf	CC2500_TxData@loop_e,w
  8324  0A01  1803               	btfsc	3,0
  8325  0A02  2A15               	goto	l259
  8326                           
  8327                           ;CC2500_B1.c: 49: SPI0Buffer = RF_Data[loop_e];
  8328  0A03  0877               	movf	CC2500_TxData@loop_e,w
  8329  0A04  3EA0               	addlw	_RF_Data& (0+255)
  8330  0A05  0086               	movwf	6
  8331  0A06  3001               	movlw	1	; select bank3/4
  8332  0A07  0087               	movwf	7
  8333  0A08  0801               	movf	1,w
  8334  0A09  00F6               	movwf	??_CC2500_TxData
  8335  0A0A  0876               	movf	??_CC2500_TxData,w
  8336  0A0B  0021               	movlb	1	; select bank1
  8337  0A0C  00CA               	movwf	_SPI0Buffer^(0+128)
  8338                           
  8339                           ;CC2500_B1.c: 50: CC2500_WriteByte();
  8340  0A0D  319E  262B  3189   	fcall	_CC2500_WriteByte
  8341  0A10  3001               	movlw	1
  8342  0A11  00F6               	movwf	??_CC2500_TxData
  8343  0A12  0876               	movf	??_CC2500_TxData,w
  8344  0A13  07F7               	addwf	CC2500_TxData@loop_e,f
  8345  0A14  29FE               	goto	l9457
  8346  0A15                     l259:	
  8347                           
  8348                           ;CC2500_B1.c: 51: }
  8349                           ;CC2500_B1.c: 52: RC4 = 1;
  8350  0A15  0020               	movlb	0	; select bank0
  8351  0A16  160E               	bsf	14,4	;volatile
  8352                           
  8353                           ;CC2500_B1.c: 53: CC2500_WriteCommand(0x35);
  8354  0A17  3035               	movlw	53
  8355  0A18  319E  265D  3189   	fcall	_CC2500_WriteCommand
  8356                           
  8357                           ;CC2500_B1.c: 54: while (RB0 == 0 && RF1.Timeout == 0) {
  8358  0A1B  2A1F               	goto	l9463
  8359  0A1C                     l9461:	
  8360                           
  8361                           ;CC2500_B1.c: 55: RF_Timeout_Counter();
  8362  0A1C  319D  257C  3189   	fcall	_RF_Timeout_Counter
  8363  0A1F                     l9463:	
  8364  0A1F  0020               	movlb	0	; select bank0
  8365  0A20  180D               	btfsc	13,0	;volatile
  8366  0A21  2A25               	goto	l9467
  8367  0A22  0021               	movlb	1	; select bank1
  8368  0A23  1F21               	btfss	(_RF1^(0+128)+1),6
  8369  0A24  2A1C               	goto	l9461
  8370  0A25                     l9467:	
  8371                           
  8372                           ;CC2500_B1.c: 56: };
  8373                           ;CC2500_B1.c: 57: setRF_TimeoutCleared();
  8374  0A25  319A  22D4  3189   	fcall	_setRF_TimeoutCleared
  8375                           
  8376                           ;CC2500_B1.c: 59: while (RB0 == 1 && RF1.Timeout == 0) {
  8377  0A28  2A2C               	goto	l9471
  8378  0A29                     l9469:	
  8379                           
  8380                           ;CC2500_B1.c: 60: RF_Timeout_Counter();
  8381  0A29  319D  257C  3189   	fcall	_RF_Timeout_Counter
  8382  0A2C                     l9471:	
  8383  0A2C  0020               	movlb	0	; select bank0
  8384  0A2D  1C0D               	btfss	13,0	;volatile
  8385  0A2E  2A32               	goto	l9475
  8386  0A2F  0021               	movlb	1	; select bank1
  8387  0A30  1F21               	btfss	(_RF1^(0+128)+1),6
  8388  0A31  2A29               	goto	l9469
  8389  0A32                     l9475:	
  8390                           
  8391                           ;CC2500_B1.c: 61: };
  8392                           ;CC2500_B1.c: 62: setRF_TimeoutCleared();
  8393  0A32  319A  22D4  3189   	fcall	_setRF_TimeoutCleared
  8394                           
  8395                           ;CC2500_B1.c: 64: CC2500_WriteCommand(0x36);
  8396  0A35  3036               	movlw	54
  8397  0A36  319E  265D  3189   	fcall	_CC2500_WriteCommand
  8398                           
  8399                           ;CC2500_B1.c: 65: CC2500_WriteCommand(0x3B);
  8400  0A39  303B               	movlw	59
  8401  0A3A  319E  265D         	fcall	_CC2500_WriteCommand
  8402                           
  8403                           ;CC2500_B1.c: 67: Transceive_OK = 1;
  8404  0A3C  14FA               	bsf	_Transceive_OK/(0+8),_Transceive_OK& (0+7)
  8405  0A3D  0008               	return
  8406  0A3E                     __end_of_CC2500_TxData:	
  8407                           
  8408                           	psect	text37
  8409  0847                     __ptext37:	
  8410 ;; *************** function _CC2500_RxData *****************
  8411 ;; Defined at:
  8412 ;;		line 73 in file "../src/CC2500_B1.c"
  8413 ;; Parameters:    Size  Location     Type
  8414 ;;		None
  8415 ;; Auto vars:     Size  Location     Type
  8416 ;;  loop_f          1    7[COMMON] unsigned char 
  8417 ;; Return value:  Size  Location     Type
  8418 ;;		None               void
  8419 ;; Registers used:
  8420 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8421 ;; Tracked objects:
  8422 ;;		On entry : 0/0
  8423 ;;		On exit  : 0/0
  8424 ;;		Unchanged: 0/0
  8425 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8426 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8427 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8428 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8429 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8430 ;;Total ram usage:        2 bytes
  8431 ;; Hardware stack levels used:    1
  8432 ;; Hardware stack levels required when called:    5
  8433 ;; This function calls:
  8434 ;;		_CC2500_ReadByte
  8435 ;;		_CC2500_ReadStatus
  8436 ;;		_CC2500_WriteByte
  8437 ;;		_CC2500_WriteCommand
  8438 ;;		_RF_Timeout_Counter
  8439 ;;		_setRF_TimeoutCleared
  8440 ;; This function is called by:
  8441 ;;		_setRF_Main
  8442 ;; This function uses a non-reentrant model
  8443 ;;
  8444                           
  8445                           
  8446                           ;psect for function _CC2500_RxData
  8447  0847                     _CC2500_RxData:	
  8448                           
  8449                           ;CC2500_B1.c: 74: unsigned char loop_f;
  8450                           ;CC2500_B1.c: 78: if (RB0 == 0) {
  8451                           
  8452                           ;incstack = 0
  8453                           ; Regs used in _CC2500_RxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8454  0847  0020               	movlb	0	; select bank0
  8455  0848  180D               	btfsc	13,0	;volatile
  8456  0849  0008               	return
  8457                           
  8458                           ;CC2500_B1.c: 87: CC2500_ReadStatus(0x3B);
  8459  084A  303B               	movlw	59
  8460  084B  3190  209B  3188   	fcall	_CC2500_ReadStatus
  8461                           
  8462                           ;CC2500_B1.c: 89: if (s_data != 0) {
  8463  084E  0021               	movlb	1	; select bank1
  8464  084F  084F               	movf	_s_data^(0+128),w
  8465  0850  1903               	btfsc	3,2
  8466  0851  0008               	return
  8467                           
  8468                           ;CC2500_B1.c: 90: RC4 = 0;
  8469  0852  0020               	movlb	0	; select bank0
  8470  0853  120E               	bcf	14,4	;volatile
  8471                           
  8472                           ;CC2500_B1.c: 91: SPI0Buffer = 0x3F + 0xC0;
  8473  0854  30FF               	movlw	255
  8474  0855  00F6               	movwf	??_CC2500_RxData
  8475  0856  0876               	movf	??_CC2500_RxData,w
  8476  0857  0021               	movlb	1	; select bank1
  8477  0858  00CA               	movwf	_SPI0Buffer^(0+128)
  8478                           
  8479                           ;CC2500_B1.c: 93: while (RC2 == 1 && RF1.Timeout == 0) {
  8480  0859  285D               	goto	l9495
  8481  085A                     l9493:	
  8482                           
  8483                           ;CC2500_B1.c: 94: RF_Timeout_Counter();
  8484  085A  319D  257C  3188   	fcall	_RF_Timeout_Counter
  8485  085D                     l9495:	
  8486  085D  0020               	movlb	0	; select bank0
  8487  085E  1D0E               	btfss	14,2	;volatile
  8488  085F  2863               	goto	l9499
  8489  0860  0021               	movlb	1	; select bank1
  8490  0861  1F21               	btfss	(_RF1^(0+128)+1),6
  8491  0862  285A               	goto	l9493
  8492  0863                     l9499:	
  8493                           
  8494                           ;CC2500_B1.c: 95: };
  8495                           ;CC2500_B1.c: 96: setRF_TimeoutCleared();
  8496  0863  319A  22D4  3188   	fcall	_setRF_TimeoutCleared
  8497                           
  8498                           ;CC2500_B1.c: 98: CC2500_WriteByte();
  8499  0866  319E  262B  3188   	fcall	_CC2500_WriteByte
  8500                           
  8501                           ;CC2500_B1.c: 99: CC2500_ReadByte();
  8502  0869  319E  26C8  3188   	fcall	_CC2500_ReadByte
  8503                           
  8504                           ;CC2500_B1.c: 100: Rx_Length = SPI0Buffer;
  8505  086C  0021               	movlb	1	; select bank1
  8506  086D  084A               	movf	_SPI0Buffer^(0+128),w
  8507  086E  00F6               	movwf	??_CC2500_RxData
  8508  086F  0876               	movf	??_CC2500_RxData,w
  8509  0870  00C9               	movwf	_Rx_Length^(0+128)
  8510                           
  8511                           ;CC2500_B1.c: 101: for (loop_f = 0; loop_f < Rx_Length; loop_f++) {
  8512  0871  01F7               	clrf	CC2500_RxData@loop_f
  8513  0872                     l9515:	
  8514  0872  0849               	movf	_Rx_Length^(0+128),w
  8515  0873  0277               	subwf	CC2500_RxData@loop_f,w
  8516  0874  1803               	btfsc	3,0
  8517  0875  2888               	goto	l9517
  8518                           
  8519                           ;CC2500_B1.c: 102: CC2500_ReadByte();
  8520  0876  319E  26C8  3188   	fcall	_CC2500_ReadByte
  8521                           
  8522                           ;CC2500_B1.c: 103: RF_Data[loop_f] = SPI0Buffer;
  8523  0879  0021               	movlb	1	; select bank1
  8524  087A  084A               	movf	_SPI0Buffer^(0+128),w
  8525  087B  00F6               	movwf	??_CC2500_RxData
  8526  087C  0877               	movf	CC2500_RxData@loop_f,w
  8527  087D  3EA0               	addlw	_RF_Data& (0+255)
  8528  087E  0086               	movwf	6
  8529  087F  3001               	movlw	1	; select bank3/4
  8530  0880  0087               	movwf	7
  8531  0881  0876               	movf	??_CC2500_RxData,w
  8532  0882  0081               	movwf	1
  8533  0883  3001               	movlw	1
  8534  0884  00F6               	movwf	??_CC2500_RxData
  8535  0885  0876               	movf	??_CC2500_RxData,w
  8536  0886  07F7               	addwf	CC2500_RxData@loop_f,f
  8537  0887  2872               	goto	l9515
  8538  0888                     l9517:	
  8539                           
  8540                           ;CC2500_B1.c: 104: }
  8541                           ;CC2500_B1.c: 105: CC2500_ReadByte();
  8542  0888  319E  26C8  3188   	fcall	_CC2500_ReadByte
  8543                           
  8544                           ;CC2500_B1.c: 106: RSSI = SPI0Buffer;
  8545  088B  0021               	movlb	1	; select bank1
  8546  088C  084A               	movf	_SPI0Buffer^(0+128),w
  8547  088D  00F6               	movwf	??_CC2500_RxData
  8548  088E  0876               	movf	??_CC2500_RxData,w
  8549  088F  00C8               	movwf	_RSSI^(0+128)
  8550                           
  8551                           ;CC2500_B1.c: 107: CC2500_ReadByte();
  8552  0890  319E  26C8  3188   	fcall	_CC2500_ReadByte
  8553                           
  8554                           ;CC2500_B1.c: 108: CRC = SPI0Buffer;
  8555  0893  0021               	movlb	1	; select bank1
  8556  0894  084A               	movf	_SPI0Buffer^(0+128),w
  8557  0895  00F6               	movwf	??_CC2500_RxData
  8558  0896  0876               	movf	??_CC2500_RxData,w
  8559  0897  00C2               	movwf	_CRC^(0+128)
  8560                           
  8561                           ;CC2500_B1.c: 109: RC4 = 1;
  8562  0898  0020               	movlb	0	; select bank0
  8563  0899  160E               	bsf	14,4	;volatile
  8564                           
  8565                           ;CC2500_B1.c: 110: if (CRC & 0x80)
  8566  089A  0021               	movlb	1	; select bank1
  8567  089B  1BC2               	btfsc	_CRC^(0+128),7
  8568                           
  8569                           ;CC2500_B1.c: 111: Receive_OK = 1;
  8570  089C  147A               	bsf	_Receive_OK/(0+8),_Receive_OK& (0+7)
  8571                           
  8572                           ;CC2500_B1.c: 113: RF1.RxStatus = 0;
  8573  089D  11A0               	bcf	_RF1^(0+128),3
  8574                           
  8575                           ;CC2500_B1.c: 114: RF1.ReceiveGO = 1;
  8576  089E  14A0               	bsf	_RF1^(0+128),1
  8577                           
  8578                           ;CC2500_B1.c: 115: CC2500_WriteCommand(0x36);
  8579  089F  3036               	movlw	54
  8580  08A0  319E  265D  3188   	fcall	_CC2500_WriteCommand
  8581                           
  8582                           ;CC2500_B1.c: 116: CC2500_WriteCommand(0x3A);
  8583  08A3  303A               	movlw	58
  8584  08A4  319E  265D         	fcall	_CC2500_WriteCommand
  8585  08A6  0021               	movlb	1	; select bank1
  8586  08A7  0008               	return
  8587  08A8                     __end_of_CC2500_RxData:	
  8588                           
  8589                           	psect	text38
  8590  109B                     __ptext38:	
  8591 ;; *************** function _CC2500_ReadStatus *****************
  8592 ;; Defined at:
  8593 ;;		line 308 in file "../src/CC2500_B1.c"
  8594 ;; Parameters:    Size  Location     Type
  8595 ;;  status_addr     1    wreg     unsigned char 
  8596 ;; Auto vars:     Size  Location     Type
  8597 ;;  status_addr     1    5[COMMON] unsigned char 
  8598 ;; Return value:  Size  Location     Type
  8599 ;;		None               void
  8600 ;; Registers used:
  8601 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8602 ;; Tracked objects:
  8603 ;;		On entry : 0/0
  8604 ;;		On exit  : 0/0
  8605 ;;		Unchanged: 0/0
  8606 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8607 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8608 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8609 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8610 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8611 ;;Total ram usage:        2 bytes
  8612 ;; Hardware stack levels used:    1
  8613 ;; Hardware stack levels required when called:    4
  8614 ;; This function calls:
  8615 ;;		_CC2500_ReadByte
  8616 ;;		_CC2500_WriteByte
  8617 ;;		_RF_Timeout_Counter
  8618 ;;		_setRF_TimeoutCleared
  8619 ;; This function is called by:
  8620 ;;		_CC2500_RxData
  8621 ;; This function uses a non-reentrant model
  8622 ;;
  8623                           
  8624                           
  8625                           ;psect for function _CC2500_ReadStatus
  8626  109B                     _CC2500_ReadStatus:	
  8627                           
  8628                           ;incstack = 0
  8629                           ; Regs used in _CC2500_ReadStatus: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8630                           ;CC2500_ReadStatus@status_addr stored from wreg
  8631  109B  00F5               	movwf	CC2500_ReadStatus@status_addr
  8632                           
  8633                           ;CC2500_B1.c: 309: RC4 = 0;
  8634  109C  0020               	movlb	0	; select bank0
  8635  109D  120E               	bcf	14,4	;volatile
  8636                           
  8637                           ;CC2500_B1.c: 310: SPI0Buffer = status_addr + 0xC0;
  8638  109E  0875               	movf	CC2500_ReadStatus@status_addr,w
  8639  109F  3EC0               	addlw	192
  8640  10A0  00F4               	movwf	??_CC2500_ReadStatus
  8641  10A1  0874               	movf	??_CC2500_ReadStatus,w
  8642  10A2  0021               	movlb	1	; select bank1
  8643  10A3  00CA               	movwf	_SPI0Buffer^(0+128)
  8644                           
  8645                           ;CC2500_B1.c: 312: while (RC2 == 1 && RF1.Timeout == 0) {
  8646  10A4  28A8               	goto	l9299
  8647  10A5                     l9297:	
  8648                           
  8649                           ;CC2500_B1.c: 313: RF_Timeout_Counter();
  8650  10A5  319D  257C  3190   	fcall	_RF_Timeout_Counter
  8651  10A8                     l9299:	
  8652  10A8  0020               	movlb	0	; select bank0
  8653  10A9  1D0E               	btfss	14,2	;volatile
  8654  10AA  28AE               	goto	l9303
  8655  10AB  0021               	movlb	1	; select bank1
  8656  10AC  1F21               	btfss	(_RF1^(0+128)+1),6
  8657  10AD  28A5               	goto	l9297
  8658  10AE                     l9303:	
  8659                           
  8660                           ;CC2500_B1.c: 314: };
  8661                           ;CC2500_B1.c: 315: setRF_TimeoutCleared();
  8662  10AE  319A  22D4  3190   	fcall	_setRF_TimeoutCleared
  8663                           
  8664                           ;CC2500_B1.c: 317: CC2500_WriteByte();
  8665  10B1  319E  262B  3190   	fcall	_CC2500_WriteByte
  8666                           
  8667                           ;CC2500_B1.c: 318: CC2500_ReadByte();
  8668  10B4  319E  26C8         	fcall	_CC2500_ReadByte
  8669                           
  8670                           ;CC2500_B1.c: 319: RC4 = 1;
  8671  10B6  0020               	movlb	0	; select bank0
  8672  10B7  160E               	bsf	14,4	;volatile
  8673                           
  8674                           ;CC2500_B1.c: 321: s_data = SPI0Buffer;
  8675  10B8  0021               	movlb	1	; select bank1
  8676  10B9  084A               	movf	_SPI0Buffer^(0+128),w
  8677  10BA  00F4               	movwf	??_CC2500_ReadStatus
  8678  10BB  0874               	movf	??_CC2500_ReadStatus,w
  8679  10BC  00CF               	movwf	_s_data^(0+128)
  8680  10BD  0008               	return
  8681  10BE                     __end_of_CC2500_ReadStatus:	
  8682                           
  8683                           	psect	text39
  8684  1EC8                     __ptext39:	
  8685 ;; *************** function _CC2500_ReadByte *****************
  8686 ;; Defined at:
  8687 ;;		line 242 in file "../src/CC2500_B1.c"
  8688 ;; Parameters:    Size  Location     Type
  8689 ;;		None
  8690 ;; Auto vars:     Size  Location     Type
  8691 ;;  loop_b          1    3[COMMON] unsigned char 
  8692 ;; Return value:  Size  Location     Type
  8693 ;;		None               void
  8694 ;; Registers used:
  8695 ;;		wreg, status,2, status,0
  8696 ;; Tracked objects:
  8697 ;;		On entry : 0/0
  8698 ;;		On exit  : 0/0
  8699 ;;		Unchanged: 0/0
  8700 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8701 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8702 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8703 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8704 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8705 ;;Total ram usage:        2 bytes
  8706 ;; Hardware stack levels used:    1
  8707 ;; Hardware stack levels required when called:    3
  8708 ;; This function calls:
  8709 ;;		Nothing
  8710 ;; This function is called by:
  8711 ;;		_CC2500_RxData
  8712 ;;		_CC2500_ReadStatus
  8713 ;;		_CC2500_ReadREG
  8714 ;; This function uses a non-reentrant model
  8715 ;;
  8716                           
  8717                           
  8718                           ;psect for function _CC2500_ReadByte
  8719  1EC8                     _CC2500_ReadByte:	
  8720                           
  8721                           ;CC2500_B1.c: 243: unsigned char loop_b;
  8722                           ;CC2500_B1.c: 244: for (loop_b = 0; loop_b < 8; loop_b++) {
  8723                           
  8724                           ;incstack = 0
  8725                           ; Regs used in _CC2500_ReadByte: [wreg+status,2+status,0]
  8726  1EC8  01F3               	clrf	CC2500_ReadByte@loop_b
  8727  1EC9                     L3:	
  8728  1EC9  3008               	movlw	8
  8729  1ECA  0273               	subwf	CC2500_ReadByte@loop_b,w
  8730  1ECB  1803               	btfsc	3,0
  8731  1ECC  0008               	return
  8732                           
  8733                           ;CC2500_B1.c: 245: RC1 = 1;
  8734  1ECD  0020               	movlb	0	; select bank0
  8735  1ECE  148E               	bsf	14,1	;volatile
  8736                           
  8737                           ;CC2500_B1.c: 246: SPI0Buffer <<= 1;
  8738  1ECF  1003               	clrc
  8739  1ED0  0021               	movlb	1	; select bank1
  8740  1ED1  0DCA               	rlf	_SPI0Buffer^(0+128),f
  8741                           
  8742                           ;CC2500_B1.c: 247: if (RC2 == 1)
  8743  1ED2  0020               	movlb	0	; select bank0
  8744  1ED3  1D0E               	btfss	14,2	;volatile
  8745  1ED4  2ED8               	goto	l6841
  8746                           
  8747                           ;CC2500_B1.c: 248: SPI0Buffer |= 0x01;
  8748  1ED5  0021               	movlb	1	; select bank1
  8749  1ED6  144A               	bsf	_SPI0Buffer^(0+128),0
  8750  1ED7  2EDD               	goto	l6843
  8751  1ED8                     l6841:	
  8752                           
  8753                           ;CC2500_B1.c: 249: else
  8754                           ;CC2500_B1.c: 250: SPI0Buffer &= 0xFE;
  8755  1ED8  30FE               	movlw	254
  8756  1ED9  00F2               	movwf	??_CC2500_ReadByte
  8757  1EDA  0872               	movf	??_CC2500_ReadByte,w
  8758  1EDB  0021               	movlb	1	; select bank1
  8759  1EDC  05CA               	andwf	_SPI0Buffer^(0+128),f
  8760  1EDD                     l6843:	
  8761                           
  8762                           ;CC2500_B1.c: 251: RC1 = 0;
  8763  1EDD  0020               	movlb	0	; select bank0
  8764  1EDE  108E               	bcf	14,1	;volatile
  8765  1EDF  3001               	movlw	1
  8766  1EE0  00F2               	movwf	??_CC2500_ReadByte
  8767  1EE1  0872               	movf	??_CC2500_ReadByte,w
  8768  1EE2  07F3               	addwf	CC2500_ReadByte@loop_b,f
  8769  1EE3  2EC9               	goto	L3
  8770  1EE4                     __end_of_CC2500_ReadByte:	
  8771                           
  8772                           	psect	text40
  8773  1D91                     __ptext40:	
  8774 ;; *************** function _CC2500_PowerOnInitial *****************
  8775 ;; Defined at:
  8776 ;;		line 126 in file "../src/CC2500_B1.c"
  8777 ;; Parameters:    Size  Location     Type
  8778 ;;		None
  8779 ;; Auto vars:     Size  Location     Type
  8780 ;;		None
  8781 ;; Return value:  Size  Location     Type
  8782 ;;		None               void
  8783 ;; Registers used:
  8784 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8785 ;; Tracked objects:
  8786 ;;		On entry : 0/0
  8787 ;;		On exit  : 0/0
  8788 ;;		Unchanged: 0/0
  8789 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8790 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8791 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8792 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8793 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8794 ;;Total ram usage:        0 bytes
  8795 ;; Hardware stack levels used:    1
  8796 ;; Hardware stack levels required when called:    6
  8797 ;; This function calls:
  8798 ;;		_CC2500_ClearRXFIFO
  8799 ;;		_CC2500_ClearTXFIFO
  8800 ;;		_CC2500_FrequencyCabr
  8801 ;;		_CC2500_InitPATable
  8802 ;;		_CC2500_InitSetREG
  8803 ;;		_CC2500_PowerRST
  8804 ;;		_CC2500_SIDLEMode
  8805 ;; This function is called by:
  8806 ;;		_main
  8807 ;;		_setRF_Main
  8808 ;; This function uses a non-reentrant model
  8809 ;;
  8810                           
  8811                           
  8812                           ;psect for function _CC2500_PowerOnInitial
  8813  1D91                     _CC2500_PowerOnInitial:	
  8814                           
  8815                           ;CC2500_B1.c: 127: CC2500_PowerRST();
  8816                           
  8817                           ;incstack = 0
  8818                           ; Regs used in _CC2500_PowerOnInitial: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8819  1D91  3194  2400  319D   	fcall	_CC2500_PowerRST
  8820                           
  8821                           ;CC2500_B1.c: 128: CC2500_InitSetREG();
  8822  1D94  3191  21AA  319D   	fcall	_CC2500_InitSetREG
  8823                           
  8824                           ;CC2500_B1.c: 129: CC2500_InitPATable();
  8825  1D97  319F  271E  319D   	fcall	_CC2500_InitPATable
  8826                           
  8827                           ;CC2500_B1.c: 130: CC2500_ClearTXFIFO();
  8828  1D9A  319A  22DC  319D   	fcall	_CC2500_ClearTXFIFO
  8829                           
  8830                           ;CC2500_B1.c: 131: CC2500_ClearRXFIFO();
  8831  1D9D  319A  22D8  319D   	fcall	_CC2500_ClearRXFIFO
  8832                           
  8833                           ;CC2500_B1.c: 132: CC2500_FrequencyCabr();
  8834  1DA0  319B  2372  319D   	fcall	_CC2500_FrequencyCabr
  8835                           
  8836                           ;CC2500_B1.c: 133: CC2500_SIDLEMode();
  8837  1DA3  319A  22E0         	fcall	_CC2500_SIDLEMode
  8838  1DA5  0008               	return
  8839  1DA6                     __end_of_CC2500_PowerOnInitial:	
  8840                           
  8841                           	psect	text41
  8842  1AE0                     __ptext41:	
  8843 ;; *************** function _CC2500_SIDLEMode *****************
  8844 ;; Defined at:
  8845 ;;		line 216 in file "../src/CC2500_B1.c"
  8846 ;; Parameters:    Size  Location     Type
  8847 ;;		None
  8848 ;; Auto vars:     Size  Location     Type
  8849 ;;		None
  8850 ;; Return value:  Size  Location     Type
  8851 ;;		None               void
  8852 ;; Registers used:
  8853 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8854 ;; Tracked objects:
  8855 ;;		On entry : 0/0
  8856 ;;		On exit  : 0/0
  8857 ;;		Unchanged: 0/0
  8858 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8859 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8860 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8861 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8862 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8863 ;;Total ram usage:        0 bytes
  8864 ;; Hardware stack levels used:    1
  8865 ;; Hardware stack levels required when called:    5
  8866 ;; This function calls:
  8867 ;;		_CC2500_WriteCommand
  8868 ;; This function is called by:
  8869 ;;		_CC2500_PowerOnInitial
  8870 ;; This function uses a non-reentrant model
  8871 ;;
  8872                           
  8873                           
  8874                           ;psect for function _CC2500_SIDLEMode
  8875  1AE0                     _CC2500_SIDLEMode:	
  8876                           
  8877                           ;CC2500_B1.c: 217: CC2500_WriteCommand(0x36);
  8878                           
  8879                           ;incstack = 0
  8880                           ; Regs used in _CC2500_SIDLEMode: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8881  1AE0  3036               	movlw	54
  8882  1AE1  319E  265D         	fcall	_CC2500_WriteCommand
  8883  1AE3  0008               	return
  8884  1AE4                     __end_of_CC2500_SIDLEMode:	
  8885                           
  8886                           	psect	text42
  8887  1400                     __ptext42:	
  8888 ;; *************** function _CC2500_PowerRST *****************
  8889 ;; Defined at:
  8890 ;;		line 139 in file "../src/CC2500_B1.c"
  8891 ;; Parameters:    Size  Location     Type
  8892 ;;		None
  8893 ;; Auto vars:     Size  Location     Type
  8894 ;;		None
  8895 ;; Return value:  Size  Location     Type
  8896 ;;		None               void
  8897 ;; Registers used:
  8898 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8899 ;; Tracked objects:
  8900 ;;		On entry : 0/0
  8901 ;;		On exit  : 0/0
  8902 ;;		Unchanged: 0/0
  8903 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8904 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8905 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8906 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8907 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8908 ;;Total ram usage:        1 bytes
  8909 ;; Hardware stack levels used:    1
  8910 ;; Hardware stack levels required when called:    4
  8911 ;; This function calls:
  8912 ;;		_CC2500_WriteByte
  8913 ;;		_DelayTime_1us
  8914 ;;		_RF_Timeout_Counter
  8915 ;;		_setRF_TimeoutCleared
  8916 ;; This function is called by:
  8917 ;;		_CC2500_PowerOnInitial
  8918 ;; This function uses a non-reentrant model
  8919 ;;
  8920                           
  8921                           
  8922                           ;psect for function _CC2500_PowerRST
  8923  1400                     _CC2500_PowerRST:	
  8924                           
  8925                           ;CC2500_B1.c: 140: RC1 = 0;
  8926                           
  8927                           ;incstack = 0
  8928                           ; Regs used in _CC2500_PowerRST: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8929  1400  0020               	movlb	0	; select bank0
  8930  1401  108E               	bcf	14,1	;volatile
  8931                           
  8932                           ;CC2500_B1.c: 141: RC0 = 0;
  8933  1402  100E               	bcf	14,0	;volatile
  8934                           
  8935                           ;CC2500_B1.c: 142: RC4 = 1;
  8936  1403  160E               	bsf	14,4	;volatile
  8937                           
  8938                           ;CC2500_B1.c: 143: DelayTime_1us(10);
  8939  1404  300A               	movlw	10
  8940  1405  00F2               	movwf	DelayTime_1us@count
  8941  1406  3000               	movlw	0
  8942  1407  00F3               	movwf	DelayTime_1us@count+1
  8943  1408  3190  20E3  3194   	fcall	_DelayTime_1us
  8944                           
  8945                           ;CC2500_B1.c: 144: RC4 = 0;
  8946  140B  0020               	movlb	0	; select bank0
  8947  140C  120E               	bcf	14,4	;volatile
  8948                           
  8949                           ;CC2500_B1.c: 145: DelayTime_1us(10);
  8950  140D  300A               	movlw	10
  8951  140E  00F2               	movwf	DelayTime_1us@count
  8952  140F  3000               	movlw	0
  8953  1410  00F3               	movwf	DelayTime_1us@count+1
  8954  1411  3190  20E3  3194   	fcall	_DelayTime_1us
  8955                           
  8956                           ;CC2500_B1.c: 146: RC4 = 1;
  8957  1414  0020               	movlb	0	; select bank0
  8958  1415  160E               	bsf	14,4	;volatile
  8959                           
  8960                           ;CC2500_B1.c: 147: DelayTime_1us(40);
  8961  1416  3028               	movlw	40
  8962  1417  00F2               	movwf	DelayTime_1us@count
  8963  1418  3000               	movlw	0
  8964  1419  00F3               	movwf	DelayTime_1us@count+1
  8965  141A  3190  20E3  3194   	fcall	_DelayTime_1us
  8966                           
  8967                           ;CC2500_B1.c: 148: RC4 = 0;
  8968  141D  0020               	movlb	0	; select bank0
  8969  141E  120E               	bcf	14,4	;volatile
  8970                           
  8971                           ;CC2500_B1.c: 149: SPI0Buffer = 0x30;
  8972  141F  3030               	movlw	48
  8973  1420  00F8               	movwf	??_CC2500_PowerRST
  8974  1421  0878               	movf	??_CC2500_PowerRST,w
  8975  1422  0021               	movlb	1	; select bank1
  8976  1423  00CA               	movwf	_SPI0Buffer^(0+128)
  8977                           
  8978                           ;CC2500_B1.c: 150: while (RC2 == 1 && RF1.Timeout == 0) {
  8979  1424  2C28               	goto	l9327
  8980  1425                     l9325:	
  8981                           
  8982                           ;CC2500_B1.c: 151: RF_Timeout_Counter();
  8983  1425  319D  257C  3194   	fcall	_RF_Timeout_Counter
  8984  1428                     l9327:	
  8985  1428  0020               	movlb	0	; select bank0
  8986  1429  1D0E               	btfss	14,2	;volatile
  8987  142A  2C2E               	goto	l9331
  8988  142B  0021               	movlb	1	; select bank1
  8989  142C  1F21               	btfss	(_RF1^(0+128)+1),6
  8990  142D  2C25               	goto	l9325
  8991  142E                     l9331:	
  8992                           
  8993                           ;CC2500_B1.c: 152: };
  8994                           ;CC2500_B1.c: 153: setRF_TimeoutCleared();
  8995  142E  319A  22D4  3194   	fcall	_setRF_TimeoutCleared
  8996                           
  8997                           ;CC2500_B1.c: 154: CC2500_WriteByte();
  8998  1431  319E  262B  3194   	fcall	_CC2500_WriteByte
  8999                           
  9000                           ;CC2500_B1.c: 155: while (RC2 == 1 && RF1.Timeout == 0) {
  9001  1434  2C38               	goto	l9337
  9002  1435                     l9335:	
  9003                           
  9004                           ;CC2500_B1.c: 156: RF_Timeout_Counter();
  9005  1435  319D  257C  3194   	fcall	_RF_Timeout_Counter
  9006  1438                     l9337:	
  9007  1438  0020               	movlb	0	; select bank0
  9008  1439  1D0E               	btfss	14,2	;volatile
  9009  143A  2C3E               	goto	l9341
  9010  143B  0021               	movlb	1	; select bank1
  9011  143C  1F21               	btfss	(_RF1^(0+128)+1),6
  9012  143D  2C35               	goto	l9335
  9013  143E                     l9341:	
  9014                           
  9015                           ;CC2500_B1.c: 157: };
  9016                           ;CC2500_B1.c: 158: setRF_TimeoutCleared();
  9017  143E  319A  22D4         	fcall	_setRF_TimeoutCleared
  9018                           
  9019                           ;CC2500_B1.c: 159: RC0 = 0;
  9020  1440  0020               	movlb	0	; select bank0
  9021  1441  100E               	bcf	14,0	;volatile
  9022                           
  9023                           ;CC2500_B1.c: 160: RC4 = 1;
  9024  1442  160E               	bsf	14,4	;volatile
  9025  1443  0008               	return
  9026  1444                     __end_of_CC2500_PowerRST:	
  9027                           
  9028                           	psect	text43
  9029  11AA                     __ptext43:	
  9030 ;; *************** function _CC2500_InitSetREG *****************
  9031 ;; Defined at:
  9032 ;;		line 166 in file "../src/CC2500_B1.c"
  9033 ;; Parameters:    Size  Location     Type
  9034 ;;		None
  9035 ;; Auto vars:     Size  Location     Type
  9036 ;;  loop_c          1    2[BANK0 ] unsigned char 
  9037 ;;  temp2           1    1[BANK0 ] unsigned char 
  9038 ;;  temp1           1    0[BANK0 ] unsigned char 
  9039 ;; Return value:  Size  Location     Type
  9040 ;;		None               void
  9041 ;; Registers used:
  9042 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9043 ;; Tracked objects:
  9044 ;;		On entry : 0/0
  9045 ;;		On exit  : 0/0
  9046 ;;		Unchanged: 0/0
  9047 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9048 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9049 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9050 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9051 ;;      Totals:         1       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9052 ;;Total ram usage:        4 bytes
  9053 ;; Hardware stack levels used:    1
  9054 ;; Hardware stack levels required when called:    5
  9055 ;; This function calls:
  9056 ;;		_CC2500_WriteREG
  9057 ;; This function is called by:
  9058 ;;		_CC2500_PowerOnInitial
  9059 ;; This function uses a non-reentrant model
  9060 ;;
  9061                           
  9062                           
  9063                           ;psect for function _CC2500_InitSetREG
  9064  11AA                     _CC2500_InitSetREG:	
  9065                           
  9066                           ;CC2500_B1.c: 167: unsigned char loop_c;
  9067                           ;CC2500_B1.c: 168: unsigned char temp1, temp2;
  9068                           ;CC2500_B1.c: 170: for (loop_c = 0; loop_c < 47; loop_c++) {
  9069                           
  9070                           ;incstack = 0
  9071                           ; Regs used in _CC2500_InitSetREG: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9072  11AA  0020               	movlb	0	; select bank0
  9073  11AB  01A2               	clrf	CC2500_InitSetREG@loop_c
  9074  11AC                     L4:	
  9075  11AC  302F               	movlw	47
  9076  11AD  0222               	subwf	CC2500_InitSetREG@loop_c,w
  9077  11AE  1803               	btfsc	3,0
  9078  11AF  0008               	return
  9079                           
  9080                           ;CC2500_B1.c: 171: temp1 = CC2500_registers_address[loop_c];
  9081  11B0  0822               	movf	CC2500_InitSetREG@loop_c,w
  9082  11B1  3E00               	addlw	low (_CC2500_registers_address| (0+32768))
  9083  11B2  0084               	movwf	4
  9084  11B3  3090               	movlw	high (_CC2500_registers_address| (0+32768))
  9085  11B4  1803               	skipnc
  9086  11B5  3E01               	addlw	1
  9087  11B6  0085               	movwf	5
  9088  11B7  0800               	movf	0,w	;code access
  9089  11B8  00F7               	movwf	??_CC2500_InitSetREG
  9090  11B9  0877               	movf	??_CC2500_InitSetREG,w
  9091  11BA  00A0               	movwf	CC2500_InitSetREG@temp1
  9092                           
  9093                           ;CC2500_B1.c: 172: temp2 = CC2500_rfSettings[loop_c];
  9094  11BB  0822               	movf	CC2500_InitSetREG@loop_c,w
  9095  11BC  3E2F               	addlw	low (_CC2500_rfSettings| (0+32768))
  9096  11BD  0084               	movwf	4
  9097  11BE  3090               	movlw	high (_CC2500_rfSettings| (0+32768))
  9098  11BF  1803               	skipnc
  9099  11C0  3E01               	addlw	1
  9100  11C1  0085               	movwf	5
  9101  11C2  0800               	movf	0,w	;code access
  9102  11C3  00F7               	movwf	??_CC2500_InitSetREG
  9103  11C4  0877               	movf	??_CC2500_InitSetREG,w
  9104  11C5  00A1               	movwf	CC2500_InitSetREG@temp2
  9105                           
  9106                           ;CC2500_B1.c: 174: CC2500_WriteREG(temp1, temp2);
  9107  11C6  0821               	movf	CC2500_InitSetREG@temp2,w
  9108  11C7  00F7               	movwf	??_CC2500_InitSetREG
  9109  11C8  0877               	movf	??_CC2500_InitSetREG,w
  9110  11C9  00F4               	movwf	CC2500_WriteREG@value
  9111  11CA  0820               	movf	CC2500_InitSetREG@temp1,w
  9112  11CB  3190  2079  3191   	fcall	_CC2500_WriteREG
  9113  11CE  3001               	movlw	1
  9114  11CF  00F7               	movwf	??_CC2500_InitSetREG
  9115  11D0  0877               	movf	??_CC2500_InitSetREG,w
  9116  11D1  0020               	movlb	0	; select bank0
  9117  11D2  07A2               	addwf	CC2500_InitSetREG@loop_c,f
  9118  11D3  29AC               	goto	L4
  9119  11D4                     __end_of_CC2500_InitSetREG:	
  9120                           
  9121                           	psect	text44
  9122  1F1E                     __ptext44:	
  9123 ;; *************** function _CC2500_InitPATable *****************
  9124 ;; Defined at:
  9125 ;;		line 181 in file "../src/CC2500_B1.c"
  9126 ;; Parameters:    Size  Location     Type
  9127 ;;		None
  9128 ;; Auto vars:     Size  Location     Type
  9129 ;;  loop_d          1    9[COMMON] unsigned char 
  9130 ;;  temp            1    8[COMMON] unsigned char 
  9131 ;; Return value:  Size  Location     Type
  9132 ;;		None               void
  9133 ;; Registers used:
  9134 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9135 ;; Tracked objects:
  9136 ;;		On entry : 0/0
  9137 ;;		On exit  : 0/0
  9138 ;;		Unchanged: 0/0
  9139 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9140 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9141 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9142 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9143 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9144 ;;Total ram usage:        3 bytes
  9145 ;; Hardware stack levels used:    1
  9146 ;; Hardware stack levels required when called:    5
  9147 ;; This function calls:
  9148 ;;		_CC2500_WriteREG
  9149 ;; This function is called by:
  9150 ;;		_CC2500_PowerOnInitial
  9151 ;; This function uses a non-reentrant model
  9152 ;;
  9153                           
  9154                           
  9155                           ;psect for function _CC2500_InitPATable
  9156  1F1E                     _CC2500_InitPATable:	
  9157                           
  9158                           ;CC2500_B1.c: 182: unsigned char loop_d;
  9159                           ;CC2500_B1.c: 183: unsigned char temp;
  9160                           ;CC2500_B1.c: 185: for (loop_d = 0; loop_d < 8; loop_d++) {
  9161                           
  9162                           ;incstack = 0
  9163                           ; Regs used in _CC2500_InitPATable: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9164  1F1E  01F9               	clrf	CC2500_InitPATable@loop_d
  9165  1F1F                     L5:	
  9166  1F1F  3008               	movlw	8
  9167  1F20  0279               	subwf	CC2500_InitPATable@loop_d,w
  9168  1F21  1803               	btfsc	3,0
  9169  1F22  0008               	return
  9170                           
  9171                           ;CC2500_B1.c: 186: temp = CC2500_patable_vaule[loop_d];
  9172  1F23  0879               	movf	CC2500_InitPATable@loop_d,w
  9173  1F24  3E5E               	addlw	low (_CC2500_patable_vaule| (0+32768))
  9174  1F25  0084               	movwf	4
  9175  1F26  3090               	movlw	high (_CC2500_patable_vaule| (0+32768))
  9176  1F27  1803               	skipnc
  9177  1F28  3E01               	addlw	1
  9178  1F29  0085               	movwf	5
  9179  1F2A  0800               	movf	0,w	;code access
  9180  1F2B  00F7               	movwf	??_CC2500_InitPATable
  9181  1F2C  0877               	movf	??_CC2500_InitPATable,w
  9182  1F2D  00F8               	movwf	CC2500_InitPATable@temp
  9183                           
  9184                           ;CC2500_B1.c: 187: CC2500_WriteREG(0x3E, temp);
  9185  1F2E  0878               	movf	CC2500_InitPATable@temp,w
  9186  1F2F  00F7               	movwf	??_CC2500_InitPATable
  9187  1F30  0877               	movf	??_CC2500_InitPATable,w
  9188  1F31  00F4               	movwf	CC2500_WriteREG@value
  9189  1F32  303E               	movlw	62
  9190  1F33  3190  2079  319F   	fcall	_CC2500_WriteREG
  9191  1F36  3001               	movlw	1
  9192  1F37  00F7               	movwf	??_CC2500_InitPATable
  9193  1F38  0877               	movf	??_CC2500_InitPATable,w
  9194  1F39  07F9               	addwf	CC2500_InitPATable@loop_d,f
  9195  1F3A  2F1F               	goto	L5
  9196  1F3B                     __end_of_CC2500_InitPATable:	
  9197                           
  9198                           	psect	text45
  9199  1079                     __ptext45:	
  9200 ;; *************** function _CC2500_WriteREG *****************
  9201 ;; Defined at:
  9202 ;;		line 258 in file "../src/CC2500_B1.c"
  9203 ;; Parameters:    Size  Location     Type
  9204 ;;  w_addr          1    wreg     unsigned char 
  9205 ;;  value           1    4[COMMON] unsigned char 
  9206 ;; Auto vars:     Size  Location     Type
  9207 ;;  w_addr          1    6[COMMON] unsigned char 
  9208 ;; Return value:  Size  Location     Type
  9209 ;;		None               void
  9210 ;; Registers used:
  9211 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9212 ;; Tracked objects:
  9213 ;;		On entry : 0/0
  9214 ;;		On exit  : 0/0
  9215 ;;		Unchanged: 0/0
  9216 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9217 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9218 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9219 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9220 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9221 ;;Total ram usage:        3 bytes
  9222 ;; Hardware stack levels used:    1
  9223 ;; Hardware stack levels required when called:    4
  9224 ;; This function calls:
  9225 ;;		_CC2500_WriteByte
  9226 ;;		_RF_Timeout_Counter
  9227 ;;		_setRF_TimeoutCleared
  9228 ;; This function is called by:
  9229 ;;		_CC2500_InitSetREG
  9230 ;;		_CC2500_InitPATable
  9231 ;; This function uses a non-reentrant model
  9232 ;;
  9233                           
  9234                           
  9235                           ;psect for function _CC2500_WriteREG
  9236  1079                     _CC2500_WriteREG:	
  9237                           
  9238                           ;incstack = 0
  9239                           ; Regs used in _CC2500_WriteREG: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9240                           ;CC2500_WriteREG@w_addr stored from wreg
  9241  1079  00F6               	movwf	CC2500_WriteREG@w_addr
  9242                           
  9243                           ;CC2500_B1.c: 259: RC4 = 0;
  9244  107A  0020               	movlb	0	; select bank0
  9245  107B  120E               	bcf	14,4	;volatile
  9246                           
  9247                           ;CC2500_B1.c: 260: SPI0Buffer = w_addr;
  9248  107C  0876               	movf	CC2500_WriteREG@w_addr,w
  9249  107D  00F5               	movwf	??_CC2500_WriteREG
  9250  107E  0875               	movf	??_CC2500_WriteREG,w
  9251  107F  0021               	movlb	1	; select bank1
  9252  1080  00CA               	movwf	_SPI0Buffer^(0+128)
  9253                           
  9254                           ;CC2500_B1.c: 261: while (RC2 == 1 && RF1.Timeout == 0) {
  9255  1081  2885               	goto	l9237
  9256  1082                     l9235:	
  9257                           
  9258                           ;CC2500_B1.c: 262: RF_Timeout_Counter();
  9259  1082  319D  257C  3190   	fcall	_RF_Timeout_Counter
  9260  1085                     l9237:	
  9261  1085  0020               	movlb	0	; select bank0
  9262  1086  1D0E               	btfss	14,2	;volatile
  9263  1087  288B               	goto	l9241
  9264  1088  0021               	movlb	1	; select bank1
  9265  1089  1F21               	btfss	(_RF1^(0+128)+1),6
  9266  108A  2882               	goto	l9235
  9267  108B                     l9241:	
  9268                           
  9269                           ;CC2500_B1.c: 263: };
  9270                           ;CC2500_B1.c: 264: setRF_TimeoutCleared();
  9271  108B  319A  22D4  3190   	fcall	_setRF_TimeoutCleared
  9272                           
  9273                           ;CC2500_B1.c: 266: CC2500_WriteByte();
  9274  108E  319E  262B  3190   	fcall	_CC2500_WriteByte
  9275                           
  9276                           ;CC2500_B1.c: 267: SPI0Buffer = value;
  9277  1091  0874               	movf	CC2500_WriteREG@value,w
  9278  1092  00F5               	movwf	??_CC2500_WriteREG
  9279  1093  0875               	movf	??_CC2500_WriteREG,w
  9280  1094  0021               	movlb	1	; select bank1
  9281  1095  00CA               	movwf	_SPI0Buffer^(0+128)
  9282                           
  9283                           ;CC2500_B1.c: 268: CC2500_WriteByte();
  9284  1096  319E  262B         	fcall	_CC2500_WriteByte
  9285                           
  9286                           ;CC2500_B1.c: 269: RC4 = 1;
  9287  1098  0020               	movlb	0	; select bank0
  9288  1099  160E               	bsf	14,4	;volatile
  9289  109A  0008               	return
  9290  109B                     __end_of_CC2500_WriteREG:	
  9291                           
  9292                           	psect	text46
  9293  1B72                     __ptext46:	
  9294 ;; *************** function _CC2500_FrequencyCabr *****************
  9295 ;; Defined at:
  9296 ;;		line 208 in file "../src/CC2500_B1.c"
  9297 ;; Parameters:    Size  Location     Type
  9298 ;;		None
  9299 ;; Auto vars:     Size  Location     Type
  9300 ;;		None
  9301 ;; Return value:  Size  Location     Type
  9302 ;;		None               void
  9303 ;; Registers used:
  9304 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9305 ;; Tracked objects:
  9306 ;;		On entry : 0/0
  9307 ;;		On exit  : 0/0
  9308 ;;		Unchanged: 0/0
  9309 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9310 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9311 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9312 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9313 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9314 ;;Total ram usage:        0 bytes
  9315 ;; Hardware stack levels used:    1
  9316 ;; Hardware stack levels required when called:    5
  9317 ;; This function calls:
  9318 ;;		_CC2500_WriteCommand
  9319 ;;		_DelayTime_1us
  9320 ;; This function is called by:
  9321 ;;		_CC2500_PowerOnInitial
  9322 ;; This function uses a non-reentrant model
  9323 ;;
  9324                           
  9325                           
  9326                           ;psect for function _CC2500_FrequencyCabr
  9327  1B72                     _CC2500_FrequencyCabr:	
  9328                           
  9329                           ;CC2500_B1.c: 209: CC2500_WriteCommand(0x33);
  9330                           
  9331                           ;incstack = 0
  9332                           ; Regs used in _CC2500_FrequencyCabr: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9333  1B72  3033               	movlw	51
  9334  1B73  319E  265D  319B   	fcall	_CC2500_WriteCommand
  9335                           
  9336                           ;CC2500_B1.c: 210: DelayTime_1us(1000);
  9337  1B76  30E8               	movlw	232
  9338  1B77  00F2               	movwf	DelayTime_1us@count
  9339  1B78  3003               	movlw	3
  9340  1B79  00F3               	movwf	DelayTime_1us@count+1
  9341  1B7A  3190  20E3         	fcall	_DelayTime_1us
  9342  1B7C  0008               	return
  9343  1B7D                     __end_of_CC2500_FrequencyCabr:	
  9344                           
  9345                           	psect	text47
  9346  10E3                     __ptext47:	
  9347 ;; *************** function _DelayTime_1us *****************
  9348 ;; Defined at:
  9349 ;;		line 327 in file "../src/CC2500_B1.c"
  9350 ;; Parameters:    Size  Location     Type
  9351 ;;  count           2    2[COMMON] int 
  9352 ;; Auto vars:     Size  Location     Type
  9353 ;;  j               2    6[COMMON] unsigned int 
  9354 ;;  i               2    4[COMMON] unsigned int 
  9355 ;; Return value:  Size  Location     Type
  9356 ;;		None               void
  9357 ;; Registers used:
  9358 ;;		wreg, status,2
  9359 ;; Tracked objects:
  9360 ;;		On entry : 0/0
  9361 ;;		On exit  : 0/0
  9362 ;;		Unchanged: 0/0
  9363 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9364 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9365 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9366 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9367 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9368 ;;Total ram usage:        6 bytes
  9369 ;; Hardware stack levels used:    1
  9370 ;; Hardware stack levels required when called:    3
  9371 ;; This function calls:
  9372 ;;		Nothing
  9373 ;; This function is called by:
  9374 ;;		_CC2500_PowerRST
  9375 ;;		_CC2500_FrequencyCabr
  9376 ;; This function uses a non-reentrant model
  9377 ;;
  9378                           
  9379                           
  9380                           ;psect for function _DelayTime_1us
  9381  10E3                     _DelayTime_1us:	
  9382                           
  9383                           ;CC2500_B1.c: 328: unsigned int i, j;
  9384                           ;CC2500_B1.c: 329: for (i = 1; i < count; i++)
  9385                           
  9386                           ;incstack = 0
  9387                           ; Regs used in _DelayTime_1us: [wreg+status,2]
  9388  10E3  3001               	movlw	1
  9389  10E4  00F4               	movwf	DelayTime_1us@i
  9390  10E5  3000               	movlw	0
  9391  10E6  00F5               	movwf	DelayTime_1us@i+1
  9392  10E7                     l371:	
  9393  10E7  0873               	movf	DelayTime_1us@count+1,w
  9394  10E8  0275               	subwf	DelayTime_1us@i+1,w
  9395  10E9  1D03               	skipz
  9396  10EA  28ED               	goto	u6255
  9397  10EB  0872               	movf	DelayTime_1us@count,w
  9398  10EC  0274               	subwf	DelayTime_1us@i,w
  9399  10ED                     u6255:	
  9400  10ED  1803               	btfsc	3,0
  9401  10EE  0008               	return
  9402                           
  9403                           ;CC2500_B1.c: 330: for (j = 0; j <= 1; j++);
  9404  10EF  01F6               	clrf	DelayTime_1us@j
  9405  10F0  01F7               	clrf	DelayTime_1us@j+1
  9406  10F1  3000               	movlw	0
  9407  10F2  0277               	subwf	DelayTime_1us@j+1,w
  9408  10F3  3002               	movlw	2
  9409  10F4  1903               	skipnz
  9410  10F5  0276               	subwf	DelayTime_1us@j,w
  9411  10F6  1803               	btfsc	3,0
  9412  10F7  2903               	goto	l6857
  9413  10F8                     l6855:	
  9414  10F8  3001               	movlw	1
  9415  10F9  07F6               	addwf	DelayTime_1us@j,f
  9416  10FA  3000               	movlw	0
  9417  10FB  3DF7               	addwfc	DelayTime_1us@j+1,f
  9418  10FC  3000               	movlw	0
  9419  10FD  0277               	subwf	DelayTime_1us@j+1,w
  9420  10FE  3002               	movlw	2
  9421  10FF  1903               	skipnz
  9422  1100  0276               	subwf	DelayTime_1us@j,w
  9423  1101  1C03               	skipc
  9424  1102  28F8               	goto	l6855
  9425  1103                     l6857:	
  9426  1103  3001               	movlw	1
  9427  1104  07F4               	addwf	DelayTime_1us@i,f
  9428  1105  3000               	movlw	0
  9429  1106  3DF5               	addwfc	DelayTime_1us@i+1,f
  9430  1107  28E7               	goto	l371
  9431  1108                     __end_of_DelayTime_1us:	
  9432                           
  9433                           	psect	text48
  9434  1ADC                     __ptext48:	
  9435 ;; *************** function _CC2500_ClearTXFIFO *****************
  9436 ;; Defined at:
  9437 ;;		line 194 in file "../src/CC2500_B1.c"
  9438 ;; Parameters:    Size  Location     Type
  9439 ;;		None
  9440 ;; Auto vars:     Size  Location     Type
  9441 ;;		None
  9442 ;; Return value:  Size  Location     Type
  9443 ;;		None               void
  9444 ;; Registers used:
  9445 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9446 ;; Tracked objects:
  9447 ;;		On entry : 0/0
  9448 ;;		On exit  : 0/0
  9449 ;;		Unchanged: 0/0
  9450 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9451 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9452 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9453 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9454 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9455 ;;Total ram usage:        0 bytes
  9456 ;; Hardware stack levels used:    1
  9457 ;; Hardware stack levels required when called:    5
  9458 ;; This function calls:
  9459 ;;		_CC2500_WriteCommand
  9460 ;; This function is called by:
  9461 ;;		_CC2500_PowerOnInitial
  9462 ;; This function uses a non-reentrant model
  9463 ;;
  9464                           
  9465                           
  9466                           ;psect for function _CC2500_ClearTXFIFO
  9467  1ADC                     _CC2500_ClearTXFIFO:	
  9468                           
  9469                           ;CC2500_B1.c: 195: CC2500_WriteCommand(0x3B);
  9470                           
  9471                           ;incstack = 0
  9472                           ; Regs used in _CC2500_ClearTXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9473  1ADC  303B               	movlw	59
  9474  1ADD  319E  265D         	fcall	_CC2500_WriteCommand
  9475  1ADF  0008               	return
  9476  1AE0                     __end_of_CC2500_ClearTXFIFO:	
  9477                           
  9478                           	psect	text49
  9479  1AD8                     __ptext49:	
  9480 ;; *************** function _CC2500_ClearRXFIFO *****************
  9481 ;; Defined at:
  9482 ;;		line 201 in file "../src/CC2500_B1.c"
  9483 ;; Parameters:    Size  Location     Type
  9484 ;;		None
  9485 ;; Auto vars:     Size  Location     Type
  9486 ;;		None
  9487 ;; Return value:  Size  Location     Type
  9488 ;;		None               void
  9489 ;; Registers used:
  9490 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9491 ;; Tracked objects:
  9492 ;;		On entry : 0/0
  9493 ;;		On exit  : 0/0
  9494 ;;		Unchanged: 0/0
  9495 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9496 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9497 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9498 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9499 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9500 ;;Total ram usage:        0 bytes
  9501 ;; Hardware stack levels used:    1
  9502 ;; Hardware stack levels required when called:    5
  9503 ;; This function calls:
  9504 ;;		_CC2500_WriteCommand
  9505 ;; This function is called by:
  9506 ;;		_CC2500_PowerOnInitial
  9507 ;; This function uses a non-reentrant model
  9508 ;;
  9509                           
  9510                           
  9511                           ;psect for function _CC2500_ClearRXFIFO
  9512  1AD8                     _CC2500_ClearRXFIFO:	
  9513                           
  9514                           ;CC2500_B1.c: 202: CC2500_WriteCommand(0x3A);
  9515                           
  9516                           ;incstack = 0
  9517                           ; Regs used in _CC2500_ClearRXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9518  1AD8  303A               	movlw	58
  9519  1AD9  319E  265D         	fcall	_CC2500_WriteCommand
  9520  1ADB  0008               	return
  9521  1ADC                     __end_of_CC2500_ClearRXFIFO:	
  9522                           
  9523                           	psect	text50
  9524  1E5D                     __ptext50:	
  9525 ;; *************** function _CC2500_WriteCommand *****************
  9526 ;; Defined at:
  9527 ;;		line 292 in file "../src/CC2500_B1.c"
  9528 ;; Parameters:    Size  Location     Type
  9529 ;;  command         1    wreg     unsigned char 
  9530 ;; Auto vars:     Size  Location     Type
  9531 ;;  command         1    5[COMMON] unsigned char 
  9532 ;; Return value:  Size  Location     Type
  9533 ;;		None               void
  9534 ;; Registers used:
  9535 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9536 ;; Tracked objects:
  9537 ;;		On entry : 0/0
  9538 ;;		On exit  : 0/0
  9539 ;;		Unchanged: 0/0
  9540 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9541 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9542 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9543 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9544 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9545 ;;Total ram usage:        2 bytes
  9546 ;; Hardware stack levels used:    1
  9547 ;; Hardware stack levels required when called:    4
  9548 ;; This function calls:
  9549 ;;		_CC2500_WriteByte
  9550 ;;		_RF_Timeout_Counter
  9551 ;;		_setRF_TimeoutCleared
  9552 ;; This function is called by:
  9553 ;;		_CC2500_TxData
  9554 ;;		_CC2500_RxData
  9555 ;;		_CC2500_ClearTXFIFO
  9556 ;;		_CC2500_ClearRXFIFO
  9557 ;;		_CC2500_FrequencyCabr
  9558 ;;		_CC2500_SIDLEMode
  9559 ;;		_setRF_Main
  9560 ;;		_RF_RxDisable
  9561 ;; This function uses a non-reentrant model
  9562 ;;
  9563                           
  9564                           
  9565                           ;psect for function _CC2500_WriteCommand
  9566  1E5D                     _CC2500_WriteCommand:	
  9567                           
  9568                           ;incstack = 0
  9569                           ; Regs used in _CC2500_WriteCommand: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9570                           ;CC2500_WriteCommand@command stored from wreg
  9571  1E5D  00F5               	movwf	CC2500_WriteCommand@command
  9572                           
  9573                           ;CC2500_B1.c: 293: RC4 = 0;
  9574  1E5E  0020               	movlb	0	; select bank0
  9575  1E5F  120E               	bcf	14,4	;volatile
  9576                           
  9577                           ;CC2500_B1.c: 294: SPI0Buffer = command;
  9578  1E60  0875               	movf	CC2500_WriteCommand@command,w
  9579  1E61  00F4               	movwf	??_CC2500_WriteCommand
  9580  1E62  0874               	movf	??_CC2500_WriteCommand,w
  9581  1E63  0021               	movlb	1	; select bank1
  9582  1E64  00CA               	movwf	_SPI0Buffer^(0+128)
  9583                           
  9584                           ;CC2500_B1.c: 296: while (RC2 == 1 && RF1.Timeout == 0) {
  9585  1E65  2E69               	goto	l9221
  9586  1E66                     l9219:	
  9587                           
  9588                           ;CC2500_B1.c: 297: RF_Timeout_Counter();
  9589  1E66  319D  257C  319E   	fcall	_RF_Timeout_Counter
  9590  1E69                     l9221:	
  9591  1E69  0020               	movlb	0	; select bank0
  9592  1E6A  1D0E               	btfss	14,2	;volatile
  9593  1E6B  2E6F               	goto	l9225
  9594  1E6C  0021               	movlb	1	; select bank1
  9595  1E6D  1F21               	btfss	(_RF1^(0+128)+1),6
  9596  1E6E  2E66               	goto	l9219
  9597  1E6F                     l9225:	
  9598                           
  9599                           ;CC2500_B1.c: 298: };
  9600                           ;CC2500_B1.c: 299: setRF_TimeoutCleared();
  9601  1E6F  319A  22D4  319E   	fcall	_setRF_TimeoutCleared
  9602                           
  9603                           ;CC2500_B1.c: 301: CC2500_WriteByte();
  9604  1E72  319E  262B         	fcall	_CC2500_WriteByte
  9605                           
  9606                           ;CC2500_B1.c: 302: RC4 = 1;
  9607  1E74  0020               	movlb	0	; select bank0
  9608  1E75  160E               	bsf	14,4	;volatile
  9609  1E76  0008               	return
  9610  1E77                     __end_of_CC2500_WriteCommand:	
  9611                           
  9612                           	psect	text51
  9613  1AD4                     __ptext51:	
  9614 ;; *************** function _setRF_TimeoutCleared *****************
  9615 ;; Defined at:
  9616 ;;		line 149 in file "../src/RF_Control_B1.c"
  9617 ;; Parameters:    Size  Location     Type
  9618 ;;		None
  9619 ;; Auto vars:     Size  Location     Type
  9620 ;;		None
  9621 ;; Return value:  Size  Location     Type
  9622 ;;		None               void
  9623 ;; Registers used:
  9624 ;;		status,2
  9625 ;; Tracked objects:
  9626 ;;		On entry : 0/0
  9627 ;;		On exit  : 0/0
  9628 ;;		Unchanged: 0/0
  9629 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9630 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9631 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9632 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9633 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9634 ;;Total ram usage:        0 bytes
  9635 ;; Hardware stack levels used:    1
  9636 ;; Hardware stack levels required when called:    3
  9637 ;; This function calls:
  9638 ;;		Nothing
  9639 ;; This function is called by:
  9640 ;;		_CC2500_TxData
  9641 ;;		_CC2500_RxData
  9642 ;;		_CC2500_PowerRST
  9643 ;;		_CC2500_WriteREG
  9644 ;;		_CC2500_WriteCommand
  9645 ;;		_CC2500_ReadStatus
  9646 ;;		_CC2500_ReadREG
  9647 ;; This function uses a non-reentrant model
  9648 ;;
  9649                           
  9650                           
  9651                           ;psect for function _setRF_TimeoutCleared
  9652  1AD4                     _setRF_TimeoutCleared:	
  9653                           
  9654                           ;RF_Control_B1.c: 150: RF1.TimeoutCount = 0;
  9655                           
  9656                           ;incstack = 0
  9657                           ; Regs used in _setRF_TimeoutCleared: [status,2]
  9658  1AD4  0021               	movlb	1	; select bank1
  9659  1AD5  01AC               	clrf	(_RF1^(0+128)+12)
  9660  1AD6  01AD               	clrf	((_RF1+1)^(0+128)+12)
  9661  1AD7  0008               	return
  9662  1AD8                     __end_of_setRF_TimeoutCleared:	
  9663                           
  9664                           	psect	text52
  9665  1D7C                     __ptext52:	
  9666 ;; *************** function _RF_Timeout_Counter *****************
  9667 ;; Defined at:
  9668 ;;		line 141 in file "../src/RF_Control_B1.c"
  9669 ;; Parameters:    Size  Location     Type
  9670 ;;		None
  9671 ;; Auto vars:     Size  Location     Type
  9672 ;;		None
  9673 ;; Return value:  Size  Location     Type
  9674 ;;		None               void
  9675 ;; Registers used:
  9676 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9677 ;; Tracked objects:
  9678 ;;		On entry : 0/0
  9679 ;;		On exit  : 0/0
  9680 ;;		Unchanged: 0/0
  9681 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9682 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9683 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9684 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9685 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9686 ;;Total ram usage:        0 bytes
  9687 ;; Hardware stack levels used:    1
  9688 ;; Hardware stack levels required when called:    3
  9689 ;; This function calls:
  9690 ;;		Nothing
  9691 ;; This function is called by:
  9692 ;;		_CC2500_TxData
  9693 ;;		_CC2500_RxData
  9694 ;;		_CC2500_PowerRST
  9695 ;;		_CC2500_WriteREG
  9696 ;;		_CC2500_WriteCommand
  9697 ;;		_CC2500_ReadStatus
  9698 ;;		_CC2500_ReadREG
  9699 ;; This function uses a non-reentrant model
  9700 ;;
  9701                           
  9702                           
  9703                           ;psect for function _RF_Timeout_Counter
  9704  1D7C                     _RF_Timeout_Counter:	
  9705                           
  9706                           ;RF_Control_B1.c: 142: RF1.TimeoutCount++;
  9707                           
  9708                           ;incstack = 0
  9709                           ; Regs used in _RF_Timeout_Counter: [wreg+fsr1l+fsr1h+status,2+status,0]
  9710  1D7C  3001               	movlw	1
  9711  1D7D  0021               	movlb	1	; select bank1
  9712  1D7E  07AC               	addwf	(_RF1^(0+128)+12),f
  9713  1D7F  3000               	movlw	0
  9714  1D80  3DAD               	addwfc	((_RF1+1)^(0+128)+12),f
  9715                           
  9716                           ;RF_Control_B1.c: 143: if (RF1.TimeoutCount == 25000) {
  9717  1D81  300C               	movlw	12
  9718  1D82  3EA0               	addlw	_RF1& (0+255)
  9719  1D83  0086               	movwf	6
  9720  1D84  0187               	clrf	7
  9721  1D85  3F40               	moviw [0]fsr1
  9722  1D86  3AA8               	xorlw	168
  9723  1D87  1D03               	skipz
  9724  1D88  2D8B               	goto	u10205
  9725  1D89  3F41               	moviw [1]fsr1
  9726  1D8A  3A61               	xorlw	97
  9727  1D8B                     u10205:	
  9728  1D8B  1D03               	skipz
  9729  1D8C  0008               	return
  9730                           
  9731                           ;RF_Control_B1.c: 144: RF1.TimeoutCount = 0;
  9732  1D8D  01AC               	clrf	(_RF1^(0+128)+12)
  9733  1D8E  01AD               	clrf	((_RF1+1)^(0+128)+12)
  9734                           
  9735                           ;RF_Control_B1.c: 145: RF1.Timeout = 1;
  9736  1D8F  1721               	bsf	(_RF1^(0+128)+1),6
  9737  1D90  0008               	return
  9738  1D91                     __end_of_RF_Timeout_Counter:	
  9739                           
  9740                           	psect	text53
  9741  1E2B                     __ptext53:	
  9742 ;; *************** function _CC2500_WriteByte *****************
  9743 ;; Defined at:
  9744 ;;		line 226 in file "../src/CC2500_B1.c"
  9745 ;; Parameters:    Size  Location     Type
  9746 ;;		None
  9747 ;; Auto vars:     Size  Location     Type
  9748 ;;  loop_a          1    3[COMMON] unsigned char 
  9749 ;; Return value:  Size  Location     Type
  9750 ;;		None               void
  9751 ;; Registers used:
  9752 ;;		wreg, status,2, status,0
  9753 ;; Tracked objects:
  9754 ;;		On entry : 0/0
  9755 ;;		On exit  : 0/0
  9756 ;;		Unchanged: 0/0
  9757 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9758 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9759 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9760 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9761 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9762 ;;Total ram usage:        2 bytes
  9763 ;; Hardware stack levels used:    1
  9764 ;; Hardware stack levels required when called:    3
  9765 ;; This function calls:
  9766 ;;		Nothing
  9767 ;; This function is called by:
  9768 ;;		_CC2500_TxData
  9769 ;;		_CC2500_RxData
  9770 ;;		_CC2500_PowerRST
  9771 ;;		_CC2500_WriteREG
  9772 ;;		_CC2500_WriteCommand
  9773 ;;		_CC2500_ReadStatus
  9774 ;;		_CC2500_ReadREG
  9775 ;; This function uses a non-reentrant model
  9776 ;;
  9777                           
  9778                           
  9779                           ;psect for function _CC2500_WriteByte
  9780  1E2B                     _CC2500_WriteByte:	
  9781                           
  9782                           ;CC2500_B1.c: 227: unsigned char loop_a;
  9783                           ;CC2500_B1.c: 228: for (loop_a = 0; loop_a < 8; loop_a++) {
  9784                           
  9785                           ;incstack = 0
  9786                           ; Regs used in _CC2500_WriteByte: [wreg+status,2+status,0]
  9787  1E2B  01F3               	clrf	CC2500_WriteByte@loop_a
  9788  1E2C                     L6:	
  9789  1E2C  3008               	movlw	8
  9790  1E2D  0273               	subwf	CC2500_WriteByte@loop_a,w
  9791  1E2E  1803               	btfsc	3,0
  9792  1E2F  0008               	return
  9793                           
  9794                           ;CC2500_B1.c: 229: if (SPI0Buffer & 0x80)
  9795  1E30  0021               	movlb	1	; select bank1
  9796  1E31  1FCA               	btfss	_SPI0Buffer^(0+128),7
  9797  1E32  2E36               	goto	l327
  9798                           
  9799                           ;CC2500_B1.c: 230: RC0 = 1;
  9800  1E33  0020               	movlb	0	; select bank0
  9801  1E34  140E               	bsf	14,0	;volatile
  9802  1E35  2E38               	goto	l328
  9803  1E36                     l327:	
  9804                           
  9805                           ;CC2500_B1.c: 231: else
  9806                           ;CC2500_B1.c: 232: RC0 = 0;
  9807  1E36  0020               	movlb	0	; select bank0
  9808  1E37  100E               	bcf	14,0	;volatile
  9809  1E38                     l328:	
  9810                           
  9811                           ;CC2500_B1.c: 233: RC1 = 1;
  9812  1E38  148E               	bsf	14,1	;volatile
  9813                           
  9814                           ;CC2500_B1.c: 234: SPI0Buffer <<= 1;
  9815  1E39  1003               	clrc
  9816  1E3A  0021               	movlb	1	; select bank1
  9817  1E3B  0DCA               	rlf	_SPI0Buffer^(0+128),f
  9818                           
  9819                           ;CC2500_B1.c: 235: RC1 = 0;
  9820  1E3C  0020               	movlb	0	; select bank0
  9821  1E3D  108E               	bcf	14,1	;volatile
  9822  1E3E  3001               	movlw	1
  9823  1E3F  00F2               	movwf	??_CC2500_WriteByte
  9824  1E40  0872               	movf	??_CC2500_WriteByte,w
  9825  1E41  07F3               	addwf	CC2500_WriteByte@loop_a,f
  9826  1E42  2E2C               	goto	L6
  9827  1E43                     __end_of_CC2500_WriteByte:	
  9828                           
  9829                           	psect	text54
  9830  1AC4                     __ptext54:	
  9831 ;; *************** function _RF_Initialization *****************
  9832 ;; Defined at:
  9833 ;;		line 9 in file "../src/RF_Control_B1.c"
  9834 ;; Parameters:    Size  Location     Type
  9835 ;;		None
  9836 ;; Auto vars:     Size  Location     Type
  9837 ;;		None
  9838 ;; Return value:  Size  Location     Type
  9839 ;;		None               void
  9840 ;; Registers used:
  9841 ;;		wreg, status,2, status,0, pclath, cstack
  9842 ;; Tracked objects:
  9843 ;;		On entry : 0/0
  9844 ;;		On exit  : 0/0
  9845 ;;		Unchanged: 0/0
  9846 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9847 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9848 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9849 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9850 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9851 ;;Total ram usage:        0 bytes
  9852 ;; Hardware stack levels used:    1
  9853 ;; Hardware stack levels required when called:    4
  9854 ;; This function calls:
  9855 ;;		_setRF_Initialization
  9856 ;; This function is called by:
  9857 ;;		_main
  9858 ;; This function uses a non-reentrant model
  9859 ;;
  9860                           
  9861                           
  9862                           ;psect for function _RF_Initialization
  9863  1AC4                     _RF_Initialization:	
  9864                           
  9865                           ;RF_Control_B1.c: 11: setRF_Initialization();
  9866                           
  9867                           ;incstack = 0
  9868                           ; Regs used in _RF_Initialization: [wreg+status,2+status,0+pclath+cstack]
  9869  1AC4  319B  2352         	fcall	_setRF_Initialization
  9870  1AC6  0008               	return
  9871  1AC7                     __end_of_RF_Initialization:	
  9872                           
  9873                           	psect	text55
  9874  1B52                     __ptext55:	
  9875 ;; *************** function _setRF_Initialization *****************
  9876 ;; Defined at:
  9877 ;;		line 17 in file "../src/RF_Control_B1.c"
  9878 ;; Parameters:    Size  Location     Type
  9879 ;;		None
  9880 ;; Auto vars:     Size  Location     Type
  9881 ;;		None
  9882 ;; Return value:  Size  Location     Type
  9883 ;;		None               void
  9884 ;; Registers used:
  9885 ;;		wreg
  9886 ;; Tracked objects:
  9887 ;;		On entry : 0/0
  9888 ;;		On exit  : 0/0
  9889 ;;		Unchanged: 0/0
  9890 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9891 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9892 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9893 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9894 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9895 ;;Total ram usage:        1 bytes
  9896 ;; Hardware stack levels used:    1
  9897 ;; Hardware stack levels required when called:    3
  9898 ;; This function calls:
  9899 ;;		Nothing
  9900 ;; This function is called by:
  9901 ;;		_RF_Initialization
  9902 ;; This function uses a non-reentrant model
  9903 ;;
  9904                           
  9905                           
  9906                           ;psect for function _setRF_Initialization
  9907  1B52                     _setRF_Initialization:	
  9908                           
  9909                           ;RF_Control_B1.c: 19: Tx_Length = 21;
  9910                           
  9911                           ;incstack = 0
  9912                           ; Regs used in _setRF_Initialization: [wreg]
  9913  1B52  3015               	movlw	21
  9914  1B53  00F2               	movwf	??_setRF_Initialization
  9915  1B54  0872               	movf	??_setRF_Initialization,w
  9916  1B55  0021               	movlb	1	; select bank1
  9917  1B56  00CC               	movwf	_Tx_Length^(0+128)
  9918                           
  9919                           ;RF_Control_B1.c: 20: RF1.RunTime = 150;
  9920  1B57  3096               	movlw	150
  9921  1B58  00A7               	movwf	(_RF1^(0+128)+7)
  9922  1B59  3000               	movlw	0
  9923  1B5A  00A8               	movwf	(_RF1^(0+128)+8)
  9924  1B5B  0008               	return
  9925  1B5C                     __end_of_setRF_Initialization:	
  9926                           
  9927                           	psect	text56
  9928  1D03                     __ptext56:	
  9929 ;; *************** function _Mcu_Initialization *****************
  9930 ;; Defined at:
  9931 ;;		line 30 in file "../src/MCU_B1.c"
  9932 ;; Parameters:    Size  Location     Type
  9933 ;;		None
  9934 ;; Auto vars:     Size  Location     Type
  9935 ;;		None
  9936 ;; Return value:  Size  Location     Type
  9937 ;;		None               void
  9938 ;; Registers used:
  9939 ;;		wreg, status,2, status,0, pclath, cstack
  9940 ;; Tracked objects:
  9941 ;;		On entry : 0/0
  9942 ;;		On exit  : 0/0
  9943 ;;		Unchanged: 0/0
  9944 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9945 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9946 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9947 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9948 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9949 ;;Total ram usage:        0 bytes
  9950 ;; Hardware stack levels used:    1
  9951 ;; Hardware stack levels required when called:    4
  9952 ;; This function calls:
  9953 ;;		_ADC_Set
  9954 ;;		_Fosc_Set
  9955 ;;		_IOC_Set
  9956 ;;		_IO_Set
  9957 ;;		_TMR1_Set
  9958 ;;		_WDT_Set
  9959 ;; This function is called by:
  9960 ;;		_main
  9961 ;; This function uses a non-reentrant model
  9962 ;;
  9963                           
  9964                           
  9965                           ;psect for function _Mcu_Initialization
  9966  1D03                     _Mcu_Initialization:	
  9967                           
  9968                           ;MCU_B1.c: 32: Fosc_Set();
  9969                           
  9970                           ;incstack = 0
  9971                           ; Regs used in _Mcu_Initialization: [wreg+status,2+status,0+pclath+cstack]
  9972  1D03  319A  22D0  319D   	fcall	_Fosc_Set
  9973                           
  9974                           ;MCU_B1.c: 34: IO_Set();
  9975  1D06  319E  2643  319D   	fcall	_IO_Set
  9976                           
  9977                           ;MCU_B1.c: 36: ;;
  9978                           ;MCU_B1.c: 38: TMR1_Set();
  9979  1D09  319B  23C4  319D   	fcall	_TMR1_Set
  9980                           
  9981                           ;MCU_B1.c: 40: ADC_Set();
  9982  1D0C  319B  230F  319D   	fcall	_ADC_Set
  9983                           
  9984                           ;MCU_B1.c: 42: ;;
  9985                           ;MCU_B1.c: 44: ;;
  9986                           ;MCU_B1.c: 46: IOC_Set();
  9987  1D0F  319B  2348  319D   	fcall	_IOC_Set
  9988                           
  9989                           ;MCU_B1.c: 48: ;;
  9990                           ;MCU_B1.c: 50: ;;
  9991                           ;MCU_B1.c: 52: WDT_Set();
  9992  1D12  319B  233F         	fcall	_WDT_Set
  9993  1D14  0008               	return
  9994  1D15                     __end_of_Mcu_Initialization:	
  9995                           
  9996                           	psect	text57
  9997  1B3F                     __ptext57:	
  9998 ;; *************** function _WDT_Set *****************
  9999 ;; Defined at:
 10000 ;;		line 1073 in file "../src/MCU_B1.c"
 10001 ;; Parameters:    Size  Location     Type
 10002 ;;		None
 10003 ;; Auto vars:     Size  Location     Type
 10004 ;;		None
 10005 ;; Return value:  Size  Location     Type
 10006 ;;		None               void
 10007 ;; Registers used:
 10008 ;;		wreg
 10009 ;; Tracked objects:
 10010 ;;		On entry : 0/0
 10011 ;;		On exit  : 0/0
 10012 ;;		Unchanged: 0/0
 10013 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10014 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10015 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10016 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10017 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10018 ;;Total ram usage:        1 bytes
 10019 ;; Hardware stack levels used:    1
 10020 ;; Hardware stack levels required when called:    3
 10021 ;; This function calls:
 10022 ;;		Nothing
 10023 ;; This function is called by:
 10024 ;;		_Mcu_Initialization
 10025 ;; This function uses a non-reentrant model
 10026 ;;
 10027                           
 10028                           
 10029                           ;psect for function _WDT_Set
 10030  1B3F                     _WDT_Set:	
 10031                           
 10032                           ;MCU_B1.c: 1080: WDTCON = 0b00010111;;
 10033                           
 10034                           ;incstack = 0
 10035                           ; Regs used in _WDT_Set: [wreg]
 10036  1B3F  3017               	movlw	23
 10037  1B40  0021               	movlb	1	; select bank1
 10038  1B41  0097               	movwf	23	;volatile
 10039                           
 10040                           ;MCU_B1.c: 1082: WDT.Enable = 1;
 10041  1B42  1440               	bsf	_WDT^(0+128),0
 10042                           
 10043                           ;MCU_B1.c: 1083: WDT.Timer = 10;
 10044  1B43  300A               	movlw	10
 10045  1B44  00F2               	movwf	??_WDT_Set
 10046  1B45  0872               	movf	??_WDT_Set,w
 10047  1B46  00C1               	movwf	(_WDT^(0+128)+1)
 10048  1B47  0008               	return
 10049  1B48                     __end_of_WDT_Set:	
 10050                           
 10051                           	psect	text58
 10052  1BC4                     __ptext58:	
 10053 ;; *************** function _TMR1_Set *****************
 10054 ;; Defined at:
 10055 ;;		line 222 in file "../src/MCU_B1.c"
 10056 ;; Parameters:    Size  Location     Type
 10057 ;;		None
 10058 ;; Auto vars:     Size  Location     Type
 10059 ;;		None
 10060 ;; Return value:  Size  Location     Type
 10061 ;;		None               void
 10062 ;; Registers used:
 10063 ;;		wreg
 10064 ;; Tracked objects:
 10065 ;;		On entry : 0/0
 10066 ;;		On exit  : 0/0
 10067 ;;		Unchanged: 0/0
 10068 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10069 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10070 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10071 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10072 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10073 ;;Total ram usage:        0 bytes
 10074 ;; Hardware stack levels used:    1
 10075 ;; Hardware stack levels required when called:    3
 10076 ;; This function calls:
 10077 ;;		Nothing
 10078 ;; This function is called by:
 10079 ;;		_Mcu_Initialization
 10080 ;; This function uses a non-reentrant model
 10081 ;;
 10082                           
 10083                           
 10084                           ;psect for function _TMR1_Set
 10085  1BC4                     _TMR1_Set:	
 10086                           
 10087                           ;MCU_B1.c: 223: T1CON = (0x40 | 0x00 | 0x01);
 10088                           
 10089                           ;incstack = 0
 10090                           ; Regs used in _TMR1_Set: [wreg]
 10091  1BC4  3041               	movlw	65
 10092  1BC5  0020               	movlb	0	; select bank0
 10093  1BC6  0098               	movwf	24	;volatile
 10094                           
 10095                           ;MCU_B1.c: 224: TMR1H = (int)((65536-1480)/256);
 10096  1BC7  30FA               	movlw	250
 10097  1BC8  0097               	movwf	23	;volatile
 10098                           
 10099                           ;MCU_B1.c: 225: TMR1L = (int)((65536-1480)%256);
 10100  1BC9  3038               	movlw	56
 10101  1BCA  0096               	movwf	22	;volatile
 10102                           
 10103                           ;MCU_B1.c: 226: TMR1IE = 1;
 10104  1BCB  0021               	movlb	1	; select bank1
 10105  1BCC  1411               	bsf	17,0	;volatile
 10106                           
 10107                           ;MCU_B1.c: 227: PEIE = 1;
 10108  1BCD  170B               	bsf	11,6	;volatile
 10109                           
 10110                           ;MCU_B1.c: 228: GIE = 1;
 10111  1BCE  178B               	bsf	11,7	;volatile
 10112  1BCF  0008               	return
 10113  1BD0                     __end_of_TMR1_Set:	
 10114                           
 10115                           	psect	text59
 10116  1E43                     __ptext59:	
 10117 ;; *************** function _IO_Set *****************
 10118 ;; Defined at:
 10119 ;;		line 60 in file "../src/MCU_B1.c"
 10120 ;; Parameters:    Size  Location     Type
 10121 ;;		None
 10122 ;; Auto vars:     Size  Location     Type
 10123 ;;		None
 10124 ;; Return value:  Size  Location     Type
 10125 ;;		None               void
 10126 ;; Registers used:
 10127 ;;		wreg, status,2
 10128 ;; Tracked objects:
 10129 ;;		On entry : 0/0
 10130 ;;		On exit  : 0/0
 10131 ;;		Unchanged: 0/0
 10132 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10133 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10134 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10135 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10136 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10137 ;;Total ram usage:        0 bytes
 10138 ;; Hardware stack levels used:    1
 10139 ;; Hardware stack levels required when called:    3
 10140 ;; This function calls:
 10141 ;;		Nothing
 10142 ;; This function is called by:
 10143 ;;		_Mcu_Initialization
 10144 ;; This function uses a non-reentrant model
 10145 ;;
 10146                           
 10147                           
 10148                           ;psect for function _IO_Set
 10149  1E43                     _IO_Set:	
 10150                           
 10151                           ;MCU_B1.c: 88: TRISA = 0b01110111;;
 10152                           
 10153                           ;incstack = 0
 10154                           ; Regs used in _IO_Set: [wreg+status,2]
 10155  1E43  3077               	movlw	119
 10156  1E44  0021               	movlb	1	; select bank1
 10157  1E45  008C               	movwf	12	;volatile
 10158                           
 10159                           ;MCU_B1.c: 89: TRISB = 0b00000111;;
 10160  1E46  3007               	movlw	7
 10161  1E47  008D               	movwf	13	;volatile
 10162                           
 10163                           ;MCU_B1.c: 90: TRISC = 0b00001100;;
 10164  1E48  300C               	movlw	12
 10165  1E49  008E               	movwf	14	;volatile
 10166                           
 10167                           ;MCU_B1.c: 92: LATA = 0b00000000;;
 10168  1E4A  0022               	movlb	2	; select bank2
 10169  1E4B  018C               	clrf	12	;volatile
 10170                           
 10171                           ;MCU_B1.c: 93: LATB = 0b00000000;;
 10172  1E4C  018D               	clrf	13	;volatile
 10173                           
 10174                           ;MCU_B1.c: 94: LATC = 0b00000000;;
 10175  1E4D  018E               	clrf	14	;volatile
 10176                           
 10177                           ;MCU_B1.c: 96: ANSELA = 0b00100010;;
 10178  1E4E  3022               	movlw	34
 10179  1E4F  0023               	movlb	3	; select bank3
 10180  1E50  008C               	movwf	12	;volatile
 10181                           
 10182                           ;MCU_B1.c: 97: ANSELB = 0b00000000;;
 10183  1E51  018D               	clrf	13	;volatile
 10184                           
 10185                           ;MCU_B1.c: 98: ANSELC = 0b00000000;;
 10186  1E52  018E               	clrf	14	;volatile
 10187                           
 10188                           ;MCU_B1.c: 100: PORTA = 0b01110111;;
 10189  1E53  3077               	movlw	119
 10190  1E54  0020               	movlb	0	; select bank0
 10191  1E55  008C               	movwf	12	;volatile
 10192                           
 10193                           ;MCU_B1.c: 101: PORTB = 0b00000111;;
 10194  1E56  3007               	movlw	7
 10195  1E57  008D               	movwf	13	;volatile
 10196                           
 10197                           ;MCU_B1.c: 102: PORTC = 0b00001100;;
 10198  1E58  300C               	movlw	12
 10199  1E59  008E               	movwf	14	;volatile
 10200                           
 10201                           ;MCU_B1.c: 104: WPUB = 0b00000000;;
 10202  1E5A  0024               	movlb	4	; select bank4
 10203  1E5B  018D               	clrf	13	;volatile
 10204  1E5C  0008               	return
 10205  1E5D                     __end_of_IO_Set:	
 10206                           
 10207                           	psect	text60
 10208  1B48                     __ptext60:	
 10209 ;; *************** function _IOC_Set *****************
 10210 ;; Defined at:
 10211 ;;		line 363 in file "../src/MCU_B1.c"
 10212 ;; Parameters:    Size  Location     Type
 10213 ;;		None
 10214 ;; Auto vars:     Size  Location     Type
 10215 ;;		None
 10216 ;; Return value:  Size  Location     Type
 10217 ;;		None               void
 10218 ;; Registers used:
 10219 ;;		wreg, status,2
 10220 ;; Tracked objects:
 10221 ;;		On entry : 0/0
 10222 ;;		On exit  : 0/0
 10223 ;;		Unchanged: 0/0
 10224 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10225 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10226 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10227 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10228 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10229 ;;Total ram usage:        0 bytes
 10230 ;; Hardware stack levels used:    1
 10231 ;; Hardware stack levels required when called:    3
 10232 ;; This function calls:
 10233 ;;		Nothing
 10234 ;; This function is called by:
 10235 ;;		_Mcu_Initialization
 10236 ;; This function uses a non-reentrant model
 10237 ;;
 10238                           
 10239                           
 10240                           ;psect for function _IOC_Set
 10241  1B48                     _IOC_Set:	
 10242                           
 10243                           ;MCU_B1.c: 365: IOCBP = 0b00000100;;
 10244                           
 10245                           ;incstack = 0
 10246                           ; Regs used in _IOC_Set: [wreg+status,2]
 10247  1B48  3004               	movlw	4
 10248  1B49  0027               	movlb	7	; select bank7
 10249  1B4A  0094               	movwf	20	;volatile
 10250                           
 10251                           ;MCU_B1.c: 366: IOCBN = 0b00000000;;
 10252  1B4B  0195               	clrf	21	;volatile
 10253                           
 10254                           ;MCU_B1.c: 368: IOCBF = 0b00000000;
 10255  1B4C  0196               	clrf	22	;volatile
 10256                           
 10257                           ;MCU_B1.c: 370: IOCIE = 1;
 10258  1B4D  158B               	bsf	11,3	;volatile
 10259                           
 10260                           ;MCU_B1.c: 371: IOCIF = 0;
 10261  1B4E  100B               	bcf	11,0	;volatile
 10262                           
 10263                           ;MCU_B1.c: 372: PEIE = 1;
 10264  1B4F  170B               	bsf	11,6	;volatile
 10265                           
 10266                           ;MCU_B1.c: 373: GIE = 1;
 10267  1B50  178B               	bsf	11,7	;volatile
 10268  1B51  0008               	return
 10269  1B52                     __end_of_IOC_Set:	
 10270                           
 10271                           	psect	text61
 10272  1AD0                     __ptext61:	
 10273 ;; *************** function _Fosc_Set *****************
 10274 ;; Defined at:
 10275 ;;		line 56 in file "../src/MCU_B1.c"
 10276 ;; Parameters:    Size  Location     Type
 10277 ;;		None
 10278 ;; Auto vars:     Size  Location     Type
 10279 ;;		None
 10280 ;; Return value:  Size  Location     Type
 10281 ;;		None               void
 10282 ;; Registers used:
 10283 ;;		wreg
 10284 ;; Tracked objects:
 10285 ;;		On entry : 0/0
 10286 ;;		On exit  : 0/0
 10287 ;;		Unchanged: 0/0
 10288 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10289 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10290 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10291 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10292 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10293 ;;Total ram usage:        0 bytes
 10294 ;; Hardware stack levels used:    1
 10295 ;; Hardware stack levels required when called:    3
 10296 ;; This function calls:
 10297 ;;		Nothing
 10298 ;; This function is called by:
 10299 ;;		_Mcu_Initialization
 10300 ;; This function uses a non-reentrant model
 10301 ;;
 10302                           
 10303                           
 10304                           ;psect for function _Fosc_Set
 10305  1AD0                     _Fosc_Set:	
 10306                           
 10307                           ;MCU_B1.c: 57: OSCCON = 0x78;
 10308                           
 10309                           ;incstack = 0
 10310                           ; Regs used in _Fosc_Set: [wreg]
 10311  1AD0  3078               	movlw	120
 10312  1AD1  0021               	movlb	1	; select bank1
 10313  1AD2  0099               	movwf	25	;volatile
 10314  1AD3  0008               	return
 10315  1AD4                     __end_of_Fosc_Set:	
 10316                           
 10317                           	psect	text62
 10318  1B0F                     __ptext62:	
 10319 ;; *************** function _ADC_Set *****************
 10320 ;; Defined at:
 10321 ;;		line 409 in file "../src/MCU_B1.c"
 10322 ;; Parameters:    Size  Location     Type
 10323 ;;		None
 10324 ;; Auto vars:     Size  Location     Type
 10325 ;;		None
 10326 ;; Return value:  Size  Location     Type
 10327 ;;		None               void
 10328 ;; Registers used:
 10329 ;;		wreg
 10330 ;; Tracked objects:
 10331 ;;		On entry : 0/0
 10332 ;;		On exit  : 0/0
 10333 ;;		Unchanged: 0/0
 10334 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10335 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10336 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10337 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10338 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10339 ;;Total ram usage:        0 bytes
 10340 ;; Hardware stack levels used:    1
 10341 ;; Hardware stack levels required when called:    3
 10342 ;; This function calls:
 10343 ;;		Nothing
 10344 ;; This function is called by:
 10345 ;;		_Mcu_Initialization
 10346 ;; This function uses a non-reentrant model
 10347 ;;
 10348                           
 10349                           
 10350                           ;psect for function _ADC_Set
 10351  1B0F                     _ADC_Set:	
 10352                           
 10353                           ;MCU_B1.c: 410: ADCON1 = 0xf3;
 10354                           
 10355                           ;incstack = 0
 10356                           ; Regs used in _ADC_Set: [wreg]
 10357  1B0F  30F3               	movlw	243
 10358  1B10  0021               	movlb	1	; select bank1
 10359  1B11  009E               	movwf	30	;volatile
 10360                           
 10361                           ;MCU_B1.c: 411: FVRCON = 0xc1;
 10362  1B12  30C1               	movlw	193
 10363  1B13  0022               	movlb	2	; select bank2
 10364  1B14  0097               	movwf	23	;volatile
 10365  1B15  0008               	return
 10366  1B16                     __end_of_ADC_Set:	
 10367                           
 10368                           	psect	text63
 10369  0054                     __ptext63:	
 10370 ;; *************** function _Load_Main *****************
 10371 ;; Defined at:
 10372 ;;		line 39 in file "../src/OverLoad_B1.c"
 10373 ;; Parameters:    Size  Location     Type
 10374 ;;		None
 10375 ;; Auto vars:     Size  Location     Type
 10376 ;;  i               2    4[BANK0 ] int 
 10377 ;;  Load_Status     1    3[BANK0 ] unsigned char 
 10378 ;;  error           1    2[BANK0 ] unsigned char 
 10379 ;; Return value:  Size  Location     Type
 10380 ;;		None               void
 10381 ;; Registers used:
 10382 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10383 ;; Tracked objects:
 10384 ;;		On entry : 0/0
 10385 ;;		On exit  : 0/0
 10386 ;;		Unchanged: 0/0
 10387 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10388 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10389 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10390 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10391 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10392 ;;Total ram usage:        6 bytes
 10393 ;; Hardware stack levels used:    1
 10394 ;; Hardware stack levels required when called:    4
 10395 ;; This function calls:
 10396 ;;		___lwdiv
 10397 ;;		___wmul
 10398 ;;		_getAll_DimmerIntr_Dimming_Sw_RF
 10399 ;;		_getDimmer_LoadGO
 10400 ;;		_getDimmer_Load_Status
 10401 ;;		_getMain_All_Error_Status
 10402 ;;		_getMain_All_LightsStatus
 10403 ;;		_getMain_Lights_Count
 10404 ;;		_setLoad_AH_AL_Restore
 10405 ;; This function is called by:
 10406 ;;		_main
 10407 ;; This function uses a non-reentrant model
 10408 ;;
 10409                           
 10410                           
 10411                           ;psect for function _Load_Main
 10412  0054                     _Load_Main:	
 10413                           
 10414                           ;OverLoad_B1.c: 40: char error = getMain_All_Error_Status(0);
 10415                           
 10416                           ;incstack = 0
 10417                           ; Regs used in _Load_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10418  0054  3000               	movlw	0
 10419  0055  3191  21D4  3180   	fcall	_getMain_All_Error_Status
 10420  0058  0020               	movlb	0	; select bank0
 10421  0059  00A0               	movwf	??_Load_Main
 10422  005A  0820               	movf	??_Load_Main,w
 10423  005B  00A2               	movwf	Load_Main@error
 10424                           
 10425                           ;OverLoad_B1.c: 41: char Load_Status = 0;
 10426  005C  01A3               	clrf	Load_Main@Load_Status
 10427                           
 10428                           ;OverLoad_B1.c: 43: if (Load.Enable == 1) {
 10429  005D  0022               	movlb	2	; select bank2
 10430  005E  1C30               	btfss	_Load^(0+256),0
 10431  005F  29E8               	goto	l1857
 10432                           
 10433                           ;OverLoad_B1.c: 45: if (getMain_All_LightsStatus() == 0) {
 10434  0060  319C  2424  3180   	fcall	_getMain_All_LightsStatus
 10435  0063  3800               	iorlw	0
 10436  0064  1D03               	skipz
 10437  0065  2868               	goto	l10153
 10438                           
 10439                           ;OverLoad_B1.c: 46: Load.GO = 0;
 10440  0066  0022               	movlb	2	; select bank2
 10441  0067  2889               	goto	l10171
 10442  0068                     l10153:	
 10443                           ;OverLoad_B1.c: 47: } else {
 10444                           
 10445                           
 10446                           ;OverLoad_B1.c: 50: if (error == 0 && getAll_DimmerIntr_Dimming_Sw_RF() == 0) {
 10447  0068  0020               	movlb	0	; select bank0
 10448  0069  08A2               	movf	Load_Main@error,f
 10449  006A  1D03               	skipz
 10450  006B  2886               	goto	l1860
 10451  006C  319E  2692  3180   	fcall	_getAll_DimmerIntr_Dimming_Sw_RF
 10452  006F  3800               	iorlw	0
 10453  0070  1D03               	skipz
 10454  0071  2886               	goto	l1860
 10455                           
 10456                           ;OverLoad_B1.c: 51: Load.GO = 1;
 10457  0072  0022               	movlb	2	; select bank2
 10458  0073  14B0               	bsf	_Load^(0+256),1
 10459                           
 10460                           ;OverLoad_B1.c: 53: if (getDimmer_LoadGO() == 1) {
 10461  0074  319B  2301  3180   	fcall	_getDimmer_LoadGO
 10462  0077  3A01               	xorlw	1
 10463  0078  1D03               	skipz
 10464  0079  2881               	goto	l1861
 10465                           
 10466                           ;OverLoad_B1.c: 54: if (Load.Run == 0 && Load.OK == 0) {
 10467  007A  0022               	movlb	2	; select bank2
 10468  007B  1DB0               	btfss	_Load^(0+256),3
 10469  007C  1BB0               	btfsc	_Load^(0+256),7
 10470  007D  288A               	goto	l1859
 10471                           
 10472                           ;OverLoad_B1.c: 55: Load.Run = 1;
 10473  007E  15B0               	bsf	_Load^(0+256),3
 10474                           
 10475                           ;OverLoad_B1.c: 56: Load.Count = 0;
 10476  007F  01D9               	clrf	(_Load^(0+256)+41)
 10477                           
 10478                           ;OverLoad_B1.c: 57: }
 10479                           ;OverLoad_B1.c: 58: } else {
 10480  0080  288A               	goto	l1859
 10481  0081                     l1861:	
 10482                           
 10483                           ;OverLoad_B1.c: 59: if (Load.OK == 1) {
 10484  0081  0022               	movlb	2	; select bank2
 10485  0082  1FB0               	btfss	_Load^(0+256),7
 10486  0083  288A               	goto	l1859
 10487                           
 10488                           ;OverLoad_B1.c: 60: Load.OK = 0;
 10489  0084  13B0               	bcf	_Load^(0+256),7
 10490                           
 10491                           ;OverLoad_B1.c: 61: }
 10492                           ;OverLoad_B1.c: 62: }
 10493                           ;OverLoad_B1.c: 63: } else {
 10494  0085  288A               	goto	l1859
 10495  0086                     l1860:	
 10496                           
 10497                           ;OverLoad_B1.c: 64: if (Load.GO == 1) {
 10498  0086  0022               	movlb	2	; select bank2
 10499  0087  1CB0               	btfss	_Load^(0+256),1
 10500  0088  288A               	goto	l1859
 10501  0089                     l10171:	
 10502                           
 10503                           ;OverLoad_B1.c: 65: Load.GO = 0;
 10504  0089  10B0               	bcf	_Load^(0+256),1
 10505  008A                     l1859:	
 10506                           
 10507                           ;OverLoad_B1.c: 66: }
 10508                           ;OverLoad_B1.c: 67: }
 10509                           ;OverLoad_B1.c: 89: }
 10510                           ;OverLoad_B1.c: 92: if (Load.GO == 1) {
 10511  008A  1CB0               	btfss	_Load^(0+256),1
 10512  008B  29C4               	goto	l1867
 10513                           
 10514                           ;OverLoad_B1.c: 93: Load.LightsON = 1;
 10515  008C  1530               	bsf	_Load^(0+256),2
 10516                           
 10517                           ;OverLoad_B1.c: 95: if (Load.ADtoGO == 1) {
 10518  008D  1E30               	btfss	_Load^(0+256),4
 10519  008E  29C2               	goto	l1868
 10520                           
 10521                           ;OverLoad_B1.c: 96: Load.Time++;
 10522  008F  3001               	movlw	1
 10523  0090  07B1               	addwf	(_Load^(0+256)+1),f
 10524  0091  3000               	movlw	0
 10525  0092  3DB2               	addwfc	((_Load+1)^(0+256)+1),f
 10526                           
 10527                           ;OverLoad_B1.c: 97: if (Load.Time >= (40 / 20)) {
 10528  0093  3000               	movlw	0
 10529  0094  0232               	subwf	((_Load+1)^(0+256)+1),w
 10530  0095  3002               	movlw	2
 10531  0096  1903               	skipnz
 10532  0097  0231               	subwf	(_Load^(0+256)+1),w
 10533  0098  1C03               	skipc
 10534  0099  0008               	return
 10535                           
 10536                           ;OverLoad_B1.c: 98: Load.Time = 0;
 10537  009A  01B1               	clrf	(_Load^(0+256)+1)
 10538  009B  01B2               	clrf	((_Load+1)^(0+256)+1)
 10539                           
 10540                           ;OverLoad_B1.c: 99: Load.ADtoGO = 0;
 10541  009C  1230               	bcf	_Load^(0+256),4
 10542                           
 10543                           ;OverLoad_B1.c: 101: for (int i = 1; i < 4; i++) {
 10544  009D  3001               	movlw	1
 10545  009E  0020               	movlb	0	; select bank0
 10546  009F  00A4               	movwf	Load_Main@i
 10547  00A0  3000               	movlw	0
 10548  00A1  00A5               	movwf	Load_Main@i+1
 10549  00A2  0825               	movf	Load_Main@i+1,w
 10550  00A3  3A80               	xorlw	128
 10551  00A4  00A0               	movwf	??_Load_Main
 10552  00A5  3080               	movlw	128
 10553  00A6  0220               	subwf	??_Load_Main,w
 10554  00A7  1D03               	skipz
 10555  00A8  28AB               	goto	u11985
 10556  00A9  3004               	movlw	4
 10557  00AA  0224               	subwf	Load_Main@i,w
 10558  00AB                     u11985:	
 10559  00AB  1803               	btfsc	3,0
 10560  00AC  28DF               	goto	l10193
 10561  00AD                     l10187:	
 10562                           
 10563                           ;OverLoad_B1.c: 102: Load.ADH += Load.AH[i];
 10564  00AD  0020               	movlb	0	; select bank0
 10565  00AE  3524               	lslf	Load_Main@i,w
 10566  00AF  3E3B               	addlw	(_Load+11)& (0+255)
 10567  00B0  0086               	movwf	6
 10568  00B1  3001               	movlw	1	; select bank2/3
 10569  00B2  0087               	movwf	7
 10570  00B3  3F40               	moviw [0]fsr1
 10571  00B4  00A0               	movwf	??_Load_Main
 10572  00B5  3F41               	moviw [1]fsr1
 10573  00B6  00A1               	movwf	??_Load_Main+1
 10574  00B7  0820               	movf	??_Load_Main,w
 10575  00B8  0022               	movlb	2	; select bank2
 10576  00B9  07B5               	addwf	(_Load^(0+256)+5),f
 10577  00BA  0020               	movlb	0	; select bank0
 10578  00BB  0821               	movf	??_Load_Main+1,w
 10579  00BC  0022               	movlb	2	; select bank2
 10580  00BD  3DB6               	addwfc	((_Load+1)^(0+256)+5),f
 10581                           
 10582                           ;OverLoad_B1.c: 103: Load.ADL += Load.AL[i];
 10583  00BE  0020               	movlb	0	; select bank0
 10584  00BF  3524               	lslf	Load_Main@i,w
 10585  00C0  3E45               	addlw	(_Load+21)& (0+255)
 10586  00C1  0086               	movwf	6
 10587  00C2  3001               	movlw	1	; select bank2/3
 10588  00C3  0087               	movwf	7
 10589  00C4  3F40               	moviw [0]fsr1
 10590  00C5  00A0               	movwf	??_Load_Main
 10591  00C6  3F41               	moviw [1]fsr1
 10592  00C7  00A1               	movwf	??_Load_Main+1
 10593  00C8  0820               	movf	??_Load_Main,w
 10594  00C9  0022               	movlb	2	; select bank2
 10595  00CA  07B7               	addwf	(_Load^(0+256)+7),f
 10596  00CB  0020               	movlb	0	; select bank0
 10597  00CC  0821               	movf	??_Load_Main+1,w
 10598  00CD  0022               	movlb	2	; select bank2
 10599  00CE  3DB8               	addwfc	((_Load+1)^(0+256)+7),f
 10600  00CF  3001               	movlw	1
 10601  00D0  0020               	movlb	0	; select bank0
 10602  00D1  07A4               	addwf	Load_Main@i,f
 10603  00D2  3000               	movlw	0
 10604  00D3  3DA5               	addwfc	Load_Main@i+1,f
 10605  00D4  0825               	movf	Load_Main@i+1,w
 10606  00D5  3A80               	xorlw	128
 10607  00D6  00A0               	movwf	??_Load_Main
 10608  00D7  3080               	movlw	128
 10609  00D8  0220               	subwf	??_Load_Main,w
 10610  00D9  1D03               	skipz
 10611  00DA  28DD               	goto	u11995
 10612  00DB  3004               	movlw	4
 10613  00DC  0224               	subwf	Load_Main@i,w
 10614  00DD                     u11995:	
 10615  00DD  1C03               	skipc
 10616  00DE  28AD               	goto	l10187
 10617  00DF                     l10193:	
 10618                           
 10619                           ;OverLoad_B1.c: 104: }
 10620                           ;OverLoad_B1.c: 105: Load.ADH /= 3;
 10621  00DF  3003               	movlw	3
 10622  00E0  00F2               	movwf	___lwdiv@divisor
 10623  00E1  3000               	movlw	0
 10624  00E2  00F3               	movwf	___lwdiv@divisor+1
 10625  00E3  0022               	movlb	2	; select bank2
 10626  00E4  0836               	movf	((_Load+1)^(0+256)+5),w
 10627  00E5  01F5               	clrf	___lwdiv@dividend+1
 10628  00E6  07F5               	addwf	___lwdiv@dividend+1,f
 10629  00E7  0835               	movf	(_Load^(0+256)+5),w
 10630  00E8  01F4               	clrf	___lwdiv@dividend
 10631  00E9  07F4               	addwf	___lwdiv@dividend,f
 10632  00EA  3192  2269  3180   	fcall	___lwdiv
 10633  00ED  0873               	movf	?___lwdiv+1,w
 10634  00EE  0022               	movlb	2	; select bank2
 10635  00EF  01B6               	clrf	((_Load+1)^(0+256)+5)
 10636  00F0  07B6               	addwf	((_Load+1)^(0+256)+5),f
 10637  00F1  0872               	movf	?___lwdiv,w
 10638  00F2  01B5               	clrf	(_Load^(0+256)+5)
 10639  00F3  07B5               	addwf	(_Load^(0+256)+5),f
 10640                           
 10641                           ;OverLoad_B1.c: 106: Load.ADL /= 3;
 10642  00F4  3003               	movlw	3
 10643  00F5  00F2               	movwf	___lwdiv@divisor
 10644  00F6  3000               	movlw	0
 10645  00F7  00F3               	movwf	___lwdiv@divisor+1
 10646  00F8  0838               	movf	((_Load+1)^(0+256)+7),w
 10647  00F9  01F5               	clrf	___lwdiv@dividend+1
 10648  00FA  07F5               	addwf	___lwdiv@dividend+1,f
 10649  00FB  0837               	movf	(_Load^(0+256)+7),w
 10650  00FC  01F4               	clrf	___lwdiv@dividend
 10651  00FD  07F4               	addwf	___lwdiv@dividend,f
 10652  00FE  3192  2269  3180   	fcall	___lwdiv
 10653  0101  0873               	movf	?___lwdiv+1,w
 10654  0102  0022               	movlb	2	; select bank2
 10655  0103  01B8               	clrf	((_Load+1)^(0+256)+7)
 10656  0104  07B8               	addwf	((_Load+1)^(0+256)+7),f
 10657  0105  0872               	movf	?___lwdiv,w
 10658  0106  01B7               	clrf	(_Load^(0+256)+7)
 10659  0107  07B7               	addwf	(_Load^(0+256)+7),f
 10660                           
 10661                           ;OverLoad_B1.c: 107: setLoad_AH_AL_Restore();
 10662  0108  319E  2677  3180   	fcall	_setLoad_AH_AL_Restore
 10663                           
 10664                           ;OverLoad_B1.c: 109: if (Load.ADH >= Load.ADL) {
 10665  010B  0022               	movlb	2	; select bank2
 10666  010C  0838               	movf	((_Load+1)^(0+256)+7),w
 10667  010D  0236               	subwf	((_Load+1)^(0+256)+5),w
 10668  010E  1D03               	skipz
 10669  010F  2912               	goto	u12005
 10670  0110  0837               	movf	(_Load^(0+256)+7),w
 10671  0111  0235               	subwf	(_Load^(0+256)+5),w
 10672  0112                     u12005:	
 10673  0112  1C03               	skipc
 10674  0113  0008               	return
 10675                           
 10676                           ;OverLoad_B1.c: 110: Load.AD = Load.ADH - Load.ADL;
 10677  0114  3005               	movlw	5
 10678  0115  3E30               	addlw	_Load& (0+255)
 10679  0116  0086               	movwf	6
 10680  0117  3001               	movlw	1	; select bank2/3
 10681  0118  0087               	movwf	7
 10682  0119  0937               	comf	(_Load^(0+256)+7),w
 10683  011A  0020               	movlb	0	; select bank0
 10684  011B  00A0               	movwf	??_Load_Main
 10685  011C  0022               	movlb	2	; select bank2
 10686  011D  0938               	comf	((_Load+1)^(0+256)+7),w
 10687  011E  0020               	movlb	0	; select bank0
 10688  011F  00A1               	movwf	??_Load_Main+1
 10689  0120  0AA0               	incf	??_Load_Main,f
 10690  0121  1903               	skipnz
 10691  0122  0AA1               	incf	??_Load_Main+1,f
 10692  0123  3F40               	moviw [0]fsr1
 10693  0124  0720               	addwf	??_Load_Main,w
 10694  0125  0022               	movlb	2	; select bank2
 10695  0126  00CF               	movwf	(_Load^(0+256)+31)
 10696  0127  3F41               	moviw [1]fsr1
 10697  0128  0020               	movlb	0	; select bank0
 10698  0129  3D21               	addwfc	??_Load_Main+1,w
 10699  012A  0022               	movlb	2	; select bank2
 10700  012B  00D0               	movwf	(_Load^(0+256)+32)
 10701                           
 10702                           ;OverLoad_B1.c: 111: Load.ADH = 0;
 10703  012C  01B5               	clrf	(_Load^(0+256)+5)
 10704  012D  01B6               	clrf	((_Load+1)^(0+256)+5)
 10705                           
 10706                           ;OverLoad_B1.c: 112: Load.ADL = 0;
 10707  012E  01B7               	clrf	(_Load^(0+256)+7)
 10708  012F  01B8               	clrf	((_Load+1)^(0+256)+7)
 10709                           
 10710                           ;OverLoad_B1.c: 114: if (Load.Run == 1) {
 10711  0130  1DB0               	btfss	_Load^(0+256),3
 10712  0131  298E               	goto	l10233
 10713                           
 10714                           ;OverLoad_B1.c: 115: if (Load.Count < 2) {
 10715  0132  3002               	movlw	2
 10716  0133  0259               	subwf	(_Load^(0+256)+41),w
 10717  0134  1803               	skipnc
 10718  0135  298E               	goto	l10233
 10719                           
 10720                           ;OverLoad_B1.c: 116: Load.Count++;
 10721  0136  3001               	movlw	1
 10722  0137  0020               	movlb	0	; select bank0
 10723  0138  00A0               	movwf	??_Load_Main
 10724  0139  0820               	movf	??_Load_Main,w
 10725  013A  0022               	movlb	2	; select bank2
 10726  013B  07D9               	addwf	(_Load^(0+256)+41),f
 10727                           
 10728                           ;OverLoad_B1.c: 118: Load_Status = getDimmer_Load_Status();
 10729  013C  319B  2308  3180   	fcall	_getDimmer_Load_Status
 10730  013F  0020               	movlb	0	; select bank0
 10731  0140  00A0               	movwf	??_Load_Main
 10732  0141  0820               	movf	??_Load_Main,w
 10733  0142  00A3               	movwf	Load_Main@Load_Status
 10734                           
 10735                           ;OverLoad_B1.c: 123: Load.LightsCount = getMain_Lights_Count();
 10736  0143  319C  2407  3180   	fcall	_getMain_Lights_Count
 10737  0146  0020               	movlb	0	; select bank0
 10738  0147  00A0               	movwf	??_Load_Main
 10739  0148  0820               	movf	??_Load_Main,w
 10740  0149  0022               	movlb	2	; select bank2
 10741  014A  00DC               	movwf	(_Load^(0+256)+44)
 10742                           
 10743                           ;OverLoad_B1.c: 124: if (Load.Count == 1) {
 10744  014B  0859               	movf	(_Load^(0+256)+41),w
 10745  014C  3A01               	xorlw	1
 10746  014D  1D03               	skipz
 10747  014E  2959               	goto	l10219
 10748                           
 10749                           ;OverLoad_B1.c: 125: Load.ErrorCountValue = 2;
 10750  014F  3002               	movlw	2
 10751  0150  0020               	movlb	0	; select bank0
 10752  0151  00A0               	movwf	??_Load_Main
 10753  0152  0820               	movf	??_Load_Main,w
 10754  0153  0022               	movlb	2	; select bank2
 10755  0154  00DB               	movwf	(_Load^(0+256)+43)
 10756                           
 10757                           ;OverLoad_B1.c: 126: Load.JudgeValue = (20*50);
 10758  0155  30E8               	movlw	232
 10759  0156  00D5               	movwf	(_Load^(0+256)+37)
 10760  0157  3003               	movlw	3
 10761  0158  2964               	goto	L7
 10762  0159                     l10219:	
 10763                           ;OverLoad_B1.c: 127: } else if (Load.Count == 2) {
 10764                           
 10765  0159  0859               	movf	(_Load^(0+256)+41),w
 10766  015A  3A02               	xorlw	2
 10767  015B  1D03               	skipz
 10768  015C  298E               	goto	l10233
 10769                           
 10770                           ;OverLoad_B1.c: 128: if (Load.LightsCount == 1) {
 10771  015D  085C               	movf	(_Load^(0+256)+44),w
 10772  015E  3A01               	xorlw	1
 10773  015F  1D03               	skipz
 10774  0160  2966               	goto	l10225
 10775                           
 10776                           ;OverLoad_B1.c: 129: Load.JudgeValue = (int)(1.8*50);
 10777  0161  305A               	movlw	90
 10778  0162  00D5               	movwf	(_Load^(0+256)+37)
 10779  0163  3000               	movlw	0
 10780  0164                     L7:	
 10781  0164  00D6               	movwf	(_Load^(0+256)+38)
 10782                           
 10783                           ;OverLoad_B1.c: 130: } else {
 10784  0165  298E               	goto	l10233
 10785  0166                     l10225:	
 10786                           
 10787                           ;OverLoad_B1.c: 131: if (Load_Status == 0) {
 10788  0166  0020               	movlb	0	; select bank0
 10789  0167  08A3               	movf	Load_Main@Load_Status,f
 10790  0168  1D03               	skipz
 10791  0169  2982               	goto	l10229
 10792                           
 10793                           ;OverLoad_B1.c: 132: Load.JudgeValue = (int)(1.8*50) * Load.LightsCount;
 10794  016A  0022               	movlb	2	; select bank2
 10795  016B  085C               	movf	(_Load^(0+256)+44),w
 10796  016C  0020               	movlb	0	; select bank0
 10797  016D  00A0               	movwf	??_Load_Main
 10798  016E  01A1               	clrf	??_Load_Main+1
 10799  016F  0820               	movf	??_Load_Main,w
 10800  0170  00F2               	movwf	___wmul@multiplier
 10801  0171  0821               	movf	??_Load_Main+1,w
 10802  0172  00F3               	movwf	___wmul@multiplier+1
 10803  0173  305A               	movlw	90
 10804  0174  00F4               	movwf	___wmul@multiplicand
 10805  0175  3000               	movlw	0
 10806  0176  00F5               	movwf	___wmul@multiplicand+1
 10807  0177  319F  2701  3180   	fcall	___wmul
 10808  017A  0873               	movf	?___wmul+1,w
 10809  017B  0022               	movlb	2	; select bank2
 10810  017C  01D6               	clrf	((_Load+1)^(0+256)+37)
 10811  017D  07D6               	addwf	((_Load+1)^(0+256)+37),f
 10812  017E  0872               	movf	?___wmul,w
 10813  017F  01D5               	clrf	(_Load^(0+256)+37)
 10814  0180  07D5               	addwf	(_Load^(0+256)+37),f
 10815                           
 10816                           ;OverLoad_B1.c: 133: } else if (Load_Status == 1) {
 10817  0181  298E               	goto	l10233
 10818  0182                     l10229:	
 10819  0182  0020               	movlb	0	; select bank0
 10820  0183  0823               	movf	Load_Main@Load_Status,w
 10821  0184  3A01               	xorlw	1
 10822  0185  1D03               	skipz
 10823  0186  298E               	goto	l10233
 10824                           
 10825                           ;OverLoad_B1.c: 134: Load.JudgeValue = (int)(1.8*50) + Load.TotalLoad;
 10826  0187  0022               	movlb	2	; select bank2
 10827  0188  0839               	movf	(_Load^(0+256)+9),w
 10828  0189  3E5A               	addlw	90
 10829  018A  00D5               	movwf	(_Load^(0+256)+37)
 10830  018B  3000               	movlw	0
 10831  018C  3D3A               	addwfc	((_Load+1)^(0+256)+9),w
 10832  018D  00D6               	movwf	((_Load+1)^(0+256)+37)
 10833  018E                     l10233:	
 10834                           
 10835                           ;OverLoad_B1.c: 135: }
 10836                           ;OverLoad_B1.c: 136: }
 10837                           ;OverLoad_B1.c: 137: }
 10838                           ;OverLoad_B1.c: 138: }
 10839                           ;OverLoad_B1.c: 139: }
 10840                           ;OverLoad_B1.c: 141: if (Load.AD >= Load.JudgeValue) {
 10841  018E  0022               	movlb	2	; select bank2
 10842  018F  0856               	movf	((_Load+1)^(0+256)+37),w
 10843  0190  0250               	subwf	((_Load+1)^(0+256)+31),w
 10844  0191  1D03               	skipz
 10845  0192  2995               	goto	u12085
 10846  0193  0855               	movf	(_Load^(0+256)+37),w
 10847  0194  024F               	subwf	(_Load^(0+256)+31),w
 10848  0195                     u12085:	
 10849  0195  1C03               	skipc
 10850  0196  29A4               	goto	l10243
 10851                           
 10852                           ;OverLoad_B1.c: 142: Load.ErrorCount++;
 10853  0197  3001               	movlw	1
 10854  0198  0020               	movlb	0	; select bank0
 10855  0199  00A0               	movwf	??_Load_Main
 10856  019A  0820               	movf	??_Load_Main,w
 10857  019B  0022               	movlb	2	; select bank2
 10858  019C  07DA               	addwf	(_Load^(0+256)+42),f
 10859                           
 10860                           ;OverLoad_B1.c: 143: if (Load.ErrorCount > Load.ErrorCountValue) {
 10861  019D  085A               	movf	(_Load^(0+256)+42),w
 10862  019E  025B               	subwf	(_Load^(0+256)+43),w
 10863  019F  1803               	skipnc
 10864  01A0  0008               	return
 10865                           
 10866                           ;OverLoad_B1.c: 144: Load.ErrorCount = 0;
 10867  01A1  01DA               	clrf	(_Load^(0+256)+42)
 10868                           
 10869                           ;OverLoad_B1.c: 145: Load.ERROR = 1;
 10870  01A2  16B0               	bsf	_Load^(0+256),5
 10871                           
 10872                           ;OverLoad_B1.c: 167: }
 10873                           ;OverLoad_B1.c: 168: } else {
 10874  01A3  0008               	return
 10875  01A4                     l10243:	
 10876                           
 10877                           ;OverLoad_B1.c: 169: Load.ErrorCount = 0;
 10878  01A4  01DA               	clrf	(_Load^(0+256)+42)
 10879                           
 10880                           ;OverLoad_B1.c: 170: if (Load.Run == 1) {
 10881  01A5  1DB0               	btfss	_Load^(0+256),3
 10882  01A6  0008               	return
 10883                           
 10884                           ;OverLoad_B1.c: 171: Load.SafeCount++;
 10885  01A7  3001               	movlw	1
 10886  01A8  0020               	movlb	0	; select bank0
 10887  01A9  00A0               	movwf	??_Load_Main
 10888  01AA  0820               	movf	??_Load_Main,w
 10889  01AB  0022               	movlb	2	; select bank2
 10890  01AC  07DD               	addwf	(_Load^(0+256)+45),f
 10891                           
 10892                           ;OverLoad_B1.c: 172: if (Load.SafeCount >= 3) {
 10893  01AD  3003               	movlw	3
 10894  01AE  025D               	subwf	(_Load^(0+256)+45),w
 10895  01AF  1C03               	skipc
 10896  01B0  0008               	return
 10897                           
 10898                           ;OverLoad_B1.c: 173: Load.SafeCount = 0;
 10899  01B1  01DD               	clrf	(_Load^(0+256)+45)
 10900                           
 10901                           ;OverLoad_B1.c: 174: Load.OK = 1;
 10902  01B2  17B0               	bsf	_Load^(0+256),7
 10903                           
 10904                           ;OverLoad_B1.c: 175: Load.Run = 0;
 10905  01B3  11B0               	bcf	_Load^(0+256),3
 10906                           
 10907                           ;OverLoad_B1.c: 176: Load.Count = 0;
 10908  01B4  01D9               	clrf	(_Load^(0+256)+41)
 10909                           
 10910                           ;OverLoad_B1.c: 177: Load.TotalLoad = Load.AD;
 10911  01B5  0850               	movf	((_Load+1)^(0+256)+31),w
 10912  01B6  01BA               	clrf	((_Load+1)^(0+256)+9)
 10913  01B7  07BA               	addwf	((_Load+1)^(0+256)+9),f
 10914  01B8  084F               	movf	(_Load^(0+256)+31),w
 10915  01B9  01B9               	clrf	(_Load^(0+256)+9)
 10916  01BA  07B9               	addwf	(_Load^(0+256)+9),f
 10917                           
 10918                           ;OverLoad_B1.c: 178: Load.ErrorCountValue = 3;
 10919  01BB  3003               	movlw	3
 10920  01BC  0020               	movlb	0	; select bank0
 10921  01BD  00A0               	movwf	??_Load_Main
 10922  01BE  0820               	movf	??_Load_Main,w
 10923  01BF  0022               	movlb	2	; select bank2
 10924  01C0  00DB               	movwf	(_Load^(0+256)+43)
 10925                           
 10926                           ;OverLoad_B1.c: 181: }
 10927                           ;OverLoad_B1.c: 182: }
 10928                           ;OverLoad_B1.c: 205: }
 10929                           ;OverLoad_B1.c: 206: }
 10930                           ;OverLoad_B1.c: 207: }
 10931                           ;OverLoad_B1.c: 208: } else {
 10932  01C1  0008               	return
 10933  01C2                     l1868:	
 10934                           
 10935                           ;OverLoad_B1.c: 209: Load.ADtoGO = 1;
 10936  01C2  1630               	bsf	_Load^(0+256),4
 10937                           
 10938                           ;OverLoad_B1.c: 210: }
 10939                           ;OverLoad_B1.c: 211: } else {
 10940  01C3  0008               	return
 10941  01C4                     l1867:	
 10942                           
 10943                           ;OverLoad_B1.c: 213: if (Load.LightsON == 1) {
 10944  01C4  1D30               	btfss	_Load^(0+256),2
 10945  01C5  29D7               	goto	l10281
 10946                           
 10947                           ;OverLoad_B1.c: 214: Load.LightsON = 0;
 10948  01C6  1130               	bcf	_Load^(0+256),2
 10949                           
 10950                           ;OverLoad_B1.c: 216: Load.ADtoGO = 0;
 10951  01C7  1230               	bcf	_Load^(0+256),4
 10952                           
 10953                           ;OverLoad_B1.c: 217: Load.Time = 0;
 10954  01C8  01B1               	clrf	(_Load^(0+256)+1)
 10955  01C9  01B2               	clrf	((_Load+1)^(0+256)+1)
 10956                           
 10957                           ;OverLoad_B1.c: 218: setLoad_AH_AL_Restore();
 10958  01CA  319E  2677  3180   	fcall	_setLoad_AH_AL_Restore
 10959                           
 10960                           ;OverLoad_B1.c: 220: Load.ErrorCount = 0;
 10961  01CD  0022               	movlb	2	; select bank2
 10962  01CE  01DA               	clrf	(_Load^(0+256)+42)
 10963                           
 10964                           ;OverLoad_B1.c: 221: Load.SafeCount = 0;
 10965  01CF  01DD               	clrf	(_Load^(0+256)+45)
 10966                           
 10967                           ;OverLoad_B1.c: 223: Load.ADH = 0;
 10968  01D0  01B5               	clrf	(_Load^(0+256)+5)
 10969  01D1  01B6               	clrf	((_Load+1)^(0+256)+5)
 10970                           
 10971                           ;OverLoad_B1.c: 224: Load.ADL = 0;
 10972  01D2  01B7               	clrf	(_Load^(0+256)+7)
 10973  01D3  01B8               	clrf	((_Load+1)^(0+256)+7)
 10974                           
 10975                           ;OverLoad_B1.c: 230: Load.Run = 0;
 10976  01D4  11B0               	bcf	_Load^(0+256),3
 10977                           
 10978                           ;OverLoad_B1.c: 231: Load.Count = 0;
 10979  01D5  01D9               	clrf	(_Load^(0+256)+41)
 10980                           
 10981                           ;OverLoad_B1.c: 232: Load.OK = 0;
 10982  01D6  13B0               	bcf	_Load^(0+256),7
 10983  01D7                     l10281:	
 10984                           
 10985                           ;OverLoad_B1.c: 254: }
 10986                           ;OverLoad_B1.c: 255: if (Load.ERROR == 1) {
 10987  01D7  1EB0               	btfss	_Load^(0+256),5
 10988  01D8  0008               	return
 10989                           
 10990                           ;OverLoad_B1.c: 256: Load.ErrorTime++;
 10991  01D9  3001               	movlw	1
 10992  01DA  07B3               	addwf	(_Load^(0+256)+3),f
 10993  01DB  3000               	movlw	0
 10994  01DC  3DB4               	addwfc	((_Load+1)^(0+256)+3),f
 10995                           
 10996                           ;OverLoad_B1.c: 257: if (Load.ErrorTime >= (10000 / 20)) {
 10997  01DD  3001               	movlw	1
 10998  01DE  0234               	subwf	((_Load+1)^(0+256)+3),w
 10999  01DF  30F4               	movlw	244
 11000  01E0  1903               	skipnz
 11001  01E1  0233               	subwf	(_Load^(0+256)+3),w
 11002  01E2  1C03               	skipc
 11003  01E3  0008               	return
 11004                           
 11005                           ;OverLoad_B1.c: 258: Load.ErrorTime = 0;
 11006  01E4  01B3               	clrf	(_Load^(0+256)+3)
 11007  01E5  01B4               	clrf	((_Load+1)^(0+256)+3)
 11008                           
 11009                           ;OverLoad_B1.c: 259: Load.ERROR = 0;
 11010  01E6  12B0               	bcf	_Load^(0+256),5
 11011                           
 11012                           ;OverLoad_B1.c: 260: }
 11013                           ;OverLoad_B1.c: 261: }
 11014                           ;OverLoad_B1.c: 262: }
 11015                           ;OverLoad_B1.c: 263: } else {
 11016  01E7  0008               	return
 11017  01E8                     l1857:	
 11018                           
 11019                           ;OverLoad_B1.c: 264: if (myMain.PowerON == 1) {
 11020  01E8  1C20               	btfss	_myMain^(0+256),0
 11021  01E9  0008               	return
 11022                           
 11023                           ;OverLoad_B1.c: 265: Load.Enable = 1;
 11024  01EA  1430               	bsf	_Load^(0+256),0
 11025  01EB  0008               	return
 11026  01EC                     __end_of_Load_Main:	
 11027                           
 11028                           	psect	text64
 11029  1C07                     __ptext64:	
 11030 ;; *************** function _getMain_Lights_Count *****************
 11031 ;; Defined at:
 11032 ;;		line 466 in file "../src/Main_B1.c"
 11033 ;; Parameters:    Size  Location     Type
 11034 ;;		None
 11035 ;; Auto vars:     Size  Location     Type
 11036 ;;  status2         1    4[COMMON] unsigned char 
 11037 ;;  status1         1    3[COMMON] unsigned char 
 11038 ;;  count           1    2[COMMON] unsigned char 
 11039 ;; Return value:  Size  Location     Type
 11040 ;;                  1    wreg      unsigned char 
 11041 ;; Registers used:
 11042 ;;		wreg, status,2, status,0
 11043 ;; Tracked objects:
 11044 ;;		On entry : 0/0
 11045 ;;		On exit  : 0/0
 11046 ;;		Unchanged: 0/0
 11047 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11048 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11049 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11050 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11051 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11052 ;;Total ram usage:        3 bytes
 11053 ;; Hardware stack levels used:    1
 11054 ;; Hardware stack levels required when called:    3
 11055 ;; This function calls:
 11056 ;;		Nothing
 11057 ;; This function is called by:
 11058 ;;		_Load_Main
 11059 ;; This function uses a non-reentrant model
 11060 ;;
 11061                           
 11062                           
 11063                           ;psect for function _getMain_Lights_Count
 11064  1C07                     _getMain_Lights_Count:	
 11065                           
 11066                           ;Main_B1.c: 467: char count = 0;
 11067                           
 11068                           ;incstack = 0
 11069                           ; Regs used in _getMain_Lights_Count: [wreg+status,2+status,0]
 11070  1C07  01F2               	clrf	getMain_Lights_Count@count
 11071                           
 11072                           ;Main_B1.c: 471: char status1 = DimmerIntr1.ControlStatus == 1 ? 1 : 0;
 11073  1C08  3000               	movlw	0
 11074  1C09  0021               	movlb	1	; select bank1
 11075  1C0A  19E2               	btfsc	_DimmerIntr1^(0+128),3
 11076  1C0B  3001               	movlw	1
 11077  1C0C  00F3               	movwf	getMain_Lights_Count@status1
 11078                           
 11079                           ;Main_B1.c: 474: char status2 = DimmerIntr2.ControlStatus == 1 ? 1 : 0;
 11080  1C0D  3000               	movlw	0
 11081  1C0E  19E9               	btfsc	_DimmerIntr2^(0+128),3
 11082  1C0F  3001               	movlw	1
 11083  1C10  00F4               	movwf	getMain_Lights_Count@status2
 11084                           
 11085                           ;Main_B1.c: 497: return count = (status1 + status2);
 11086  1C11  0873               	movf	getMain_Lights_Count@status1,w
 11087  1C12  0774               	addwf	getMain_Lights_Count@status2,w
 11088  1C13  00F2               	movwf	getMain_Lights_Count@count
 11089  1C14  0008               	return
 11090  1C15                     __end_of_getMain_Lights_Count:	
 11091                           
 11092                           	psect	text65
 11093  1B08                     __ptext65:	
 11094 ;; *************** function _getDimmer_Load_Status *****************
 11095 ;; Defined at:
 11096 ;;		line 1062 in file "../src/Dimmer_B1.c"
 11097 ;; Parameters:    Size  Location     Type
 11098 ;;		None
 11099 ;; Auto vars:     Size  Location     Type
 11100 ;;  status          1    2[COMMON] unsigned char 
 11101 ;; Return value:  Size  Location     Type
 11102 ;;                  1    wreg      unsigned char 
 11103 ;; Registers used:
 11104 ;;		wreg, status,2
 11105 ;; Tracked objects:
 11106 ;;		On entry : 0/0
 11107 ;;		On exit  : 0/0
 11108 ;;		Unchanged: 0/0
 11109 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11110 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11111 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11112 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11113 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11114 ;;Total ram usage:        1 bytes
 11115 ;; Hardware stack levels used:    1
 11116 ;; Hardware stack levels required when called:    3
 11117 ;; This function calls:
 11118 ;;		Nothing
 11119 ;; This function is called by:
 11120 ;;		_Load_Main
 11121 ;; This function uses a non-reentrant model
 11122 ;;
 11123                           
 11124                           
 11125                           ;psect for function _getDimmer_Load_Status
 11126  1B08                     _getDimmer_Load_Status:	
 11127                           
 11128                           ;Dimmer_B1.c: 1063: char status = Dimmer.Load_Status == 1 ? 1 : 0;
 11129                           
 11130                           ;incstack = 0
 11131                           ; Regs used in _getDimmer_Load_Status: [wreg+status,2]
 11132  1B08  3000               	movlw	0
 11133  1B09  0021               	movlb	1	; select bank1
 11134  1B0A  193A               	btfsc	_Dimmer^(0+128),2
 11135  1B0B  3001               	movlw	1
 11136  1B0C  00F2               	movwf	getDimmer_Load_Status@status
 11137                           
 11138                           ;Dimmer_B1.c: 1064: return status;
 11139  1B0D  0872               	movf	getDimmer_Load_Status@status,w
 11140  1B0E  0008               	return
 11141  1B0F                     __end_of_getDimmer_Load_Status:	
 11142                           
 11143                           	psect	text66
 11144  1B01                     __ptext66:	
 11145 ;; *************** function _getDimmer_LoadGO *****************
 11146 ;; Defined at:
 11147 ;;		line 1056 in file "../src/Dimmer_B1.c"
 11148 ;; Parameters:    Size  Location     Type
 11149 ;;		None
 11150 ;; Auto vars:     Size  Location     Type
 11151 ;;  loadgo          1    2[COMMON] unsigned char 
 11152 ;; Return value:  Size  Location     Type
 11153 ;;                  1    wreg      unsigned char 
 11154 ;; Registers used:
 11155 ;;		wreg, status,2
 11156 ;; Tracked objects:
 11157 ;;		On entry : 0/0
 11158 ;;		On exit  : 0/0
 11159 ;;		Unchanged: 0/0
 11160 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11161 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11162 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11163 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11164 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11165 ;;Total ram usage:        1 bytes
 11166 ;; Hardware stack levels used:    1
 11167 ;; Hardware stack levels required when called:    3
 11168 ;; This function calls:
 11169 ;;		Nothing
 11170 ;; This function is called by:
 11171 ;;		_Load_Main
 11172 ;; This function uses a non-reentrant model
 11173 ;;
 11174                           
 11175                           
 11176                           ;psect for function _getDimmer_LoadGO
 11177  1B01                     _getDimmer_LoadGO:	
 11178                           
 11179                           ;Dimmer_B1.c: 1057: char loadgo = Dimmer.LoadGO == 1 ? 1 : 0;
 11180                           
 11181                           ;incstack = 0
 11182                           ; Regs used in _getDimmer_LoadGO: [wreg+status,2]
 11183  1B01  3000               	movlw	0
 11184  1B02  0021               	movlb	1	; select bank1
 11185  1B03  18BA               	btfsc	_Dimmer^(0+128),1
 11186  1B04  3001               	movlw	1
 11187  1B05  00F2               	movwf	getDimmer_LoadGO@loadgo
 11188                           
 11189                           ;Dimmer_B1.c: 1058: return loadgo;
 11190  1B06  0872               	movf	getDimmer_LoadGO@loadgo,w
 11191  1B07  0008               	return
 11192  1B08                     __end_of_getDimmer_LoadGO:	
 11193                           
 11194                           	psect	text67
 11195  1E92                     __ptext67:	
 11196 ;; *************** function _getAll_DimmerIntr_Dimming_Sw_RF *****************
 11197 ;; Defined at:
 11198 ;;		line 238 in file "../src/Dimmer_B1.c"
 11199 ;; Parameters:    Size  Location     Type
 11200 ;;		None
 11201 ;; Auto vars:     Size  Location     Type
 11202 ;;  status          1    5[COMMON] unsigned char 
 11203 ;; Return value:  Size  Location     Type
 11204 ;;                  1    wreg      unsigned char 
 11205 ;; Registers used:
 11206 ;;		wreg, status,2, status,0
 11207 ;; Tracked objects:
 11208 ;;		On entry : 0/0
 11209 ;;		On exit  : 0/0
 11210 ;;		Unchanged: 0/0
 11211 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11212 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11213 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11214 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11215 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11216 ;;Total ram usage:        4 bytes
 11217 ;; Hardware stack levels used:    1
 11218 ;; Hardware stack levels required when called:    3
 11219 ;; This function calls:
 11220 ;;		Nothing
 11221 ;; This function is called by:
 11222 ;;		_Load_Main
 11223 ;; This function uses a non-reentrant model
 11224 ;;
 11225                           
 11226                           
 11227                           ;psect for function _getAll_DimmerIntr_Dimming_Sw_RF
 11228  1E92                     _getAll_DimmerIntr_Dimming_Sw_RF:	
 11229                           
 11230                           ;Dimmer_B1.c: 239: char status = 0;
 11231                           
 11232                           ;incstack = 0
 11233                           ; Regs used in _getAll_DimmerIntr_Dimming_Sw_RF: [wreg+status,2+status,0]
 11234  1E92  01F5               	clrf	getAll_DimmerIntr_Dimming_Sw_RF@status
 11235                           
 11236                           ;Dimmer_B1.c: 246: status = (DimmerIntr1.Dimming_Sw == 1 || DimmerIntr2.Dimming_Sw == 1)
      +                           ? 1 : 0;
 11237  1E93  01F3               	clrf	_getAll_DimmerIntr_Dimming_Sw_RF$2204
 11238  1E94  0AF3               	incf	_getAll_DimmerIntr_Dimming_Sw_RF$2204,f
 11239  1E95  0021               	movlb	1	; select bank1
 11240  1E96  1E62               	btfss	_DimmerIntr1^(0+128),4
 11241  1E97  1A69               	btfsc	_DimmerIntr2^(0+128),4
 11242  1E98  2E9A               	goto	l7729
 11243  1E99  01F3               	clrf	_getAll_DimmerIntr_Dimming_Sw_RF$2204
 11244  1E9A                     l7729:	
 11245  1E9A  0873               	movf	_getAll_DimmerIntr_Dimming_Sw_RF$2204,w
 11246  1E9B  00F2               	movwf	??_getAll_DimmerIntr_Dimming_Sw_RF
 11247  1E9C  0872               	movf	??_getAll_DimmerIntr_Dimming_Sw_RF,w
 11248  1E9D  00F5               	movwf	getAll_DimmerIntr_Dimming_Sw_RF@status
 11249                           
 11250                           ;Dimmer_B1.c: 254: if (status == 0) {
 11251  1E9E  08F5               	movf	getAll_DimmerIntr_Dimming_Sw_RF@status,f
 11252  1E9F  1D03               	skipz
 11253  1EA0  2EAB               	goto	l7741
 11254                           
 11255                           ;Dimmer_B1.c: 260: status = (DimmerIntr1.Dimming_RF == 1 || DimmerIntr2.Dimming_RF == 1)
      +                           ? 1 : 0;
 11256  1EA1  01F4               	clrf	_getAll_DimmerIntr_Dimming_Sw_RF$2205
 11257  1EA2  0AF4               	incf	_getAll_DimmerIntr_Dimming_Sw_RF$2205,f
 11258  1EA3  1F62               	btfss	_DimmerIntr1^(0+128),6
 11259  1EA4  1B69               	btfsc	_DimmerIntr2^(0+128),6
 11260  1EA5  2EA7               	goto	l7739
 11261  1EA6  01F4               	clrf	_getAll_DimmerIntr_Dimming_Sw_RF$2205
 11262  1EA7                     l7739:	
 11263  1EA7  0874               	movf	_getAll_DimmerIntr_Dimming_Sw_RF$2205,w
 11264  1EA8  00F2               	movwf	??_getAll_DimmerIntr_Dimming_Sw_RF
 11265  1EA9  0872               	movf	??_getAll_DimmerIntr_Dimming_Sw_RF,w
 11266  1EAA  00F5               	movwf	getAll_DimmerIntr_Dimming_Sw_RF@status
 11267  1EAB                     l7741:	
 11268                           
 11269                           ;Dimmer_B1.c: 266: }
 11270                           ;Dimmer_B1.c: 268: return status;
 11271  1EAB  0875               	movf	getAll_DimmerIntr_Dimming_Sw_RF@status,w
 11272  1EAC  0008               	return
 11273  1EAD                     __end_of_getAll_DimmerIntr_Dimming_Sw_RF:	
 11274                           
 11275                           	psect	text68
 11276  1F01                     __ptext68:	
 11277 ;; *************** function ___wmul *****************
 11278 ;; Defined at:
 11279 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul16.c"
 11280 ;; Parameters:    Size  Location     Type
 11281 ;;  multiplier      2    2[COMMON] unsigned int 
 11282 ;;  multiplicand    2    4[COMMON] unsigned int 
 11283 ;; Auto vars:     Size  Location     Type
 11284 ;;  product         2    6[COMMON] unsigned int 
 11285 ;; Return value:  Size  Location     Type
 11286 ;;                  2    2[COMMON] unsigned int 
 11287 ;; Registers used:
 11288 ;;		wreg, status,2, status,0
 11289 ;; Tracked objects:
 11290 ;;		On entry : 0/0
 11291 ;;		On exit  : 0/0
 11292 ;;		Unchanged: 0/0
 11293 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11294 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11295 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11296 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11297 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11298 ;;Total ram usage:        6 bytes
 11299 ;; Hardware stack levels used:    1
 11300 ;; Hardware stack levels required when called:    3
 11301 ;; This function calls:
 11302 ;;		Nothing
 11303 ;; This function is called by:
 11304 ;;		_Load_Main
 11305 ;; This function uses a non-reentrant model
 11306 ;;
 11307                           
 11308                           
 11309                           ;psect for function ___wmul
 11310  1F01                     ___wmul:	
 11311                           
 11312                           ;incstack = 0
 11313                           ; Regs used in ___wmul: [wreg+status,2+status,0]
 11314  1F01  01F6               	clrf	___wmul@product
 11315  1F02  01F7               	clrf	___wmul@product+1
 11316  1F03                     l8287:	
 11317  1F03  1C72               	btfss	___wmul@multiplier,0
 11318  1F04  2F09               	goto	l3018
 11319  1F05  0874               	movf	___wmul@multiplicand,w
 11320  1F06  07F6               	addwf	___wmul@product,f
 11321  1F07  0875               	movf	___wmul@multiplicand+1,w
 11322  1F08  3DF7               	addwfc	___wmul@product+1,f
 11323  1F09                     l3018:	
 11324  1F09  3001               	movlw	1
 11325  1F0A                     u8695:	
 11326  1F0A  35F4               	lslf	___wmul@multiplicand,f
 11327  1F0B  0DF5               	rlf	___wmul@multiplicand+1,f
 11328  1F0C  0B89               	decfsz	9,f
 11329  1F0D  2F0A               	goto	u8695
 11330  1F0E  3001               	movlw	1
 11331  1F0F                     u8705:	
 11332  1F0F  36F3               	lsrf	___wmul@multiplier+1,f
 11333  1F10  0CF2               	rrf	___wmul@multiplier,f
 11334  1F11  0B89               	decfsz	9,f
 11335  1F12  2F0F               	goto	u8705
 11336  1F13  0873               	movf	___wmul@multiplier+1,w
 11337  1F14  0472               	iorwf	___wmul@multiplier,w
 11338  1F15  1D03               	skipz
 11339  1F16  2F03               	goto	l8287
 11340  1F17  0877               	movf	___wmul@product+1,w
 11341  1F18  01F3               	clrf	?___wmul+1
 11342  1F19  07F3               	addwf	?___wmul+1,f
 11343  1F1A  0876               	movf	___wmul@product,w
 11344  1F1B  01F2               	clrf	?___wmul
 11345  1F1C  07F2               	addwf	?___wmul,f
 11346  1F1D  0008               	return
 11347  1F1E                     __end_of___wmul:	
 11348                           
 11349                           	psect	text69
 11350  1269                     __ptext69:	
 11351 ;; *************** function ___lwdiv *****************
 11352 ;; Defined at:
 11353 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\lwdiv.c"
 11354 ;; Parameters:    Size  Location     Type
 11355 ;;  divisor         2    2[COMMON] unsigned int 
 11356 ;;  dividend        2    4[COMMON] unsigned int 
 11357 ;; Auto vars:     Size  Location     Type
 11358 ;;  quotient        2    7[COMMON] unsigned int 
 11359 ;;  counter         1    9[COMMON] unsigned char 
 11360 ;; Return value:  Size  Location     Type
 11361 ;;                  2    2[COMMON] unsigned int 
 11362 ;; Registers used:
 11363 ;;		wreg, status,2, status,0
 11364 ;; Tracked objects:
 11365 ;;		On entry : 0/0
 11366 ;;		On exit  : 0/0
 11367 ;;		Unchanged: 0/0
 11368 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11369 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11370 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11371 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11372 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11373 ;;Total ram usage:        8 bytes
 11374 ;; Hardware stack levels used:    1
 11375 ;; Hardware stack levels required when called:    3
 11376 ;; This function calls:
 11377 ;;		Nothing
 11378 ;; This function is called by:
 11379 ;;		_Load_Main
 11380 ;;		_setRF_Main
 11381 ;; This function uses a non-reentrant model
 11382 ;;
 11383                           
 11384                           
 11385                           ;psect for function ___lwdiv
 11386  1269                     ___lwdiv:	
 11387                           
 11388                           ;incstack = 0
 11389                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
 11390  1269  01F7               	clrf	___lwdiv@quotient
 11391  126A  01F8               	clrf	___lwdiv@quotient+1
 11392  126B  0873               	movf	___lwdiv@divisor+1,w
 11393  126C  0472               	iorwf	___lwdiv@divisor,w
 11394  126D  1903               	skipnz
 11395  126E  2A98               	goto	l7689
 11396  126F  01F9               	clrf	___lwdiv@counter
 11397  1270  0AF9               	incf	___lwdiv@counter,f
 11398  1271                     l7677:	
 11399  1271  1BF3               	btfsc	___lwdiv@divisor+1,7
 11400  1272  2A7D               	goto	l7679
 11401  1273  3001               	movlw	1
 11402  1274                     u7525:	
 11403  1274  35F2               	lslf	___lwdiv@divisor,f
 11404  1275  0DF3               	rlf	___lwdiv@divisor+1,f
 11405  1276  0B89               	decfsz	9,f
 11406  1277  2A74               	goto	u7525
 11407  1278  3001               	movlw	1
 11408  1279  00F6               	movwf	??___lwdiv
 11409  127A  0876               	movf	??___lwdiv,w
 11410  127B  07F9               	addwf	___lwdiv@counter,f
 11411  127C  2A71               	goto	l7677
 11412  127D                     l7679:	
 11413  127D  3001               	movlw	1
 11414  127E                     u7545:	
 11415  127E  35F7               	lslf	___lwdiv@quotient,f
 11416  127F  0DF8               	rlf	___lwdiv@quotient+1,f
 11417  1280  0B89               	decfsz	9,f
 11418  1281  2A7E               	goto	u7545
 11419  1282  0873               	movf	___lwdiv@divisor+1,w
 11420  1283  0275               	subwf	___lwdiv@dividend+1,w
 11421  1284  1D03               	skipz
 11422  1285  2A88               	goto	u7555
 11423  1286  0872               	movf	___lwdiv@divisor,w
 11424  1287  0274               	subwf	___lwdiv@dividend,w
 11425  1288                     u7555:	
 11426  1288  1C03               	skipc
 11427  1289  2A8F               	goto	l7685
 11428  128A  0872               	movf	___lwdiv@divisor,w
 11429  128B  02F4               	subwf	___lwdiv@dividend,f
 11430  128C  0873               	movf	___lwdiv@divisor+1,w
 11431  128D  3BF5               	subwfb	___lwdiv@dividend+1,f
 11432  128E  1477               	bsf	___lwdiv@quotient,0
 11433  128F                     l7685:	
 11434  128F  3001               	movlw	1
 11435  1290                     u7565:	
 11436  1290  36F3               	lsrf	___lwdiv@divisor+1,f
 11437  1291  0CF2               	rrf	___lwdiv@divisor,f
 11438  1292  0B89               	decfsz	9,f
 11439  1293  2A90               	goto	u7565
 11440  1294  3001               	movlw	1
 11441  1295  02F9               	subwf	___lwdiv@counter,f
 11442  1296  1D03               	btfss	3,2
 11443  1297  2A7D               	goto	l7679
 11444  1298                     l7689:	
 11445  1298  0878               	movf	___lwdiv@quotient+1,w
 11446  1299  01F3               	clrf	?___lwdiv+1
 11447  129A  07F3               	addwf	?___lwdiv+1,f
 11448  129B  0877               	movf	___lwdiv@quotient,w
 11449  129C  01F2               	clrf	?___lwdiv
 11450  129D  07F2               	addwf	?___lwdiv,f
 11451  129E  0008               	return
 11452  129F                     __end_of___lwdiv:	
 11453                           
 11454                           	psect	text70
 11455  1AC1                     __ptext70:	
 11456 ;; *************** function _Load_Initialization *****************
 11457 ;; Defined at:
 11458 ;;		line 9 in file "../src/OverLoad_B1.c"
 11459 ;; Parameters:    Size  Location     Type
 11460 ;;		None
 11461 ;; Auto vars:     Size  Location     Type
 11462 ;;		None
 11463 ;; Return value:  Size  Location     Type
 11464 ;;		None               void
 11465 ;; Registers used:
 11466 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11467 ;; Tracked objects:
 11468 ;;		On entry : 0/0
 11469 ;;		On exit  : 0/0
 11470 ;;		Unchanged: 0/0
 11471 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11472 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11473 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11474 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11475 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11476 ;;Total ram usage:        0 bytes
 11477 ;; Hardware stack levels used:    1
 11478 ;; Hardware stack levels required when called:    4
 11479 ;; This function calls:
 11480 ;;		_setLoad_AH_AL_Restore
 11481 ;; This function is called by:
 11482 ;;		_main
 11483 ;; This function uses a non-reentrant model
 11484 ;;
 11485                           
 11486                           
 11487                           ;psect for function _Load_Initialization
 11488  1AC1                     _Load_Initialization:	
 11489                           
 11490                           ;OverLoad_B1.c: 11: setLoad_AH_AL_Restore();
 11491                           
 11492                           ;incstack = 0
 11493                           ; Regs used in _Load_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11494  1AC1  319E  2677         	fcall	_setLoad_AH_AL_Restore
 11495  1AC3  0008               	return
 11496  1AC4                     __end_of_Load_Initialization:	
 11497                           
 11498                           	psect	text71
 11499  1E77                     __ptext71:	
 11500 ;; *************** function _setLoad_AH_AL_Restore *****************
 11501 ;; Defined at:
 11502 ;;		line 291 in file "../src/OverLoad_B1.c"
 11503 ;; Parameters:    Size  Location     Type
 11504 ;;		None
 11505 ;; Auto vars:     Size  Location     Type
 11506 ;;  i               1    3[COMMON] unsigned char 
 11507 ;; Return value:  Size  Location     Type
 11508 ;;		None               void
 11509 ;; Registers used:
 11510 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11511 ;; Tracked objects:
 11512 ;;		On entry : 0/0
 11513 ;;		On exit  : 0/0
 11514 ;;		Unchanged: 0/0
 11515 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11516 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11517 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11518 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11519 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11520 ;;Total ram usage:        2 bytes
 11521 ;; Hardware stack levels used:    1
 11522 ;; Hardware stack levels required when called:    3
 11523 ;; This function calls:
 11524 ;;		Nothing
 11525 ;; This function is called by:
 11526 ;;		_Load_Initialization
 11527 ;;		_Load_Main
 11528 ;; This function uses a non-reentrant model
 11529 ;;
 11530                           
 11531                           
 11532                           ;psect for function _setLoad_AH_AL_Restore
 11533  1E77                     _setLoad_AH_AL_Restore:	
 11534                           
 11535                           ;OverLoad_B1.c: 292: char i;
 11536                           ;OverLoad_B1.c: 293: for (i = 0; i < 5; i++) {
 11537                           
 11538                           ;incstack = 0
 11539                           ; Regs used in _setLoad_AH_AL_Restore: [wreg+fsr1l+fsr1h+status,2+status,0]
 11540  1E77  01F3               	clrf	setLoad_AH_AL_Restore@i
 11541  1E78                     L8:	
 11542  1E78  3005               	movlw	5
 11543  1E79  0273               	subwf	setLoad_AH_AL_Restore@i,w
 11544  1E7A  1803               	btfsc	3,0
 11545  1E7B  0008               	return
 11546                           
 11547                           ;OverLoad_B1.c: 294: Load.AH[i] = 0;
 11548  1E7C  3573               	lslf	setLoad_AH_AL_Restore@i,w
 11549  1E7D  3E3B               	addlw	(_Load+11)& (0+255)
 11550  1E7E  0086               	movwf	6
 11551  1E7F  3001               	movlw	1	; select bank2/3
 11552  1E80  0087               	movwf	7
 11553  1E81  3000               	movlw	0
 11554  1E82  3FC0               	movwi [0]fsr1
 11555  1E83  3FC1               	movwi [1]fsr1
 11556                           
 11557                           ;OverLoad_B1.c: 295: Load.AL[i] = 0xffff;
 11558  1E84  3573               	lslf	setLoad_AH_AL_Restore@i,w
 11559  1E85  3E45               	addlw	(_Load+21)& (0+255)
 11560  1E86  0086               	movwf	6
 11561  1E87  3001               	movlw	1	; select bank2/3
 11562  1E88  0087               	movwf	7
 11563  1E89  30FF               	movlw	255
 11564  1E8A  3FC0               	movwi [0]fsr1
 11565  1E8B  30FF               	movlw	255
 11566  1E8C  3FC1               	movwi [1]fsr1
 11567  1E8D  3001               	movlw	1
 11568  1E8E  00F2               	movwf	??_setLoad_AH_AL_Restore
 11569  1E8F  0872               	movf	??_setLoad_AH_AL_Restore,w
 11570  1E90  07F3               	addwf	setLoad_AH_AL_Restore@i,f
 11571  1E91  2E78               	goto	L8
 11572  1E92                     __end_of_setLoad_AH_AL_Restore:	
 11573                           
 11574                           	psect	text72
 11575  1BB8                     __ptext72:	
 11576 ;; *************** function _LED_Main *****************
 11577 ;; Defined at:
 11578 ;;		line 47 in file "../src/LED_B1.c"
 11579 ;; Parameters:    Size  Location     Type
 11580 ;;		None
 11581 ;; Auto vars:     Size  Location     Type
 11582 ;;		None
 11583 ;; Return value:  Size  Location     Type
 11584 ;;		None               void
 11585 ;; Registers used:
 11586 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11587 ;; Tracked objects:
 11588 ;;		On entry : 0/0
 11589 ;;		On exit  : 0/0
 11590 ;;		Unchanged: 0/0
 11591 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11592 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11593 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11594 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11595 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11596 ;;Total ram usage:        0 bytes
 11597 ;; Hardware stack levels used:    1
 11598 ;; Hardware stack levels required when called:    5
 11599 ;; This function calls:
 11600 ;;		_setLED_Main
 11601 ;; This function is called by:
 11602 ;;		_main
 11603 ;; This function uses a non-reentrant model
 11604 ;;
 11605                           
 11606                           
 11607                           ;psect for function _LED_Main
 11608  1BB8                     _LED_Main:	
 11609                           
 11610                           ;LED_B1.c: 53: setLED_Main(1);
 11611                           
 11612                           ;incstack = 0
 11613                           ; Regs used in _LED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11614  1BB8  3001               	movlw	1
 11615  1BB9  3193  23BF  319B   	fcall	_setLED_Main
 11616                           
 11617                           ;LED_B1.c: 56: setLED_Main(2);
 11618  1BBC  3002               	movlw	2
 11619  1BBD  3193  23BF  319B   	fcall	_setLED_Main
 11620                           
 11621                           ;LED_B1.c: 62: setLED_Main(99);
 11622  1BC0  3063               	movlw	99
 11623  1BC1  3193  23BF         	fcall	_setLED_Main
 11624  1BC3  0008               	return
 11625  1BC4                     __end_of_LED_Main:	
 11626                           
 11627                           	psect	text73
 11628  13BF                     __ptext73:	
 11629 ;; *************** function _setLED_Main *****************
 11630 ;; Defined at:
 11631 ;;		line 221 in file "../src/LED_B1.c"
 11632 ;; Parameters:    Size  Location     Type
 11633 ;;  led             1    wreg     unsigned char 
 11634 ;; Auto vars:     Size  Location     Type
 11635 ;;  led             1    6[COMMON] unsigned char 
 11636 ;; Return value:  Size  Location     Type
 11637 ;;		None               void
 11638 ;; Registers used:
 11639 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11640 ;; Tracked objects:
 11641 ;;		On entry : 0/0
 11642 ;;		On exit  : 0/0
 11643 ;;		Unchanged: 0/0
 11644 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11645 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11646 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11647 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11648 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11649 ;;Total ram usage:        3 bytes
 11650 ;; Hardware stack levels used:    1
 11651 ;; Hardware stack levels required when called:    4
 11652 ;; This function calls:
 11653 ;;		_LedPointSelect
 11654 ;; This function is called by:
 11655 ;;		_LED_Main
 11656 ;; This function uses a non-reentrant model
 11657 ;;
 11658                           
 11659                           
 11660                           ;psect for function _setLED_Main
 11661  13BF                     _setLED_Main:	
 11662                           
 11663                           ;incstack = 0
 11664                           ; Regs used in _setLED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11665                           ;setLED_Main@led stored from wreg
 11666  13BF  00F6               	movwf	setLED_Main@led
 11667                           
 11668                           ;LED_B1.c: 222: LedPointSelect(led);
 11669  13C0  0876               	movf	setLED_Main@led,w
 11670  13C1  319E  26E4  3193   	fcall	_LedPointSelect
 11671                           
 11672                           ;LED_B1.c: 223: if (LED->GO == 1) {
 11673  13C4  0021               	movlb	1	; select bank1
 11674  13C5  0846               	movf	_LED^(0+128),w
 11675  13C6  0086               	movwf	6
 11676  13C7  3001               	movlw	1	; select bank2/3
 11677  13C8  0087               	movwf	7
 11678  13C9  1C81               	btfss	1,1
 11679  13CA  0008               	return
 11680                           
 11681                           ;LED_B1.c: 224: LED->Time++;
 11682  13CB  0A46               	incf	_LED^(0+128),w
 11683  13CC  0086               	movwf	6
 11684  13CD  3001               	movlw	1	; select bank2/3
 11685  13CE  0087               	movwf	7
 11686  13CF  3001               	movlw	1
 11687  13D0  0781               	addwf	1,f
 11688  13D1  3141               	addfsr 1,1
 11689  13D2  1803               	skipnc
 11690  13D3  0A81               	incf	1,f
 11691                           
 11692                           ;LED_B1.c: 225: if (LED->Time >= (500 / 20)) {
 11693  13D4  0A46               	incf	_LED^(0+128),w
 11694  13D5  0086               	movwf	6
 11695  13D6  3001               	movlw	1	; select bank2/3
 11696  13D7  0087               	movwf	7
 11697  13D8  3F40               	moviw [0]fsr1
 11698  13D9  00F4               	movwf	??_setLED_Main
 11699  13DA  3F41               	moviw [1]fsr1
 11700  13DB  00F5               	movwf	??_setLED_Main+1
 11701  13DC  3000               	movlw	0
 11702  13DD  0275               	subwf	??_setLED_Main+1,w
 11703  13DE  3019               	movlw	25
 11704  13DF  1903               	skipnz
 11705  13E0  0274               	subwf	??_setLED_Main,w
 11706  13E1  1C03               	skipc
 11707  13E2  0008               	return
 11708                           
 11709                           ;LED_B1.c: 226: LED->Time = 0;
 11710  13E3  0A46               	incf	_LED^(0+128),w
 11711  13E4  0086               	movwf	6
 11712  13E5  3001               	movlw	1	; select bank2/3
 11713  13E6  0087               	movwf	7
 11714  13E7  3000               	movlw	0
 11715  13E8  3FC0               	movwi [0]fsr1
 11716  13E9  3FC1               	movwi [1]fsr1
 11717                           
 11718                           ;LED_B1.c: 228: if (led == 1) {
 11719  13EA  0876               	movf	setLED_Main@led,w
 11720  13EB  3A01               	xorlw	1
 11721  13EC  1D03               	skipz
 11722  13ED  2BF1               	goto	l1179
 11723                           
 11724                           ;LED_B1.c: 229: RA3 = RA3 == 1 ? 0 : 1;
 11725  13EE  3008               	movlw	8
 11726  13EF  0020               	movlb	0	; select bank0
 11727  13F0  068C               	xorwf	12,f
 11728  13F1                     l1179:	
 11729                           
 11730                           ;LED_B1.c: 230: }
 11731                           ;LED_B1.c: 233: if (led == 2) {
 11732  13F1  0876               	movf	setLED_Main@led,w
 11733  13F2  3A02               	xorlw	2
 11734  13F3  1D03               	skipz
 11735  13F4  2BF8               	goto	l1180
 11736                           
 11737                           ;LED_B1.c: 234: RC7 = RC7 == 1 ? 0 : 1;
 11738  13F5  3080               	movlw	128
 11739  13F6  0020               	movlb	0	; select bank0
 11740  13F7  068E               	xorwf	14,f
 11741  13F8                     l1180:	
 11742                           
 11743                           ;LED_B1.c: 235: }
 11744                           ;LED_B1.c: 243: if (led == 99) {
 11745  13F8  0876               	movf	setLED_Main@led,w
 11746  13F9  3A63               	xorlw	99
 11747  13FA  1D03               	skipz
 11748  13FB  0008               	return
 11749                           
 11750                           ;LED_B1.c: 244: RB5 = RB5 == 1 ? 0 : 1;
 11751  13FC  3020               	movlw	32
 11752  13FD  0020               	movlb	0	; select bank0
 11753  13FE  068D               	xorwf	13,f
 11754  13FF  0008               	return
 11755  1400                     __end_of_setLED_Main:	
 11756                           
 11757                           	psect	text74
 11758  1BAC                     __ptext74:	
 11759 ;; *************** function _LED_Initialization *****************
 11760 ;; Defined at:
 11761 ;;		line 31 in file "../src/LED_B1.c"
 11762 ;; Parameters:    Size  Location     Type
 11763 ;;		None
 11764 ;; Auto vars:     Size  Location     Type
 11765 ;;		None
 11766 ;; Return value:  Size  Location     Type
 11767 ;;		None               void
 11768 ;; Registers used:
 11769 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11770 ;; Tracked objects:
 11771 ;;		On entry : 0/0
 11772 ;;		On exit  : 0/0
 11773 ;;		Unchanged: 0/0
 11774 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11775 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11776 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11777 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11778 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11779 ;;Total ram usage:        0 bytes
 11780 ;; Hardware stack levels used:    1
 11781 ;; Hardware stack levels required when called:    6
 11782 ;; This function calls:
 11783 ;;		_setLED_Initialization
 11784 ;; This function is called by:
 11785 ;;		_main
 11786 ;; This function uses a non-reentrant model
 11787 ;;
 11788                           
 11789                           
 11790                           ;psect for function _LED_Initialization
 11791  1BAC                     _LED_Initialization:	
 11792                           
 11793                           ;LED_B1.c: 33: setLED_Initialization(1);
 11794                           
 11795                           ;incstack = 0
 11796                           ; Regs used in _LED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11797  1BAC  3001               	movlw	1
 11798  1BAD  319C  2480  319B   	fcall	_setLED_Initialization
 11799                           
 11800                           ;LED_B1.c: 36: setLED_Initialization(2);
 11801  1BB0  3002               	movlw	2
 11802  1BB1  319C  2480  319B   	fcall	_setLED_Initialization
 11803                           
 11804                           ;LED_B1.c: 42: setLED_Initialization(99);
 11805  1BB4  3063               	movlw	99
 11806  1BB5  319C  2480         	fcall	_setLED_Initialization
 11807  1BB7  0008               	return
 11808  1BB8                     __end_of_LED_Initialization:	
 11809                           
 11810                           	psect	text75
 11811  1C80                     __ptext75:	
 11812 ;; *************** function _setLED_Initialization *****************
 11813 ;; Defined at:
 11814 ;;		line 69 in file "../src/LED_B1.c"
 11815 ;; Parameters:    Size  Location     Type
 11816 ;;  led             1    wreg     unsigned char 
 11817 ;; Auto vars:     Size  Location     Type
 11818 ;;  led             1    6[COMMON] unsigned char 
 11819 ;; Return value:  Size  Location     Type
 11820 ;;		None               void
 11821 ;; Registers used:
 11822 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11823 ;; Tracked objects:
 11824 ;;		On entry : 0/0
 11825 ;;		On exit  : 0/0
 11826 ;;		Unchanged: 0/0
 11827 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11828 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11829 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11830 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11831 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11832 ;;Total ram usage:        1 bytes
 11833 ;; Hardware stack levels used:    1
 11834 ;; Hardware stack levels required when called:    5
 11835 ;; This function calls:
 11836 ;;		_LedPointSelect
 11837 ;;		_setLED
 11838 ;; This function is called by:
 11839 ;;		_LED_Initialization
 11840 ;; This function uses a non-reentrant model
 11841 ;;
 11842                           
 11843                           
 11844                           ;psect for function _setLED_Initialization
 11845  1C80                     _setLED_Initialization:	
 11846                           
 11847                           ;incstack = 0
 11848                           ; Regs used in _setLED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 11849                           ;setLED_Initialization@led stored from wreg
 11850  1C80  00F6               	movwf	setLED_Initialization@led
 11851                           
 11852                           ;LED_B1.c: 70: LedPointSelect(led);
 11853  1C81  0876               	movf	setLED_Initialization@led,w
 11854  1C82  319E  26E4  319C   	fcall	_LedPointSelect
 11855                           
 11856                           ;LED_B1.c: 71: LED->Enable = 1;
 11857  1C85  0021               	movlb	1	; select bank1
 11858  1C86  0846               	movf	_LED^(0+128),w
 11859  1C87  0086               	movwf	6
 11860  1C88  3001               	movlw	1	; select bank2/3
 11861  1C89  0087               	movwf	7
 11862  1C8A  1401               	bsf	1,0
 11863                           
 11864                           ;LED_B1.c: 72: setLED(led, 0);
 11865  1C8B  01F4               	clrf	setLED@command
 11866  1C8C  0876               	movf	setLED_Initialization@led,w
 11867  1C8D  3197  2741         	fcall	_setLED
 11868  1C8F  0008               	return
 11869  1C90                     __end_of_setLED_Initialization:	
 11870                           
 11871                           	psect	text76
 11872  1202                     __ptext76:	
 11873 ;; *************** function _Flash_Memory_Main *****************
 11874 ;; Defined at:
 11875 ;;		line 955 in file "../src/MCU_B1.c"
 11876 ;; Parameters:    Size  Location     Type
 11877 ;;		None
 11878 ;; Auto vars:     Size  Location     Type
 11879 ;;		None
 11880 ;; Return value:  Size  Location     Type
 11881 ;;		None               void
 11882 ;; Registers used:
 11883 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11884 ;; Tracked objects:
 11885 ;;		On entry : 0/0
 11886 ;;		On exit  : 0/0
 11887 ;;		Unchanged: 0/0
 11888 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11889 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11890 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11891 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11892 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11893 ;;Total ram usage:        1 bytes
 11894 ;; Hardware stack levels used:    1
 11895 ;; Hardware stack levels required when called:    6
 11896 ;; This function calls:
 11897 ;;		_Flash_Memory_Modify
 11898 ;;		_getMain_All_LightsStatus
 11899 ;; This function is called by:
 11900 ;;		_main
 11901 ;; This function uses a non-reentrant model
 11902 ;;
 11903                           
 11904                           
 11905                           ;psect for function _Flash_Memory_Main
 11906  1202                     _Flash_Memory_Main:	
 11907                           
 11908                           ;MCU_B1.c: 956: if (Memory.Modify == 1) {
 11909                           
 11910                           ;incstack = 0
 11911                           ; Regs used in _Flash_Memory_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11912  1202  0024               	movlb	4	; select bank4
 11913  1203  1C44               	btfss	(_Memory^(0+512)+36),0
 11914  1204  0008               	return
 11915                           
 11916                           ;MCU_B1.c: 957: Memory.GO = getMain_All_LightsStatus() == 0 ? 1 : 0;
 11917  1205  319C  2424  3192   	fcall	_getMain_All_LightsStatus
 11918  1208  3A00               	xorlw	0
 11919  1209  3000               	movlw	0
 11920  120A  1903               	skipnz
 11921  120B  3001               	movlw	1
 11922  120C  00F8               	movwf	??_Flash_Memory_Main
 11923  120D  0DF8               	rlf	??_Flash_Memory_Main,f
 11924  120E  0024               	movlb	4	; select bank4
 11925  120F  0844               	movf	(_Memory^(0+512)+36),w
 11926  1210  0678               	xorwf	??_Flash_Memory_Main,w
 11927  1211  39FD               	andlw	-3
 11928  1212  0678               	xorwf	??_Flash_Memory_Main,w
 11929  1213  00C4               	movwf	(_Memory^(0+512)+36)
 11930                           
 11931                           ;MCU_B1.c: 958: if (Memory.GO == 1) {
 11932  1214  1CC4               	btfss	(_Memory^(0+512)+36),1
 11933  1215  2A2F               	goto	l1452
 11934                           
 11935                           ;MCU_B1.c: 959: Memory.Runtime = 1;
 11936  1216  15C4               	bsf	(_Memory^(0+512)+36),3
 11937                           
 11938                           ;MCU_B1.c: 960: Memory.Time++;
 11939  1217  3001               	movlw	1
 11940  1218  07C2               	addwf	(_Memory^(0+512)+34),f
 11941  1219  3000               	movlw	0
 11942  121A  3DC3               	addwfc	((_Memory+1)^(0+512)+34),f
 11943                           
 11944                           ;MCU_B1.c: 961: if (Memory.Time == (200 / 20)) {
 11945  121B  3022               	movlw	34
 11946  121C  3E20               	addlw	_Memory& (0+255)
 11947  121D  0086               	movwf	6
 11948  121E  3002               	movlw	2	; select bank4/5
 11949  121F  0087               	movwf	7
 11950  1220  3F40               	moviw [0]fsr1
 11951  1221  3A0A               	xorlw	10
 11952  1222  1D03               	skipz
 11953  1223  2A26               	goto	u8915
 11954  1224  3F41               	moviw [1]fsr1
 11955  1225  3A00               	xorlw	0
 11956  1226                     u8915:	
 11957  1226  1D03               	skipz
 11958  1227  0008               	return
 11959                           
 11960                           ;MCU_B1.c: 962: Memory.Time = 0;
 11961  1228  01C2               	clrf	(_Memory^(0+512)+34)
 11962  1229  01C3               	clrf	((_Memory+1)^(0+512)+34)
 11963                           
 11964                           ;MCU_B1.c: 963: Memory.Modify = 0;
 11965  122A  1044               	bcf	(_Memory^(0+512)+36),0
 11966                           
 11967                           ;MCU_B1.c: 964: Memory.GO = 0;
 11968  122B  10C4               	bcf	(_Memory^(0+512)+36),1
 11969                           
 11970                           ;MCU_B1.c: 965: Flash_Memory_Modify();
 11971  122C  3194  2444         	fcall	_Flash_Memory_Modify
 11972                           
 11973                           ;MCU_B1.c: 966: }
 11974                           ;MCU_B1.c: 967: } else {
 11975  122E  0008               	return
 11976  122F                     l1452:	
 11977                           
 11978                           ;MCU_B1.c: 968: if (Memory.Runtime == 1) {
 11979  122F  1DC4               	btfss	(_Memory^(0+512)+36),3
 11980  1230  0008               	return
 11981                           
 11982                           ;MCU_B1.c: 969: Memory.Runtime = 0;
 11983  1231  11C4               	bcf	(_Memory^(0+512)+36),3
 11984                           
 11985                           ;MCU_B1.c: 970: Memory.Time = 0;
 11986  1232  01C2               	clrf	(_Memory^(0+512)+34)
 11987  1233  01C3               	clrf	((_Memory+1)^(0+512)+34)
 11988  1234  0008               	return
 11989  1235                     __end_of_Flash_Memory_Main:	
 11990                           
 11991                           	psect	text77
 11992  1444                     __ptext77:	
 11993 ;; *************** function _Flash_Memory_Modify *****************
 11994 ;; Defined at:
 11995 ;;		line 1028 in file "../src/MCU_B1.c"
 11996 ;; Parameters:    Size  Location     Type
 11997 ;;		None
 11998 ;; Auto vars:     Size  Location     Type
 11999 ;;  i               1    7[COMMON] unsigned char 
 12000 ;; Return value:  Size  Location     Type
 12001 ;;		None               void
 12002 ;; Registers used:
 12003 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12004 ;; Tracked objects:
 12005 ;;		On entry : 0/0
 12006 ;;		On exit  : 0/0
 12007 ;;		Unchanged: 0/0
 12008 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12009 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12010 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12011 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12012 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12013 ;;Total ram usage:        2 bytes
 12014 ;; Hardware stack levels used:    1
 12015 ;; Hardware stack levels required when called:    5
 12016 ;; This function calls:
 12017 ;;		_Flash_Memory_Erasing
 12018 ;;		_Flash_Memory_Read
 12019 ;;		_Flash_Memory_Write
 12020 ;;		_setMemory_Data
 12021 ;; This function is called by:
 12022 ;;		_Flash_Memory_Main
 12023 ;; This function uses a non-reentrant model
 12024 ;;
 12025                           
 12026                           
 12027                           ;psect for function _Flash_Memory_Modify
 12028  1444                     _Flash_Memory_Modify:	
 12029                           
 12030                           ;MCU_B1.c: 1029: char i = 0;
 12031                           
 12032                           ;incstack = 0
 12033                           ; Regs used in _Flash_Memory_Modify: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12034  1444  01F7               	clrf	Flash_Memory_Modify@i
 12035                           
 12036                           ;MCU_B1.c: 1030: for (i = 0; i < 32; i++) {
 12037  1445  01F7               	clrf	Flash_Memory_Modify@i
 12038  1446  3020               	movlw	32
 12039  1447  0277               	subwf	Flash_Memory_Modify@i,w
 12040  1448  1803               	btfsc	3,0
 12041  1449  2C5E               	goto	l8003
 12042  144A                     l7997:	
 12043                           
 12044                           ;MCU_B1.c: 1031: Memory.Data[i] = Flash_Memory_Read(i);
 12045  144A  0877               	movf	Flash_Memory_Modify@i,w
 12046  144B  319D  2529  3194   	fcall	_Flash_Memory_Read
 12047  144E  00F6               	movwf	??_Flash_Memory_Modify
 12048  144F  0877               	movf	Flash_Memory_Modify@i,w
 12049  1450  3E20               	addlw	_Memory& (0+255)
 12050  1451  0086               	movwf	6
 12051  1452  3002               	movlw	2	; select bank4/5
 12052  1453  0087               	movwf	7
 12053  1454  0876               	movf	??_Flash_Memory_Modify,w
 12054  1455  0081               	movwf	1
 12055  1456  3001               	movlw	1
 12056  1457  00F6               	movwf	??_Flash_Memory_Modify
 12057  1458  0876               	movf	??_Flash_Memory_Modify,w
 12058  1459  07F7               	addwf	Flash_Memory_Modify@i,f
 12059  145A  3020               	movlw	32
 12060  145B  0277               	subwf	Flash_Memory_Modify@i,w
 12061  145C  1C03               	skipc
 12062  145D  2C4A               	goto	l7997
 12063  145E                     l8003:	
 12064                           
 12065                           ;MCU_B1.c: 1032: }
 12066                           ;MCU_B1.c: 1033: setMemory_Data(0, product->Data[12]);
 12067  145E  0020               	movlb	0	; select bank0
 12068  145F  086C               	movf	_product,w
 12069  1460  0086               	movwf	6
 12070  1461  3002               	movlw	2	; select bank4/5
 12071  1462  0087               	movwf	7
 12072  1463  3002               	movlw	2	; select bank4/5
 12073  1464  3F4C               	moviw [12]fsr1
 12074  1465  00F2               	movwf	setMemory_Data@data
 12075  1466  3000               	movlw	0
 12076  1467  319B  2367  3194   	fcall	_setMemory_Data
 12077                           
 12078                           ;MCU_B1.c: 1034: setMemory_Data(1, product->Data[13]);
 12079  146A  0020               	movlb	0	; select bank0
 12080  146B  086C               	movf	_product,w
 12081  146C  0086               	movwf	6
 12082  146D  3002               	movlw	2	; select bank4/5
 12083  146E  0087               	movwf	7
 12084  146F  3002               	movlw	2	; select bank4/5
 12085  1470  3F4D               	moviw [13]fsr1
 12086  1471  00F2               	movwf	setMemory_Data@data
 12087  1472  3001               	movlw	1
 12088  1473  319B  2367  3194   	fcall	_setMemory_Data
 12089                           
 12090                           ;MCU_B1.c: 1035: setMemory_Data(2, product->Data[14]);
 12091  1476  0020               	movlb	0	; select bank0
 12092  1477  086C               	movf	_product,w
 12093  1478  0086               	movwf	6
 12094  1479  3002               	movlw	2	; select bank4/5
 12095  147A  0087               	movwf	7
 12096  147B  3002               	movlw	2	; select bank4/5
 12097  147C  3F4E               	moviw [14]fsr1
 12098  147D  00F2               	movwf	setMemory_Data@data
 12099  147E  3002               	movlw	2
 12100  147F  319B  2367  3194   	fcall	_setMemory_Data
 12101                           
 12102                           ;MCU_B1.c: 1041: if (Memory.LoopSave == 1) {
 12103  1482  0024               	movlb	4	; select bank4
 12104  1483  1D44               	btfss	(_Memory^(0+512)+36),2
 12105  1484  2C89               	goto	l1475
 12106                           
 12107                           ;MCU_B1.c: 1042: Memory.LoopSave = 0;
 12108  1485  1144               	bcf	(_Memory^(0+512)+36),2
 12109                           
 12110                           ;MCU_B1.c: 1043: myMain.FirstOpen = 0;
 12111  1486  0022               	movlb	2	; select bank2
 12112  1487  11A0               	bcf	_myMain^(0+256),3
 12113                           
 12114                           ;MCU_B1.c: 1044: myMain.First = 0;
 12115  1488  12A0               	bcf	_myMain^(0+256),5
 12116  1489                     l1475:	
 12117                           
 12118                           ;MCU_B1.c: 1046: }
 12119                           ;MCU_B1.c: 1047: GIE = 0;
 12120  1489  138B               	bcf	11,7	;volatile
 12121                           
 12122                           ;MCU_B1.c: 1048: Flash_Memory_Erasing();
 12123  148A  319B  23A0  3194   	fcall	_Flash_Memory_Erasing
 12124                           
 12125                           ;MCU_B1.c: 1049: Flash_Memory_Write();
 12126  148D  3191  2180         	fcall	_Flash_Memory_Write
 12127                           
 12128                           ;MCU_B1.c: 1050: GIE = 1;
 12129  148F  178B               	bsf	11,7	;volatile
 12130  1490  0008               	return
 12131  1491                     __end_of_Flash_Memory_Modify:	
 12132                           
 12133                           	psect	text78
 12134  1BA0                     __ptext78:	
 12135 ;; *************** function _Flash_Memory_Erasing *****************
 12136 ;; Defined at:
 12137 ;;		line 1017 in file "../src/MCU_B1.c"
 12138 ;; Parameters:    Size  Location     Type
 12139 ;;		None
 12140 ;; Auto vars:     Size  Location     Type
 12141 ;;		None
 12142 ;; Return value:  Size  Location     Type
 12143 ;;		None               void
 12144 ;; Registers used:
 12145 ;;		wreg, status,2, status,0, pclath, cstack
 12146 ;; Tracked objects:
 12147 ;;		On entry : 0/0
 12148 ;;		On exit  : 0/0
 12149 ;;		Unchanged: 0/0
 12150 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12151 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12152 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12153 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12154 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12155 ;;Total ram usage:        0 bytes
 12156 ;; Hardware stack levels used:    1
 12157 ;; Hardware stack levels required when called:    4
 12158 ;; This function calls:
 12159 ;;		_Flash_Memory_Unlock
 12160 ;; This function is called by:
 12161 ;;		_Flash_Memory_Modify
 12162 ;; This function uses a non-reentrant model
 12163 ;;
 12164                           
 12165                           
 12166                           ;psect for function _Flash_Memory_Erasing
 12167  1BA0                     _Flash_Memory_Erasing:	
 12168                           
 12169                           ;MCU_B1.c: 1018: CFGS = 0;
 12170                           
 12171                           ;incstack = 0
 12172                           ; Regs used in _Flash_Memory_Erasing: [wreg+status,2+status,0+pclath+cstack]
 12173  1BA0  0023               	movlb	3	; select bank3
 12174  1BA1  1315               	bcf	21,6	;volatile
 12175                           
 12176                           ;MCU_B1.c: 1019: PMADRH = 0x30;
 12177  1BA2  3030               	movlw	48
 12178  1BA3  0092               	movwf	18	;volatile
 12179                           
 12180                           ;MCU_B1.c: 1020: PMADRL = 0x00;
 12181  1BA4  0191               	clrf	17	;volatile
 12182                           
 12183                           ;MCU_B1.c: 1021: FREE = 1;
 12184  1BA5  1615               	bsf	21,4	;volatile
 12185                           
 12186                           ;MCU_B1.c: 1022: WREN = 1;
 12187  1BA6  1515               	bsf	21,2	;volatile
 12188                           
 12189                           ;MCU_B1.c: 1023: Flash_Memory_Unlock();
 12190  1BA7  319B  2336         	fcall	_Flash_Memory_Unlock
 12191                           
 12192                           ;MCU_B1.c: 1024: WREN = 0;
 12193  1BA9  0023               	movlb	3	; select bank3
 12194  1BAA  1115               	bcf	21,2	;volatile
 12195  1BAB  0008               	return
 12196  1BAC                     __end_of_Flash_Memory_Erasing:	
 12197                           
 12198                           	psect	text79
 12199  0453                     __ptext79:	
 12200 ;; *************** function _Flash_Memory_Initialization *****************
 12201 ;; Defined at:
 12202 ;;		line 914 in file "../src/MCU_B1.c"
 12203 ;; Parameters:    Size  Location     Type
 12204 ;;		None
 12205 ;; Auto vars:     Size  Location     Type
 12206 ;;  i               1   59[BANK0 ] unsigned char 
 12207 ;; Return value:  Size  Location     Type
 12208 ;;		None               void
 12209 ;; Registers used:
 12210 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12211 ;; Tracked objects:
 12212 ;;		On entry : 0/0
 12213 ;;		On exit  : 0/0
 12214 ;;		Unchanged: 0/0
 12215 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12216 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12217 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12218 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12219 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12220 ;;Total ram usage:        2 bytes
 12221 ;; Hardware stack levels used:    1
 12222 ;; Hardware stack levels required when called:    6
 12223 ;; This function calls:
 12224 ;;		_Flash_Memory_Read
 12225 ;;		_Flash_Memory_Write
 12226 ;;		_getDimmerLights_ValueToPercent
 12227 ;;		_setMemory_Data
 12228 ;; This function is called by:
 12229 ;;		_main
 12230 ;; This function uses a non-reentrant model
 12231 ;;
 12232                           
 12233                           
 12234                           ;psect for function _Flash_Memory_Initialization
 12235  0453                     _Flash_Memory_Initialization:	
 12236                           
 12237                           ;MCU_B1.c: 915: char i = 0;
 12238                           
 12239                           ;incstack = 0
 12240                           ; Regs used in _Flash_Memory_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 12241  0453  0020               	movlb	0	; select bank0
 12242  0454  01DB               	clrf	Flash_Memory_Initialization@i
 12243                           
 12244                           ;MCU_B1.c: 916: if (Flash_Memory_Read(31) == 0xaa) {
 12245  0455  301F               	movlw	31
 12246  0456  319D  2529  3184   	fcall	_Flash_Memory_Read
 12247  0459  3AAA               	xorlw	170
 12248  045A  1D03               	skipz
 12249  045B  2CC5               	goto	l10017
 12250                           
 12251                           ;MCU_B1.c: 917: product->Data[12] = Flash_Memory_Read(0);
 12252  045C  3000               	movlw	0
 12253  045D  319D  2529  3184   	fcall	_Flash_Memory_Read
 12254  0460  0020               	movlb	0	; select bank0
 12255  0461  00DA               	movwf	??_Flash_Memory_Initialization
 12256  0462  086C               	movf	_product,w
 12257  0463  3E0C               	addlw	12
 12258  0464  0086               	movwf	6
 12259  0465  3002               	movlw	2	; select bank4/5
 12260  0466  0087               	movwf	7
 12261  0467  085A               	movf	??_Flash_Memory_Initialization,w
 12262  0468  0081               	movwf	1
 12263                           
 12264                           ;MCU_B1.c: 918: product->Data[13] = Flash_Memory_Read(1);
 12265  0469  3001               	movlw	1
 12266  046A  319D  2529  3184   	fcall	_Flash_Memory_Read
 12267  046D  0020               	movlb	0	; select bank0
 12268  046E  00DA               	movwf	??_Flash_Memory_Initialization
 12269  046F  086C               	movf	_product,w
 12270  0470  3E0D               	addlw	13
 12271  0471  0086               	movwf	6
 12272  0472  3002               	movlw	2	; select bank4/5
 12273  0473  0087               	movwf	7
 12274  0474  085A               	movf	??_Flash_Memory_Initialization,w
 12275  0475  0081               	movwf	1
 12276                           
 12277                           ;MCU_B1.c: 919: product->Data[14] = Flash_Memory_Read(2);
 12278  0476  3002               	movlw	2
 12279  0477  319D  2529  3184   	fcall	_Flash_Memory_Read
 12280  047A  0020               	movlb	0	; select bank0
 12281  047B  00DA               	movwf	??_Flash_Memory_Initialization
 12282  047C  086C               	movf	_product,w
 12283  047D  3E0E               	addlw	14
 12284  047E  0086               	movwf	6
 12285  047F  3002               	movlw	2	; select bank4/5
 12286  0480  0087               	movwf	7
 12287  0481  085A               	movf	??_Flash_Memory_Initialization,w
 12288  0482  0081               	movwf	1
 12289                           
 12290                           ;MCU_B1.c: 925: i = getDimmerLights_ValueToPercent(((char)(65*0.8)));
 12291  0483  3034               	movlw	52
 12292  0484  3189  210C  3184   	fcall	_getDimmerLights_ValueToPercent
 12293  0487  0020               	movlb	0	; select bank0
 12294  0488  00DA               	movwf	??_Flash_Memory_Initialization
 12295  0489  085A               	movf	??_Flash_Memory_Initialization,w
 12296  048A  00DB               	movwf	Flash_Memory_Initialization@i
 12297                           
 12298                           ;MCU_B1.c: 926: product->Data[21] = i;
 12299  048B  085B               	movf	Flash_Memory_Initialization@i,w
 12300  048C  00DA               	movwf	??_Flash_Memory_Initialization
 12301  048D  086C               	movf	_product,w
 12302  048E  3E15               	addlw	21
 12303  048F  0086               	movwf	6
 12304  0490  3002               	movlw	2	; select bank4/5
 12305  0491  0087               	movwf	7
 12306  0492  085A               	movf	??_Flash_Memory_Initialization,w
 12307  0493  0081               	movwf	1
 12308                           
 12309                           ;MCU_B1.c: 927: product->Data[22] = i;
 12310  0494  085B               	movf	Flash_Memory_Initialization@i,w
 12311  0495  00DA               	movwf	??_Flash_Memory_Initialization
 12312  0496  086C               	movf	_product,w
 12313  0497  3E16               	addlw	22
 12314  0498  0086               	movwf	6
 12315  0499  3002               	movlw	2	; select bank4/5
 12316  049A  0087               	movwf	7
 12317  049B  085A               	movf	??_Flash_Memory_Initialization,w
 12318  049C  0081               	movwf	1
 12319                           
 12320                           ;MCU_B1.c: 928: product->Data[23] = i;
 12321  049D  085B               	movf	Flash_Memory_Initialization@i,w
 12322  049E  00DA               	movwf	??_Flash_Memory_Initialization
 12323  049F  086C               	movf	_product,w
 12324  04A0  3E17               	addlw	23
 12325  04A1  0086               	movwf	6
 12326  04A2  3002               	movlw	2	; select bank4/5
 12327  04A3  0087               	movwf	7
 12328  04A4  085A               	movf	??_Flash_Memory_Initialization,w
 12329  04A5  0081               	movwf	1
 12330                           
 12331                           ;MCU_B1.c: 930: if (product->Data[12] == 0xff && product->Data[13] == 0xff && product->D
      +                          ata[14] == 0xff) {
 12332  04A6  086C               	movf	_product,w
 12333  04A7  3E0C               	addlw	12
 12334  04A8  0086               	movwf	6
 12335  04A9  3002               	movlw	2	; select bank4/5
 12336  04AA  0087               	movwf	7
 12337  04AB  0801               	movf	1,w
 12338  04AC  3AFF               	xorlw	255
 12339  04AD  1D03               	skipz
 12340  04AE  0008               	return
 12341  04AF  086C               	movf	_product,w
 12342  04B0  3E0D               	addlw	13
 12343  04B1  0086               	movwf	6
 12344  04B2  3002               	movlw	2	; select bank4/5
 12345  04B3  0087               	movwf	7
 12346  04B4  0801               	movf	1,w
 12347  04B5  3AFF               	xorlw	255
 12348  04B6  1D03               	skipz
 12349  04B7  0008               	return
 12350  04B8  086C               	movf	_product,w
 12351  04B9  3E0E               	addlw	14
 12352  04BA  0086               	movwf	6
 12353  04BB  3002               	movlw	2	; select bank4/5
 12354  04BC  0087               	movwf	7
 12355  04BD  0801               	movf	1,w
 12356  04BE  3AFF               	xorlw	255
 12357  04BF  1D03               	skipz
 12358  04C0  0008               	return
 12359                           
 12360                           ;MCU_B1.c: 931: myMain.FirstOpen = 1;
 12361  04C1  0022               	movlb	2	; select bank2
 12362  04C2  15A0               	bsf	_myMain^(0+256),3
 12363                           
 12364                           ;MCU_B1.c: 932: myMain.First = 1;
 12365  04C3  16A0               	bsf	_myMain^(0+256),5
 12366                           
 12367                           ;MCU_B1.c: 933: }
 12368                           ;MCU_B1.c: 934: } else {
 12369  04C4  0008               	return
 12370  04C5                     l10017:	
 12371                           
 12372                           ;MCU_B1.c: 935: i = getDimmerLights_ValueToPercent(((char)(65*0.8)));
 12373  04C5  3034               	movlw	52
 12374  04C6  3189  210C  3184   	fcall	_getDimmerLights_ValueToPercent
 12375  04C9  0020               	movlb	0	; select bank0
 12376  04CA  00DA               	movwf	??_Flash_Memory_Initialization
 12377  04CB  085A               	movf	??_Flash_Memory_Initialization,w
 12378  04CC  00DB               	movwf	Flash_Memory_Initialization@i
 12379                           
 12380                           ;MCU_B1.c: 936: setMemory_Data(0, 0xff);
 12381  04CD  30FF               	movlw	255
 12382  04CE  00DA               	movwf	??_Flash_Memory_Initialization
 12383  04CF  085A               	movf	??_Flash_Memory_Initialization,w
 12384  04D0  00F2               	movwf	setMemory_Data@data
 12385  04D1  3000               	movlw	0
 12386  04D2  319B  2367  3184   	fcall	_setMemory_Data
 12387                           
 12388                           ;MCU_B1.c: 937: setMemory_Data(1, 0xff);
 12389  04D5  30FF               	movlw	255
 12390  04D6  0020               	movlb	0	; select bank0
 12391  04D7  00DA               	movwf	??_Flash_Memory_Initialization
 12392  04D8  085A               	movf	??_Flash_Memory_Initialization,w
 12393  04D9  00F2               	movwf	setMemory_Data@data
 12394  04DA  3001               	movlw	1
 12395  04DB  319B  2367  3184   	fcall	_setMemory_Data
 12396                           
 12397                           ;MCU_B1.c: 938: setMemory_Data(2, 0xff);
 12398  04DE  30FF               	movlw	255
 12399  04DF  0020               	movlb	0	; select bank0
 12400  04E0  00DA               	movwf	??_Flash_Memory_Initialization
 12401  04E1  085A               	movf	??_Flash_Memory_Initialization,w
 12402  04E2  00F2               	movwf	setMemory_Data@data
 12403  04E3  3002               	movlw	2
 12404  04E4  319B  2367  3184   	fcall	_setMemory_Data
 12405                           
 12406                           ;MCU_B1.c: 939: setMemory_Data(3, 0xff);
 12407  04E7  30FF               	movlw	255
 12408  04E8  0020               	movlb	0	; select bank0
 12409  04E9  00DA               	movwf	??_Flash_Memory_Initialization
 12410  04EA  085A               	movf	??_Flash_Memory_Initialization,w
 12411  04EB  00F2               	movwf	setMemory_Data@data
 12412  04EC  3003               	movlw	3
 12413  04ED  319B  2367  3184   	fcall	_setMemory_Data
 12414                           
 12415                           ;MCU_B1.c: 940: setMemory_Data(4, 0xff);
 12416  04F0  30FF               	movlw	255
 12417  04F1  0020               	movlb	0	; select bank0
 12418  04F2  00DA               	movwf	??_Flash_Memory_Initialization
 12419  04F3  085A               	movf	??_Flash_Memory_Initialization,w
 12420  04F4  00F2               	movwf	setMemory_Data@data
 12421  04F5  3004               	movlw	4
 12422  04F6  319B  2367  3184   	fcall	_setMemory_Data
 12423                           
 12424                           ;MCU_B1.c: 941: setMemory_Data(5, 0xff);
 12425  04F9  30FF               	movlw	255
 12426  04FA  0020               	movlb	0	; select bank0
 12427  04FB  00DA               	movwf	??_Flash_Memory_Initialization
 12428  04FC  085A               	movf	??_Flash_Memory_Initialization,w
 12429  04FD  00F2               	movwf	setMemory_Data@data
 12430  04FE  3005               	movlw	5
 12431  04FF  319B  2367  3184   	fcall	_setMemory_Data
 12432                           
 12433                           ;MCU_B1.c: 942: setMemory_Data(31, 0xaa);
 12434  0502  30AA               	movlw	170
 12435  0503  0020               	movlb	0	; select bank0
 12436  0504  00DA               	movwf	??_Flash_Memory_Initialization
 12437  0505  085A               	movf	??_Flash_Memory_Initialization,w
 12438  0506  00F2               	movwf	setMemory_Data@data
 12439  0507  301F               	movlw	31
 12440  0508  319B  2367  3184   	fcall	_setMemory_Data
 12441                           
 12442                           ;MCU_B1.c: 943: product->Data[21] = i;
 12443  050B  0020               	movlb	0	; select bank0
 12444  050C  085B               	movf	Flash_Memory_Initialization@i,w
 12445  050D  00DA               	movwf	??_Flash_Memory_Initialization
 12446  050E  086C               	movf	_product,w
 12447  050F  3E15               	addlw	21
 12448  0510  0086               	movwf	6
 12449  0511  3002               	movlw	2	; select bank4/5
 12450  0512  0087               	movwf	7
 12451  0513  085A               	movf	??_Flash_Memory_Initialization,w
 12452  0514  0081               	movwf	1
 12453                           
 12454                           ;MCU_B1.c: 944: product->Data[22] = i;
 12455  0515  085B               	movf	Flash_Memory_Initialization@i,w
 12456  0516  00DA               	movwf	??_Flash_Memory_Initialization
 12457  0517  086C               	movf	_product,w
 12458  0518  3E16               	addlw	22
 12459  0519  0086               	movwf	6
 12460  051A  3002               	movlw	2	; select bank4/5
 12461  051B  0087               	movwf	7
 12462  051C  085A               	movf	??_Flash_Memory_Initialization,w
 12463  051D  0081               	movwf	1
 12464                           
 12465                           ;MCU_B1.c: 945: product->Data[23] = i;
 12466  051E  085B               	movf	Flash_Memory_Initialization@i,w
 12467  051F  00DA               	movwf	??_Flash_Memory_Initialization
 12468  0520  086C               	movf	_product,w
 12469  0521  3E17               	addlw	23
 12470  0522  0086               	movwf	6
 12471  0523  3002               	movlw	2	; select bank4/5
 12472  0524  0087               	movwf	7
 12473  0525  085A               	movf	??_Flash_Memory_Initialization,w
 12474  0526  0081               	movwf	1
 12475                           
 12476                           ;MCU_B1.c: 946: GIE = 0;
 12477  0527  138B               	bcf	11,7	;volatile
 12478                           
 12479                           ;MCU_B1.c: 947: Flash_Memory_Write();
 12480  0528  3191  2180         	fcall	_Flash_Memory_Write
 12481                           
 12482                           ;MCU_B1.c: 948: GIE = 1;
 12483  052A  178B               	bsf	11,7	;volatile
 12484                           
 12485                           ;MCU_B1.c: 949: myMain.FirstOpen = 1;
 12486  052B  0022               	movlb	2	; select bank2
 12487  052C  15A0               	bsf	_myMain^(0+256),3
 12488                           
 12489                           ;MCU_B1.c: 950: myMain.First = 1;
 12490  052D  16A0               	bsf	_myMain^(0+256),5
 12491  052E  0008               	return
 12492  052F                     __end_of_Flash_Memory_Initialization:	
 12493                           
 12494                           	psect	text80
 12495  1B67                     __ptext80:	
 12496 ;; *************** function _setMemory_Data *****************
 12497 ;; Defined at:
 12498 ;;		line 1065 in file "../src/MCU_B1.c"
 12499 ;; Parameters:    Size  Location     Type
 12500 ;;  address         1    wreg     unsigned char 
 12501 ;;  data            1    2[COMMON] unsigned char 
 12502 ;; Auto vars:     Size  Location     Type
 12503 ;;  address         1    4[COMMON] unsigned char 
 12504 ;; Return value:  Size  Location     Type
 12505 ;;		None               void
 12506 ;; Registers used:
 12507 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 12508 ;; Tracked objects:
 12509 ;;		On entry : 0/0
 12510 ;;		On exit  : 0/0
 12511 ;;		Unchanged: 0/0
 12512 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12513 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12514 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12515 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12516 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12517 ;;Total ram usage:        3 bytes
 12518 ;; Hardware stack levels used:    1
 12519 ;; Hardware stack levels required when called:    3
 12520 ;; This function calls:
 12521 ;;		Nothing
 12522 ;; This function is called by:
 12523 ;;		_Flash_Memory_Initialization
 12524 ;;		_Flash_Memory_Modify
 12525 ;; This function uses a non-reentrant model
 12526 ;;
 12527                           
 12528                           
 12529                           ;psect for function _setMemory_Data
 12530  1B67                     _setMemory_Data:	
 12531                           
 12532                           ;incstack = 0
 12533                           ; Regs used in _setMemory_Data: [wreg+fsr1l+fsr1h+status,2+status,0]
 12534                           ;setMemory_Data@address stored from wreg
 12535  1B67  00F4               	movwf	setMemory_Data@address
 12536                           
 12537                           ;MCU_B1.c: 1066: Memory.Data[address] = data;
 12538  1B68  0872               	movf	setMemory_Data@data,w
 12539  1B69  00F3               	movwf	??_setMemory_Data
 12540  1B6A  0874               	movf	setMemory_Data@address,w
 12541  1B6B  3E20               	addlw	_Memory& (0+255)
 12542  1B6C  0086               	movwf	6
 12543  1B6D  3002               	movlw	2	; select bank4/5
 12544  1B6E  0087               	movwf	7
 12545  1B6F  0873               	movf	??_setMemory_Data,w
 12546  1B70  0081               	movwf	1
 12547  1B71  0008               	return
 12548  1B72                     __end_of_setMemory_Data:	
 12549                           
 12550                           	psect	text81
 12551  1180                     __ptext81:	
 12552 ;; *************** function _Flash_Memory_Write *****************
 12553 ;; Defined at:
 12554 ;;		line 998 in file "../src/MCU_B1.c"
 12555 ;; Parameters:    Size  Location     Type
 12556 ;;		None
 12557 ;; Auto vars:     Size  Location     Type
 12558 ;;  i               1    3[COMMON] unsigned char 
 12559 ;; Return value:  Size  Location     Type
 12560 ;;		None               void
 12561 ;; Registers used:
 12562 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12563 ;; Tracked objects:
 12564 ;;		On entry : 0/0
 12565 ;;		On exit  : 0/0
 12566 ;;		Unchanged: 0/0
 12567 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12568 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12569 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12570 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12571 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12572 ;;Total ram usage:        2 bytes
 12573 ;; Hardware stack levels used:    1
 12574 ;; Hardware stack levels required when called:    4
 12575 ;; This function calls:
 12576 ;;		_Flash_Memory_Unlock
 12577 ;; This function is called by:
 12578 ;;		_Flash_Memory_Initialization
 12579 ;;		_Flash_Memory_Modify
 12580 ;; This function uses a non-reentrant model
 12581 ;;
 12582                           
 12583                           
 12584                           ;psect for function _Flash_Memory_Write
 12585  1180                     _Flash_Memory_Write:	
 12586                           
 12587                           ;MCU_B1.c: 999: char i = 0;
 12588                           
 12589                           ;incstack = 0
 12590                           ; Regs used in _Flash_Memory_Write: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12591  1180  01F3               	clrf	Flash_Memory_Write@i
 12592                           
 12593                           ;MCU_B1.c: 1000: CFGS = 0;
 12594  1181  0023               	movlb	3	; select bank3
 12595  1182  1315               	bcf	21,6	;volatile
 12596                           
 12597                           ;MCU_B1.c: 1001: PMADRH = 0x30;
 12598  1183  3030               	movlw	48
 12599  1184  0092               	movwf	18	;volatile
 12600                           
 12601                           ;MCU_B1.c: 1002: PMDATH = 0;
 12602  1185  0194               	clrf	20	;volatile
 12603                           
 12604                           ;MCU_B1.c: 1003: FREE = 0;
 12605  1186  1215               	bcf	21,4	;volatile
 12606                           
 12607                           ;MCU_B1.c: 1004: LWLO = 1;
 12608  1187  1695               	bsf	21,5	;volatile
 12609                           
 12610                           ;MCU_B1.c: 1005: WREN = 1;
 12611  1188  1515               	bsf	21,2	;volatile
 12612                           
 12613                           ;MCU_B1.c: 1006: for (i = 0; i < 32; i++) {
 12614  1189  01F3               	clrf	Flash_Memory_Write@i
 12615  118A  3020               	movlw	32
 12616  118B  0273               	subwf	Flash_Memory_Write@i,w
 12617  118C  1803               	btfsc	3,0
 12618  118D  29A3               	goto	l1466
 12619  118E                     l7533:	
 12620                           
 12621                           ;MCU_B1.c: 1007: PMADRL = i;
 12622  118E  0873               	movf	Flash_Memory_Write@i,w
 12623  118F  0023               	movlb	3	; select bank3
 12624  1190  0091               	movwf	17	;volatile
 12625                           
 12626                           ;MCU_B1.c: 1008: PMDATL = Memory.Data[i];
 12627  1191  0873               	movf	Flash_Memory_Write@i,w
 12628  1192  3E20               	addlw	_Memory& (0+255)
 12629  1193  0086               	movwf	6
 12630  1194  3002               	movlw	2	; select bank4/5
 12631  1195  0087               	movwf	7
 12632  1196  0801               	movf	1,w
 12633  1197  0093               	movwf	19	;volatile
 12634                           
 12635                           ;MCU_B1.c: 1009: Flash_Memory_Unlock();
 12636  1198  319B  2336  3191   	fcall	_Flash_Memory_Unlock
 12637  119B  3001               	movlw	1
 12638  119C  00F2               	movwf	??_Flash_Memory_Write
 12639  119D  0872               	movf	??_Flash_Memory_Write,w
 12640  119E  07F3               	addwf	Flash_Memory_Write@i,f
 12641  119F  3020               	movlw	32
 12642  11A0  0273               	subwf	Flash_Memory_Write@i,w
 12643  11A1  1C03               	skipc
 12644  11A2  298E               	goto	l7533
 12645  11A3                     l1466:	
 12646                           
 12647                           ;MCU_B1.c: 1010: }
 12648                           ;MCU_B1.c: 1011: LWLO = 0;
 12649  11A3  0023               	movlb	3	; select bank3
 12650  11A4  1295               	bcf	21,5	;volatile
 12651                           
 12652                           ;MCU_B1.c: 1012: Flash_Memory_Unlock();
 12653  11A5  319B  2336         	fcall	_Flash_Memory_Unlock
 12654                           
 12655                           ;MCU_B1.c: 1013: WREN = 0;
 12656  11A7  0023               	movlb	3	; select bank3
 12657  11A8  1115               	bcf	21,2	;volatile
 12658  11A9  0008               	return
 12659  11AA                     __end_of_Flash_Memory_Write:	
 12660                           
 12661                           	psect	text82
 12662  1B36                     __ptext82:	
 12663 ;; *************** function _Flash_Memory_Unlock *****************
 12664 ;; Defined at:
 12665 ;;		line 977 in file "../src/MCU_B1.c"
 12666 ;; Parameters:    Size  Location     Type
 12667 ;;		None
 12668 ;; Auto vars:     Size  Location     Type
 12669 ;;		None
 12670 ;; Return value:  Size  Location     Type
 12671 ;;		None               void
 12672 ;; Registers used:
 12673 ;;		wreg
 12674 ;; Tracked objects:
 12675 ;;		On entry : 0/0
 12676 ;;		On exit  : 0/0
 12677 ;;		Unchanged: 0/0
 12678 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12679 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12680 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12681 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12682 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12683 ;;Total ram usage:        0 bytes
 12684 ;; Hardware stack levels used:    1
 12685 ;; Hardware stack levels required when called:    3
 12686 ;; This function calls:
 12687 ;;		Nothing
 12688 ;; This function is called by:
 12689 ;;		_Flash_Memory_Write
 12690 ;;		_Flash_Memory_Erasing
 12691 ;; This function uses a non-reentrant model
 12692 ;;
 12693                           
 12694                           
 12695                           ;psect for function _Flash_Memory_Unlock
 12696  1B36                     _Flash_Memory_Unlock:	
 12697                           
 12698                           ;MCU_B1.c: 978: PMCON2 = 0x55;
 12699                           
 12700                           ;incstack = 0
 12701                           ; Regs used in _Flash_Memory_Unlock: [wreg]
 12702  1B36  3055               	movlw	85
 12703  1B37  0023               	movlb	3	; select bank3
 12704  1B38  0096               	movwf	22	;volatile
 12705                           
 12706                           ;MCU_B1.c: 979: PMCON2 = 0xaa;
 12707  1B39  30AA               	movlw	170
 12708  1B3A  0096               	movwf	22	;volatile
 12709                           
 12710                           ;MCU_B1.c: 980: WR = 1;
 12711  1B3B  1495               	bsf	21,1	;volatile
 12712                           
 12713                           ;MCU_B1.c: 981: __nop();
 12714  1B3C  0000               	nop
 12715                           
 12716                           ;MCU_B1.c: 982: __nop();
 12717  1B3D  0000               	nop
 12718  1B3E  0008               	return
 12719  1B3F                     __end_of_Flash_Memory_Unlock:	
 12720                           
 12721                           	psect	text83
 12722  1D29                     __ptext83:	
 12723 ;; *************** function _Flash_Memory_Read *****************
 12724 ;; Defined at:
 12725 ;;		line 986 in file "../src/MCU_B1.c"
 12726 ;; Parameters:    Size  Location     Type
 12727 ;;  address         1    wreg     unsigned char 
 12728 ;; Auto vars:     Size  Location     Type
 12729 ;;  address         1    4[COMMON] unsigned char 
 12730 ;;  ret             1    5[COMMON] unsigned char 
 12731 ;;  i               1    3[COMMON] unsigned char 
 12732 ;; Return value:  Size  Location     Type
 12733 ;;                  1    wreg      unsigned char 
 12734 ;; Registers used:
 12735 ;;		wreg, status,2
 12736 ;; Tracked objects:
 12737 ;;		On entry : 0/0
 12738 ;;		On exit  : 0/0
 12739 ;;		Unchanged: 0/0
 12740 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12741 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12742 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12743 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12744 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12745 ;;Total ram usage:        4 bytes
 12746 ;; Hardware stack levels used:    1
 12747 ;; Hardware stack levels required when called:    3
 12748 ;; This function calls:
 12749 ;;		Nothing
 12750 ;; This function is called by:
 12751 ;;		_Flash_Memory_Initialization
 12752 ;;		_Flash_Memory_Modify
 12753 ;; This function uses a non-reentrant model
 12754 ;;
 12755                           
 12756                           
 12757                           ;psect for function _Flash_Memory_Read
 12758  1D29                     _Flash_Memory_Read:	
 12759                           
 12760                           ;incstack = 0
 12761                           ; Regs used in _Flash_Memory_Read: [wreg+status,2]
 12762                           ;Flash_Memory_Read@address stored from wreg
 12763  1D29  00F4               	movwf	Flash_Memory_Read@address
 12764                           
 12765                           ;MCU_B1.c: 987: char i = 0, ret = 0;
 12766  1D2A  01F3               	clrf	Flash_Memory_Read@i
 12767  1D2B  01F5               	clrf	Flash_Memory_Read@ret
 12768                           
 12769                           ;MCU_B1.c: 988: PMADRH = 0x30;
 12770  1D2C  3030               	movlw	48
 12771  1D2D  0023               	movlb	3	; select bank3
 12772  1D2E  0092               	movwf	18	;volatile
 12773                           
 12774                           ;MCU_B1.c: 989: PMADRL = address;
 12775  1D2F  0874               	movf	Flash_Memory_Read@address,w
 12776  1D30  0091               	movwf	17	;volatile
 12777                           
 12778                           ;MCU_B1.c: 990: CFGS = 0;
 12779  1D31  1315               	bcf	21,6	;volatile
 12780                           
 12781                           ;MCU_B1.c: 991: RD = 1;
 12782  1D32  1415               	bsf	21,0	;volatile
 12783                           
 12784                           ;MCU_B1.c: 992: i = PMDATH;
 12785  1D33  0814               	movf	20,w	;volatile
 12786  1D34  00F2               	movwf	??_Flash_Memory_Read
 12787  1D35  0872               	movf	??_Flash_Memory_Read,w
 12788  1D36  00F3               	movwf	Flash_Memory_Read@i
 12789                           
 12790                           ;MCU_B1.c: 993: ret = PMDATL;
 12791  1D37  0813               	movf	19,w	;volatile
 12792  1D38  00F2               	movwf	??_Flash_Memory_Read
 12793  1D39  0872               	movf	??_Flash_Memory_Read,w
 12794  1D3A  00F5               	movwf	Flash_Memory_Read@ret
 12795                           
 12796                           ;MCU_B1.c: 994: return ret;
 12797  1D3B  0875               	movf	Flash_Memory_Read@ret,w
 12798  1D3C  0008               	return
 12799  1D3D                     __end_of_Flash_Memory_Read:	
 12800                           
 12801                           	psect	text84
 12802  052F                     __ptext84:	
 12803 ;; *************** function _Exception_Main *****************
 12804 ;; Defined at:
 12805 ;;		line 506 in file "../src/Main_B1.c"
 12806 ;; Parameters:    Size  Location     Type
 12807 ;;		None
 12808 ;; Auto vars:     Size  Location     Type
 12809 ;;  i               2   10[BANK0 ] int 
 12810 ;;  i               2    8[BANK0 ] int 
 12811 ;;  lights          1   12[BANK0 ] unsigned char 
 12812 ;;  error           1    7[BANK0 ] unsigned char 
 12813 ;;  count           1    6[BANK0 ] unsigned char 
 12814 ;; Return value:  Size  Location     Type
 12815 ;;		None               void
 12816 ;; Registers used:
 12817 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12818 ;; Tracked objects:
 12819 ;;		On entry : 0/0
 12820 ;;		On exit  : 0/0
 12821 ;;		Unchanged: 0/0
 12822 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12823 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12824 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12825 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12826 ;;      Totals:         1       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12827 ;;Total ram usage:        8 bytes
 12828 ;; Hardware stack levels used:    1
 12829 ;; Hardware stack levels required when called:    5
 12830 ;; This function calls:
 12831 ;;		_getDimmerLights_Line
 12832 ;;		_getDimmerLights_Status
 12833 ;;		_getMain_All_Error_Status
 12834 ;;		_getMain_All_LightsStatus
 12835 ;;		_setBuz
 12836 ;;		_setDimmerLights_SwOff
 12837 ;;		_setLED
 12838 ;; This function is called by:
 12839 ;;		_main
 12840 ;; This function uses a non-reentrant model
 12841 ;;
 12842                           
 12843                           
 12844                           ;psect for function _Exception_Main
 12845  052F                     _Exception_Main:	
 12846                           
 12847                           ;Main_B1.c: 507: char error = getMain_All_Error_Status(0);
 12848                           
 12849                           ;incstack = 0
 12850                           ; Regs used in _Exception_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12851  052F  3000               	movlw	0
 12852  0530  3191  21D4  3185   	fcall	_getMain_All_Error_Status
 12853  0533  00F9               	movwf	??_Exception_Main
 12854  0534  0879               	movf	??_Exception_Main,w
 12855  0535  0020               	movlb	0	; select bank0
 12856  0536  00A7               	movwf	Exception_Main@error
 12857                           
 12858                           ;Main_B1.c: 508: char lights = 0, count = 2;
 12859  0537  01AC               	clrf	Exception_Main@lights
 12860  0538  3002               	movlw	2
 12861  0539  00F9               	movwf	??_Exception_Main
 12862  053A  0879               	movf	??_Exception_Main,w
 12863  053B  00A6               	movwf	Exception_Main@count
 12864                           
 12865                           ;Main_B1.c: 509: if (myMain.Error_Run == 1) {
 12866  053C  0022               	movlb	2	; select bank2
 12867  053D  1DAB               	btfss	(_myMain^(0+256)+11),3
 12868  053E  2D4D               	goto	l10309
 12869                           
 12870                           ;Main_B1.c: 510: if (error == 0) {
 12871  053F  0020               	movlb	0	; select bank0
 12872  0540  08A7               	movf	Exception_Main@error,f
 12873  0541  1D03               	skipz
 12874  0542  0008               	return
 12875                           
 12876                           ;Main_B1.c: 511: myMain.Error_Run = 0;
 12877  0543  0022               	movlb	2	; select bank2
 12878  0544  11AB               	bcf	(_myMain^(0+256)+11),3
 12879                           
 12880                           ;Main_B1.c: 516: setLED(99, 10);
 12881  0545  300A               	movlw	10
 12882  0546  00F9               	movwf	??_Exception_Main
 12883  0547  0879               	movf	??_Exception_Main,w
 12884  0548  00F4               	movwf	setLED@command
 12885  0549  3063               	movlw	99
 12886  054A  3197  2741         	fcall	_setLED
 12887                           
 12888                           ;Main_B1.c: 518: }
 12889                           ;Main_B1.c: 519: } else {
 12890  054C  0008               	return
 12891  054D                     l10309:	
 12892                           
 12893                           ;Main_B1.c: 520: if (error != 0) {
 12894  054D  0020               	movlb	0	; select bank0
 12895  054E  0827               	movf	Exception_Main@error,w
 12896  054F  1903               	btfsc	3,2
 12897  0550  0008               	return
 12898                           
 12899                           ;Main_B1.c: 521: myMain.Error_Run = 1;
 12900  0551  0022               	movlb	2	; select bank2
 12901  0552  15AB               	bsf	(_myMain^(0+256)+11),3
 12902                           
 12903                           ;Main_B1.c: 524: setLED(99, 11);
 12904  0553  300B               	movlw	11
 12905  0554  00F9               	movwf	??_Exception_Main
 12906  0555  0879               	movf	??_Exception_Main,w
 12907  0556  00F4               	movwf	setLED@command
 12908  0557  3063               	movlw	99
 12909  0558  3197  2741  3185   	fcall	_setLED
 12910                           
 12911                           ;Main_B1.c: 526: switch (error) {
 12912  055B  2DF5               	goto	l10357
 12913  055C                     l10315:	
 12914                           ;Main_B1.c: 527: case 2:
 12915                           
 12916                           
 12917                           ;Main_B1.c: 528: if (getMain_All_LightsStatus() == 1) {
 12918  055C  319C  2424  3185   	fcall	_getMain_All_LightsStatus
 12919  055F  3A01               	xorlw	1
 12920  0560  1D03               	skipz
 12921  0561  2D6B               	goto	l10319
 12922                           
 12923                           ;Main_B1.c: 529: setBuz(10, 300);
 12924  0562  302C               	movlw	44
 12925  0563  0020               	movlb	0	; select bank0
 12926  0564  00A4               	movwf	setBuz@time
 12927  0565  3001               	movlw	1
 12928  0566  00A5               	movwf	setBuz@time+1
 12929  0567  300A               	movlw	10
 12930  0568  3195  2586  3185   	fcall	_setBuz
 12931  056B                     l10319:	
 12932                           
 12933                           ;Main_B1.c: 530: }
 12934                           ;Main_B1.c: 532: for (int i = 0; i < count; i++) {
 12935  056B  0020               	movlb	0	; select bank0
 12936  056C  01A8               	clrf	Exception_Main@i
 12937  056D  01A9               	clrf	Exception_Main@i+1
 12938  056E                     l10329:	
 12939  056E  0829               	movf	Exception_Main@i+1,w
 12940  056F  3A80               	xorlw	128
 12941  0570  00F9               	movwf	??_Exception_Main
 12942  0571  3080               	movlw	128
 12943  0572  0279               	subwf	??_Exception_Main,w
 12944  0573  1D03               	skipz
 12945  0574  2D77               	goto	u12215
 12946  0575  0826               	movf	Exception_Main@count,w
 12947  0576  0228               	subwf	Exception_Main@i,w
 12948  0577                     u12215:	
 12949  0577  1803               	btfsc	3,0
 12950  0578  2D98               	goto	u12210
 12951                           
 12952                           ;Main_B1.c: 534: if (getDimmerLights_Status(i + 1) == 1) {
 12953  0579  0020               	movlb	0	; select bank0
 12954  057A  0828               	movf	Exception_Main@i,w
 12955  057B  3E01               	addlw	1
 12956  057C  319B  23F9  3185   	fcall	_getDimmerLights_Status
 12957  057F  3A01               	xorlw	1
 12958  0580  1D03               	skipz
 12959  0581  2D92               	goto	l10327
 12960                           
 12961                           ;Main_B1.c: 535: DimmerLights->SwFlag = 1;
 12962  0582  087B               	movf	_DimmerLights,w
 12963  0583  0086               	movwf	6
 12964  0584  3001               	movlw	1	; select bank2/3
 12965  0585  0087               	movwf	7
 12966  0586  1401               	bsf	1,0
 12967                           
 12968                           ;Main_B1.c: 536: DimmerLights->Status = 0;
 12969  0587  0A7B               	incf	_DimmerLights,w
 12970  0588  0086               	movwf	6
 12971  0589  3001               	movlw	1	; select bank2/3
 12972  058A  0087               	movwf	7
 12973  058B  1001               	bcf	1,0
 12974                           
 12975                           ;Main_B1.c: 537: setDimmerLights_SwOff(i + 1);
 12976  058C  0020               	movlb	0	; select bank0
 12977  058D  0828               	movf	Exception_Main@i,w
 12978  058E  3E01               	addlw	1
 12979  058F  3192  229F  3185   	fcall	_setDimmerLights_SwOff
 12980  0592                     l10327:	
 12981  0592  3001               	movlw	1
 12982  0593  0020               	movlb	0	; select bank0
 12983  0594  07A8               	addwf	Exception_Main@i,f
 12984  0595  3000               	movlw	0
 12985  0596  3DA9               	addwfc	Exception_Main@i+1,f
 12986  0597  2D6E               	goto	l10329
 12987  0598                     u12210:	
 12988  0598  0020               	movlb	0	; select bank0
 12989  0599  0008               	return
 12990  059A                     l10331:	
 12991                           ;Main_B1.c: 541: case 3:
 12992                           
 12993                           ;Main_B1.c: 538: }
 12994                           ;Main_B1.c: 539: }
 12995                           ;Main_B1.c: 540: break;
 12996                           
 12997                           
 12998                           ;Main_B1.c: 543: setBuz(5, 300);
 12999  059A  302C               	movlw	44
 13000  059B  0020               	movlb	0	; select bank0
 13001  059C  00A4               	movwf	setBuz@time
 13002  059D  3001               	movlw	1
 13003  059E  00A5               	movwf	setBuz@time+1
 13004  059F  3005               	movlw	5
 13005  05A0  3195  2586  3185   	fcall	_setBuz
 13006                           
 13007                           ;Main_B1.c: 544: lights = getDimmerLights_Line();
 13008  05A3  319C  2433  3185   	fcall	_getDimmerLights_Line
 13009  05A6  00F9               	movwf	??_Exception_Main
 13010  05A7  0879               	movf	??_Exception_Main,w
 13011  05A8  0020               	movlb	0	; select bank0
 13012  05A9  00AC               	movwf	Exception_Main@lights
 13013                           
 13014                           ;Main_B1.c: 545: if (lights == 0) {
 13015  05AA  08AC               	movf	Exception_Main@lights,f
 13016  05AB  1D03               	skipz
 13017  05AC  2DDB               	goto	l10349
 13018                           
 13019                           ;Main_B1.c: 547: for (int i = 0; i < count; i++) {
 13020  05AD  01AA               	clrf	Exception_Main@i_3660
 13021  05AE  01AB               	clrf	Exception_Main@i_3660+1
 13022  05AF                     l10347:	
 13023  05AF  082B               	movf	Exception_Main@i_3660+1,w
 13024  05B0  3A80               	xorlw	128
 13025  05B1  00F9               	movwf	??_Exception_Main
 13026  05B2  3080               	movlw	128
 13027  05B3  0279               	subwf	??_Exception_Main,w
 13028  05B4  1D03               	skipz
 13029  05B5  2DB8               	goto	u12245
 13030  05B6  0826               	movf	Exception_Main@count,w
 13031  05B7  022A               	subwf	Exception_Main@i_3660,w
 13032  05B8                     u12245:	
 13033  05B8  1803               	btfsc	3,0
 13034  05B9  2DD9               	goto	u12240
 13035                           
 13036                           ;Main_B1.c: 549: if (getDimmerLights_Status(i + 1) == 1) {
 13037  05BA  0020               	movlb	0	; select bank0
 13038  05BB  082A               	movf	Exception_Main@i_3660,w
 13039  05BC  3E01               	addlw	1
 13040  05BD  319B  23F9  3185   	fcall	_getDimmerLights_Status
 13041  05C0  3A01               	xorlw	1
 13042  05C1  1D03               	skipz
 13043  05C2  2DD3               	goto	l10345
 13044                           
 13045                           ;Main_B1.c: 550: DimmerLights->SwFlag = 1;
 13046  05C3  087B               	movf	_DimmerLights,w
 13047  05C4  0086               	movwf	6
 13048  05C5  3001               	movlw	1	; select bank2/3
 13049  05C6  0087               	movwf	7
 13050  05C7  1401               	bsf	1,0
 13051                           
 13052                           ;Main_B1.c: 551: DimmerLights->Status = 0;
 13053  05C8  0A7B               	incf	_DimmerLights,w
 13054  05C9  0086               	movwf	6
 13055  05CA  3001               	movlw	1	; select bank2/3
 13056  05CB  0087               	movwf	7
 13057  05CC  1001               	bcf	1,0
 13058                           
 13059                           ;Main_B1.c: 552: setDimmerLights_SwOff(i + 1);
 13060  05CD  0020               	movlb	0	; select bank0
 13061  05CE  082A               	movf	Exception_Main@i_3660,w
 13062  05CF  3E01               	addlw	1
 13063  05D0  3192  229F  3185   	fcall	_setDimmerLights_SwOff
 13064  05D3                     l10345:	
 13065  05D3  3001               	movlw	1
 13066  05D4  0020               	movlb	0	; select bank0
 13067  05D5  07AA               	addwf	Exception_Main@i_3660,f
 13068  05D6  3000               	movlw	0
 13069  05D7  3DAB               	addwfc	Exception_Main@i_3660+1,f
 13070  05D8  2DAF               	goto	l10347
 13071  05D9                     u12240:	
 13072  05D9  0020               	movlb	0	; select bank0
 13073  05DA  0008               	return
 13074  05DB                     l10349:	
 13075                           ;Main_B1.c: 553: }
 13076                           ;Main_B1.c: 554: }
 13077                           ;Main_B1.c: 555: } else {
 13078                           
 13079                           
 13080                           ;Main_B1.c: 557: if (getDimmerLights_Status(lights) == 1) {
 13081  05DB  0020               	movlb	0	; select bank0
 13082  05DC  082C               	movf	Exception_Main@lights,w
 13083  05DD  319B  23F9  3185   	fcall	_getDimmerLights_Status
 13084  05E0  3A01               	xorlw	1
 13085  05E1  1903               	btfsc	3,2
 13086  05E2  2DE5               	goto	l10351
 13087  05E3  0020               	movlb	0	; select bank0
 13088  05E4  0008               	return
 13089  05E5                     l10351:	
 13090                           
 13091                           ;Main_B1.c: 559: DimmerLights->SwFlag = 1;
 13092  05E5  087B               	movf	_DimmerLights,w
 13093  05E6  0086               	movwf	6
 13094  05E7  3001               	movlw	1	; select bank2/3
 13095  05E8  0087               	movwf	7
 13096  05E9  1401               	bsf	1,0
 13097                           
 13098                           ;Main_B1.c: 560: DimmerLights->Status = 0;
 13099  05EA  0A7B               	incf	_DimmerLights,w
 13100  05EB  0086               	movwf	6
 13101  05EC  3001               	movlw	1	; select bank2/3
 13102  05ED  0087               	movwf	7
 13103  05EE  1001               	bcf	1,0
 13104                           
 13105                           ;Main_B1.c: 561: setDimmerLights_SwOff(lights);
 13106  05EF  0020               	movlb	0	; select bank0
 13107  05F0  082C               	movf	Exception_Main@lights,w
 13108  05F1  3192  229F         	fcall	_setDimmerLights_SwOff
 13109  05F3  0020               	movlb	0	; select bank0
 13110  05F4  0008               	return
 13111  05F5                     l10357:	
 13112                           ;Main_B1.c: 565: }
 13113                           
 13114                           ;Main_B1.c: 562: }
 13115                           ;Main_B1.c: 563: }
 13116                           ;Main_B1.c: 564: break;
 13117                           
 13118  05F5  0020               	movlb	0	; select bank0
 13119  05F6  0827               	movf	Exception_Main@error,w
 13120                           
 13121                           ; Switch size 1, requested type "space"
 13122                           ; Number of cases is 2, Range of values is 2 to 3
 13123                           ; switch strategies available:
 13124                           ; Name         Instructions Cycles
 13125                           ; simple_byte            7     4 (average)
 13126                           ; direct_byte           13     9 (fixed)
 13127                           ; jumptable            263     9 (fixed)
 13128                           ;	Chosen strategy is simple_byte
 13129  05F7  3A02               	xorlw	2	; case 2
 13130  05F8  1903               	skipnz
 13131  05F9  2D5C               	goto	l10315
 13132  05FA  3A01               	xorlw	1	; case 3
 13133  05FB  1903               	skipnz
 13134  05FC  2D9A               	goto	l10331
 13135  05FD  2DFF               	goto	l1723
 13136  05FE  0008               	return
 13137  05FF                     l1723:	
 13138  05FF  0008               	return
 13139  0600                     __end_of_Exception_Main:	
 13140                           
 13141                           	psect	text85
 13142  1C33                     __ptext85:	
 13143 ;; *************** function _getDimmerLights_Line *****************
 13144 ;; Defined at:
 13145 ;;		line 959 in file "../src/Dimmer_B1.c"
 13146 ;; Parameters:    Size  Location     Type
 13147 ;;		None
 13148 ;; Auto vars:     Size  Location     Type
 13149 ;;  line            1    3[COMMON] unsigned char 
 13150 ;; Return value:  Size  Location     Type
 13151 ;;                  1    wreg      unsigned char 
 13152 ;; Registers used:
 13153 ;;		wreg, status,2
 13154 ;; Tracked objects:
 13155 ;;		On entry : 0/0
 13156 ;;		On exit  : 0/0
 13157 ;;		Unchanged: 0/0
 13158 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13159 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13160 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13161 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13162 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13163 ;;Total ram usage:        2 bytes
 13164 ;; Hardware stack levels used:    1
 13165 ;; Hardware stack levels required when called:    3
 13166 ;; This function calls:
 13167 ;;		Nothing
 13168 ;; This function is called by:
 13169 ;;		_Exception_Main
 13170 ;; This function uses a non-reentrant model
 13171 ;;
 13172                           
 13173                           
 13174                           ;psect for function _getDimmerLights_Line
 13175  1C33                     _getDimmerLights_Line:	
 13176                           
 13177                           ;Dimmer_B1.c: 960: char line = 0;
 13178                           
 13179                           ;incstack = 0
 13180                           ; Regs used in _getDimmerLights_Line: [wreg+status,2]
 13181  1C33  01F3               	clrf	getDimmerLights_Line@line
 13182                           
 13183                           ;Dimmer_B1.c: 962: if (DimmerLights1.Line == 1) {
 13184  1C34  0022               	movlb	2	; select bank2
 13185  1C35  1CDF               	btfss	(_DimmerLights1^(0+256)+1),1
 13186  1C36  2C3A               	goto	l954
 13187                           
 13188                           ;Dimmer_B1.c: 963: line = 1;
 13189  1C37  01F3               	clrf	getDimmerLights_Line@line
 13190  1C38  0AF3               	incf	getDimmerLights_Line@line,f
 13191                           
 13192                           ;Dimmer_B1.c: 964: }
 13193  1C39  2C40               	goto	l955
 13194  1C3A                     l954:	
 13195                           
 13196                           ;Dimmer_B1.c: 967: else if (DimmerLights2.Line == 1) {
 13197  1C3A  1CE7               	btfss	(_DimmerLights2^(0+256)+1),1
 13198  1C3B  2C40               	goto	l955
 13199                           
 13200                           ;Dimmer_B1.c: 968: line = 2;
 13201  1C3C  3002               	movlw	2
 13202  1C3D  00F2               	movwf	??_getDimmerLights_Line
 13203  1C3E  0872               	movf	??_getDimmerLights_Line,w
 13204  1C3F  00F3               	movwf	getDimmerLights_Line@line
 13205  1C40                     l955:	
 13206                           
 13207                           ;Dimmer_B1.c: 969: }
 13208                           ;Dimmer_B1.c: 976: return line;
 13209  1C40  0873               	movf	getDimmerLights_Line@line,w
 13210  1C41  0008               	return
 13211  1C42                     __end_of_getDimmerLights_Line:	
 13212                           
 13213                           	psect	text86
 13214  1F3B                     __ptext86:	
 13215 ;; *************** function _DimmerLights_Main *****************
 13216 ;; Defined at:
 13217 ;;		line 732 in file "../src/Dimmer_B1.c"
 13218 ;; Parameters:    Size  Location     Type
 13219 ;;		None
 13220 ;; Auto vars:     Size  Location     Type
 13221 ;;		None
 13222 ;; Return value:  Size  Location     Type
 13223 ;;		None               void
 13224 ;; Registers used:
 13225 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13226 ;; Tracked objects:
 13227 ;;		On entry : 0/0
 13228 ;;		On exit  : 0/0
 13229 ;;		Unchanged: 0/0
 13230 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13231 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13232 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13233 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13234 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13235 ;;Total ram usage:        0 bytes
 13236 ;; Hardware stack levels used:    1
 13237 ;; Hardware stack levels required when called:    8
 13238 ;; This function calls:
 13239 ;;		_getLoad_OK
 13240 ;;		_getMain_All_Error_Status
 13241 ;;		_getMain_All_LightsStatus
 13242 ;;		_setDimmerLights_Main
 13243 ;; This function is called by:
 13244 ;;		_main
 13245 ;; This function uses a non-reentrant model
 13246 ;;
 13247                           
 13248                           
 13249                           ;psect for function _DimmerLights_Main
 13250  1F3B                     _DimmerLights_Main:	
 13251                           
 13252                           ;Dimmer_B1.c: 735: if (Dimmer.LoadGO == 1) {
 13253                           
 13254                           ;incstack = 0
 13255                           ; Regs used in _DimmerLights_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13256  1F3B  0021               	movlb	1	; select bank1
 13257  1F3C  1CBA               	btfss	_Dimmer^(0+128),1
 13258  1F3D  2F53               	goto	l9993
 13259                           
 13260                           ;Dimmer_B1.c: 736: if (getLoad_OK() == 1 || getMain_All_Error_Status(0) != 0 || getMain_
      +                          All_LightsStatus() == 0) {
 13261  1F3E  319A  22FA  319F   	fcall	_getLoad_OK
 13262  1F41  3A01               	xorlw	1
 13263  1F42  1903               	skipnz
 13264  1F43  2F51               	goto	l896
 13265  1F44  3000               	movlw	0
 13266  1F45  3191  21D4  319F   	fcall	_getMain_All_Error_Status
 13267  1F48  3800               	iorlw	0
 13268  1F49  1D03               	skipz
 13269  1F4A  2F51               	goto	l896
 13270  1F4B  319C  2424  319F   	fcall	_getMain_All_LightsStatus
 13271  1F4E  3800               	iorlw	0
 13272  1F4F  1D03               	skipz
 13273  1F50  2F53               	goto	l9993
 13274  1F51                     l896:	
 13275                           
 13276                           ;Dimmer_B1.c: 737: Dimmer.LoadGO = 0;
 13277  1F51  0021               	movlb	1	; select bank1
 13278  1F52  10BA               	bcf	_Dimmer^(0+128),1
 13279  1F53                     l9993:	
 13280                           
 13281                           ;Dimmer_B1.c: 738: }
 13282                           ;Dimmer_B1.c: 739: }
 13283                           ;Dimmer_B1.c: 743: setDimmerLights_Main(1);
 13284  1F53  3001               	movlw	1
 13285  1F54  3188  20A8  319F   	fcall	_setDimmerLights_Main
 13286                           
 13287                           ;Dimmer_B1.c: 747: setDimmerLights_Main(2);
 13288  1F57  3002               	movlw	2
 13289  1F58  3188  20A8         	fcall	_setDimmerLights_Main
 13290  1F5A  0008               	return
 13291  1F5B                     __end_of_DimmerLights_Main:	
 13292                           
 13293                           	psect	text87
 13294  08A8                     __ptext87:	
 13295 ;; *************** function _setDimmerLights_Main *****************
 13296 ;; Defined at:
 13297 ;;		line 757 in file "../src/Dimmer_B1.c"
 13298 ;; Parameters:    Size  Location     Type
 13299 ;;  lights          1    wreg     unsigned char 
 13300 ;; Auto vars:     Size  Location     Type
 13301 ;;  lights          1   73[BANK0 ] unsigned char 
 13302 ;; Return value:  Size  Location     Type
 13303 ;;		None               void
 13304 ;; Registers used:
 13305 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13306 ;; Tracked objects:
 13307 ;;		On entry : 0/0
 13308 ;;		On exit  : 0/0
 13309 ;;		Unchanged: 0/0
 13310 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13311 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13312 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13313 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13314 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13315 ;;Total ram usage:        1 bytes
 13316 ;; Hardware stack levels used:    1
 13317 ;; Hardware stack levels required when called:    7
 13318 ;; This function calls:
 13319 ;;		_DimmerLights_SelectPointer
 13320 ;;		_getDimmerLights_Allow_Condition
 13321 ;;		_getMain_All_LightsStatus
 13322 ;;		_setDimmerLights_Dimming
 13323 ;;		_setDimmerLights_OnOff
 13324 ;; This function is called by:
 13325 ;;		_DimmerLights_Main
 13326 ;; This function uses a non-reentrant model
 13327 ;;
 13328                           
 13329                           
 13330                           ;psect for function _setDimmerLights_Main
 13331  08A8                     _setDimmerLights_Main:	
 13332                           
 13333                           ;incstack = 0
 13334                           ; Regs used in _setDimmerLights_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13335                           ;setDimmerLights_Main@lights stored from wreg
 13336  08A8  0020               	movlb	0	; select bank0
 13337  08A9  00E9               	movwf	setDimmerLights_Main@lights
 13338                           
 13339                           ;Dimmer_B1.c: 759: DimmerLights_SelectPointer(lights);
 13340  08AA  0869               	movf	setDimmerLights_Main@lights,w
 13341  08AB  3190  2066  3188   	fcall	_DimmerLights_SelectPointer
 13342                           
 13343                           ;Dimmer_B1.c: 760: if (DimmerLights->Trigger == 1) {
 13344  08AE  087B               	movf	_DimmerLights,w
 13345  08AF  0086               	movwf	6
 13346  08B0  3001               	movlw	1	; select bank2/3
 13347  08B1  0087               	movwf	7
 13348  08B2  1C81               	btfss	1,1
 13349  08B3  28D4               	goto	l9709
 13350                           
 13351                           ;Dimmer_B1.c: 761: if (getDimmerLights_Allow_Condition(lights) == 0) {
 13352  08B4  0020               	movlb	0	; select bank0
 13353  08B5  0869               	movf	setDimmerLights_Main@lights,w
 13354  08B6  3192  22D6  3188   	fcall	_getDimmerLights_Allow_Condition
 13355  08B9  3800               	iorlw	0
 13356  08BA  1D03               	skipz
 13357  08BB  0008               	return
 13358                           
 13359                           ;Dimmer_B1.c: 762: DimmerLights->Trigger = 0;
 13360  08BC  087B               	movf	_DimmerLights,w
 13361  08BD  0086               	movwf	6
 13362  08BE  3001               	movlw	1	; select bank2/3
 13363  08BF  0087               	movwf	7
 13364  08C0  1081               	bcf	1,1
 13365                           
 13366                           ;Dimmer_B1.c: 763: if (DimmerLights->Switch == 1) {
 13367  08C1  087B               	movf	_DimmerLights,w
 13368  08C2  0086               	movwf	6
 13369  08C3  3001               	movlw	1	; select bank2/3
 13370  08C4  0087               	movwf	7
 13371  08C5  1D01               	btfss	1,2
 13372  08C6  28CE               	goto	l9707
 13373                           
 13374                           ;Dimmer_B1.c: 764: setDimmerLights_OnOff(lights, 1);
 13375  08C7  0020               	movlb	0	; select bank0
 13376  08C8  01E5               	clrf	setDimmerLights_OnOff@command
 13377  08C9  0AE5               	incf	setDimmerLights_OnOff@command,f
 13378  08CA  0869               	movf	setDimmerLights_Main@lights,w
 13379  08CB  3186  26C2         	fcall	_setDimmerLights_OnOff
 13380                           
 13381                           ;Dimmer_B1.c: 765: } else {
 13382  08CD  0008               	return
 13383  08CE                     l9707:	
 13384                           
 13385                           ;Dimmer_B1.c: 766: setDimmerLights_OnOff(lights, 0);
 13386  08CE  0020               	movlb	0	; select bank0
 13387  08CF  01E5               	clrf	setDimmerLights_OnOff@command
 13388  08D0  0869               	movf	setDimmerLights_Main@lights,w
 13389  08D1  3186  26C2         	fcall	_setDimmerLights_OnOff
 13390                           
 13391                           ;Dimmer_B1.c: 767: }
 13392                           ;Dimmer_B1.c: 768: }
 13393                           ;Dimmer_B1.c: 769: } else {
 13394  08D3  0008               	return
 13395  08D4                     l9709:	
 13396                           
 13397                           ;Dimmer_B1.c: 770: if (getMain_All_LightsStatus() == 1) {
 13398  08D4  319C  2424  3188   	fcall	_getMain_All_LightsStatus
 13399  08D7  3A01               	xorlw	1
 13400  08D8  1D03               	skipz
 13401  08D9  2900               	goto	l9721
 13402                           
 13403                           ;Dimmer_B1.c: 771: if (DimmerLights->DimmingTrigger == 1) {
 13404  08DA  087B               	movf	_DimmerLights,w
 13405  08DB  0086               	movwf	6
 13406  08DC  3001               	movlw	1	; select bank2/3
 13407  08DD  0087               	movwf	7
 13408  08DE  1E01               	btfss	1,4
 13409  08DF  0008               	return
 13410                           
 13411                           ;Dimmer_B1.c: 772: if (getDimmerLights_Allow_Condition(lights) == 0) {
 13412  08E0  0020               	movlb	0	; select bank0
 13413  08E1  0869               	movf	setDimmerLights_Main@lights,w
 13414  08E2  3192  22D6  3188   	fcall	_getDimmerLights_Allow_Condition
 13415  08E5  3800               	iorlw	0
 13416  08E6  1D03               	skipz
 13417  08E7  0008               	return
 13418                           
 13419                           ;Dimmer_B1.c: 773: DimmerLights->DimmingTrigger = 0;
 13420  08E8  087B               	movf	_DimmerLights,w
 13421  08E9  0086               	movwf	6
 13422  08EA  3001               	movlw	1	; select bank2/3
 13423  08EB  0087               	movwf	7
 13424  08EC  1201               	bcf	1,4
 13425                           
 13426                           ;Dimmer_B1.c: 774: if (DimmerLights->DimmingSwitch == 1) {
 13427  08ED  087B               	movf	_DimmerLights,w
 13428  08EE  0086               	movwf	6
 13429  08EF  3001               	movlw	1	; select bank2/3
 13430  08F0  0087               	movwf	7
 13431  08F1  1E81               	btfss	1,5
 13432  08F2  28FA               	goto	l9719
 13433                           
 13434                           ;Dimmer_B1.c: 775: setDimmerLights_Dimming(lights, 1);
 13435  08F3  0020               	movlb	0	; select bank0
 13436  08F4  01E2               	clrf	setDimmerLights_Dimming@status
 13437  08F5  0AE2               	incf	setDimmerLights_Dimming@status,f
 13438  08F6  0869               	movf	setDimmerLights_Main@lights,w
 13439  08F7  3194  2491         	fcall	_setDimmerLights_Dimming
 13440                           
 13441                           ;Dimmer_B1.c: 776: } else {
 13442  08F9  0008               	return
 13443  08FA                     l9719:	
 13444                           
 13445                           ;Dimmer_B1.c: 777: setDimmerLights_Dimming(lights, 0);
 13446  08FA  0020               	movlb	0	; select bank0
 13447  08FB  01E2               	clrf	setDimmerLights_Dimming@status
 13448  08FC  0869               	movf	setDimmerLights_Main@lights,w
 13449  08FD  3194  2491         	fcall	_setDimmerLights_Dimming
 13450                           
 13451                           ;Dimmer_B1.c: 778: }
 13452                           ;Dimmer_B1.c: 779: }
 13453                           ;Dimmer_B1.c: 780: }
 13454                           ;Dimmer_B1.c: 781: } else {
 13455  08FF  0008               	return
 13456  0900                     l9721:	
 13457                           
 13458                           ;Dimmer_B1.c: 782: if (DimmerLights->DimmingTrigger == 1) {
 13459  0900  087B               	movf	_DimmerLights,w
 13460  0901  0086               	movwf	6
 13461  0902  3001               	movlw	1	; select bank2/3
 13462  0903  0087               	movwf	7
 13463  0904  1E01               	btfss	1,4
 13464  0905  0008               	return
 13465                           
 13466                           ;Dimmer_B1.c: 783: DimmerLights->DimmingTrigger = 0;
 13467  0906  087B               	movf	_DimmerLights,w
 13468  0907  0086               	movwf	6
 13469  0908  3001               	movlw	1	; select bank2/3
 13470  0909  0087               	movwf	7
 13471  090A  1201               	bcf	1,4
 13472  090B  0008               	return
 13473  090C                     __end_of_setDimmerLights_Main:	
 13474                           
 13475                           	psect	text88
 13476  06C2                     __ptext88:	
 13477 ;; *************** function _setDimmerLights_OnOff *****************
 13478 ;; Defined at:
 13479 ;;		line 791 in file "../src/Dimmer_B1.c"
 13480 ;; Parameters:    Size  Location     Type
 13481 ;;  lights          1    wreg     unsigned char 
 13482 ;;  command         1   69[BANK0 ] unsigned char 
 13483 ;; Auto vars:     Size  Location     Type
 13484 ;;  lights          1   72[BANK0 ] unsigned char 
 13485 ;; Return value:  Size  Location     Type
 13486 ;;		None               void
 13487 ;; Registers used:
 13488 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13489 ;; Tracked objects:
 13490 ;;		On entry : 0/0
 13491 ;;		On exit  : 0/0
 13492 ;;		Unchanged: 0/0
 13493 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13494 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13495 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13496 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13497 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13498 ;;Total ram usage:        4 bytes
 13499 ;; Hardware stack levels used:    1
 13500 ;; Hardware stack levels required when called:    6
 13501 ;; This function calls:
 13502 ;;		_getCmd_Status
 13503 ;;		_getDelayOff_GO
 13504 ;;		_getDimmerLights_PercentToValue
 13505 ;;		_getDimmerLights_ValueToPercent
 13506 ;;		_getMain_All_LightsStatus
 13507 ;;		_setCmd_Status
 13508 ;;		_setDelayOff_GO
 13509 ;;		_setDimmerIntr_ControlStatus
 13510 ;;		_setDimmerIntr_DimmingValue
 13511 ;;		_setDimmerIntr_Dimming_RF
 13512 ;;		_setDimmerIntr_MaxmumValue
 13513 ;;		_setDimmerLights_Line
 13514 ;;		_setLED
 13515 ;;		_setProductData
 13516 ;;		_setRF_DimmerLights
 13517 ;;		_setTxData
 13518 ;; This function is called by:
 13519 ;;		_setDimmerLights_Main
 13520 ;; This function uses a non-reentrant model
 13521 ;;
 13522                           
 13523                           
 13524                           ;psect for function _setDimmerLights_OnOff
 13525  06C2                     _setDimmerLights_OnOff:	
 13526                           
 13527                           ;incstack = 0
 13528                           ; Regs used in _setDimmerLights_OnOff: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13529                           ;setDimmerLights_OnOff@lights stored from wreg
 13530  06C2  0020               	movlb	0	; select bank0
 13531  06C3  00E8               	movwf	setDimmerLights_OnOff@lights
 13532                           
 13533                           ;Dimmer_B1.c: 793: if (command == 1) {
 13534  06C4  0865               	movf	setDimmerLights_OnOff@command,w
 13535  06C5  3A01               	xorlw	1
 13536  06C6  1D03               	skipz
 13537  06C7  2F23               	goto	l9561
 13538                           
 13539                           ;Dimmer_B1.c: 794: setDimmerIntr_ControlStatus(lights, 1);
 13540  06C8  01F2               	clrf	setDimmerIntr_ControlStatus@command
 13541  06C9  0AF2               	incf	setDimmerIntr_ControlStatus@command,f
 13542  06CA  0868               	movf	setDimmerLights_OnOff@lights,w
 13543  06CB  3191  212E  3186   	fcall	_setDimmerIntr_ControlStatus
 13544                           
 13545                           ;Dimmer_B1.c: 795: setLED(lights, 0);
 13546  06CE  01F4               	clrf	setLED@command
 13547  06CF  0020               	movlb	0	; select bank0
 13548  06D0  0868               	movf	setDimmerLights_OnOff@lights,w
 13549  06D1  3197  2741  3186   	fcall	_setLED
 13550                           
 13551                           ;Dimmer_B1.c: 799: Dimmer.Load_Status = 1;
 13552  06D4  0021               	movlb	1	; select bank1
 13553  06D5  153A               	bsf	_Dimmer^(0+128),2
 13554                           
 13555                           ;Dimmer_B1.c: 800: setDimmerLights_Line(lights);
 13556  06D6  0020               	movlb	0	; select bank0
 13557  06D7  0868               	movf	setDimmerLights_OnOff@lights,w
 13558  06D8  319D  25FD  3186   	fcall	_setDimmerLights_Line
 13559                           
 13560                           ;Dimmer_B1.c: 805: setDimmerIntr_DimmingValue(lights, ((char)(65*0.8)));
 13561  06DB  3034               	movlw	52
 13562  06DC  0020               	movlb	0	; select bank0
 13563  06DD  00E6               	movwf	??_setDimmerLights_OnOff
 13564  06DE  0866               	movf	??_setDimmerLights_OnOff,w
 13565  06DF  00F2               	movwf	setDimmerIntr_DimmingValue@value
 13566  06E0  0868               	movf	setDimmerLights_OnOff@lights,w
 13567  06E1  319D  2567  3186   	fcall	_setDimmerIntr_DimmingValue
 13568                           
 13569                           ;Dimmer_B1.c: 806: if (DimmerLights->DimmingRun == 1) {
 13570  06E4  0A7B               	incf	_DimmerLights,w
 13571  06E5  0086               	movwf	6
 13572  06E6  3001               	movlw	1	; select bank2/3
 13573  06E7  0087               	movwf	7
 13574  06E8  1F01               	btfss	1,6
 13575  06E9  2F0C               	goto	l9557
 13576                           
 13577                           ;Dimmer_B1.c: 807: DimmerLights->DimmingRun = 0;
 13578  06EA  0A7B               	incf	_DimmerLights,w
 13579  06EB  0086               	movwf	6
 13580  06EC  3001               	movlw	1	; select bank2/3
 13581  06ED  0087               	movwf	7
 13582  06EE  1301               	bcf	1,6
 13583                           
 13584                           ;Dimmer_B1.c: 808: setDimmerIntr_MaxmumValue(lights, getDimmerLights_PercentToValue(prod
      +                          uct->Data[20 + lights]));
 13585  06EF  0020               	movlb	0	; select bank0
 13586  06F0  0868               	movf	setDimmerLights_OnOff@lights,w
 13587  06F1  3E14               	addlw	20
 13588  06F2  076C               	addwf	_product,w
 13589  06F3  00E6               	movwf	??_setDimmerLights_OnOff
 13590  06F4  0866               	movf	??_setDimmerLights_OnOff,w
 13591  06F5  0086               	movwf	6
 13592  06F6  3002               	movlw	2	; select bank4/5
 13593  06F7  0087               	movwf	7
 13594  06F8  0801               	movf	1,w
 13595  06F9  3189  2171  3186   	fcall	_getDimmerLights_PercentToValue
 13596  06FC  0020               	movlb	0	; select bank0
 13597  06FD  00E7               	movwf	??_setDimmerLights_OnOff+1
 13598  06FE  0867               	movf	??_setDimmerLights_OnOff+1,w
 13599  06FF  00DA               	movwf	setDimmerIntr_MaxmumValue@value
 13600  0700  0868               	movf	setDimmerLights_OnOff@lights,w
 13601  0701  319D  25E6  3186   	fcall	_setDimmerIntr_MaxmumValue
 13602                           
 13603                           ;Dimmer_B1.c: 809: setDimmerIntr_Dimming_RF(lights, 1);
 13604  0704  01F2               	clrf	setDimmerIntr_Dimming_RF@command
 13605  0705  0AF2               	incf	setDimmerIntr_Dimming_RF@command,f
 13606  0706  0020               	movlb	0	; select bank0
 13607  0707  0868               	movf	setDimmerLights_OnOff@lights,w
 13608  0708  3191  2157  3186   	fcall	_setDimmerIntr_Dimming_RF
 13609                           
 13610                           ;Dimmer_B1.c: 810: } else {
 13611  070B  2F53               	goto	l9581
 13612  070C                     l9557:	
 13613                           
 13614                           ;Dimmer_B1.c: 811: setDimmerIntr_MaxmumValue(lights, ((char)(65*0.8)));
 13615  070C  3034               	movlw	52
 13616  070D  0020               	movlb	0	; select bank0
 13617  070E  00E6               	movwf	??_setDimmerLights_OnOff
 13618  070F  0866               	movf	??_setDimmerLights_OnOff,w
 13619  0710  00DA               	movwf	setDimmerIntr_MaxmumValue@value
 13620  0711  0868               	movf	setDimmerLights_OnOff@lights,w
 13621  0712  319D  25E6  3186   	fcall	_setDimmerIntr_MaxmumValue
 13622                           
 13623                           ;Dimmer_B1.c: 812: setProductData((20 + lights), getDimmerLights_ValueToPercent(((char)(
      +                          65*0.8))));
 13624  0715  3034               	movlw	52
 13625  0716  3189  210C  3186   	fcall	_getDimmerLights_ValueToPercent
 13626  0719  0020               	movlb	0	; select bank0
 13627  071A  00E6               	movwf	??_setDimmerLights_OnOff
 13628  071B  0866               	movf	??_setDimmerLights_OnOff,w
 13629  071C  00DA               	movwf	setProductData@value
 13630  071D  0868               	movf	setDimmerLights_OnOff@lights,w
 13631  071E  3E14               	addlw	20
 13632  071F  319B  2394  3186   	fcall	_setProductData
 13633                           
 13634                           ;Dimmer_B1.c: 813: }
 13635                           ;Dimmer_B1.c: 815: } else if (command == 0) {
 13636  0722  2F53               	goto	l9581
 13637  0723                     l9561:	
 13638  0723  0020               	movlb	0	; select bank0
 13639  0724  08E5               	movf	setDimmerLights_OnOff@command,f
 13640  0725  1D03               	skipz
 13641  0726  2F53               	goto	l9581
 13642                           
 13643                           ;Dimmer_B1.c: 816: setDimmerIntr_ControlStatus(lights, 0);
 13644  0727  01F2               	clrf	setDimmerIntr_ControlStatus@command
 13645  0728  0868               	movf	setDimmerLights_OnOff@lights,w
 13646  0729  3191  212E  3186   	fcall	_setDimmerIntr_ControlStatus
 13647                           
 13648                           ;Dimmer_B1.c: 817: setLED(lights, 1);
 13649  072C  01F4               	clrf	setLED@command
 13650  072D  0AF4               	incf	setLED@command,f
 13651  072E  0020               	movlb	0	; select bank0
 13652  072F  0868               	movf	setDimmerLights_OnOff@lights,w
 13653  0730  3197  2741  3186   	fcall	_setLED
 13654                           
 13655                           ;Dimmer_B1.c: 821: if (getDelayOff_GO(lights) == 1) {
 13656  0733  0020               	movlb	0	; select bank0
 13657  0734  0868               	movf	setDimmerLights_OnOff@lights,w
 13658  0735  319C  2415  3186   	fcall	_getDelayOff_GO
 13659  0738  3A01               	xorlw	1
 13660  0739  1D03               	skipz
 13661  073A  2F42               	goto	l9571
 13662                           
 13663                           ;Dimmer_B1.c: 822: setDelayOff_GO(lights, 0, 0);
 13664  073B  0020               	movlb	0	; select bank0
 13665  073C  01DD               	clrf	setDelayOff_GO@command
 13666  073D  01DE               	clrf	setDelayOff_GO@value
 13667  073E  0868               	movf	setDimmerLights_OnOff@lights,w
 13668  073F  318C  2422  3186   	fcall	_setDelayOff_GO
 13669  0742                     l9571:	
 13670                           
 13671                           ;Dimmer_B1.c: 823: }
 13672                           ;Dimmer_B1.c: 828: if (lights == 1) {
 13673  0742  0020               	movlb	0	; select bank0
 13674  0743  0868               	movf	setDimmerLights_OnOff@lights,w
 13675  0744  3A01               	xorlw	1
 13676  0745  1D03               	skipz
 13677  0746  2F49               	goto	l9575
 13678                           
 13679                           ;Dimmer_B1.c: 829: RA7 = 0;
 13680  0747  138C               	bcf	12,7	;volatile
 13681                           
 13682                           ;Dimmer_B1.c: 831: }
 13683  0748  2F4D               	goto	l922
 13684  0749                     l9575:	
 13685                           
 13686                           ;Dimmer_B1.c: 834: else if (lights == 2) {
 13687  0749  0868               	movf	setDimmerLights_OnOff@lights,w
 13688  074A  3A02               	xorlw	2
 13689  074B  1903               	btfsc	3,2
 13690                           
 13691                           ;Dimmer_B1.c: 835: RB4 = 0;
 13692  074C  120D               	bcf	13,4	;volatile
 13693  074D                     l922:	
 13694                           
 13695                           ;Dimmer_B1.c: 836: }
 13696                           ;Dimmer_B1.c: 841: Dimmer.Load_Status = 0;
 13697  074D  0021               	movlb	1	; select bank1
 13698  074E  113A               	bcf	_Dimmer^(0+128),2
 13699                           
 13700                           ;Dimmer_B1.c: 842: setDimmerLights_Line(0);
 13701  074F  3000               	movlw	0
 13702  0750  319D  25FD  3186   	fcall	_setDimmerLights_Line
 13703  0753                     l9581:	
 13704                           
 13705                           ;Dimmer_B1.c: 844: }
 13706                           ;Dimmer_B1.c: 847: setRF_DimmerLights(lights, command);
 13707  0753  0020               	movlb	0	; select bank0
 13708  0754  0865               	movf	setDimmerLights_OnOff@command,w
 13709  0755  00E6               	movwf	??_setDimmerLights_OnOff
 13710  0756  0866               	movf	??_setDimmerLights_OnOff,w
 13711  0757  00DD               	movwf	setRF_DimmerLights@on
 13712  0758  0868               	movf	setDimmerLights_OnOff@lights,w
 13713  0759  3196  26E2  3186   	fcall	_setRF_DimmerLights
 13714                           
 13715                           ;Dimmer_B1.c: 849: if (getCmd_Status(1) == 1) {
 13716  075C  3001               	movlw	1
 13717  075D  319C  2470  3186   	fcall	_getCmd_Status
 13718  0760  3A01               	xorlw	1
 13719  0761  1D03               	skipz
 13720  0762  2F7D               	goto	l9595
 13721                           
 13722                           ;Dimmer_B1.c: 850: if (getMain_All_LightsStatus() == 0) {
 13723  0763  319C  2424  3186   	fcall	_getMain_All_LightsStatus
 13724  0766  3800               	iorlw	0
 13725  0767  1D03               	skipz
 13726  0768  0008               	return
 13727                           
 13728                           ;Dimmer_B1.c: 851: setCmd_Status(1, 0);
 13729  0769  01F2               	clrf	setCmd_Status@cmd
 13730  076A  3001               	movlw	1
 13731  076B  319D  2552  3186   	fcall	_setCmd_Status
 13732                           
 13733                           ;Dimmer_B1.c: 852: setProductData(11, 0);
 13734  076E  0020               	movlb	0	; select bank0
 13735  076F  01DA               	clrf	setProductData@value
 13736  0770  300B               	movlw	11
 13737  0771  319B  2394  3186   	fcall	_setProductData
 13738                           
 13739                           ;Dimmer_B1.c: 853: setProductData(17, 0);
 13740  0774  0020               	movlb	0	; select bank0
 13741  0775  01DA               	clrf	setProductData@value
 13742  0776  3011               	movlw	17
 13743  0777  319B  2394  3186   	fcall	_setProductData
 13744                           
 13745                           ;Dimmer_B1.c: 854: setTxData();
 13746  077A  318F  274A         	fcall	_setTxData
 13747                           
 13748                           ;Dimmer_B1.c: 855: }
 13749                           ;Dimmer_B1.c: 856: } else {
 13750  077C  0008               	return
 13751  077D                     l9595:	
 13752                           
 13753                           ;Dimmer_B1.c: 857: setTxData();
 13754  077D  318F  274A         	fcall	_setTxData
 13755  077F  0008               	return
 13756  0780                     __end_of_setDimmerLights_OnOff:	
 13757                           
 13758                           	psect	text89
 13759  1741                     __ptext89:	
 13760 ;; *************** function _setLED *****************
 13761 ;; Defined at:
 13762 ;;		line 76 in file "../src/LED_B1.c"
 13763 ;; Parameters:    Size  Location     Type
 13764 ;;  led             1    wreg     unsigned char 
 13765 ;;  command         1    4[COMMON] unsigned char 
 13766 ;; Auto vars:     Size  Location     Type
 13767 ;;  led             1    5[COMMON] unsigned char 
 13768 ;; Return value:  Size  Location     Type
 13769 ;;		None               void
 13770 ;; Registers used:
 13771 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13772 ;; Tracked objects:
 13773 ;;		On entry : 0/0
 13774 ;;		On exit  : 0/0
 13775 ;;		Unchanged: 0/0
 13776 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13777 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13778 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13779 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13780 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13781 ;;Total ram usage:        2 bytes
 13782 ;; Hardware stack levels used:    1
 13783 ;; Hardware stack levels required when called:    4
 13784 ;; This function calls:
 13785 ;;		_LedPointSelect
 13786 ;; This function is called by:
 13787 ;;		_setDimmerLights_OnOff
 13788 ;;		_setLED_Initialization
 13789 ;;		_Exception_Main
 13790 ;;		_setSw_Initialization
 13791 ;; This function uses a non-reentrant model
 13792 ;;
 13793                           
 13794                           
 13795                           ;psect for function _setLED
 13796  1741                     _setLED:	
 13797                           
 13798                           ;incstack = 0
 13799                           ; Regs used in _setLED: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13800                           ;setLED@led stored from wreg
 13801  1741  00F5               	movwf	setLED@led
 13802                           
 13803                           ;LED_B1.c: 77: LedPointSelect(led);
 13804  1742  0875               	movf	setLED@led,w
 13805  1743  319E  26E4  3197   	fcall	_LedPointSelect
 13806                           
 13807                           ;LED_B1.c: 78: if (command == 0) {
 13808  1746  08F4               	movf	setLED@command,f
 13809  1747  1D03               	skipz
 13810  1748  2F5B               	goto	l7133
 13811                           
 13812                           ;LED_B1.c: 80: if (led == 1) {
 13813  1749  0875               	movf	setLED@led,w
 13814  174A  3A01               	xorlw	1
 13815  174B  1D03               	skipz
 13816  174C  2F4F               	goto	l7125
 13817                           
 13818                           ;LED_B1.c: 84: RA3 = 1;
 13819  174D  0020               	movlb	0	; select bank0
 13820  174E  158C               	bsf	12,3	;volatile
 13821  174F                     l7125:	
 13822                           
 13823                           ;LED_B1.c: 86: }
 13824                           ;LED_B1.c: 89: if (led == 2) {
 13825  174F  0875               	movf	setLED@led,w
 13826  1750  3A02               	xorlw	2
 13827  1751  1D03               	skipz
 13828  1752  2F55               	goto	l7129
 13829                           
 13830                           ;LED_B1.c: 93: RC7 = 1;
 13831  1753  0020               	movlb	0	; select bank0
 13832  1754  178E               	bsf	14,7	;volatile
 13833  1755                     l7129:	
 13834                           
 13835                           ;LED_B1.c: 95: }
 13836                           ;LED_B1.c: 107: if (led == 99) {
 13837  1755  0875               	movf	setLED@led,w
 13838  1756  3A63               	xorlw	99
 13839  1757  1D03               	skipz
 13840  1758  2F5B               	goto	l7133
 13841                           
 13842                           ;LED_B1.c: 111: RB5 = 1;
 13843  1759  0020               	movlb	0	; select bank0
 13844  175A  168D               	bsf	13,5	;volatile
 13845  175B                     l7133:	
 13846                           
 13847                           ;LED_B1.c: 113: }
 13848                           ;LED_B1.c: 115: }
 13849                           ;LED_B1.c: 116: if (command == 1) {
 13850  175B  0874               	movf	setLED@command,w
 13851  175C  3A01               	xorlw	1
 13852  175D  1D03               	skipz
 13853  175E  2F71               	goto	l7147
 13854                           
 13855                           ;LED_B1.c: 118: if (led == 1) {
 13856  175F  0875               	movf	setLED@led,w
 13857  1760  3A01               	xorlw	1
 13858  1761  1D03               	skipz
 13859  1762  2F65               	goto	l7139
 13860                           
 13861                           ;LED_B1.c: 122: RA3 = 0;
 13862  1763  0020               	movlb	0	; select bank0
 13863  1764  118C               	bcf	12,3	;volatile
 13864  1765                     l7139:	
 13865                           
 13866                           ;LED_B1.c: 124: }
 13867                           ;LED_B1.c: 127: if (led == 2) {
 13868  1765  0875               	movf	setLED@led,w
 13869  1766  3A02               	xorlw	2
 13870  1767  1D03               	skipz
 13871  1768  2F6B               	goto	l7143
 13872                           
 13873                           ;LED_B1.c: 131: RC7 = 0;
 13874  1769  0020               	movlb	0	; select bank0
 13875  176A  138E               	bcf	14,7	;volatile
 13876  176B                     l7143:	
 13877                           
 13878                           ;LED_B1.c: 133: }
 13879                           ;LED_B1.c: 145: if (led == 99) {
 13880  176B  0875               	movf	setLED@led,w
 13881  176C  3A63               	xorlw	99
 13882  176D  1D03               	skipz
 13883  176E  2F71               	goto	l7147
 13884                           
 13885                           ;LED_B1.c: 149: RB5 = 0;
 13886  176F  0020               	movlb	0	; select bank0
 13887  1770  128D               	bcf	13,5	;volatile
 13888  1771                     l7147:	
 13889                           
 13890                           ;LED_B1.c: 151: }
 13891                           ;LED_B1.c: 153: }
 13892                           ;LED_B1.c: 154: if (command == 10) {
 13893  1771  0874               	movf	setLED@command,w
 13894  1772  3A0A               	xorlw	10
 13895  1773  1D03               	skipz
 13896  1774  2F95               	goto	l7163
 13897                           
 13898                           ;LED_B1.c: 155: LED->GO = 0;
 13899  1775  0021               	movlb	1	; select bank1
 13900  1776  0846               	movf	_LED^(0+128),w
 13901  1777  0086               	movwf	6
 13902  1778  3001               	movlw	1	; select bank2/3
 13903  1779  0087               	movwf	7
 13904  177A  1081               	bcf	1,1
 13905                           
 13906                           ;LED_B1.c: 156: LED->Time = 0;
 13907  177B  0A46               	incf	_LED^(0+128),w
 13908  177C  0086               	movwf	6
 13909  177D  3001               	movlw	1	; select bank2/3
 13910  177E  0087               	movwf	7
 13911  177F  3000               	movlw	0
 13912  1780  3FC0               	movwi [0]fsr1
 13913  1781  3FC1               	movwi [1]fsr1
 13914                           
 13915                           ;LED_B1.c: 158: if (led == 1) {
 13916  1782  0875               	movf	setLED@led,w
 13917  1783  3A01               	xorlw	1
 13918  1784  1D03               	skipz
 13919  1785  2F89               	goto	l7155
 13920                           
 13921                           ;LED_B1.c: 162: RA3 = 1;
 13922  1786  0020               	movlb	0	; select bank0
 13923  1787  158C               	bsf	12,3	;volatile
 13924                           
 13925                           ;LED_B1.c: 164: }
 13926  1788  2F8F               	goto	l7159
 13927  1789                     l7155:	
 13928                           
 13929                           ;LED_B1.c: 167: else if (led == 2) {
 13930  1789  0875               	movf	setLED@led,w
 13931  178A  3A02               	xorlw	2
 13932  178B  1D03               	skipz
 13933  178C  2F8F               	goto	l7159
 13934                           
 13935                           ;LED_B1.c: 171: RC7 = 1;
 13936  178D  0020               	movlb	0	; select bank0
 13937  178E  178E               	bsf	14,7	;volatile
 13938  178F                     l7159:	
 13939                           
 13940                           ;LED_B1.c: 173: }
 13941                           ;LED_B1.c: 185: if (led == 99) {
 13942  178F  0875               	movf	setLED@led,w
 13943  1790  3A63               	xorlw	99
 13944  1791  1D03               	skipz
 13945  1792  2F95               	goto	l7163
 13946                           
 13947                           ;LED_B1.c: 189: RB5 = 1;
 13948  1793  0020               	movlb	0	; select bank0
 13949  1794  168D               	bsf	13,5	;volatile
 13950  1795                     l7163:	
 13951                           
 13952                           ;LED_B1.c: 191: }
 13953                           ;LED_B1.c: 193: }
 13954                           ;LED_B1.c: 194: if (command == 11) {
 13955  1795  0874               	movf	setLED@command,w
 13956  1796  3A0B               	xorlw	11
 13957  1797  1D03               	skipz
 13958  1798  0008               	return
 13959                           
 13960                           ;LED_B1.c: 195: LED->GO = 1;
 13961  1799  0021               	movlb	1	; select bank1
 13962  179A  0846               	movf	_LED^(0+128),w
 13963  179B  0086               	movwf	6
 13964  179C  3001               	movlw	1	; select bank2/3
 13965  179D  0087               	movwf	7
 13966  179E  1481               	bsf	1,1
 13967  179F  0008               	return
 13968  17A0                     __end_of_setLED:	
 13969                           
 13970                           	psect	text90
 13971  1EE4                     __ptext90:	
 13972 ;; *************** function _LedPointSelect *****************
 13973 ;; Defined at:
 13974 ;;		line 7 in file "../src/LED_B1.c"
 13975 ;; Parameters:    Size  Location     Type
 13976 ;;  led             1    wreg     unsigned char 
 13977 ;; Auto vars:     Size  Location     Type
 13978 ;;  led             1    3[COMMON] unsigned char 
 13979 ;; Return value:  Size  Location     Type
 13980 ;;		None               void
 13981 ;; Registers used:
 13982 ;;		wreg
 13983 ;; Tracked objects:
 13984 ;;		On entry : 0/0
 13985 ;;		On exit  : 0/0
 13986 ;;		Unchanged: 0/0
 13987 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13988 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13989 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13990 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13991 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13992 ;;Total ram usage:        2 bytes
 13993 ;; Hardware stack levels used:    1
 13994 ;; Hardware stack levels required when called:    3
 13995 ;; This function calls:
 13996 ;;		Nothing
 13997 ;; This function is called by:
 13998 ;;		_setLED_Initialization
 13999 ;;		_setLED
 14000 ;;		_setLED_Main
 14001 ;; This function uses a non-reentrant model
 14002 ;;
 14003                           
 14004                           
 14005                           ;psect for function _LedPointSelect
 14006  1EE4                     _LedPointSelect:	
 14007                           
 14008                           ;incstack = 0
 14009                           ; Regs used in _LedPointSelect: [wreg]
 14010                           ;LedPointSelect@led stored from wreg
 14011  1EE4  00F3               	movwf	LedPointSelect@led
 14012                           
 14013                           ;LED_B1.c: 9: if (led == 1) {
 14014  1EE5  0873               	movf	LedPointSelect@led,w
 14015  1EE6  3A01               	xorlw	1
 14016  1EE7  1D03               	skipz
 14017  1EE8  2EEE               	goto	l1145
 14018                           
 14019                           ;LED_B1.c: 10: LED = &VarLED1;
 14020  1EE9  30DE               	movlw	_VarLED1& (0+255)
 14021  1EEA  00F2               	movwf	??_LedPointSelect
 14022  1EEB  0872               	movf	??_LedPointSelect,w
 14023  1EEC  0021               	movlb	1	; select bank1
 14024  1EED  00C6               	movwf	_LED^(0+128)
 14025  1EEE                     l1145:	
 14026                           
 14027                           ;LED_B1.c: 11: }
 14028                           ;LED_B1.c: 14: if (led == 2) {
 14029  1EEE  0873               	movf	LedPointSelect@led,w
 14030  1EEF  3A02               	xorlw	2
 14031  1EF0  1D03               	skipz
 14032  1EF1  2EF7               	goto	l1146
 14033                           
 14034                           ;LED_B1.c: 15: LED = &VarLED2;
 14035  1EF2  30E2               	movlw	_VarLED2& (0+255)
 14036  1EF3  00F2               	movwf	??_LedPointSelect
 14037  1EF4  0872               	movf	??_LedPointSelect,w
 14038  1EF5  0021               	movlb	1	; select bank1
 14039  1EF6  00C6               	movwf	_LED^(0+128)
 14040  1EF7                     l1146:	
 14041                           
 14042                           ;LED_B1.c: 16: }
 14043                           ;LED_B1.c: 24: if (led == 99) {
 14044  1EF7  0873               	movf	LedPointSelect@led,w
 14045  1EF8  3A63               	xorlw	99
 14046  1EF9  1D03               	skipz
 14047  1EFA  0008               	return
 14048                           
 14049                           ;LED_B1.c: 25: LED = &VarErrLED;
 14050  1EFB  30DA               	movlw	_VarErrLED& (0+255)
 14051  1EFC  00F2               	movwf	??_LedPointSelect
 14052  1EFD  0872               	movf	??_LedPointSelect,w
 14053  1EFE  0021               	movlb	1	; select bank1
 14054  1EFF  00C6               	movwf	_LED^(0+128)
 14055  1F00  0008               	return
 14056  1F01                     __end_of_LedPointSelect:	
 14057                           
 14058                           	psect	text91
 14059  1157                     __ptext91:	
 14060 ;; *************** function _setDimmerIntr_Dimming_RF *****************
 14061 ;; Defined at:
 14062 ;;		line 180 in file "../src/Dimmer_B1.c"
 14063 ;; Parameters:    Size  Location     Type
 14064 ;;  lights          1    wreg     unsigned char 
 14065 ;;  command         1    2[COMMON] unsigned char 
 14066 ;; Auto vars:     Size  Location     Type
 14067 ;;  lights          1    4[COMMON] unsigned char 
 14068 ;; Return value:  Size  Location     Type
 14069 ;;		None               void
 14070 ;; Registers used:
 14071 ;;		wreg, status,2, status,0
 14072 ;; Tracked objects:
 14073 ;;		On entry : 0/0
 14074 ;;		On exit  : 0/0
 14075 ;;		Unchanged: 0/0
 14076 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14077 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14078 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14079 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14080 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14081 ;;Total ram usage:        3 bytes
 14082 ;; Hardware stack levels used:    1
 14083 ;; Hardware stack levels required when called:    3
 14084 ;; This function calls:
 14085 ;;		Nothing
 14086 ;; This function is called by:
 14087 ;;		_setDimmerLights_OnOff
 14088 ;;		_setRFSW_AdjControl
 14089 ;; This function uses a non-reentrant model
 14090 ;;
 14091                           
 14092                           
 14093                           ;psect for function _setDimmerIntr_Dimming_RF
 14094  1157                     _setDimmerIntr_Dimming_RF:	
 14095                           
 14096                           ;incstack = 0
 14097                           ; Regs used in _setDimmerIntr_Dimming_RF: [wreg+status,2+status,0]
 14098                           ;setDimmerIntr_Dimming_RF@lights stored from wreg
 14099  1157  00F4               	movwf	setDimmerIntr_Dimming_RF@lights
 14100                           
 14101                           ;Dimmer_B1.c: 182: if (lights == 1) {
 14102  1158  0874               	movf	setDimmerIntr_Dimming_RF@lights,w
 14103  1159  3A01               	xorlw	1
 14104  115A  1D03               	skipz
 14105  115B  296C               	goto	l6731
 14106                           
 14107                           ;Dimmer_B1.c: 183: DimmerIntr1.Dimming_RF = command == 1 ? 1 : 0;
 14108  115C  0872               	movf	setDimmerIntr_Dimming_RF@command,w
 14109  115D  3A01               	xorlw	1
 14110  115E  3000               	movlw	0
 14111  115F  1903               	skipnz
 14112  1160  3001               	movlw	1
 14113  1161  00F3               	movwf	??_setDimmerIntr_Dimming_RF
 14114  1162  0EF3               	swapf	??_setDimmerIntr_Dimming_RF,f
 14115  1163  0DF3               	rlf	??_setDimmerIntr_Dimming_RF,f
 14116  1164  0DF3               	rlf	??_setDimmerIntr_Dimming_RF,f
 14117  1165  0021               	movlb	1	; select bank1
 14118  1166  0862               	movf	_DimmerIntr1^(0+128),w
 14119  1167  0673               	xorwf	??_setDimmerIntr_Dimming_RF,w
 14120  1168  39BF               	andlw	-65
 14121  1169  0673               	xorwf	??_setDimmerIntr_Dimming_RF,w
 14122  116A  00E2               	movwf	_DimmerIntr1^(0+128)
 14123                           
 14124                           ;Dimmer_B1.c: 184: }
 14125  116B  0008               	return
 14126  116C                     l6731:	
 14127                           
 14128                           ;Dimmer_B1.c: 187: else if (lights == 2) {
 14129  116C  0874               	movf	setDimmerIntr_Dimming_RF@lights,w
 14130  116D  3A02               	xorlw	2
 14131  116E  1D03               	skipz
 14132  116F  0008               	return
 14133                           
 14134                           ;Dimmer_B1.c: 188: DimmerIntr2.Dimming_RF = command == 1 ? 1 : 0;
 14135  1170  0872               	movf	setDimmerIntr_Dimming_RF@command,w
 14136  1171  3A01               	xorlw	1
 14137  1172  3000               	movlw	0
 14138  1173  1903               	skipnz
 14139  1174  3001               	movlw	1
 14140  1175  00F3               	movwf	??_setDimmerIntr_Dimming_RF
 14141  1176  0EF3               	swapf	??_setDimmerIntr_Dimming_RF,f
 14142  1177  0DF3               	rlf	??_setDimmerIntr_Dimming_RF,f
 14143  1178  0DF3               	rlf	??_setDimmerIntr_Dimming_RF,f
 14144  1179  0021               	movlb	1	; select bank1
 14145  117A  0869               	movf	_DimmerIntr2^(0+128),w
 14146  117B  0673               	xorwf	??_setDimmerIntr_Dimming_RF,w
 14147  117C  39BF               	andlw	-65
 14148  117D  0673               	xorwf	??_setDimmerIntr_Dimming_RF,w
 14149  117E  00E9               	movwf	_DimmerIntr2^(0+128)
 14150  117F  0008               	return
 14151  1180                     __end_of_setDimmerIntr_Dimming_RF:	
 14152                           
 14153                           	psect	text92
 14154  1D67                     __ptext92:	
 14155 ;; *************** function _setDimmerIntr_DimmingValue *****************
 14156 ;; Defined at:
 14157 ;;		line 48 in file "../src/Dimmer_B1.c"
 14158 ;; Parameters:    Size  Location     Type
 14159 ;;  lights          1    wreg     unsigned char 
 14160 ;;  value           1    2[COMMON] unsigned char 
 14161 ;; Auto vars:     Size  Location     Type
 14162 ;;  lights          1    4[COMMON] unsigned char 
 14163 ;; Return value:  Size  Location     Type
 14164 ;;		None               void
 14165 ;; Registers used:
 14166 ;;		wreg
 14167 ;; Tracked objects:
 14168 ;;		On entry : 0/0
 14169 ;;		On exit  : 0/0
 14170 ;;		Unchanged: 0/0
 14171 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14172 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14173 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14174 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14175 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14176 ;;Total ram usage:        3 bytes
 14177 ;; Hardware stack levels used:    1
 14178 ;; Hardware stack levels required when called:    3
 14179 ;; This function calls:
 14180 ;;		Nothing
 14181 ;; This function is called by:
 14182 ;;		_setDimmerLights_OnOff
 14183 ;; This function uses a non-reentrant model
 14184 ;;
 14185                           
 14186                           
 14187                           ;psect for function _setDimmerIntr_DimmingValue
 14188  1D67                     _setDimmerIntr_DimmingValue:	
 14189                           
 14190                           ;incstack = 0
 14191                           ; Regs used in _setDimmerIntr_DimmingValue: [wreg]
 14192                           ;setDimmerIntr_DimmingValue@lights stored from wreg
 14193  1D67  00F4               	movwf	setDimmerIntr_DimmingValue@lights
 14194                           
 14195                           ;Dimmer_B1.c: 50: if (lights == 1) {
 14196  1D68  0874               	movf	setDimmerIntr_DimmingValue@lights,w
 14197  1D69  3A01               	xorlw	1
 14198  1D6A  1D03               	skipz
 14199  1D6B  2D72               	goto	l7063
 14200                           
 14201                           ;Dimmer_B1.c: 51: DimmerIntr1.DimmingValue = value;
 14202  1D6C  0872               	movf	setDimmerIntr_DimmingValue@value,w
 14203  1D6D  00F3               	movwf	??_setDimmerIntr_DimmingValue
 14204  1D6E  0873               	movf	??_setDimmerIntr_DimmingValue,w
 14205  1D6F  0021               	movlb	1	; select bank1
 14206  1D70  00E6               	movwf	(_DimmerIntr1^(0+128)+4)
 14207                           
 14208                           ;Dimmer_B1.c: 52: }
 14209  1D71  0008               	return
 14210  1D72                     l7063:	
 14211                           
 14212                           ;Dimmer_B1.c: 55: else if (lights == 2) {
 14213  1D72  0874               	movf	setDimmerIntr_DimmingValue@lights,w
 14214  1D73  3A02               	xorlw	2
 14215  1D74  1D03               	skipz
 14216  1D75  0008               	return
 14217                           
 14218                           ;Dimmer_B1.c: 56: DimmerIntr2.DimmingValue = value;
 14219  1D76  0872               	movf	setDimmerIntr_DimmingValue@value,w
 14220  1D77  00F3               	movwf	??_setDimmerIntr_DimmingValue
 14221  1D78  0873               	movf	??_setDimmerIntr_DimmingValue,w
 14222  1D79  0021               	movlb	1	; select bank1
 14223  1D7A  00ED               	movwf	(_DimmerIntr2^(0+128)+4)
 14224  1D7B  0008               	return
 14225  1D7C                     __end_of_setDimmerIntr_DimmingValue:	
 14226                           
 14227                           	psect	text93
 14228  112E                     __ptext93:	
 14229 ;; *************** function _setDimmerIntr_ControlStatus *****************
 14230 ;; Defined at:
 14231 ;;		line 30 in file "../src/Dimmer_B1.c"
 14232 ;; Parameters:    Size  Location     Type
 14233 ;;  lights          1    wreg     unsigned char 
 14234 ;;  command         1    2[COMMON] unsigned char 
 14235 ;; Auto vars:     Size  Location     Type
 14236 ;;  lights          1    4[COMMON] unsigned char 
 14237 ;; Return value:  Size  Location     Type
 14238 ;;		None               void
 14239 ;; Registers used:
 14240 ;;		wreg, status,2, status,0
 14241 ;; Tracked objects:
 14242 ;;		On entry : 0/0
 14243 ;;		On exit  : 0/0
 14244 ;;		Unchanged: 0/0
 14245 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14246 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14247 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14248 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14249 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14250 ;;Total ram usage:        3 bytes
 14251 ;; Hardware stack levels used:    1
 14252 ;; Hardware stack levels required when called:    3
 14253 ;; This function calls:
 14254 ;;		Nothing
 14255 ;; This function is called by:
 14256 ;;		_setDimmerLights_OnOff
 14257 ;; This function uses a non-reentrant model
 14258 ;;
 14259                           
 14260                           
 14261                           ;psect for function _setDimmerIntr_ControlStatus
 14262  112E                     _setDimmerIntr_ControlStatus:	
 14263                           
 14264                           ;incstack = 0
 14265                           ; Regs used in _setDimmerIntr_ControlStatus: [wreg+status,2+status,0]
 14266                           ;setDimmerIntr_ControlStatus@lights stored from wreg
 14267  112E  00F4               	movwf	setDimmerIntr_ControlStatus@lights
 14268                           
 14269                           ;Dimmer_B1.c: 32: if (lights == 1) {
 14270  112F  0874               	movf	setDimmerIntr_ControlStatus@lights,w
 14271  1130  3A01               	xorlw	1
 14272  1131  1D03               	skipz
 14273  1132  2943               	goto	l7055
 14274                           
 14275                           ;Dimmer_B1.c: 33: DimmerIntr1.ControlStatus = command == 1 ? 1 : 0;
 14276  1133  0872               	movf	setDimmerIntr_ControlStatus@command,w
 14277  1134  3A01               	xorlw	1
 14278  1135  3000               	movlw	0
 14279  1136  1903               	skipnz
 14280  1137  3001               	movlw	1
 14281  1138  00F3               	movwf	??_setDimmerIntr_ControlStatus
 14282  1139  0DF3               	rlf	??_setDimmerIntr_ControlStatus,f
 14283  113A  0DF3               	rlf	??_setDimmerIntr_ControlStatus,f
 14284  113B  0DF3               	rlf	??_setDimmerIntr_ControlStatus,f
 14285  113C  0021               	movlb	1	; select bank1
 14286  113D  0862               	movf	_DimmerIntr1^(0+128),w
 14287  113E  0673               	xorwf	??_setDimmerIntr_ControlStatus,w
 14288  113F  39F7               	andlw	-9
 14289  1140  0673               	xorwf	??_setDimmerIntr_ControlStatus,w
 14290  1141  00E2               	movwf	_DimmerIntr1^(0+128)
 14291                           
 14292                           ;Dimmer_B1.c: 34: }
 14293  1142  0008               	return
 14294  1143                     l7055:	
 14295                           
 14296                           ;Dimmer_B1.c: 37: else if (lights == 2) {
 14297  1143  0874               	movf	setDimmerIntr_ControlStatus@lights,w
 14298  1144  3A02               	xorlw	2
 14299  1145  1D03               	skipz
 14300  1146  0008               	return
 14301                           
 14302                           ;Dimmer_B1.c: 38: DimmerIntr2.ControlStatus = command == 1 ? 1 : 0;
 14303  1147  0872               	movf	setDimmerIntr_ControlStatus@command,w
 14304  1148  3A01               	xorlw	1
 14305  1149  3000               	movlw	0
 14306  114A  1903               	skipnz
 14307  114B  3001               	movlw	1
 14308  114C  00F3               	movwf	??_setDimmerIntr_ControlStatus
 14309  114D  0DF3               	rlf	??_setDimmerIntr_ControlStatus,f
 14310  114E  0DF3               	rlf	??_setDimmerIntr_ControlStatus,f
 14311  114F  0DF3               	rlf	??_setDimmerIntr_ControlStatus,f
 14312  1150  0021               	movlb	1	; select bank1
 14313  1151  0869               	movf	_DimmerIntr2^(0+128),w
 14314  1152  0673               	xorwf	??_setDimmerIntr_ControlStatus,w
 14315  1153  39F7               	andlw	-9
 14316  1154  0673               	xorwf	??_setDimmerIntr_ControlStatus,w
 14317  1155  00E9               	movwf	_DimmerIntr2^(0+128)
 14318  1156  0008               	return
 14319  1157                     __end_of_setDimmerIntr_ControlStatus:	
 14320                           
 14321                           	psect	text94
 14322  0C22                     __ptext94:	
 14323 ;; *************** function _setDelayOff_GO *****************
 14324 ;; Defined at:
 14325 ;;		line 87 in file "../src/DelayOff_B1.c"
 14326 ;; Parameters:    Size  Location     Type
 14327 ;;  sw              1    wreg     unsigned char 
 14328 ;;  command         1   61[BANK0 ] unsigned char 
 14329 ;;  value           1   62[BANK0 ] unsigned char 
 14330 ;; Auto vars:     Size  Location     Type
 14331 ;;  sw              1   68[BANK0 ] unsigned char 
 14332 ;;  k               1   67[BANK0 ] unsigned char 
 14333 ;;  j               1   66[BANK0 ] unsigned char 
 14334 ;;  i               1   65[BANK0 ] unsigned char 
 14335 ;; Return value:  Size  Location     Type
 14336 ;;		None               void
 14337 ;; Registers used:
 14338 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14339 ;; Tracked objects:
 14340 ;;		On entry : 0/0
 14341 ;;		On exit  : 0/0
 14342 ;;		Unchanged: 0/0
 14343 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14344 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14345 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14346 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14347 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14348 ;;Total ram usage:        8 bytes
 14349 ;; Hardware stack levels used:    1
 14350 ;; Hardware stack levels required when called:    4
 14351 ;; This function calls:
 14352 ;;		_DelayOffPointSelect
 14353 ;;		___bmul
 14354 ;;		_setProductData
 14355 ;; This function is called by:
 14356 ;;		_setDimmerLights_OnOff
 14357 ;;		_setRFSW_Control
 14358 ;; This function uses a non-reentrant model
 14359 ;;
 14360                           
 14361                           
 14362                           ;psect for function _setDelayOff_GO
 14363  0C22                     _setDelayOff_GO:	
 14364                           
 14365                           ;incstack = 0
 14366                           ; Regs used in _setDelayOff_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14367                           ;setDelayOff_GO@sw stored from wreg
 14368  0C22  0020               	movlb	0	; select bank0
 14369  0C23  00E4               	movwf	setDelayOff_GO@sw
 14370                           
 14371                           ;DelayOff_B1.c: 89: DelayOffPointSelect(sw);
 14372  0C24  0864               	movf	setDelayOff_GO@sw,w
 14373  0C25  319D  253D  318C   	fcall	_DelayOffPointSelect
 14374                           
 14375                           ;DelayOff_B1.c: 90: DelayOff->GO = command == 1 ? 1 : 0;
 14376  0C28  0020               	movlb	0	; select bank0
 14377  0C29  085D               	movf	setDelayOff_GO@command,w
 14378  0C2A  3A01               	xorlw	1
 14379  0C2B  3000               	movlw	0
 14380  0C2C  1903               	skipnz
 14381  0C2D  3001               	movlw	1
 14382  0C2E  00DF               	movwf	??_setDelayOff_GO
 14383  0C2F  0021               	movlb	1	; select bank1
 14384  0C30  0844               	movf	_DelayOff^(0+128),w
 14385  0C31  0086               	movwf	6
 14386  0C32  3001               	movlw	1	; select bank2/3
 14387  0C33  0087               	movwf	7
 14388  0C34  0020               	movlb	0	; select bank0
 14389  0C35  0DDF               	rlf	??_setDelayOff_GO,f
 14390  0C36  0801               	movf	1,w
 14391  0C37  065F               	xorwf	??_setDelayOff_GO,w
 14392  0C38  39FD               	andlw	-3
 14393  0C39  065F               	xorwf	??_setDelayOff_GO,w
 14394  0C3A  0081               	movwf	1
 14395                           
 14396                           ;DelayOff_B1.c: 91: DelayOff->SecondTime = 0;
 14397  0C3B  0021               	movlb	1	; select bank1
 14398  0C3C  0844               	movf	_DelayOff^(0+128),w
 14399  0C3D  3E02               	addlw	2
 14400  0C3E  0086               	movwf	6
 14401  0C3F  3001               	movlw	1	; select bank2/3
 14402  0C40  0087               	movwf	7
 14403  0C41  3000               	movlw	0
 14404  0C42  3FC0               	movwi [0]fsr1
 14405  0C43  3FC1               	movwi [1]fsr1
 14406                           
 14407                           ;DelayOff_B1.c: 92: DelayOff->MinuteTime = 0;
 14408  0C44  0844               	movf	_DelayOff^(0+128),w
 14409  0C45  3E04               	addlw	4
 14410  0C46  0086               	movwf	6
 14411  0C47  3001               	movlw	1	; select bank2/3
 14412  0C48  0087               	movwf	7
 14413  0C49  0181               	clrf	1
 14414                           
 14415                           ;DelayOff_B1.c: 94: if (command == 1) {
 14416  0C4A  0020               	movlb	0	; select bank0
 14417  0C4B  085D               	movf	setDelayOff_GO@command,w
 14418  0C4C  3A01               	xorlw	1
 14419  0C4D  1D03               	skipz
 14420  0C4E  2CA4               	goto	l6715
 14421                           
 14422                           ;DelayOff_B1.c: 96: char i = 5, j = 0, k = 0;
 14423  0C4F  3005               	movlw	5
 14424  0C50  00DF               	movwf	??_setDelayOff_GO
 14425  0C51  085F               	movf	??_setDelayOff_GO,w
 14426  0C52  00E1               	movwf	setDelayOff_GO@i
 14427  0C53  01E2               	clrf	setDelayOff_GO@j
 14428  0C54  01E3               	clrf	setDelayOff_GO@k
 14429                           
 14430                           ;DelayOff_B1.c: 97: if (((value % 16) == 5 || (value % 16) == 0) && value <= 0x30) {
 14431  0C55  300F               	movlw	15
 14432  0C56  055E               	andwf	setDelayOff_GO@value,w
 14433  0C57  00DF               	movwf	??_setDelayOff_GO
 14434  0C58  085F               	movf	??_setDelayOff_GO,w
 14435  0C59  3A05               	xorlw	5
 14436  0C5A  1903               	skipnz
 14437  0C5B  2C60               	goto	l6701
 14438  0C5C  085E               	movf	setDelayOff_GO@value,w
 14439  0C5D  390F               	andlw	15
 14440  0C5E  1D03               	btfss	3,2
 14441  0C5F  2C90               	goto	l6711
 14442  0C60                     l6701:	
 14443  0C60  3031               	movlw	49
 14444  0C61  025E               	subwf	setDelayOff_GO@value,w
 14445  0C62  1803               	skipnc
 14446  0C63  2C90               	goto	l6711
 14447                           
 14448                           ;DelayOff_B1.c: 98: j = value & 0x0f;
 14449  0C64  085E               	movf	setDelayOff_GO@value,w
 14450  0C65  390F               	andlw	15
 14451  0C66  00DF               	movwf	??_setDelayOff_GO
 14452  0C67  085F               	movf	??_setDelayOff_GO,w
 14453  0C68  00E2               	movwf	setDelayOff_GO@j
 14454                           
 14455                           ;DelayOff_B1.c: 99: k = (value >> 4) & 0x0f;
 14456  0C69  085E               	movf	setDelayOff_GO@value,w
 14457  0C6A  00DF               	movwf	??_setDelayOff_GO
 14458  0C6B  3004               	movlw	4
 14459  0C6C                     u6095:	
 14460  0C6C  36DF               	lsrf	??_setDelayOff_GO,f
 14461  0C6D  0B89               	decfsz	9,f
 14462  0C6E  2C6C               	goto	u6095
 14463  0C6F  085F               	movf	??_setDelayOff_GO,w
 14464  0C70  390F               	andlw	15
 14465  0C71  00E0               	movwf	??_setDelayOff_GO+1
 14466  0C72  0860               	movf	??_setDelayOff_GO+1,w
 14467  0C73  00E3               	movwf	setDelayOff_GO@k
 14468                           
 14469                           ;DelayOff_B1.c: 100: DelayOff->Value = j + (k * 10);
 14470  0C74  300A               	movlw	10
 14471  0C75  00DF               	movwf	??_setDelayOff_GO
 14472  0C76  085F               	movf	??_setDelayOff_GO,w
 14473  0C77  00F2               	movwf	___bmul@multiplicand
 14474  0C78  0863               	movf	setDelayOff_GO@k,w
 14475  0C79  319C  24D0  318C   	fcall	___bmul
 14476  0C7C  0020               	movlb	0	; select bank0
 14477  0C7D  0762               	addwf	setDelayOff_GO@j,w
 14478  0C7E  00E0               	movwf	??_setDelayOff_GO+1
 14479  0C7F  0021               	movlb	1	; select bank1
 14480  0C80  0A44               	incf	_DelayOff^(0+128),w
 14481  0C81  0086               	movwf	6
 14482  0C82  3001               	movlw	1	; select bank2/3
 14483  0C83  0087               	movwf	7
 14484  0C84  0020               	movlb	0	; select bank0
 14485  0C85  0860               	movf	??_setDelayOff_GO+1,w
 14486  0C86  0081               	movwf	1
 14487                           
 14488                           ;DelayOff_B1.c: 102: setProductData(26 + sw, value);
 14489  0C87  085E               	movf	setDelayOff_GO@value,w
 14490  0C88  00DF               	movwf	??_setDelayOff_GO
 14491  0C89  085F               	movf	??_setDelayOff_GO,w
 14492  0C8A  00DA               	movwf	setProductData@value
 14493  0C8B  0864               	movf	setDelayOff_GO@sw,w
 14494  0C8C  3E1A               	addlw	26
 14495  0C8D  319B  2394         	fcall	_setProductData
 14496                           
 14497                           ;DelayOff_B1.c: 103: } else {
 14498  0C8F  0008               	return
 14499  0C90                     l6711:	
 14500                           
 14501                           ;DelayOff_B1.c: 104: DelayOff->Value = 0x05;
 14502  0C90  3005               	movlw	5
 14503  0C91  0020               	movlb	0	; select bank0
 14504  0C92  00DF               	movwf	??_setDelayOff_GO
 14505  0C93  0021               	movlb	1	; select bank1
 14506  0C94  0A44               	incf	_DelayOff^(0+128),w
 14507  0C95  0086               	movwf	6
 14508  0C96  3001               	movlw	1	; select bank2/3
 14509  0C97  0087               	movwf	7
 14510  0C98  0020               	movlb	0	; select bank0
 14511  0C99  085F               	movf	??_setDelayOff_GO,w
 14512  0C9A  0081               	movwf	1
 14513                           
 14514                           ;DelayOff_B1.c: 105: setProductData(26 + sw, 0x05);
 14515  0C9B  3005               	movlw	5
 14516  0C9C  00DF               	movwf	??_setDelayOff_GO
 14517  0C9D  085F               	movf	??_setDelayOff_GO,w
 14518  0C9E  00DA               	movwf	setProductData@value
 14519  0C9F  0864               	movf	setDelayOff_GO@sw,w
 14520  0CA0  3E1A               	addlw	26
 14521  0CA1  319B  2394         	fcall	_setProductData
 14522                           
 14523                           ;DelayOff_B1.c: 106: }
 14524                           ;DelayOff_B1.c: 108: } else if (command == 0) {
 14525  0CA3  0008               	return
 14526  0CA4                     l6715:	
 14527  0CA4  0020               	movlb	0	; select bank0
 14528  0CA5  08DD               	movf	setDelayOff_GO@command,f
 14529  0CA6  1D03               	skipz
 14530  0CA7  0008               	return
 14531                           
 14532                           ;DelayOff_B1.c: 109: setProductData(26 + sw, 0);
 14533  0CA8  01DA               	clrf	setProductData@value
 14534  0CA9  0864               	movf	setDelayOff_GO@sw,w
 14535  0CAA  3E1A               	addlw	26
 14536  0CAB  319B  2394         	fcall	_setProductData
 14537  0CAD  0008               	return
 14538  0CAE                     __end_of_setDelayOff_GO:	
 14539                           
 14540                           	psect	text95
 14541  1CD0                     __ptext95:	
 14542 ;; *************** function ___bmul *****************
 14543 ;; Defined at:
 14544 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul8.c"
 14545 ;; Parameters:    Size  Location     Type
 14546 ;;  multiplier      1    wreg     unsigned char 
 14547 ;;  multiplicand    1    2[COMMON] unsigned char 
 14548 ;; Auto vars:     Size  Location     Type
 14549 ;;  multiplier      1    5[COMMON] unsigned char 
 14550 ;;  product         1    4[COMMON] unsigned char 
 14551 ;; Return value:  Size  Location     Type
 14552 ;;                  1    wreg      unsigned char 
 14553 ;; Registers used:
 14554 ;;		wreg, status,2, status,0
 14555 ;; Tracked objects:
 14556 ;;		On entry : 0/0
 14557 ;;		On exit  : 0/0
 14558 ;;		Unchanged: 0/0
 14559 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14560 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14561 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14562 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14563 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14564 ;;Total ram usage:        4 bytes
 14565 ;; Hardware stack levels used:    1
 14566 ;; Hardware stack levels required when called:    3
 14567 ;; This function calls:
 14568 ;;		Nothing
 14569 ;; This function is called by:
 14570 ;;		_setDelayOff_GO
 14571 ;;		_DelayTimejudge
 14572 ;; This function uses a non-reentrant model
 14573 ;;
 14574                           
 14575                           
 14576                           ;psect for function ___bmul
 14577  1CD0                     ___bmul:	
 14578                           
 14579                           ;incstack = 0
 14580                           ; Regs used in ___bmul: [wreg+status,2+status,0]
 14581                           ;___bmul@multiplier stored from wreg
 14582  1CD0  00F5               	movwf	___bmul@multiplier
 14583  1CD1  01F4               	clrf	___bmul@product
 14584  1CD2                     l6357:	
 14585  1CD2  1C75               	btfss	___bmul@multiplier,0
 14586  1CD3  2CD8               	goto	l6361
 14587  1CD4  0872               	movf	___bmul@multiplicand,w
 14588  1CD5  00F3               	movwf	??___bmul
 14589  1CD6  0873               	movf	??___bmul,w
 14590  1CD7  07F4               	addwf	___bmul@product,f
 14591  1CD8                     l6361:	
 14592  1CD8  1003               	clrc
 14593  1CD9  0DF2               	rlf	___bmul@multiplicand,f
 14594  1CDA  1003               	clrc
 14595  1CDB  0CF5               	rrf	___bmul@multiplier,f
 14596  1CDC  08F5               	movf	___bmul@multiplier,f
 14597  1CDD  1D03               	skipz
 14598  1CDE  2CD2               	goto	l6357
 14599  1CDF  0874               	movf	___bmul@product,w
 14600  1CE0  0008               	return
 14601  1CE1                     __end_of___bmul:	
 14602                           
 14603                           	psect	text96
 14604  1D52                     __ptext96:	
 14605 ;; *************** function _setCmd_Status *****************
 14606 ;; Defined at:
 14607 ;;		line 597 in file "../src/Main_B1.c"
 14608 ;; Parameters:    Size  Location     Type
 14609 ;;  number          1    wreg     unsigned char 
 14610 ;;  cmd             1    2[COMMON] unsigned char 
 14611 ;; Auto vars:     Size  Location     Type
 14612 ;;  number          1    4[COMMON] unsigned char 
 14613 ;; Return value:  Size  Location     Type
 14614 ;;		None               void
 14615 ;; Registers used:
 14616 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 14617 ;; Tracked objects:
 14618 ;;		On entry : 0/0
 14619 ;;		On exit  : 0/0
 14620 ;;		Unchanged: 0/0
 14621 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14622 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14623 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14624 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14625 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14626 ;;Total ram usage:        3 bytes
 14627 ;; Hardware stack levels used:    1
 14628 ;; Hardware stack levels required when called:    3
 14629 ;; This function calls:
 14630 ;;		Nothing
 14631 ;; This function is called by:
 14632 ;;		_setDimmerLights_OnOff
 14633 ;;		_setControl_Lights_Table
 14634 ;; This function uses a non-reentrant model
 14635 ;;
 14636                           
 14637                           
 14638                           ;psect for function _setCmd_Status
 14639  1D52                     _setCmd_Status:	
 14640                           
 14641                           ;incstack = 0
 14642                           ; Regs used in _setCmd_Status: [wreg-fsr0h+status,2+status,0]
 14643                           ;setCmd_Status@number stored from wreg
 14644  1D52  00F4               	movwf	setCmd_Status@number
 14645                           
 14646                           ;Main_B1.c: 598: switch (number) {
 14647  1D53  2D61               	goto	l6895
 14648  1D54                     l6891:	
 14649                           ;Main_B1.c: 599: case 1:
 14650                           
 14651                           
 14652                           ;Main_B1.c: 600: Cmd.all_off = cmd == 1 ? 1 : 0;
 14653  1D54  0872               	movf	setCmd_Status@cmd,w
 14654  1D55  3A01               	xorlw	1
 14655  1D56  3000               	movlw	0
 14656  1D57  1903               	skipnz
 14657  1D58  3001               	movlw	1
 14658  1D59  00F3               	movwf	??_setCmd_Status
 14659  1D5A  0021               	movlb	1	; select bank1
 14660  1D5B  0843               	movf	_Cmd^(0+128),w
 14661  1D5C  0673               	xorwf	??_setCmd_Status,w
 14662  1D5D  39FE               	andlw	-2
 14663  1D5E  0673               	xorwf	??_setCmd_Status,w
 14664  1D5F  00C3               	movwf	_Cmd^(0+128)
 14665                           
 14666                           ;Main_B1.c: 602: }
 14667                           
 14668                           ;Main_B1.c: 601: break;
 14669  1D60  0008               	return
 14670  1D61                     l6895:	
 14671  1D61  0874               	movf	setCmd_Status@number,w
 14672                           
 14673                           ; Switch size 1, requested type "space"
 14674                           ; Number of cases is 1, Range of values is 1 to 1
 14675                           ; switch strategies available:
 14676                           ; Name         Instructions Cycles
 14677                           ; simple_byte            4     3 (average)
 14678                           ; direct_byte           11     9 (fixed)
 14679                           ; jumptable            263     9 (fixed)
 14680                           ;	Chosen strategy is simple_byte
 14681  1D62  3A01               	xorlw	1	; case 1
 14682  1D63  1903               	skipnz
 14683  1D64  2D54               	goto	l6891
 14684  1D65  2D66               	goto	l1732
 14685  1D66                     l1732:	
 14686  1D66  0008               	return
 14687  1D67                     __end_of_setCmd_Status:	
 14688                           
 14689                           	psect	text97
 14690  1C24                     __ptext97:	
 14691 ;; *************** function _getMain_All_LightsStatus *****************
 14692 ;; Defined at:
 14693 ;;		line 374 in file "../src/Main_B1.c"
 14694 ;; Parameters:    Size  Location     Type
 14695 ;;		None
 14696 ;; Auto vars:     Size  Location     Type
 14697 ;;  status          1    2[COMMON] unsigned char 
 14698 ;; Return value:  Size  Location     Type
 14699 ;;                  1    wreg      unsigned char 
 14700 ;; Registers used:
 14701 ;;		wreg, status,2, status,0
 14702 ;; Tracked objects:
 14703 ;;		On entry : 0/0
 14704 ;;		On exit  : 0/0
 14705 ;;		Unchanged: 0/0
 14706 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14707 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14708 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14709 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14710 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14711 ;;Total ram usage:        1 bytes
 14712 ;; Hardware stack levels used:    1
 14713 ;; Hardware stack levels required when called:    3
 14714 ;; This function calls:
 14715 ;;		Nothing
 14716 ;; This function is called by:
 14717 ;;		_DimmerLights_Main
 14718 ;;		_setDimmerLights_Main
 14719 ;;		_setDimmerLights_OnOff
 14720 ;;		_Flash_Memory_Main
 14721 ;;		_Exception_Main
 14722 ;;		_Load_Main
 14723 ;;		_setControl_Lights_Table
 14724 ;; This function uses a non-reentrant model
 14725 ;;
 14726                           
 14727                           
 14728                           ;psect for function _getMain_All_LightsStatus
 14729  1C24                     _getMain_All_LightsStatus:	
 14730                           
 14731                           ;Main_B1.c: 375: char status = 0;
 14732                           
 14733                           ;incstack = 0
 14734                           ; Regs used in _getMain_All_LightsStatus: [wreg+status,2+status,0]
 14735  1C24  01F2               	clrf	getMain_All_LightsStatus@status
 14736                           
 14737                           ;Main_B1.c: 394: status = DimmerLights1.Status == 1 ? 1 : 0;
 14738  1C25  3000               	movlw	0
 14739  1C26  0022               	movlb	2	; select bank2
 14740  1C27  185F               	btfsc	(_DimmerLights1^(0+256)+1),0
 14741  1C28  3001               	movlw	1
 14742  1C29  00F2               	movwf	getMain_All_LightsStatus@status
 14743                           
 14744                           ;Main_B1.c: 395: if (status == 0) {
 14745  1C2A  08F2               	movf	getMain_All_LightsStatus@status,f
 14746  1C2B  1D03               	skipz
 14747  1C2C  2C31               	goto	l6885
 14748                           
 14749                           ;Main_B1.c: 396: status = DimmerLights2.Status == 1 ? 1 : 0;
 14750  1C2D  3000               	movlw	0
 14751  1C2E  1867               	btfsc	(_DimmerLights2^(0+256)+1),0
 14752  1C2F  3001               	movlw	1
 14753  1C30  00F2               	movwf	getMain_All_LightsStatus@status
 14754  1C31                     l6885:	
 14755                           
 14756                           ;Main_B1.c: 397: }
 14757                           ;Main_B1.c: 421: return status;
 14758  1C31  0872               	movf	getMain_All_LightsStatus@status,w
 14759  1C32  0008               	return
 14760  1C33                     __end_of_getMain_All_LightsStatus:	
 14761                           
 14762                           	psect	text98
 14763  0971                     __ptext98:	
 14764 ;; *************** function _getDimmerLights_PercentToValue *****************
 14765 ;; Defined at:
 14766 ;;		line 1019 in file "../src/Dimmer_B1.c"
 14767 ;; Parameters:    Size  Location     Type
 14768 ;;  value           1    wreg     unsigned char 
 14769 ;; Auto vars:     Size  Location     Type
 14770 ;;  value           1   54[BANK0 ] unsigned char 
 14771 ;;  i               3   55[BANK0 ] float 
 14772 ;; Return value:  Size  Location     Type
 14773 ;;                  1    wreg      unsigned char 
 14774 ;; Registers used:
 14775 ;;		wreg, status,2, status,0, pclath, cstack
 14776 ;; Tracked objects:
 14777 ;;		On entry : 0/0
 14778 ;;		On exit  : 0/0
 14779 ;;		Unchanged: 0/0
 14780 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14781 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14782 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14783 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14784 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14785 ;;Total ram usage:        6 bytes
 14786 ;; Hardware stack levels used:    1
 14787 ;; Hardware stack levels required when called:    5
 14788 ;; This function calls:
 14789 ;;		___awtoft
 14790 ;;		___ftadd
 14791 ;;		___ftdiv
 14792 ;;		___ftmul
 14793 ;;		___ftneg
 14794 ;;		___fttol
 14795 ;; This function is called by:
 14796 ;;		_setDimmerLights_OnOff
 14797 ;;		_setRFSW_AdjControl
 14798 ;; This function uses a non-reentrant model
 14799 ;;
 14800                           
 14801                           
 14802                           ;psect for function _getDimmerLights_PercentToValue
 14803  0971                     _getDimmerLights_PercentToValue:	
 14804                           
 14805                           ;incstack = 0
 14806                           ; Regs used in _getDimmerLights_PercentToValue: [wreg+status,2+status,0+pclath+cstack]
 14807                           ;getDimmerLights_PercentToValue@value stored from wreg
 14808  0971  0020               	movlb	0	; select bank0
 14809  0972  00D6               	movwf	getDimmerLights_PercentToValue@value
 14810                           
 14811                           ;Dimmer_B1.c: 1027: float i = ((char)(65*0.8)) - ((char)(20*0.8));
 14812  0973  3000               	movlw	0
 14813  0974  00D7               	movwf	getDimmerLights_PercentToValue@i
 14814  0975  3010               	movlw	16
 14815  0976  00D8               	movwf	getDimmerLights_PercentToValue@i+1
 14816  0977  3042               	movlw	66
 14817  0978  00D9               	movwf	getDimmerLights_PercentToValue@i+2
 14818                           
 14819                           ;Dimmer_B1.c: 1028: i /= 100;
 14820  0979  3000               	movlw	0
 14821  097A  00A6               	movwf	___ftdiv@f2
 14822  097B  30C8               	movlw	200
 14823  097C  00A7               	movwf	___ftdiv@f2+1
 14824  097D  3042               	movlw	66
 14825  097E  00A8               	movwf	___ftdiv@f2+2
 14826  097F  0857               	movf	getDimmerLights_PercentToValue@i,w
 14827  0980  00A9               	movwf	___ftdiv@f1
 14828  0981  0858               	movf	getDimmerLights_PercentToValue@i+1,w
 14829  0982  00AA               	movwf	___ftdiv@f1+1
 14830  0983  0859               	movf	getDimmerLights_PercentToValue@i+2,w
 14831  0984  00AB               	movwf	___ftdiv@f1+2
 14832  0985  318D  253B  3189   	fcall	___ftdiv
 14833  0988  0020               	movlb	0	; select bank0
 14834  0989  0826               	movf	?___ftdiv,w
 14835  098A  00D7               	movwf	getDimmerLights_PercentToValue@i
 14836  098B  0827               	movf	?___ftdiv+1,w
 14837  098C  00D8               	movwf	getDimmerLights_PercentToValue@i+1
 14838  098D  0828               	movf	?___ftdiv+2,w
 14839  098E  00D9               	movwf	getDimmerLights_PercentToValue@i+2
 14840                           
 14841                           ;Dimmer_B1.c: 1030: return (char) (((char)(65*0.8)) - ((100 - value) * i));
 14842  098F  0856               	movf	getDimmerLights_PercentToValue@value,w
 14843  0990  00D4               	movwf	??_getDimmerLights_PercentToValue
 14844  0991  01D5               	clrf	??_getDimmerLights_PercentToValue+1
 14845  0992  09D4               	comf	??_getDimmerLights_PercentToValue,f
 14846  0993  09D5               	comf	??_getDimmerLights_PercentToValue+1,f
 14847  0994  0AD4               	incf	??_getDimmerLights_PercentToValue,f
 14848  0995  1903               	skipnz
 14849  0996  0AD5               	incf	??_getDimmerLights_PercentToValue+1,f
 14850  0997  0854               	movf	??_getDimmerLights_PercentToValue,w
 14851  0998  3E64               	addlw	100
 14852  0999  00A0               	movwf	___awtoft@c
 14853  099A  3000               	movlw	0
 14854  099B  3D55               	addwfc	??_getDimmerLights_PercentToValue+1,w
 14855  099C  00A1               	movwf	___awtoft@c+1
 14856  099D  319F  27DE  3189   	fcall	___awtoft
 14857  09A0  0020               	movlb	0	; select bank0
 14858  09A1  0820               	movf	?___awtoft,w
 14859  09A2  00A9               	movwf	___ftmul@f2
 14860  09A3  0821               	movf	?___awtoft+1,w
 14861  09A4  00AA               	movwf	___ftmul@f2+1
 14862  09A5  0822               	movf	?___awtoft+2,w
 14863  09A6  00AB               	movwf	___ftmul@f2+2
 14864  09A7  0857               	movf	getDimmerLights_PercentToValue@i,w
 14865  09A8  00A6               	movwf	___ftmul@f1
 14866  09A9  0858               	movf	getDimmerLights_PercentToValue@i+1,w
 14867  09AA  00A7               	movwf	___ftmul@f1+1
 14868  09AB  0859               	movf	getDimmerLights_PercentToValue@i+2,w
 14869  09AC  00A8               	movwf	___ftmul@f1+2
 14870  09AD  318E  2696  3189   	fcall	___ftmul
 14871  09B0  0020               	movlb	0	; select bank0
 14872  09B1  0826               	movf	?___ftmul,w
 14873  09B2  00B6               	movwf	___ftneg@f1
 14874  09B3  0827               	movf	?___ftmul+1,w
 14875  09B4  00B7               	movwf	___ftneg@f1+1
 14876  09B5  0828               	movf	?___ftmul+2,w
 14877  09B6  00B8               	movwf	___ftneg@f1+2
 14878  09B7  319B  232D  3189   	fcall	___ftneg
 14879  09BA  0020               	movlb	0	; select bank0
 14880  09BB  0836               	movf	?___ftneg,w
 14881  09BC  00BC               	movwf	___ftadd@f2
 14882  09BD  0837               	movf	?___ftneg+1,w
 14883  09BE  00BD               	movwf	___ftadd@f2+1
 14884  09BF  0838               	movf	?___ftneg+2,w
 14885  09C0  00BE               	movwf	___ftadd@f2+2
 14886  09C1  3000               	movlw	0
 14887  09C2  00B9               	movwf	___ftadd@f1
 14888  09C3  3050               	movlw	80
 14889  09C4  00BA               	movwf	___ftadd@f1+1
 14890  09C5  3042               	movlw	66
 14891  09C6  00BB               	movwf	___ftadd@f1+2
 14892  09C7  3183  235D  3189   	fcall	___ftadd
 14893  09CA  0020               	movlb	0	; select bank0
 14894  09CB  0839               	movf	?___ftadd,w
 14895  09CC  00C6               	movwf	___fttol@f1
 14896  09CD  083A               	movf	?___ftadd+1,w
 14897  09CE  00C7               	movwf	___fttol@f1+1
 14898  09CF  083B               	movf	?___ftadd+2,w
 14899  09D0  00C8               	movwf	___fttol@f1+2
 14900  09D1  318B  239B         	fcall	___fttol
 14901  09D3  0020               	movlb	0	; select bank0
 14902  09D4  0846               	movf	?___fttol,w
 14903  09D5  0008               	return
 14904  09D6                     __end_of_getDimmerLights_PercentToValue:	
 14905                           
 14906                           	psect	text99
 14907  0E96                     __ptext99:	
 14908 ;; *************** function ___ftmul *****************
 14909 ;; Defined at:
 14910 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftmul.c"
 14911 ;; Parameters:    Size  Location     Type
 14912 ;;  f1              3    6[BANK0 ] float 
 14913 ;;  f2              3    9[BANK0 ] float 
 14914 ;; Auto vars:     Size  Location     Type
 14915 ;;  f3_as_produc    3   17[BANK0 ] unsigned um
 14916 ;;  sign            1   21[BANK0 ] unsigned char 
 14917 ;;  cntr            1   20[BANK0 ] unsigned char 
 14918 ;;  exp             1   16[BANK0 ] unsigned char 
 14919 ;; Return value:  Size  Location     Type
 14920 ;;                  3    6[BANK0 ] float 
 14921 ;; Registers used:
 14922 ;;		wreg, status,2, status,0, pclath, cstack
 14923 ;; Tracked objects:
 14924 ;;		On entry : 0/0
 14925 ;;		On exit  : 0/0
 14926 ;;		Unchanged: 0/0
 14927 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14928 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14929 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14930 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14931 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14932 ;;Total ram usage:       16 bytes
 14933 ;; Hardware stack levels used:    1
 14934 ;; Hardware stack levels required when called:    4
 14935 ;; This function calls:
 14936 ;;		___ftpack
 14937 ;; This function is called by:
 14938 ;;		_getDimmerLights_PercentToValue
 14939 ;; This function uses a non-reentrant model
 14940 ;;
 14941                           
 14942                           
 14943                           ;psect for function ___ftmul
 14944  0E96                     ___ftmul:	
 14945                           
 14946                           ;incstack = 0
 14947                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
 14948  0E96  0020               	movlb	0	; select bank0
 14949  0E97  0826               	movf	___ftmul@f1,w
 14950  0E98  00AC               	movwf	??___ftmul
 14951  0E99  0827               	movf	___ftmul@f1+1,w
 14952  0E9A  00AD               	movwf	??___ftmul+1
 14953  0E9B  0828               	movf	___ftmul@f1+2,w
 14954  0E9C  00AE               	movwf	??___ftmul+2
 14955  0E9D  1003               	clrc
 14956  0E9E  0D2D               	rlf	??___ftmul+1,w
 14957  0E9F  0D2E               	rlf	??___ftmul+2,w
 14958  0EA0  00AF               	movwf	??___ftmul+3
 14959  0EA1  082F               	movf	??___ftmul+3,w
 14960  0EA2  00B0               	movwf	___ftmul@exp
 14961  0EA3  08B0               	movf	___ftmul@exp,f
 14962  0EA4  1D03               	skipz
 14963  0EA5  2EAD               	goto	l6503
 14964  0EA6  3000               	movlw	0
 14965  0EA7  00A6               	movwf	?___ftmul
 14966  0EA8  3000               	movlw	0
 14967  0EA9  00A7               	movwf	?___ftmul+1
 14968  0EAA  3000               	movlw	0
 14969  0EAB  00A8               	movwf	?___ftmul+2
 14970  0EAC  0008               	return
 14971  0EAD                     l6503:	
 14972  0EAD  0829               	movf	___ftmul@f2,w
 14973  0EAE  00AC               	movwf	??___ftmul
 14974  0EAF  082A               	movf	___ftmul@f2+1,w
 14975  0EB0  00AD               	movwf	??___ftmul+1
 14976  0EB1  082B               	movf	___ftmul@f2+2,w
 14977  0EB2  00AE               	movwf	??___ftmul+2
 14978  0EB3  1003               	clrc
 14979  0EB4  0D2D               	rlf	??___ftmul+1,w
 14980  0EB5  0D2E               	rlf	??___ftmul+2,w
 14981  0EB6  00AF               	movwf	??___ftmul+3
 14982  0EB7  082F               	movf	??___ftmul+3,w
 14983  0EB8  00B5               	movwf	___ftmul@sign
 14984  0EB9  08B5               	movf	___ftmul@sign,f
 14985  0EBA  1D03               	skipz
 14986  0EBB  2EC3               	goto	l6509
 14987  0EBC  3000               	movlw	0
 14988  0EBD  00A6               	movwf	?___ftmul
 14989  0EBE  3000               	movlw	0
 14990  0EBF  00A7               	movwf	?___ftmul+1
 14991  0EC0  3000               	movlw	0
 14992  0EC1  00A8               	movwf	?___ftmul+2
 14993  0EC2  0008               	return
 14994  0EC3                     l6509:	
 14995  0EC3  0835               	movf	___ftmul@sign,w
 14996  0EC4  3E7B               	addlw	123
 14997  0EC5  00AC               	movwf	??___ftmul
 14998  0EC6  082C               	movf	??___ftmul,w
 14999  0EC7  07B0               	addwf	___ftmul@exp,f
 15000  0EC8  0826               	movf	___ftmul@f1,w
 15001  0EC9  00AC               	movwf	??___ftmul
 15002  0ECA  0827               	movf	___ftmul@f1+1,w
 15003  0ECB  00AD               	movwf	??___ftmul+1
 15004  0ECC  0828               	movf	___ftmul@f1+2,w
 15005  0ECD  00AE               	movwf	??___ftmul+2
 15006  0ECE  3010               	movlw	16
 15007  0ECF                     u5685:	
 15008  0ECF  36AE               	lsrf	??___ftmul+2,f
 15009  0ED0  0CAD               	rrf	??___ftmul+1,f
 15010  0ED1  0CAC               	rrf	??___ftmul,f
 15011  0ED2  0B89               	decfsz	9,f
 15012  0ED3  2ECF               	goto	u5685
 15013  0ED4  082C               	movf	??___ftmul,w
 15014  0ED5  00AF               	movwf	??___ftmul+3
 15015  0ED6  082F               	movf	??___ftmul+3,w
 15016  0ED7  00B5               	movwf	___ftmul@sign
 15017  0ED8  0829               	movf	___ftmul@f2,w
 15018  0ED9  00AC               	movwf	??___ftmul
 15019  0EDA  082A               	movf	___ftmul@f2+1,w
 15020  0EDB  00AD               	movwf	??___ftmul+1
 15021  0EDC  082B               	movf	___ftmul@f2+2,w
 15022  0EDD  00AE               	movwf	??___ftmul+2
 15023  0EDE  3010               	movlw	16
 15024  0EDF                     u5695:	
 15025  0EDF  36AE               	lsrf	??___ftmul+2,f
 15026  0EE0  0CAD               	rrf	??___ftmul+1,f
 15027  0EE1  0CAC               	rrf	??___ftmul,f
 15028  0EE2  0B89               	decfsz	9,f
 15029  0EE3  2EDF               	goto	u5695
 15030  0EE4  082C               	movf	??___ftmul,w
 15031  0EE5  00AF               	movwf	??___ftmul+3
 15032  0EE6  082F               	movf	??___ftmul+3,w
 15033  0EE7  06B5               	xorwf	___ftmul@sign,f
 15034  0EE8  3080               	movlw	128
 15035  0EE9  00AC               	movwf	??___ftmul
 15036  0EEA  082C               	movf	??___ftmul,w
 15037  0EEB  05B5               	andwf	___ftmul@sign,f
 15038  0EEC  17A7               	bsf	___ftmul@f1+1,7
 15039  0EED  17AA               	bsf	___ftmul@f2+1,7
 15040  0EEE  30FF               	movlw	255
 15041  0EEF  05A9               	andwf	___ftmul@f2,f
 15042  0EF0  30FF               	movlw	255
 15043  0EF1  05AA               	andwf	___ftmul@f2+1,f
 15044  0EF2  3000               	movlw	0
 15045  0EF3  05AB               	andwf	___ftmul@f2+2,f
 15046  0EF4  3000               	movlw	0
 15047  0EF5  00B1               	movwf	___ftmul@f3_as_product
 15048  0EF6  3000               	movlw	0
 15049  0EF7  00B2               	movwf	___ftmul@f3_as_product+1
 15050  0EF8  3000               	movlw	0
 15051  0EF9  00B3               	movwf	___ftmul@f3_as_product+2
 15052  0EFA  3007               	movlw	7
 15053  0EFB  00AC               	movwf	??___ftmul
 15054  0EFC  082C               	movf	??___ftmul,w
 15055  0EFD  00B4               	movwf	___ftmul@cntr
 15056  0EFE                     l6521:	
 15057  0EFE  1C26               	btfss	___ftmul@f1,0
 15058  0EFF  2F06               	goto	l6525
 15059  0F00  0829               	movf	___ftmul@f2,w
 15060  0F01  07B1               	addwf	___ftmul@f3_as_product,f
 15061  0F02  082A               	movf	___ftmul@f2+1,w
 15062  0F03  3DB2               	addwfc	___ftmul@f3_as_product+1,f
 15063  0F04  082B               	movf	___ftmul@f2+2,w
 15064  0F05  3DB3               	addwfc	___ftmul@f3_as_product+2,f
 15065  0F06                     l6525:	
 15066  0F06  3001               	movlw	1
 15067  0F07                     u5715:	
 15068  0F07  36A8               	lsrf	___ftmul@f1+2,f
 15069  0F08  0CA7               	rrf	___ftmul@f1+1,f
 15070  0F09  0CA6               	rrf	___ftmul@f1,f
 15071  0F0A  0B89               	decfsz	9,f
 15072  0F0B  2F07               	goto	u5715
 15073  0F0C  3001               	movlw	1
 15074  0F0D                     u5725:	
 15075  0F0D  35A9               	lslf	___ftmul@f2,f
 15076  0F0E  0DAA               	rlf	___ftmul@f2+1,f
 15077  0F0F  0DAB               	rlf	___ftmul@f2+2,f
 15078  0F10  0B89               	decfsz	9,f
 15079  0F11  2F0D               	goto	u5725
 15080  0F12  3001               	movlw	1
 15081  0F13  02B4               	subwf	___ftmul@cntr,f
 15082  0F14  1D03               	btfss	3,2
 15083  0F15  2EFE               	goto	l6521
 15084  0F16  3009               	movlw	9
 15085  0F17  00AC               	movwf	??___ftmul
 15086  0F18  082C               	movf	??___ftmul,w
 15087  0F19  00B4               	movwf	___ftmul@cntr
 15088  0F1A                     l6533:	
 15089  0F1A  1C26               	btfss	___ftmul@f1,0
 15090  0F1B  2F22               	goto	l6537
 15091  0F1C  0829               	movf	___ftmul@f2,w
 15092  0F1D  07B1               	addwf	___ftmul@f3_as_product,f
 15093  0F1E  082A               	movf	___ftmul@f2+1,w
 15094  0F1F  3DB2               	addwfc	___ftmul@f3_as_product+1,f
 15095  0F20  082B               	movf	___ftmul@f2+2,w
 15096  0F21  3DB3               	addwfc	___ftmul@f3_as_product+2,f
 15097  0F22                     l6537:	
 15098  0F22  3001               	movlw	1
 15099  0F23                     u5755:	
 15100  0F23  36A8               	lsrf	___ftmul@f1+2,f
 15101  0F24  0CA7               	rrf	___ftmul@f1+1,f
 15102  0F25  0CA6               	rrf	___ftmul@f1,f
 15103  0F26  0B89               	decfsz	9,f
 15104  0F27  2F23               	goto	u5755
 15105  0F28  3001               	movlw	1
 15106  0F29                     u5765:	
 15107  0F29  36B3               	lsrf	___ftmul@f3_as_product+2,f
 15108  0F2A  0CB2               	rrf	___ftmul@f3_as_product+1,f
 15109  0F2B  0CB1               	rrf	___ftmul@f3_as_product,f
 15110  0F2C  0B89               	decfsz	9,f
 15111  0F2D  2F29               	goto	u5765
 15112  0F2E  3001               	movlw	1
 15113  0F2F  02B4               	subwf	___ftmul@cntr,f
 15114  0F30  1D03               	btfss	3,2
 15115  0F31  2F1A               	goto	l6533
 15116  0F32  0831               	movf	___ftmul@f3_as_product,w
 15117  0F33  00F2               	movwf	___ftpack@arg
 15118  0F34  0832               	movf	___ftmul@f3_as_product+1,w
 15119  0F35  00F3               	movwf	___ftpack@arg+1
 15120  0F36  0833               	movf	___ftmul@f3_as_product+2,w
 15121  0F37  00F4               	movwf	___ftpack@arg+2
 15122  0F38  0830               	movf	___ftmul@exp,w
 15123  0F39  00AC               	movwf	??___ftmul
 15124  0F3A  082C               	movf	??___ftmul,w
 15125  0F3B  00F5               	movwf	___ftpack@exp
 15126  0F3C  0835               	movf	___ftmul@sign,w
 15127  0F3D  00AD               	movwf	??___ftmul+1
 15128  0F3E  082D               	movf	??___ftmul+1,w
 15129  0F3F  00F6               	movwf	___ftpack@sign
 15130  0F40  3197  27A0         	fcall	___ftpack
 15131  0F42  0872               	movf	?___ftpack,w
 15132  0F43  0020               	movlb	0	; select bank0
 15133  0F44  00A6               	movwf	?___ftmul
 15134  0F45  0873               	movf	?___ftpack+1,w
 15135  0F46  00A7               	movwf	?___ftmul+1
 15136  0F47  0874               	movf	?___ftpack+2,w
 15137  0F48  00A8               	movwf	?___ftmul+2
 15138  0F49  0008               	return
 15139  0F4A                     __end_of___ftmul:	
 15140                           
 15141                           	psect	text100
 15142  1C15                     __ptext100:	
 15143 ;; *************** function _getDelayOff_GO *****************
 15144 ;; Defined at:
 15145 ;;		line 114 in file "../src/DelayOff_B1.c"
 15146 ;; Parameters:    Size  Location     Type
 15147 ;;  sw              1    wreg     unsigned char 
 15148 ;; Auto vars:     Size  Location     Type
 15149 ;;  sw              1    4[COMMON] unsigned char 
 15150 ;;  go              1    5[COMMON] unsigned char 
 15151 ;; Return value:  Size  Location     Type
 15152 ;;                  1    wreg      unsigned char 
 15153 ;; Registers used:
 15154 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15155 ;; Tracked objects:
 15156 ;;		On entry : 0/0
 15157 ;;		On exit  : 0/0
 15158 ;;		Unchanged: 0/0
 15159 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15160 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15161 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15162 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15163 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15164 ;;Total ram usage:        2 bytes
 15165 ;; Hardware stack levels used:    1
 15166 ;; Hardware stack levels required when called:    4
 15167 ;; This function calls:
 15168 ;;		_DelayOffPointSelect
 15169 ;; This function is called by:
 15170 ;;		_setDimmerLights_OnOff
 15171 ;; This function uses a non-reentrant model
 15172 ;;
 15173                           
 15174                           
 15175                           ;psect for function _getDelayOff_GO
 15176  1C15                     _getDelayOff_GO:	
 15177                           
 15178                           ;incstack = 0
 15179                           ; Regs used in _getDelayOff_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15180                           ;getDelayOff_GO@sw stored from wreg
 15181  1C15  00F4               	movwf	getDelayOff_GO@sw
 15182                           
 15183                           ;DelayOff_B1.c: 115: DelayOffPointSelect(sw);
 15184  1C16  0874               	movf	getDelayOff_GO@sw,w
 15185  1C17  319D  253D         	fcall	_DelayOffPointSelect
 15186                           
 15187                           ;DelayOff_B1.c: 116: char go = DelayOff->GO == 1 ? 1 : 0;
 15188  1C19  0021               	movlb	1	; select bank1
 15189  1C1A  0844               	movf	_DelayOff^(0+128),w
 15190  1C1B  0086               	movwf	6
 15191  1C1C  3001               	movlw	1	; select bank2/3
 15192  1C1D  0087               	movwf	7
 15193  1C1E  3000               	movlw	0
 15194  1C1F  1881               	btfsc	1,1
 15195  1C20  3001               	movlw	1
 15196  1C21  00F5               	movwf	getDelayOff_GO@go
 15197                           
 15198                           ;DelayOff_B1.c: 117: return go;
 15199  1C22  0875               	movf	getDelayOff_GO@go,w
 15200  1C23  0008               	return
 15201  1C24                     __end_of_getDelayOff_GO:	
 15202                           
 15203                           	psect	text101
 15204  1C70                     __ptext101:	
 15205 ;; *************** function _getCmd_Status *****************
 15206 ;; Defined at:
 15207 ;;		line 605 in file "../src/Main_B1.c"
 15208 ;; Parameters:    Size  Location     Type
 15209 ;;  number          1    wreg     unsigned char 
 15210 ;; Auto vars:     Size  Location     Type
 15211 ;;  number          1    2[COMMON] unsigned char 
 15212 ;;  cmd             1    3[COMMON] unsigned char 
 15213 ;; Return value:  Size  Location     Type
 15214 ;;                  1    wreg      unsigned char 
 15215 ;; Registers used:
 15216 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 15217 ;; Tracked objects:
 15218 ;;		On entry : 0/0
 15219 ;;		On exit  : 0/0
 15220 ;;		Unchanged: 0/0
 15221 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15222 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15223 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15224 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15225 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15226 ;;Total ram usage:        2 bytes
 15227 ;; Hardware stack levels used:    1
 15228 ;; Hardware stack levels required when called:    3
 15229 ;; This function calls:
 15230 ;;		Nothing
 15231 ;; This function is called by:
 15232 ;;		_setDimmerLights_OnOff
 15233 ;; This function uses a non-reentrant model
 15234 ;;
 15235                           
 15236                           
 15237                           ;psect for function _getCmd_Status
 15238  1C70                     _getCmd_Status:	
 15239                           
 15240                           ;incstack = 0
 15241                           ; Regs used in _getCmd_Status: [wreg-fsr0h+status,2+status,0]
 15242                           ;getCmd_Status@number stored from wreg
 15243  1C70  00F2               	movwf	getCmd_Status@number
 15244                           
 15245                           ;Main_B1.c: 606: char cmd = 0;
 15246  1C71  01F3               	clrf	getCmd_Status@cmd
 15247                           
 15248                           ;Main_B1.c: 607: switch (number) {
 15249  1C72  2C79               	goto	l7195
 15250  1C73                     l7191:	
 15251                           ;Main_B1.c: 608: case 1:
 15252                           
 15253                           
 15254                           ;Main_B1.c: 609: cmd = Cmd.all_off == 1 ? 1 : 0;
 15255  1C73  3000               	movlw	0
 15256  1C74  0021               	movlb	1	; select bank1
 15257  1C75  1843               	btfsc	_Cmd^(0+128),0
 15258  1C76  3001               	movlw	1
 15259  1C77  00F3               	movwf	getCmd_Status@cmd
 15260                           
 15261                           ;Main_B1.c: 611: }
 15262                           
 15263                           ;Main_B1.c: 610: break;
 15264  1C78  2C7E               	goto	l7197
 15265  1C79                     l7195:	
 15266  1C79  0872               	movf	getCmd_Status@number,w
 15267                           
 15268                           ; Switch size 1, requested type "space"
 15269                           ; Number of cases is 1, Range of values is 1 to 1
 15270                           ; switch strategies available:
 15271                           ; Name         Instructions Cycles
 15272                           ; simple_byte            4     3 (average)
 15273                           ; direct_byte           11     9 (fixed)
 15274                           ; jumptable            263     9 (fixed)
 15275                           ;	Chosen strategy is simple_byte
 15276  1C7A  3A01               	xorlw	1	; case 1
 15277  1C7B  1903               	skipnz
 15278  1C7C  2C73               	goto	l7191
 15279  1C7D  2C7E               	goto	l7197
 15280  1C7E                     l7197:	
 15281                           
 15282                           ;Main_B1.c: 612: return cmd;
 15283  1C7E  0873               	movf	getCmd_Status@cmd,w
 15284  1C7F  0008               	return
 15285  1C80                     __end_of_getCmd_Status:	
 15286                           
 15287                           	psect	text102
 15288  1491                     __ptext102:	
 15289 ;; *************** function _setDimmerLights_Dimming *****************
 15290 ;; Defined at:
 15291 ;;		line 864 in file "../src/Dimmer_B1.c"
 15292 ;; Parameters:    Size  Location     Type
 15293 ;;  lights          1    wreg     unsigned char 
 15294 ;;  status          1   66[BANK0 ] unsigned char 
 15295 ;; Auto vars:     Size  Location     Type
 15296 ;;  lights          1   68[BANK0 ] unsigned char 
 15297 ;; Return value:  Size  Location     Type
 15298 ;;		None               void
 15299 ;; Registers used:
 15300 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15301 ;; Tracked objects:
 15302 ;;		On entry : 0/0
 15303 ;;		On exit  : 0/0
 15304 ;;		Unchanged: 0/0
 15305 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15306 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15307 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15308 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15309 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15310 ;;Total ram usage:        3 bytes
 15311 ;; Hardware stack levels used:    1
 15312 ;; Hardware stack levels required when called:    6
 15313 ;; This function calls:
 15314 ;;		_getDimmerIntr_DimmingValue
 15315 ;;		_getDimmerLights_ValueToPercent
 15316 ;;		_setBuz
 15317 ;;		_setDimmerIntr_Dimming_Sw
 15318 ;;		_setDimmerIntr_MaxmumValue
 15319 ;;		_setDimmerLights_Line
 15320 ;;		_setProductData
 15321 ;;		_setRF_DimmerLights
 15322 ;;		_setRF_TransceiveGO
 15323 ;;		_setTxData
 15324 ;; This function is called by:
 15325 ;;		_setDimmerLights_Main
 15326 ;; This function uses a non-reentrant model
 15327 ;;
 15328                           
 15329                           
 15330                           ;psect for function _setDimmerLights_Dimming
 15331  1491                     _setDimmerLights_Dimming:	
 15332                           
 15333                           ;incstack = 0
 15334                           ; Regs used in _setDimmerLights_Dimming: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 15335                           ;setDimmerLights_Dimming@lights stored from wreg
 15336  1491  0020               	movlb	0	; select bank0
 15337  1492  00E4               	movwf	setDimmerLights_Dimming@lights
 15338                           
 15339                           ;Dimmer_B1.c: 865: if (status == 1) {
 15340  1493  0862               	movf	setDimmerLights_Dimming@status,w
 15341  1494  3A01               	xorlw	1
 15342  1495  1D03               	skipz
 15343  1496  2CAA               	goto	l9601
 15344                           
 15345                           ;Dimmer_B1.c: 866: setDimmerIntr_Dimming_Sw(lights, 1);
 15346  1497  01F2               	clrf	setDimmerIntr_Dimming_Sw@command
 15347  1498  0AF2               	incf	setDimmerIntr_Dimming_Sw@command,f
 15348  1499  0864               	movf	setDimmerLights_Dimming@lights,w
 15349  149A  3190  20BE  3194   	fcall	_setDimmerIntr_Dimming_Sw
 15350                           
 15351                           ;Dimmer_B1.c: 869: setRF_TransceiveGO(0);
 15352  149D  3000               	movlw	0
 15353  149E  319C  2460  3194   	fcall	_setRF_TransceiveGO
 15354                           
 15355                           ;Dimmer_B1.c: 871: setBuz(1, 100);
 15356  14A1  3064               	movlw	100
 15357  14A2  0020               	movlb	0	; select bank0
 15358  14A3  00A4               	movwf	setBuz@time
 15359  14A4  3000               	movlw	0
 15360  14A5  00A5               	movwf	setBuz@time+1
 15361  14A6  3001               	movlw	1
 15362  14A7  3195  2586         	fcall	_setBuz
 15363                           
 15364                           ;Dimmer_B1.c: 872: } else if (status == 0) {
 15365  14A9  0008               	return
 15366  14AA                     l9601:	
 15367  14AA  0020               	movlb	0	; select bank0
 15368  14AB  08E2               	movf	setDimmerLights_Dimming@status,f
 15369  14AC  1D03               	skipz
 15370  14AD  0008               	return
 15371                           
 15372                           ;Dimmer_B1.c: 873: setDimmerIntr_Dimming_Sw(lights, 0);
 15373  14AE  01F2               	clrf	setDimmerIntr_Dimming_Sw@command
 15374  14AF  0864               	movf	setDimmerLights_Dimming@lights,w
 15375  14B0  3190  20BE  3194   	fcall	_setDimmerIntr_Dimming_Sw
 15376                           
 15377                           ;Dimmer_B1.c: 876: Dimmer.Load_Status = 0;
 15378  14B3  0021               	movlb	1	; select bank1
 15379  14B4  113A               	bcf	_Dimmer^(0+128),2
 15380                           
 15381                           ;Dimmer_B1.c: 877: setDimmerLights_Line(lights);
 15382  14B5  0020               	movlb	0	; select bank0
 15383  14B6  0864               	movf	setDimmerLights_Dimming@lights,w
 15384  14B7  319D  25FD  3194   	fcall	_setDimmerLights_Line
 15385                           
 15386                           ;Dimmer_B1.c: 880: setDimmerIntr_MaxmumValue(lights, getDimmerIntr_DimmingValue(lights))
      +                          ;
 15387  14BA  0020               	movlb	0	; select bank0
 15388  14BB  0864               	movf	setDimmerLights_Dimming@lights,w
 15389  14BC  319D  2515  3194   	fcall	_getDimmerIntr_DimmingValue
 15390  14BF  0020               	movlb	0	; select bank0
 15391  14C0  00E3               	movwf	??_setDimmerLights_Dimming
 15392  14C1  0863               	movf	??_setDimmerLights_Dimming,w
 15393  14C2  00DA               	movwf	setDimmerIntr_MaxmumValue@value
 15394  14C3  0864               	movf	setDimmerLights_Dimming@lights,w
 15395  14C4  319D  25E6  3194   	fcall	_setDimmerIntr_MaxmumValue
 15396                           
 15397                           ;Dimmer_B1.c: 881: setProductData((20 + lights), getDimmerLights_ValueToPercent(getDimme
      +                          rIntr_DimmingValue(lights)));
 15398  14C7  0020               	movlb	0	; select bank0
 15399  14C8  0864               	movf	setDimmerLights_Dimming@lights,w
 15400  14C9  319D  2515  3194   	fcall	_getDimmerIntr_DimmingValue
 15401  14CC  3189  210C  3194   	fcall	_getDimmerLights_ValueToPercent
 15402  14CF  0020               	movlb	0	; select bank0
 15403  14D0  00E3               	movwf	??_setDimmerLights_Dimming
 15404  14D1  0863               	movf	??_setDimmerLights_Dimming,w
 15405  14D2  00DA               	movwf	setProductData@value
 15406  14D3  0864               	movf	setDimmerLights_Dimming@lights,w
 15407  14D4  3E14               	addlw	20
 15408  14D5  319B  2394  3194   	fcall	_setProductData
 15409                           
 15410                           ;Dimmer_B1.c: 891: setRF_DimmerLights(lights, 1);
 15411  14D8  0020               	movlb	0	; select bank0
 15412  14D9  01DD               	clrf	setRF_DimmerLights@on
 15413  14DA  0ADD               	incf	setRF_DimmerLights@on,f
 15414  14DB  0864               	movf	setDimmerLights_Dimming@lights,w
 15415  14DC  3196  26E2  3194   	fcall	_setRF_DimmerLights
 15416                           
 15417                           ;Dimmer_B1.c: 892: setTxData();
 15418  14DF  318F  274A         	fcall	_setTxData
 15419  14E1  0008               	return
 15420  14E2                     __end_of_setDimmerLights_Dimming:	
 15421                           
 15422                           	psect	text103
 15423  0F4A                     __ptext103:	
 15424 ;; *************** function _setTxData *****************
 15425 ;; Defined at:
 15426 ;;		line 183 in file "../src/RF_Control_B1.c"
 15427 ;; Parameters:    Size  Location     Type
 15428 ;;		None
 15429 ;; Auto vars:     Size  Location     Type
 15430 ;;  i               1    0        unsigned char 
 15431 ;; Return value:  Size  Location     Type
 15432 ;;		None               void
 15433 ;; Registers used:
 15434 ;;		wreg, fsr1l, fsr1h, status,2
 15435 ;; Tracked objects:
 15436 ;;		On entry : 0/0
 15437 ;;		On exit  : 0/0
 15438 ;;		Unchanged: 0/0
 15439 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15440 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15441 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15442 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15443 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15444 ;;Total ram usage:        1 bytes
 15445 ;; Hardware stack levels used:    1
 15446 ;; Hardware stack levels required when called:    3
 15447 ;; This function calls:
 15448 ;;		Nothing
 15449 ;; This function is called by:
 15450 ;;		_setDimmerLights_OnOff
 15451 ;;		_setDimmerLights_Dimming
 15452 ;;		_getRxData
 15453 ;;		_setControl_Lights_Table
 15454 ;;		_setRFSW_Control
 15455 ;;		_setRFSW_AdjControl
 15456 ;; This function uses a non-reentrant model
 15457 ;;
 15458                           
 15459                           
 15460                           ;psect for function _setTxData
 15461  0F4A                     _setTxData:	
 15462                           
 15463                           ;RF_Control_B1.c: 184: char i;
 15464                           ;RF_Control_B1.c: 185: if (RF1.Enable == 1) {
 15465                           
 15466                           ;incstack = 0
 15467                           ; Regs used in _setTxData: [wreg+fsr1l+fsr1h+status,2]
 15468  0F4A  0021               	movlb	1	; select bank1
 15469  0F4B  1C20               	btfss	_RF1^(0+128),0
 15470  0F4C  0008               	return
 15471                           
 15472                           ;RF_Control_B1.c: 187: RF1.TransceiveGO = 1;
 15473  0F4D  1520               	bsf	_RF1^(0+128),2
 15474                           
 15475                           ;RF_Control_B1.c: 188: RF1.Count = 0;
 15476  0F4E  01A2               	clrf	(_RF1^(0+128)+2)
 15477  0F4F  01A3               	clrf	((_RF1+1)^(0+128)+2)
 15478                           
 15479                           ;RF_Control_B1.c: 200: RF_Data[0] = 0x63;
 15480  0F50  3063               	movlw	99
 15481  0F51  00F2               	movwf	??_setTxData
 15482  0F52  0872               	movf	??_setTxData,w
 15483  0F53  0023               	movlb	3	; select bank3
 15484  0F54  00A0               	movwf	_RF_Data^(0+384)
 15485                           
 15486                           ;RF_Control_B1.c: 201: RF_Data[1] = 0x02;
 15487  0F55  3002               	movlw	2
 15488  0F56  00F2               	movwf	??_setTxData
 15489  0F57  0872               	movf	??_setTxData,w
 15490  0F58  00A1               	movwf	(_RF_Data^(0+384)+1)
 15491                           
 15492                           ;RF_Control_B1.c: 203: RF_Data[2] = product->Data[2];
 15493  0F59  0020               	movlb	0	; select bank0
 15494  0F5A  086C               	movf	_product,w
 15495  0F5B  0086               	movwf	6
 15496  0F5C  3002               	movlw	2	; select bank4/5
 15497  0F5D  0087               	movwf	7
 15498  0F5E  3002               	movlw	2	; select bank4/5
 15499  0F5F  3F42               	moviw [2]fsr1
 15500  0F60  0023               	movlb	3	; select bank3
 15501  0F61  00A2               	movwf	(_RF_Data^(0+384)+2)
 15502                           
 15503                           ;RF_Control_B1.c: 204: RF_Data[3] = product->Data[3];
 15504  0F62  0020               	movlb	0	; select bank0
 15505  0F63  086C               	movf	_product,w
 15506  0F64  0086               	movwf	6
 15507  0F65  3002               	movlw	2	; select bank4/5
 15508  0F66  0087               	movwf	7
 15509  0F67  3002               	movlw	2	; select bank4/5
 15510  0F68  3F43               	moviw [3]fsr1
 15511  0F69  0023               	movlb	3	; select bank3
 15512  0F6A  00A3               	movwf	(_RF_Data^(0+384)+3)
 15513                           
 15514                           ;RF_Control_B1.c: 205: RF_Data[4] = product->Data[4];
 15515  0F6B  0020               	movlb	0	; select bank0
 15516  0F6C  086C               	movf	_product,w
 15517  0F6D  0086               	movwf	6
 15518  0F6E  3002               	movlw	2	; select bank4/5
 15519  0F6F  0087               	movwf	7
 15520  0F70  3002               	movlw	2	; select bank4/5
 15521  0F71  3F44               	moviw [4]fsr1
 15522  0F72  0023               	movlb	3	; select bank3
 15523  0F73  00A4               	movwf	(_RF_Data^(0+384)+4)
 15524                           
 15525                           ;RF_Control_B1.c: 206: RF_Data[5] = product->Data[5];
 15526  0F74  0020               	movlb	0	; select bank0
 15527  0F75  086C               	movf	_product,w
 15528  0F76  0086               	movwf	6
 15529  0F77  3002               	movlw	2	; select bank4/5
 15530  0F78  0087               	movwf	7
 15531  0F79  3002               	movlw	2	; select bank4/5
 15532  0F7A  3F45               	moviw [5]fsr1
 15533  0F7B  0023               	movlb	3	; select bank3
 15534  0F7C  00A5               	movwf	(_RF_Data^(0+384)+5)
 15535                           
 15536                           ;RF_Control_B1.c: 207: RF_Data[6] = product->Data[6];
 15537  0F7D  0020               	movlb	0	; select bank0
 15538  0F7E  086C               	movf	_product,w
 15539  0F7F  0086               	movwf	6
 15540  0F80  3002               	movlw	2	; select bank4/5
 15541  0F81  0087               	movwf	7
 15542  0F82  3002               	movlw	2	; select bank4/5
 15543  0F83  3F46               	moviw [6]fsr1
 15544  0F84  0023               	movlb	3	; select bank3
 15545  0F85  00A6               	movwf	(_RF_Data^(0+384)+6)
 15546                           
 15547                           ;RF_Control_B1.c: 208: RF_Data[7] = product->Data[7];
 15548  0F86  0020               	movlb	0	; select bank0
 15549  0F87  086C               	movf	_product,w
 15550  0F88  0086               	movwf	6
 15551  0F89  3002               	movlw	2	; select bank4/5
 15552  0F8A  0087               	movwf	7
 15553  0F8B  3002               	movlw	2	; select bank4/5
 15554  0F8C  3F47               	moviw [7]fsr1
 15555  0F8D  0023               	movlb	3	; select bank3
 15556  0F8E  00A7               	movwf	(_RF_Data^(0+384)+7)
 15557                           
 15558                           ;RF_Control_B1.c: 209: RF_Data[8] = product->Data[8];
 15559  0F8F  0020               	movlb	0	; select bank0
 15560  0F90  086C               	movf	_product,w
 15561  0F91  0086               	movwf	6
 15562  0F92  3002               	movlw	2	; select bank4/5
 15563  0F93  0087               	movwf	7
 15564  0F94  3002               	movlw	2	; select bank4/5
 15565  0F95  3F48               	moviw [8]fsr1
 15566  0F96  0023               	movlb	3	; select bank3
 15567  0F97  00A8               	movwf	(_RF_Data^(0+384)+8)
 15568                           
 15569                           ;RF_Control_B1.c: 210: RF_Data[9] = product->Data[9];
 15570  0F98  0020               	movlb	0	; select bank0
 15571  0F99  086C               	movf	_product,w
 15572  0F9A  0086               	movwf	6
 15573  0F9B  3002               	movlw	2	; select bank4/5
 15574  0F9C  0087               	movwf	7
 15575  0F9D  3002               	movlw	2	; select bank4/5
 15576  0F9E  3F49               	moviw [9]fsr1
 15577  0F9F  0023               	movlb	3	; select bank3
 15578  0FA0  00A9               	movwf	(_RF_Data^(0+384)+9)
 15579                           
 15580                           ;RF_Control_B1.c: 211: RF_Data[10] = product->Data[10];
 15581  0FA1  0020               	movlb	0	; select bank0
 15582  0FA2  086C               	movf	_product,w
 15583  0FA3  0086               	movwf	6
 15584  0FA4  3002               	movlw	2	; select bank4/5
 15585  0FA5  0087               	movwf	7
 15586  0FA6  3002               	movlw	2	; select bank4/5
 15587  0FA7  3F4A               	moviw [10]fsr1
 15588  0FA8  0023               	movlb	3	; select bank3
 15589  0FA9  00AA               	movwf	(_RF_Data^(0+384)+10)
 15590                           
 15591                           ;RF_Control_B1.c: 212: RF_Data[11] = product->Data[11];
 15592  0FAA  0020               	movlb	0	; select bank0
 15593  0FAB  086C               	movf	_product,w
 15594  0FAC  0086               	movwf	6
 15595  0FAD  3002               	movlw	2	; select bank4/5
 15596  0FAE  0087               	movwf	7
 15597  0FAF  3002               	movlw	2	; select bank4/5
 15598  0FB0  3F4B               	moviw [11]fsr1
 15599  0FB1  0023               	movlb	3	; select bank3
 15600  0FB2  00AB               	movwf	(_RF_Data^(0+384)+11)
 15601                           
 15602                           ;RF_Control_B1.c: 213: RF_Data[12] = product->Data[12];
 15603  0FB3  0020               	movlb	0	; select bank0
 15604  0FB4  086C               	movf	_product,w
 15605  0FB5  0086               	movwf	6
 15606  0FB6  3002               	movlw	2	; select bank4/5
 15607  0FB7  0087               	movwf	7
 15608  0FB8  3002               	movlw	2	; select bank4/5
 15609  0FB9  3F4C               	moviw [12]fsr1
 15610  0FBA  0023               	movlb	3	; select bank3
 15611  0FBB  00AC               	movwf	(_RF_Data^(0+384)+12)
 15612                           
 15613                           ;RF_Control_B1.c: 214: RF_Data[13] = product->Data[13];
 15614  0FBC  0020               	movlb	0	; select bank0
 15615  0FBD  086C               	movf	_product,w
 15616  0FBE  0086               	movwf	6
 15617  0FBF  3002               	movlw	2	; select bank4/5
 15618  0FC0  0087               	movwf	7
 15619  0FC1  3002               	movlw	2	; select bank4/5
 15620  0FC2  3F4D               	moviw [13]fsr1
 15621  0FC3  0023               	movlb	3	; select bank3
 15622  0FC4  00AD               	movwf	(_RF_Data^(0+384)+13)
 15623                           
 15624                           ;RF_Control_B1.c: 215: RF_Data[14] = product->Data[14];
 15625  0FC5  0020               	movlb	0	; select bank0
 15626  0FC6  086C               	movf	_product,w
 15627  0FC7  0086               	movwf	6
 15628  0FC8  3002               	movlw	2	; select bank4/5
 15629  0FC9  0087               	movwf	7
 15630  0FCA  3002               	movlw	2	; select bank4/5
 15631  0FCB  3F4E               	moviw [14]fsr1
 15632  0FCC  0023               	movlb	3	; select bank3
 15633  0FCD  00AE               	movwf	(_RF_Data^(0+384)+14)
 15634                           
 15635                           ;RF_Control_B1.c: 216: RF_Data[15] = product->Data[15];
 15636  0FCE  0020               	movlb	0	; select bank0
 15637  0FCF  086C               	movf	_product,w
 15638  0FD0  0086               	movwf	6
 15639  0FD1  3002               	movlw	2	; select bank4/5
 15640  0FD2  0087               	movwf	7
 15641  0FD3  3002               	movlw	2	; select bank4/5
 15642  0FD4  3F4F               	moviw [15]fsr1
 15643  0FD5  0023               	movlb	3	; select bank3
 15644  0FD6  00AF               	movwf	(_RF_Data^(0+384)+15)
 15645                           
 15646                           ;RF_Control_B1.c: 217: RF_Data[16] = product->Data[16];
 15647  0FD7  0020               	movlb	0	; select bank0
 15648  0FD8  086C               	movf	_product,w
 15649  0FD9  0086               	movwf	6
 15650  0FDA  3002               	movlw	2	; select bank4/5
 15651  0FDB  0087               	movwf	7
 15652  0FDC  3002               	movlw	2	; select bank4/5
 15653  0FDD  3F50               	moviw [16]fsr1
 15654  0FDE  0023               	movlb	3	; select bank3
 15655  0FDF  00B0               	movwf	(_RF_Data^(0+384)+16)
 15656                           
 15657                           ;RF_Control_B1.c: 218: RF_Data[17] = product->Data[17];
 15658  0FE0  0020               	movlb	0	; select bank0
 15659  0FE1  086C               	movf	_product,w
 15660  0FE2  0086               	movwf	6
 15661  0FE3  3002               	movlw	2	; select bank4/5
 15662  0FE4  0087               	movwf	7
 15663  0FE5  3002               	movlw	2	; select bank4/5
 15664  0FE6  3F51               	moviw [17]fsr1
 15665  0FE7  0023               	movlb	3	; select bank3
 15666  0FE8  00B1               	movwf	(_RF_Data^(0+384)+17)
 15667                           
 15668                           ;RF_Control_B1.c: 219: RF_Data[18] = product->Data[18];
 15669  0FE9  0020               	movlb	0	; select bank0
 15670  0FEA  086C               	movf	_product,w
 15671  0FEB  0086               	movwf	6
 15672  0FEC  3002               	movlw	2	; select bank4/5
 15673  0FED  0087               	movwf	7
 15674  0FEE  3002               	movlw	2	; select bank4/5
 15675  0FEF  3F52               	moviw [18]fsr1
 15676  0FF0  0023               	movlb	3	; select bank3
 15677  0FF1  00B2               	movwf	(_RF_Data^(0+384)+18)
 15678                           
 15679                           ;RF_Control_B1.c: 220: RF_Data[19] = product->Data[19];
 15680  0FF2  0020               	movlb	0	; select bank0
 15681  0FF3  086C               	movf	_product,w
 15682  0FF4  0086               	movwf	6
 15683  0FF5  3002               	movlw	2	; select bank4/5
 15684  0FF6  0087               	movwf	7
 15685  0FF7  3002               	movlw	2	; select bank4/5
 15686  0FF8  3F53               	moviw [19]fsr1
 15687  0FF9  0023               	movlb	3	; select bank3
 15688  0FFA  00B3               	movwf	(_RF_Data^(0+384)+19)
 15689                           
 15690                           ;RF_Control_B1.c: 221: RF_Data[20] = 210;
 15691  0FFB  30D2               	movlw	210
 15692  0FFC  00F2               	movwf	??_setTxData
 15693  0FFD  0872               	movf	??_setTxData,w
 15694  0FFE  00B4               	movwf	(_RF_Data^(0+384)+20)
 15695  0FFF  0008               	return
 15696  1000                     __end_of_setTxData:	
 15697                           
 15698                           	psect	text104
 15699  1C60                     __ptext104:	
 15700 ;; *************** function _setRF_TransceiveGO *****************
 15701 ;; Defined at:
 15702 ;;		line 461 in file "../src/RF_Control_B1.c"
 15703 ;; Parameters:    Size  Location     Type
 15704 ;;  command         1    wreg     unsigned char 
 15705 ;; Auto vars:     Size  Location     Type
 15706 ;;  command         1    3[COMMON] unsigned char 
 15707 ;; Return value:  Size  Location     Type
 15708 ;;		None               void
 15709 ;; Registers used:
 15710 ;;		wreg, status,2, status,0
 15711 ;; Tracked objects:
 15712 ;;		On entry : 0/0
 15713 ;;		On exit  : 0/0
 15714 ;;		Unchanged: 0/0
 15715 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15716 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15717 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15718 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15719 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15720 ;;Total ram usage:        2 bytes
 15721 ;; Hardware stack levels used:    1
 15722 ;; Hardware stack levels required when called:    3
 15723 ;; This function calls:
 15724 ;;		Nothing
 15725 ;; This function is called by:
 15726 ;;		_setDimmerLights_Dimming
 15727 ;; This function uses a non-reentrant model
 15728 ;;
 15729                           
 15730                           
 15731                           ;psect for function _setRF_TransceiveGO
 15732  1C60                     _setRF_TransceiveGO:	
 15733                           
 15734                           ;incstack = 0
 15735                           ; Regs used in _setRF_TransceiveGO: [wreg+status,2+status,0]
 15736                           ;setRF_TransceiveGO@command stored from wreg
 15737  1C60  00F3               	movwf	setRF_TransceiveGO@command
 15738                           
 15739                           ;RF_Control_B1.c: 462: RF1.TransceiveGO = command == 1 ? 1 : 0;
 15740  1C61  0873               	movf	setRF_TransceiveGO@command,w
 15741  1C62  3A01               	xorlw	1
 15742  1C63  3000               	movlw	0
 15743  1C64  1903               	skipnz
 15744  1C65  3001               	movlw	1
 15745  1C66  00F2               	movwf	??_setRF_TransceiveGO
 15746  1C67  0DF2               	rlf	??_setRF_TransceiveGO,f
 15747  1C68  0DF2               	rlf	??_setRF_TransceiveGO,f
 15748  1C69  0021               	movlb	1	; select bank1
 15749  1C6A  0820               	movf	_RF1^(0+128),w
 15750  1C6B  0672               	xorwf	??_setRF_TransceiveGO,w
 15751  1C6C  39FB               	andlw	-5
 15752  1C6D  0672               	xorwf	??_setRF_TransceiveGO,w
 15753  1C6E  00A0               	movwf	_RF1^(0+128)
 15754  1C6F  0008               	return
 15755  1C70                     __end_of_setRF_TransceiveGO:	
 15756                           
 15757                           	psect	text105
 15758  16E2                     __ptext105:	
 15759 ;; *************** function _setRF_DimmerLights *****************
 15760 ;; Defined at:
 15761 ;;		line 446 in file "../src/RF_Control_B1.c"
 15762 ;; Parameters:    Size  Location     Type
 15763 ;;  lights          1    wreg     unsigned char 
 15764 ;;  on              1   61[BANK0 ] unsigned char 
 15765 ;; Auto vars:     Size  Location     Type
 15766 ;;  lights          1   65[BANK0 ] unsigned char 
 15767 ;;  status          1   64[BANK0 ] unsigned char 
 15768 ;; Return value:  Size  Location     Type
 15769 ;;		None               void
 15770 ;; Registers used:
 15771 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15772 ;; Tracked objects:
 15773 ;;		On entry : 0/0
 15774 ;;		On exit  : 0/0
 15775 ;;		Unchanged: 0/0
 15776 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15777 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15778 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15779 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15780 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15781 ;;Total ram usage:        5 bytes
 15782 ;; Hardware stack levels used:    1
 15783 ;; Hardware stack levels required when called:    4
 15784 ;; This function calls:
 15785 ;;		_setProductData
 15786 ;; This function is called by:
 15787 ;;		_setDimmerLights_OnOff
 15788 ;;		_setDimmerLights_Dimming
 15789 ;;		_setRFSW_Control
 15790 ;; This function uses a non-reentrant model
 15791 ;;
 15792                           
 15793                           
 15794                           ;psect for function _setRF_DimmerLights
 15795  16E2                     _setRF_DimmerLights:	
 15796                           
 15797                           ;incstack = 0
 15798                           ; Regs used in _setRF_DimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15799                           ;setRF_DimmerLights@lights stored from wreg
 15800  16E2  0020               	movlb	0	; select bank0
 15801  16E3  00E1               	movwf	setRF_DimmerLights@lights
 15802                           
 15803                           ;RF_Control_B1.c: 447: char status = 1;
 15804  16E4  01E0               	clrf	setRF_DimmerLights@status
 15805  16E5  0AE0               	incf	setRF_DimmerLights@status,f
 15806                           
 15807                           ;RF_Control_B1.c: 448: status <<= (lights - 1);
 15808  16E6  0861               	movf	setRF_DimmerLights@lights,w
 15809  16E7  3EFF               	addlw	-1
 15810  16E8  0A89               	incf	9,f
 15811  16E9  2EEC               	goto	u6150
 15812  16EA                     u6155:	
 15813  16EA  1003               	clrc
 15814  16EB  0DE0               	rlf	setRF_DimmerLights@status,f
 15815  16EC                     u6150:	
 15816  16EC  3EFF               	addlw	-1
 15817  16ED  1D03               	skipz
 15818  16EE  2EEA               	goto	u6155
 15819                           
 15820                           ;RF_Control_B1.c: 449: setProductData(11, lights);
 15821  16EF  0861               	movf	setRF_DimmerLights@lights,w
 15822  16F0  00DE               	movwf	??_setRF_DimmerLights
 15823  16F1  085E               	movf	??_setRF_DimmerLights,w
 15824  16F2  00DA               	movwf	setProductData@value
 15825  16F3  300B               	movlw	11
 15826  16F4  319B  2394  3196   	fcall	_setProductData
 15827                           
 15828                           ;RF_Control_B1.c: 450: setProductData(17, product->Data[26 + lights]);
 15829  16F7  0020               	movlb	0	; select bank0
 15830  16F8  0861               	movf	setRF_DimmerLights@lights,w
 15831  16F9  3E1A               	addlw	26
 15832  16FA  076C               	addwf	_product,w
 15833  16FB  00DE               	movwf	??_setRF_DimmerLights
 15834  16FC  085E               	movf	??_setRF_DimmerLights,w
 15835  16FD  0086               	movwf	6
 15836  16FE  3002               	movlw	2	; select bank4/5
 15837  16FF  0087               	movwf	7
 15838  1700  0801               	movf	1,w
 15839  1701  00DF               	movwf	??_setRF_DimmerLights+1
 15840  1702  085F               	movf	??_setRF_DimmerLights+1,w
 15841  1703  00DA               	movwf	setProductData@value
 15842  1704  3011               	movlw	17
 15843  1705  319B  2394  3196   	fcall	_setProductData
 15844                           
 15845                           ;RF_Control_B1.c: 451: if (on == 1) {
 15846  1708  0020               	movlb	0	; select bank0
 15847  1709  085D               	movf	setRF_DimmerLights@on,w
 15848  170A  3A01               	xorlw	1
 15849  170B  1D03               	skipz
 15850  170C  2F2C               	goto	l6755
 15851                           
 15852                           ;RF_Control_B1.c: 452: setProductData(9, product->Data[20 + lights]);
 15853  170D  0861               	movf	setRF_DimmerLights@lights,w
 15854  170E  3E14               	addlw	20
 15855  170F  076C               	addwf	_product,w
 15856  1710  00DE               	movwf	??_setRF_DimmerLights
 15857  1711  085E               	movf	??_setRF_DimmerLights,w
 15858  1712  0086               	movwf	6
 15859  1713  3002               	movlw	2	; select bank4/5
 15860  1714  0087               	movwf	7
 15861  1715  0801               	movf	1,w
 15862  1716  00DF               	movwf	??_setRF_DimmerLights+1
 15863  1717  085F               	movf	??_setRF_DimmerLights+1,w
 15864  1718  00DA               	movwf	setProductData@value
 15865  1719  3009               	movlw	9
 15866  171A  319B  2394  3196   	fcall	_setProductData
 15867                           
 15868                           ;RF_Control_B1.c: 453: setProductData(15, (product->Data[15] | status));
 15869  171D  0020               	movlb	0	; select bank0
 15870  171E  086C               	movf	_product,w
 15871  171F  3E0F               	addlw	15
 15872  1720  0086               	movwf	6
 15873  1721  3002               	movlw	2	; select bank4/5
 15874  1722  0087               	movwf	7
 15875  1723  0801               	movf	1,w
 15876  1724  0460               	iorwf	setRF_DimmerLights@status,w
 15877  1725  00DE               	movwf	??_setRF_DimmerLights
 15878  1726  085E               	movf	??_setRF_DimmerLights,w
 15879  1727  00DA               	movwf	setProductData@value
 15880  1728  300F               	movlw	15
 15881  1729  319B  2394         	fcall	_setProductData
 15882                           
 15883                           ;RF_Control_B1.c: 454: } else {
 15884  172B  0008               	return
 15885  172C                     l6755:	
 15886                           
 15887                           ;RF_Control_B1.c: 455: setProductData(9, 0x00);
 15888  172C  0020               	movlb	0	; select bank0
 15889  172D  01DA               	clrf	setProductData@value
 15890  172E  3009               	movlw	9
 15891  172F  319B  2394  3196   	fcall	_setProductData
 15892                           
 15893                           ;RF_Control_B1.c: 456: setProductData(15, (product->Data[15]&(~status)));
 15894  1732  0020               	movlb	0	; select bank0
 15895  1733  086C               	movf	_product,w
 15896  1734  3E0F               	addlw	15
 15897  1735  0086               	movwf	6
 15898  1736  3002               	movlw	2	; select bank4/5
 15899  1737  0087               	movwf	7
 15900  1738  0960               	comf	setRF_DimmerLights@status,w
 15901  1739  0501               	andwf	1,w
 15902  173A  00DE               	movwf	??_setRF_DimmerLights
 15903  173B  085E               	movf	??_setRF_DimmerLights,w
 15904  173C  00DA               	movwf	setProductData@value
 15905  173D  300F               	movlw	15
 15906  173E  319B  2394         	fcall	_setProductData
 15907  1740  0008               	return
 15908  1741                     __end_of_setRF_DimmerLights:	
 15909                           
 15910                           	psect	text106
 15911  1DFD                     __ptext106:	
 15912 ;; *************** function _setDimmerLights_Line *****************
 15913 ;; Defined at:
 15914 ;;		line 936 in file "../src/Dimmer_B1.c"
 15915 ;; Parameters:    Size  Location     Type
 15916 ;;  lights          1    wreg     unsigned char 
 15917 ;; Auto vars:     Size  Location     Type
 15918 ;;  lights          1    2[COMMON] unsigned char 
 15919 ;; Return value:  Size  Location     Type
 15920 ;;		None               void
 15921 ;; Registers used:
 15922 ;;		wreg
 15923 ;; Tracked objects:
 15924 ;;		On entry : 0/0
 15925 ;;		On exit  : 0/0
 15926 ;;		Unchanged: 0/0
 15927 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15928 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15929 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15930 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15931 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15932 ;;Total ram usage:        1 bytes
 15933 ;; Hardware stack levels used:    1
 15934 ;; Hardware stack levels required when called:    3
 15935 ;; This function calls:
 15936 ;;		Nothing
 15937 ;; This function is called by:
 15938 ;;		_setDimmerLights_OnOff
 15939 ;;		_setDimmerLights_Dimming
 15940 ;; This function uses a non-reentrant model
 15941 ;;
 15942                           
 15943                           
 15944                           ;psect for function _setDimmerLights_Line
 15945  1DFD                     _setDimmerLights_Line:	
 15946                           
 15947                           ;incstack = 0
 15948                           ; Regs used in _setDimmerLights_Line: [wreg]
 15949                           ;setDimmerLights_Line@lights stored from wreg
 15950  1DFD  00F2               	movwf	setDimmerLights_Line@lights
 15951                           
 15952                           ;Dimmer_B1.c: 937: Dimmer.LoadGO = 1;
 15953  1DFE  0021               	movlb	1	; select bank1
 15954  1DFF  14BA               	bsf	_Dimmer^(0+128),1
 15955                           
 15956                           ;Dimmer_B1.c: 939: DimmerLights1.Line = 0;
 15957  1E00  0022               	movlb	2	; select bank2
 15958  1E01  10DF               	bcf	(_DimmerLights1^(0+256)+1),1
 15959                           
 15960                           ;Dimmer_B1.c: 940: if (lights == 1 && lights != 0) {
 15961  1E02  0872               	movf	setDimmerLights_Line@lights,w
 15962  1E03  3A01               	xorlw	1
 15963  1E04  1D03               	skipz
 15964  1E05  2E0A               	goto	l949
 15965  1E06  0872               	movf	setDimmerLights_Line@lights,w
 15966  1E07  1903               	btfsc	3,2
 15967  1E08  2E0A               	goto	l949
 15968                           
 15969                           ;Dimmer_B1.c: 941: DimmerLights1.Line = 1;
 15970  1E09  14DF               	bsf	(_DimmerLights1^(0+256)+1),1
 15971  1E0A                     l949:	
 15972                           
 15973                           ;Dimmer_B1.c: 942: }
 15974                           ;Dimmer_B1.c: 945: DimmerLights2.Line = 0;
 15975  1E0A  10E7               	bcf	(_DimmerLights2^(0+256)+1),1
 15976                           
 15977                           ;Dimmer_B1.c: 946: if (lights == 2 && lights != 0) {
 15978  1E0B  0872               	movf	setDimmerLights_Line@lights,w
 15979  1E0C  3A02               	xorlw	2
 15980  1E0D  1D03               	skipz
 15981  1E0E  0008               	return
 15982  1E0F  0872               	movf	setDimmerLights_Line@lights,w
 15983  1E10  1903               	btfsc	3,2
 15984  1E11  0008               	return
 15985                           
 15986                           ;Dimmer_B1.c: 947: DimmerLights2.Line = 1;
 15987  1E12  14E7               	bsf	(_DimmerLights2^(0+256)+1),1
 15988  1E13  0008               	return
 15989  1E14                     __end_of_setDimmerLights_Line:	
 15990                           
 15991                           	psect	text107
 15992  1DE6                     __ptext107:	
 15993 ;; *************** function _setDimmerIntr_MaxmumValue *****************
 15994 ;; Defined at:
 15995 ;;		line 86 in file "../src/Dimmer_B1.c"
 15996 ;; Parameters:    Size  Location     Type
 15997 ;;  lights          1    wreg     unsigned char 
 15998 ;;  value           1   58[BANK0 ] unsigned char 
 15999 ;; Auto vars:     Size  Location     Type
 16000 ;;  lights          1   60[BANK0 ] unsigned char 
 16001 ;; Return value:  Size  Location     Type
 16002 ;;		None               void
 16003 ;; Registers used:
 16004 ;;		wreg
 16005 ;; Tracked objects:
 16006 ;;		On entry : 0/0
 16007 ;;		On exit  : 0/0
 16008 ;;		Unchanged: 0/0
 16009 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16010 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16011 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16012 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16013 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16014 ;;Total ram usage:        3 bytes
 16015 ;; Hardware stack levels used:    1
 16016 ;; Hardware stack levels required when called:    3
 16017 ;; This function calls:
 16018 ;;		Nothing
 16019 ;; This function is called by:
 16020 ;;		_setDimmerLights_OnOff
 16021 ;;		_setDimmerLights_Dimming
 16022 ;;		_setRFSW_AdjControl
 16023 ;; This function uses a non-reentrant model
 16024 ;;
 16025                           
 16026                           
 16027                           ;psect for function _setDimmerIntr_MaxmumValue
 16028  1DE6                     _setDimmerIntr_MaxmumValue:	
 16029                           
 16030                           ;incstack = 0
 16031                           ; Regs used in _setDimmerIntr_MaxmumValue: [wreg]
 16032                           ;setDimmerIntr_MaxmumValue@lights stored from wreg
 16033  1DE6  0020               	movlb	0	; select bank0
 16034  1DE7  00DC               	movwf	setDimmerIntr_MaxmumValue@lights
 16035                           
 16036                           ;Dimmer_B1.c: 88: if (lights == 1) {
 16037  1DE8  085C               	movf	setDimmerIntr_MaxmumValue@lights,w
 16038  1DE9  3A01               	xorlw	1
 16039  1DEA  1D03               	skipz
 16040  1DEB  2DF2               	goto	l6723
 16041                           
 16042                           ;Dimmer_B1.c: 89: DimmerIntr1.MaxmumValue = value;
 16043  1DEC  085A               	movf	setDimmerIntr_MaxmumValue@value,w
 16044  1DED  00DB               	movwf	??_setDimmerIntr_MaxmumValue
 16045  1DEE  085B               	movf	??_setDimmerIntr_MaxmumValue,w
 16046  1DEF  0021               	movlb	1	; select bank1
 16047  1DF0  00E7               	movwf	(_DimmerIntr1^(0+128)+5)
 16048                           
 16049                           ;Dimmer_B1.c: 90: }
 16050  1DF1  0008               	return
 16051  1DF2                     l6723:	
 16052                           
 16053                           ;Dimmer_B1.c: 93: else if (lights == 2) {
 16054  1DF2  0020               	movlb	0	; select bank0
 16055  1DF3  085C               	movf	setDimmerIntr_MaxmumValue@lights,w
 16056  1DF4  3A02               	xorlw	2
 16057  1DF5  1D03               	skipz
 16058  1DF6  0008               	return
 16059                           
 16060                           ;Dimmer_B1.c: 94: DimmerIntr2.MaxmumValue = value;
 16061  1DF7  085A               	movf	setDimmerIntr_MaxmumValue@value,w
 16062  1DF8  00DB               	movwf	??_setDimmerIntr_MaxmumValue
 16063  1DF9  085B               	movf	??_setDimmerIntr_MaxmumValue,w
 16064  1DFA  0021               	movlb	1	; select bank1
 16065  1DFB  00EE               	movwf	(_DimmerIntr2^(0+128)+5)
 16066  1DFC  0008               	return
 16067  1DFD                     __end_of_setDimmerIntr_MaxmumValue:	
 16068                           
 16069                           	psect	text108
 16070  10BE                     __ptext108:	
 16071 ;; *************** function _setDimmerIntr_Dimming_Sw *****************
 16072 ;; Defined at:
 16073 ;;		line 162 in file "../src/Dimmer_B1.c"
 16074 ;; Parameters:    Size  Location     Type
 16075 ;;  lights          1    wreg     unsigned char 
 16076 ;;  command         1    2[COMMON] unsigned char 
 16077 ;; Auto vars:     Size  Location     Type
 16078 ;;  lights          1    4[COMMON] unsigned char 
 16079 ;; Return value:  Size  Location     Type
 16080 ;;		None               void
 16081 ;; Registers used:
 16082 ;;		wreg, status,2, status,0
 16083 ;; Tracked objects:
 16084 ;;		On entry : 0/0
 16085 ;;		On exit  : 0/0
 16086 ;;		Unchanged: 0/0
 16087 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16088 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16089 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16090 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16091 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16092 ;;Total ram usage:        3 bytes
 16093 ;; Hardware stack levels used:    1
 16094 ;; Hardware stack levels required when called:    3
 16095 ;; This function calls:
 16096 ;;		Nothing
 16097 ;; This function is called by:
 16098 ;;		_setDimmerLights_Dimming
 16099 ;; This function uses a non-reentrant model
 16100 ;;
 16101                           
 16102                           
 16103                           ;psect for function _setDimmerIntr_Dimming_Sw
 16104  10BE                     _setDimmerIntr_Dimming_Sw:	
 16105                           
 16106                           ;incstack = 0
 16107                           ; Regs used in _setDimmerIntr_Dimming_Sw: [wreg+status,2+status,0]
 16108                           ;setDimmerIntr_Dimming_Sw@lights stored from wreg
 16109  10BE  00F4               	movwf	setDimmerIntr_Dimming_Sw@lights
 16110                           
 16111                           ;Dimmer_B1.c: 164: if (lights == 1) {
 16112  10BF  0874               	movf	setDimmerIntr_Dimming_Sw@lights,w
 16113  10C0  3A01               	xorlw	1
 16114  10C1  1D03               	skipz
 16115  10C2  28D1               	goto	l7083
 16116                           
 16117                           ;Dimmer_B1.c: 165: DimmerIntr1.Dimming_Sw = command == 1 ? 1 : 0;
 16118  10C3  0872               	movf	setDimmerIntr_Dimming_Sw@command,w
 16119  10C4  3A01               	xorlw	1
 16120  10C5  3000               	movlw	0
 16121  10C6  1903               	skipnz
 16122  10C7  3001               	movlw	1
 16123  10C8  00F3               	movwf	??_setDimmerIntr_Dimming_Sw
 16124  10C9  0EF3               	swapf	??_setDimmerIntr_Dimming_Sw,f
 16125  10CA  0021               	movlb	1	; select bank1
 16126  10CB  0862               	movf	_DimmerIntr1^(0+128),w
 16127  10CC  0673               	xorwf	??_setDimmerIntr_Dimming_Sw,w
 16128  10CD  39EF               	andlw	-17
 16129  10CE  0673               	xorwf	??_setDimmerIntr_Dimming_Sw,w
 16130  10CF  00E2               	movwf	_DimmerIntr1^(0+128)
 16131                           
 16132                           ;Dimmer_B1.c: 166: }
 16133  10D0  0008               	return
 16134  10D1                     l7083:	
 16135                           
 16136                           ;Dimmer_B1.c: 169: else if (lights == 2) {
 16137  10D1  0874               	movf	setDimmerIntr_Dimming_Sw@lights,w
 16138  10D2  3A02               	xorlw	2
 16139  10D3  1D03               	skipz
 16140  10D4  0008               	return
 16141                           
 16142                           ;Dimmer_B1.c: 170: DimmerIntr2.Dimming_Sw = command == 1 ? 1 : 0;
 16143  10D5  0872               	movf	setDimmerIntr_Dimming_Sw@command,w
 16144  10D6  3A01               	xorlw	1
 16145  10D7  3000               	movlw	0
 16146  10D8  1903               	skipnz
 16147  10D9  3001               	movlw	1
 16148  10DA  00F3               	movwf	??_setDimmerIntr_Dimming_Sw
 16149  10DB  0EF3               	swapf	??_setDimmerIntr_Dimming_Sw,f
 16150  10DC  0021               	movlb	1	; select bank1
 16151  10DD  0869               	movf	_DimmerIntr2^(0+128),w
 16152  10DE  0673               	xorwf	??_setDimmerIntr_Dimming_Sw,w
 16153  10DF  39EF               	andlw	-17
 16154  10E0  0673               	xorwf	??_setDimmerIntr_Dimming_Sw,w
 16155  10E1  00E9               	movwf	_DimmerIntr2^(0+128)
 16156  10E2  0008               	return
 16157  10E3                     __end_of_setDimmerIntr_Dimming_Sw:	
 16158                           
 16159                           	psect	text109
 16160  090C                     __ptext109:	
 16161 ;; *************** function _getDimmerLights_ValueToPercent *****************
 16162 ;; Defined at:
 16163 ;;		line 1035 in file "../src/Dimmer_B1.c"
 16164 ;; Parameters:    Size  Location     Type
 16165 ;;  value           1    wreg     unsigned char 
 16166 ;; Auto vars:     Size  Location     Type
 16167 ;;  value           1   54[BANK0 ] unsigned char 
 16168 ;;  i               3   55[BANK0 ] float 
 16169 ;; Return value:  Size  Location     Type
 16170 ;;                  1    wreg      unsigned char 
 16171 ;; Registers used:
 16172 ;;		wreg, status,2, status,0, pclath, cstack
 16173 ;; Tracked objects:
 16174 ;;		On entry : 0/0
 16175 ;;		On exit  : 0/0
 16176 ;;		Unchanged: 0/0
 16177 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16178 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16179 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16180 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16181 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16182 ;;Total ram usage:        6 bytes
 16183 ;; Hardware stack levels used:    1
 16184 ;; Hardware stack levels required when called:    5
 16185 ;; This function calls:
 16186 ;;		___awtoft
 16187 ;;		___ftadd
 16188 ;;		___ftdiv
 16189 ;;		___ftneg
 16190 ;;		___fttol
 16191 ;; This function is called by:
 16192 ;;		_setDimmerLights_OnOff
 16193 ;;		_setDimmerLights_Dimming
 16194 ;;		_Flash_Memory_Initialization
 16195 ;; This function uses a non-reentrant model
 16196 ;;
 16197                           
 16198                           
 16199                           ;psect for function _getDimmerLights_ValueToPercent
 16200  090C                     _getDimmerLights_ValueToPercent:	
 16201                           
 16202                           ;incstack = 0
 16203                           ; Regs used in _getDimmerLights_ValueToPercent: [wreg+status,2+status,0+pclath+cstack]
 16204                           ;getDimmerLights_ValueToPercent@value stored from wreg
 16205  090C  0020               	movlb	0	; select bank0
 16206  090D  00D6               	movwf	getDimmerLights_ValueToPercent@value
 16207                           
 16208                           ;Dimmer_B1.c: 1043: float i = ((char)(65*0.8)) - ((char)(20*0.8));
 16209  090E  3000               	movlw	0
 16210  090F  00D7               	movwf	getDimmerLights_ValueToPercent@i
 16211  0910  3010               	movlw	16
 16212  0911  00D8               	movwf	getDimmerLights_ValueToPercent@i+1
 16213  0912  3042               	movlw	66
 16214  0913  00D9               	movwf	getDimmerLights_ValueToPercent@i+2
 16215                           
 16216                           ;Dimmer_B1.c: 1044: i /= 100;
 16217  0914  3000               	movlw	0
 16218  0915  00A6               	movwf	___ftdiv@f2
 16219  0916  30C8               	movlw	200
 16220  0917  00A7               	movwf	___ftdiv@f2+1
 16221  0918  3042               	movlw	66
 16222  0919  00A8               	movwf	___ftdiv@f2+2
 16223  091A  0857               	movf	getDimmerLights_ValueToPercent@i,w
 16224  091B  00A9               	movwf	___ftdiv@f1
 16225  091C  0858               	movf	getDimmerLights_ValueToPercent@i+1,w
 16226  091D  00AA               	movwf	___ftdiv@f1+1
 16227  091E  0859               	movf	getDimmerLights_ValueToPercent@i+2,w
 16228  091F  00AB               	movwf	___ftdiv@f1+2
 16229  0920  318D  253B  3189   	fcall	___ftdiv
 16230  0923  0020               	movlb	0	; select bank0
 16231  0924  0826               	movf	?___ftdiv,w
 16232  0925  00D7               	movwf	getDimmerLights_ValueToPercent@i
 16233  0926  0827               	movf	?___ftdiv+1,w
 16234  0927  00D8               	movwf	getDimmerLights_ValueToPercent@i+1
 16235  0928  0828               	movf	?___ftdiv+2,w
 16236  0929  00D9               	movwf	getDimmerLights_ValueToPercent@i+2
 16237                           
 16238                           ;Dimmer_B1.c: 1046: return (char) (100 - ((((char)(65*0.8)) - value) / i));
 16239  092A  0856               	movf	getDimmerLights_ValueToPercent@value,w
 16240  092B  00D4               	movwf	??_getDimmerLights_ValueToPercent
 16241  092C  01D5               	clrf	??_getDimmerLights_ValueToPercent+1
 16242  092D  09D4               	comf	??_getDimmerLights_ValueToPercent,f
 16243  092E  09D5               	comf	??_getDimmerLights_ValueToPercent+1,f
 16244  092F  0AD4               	incf	??_getDimmerLights_ValueToPercent,f
 16245  0930  1903               	skipnz
 16246  0931  0AD5               	incf	??_getDimmerLights_ValueToPercent+1,f
 16247  0932  0854               	movf	??_getDimmerLights_ValueToPercent,w
 16248  0933  3E34               	addlw	52
 16249  0934  00A0               	movwf	___awtoft@c
 16250  0935  3000               	movlw	0
 16251  0936  3D55               	addwfc	??_getDimmerLights_ValueToPercent+1,w
 16252  0937  00A1               	movwf	___awtoft@c+1
 16253  0938  319F  27DE  3189   	fcall	___awtoft
 16254  093B  0020               	movlb	0	; select bank0
 16255  093C  0820               	movf	?___awtoft,w
 16256  093D  00A9               	movwf	___ftdiv@f1
 16257  093E  0821               	movf	?___awtoft+1,w
 16258  093F  00AA               	movwf	___ftdiv@f1+1
 16259  0940  0822               	movf	?___awtoft+2,w
 16260  0941  00AB               	movwf	___ftdiv@f1+2
 16261  0942  0857               	movf	getDimmerLights_ValueToPercent@i,w
 16262  0943  00A6               	movwf	___ftdiv@f2
 16263  0944  0858               	movf	getDimmerLights_ValueToPercent@i+1,w
 16264  0945  00A7               	movwf	___ftdiv@f2+1
 16265  0946  0859               	movf	getDimmerLights_ValueToPercent@i+2,w
 16266  0947  00A8               	movwf	___ftdiv@f2+2
 16267  0948  318D  253B  3189   	fcall	___ftdiv
 16268  094B  0020               	movlb	0	; select bank0
 16269  094C  0826               	movf	?___ftdiv,w
 16270  094D  00B6               	movwf	___ftneg@f1
 16271  094E  0827               	movf	?___ftdiv+1,w
 16272  094F  00B7               	movwf	___ftneg@f1+1
 16273  0950  0828               	movf	?___ftdiv+2,w
 16274  0951  00B8               	movwf	___ftneg@f1+2
 16275  0952  319B  232D  3189   	fcall	___ftneg
 16276  0955  0020               	movlb	0	; select bank0
 16277  0956  0836               	movf	?___ftneg,w
 16278  0957  00BC               	movwf	___ftadd@f2
 16279  0958  0837               	movf	?___ftneg+1,w
 16280  0959  00BD               	movwf	___ftadd@f2+1
 16281  095A  0838               	movf	?___ftneg+2,w
 16282  095B  00BE               	movwf	___ftadd@f2+2
 16283  095C  3000               	movlw	0
 16284  095D  00B9               	movwf	___ftadd@f1
 16285  095E  30C8               	movlw	200
 16286  095F  00BA               	movwf	___ftadd@f1+1
 16287  0960  3042               	movlw	66
 16288  0961  00BB               	movwf	___ftadd@f1+2
 16289  0962  3183  235D  3189   	fcall	___ftadd
 16290  0965  0020               	movlb	0	; select bank0
 16291  0966  0839               	movf	?___ftadd,w
 16292  0967  00C6               	movwf	___fttol@f1
 16293  0968  083A               	movf	?___ftadd+1,w
 16294  0969  00C7               	movwf	___fttol@f1+1
 16295  096A  083B               	movf	?___ftadd+2,w
 16296  096B  00C8               	movwf	___fttol@f1+2
 16297  096C  318B  239B         	fcall	___fttol
 16298  096E  0020               	movlb	0	; select bank0
 16299  096F  0846               	movf	?___fttol,w
 16300  0970  0008               	return
 16301  0971                     __end_of_getDimmerLights_ValueToPercent:	
 16302                           
 16303                           	psect	text110
 16304  0B9B                     __ptext110:	
 16305 ;; *************** function ___fttol *****************
 16306 ;; Defined at:
 16307 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\fttol.c"
 16308 ;; Parameters:    Size  Location     Type
 16309 ;;  f1              3   38[BANK0 ] float 
 16310 ;; Auto vars:     Size  Location     Type
 16311 ;;  lval            4   47[BANK0 ] unsigned long 
 16312 ;;  exp1            1   51[BANK0 ] unsigned char 
 16313 ;;  sign1           1   46[BANK0 ] unsigned char 
 16314 ;; Return value:  Size  Location     Type
 16315 ;;                  4   38[BANK0 ] long 
 16316 ;; Registers used:
 16317 ;;		wreg, status,2, status,0
 16318 ;; Tracked objects:
 16319 ;;		On entry : 0/0
 16320 ;;		On exit  : 0/0
 16321 ;;		Unchanged: 0/0
 16322 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16323 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16324 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16325 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16326 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16327 ;;Total ram usage:       14 bytes
 16328 ;; Hardware stack levels used:    1
 16329 ;; Hardware stack levels required when called:    3
 16330 ;; This function calls:
 16331 ;;		Nothing
 16332 ;; This function is called by:
 16333 ;;		_getDimmerLights_PercentToValue
 16334 ;;		_getDimmerLights_ValueToPercent
 16335 ;; This function uses a non-reentrant model
 16336 ;;
 16337                           
 16338                           
 16339                           ;psect for function ___fttol
 16340  0B9B                     ___fttol:	
 16341                           
 16342                           ;incstack = 0
 16343                           ; Regs used in ___fttol: [wreg+status,2+status,0]
 16344  0B9B  0020               	movlb	0	; select bank0
 16345  0B9C  0846               	movf	___fttol@f1,w
 16346  0B9D  00CA               	movwf	??___fttol
 16347  0B9E  0847               	movf	___fttol@f1+1,w
 16348  0B9F  00CB               	movwf	??___fttol+1
 16349  0BA0  0848               	movf	___fttol@f1+2,w
 16350  0BA1  00CC               	movwf	??___fttol+2
 16351  0BA2  1003               	clrc
 16352  0BA3  0D4B               	rlf	??___fttol+1,w
 16353  0BA4  0D4C               	rlf	??___fttol+2,w
 16354  0BA5  00CD               	movwf	??___fttol+3
 16355  0BA6  084D               	movf	??___fttol+3,w
 16356  0BA7  00D3               	movwf	___fttol@exp1
 16357  0BA8  08D3               	movf	___fttol@exp1,f
 16358  0BA9  1D03               	skipz
 16359  0BAA  2BB4               	goto	l6561
 16360  0BAB  3000               	movlw	0
 16361  0BAC  00C9               	movwf	?___fttol+3
 16362  0BAD  3000               	movlw	0
 16363  0BAE  00C8               	movwf	?___fttol+2
 16364  0BAF  3000               	movlw	0
 16365  0BB0  00C7               	movwf	?___fttol+1
 16366  0BB1  3000               	movlw	0
 16367  0BB2  00C6               	movwf	?___fttol
 16368  0BB3  0008               	return
 16369  0BB4                     l6561:	
 16370  0BB4  0846               	movf	___fttol@f1,w
 16371  0BB5  00CA               	movwf	??___fttol
 16372  0BB6  0847               	movf	___fttol@f1+1,w
 16373  0BB7  00CB               	movwf	??___fttol+1
 16374  0BB8  0848               	movf	___fttol@f1+2,w
 16375  0BB9  00CC               	movwf	??___fttol+2
 16376  0BBA  3017               	movlw	23
 16377  0BBB                     u5805:	
 16378  0BBB  36CC               	lsrf	??___fttol+2,f
 16379  0BBC  0CCB               	rrf	??___fttol+1,f
 16380  0BBD  0CCA               	rrf	??___fttol,f
 16381  0BBE  0B89               	decfsz	9,f
 16382  0BBF  2BBB               	goto	u5805
 16383  0BC0  084A               	movf	??___fttol,w
 16384  0BC1  00CD               	movwf	??___fttol+3
 16385  0BC2  084D               	movf	??___fttol+3,w
 16386  0BC3  00CE               	movwf	___fttol@sign1
 16387  0BC4  17C7               	bsf	___fttol@f1+1,7
 16388  0BC5  30FF               	movlw	255
 16389  0BC6  05C6               	andwf	___fttol@f1,f
 16390  0BC7  30FF               	movlw	255
 16391  0BC8  05C7               	andwf	___fttol@f1+1,f
 16392  0BC9  3000               	movlw	0
 16393  0BCA  05C8               	andwf	___fttol@f1+2,f
 16394  0BCB  0846               	movf	___fttol@f1,w
 16395  0BCC  00CF               	movwf	___fttol@lval
 16396  0BCD  0847               	movf	___fttol@f1+1,w
 16397  0BCE  00D0               	movwf	___fttol@lval+1
 16398  0BCF  0848               	movf	___fttol@f1+2,w
 16399  0BD0  00D1               	movwf	___fttol@lval+2
 16400  0BD1  01D2               	clrf	___fttol@lval+3
 16401  0BD2  308E               	movlw	142
 16402  0BD3  02D3               	subwf	___fttol@exp1,f
 16403  0BD4  1FD3               	btfss	___fttol@exp1,7
 16404  0BD5  2BF2               	goto	l6581
 16405  0BD6  0853               	movf	___fttol@exp1,w
 16406  0BD7  3A80               	xorlw	128
 16407  0BD8  3E8F               	addlw	143
 16408  0BD9  1803               	skipnc
 16409  0BDA  2BE4               	goto	l6579
 16410  0BDB  3000               	movlw	0
 16411  0BDC  00C9               	movwf	?___fttol+3
 16412  0BDD  3000               	movlw	0
 16413  0BDE  00C8               	movwf	?___fttol+2
 16414  0BDF  3000               	movlw	0
 16415  0BE0  00C7               	movwf	?___fttol+1
 16416  0BE1  3000               	movlw	0
 16417  0BE2  00C6               	movwf	?___fttol
 16418  0BE3  0008               	return
 16419  0BE4                     l6579:	
 16420  0BE4  3001               	movlw	1
 16421  0BE5                     u5835:	
 16422  0BE5  36D2               	lsrf	___fttol@lval+3,f
 16423  0BE6  0CD1               	rrf	___fttol@lval+2,f
 16424  0BE7  0CD0               	rrf	___fttol@lval+1,f
 16425  0BE8  0CCF               	rrf	___fttol@lval,f
 16426  0BE9  0B89               	decfsz	9,f
 16427  0BEA  2BE5               	goto	u5835
 16428  0BEB  3001               	movlw	1
 16429  0BEC  00CA               	movwf	??___fttol
 16430  0BED  084A               	movf	??___fttol,w
 16431  0BEE  07D3               	addwf	___fttol@exp1,f
 16432  0BEF  1903               	btfsc	3,2
 16433  0BF0  2C0B               	goto	l6591
 16434  0BF1  2BE4               	goto	l6579
 16435  0BF2                     l6581:	
 16436  0BF2  3018               	movlw	24
 16437  0BF3  0253               	subwf	___fttol@exp1,w
 16438  0BF4  1C03               	skipc
 16439  0BF5  2C08               	goto	l6589
 16440  0BF6  3000               	movlw	0
 16441  0BF7  00C9               	movwf	?___fttol+3
 16442  0BF8  3000               	movlw	0
 16443  0BF9  00C8               	movwf	?___fttol+2
 16444  0BFA  3000               	movlw	0
 16445  0BFB  00C7               	movwf	?___fttol+1
 16446  0BFC  3000               	movlw	0
 16447  0BFD  00C6               	movwf	?___fttol
 16448  0BFE  0008               	return
 16449  0BFF                     l6587:	
 16450  0BFF  3001               	movlw	1
 16451  0C00                     u5865:	
 16452  0C00  35CF               	lslf	___fttol@lval,f
 16453  0C01  0DD0               	rlf	___fttol@lval+1,f
 16454  0C02  0DD1               	rlf	___fttol@lval+2,f
 16455  0C03  0DD2               	rlf	___fttol@lval+3,f
 16456  0C04  0B89               	decfsz	9,f
 16457  0C05  2C00               	goto	u5865
 16458  0C06  3001               	movlw	1
 16459  0C07  02D3               	subwf	___fttol@exp1,f
 16460  0C08                     l6589:	
 16461  0C08  08D3               	movf	___fttol@exp1,f
 16462  0C09  1D03               	skipz
 16463  0C0A  2BFF               	goto	l6587
 16464  0C0B                     l6591:	
 16465  0C0B  084E               	movf	___fttol@sign1,w
 16466  0C0C  1903               	btfsc	3,2
 16467  0C0D  2C19               	goto	l6595
 16468  0C0E  09CF               	comf	___fttol@lval,f
 16469  0C0F  09D0               	comf	___fttol@lval+1,f
 16470  0C10  09D1               	comf	___fttol@lval+2,f
 16471  0C11  09D2               	comf	___fttol@lval+3,f
 16472  0C12  0ACF               	incf	___fttol@lval,f
 16473  0C13  1903               	skipnz
 16474  0C14  0AD0               	incf	___fttol@lval+1,f
 16475  0C15  1903               	skipnz
 16476  0C16  0AD1               	incf	___fttol@lval+2,f
 16477  0C17  1903               	skipnz
 16478  0C18  0AD2               	incf	___fttol@lval+3,f
 16479  0C19                     l6595:	
 16480  0C19  0852               	movf	___fttol@lval+3,w
 16481  0C1A  00C9               	movwf	?___fttol+3
 16482  0C1B  0851               	movf	___fttol@lval+2,w
 16483  0C1C  00C8               	movwf	?___fttol+2
 16484  0C1D  0850               	movf	___fttol@lval+1,w
 16485  0C1E  00C7               	movwf	?___fttol+1
 16486  0C1F  084F               	movf	___fttol@lval,w
 16487  0C20  00C6               	movwf	?___fttol
 16488  0C21  0008               	return
 16489  0C22                     __end_of___fttol:	
 16490                           
 16491                           	psect	text111
 16492  1B2D                     __ptext111:	
 16493 ;; *************** function ___ftneg *****************
 16494 ;; Defined at:
 16495 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftneg.c"
 16496 ;; Parameters:    Size  Location     Type
 16497 ;;  f1              3   22[BANK0 ] float 
 16498 ;; Auto vars:     Size  Location     Type
 16499 ;;		None
 16500 ;; Return value:  Size  Location     Type
 16501 ;;                  3   22[BANK0 ] float 
 16502 ;; Registers used:
 16503 ;;		wreg
 16504 ;; Tracked objects:
 16505 ;;		On entry : 0/0
 16506 ;;		On exit  : 0/0
 16507 ;;		Unchanged: 0/0
 16508 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16509 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16510 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16511 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16512 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16513 ;;Total ram usage:        3 bytes
 16514 ;; Hardware stack levels used:    1
 16515 ;; Hardware stack levels required when called:    3
 16516 ;; This function calls:
 16517 ;;		Nothing
 16518 ;; This function is called by:
 16519 ;;		_getDimmerLights_PercentToValue
 16520 ;;		_getDimmerLights_ValueToPercent
 16521 ;; This function uses a non-reentrant model
 16522 ;;
 16523                           
 16524                           
 16525                           ;psect for function ___ftneg
 16526  1B2D                     ___ftneg:	
 16527                           
 16528                           ;incstack = 0
 16529                           ; Regs used in ___ftneg: [wreg]
 16530  1B2D  0020               	movlb	0	; select bank0
 16531  1B2E  0838               	movf	___ftneg@f1+2,w
 16532  1B2F  0437               	iorwf	___ftneg@f1+1,w
 16533  1B30  0436               	iorwf	___ftneg@f1,w
 16534  1B31  1903               	skipnz
 16535  1B32  0008               	return
 16536  1B33  3080               	movlw	128
 16537  1B34  06B8               	xorwf	___ftneg@f1+2,f
 16538  1B35  0008               	return
 16539  1B36                     __end_of___ftneg:	
 16540                           
 16541                           	psect	text112
 16542  0D3B                     __ptext112:	
 16543 ;; *************** function ___ftdiv *****************
 16544 ;; Defined at:
 16545 ;;		line 49 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\pic\ftdiv.c"
 16546 ;; Parameters:    Size  Location     Type
 16547 ;;  f2              3    6[BANK0 ] float 
 16548 ;;  f1              3    9[BANK0 ] float 
 16549 ;; Auto vars:     Size  Location     Type
 16550 ;;  f3              3   17[BANK0 ] float 
 16551 ;;  sign            1   21[BANK0 ] unsigned char 
 16552 ;;  exp             1   20[BANK0 ] unsigned char 
 16553 ;;  cntr            1   16[BANK0 ] unsigned char 
 16554 ;; Return value:  Size  Location     Type
 16555 ;;                  3    6[BANK0 ] float 
 16556 ;; Registers used:
 16557 ;;		wreg, status,2, status,0, pclath, cstack
 16558 ;; Tracked objects:
 16559 ;;		On entry : 0/0
 16560 ;;		On exit  : 0/0
 16561 ;;		Unchanged: 0/0
 16562 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16563 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16564 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16565 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16566 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16567 ;;Total ram usage:       16 bytes
 16568 ;; Hardware stack levels used:    1
 16569 ;; Hardware stack levels required when called:    4
 16570 ;; This function calls:
 16571 ;;		___ftpack
 16572 ;; This function is called by:
 16573 ;;		_getDimmerLights_PercentToValue
 16574 ;;		_getDimmerLights_ValueToPercent
 16575 ;; This function uses a non-reentrant model
 16576 ;;
 16577                           
 16578                           
 16579                           ;psect for function ___ftdiv
 16580  0D3B                     ___ftdiv:	
 16581                           
 16582                           ;incstack = 0
 16583                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
 16584  0D3B  0020               	movlb	0	; select bank0
 16585  0D3C  0829               	movf	___ftdiv@f1,w
 16586  0D3D  00AC               	movwf	??___ftdiv
 16587  0D3E  082A               	movf	___ftdiv@f1+1,w
 16588  0D3F  00AD               	movwf	??___ftdiv+1
 16589  0D40  082B               	movf	___ftdiv@f1+2,w
 16590  0D41  00AE               	movwf	??___ftdiv+2
 16591  0D42  1003               	clrc
 16592  0D43  0D2D               	rlf	??___ftdiv+1,w
 16593  0D44  0D2E               	rlf	??___ftdiv+2,w
 16594  0D45  00AF               	movwf	??___ftdiv+3
 16595  0D46  082F               	movf	??___ftdiv+3,w
 16596  0D47  00B4               	movwf	___ftdiv@exp
 16597  0D48  08B4               	movf	___ftdiv@exp,f
 16598  0D49  1D03               	skipz
 16599  0D4A  2D52               	goto	l6461
 16600  0D4B  3000               	movlw	0
 16601  0D4C  00A6               	movwf	?___ftdiv
 16602  0D4D  3000               	movlw	0
 16603  0D4E  00A7               	movwf	?___ftdiv+1
 16604  0D4F  3000               	movlw	0
 16605  0D50  00A8               	movwf	?___ftdiv+2
 16606  0D51  0008               	return
 16607  0D52                     l6461:	
 16608  0D52  0826               	movf	___ftdiv@f2,w
 16609  0D53  00AC               	movwf	??___ftdiv
 16610  0D54  0827               	movf	___ftdiv@f2+1,w
 16611  0D55  00AD               	movwf	??___ftdiv+1
 16612  0D56  0828               	movf	___ftdiv@f2+2,w
 16613  0D57  00AE               	movwf	??___ftdiv+2
 16614  0D58  1003               	clrc
 16615  0D59  0D2D               	rlf	??___ftdiv+1,w
 16616  0D5A  0D2E               	rlf	??___ftdiv+2,w
 16617  0D5B  00AF               	movwf	??___ftdiv+3
 16618  0D5C  082F               	movf	??___ftdiv+3,w
 16619  0D5D  00B5               	movwf	___ftdiv@sign
 16620  0D5E  08B5               	movf	___ftdiv@sign,f
 16621  0D5F  1D03               	skipz
 16622  0D60  2D68               	goto	l6467
 16623  0D61  3000               	movlw	0
 16624  0D62  00A6               	movwf	?___ftdiv
 16625  0D63  3000               	movlw	0
 16626  0D64  00A7               	movwf	?___ftdiv+1
 16627  0D65  3000               	movlw	0
 16628  0D66  00A8               	movwf	?___ftdiv+2
 16629  0D67  0008               	return
 16630  0D68                     l6467:	
 16631  0D68  3000               	movlw	0
 16632  0D69  00B1               	movwf	___ftdiv@f3
 16633  0D6A  3000               	movlw	0
 16634  0D6B  00B2               	movwf	___ftdiv@f3+1
 16635  0D6C  3000               	movlw	0
 16636  0D6D  00B3               	movwf	___ftdiv@f3+2
 16637  0D6E  3089               	movlw	137
 16638  0D6F  0735               	addwf	___ftdiv@sign,w
 16639  0D70  00AC               	movwf	??___ftdiv
 16640  0D71  082C               	movf	??___ftdiv,w
 16641  0D72  02B4               	subwf	___ftdiv@exp,f
 16642  0D73  0829               	movf	___ftdiv@f1,w
 16643  0D74  00AC               	movwf	??___ftdiv
 16644  0D75  082A               	movf	___ftdiv@f1+1,w
 16645  0D76  00AD               	movwf	??___ftdiv+1
 16646  0D77  082B               	movf	___ftdiv@f1+2,w
 16647  0D78  00AE               	movwf	??___ftdiv+2
 16648  0D79  3010               	movlw	16
 16649  0D7A                     u5605:	
 16650  0D7A  36AE               	lsrf	??___ftdiv+2,f
 16651  0D7B  0CAD               	rrf	??___ftdiv+1,f
 16652  0D7C  0CAC               	rrf	??___ftdiv,f
 16653  0D7D  0B89               	decfsz	9,f
 16654  0D7E  2D7A               	goto	u5605
 16655  0D7F  082C               	movf	??___ftdiv,w
 16656  0D80  00AF               	movwf	??___ftdiv+3
 16657  0D81  082F               	movf	??___ftdiv+3,w
 16658  0D82  00B5               	movwf	___ftdiv@sign
 16659  0D83  0826               	movf	___ftdiv@f2,w
 16660  0D84  00AC               	movwf	??___ftdiv
 16661  0D85  0827               	movf	___ftdiv@f2+1,w
 16662  0D86  00AD               	movwf	??___ftdiv+1
 16663  0D87  0828               	movf	___ftdiv@f2+2,w
 16664  0D88  00AE               	movwf	??___ftdiv+2
 16665  0D89  3010               	movlw	16
 16666  0D8A                     u5615:	
 16667  0D8A  36AE               	lsrf	??___ftdiv+2,f
 16668  0D8B  0CAD               	rrf	??___ftdiv+1,f
 16669  0D8C  0CAC               	rrf	??___ftdiv,f
 16670  0D8D  0B89               	decfsz	9,f
 16671  0D8E  2D8A               	goto	u5615
 16672  0D8F  082C               	movf	??___ftdiv,w
 16673  0D90  00AF               	movwf	??___ftdiv+3
 16674  0D91  082F               	movf	??___ftdiv+3,w
 16675  0D92  06B5               	xorwf	___ftdiv@sign,f
 16676  0D93  3080               	movlw	128
 16677  0D94  00AC               	movwf	??___ftdiv
 16678  0D95  082C               	movf	??___ftdiv,w
 16679  0D96  05B5               	andwf	___ftdiv@sign,f
 16680  0D97  17AA               	bsf	___ftdiv@f1+1,7
 16681  0D98  30FF               	movlw	255
 16682  0D99  05A9               	andwf	___ftdiv@f1,f
 16683  0D9A  30FF               	movlw	255
 16684  0D9B  05AA               	andwf	___ftdiv@f1+1,f
 16685  0D9C  3000               	movlw	0
 16686  0D9D  05AB               	andwf	___ftdiv@f1+2,f
 16687  0D9E  17A7               	bsf	___ftdiv@f2+1,7
 16688  0D9F  30FF               	movlw	255
 16689  0DA0  05A6               	andwf	___ftdiv@f2,f
 16690  0DA1  30FF               	movlw	255
 16691  0DA2  05A7               	andwf	___ftdiv@f2+1,f
 16692  0DA3  3000               	movlw	0
 16693  0DA4  05A8               	andwf	___ftdiv@f2+2,f
 16694  0DA5  3018               	movlw	24
 16695  0DA6  00AC               	movwf	??___ftdiv
 16696  0DA7  082C               	movf	??___ftdiv,w
 16697  0DA8  00B0               	movwf	___ftdiv@cntr
 16698  0DA9                     l6481:	
 16699  0DA9  3001               	movlw	1
 16700  0DAA                     u5625:	
 16701  0DAA  35B1               	lslf	___ftdiv@f3,f
 16702  0DAB  0DB2               	rlf	___ftdiv@f3+1,f
 16703  0DAC  0DB3               	rlf	___ftdiv@f3+2,f
 16704  0DAD  0B89               	decfsz	9,f
 16705  0DAE  2DAA               	goto	u5625
 16706  0DAF  0828               	movf	___ftdiv@f2+2,w
 16707  0DB0  022B               	subwf	___ftdiv@f1+2,w
 16708  0DB1  1D03               	skipz
 16709  0DB2  2DB9               	goto	u5635
 16710  0DB3  0827               	movf	___ftdiv@f2+1,w
 16711  0DB4  022A               	subwf	___ftdiv@f1+1,w
 16712  0DB5  1D03               	skipz
 16713  0DB6  2DB9               	goto	u5635
 16714  0DB7  0826               	movf	___ftdiv@f2,w
 16715  0DB8  0229               	subwf	___ftdiv@f1,w
 16716  0DB9                     u5635:	
 16717  0DB9  1C03               	skipc
 16718  0DBA  2DC2               	goto	l6489
 16719  0DBB  0826               	movf	___ftdiv@f2,w
 16720  0DBC  02A9               	subwf	___ftdiv@f1,f
 16721  0DBD  0827               	movf	___ftdiv@f2+1,w
 16722  0DBE  3BAA               	subwfb	___ftdiv@f1+1,f
 16723  0DBF  0828               	movf	___ftdiv@f2+2,w
 16724  0DC0  3BAB               	subwfb	___ftdiv@f1+2,f
 16725  0DC1  1431               	bsf	___ftdiv@f3,0
 16726  0DC2                     l6489:	
 16727  0DC2  3001               	movlw	1
 16728  0DC3                     u5645:	
 16729  0DC3  35A9               	lslf	___ftdiv@f1,f
 16730  0DC4  0DAA               	rlf	___ftdiv@f1+1,f
 16731  0DC5  0DAB               	rlf	___ftdiv@f1+2,f
 16732  0DC6  0B89               	decfsz	9,f
 16733  0DC7  2DC3               	goto	u5645
 16734  0DC8  3001               	movlw	1
 16735  0DC9  02B0               	subwf	___ftdiv@cntr,f
 16736  0DCA  1D03               	btfss	3,2
 16737  0DCB  2DA9               	goto	l6481
 16738  0DCC  0831               	movf	___ftdiv@f3,w
 16739  0DCD  00F2               	movwf	___ftpack@arg
 16740  0DCE  0832               	movf	___ftdiv@f3+1,w
 16741  0DCF  00F3               	movwf	___ftpack@arg+1
 16742  0DD0  0833               	movf	___ftdiv@f3+2,w
 16743  0DD1  00F4               	movwf	___ftpack@arg+2
 16744  0DD2  0834               	movf	___ftdiv@exp,w
 16745  0DD3  00AC               	movwf	??___ftdiv
 16746  0DD4  082C               	movf	??___ftdiv,w
 16747  0DD5  00F5               	movwf	___ftpack@exp
 16748  0DD6  0835               	movf	___ftdiv@sign,w
 16749  0DD7  00AD               	movwf	??___ftdiv+1
 16750  0DD8  082D               	movf	??___ftdiv+1,w
 16751  0DD9  00F6               	movwf	___ftpack@sign
 16752  0DDA  3197  27A0         	fcall	___ftpack
 16753  0DDC  0872               	movf	?___ftpack,w
 16754  0DDD  0020               	movlb	0	; select bank0
 16755  0DDE  00A6               	movwf	?___ftdiv
 16756  0DDF  0873               	movf	?___ftpack+1,w
 16757  0DE0  00A7               	movwf	?___ftdiv+1
 16758  0DE1  0874               	movf	?___ftpack+2,w
 16759  0DE2  00A8               	movwf	?___ftdiv+2
 16760  0DE3  0008               	return
 16761  0DE4                     __end_of___ftdiv:	
 16762                           
 16763                           	psect	text113
 16764  035D                     __ptext113:	
 16765 ;; *************** function ___ftadd *****************
 16766 ;; Defined at:
 16767 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftadd.c"
 16768 ;; Parameters:    Size  Location     Type
 16769 ;;  f1              3   25[BANK0 ] float 
 16770 ;;  f2              3   28[BANK0 ] float 
 16771 ;; Auto vars:     Size  Location     Type
 16772 ;;  exp1            1   37[BANK0 ] unsigned char 
 16773 ;;  exp2            1   36[BANK0 ] unsigned char 
 16774 ;;  sign            1   35[BANK0 ] unsigned char 
 16775 ;; Return value:  Size  Location     Type
 16776 ;;                  3   25[BANK0 ] float 
 16777 ;; Registers used:
 16778 ;;		wreg, status,2, status,0, pclath, cstack
 16779 ;; Tracked objects:
 16780 ;;		On entry : 0/0
 16781 ;;		On exit  : 0/0
 16782 ;;		Unchanged: 0/0
 16783 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16784 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16785 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16786 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16787 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16788 ;;Total ram usage:       13 bytes
 16789 ;; Hardware stack levels used:    1
 16790 ;; Hardware stack levels required when called:    4
 16791 ;; This function calls:
 16792 ;;		___ftpack
 16793 ;; This function is called by:
 16794 ;;		_getDimmerLights_PercentToValue
 16795 ;;		_getDimmerLights_ValueToPercent
 16796 ;; This function uses a non-reentrant model
 16797 ;;
 16798                           
 16799                           
 16800                           ;psect for function ___ftadd
 16801  035D                     ___ftadd:	
 16802                           
 16803                           ;incstack = 0
 16804                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
 16805  035D  0020               	movlb	0	; select bank0
 16806  035E  0839               	movf	___ftadd@f1,w
 16807  035F  00BF               	movwf	??___ftadd
 16808  0360  083A               	movf	___ftadd@f1+1,w
 16809  0361  00C0               	movwf	??___ftadd+1
 16810  0362  083B               	movf	___ftadd@f1+2,w
 16811  0363  00C1               	movwf	??___ftadd+2
 16812  0364  1003               	clrc
 16813  0365  0D40               	rlf	??___ftadd+1,w
 16814  0366  0D41               	rlf	??___ftadd+2,w
 16815  0367  00C2               	movwf	??___ftadd+3
 16816  0368  0842               	movf	??___ftadd+3,w
 16817  0369  00C5               	movwf	___ftadd@exp1
 16818  036A  083C               	movf	___ftadd@f2,w
 16819  036B  00BF               	movwf	??___ftadd
 16820  036C  083D               	movf	___ftadd@f2+1,w
 16821  036D  00C0               	movwf	??___ftadd+1
 16822  036E  083E               	movf	___ftadd@f2+2,w
 16823  036F  00C1               	movwf	??___ftadd+2
 16824  0370  1003               	clrc
 16825  0371  0D40               	rlf	??___ftadd+1,w
 16826  0372  0D41               	rlf	??___ftadd+2,w
 16827  0373  00C2               	movwf	??___ftadd+3
 16828  0374  0842               	movf	??___ftadd+3,w
 16829  0375  00C4               	movwf	___ftadd@exp2
 16830  0376  0845               	movf	___ftadd@exp1,w
 16831  0377  1903               	btfsc	3,2
 16832  0378  2B85               	goto	l6391
 16833  0379  0844               	movf	___ftadd@exp2,w
 16834  037A  0245               	subwf	___ftadd@exp1,w
 16835  037B  1803               	skipnc
 16836  037C  2B8C               	goto	l6395
 16837  037D  0345               	decf	___ftadd@exp1,w
 16838  037E  3AFF               	xorlw	255
 16839  037F  0744               	addwf	___ftadd@exp2,w
 16840  0380  00BF               	movwf	??___ftadd
 16841  0381  3019               	movlw	25
 16842  0382  023F               	subwf	??___ftadd,w
 16843  0383  1C03               	skipc
 16844  0384  2B8C               	goto	l6395
 16845  0385                     l6391:	
 16846  0385  083C               	movf	___ftadd@f2,w
 16847  0386  00B9               	movwf	?___ftadd
 16848  0387  083D               	movf	___ftadd@f2+1,w
 16849  0388  00BA               	movwf	?___ftadd+1
 16850  0389  083E               	movf	___ftadd@f2+2,w
 16851  038A  00BB               	movwf	?___ftadd+2
 16852  038B  0008               	return
 16853  038C                     l6395:	
 16854  038C  0844               	movf	___ftadd@exp2,w
 16855  038D  1903               	btfsc	3,2
 16856  038E  0008               	return
 16857  038F  0845               	movf	___ftadd@exp1,w
 16858  0390  0244               	subwf	___ftadd@exp2,w
 16859  0391  1803               	skipnc
 16860  0392  2B9B               	goto	l6401
 16861  0393  0344               	decf	___ftadd@exp2,w
 16862  0394  3AFF               	xorlw	255
 16863  0395  0745               	addwf	___ftadd@exp1,w
 16864  0396  00BF               	movwf	??___ftadd
 16865  0397  3019               	movlw	25
 16866  0398  023F               	subwf	??___ftadd,w
 16867  0399  1803               	btfsc	3,0
 16868  039A  0008               	return
 16869  039B                     l6401:	
 16870  039B  3006               	movlw	6
 16871  039C  00BF               	movwf	??___ftadd
 16872  039D  083F               	movf	??___ftadd,w
 16873  039E  00C3               	movwf	___ftadd@sign
 16874  039F  1BBB               	btfsc	___ftadd@f1+2,7
 16875  03A0  17C3               	bsf	___ftadd@sign,7
 16876  03A1  1BBE               	btfsc	___ftadd@f2+2,7
 16877  03A2  1743               	bsf	___ftadd@sign,6
 16878  03A3  17BA               	bsf	___ftadd@f1+1,7
 16879  03A4  30FF               	movlw	255
 16880  03A5  05B9               	andwf	___ftadd@f1,f
 16881  03A6  30FF               	movlw	255
 16882  03A7  05BA               	andwf	___ftadd@f1+1,f
 16883  03A8  3000               	movlw	0
 16884  03A9  05BB               	andwf	___ftadd@f1+2,f
 16885  03AA  17BD               	bsf	___ftadd@f2+1,7
 16886  03AB  30FF               	movlw	255
 16887  03AC  05BC               	andwf	___ftadd@f2,f
 16888  03AD  30FF               	movlw	255
 16889  03AE  05BD               	andwf	___ftadd@f2+1,f
 16890  03AF  3000               	movlw	0
 16891  03B0  05BE               	andwf	___ftadd@f2+2,f
 16892  03B1  0844               	movf	___ftadd@exp2,w
 16893  03B2  0245               	subwf	___ftadd@exp1,w
 16894  03B3  1803               	skipnc
 16895  03B4  2BD7               	goto	l6423
 16896  03B5                     l6413:	
 16897  03B5  3001               	movlw	1
 16898  03B6                     u5445:	
 16899  03B6  35BC               	lslf	___ftadd@f2,f
 16900  03B7  0DBD               	rlf	___ftadd@f2+1,f
 16901  03B8  0DBE               	rlf	___ftadd@f2+2,f
 16902  03B9  0B89               	decfsz	9,f
 16903  03BA  2BB6               	goto	u5445
 16904  03BB  3001               	movlw	1
 16905  03BC  02C4               	subwf	___ftadd@exp2,f
 16906  03BD  0844               	movf	___ftadd@exp2,w
 16907  03BE  0645               	xorwf	___ftadd@exp1,w
 16908  03BF  1903               	skipnz
 16909  03C0  2BD2               	goto	l6421
 16910  03C1  3001               	movlw	1
 16911  03C2  02C3               	subwf	___ftadd@sign,f
 16912  03C3  0843               	movf	___ftadd@sign,w
 16913  03C4  3907               	andlw	7
 16914  03C5  1903               	btfsc	3,2
 16915  03C6  2BD2               	goto	l6421
 16916  03C7  2BB5               	goto	l6413
 16917  03C8                     l6419:	
 16918  03C8  3001               	movlw	1
 16919  03C9                     u5475:	
 16920  03C9  36BB               	lsrf	___ftadd@f1+2,f
 16921  03CA  0CBA               	rrf	___ftadd@f1+1,f
 16922  03CB  0CB9               	rrf	___ftadd@f1,f
 16923  03CC  0B89               	decfsz	9,f
 16924  03CD  2BC9               	goto	u5475
 16925  03CE  3001               	movlw	1
 16926  03CF  00BF               	movwf	??___ftadd
 16927  03D0  083F               	movf	??___ftadd,w
 16928  03D1  07C5               	addwf	___ftadd@exp1,f
 16929  03D2                     l6421:	
 16930  03D2  0845               	movf	___ftadd@exp1,w
 16931  03D3  0644               	xorwf	___ftadd@exp2,w
 16932  03D4  1903               	btfsc	3,2
 16933  03D5  2BFC               	goto	l3208
 16934  03D6  2BC8               	goto	l6419
 16935  03D7                     l6423:	
 16936  03D7  0845               	movf	___ftadd@exp1,w
 16937  03D8  0244               	subwf	___ftadd@exp2,w
 16938  03D9  1803               	skipnc
 16939  03DA  2BFC               	goto	l3208
 16940  03DB                     l6425:	
 16941  03DB  3001               	movlw	1
 16942  03DC                     u5505:	
 16943  03DC  35B9               	lslf	___ftadd@f1,f
 16944  03DD  0DBA               	rlf	___ftadd@f1+1,f
 16945  03DE  0DBB               	rlf	___ftadd@f1+2,f
 16946  03DF  0B89               	decfsz	9,f
 16947  03E0  2BDC               	goto	u5505
 16948  03E1  3001               	movlw	1
 16949  03E2  02C5               	subwf	___ftadd@exp1,f
 16950  03E3  0844               	movf	___ftadd@exp2,w
 16951  03E4  0645               	xorwf	___ftadd@exp1,w
 16952  03E5  1903               	skipnz
 16953  03E6  2BF8               	goto	l6433
 16954  03E7  3001               	movlw	1
 16955  03E8  02C3               	subwf	___ftadd@sign,f
 16956  03E9  0843               	movf	___ftadd@sign,w
 16957  03EA  3907               	andlw	7
 16958  03EB  1903               	btfsc	3,2
 16959  03EC  2BF8               	goto	l6433
 16960  03ED  2BDB               	goto	l6425
 16961  03EE                     l6431:	
 16962  03EE  3001               	movlw	1
 16963  03EF                     u5535:	
 16964  03EF  36BE               	lsrf	___ftadd@f2+2,f
 16965  03F0  0CBD               	rrf	___ftadd@f2+1,f
 16966  03F1  0CBC               	rrf	___ftadd@f2,f
 16967  03F2  0B89               	decfsz	9,f
 16968  03F3  2BEF               	goto	u5535
 16969  03F4  3001               	movlw	1
 16970  03F5  00BF               	movwf	??___ftadd
 16971  03F6  083F               	movf	??___ftadd,w
 16972  03F7  07C4               	addwf	___ftadd@exp2,f
 16973  03F8                     l6433:	
 16974  03F8  0845               	movf	___ftadd@exp1,w
 16975  03F9  0644               	xorwf	___ftadd@exp2,w
 16976  03FA  1D03               	skipz
 16977  03FB  2BEE               	goto	l6431
 16978  03FC                     l3208:	
 16979  03FC  1FC3               	btfss	___ftadd@sign,7
 16980  03FD  2C0E               	goto	l6437
 16981  03FE  30FF               	movlw	255
 16982  03FF  06B9               	xorwf	___ftadd@f1,f
 16983  0400  30FF               	movlw	255
 16984  0401  06BA               	xorwf	___ftadd@f1+1,f
 16985  0402  30FF               	movlw	255
 16986  0403  06BB               	xorwf	___ftadd@f1+2,f
 16987  0404  3001               	movlw	1
 16988  0405  07B9               	addwf	___ftadd@f1,f
 16989  0406  3000               	movlw	0
 16990  0407  1803               	skipnc
 16991  0408  3001               	movlw	1
 16992  0409  07BA               	addwf	___ftadd@f1+1,f
 16993  040A  3000               	movlw	0
 16994  040B  1803               	skipnc
 16995  040C  3001               	movlw	1
 16996  040D  07BB               	addwf	___ftadd@f1+2,f
 16997  040E                     l6437:	
 16998  040E  1F43               	btfss	___ftadd@sign,6
 16999  040F  2C20               	goto	l6441
 17000  0410  30FF               	movlw	255
 17001  0411  06BC               	xorwf	___ftadd@f2,f
 17002  0412  30FF               	movlw	255
 17003  0413  06BD               	xorwf	___ftadd@f2+1,f
 17004  0414  30FF               	movlw	255
 17005  0415  06BE               	xorwf	___ftadd@f2+2,f
 17006  0416  3001               	movlw	1
 17007  0417  07BC               	addwf	___ftadd@f2,f
 17008  0418  3000               	movlw	0
 17009  0419  1803               	skipnc
 17010  041A  3001               	movlw	1
 17011  041B  07BD               	addwf	___ftadd@f2+1,f
 17012  041C  3000               	movlw	0
 17013  041D  1803               	skipnc
 17014  041E  3001               	movlw	1
 17015  041F  07BE               	addwf	___ftadd@f2+2,f
 17016  0420                     l6441:	
 17017  0420  01C3               	clrf	___ftadd@sign
 17018  0421  0839               	movf	___ftadd@f1,w
 17019  0422  07BC               	addwf	___ftadd@f2,f
 17020  0423  083A               	movf	___ftadd@f1+1,w
 17021  0424  3DBD               	addwfc	___ftadd@f2+1,f
 17022  0425  083B               	movf	___ftadd@f1+2,w
 17023  0426  3DBE               	addwfc	___ftadd@f2+2,f
 17024  0427  1FBE               	btfss	___ftadd@f2+2,7
 17025  0428  2C3B               	goto	l6451
 17026  0429  30FF               	movlw	255
 17027  042A  06BC               	xorwf	___ftadd@f2,f
 17028  042B  30FF               	movlw	255
 17029  042C  06BD               	xorwf	___ftadd@f2+1,f
 17030  042D  30FF               	movlw	255
 17031  042E  06BE               	xorwf	___ftadd@f2+2,f
 17032  042F  3001               	movlw	1
 17033  0430  07BC               	addwf	___ftadd@f2,f
 17034  0431  3000               	movlw	0
 17035  0432  1803               	skipnc
 17036  0433  3001               	movlw	1
 17037  0434  07BD               	addwf	___ftadd@f2+1,f
 17038  0435  3000               	movlw	0
 17039  0436  1803               	skipnc
 17040  0437  3001               	movlw	1
 17041  0438  07BE               	addwf	___ftadd@f2+2,f
 17042  0439  01C3               	clrf	___ftadd@sign
 17043  043A  0AC3               	incf	___ftadd@sign,f
 17044  043B                     l6451:	
 17045  043B  083C               	movf	___ftadd@f2,w
 17046  043C  00F2               	movwf	___ftpack@arg
 17047  043D  083D               	movf	___ftadd@f2+1,w
 17048  043E  00F3               	movwf	___ftpack@arg+1
 17049  043F  083E               	movf	___ftadd@f2+2,w
 17050  0440  00F4               	movwf	___ftpack@arg+2
 17051  0441  0845               	movf	___ftadd@exp1,w
 17052  0442  00BF               	movwf	??___ftadd
 17053  0443  083F               	movf	??___ftadd,w
 17054  0444  00F5               	movwf	___ftpack@exp
 17055  0445  0843               	movf	___ftadd@sign,w
 17056  0446  00C0               	movwf	??___ftadd+1
 17057  0447  0840               	movf	??___ftadd+1,w
 17058  0448  00F6               	movwf	___ftpack@sign
 17059  0449  3197  27A0         	fcall	___ftpack
 17060  044B  0872               	movf	?___ftpack,w
 17061  044C  0020               	movlb	0	; select bank0
 17062  044D  00B9               	movwf	?___ftadd
 17063  044E  0873               	movf	?___ftpack+1,w
 17064  044F  00BA               	movwf	?___ftadd+1
 17065  0450  0874               	movf	?___ftpack+2,w
 17066  0451  00BB               	movwf	?___ftadd+2
 17067  0452  0008               	return
 17068  0453                     __end_of___ftadd:	
 17069                           
 17070                           	psect	text114
 17071  1FDE                     __ptext114:	
 17072 ;; *************** function ___awtoft *****************
 17073 ;; Defined at:
 17074 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awtoft.c"
 17075 ;; Parameters:    Size  Location     Type
 17076 ;;  c               2    0[BANK0 ] int 
 17077 ;; Auto vars:     Size  Location     Type
 17078 ;;  sign            1    5[BANK0 ] unsigned char 
 17079 ;; Return value:  Size  Location     Type
 17080 ;;                  3    0[BANK0 ] float 
 17081 ;; Registers used:
 17082 ;;		wreg, status,2, status,0, pclath, cstack
 17083 ;; Tracked objects:
 17084 ;;		On entry : 0/0
 17085 ;;		On exit  : 0/0
 17086 ;;		Unchanged: 0/0
 17087 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17088 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17089 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17090 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17091 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17092 ;;Total ram usage:        6 bytes
 17093 ;; Hardware stack levels used:    1
 17094 ;; Hardware stack levels required when called:    4
 17095 ;; This function calls:
 17096 ;;		___ftpack
 17097 ;; This function is called by:
 17098 ;;		_getDimmerLights_PercentToValue
 17099 ;;		_getDimmerLights_ValueToPercent
 17100 ;; This function uses a non-reentrant model
 17101 ;;
 17102                           
 17103                           
 17104                           ;psect for function ___awtoft
 17105  1FDE                     ___awtoft:	
 17106                           
 17107                           ;incstack = 0
 17108                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
 17109  1FDE  0020               	movlb	0	; select bank0
 17110  1FDF  01A5               	clrf	___awtoft@sign
 17111  1FE0  1FA1               	btfss	___awtoft@c+1,7
 17112  1FE1  2FE9               	goto	l9141
 17113  1FE2  09A0               	comf	___awtoft@c,f
 17114  1FE3  09A1               	comf	___awtoft@c+1,f
 17115  1FE4  0AA0               	incf	___awtoft@c,f
 17116  1FE5  1903               	skipnz
 17117  1FE6  0AA1               	incf	___awtoft@c+1,f
 17118  1FE7  01A5               	clrf	___awtoft@sign
 17119  1FE8  0AA5               	incf	___awtoft@sign,f
 17120  1FE9                     l9141:	
 17121  1FE9  0820               	movf	___awtoft@c,w
 17122  1FEA  00F2               	movwf	___ftpack@arg
 17123  1FEB  0821               	movf	___awtoft@c+1,w
 17124  1FEC  00F3               	movwf	___ftpack@arg+1
 17125  1FED  01F4               	clrf	___ftpack@arg+2
 17126  1FEE  308E               	movlw	142
 17127  1FEF  00A3               	movwf	??___awtoft
 17128  1FF0  0823               	movf	??___awtoft,w
 17129  1FF1  00F5               	movwf	___ftpack@exp
 17130  1FF2  0825               	movf	___awtoft@sign,w
 17131  1FF3  00A4               	movwf	??___awtoft+1
 17132  1FF4  0824               	movf	??___awtoft+1,w
 17133  1FF5  00F6               	movwf	___ftpack@sign
 17134  1FF6  3197  27A0         	fcall	___ftpack
 17135  1FF8  0872               	movf	?___ftpack,w
 17136  1FF9  0020               	movlb	0	; select bank0
 17137  1FFA  00A0               	movwf	?___awtoft
 17138  1FFB  0873               	movf	?___ftpack+1,w
 17139  1FFC  00A1               	movwf	?___awtoft+1
 17140  1FFD  0874               	movf	?___ftpack+2,w
 17141  1FFE  00A2               	movwf	?___awtoft+2
 17142  1FFF  0008               	return
 17143  2000                     __end_of___awtoft:	
 17144                           
 17145                           	psect	text115
 17146  17A0                     __ptext115:	
 17147 ;; *************** function ___ftpack *****************
 17148 ;; Defined at:
 17149 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\float.c"
 17150 ;; Parameters:    Size  Location     Type
 17151 ;;  arg             3    2[COMMON] unsigned um
 17152 ;;  exp             1    5[COMMON] unsigned char 
 17153 ;;  sign            1    6[COMMON] unsigned char 
 17154 ;; Auto vars:     Size  Location     Type
 17155 ;;		None
 17156 ;; Return value:  Size  Location     Type
 17157 ;;                  3    2[COMMON] float 
 17158 ;; Registers used:
 17159 ;;		wreg, status,2, status,0
 17160 ;; Tracked objects:
 17161 ;;		On entry : 0/0
 17162 ;;		On exit  : 0/0
 17163 ;;		Unchanged: 0/0
 17164 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17165 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17166 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17167 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17168 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17169 ;;Total ram usage:        8 bytes
 17170 ;; Hardware stack levels used:    1
 17171 ;; Hardware stack levels required when called:    3
 17172 ;; This function calls:
 17173 ;;		Nothing
 17174 ;; This function is called by:
 17175 ;;		___awtoft
 17176 ;;		___ftadd
 17177 ;;		___ftdiv
 17178 ;;		___ftmul
 17179 ;; This function uses a non-reentrant model
 17180 ;;
 17181                           
 17182                           
 17183                           ;psect for function ___ftpack
 17184  17A0                     ___ftpack:	
 17185                           
 17186                           ;incstack = 0
 17187                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 17188  17A0  0875               	movf	___ftpack@exp,w
 17189  17A1  1903               	btfsc	3,2
 17190  17A2  2FA8               	goto	l6239
 17191  17A3  0874               	movf	___ftpack@arg+2,w
 17192  17A4  0473               	iorwf	___ftpack@arg+1,w
 17193  17A5  0472               	iorwf	___ftpack@arg,w
 17194  17A6  1D03               	skipz
 17195  17A7  2FB9               	goto	l6245
 17196  17A8                     l6239:	
 17197  17A8  3000               	movlw	0
 17198  17A9  00F2               	movwf	?___ftpack
 17199  17AA  3000               	movlw	0
 17200  17AB  00F3               	movwf	?___ftpack+1
 17201  17AC  3000               	movlw	0
 17202  17AD  00F4               	movwf	?___ftpack+2
 17203  17AE  0008               	return
 17204  17AF                     l6243:	
 17205  17AF  3001               	movlw	1
 17206  17B0  00F7               	movwf	??___ftpack
 17207  17B1  0877               	movf	??___ftpack,w
 17208  17B2  07F5               	addwf	___ftpack@exp,f
 17209  17B3  3001               	movlw	1
 17210  17B4                     u5055:	
 17211  17B4  36F4               	lsrf	___ftpack@arg+2,f
 17212  17B5  0CF3               	rrf	___ftpack@arg+1,f
 17213  17B6  0CF2               	rrf	___ftpack@arg,f
 17214  17B7  0B89               	decfsz	9,f
 17215  17B8  2FB4               	goto	u5055
 17216  17B9                     l6245:	
 17217  17B9  30FE               	movlw	254
 17218  17BA  0574               	andwf	___ftpack@arg+2,w
 17219  17BB  1903               	btfsc	3,2
 17220  17BC  2FD2               	goto	l3179
 17221  17BD  2FAF               	goto	l6243
 17222  17BE                     l6247:	
 17223  17BE  3001               	movlw	1
 17224  17BF  00F7               	movwf	??___ftpack
 17225  17C0  0877               	movf	??___ftpack,w
 17226  17C1  07F5               	addwf	___ftpack@exp,f
 17227  17C2  3001               	movlw	1
 17228  17C3  07F2               	addwf	___ftpack@arg,f
 17229  17C4  3000               	movlw	0
 17230  17C5  1803               	skipnc
 17231  17C6  3001               	movlw	1
 17232  17C7  07F3               	addwf	___ftpack@arg+1,f
 17233  17C8  3000               	movlw	0
 17234  17C9  1803               	skipnc
 17235  17CA  3001               	movlw	1
 17236  17CB  07F4               	addwf	___ftpack@arg+2,f
 17237  17CC  3001               	movlw	1
 17238  17CD                     u5075:	
 17239  17CD  36F4               	lsrf	___ftpack@arg+2,f
 17240  17CE  0CF3               	rrf	___ftpack@arg+1,f
 17241  17CF  0CF2               	rrf	___ftpack@arg,f
 17242  17D0  0B89               	decfsz	9,f
 17243  17D1  2FCD               	goto	u5075
 17244  17D2                     l3179:	
 17245  17D2  30FF               	movlw	255
 17246  17D3  0574               	andwf	___ftpack@arg+2,w
 17247  17D4  1903               	btfsc	3,2
 17248  17D5  2FDF               	goto	l6255
 17249  17D6  2FBE               	goto	l6247
 17250  17D7                     l6253:	
 17251  17D7  3001               	movlw	1
 17252  17D8  02F5               	subwf	___ftpack@exp,f
 17253  17D9  3001               	movlw	1
 17254  17DA                     u5095:	
 17255  17DA  35F2               	lslf	___ftpack@arg,f
 17256  17DB  0DF3               	rlf	___ftpack@arg+1,f
 17257  17DC  0DF4               	rlf	___ftpack@arg+2,f
 17258  17DD  0B89               	decfsz	9,f
 17259  17DE  2FDA               	goto	u5095
 17260  17DF                     l6255:	
 17261  17DF  1FF3               	btfss	___ftpack@arg+1,7
 17262  17E0  2FD7               	goto	l6253
 17263  17E1  1875               	btfsc	___ftpack@exp,0
 17264  17E2  2FE9               	goto	l3185
 17265  17E3  30FF               	movlw	255
 17266  17E4  05F2               	andwf	___ftpack@arg,f
 17267  17E5  307F               	movlw	127
 17268  17E6  05F3               	andwf	___ftpack@arg+1,f
 17269  17E7  30FF               	movlw	255
 17270  17E8  05F4               	andwf	___ftpack@arg+2,f
 17271  17E9                     l3185:	
 17272  17E9  1003               	clrc
 17273  17EA  0CF5               	rrf	___ftpack@exp,f
 17274  17EB  0875               	movf	___ftpack@exp,w
 17275  17EC  00F7               	movwf	??___ftpack
 17276  17ED  01F8               	clrf	??___ftpack+1
 17277  17EE  01F9               	clrf	??___ftpack+2
 17278  17EF  3010               	movlw	16
 17279  17F0                     u5125:	
 17280  17F0  35F7               	lslf	??___ftpack,f
 17281  17F1  0DF8               	rlf	??___ftpack+1,f
 17282  17F2  0DF9               	rlf	??___ftpack+2,f
 17283  17F3  0B89               	decfsz	9,f
 17284  17F4  2FF0               	goto	u5125
 17285  17F5  0877               	movf	??___ftpack,w
 17286  17F6  04F2               	iorwf	___ftpack@arg,f
 17287  17F7  0878               	movf	??___ftpack+1,w
 17288  17F8  04F3               	iorwf	___ftpack@arg+1,f
 17289  17F9  0879               	movf	??___ftpack+2,w
 17290  17FA  04F4               	iorwf	___ftpack@arg+2,f
 17291  17FB  0876               	movf	___ftpack@sign,w
 17292  17FC  1903               	btfsc	3,2
 17293  17FD  0008               	return
 17294  17FE  17F4               	bsf	___ftpack@arg+2,7
 17295  17FF  0008               	return
 17296  1800                     __end_of___ftpack:	
 17297                           
 17298                           	psect	text116
 17299  1D15                     __ptext116:	
 17300 ;; *************** function _getDimmerIntr_DimmingValue *****************
 17301 ;; Defined at:
 17302 ;;		line 66 in file "../src/Dimmer_B1.c"
 17303 ;; Parameters:    Size  Location     Type
 17304 ;;  lights          1    wreg     unsigned char 
 17305 ;; Auto vars:     Size  Location     Type
 17306 ;;  lights          1    4[COMMON] unsigned char 
 17307 ;;  value           1    3[COMMON] unsigned char 
 17308 ;; Return value:  Size  Location     Type
 17309 ;;                  1    wreg      unsigned char 
 17310 ;; Registers used:
 17311 ;;		wreg, status,2
 17312 ;; Tracked objects:
 17313 ;;		On entry : 0/0
 17314 ;;		On exit  : 0/0
 17315 ;;		Unchanged: 0/0
 17316 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17317 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17318 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17319 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17320 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17321 ;;Total ram usage:        3 bytes
 17322 ;; Hardware stack levels used:    1
 17323 ;; Hardware stack levels required when called:    3
 17324 ;; This function calls:
 17325 ;;		Nothing
 17326 ;; This function is called by:
 17327 ;;		_setDimmerLights_Dimming
 17328 ;; This function uses a non-reentrant model
 17329 ;;
 17330                           
 17331                           
 17332                           ;psect for function _getDimmerIntr_DimmingValue
 17333  1D15                     _getDimmerIntr_DimmingValue:	
 17334                           
 17335                           ;incstack = 0
 17336                           ; Regs used in _getDimmerIntr_DimmingValue: [wreg+status,2]
 17337                           ;getDimmerIntr_DimmingValue@lights stored from wreg
 17338  1D15  00F4               	movwf	getDimmerIntr_DimmingValue@lights
 17339                           
 17340                           ;Dimmer_B1.c: 67: char value = 0;
 17341  1D16  01F3               	clrf	getDimmerIntr_DimmingValue@value
 17342                           
 17343                           ;Dimmer_B1.c: 69: if (lights == 1) {
 17344  1D17  0874               	movf	getDimmerIntr_DimmingValue@lights,w
 17345  1D18  3A01               	xorlw	1
 17346  1D19  1D03               	skipz
 17347  1D1A  2D1E               	goto	l7073
 17348                           
 17349                           ;Dimmer_B1.c: 70: value = DimmerIntr1.DimmingValue;
 17350  1D1B  0021               	movlb	1	; select bank1
 17351  1D1C  0866               	movf	(_DimmerIntr1^(0+128)+4),w
 17352  1D1D  2D24               	goto	L9
 17353  1D1E                     l7073:	
 17354                           ;Dimmer_B1.c: 71: }
 17355                           
 17356                           
 17357                           ;Dimmer_B1.c: 74: else if (lights == 2) {
 17358  1D1E  0874               	movf	getDimmerIntr_DimmingValue@lights,w
 17359  1D1F  3A02               	xorlw	2
 17360  1D20  1D03               	skipz
 17361  1D21  2D27               	goto	l752
 17362                           
 17363                           ;Dimmer_B1.c: 75: value = DimmerIntr2.DimmingValue;
 17364  1D22  0021               	movlb	1	; select bank1
 17365  1D23  086D               	movf	(_DimmerIntr2^(0+128)+4),w
 17366  1D24                     L9:	
 17367  1D24  00F2               	movwf	??_getDimmerIntr_DimmingValue
 17368  1D25  0872               	movf	??_getDimmerIntr_DimmingValue,w
 17369  1D26  00F3               	movwf	getDimmerIntr_DimmingValue@value
 17370  1D27                     l752:	
 17371                           
 17372                           ;Dimmer_B1.c: 76: }
 17373                           ;Dimmer_B1.c: 83: return value;
 17374  1D27  0873               	movf	getDimmerIntr_DimmingValue@value,w
 17375  1D28  0008               	return
 17376  1D29                     __end_of_getDimmerIntr_DimmingValue:	
 17377                           
 17378                           	psect	text117
 17379  12D6                     __ptext117:	
 17380 ;; *************** function _getDimmerLights_Allow_Condition *****************
 17381 ;; Defined at:
 17382 ;;		line 897 in file "../src/Dimmer_B1.c"
 17383 ;; Parameters:    Size  Location     Type
 17384 ;;  lights          1    wreg     unsigned char 
 17385 ;; Auto vars:     Size  Location     Type
 17386 ;;  lights          1    7[COMMON] unsigned char 
 17387 ;;  allow           1    8[COMMON] unsigned char 
 17388 ;; Return value:  Size  Location     Type
 17389 ;;                  1    wreg      unsigned char 
 17390 ;; Registers used:
 17391 ;;		wreg, status,2, status,0, pclath, cstack
 17392 ;; Tracked objects:
 17393 ;;		On entry : 0/0
 17394 ;;		On exit  : 0/0
 17395 ;;		Unchanged: 0/0
 17396 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17397 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17398 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17399 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17400 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17401 ;;Total ram usage:        6 bytes
 17402 ;; Hardware stack levels used:    1
 17403 ;; Hardware stack levels required when called:    4
 17404 ;; This function calls:
 17405 ;;		_getLoad_OK
 17406 ;; This function is called by:
 17407 ;;		_setDimmerLights_Main
 17408 ;; This function uses a non-reentrant model
 17409 ;;
 17410                           
 17411                           
 17412                           ;psect for function _getDimmerLights_Allow_Condition
 17413  12D6                     _getDimmerLights_Allow_Condition:	
 17414                           
 17415                           ;incstack = 0
 17416                           ; Regs used in _getDimmerLights_Allow_Condition: [wreg+status,2+status,0+pclath+cstack]
 17417                           ;getDimmerLights_Allow_Condition@lights stored from wreg
 17418  12D6  00F7               	movwf	getDimmerLights_Allow_Condition@lights
 17419                           
 17420                           ;Dimmer_B1.c: 898: char allow = 0;
 17421  12D7  01F8               	clrf	getDimmerLights_Allow_Condition@allow
 17422                           
 17423                           ;Dimmer_B1.c: 904: allow = getLoad_OK() == 0 && Dimmer.LoadGO == 0 ? 0 : 1;
 17424  12D8  01F4               	clrf	_getDimmerLights_Allow_Condition$2337
 17425  12D9  0AF4               	incf	_getDimmerLights_Allow_Condition$2337,f
 17426  12DA  319A  22FA  3192   	fcall	_getLoad_OK
 17427  12DD  3800               	iorlw	0
 17428  12DE  1D03               	skipz
 17429  12DF  2AE4               	goto	l7377
 17430  12E0  0021               	movlb	1	; select bank1
 17431  12E1  18BA               	btfsc	_Dimmer^(0+128),1
 17432  12E2  2AE4               	goto	l7377
 17433  12E3  01F4               	clrf	_getDimmerLights_Allow_Condition$2337
 17434  12E4                     l7377:	
 17435  12E4  0874               	movf	_getDimmerLights_Allow_Condition$2337,w
 17436  12E5  00F3               	movwf	??_getDimmerLights_Allow_Condition
 17437  12E6  0873               	movf	??_getDimmerLights_Allow_Condition,w
 17438  12E7  00F8               	movwf	getDimmerLights_Allow_Condition@allow
 17439                           
 17440                           ;Dimmer_B1.c: 908: if (allow == 0) {
 17441  12E8  08F8               	movf	getDimmerLights_Allow_Condition@allow,f
 17442  12E9  1D03               	skipz
 17443  12EA  2B0B               	goto	l7401
 17444                           
 17445                           ;Dimmer_B1.c: 909: if (lights == 1) {
 17446  12EB  0877               	movf	getDimmerLights_Allow_Condition@lights,w
 17447  12EC  3A01               	xorlw	1
 17448  12ED  1D03               	skipz
 17449  12EE  2AFA               	goto	l7391
 17450                           
 17451                           ;Dimmer_B1.c: 910: allow = DimmerLights2.DimmingTrigger == 1 || DimmerIntr2.Dimming_Sw =
      +                          = 1 ? 1 : 0;
 17452  12EF  01F5               	clrf	_getDimmerLights_Allow_Condition$2338
 17453  12F0  0AF5               	incf	_getDimmerLights_Allow_Condition$2338,f
 17454  12F1  0022               	movlb	2	; select bank2
 17455  12F2  1A66               	btfsc	_DimmerLights2^(0+256),4
 17456  12F3  2AF8               	goto	l7389
 17457  12F4  0021               	movlb	1	; select bank1
 17458  12F5  1A69               	btfsc	_DimmerIntr2^(0+128),4
 17459  12F6  2AF8               	goto	l7389
 17460  12F7  01F5               	clrf	_getDimmerLights_Allow_Condition$2338
 17461  12F8                     l7389:	
 17462  12F8  0875               	movf	_getDimmerLights_Allow_Condition$2338,w
 17463  12F9  2B08               	goto	L10
 17464  12FA                     l7391:	
 17465                           ;Dimmer_B1.c: 911: } else if (lights == 2) {
 17466                           
 17467  12FA  0877               	movf	getDimmerLights_Allow_Condition@lights,w
 17468  12FB  3A02               	xorlw	2
 17469  12FC  1D03               	skipz
 17470  12FD  2B0B               	goto	l7401
 17471                           
 17472                           ;Dimmer_B1.c: 912: allow = DimmerLights1.DimmingTrigger == 1 || DimmerIntr1.Dimming_Sw =
      +                          = 1 ? 1 : 0;
 17473  12FE  01F6               	clrf	_getDimmerLights_Allow_Condition$2339
 17474  12FF  0AF6               	incf	_getDimmerLights_Allow_Condition$2339,f
 17475  1300  0022               	movlb	2	; select bank2
 17476  1301  1A5E               	btfsc	_DimmerLights1^(0+256),4
 17477  1302  2B07               	goto	l7399
 17478  1303  0021               	movlb	1	; select bank1
 17479  1304  1A62               	btfsc	_DimmerIntr1^(0+128),4
 17480  1305  2B07               	goto	l7399
 17481  1306  01F6               	clrf	_getDimmerLights_Allow_Condition$2339
 17482  1307                     l7399:	
 17483  1307  0876               	movf	_getDimmerLights_Allow_Condition$2339,w
 17484  1308                     L10:	
 17485  1308  00F3               	movwf	??_getDimmerLights_Allow_Condition
 17486  1309  0873               	movf	??_getDimmerLights_Allow_Condition,w
 17487  130A  00F8               	movwf	getDimmerLights_Allow_Condition@allow
 17488  130B                     l7401:	
 17489                           
 17490                           ;Dimmer_B1.c: 913: }
 17491                           ;Dimmer_B1.c: 914: }
 17492                           ;Dimmer_B1.c: 931: return allow;
 17493  130B  0878               	movf	getDimmerLights_Allow_Condition@allow,w
 17494  130C  0008               	return
 17495  130D                     __end_of_getDimmerLights_Allow_Condition:	
 17496                           
 17497                           	psect	text118
 17498  1AFA                     __ptext118:	
 17499 ;; *************** function _getLoad_OK *****************
 17500 ;; Defined at:
 17501 ;;		line 271 in file "../src/OverLoad_B1.c"
 17502 ;; Parameters:    Size  Location     Type
 17503 ;;		None
 17504 ;; Auto vars:     Size  Location     Type
 17505 ;;  ok              1    2[COMMON] unsigned char 
 17506 ;; Return value:  Size  Location     Type
 17507 ;;                  1    wreg      unsigned char 
 17508 ;; Registers used:
 17509 ;;		wreg, status,2
 17510 ;; Tracked objects:
 17511 ;;		On entry : 0/0
 17512 ;;		On exit  : 0/0
 17513 ;;		Unchanged: 0/0
 17514 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17515 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17516 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17517 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17518 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17519 ;;Total ram usage:        1 bytes
 17520 ;; Hardware stack levels used:    1
 17521 ;; Hardware stack levels required when called:    3
 17522 ;; This function calls:
 17523 ;;		Nothing
 17524 ;; This function is called by:
 17525 ;;		_DimmerLights_Main
 17526 ;;		_getDimmerLights_Allow_Condition
 17527 ;; This function uses a non-reentrant model
 17528 ;;
 17529                           
 17530                           
 17531                           ;psect for function _getLoad_OK
 17532  1AFA                     _getLoad_OK:	
 17533                           
 17534                           ;OverLoad_B1.c: 272: char ok = Load.OK == 1 ? 1 : 0;
 17535                           
 17536                           ;incstack = 0
 17537                           ; Regs used in _getLoad_OK: [wreg+status,2]
 17538  1AFA  3000               	movlw	0
 17539  1AFB  0022               	movlb	2	; select bank2
 17540  1AFC  1BB0               	btfsc	_Load^(0+256),7
 17541  1AFD  3001               	movlw	1
 17542  1AFE  00F2               	movwf	getLoad_OK@ok
 17543                           
 17544                           ;OverLoad_B1.c: 273: return ok;
 17545  1AFF  0872               	movf	getLoad_OK@ok,w
 17546  1B00  0008               	return
 17547  1B01                     __end_of_getLoad_OK:	
 17548                           
 17549                           	psect	text119
 17550  11D4                     __ptext119:	
 17551 ;; *************** function _getMain_All_Error_Status *****************
 17552 ;; Defined at:
 17553 ;;		line 425 in file "../src/Main_B1.c"
 17554 ;; Parameters:    Size  Location     Type
 17555 ;;  command         1    wreg     unsigned char 
 17556 ;; Auto vars:     Size  Location     Type
 17557 ;;  command         1    7[COMMON] unsigned char 
 17558 ;;  status          1    8[COMMON] unsigned char 
 17559 ;; Return value:  Size  Location     Type
 17560 ;;                  1    wreg      unsigned char 
 17561 ;; Registers used:
 17562 ;;		wreg, status,2, status,0
 17563 ;; Tracked objects:
 17564 ;;		On entry : 0/0
 17565 ;;		On exit  : 0/0
 17566 ;;		Unchanged: 0/0
 17567 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17568 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17569 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17570 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17571 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17572 ;;Total ram usage:        7 bytes
 17573 ;; Hardware stack levels used:    1
 17574 ;; Hardware stack levels required when called:    3
 17575 ;; This function calls:
 17576 ;;		Nothing
 17577 ;; This function is called by:
 17578 ;;		_DimmerLights_Main
 17579 ;;		_Exception_Main
 17580 ;;		_Load_Main
 17581 ;;		_setTemp_Main
 17582 ;;		_getRxData
 17583 ;;		_setSw_Main
 17584 ;; This function uses a non-reentrant model
 17585 ;;
 17586                           
 17587                           
 17588                           ;psect for function _getMain_All_Error_Status
 17589  11D4                     _getMain_All_Error_Status:	
 17590                           
 17591                           ;incstack = 0
 17592                           ; Regs used in _getMain_All_Error_Status: [wreg+status,2+status,0]
 17593                           ;getMain_All_Error_Status@command stored from wreg
 17594  11D4  00F7               	movwf	getMain_All_Error_Status@command
 17595                           
 17596                           ;Main_B1.c: 426: char status = 0;
 17597  11D5  01F8               	clrf	getMain_All_Error_Status@status
 17598                           
 17599                           ;Main_B1.c: 437: if (status == 0 && command != 2) {
 17600  11D6  08F8               	movf	getMain_All_Error_Status@status,f
 17601  11D7  1D03               	skipz
 17602  11D8  29EB               	goto	l7105
 17603  11D9  0877               	movf	getMain_All_Error_Status@command,w
 17604  11DA  3A02               	xorlw	2
 17605  11DB  1903               	skipnz
 17606  11DC  29EB               	goto	l7105
 17607                           
 17608                           ;Main_B1.c: 438: status = Temp.ERROR == 1 ? 2 : 0;
 17609  11DD  0021               	movlb	1	; select bank1
 17610  11DE  18D0               	btfsc	_Temp^(0+128),1
 17611  11DF  29E3               	goto	l7103
 17612  11E0  01F3               	clrf	_getMain_All_Error_Status$3648
 17613  11E1  01F4               	clrf	_getMain_All_Error_Status$3648+1
 17614  11E2  29E7               	goto	l1691
 17615  11E3                     l7103:	
 17616  11E3  3002               	movlw	2
 17617  11E4  00F3               	movwf	_getMain_All_Error_Status$3648
 17618  11E5  3000               	movlw	0
 17619  11E6  00F4               	movwf	_getMain_All_Error_Status$3648+1
 17620  11E7                     l1691:	
 17621  11E7  0873               	movf	_getMain_All_Error_Status$3648,w
 17622  11E8  00F2               	movwf	??_getMain_All_Error_Status
 17623  11E9  0872               	movf	??_getMain_All_Error_Status,w
 17624  11EA  00F8               	movwf	getMain_All_Error_Status@status
 17625  11EB                     l7105:	
 17626                           
 17627                           ;Main_B1.c: 439: }
 17628                           ;Main_B1.c: 444: if (status == 0 && command != 3) {
 17629  11EB  08F8               	movf	getMain_All_Error_Status@status,f
 17630  11EC  1D03               	skipz
 17631  11ED  2A00               	goto	l1692
 17632  11EE  0877               	movf	getMain_All_Error_Status@command,w
 17633  11EF  3A03               	xorlw	3
 17634  11F0  1903               	skipnz
 17635  11F1  2A00               	goto	l1692
 17636                           
 17637                           ;Main_B1.c: 445: status = Load.ERROR == 1 ? 3 : 0;
 17638  11F2  0022               	movlb	2	; select bank2
 17639  11F3  1AB0               	btfsc	_Load^(0+256),5
 17640  11F4  29F8               	goto	l7113
 17641  11F5  01F5               	clrf	_getMain_All_Error_Status$3649
 17642  11F6  01F6               	clrf	_getMain_All_Error_Status$3649+1
 17643  11F7  29FC               	goto	l1696
 17644  11F8                     l7113:	
 17645  11F8  3003               	movlw	3
 17646  11F9  00F5               	movwf	_getMain_All_Error_Status$3649
 17647  11FA  3000               	movlw	0
 17648  11FB  00F6               	movwf	_getMain_All_Error_Status$3649+1
 17649  11FC                     l1696:	
 17650  11FC  0875               	movf	_getMain_All_Error_Status$3649,w
 17651  11FD  00F2               	movwf	??_getMain_All_Error_Status
 17652  11FE  0872               	movf	??_getMain_All_Error_Status,w
 17653  11FF  00F8               	movwf	getMain_All_Error_Status@status
 17654  1200                     l1692:	
 17655                           
 17656                           ;Main_B1.c: 446: }
 17657                           ;Main_B1.c: 462: return status;
 17658  1200  0878               	movf	getMain_All_Error_Status@status,w
 17659  1201  0008               	return
 17660  1202                     __end_of_getMain_All_Error_Status:	
 17661                           
 17662                           	psect	text120
 17663  1B5C                     __ptext120:	
 17664 ;; *************** function _DimmerLights_Initialization *****************
 17665 ;; Defined at:
 17666 ;;		line 593 in file "../src/Dimmer_B1.c"
 17667 ;; Parameters:    Size  Location     Type
 17668 ;;		None
 17669 ;; Auto vars:     Size  Location     Type
 17670 ;;		None
 17671 ;; Return value:  Size  Location     Type
 17672 ;;		None               void
 17673 ;; Registers used:
 17674 ;;		wreg, status,2, status,0, pclath, cstack
 17675 ;; Tracked objects:
 17676 ;;		On entry : 0/0
 17677 ;;		On exit  : 0/0
 17678 ;;		Unchanged: 0/0
 17679 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17680 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17681 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17682 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17683 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17684 ;;Total ram usage:        0 bytes
 17685 ;; Hardware stack levels used:    1
 17686 ;; Hardware stack levels required when called:    4
 17687 ;; This function calls:
 17688 ;;		_DimmerIntr_Initialization
 17689 ;;		_setDimmerLights_Initialization
 17690 ;; This function is called by:
 17691 ;;		_main
 17692 ;; This function uses a non-reentrant model
 17693 ;;
 17694                           
 17695                           
 17696                           ;psect for function _DimmerLights_Initialization
 17697  1B5C                     _DimmerLights_Initialization:	
 17698                           
 17699                           ;Dimmer_B1.c: 595: setDimmerLights_Initialization(1);
 17700                           
 17701                           ;incstack = 0
 17702                           ; Regs used in _DimmerLights_Initialization: [wreg+status,2+status,0+pclath+cstack]
 17703  1B5C  3001               	movlw	1
 17704  1B5D  3180  2002  319B   	fcall	_setDimmerLights_Initialization
 17705                           
 17706                           ;Dimmer_B1.c: 599: setDimmerLights_Initialization(2);
 17707  1B60  3002               	movlw	2
 17708  1B61  3180  2002  319B   	fcall	_setDimmerLights_Initialization
 17709                           
 17710                           ;Dimmer_B1.c: 605: DimmerIntr_Initialization();
 17711  1B64  319F  27BC         	fcall	_DimmerIntr_Initialization
 17712  1B66  0008               	return
 17713  1B67                     __end_of_DimmerLights_Initialization:	
 17714                           
 17715                           	psect	text121
 17716  0002                     __ptext121:	
 17717 ;; *************** function _setDimmerLights_Initialization *****************
 17718 ;; Defined at:
 17719 ;;		line 609 in file "../src/Dimmer_B1.c"
 17720 ;; Parameters:    Size  Location     Type
 17721 ;;  lights          1    wreg     unsigned char 
 17722 ;; Auto vars:     Size  Location     Type
 17723 ;;  lights          1    0[COMMON] unsigned char 
 17724 ;; Return value:  Size  Location     Type
 17725 ;;		None               void
 17726 ;; Registers used:
 17727 ;;		wreg
 17728 ;; Tracked objects:
 17729 ;;		On entry : 0/0
 17730 ;;		On exit  : 0/0
 17731 ;;		Unchanged: 0/0
 17732 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17733 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17734 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17735 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17736 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17737 ;;Total ram usage:        0 bytes
 17738 ;; Hardware stack levels used:    1
 17739 ;; Hardware stack levels required when called:    3
 17740 ;; This function calls:
 17741 ;;		Nothing
 17742 ;; This function is called by:
 17743 ;;		_DimmerLights_Initialization
 17744 ;; This function uses a non-reentrant model
 17745 ;;
 17746                           
 17747                           
 17748                           ;psect for function _setDimmerLights_Initialization
 17749  0002                     _setDimmerLights_Initialization:	
 17750                           
 17751                           ;incstack = 0
 17752                           ; Regs used in _setDimmerLights_Initialization: [wreg]
 17753  0002  0008               	return
 17754  0003                     __end_of_setDimmerLights_Initialization:	
 17755                           
 17756                           	psect	text122
 17757  1FBC                     __ptext122:	
 17758 ;; *************** function _DimmerIntr_Initialization *****************
 17759 ;; Defined at:
 17760 ;;		line 7 in file "../src/Dimmer_B1.c"
 17761 ;; Parameters:    Size  Location     Type
 17762 ;;		None
 17763 ;; Auto vars:     Size  Location     Type
 17764 ;;		None
 17765 ;; Return value:  Size  Location     Type
 17766 ;;		None               void
 17767 ;; Registers used:
 17768 ;;		wreg
 17769 ;; Tracked objects:
 17770 ;;		On entry : 0/0
 17771 ;;		On exit  : 0/0
 17772 ;;		Unchanged: 0/0
 17773 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17774 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17775 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17776 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17777 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17778 ;;Total ram usage:        1 bytes
 17779 ;; Hardware stack levels used:    1
 17780 ;; Hardware stack levels required when called:    3
 17781 ;; This function calls:
 17782 ;;		Nothing
 17783 ;; This function is called by:
 17784 ;;		_DimmerLights_Initialization
 17785 ;; This function uses a non-reentrant model
 17786 ;;
 17787                           
 17788                           
 17789                           ;psect for function _DimmerIntr_Initialization
 17790  1FBC                     _DimmerIntr_Initialization:	
 17791                           
 17792                           ;Dimmer_B1.c: 9: DimmerIntr1.TuneTimeValue = 7;
 17793                           
 17794                           ;incstack = 0
 17795                           ; Regs used in _DimmerIntr_Initialization: [wreg]
 17796  1FBC  3007               	movlw	7
 17797  1FBD  00F2               	movwf	??_DimmerIntr_Initialization
 17798  1FBE  0872               	movf	??_DimmerIntr_Initialization,w
 17799  1FBF  0021               	movlb	1	; select bank1
 17800  1FC0  00E5               	movwf	(_DimmerIntr1^(0+128)+3)
 17801                           
 17802                           ;Dimmer_B1.c: 10: DimmerIntr1.MaxmumValue = ((char)(65*0.8));
 17803  1FC1  3034               	movlw	52
 17804  1FC2  00F2               	movwf	??_DimmerIntr_Initialization
 17805  1FC3  0872               	movf	??_DimmerIntr_Initialization,w
 17806  1FC4  00E7               	movwf	(_DimmerIntr1^(0+128)+5)
 17807                           
 17808                           ;Dimmer_B1.c: 11: DimmerIntr1.MinimumValue = ((char)(20*0.8));
 17809  1FC5  3010               	movlw	16
 17810  1FC6  00F2               	movwf	??_DimmerIntr_Initialization
 17811  1FC7  0872               	movf	??_DimmerIntr_Initialization,w
 17812  1FC8  00E8               	movwf	(_DimmerIntr1^(0+128)+6)
 17813                           
 17814                           ;Dimmer_B1.c: 12: DimmerIntr1.DimmingValue = ((char)(65*0.8));
 17815  1FC9  3034               	movlw	52
 17816  1FCA  00F2               	movwf	??_DimmerIntr_Initialization
 17817  1FCB  0872               	movf	??_DimmerIntr_Initialization,w
 17818  1FCC  00E6               	movwf	(_DimmerIntr1^(0+128)+4)
 17819                           
 17820                           ;Dimmer_B1.c: 15: DimmerIntr2.TuneTimeValue = 7;
 17821  1FCD  3007               	movlw	7
 17822  1FCE  00F2               	movwf	??_DimmerIntr_Initialization
 17823  1FCF  0872               	movf	??_DimmerIntr_Initialization,w
 17824  1FD0  00EC               	movwf	(_DimmerIntr2^(0+128)+3)
 17825                           
 17826                           ;Dimmer_B1.c: 16: DimmerIntr2.MaxmumValue = ((char)(65*0.8));
 17827  1FD1  3034               	movlw	52
 17828  1FD2  00F2               	movwf	??_DimmerIntr_Initialization
 17829  1FD3  0872               	movf	??_DimmerIntr_Initialization,w
 17830  1FD4  00EE               	movwf	(_DimmerIntr2^(0+128)+5)
 17831                           
 17832                           ;Dimmer_B1.c: 17: DimmerIntr2.MinimumValue = ((char)(20*0.8));
 17833  1FD5  3010               	movlw	16
 17834  1FD6  00F2               	movwf	??_DimmerIntr_Initialization
 17835  1FD7  0872               	movf	??_DimmerIntr_Initialization,w
 17836  1FD8  00EF               	movwf	(_DimmerIntr2^(0+128)+6)
 17837                           
 17838                           ;Dimmer_B1.c: 18: DimmerIntr2.DimmingValue = ((char)(65*0.8));
 17839  1FD9  3034               	movlw	52
 17840  1FDA  00F2               	movwf	??_DimmerIntr_Initialization
 17841  1FDB  0872               	movf	??_DimmerIntr_Initialization,w
 17842  1FDC  00ED               	movwf	(_DimmerIntr2^(0+128)+4)
 17843  1FDD  0008               	return
 17844  1FDE                     __end_of_DimmerIntr_Initialization:	
 17845                           
 17846                           	psect	text123
 17847  1B25                     __ptext123:	
 17848 ;; *************** function _DelayOff_Main *****************
 17849 ;; Defined at:
 17850 ;;		line 41 in file "../src/DelayOff_B1.c"
 17851 ;; Parameters:    Size  Location     Type
 17852 ;;		None
 17853 ;; Auto vars:     Size  Location     Type
 17854 ;;		None
 17855 ;; Return value:  Size  Location     Type
 17856 ;;		None               void
 17857 ;; Registers used:
 17858 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17859 ;; Tracked objects:
 17860 ;;		On entry : 0/0
 17861 ;;		On exit  : 0/0
 17862 ;;		Unchanged: 0/0
 17863 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17864 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17865 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17866 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17867 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17868 ;;Total ram usage:        0 bytes
 17869 ;; Hardware stack levels used:    1
 17870 ;; Hardware stack levels required when called:    7
 17871 ;; This function calls:
 17872 ;;		_DlyOff_Main
 17873 ;; This function is called by:
 17874 ;;		_main
 17875 ;; This function uses a non-reentrant model
 17876 ;;
 17877                           
 17878                           
 17879                           ;psect for function _DelayOff_Main
 17880  1B25                     _DelayOff_Main:	
 17881                           
 17882                           ;DelayOff_B1.c: 43: DlyOff_Main(1);
 17883                           
 17884                           ;incstack = 0
 17885                           ; Regs used in _DelayOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 17886  1B25  3001               	movlw	1
 17887  1B26  318A  223E  319B   	fcall	_DlyOff_Main
 17888                           
 17889                           ;DelayOff_B1.c: 47: DlyOff_Main(2);
 17890  1B29  3002               	movlw	2
 17891  1B2A  318A  223E         	fcall	_DlyOff_Main
 17892  1B2C  0008               	return
 17893  1B2D                     __end_of_DelayOff_Main:	
 17894                           
 17895                           	psect	text124
 17896  0A3E                     __ptext124:	
 17897 ;; *************** function _DlyOff_Main *****************
 17898 ;; Defined at:
 17899 ;;		line 61 in file "../src/DelayOff_B1.c"
 17900 ;; Parameters:    Size  Location     Type
 17901 ;;  sw              1    wreg     unsigned char 
 17902 ;; Auto vars:     Size  Location     Type
 17903 ;;  sw              1   63[BANK0 ] unsigned char 
 17904 ;; Return value:  Size  Location     Type
 17905 ;;		None               void
 17906 ;; Registers used:
 17907 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17908 ;; Tracked objects:
 17909 ;;		On entry : 0/0
 17910 ;;		On exit  : 0/0
 17911 ;;		Unchanged: 0/0
 17912 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17913 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17914 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17915 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17916 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17917 ;;Total ram usage:        3 bytes
 17918 ;; Hardware stack levels used:    1
 17919 ;; Hardware stack levels required when called:    6
 17920 ;; This function calls:
 17921 ;;		_DelayOffPointSelect
 17922 ;;		_getDimmerLights_Status
 17923 ;;		_setDimmerLights_SwOff
 17924 ;;		_setDimmerLights_SwOn
 17925 ;;		_setProductData
 17926 ;; This function is called by:
 17927 ;;		_DelayOff_Main
 17928 ;; This function uses a non-reentrant model
 17929 ;;
 17930                           
 17931                           
 17932                           ;psect for function _DlyOff_Main
 17933  0A3E                     _DlyOff_Main:	
 17934                           
 17935                           ;incstack = 0
 17936                           ; Regs used in _DlyOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 17937                           ;DlyOff_Main@sw stored from wreg
 17938  0A3E  0020               	movlb	0	; select bank0
 17939  0A3F  00DF               	movwf	DlyOff_Main@sw
 17940                           
 17941                           ;DelayOff_B1.c: 63: DelayOffPointSelect(sw);
 17942  0A40  085F               	movf	DlyOff_Main@sw,w
 17943  0A41  319D  253D  318A   	fcall	_DelayOffPointSelect
 17944                           
 17945                           ;DelayOff_B1.c: 64: if (DelayOff->GO == 1) {
 17946  0A44  0021               	movlb	1	; select bank1
 17947  0A45  0844               	movf	_DelayOff^(0+128),w
 17948  0A46  0086               	movwf	6
 17949  0A47  3001               	movlw	1	; select bank2/3
 17950  0A48  0087               	movwf	7
 17951  0A49  1C81               	btfss	1,1
 17952  0A4A  0008               	return
 17953                           
 17954                           ;DelayOff_B1.c: 65: DelayOff->SecondTime++;
 17955  0A4B  0844               	movf	_DelayOff^(0+128),w
 17956  0A4C  3E02               	addlw	2
 17957  0A4D  0086               	movwf	6
 17958  0A4E  3001               	movlw	1	; select bank2/3
 17959  0A4F  0087               	movwf	7
 17960  0A50  3001               	movlw	1
 17961  0A51  0781               	addwf	1,f
 17962  0A52  3141               	addfsr 1,1
 17963  0A53  1803               	skipnc
 17964  0A54  0A81               	incf	1,f
 17965                           
 17966                           ;DelayOff_B1.c: 66: if (DelayOff->SecondTime >= 60000/20) {
 17967  0A55  0844               	movf	_DelayOff^(0+128),w
 17968  0A56  3E02               	addlw	2
 17969  0A57  0086               	movwf	6
 17970  0A58  3001               	movlw	1	; select bank2/3
 17971  0A59  0087               	movwf	7
 17972  0A5A  3F40               	moviw [0]fsr1
 17973  0A5B  0020               	movlb	0	; select bank0
 17974  0A5C  00DD               	movwf	??_DlyOff_Main
 17975  0A5D  3F41               	moviw [1]fsr1
 17976  0A5E  00DE               	movwf	??_DlyOff_Main+1
 17977  0A5F  300B               	movlw	11
 17978  0A60  025E               	subwf	??_DlyOff_Main+1,w
 17979  0A61  30B8               	movlw	184
 17980  0A62  1903               	skipnz
 17981  0A63  025D               	subwf	??_DlyOff_Main,w
 17982  0A64  1C03               	skipc
 17983  0A65  0008               	return
 17984                           
 17985                           ;DelayOff_B1.c: 67: DelayOff->SecondTime = 0;
 17986  0A66  0021               	movlb	1	; select bank1
 17987  0A67  0844               	movf	_DelayOff^(0+128),w
 17988  0A68  3E02               	addlw	2
 17989  0A69  0086               	movwf	6
 17990  0A6A  3001               	movlw	1	; select bank2/3
 17991  0A6B  0087               	movwf	7
 17992  0A6C  3000               	movlw	0
 17993  0A6D  3FC0               	movwi [0]fsr1
 17994  0A6E  3FC1               	movwi [1]fsr1
 17995                           
 17996                           ;DelayOff_B1.c: 68: DelayOff->MinuteTime++;
 17997  0A6F  3001               	movlw	1
 17998  0A70  0020               	movlb	0	; select bank0
 17999  0A71  00DD               	movwf	??_DlyOff_Main
 18000  0A72  0021               	movlb	1	; select bank1
 18001  0A73  0844               	movf	_DelayOff^(0+128),w
 18002  0A74  3E04               	addlw	4
 18003  0A75  0086               	movwf	6
 18004  0A76  3001               	movlw	1	; select bank2/3
 18005  0A77  0087               	movwf	7
 18006  0A78  0020               	movlb	0	; select bank0
 18007  0A79  085D               	movf	??_DlyOff_Main,w
 18008  0A7A  0781               	addwf	1,f
 18009                           
 18010                           ;DelayOff_B1.c: 69: if (DelayOff->MinuteTime >= DelayOff->Value) {
 18011  0A7B  0021               	movlb	1	; select bank1
 18012  0A7C  0844               	movf	_DelayOff^(0+128),w
 18013  0A7D  3E04               	addlw	4
 18014  0A7E  0086               	movwf	6
 18015  0A7F  3001               	movlw	1	; select bank2/3
 18016  0A80  0087               	movwf	7
 18017  0A81  0A44               	incf	_DelayOff^(0+128),w
 18018  0A82  0084               	movwf	4
 18019  0A83  3001               	movlw	1	; select bank2/3
 18020  0A84  0085               	movwf	5
 18021  0A85  0800               	movf	0,w
 18022  0A86  0201               	subwf	1,w
 18023  0A87  1C03               	skipc
 18024  0A88  0008               	return
 18025                           
 18026                           ;DelayOff_B1.c: 70: DelayOff->MinuteTime = 0;
 18027  0A89  0844               	movf	_DelayOff^(0+128),w
 18028  0A8A  3E04               	addlw	4
 18029  0A8B  0086               	movwf	6
 18030  0A8C  3001               	movlw	1	; select bank2/3
 18031  0A8D  0087               	movwf	7
 18032  0A8E  0181               	clrf	1
 18033                           
 18034                           ;DelayOff_B1.c: 71: DelayOff->GO = 0;
 18035  0A8F  0844               	movf	_DelayOff^(0+128),w
 18036  0A90  0086               	movwf	6
 18037  0A91  3001               	movlw	1	; select bank2/3
 18038  0A92  0087               	movwf	7
 18039  0A93  1081               	bcf	1,1
 18040                           
 18041                           ;DelayOff_B1.c: 75: if (getDimmerLights_Status(sw) == 1) {
 18042  0A94  0020               	movlb	0	; select bank0
 18043  0A95  085F               	movf	DlyOff_Main@sw,w
 18044  0A96  319B  23F9  318A   	fcall	_getDimmerLights_Status
 18045  0A99  3A01               	xorlw	1
 18046  0A9A  1D03               	skipz
 18047  0A9B  2AA6               	goto	l581
 18048                           
 18049                           ;DelayOff_B1.c: 76: setDimmerLights_SwOn(sw);
 18050  0A9C  0020               	movlb	0	; select bank0
 18051  0A9D  085F               	movf	DlyOff_Main@sw,w
 18052  0A9E  3196  262D  318A   	fcall	_setDimmerLights_SwOn
 18053                           
 18054                           ;DelayOff_B1.c: 77: setDimmerLights_SwOff(sw);
 18055  0AA1  0020               	movlb	0	; select bank0
 18056  0AA2  085F               	movf	DlyOff_Main@sw,w
 18057  0AA3  3192  229F  318A   	fcall	_setDimmerLights_SwOff
 18058  0AA6                     l581:	
 18059                           
 18060                           ;DelayOff_B1.c: 78: }
 18061                           ;DelayOff_B1.c: 80: setProductData(26 + sw, 0);
 18062  0AA6  0020               	movlb	0	; select bank0
 18063  0AA7  01DA               	clrf	setProductData@value
 18064  0AA8  085F               	movf	DlyOff_Main@sw,w
 18065  0AA9  3E1A               	addlw	26
 18066  0AAA  319B  2394         	fcall	_setProductData
 18067  0AAC  0008               	return
 18068  0AAD                     __end_of_DlyOff_Main:	
 18069                           
 18070                           	psect	text125
 18071  1B94                     __ptext125:	
 18072 ;; *************** function _setProductData *****************
 18073 ;; Defined at:
 18074 ;;		line 591 in file "../src/Main_B1.c"
 18075 ;; Parameters:    Size  Location     Type
 18076 ;;  address         1    wreg     unsigned char 
 18077 ;;  value           1   58[BANK0 ] unsigned char 
 18078 ;; Auto vars:     Size  Location     Type
 18079 ;;  address         1   60[BANK0 ] unsigned char 
 18080 ;; Return value:  Size  Location     Type
 18081 ;;		None               void
 18082 ;; Registers used:
 18083 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 18084 ;; Tracked objects:
 18085 ;;		On entry : 0/0
 18086 ;;		On exit  : 0/0
 18087 ;;		Unchanged: 0/0
 18088 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18089 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18090 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18091 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18092 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18093 ;;Total ram usage:        3 bytes
 18094 ;; Hardware stack levels used:    1
 18095 ;; Hardware stack levels required when called:    3
 18096 ;; This function calls:
 18097 ;;		Nothing
 18098 ;; This function is called by:
 18099 ;;		_DlyOff_Main
 18100 ;;		_setDelayOff_GO
 18101 ;;		_setDimmerLights_OnOff
 18102 ;;		_setDimmerLights_Dimming
 18103 ;;		_setTemp_Main
 18104 ;;		_setLog_Code
 18105 ;;		_setControl_Lights_Table
 18106 ;;		_setRFSW_AdjControl
 18107 ;;		_setRF_DimmerLights
 18108 ;; This function uses a non-reentrant model
 18109 ;;
 18110                           
 18111                           
 18112                           ;psect for function _setProductData
 18113  1B94                     _setProductData:	
 18114                           
 18115                           ;incstack = 0
 18116                           ; Regs used in _setProductData: [wreg+fsr1l+fsr1h+status,2+status,0]
 18117                           ;setProductData@address stored from wreg
 18118  1B94  0020               	movlb	0	; select bank0
 18119  1B95  00DC               	movwf	setProductData@address
 18120                           
 18121                           ;Main_B1.c: 592: _product.Data[address] = value;
 18122  1B96  085A               	movf	setProductData@value,w
 18123  1B97  00DB               	movwf	??_setProductData
 18124  1B98  085C               	movf	setProductData@address,w
 18125  1B99  3E45               	addlw	__product& (0+255)
 18126  1B9A  0086               	movwf	6
 18127  1B9B  3002               	movlw	2	; select bank4/5
 18128  1B9C  0087               	movwf	7
 18129  1B9D  085B               	movf	??_setProductData,w
 18130  1B9E  0081               	movwf	1
 18131  1B9F  0008               	return
 18132  1BA0                     __end_of_setProductData:	
 18133                           
 18134                           	psect	text126
 18135  162D                     __ptext126:	
 18136 ;; *************** function _setDimmerLights_SwOn *****************
 18137 ;; Defined at:
 18138 ;;		line 649 in file "../src/Dimmer_B1.c"
 18139 ;; Parameters:    Size  Location     Type
 18140 ;;  sw              1    wreg     unsigned char 
 18141 ;; Auto vars:     Size  Location     Type
 18142 ;;  sw              1    9[BANK0 ] unsigned char 
 18143 ;;  idle            1    8[BANK0 ] unsigned char 
 18144 ;; Return value:  Size  Location     Type
 18145 ;;		None               void
 18146 ;; Registers used:
 18147 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18148 ;; Tracked objects:
 18149 ;;		On entry : 0/0
 18150 ;;		On exit  : 0/0
 18151 ;;		Unchanged: 0/0
 18152 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18153 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18154 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18155 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18156 ;;      Totals:         1       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18157 ;;Total ram usage:        5 bytes
 18158 ;; Hardware stack levels used:    1
 18159 ;; Hardware stack levels required when called:    5
 18160 ;; This function calls:
 18161 ;;		_DimmerLights_SelectPointer
 18162 ;;		_setBuz
 18163 ;; This function is called by:
 18164 ;;		_DlyOff_Main
 18165 ;;		_setControl_Lights_Table
 18166 ;;		_setRFSW_Control
 18167 ;;		_setRFSW_AdjControl
 18168 ;;		_setSw_Main
 18169 ;; This function uses a non-reentrant model
 18170 ;;
 18171                           
 18172                           
 18173                           ;psect for function _setDimmerLights_SwOn
 18174  162D                     _setDimmerLights_SwOn:	
 18175                           
 18176                           ;incstack = 0
 18177                           ; Regs used in _setDimmerLights_SwOn: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 18178                           ;setDimmerLights_SwOn@sw stored from wreg
 18179  162D  0020               	movlb	0	; select bank0
 18180  162E  00A9               	movwf	setDimmerLights_SwOn@sw
 18181                           
 18182                           ;Dimmer_B1.c: 650: char idle = 0;
 18183  162F  01A8               	clrf	setDimmerLights_SwOn@idle
 18184                           
 18185                           ;Dimmer_B1.c: 652: if (idle == 0) {
 18186  1630  08A8               	movf	setDimmerLights_SwOn@idle,f
 18187  1631  1D03               	skipz
 18188  1632  2E57               	goto	l9195
 18189                           
 18190                           ;Dimmer_B1.c: 653: if (sw == 1) {
 18191  1633  0829               	movf	setDimmerLights_SwOn@sw,w
 18192  1634  3A01               	xorlw	1
 18193  1635  1D03               	skipz
 18194  1636  2E44               	goto	l9185
 18195                           
 18196                           ;Dimmer_B1.c: 654: idle = DimmerLights2.DimmingTrigger == 1 || DimmerIntr2.Dimming_Sw ==
      +                           1 ? 1 : 0;
 18197  1637  01A6               	clrf	_setDimmerLights_SwOn$2280
 18198  1638  0AA6               	incf	_setDimmerLights_SwOn$2280,f
 18199  1639  0022               	movlb	2	; select bank2
 18200  163A  1A66               	btfsc	_DimmerLights2^(0+256),4
 18201  163B  2E41               	goto	l9183
 18202  163C  0021               	movlb	1	; select bank1
 18203  163D  1A69               	btfsc	_DimmerIntr2^(0+128),4
 18204  163E  2E41               	goto	l9183
 18205  163F  0020               	movlb	0	; select bank0
 18206  1640  01A6               	clrf	_setDimmerLights_SwOn$2280
 18207  1641                     l9183:	
 18208  1641  0020               	movlb	0	; select bank0
 18209  1642  0826               	movf	_setDimmerLights_SwOn$2280,w
 18210  1643  2E54               	goto	L11
 18211  1644                     l9185:	
 18212                           ;Dimmer_B1.c: 655: } else if (sw == 2) {
 18213                           
 18214  1644  0829               	movf	setDimmerLights_SwOn@sw,w
 18215  1645  3A02               	xorlw	2
 18216  1646  1D03               	skipz
 18217  1647  2E57               	goto	l9195
 18218                           
 18219                           ;Dimmer_B1.c: 656: idle = DimmerLights1.DimmingTrigger == 1 || DimmerIntr1.Dimming_Sw ==
      +                           1 ? 1 : 0;
 18220  1648  01A7               	clrf	_setDimmerLights_SwOn$2289
 18221  1649  0AA7               	incf	_setDimmerLights_SwOn$2289,f
 18222  164A  0022               	movlb	2	; select bank2
 18223  164B  1A5E               	btfsc	_DimmerLights1^(0+256),4
 18224  164C  2E52               	goto	l9193
 18225  164D  0021               	movlb	1	; select bank1
 18226  164E  1A62               	btfsc	_DimmerIntr1^(0+128),4
 18227  164F  2E52               	goto	l9193
 18228  1650  0020               	movlb	0	; select bank0
 18229  1651  01A7               	clrf	_setDimmerLights_SwOn$2289
 18230  1652                     l9193:	
 18231  1652  0020               	movlb	0	; select bank0
 18232  1653  0827               	movf	_setDimmerLights_SwOn$2289,w
 18233  1654                     L11:	
 18234  1654  00F9               	movwf	??_setDimmerLights_SwOn
 18235  1655  0879               	movf	??_setDimmerLights_SwOn,w
 18236  1656  00A8               	movwf	setDimmerLights_SwOn@idle
 18237  1657                     l9195:	
 18238                           
 18239                           ;Dimmer_B1.c: 657: }
 18240                           ;Dimmer_B1.c: 658: }
 18241                           ;Dimmer_B1.c: 675: DimmerLights_SelectPointer(sw);
 18242  1657  0829               	movf	setDimmerLights_SwOn@sw,w
 18243  1658  3190  2066  3196   	fcall	_DimmerLights_SelectPointer
 18244                           
 18245                           ;Dimmer_B1.c: 676: if (idle == 0) {
 18246  165B  0020               	movlb	0	; select bank0
 18247  165C  08A8               	movf	setDimmerLights_SwOn@idle,f
 18248  165D  1D03               	skipz
 18249  165E  0008               	return
 18250                           
 18251                           ;Dimmer_B1.c: 677: DimmerLights->SwFlag = 1;
 18252  165F  087B               	movf	_DimmerLights,w
 18253  1660  0086               	movwf	6
 18254  1661  3001               	movlw	1	; select bank2/3
 18255  1662  0087               	movwf	7
 18256  1663  1401               	bsf	1,0
 18257                           
 18258                           ;Dimmer_B1.c: 678: if (DimmerLights->Status == 0) {
 18259  1664  0A7B               	incf	_DimmerLights,w
 18260  1665  0086               	movwf	6
 18261  1666  3001               	movlw	1	; select bank2/3
 18262  1667  0087               	movwf	7
 18263  1668  1801               	btfsc	1,0
 18264  1669  2E7A               	goto	l9203
 18265                           
 18266                           ;Dimmer_B1.c: 679: DimmerLights->Status = 1;
 18267  166A  0A7B               	incf	_DimmerLights,w
 18268  166B  0086               	movwf	6
 18269  166C  3001               	movlw	1	; select bank2/3
 18270  166D  0087               	movwf	7
 18271  166E  1401               	bsf	1,0
 18272                           
 18273                           ;Dimmer_B1.c: 680: DimmerLights->Trigger = 1;
 18274  166F  087B               	movf	_DimmerLights,w
 18275  1670  0086               	movwf	6
 18276  1671  3001               	movlw	1	; select bank2/3
 18277  1672  0087               	movwf	7
 18278  1673  1481               	bsf	1,1
 18279                           
 18280                           ;Dimmer_B1.c: 681: DimmerLights->Switch = 1;
 18281  1674  087B               	movf	_DimmerLights,w
 18282  1675  0086               	movwf	6
 18283  1676  3001               	movlw	1	; select bank2/3
 18284  1677  0087               	movwf	7
 18285  1678  1501               	bsf	1,2
 18286                           
 18287                           ;Dimmer_B1.c: 682: } else {
 18288  1679  2E7F               	goto	l9205
 18289  167A                     l9203:	
 18290                           
 18291                           ;Dimmer_B1.c: 683: DimmerLights->Status = 0;
 18292  167A  0A7B               	incf	_DimmerLights,w
 18293  167B  0086               	movwf	6
 18294  167C  3001               	movlw	1	; select bank2/3
 18295  167D  0087               	movwf	7
 18296  167E  1001               	bcf	1,0
 18297  167F                     l9205:	
 18298                           
 18299                           ;Dimmer_B1.c: 684: }
 18300                           ;Dimmer_B1.c: 685: setBuz(1, 100);
 18301  167F  3064               	movlw	100
 18302  1680  00A4               	movwf	setBuz@time
 18303  1681  3000               	movlw	0
 18304  1682  00A5               	movwf	setBuz@time+1
 18305  1683  3001               	movlw	1
 18306  1684  3195  2586         	fcall	_setBuz
 18307  1686  0008               	return
 18308  1687                     __end_of_setDimmerLights_SwOn:	
 18309                           
 18310                           	psect	text127
 18311  1586                     __ptext127:	
 18312 ;; *************** function _setBuz *****************
 18313 ;; Defined at:
 18314 ;;		line 22 in file "../src/Buzzer_B1.c"
 18315 ;; Parameters:    Size  Location     Type
 18316 ;;  count           1    wreg     unsigned char 
 18317 ;;  time            2    4[BANK0 ] int 
 18318 ;; Auto vars:     Size  Location     Type
 18319 ;;  count           1    8[COMMON] unsigned char 
 18320 ;; Return value:  Size  Location     Type
 18321 ;;		None               void
 18322 ;; Registers used:
 18323 ;;		wreg, status,2, status,0, pclath, cstack
 18324 ;; Tracked objects:
 18325 ;;		On entry : 0/0
 18326 ;;		On exit  : 0/0
 18327 ;;		Unchanged: 0/0
 18328 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18329 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18330 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18331 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18332 ;;      Totals:         2       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18333 ;;Total ram usage:        4 bytes
 18334 ;; Hardware stack levels used:    1
 18335 ;; Hardware stack levels required when called:    4
 18336 ;; This function calls:
 18337 ;;		___awdiv
 18338 ;; This function is called by:
 18339 ;;		_setDimmerLights_SwOn
 18340 ;;		_setDimmerLights_Dimming
 18341 ;;		_my_MainTimer
 18342 ;;		_Exception_Main
 18343 ;;		_setTemp_Main
 18344 ;;		_setLog_Code
 18345 ;;		_setRFSW_Control
 18346 ;;		_setSw_Main
 18347 ;; This function uses a non-reentrant model
 18348 ;;
 18349                           
 18350                           
 18351                           ;psect for function _setBuz
 18352  1586                     _setBuz:	
 18353                           
 18354                           ;incstack = 0
 18355                           ; Regs used in _setBuz: [wreg+status,2+status,0+pclath+cstack]
 18356                           ;setBuz@count stored from wreg
 18357  1586  00F8               	movwf	setBuz@count
 18358                           
 18359                           ;Buzzer_B1.c: 23: time /= 20;
 18360  1587  3014               	movlw	20
 18361  1588  00F2               	movwf	___awdiv@divisor
 18362  1589  3000               	movlw	0
 18363  158A  00F3               	movwf	___awdiv@divisor+1
 18364  158B  0020               	movlb	0	; select bank0
 18365  158C  0825               	movf	setBuz@time+1,w
 18366  158D  01F5               	clrf	___awdiv@dividend+1
 18367  158E  07F5               	addwf	___awdiv@dividend+1,f
 18368  158F  0824               	movf	setBuz@time,w
 18369  1590  01F4               	clrf	___awdiv@dividend
 18370  1591  07F4               	addwf	___awdiv@dividend,f
 18371  1592  3195  25D9  3195   	fcall	___awdiv
 18372  1595  0873               	movf	?___awdiv+1,w
 18373  1596  0020               	movlb	0	; select bank0
 18374  1597  01A5               	clrf	setBuz@time+1
 18375  1598  07A5               	addwf	setBuz@time+1,f
 18376  1599  0872               	movf	?___awdiv,w
 18377  159A  01A4               	clrf	setBuz@time
 18378  159B  07A4               	addwf	setBuz@time,f
 18379                           
 18380                           ;Buzzer_B1.c: 24: if (Buz1.Enable == 1) {
 18381  159C  0021               	movlb	1	; select bank1
 18382  159D  1C2E               	btfss	_Buz1^(0+128),0
 18383  159E  0008               	return
 18384                           
 18385                           ;Buzzer_B1.c: 25: if (Buz1.GO == 0) {
 18386  159F  18AE               	btfsc	_Buz1^(0+128),1
 18387  15A0  2DB5               	goto	l98
 18388                           
 18389                           ;Buzzer_B1.c: 26: Buz1.GO = 1;
 18390  15A1  14AE               	bsf	_Buz1^(0+128),1
 18391                           
 18392                           ;Buzzer_B1.c: 27: Buz1.Counter = 0;
 18393  15A2  01AF               	clrf	(_Buz1^(0+128)+1)
 18394  15A3  01B0               	clrf	((_Buz1+1)^(0+128)+1)
 18395                           
 18396                           ;Buzzer_B1.c: 28: Buz1.Count = count;
 18397  15A4  0878               	movf	setBuz@count,w
 18398  15A5  00F7               	movwf	??_setBuz
 18399  15A6  0877               	movf	??_setBuz,w
 18400  15A7  00B1               	movwf	(_Buz1^(0+128)+3)
 18401                           
 18402                           ;Buzzer_B1.c: 29: Buz1.TimeValue = time;
 18403  15A8  0020               	movlb	0	; select bank0
 18404  15A9  0825               	movf	setBuz@time+1,w
 18405  15AA  0021               	movlb	1	; select bank1
 18406  15AB  01B5               	clrf	((_Buz1+1)^(0+128)+6)
 18407  15AC  07B5               	addwf	((_Buz1+1)^(0+128)+6),f
 18408  15AD  0020               	movlb	0	; select bank0
 18409  15AE  0824               	movf	setBuz@time,w
 18410  15AF  0021               	movlb	1	; select bank1
 18411  15B0  01B4               	clrf	(_Buz1^(0+128)+6)
 18412  15B1  07B4               	addwf	(_Buz1^(0+128)+6),f
 18413                           
 18414                           ;Buzzer_B1.c: 30: RB3 = 1;
 18415  15B2  0020               	movlb	0	; select bank0
 18416  15B3  158D               	bsf	13,3	;volatile
 18417                           
 18418                           ;Buzzer_B1.c: 31: } else {
 18419  15B4  0008               	return
 18420  15B5                     l98:	
 18421                           
 18422                           ;Buzzer_B1.c: 32: if (Buz1.BufferStatus1 == 0) {
 18423  15B5  19AE               	btfsc	_Buz1^(0+128),3
 18424  15B6  2DC7               	goto	l100
 18425                           
 18426                           ;Buzzer_B1.c: 33: Buz1.BufferStatus1 = 1;
 18427  15B7  15AE               	bsf	_Buz1^(0+128),3
 18428                           
 18429                           ;Buzzer_B1.c: 34: Buz1.CountBuffer1 = count;
 18430  15B8  0878               	movf	setBuz@count,w
 18431  15B9  00F7               	movwf	??_setBuz
 18432  15BA  0877               	movf	??_setBuz,w
 18433  15BB  00B2               	movwf	(_Buz1^(0+128)+4)
 18434                           
 18435                           ;Buzzer_B1.c: 35: Buz1.TimeValueBuffer1 = time;
 18436  15BC  0020               	movlb	0	; select bank0
 18437  15BD  0825               	movf	setBuz@time+1,w
 18438  15BE  0021               	movlb	1	; select bank1
 18439  15BF  01B7               	clrf	((_Buz1+1)^(0+128)+8)
 18440  15C0  07B7               	addwf	((_Buz1+1)^(0+128)+8),f
 18441  15C1  0020               	movlb	0	; select bank0
 18442  15C2  0824               	movf	setBuz@time,w
 18443  15C3  0021               	movlb	1	; select bank1
 18444  15C4  01B6               	clrf	(_Buz1^(0+128)+8)
 18445  15C5  07B6               	addwf	(_Buz1^(0+128)+8),f
 18446                           
 18447                           ;Buzzer_B1.c: 36: } else if (Buz1.BufferStatus2 == 0) {
 18448  15C6  0008               	return
 18449  15C7                     l100:	
 18450  15C7  1A2E               	btfsc	_Buz1^(0+128),4
 18451  15C8  0008               	return
 18452                           
 18453                           ;Buzzer_B1.c: 37: Buz1.BufferStatus2 = 1;
 18454  15C9  162E               	bsf	_Buz1^(0+128),4
 18455                           
 18456                           ;Buzzer_B1.c: 38: Buz1.CountBuffer2 = count;
 18457  15CA  0878               	movf	setBuz@count,w
 18458  15CB  00F7               	movwf	??_setBuz
 18459  15CC  0877               	movf	??_setBuz,w
 18460  15CD  00B3               	movwf	(_Buz1^(0+128)+5)
 18461                           
 18462                           ;Buzzer_B1.c: 39: Buz1.TimeValueBuffer2 = time;
 18463  15CE  0020               	movlb	0	; select bank0
 18464  15CF  0825               	movf	setBuz@time+1,w
 18465  15D0  0021               	movlb	1	; select bank1
 18466  15D1  01B9               	clrf	((_Buz1+1)^(0+128)+10)
 18467  15D2  07B9               	addwf	((_Buz1+1)^(0+128)+10),f
 18468  15D3  0020               	movlb	0	; select bank0
 18469  15D4  0824               	movf	setBuz@time,w
 18470  15D5  0021               	movlb	1	; select bank1
 18471  15D6  01B8               	clrf	(_Buz1^(0+128)+10)
 18472  15D7  07B8               	addwf	(_Buz1^(0+128)+10),f
 18473  15D8  0008               	return
 18474  15D9                     __end_of_setBuz:	
 18475                           
 18476                           	psect	text128
 18477  15D9                     __ptext128:	
 18478 ;; *************** function ___awdiv *****************
 18479 ;; Defined at:
 18480 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awdiv.c"
 18481 ;; Parameters:    Size  Location     Type
 18482 ;;  divisor         2    2[COMMON] int 
 18483 ;;  dividend        2    4[COMMON] int 
 18484 ;; Auto vars:     Size  Location     Type
 18485 ;;  quotient        2    2[BANK0 ] int 
 18486 ;;  sign            1    1[BANK0 ] unsigned char 
 18487 ;;  counter         1    0[BANK0 ] unsigned char 
 18488 ;; Return value:  Size  Location     Type
 18489 ;;                  2    2[COMMON] int 
 18490 ;; Registers used:
 18491 ;;		wreg, status,2, status,0
 18492 ;; Tracked objects:
 18493 ;;		On entry : 0/0
 18494 ;;		On exit  : 0/0
 18495 ;;		Unchanged: 0/0
 18496 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18497 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18498 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18499 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18500 ;;      Totals:         5       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18501 ;;Total ram usage:        9 bytes
 18502 ;; Hardware stack levels used:    1
 18503 ;; Hardware stack levels required when called:    3
 18504 ;; This function calls:
 18505 ;;		Nothing
 18506 ;; This function is called by:
 18507 ;;		_setBuz
 18508 ;; This function uses a non-reentrant model
 18509 ;;
 18510                           
 18511                           
 18512                           ;psect for function ___awdiv
 18513  15D9                     ___awdiv:	
 18514                           
 18515                           ;incstack = 0
 18516                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 18517  15D9  0020               	movlb	0	; select bank0
 18518  15DA  01A1               	clrf	___awdiv@sign
 18519  15DB  1FF3               	btfss	___awdiv@divisor+1,7
 18520  15DC  2DE4               	goto	l9069
 18521  15DD  09F2               	comf	___awdiv@divisor,f
 18522  15DE  09F3               	comf	___awdiv@divisor+1,f
 18523  15DF  0AF2               	incf	___awdiv@divisor,f
 18524  15E0  1903               	skipnz
 18525  15E1  0AF3               	incf	___awdiv@divisor+1,f
 18526  15E2  01A1               	clrf	___awdiv@sign
 18527  15E3  0AA1               	incf	___awdiv@sign,f
 18528  15E4                     l9069:	
 18529  15E4  1FF5               	btfss	___awdiv@dividend+1,7
 18530  15E5  2DEF               	goto	l9075
 18531  15E6  09F4               	comf	___awdiv@dividend,f
 18532  15E7  09F5               	comf	___awdiv@dividend+1,f
 18533  15E8  0AF4               	incf	___awdiv@dividend,f
 18534  15E9  1903               	skipnz
 18535  15EA  0AF5               	incf	___awdiv@dividend+1,f
 18536  15EB  3001               	movlw	1
 18537  15EC  00F6               	movwf	??___awdiv
 18538  15ED  0876               	movf	??___awdiv,w
 18539  15EE  06A1               	xorwf	___awdiv@sign,f
 18540  15EF                     l9075:	
 18541  15EF  01A2               	clrf	___awdiv@quotient
 18542  15F0  01A3               	clrf	___awdiv@quotient+1
 18543  15F1  0873               	movf	___awdiv@divisor+1,w
 18544  15F2  0472               	iorwf	___awdiv@divisor,w
 18545  15F3  1903               	skipnz
 18546  15F4  2E1E               	goto	l9097
 18547  15F5  01A0               	clrf	___awdiv@counter
 18548  15F6  0AA0               	incf	___awdiv@counter,f
 18549  15F7                     l9085:	
 18550  15F7  1BF3               	btfsc	___awdiv@divisor+1,7
 18551  15F8  2E03               	goto	l9087
 18552  15F9  3001               	movlw	1
 18553  15FA                     u10085:	
 18554  15FA  35F2               	lslf	___awdiv@divisor,f
 18555  15FB  0DF3               	rlf	___awdiv@divisor+1,f
 18556  15FC  0B89               	decfsz	9,f
 18557  15FD  2DFA               	goto	u10085
 18558  15FE  3001               	movlw	1
 18559  15FF  00F6               	movwf	??___awdiv
 18560  1600  0876               	movf	??___awdiv,w
 18561  1601  07A0               	addwf	___awdiv@counter,f
 18562  1602  2DF7               	goto	l9085
 18563  1603                     l9087:	
 18564  1603  3001               	movlw	1
 18565  1604                     u10105:	
 18566  1604  35A2               	lslf	___awdiv@quotient,f
 18567  1605  0DA3               	rlf	___awdiv@quotient+1,f
 18568  1606  0B89               	decfsz	9,f
 18569  1607  2E04               	goto	u10105
 18570  1608  0873               	movf	___awdiv@divisor+1,w
 18571  1609  0275               	subwf	___awdiv@dividend+1,w
 18572  160A  1D03               	skipz
 18573  160B  2E0E               	goto	u10115
 18574  160C  0872               	movf	___awdiv@divisor,w
 18575  160D  0274               	subwf	___awdiv@dividend,w
 18576  160E                     u10115:	
 18577  160E  1C03               	skipc
 18578  160F  2E15               	goto	l9093
 18579  1610  0872               	movf	___awdiv@divisor,w
 18580  1611  02F4               	subwf	___awdiv@dividend,f
 18581  1612  0873               	movf	___awdiv@divisor+1,w
 18582  1613  3BF5               	subwfb	___awdiv@dividend+1,f
 18583  1614  1422               	bsf	___awdiv@quotient,0
 18584  1615                     l9093:	
 18585  1615  3001               	movlw	1
 18586  1616                     u10125:	
 18587  1616  36F3               	lsrf	___awdiv@divisor+1,f
 18588  1617  0CF2               	rrf	___awdiv@divisor,f
 18589  1618  0B89               	decfsz	9,f
 18590  1619  2E16               	goto	u10125
 18591  161A  3001               	movlw	1
 18592  161B  02A0               	subwf	___awdiv@counter,f
 18593  161C  1D03               	btfss	3,2
 18594  161D  2E03               	goto	l9087
 18595  161E                     l9097:	
 18596  161E  0821               	movf	___awdiv@sign,w
 18597  161F  1903               	btfsc	3,2
 18598  1620  2E26               	goto	l9101
 18599  1621  09A2               	comf	___awdiv@quotient,f
 18600  1622  09A3               	comf	___awdiv@quotient+1,f
 18601  1623  0AA2               	incf	___awdiv@quotient,f
 18602  1624  1903               	skipnz
 18603  1625  0AA3               	incf	___awdiv@quotient+1,f
 18604  1626                     l9101:	
 18605  1626  0823               	movf	___awdiv@quotient+1,w
 18606  1627  01F3               	clrf	?___awdiv+1
 18607  1628  07F3               	addwf	?___awdiv+1,f
 18608  1629  0822               	movf	___awdiv@quotient,w
 18609  162A  01F2               	clrf	?___awdiv
 18610  162B  07F2               	addwf	?___awdiv,f
 18611  162C  0008               	return
 18612  162D                     __end_of___awdiv:	
 18613                           
 18614                           	psect	text129
 18615  129F                     __ptext129:	
 18616 ;; *************** function _setDimmerLights_SwOff *****************
 18617 ;; Defined at:
 18618 ;;		line 690 in file "../src/Dimmer_B1.c"
 18619 ;; Parameters:    Size  Location     Type
 18620 ;;  sw              1    wreg     unsigned char 
 18621 ;; Auto vars:     Size  Location     Type
 18622 ;;  sw              1    4[COMMON] unsigned char 
 18623 ;; Return value:  Size  Location     Type
 18624 ;;		None               void
 18625 ;; Registers used:
 18626 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18627 ;; Tracked objects:
 18628 ;;		On entry : 0/0
 18629 ;;		On exit  : 0/0
 18630 ;;		Unchanged: 0/0
 18631 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18632 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18633 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18634 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18635 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18636 ;;Total ram usage:        1 bytes
 18637 ;; Hardware stack levels used:    1
 18638 ;; Hardware stack levels required when called:    4
 18639 ;; This function calls:
 18640 ;;		_DimmerLights_SelectPointer
 18641 ;; This function is called by:
 18642 ;;		_DlyOff_Main
 18643 ;;		_Exception_Main
 18644 ;;		_setControl_Lights_Table
 18645 ;;		_setRFSW_Control
 18646 ;;		_setRFSW_AdjControl
 18647 ;;		_setSw_Main
 18648 ;; This function uses a non-reentrant model
 18649 ;;
 18650                           
 18651                           
 18652                           ;psect for function _setDimmerLights_SwOff
 18653  129F                     _setDimmerLights_SwOff:	
 18654                           
 18655                           ;incstack = 0
 18656                           ; Regs used in _setDimmerLights_SwOff: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 18657                           ;setDimmerLights_SwOff@sw stored from wreg
 18658  129F  00F4               	movwf	setDimmerLights_SwOff@sw
 18659                           
 18660                           ;Dimmer_B1.c: 691: DimmerLights_SelectPointer(sw);
 18661  12A0  0874               	movf	setDimmerLights_SwOff@sw,w
 18662  12A1  3190  2066  3192   	fcall	_DimmerLights_SelectPointer
 18663                           
 18664                           ;Dimmer_B1.c: 693: if (DimmerLights->SwFlag == 1) {
 18665  12A4  087B               	movf	_DimmerLights,w
 18666  12A5  0086               	movwf	6
 18667  12A6  3001               	movlw	1	; select bank2/3
 18668  12A7  0087               	movwf	7
 18669  12A8  1C01               	btfss	1,0
 18670  12A9  0008               	return
 18671                           
 18672                           ;Dimmer_B1.c: 694: DimmerLights->SwFlag = 0;
 18673  12AA  087B               	movf	_DimmerLights,w
 18674  12AB  0086               	movwf	6
 18675  12AC  3001               	movlw	1	; select bank2/3
 18676  12AD  0087               	movwf	7
 18677  12AE  1001               	bcf	1,0
 18678                           
 18679                           ;Dimmer_B1.c: 695: if (DimmerLights->Status == 1) {
 18680  12AF  0A7B               	incf	_DimmerLights,w
 18681  12B0  0086               	movwf	6
 18682  12B1  3001               	movlw	1	; select bank2/3
 18683  12B2  0087               	movwf	7
 18684  12B3  1C01               	btfss	1,0
 18685  12B4  2ACB               	goto	l6679
 18686                           
 18687                           ;Dimmer_B1.c: 696: if (DimmerLights->DimmingSwFlag == 1) {
 18688  12B5  087B               	movf	_DimmerLights,w
 18689  12B6  0086               	movwf	6
 18690  12B7  3001               	movlw	1	; select bank2/3
 18691  12B8  0087               	movwf	7
 18692  12B9  1D81               	btfss	1,3
 18693  12BA  0008               	return
 18694                           
 18695                           ;Dimmer_B1.c: 697: DimmerLights->DimmingSwFlag = 0;
 18696  12BB  087B               	movf	_DimmerLights,w
 18697  12BC  0086               	movwf	6
 18698  12BD  3001               	movlw	1	; select bank2/3
 18699  12BE  0087               	movwf	7
 18700  12BF  1181               	bcf	1,3
 18701                           
 18702                           ;Dimmer_B1.c: 699: DimmerLights->DimmingTrigger = 1;
 18703  12C0  087B               	movf	_DimmerLights,w
 18704  12C1  0086               	movwf	6
 18705  12C2  3001               	movlw	1	; select bank2/3
 18706  12C3  0087               	movwf	7
 18707  12C4  1601               	bsf	1,4
 18708                           
 18709                           ;Dimmer_B1.c: 700: DimmerLights->DimmingSwitch = 0;
 18710  12C5  087B               	movf	_DimmerLights,w
 18711  12C6  0086               	movwf	6
 18712  12C7  3001               	movlw	1	; select bank2/3
 18713  12C8  0087               	movwf	7
 18714  12C9  1281               	bcf	1,5
 18715                           
 18716                           ;Dimmer_B1.c: 701: }
 18717                           ;Dimmer_B1.c: 702: } else {
 18718  12CA  0008               	return
 18719  12CB                     l6679:	
 18720                           
 18721                           ;Dimmer_B1.c: 704: DimmerLights->Trigger = 1;
 18722  12CB  087B               	movf	_DimmerLights,w
 18723  12CC  0086               	movwf	6
 18724  12CD  3001               	movlw	1	; select bank2/3
 18725  12CE  0087               	movwf	7
 18726  12CF  1481               	bsf	1,1
 18727                           
 18728                           ;Dimmer_B1.c: 705: DimmerLights->Switch = 0;
 18729  12D0  087B               	movf	_DimmerLights,w
 18730  12D1  0086               	movwf	6
 18731  12D2  3001               	movlw	1	; select bank2/3
 18732  12D3  0087               	movwf	7
 18733  12D4  1101               	bcf	1,2
 18734  12D5  0008               	return
 18735  12D6                     __end_of_setDimmerLights_SwOff:	
 18736                           
 18737                           	psect	text130
 18738  1BF9                     __ptext130:	
 18739 ;; *************** function _getDimmerLights_Status *****************
 18740 ;; Defined at:
 18741 ;;		line 987 in file "../src/Dimmer_B1.c"
 18742 ;; Parameters:    Size  Location     Type
 18743 ;;  lights          1    wreg     unsigned char 
 18744 ;; Auto vars:     Size  Location     Type
 18745 ;;  lights          1    4[COMMON] unsigned char 
 18746 ;;  status          1    5[COMMON] unsigned char 
 18747 ;; Return value:  Size  Location     Type
 18748 ;;                  1    wreg      unsigned char 
 18749 ;; Registers used:
 18750 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18751 ;; Tracked objects:
 18752 ;;		On entry : 0/0
 18753 ;;		On exit  : 0/0
 18754 ;;		Unchanged: 0/0
 18755 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18756 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18757 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18758 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18759 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18760 ;;Total ram usage:        2 bytes
 18761 ;; Hardware stack levels used:    1
 18762 ;; Hardware stack levels required when called:    4
 18763 ;; This function calls:
 18764 ;;		_DimmerLights_SelectPointer
 18765 ;; This function is called by:
 18766 ;;		_DlyOff_Main
 18767 ;;		_Exception_Main
 18768 ;;		_setControl_Lights_Table
 18769 ;;		_setRFSW_Control
 18770 ;;		_setRFSW_AdjControl
 18771 ;; This function uses a non-reentrant model
 18772 ;;
 18773                           
 18774                           
 18775                           ;psect for function _getDimmerLights_Status
 18776  1BF9                     _getDimmerLights_Status:	
 18777                           
 18778                           ;incstack = 0
 18779                           ; Regs used in _getDimmerLights_Status: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
 18780                           ;getDimmerLights_Status@lights stored from wreg
 18781  1BF9  00F4               	movwf	getDimmerLights_Status@lights
 18782                           
 18783                           ;Dimmer_B1.c: 988: DimmerLights_SelectPointer(lights);
 18784  1BFA  0874               	movf	getDimmerLights_Status@lights,w
 18785  1BFB  3190  2066         	fcall	_DimmerLights_SelectPointer
 18786                           
 18787                           ;Dimmer_B1.c: 989: char status = DimmerLights->Status == 1 ? 1 : 0;
 18788  1BFD  0A7B               	incf	_DimmerLights,w
 18789  1BFE  0086               	movwf	6
 18790  1BFF  3001               	movlw	1	; select bank2/3
 18791  1C00  0087               	movwf	7
 18792  1C01  3000               	movlw	0
 18793  1C02  1801               	btfsc	1,0
 18794  1C03  3001               	movlw	1
 18795  1C04  00F5               	movwf	getDimmerLights_Status@status
 18796                           
 18797                           ;Dimmer_B1.c: 990: return status;
 18798  1C05  0875               	movf	getDimmerLights_Status@status,w
 18799  1C06  0008               	return
 18800  1C07                     __end_of_getDimmerLights_Status:	
 18801                           
 18802                           	psect	text131
 18803  1066                     __ptext131:	
 18804 ;; *************** function _DimmerLights_SelectPointer *****************
 18805 ;; Defined at:
 18806 ;;		line 572 in file "../src/Dimmer_B1.c"
 18807 ;; Parameters:    Size  Location     Type
 18808 ;;  lights          1    wreg     unsigned char 
 18809 ;; Auto vars:     Size  Location     Type
 18810 ;;  lights          1    3[COMMON] unsigned char 
 18811 ;; Return value:  Size  Location     Type
 18812 ;;		None               void
 18813 ;; Registers used:
 18814 ;;		wreg
 18815 ;; Tracked objects:
 18816 ;;		On entry : 0/0
 18817 ;;		On exit  : 0/0
 18818 ;;		Unchanged: 0/0
 18819 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18820 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18821 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18822 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18823 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18824 ;;Total ram usage:        2 bytes
 18825 ;; Hardware stack levels used:    1
 18826 ;; Hardware stack levels required when called:    3
 18827 ;; This function calls:
 18828 ;;		Nothing
 18829 ;; This function is called by:
 18830 ;;		_setDimmerLights_SwOn
 18831 ;;		_setDimmerLights_SwOff
 18832 ;;		_setDimmerLights_DimmingOn
 18833 ;;		_setDimmerLights_Main
 18834 ;;		_getDimmerLights_Status
 18835 ;;		_setDimmerLights_DimmingRun
 18836 ;;		_setDimmerLights_Status
 18837 ;; This function uses a non-reentrant model
 18838 ;;
 18839                           
 18840                           
 18841                           ;psect for function _DimmerLights_SelectPointer
 18842  1066                     _DimmerLights_SelectPointer:	
 18843                           
 18844                           ;incstack = 0
 18845                           ; Regs used in _DimmerLights_SelectPointer: [wreg]
 18846                           ;DimmerLights_SelectPointer@lights stored from wreg
 18847  1066  00F3               	movwf	DimmerLights_SelectPointer@lights
 18848                           
 18849                           ;Dimmer_B1.c: 574: if (lights == 1) {
 18850  1067  0873               	movf	DimmerLights_SelectPointer@lights,w
 18851  1068  3A01               	xorlw	1
 18852  1069  1D03               	skipz
 18853  106A  2870               	goto	l6351
 18854                           
 18855                           ;Dimmer_B1.c: 575: DimmerLights = &DimmerLights1;
 18856  106B  305E               	movlw	_DimmerLights1& (0+255)
 18857  106C  00F2               	movwf	??_DimmerLights_SelectPointer
 18858  106D  0872               	movf	??_DimmerLights_SelectPointer,w
 18859  106E  00FB               	movwf	_DimmerLights
 18860                           
 18861                           ;Dimmer_B1.c: 576: }
 18862  106F  0008               	return
 18863  1070                     l6351:	
 18864                           
 18865                           ;Dimmer_B1.c: 579: else if (lights == 2) {
 18866  1070  0873               	movf	DimmerLights_SelectPointer@lights,w
 18867  1071  3A02               	xorlw	2
 18868  1072  1D03               	skipz
 18869  1073  0008               	return
 18870                           
 18871                           ;Dimmer_B1.c: 580: DimmerLights = &DimmerLights2;
 18872  1074  3066               	movlw	_DimmerLights2& (0+255)
 18873  1075  00F2               	movwf	??_DimmerLights_SelectPointer
 18874  1076  0872               	movf	??_DimmerLights_SelectPointer,w
 18875  1077  00FB               	movwf	_DimmerLights
 18876  1078  0008               	return
 18877  1079                     __end_of_DimmerLights_SelectPointer:	
 18878                           
 18879                           	psect	text132
 18880  1B1D                     __ptext132:	
 18881 ;; *************** function _DelayOff_Initialization *****************
 18882 ;; Defined at:
 18883 ;;		line 26 in file "../src/DelayOff_B1.c"
 18884 ;; Parameters:    Size  Location     Type
 18885 ;;		None
 18886 ;; Auto vars:     Size  Location     Type
 18887 ;;		None
 18888 ;; Return value:  Size  Location     Type
 18889 ;;		None               void
 18890 ;; Registers used:
 18891 ;;		wreg, status,2, status,0, pclath, cstack
 18892 ;; Tracked objects:
 18893 ;;		On entry : 0/0
 18894 ;;		On exit  : 0/0
 18895 ;;		Unchanged: 0/0
 18896 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18897 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18898 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18899 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18900 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18901 ;;Total ram usage:        0 bytes
 18902 ;; Hardware stack levels used:    1
 18903 ;; Hardware stack levels required when called:    5
 18904 ;; This function calls:
 18905 ;;		_DlyOff_Initialization
 18906 ;; This function is called by:
 18907 ;;		_main
 18908 ;; This function uses a non-reentrant model
 18909 ;;
 18910                           
 18911                           
 18912                           ;psect for function _DelayOff_Initialization
 18913  1B1D                     _DelayOff_Initialization:	
 18914                           
 18915                           ;DelayOff_B1.c: 28: DlyOff_Initialization(1);
 18916                           
 18917                           ;incstack = 0
 18918                           ; Regs used in _DelayOff_Initialization: [wreg+status,2+status,0+pclath+cstack]
 18919  1B1D  3001               	movlw	1
 18920  1B1E  319A  22E4  319B   	fcall	_DlyOff_Initialization
 18921                           
 18922                           ;DelayOff_B1.c: 32: DlyOff_Initialization(2);
 18923  1B21  3002               	movlw	2
 18924  1B22  319A  22E4         	fcall	_DlyOff_Initialization
 18925  1B24  0008               	return
 18926  1B25                     __end_of_DelayOff_Initialization:	
 18927                           
 18928                           	psect	text133
 18929  1AE4                     __ptext133:	
 18930 ;; *************** function _DlyOff_Initialization *****************
 18931 ;; Defined at:
 18932 ;;		line 56 in file "../src/DelayOff_B1.c"
 18933 ;; Parameters:    Size  Location     Type
 18934 ;;  sw              1    wreg     unsigned char 
 18935 ;; Auto vars:     Size  Location     Type
 18936 ;;  sw              1    4[COMMON] unsigned char 
 18937 ;; Return value:  Size  Location     Type
 18938 ;;		None               void
 18939 ;; Registers used:
 18940 ;;		wreg, status,2, status,0, pclath, cstack
 18941 ;; Tracked objects:
 18942 ;;		On entry : 0/0
 18943 ;;		On exit  : 0/0
 18944 ;;		Unchanged: 0/0
 18945 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18946 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18947 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18948 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18949 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18950 ;;Total ram usage:        1 bytes
 18951 ;; Hardware stack levels used:    1
 18952 ;; Hardware stack levels required when called:    4
 18953 ;; This function calls:
 18954 ;;		_DelayOffPointSelect
 18955 ;; This function is called by:
 18956 ;;		_DelayOff_Initialization
 18957 ;; This function uses a non-reentrant model
 18958 ;;
 18959                           
 18960                           
 18961                           ;psect for function _DlyOff_Initialization
 18962  1AE4                     _DlyOff_Initialization:	
 18963                           
 18964                           ;incstack = 0
 18965                           ; Regs used in _DlyOff_Initialization: [wreg+status,2+status,0+pclath+cstack]
 18966                           ;DlyOff_Initialization@sw stored from wreg
 18967  1AE4  00F4               	movwf	DlyOff_Initialization@sw
 18968                           
 18969                           ;DelayOff_B1.c: 57: DelayOffPointSelect(sw);
 18970  1AE5  0874               	movf	DlyOff_Initialization@sw,w
 18971  1AE6  319D  253D         	fcall	_DelayOffPointSelect
 18972  1AE8  0008               	return
 18973  1AE9                     __end_of_DlyOff_Initialization:	
 18974                           
 18975                           	psect	text134
 18976  1D3D                     __ptext134:	
 18977 ;; *************** function _DelayOffPointSelect *****************
 18978 ;; Defined at:
 18979 ;;		line 7 in file "../src/DelayOff_B1.c"
 18980 ;; Parameters:    Size  Location     Type
 18981 ;;  sw              1    wreg     unsigned char 
 18982 ;; Auto vars:     Size  Location     Type
 18983 ;;  sw              1    3[COMMON] unsigned char 
 18984 ;; Return value:  Size  Location     Type
 18985 ;;		None               void
 18986 ;; Registers used:
 18987 ;;		wreg
 18988 ;; Tracked objects:
 18989 ;;		On entry : 0/0
 18990 ;;		On exit  : 0/0
 18991 ;;		Unchanged: 0/0
 18992 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18993 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18994 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18995 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18996 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18997 ;;Total ram usage:        2 bytes
 18998 ;; Hardware stack levels used:    1
 18999 ;; Hardware stack levels required when called:    3
 19000 ;; This function calls:
 19001 ;;		Nothing
 19002 ;; This function is called by:
 19003 ;;		_DlyOff_Initialization
 19004 ;;		_DlyOff_Main
 19005 ;;		_setDelayOff_GO
 19006 ;;		_getDelayOff_GO
 19007 ;; This function uses a non-reentrant model
 19008 ;;
 19009                           
 19010                           
 19011                           ;psect for function _DelayOffPointSelect
 19012  1D3D                     _DelayOffPointSelect:	
 19013                           
 19014                           ;incstack = 0
 19015                           ; Regs used in _DelayOffPointSelect: [wreg]
 19016                           ;DelayOffPointSelect@sw stored from wreg
 19017  1D3D  00F3               	movwf	DelayOffPointSelect@sw
 19018                           
 19019                           ;DelayOff_B1.c: 9: if (sw == 1) {
 19020  1D3E  0873               	movf	DelayOffPointSelect@sw,w
 19021  1D3F  3A01               	xorlw	1
 19022  1D40  1D03               	skipz
 19023  1D41  2D48               	goto	l6341
 19024                           
 19025                           ;DelayOff_B1.c: 10: DelayOff = &DlySw1;
 19026  1D42  30D0               	movlw	_DlySw1& (0+255)
 19027  1D43  00F2               	movwf	??_DelayOffPointSelect
 19028  1D44  0872               	movf	??_DelayOffPointSelect,w
 19029  1D45  0021               	movlb	1	; select bank1
 19030  1D46  00C4               	movwf	_DelayOff^(0+128)
 19031                           
 19032                           ;DelayOff_B1.c: 11: }
 19033  1D47  0008               	return
 19034  1D48                     l6341:	
 19035                           
 19036                           ;DelayOff_B1.c: 14: else if (sw == 2) {
 19037  1D48  0873               	movf	DelayOffPointSelect@sw,w
 19038  1D49  3A02               	xorlw	2
 19039  1D4A  1D03               	skipz
 19040  1D4B  0008               	return
 19041                           
 19042                           ;DelayOff_B1.c: 15: DelayOff = &DlySw2;
 19043  1D4C  30D5               	movlw	_DlySw2& (0+255)
 19044  1D4D  00F2               	movwf	??_DelayOffPointSelect
 19045  1D4E  0872               	movf	??_DelayOffPointSelect,w
 19046  1D4F  0021               	movlb	1	; select bank1
 19047  1D50  00C4               	movwf	_DelayOff^(0+128)
 19048  1D51  0008               	return
 19049  1D52                     __end_of_DelayOffPointSelect:	
 19050                           
 19051                           	psect	text135
 19052  0801                     __ptext135:	
 19053 ;; *************** function _Buzzer_Main *****************
 19054 ;; Defined at:
 19055 ;;		line 46 in file "../src/Buzzer_B1.c"
 19056 ;; Parameters:    Size  Location     Type
 19057 ;;		None
 19058 ;; Auto vars:     Size  Location     Type
 19059 ;;		None
 19060 ;; Return value:  Size  Location     Type
 19061 ;;		None               void
 19062 ;; Registers used:
 19063 ;;		wreg, status,2, status,0
 19064 ;; Tracked objects:
 19065 ;;		On entry : 0/0
 19066 ;;		On exit  : 0/0
 19067 ;;		Unchanged: 0/0
 19068 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19069 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19070 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19071 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19072 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19073 ;;Total ram usage:        1 bytes
 19074 ;; Hardware stack levels used:    1
 19075 ;; Hardware stack levels required when called:    3
 19076 ;; This function calls:
 19077 ;;		Nothing
 19078 ;; This function is called by:
 19079 ;;		_main
 19080 ;; This function uses a non-reentrant model
 19081 ;;
 19082                           
 19083                           
 19084                           ;psect for function _Buzzer_Main
 19085  0801                     _Buzzer_Main:	
 19086                           
 19087                           ;Buzzer_B1.c: 47: if (Buz1.GO == 1) {
 19088                           
 19089                           ;incstack = 0
 19090                           ; Regs used in _Buzzer_Main: [wreg+status,2+status,0]
 19091  0801  0021               	movlb	1	; select bank1
 19092  0802  1CAE               	btfss	_Buz1^(0+128),1
 19093  0803  0008               	return
 19094                           
 19095                           ;Buzzer_B1.c: 48: Buz1.Counter++;
 19096  0804  3001               	movlw	1
 19097  0805  07AF               	addwf	(_Buz1^(0+128)+1),f
 19098  0806  3000               	movlw	0
 19099  0807  3DB0               	addwfc	((_Buz1+1)^(0+128)+1),f
 19100                           
 19101                           ;Buzzer_B1.c: 49: if (Buz1.Counter >= Buz1.TimeValue) {
 19102  0808  0835               	movf	((_Buz1+1)^(0+128)+6),w
 19103  0809  0230               	subwf	((_Buz1+1)^(0+128)+1),w
 19104  080A  1D03               	skipz
 19105  080B  280E               	goto	u8735
 19106  080C  0834               	movf	(_Buz1^(0+128)+6),w
 19107  080D  022F               	subwf	(_Buz1^(0+128)+1),w
 19108  080E                     u8735:	
 19109  080E  1C03               	skipc
 19110  080F  0008               	return
 19111                           
 19112                           ;Buzzer_B1.c: 50: Buz1.Counter = 0;
 19113  0810  01AF               	clrf	(_Buz1^(0+128)+1)
 19114  0811  01B0               	clrf	((_Buz1+1)^(0+128)+1)
 19115                           
 19116                           ;Buzzer_B1.c: 51: Buz1.Switch = (RB3 == 1) ? 1 : 0;
 19117  0812  12AE               	bcf	_Buz1^(0+128),5
 19118  0813  0020               	movlb	0	; select bank0
 19119  0814  1D8D               	btfss	13,3	;volatile
 19120  0815  2818               	goto	l8307
 19121  0816  0021               	movlb	1	; select bank1
 19122  0817  16AE               	bsf	_Buz1^(0+128),5
 19123  0818                     l8307:	
 19124                           
 19125                           ;Buzzer_B1.c: 52: if (Buz1.Switch == 0) {
 19126  0818  0021               	movlb	1	; select bank1
 19127  0819  1AAE               	btfsc	_Buz1^(0+128),5
 19128  081A  2840               	goto	l108
 19129                           
 19130                           ;Buzzer_B1.c: 53: if (Buz1.Count == 0) {
 19131  081B  08B1               	movf	(_Buz1^(0+128)+3),f
 19132  081C  1D03               	skipz
 19133  081D  283C               	goto	l109
 19134                           
 19135                           ;Buzzer_B1.c: 54: if (Buz1.BufferStatus1 == 1) {
 19136  081E  1DAE               	btfss	_Buz1^(0+128),3
 19137  081F  282C               	goto	l110
 19138                           
 19139                           ;Buzzer_B1.c: 55: Buz1.BufferStatus1 = 0;
 19140  0820  11AE               	bcf	_Buz1^(0+128),3
 19141                           
 19142                           ;Buzzer_B1.c: 56: Buz1.Count = Buz1.CountBuffer1;
 19143  0821  0832               	movf	(_Buz1^(0+128)+4),w
 19144  0822  00F2               	movwf	??_Buzzer_Main
 19145  0823  0872               	movf	??_Buzzer_Main,w
 19146  0824  00B1               	movwf	(_Buz1^(0+128)+3)
 19147                           
 19148                           ;Buzzer_B1.c: 57: Buz1.TimeValue = Buz1.TimeValueBuffer1;
 19149  0825  0837               	movf	((_Buz1+1)^(0+128)+8),w
 19150  0826  01B5               	clrf	((_Buz1+1)^(0+128)+6)
 19151  0827  07B5               	addwf	((_Buz1+1)^(0+128)+6),f
 19152  0828  0836               	movf	(_Buz1^(0+128)+8),w
 19153  0829  01B4               	clrf	(_Buz1^(0+128)+6)
 19154  082A  07B4               	addwf	(_Buz1^(0+128)+6),f
 19155                           
 19156                           ;Buzzer_B1.c: 58: } else if (Buz1.BufferStatus2 == 1) {
 19157  082B  0008               	return
 19158  082C                     l110:	
 19159  082C  1E2E               	btfss	_Buz1^(0+128),4
 19160  082D  283A               	goto	l112
 19161                           
 19162                           ;Buzzer_B1.c: 59: Buz1.BufferStatus2 = 0;
 19163  082E  122E               	bcf	_Buz1^(0+128),4
 19164                           
 19165                           ;Buzzer_B1.c: 60: Buz1.Count = Buz1.CountBuffer2;
 19166  082F  0833               	movf	(_Buz1^(0+128)+5),w
 19167  0830  00F2               	movwf	??_Buzzer_Main
 19168  0831  0872               	movf	??_Buzzer_Main,w
 19169  0832  00B1               	movwf	(_Buz1^(0+128)+3)
 19170                           
 19171                           ;Buzzer_B1.c: 61: Buz1.TimeValue = Buz1.TimeValueBuffer2;
 19172  0833  0839               	movf	((_Buz1+1)^(0+128)+10),w
 19173  0834  01B5               	clrf	((_Buz1+1)^(0+128)+6)
 19174  0835  07B5               	addwf	((_Buz1+1)^(0+128)+6),f
 19175  0836  0838               	movf	(_Buz1^(0+128)+10),w
 19176  0837  01B4               	clrf	(_Buz1^(0+128)+6)
 19177  0838  07B4               	addwf	(_Buz1^(0+128)+6),f
 19178                           
 19179                           ;Buzzer_B1.c: 62: } else {
 19180  0839  0008               	return
 19181  083A                     l112:	
 19182                           
 19183                           ;Buzzer_B1.c: 63: Buz1.GO = 0;
 19184  083A  10AE               	bcf	_Buz1^(0+128),1
 19185                           
 19186                           ;Buzzer_B1.c: 64: }
 19187                           ;Buzzer_B1.c: 65: } else {
 19188  083B  0008               	return
 19189  083C                     l109:	
 19190                           
 19191                           ;Buzzer_B1.c: 66: Buz1.Switch = 1;
 19192  083C  16AE               	bsf	_Buz1^(0+128),5
 19193                           
 19194                           ;Buzzer_B1.c: 68: RB3 = 1;
 19195  083D  0020               	movlb	0	; select bank0
 19196  083E  158D               	bsf	13,3	;volatile
 19197                           
 19198                           ;Buzzer_B1.c: 69: }
 19199                           ;Buzzer_B1.c: 70: } else {
 19200  083F  0008               	return
 19201  0840                     l108:	
 19202                           
 19203                           ;Buzzer_B1.c: 71: Buz1.Switch = 0;
 19204  0840  12AE               	bcf	_Buz1^(0+128),5
 19205                           
 19206                           ;Buzzer_B1.c: 73: RB3 = 0;
 19207  0841  0020               	movlb	0	; select bank0
 19208  0842  118D               	bcf	13,3	;volatile
 19209                           
 19210                           ;Buzzer_B1.c: 75: Buz1.Count--;
 19211  0843  3001               	movlw	1
 19212  0844  0021               	movlb	1	; select bank1
 19213  0845  02B1               	subwf	(_Buz1^(0+128)+3),f
 19214  0846  0008               	return
 19215  0847                     __end_of_Buzzer_Main:	
 19216                           
 19217                           	psect	text136
 19218  1ABE                     __ptext136:	
 19219 ;; *************** function _Buzzer_Initialization *****************
 19220 ;; Defined at:
 19221 ;;		line 11 in file "../src/Buzzer_B1.c"
 19222 ;; Parameters:    Size  Location     Type
 19223 ;;		None
 19224 ;; Auto vars:     Size  Location     Type
 19225 ;;		None
 19226 ;; Return value:  Size  Location     Type
 19227 ;;		None               void
 19228 ;; Registers used:
 19229 ;;		None
 19230 ;; Tracked objects:
 19231 ;;		On entry : 0/0
 19232 ;;		On exit  : 0/0
 19233 ;;		Unchanged: 0/0
 19234 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19235 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19236 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19237 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19238 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19239 ;;Total ram usage:        0 bytes
 19240 ;; Hardware stack levels used:    1
 19241 ;; Hardware stack levels required when called:    3
 19242 ;; This function calls:
 19243 ;;		Nothing
 19244 ;; This function is called by:
 19245 ;;		_main
 19246 ;; This function uses a non-reentrant model
 19247 ;;
 19248                           
 19249                           
 19250                           ;psect for function _Buzzer_Initialization
 19251  1ABE                     _Buzzer_Initialization:	
 19252                           
 19253                           ;Buzzer_B1.c: 13: Buz1.Enable = 1;
 19254                           
 19255                           ;incstack = 0
 19256                           ; Regs used in _Buzzer_Initialization: []
 19257  1ABE  0021               	movlb	1	; select bank1
 19258  1ABF  142E               	bsf	_Buz1^(0+128),0
 19259  1AC0  0008               	return
 19260  1AC1                     __end_of_Buzzer_Initialization:	
 19261                           
 19262                           	psect	intentry
 19263  0004                     __pintentry:	
 19264 ;; *************** function _ISR *****************
 19265 ;; Defined at:
 19266 ;;		line 112 in file "../src/MCU_B1.c"
 19267 ;; Parameters:    Size  Location     Type
 19268 ;;		None
 19269 ;; Auto vars:     Size  Location     Type
 19270 ;;		None
 19271 ;; Return value:  Size  Location     Type
 19272 ;;		None               void
 19273 ;; Registers used:
 19274 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19275 ;; Tracked objects:
 19276 ;;		On entry : 0/0
 19277 ;;		On exit  : 0/0
 19278 ;;		Unchanged: 0/0
 19279 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19280 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19281 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19282 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19283 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19284 ;;Total ram usage:        1 bytes
 19285 ;; Hardware stack levels used:    1
 19286 ;; Hardware stack levels required when called:    2
 19287 ;; This function calls:
 19288 ;;		_IOC_ISR
 19289 ;;		_TMR1_ISR
 19290 ;; This function is called by:
 19291 ;;		Interrupt level 1
 19292 ;; This function uses a non-reentrant model
 19293 ;;
 19294                           
 19295  0004                     _ISR:	
 19296                           
 19297                           ;incstack = 0
 19298                           ; Regs used in _ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 19299  0004  147E               	bsf	126,0	;set compiler interrupt flag
 19300  0005  3180               	pagesel	$
 19301  0006  0020               	movlb	0	; select bank0
 19302  0007  087F               	movf	127,w
 19303  0008  00F1               	movwf	??_ISR
 19304                           
 19305                           ;MCU_B1.c: 121: if (TMR1IE == 1 && TMR1IF == 1) {
 19306  0009  0021               	movlb	1	; select bank1
 19307  000A  1C11               	btfss	17,0	;volatile
 19308  000B  2813               	goto	i1l1414
 19309  000C  0020               	movlb	0	; select bank0
 19310  000D  1C11               	btfss	17,0	;volatile
 19311  000E  2813               	goto	i1l1414
 19312                           
 19313                           ;MCU_B1.c: 122: TMR1_ISR();
 19314  000F  319F  279B  3180   	fcall	_TMR1_ISR
 19315                           
 19316                           ;MCU_B1.c: 123: }
 19317  0012  281B               	goto	i1l1417
 19318  0013                     i1l1414:	
 19319                           
 19320                           ;MCU_B1.c: 134: else if (IOCIE == 1 && IOCIF == 1 && IOCBF2 == 1) {
 19321  0013  198B               	btfsc	11,3	;volatile
 19322  0014  1C0B               	btfss	11,0	;volatile
 19323  0015  281B               	goto	i1l1417
 19324  0016  0027               	movlb	7	; select bank7
 19325  0017  1D16               	btfss	22,2	;volatile
 19326  0018  281B               	goto	i1l1417
 19327                           
 19328                           ;MCU_B1.c: 135: IOC_ISR();
 19329  0019  319B  2388         	fcall	_IOC_ISR
 19330  001B                     i1l1417:	
 19331                           ;MCU_B1.c: 136: }
 19332                           ;MCU_B1.c: 144: return;
 19333                           
 19334  001B  0871               	movf	??_ISR,w
 19335  001C  0020               	movlb	0	; select bank0
 19336  001D  00FF               	movwf	127
 19337  001E  107E               	bcf	126,0	;clear compiler interrupt flag
 19338  001F  0009               	retfie
 19339  0020                     __end_of_ISR:	
 19340                           
 19341                           	psect	text138
 19342  1F9B                     __ptext138:	
 19343 ;; *************** function _TMR1_ISR *****************
 19344 ;; Defined at:
 19345 ;;		line 232 in file "../src/MCU_B1.c"
 19346 ;; Parameters:    Size  Location     Type
 19347 ;;		None
 19348 ;; Auto vars:     Size  Location     Type
 19349 ;;		None
 19350 ;; Return value:  Size  Location     Type
 19351 ;;		None               void
 19352 ;; Registers used:
 19353 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19354 ;; Tracked objects:
 19355 ;;		On entry : 0/0
 19356 ;;		On exit  : 0/0
 19357 ;;		Unchanged: 0/0
 19358 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19359 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19360 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19361 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19362 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19363 ;;Total ram usage:        0 bytes
 19364 ;; Hardware stack levels used:    1
 19365 ;; Hardware stack levels required when called:    1
 19366 ;; This function calls:
 19367 ;;		_DimmerLights_MOSFET_TMR_1
 19368 ;;		_DimmerLights_MOSFET_TMR_2
 19369 ;; This function is called by:
 19370 ;;		_ISR
 19371 ;; This function uses a non-reentrant model
 19372 ;;
 19373                           
 19374                           
 19375                           ;psect for function _TMR1_ISR
 19376  1F9B                     _TMR1_ISR:	
 19377                           
 19378                           ;MCU_B1.c: 234: TMR1H = (int)((65536-1480)/256);
 19379                           
 19380                           ;incstack = 0
 19381                           ; Regs used in _TMR1_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 19382  1F9B  30FA               	movlw	250
 19383  1F9C  0020               	movlb	0	; select bank0
 19384  1F9D  0097               	movwf	23	;volatile
 19385                           
 19386                           ;MCU_B1.c: 235: TMR1L = (int)((65536-1480)%256);
 19387  1F9E  3038               	movlw	56
 19388  1F9F  0096               	movwf	22	;volatile
 19389                           
 19390                           ;MCU_B1.c: 236: TMR1IF = 0;
 19391  1FA0  1011               	bcf	17,0	;volatile
 19392                           
 19393                           ;MCU_B1.c: 241: DimmerLights_MOSFET_TMR_1();
 19394  1FA1  3194  24E2  319F   	fcall	_DimmerLights_MOSFET_TMR_1
 19395                           
 19396                           ;MCU_B1.c: 246: DimmerLights_MOSFET_TMR_2();
 19397  1FA4  3195  2534  319F   	fcall	_DimmerLights_MOSFET_TMR_2
 19398                           
 19399                           ;MCU_B1.c: 255: Timer1.Count++;
 19400  1FA7  3001               	movlw	1
 19401  1FA8  0021               	movlb	1	; select bank1
 19402  1FA9  07BE               	addwf	(_Timer1^(0+128)+1),f
 19403  1FAA  3000               	movlw	0
 19404  1FAB  3DBF               	addwfc	((_Timer1+1)^(0+128)+1),f
 19405                           
 19406                           ;MCU_B1.c: 256: if (Timer1.Count == (int)(20*10)) {
 19407  1FAC  3001               	movlw	1
 19408  1FAD  3EBD               	addlw	_Timer1& (0+255)
 19409  1FAE  0086               	movwf	6
 19410  1FAF  0187               	clrf	7
 19411  1FB0  3F40               	moviw [0]fsr1
 19412  1FB1  3AC8               	xorlw	200
 19413  1FB2  1D03               	skipz
 19414  1FB3  2FB6               	goto	u883_25
 19415  1FB4  3F41               	moviw [1]fsr1
 19416  1FB5  3A00               	xorlw	0
 19417  1FB6                     u883_25:	
 19418  1FB6  1D03               	skipz
 19419  1FB7  0008               	return
 19420                           
 19421                           ;MCU_B1.c: 257: Timer1.Count = 0;
 19422  1FB8  01BE               	clrf	(_Timer1^(0+128)+1)
 19423  1FB9  01BF               	clrf	((_Timer1+1)^(0+128)+1)
 19424                           
 19425                           ;MCU_B1.c: 258: Timer1.Timeout = 1;
 19426  1FBA  143D               	bsf	_Timer1^(0+128),0
 19427  1FBB  0008               	return
 19428  1FBC                     __end_of_TMR1_ISR:	
 19429                           
 19430                           	psect	text139
 19431  1534                     __ptext139:	
 19432 ;; *************** function _DimmerLights_MOSFET_TMR_2 *****************
 19433 ;; Defined at:
 19434 ;;		line 1255 in file "../src/Dimmer_B1.c"
 19435 ;; Parameters:    Size  Location     Type
 19436 ;;		None
 19437 ;; Auto vars:     Size  Location     Type
 19438 ;;		None
 19439 ;; Return value:  Size  Location     Type
 19440 ;;		None               void
 19441 ;; Registers used:
 19442 ;;		wreg, status,2, status,0
 19443 ;; Tracked objects:
 19444 ;;		On entry : 0/0
 19445 ;;		On exit  : 0/0
 19446 ;;		Unchanged: 0/0
 19447 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19448 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19449 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19450 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19451 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19452 ;;Total ram usage:        1 bytes
 19453 ;; Hardware stack levels used:    1
 19454 ;; This function calls:
 19455 ;;		Nothing
 19456 ;; This function is called by:
 19457 ;;		_TMR1_ISR
 19458 ;; This function uses a non-reentrant model
 19459 ;;
 19460                           
 19461                           
 19462                           ;psect for function _DimmerLights_MOSFET_TMR_2
 19463  1534                     _DimmerLights_MOSFET_TMR_2:	
 19464                           
 19465                           ;Dimmer_B1.c: 1256: if (DimmerIntr2.Start == 1) {
 19466                           
 19467                           ;incstack = 0
 19468                           ; Regs used in _DimmerLights_MOSFET_TMR_2: [wreg+status,2+status,0]
 19469  1534  0021               	movlb	1	; select bank1
 19470  1535  1D69               	btfss	_DimmerIntr2^(0+128),2
 19471  1536  2D41               	goto	i1l7859
 19472                           
 19473                           ;Dimmer_B1.c: 1257: DimmerIntr2.Count++;
 19474  1537  3001               	movlw	1
 19475  1538  00F0               	movwf	??_DimmerLights_MOSFET_TMR_2
 19476  1539  0870               	movf	??_DimmerLights_MOSFET_TMR_2,w
 19477  153A  07EA               	addwf	(_DimmerIntr2^(0+128)+1),f
 19478                           
 19479                           ;Dimmer_B1.c: 1258: if (DimmerIntr2.Count >= ((char)(65*0.8)) + 1) {
 19480  153B  3035               	movlw	53
 19481  153C  026A               	subwf	(_DimmerIntr2^(0+128)+1),w
 19482  153D  1C03               	skipc
 19483  153E  2D41               	goto	i1l7859
 19484                           
 19485                           ;Dimmer_B1.c: 1259: DimmerIntr2.Count = 0;
 19486  153F  01EA               	clrf	(_DimmerIntr2^(0+128)+1)
 19487                           
 19488                           ;Dimmer_B1.c: 1260: DimmerIntr2.Start = 0;
 19489  1540  1169               	bcf	_DimmerIntr2^(0+128),2
 19490  1541                     i1l7859:	
 19491                           
 19492                           ;Dimmer_B1.c: 1261: }
 19493                           ;Dimmer_B1.c: 1262: }
 19494                           ;Dimmer_B1.c: 1264: if (DimmerIntr2.GO == 1) {
 19495  1541  1C69               	btfss	_DimmerIntr2^(0+128),0
 19496  1542  2D4E               	goto	i1l1020
 19497                           
 19498                           ;Dimmer_B1.c: 1265: if (DimmerIntr2.Count >= DimmerIntr2.DimmingValue) {
 19499  1543  086D               	movf	(_DimmerIntr2^(0+128)+4),w
 19500  1544  026A               	subwf	(_DimmerIntr2^(0+128)+1),w
 19501  1545  1C03               	skipc
 19502  1546  0008               	return
 19503                           
 19504                           ;Dimmer_B1.c: 1266: DimmerIntr2.GO = 0;
 19505  1547  1069               	bcf	_DimmerIntr2^(0+128),0
 19506                           
 19507                           ;Dimmer_B1.c: 1267: DimmerIntr2.Tune = 1;
 19508  1548  14E9               	bsf	_DimmerIntr2^(0+128),1
 19509                           
 19510                           ;Dimmer_B1.c: 1269: if (DimmerIntr2.ControlStatus == 1) {
 19511  1549  1DE9               	btfss	_DimmerIntr2^(0+128),3
 19512  154A  0008               	return
 19513                           
 19514                           ;Dimmer_B1.c: 1270: RB4 = 0;
 19515  154B  0020               	movlb	0	; select bank0
 19516  154C  120D               	bcf	13,4	;volatile
 19517                           
 19518                           ;Dimmer_B1.c: 1272: }
 19519                           ;Dimmer_B1.c: 1273: }
 19520                           ;Dimmer_B1.c: 1274: } else {
 19521  154D  0008               	return
 19522  154E                     i1l1020:	
 19523                           
 19524                           ;Dimmer_B1.c: 1275: if (DimmerIntr2.Tune == 1) {
 19525  154E  1CE9               	btfss	_DimmerIntr2^(0+128),1
 19526  154F  0008               	return
 19527                           
 19528                           ;Dimmer_B1.c: 1276: DimmerIntr2.Tune = 0;
 19529  1550  10E9               	bcf	_DimmerIntr2^(0+128),1
 19530                           
 19531                           ;Dimmer_B1.c: 1277: DimmerIntr2.TuneTime++;
 19532  1551  3001               	movlw	1
 19533  1552  00F0               	movwf	??_DimmerLights_MOSFET_TMR_2
 19534  1553  0870               	movf	??_DimmerLights_MOSFET_TMR_2,w
 19535  1554  07EB               	addwf	(_DimmerIntr2^(0+128)+2),f
 19536                           
 19537                           ;Dimmer_B1.c: 1278: if (DimmerIntr2.TuneTime >= DimmerIntr2.TuneTimeValue) {
 19538  1555  086C               	movf	(_DimmerIntr2^(0+128)+3),w
 19539  1556  026B               	subwf	(_DimmerIntr2^(0+128)+2),w
 19540  1557  1C03               	skipc
 19541  1558  0008               	return
 19542                           
 19543                           ;Dimmer_B1.c: 1279: DimmerIntr2.TuneTime = 0;
 19544  1559  01EB               	clrf	(_DimmerIntr2^(0+128)+2)
 19545                           
 19546                           ;Dimmer_B1.c: 1280: if (DimmerIntr2.Dimming_Sw == 1) {
 19547  155A  1E69               	btfss	_DimmerIntr2^(0+128),4
 19548  155B  2D72               	goto	i1l1026
 19549                           
 19550                           ;Dimmer_B1.c: 1281: if (DimmerIntr2.Dimming_Status == 0) {
 19551  155C  1AE9               	btfsc	_DimmerIntr2^(0+128),5
 19552  155D  2D69               	goto	i1l7883
 19553                           
 19554                           ;Dimmer_B1.c: 1282: if (DimmerIntr2.DimmingValue < ((char)(65*0.8))) {
 19555  155E  3034               	movlw	52
 19556  155F  026D               	subwf	(_DimmerIntr2^(0+128)+4),w
 19557  1560  1803               	skipnc
 19558  1561  2D67               	goto	i1l1028
 19559                           
 19560                           ;Dimmer_B1.c: 1283: DimmerIntr2.DimmingValue++;
 19561  1562  3001               	movlw	1
 19562  1563  00F0               	movwf	??_DimmerLights_MOSFET_TMR_2
 19563  1564  0870               	movf	??_DimmerLights_MOSFET_TMR_2,w
 19564  1565  07ED               	addwf	(_DimmerIntr2^(0+128)+4),f
 19565                           
 19566                           ;Dimmer_B1.c: 1284: } else {
 19567  1566  0008               	return
 19568  1567                     i1l1028:	
 19569                           
 19570                           ;Dimmer_B1.c: 1285: DimmerIntr2.Dimming_Status = 1;
 19571  1567  16E9               	bsf	_DimmerIntr2^(0+128),5
 19572                           
 19573                           ;Dimmer_B1.c: 1286: }
 19574                           ;Dimmer_B1.c: 1287: } else {
 19575  1568  0008               	return
 19576  1569                     i1l7883:	
 19577                           
 19578                           ;Dimmer_B1.c: 1288: if (DimmerIntr2.DimmingValue > ((char)(20*0.8))) {
 19579  1569  3011               	movlw	17
 19580  156A  026D               	subwf	(_DimmerIntr2^(0+128)+4),w
 19581  156B  1C03               	skipc
 19582  156C  2D70               	goto	i1l1031
 19583                           
 19584                           ;Dimmer_B1.c: 1289: DimmerIntr2.DimmingValue--;
 19585  156D  3001               	movlw	1
 19586  156E  02ED               	subwf	(_DimmerIntr2^(0+128)+4),f
 19587                           
 19588                           ;Dimmer_B1.c: 1290: } else {
 19589  156F  0008               	return
 19590  1570                     i1l1031:	
 19591                           
 19592                           ;Dimmer_B1.c: 1291: DimmerIntr2.Dimming_Status = 0;
 19593  1570  12E9               	bcf	_DimmerIntr2^(0+128),5
 19594                           
 19595                           ;Dimmer_B1.c: 1292: }
 19596                           ;Dimmer_B1.c: 1293: }
 19597                           ;Dimmer_B1.c: 1294: } else if (DimmerIntr2.Dimming_RF == 1) {
 19598  1571  0008               	return
 19599  1572                     i1l1026:	
 19600  1572  1F69               	btfss	_DimmerIntr2^(0+128),6
 19601  1573  0008               	return
 19602                           
 19603                           ;Dimmer_B1.c: 1295: if (DimmerIntr2.DimmingValue < DimmerIntr2.MaxmumValue) {
 19604  1574  086E               	movf	(_DimmerIntr2^(0+128)+5),w
 19605  1575  026D               	subwf	(_DimmerIntr2^(0+128)+4),w
 19606  1576  1803               	skipnc
 19607  1577  2D7D               	goto	i1l7891
 19608                           
 19609                           ;Dimmer_B1.c: 1296: DimmerIntr2.DimmingValue++;
 19610  1578  3001               	movlw	1
 19611  1579  00F0               	movwf	??_DimmerLights_MOSFET_TMR_2
 19612  157A  0870               	movf	??_DimmerLights_MOSFET_TMR_2,w
 19613  157B  07ED               	addwf	(_DimmerIntr2^(0+128)+4),f
 19614                           
 19615                           ;Dimmer_B1.c: 1297: } else if (DimmerIntr2.DimmingValue > DimmerIntr2.MaxmumValue) {
 19616  157C  0008               	return
 19617  157D                     i1l7891:	
 19618  157D  086D               	movf	(_DimmerIntr2^(0+128)+4),w
 19619  157E  026E               	subwf	(_DimmerIntr2^(0+128)+5),w
 19620  157F  1803               	skipnc
 19621  1580  2D84               	goto	i1l1037
 19622                           
 19623                           ;Dimmer_B1.c: 1298: DimmerIntr2.DimmingValue--;
 19624  1581  3001               	movlw	1
 19625  1582  02ED               	subwf	(_DimmerIntr2^(0+128)+4),f
 19626                           
 19627                           ;Dimmer_B1.c: 1299: } else {
 19628  1583  0008               	return
 19629  1584                     i1l1037:	
 19630                           
 19631                           ;Dimmer_B1.c: 1300: DimmerIntr2.Dimming_RF = 0;
 19632  1584  1369               	bcf	_DimmerIntr2^(0+128),6
 19633  1585  0008               	return
 19634  1586                     __end_of_DimmerLights_MOSFET_TMR_2:	
 19635                           
 19636                           	psect	text140
 19637  14E2                     __ptext140:	
 19638 ;; *************** function _DimmerLights_MOSFET_TMR_1 *****************
 19639 ;; Defined at:
 19640 ;;		line 1185 in file "../src/Dimmer_B1.c"
 19641 ;; Parameters:    Size  Location     Type
 19642 ;;		None
 19643 ;; Auto vars:     Size  Location     Type
 19644 ;;		None
 19645 ;; Return value:  Size  Location     Type
 19646 ;;		None               void
 19647 ;; Registers used:
 19648 ;;		wreg, status,2, status,0
 19649 ;; Tracked objects:
 19650 ;;		On entry : 0/0
 19651 ;;		On exit  : 0/0
 19652 ;;		Unchanged: 0/0
 19653 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19654 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19655 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19656 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19657 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19658 ;;Total ram usage:        1 bytes
 19659 ;; Hardware stack levels used:    1
 19660 ;; This function calls:
 19661 ;;		Nothing
 19662 ;; This function is called by:
 19663 ;;		_TMR1_ISR
 19664 ;; This function uses a non-reentrant model
 19665 ;;
 19666                           
 19667                           
 19668                           ;psect for function _DimmerLights_MOSFET_TMR_1
 19669  14E2                     _DimmerLights_MOSFET_TMR_1:	
 19670                           
 19671                           ;Dimmer_B1.c: 1186: if (DimmerIntr1.Start == 1) {
 19672                           
 19673                           ;incstack = 0
 19674                           ; Regs used in _DimmerLights_MOSFET_TMR_1: [wreg+status,2+status,0]
 19675  14E2  0021               	movlb	1	; select bank1
 19676  14E3  1D62               	btfss	_DimmerIntr1^(0+128),2
 19677  14E4  2CEF               	goto	i1l7805
 19678                           
 19679                           ;Dimmer_B1.c: 1187: DimmerIntr1.Count++;
 19680  14E5  3001               	movlw	1
 19681  14E6  00F0               	movwf	??_DimmerLights_MOSFET_TMR_1
 19682  14E7  0870               	movf	??_DimmerLights_MOSFET_TMR_1,w
 19683  14E8  07E3               	addwf	(_DimmerIntr1^(0+128)+1),f
 19684                           
 19685                           ;Dimmer_B1.c: 1188: if (DimmerIntr1.Count >= ((char)(65*0.8)) + 1) {
 19686  14E9  3035               	movlw	53
 19687  14EA  0263               	subwf	(_DimmerIntr1^(0+128)+1),w
 19688  14EB  1C03               	skipc
 19689  14EC  2CEF               	goto	i1l7805
 19690                           
 19691                           ;Dimmer_B1.c: 1189: DimmerIntr1.Count = 0;
 19692  14ED  01E3               	clrf	(_DimmerIntr1^(0+128)+1)
 19693                           
 19694                           ;Dimmer_B1.c: 1190: DimmerIntr1.Start = 0;
 19695  14EE  1162               	bcf	_DimmerIntr1^(0+128),2
 19696  14EF                     i1l7805:	
 19697                           
 19698                           ;Dimmer_B1.c: 1191: }
 19699                           ;Dimmer_B1.c: 1192: }
 19700                           ;Dimmer_B1.c: 1194: if (DimmerIntr1.GO == 1) {
 19701  14EF  1C62               	btfss	_DimmerIntr1^(0+128),0
 19702  14F0  2CFC               	goto	i1l991
 19703                           
 19704                           ;Dimmer_B1.c: 1195: if (DimmerIntr1.Count >= DimmerIntr1.DimmingValue) {
 19705  14F1  0866               	movf	(_DimmerIntr1^(0+128)+4),w
 19706  14F2  0263               	subwf	(_DimmerIntr1^(0+128)+1),w
 19707  14F3  1C03               	skipc
 19708  14F4  0008               	return
 19709                           
 19710                           ;Dimmer_B1.c: 1196: DimmerIntr1.GO = 0;
 19711  14F5  1062               	bcf	_DimmerIntr1^(0+128),0
 19712                           
 19713                           ;Dimmer_B1.c: 1197: DimmerIntr1.Tune = 1;
 19714  14F6  14E2               	bsf	_DimmerIntr1^(0+128),1
 19715                           
 19716                           ;Dimmer_B1.c: 1199: if (DimmerIntr1.ControlStatus == 1) {
 19717  14F7  1DE2               	btfss	_DimmerIntr1^(0+128),3
 19718  14F8  0008               	return
 19719                           
 19720                           ;Dimmer_B1.c: 1200: RA7 = 0;
 19721  14F9  0020               	movlb	0	; select bank0
 19722  14FA  138C               	bcf	12,7	;volatile
 19723                           
 19724                           ;Dimmer_B1.c: 1202: }
 19725                           ;Dimmer_B1.c: 1203: }
 19726                           ;Dimmer_B1.c: 1204: } else {
 19727  14FB  0008               	return
 19728  14FC                     i1l991:	
 19729                           
 19730                           ;Dimmer_B1.c: 1205: if (DimmerIntr1.Tune == 1) {
 19731  14FC  1CE2               	btfss	_DimmerIntr1^(0+128),1
 19732  14FD  0008               	return
 19733                           
 19734                           ;Dimmer_B1.c: 1206: DimmerIntr1.Tune = 0;
 19735  14FE  10E2               	bcf	_DimmerIntr1^(0+128),1
 19736                           
 19737                           ;Dimmer_B1.c: 1207: DimmerIntr1.TuneTime++;
 19738  14FF  3001               	movlw	1
 19739  1500  00F0               	movwf	??_DimmerLights_MOSFET_TMR_1
 19740  1501  0870               	movf	??_DimmerLights_MOSFET_TMR_1,w
 19741  1502  07E4               	addwf	(_DimmerIntr1^(0+128)+2),f
 19742                           
 19743                           ;Dimmer_B1.c: 1208: if (DimmerIntr1.TuneTime >= DimmerIntr1.TuneTimeValue) {
 19744  1503  0865               	movf	(_DimmerIntr1^(0+128)+3),w
 19745  1504  0264               	subwf	(_DimmerIntr1^(0+128)+2),w
 19746  1505  1C03               	skipc
 19747  1506  0008               	return
 19748                           
 19749                           ;Dimmer_B1.c: 1209: DimmerIntr1.TuneTime = 0;
 19750  1507  01E4               	clrf	(_DimmerIntr1^(0+128)+2)
 19751                           
 19752                           ;Dimmer_B1.c: 1210: if (DimmerIntr1.Dimming_Sw == 1) {
 19753  1508  1E62               	btfss	_DimmerIntr1^(0+128),4
 19754  1509  2D20               	goto	i1l997
 19755                           
 19756                           ;Dimmer_B1.c: 1211: if (DimmerIntr1.Dimming_Status == 0) {
 19757  150A  1AE2               	btfsc	_DimmerIntr1^(0+128),5
 19758  150B  2D17               	goto	i1l7829
 19759                           
 19760                           ;Dimmer_B1.c: 1212: if (DimmerIntr1.DimmingValue < ((char)(65*0.8))) {
 19761  150C  3034               	movlw	52
 19762  150D  0266               	subwf	(_DimmerIntr1^(0+128)+4),w
 19763  150E  1803               	skipnc
 19764  150F  2D15               	goto	i1l999
 19765                           
 19766                           ;Dimmer_B1.c: 1213: DimmerIntr1.DimmingValue++;
 19767  1510  3001               	movlw	1
 19768  1511  00F0               	movwf	??_DimmerLights_MOSFET_TMR_1
 19769  1512  0870               	movf	??_DimmerLights_MOSFET_TMR_1,w
 19770  1513  07E6               	addwf	(_DimmerIntr1^(0+128)+4),f
 19771                           
 19772                           ;Dimmer_B1.c: 1214: } else {
 19773  1514  0008               	return
 19774  1515                     i1l999:	
 19775                           
 19776                           ;Dimmer_B1.c: 1215: DimmerIntr1.Dimming_Status = 1;
 19777  1515  16E2               	bsf	_DimmerIntr1^(0+128),5
 19778                           
 19779                           ;Dimmer_B1.c: 1216: }
 19780                           ;Dimmer_B1.c: 1217: } else {
 19781  1516  0008               	return
 19782  1517                     i1l7829:	
 19783                           
 19784                           ;Dimmer_B1.c: 1218: if (DimmerIntr1.DimmingValue > ((char)(20*0.8))) {
 19785  1517  3011               	movlw	17
 19786  1518  0266               	subwf	(_DimmerIntr1^(0+128)+4),w
 19787  1519  1C03               	skipc
 19788  151A  2D1E               	goto	i1l1002
 19789                           
 19790                           ;Dimmer_B1.c: 1219: DimmerIntr1.DimmingValue--;
 19791  151B  3001               	movlw	1
 19792  151C  02E6               	subwf	(_DimmerIntr1^(0+128)+4),f
 19793                           
 19794                           ;Dimmer_B1.c: 1220: } else {
 19795  151D  0008               	return
 19796  151E                     i1l1002:	
 19797                           
 19798                           ;Dimmer_B1.c: 1221: DimmerIntr1.Dimming_Status = 0;
 19799  151E  12E2               	bcf	_DimmerIntr1^(0+128),5
 19800                           
 19801                           ;Dimmer_B1.c: 1222: }
 19802                           ;Dimmer_B1.c: 1223: }
 19803                           ;Dimmer_B1.c: 1224: } else if (DimmerIntr1.Dimming_RF == 1) {
 19804  151F  0008               	return
 19805  1520                     i1l997:	
 19806  1520  1F62               	btfss	_DimmerIntr1^(0+128),6
 19807  1521  0008               	return
 19808                           
 19809                           ;Dimmer_B1.c: 1225: if (DimmerIntr1.DimmingValue < DimmerIntr1.MaxmumValue) {
 19810  1522  0867               	movf	(_DimmerIntr1^(0+128)+5),w
 19811  1523  0266               	subwf	(_DimmerIntr1^(0+128)+4),w
 19812  1524  1803               	skipnc
 19813  1525  2D2B               	goto	i1l7837
 19814                           
 19815                           ;Dimmer_B1.c: 1226: DimmerIntr1.DimmingValue++;
 19816  1526  3001               	movlw	1
 19817  1527  00F0               	movwf	??_DimmerLights_MOSFET_TMR_1
 19818  1528  0870               	movf	??_DimmerLights_MOSFET_TMR_1,w
 19819  1529  07E6               	addwf	(_DimmerIntr1^(0+128)+4),f
 19820                           
 19821                           ;Dimmer_B1.c: 1227: } else if (DimmerIntr1.DimmingValue > DimmerIntr1.MaxmumValue) {
 19822  152A  0008               	return
 19823  152B                     i1l7837:	
 19824  152B  0866               	movf	(_DimmerIntr1^(0+128)+4),w
 19825  152C  0267               	subwf	(_DimmerIntr1^(0+128)+5),w
 19826  152D  1803               	skipnc
 19827  152E  2D32               	goto	i1l1008
 19828                           
 19829                           ;Dimmer_B1.c: 1228: DimmerIntr1.DimmingValue--;
 19830  152F  3001               	movlw	1
 19831  1530  02E6               	subwf	(_DimmerIntr1^(0+128)+4),f
 19832                           
 19833                           ;Dimmer_B1.c: 1229: } else {
 19834  1531  0008               	return
 19835  1532                     i1l1008:	
 19836                           
 19837                           ;Dimmer_B1.c: 1230: DimmerIntr1.Dimming_RF = 0;
 19838  1532  1362               	bcf	_DimmerIntr1^(0+128),6
 19839  1533  0008               	return
 19840  1534                     __end_of_DimmerLights_MOSFET_TMR_1:	
 19841                           
 19842                           	psect	text141
 19843  1B88                     __ptext141:	
 19844 ;; *************** function _IOC_ISR *****************
 19845 ;; Defined at:
 19846 ;;		line 378 in file "../src/MCU_B1.c"
 19847 ;; Parameters:    Size  Location     Type
 19848 ;;		None
 19849 ;; Auto vars:     Size  Location     Type
 19850 ;;		None
 19851 ;; Return value:  Size  Location     Type
 19852 ;;		None               void
 19853 ;; Registers used:
 19854 ;;		status,2, status,0, pclath, cstack
 19855 ;; Tracked objects:
 19856 ;;		On entry : 0/0
 19857 ;;		On exit  : 0/0
 19858 ;;		Unchanged: 0/0
 19859 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19860 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19861 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19862 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19863 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19864 ;;Total ram usage:        0 bytes
 19865 ;; Hardware stack levels used:    1
 19866 ;; Hardware stack levels required when called:    1
 19867 ;; This function calls:
 19868 ;;		_DimmerLights_MOSFET_IOC_1
 19869 ;;		_DimmerLights_MOSFET_IOC_2
 19870 ;; This function is called by:
 19871 ;;		_ISR
 19872 ;; This function uses a non-reentrant model
 19873 ;;
 19874                           
 19875                           
 19876                           ;psect for function _IOC_ISR
 19877  1B88                     _IOC_ISR:	
 19878                           
 19879                           ;MCU_B1.c: 379: IOCBF2 = 0;
 19880                           
 19881                           ;incstack = 0
 19882                           ; Regs used in _IOC_ISR: [status,2+status,0+pclath+cstack]
 19883  1B88  0027               	movlb	7	; select bank7
 19884  1B89  1116               	bcf	22,2	;volatile
 19885                           
 19886                           ;MCU_B1.c: 380: IOCIF = 0;
 19887  1B8A  100B               	bcf	11,0	;volatile
 19888                           
 19889                           ;MCU_B1.c: 382: if (myMain.PowerON == 1) {
 19890  1B8B  0022               	movlb	2	; select bank2
 19891  1B8C  1C20               	btfss	_myMain^(0+256),0
 19892  1B8D  0008               	return
 19893                           
 19894                           ;MCU_B1.c: 388: DimmerLights_MOSFET_IOC_1();
 19895  1B8E  319B  23DD  319B   	fcall	_DimmerLights_MOSFET_IOC_1
 19896                           
 19897                           ;MCU_B1.c: 393: DimmerLights_MOSFET_IOC_2();
 19898  1B91  319B  23EB         	fcall	_DimmerLights_MOSFET_IOC_2
 19899  1B93  0008               	return
 19900  1B94                     __end_of_IOC_ISR:	
 19901                           
 19902                           	psect	text142
 19903  1BEB                     __ptext142:	
 19904 ;; *************** function _DimmerLights_MOSFET_IOC_2 *****************
 19905 ;; Defined at:
 19906 ;;		line 1308 in file "../src/Dimmer_B1.c"
 19907 ;; Parameters:    Size  Location     Type
 19908 ;;		None
 19909 ;; Auto vars:     Size  Location     Type
 19910 ;;		None
 19911 ;; Return value:  Size  Location     Type
 19912 ;;		None               void
 19913 ;; Registers used:
 19914 ;;		None
 19915 ;; Tracked objects:
 19916 ;;		On entry : 0/0
 19917 ;;		On exit  : 0/0
 19918 ;;		Unchanged: 0/0
 19919 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19920 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19921 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19922 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19923 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19924 ;;Total ram usage:        0 bytes
 19925 ;; Hardware stack levels used:    1
 19926 ;; This function calls:
 19927 ;;		Nothing
 19928 ;; This function is called by:
 19929 ;;		_IOC_ISR
 19930 ;; This function uses a non-reentrant model
 19931 ;;
 19932                           
 19933                           
 19934                           ;psect for function _DimmerLights_MOSFET_IOC_2
 19935  1BEB                     _DimmerLights_MOSFET_IOC_2:	
 19936                           
 19937                           ;Dimmer_B1.c: 1309: if (DimmerIntr2.Start == 0 && RB2 == 1) {
 19938                           
 19939                           ;incstack = 0
 19940                           ; Regs used in _DimmerLights_MOSFET_IOC_2: []
 19941  1BEB  0021               	movlb	1	; select bank1
 19942  1BEC  1969               	btfsc	_DimmerIntr2^(0+128),2
 19943  1BED  0008               	return
 19944  1BEE  0020               	movlb	0	; select bank0
 19945  1BEF  1D0D               	btfss	13,2	;volatile
 19946  1BF0  0008               	return
 19947                           
 19948                           ;Dimmer_B1.c: 1310: DimmerIntr2.Start = 1;
 19949  1BF1  0021               	movlb	1	; select bank1
 19950  1BF2  1569               	bsf	_DimmerIntr2^(0+128),2
 19951                           
 19952                           ;Dimmer_B1.c: 1311: DimmerIntr2.GO = 1;
 19953  1BF3  1469               	bsf	_DimmerIntr2^(0+128),0
 19954                           
 19955                           ;Dimmer_B1.c: 1313: if (DimmerIntr2.ControlStatus == 1) {
 19956  1BF4  1DE9               	btfss	_DimmerIntr2^(0+128),3
 19957  1BF5  0008               	return
 19958                           
 19959                           ;Dimmer_B1.c: 1314: RB4 = 1;
 19960  1BF6  0020               	movlb	0	; select bank0
 19961  1BF7  160D               	bsf	13,4	;volatile
 19962  1BF8  0008               	return
 19963  1BF9                     __end_of_DimmerLights_MOSFET_IOC_2:	
 19964                           
 19965                           	psect	text143
 19966  1BDD                     __ptext143:	
 19967 ;; *************** function _DimmerLights_MOSFET_IOC_1 *****************
 19968 ;; Defined at:
 19969 ;;		line 1238 in file "../src/Dimmer_B1.c"
 19970 ;; Parameters:    Size  Location     Type
 19971 ;;		None
 19972 ;; Auto vars:     Size  Location     Type
 19973 ;;		None
 19974 ;; Return value:  Size  Location     Type
 19975 ;;		None               void
 19976 ;; Registers used:
 19977 ;;		None
 19978 ;; Tracked objects:
 19979 ;;		On entry : 0/0
 19980 ;;		On exit  : 0/0
 19981 ;;		Unchanged: 0/0
 19982 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19983 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19984 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19985 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19986 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19987 ;;Total ram usage:        0 bytes
 19988 ;; Hardware stack levels used:    1
 19989 ;; This function calls:
 19990 ;;		Nothing
 19991 ;; This function is called by:
 19992 ;;		_IOC_ISR
 19993 ;; This function uses a non-reentrant model
 19994 ;;
 19995                           
 19996                           
 19997                           ;psect for function _DimmerLights_MOSFET_IOC_1
 19998  1BDD                     _DimmerLights_MOSFET_IOC_1:	
 19999                           
 20000                           ;Dimmer_B1.c: 1239: if (DimmerIntr1.Start == 0 && RB2 == 1) {
 20001                           
 20002                           ;incstack = 0
 20003                           ; Regs used in _DimmerLights_MOSFET_IOC_1: []
 20004  1BDD  0021               	movlb	1	; select bank1
 20005  1BDE  1962               	btfsc	_DimmerIntr1^(0+128),2
 20006  1BDF  0008               	return
 20007  1BE0  0020               	movlb	0	; select bank0
 20008  1BE1  1D0D               	btfss	13,2	;volatile
 20009  1BE2  0008               	return
 20010                           
 20011                           ;Dimmer_B1.c: 1240: DimmerIntr1.Start = 1;
 20012  1BE3  0021               	movlb	1	; select bank1
 20013  1BE4  1562               	bsf	_DimmerIntr1^(0+128),2
 20014                           
 20015                           ;Dimmer_B1.c: 1241: DimmerIntr1.GO = 1;
 20016  1BE5  1462               	bsf	_DimmerIntr1^(0+128),0
 20017                           
 20018                           ;Dimmer_B1.c: 1243: if (DimmerIntr1.ControlStatus == 1) {
 20019  1BE6  1DE2               	btfss	_DimmerIntr1^(0+128),3
 20020  1BE7  0008               	return
 20021                           
 20022                           ;Dimmer_B1.c: 1244: RA7 = 1;
 20023  1BE8  0020               	movlb	0	; select bank0
 20024  1BE9  178C               	bsf	12,7	;volatile
 20025  1BEA  0008               	return
 20026  1BEB                     __end_of_DimmerLights_MOSFET_IOC_1:	
 20027  007E                     btemp	set	126	;btemp
 20028  007E                     pic14e$flags	set	126
 20029  007E                     wtemp	set	126
 20030  007E                     wtemp0	set	126
 20031  0080                     wtemp1	set	128
 20032  0082                     wtemp2	set	130
 20033  0084                     wtemp3	set	132
 20034  0086                     wtemp4	set	134
 20035  0088                     wtemp5	set	136
 20036  007F                     wtemp6	set	127
 20037  007E                     ttemp	set	126
 20038  007E                     ttemp0	set	126
 20039  0081                     ttemp1	set	129
 20040  0084                     ttemp2	set	132
 20041  0087                     ttemp3	set	135
 20042  007F                     ttemp4	set	127
 20043  007E                     ltemp	set	126
 20044  007E                     ltemp0	set	126
 20045  0082                     ltemp1	set	130
 20046  0086                     ltemp2	set	134
 20047  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    102
    Data        32
    BSS         267
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     10      12
    BANK0            80     76      78
    BANK1            80      0      80
    BANK2            80      0      78
    BANK3            80      4      74
    BANK4            80      0      69
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    Sw	PTR struct Switch size(1) Largest target is 9
		 -> NULL(NULL[0]), Sw2(BANK3[9]), Sw1(BANK3[9]), 

    LED	PTR struct LED size(1) Largest target is 4
		 -> NULL(NULL[0]), VarErrLED(BANK3[4]), VarLED2(BANK3[4]), VarLED1(BANK3[4]), 

    product	PTR struct Product size(1) Largest target is 32
		 -> NULL(NULL[0]), _product(BANK4[32]), 

    DimmerLights	PTR struct DimmerLights size(1) Largest target is 8
		 -> NULL(NULL[0]), DimmerLights2(BANK2[8]), DimmerLights1(BANK2[8]), 

    DimmerIntr	PTR struct Dimmer_Interrupt size(1) Largest target is 7
		 -> NULL(NULL[0]), DimmerIntr2(BANK1[7]), DimmerIntr1(BANK1[7]), 

    DelayOff	PTR struct DelayOff size(1) Largest target is 5
		 -> NULL(NULL[0]), DlySw2(BANK3[5]), DlySw1(BANK3[5]), 


Critical Paths under _main in COMMON

    _main->_Exception_Main
    _main->_my_MainTimer
    _my_MainTimer->_setBuz
    _getTemp_AD->_getAD
    _getLoad_AD->_getAD
    _setSw_Main->_setDimmerLights_SwOn
    _setDimmerLights_DimmingOn->_DimmerLights_SelectPointer
    _Switch_Initialization->_setSw_Initialization
    _setSw_Initialization->_setLED
    _setRF_Main->___lwdiv
    _setControl_Lights_Table->_setDimmerLights_SwOn
    _setRFSW_Control->_setDimmerLights_SwOn
    _setRFSW_AdjControl->_setDimmerLights_SwOn
    _setDimmerLights_DimmingRun->_DimmerLights_SelectPointer
    _RF_RxDisable->_CC2500_WriteCommand
    _CC2500_TxData->_CC2500_WriteCommand
    _CC2500_RxData->_CC2500_ReadStatus
    _CC2500_RxData->_CC2500_WriteCommand
    _CC2500_ReadStatus->_CC2500_ReadByte
    _CC2500_ReadStatus->_CC2500_WriteByte
    _CC2500_PowerOnInitial->_CC2500_InitPATable
    _CC2500_SIDLEMode->_CC2500_WriteCommand
    _CC2500_PowerRST->_DelayTime_1us
    _CC2500_InitSetREG->_CC2500_WriteREG
    _CC2500_InitPATable->_CC2500_WriteREG
    _CC2500_WriteREG->_CC2500_WriteByte
    _CC2500_FrequencyCabr->_DelayTime_1us
    _CC2500_ClearTXFIFO->_CC2500_WriteCommand
    _CC2500_ClearRXFIFO->_CC2500_WriteCommand
    _CC2500_WriteCommand->_CC2500_WriteByte
    _RF_Initialization->_setRF_Initialization
    _Mcu_Initialization->_WDT_Set
    _Load_Main->___lwdiv
    _Load_Initialization->_setLoad_AH_AL_Restore
    _LED_Main->_setLED_Main
    _setLED_Main->_LedPointSelect
    _LED_Initialization->_setLED_Initialization
    _setLED_Initialization->_setLED
    _Flash_Memory_Main->_Flash_Memory_Modify
    _Flash_Memory_Modify->_Flash_Memory_Read
    _Exception_Main->_getMain_All_Error_Status
    _Exception_Main->_setBuz
    _setLED->_LedPointSelect
    ___ftmul->___ftpack
    _getDelayOff_GO->_DelayOffPointSelect
    ___ftdiv->___ftpack
    ___ftadd->___ftpack
    ___awtoft->___ftpack
    _getDimmerLights_Allow_Condition->_getLoad_OK
    _DimmerLights_Initialization->_DimmerIntr_Initialization
    _DlyOff_Main->_setDimmerLights_SwOn
    _setDimmerLights_SwOn->_setBuz
    _setBuz->___awdiv
    _setDimmerLights_SwOff->_DimmerLights_SelectPointer
    _getDimmerLights_Status->_DimmerLights_SelectPointer
    _DelayOff_Initialization->_DlyOff_Initialization
    _DlyOff_Initialization->_DelayOffPointSelect

Critical Paths under _ISR in COMMON

    _TMR1_ISR->_DimmerLights_MOSFET_TMR_1
    _TMR1_ISR->_DimmerLights_MOSFET_TMR_2

Critical Paths under _main in BANK0

    _my_MainTimer->_setBuz
    _Temp_Main->_setTemp_Main
    _setTemp_Main->_setProductData
    _Switch_Main->_setSw_Main
    _setSw_Main->_setDimmerLights_SwOn
    _RF_Main->_setRF_Main
    _setRF_Main->_getRxData
    _setLog_Code->_setProductData
    _setControl_Lights_Table->_setRFSW_Control
    _setRFSW_Control->_setDelayOff_GO
    _setRFSW_AdjControl->_setDimmerIntr_MaxmumValue
    _setRFSW_AdjControl->_setProductData
    _CC2500_PowerOnInitial->_CC2500_InitSetREG
    _Flash_Memory_Initialization->_getDimmerLights_ValueToPercent
    _Exception_Main->_setBuz
    _DimmerLights_Main->_setDimmerLights_Main
    _setDimmerLights_Main->_setDimmerLights_OnOff
    _setDimmerLights_OnOff->_setDelayOff_GO
    _setDelayOff_GO->_setProductData
    _getDimmerLights_PercentToValue->___fttol
    ___ftmul->___awtoft
    _setDimmerLights_Dimming->_setRF_DimmerLights
    _setRF_DimmerLights->_setProductData
    _setDimmerIntr_MaxmumValue->_getDimmerLights_PercentToValue
    _getDimmerLights_ValueToPercent->___fttol
    ___fttol->___ftadd
    ___ftneg->___ftdiv
    ___ftneg->___ftmul
    ___ftdiv->___awtoft
    ___ftadd->___ftneg
    _DelayOff_Main->_DlyOff_Main
    _DlyOff_Main->_setProductData
    _setProductData->_getDimmerLights_ValueToPercent
    _setDimmerLights_SwOn->_setBuz
    _setBuz->___awdiv

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     0      4  151431
                                              0 BANK3      4     0      4
              _Buzzer_Initialization
                        _Buzzer_Main
              _CC2500_PowerOnInitial
            _DelayOff_Initialization
                      _DelayOff_Main
        _DimmerLights_Initialization
                  _DimmerLights_Main
                     _Exception_Main
        _Flash_Memory_Initialization
                  _Flash_Memory_Main
                 _LED_Initialization
                           _LED_Main
                _Load_Initialization
                          _Load_Main
                 _Mcu_Initialization
                  _RF_Initialization
                            _RF_Main
              _Switch_Initialization
                        _Switch_Main
                _Temp_Initialization
                          _Temp_Main
                           _WDT_Main
                         _getLoad_AD
                         _getTemp_AD
              _myMain_Initialization
                       _my_MainTimer
 ---------------------------------------------------------------------------------
 (1) _my_MainTimer                                         1     1      0    1809
                                              9 COMMON     1     1      0
                             _setBuz
 ---------------------------------------------------------------------------------
 (1) _myMain_Initialization                                1     1      0       0
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _getTemp_AD                                           2     2      0     301
                                              6 COMMON     2     2      0
                              _getAD
 ---------------------------------------------------------------------------------
 (1) _getLoad_AD                                           6     6      0     669
                                              6 COMMON     2     2      0
                                              0 BANK0      4     4      0
                              _getAD
 ---------------------------------------------------------------------------------
 (2) _getAD                                                4     1      3     270
                                              2 COMMON     4     1      3
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (1) _WDT_Main                                             1     1      0       0
                                              2 COMMON     1     1      0
                       _WDT_Clearing
 ---------------------------------------------------------------------------------
 (2) _WDT_Clearing                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Temp_Main                                            0     0      0    4776
                       _setTemp_Main
 ---------------------------------------------------------------------------------
 (2) _setTemp_Main                                         3     3      0    4776
                                             61 BANK0      3     3      0
           _getMain_All_Error_Status
                             _setBuz
                     _setProductData
 ---------------------------------------------------------------------------------
 (1) _Temp_Initialization                                  0     0      0       0
             _setTemp_Initialization
 ---------------------------------------------------------------------------------
 (2) _setTemp_Initialization                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Switch_Main                                          0     0      0    4531
                         _TouchPower
                         _setSw_Main
 ---------------------------------------------------------------------------------
 (2) _setSw_Main                                           3     3      0    4531
                                             10 BANK0      3     3      0
                      _SwPointSelect
           _getMain_All_Error_Status
                    _getSw_KeyStatus
                             _setBuz
          _setDimmerLights_DimmingOn
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                        _setRF_Learn
 ---------------------------------------------------------------------------------
 (3) _setRF_Learn                                          2     2      0      22
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_DimmingOn                            1     1      0      66
                                              4 COMMON     1     1      0
         _DimmerLights_SelectPointer
 ---------------------------------------------------------------------------------
 (3) _getSw_KeyStatus                                      5     5      0     117
                                              2 COMMON     5     5      0
 ---------------------------------------------------------------------------------
 (3) _SwPointSelect                                        2     2      0      44
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _Switch_Initialization                                0     0      0     930
                         _TouchPower
               _setSw_Initialization
 ---------------------------------------------------------------------------------
 (2) _setSw_Initialization                                 1     1      0     930
                                              6 COMMON     1     1      0
                             _setLED
 ---------------------------------------------------------------------------------
 (2) _TouchPower                                           0     0      0       0
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _set_TimeoutCleared                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Timeout_Counter                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _RF_Main                                              0     0      0   47358
                         _setRF_Main
 ---------------------------------------------------------------------------------
 (2) _setRF_Main                                           2     2      0   47358
                                             74 BANK0      2     2      0
              _CC2500_PowerOnInitial
                      _CC2500_RxData
                      _CC2500_TxData
                _CC2500_WriteCommand
                       _RF_RxDisable
                            ___lwdiv
                          _getBuz_GO
                    _getRF_KeyStatus
                          _getRxData
 ---------------------------------------------------------------------------------
 (3) _getRxData                                            2     2      0   43006
                                             72 BANK0      2     2      0
           _getMain_All_Error_Status
            _setControl_Lights_Table
                        _setLog_Code
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setLog_Code                                          1     1      0    4656
                                             61 BANK0      1     1      0
                             _setBuz
                 _setMemory_LoopSave
                   _setMemory_Modify
                     _setProductData
 ---------------------------------------------------------------------------------
 (5) _setMemory_LoopSave                                   2     2      0      22
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (4) _setControl_Lights_Table                              0     0      0   38155
             _getDimmerLights_Status
           _getMain_All_LightsStatus
                      _setCmd_Status
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                     _setProductData
                 _setRFSW_AdjControl
                    _setRFSW_Control
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setRFSW_Control                                      3     3      0   11281
                                             69 BANK0      3     3      0
             _getDimmerLights_Status
                             _setBuz
                     _setDelayOff_GO
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setRFSW_AdjControl                                   4     4      0   21556
                                             61 BANK0      4     4      0
     _getDimmerLights_PercentToValue
             _getDimmerLights_Status
           _setDimmerIntr_Dimming_RF
          _setDimmerIntr_MaxmumValue
         _setDimmerLights_DimmingRun
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                   _setMemory_Modify
                     _setProductData
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setMemory_Modify                                     2     2      0      22
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (6) _setDimmerLights_DimmingRun                           3     2      1     177
                                              4 COMMON     3     2      1
         _DimmerLights_SelectPointer
 ---------------------------------------------------------------------------------
 (3) _getRF_KeyStatus                                      3     3      0      48
                                              2 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (3) _getBuz_GO                                            6     4      2      23
                                              2 COMMON     6     4      2
 ---------------------------------------------------------------------------------
 (3) _RF_RxDisable                                         0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (3) _CC2500_TxData                                        2     2      0     235
                                              6 COMMON     2     2      0
                   _CC2500_WriteByte
                _CC2500_WriteCommand
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _CC2500_RxData                                        2     2      0     426
                                              6 COMMON     2     2      0
                    _CC2500_ReadByte
                  _CC2500_ReadStatus
                   _CC2500_WriteByte
                _CC2500_WriteCommand
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _CC2500_ReadStatus                                    2     2      0     145
                                              4 COMMON     2     2      0
                    _CC2500_ReadByte
                   _CC2500_WriteByte
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (5) _CC2500_ReadByte                                      2     2      0      46
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (3) _CC2500_PowerOnInitial                                0     0      0    2367
                 _CC2500_ClearRXFIFO
                 _CC2500_ClearTXFIFO
               _CC2500_FrequencyCabr
                 _CC2500_InitPATable
                  _CC2500_InitSetREG
                    _CC2500_PowerRST
                   _CC2500_SIDLEMode
 ---------------------------------------------------------------------------------
 (4) _CC2500_SIDLEMode                                     0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (4) _CC2500_PowerRST                                      1     1      0     516
                                              8 COMMON     1     1      0
                   _CC2500_WriteByte
                      _DelayTime_1us
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _CC2500_InitSetREG                                    4     4      0     536
                                              7 COMMON     1     1      0
                                              0 BANK0      3     3      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (4) _CC2500_InitPATable                                   3     3      0     471
                                              7 COMMON     3     3      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (5) _CC2500_WriteREG                                      3     2      1     338
                                              4 COMMON     3     2      1
                   _CC2500_WriteByte
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _CC2500_FrequencyCabr                                 0     0      0     547
                _CC2500_WriteCommand
                      _DelayTime_1us
 ---------------------------------------------------------------------------------
 (5) _DelayTime_1us                                        6     4      2     448
                                              2 COMMON     6     4      2
 ---------------------------------------------------------------------------------
 (4) _CC2500_ClearTXFIFO                                   0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (4) _CC2500_ClearRXFIFO                                   0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (4) _CC2500_WriteCommand                                  2     2      0      99
                                              4 COMMON     2     2      0
                   _CC2500_WriteByte
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (5) _setRF_TimeoutCleared                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _RF_Timeout_Counter                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _CC2500_WriteByte                                     2     2      0      68
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _RF_Initialization                                    0     0      0       0
               _setRF_Initialization
 ---------------------------------------------------------------------------------
 (2) _setRF_Initialization                                 1     1      0       0
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Mcu_Initialization                                   0     0      0       0
                            _ADC_Set
                           _Fosc_Set
                            _IOC_Set
                             _IO_Set
                           _TMR1_Set
                            _WDT_Set
 ---------------------------------------------------------------------------------
 (2) _WDT_Set                                              1     1      0       0
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _TMR1_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IO_Set                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IOC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Fosc_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Load_Main                                            6     6      0    2041
                                              0 BANK0      6     6      0
                            ___lwdiv
                             ___wmul
    _getAll_DimmerIntr_Dimming_Sw_RF
                   _getDimmer_LoadGO
              _getDimmer_Load_Status
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
               _getMain_Lights_Count
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _getMain_Lights_Count                                 3     3      0      48
                                              2 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (2) _getDimmer_Load_Status                                1     1      0      23
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _getDimmer_LoadGO                                     1     1      0      23
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _getAll_DimmerIntr_Dimming_Sw_RF                      4     4      0      95
                                              2 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     270
                                              2 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              8     4      4    1052
                                              2 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (1) _Load_Initialization                                  0     0      0      90
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _setLoad_AH_AL_Restore                                2     2      0      90
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _LED_Main                                             0     0      0     154
                        _setLED_Main
 ---------------------------------------------------------------------------------
 (2) _setLED_Main                                          3     3      0     154
                                              4 COMMON     3     3      0
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (1) _LED_Initialization                                   0     0      0    1018
              _setLED_Initialization
 ---------------------------------------------------------------------------------
 (2) _setLED_Initialization                                1     1      0    1018
                                              6 COMMON     1     1      0
                     _LedPointSelect
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Main                                    1     1      0    1211
                                              8 COMMON     1     1      0
                _Flash_Memory_Modify
           _getMain_All_LightsStatus
 ---------------------------------------------------------------------------------
 (2) _Flash_Memory_Modify                                  2     2      0    1164
                                              6 COMMON     2     2      0
               _Flash_Memory_Erasing
                  _Flash_Memory_Read
                 _Flash_Memory_Write
                     _setMemory_Data
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Erasing                                 0     0      0       0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Initialization                          2     2      0   13142
                                             58 BANK0      2     2      0
                  _Flash_Memory_Read
                 _Flash_Memory_Write
     _getDimmerLights_ValueToPercent
                     _setMemory_Data
 ---------------------------------------------------------------------------------
 (3) _setMemory_Data                                       3     2      1     934
                                              2 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Write                                   2     2      0      91
                                              2 COMMON     2     2      0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (4) _Flash_Memory_Unlock                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Read                                    4     4      0      48
                                              2 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 (1) _Exception_Main                                       8     8      0    3563
                                              9 COMMON     1     1      0
                                              6 BANK0      7     7      0
               _getDimmerLights_Line
             _getDimmerLights_Status
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
                             _setBuz
              _setDimmerLights_SwOff
                             _setLED
 ---------------------------------------------------------------------------------
 (2) _getDimmerLights_Line                                 2     2      0      25
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Main                                    0     0      0   62157
                         _getLoad_OK
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
               _setDimmerLights_Main
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Main                                 1     1      0   61926
                                             73 BANK0      1     1      0
         _DimmerLights_SelectPointer
    _getDimmerLights_Allow_Condition
           _getMain_All_LightsStatus
            _setDimmerLights_Dimming
              _setDimmerLights_OnOff
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_OnOff                                4     3      1   40312
                                             69 BANK0      4     3      1
                      _getCmd_Status
                     _getDelayOff_GO
     _getDimmerLights_PercentToValue
     _getDimmerLights_ValueToPercent
           _getMain_All_LightsStatus
                      _setCmd_Status
                     _setDelayOff_GO
        _setDimmerIntr_ControlStatus
         _setDimmerIntr_DimmingValue
           _setDimmerIntr_Dimming_RF
          _setDimmerIntr_MaxmumValue
               _setDimmerLights_Line
                             _setLED
                     _setProductData
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _setLED                                               2     1      1     908
                                              4 COMMON     2     1      1
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (4) _LedPointSelect                                       2     2      0      66
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (6) _setDimmerIntr_Dimming_RF                             3     2      1     266
                                              2 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (4) _setDimmerIntr_DimmingValue                           3     2      1     177
                                              2 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (4) _setDimmerIntr_ControlStatus                          3     2      1     266
                                              2 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (6) _setDelayOff_GO                                       8     6      2    3808
                                             61 BANK0      8     6      2
                _DelayOffPointSelect
                             ___bmul
                     _setProductData
 ---------------------------------------------------------------------------------
 (7) ___bmul                                               4     3      1     270
                                              2 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (5) _setCmd_Status                                        3     2      1     222
                                              2 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (5) _getMain_All_LightsStatus                             1     1      0      47
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (6) _getDimmerLights_PercentToValue                       6     6      0   15251
                                             52 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftneg
                            ___fttol
 ---------------------------------------------------------------------------------
 (7) ___ftmul                                             16    10      6    3377
                                              6 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) _getDelayOff_GO                                       2     2      0      89
                                              4 COMMON     2     2      0
                _DelayOffPointSelect
 ---------------------------------------------------------------------------------
 (4) _getCmd_Status                                        2     2      0      46
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_Dimming                              3     2      1   21119
                                             66 BANK0      3     2      1
         _getDimmerIntr_DimmingValue
     _getDimmerLights_ValueToPercent
                             _setBuz
           _setDimmerIntr_Dimming_Sw
          _setDimmerIntr_MaxmumValue
               _setDimmerLights_Line
                     _setProductData
                 _setRF_DimmerLights
                 _setRF_TransceiveGO
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setTxData                                            2     2      0       0
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (4) _setRF_TransceiveGO                                   2     2      0      22
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (6) _setRF_DimmerLights                                   5     4      1    3226
                                             61 BANK0      5     4      1
                     _setProductData
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_Line                                 1     1      0      88
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (6) _setDimmerIntr_MaxmumValue                            3     2      1     444
                                             58 BANK0      3     2      1
         _getDimmerIntr_DimmingValue (ARG)
     _getDimmerLights_PercentToValue (ARG)
 ---------------------------------------------------------------------------------
 (4) _setDimmerIntr_Dimming_Sw                             3     2      1     266
                                              2 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (2) _getDimmerLights_ValueToPercent                       6     6      0   11874
                                             52 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftneg
                            ___fttol
 ---------------------------------------------------------------------------------
 (7) ___fttol                                             14    10      4     430
                                             38 BANK0     14    10      4
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
 ---------------------------------------------------------------------------------
 (7) ___ftneg                                              3     0      3     223
                                             22 BANK0      3     0      3
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (7) ___ftdiv                                             16    10      6    3687
                                              6 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) ___ftadd                                             13     7      6    4221
                                             25 BANK0     13     7      6
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) ___awtoft                                             6     3      3    3214
                                              0 BANK0      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (8) ___ftpack                                             8     3      5    2873
                                              2 COMMON     8     3      5
 ---------------------------------------------------------------------------------
 (4) _getDimmerIntr_DimmingValue                           3     3      0      69
                                              2 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (3) _getDimmerLights_Allow_Condition                      6     6      0     187
                                              3 COMMON     6     6      0
                         _getLoad_OK
 ---------------------------------------------------------------------------------
 (4) _getLoad_OK                                           1     1      0      23
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (3) _getMain_All_Error_Status                             7     7      0     161
                                              2 COMMON     7     7      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Initialization                          0     0      0       0
          _DimmerIntr_Initialization
     _setDimmerLights_Initialization
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Initialization                       1     1      0       0
 ---------------------------------------------------------------------------------
 (2) _DimmerIntr_Initialization                            1     1      0       0
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Main                                        0     0      0    5248
                        _DlyOff_Main
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Main                                          3     3      0    5248
                                             61 BANK0      3     3      0
                _DelayOffPointSelect
             _getDimmerLights_Status
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                     _setProductData
 ---------------------------------------------------------------------------------
 (3) _setProductData                                       3     2      1    2803
                                             58 BANK0      3     2      1
         _getDimmerIntr_DimmingValue (ARG)
     _getDimmerLights_ValueToPercent (ARG)
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_SwOn                                 5     5      0    2091
                                              9 COMMON     1     1      0
                                              6 BANK0      4     4      0
         _DimmerLights_SelectPointer
                             _setBuz
 ---------------------------------------------------------------------------------
 (2) _setBuz                                               4     2      2    1809
                                              7 COMMON     2     2      0
                                              4 BANK0      2     0      2
                            ___awdiv
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4     653
                                              2 COMMON     5     1      4
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_SwOff                                1     1      0      66
                                              4 COMMON     1     1      0
         _DimmerLights_SelectPointer
 ---------------------------------------------------------------------------------
 (6) _getDimmerLights_Status                               2     2      0      89
                                              4 COMMON     2     2      0
         _DimmerLights_SelectPointer
 ---------------------------------------------------------------------------------
 (4) _DimmerLights_SelectPointer                           2     2      0      44
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Initialization                              0     0      0      66
              _DlyOff_Initialization
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Initialization                                1     1      0      66
                                              4 COMMON     1     1      0
                _DelayOffPointSelect
 ---------------------------------------------------------------------------------
 (7) _DelayOffPointSelect                                  2     2      0      44
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Main                                          1     1      0       0
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Initialization                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _ISR                                                  1     1      0       0
                                              1 COMMON     1     1      0
                            _IOC_ISR
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (10) _TMR1_ISR                                            0     0      0       0
          _DimmerLights_MOSFET_TMR_1
          _DimmerLights_MOSFET_TMR_2
 ---------------------------------------------------------------------------------
 (11) _DimmerLights_MOSFET_TMR_2                           1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (11) _DimmerLights_MOSFET_TMR_1                           1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (10) _IOC_ISR                                             0     0      0       0
          _DimmerLights_MOSFET_IOC_1
          _DimmerLights_MOSFET_IOC_2
 ---------------------------------------------------------------------------------
 (11) _DimmerLights_MOSFET_IOC_2                           0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _DimmerLights_MOSFET_IOC_1                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Buzzer_Initialization
   _Buzzer_Main
   _CC2500_PowerOnInitial
     _CC2500_ClearRXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
     _CC2500_ClearTXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
     _CC2500_FrequencyCabr
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
       _DelayTime_1us
     _CC2500_InitPATable
       _CC2500_WriteREG
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
     _CC2500_InitSetREG
       _CC2500_WriteREG
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
     _CC2500_PowerRST
       _CC2500_WriteByte
       _DelayTime_1us
       _RF_Timeout_Counter
       _setRF_TimeoutCleared
     _CC2500_SIDLEMode
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
   _DelayOff_Initialization
     _DlyOff_Initialization
       _DelayOffPointSelect
   _DelayOff_Main
     _DlyOff_Main
       _DelayOffPointSelect
       _getDimmerLights_Status
         _DimmerLights_SelectPointer
       _setDimmerLights_SwOff
         _DimmerLights_SelectPointer
       _setDimmerLights_SwOn
         _DimmerLights_SelectPointer
         _setBuz
           ___awdiv
       _setProductData
         _getDimmerIntr_DimmingValue (ARG)
         _getDimmerLights_ValueToPercent (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
   _DimmerLights_Initialization
     _DimmerIntr_Initialization
     _setDimmerLights_Initialization
   _DimmerLights_Main
     _getLoad_OK
     _getMain_All_Error_Status
     _getMain_All_LightsStatus
     _setDimmerLights_Main
       _DimmerLights_SelectPointer
       _getDimmerLights_Allow_Condition
         _getLoad_OK
       _getMain_All_LightsStatus
       _setDimmerLights_Dimming
         _getDimmerIntr_DimmingValue
         _getDimmerLights_ValueToPercent
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setBuz
           ___awdiv
         _setDimmerIntr_Dimming_Sw
         _setDimmerIntr_MaxmumValue
           _getDimmerIntr_DimmingValue (ARG)
           _getDimmerLights_PercentToValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setDimmerLights_Line
         _setProductData
           _getDimmerIntr_DimmingValue (ARG)
           _getDimmerLights_ValueToPercent (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setRF_DimmerLights
           _setProductData
             _getDimmerIntr_DimmingValue (ARG)
             _getDimmerLights_ValueToPercent (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
         _setRF_TransceiveGO
         _setTxData
       _setDimmerLights_OnOff
         _getCmd_Status
         _getDelayOff_GO
           _DelayOffPointSelect
         _getDimmerLights_PercentToValue
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _getDimmerLights_ValueToPercent
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _getMain_All_LightsStatus
         _setCmd_Status
         _setDelayOff_GO
           _DelayOffPointSelect
           ___bmul
           _setProductData
             _getDimmerIntr_DimmingValue (ARG)
             _getDimmerLights_ValueToPercent (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
         _setDimmerIntr_ControlStatus
         _setDimmerIntr_DimmingValue
         _setDimmerIntr_Dimming_RF
         _setDimmerIntr_MaxmumValue
           _getDimmerIntr_DimmingValue (ARG)
           _getDimmerLights_PercentToValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setDimmerLights_Line
         _setLED
           _LedPointSelect
         _setProductData
           _getDimmerIntr_DimmingValue (ARG)
           _getDimmerLights_ValueToPercent (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setRF_DimmerLights
           _setProductData
             _getDimmerIntr_DimmingValue (ARG)
             _getDimmerLights_ValueToPercent (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
         _setTxData
   _Exception_Main
     _getDimmerLights_Line
     _getDimmerLights_Status
       _DimmerLights_SelectPointer
     _getMain_All_Error_Status
     _getMain_All_LightsStatus
     _setBuz
       ___awdiv
     _setDimmerLights_SwOff
       _DimmerLights_SelectPointer
     _setLED
       _LedPointSelect
   _Flash_Memory_Initialization
     _Flash_Memory_Read
     _Flash_Memory_Write
       _Flash_Memory_Unlock
     _getDimmerLights_ValueToPercent
       ___awtoft
         ___ftpack
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___ftneg
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
     _setMemory_Data
   _Flash_Memory_Main
     _Flash_Memory_Modify
       _Flash_Memory_Erasing
         _Flash_Memory_Unlock
       _Flash_Memory_Read
       _Flash_Memory_Write
         _Flash_Memory_Unlock
       _setMemory_Data
     _getMain_All_LightsStatus
   _LED_Initialization
     _setLED_Initialization
       _LedPointSelect
       _setLED
         _LedPointSelect
   _LED_Main
     _setLED_Main
       _LedPointSelect
   _Load_Initialization
     _setLoad_AH_AL_Restore
   _Load_Main
     ___lwdiv
     ___wmul
     _getAll_DimmerIntr_Dimming_Sw_RF
     _getDimmer_LoadGO
     _getDimmer_Load_Status
     _getMain_All_Error_Status
     _getMain_All_LightsStatus
     _getMain_Lights_Count
     _setLoad_AH_AL_Restore
   _Mcu_Initialization
     _ADC_Set
     _Fosc_Set
     _IOC_Set
     _IO_Set
     _TMR1_Set
     _WDT_Set
   _RF_Initialization
     _setRF_Initialization
   _RF_Main
     _setRF_Main
       _CC2500_PowerOnInitial
         _CC2500_ClearRXFIFO
           _CC2500_WriteCommand
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
         _CC2500_ClearTXFIFO
           _CC2500_WriteCommand
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
         _CC2500_FrequencyCabr
           _CC2500_WriteCommand
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
           _DelayTime_1us
         _CC2500_InitPATable
           _CC2500_WriteREG
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
         _CC2500_InitSetREG
           _CC2500_WriteREG
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
         _CC2500_PowerRST
           _CC2500_WriteByte
           _DelayTime_1us
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
         _CC2500_SIDLEMode
           _CC2500_WriteCommand
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
       _CC2500_RxData
         _CC2500_ReadByte
         _CC2500_ReadStatus
           _CC2500_ReadByte
           _CC2500_WriteByte
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
       _CC2500_TxData
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
       _RF_RxDisable
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
       ___lwdiv
       _getBuz_GO
       _getRF_KeyStatus
       _getRxData
         _getMain_All_Error_Status
         _setControl_Lights_Table
           _getDimmerLights_Status
             _DimmerLights_SelectPointer
           _getMain_All_LightsStatus
           _setCmd_Status
           _setDimmerLights_SwOff
             _DimmerLights_SelectPointer
           _setDimmerLights_SwOn
             _DimmerLights_SelectPointer
             _setBuz
               ___awdiv
           _setProductData
             _getDimmerIntr_DimmingValue (ARG)
             _getDimmerLights_ValueToPercent (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
           _setRFSW_AdjControl
             _getDimmerLights_PercentToValue
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
             _getDimmerLights_Status
               _DimmerLights_SelectPointer
             _setDimmerIntr_Dimming_RF
             _setDimmerIntr_MaxmumValue
               _getDimmerIntr_DimmingValue (ARG)
               _getDimmerLights_PercentToValue (ARG)
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
             _setDimmerLights_DimmingRun
               _DimmerLights_SelectPointer
             _setDimmerLights_SwOff
               _DimmerLights_SelectPointer
             _setDimmerLights_SwOn
               _DimmerLights_SelectPointer
               _setBuz
                 ___awdiv
             _setMemory_Modify
             _setProductData
               _getDimmerIntr_DimmingValue (ARG)
               _getDimmerLights_ValueToPercent (ARG)
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
             _setTxData
           _setRFSW_Control
             _getDimmerLights_Status
               _DimmerLights_SelectPointer
             _setBuz
               ___awdiv
             _setDelayOff_GO
               _DelayOffPointSelect
               ___bmul
               _setProductData
                 _getDimmerIntr_DimmingValue (ARG)
                 _getDimmerLights_ValueToPercent (ARG)
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
             _setDimmerLights_SwOff
               _DimmerLights_SelectPointer
             _setDimmerLights_SwOn
               _DimmerLights_SelectPointer
               _setBuz
                 ___awdiv
             _setRF_DimmerLights
               _setProductData
                 _getDimmerIntr_DimmingValue (ARG)
                 _getDimmerLights_ValueToPercent (ARG)
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
             _setTxData
           _setTxData
         _setLog_Code
           _setBuz
             ___awdiv
           _setMemory_LoopSave
           _setMemory_Modify
           _setProductData
             _getDimmerIntr_DimmingValue (ARG)
             _getDimmerLights_ValueToPercent (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
         _setTxData
   _Switch_Initialization
     _TouchPower
       _Timeout_Counter
       _set_TimeoutCleared
     _setSw_Initialization
       _setLED
         _LedPointSelect
   _Switch_Main
     _TouchPower
       _Timeout_Counter
       _set_TimeoutCleared
     _setSw_Main
       _SwPointSelect
       _getMain_All_Error_Status
       _getSw_KeyStatus
       _setBuz
         ___awdiv
       _setDimmerLights_DimmingOn
         _DimmerLights_SelectPointer
       _setDimmerLights_SwOff
         _DimmerLights_SelectPointer
       _setDimmerLights_SwOn
         _DimmerLights_SelectPointer
         _setBuz
           ___awdiv
       _setRF_Learn
   _Temp_Initialization
     _setTemp_Initialization
   _Temp_Main
     _setTemp_Main
       _getMain_All_Error_Status
       _setBuz
         ___awdiv
       _setProductData
         _getDimmerIntr_DimmingValue (ARG)
         _getDimmerLights_ValueToPercent (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
   _WDT_Main
     _WDT_Clearing
   _getLoad_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _getTemp_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _myMain_Initialization
   _my_MainTimer
     _setBuz
       ___awdiv

 _ISR (ROOT)
   _IOC_ISR
     _DimmerLights_MOSFET_IOC_1
     _DimmerLights_MOSFET_IOC_2
   _TMR1_ISR
     _DimmerLights_MOSFET_TMR_1
     _DimmerLights_MOSFET_TMR_2

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       1       1        7.1%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      A       C       2       85.7%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     4C      4E       5       97.5%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      0      50       7      100.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      4E       9       97.5%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      4      4A      11       92.5%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0      45      13       86.3%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     187      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     187      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.32 build 58300 
Symbol Table                                                                                   Wed Jan 07 09:22:54 2015

                    __size_of_Switch_Main 000B                     ?_Flash_Memory_Erasing 0070  
                            _WDT_Clearing 07FE                     __end_of_setCmd_Status 1D67  
                          ___bmul@product 0074                 getMain_Lights_Count@count 0072  
                                      l98 15B5                                        _RD 0CA8  
                 __end_of_CC2500_WriteREG 109B                                        _WR 0CA9  
                            ___awdiv@sign 0021                                        _Sw 006D  
                     ___wmul@multiplicand 0074                      _getDimmerLights_Line 1C33  
                  __end_of_setDelayOff_GO 0CAE                              ___ftadd@exp1 0045  
                            ___ftadd@exp2 0044                  __size_of_getRF_KeyStatus 0011  
                    _setDimmerLights_Main 08A8                      _setDimmerLights_Line 1DFD  
                            ___ftadd@sign 0043                                       l100 15C7  
                                     l110 082C                                       l112 083A  
                                     l108 0840                                       l109 083C  
                    _setDimmerLights_SwOn 162D                                       l327 1E36  
                                     l328 1E38                                       l371 10E7  
                                     l259 0A15                                       l581 0AA6  
                                     l752 1D27                                       l922 074D  
                                     l954 1C3A                                       l955 1C40  
                                     l949 1E0A                                       l896 1F51  
                                     _GIE 005F                                       _CRC 00C2  
                                     _RA0 0060                                       _RB0 0068  
    __size_of_DimmerLights_Initialization 000B                                       _RB1 0069  
                                     _RA3 0063                                       _RC0 0070  
                                     _RB2 006A                                       _RA4 0064  
                                     _LED 00C6                                       _RC1 0071  
                                     _RB3 006B                                       _RC2 0072  
                                     _RB4 006C                                       _RA6 0066  
                                     _RB5 006D                                       _RA7 0067  
                                     _RC4 0074                                       _RC5 0075  
                                     _RC7 0077                                       _RF1 00A0  
                                     _ISR 0004                                       _WDT 00C0  
                                     _Cmd 00C3              getDimmerLights_Status@lights 0074  
                                     _Sw1 01BE                                       _Sw2 01C7  
              ??_setDimmerIntr_Dimming_RF 0073                ??_setDimmerIntr_Dimming_Sw 0073  
         setDimmerIntr_Dimming_RF@command 0072                  __end_of_CC2500_WriteByte 1E43  
                   _Buzzer_Initialization 1ABE                           __end_of_ADC_Set 1B16  
                                     wreg 0009      setDimmerLights_Initialization@lights 0070  
            getDimmerLights_Status@status 0075       __end_of_setDimmerIntr_ControlStatus 1157  
             _setDimmerIntr_ControlStatus 112E                         ??_getSw_KeyStatus 0072  
                                    ?_ISR 0070                              ___ftdiv@cntr 0030  
                         __end_of_IOC_ISR 1B94                     _setDimmerLights_OnOff 06C2  
        setDimmerLights_DimmingRun@lights 0076                                Load_Main@i 0024  
                            ___ftdiv@sign 0035                                      l2032 0E8A  
                                    l1145 1EEE                                      l1146 1EF7  
                                    l2027 0E90                                      l1180 13F8  
                                    l3018 1F09                                      l1179 13F1  
                                    l1452 122F                                      l3208 03FC  
                                    l1466 11A3                                      l2434 0B1E  
                                    l1723 05FF                                      l1475 1489  
                                    l2419 1C47                                      l1732 1D66  
                         __end_of_IOC_Set 1B52                                      l2456 0CC4  
                                    l1664 137D                                      l3185 17E9  
                                    l2465 0D3A                                      l2449 1265  
                                    l2393 0623                                      l2394 0664  
                                    l2810 0353                                      l1691 11E7  
                                    l3179 17D2                                      l1692 1200  
                                    l1860 0086                                      l2812 0231  
                                    l1861 0081                                      l2389 06BC  
                                    l1696 11FC                                      l1857 01E8  
                                    l1867 01C4                                      l1859 008A  
                                    l1868 01C2                                      l7103 11E3  
                                    l7113 11F8                                      l7105 11EB  
                                    l6401 039B                                      l6243 17AF  
                                    l8003 145E                                      l2788 1DAD  
                                    l6341 1D48                                      l6253 17D7  
                                    l6245 17B9                                      l6421 03D2  
                                    l6413 03B5                                      l7125 174F  
                                    l7133 175B                                      l6351 1070  
                                    l6255 17DF                                      l6247 17BE  
                                    l6239 17A8                                      l6431 03EE  
                                    l6423 03D7                                      l6503 0EAD  
                                    l7055 1143                                      l7063 1D72  
                                    l7143 176B                                      l7401 130B  
                                    l7073 1D1E                                      l6441 0420  
                                    l6433 03F8                                      l6425 03DB  
                                    l6521 0EFE                                      l6361 1CD8  
                                    l7129 1755                                      l6451 043B  
                                    l6419 03C8                                      l7083 10D1  
                                    l7155 1789                                      l7163 1795  
                                    l7139 1765                                      l7147 1771  
                   _setDimmerLights_SwOff 129F                                      l9101 1626  
                                    l6437 040E                                      l6461 0D52  
                                    l6533 0F1A                                      l6525 0F06  
                                    l6509 0EC3                                      l6357 1CD2  
                                    l6701 0C60                                      l6391 0385  
                                    l7191 1C73                                      l6711 0C90  
                                    l7159 178F                                      l6481 0DA9  
                                    l6561 0BB4                                      l6537 0F22  
                                    l8307 0818                                      l9203 167A  
                                    l6395 038C                                      l6467 0D68  
                                    l6723 1DF2                                      l7195 1C79  
                                    l6715 0CA4                                      l6731 116C  
                                    l9205 167F                                      l9141 1FE9  
                                    l6581 0BF2                                      l7197 1C7E  
                                    l7533 118E                                      l9221 1E69  
                                    l7391 12FA                                      l6591 0C0B  
                                    l9303 10AE                                      l7377 12E4  
                                    l6489 0DC2                                      l9225 1E6F  
                                    l9241 108B                                      l6841 1ED8  
                                    l9075 15EF                                      l6595 0C19  
                                    l6587 0BFF                                      l6579 0BE4  
                                    l6755 172C                                      l9219 1E66  
                                    l9235 1082                                      l9331 142E  
                                    l6843 1EDD                                      l7651 1F68  
                                    l9093 1615                                      l9085 15F7  
                                    l9069 15E4                                      l7389 12F8  
                                    l6589 0C08                                      l7741 1EAB  
                                    l9237 1085                                      l9341 143E  
                                    l9325 1425                                      l9421 0D19  
                                    l9413 0CD3                                      l9405 0CAF  
                                    l7637 1DC6                                      l7661 1F75  
                                    l7653 1F6A                                      l6679 12CB  
                                    l9087 1603                                      l9183 1641  
                                    l7399 1307                                      l8287 1F03  
                                    l6855 10F8                                      l9335 1435  
                                    l9327 1428                                      l9263 13B2  
                                    l9423 0D1D                                      l9415 0CD9  
                                    l7663 1F79                                      l9097 161E  
                                    l9193 1652                                      l9185 1644  
                                    l9601 14AA                                      l7729 1E9A  
                                    l6857 1103                                      l9337 1438  
                                    l7577 1CEC                                      l9425 0D21  
                                    l9417 0CF4                                      l9195 1657  
                                    l6891 1D54                                      l7739 1EA7  
                                    l9515 0872                                      l9443 09EF  
                                    l9275 0797                                      l9419 0D15  
                                    l6885 1C31                                      l7685 128F  
                                    l7677 1271                                      l9517 0888  
                                    l9461 0A1C                                      l9437 09E6  
                                    l9429 0D25                     _myMain_Initialization 1C51  
                                    l6895 1D61                                      l7679 127D  
                                    l9471 0A2C                                      l9463 0A1F  
                                    l9439 09E9                                      l9279 079C  
                                    l9561 0723                                      l9721 0900  
                                    l7689 1298                                      l9297 10A5  
                                    l9457 09FE                                      l9289 07EA  
                                    l9571 0742                                      l9707 08CE  
                                    l9299 10A8                                      l9475 0A32  
                                    l9467 0A25                                      l9651 0ADC  
                                    l9731 1EB8                                      l9581 0753  
                                    l9557 070C                                      l9709 08D4  
                                    l9493 085A                                      l9469 0A29  
                                    l9575 0749                                      l9719 08FA  
                                    l9495 085D                                      l9655 0AE5  
                                    l9639 0AC3                                      l9831 065F  
                                    l9735 1EBE                                      l9921 025E  
                                    l9905 021B                                      l9753 0E00  
                                    l9729 1EB5                                      _CFGS 0CAE  
                                    l9595 077D                                      l9499 0863  
                                    l9667 0AFA                                      l9931 0290  
                                    l7997 144A                                      l9845 0673  
                                    l9783 0E5F                              __CFG_WDTE$ON 0000  
                                    l9873 06B5                                      l9945 02CE  
                                    l9785 0E61                                      l9859 069D  
                                    l9955 0300                                      l9795 0E76  
                                    l9893 1DB8                                      l9797 0E77  
                                    l9993 1F53                                      l9889 1DB2  
                                    _FREE 0CAC                                      _LATA 010C  
                                    _LATB 010D                                      _LATC 010E  
                                    u5125 17F0                                      u5055 17B4  
                                    u5075 17CD                                      _PEIE 005E  
                                    u6150 16EC                                      u5095 17DA  
                                    u5505 03DC                                      u6155 16EA  
                                    u5445 03B6                                      u5605 0D7A  
                                    u5535 03EF                                      u5615 0D8A  
                                    u6095 0C6C                                      u6255 10ED  
                                    u5625 0DAA                                      u5475 03C9  
                                    u5635 0DB9                                      u5715 0F07  
                                    u5645 0DC3                                      u5805 0BBB  
                                    u5725 0F0D                                      u5835 0BE5  
                                    u5755 0F23                                      u5765 0F29  
                                    u5685 0ECF                                      u7525 1274  
                                    u5695 0EDF                                      u5865 0C00  
                                    u7545 127E                                      u7555 1288  
                                    u7565 1290                                      u8705 1F0F  
                                    u8735 080E                                      u8915 1226  
                                    u8695 1F0A                                      _LWLO 0CAD  
                                    _RSSI 00C8                                      _WREN 0CAA  
                                    _WPUB 020D        __end_of_setDimmerLights_DimmingRun 1E2B  
              _setDimmerLights_DimmingRun 1E14                                      _Buz1 00AE  
                                    _Load 0130                                      _Temp 00D0  
                                    _main 1687                              ___ftpack@arg 0072  
                     __end_of_DlyOff_Main 0AAD                           __end_of_RF_Main 1ACA  
                            ___ftpack@exp 0075                                      fsr0h 0005  
                                    fsr1h 0007                                      fsr0l 0004  
                                    indf0 0000                                      indf1 0001  
                                    fsr1l 0006                                      btemp 007E  
                         __end_of_WDT_Set 1B48                                      ltemp 007E  
           __size_of_setRF_Initialization 000A                                      start 0020  
                                    ttemp 007E                                      wtemp 007E  
              __end_of_setRFSW_AdjControl 07FE                         ___bmul@multiplier 0075  
                            ___ftmul@cntr 0034                              ___ftmul@sign 0035  
            __size_of_Temp_Initialization 0003      _getDimmerLights_Allow_Condition$2337 0074  
    _getDimmerLights_Allow_Condition$2338 0075      _getDimmerLights_Allow_Condition$2339 0076  
                       ?_getDimmer_LoadGO 0070                                     ??_ISR 0071  
                            ___fttol@exp1 0053                              ___fttol@lval 004F  
       setDimmerLights_DimmingRun@command 0074   __end_of_getDimmerLights_Allow_Condition 130D  
__size_of_getDimmerLights_Allow_Condition 0037         ??_getDimmerLights_Allow_Condition 0073  
        ?_getDimmerLights_Allow_Condition 0070           _getDimmerLights_Allow_Condition 12D6  
                  _getDimmerLights_Status 1BF9                        ??_getDimmer_LoadGO 0072  
                        __end_of_LED_Main 1BC4                     ?_getDimmerLights_Line 0070  
                              _DimmerIntr 00C5                                     l10017 04C5  
                                   l10107 1337                                     l10125 135E  
                                   l10225 0166                                     l10233 018E  
                                   l10153 0068                                     l10073 0B61  
                                   l10065 0B3E                                     l10331 059A  
                                   l10315 055C                                     l10243 01A4  
                                   l10219 0159                                     l10171 0089  
                                   l10403 16B6                                     l10309 054D  
                                   l10229 0182                                     l10093 0B95  
                                   l10077 0B6A                                     l10351 05E5  
                                   l10327 0592                                     l10319 056B  
                                   l10345 05D3                                     l10329 056E  
                                   l10281 01D7                                     l10193 00DF  
                                   l10347 05AF                                     l10187 00AD  
                                   l10349 05DB                                     l10357 05F5  
                                   l10399 16AB                     ?_setDimmerLights_Main 0070  
                   ?_setDimmerLights_Line 0070                           ?_setDelayOff_GO 005D  
                   ?_setDimmerLights_SwOn 0070                                     ?_main 01E6  
                         __end_of___awdiv 162D                           __end_of___ftadd 0453  
                         __end_of___ftdiv 0DE4                           __end_of___ftneg 1B36  
                                   u10105 1604                                     u10115 160E  
                                   u10125 1616                                     u10205 1D8B  
                                   u10085 15FA                           __end_of___ftmul 0F4A  
                                   u12005 0112                                     u11215 0E47  
                                   u12210 0598                                     u11235 0E67  
                         ___awdiv@divisor 0072                                     u11325 063F  
                                   u12215 0577                                     u12240 05D9  
                                   _T1CON 0018                                     u11355 068C  
                         __end_of___fttol 0C22                                     u12245 05B8  
                                   u12085 0195                                     u10815 1DE0  
                                   u11805 133D                                     u11745 0B82  
                                   u11845 1375                                     u11695 0B4E  
                                   u11795 132E                                     _IOCBF 0396  
                                   u11985 00AB                                     u11995 00DD  
                                   _IOCBN 0395                                     _IOCBP 0394  
                                   _IOCIE 005B                                     _IOCIF 0058  
                         __end_of___lwdiv 129F                                     i1l991 14FC  
                                   i1l997 1520                                     i1l999 1515  
                         ___awdiv@counter 0020             __size_of_CC2500_FrequencyCabr 000B  
                                   _TMR1H 0017                                     _TMR1L 0016  
                                   _PORTA 000C                                     _PORTB 000D  
                                   _PORTC 000E                              ?_setLED_Main 0070  
                      setRF_Learn@command 0073                                     _TRISA 008C  
                                   _TRISB 008D                                     _TRISC 008E  
                                   _WPUB1 1069                   __end_of_Timeout_Counter 1DE6  
                           __CFG_WRT$HALF 0000    __end_of_getDimmerLights_ValueToPercent 0971  
 __size_of_getDimmerLights_ValueToPercent 0065            _getDimmerLights_ValueToPercent 090C  
                                   _Light 00C7                          __end_of_TMR1_ISR 1FBC  
                 __size_of_setProductData 000C              __size_of_CC2500_WriteCommand 001A  
                        __end_of_TMR1_Set 1BD0                                     _getAD 1EAD  
                           ___awtoft@sign 0025                             ___ftpack@sign 0076  
             __size_of_CC2500_ClearRXFIFO 0004                             ??_Buzzer_Main 0072  
                        __end_of_WDT_Main 1CD0               __size_of_CC2500_ClearTXFIFO 0004  
                     CC2500_RxData@loop_f 0077                            __pbitbssCOMMON 03D0  
                          __CFG_BOREN$OFF 0000              __end_of_getMain_Lights_Count 1C15  
                      Flash_Memory_Read@i 0073                          ?_CC2500_ReadByte 0070  
                                   ltemp0 007E                                     ltemp1 0082  
                                   ltemp2 0086                                     ltemp3 0080  
          __size_of_setLED_Initialization 0010             __end_of_setLED_Initialization 1C90  
                                   ttemp0 007E                                     ttemp1 0081  
                                   ttemp2 0084                                     ttemp3 0087  
                                   ttemp4 007F                              ?_setRF_Learn 0070  
                                   status 0003                                     wtemp0 007E  
                                   wtemp1 0080                                     wtemp2 0082  
                                   wtemp3 0084                                     wtemp4 0086  
                                   wtemp5 0088                                     wtemp6 007F  
                      _setRF_DimmerLights 16E2               __size_of_Flash_Memory_Write 002A  
                       ?_CC2500_SIDLEMode 0070                __size_of_RF_Initialization 0003  
        __size_of_DelayOff_Initialization 0008                    ?_setLoad_AH_AL_Restore 0070  
                       setTemp_Main@error 005F               __size_of_setRF_TransceiveGO 0010  
                  ??_Flash_Memory_Erasing 0072               ??_setDimmerLights_DimmingOn 0074  
                      ??_CC2500_SIDLEMode 0076                           __initialization 0022  
                        ?_CC2500_PowerRST 0070                         ?_setMemory_Modify 0070  
                 __size_of_getDelayOff_GO 000F                              __end_of_main 16E2  
                     ?_setRF_DimmerLights 005D                          __end_of_Fosc_Set 1AD4  
          getMain_All_LightsStatus@status 0072                        ??_setMemory_Modify 0072  
            setDimmerLights_OnOff@command 0065                            _Exception_Main 052F  
                        ?_CC2500_WriteREG 0074                                 ??_ADC_Set 0072  
                    _setSw_Initialization 1B16                                    ??_main 007A  
                           ___fttol@sign1 004E                              ?_setLog_Code 0070  
             ?_setDimmerIntr_DimmingValue 0072              ??_DimmerLights_SelectPointer 0072  
                 _setControl_Lights_Table 0CAE                            _setMemory_Data 1B67  
                  ?_Buzzer_Initialization 0070                   ??_DlyOff_Initialization 0074  
                              _Receive_OK 03D0        setDimmerIntr_ControlStatus@command 0072  
                 _setDimmerLights_Dimming 1491                                 ??_IOC_ISR 0070  
                               ??_IOC_Set 0072                               _DimmerIntr1 00E2  
                             _DimmerIntr2 00E9                  _getMain_All_LightsStatus 1C24  
                __size_of_setRFSW_Control 0040                        _RF_Timeout_Counter 1D7C  
                 ??_Switch_Initialization 0077                    ?_setDimmerLights_OnOff 0065  
                    ??_setRF_DimmerLights 005E                                    ?_getAD 0072  
                       ??_getRF_KeyStatus 0072                    ?_setDimmerLights_SwOff 0070  
                             _DlyOff_Main 0A3E                    ?_myMain_Initialization 0070  
                                  _ADCON0 009D                                    _ADCON1 009E  
                               ??_RF_Main 007A                                    _ADRESH 009C  
                                  _ADRESL 009B                          ___awdiv@dividend 0074  
                   _getDimmer_Load_Status 1B08                                 ??_WDT_Set 0072  
                        __end_of___awtoft 2000                                    _ANSELA 018C  
                                  _ANSELB 018D                                    _ANSELC 018E  
                        __end_of___ftpack 1800                  _getMain_All_Error_Status 11D4  
                                  _IOCBF2 1CB2                                    i1l1002 151E  
                                  i1l1020 154E                                    i1l1031 1570  
                                  i1l1008 1532                                    i1l1026 1572  
                                  i1l1028 1567                                    i1l1037 1584  
                                  i1l1414 0013                                    i1l1417 001B  
                                  i1l7805 14EF                                    i1l7837 152B  
                                  i1l7829 1517                                    i1l7891 157D  
                                  i1l7883 1569                                    i1l7859 1541  
                                  _FVRCON 0117      getDimmerLights_Allow_Condition@allow 0078  
                                  _PMADRH 0192                                    _PMADRL 0191  
                                  _PMDATH 0194                                    _PMDATL 0193  
                     ?_RF_Timeout_Counter 0070                                    _PMCON2 0196  
                                  _OSCCON 0099                        __size_of_Load_Main 0198  
                                  _TMR1IE 0488                                    _TMR1IF 0088  
                                  _IO_Set 1E43                                    u883_25 1FB6  
                                  _WDTCON 0097                      Exception_Main@i_3660 002A  
                      DelayTime_1us@count 0072            __size_of_CC2500_PowerOnInitial 0015  
             ??_setDimmerIntr_MaxmumValue 005B             __end_of_CC2500_PowerOnInitial 1DA6  
                                  _Dimmer 00BA                                    _DlySw1 01D0  
                                  _DlySw2 01D5             __size_of_setRF_TimeoutCleared 0004  
                   __end_of_getCmd_Status 1C80                __end_of_Mcu_Initialization 1D15  
                     __end_of_Buzzer_Main 0847                                    _Memory 0220  
                                  _Timer1 00BD                                    ___bmul 1CD0  
                  __end_of_Exception_Main 0600                      Load_Main@Load_Status 0023  
                    Exception_Main@lights 002C                                    ___wmul 1F01  
                               ??___awdiv 0076                                 ??___ftadd 003F  
            __size_of_DelayOffPointSelect 0015                                 ??___ftdiv 002C  
                               ??___ftneg 007A                                 ??___ftmul 002C  
                               ??___fttol 004A              ?_Flash_Memory_Initialization 0070  
                  ??_getDimmerLights_Line 0072                                 ??___lwdiv 0076  
                  ??_setDimmerLights_Main 007A                    ??_setDimmerLights_Line 0072  
                                  _r_data 00CE   __end_of_getAll_DimmerIntr_Dimming_Sw_RF 1EAD  
__size_of_getAll_DimmerIntr_Dimming_Sw_RF 001B         ??_getAll_DimmerIntr_Dimming_Sw_RF 0072  
        ?_getAll_DimmerIntr_Dimming_Sw_RF 0070           _getAll_DimmerIntr_Dimming_Sw_RF 1E92  
                                  _s_data 00CF                    ??_setDimmerLights_SwOn 0079  
                                  _setLED 1741                                    _myMain 0120  
                    ??_RF_Timeout_Counter 0072                    __end_of_setMemory_Data 1B72  
                   ?_setSw_Initialization 0070                          ___awdiv@quotient 0022  
                                  _setBuz 1586                        __size_of_Temp_Main 0003  
             __end_of_Load_Initialization 1AC4          ??_setDimmerLights_Initialization 0072  
         ?_setDimmerLights_Initialization 0070          __end_of_setDimmerIntr_Dimming_RF 1180  
        __end_of_setDimmerIntr_Dimming_Sw 10E3                     ___ftmul@f3_as_product 0031  
               _setDimmerLights_DimmingOn 1108                  Flash_Memory_Read@address 0074  
                        ?_Timeout_Counter 0070                __end_of_setMemory_LoopSave 1CC0  
             getMain_Lights_Count@status1 0073               getMain_Lights_Count@status2 0074  
                   __end_of_SwPointSelect 1DD0              __size_of_Flash_Memory_Modify 004D  
                 __size_of_LedPointSelect 001D           setDimmerIntr_Dimming_Sw@command 0072  
                     Flash_Memory_Write@i 0073              __size_of_Flash_Memory_Unlock 0009  
                              _TouchPower 1DA6               __size_of_CC2500_InitPATable 001D  
                     CC2500_TxData@loop_e 0077          __end_of_CC2500_registers_address 102F  
                 __end_of__initialization 0050           getDimmerIntr_DimmingValue@value 0073  
         setDimmerIntr_DimmingValue@value 0072                                 ?_LED_Main 0070  
                              ___ftadd@f1 0039                                ___ftadd@f2 003C  
                    _getRF_KeyStatus$5378 0074                             ?_my_MainTimer 0070  
               _setDimmerLights_SwOn$2280 0026                 _setDimmerLights_SwOn$2289 0027  
                              ___ftdiv@f1 0029                                ___ftdiv@f2 0026  
                              ___ftdiv@f3 0031                                ___ftneg@f1 0036  
                              ___awtoft@c 0020                       ___bmul@multiplicand 0072  
            ?_DimmerLights_Initialization 0070                                ___ftmul@f1 0026  
                              ___ftmul@f2 0029                ?_DimmerIntr_Initialization 0070  
                              ___fttol@f1 0046                            __pcstackCOMMON 0070  
                         ?_Exception_Main 0070                              __pidataBANK4 1F7B  
                           __end_of_getAD 1EC8                                 ?_TMR1_ISR 0070  
                               ?_TMR1_Set 0070                    setLoad_AH_AL_Restore@i 0073  
               setMemory_LoopSave@command 0073                        _LED_Initialization 1BAC  
                         _getSw_KeyStatus 1F5B                 ??_setControl_Lights_Table 007A  
                      getRF_KeyStatus@key 0073                           ?_setMemory_Data 0072  
        ??_getDimmerLights_PercentToValue 0054           ?_getDimmerLights_PercentToValue 0070  
               ??_setDimmerLights_Dimming 0063             ??_Flash_Memory_Initialization 005A  
              ?_DimmerLights_MOSFET_IOC_1 0070                ?_DimmerLights_MOSFET_IOC_2 0070  
                    _getMain_Lights_Count 1C07                                 ?_WDT_Main 0070  
                       __end_of_Load_Main 01EC         setDimmerIntr_ControlStatus@lights 0074  
              ?_DimmerLights_MOSFET_TMR_1 0070                ?_DimmerLights_MOSFET_TMR_2 0070  
                      __size_of_getBuz_GO 0010                 _setDimmerIntr_MaxmumValue 1DE6  
              __end_of_set_TimeoutCleared 1AEE           setDimmerIntr_MaxmumValue@lights 005C  
                      __size_of_getRxData 0073                       ?_LED_Initialization 0070  
                       ?_CC2500_WriteByte 0070                            _setProductData 1B94  
                    __size_of_setLED_Main 0041                    ?_getDimmer_Load_Status 0070  
                                 ??_getAD 0075                       _Temp_Initialization 1ACA  
                      ??_CC2500_WriteByte 0072                                __pbssBANK0 006D  
                              __pbssBANK1 00A0                                __pbssBANK2 0120  
                              __pbssBANK3 01A0                                __pbssBANK4 0220  
                               ?_Fosc_Set 0070                               _Buzzer_Main 0801  
                       ??_setRFSW_Control 0065               ?_setDimmerLights_DimmingRun 0074  
                       __end_of_Temp_Main 1AD0                                   ?_IO_Set 0070  
                          ??_my_MainTimer 0079                                ??_LED_Main 0077  
                         __CFG_VCAPEN$OFF 0000                   _DelayOff_Initialization 1B1D  
                           ??_Switch_Main 007A                            DelayTime_1us@i 0074  
                          DelayTime_1us@j 0076                      ??_LED_Initialization 0077  
                            _DimmerLights 007B                         LedPointSelect@led 0073  
   getAll_DimmerIntr_Dimming_Sw_RF@status 0075                    __size_of_DelayOff_Main 0008  
                    __size_of_setRF_Learn 0011                               setBuz@count 0078  
                 ?_getDimmerLights_Status 0070                                __pmaintext 1687  
                          _getDelayOff_GO 1C15                       _CC2500_WriteCommand 1E5D  
                    ?_Temp_Initialization 0070                                   ?___bmul 0072  
                        ??_setDelayOff_GO 005F         __end_of_DimmerIntr_Initialization 1FDE  
           ??_DimmerLights_Initialization 0073                                   ?___wmul 0072  
                              ??_TMR1_ISR 0071                             ?_setTemp_Main 0070  
                              _getLoad_AD 0B20                                ??_TMR1_Set 0072  
                              __pintentry 0004                    ??_setSw_Initialization 0076  
                              _getLoad_OK 1AFA                        __size_of_setTxData 00B6  
                                 ?_setLED 0074                    __size_of_DelayTime_1us 0025  
                   ?_getMain_Lights_Count 0070                                   _ADC_Set 1B0F  
                                 ?_setBuz 0024                                 ?___awtoft 0020  
                               ?___ftpack 0072                                _getTemp_AD 130D  
      __end_of_DimmerLights_SelectPointer 1079                _DimmerLights_SelectPointer 1066  
                              ??_WDT_Main 0072              __end_of_setRF_Initialization 1B5C  
       __end_of_DimmerLights_MOSFET_IOC_1 1BEB         __end_of_DimmerLights_MOSFET_IOC_2 1BF9  
                      _setRFSW_AdjControl 0780                    __end_of_setProductData 1BA0  
       __end_of_DimmerLights_MOSFET_TMR_1 1534         __end_of_DimmerLights_MOSFET_TMR_2 1586  
           setDimmerLights_Dimming@lights 0064                                   _IOC_ISR 1B88  
                                 _IOC_Set 1B48                      __size_of_setLog_Code 0034  
           setDimmerLights_Dimming@status 0062     getDimmerLights_Allow_Condition@lights 0077  
                    ?_CC2500_WriteCommand 0070                         _Flash_Memory_Main 1202  
               __size_of_getDimmer_LoadGO 0007                         _Flash_Memory_Read 1D29  
                  __size_of_CC2500_RxData 0061                    __size_of_CC2500_TxData 0068  
                     ?_setRFSW_AdjControl 0070                                   _RF_Data 01A0  
                                 _RF_Main 1AC7                        ?_Flash_Memory_Main 0070  
                      ?_Flash_Memory_Read 0070                                   _WDT_Set 1B3F  
         __end_of_setControl_Lights_Table 0D3B                           setRF_Main@error 006B  
                  __size_of_setCmd_Status 0015                                ??_Fosc_Set 0072  
                             ?_TouchPower 0070           __end_of_setDimmerLights_Dimming 14E2  
                 ??_setLoad_AH_AL_Restore 0072                       getCmd_Status@number 0072  
            __end_of_CC2500_FrequencyCabr 1B7D                           __size_of_IO_Set 001A  
                     setCmd_Status@number 0074         __size_of_setDimmerIntr_Dimming_RF 0029  
       __size_of_setDimmerIntr_Dimming_Sw 0025                         __end_of_getBuz_GO 1CA0  
               ?_setDimmerIntr_Dimming_RF 0072                       ??_Flash_Memory_Main 0078  
               ?_setDimmerIntr_Dimming_Sw 0072                       ??_Flash_Memory_Read 0072  
                  __end_of_getDelayOff_GO 1C24                                   _VarLED1 01DE  
                                 _VarLED2 01E2            __end_of_getDimmerLights_Status 1C07  
                       __end_of_getRxData 0B20                   __end_of_getSw_KeyStatus 1F7B  
                _CC2500_registers_address 1000                     ??_Temp_Initialization 0072  
                    ??_setRFSW_AdjControl 005D                            ??_setTemp_Main 005D  
                         __size_of___bmul 0011                       setProductData@value 005A  
                                 ___awdiv 15D9                                   ___ftadd 035D  
                                 ___ftdiv 0D3B                                   ___ftneg 1B2D  
                         __size_of___wmul 001D                                   ___ftmul 0E96  
                                 ___fttol 0B9B                       __end_of_Switch_Main 1B88  
                                 ___lwdiv 1269                ??_getMain_All_LightsStatus 0072  
                 ??_Buzzer_Initialization 0072                           _getRF_KeyStatus 1CE1  
                              ??___awtoft 0023                                ??___ftpack 0077  
                         __size_of_setLED 005F                      setRFSW_AdjControl@sw 0060  
                         __size_of_setBuz 0053                                   __ptext1 1346  
                                 __ptext2 1C51                                   __ptext3 130D  
                                 __ptext4 0B20                                   __ptext5 1EAD  
                                 __ptext6 1CC0                                   __ptext7 07FE  
                                 __ptext8 1ACD                                   __ptext9 0DE4  
               __size_of_CC2500_SIDLEMode 0004                              __size_of_ISR 001C  
              ??_getMain_All_Error_Status 0072                   ??_setDimmerLights_OnOff 0066  
                         ?_setProductData 005A                 __end_of_Flash_Memory_Main 1235  
               __end_of_Flash_Memory_Read 1D3D                   ??_setDimmerLights_SwOff 0074  
                              _setRF_Main 0600                   ??_myMain_Initialization 0072  
                           _DelayOff_Main 1B25                         _DimmerLights_Main 1F3B  
          __size_of_DlyOff_Initialization 0005                     ??_CC2500_WriteCommand 0074  
               __size_of_setMemory_Modify 0010             __end_of_DlyOff_Initialization 1AE9  
              __end_of_CC2500_ClearRXFIFO 1ADC                  ??_setTemp_Initialization 0072  
              __end_of_CC2500_ClearTXFIFO 1AE0                              ?_DlyOff_Main 0070  
                      ?_DimmerLights_Main 0070                                   _product 006C  
                          _LedPointSelect 1EE4                       _DelayOffPointSelect 1D3D  
                                 clrloop0 1AF5            __size_of_Switch_Initialization 000D  
           __end_of_Switch_Initialization 1BDD                      end_of_initialization 0050  
               ??_DelayOff_Initialization 0075                         _CC2500_InitSetREG 11AA  
                           _DelayTime_1us 10E3                         __end_of_setTxData 1000  
              __end_of_Flash_Memory_Write 11AA        __size_of_setDimmerLights_DimmingOn 0026  
                                 init_ram 1AEE                __end_of_setRF_TransceiveGO 1C70  
                      ?_CC2500_InitSetREG 0070                       ??_DimmerLights_Main 007A  
                    Flash_Memory_Read@ret 0075                                   initloop 1AEF  
                              _setSw_Main 01EC                     CC2500_ReadByte@loop_b 0073  
                  setDimmerLights_SwOn@sw 0029                         _CC2500_ReadStatus 109B  
                    Flash_Memory_Modify@i 0077                     _setLED_Initialization 1C80  
                         ?_getDelayOff_GO 0070                                getBuz_GO@i 0076  
                      ?_CC2500_ReadStatus 0070                  __size_of_CC2500_ReadByte 001C  
                           _CC2500_RxData 0847                             _CC2500_TxData 09D6  
                     ??_CC2500_InitSetREG 0077             __size_of_Flash_Memory_Erasing 000C  
                    ?_DelayOffPointSelect 0070                       _Flash_Memory_Modify 1444  
                             ?_getLoad_AD 0070                               ?_getLoad_OK 0070  
                  ??_getMain_Lights_Count 0072                              __pstringtext 1000  
                           _setCmd_Status 1D52                       _Flash_Memory_Unlock 1B36  
                     ??_CC2500_ReadStatus 0074                   CC2500_InitSetREG@loop_c 0022  
                             ?_getTemp_AD 0070                       __size_of_TouchPower 0015  
                setLED_Initialization@led 0076                    setSw_Initialization@sw 0076  
               __end_of_DimmerLights_Main 1F5B                        _Mcu_Initialization 1D03  
                __size_of_CC2500_PowerRST 0044              __end_of_setRF_TimeoutCleared 1AD8  
                    __end_of_my_MainTimer 137F                            ?_DelayOff_Main 0070  
                        __CFG_FOSC$INTOSC 0000                    __end_of_LedPointSelect 1F01  
                __size_of_CC2500_WriteREG 0022          getDimmerIntr_DimmingValue@lights 0074  
        setDimmerIntr_DimmingValue@lights 0074                 __end_of_CC2500_InitSetREG 11D4  
                     ?_Mcu_Initialization 0070                      ?_Flash_Memory_Modify 0070  
             __size_of_setRF_DimmerLights 005F                            ?_DelayTime_1us 0072  
                    ?_Flash_Memory_Unlock 0070        __size_of_setDimmerIntr_MaxmumValue 0017  
               __end_of_CC2500_ReadStatus 10BE                             ?_RF_RxDisable 0070  
          setDimmerIntr_Dimming_RF@lights 0074           getMain_All_Error_Status@command 0077  
                             ___ftdiv@exp 0034         __end_of_setDimmerLights_DimmingOn 112E  
                        ??_Exception_Main 0079                            __end_of_IO_Set 1E5D  
                    _setRF_Initialization 1B52                        _setMemory_LoopSave 1CB0  
                             _Switch_Main 1B7D                         __size_of_LED_Main 000C  
                        ?_getSw_KeyStatus 0070                            ?_CC2500_RxData 0070  
                          ?_CC2500_TxData 0070                   __end_of_getRF_KeyStatus 1CF2  
                        ??_setMemory_Data 0073                               ___ftmul@exp 0030  
                   _CC2500_PowerOnInitial 1D91               ??_DimmerIntr_Initialization 0072  
                    ??_Mcu_Initialization 0073                     ??_DelayOffPointSelect 0072  
                           ?_WDT_Clearing 0070                            ?_setCmd_Status 0072  
                     ?_setMemory_LoopSave 0070                            __end_of___bmul 1CE1  
     __size_of_getDimmerIntr_DimmingValue 0014                      setRF_DimmerLights@on 005D  
                          __end_of___wmul 1F1E                         getSw_KeyStatus@sw 0076  
             __size_of_RF_Timeout_Counter 0015                         __size_of_TMR1_ISR 0021  
           __size_of_getDimmerLights_Line 000F          DimmerLights_SelectPointer@lights 0073  
                       __size_of_TMR1_Set 000C               ??_DimmerLights_MOSFET_IOC_1 0070  
             ??_DimmerLights_MOSFET_IOC_2 0070             __size_of_setDimmerLights_Main 0064  
                          __end_of_setLED 17A0             __size_of_setDimmerLights_Line 0017  
           __size_of_setDimmerLights_SwOn 005A                            __end_of_setBuz 15D9  
             ??_DimmerLights_MOSFET_TMR_1 0070               ??_DimmerLights_MOSFET_TMR_2 0070  
                    _CC2500_FrequencyCabr 1B72                   ??_getDimmer_Load_Status 0072  
              __size_of_Flash_Memory_Main 0033                __size_of_Flash_Memory_Read 0014  
                             ?_setRF_Main 0070                           _setRFSW_Control 137F  
                       __size_of_WDT_Main 0010                       start_initialization 0022  
                         ?_LedPointSelect 0070                                 _Load_Main 0054  
                             __end_of_ISR 0020                    __size_of_getCmd_Status 0010  
                        _getDimmer_LoadGO 1B01                     ??_Flash_Memory_Modify 0076  
            __size_of_Load_Initialization 0003              ?_setDimmerIntr_ControlStatus 0072  
              __end_of_CC2500_InitPATable 1F3B           __size_of_setTemp_Initialization 0001  
                    ??_setMemory_LoopSave 0072                     ??_Flash_Memory_Unlock 0072  
                    __end_of_setTemp_Main 0E96                            ??_RF_RxDisable 0076  
  __end_of_getDimmerLights_PercentToValue 09D6   __size_of_getDimmerLights_PercentToValue 0065  
          _getDimmerLights_PercentToValue 0971                       __size_of_getLoad_AD 007B  
                            ?_Buzzer_Main 0070       getDimmerLights_PercentToValue@value 0056  
                     __size_of_getLoad_OK 0007                        _set_TimeoutCleared 1AE9  
       __end_of_setDimmerIntr_MaxmumValue 1DFD                                  ??_IO_Set 0072  
                __size_of_Timeout_Counter 0016                                 _VarErrLED 01DA  
                             ?_setSw_Main 0070                       __size_of_getTemp_AD 0039  
                  ?_setLED_Initialization 0070                     ?_setRF_Initialization 0070  
                       __size_of_Fosc_Set 0004                 __size_of_CC2500_WriteByte 0018  
                               _Temp_Main 1ACD                       ?_set_TimeoutCleared 0070  
                          ??_WDT_Clearing 0072                                 _Rx_Length 00C9  
                   setProductData@address 005C                       Exception_Main@count 0026  
                     Exception_Main@error 0027                                  ??___bmul 0073  
                                ??___wmul 0076                    __size_of_SwPointSelect 0015  
        __end_of_getMain_All_LightsStatus 1C33                                 _Tx_Length 00CC  
                             __pdataBANK4 0245                                  ??_setLED 0075  
                                ?_ADC_Set 0070                                  ??_setBuz 0077  
                         ??_DelayOff_Main 007A                         ??_CC2500_ReadByte 0072  
             ?_DimmerLights_SelectPointer 0070          __end_of_getMain_All_Error_Status 1202  
                        _CC2500_SIDLEMode 1AE0                __size_of_DimmerLights_Main 0020  
                      setMemory_Data@data 0072                     ?_CC2500_FrequencyCabr 0070  
          setDimmerIntr_Dimming_Sw@lights 0074                             ??_setLED_Main 0074  
                       __size_of___awtoft 0022                         __size_of___ftpack 0060  
                                ?_IOC_ISR 0070                               __pbssCOMMON 007B  
                                ?_IOC_Set 0070                                 ___latbits 0003  
                        _setMemory_Modify 1CA0                                ?_Load_Main 0070  
                           __pcstackBANK0 0020                 setRF_TransceiveGO@command 0073  
                           __pcstackBANK3 01E6                      ??_set_TimeoutCleared 0072  
               _DimmerIntr_Initialization 1FBC                           ??_DelayTime_1us 0074  
              __size_of_CC2500_InitSetREG 002A                             DlyOff_Main@sw 005F  
                       ??_CC2500_PowerRST 0078                                  ?_RF_Main 0070  
                                ?_WDT_Set 0070             ??_setDimmerIntr_ControlStatus 0073  
                            ??_TouchPower 0072                      __size_of_DlyOff_Main 006F  
              __size_of_CC2500_ReadStatus 0023            setDimmerIntr_MaxmumValue@value 005A  
             setDimmerLights_DimmingOn@sw 0074                 _DimmerLights_MOSFET_IOC_1 1BDD  
               _DimmerLights_MOSFET_IOC_2 1BEB                         ??_CC2500_WriteREG 0075  
                           ??_setRF_Learn 0072                             _DimmerLights1 015E  
                           _DimmerLights2 0166                     CC2500_WriteREG@w_addr 0076  
               _DimmerLights_MOSFET_TMR_1 14E2                 _DimmerLights_MOSFET_TMR_2 1534  
                   setDelayOff_GO@command 005D            __size_of_setLoad_AH_AL_Restore 001B  
                         ??_CC2500_RxData 0076             __end_of_setLoad_AH_AL_Restore 1E92  
                setRFSW_AdjControl@status 005F                           ??_CC2500_TxData 0076  
                               __pnvBANK0 006C                            getRxData@error 0069  
             __size_of_LED_Initialization 000C                      _setRF_TimeoutCleared 1AD4  
                  ?_CC2500_PowerOnInitial 0070                           Exception_Main@i 0028  
                              ?_Temp_Main 0070                       __size_of_setRF_Main 00C2  
                        ___lwdiv@dividend 0074                     DelayOffPointSelect@sw 0073  
                           _getCmd_Status 1C70                                setBuz@time 0024  
                         ??_setCmd_Status 0073                       setDelayOff_GO@value 005E  
                ?_setControl_Lights_Table 0070                          ?_getRF_KeyStatus 0070  
                          Load_Main@error 0022                    _setTemp_Initialization 0003  
                               _getBuz_GO 1C90                  ?_setDimmerLights_Dimming 0062  
     __end_of_Flash_Memory_Initialization 052F               _Flash_Memory_Initialization 0453  
                                ?___awdiv 0072                                 __ptext100 1C15  
                               __ptext101 1C70                                 __ptext110 0B9B  
                               __ptext102 1491                                 __ptext111 1B2D  
                               __ptext103 0F4A                                 __ptext120 1B5C  
                               __ptext112 0D3B                                 __ptext104 1C60  
                               __ptext121 0002                                 __ptext113 035D  
                               __ptext105 16E2                                 __ptext130 1BF9  
                               __ptext122 1FBC                                 __ptext114 1FDE  
                               __ptext106 1DFD                                 __ptext131 1066  
                               __ptext123 1B25                                 __ptext115 17A0  
                               __ptext107 1DE6                                 __ptext140 14E2  
                               __ptext132 1B1D                                 __ptext124 0A3E  
                               __ptext116 1D15                                 __ptext108 10BE  
                               __ptext141 1B88                                 __ptext133 1AE4  
                               __ptext125 1B94                                 __ptext117 12D6  
                               __ptext109 090C                                  ?___ftadd 0039  
                               __ptext142 1BEB                                 __ptext134 1D3D  
                               __ptext126 162D                                 __ptext118 1AFA  
                               __ptext143 1BDD                                 __ptext135 0801  
                               __ptext127 1586                                 __ptext119 11D4  
                               __ptext136 1ABE                                 __ptext128 15D9  
                               __ptext129 129F                                 __ptext138 1F9B  
                               __ptext139 1534                                 _getRxData 0AAD  
                                ?___ftdiv 0026                                  ?___ftneg 0036  
                                ?___ftmul 0026                                  ?___fttol 0046  
                   __size_of_my_MainTimer 0039                                  ?___lwdiv 0072  
                 __end_of_setRFSW_Control 13BF                          ??_setProductData 005B  
           __size_of_setSw_Initialization 0007            __size_of_Buzzer_Initialization 0003  
           __end_of_Buzzer_Initialization 1AC1                             ??_setLog_Code 005D  
                getDimmerLights_Line@line 0073                        __end_of_TouchPower 1DBB  
                     __size_of_setSw_Main 0171              CC2500_ReadStatus@status_addr 0075  
      __end_of_getDimmerIntr_DimmingValue 1D29              ??_setDimmerIntr_DimmingValue 0073  
              _getDimmerIntr_DimmingValue 1D15                    CC2500_WriteByte@loop_a 0073  
          __size_of_setDimmerLights_OnOff 00BE                                 _r_address 00CD  
           __end_of_setDimmerLights_OnOff 0780            __size_of_setDimmerLights_SwOff 0037  
          __size_of_myMain_Initialization 000F             __end_of_setDimmerLights_SwOff 12D6  
            __end_of_CC2500_patable_vaule 1066             __end_of_myMain_Initialization 1C60  
                          __size_of_getAD 001B                          ___lwdiv@quotient 0077  
                           _SwPointSelect 1DBB                       __end_of_setLED_Main 1400  
                        ??_getDelayOff_GO 0074                    ??_setRF_Initialization 0072  
             __end_of_Temp_Initialization 1ACD                         _CC2500_rfSettings 102F  
                          ___wmul@product 0076                                  _LED_Main 1BB8  
                         SwPointSelect@sw 0073                                 clear_ram0 1AF4  
                CC2500_InitPATable@loop_d 0079                     ?_setRF_TimeoutCleared 0070  
                            _my_MainTimer 1346                                 _setTxData 0F4A  
     __end_of_DimmerLights_Initialization 1B67               _DimmerLights_Initialization 1B5C  
                      _CC2500_ClearRXFIFO 1AD8                            ?_getCmd_Status 0070  
                      _CC2500_ClearTXFIFO 1ADC                  setRF_DimmerLights@lights 0061  
                                _GO_nDONE 04E9                       __end_of_setRF_Learn 1D03  
                       ??_Timeout_Counter 0072                                ?_getBuz_GO 0072  
                setRF_DimmerLights@status 0060      __size_of_setDimmerIntr_ControlStatus 0029  
             __size_of_setRFSW_AdjControl 007E       __size_of_setDimmerIntr_DimmingValue 0015  
                      _Flash_Memory_Write 1180                                ?_getRxData 0070  
                            ??_getLoad_AD 0076                                  _TMR1_ISR 1F9B  
                  CC2500_InitSetREG@temp1 0020                    CC2500_InitSetREG@temp2 0021  
                            ??_getLoad_OK 0072                                  _TMR1_Set 1BC4  
                     ?_CC2500_ClearRXFIFO 0070                       ?_CC2500_ClearTXFIFO 0070  
                      _setRF_TransceiveGO 1C60                                  _RF_Count 012E  
                    __end_of_RF_RxDisable 1C51                              ??_getTemp_AD 0076  
             __end_of_CC2500_WriteCommand 1E77                    ??_CC2500_FrequencyCabr 0078  
                                _WDT_Main 1CC0                   DlyOff_Initialization@sw 0074  
                   getSw_KeyStatus@status 0075                          __size_of_ADC_Set 0007  
                       ___wmul@multiplier 0072                       ?_Flash_Memory_Write 0070  
                   __size_of_setTemp_Main 00B2                       ?_setRF_TransceiveGO 0070  
                 __size_of_setDelayOff_GO 008C                                  _DelayOff 00C4  
                            setSw_Main@sw 002C                               ??_Load_Main 0020  
                        __size_of_IOC_ISR 000C            getMain_All_Error_Status@status 0078  
                        __size_of_IOC_Set 000A              __end_of_Flash_Memory_Erasing 1BAC  
                          ?_SwPointSelect 0070                               getAD@adcon0 0075  
                             getAD@adcon1 0072                            setLED_Main@led 0076  
                    __end_of_WDT_Clearing 0800                       __end_of_setLog_Code 1269  
                   _DlyOff_Initialization 1AE4         __size_of_getMain_All_LightsStatus 000F  
                    ??_CC2500_ClearRXFIFO 0076                 ?_getMain_All_LightsStatus 0070  
                    ??_CC2500_ClearTXFIFO 0076                 __end_of_CC2500_rfSettings 105E  
                        __size_of_RF_Main 0003                  _setDimmerIntr_Dimming_RF 1157  
             setDimmerLights_OnOff@lights 0068                  _setDimmerIntr_Dimming_Sw 10BE  
                                _Fosc_Set 1AD0                          __size_of_WDT_Set 0009  
                   setRFSW_Control@status 0066                        __end_of_getLoad_AD 0B9B  
                      __end_of_getLoad_OK 1B01                     _Switch_Initialization 1BD0  
       __size_of_getMain_All_Error_Status 002E                      ??_Flash_Memory_Write 0072  
               ?_getMain_All_Error_Status 0070                      __size_of_Buzzer_Main 0046  
                      __end_of_getTemp_AD 1346                                ?_setTxData 0070  
                            ?_Switch_Main 0070                          _CC2500_WriteByte 1E2B  
                       getLoad_AD@channel 0020       __size_of_DimmerLights_SelectPointer 0013  
                    ??_setRF_TransceiveGO 0072              Flash_Memory_Initialization@i 005B  
                                _SwDetect 00CB                               ??_Temp_Main 007A  
                        getCmd_Status@cmd 0073                          setCmd_Status@cmd 0072  
                       setRFSW_Control@sw 0067             _getMain_All_Error_Status$3648 0073  
           _getMain_All_Error_Status$3649 0075                  __end_of_getDimmer_LoadGO 1B08  
                     _Load_Initialization 1AC1          ??_getDimmerLights_ValueToPercent 0054  
         ?_getDimmerLights_ValueToPercent 0070                                 setLED@led 0075  
                            _setTemp_Main 0DE4                          __size_of___awdiv 0054  
                        __size_of___ftadd 00F6                          ?_setRFSW_Control 0070  
                        __size_of___ftdiv 00A9                          __size_of___ftneg 0009  
                        __size_of___ftmul 00B4                          __size_of___fttol 0087  
                        __size_of___lwdiv 0036                  setDimmerLights_SwOn@idle 0028  
                                ___awtoft 1FDE                          ??_LedPointSelect 0072  
                                ___ftpack 17A0             __size_of_getMain_Lights_Count 000E  
                  getDimmer_LoadGO@loadgo 0072                         getTemp_AD@channel 0077  
                            ??_setRF_Main 006A                      CC2500_WriteREG@value 0074  
                             _setLED_Main 13BF                __end_of_setRF_DimmerLights 1741  
          __size_of_getDimmer_Load_Status 0007                  ?_DelayOff_Initialization 0070  
                        getDelayOff_GO@go 0075                          getDelayOff_GO@sw 0074  
           __end_of_getDimmer_Load_Status 1B0F                          setDelayOff_GO@sw 0064  
                         ___lwdiv@divisor 0072                      ?_Load_Initialization 0070  
                         ___lwdiv@counter 0079                                  __ptext10 1ACA  
                                __ptext11 0003                                  __ptext20 1DA6  
                                __ptext12 1B7D                                  __ptext21 1AE9  
                                __ptext13 01EC                                  __ptext30 0780  
                                __ptext22 1DD0                                  __ptext14 1CF2  
                                __ptext31 1CA0                                  __ptext23 1AC7  
                                __ptext15 1108                                  __ptext40 1D91  
                                __ptext32 1E14                                  __ptext24 0600  
                                __ptext16 1F5B                                  __ptext41 1AE0  
                                __ptext33 1CE1                                  __ptext25 0AAD  
                                __ptext17 1DBB                                  __ptext50 1E5D  
                                __ptext42 1400                                  __ptext34 1C90  
                                __ptext26 1235                                  __ptext18 1BD0  
                                __ptext51 1AD4                                  __ptext43 11AA  
                                __ptext35 1C42                                  __ptext27 1CB0  
                                __ptext19 1B16                                  __ptext60 1B48  
                                __ptext52 1D7C                                  __ptext44 1F1E  
                                __ptext36 09D6                                  __ptext28 0CAE  
                                __ptext61 1AD0                                  __ptext53 1E2B  
                                __ptext45 1079                                  __ptext37 0847  
                                __ptext29 137F                                  __ptext70 1AC1  
                                __ptext62 1B0F                                  __ptext54 1AC4  
                                __ptext46 1B72                                  __ptext38 109B  
                                __ptext71 1E77                                  __ptext63 0054  
                                __ptext55 1B52                                  __ptext47 10E3  
                                __ptext39 1EC8                                  __ptext80 1B67  
                                __ptext72 1BB8                                  __ptext64 1C07  
                                __ptext56 1D03                                  __ptext48 1ADC  
                                __ptext81 1180                                  __ptext73 13BF  
                                __ptext65 1B08                                  __ptext57 1B3F  
                                __ptext49 1AD8                                  __ptext90 1EE4  
                                __ptext82 1B36                                  __ptext74 1BAC  
                                __ptext66 1B01                                  __ptext58 1BC4  
                                __ptext91 1157                                  __ptext83 1D29  
                                __ptext75 1C80                                  __ptext67 1E92  
                                __ptext59 1E43                                  __ptext92 1D67  
                                __ptext84 052F                                  __ptext76 1202  
                                __ptext68 1F01                                  __ptext93 112E  
                                __ptext85 1C33                                  __ptext77 1444  
                                __ptext69 1269                                  __ptext94 0C22  
                                __ptext86 1F3B                                  __ptext78 1BA0  
                                __ptext95 1CD0                                  __ptext87 08A8  
                                __ptext79 0453                                  __ptext96 1D52  
                                __ptext88 06C2                                  __ptext97 1C24  
                                __ptext89 1741                                  __ptext98 0971  
                                __ptext99 0E96                                  __product 0245  
                 ??_setLED_Initialization 0076                  ??_getDimmerLights_Status 0074  
            __end_of_getDimmerLights_Line 1C42              __end_of_setDimmerLights_Main 090C  
            __end_of_setDimmerLights_Line 1E14              __end_of_setDimmerLights_SwOn 1687  
                            ??_setSw_Main 002A                    ??_setRF_TimeoutCleared 0072  
            ??_setDimmerLights_DimmingRun 0075                             setLED@command 0074  
                           __size_of_main 005B                               _setRF_Learn 1CF2  
      __size_of_DimmerIntr_Initialization 0022                           ??_getCmd_Status 0072  
                __end_of_CC2500_SIDLEMode 1AE4                setDimmerLights_Main@lights 0069  
             __end_of_DelayOffPointSelect 1D52                CC2500_WriteCommand@command 0075  
                         _CC2500_ReadByte 1EC8                ?_setDimmerLights_DimmingOn 0070  
                      _CC2500_InitPATable 1F1E                  __end_of_setMemory_Modify 1CB0  
    _getAll_DimmerIntr_Dimming_Sw_RF$2204 0073      _getAll_DimmerIntr_Dimming_Sw_RF$2205 0074  
                      __end_of_setRF_Main 06C2                               ??_getBuz_GO 0074  
             __size_of_Mcu_Initialization 0012        __size_of_DimmerLights_MOSFET_IOC_1 000E  
      __size_of_DimmerLights_MOSFET_IOC_2 000E                      _CC2500_patable_vaule 105E  
                             ??_getRxData 0068                              getLoad_OK@ok 0072  
              __end_of_RF_Timeout_Counter 1D91        __size_of_DimmerLights_MOSFET_TMR_1 0052  
      __size_of_DimmerLights_MOSFET_TMR_2 0052                                  main@argc 01E6  
                                main@argv 01E8                       ?_CC2500_InitPATable 0070  
                    _getSw_KeyStatus$6400 0073                      _getSw_KeyStatus$6401 0074  
     getDimmerLights_ValueToPercent@value 0056                           _CC2500_PowerRST 1400  
                __size_of_getSw_KeyStatus 0020        __end_of_setDimmerIntr_DimmingValue 1D7C  
              _setDimmerIntr_DimmingValue 1D67               __end_of_Flash_Memory_Modify 1491  
                             _setLog_Code 1235               __end_of_Flash_Memory_Unlock 1B3F  
                         ??_SwPointSelect 0072                           _CC2500_WriteREG 1079  
                      __end_of_setSw_Main 035D                     ??_Load_Initialization 0074  
         getDimmerLights_PercentToValue@i 0057       __size_of_setDimmerLights_DimmingRun 0017  
                           _Transceive_OK 03D1                    ?_DlyOff_Initialization 0070  
                             pic14e$flags 007E              ??_getDimmerIntr_DimmingValue 0072  
              setDimmerLights_Line@lights 0072                   setDimmerLights_SwOff@sw 0074  
             __size_of_setMemory_LoopSave 0010                                  intlevel1 0000  
                    ??_CC2500_InitPATable 0077                    ?_Switch_Initialization 0070  
                         setDelayOff_GO@i 0061                           setDelayOff_GO@j 0062  
                         setDelayOff_GO@k 0063                   ??_CC2500_PowerOnInitial 007A  
  __end_of_setDimmerLights_Initialization 0003   __size_of_setDimmerLights_Initialization 0001  
          _setDimmerLights_Initialization 0002                ?_setDimmerIntr_MaxmumValue 005A  
                 ?_setTemp_Initialization 0070                               ??_setTxData 0072  
                  CC2500_InitPATable@temp 0078                     __size_of_RF_RxDisable 000F  
                       _RF_Initialization 1AC4                               getLoad_AD@i 0023  
                             getLoad_AD@j 0022                               getLoad_AD@k 0021  
                    _Flash_Memory_Erasing 1BA0                        ?_RF_Initialization 0070  
                              _SPI0Buffer 00CA                   __size_of_Exception_Main 00D1  
         __end_of_DelayOff_Initialization 1B25                     __size_of_WDT_Clearing 0002  
                   __end_of_DelayOff_Main 1B2D                       ??_RF_Initialization 0073  
                 __size_of_setMemory_Data 000B                            _setDelayOff_GO 0C22  
             ?_getDimmerIntr_DimmingValue 0070          __size_of_setControl_Lights_Table 008D  
        __size_of_setDimmerLights_Dimming 0051               getDimmer_Load_Status@status 0072  
    __size_of_Flash_Memory_Initialization 00DC               __size_of_set_TimeoutCleared 0005  
                           ??_DlyOff_Main 005D                     setMemory_Data@address 0074  
                   __end_of_DelayTime_1us 1108                   __end_of_CC2500_ReadByte 1EE4  
            __end_of_setSw_Initialization 1B1D                           _Timeout_Counter 1DD0  
         __size_of_getDimmerLights_Status 000E           getDimmerLights_ValueToPercent@i 0057  
                            _RF_RxDisable 1C42                __end_of_LED_Initialization 1BB8  
          __end_of_setTemp_Initialization 0004                   setMemory_Modify@command 0073  
               __end_of_RF_Initialization 1AC7                     __end_of_CC2500_RxData 08A8  
                   __end_of_CC2500_TxData 0A3E                     _setLoad_AH_AL_Restore 1E77  
                 __end_of_CC2500_PowerRST 1444  
